// This file is auto-generated, don't edit it. Thanks.
package client

import (
	openapi "github.com/alibabacloud-go/darabonba-openapi/v2/client"
	openapiutil "github.com/alibabacloud-go/darabonba-openapi/v2/utils"
	openplatform "github.com/alibabacloud-go/openplatform-20191219/v2/client"
	fileform "github.com/alibabacloud-go/tea-fileform/service"
	oss "github.com/alibabacloud-go/tea-oss-sdk/client"
	ossutil "github.com/alibabacloud-go/tea-oss-utils/service"
	"github.com/alibabacloud-go/tea/dara"
	"io"
)

type iColumnMetadata interface {
	dara.Model
	String() string
	GoString() string
	SetColumnDefault(v string) *ColumnMetadata
	GetColumnDefault() *string
	SetComment(v string) *ColumnMetadata
	GetComment() *string
	SetDataType(v string) *ColumnMetadata
	GetDataType() *string
	SetIsCaseSensitive(v bool) *ColumnMetadata
	GetIsCaseSensitive() *bool
	SetIsCurrency(v bool) *ColumnMetadata
	GetIsCurrency() *bool
	SetIsPrimaryKey(v bool) *ColumnMetadata
	GetIsPrimaryKey() *bool
	SetIsSigned(v bool) *ColumnMetadata
	GetIsSigned() *bool
	SetMaxLength(v int32) *ColumnMetadata
	GetMaxLength() *int32
	SetName(v string) *ColumnMetadata
	GetName() *string
	SetNullable(v bool) *ColumnMetadata
	GetNullable() *bool
	SetPrecision(v int32) *ColumnMetadata
	GetPrecision() *int32
	SetScale(v int32) *ColumnMetadata
	GetScale() *int32
	SetSchemaName(v string) *ColumnMetadata
	GetSchemaName() *string
	SetTableName(v string) *ColumnMetadata
	GetTableName() *string
	SetUdtName(v string) *ColumnMetadata
	GetUdtName() *string
}

type ColumnMetadata struct {
	ColumnDefault   *string `json:"ColumnDefault,omitempty" xml:"ColumnDefault,omitempty"`
	Comment         *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	DataType        *string `json:"DataType,omitempty" xml:"DataType,omitempty"`
	IsCaseSensitive *bool   `json:"IsCaseSensitive,omitempty" xml:"IsCaseSensitive,omitempty"`
	IsCurrency      *bool   `json:"IsCurrency,omitempty" xml:"IsCurrency,omitempty"`
	IsPrimaryKey    *bool   `json:"IsPrimaryKey,omitempty" xml:"IsPrimaryKey,omitempty"`
	IsSigned        *bool   `json:"IsSigned,omitempty" xml:"IsSigned,omitempty"`
	MaxLength       *int32  `json:"MaxLength,omitempty" xml:"MaxLength,omitempty"`
	Name            *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Nullable        *bool   `json:"Nullable,omitempty" xml:"Nullable,omitempty"`
	Precision       *int32  `json:"Precision,omitempty" xml:"Precision,omitempty"`
	Scale           *int32  `json:"Scale,omitempty" xml:"Scale,omitempty"`
	SchemaName      *string `json:"SchemaName,omitempty" xml:"SchemaName,omitempty"`
	TableName       *string `json:"TableName,omitempty" xml:"TableName,omitempty"`
	UdtName         *string `json:"UdtName,omitempty" xml:"UdtName,omitempty"`
}

func (s ColumnMetadata) String() string {
	return dara.Prettify(s)
}

func (s ColumnMetadata) GoString() string {
	return s.String()
}

func (s *ColumnMetadata) GetColumnDefault() *string {
	return s.ColumnDefault
}

func (s *ColumnMetadata) GetComment() *string {
	return s.Comment
}

func (s *ColumnMetadata) GetDataType() *string {
	return s.DataType
}

func (s *ColumnMetadata) GetIsCaseSensitive() *bool {
	return s.IsCaseSensitive
}

func (s *ColumnMetadata) GetIsCurrency() *bool {
	return s.IsCurrency
}

func (s *ColumnMetadata) GetIsPrimaryKey() *bool {
	return s.IsPrimaryKey
}

func (s *ColumnMetadata) GetIsSigned() *bool {
	return s.IsSigned
}

func (s *ColumnMetadata) GetMaxLength() *int32 {
	return s.MaxLength
}

func (s *ColumnMetadata) GetName() *string {
	return s.Name
}

func (s *ColumnMetadata) GetNullable() *bool {
	return s.Nullable
}

func (s *ColumnMetadata) GetPrecision() *int32 {
	return s.Precision
}

func (s *ColumnMetadata) GetScale() *int32 {
	return s.Scale
}

func (s *ColumnMetadata) GetSchemaName() *string {
	return s.SchemaName
}

func (s *ColumnMetadata) GetTableName() *string {
	return s.TableName
}

func (s *ColumnMetadata) GetUdtName() *string {
	return s.UdtName
}

func (s *ColumnMetadata) SetColumnDefault(v string) *ColumnMetadata {
	s.ColumnDefault = &v
	return s
}

func (s *ColumnMetadata) SetComment(v string) *ColumnMetadata {
	s.Comment = &v
	return s
}

func (s *ColumnMetadata) SetDataType(v string) *ColumnMetadata {
	s.DataType = &v
	return s
}

func (s *ColumnMetadata) SetIsCaseSensitive(v bool) *ColumnMetadata {
	s.IsCaseSensitive = &v
	return s
}

func (s *ColumnMetadata) SetIsCurrency(v bool) *ColumnMetadata {
	s.IsCurrency = &v
	return s
}

func (s *ColumnMetadata) SetIsPrimaryKey(v bool) *ColumnMetadata {
	s.IsPrimaryKey = &v
	return s
}

func (s *ColumnMetadata) SetIsSigned(v bool) *ColumnMetadata {
	s.IsSigned = &v
	return s
}

func (s *ColumnMetadata) SetMaxLength(v int32) *ColumnMetadata {
	s.MaxLength = &v
	return s
}

func (s *ColumnMetadata) SetName(v string) *ColumnMetadata {
	s.Name = &v
	return s
}

func (s *ColumnMetadata) SetNullable(v bool) *ColumnMetadata {
	s.Nullable = &v
	return s
}

func (s *ColumnMetadata) SetPrecision(v int32) *ColumnMetadata {
	s.Precision = &v
	return s
}

func (s *ColumnMetadata) SetScale(v int32) *ColumnMetadata {
	s.Scale = &v
	return s
}

func (s *ColumnMetadata) SetSchemaName(v string) *ColumnMetadata {
	s.SchemaName = &v
	return s
}

func (s *ColumnMetadata) SetTableName(v string) *ColumnMetadata {
	s.TableName = &v
	return s
}

func (s *ColumnMetadata) SetUdtName(v string) *ColumnMetadata {
	s.UdtName = &v
	return s
}

func (s *ColumnMetadata) Validate() error {
	return dara.Validate(s)
}

type iField interface {
	dara.Model
	String() string
	GoString() string
	SetBlobValue(v string) *Field
	GetBlobValue() *string
	SetBooleanValue(v bool) *Field
	GetBooleanValue() *bool
	SetDoubleValue(v float64) *Field
	GetDoubleValue() *float64
	SetIsNull(v bool) *Field
	GetIsNull() *bool
	SetLongValue(v int64) *Field
	GetLongValue() *int64
	SetStringValue(v string) *Field
	GetStringValue() *string
}

type Field struct {
	BlobValue    *string  `json:"BlobValue,omitempty" xml:"BlobValue,omitempty"`
	BooleanValue *bool    `json:"BooleanValue,omitempty" xml:"BooleanValue,omitempty"`
	DoubleValue  *float64 `json:"DoubleValue,omitempty" xml:"DoubleValue,omitempty"`
	IsNull       *bool    `json:"IsNull,omitempty" xml:"IsNull,omitempty"`
	LongValue    *int64   `json:"LongValue,omitempty" xml:"LongValue,omitempty"`
	StringValue  *string  `json:"StringValue,omitempty" xml:"StringValue,omitempty"`
}

func (s Field) String() string {
	return dara.Prettify(s)
}

func (s Field) GoString() string {
	return s.String()
}

func (s *Field) GetBlobValue() *string {
	return s.BlobValue
}

func (s *Field) GetBooleanValue() *bool {
	return s.BooleanValue
}

func (s *Field) GetDoubleValue() *float64 {
	return s.DoubleValue
}

func (s *Field) GetIsNull() *bool {
	return s.IsNull
}

func (s *Field) GetLongValue() *int64 {
	return s.LongValue
}

func (s *Field) GetStringValue() *string {
	return s.StringValue
}

func (s *Field) SetBlobValue(v string) *Field {
	s.BlobValue = &v
	return s
}

func (s *Field) SetBooleanValue(v bool) *Field {
	s.BooleanValue = &v
	return s
}

func (s *Field) SetDoubleValue(v float64) *Field {
	s.DoubleValue = &v
	return s
}

func (s *Field) SetIsNull(v bool) *Field {
	s.IsNull = &v
	return s
}

func (s *Field) SetLongValue(v int64) *Field {
	s.LongValue = &v
	return s
}

func (s *Field) SetStringValue(v string) *Field {
	s.StringValue = &v
	return s
}

func (s *Field) Validate() error {
	return dara.Validate(s)
}

type iStatementData interface {
	dara.Model
	String() string
	GoString() string
	SetCreatedAt(v string) *StatementData
	GetCreatedAt() *string
	SetDatabase(v string) *StatementData
	GetDatabase() *string
	SetId(v string) *StatementData
	GetId() *string
	SetParameters(v []*string) *StatementData
	GetParameters() []*string
	SetSecretArn(v string) *StatementData
	GetSecretArn() *string
	SetSql(v string) *StatementData
	GetSql() *string
	SetSqls(v []*string) *StatementData
	GetSqls() []*string
	SetStatus(v string) *StatementData
	GetStatus() *string
	SetUpdatedAt(v string) *StatementData
	GetUpdatedAt() *string
}

type StatementData struct {
	CreatedAt  *string   `json:"CreatedAt,omitempty" xml:"CreatedAt,omitempty"`
	Database   *string   `json:"Database,omitempty" xml:"Database,omitempty"`
	Id         *string   `json:"Id,omitempty" xml:"Id,omitempty"`
	Parameters []*string `json:"Parameters,omitempty" xml:"Parameters,omitempty" type:"Repeated"`
	SecretArn  *string   `json:"SecretArn,omitempty" xml:"SecretArn,omitempty"`
	Sql        *string   `json:"Sql,omitempty" xml:"Sql,omitempty"`
	Sqls       []*string `json:"Sqls,omitempty" xml:"Sqls,omitempty" type:"Repeated"`
	Status     *string   `json:"Status,omitempty" xml:"Status,omitempty"`
	UpdatedAt  *string   `json:"UpdatedAt,omitempty" xml:"UpdatedAt,omitempty"`
}

func (s StatementData) String() string {
	return dara.Prettify(s)
}

func (s StatementData) GoString() string {
	return s.String()
}

func (s *StatementData) GetCreatedAt() *string {
	return s.CreatedAt
}

func (s *StatementData) GetDatabase() *string {
	return s.Database
}

func (s *StatementData) GetId() *string {
	return s.Id
}

func (s *StatementData) GetParameters() []*string {
	return s.Parameters
}

func (s *StatementData) GetSecretArn() *string {
	return s.SecretArn
}

func (s *StatementData) GetSql() *string {
	return s.Sql
}

func (s *StatementData) GetSqls() []*string {
	return s.Sqls
}

func (s *StatementData) GetStatus() *string {
	return s.Status
}

func (s *StatementData) GetUpdatedAt() *string {
	return s.UpdatedAt
}

func (s *StatementData) SetCreatedAt(v string) *StatementData {
	s.CreatedAt = &v
	return s
}

func (s *StatementData) SetDatabase(v string) *StatementData {
	s.Database = &v
	return s
}

func (s *StatementData) SetId(v string) *StatementData {
	s.Id = &v
	return s
}

func (s *StatementData) SetParameters(v []*string) *StatementData {
	s.Parameters = v
	return s
}

func (s *StatementData) SetSecretArn(v string) *StatementData {
	s.SecretArn = &v
	return s
}

func (s *StatementData) SetSql(v string) *StatementData {
	s.Sql = &v
	return s
}

func (s *StatementData) SetSqls(v []*string) *StatementData {
	s.Sqls = v
	return s
}

func (s *StatementData) SetStatus(v string) *StatementData {
	s.Status = &v
	return s
}

func (s *StatementData) SetUpdatedAt(v string) *StatementData {
	s.UpdatedAt = &v
	return s
}

func (s *StatementData) Validate() error {
	return dara.Validate(s)
}

type iAllocateInstancePublicConnectionRequest interface {
	dara.Model
	String() string
	GoString() string
	SetAddressType(v string) *AllocateInstancePublicConnectionRequest
	GetAddressType() *string
	SetConnectionStringPrefix(v string) *AllocateInstancePublicConnectionRequest
	GetConnectionStringPrefix() *string
	SetDBInstanceId(v string) *AllocateInstancePublicConnectionRequest
	GetDBInstanceId() *string
	SetOwnerId(v int64) *AllocateInstancePublicConnectionRequest
	GetOwnerId() *int64
	SetPort(v string) *AllocateInstancePublicConnectionRequest
	GetPort() *string
	SetResourceOwnerAccount(v string) *AllocateInstancePublicConnectionRequest
	GetResourceOwnerAccount() *string
	SetResourceOwnerId(v int64) *AllocateInstancePublicConnectionRequest
	GetResourceOwnerId() *int64
}

type AllocateInstancePublicConnectionRequest struct {
	// The network type of the endpoint. Valid values:
	//
	// 	- **primary**: primary endpoint
	//
	// 	- **cluster**: instance endpoint. This value is supported only for an instance that contains multiple coordinator nodes.
	//
	// >  The default value is primary.
	//
	// example:
	//
	// primary
	AddressType *string `json:"AddressType,omitempty" xml:"AddressType,omitempty"`
	// The prefix of the endpoint.
	//
	// Specify a prefix for the endpoint. Example: `gp-bp12ga6v69h86****`. In this example, the endpoint is `gp-bp12ga6v69h86****.gpdb.rds.aliyuncs.com`.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	ConnectionStringPrefix *string `json:"ConnectionStringPrefix,omitempty" xml:"ConnectionStringPrefix,omitempty"`
	// The ID of the instance.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the details of all AnalyticDB for PostgreSQL instances in a specific region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The port number. Example: 5432.
	//
	// This parameter is required.
	//
	// example:
	//
	// 5432
	Port                 *string `json:"Port,omitempty" xml:"Port,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s AllocateInstancePublicConnectionRequest) String() string {
	return dara.Prettify(s)
}

func (s AllocateInstancePublicConnectionRequest) GoString() string {
	return s.String()
}

func (s *AllocateInstancePublicConnectionRequest) GetAddressType() *string {
	return s.AddressType
}

func (s *AllocateInstancePublicConnectionRequest) GetConnectionStringPrefix() *string {
	return s.ConnectionStringPrefix
}

func (s *AllocateInstancePublicConnectionRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *AllocateInstancePublicConnectionRequest) GetOwnerId() *int64 {
	return s.OwnerId
}

func (s *AllocateInstancePublicConnectionRequest) GetPort() *string {
	return s.Port
}

func (s *AllocateInstancePublicConnectionRequest) GetResourceOwnerAccount() *string {
	return s.ResourceOwnerAccount
}

func (s *AllocateInstancePublicConnectionRequest) GetResourceOwnerId() *int64 {
	return s.ResourceOwnerId
}

func (s *AllocateInstancePublicConnectionRequest) SetAddressType(v string) *AllocateInstancePublicConnectionRequest {
	s.AddressType = &v
	return s
}

func (s *AllocateInstancePublicConnectionRequest) SetConnectionStringPrefix(v string) *AllocateInstancePublicConnectionRequest {
	s.ConnectionStringPrefix = &v
	return s
}

func (s *AllocateInstancePublicConnectionRequest) SetDBInstanceId(v string) *AllocateInstancePublicConnectionRequest {
	s.DBInstanceId = &v
	return s
}

func (s *AllocateInstancePublicConnectionRequest) SetOwnerId(v int64) *AllocateInstancePublicConnectionRequest {
	s.OwnerId = &v
	return s
}

func (s *AllocateInstancePublicConnectionRequest) SetPort(v string) *AllocateInstancePublicConnectionRequest {
	s.Port = &v
	return s
}

func (s *AllocateInstancePublicConnectionRequest) SetResourceOwnerAccount(v string) *AllocateInstancePublicConnectionRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *AllocateInstancePublicConnectionRequest) SetResourceOwnerId(v int64) *AllocateInstancePublicConnectionRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *AllocateInstancePublicConnectionRequest) Validate() error {
	return dara.Validate(s)
}

type iAllocateInstancePublicConnectionResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetRequestId(v string) *AllocateInstancePublicConnectionResponseBody
	GetRequestId() *string
}

type AllocateInstancePublicConnectionResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// ADD6EA90-EECB-4C12-9F26-0B6DB587****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AllocateInstancePublicConnectionResponseBody) String() string {
	return dara.Prettify(s)
}

func (s AllocateInstancePublicConnectionResponseBody) GoString() string {
	return s.String()
}

func (s *AllocateInstancePublicConnectionResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *AllocateInstancePublicConnectionResponseBody) SetRequestId(v string) *AllocateInstancePublicConnectionResponseBody {
	s.RequestId = &v
	return s
}

func (s *AllocateInstancePublicConnectionResponseBody) Validate() error {
	return dara.Validate(s)
}

type iAllocateInstancePublicConnectionResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *AllocateInstancePublicConnectionResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *AllocateInstancePublicConnectionResponse
	GetStatusCode() *int32
	SetBody(v *AllocateInstancePublicConnectionResponseBody) *AllocateInstancePublicConnectionResponse
	GetBody() *AllocateInstancePublicConnectionResponseBody
}

type AllocateInstancePublicConnectionResponse struct {
	Headers    map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AllocateInstancePublicConnectionResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AllocateInstancePublicConnectionResponse) String() string {
	return dara.Prettify(s)
}

func (s AllocateInstancePublicConnectionResponse) GoString() string {
	return s.String()
}

func (s *AllocateInstancePublicConnectionResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *AllocateInstancePublicConnectionResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *AllocateInstancePublicConnectionResponse) GetBody() *AllocateInstancePublicConnectionResponseBody {
	return s.Body
}

func (s *AllocateInstancePublicConnectionResponse) SetHeaders(v map[string]*string) *AllocateInstancePublicConnectionResponse {
	s.Headers = v
	return s
}

func (s *AllocateInstancePublicConnectionResponse) SetStatusCode(v int32) *AllocateInstancePublicConnectionResponse {
	s.StatusCode = &v
	return s
}

func (s *AllocateInstancePublicConnectionResponse) SetBody(v *AllocateInstancePublicConnectionResponseBody) *AllocateInstancePublicConnectionResponse {
	s.Body = v
	return s
}

func (s *AllocateInstancePublicConnectionResponse) Validate() error {
	return dara.Validate(s)
}

type iBindDBResourceGroupWithRoleRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *BindDBResourceGroupWithRoleRequest
	GetDBInstanceId() *string
	SetOwnerId(v int64) *BindDBResourceGroupWithRoleRequest
	GetOwnerId() *int64
	SetResourceGroupName(v string) *BindDBResourceGroupWithRoleRequest
	GetResourceGroupName() *string
	SetRoleList(v []*string) *BindDBResourceGroupWithRoleRequest
	GetRoleList() []*string
}

type BindDBResourceGroupWithRoleRequest struct {
	// The instance ID.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The name of the resource group.
	//
	// This parameter is required.
	//
	// example:
	//
	// testgroup
	ResourceGroupName *string `json:"ResourceGroupName,omitempty" xml:"ResourceGroupName,omitempty"`
	// The roles.
	//
	// This parameter is required.
	RoleList []*string `json:"RoleList,omitempty" xml:"RoleList,omitempty" type:"Repeated"`
}

func (s BindDBResourceGroupWithRoleRequest) String() string {
	return dara.Prettify(s)
}

func (s BindDBResourceGroupWithRoleRequest) GoString() string {
	return s.String()
}

func (s *BindDBResourceGroupWithRoleRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *BindDBResourceGroupWithRoleRequest) GetOwnerId() *int64 {
	return s.OwnerId
}

func (s *BindDBResourceGroupWithRoleRequest) GetResourceGroupName() *string {
	return s.ResourceGroupName
}

func (s *BindDBResourceGroupWithRoleRequest) GetRoleList() []*string {
	return s.RoleList
}

func (s *BindDBResourceGroupWithRoleRequest) SetDBInstanceId(v string) *BindDBResourceGroupWithRoleRequest {
	s.DBInstanceId = &v
	return s
}

func (s *BindDBResourceGroupWithRoleRequest) SetOwnerId(v int64) *BindDBResourceGroupWithRoleRequest {
	s.OwnerId = &v
	return s
}

func (s *BindDBResourceGroupWithRoleRequest) SetResourceGroupName(v string) *BindDBResourceGroupWithRoleRequest {
	s.ResourceGroupName = &v
	return s
}

func (s *BindDBResourceGroupWithRoleRequest) SetRoleList(v []*string) *BindDBResourceGroupWithRoleRequest {
	s.RoleList = v
	return s
}

func (s *BindDBResourceGroupWithRoleRequest) Validate() error {
	return dara.Validate(s)
}

type iBindDBResourceGroupWithRoleShrinkRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *BindDBResourceGroupWithRoleShrinkRequest
	GetDBInstanceId() *string
	SetOwnerId(v int64) *BindDBResourceGroupWithRoleShrinkRequest
	GetOwnerId() *int64
	SetResourceGroupName(v string) *BindDBResourceGroupWithRoleShrinkRequest
	GetResourceGroupName() *string
	SetRoleListShrink(v string) *BindDBResourceGroupWithRoleShrinkRequest
	GetRoleListShrink() *string
}

type BindDBResourceGroupWithRoleShrinkRequest struct {
	// The instance ID.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The name of the resource group.
	//
	// This parameter is required.
	//
	// example:
	//
	// testgroup
	ResourceGroupName *string `json:"ResourceGroupName,omitempty" xml:"ResourceGroupName,omitempty"`
	// The roles.
	//
	// This parameter is required.
	RoleListShrink *string `json:"RoleList,omitempty" xml:"RoleList,omitempty"`
}

func (s BindDBResourceGroupWithRoleShrinkRequest) String() string {
	return dara.Prettify(s)
}

func (s BindDBResourceGroupWithRoleShrinkRequest) GoString() string {
	return s.String()
}

func (s *BindDBResourceGroupWithRoleShrinkRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *BindDBResourceGroupWithRoleShrinkRequest) GetOwnerId() *int64 {
	return s.OwnerId
}

func (s *BindDBResourceGroupWithRoleShrinkRequest) GetResourceGroupName() *string {
	return s.ResourceGroupName
}

func (s *BindDBResourceGroupWithRoleShrinkRequest) GetRoleListShrink() *string {
	return s.RoleListShrink
}

func (s *BindDBResourceGroupWithRoleShrinkRequest) SetDBInstanceId(v string) *BindDBResourceGroupWithRoleShrinkRequest {
	s.DBInstanceId = &v
	return s
}

func (s *BindDBResourceGroupWithRoleShrinkRequest) SetOwnerId(v int64) *BindDBResourceGroupWithRoleShrinkRequest {
	s.OwnerId = &v
	return s
}

func (s *BindDBResourceGroupWithRoleShrinkRequest) SetResourceGroupName(v string) *BindDBResourceGroupWithRoleShrinkRequest {
	s.ResourceGroupName = &v
	return s
}

func (s *BindDBResourceGroupWithRoleShrinkRequest) SetRoleListShrink(v string) *BindDBResourceGroupWithRoleShrinkRequest {
	s.RoleListShrink = &v
	return s
}

func (s *BindDBResourceGroupWithRoleShrinkRequest) Validate() error {
	return dara.Validate(s)
}

type iBindDBResourceGroupWithRoleResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetRequestId(v string) *BindDBResourceGroupWithRoleResponseBody
	GetRequestId() *string
}

type BindDBResourceGroupWithRoleResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s BindDBResourceGroupWithRoleResponseBody) String() string {
	return dara.Prettify(s)
}

func (s BindDBResourceGroupWithRoleResponseBody) GoString() string {
	return s.String()
}

func (s *BindDBResourceGroupWithRoleResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *BindDBResourceGroupWithRoleResponseBody) SetRequestId(v string) *BindDBResourceGroupWithRoleResponseBody {
	s.RequestId = &v
	return s
}

func (s *BindDBResourceGroupWithRoleResponseBody) Validate() error {
	return dara.Validate(s)
}

type iBindDBResourceGroupWithRoleResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *BindDBResourceGroupWithRoleResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *BindDBResourceGroupWithRoleResponse
	GetStatusCode() *int32
	SetBody(v *BindDBResourceGroupWithRoleResponseBody) *BindDBResourceGroupWithRoleResponse
	GetBody() *BindDBResourceGroupWithRoleResponseBody
}

type BindDBResourceGroupWithRoleResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *BindDBResourceGroupWithRoleResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s BindDBResourceGroupWithRoleResponse) String() string {
	return dara.Prettify(s)
}

func (s BindDBResourceGroupWithRoleResponse) GoString() string {
	return s.String()
}

func (s *BindDBResourceGroupWithRoleResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *BindDBResourceGroupWithRoleResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *BindDBResourceGroupWithRoleResponse) GetBody() *BindDBResourceGroupWithRoleResponseBody {
	return s.Body
}

func (s *BindDBResourceGroupWithRoleResponse) SetHeaders(v map[string]*string) *BindDBResourceGroupWithRoleResponse {
	s.Headers = v
	return s
}

func (s *BindDBResourceGroupWithRoleResponse) SetStatusCode(v int32) *BindDBResourceGroupWithRoleResponse {
	s.StatusCode = &v
	return s
}

func (s *BindDBResourceGroupWithRoleResponse) SetBody(v *BindDBResourceGroupWithRoleResponseBody) *BindDBResourceGroupWithRoleResponse {
	s.Body = v
	return s
}

func (s *BindDBResourceGroupWithRoleResponse) Validate() error {
	return dara.Validate(s)
}

type iCancelCreateIndexJobRequest interface {
	dara.Model
	String() string
	GoString() string
	SetCollection(v string) *CancelCreateIndexJobRequest
	GetCollection() *string
	SetDBInstanceId(v string) *CancelCreateIndexJobRequest
	GetDBInstanceId() *string
	SetJobId(v string) *CancelCreateIndexJobRequest
	GetJobId() *string
	SetNamespace(v string) *CancelCreateIndexJobRequest
	GetNamespace() *string
	SetNamespacePassword(v string) *CancelCreateIndexJobRequest
	GetNamespacePassword() *string
	SetOwnerId(v int64) *CancelCreateIndexJobRequest
	GetOwnerId() *int64
	SetRegionId(v string) *CancelCreateIndexJobRequest
	GetRegionId() *string
	SetWorkspaceId(v string) *CancelCreateIndexJobRequest
	GetWorkspaceId() *string
}

type CancelCreateIndexJobRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// testcollection
	Collection *string `json:"Collection,omitempty" xml:"Collection,omitempty"`
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 231460f8-75dc-405e-a669-0c5204887e91
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// mynamespace
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// testpassword
	NamespacePassword *string `json:"NamespacePassword,omitempty" xml:"NamespacePassword,omitempty"`
	OwnerId           *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// example:
	//
	// gp-ws-*****
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s CancelCreateIndexJobRequest) String() string {
	return dara.Prettify(s)
}

func (s CancelCreateIndexJobRequest) GoString() string {
	return s.String()
}

func (s *CancelCreateIndexJobRequest) GetCollection() *string {
	return s.Collection
}

func (s *CancelCreateIndexJobRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *CancelCreateIndexJobRequest) GetJobId() *string {
	return s.JobId
}

func (s *CancelCreateIndexJobRequest) GetNamespace() *string {
	return s.Namespace
}

func (s *CancelCreateIndexJobRequest) GetNamespacePassword() *string {
	return s.NamespacePassword
}

func (s *CancelCreateIndexJobRequest) GetOwnerId() *int64 {
	return s.OwnerId
}

func (s *CancelCreateIndexJobRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *CancelCreateIndexJobRequest) GetWorkspaceId() *string {
	return s.WorkspaceId
}

func (s *CancelCreateIndexJobRequest) SetCollection(v string) *CancelCreateIndexJobRequest {
	s.Collection = &v
	return s
}

func (s *CancelCreateIndexJobRequest) SetDBInstanceId(v string) *CancelCreateIndexJobRequest {
	s.DBInstanceId = &v
	return s
}

func (s *CancelCreateIndexJobRequest) SetJobId(v string) *CancelCreateIndexJobRequest {
	s.JobId = &v
	return s
}

func (s *CancelCreateIndexJobRequest) SetNamespace(v string) *CancelCreateIndexJobRequest {
	s.Namespace = &v
	return s
}

func (s *CancelCreateIndexJobRequest) SetNamespacePassword(v string) *CancelCreateIndexJobRequest {
	s.NamespacePassword = &v
	return s
}

func (s *CancelCreateIndexJobRequest) SetOwnerId(v int64) *CancelCreateIndexJobRequest {
	s.OwnerId = &v
	return s
}

func (s *CancelCreateIndexJobRequest) SetRegionId(v string) *CancelCreateIndexJobRequest {
	s.RegionId = &v
	return s
}

func (s *CancelCreateIndexJobRequest) SetWorkspaceId(v string) *CancelCreateIndexJobRequest {
	s.WorkspaceId = &v
	return s
}

func (s *CancelCreateIndexJobRequest) Validate() error {
	return dara.Validate(s)
}

type iCancelCreateIndexJobResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetMessage(v string) *CancelCreateIndexJobResponseBody
	GetMessage() *string
	SetRequestId(v string) *CancelCreateIndexJobResponseBody
	GetRequestId() *string
	SetStatus(v string) *CancelCreateIndexJobResponseBody
	GetStatus() *string
}

type CancelCreateIndexJobResponseBody struct {
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s CancelCreateIndexJobResponseBody) String() string {
	return dara.Prettify(s)
}

func (s CancelCreateIndexJobResponseBody) GoString() string {
	return s.String()
}

func (s *CancelCreateIndexJobResponseBody) GetMessage() *string {
	return s.Message
}

func (s *CancelCreateIndexJobResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *CancelCreateIndexJobResponseBody) GetStatus() *string {
	return s.Status
}

func (s *CancelCreateIndexJobResponseBody) SetMessage(v string) *CancelCreateIndexJobResponseBody {
	s.Message = &v
	return s
}

func (s *CancelCreateIndexJobResponseBody) SetRequestId(v string) *CancelCreateIndexJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *CancelCreateIndexJobResponseBody) SetStatus(v string) *CancelCreateIndexJobResponseBody {
	s.Status = &v
	return s
}

func (s *CancelCreateIndexJobResponseBody) Validate() error {
	return dara.Validate(s)
}

type iCancelCreateIndexJobResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *CancelCreateIndexJobResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *CancelCreateIndexJobResponse
	GetStatusCode() *int32
	SetBody(v *CancelCreateIndexJobResponseBody) *CancelCreateIndexJobResponse
	GetBody() *CancelCreateIndexJobResponseBody
}

type CancelCreateIndexJobResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CancelCreateIndexJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CancelCreateIndexJobResponse) String() string {
	return dara.Prettify(s)
}

func (s CancelCreateIndexJobResponse) GoString() string {
	return s.String()
}

func (s *CancelCreateIndexJobResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *CancelCreateIndexJobResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *CancelCreateIndexJobResponse) GetBody() *CancelCreateIndexJobResponseBody {
	return s.Body
}

func (s *CancelCreateIndexJobResponse) SetHeaders(v map[string]*string) *CancelCreateIndexJobResponse {
	s.Headers = v
	return s
}

func (s *CancelCreateIndexJobResponse) SetStatusCode(v int32) *CancelCreateIndexJobResponse {
	s.StatusCode = &v
	return s
}

func (s *CancelCreateIndexJobResponse) SetBody(v *CancelCreateIndexJobResponseBody) *CancelCreateIndexJobResponse {
	s.Body = v
	return s
}

func (s *CancelCreateIndexJobResponse) Validate() error {
	return dara.Validate(s)
}

type iCancelUploadDocumentJobRequest interface {
	dara.Model
	String() string
	GoString() string
	SetCollection(v string) *CancelUploadDocumentJobRequest
	GetCollection() *string
	SetDBInstanceId(v string) *CancelUploadDocumentJobRequest
	GetDBInstanceId() *string
	SetJobId(v string) *CancelUploadDocumentJobRequest
	GetJobId() *string
	SetNamespace(v string) *CancelUploadDocumentJobRequest
	GetNamespace() *string
	SetNamespacePassword(v string) *CancelUploadDocumentJobRequest
	GetNamespacePassword() *string
	SetOwnerId(v int64) *CancelUploadDocumentJobRequest
	GetOwnerId() *int64
	SetRegionId(v string) *CancelUploadDocumentJobRequest
	GetRegionId() *string
}

type CancelUploadDocumentJobRequest struct {
	// The name of the document collection.
	//
	// >  You can call the [CreateDocumentCollection](https://help.aliyun.com/document_detail/2618448.html) operation to create a document collection and call the [ListDocumentCollections](https://help.aliyun.com/document_detail/2618452.html) operation to query a list of document collections.
	//
	// This parameter is required.
	//
	// example:
	//
	// document
	Collection *string `json:"Collection,omitempty" xml:"Collection,omitempty"`
	// The ID of the instance for which vector engine optimization is enabled.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The ID of the document upload job. You can call the `UploadDocumentAsync` operation to query the job ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 231460f8-75dc-405e-a669-0c5204887e91
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// The name of the namespace. Default value: public.
	//
	// >  You can call the CreateNamespace operation to create a namespace and call the ListNamespaces operation to query a list of namespaces.
	//
	// example:
	//
	// mynamespace
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// The password of the namespace.
	//
	// >  The value of this parameter is specified when you call the CreateNamespace operation.
	//
	// This parameter is required.
	//
	// example:
	//
	// testpassword
	NamespacePassword *string `json:"NamespacePassword,omitempty" xml:"NamespacePassword,omitempty"`
	OwnerId           *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The region ID of the instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s CancelUploadDocumentJobRequest) String() string {
	return dara.Prettify(s)
}

func (s CancelUploadDocumentJobRequest) GoString() string {
	return s.String()
}

func (s *CancelUploadDocumentJobRequest) GetCollection() *string {
	return s.Collection
}

func (s *CancelUploadDocumentJobRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *CancelUploadDocumentJobRequest) GetJobId() *string {
	return s.JobId
}

func (s *CancelUploadDocumentJobRequest) GetNamespace() *string {
	return s.Namespace
}

func (s *CancelUploadDocumentJobRequest) GetNamespacePassword() *string {
	return s.NamespacePassword
}

func (s *CancelUploadDocumentJobRequest) GetOwnerId() *int64 {
	return s.OwnerId
}

func (s *CancelUploadDocumentJobRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *CancelUploadDocumentJobRequest) SetCollection(v string) *CancelUploadDocumentJobRequest {
	s.Collection = &v
	return s
}

func (s *CancelUploadDocumentJobRequest) SetDBInstanceId(v string) *CancelUploadDocumentJobRequest {
	s.DBInstanceId = &v
	return s
}

func (s *CancelUploadDocumentJobRequest) SetJobId(v string) *CancelUploadDocumentJobRequest {
	s.JobId = &v
	return s
}

func (s *CancelUploadDocumentJobRequest) SetNamespace(v string) *CancelUploadDocumentJobRequest {
	s.Namespace = &v
	return s
}

func (s *CancelUploadDocumentJobRequest) SetNamespacePassword(v string) *CancelUploadDocumentJobRequest {
	s.NamespacePassword = &v
	return s
}

func (s *CancelUploadDocumentJobRequest) SetOwnerId(v int64) *CancelUploadDocumentJobRequest {
	s.OwnerId = &v
	return s
}

func (s *CancelUploadDocumentJobRequest) SetRegionId(v string) *CancelUploadDocumentJobRequest {
	s.RegionId = &v
	return s
}

func (s *CancelUploadDocumentJobRequest) Validate() error {
	return dara.Validate(s)
}

type iCancelUploadDocumentJobResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetMessage(v string) *CancelUploadDocumentJobResponseBody
	GetMessage() *string
	SetRequestId(v string) *CancelUploadDocumentJobResponseBody
	GetRequestId() *string
	SetStatus(v string) *CancelUploadDocumentJobResponseBody
	GetStatus() *string
}

type CancelUploadDocumentJobResponseBody struct {
	// The returned message.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The status of the operation. Valid values:
	//
	// 	- **success**
	//
	// 	- **fail**
	//
	// example:
	//
	// success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s CancelUploadDocumentJobResponseBody) String() string {
	return dara.Prettify(s)
}

func (s CancelUploadDocumentJobResponseBody) GoString() string {
	return s.String()
}

func (s *CancelUploadDocumentJobResponseBody) GetMessage() *string {
	return s.Message
}

func (s *CancelUploadDocumentJobResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *CancelUploadDocumentJobResponseBody) GetStatus() *string {
	return s.Status
}

func (s *CancelUploadDocumentJobResponseBody) SetMessage(v string) *CancelUploadDocumentJobResponseBody {
	s.Message = &v
	return s
}

func (s *CancelUploadDocumentJobResponseBody) SetRequestId(v string) *CancelUploadDocumentJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *CancelUploadDocumentJobResponseBody) SetStatus(v string) *CancelUploadDocumentJobResponseBody {
	s.Status = &v
	return s
}

func (s *CancelUploadDocumentJobResponseBody) Validate() error {
	return dara.Validate(s)
}

type iCancelUploadDocumentJobResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *CancelUploadDocumentJobResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *CancelUploadDocumentJobResponse
	GetStatusCode() *int32
	SetBody(v *CancelUploadDocumentJobResponseBody) *CancelUploadDocumentJobResponse
	GetBody() *CancelUploadDocumentJobResponseBody
}

type CancelUploadDocumentJobResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CancelUploadDocumentJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CancelUploadDocumentJobResponse) String() string {
	return dara.Prettify(s)
}

func (s CancelUploadDocumentJobResponse) GoString() string {
	return s.String()
}

func (s *CancelUploadDocumentJobResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *CancelUploadDocumentJobResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *CancelUploadDocumentJobResponse) GetBody() *CancelUploadDocumentJobResponseBody {
	return s.Body
}

func (s *CancelUploadDocumentJobResponse) SetHeaders(v map[string]*string) *CancelUploadDocumentJobResponse {
	s.Headers = v
	return s
}

func (s *CancelUploadDocumentJobResponse) SetStatusCode(v int32) *CancelUploadDocumentJobResponse {
	s.StatusCode = &v
	return s
}

func (s *CancelUploadDocumentJobResponse) SetBody(v *CancelUploadDocumentJobResponseBody) *CancelUploadDocumentJobResponse {
	s.Body = v
	return s
}

func (s *CancelUploadDocumentJobResponse) Validate() error {
	return dara.Validate(s)
}

type iCancelUpsertCollectionDataJobRequest interface {
	dara.Model
	String() string
	GoString() string
	SetCollection(v string) *CancelUpsertCollectionDataJobRequest
	GetCollection() *string
	SetDBInstanceId(v string) *CancelUpsertCollectionDataJobRequest
	GetDBInstanceId() *string
	SetJobId(v string) *CancelUpsertCollectionDataJobRequest
	GetJobId() *string
	SetNamespace(v string) *CancelUpsertCollectionDataJobRequest
	GetNamespace() *string
	SetNamespacePassword(v string) *CancelUpsertCollectionDataJobRequest
	GetNamespacePassword() *string
	SetOwnerId(v int64) *CancelUpsertCollectionDataJobRequest
	GetOwnerId() *int64
	SetRegionId(v string) *CancelUpsertCollectionDataJobRequest
	GetRegionId() *string
	SetWorkspaceId(v string) *CancelUpsertCollectionDataJobRequest
	GetWorkspaceId() *string
}

type CancelUpsertCollectionDataJobRequest struct {
	// The name of the collection.
	//
	// >  You can call the [ListCollections](https://help.aliyun.com/document_detail/2401503.html) operation to query a list of collections.
	//
	// This parameter is required.
	//
	// example:
	//
	// document
	Collection *string `json:"Collection,omitempty" xml:"Collection,omitempty"`
	// The instance ID.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The ID of the vector data upload job. You can call the `UpsertCollectionDataAsync` operation to query the job ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// bf8f7bc4-9276-44f7-9c22-1d06edc8dfd1
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// The name of the namespace. Default value: public.
	//
	// >  You can call the CreateNamespace operation to create a namespace and call the ListNamespaces operation to query a list of namespaces.
	//
	// example:
	//
	// mynamespace
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// The password of the namespace.
	//
	// >  The value of this parameter is specified when you call the CreateNamespace operation.
	//
	// This parameter is required.
	//
	// example:
	//
	// testpassword
	NamespacePassword *string `json:"NamespacePassword,omitempty" xml:"NamespacePassword,omitempty"`
	OwnerId           *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The region ID of the instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the workspace that consists of multiple AnalyticDB for PostgreSQL instances. You must specify one of the WorkspaceId and DBInstanceId parameters. If you specify both parameters, the WorkspaceId parameter takes effect.
	//
	// example:
	//
	// gp-ws-*****
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s CancelUpsertCollectionDataJobRequest) String() string {
	return dara.Prettify(s)
}

func (s CancelUpsertCollectionDataJobRequest) GoString() string {
	return s.String()
}

func (s *CancelUpsertCollectionDataJobRequest) GetCollection() *string {
	return s.Collection
}

func (s *CancelUpsertCollectionDataJobRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *CancelUpsertCollectionDataJobRequest) GetJobId() *string {
	return s.JobId
}

func (s *CancelUpsertCollectionDataJobRequest) GetNamespace() *string {
	return s.Namespace
}

func (s *CancelUpsertCollectionDataJobRequest) GetNamespacePassword() *string {
	return s.NamespacePassword
}

func (s *CancelUpsertCollectionDataJobRequest) GetOwnerId() *int64 {
	return s.OwnerId
}

func (s *CancelUpsertCollectionDataJobRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *CancelUpsertCollectionDataJobRequest) GetWorkspaceId() *string {
	return s.WorkspaceId
}

func (s *CancelUpsertCollectionDataJobRequest) SetCollection(v string) *CancelUpsertCollectionDataJobRequest {
	s.Collection = &v
	return s
}

func (s *CancelUpsertCollectionDataJobRequest) SetDBInstanceId(v string) *CancelUpsertCollectionDataJobRequest {
	s.DBInstanceId = &v
	return s
}

func (s *CancelUpsertCollectionDataJobRequest) SetJobId(v string) *CancelUpsertCollectionDataJobRequest {
	s.JobId = &v
	return s
}

func (s *CancelUpsertCollectionDataJobRequest) SetNamespace(v string) *CancelUpsertCollectionDataJobRequest {
	s.Namespace = &v
	return s
}

func (s *CancelUpsertCollectionDataJobRequest) SetNamespacePassword(v string) *CancelUpsertCollectionDataJobRequest {
	s.NamespacePassword = &v
	return s
}

func (s *CancelUpsertCollectionDataJobRequest) SetOwnerId(v int64) *CancelUpsertCollectionDataJobRequest {
	s.OwnerId = &v
	return s
}

func (s *CancelUpsertCollectionDataJobRequest) SetRegionId(v string) *CancelUpsertCollectionDataJobRequest {
	s.RegionId = &v
	return s
}

func (s *CancelUpsertCollectionDataJobRequest) SetWorkspaceId(v string) *CancelUpsertCollectionDataJobRequest {
	s.WorkspaceId = &v
	return s
}

func (s *CancelUpsertCollectionDataJobRequest) Validate() error {
	return dara.Validate(s)
}

type iCancelUpsertCollectionDataJobResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetMessage(v string) *CancelUpsertCollectionDataJobResponseBody
	GetMessage() *string
	SetRequestId(v string) *CancelUpsertCollectionDataJobResponseBody
	GetRequestId() *string
	SetStatus(v string) *CancelUpsertCollectionDataJobResponseBody
	GetStatus() *string
}

type CancelUpsertCollectionDataJobResponseBody struct {
	// The returned message.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The status of the operation. Valid values:
	//
	// 	- **success**
	//
	// 	- **fail**
	//
	// example:
	//
	// success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s CancelUpsertCollectionDataJobResponseBody) String() string {
	return dara.Prettify(s)
}

func (s CancelUpsertCollectionDataJobResponseBody) GoString() string {
	return s.String()
}

func (s *CancelUpsertCollectionDataJobResponseBody) GetMessage() *string {
	return s.Message
}

func (s *CancelUpsertCollectionDataJobResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *CancelUpsertCollectionDataJobResponseBody) GetStatus() *string {
	return s.Status
}

func (s *CancelUpsertCollectionDataJobResponseBody) SetMessage(v string) *CancelUpsertCollectionDataJobResponseBody {
	s.Message = &v
	return s
}

func (s *CancelUpsertCollectionDataJobResponseBody) SetRequestId(v string) *CancelUpsertCollectionDataJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *CancelUpsertCollectionDataJobResponseBody) SetStatus(v string) *CancelUpsertCollectionDataJobResponseBody {
	s.Status = &v
	return s
}

func (s *CancelUpsertCollectionDataJobResponseBody) Validate() error {
	return dara.Validate(s)
}

type iCancelUpsertCollectionDataJobResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *CancelUpsertCollectionDataJobResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *CancelUpsertCollectionDataJobResponse
	GetStatusCode() *int32
	SetBody(v *CancelUpsertCollectionDataJobResponseBody) *CancelUpsertCollectionDataJobResponse
	GetBody() *CancelUpsertCollectionDataJobResponseBody
}

type CancelUpsertCollectionDataJobResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CancelUpsertCollectionDataJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CancelUpsertCollectionDataJobResponse) String() string {
	return dara.Prettify(s)
}

func (s CancelUpsertCollectionDataJobResponse) GoString() string {
	return s.String()
}

func (s *CancelUpsertCollectionDataJobResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *CancelUpsertCollectionDataJobResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *CancelUpsertCollectionDataJobResponse) GetBody() *CancelUpsertCollectionDataJobResponseBody {
	return s.Body
}

func (s *CancelUpsertCollectionDataJobResponse) SetHeaders(v map[string]*string) *CancelUpsertCollectionDataJobResponse {
	s.Headers = v
	return s
}

func (s *CancelUpsertCollectionDataJobResponse) SetStatusCode(v int32) *CancelUpsertCollectionDataJobResponse {
	s.StatusCode = &v
	return s
}

func (s *CancelUpsertCollectionDataJobResponse) SetBody(v *CancelUpsertCollectionDataJobResponseBody) *CancelUpsertCollectionDataJobResponse {
	s.Body = v
	return s
}

func (s *CancelUpsertCollectionDataJobResponse) Validate() error {
	return dara.Validate(s)
}

type iCheckHadoopDataSourceRequest interface {
	dara.Model
	String() string
	GoString() string
	SetCheckDir(v string) *CheckHadoopDataSourceRequest
	GetCheckDir() *string
	SetDBInstanceId(v string) *CheckHadoopDataSourceRequest
	GetDBInstanceId() *string
	SetDataSourceId(v string) *CheckHadoopDataSourceRequest
	GetDataSourceId() *string
	SetRegionId(v string) *CheckHadoopDataSourceRequest
	GetRegionId() *string
}

type CheckHadoopDataSourceRequest struct {
	// The Hadoop path that you want to check.
	//
	// This parameter is required.
	//
	// example:
	//
	// tmp
	CheckDir *string `json:"CheckDir,omitempty" xml:"CheckDir,omitempty"`
	// The instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The data source ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 123
	DataSourceId *string `json:"DataSourceId,omitempty" xml:"DataSourceId,omitempty"`
	// The region ID.
	//
	// >  You can call the [DescribeRegions](https://help.aliyun.com/document_detail/86912.html) operation to query the most recent region list.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s CheckHadoopDataSourceRequest) String() string {
	return dara.Prettify(s)
}

func (s CheckHadoopDataSourceRequest) GoString() string {
	return s.String()
}

func (s *CheckHadoopDataSourceRequest) GetCheckDir() *string {
	return s.CheckDir
}

func (s *CheckHadoopDataSourceRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *CheckHadoopDataSourceRequest) GetDataSourceId() *string {
	return s.DataSourceId
}

func (s *CheckHadoopDataSourceRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *CheckHadoopDataSourceRequest) SetCheckDir(v string) *CheckHadoopDataSourceRequest {
	s.CheckDir = &v
	return s
}

func (s *CheckHadoopDataSourceRequest) SetDBInstanceId(v string) *CheckHadoopDataSourceRequest {
	s.DBInstanceId = &v
	return s
}

func (s *CheckHadoopDataSourceRequest) SetDataSourceId(v string) *CheckHadoopDataSourceRequest {
	s.DataSourceId = &v
	return s
}

func (s *CheckHadoopDataSourceRequest) SetRegionId(v string) *CheckHadoopDataSourceRequest {
	s.RegionId = &v
	return s
}

func (s *CheckHadoopDataSourceRequest) Validate() error {
	return dara.Validate(s)
}

type iCheckHadoopDataSourceResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetMessage(v string) *CheckHadoopDataSourceResponseBody
	GetMessage() *string
	SetRequestId(v string) *CheckHadoopDataSourceResponseBody
	GetRequestId() *string
	SetStatus(v string) *CheckHadoopDataSourceResponseBody
	GetStatus() *string
}

type CheckHadoopDataSourceResponseBody struct {
	// The returned message. If the service failed, an error message is returned. Otherwise, a pair of double quotation marks ("") is returned.
	//
	// example:
	//
	// serivce unavaliable
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// B4CAF581-2AC7-41AD-8940-D56DF7AADF5B
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The status of the service. Valid values:
	//
	// 	- Running
	//
	// 	- Failed
	//
	// example:
	//
	// Running
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s CheckHadoopDataSourceResponseBody) String() string {
	return dara.Prettify(s)
}

func (s CheckHadoopDataSourceResponseBody) GoString() string {
	return s.String()
}

func (s *CheckHadoopDataSourceResponseBody) GetMessage() *string {
	return s.Message
}

func (s *CheckHadoopDataSourceResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *CheckHadoopDataSourceResponseBody) GetStatus() *string {
	return s.Status
}

func (s *CheckHadoopDataSourceResponseBody) SetMessage(v string) *CheckHadoopDataSourceResponseBody {
	s.Message = &v
	return s
}

func (s *CheckHadoopDataSourceResponseBody) SetRequestId(v string) *CheckHadoopDataSourceResponseBody {
	s.RequestId = &v
	return s
}

func (s *CheckHadoopDataSourceResponseBody) SetStatus(v string) *CheckHadoopDataSourceResponseBody {
	s.Status = &v
	return s
}

func (s *CheckHadoopDataSourceResponseBody) Validate() error {
	return dara.Validate(s)
}

type iCheckHadoopDataSourceResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *CheckHadoopDataSourceResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *CheckHadoopDataSourceResponse
	GetStatusCode() *int32
	SetBody(v *CheckHadoopDataSourceResponseBody) *CheckHadoopDataSourceResponse
	GetBody() *CheckHadoopDataSourceResponseBody
}

type CheckHadoopDataSourceResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CheckHadoopDataSourceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CheckHadoopDataSourceResponse) String() string {
	return dara.Prettify(s)
}

func (s CheckHadoopDataSourceResponse) GoString() string {
	return s.String()
}

func (s *CheckHadoopDataSourceResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *CheckHadoopDataSourceResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *CheckHadoopDataSourceResponse) GetBody() *CheckHadoopDataSourceResponseBody {
	return s.Body
}

func (s *CheckHadoopDataSourceResponse) SetHeaders(v map[string]*string) *CheckHadoopDataSourceResponse {
	s.Headers = v
	return s
}

func (s *CheckHadoopDataSourceResponse) SetStatusCode(v int32) *CheckHadoopDataSourceResponse {
	s.StatusCode = &v
	return s
}

func (s *CheckHadoopDataSourceResponse) SetBody(v *CheckHadoopDataSourceResponseBody) *CheckHadoopDataSourceResponse {
	s.Body = v
	return s
}

func (s *CheckHadoopDataSourceResponse) Validate() error {
	return dara.Validate(s)
}

type iCheckHadoopNetConnectionRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *CheckHadoopNetConnectionRequest
	GetDBInstanceId() *string
	SetDataSourceId(v string) *CheckHadoopNetConnectionRequest
	GetDataSourceId() *string
	SetEmrInstanceId(v string) *CheckHadoopNetConnectionRequest
	GetEmrInstanceId() *string
	SetRegionId(v string) *CheckHadoopNetConnectionRequest
	GetRegionId() *string
}

type CheckHadoopNetConnectionRequest struct {
	// Instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// 1. Either DataSourceId or EmrInstanceId must be specified as input, otherwise an error will occur.
	//
	// 2. If both of the above parameters are specified, EmrInstanceId will be used preferentially.
	//
	// 3. If the data source specified by DataSourceId is a self-built Hadoop cluster, an error will occur directly.
	//
	// example:
	//
	// 126
	DataSourceId *string `json:"DataSourceId,omitempty" xml:"DataSourceId,omitempty"`
	// EMR instance ID.
	//
	// example:
	//
	// c-xxx
	EmrInstanceId *string `json:"EmrInstanceId,omitempty" xml:"EmrInstanceId,omitempty"`
	// Region ID.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s CheckHadoopNetConnectionRequest) String() string {
	return dara.Prettify(s)
}

func (s CheckHadoopNetConnectionRequest) GoString() string {
	return s.String()
}

func (s *CheckHadoopNetConnectionRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *CheckHadoopNetConnectionRequest) GetDataSourceId() *string {
	return s.DataSourceId
}

func (s *CheckHadoopNetConnectionRequest) GetEmrInstanceId() *string {
	return s.EmrInstanceId
}

func (s *CheckHadoopNetConnectionRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *CheckHadoopNetConnectionRequest) SetDBInstanceId(v string) *CheckHadoopNetConnectionRequest {
	s.DBInstanceId = &v
	return s
}

func (s *CheckHadoopNetConnectionRequest) SetDataSourceId(v string) *CheckHadoopNetConnectionRequest {
	s.DataSourceId = &v
	return s
}

func (s *CheckHadoopNetConnectionRequest) SetEmrInstanceId(v string) *CheckHadoopNetConnectionRequest {
	s.EmrInstanceId = &v
	return s
}

func (s *CheckHadoopNetConnectionRequest) SetRegionId(v string) *CheckHadoopNetConnectionRequest {
	s.RegionId = &v
	return s
}

func (s *CheckHadoopNetConnectionRequest) Validate() error {
	return dara.Validate(s)
}

type iCheckHadoopNetConnectionResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetConnectionMessage(v string) *CheckHadoopNetConnectionResponseBody
	GetConnectionMessage() *string
	SetConnectionStatus(v string) *CheckHadoopNetConnectionResponseBody
	GetConnectionStatus() *string
	SetRequestId(v string) *CheckHadoopNetConnectionResponseBody
	GetRequestId() *string
}

type CheckHadoopNetConnectionResponseBody struct {
	// Return message: Returns error information if the connection fails, otherwise returns an empty string ("").
	//
	// example:
	//
	// connection timeout
	ConnectionMessage *string `json:"ConnectionMessage,omitempty" xml:"ConnectionMessage,omitempty"`
	// Connection status:
	//
	// - Network connected: Success
	//
	// - Network not connected: Failed
	//
	// example:
	//
	// Success
	ConnectionStatus *string `json:"ConnectionStatus,omitempty" xml:"ConnectionStatus,omitempty"`
	// Request ID.
	//
	// example:
	//
	// B4CAF581-2AC7-41AD-8940-D56DF7AADF5B
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CheckHadoopNetConnectionResponseBody) String() string {
	return dara.Prettify(s)
}

func (s CheckHadoopNetConnectionResponseBody) GoString() string {
	return s.String()
}

func (s *CheckHadoopNetConnectionResponseBody) GetConnectionMessage() *string {
	return s.ConnectionMessage
}

func (s *CheckHadoopNetConnectionResponseBody) GetConnectionStatus() *string {
	return s.ConnectionStatus
}

func (s *CheckHadoopNetConnectionResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *CheckHadoopNetConnectionResponseBody) SetConnectionMessage(v string) *CheckHadoopNetConnectionResponseBody {
	s.ConnectionMessage = &v
	return s
}

func (s *CheckHadoopNetConnectionResponseBody) SetConnectionStatus(v string) *CheckHadoopNetConnectionResponseBody {
	s.ConnectionStatus = &v
	return s
}

func (s *CheckHadoopNetConnectionResponseBody) SetRequestId(v string) *CheckHadoopNetConnectionResponseBody {
	s.RequestId = &v
	return s
}

func (s *CheckHadoopNetConnectionResponseBody) Validate() error {
	return dara.Validate(s)
}

type iCheckHadoopNetConnectionResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *CheckHadoopNetConnectionResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *CheckHadoopNetConnectionResponse
	GetStatusCode() *int32
	SetBody(v *CheckHadoopNetConnectionResponseBody) *CheckHadoopNetConnectionResponse
	GetBody() *CheckHadoopNetConnectionResponseBody
}

type CheckHadoopNetConnectionResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CheckHadoopNetConnectionResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CheckHadoopNetConnectionResponse) String() string {
	return dara.Prettify(s)
}

func (s CheckHadoopNetConnectionResponse) GoString() string {
	return s.String()
}

func (s *CheckHadoopNetConnectionResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *CheckHadoopNetConnectionResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *CheckHadoopNetConnectionResponse) GetBody() *CheckHadoopNetConnectionResponseBody {
	return s.Body
}

func (s *CheckHadoopNetConnectionResponse) SetHeaders(v map[string]*string) *CheckHadoopNetConnectionResponse {
	s.Headers = v
	return s
}

func (s *CheckHadoopNetConnectionResponse) SetStatusCode(v int32) *CheckHadoopNetConnectionResponse {
	s.StatusCode = &v
	return s
}

func (s *CheckHadoopNetConnectionResponse) SetBody(v *CheckHadoopNetConnectionResponseBody) *CheckHadoopNetConnectionResponse {
	s.Body = v
	return s
}

func (s *CheckHadoopNetConnectionResponse) Validate() error {
	return dara.Validate(s)
}

type iCheckJDBCSourceNetConnectionRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *CheckJDBCSourceNetConnectionRequest
	GetDBInstanceId() *string
	SetDataSourceId(v string) *CheckJDBCSourceNetConnectionRequest
	GetDataSourceId() *string
	SetJdbcConnectionString(v string) *CheckJDBCSourceNetConnectionRequest
	GetJdbcConnectionString() *string
	SetRegionId(v string) *CheckJDBCSourceNetConnectionRequest
	GetRegionId() *string
}

type CheckJDBCSourceNetConnectionRequest struct {
	// Instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// Either DataSourceId or JdbcConnectionString must be specified as input, otherwise an error will occur. If both parameters are specified, JdbcConnectionString will be used preferentially.
	//
	// example:
	//
	// 123
	DataSourceId *string `json:"DataSourceId,omitempty" xml:"DataSourceId,omitempty"`
	// JDBC connection string.
	//
	// example:
	//
	// jdbc:mysql://rm-xxx.mysql.rds.aliyuncs.com:3306/testadmin
	JdbcConnectionString *string `json:"JdbcConnectionString,omitempty" xml:"JdbcConnectionString,omitempty"`
	// The ID of the region where the instance is located.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s CheckJDBCSourceNetConnectionRequest) String() string {
	return dara.Prettify(s)
}

func (s CheckJDBCSourceNetConnectionRequest) GoString() string {
	return s.String()
}

func (s *CheckJDBCSourceNetConnectionRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *CheckJDBCSourceNetConnectionRequest) GetDataSourceId() *string {
	return s.DataSourceId
}

func (s *CheckJDBCSourceNetConnectionRequest) GetJdbcConnectionString() *string {
	return s.JdbcConnectionString
}

func (s *CheckJDBCSourceNetConnectionRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *CheckJDBCSourceNetConnectionRequest) SetDBInstanceId(v string) *CheckJDBCSourceNetConnectionRequest {
	s.DBInstanceId = &v
	return s
}

func (s *CheckJDBCSourceNetConnectionRequest) SetDataSourceId(v string) *CheckJDBCSourceNetConnectionRequest {
	s.DataSourceId = &v
	return s
}

func (s *CheckJDBCSourceNetConnectionRequest) SetJdbcConnectionString(v string) *CheckJDBCSourceNetConnectionRequest {
	s.JdbcConnectionString = &v
	return s
}

func (s *CheckJDBCSourceNetConnectionRequest) SetRegionId(v string) *CheckJDBCSourceNetConnectionRequest {
	s.RegionId = &v
	return s
}

func (s *CheckJDBCSourceNetConnectionRequest) Validate() error {
	return dara.Validate(s)
}

type iCheckJDBCSourceNetConnectionResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetConnectionMessage(v string) *CheckJDBCSourceNetConnectionResponseBody
	GetConnectionMessage() *string
	SetConnectionStatus(v string) *CheckJDBCSourceNetConnectionResponseBody
	GetConnectionStatus() *string
	SetRequestId(v string) *CheckJDBCSourceNetConnectionResponseBody
	GetRequestId() *string
}

type CheckJDBCSourceNetConnectionResponseBody struct {
	// Return message: Error message returned when the connection fails, otherwise returns an empty string ("").
	//
	// example:
	//
	// connection timeout
	ConnectionMessage *string `json:"ConnectionMessage,omitempty" xml:"ConnectionMessage,omitempty"`
	// Service status:
	//
	// - Network connected: Success
	//
	// - Network not connected: Failed
	//
	// example:
	//
	// Success
	ConnectionStatus *string `json:"ConnectionStatus,omitempty" xml:"ConnectionStatus,omitempty"`
	// Request ID.
	//
	// example:
	//
	// B4CAF581-2AC7-41AD-8940-D56DF7AADF5B
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CheckJDBCSourceNetConnectionResponseBody) String() string {
	return dara.Prettify(s)
}

func (s CheckJDBCSourceNetConnectionResponseBody) GoString() string {
	return s.String()
}

func (s *CheckJDBCSourceNetConnectionResponseBody) GetConnectionMessage() *string {
	return s.ConnectionMessage
}

func (s *CheckJDBCSourceNetConnectionResponseBody) GetConnectionStatus() *string {
	return s.ConnectionStatus
}

func (s *CheckJDBCSourceNetConnectionResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *CheckJDBCSourceNetConnectionResponseBody) SetConnectionMessage(v string) *CheckJDBCSourceNetConnectionResponseBody {
	s.ConnectionMessage = &v
	return s
}

func (s *CheckJDBCSourceNetConnectionResponseBody) SetConnectionStatus(v string) *CheckJDBCSourceNetConnectionResponseBody {
	s.ConnectionStatus = &v
	return s
}

func (s *CheckJDBCSourceNetConnectionResponseBody) SetRequestId(v string) *CheckJDBCSourceNetConnectionResponseBody {
	s.RequestId = &v
	return s
}

func (s *CheckJDBCSourceNetConnectionResponseBody) Validate() error {
	return dara.Validate(s)
}

type iCheckJDBCSourceNetConnectionResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *CheckJDBCSourceNetConnectionResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *CheckJDBCSourceNetConnectionResponse
	GetStatusCode() *int32
	SetBody(v *CheckJDBCSourceNetConnectionResponseBody) *CheckJDBCSourceNetConnectionResponse
	GetBody() *CheckJDBCSourceNetConnectionResponseBody
}

type CheckJDBCSourceNetConnectionResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CheckJDBCSourceNetConnectionResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CheckJDBCSourceNetConnectionResponse) String() string {
	return dara.Prettify(s)
}

func (s CheckJDBCSourceNetConnectionResponse) GoString() string {
	return s.String()
}

func (s *CheckJDBCSourceNetConnectionResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *CheckJDBCSourceNetConnectionResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *CheckJDBCSourceNetConnectionResponse) GetBody() *CheckJDBCSourceNetConnectionResponseBody {
	return s.Body
}

func (s *CheckJDBCSourceNetConnectionResponse) SetHeaders(v map[string]*string) *CheckJDBCSourceNetConnectionResponse {
	s.Headers = v
	return s
}

func (s *CheckJDBCSourceNetConnectionResponse) SetStatusCode(v int32) *CheckJDBCSourceNetConnectionResponse {
	s.StatusCode = &v
	return s
}

func (s *CheckJDBCSourceNetConnectionResponse) SetBody(v *CheckJDBCSourceNetConnectionResponseBody) *CheckJDBCSourceNetConnectionResponse {
	s.Body = v
	return s
}

func (s *CheckJDBCSourceNetConnectionResponse) Validate() error {
	return dara.Validate(s)
}

type iCheckServiceLinkedRoleRequest interface {
	dara.Model
	String() string
	GoString() string
	SetRegionId(v string) *CheckServiceLinkedRoleRequest
	GetRegionId() *string
}

type CheckServiceLinkedRoleRequest struct {
	// The ID of the region. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/86912.html) operation to query the most recent region list.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s CheckServiceLinkedRoleRequest) String() string {
	return dara.Prettify(s)
}

func (s CheckServiceLinkedRoleRequest) GoString() string {
	return s.String()
}

func (s *CheckServiceLinkedRoleRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *CheckServiceLinkedRoleRequest) SetRegionId(v string) *CheckServiceLinkedRoleRequest {
	s.RegionId = &v
	return s
}

func (s *CheckServiceLinkedRoleRequest) Validate() error {
	return dara.Validate(s)
}

type iCheckServiceLinkedRoleResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetHasServiceLinkedRole(v string) *CheckServiceLinkedRoleResponseBody
	GetHasServiceLinkedRole() *string
	SetRegionId(v string) *CheckServiceLinkedRoleResponseBody
	GetRegionId() *string
	SetRequestId(v string) *CheckServiceLinkedRoleResponseBody
	GetRequestId() *string
}

type CheckServiceLinkedRoleResponseBody struct {
	// Indicates whether an SLR is created.
	//
	// example:
	//
	// true
	HasServiceLinkedRole *string `json:"HasServiceLinkedRole,omitempty" xml:"HasServiceLinkedRole,omitempty"`
	// The ID of the region.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// B4CAF581-2AC7-41AD-8940-D56DF7AADF5B
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CheckServiceLinkedRoleResponseBody) String() string {
	return dara.Prettify(s)
}

func (s CheckServiceLinkedRoleResponseBody) GoString() string {
	return s.String()
}

func (s *CheckServiceLinkedRoleResponseBody) GetHasServiceLinkedRole() *string {
	return s.HasServiceLinkedRole
}

func (s *CheckServiceLinkedRoleResponseBody) GetRegionId() *string {
	return s.RegionId
}

func (s *CheckServiceLinkedRoleResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *CheckServiceLinkedRoleResponseBody) SetHasServiceLinkedRole(v string) *CheckServiceLinkedRoleResponseBody {
	s.HasServiceLinkedRole = &v
	return s
}

func (s *CheckServiceLinkedRoleResponseBody) SetRegionId(v string) *CheckServiceLinkedRoleResponseBody {
	s.RegionId = &v
	return s
}

func (s *CheckServiceLinkedRoleResponseBody) SetRequestId(v string) *CheckServiceLinkedRoleResponseBody {
	s.RequestId = &v
	return s
}

func (s *CheckServiceLinkedRoleResponseBody) Validate() error {
	return dara.Validate(s)
}

type iCheckServiceLinkedRoleResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *CheckServiceLinkedRoleResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *CheckServiceLinkedRoleResponse
	GetStatusCode() *int32
	SetBody(v *CheckServiceLinkedRoleResponseBody) *CheckServiceLinkedRoleResponse
	GetBody() *CheckServiceLinkedRoleResponseBody
}

type CheckServiceLinkedRoleResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CheckServiceLinkedRoleResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CheckServiceLinkedRoleResponse) String() string {
	return dara.Prettify(s)
}

func (s CheckServiceLinkedRoleResponse) GoString() string {
	return s.String()
}

func (s *CheckServiceLinkedRoleResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *CheckServiceLinkedRoleResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *CheckServiceLinkedRoleResponse) GetBody() *CheckServiceLinkedRoleResponseBody {
	return s.Body
}

func (s *CheckServiceLinkedRoleResponse) SetHeaders(v map[string]*string) *CheckServiceLinkedRoleResponse {
	s.Headers = v
	return s
}

func (s *CheckServiceLinkedRoleResponse) SetStatusCode(v int32) *CheckServiceLinkedRoleResponse {
	s.StatusCode = &v
	return s
}

func (s *CheckServiceLinkedRoleResponse) SetBody(v *CheckServiceLinkedRoleResponseBody) *CheckServiceLinkedRoleResponse {
	s.Body = v
	return s
}

func (s *CheckServiceLinkedRoleResponse) Validate() error {
	return dara.Validate(s)
}

type iCloneDBInstanceRequest interface {
	dara.Model
	String() string
	GoString() string
	SetBackupId(v string) *CloneDBInstanceRequest
	GetBackupId() *string
	SetDBInstanceId(v string) *CloneDBInstanceRequest
	GetDBInstanceId() *string
	SetSrcDbInstanceName(v string) *CloneDBInstanceRequest
	GetSrcDbInstanceName() *string
}

type CloneDBInstanceRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 1111111111
	BackupId *string `json:"BackupId,omitempty" xml:"BackupId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// gp-bp***************
	SrcDbInstanceName *string `json:"SrcDbInstanceName,omitempty" xml:"SrcDbInstanceName,omitempty"`
}

func (s CloneDBInstanceRequest) String() string {
	return dara.Prettify(s)
}

func (s CloneDBInstanceRequest) GoString() string {
	return s.String()
}

func (s *CloneDBInstanceRequest) GetBackupId() *string {
	return s.BackupId
}

func (s *CloneDBInstanceRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *CloneDBInstanceRequest) GetSrcDbInstanceName() *string {
	return s.SrcDbInstanceName
}

func (s *CloneDBInstanceRequest) SetBackupId(v string) *CloneDBInstanceRequest {
	s.BackupId = &v
	return s
}

func (s *CloneDBInstanceRequest) SetDBInstanceId(v string) *CloneDBInstanceRequest {
	s.DBInstanceId = &v
	return s
}

func (s *CloneDBInstanceRequest) SetSrcDbInstanceName(v string) *CloneDBInstanceRequest {
	s.SrcDbInstanceName = &v
	return s
}

func (s *CloneDBInstanceRequest) Validate() error {
	return dara.Validate(s)
}

type iCloneDBInstanceResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetRequestId(v string) *CloneDBInstanceResponseBody
	GetRequestId() *string
}

type CloneDBInstanceResponseBody struct {
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CloneDBInstanceResponseBody) String() string {
	return dara.Prettify(s)
}

func (s CloneDBInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *CloneDBInstanceResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *CloneDBInstanceResponseBody) SetRequestId(v string) *CloneDBInstanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *CloneDBInstanceResponseBody) Validate() error {
	return dara.Validate(s)
}

type iCloneDBInstanceResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *CloneDBInstanceResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *CloneDBInstanceResponse
	GetStatusCode() *int32
	SetBody(v *CloneDBInstanceResponseBody) *CloneDBInstanceResponse
	GetBody() *CloneDBInstanceResponseBody
}

type CloneDBInstanceResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CloneDBInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CloneDBInstanceResponse) String() string {
	return dara.Prettify(s)
}

func (s CloneDBInstanceResponse) GoString() string {
	return s.String()
}

func (s *CloneDBInstanceResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *CloneDBInstanceResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *CloneDBInstanceResponse) GetBody() *CloneDBInstanceResponseBody {
	return s.Body
}

func (s *CloneDBInstanceResponse) SetHeaders(v map[string]*string) *CloneDBInstanceResponse {
	s.Headers = v
	return s
}

func (s *CloneDBInstanceResponse) SetStatusCode(v int32) *CloneDBInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *CloneDBInstanceResponse) SetBody(v *CloneDBInstanceResponseBody) *CloneDBInstanceResponse {
	s.Body = v
	return s
}

func (s *CloneDBInstanceResponse) Validate() error {
	return dara.Validate(s)
}

type iCreateAccountRequest interface {
	dara.Model
	String() string
	GoString() string
	SetAccountDescription(v string) *CreateAccountRequest
	GetAccountDescription() *string
	SetAccountName(v string) *CreateAccountRequest
	GetAccountName() *string
	SetAccountPassword(v string) *CreateAccountRequest
	GetAccountPassword() *string
	SetAccountType(v string) *CreateAccountRequest
	GetAccountType() *string
	SetDBInstanceId(v string) *CreateAccountRequest
	GetDBInstanceId() *string
	SetDatabaseName(v string) *CreateAccountRequest
	GetDatabaseName() *string
	SetOwnerId(v int64) *CreateAccountRequest
	GetOwnerId() *int64
}

type CreateAccountRequest struct {
	// The description of the initial account.
	//
	// example:
	//
	// testacc02
	AccountDescription *string `json:"AccountDescription,omitempty" xml:"AccountDescription,omitempty"`
	// The name of the initial account.
	//
	// 	- The name can contain lowercase letters, digits, and underscores (_).
	//
	// 	- The name must start with a lowercase letter and end with a lowercase letter or a digit.
	//
	// 	- The name cannot start with gp.
	//
	// 	- The name must be 2 to 16 characters in length.
	//
	// This parameter is required.
	//
	// example:
	//
	// testacc02
	AccountName *string `json:"AccountName,omitempty" xml:"AccountName,omitempty"`
	// The password of the initial account.
	//
	// 	- The password must contain at least three of the following character types: uppercase letters, lowercase letters, digits, and special characters.
	//
	// 	- Special characters include `! @ # $ % ^ & 	- ( ) _ + - =`
	//
	// 	- The password must be 8 to 32 characters in length.
	//
	// This parameter is required.
	//
	// example:
	//
	// Pw123456
	AccountPassword *string `json:"AccountPassword,omitempty" xml:"AccountPassword,omitempty"`
	// The type of the initial account. Default value: Super, which specifies a privileged account. To create a standard account, set the value to Normal.
	//
	// example:
	//
	// Super
	AccountType *string `json:"AccountType,omitempty" xml:"AccountType,omitempty"`
	// The ID of the instance.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the details of all AnalyticDB for PostgreSQL instances in a specific region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp***************
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The name of the database.
	//
	// example:
	//
	// test01
	DatabaseName *string `json:"DatabaseName,omitempty" xml:"DatabaseName,omitempty"`
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s CreateAccountRequest) String() string {
	return dara.Prettify(s)
}

func (s CreateAccountRequest) GoString() string {
	return s.String()
}

func (s *CreateAccountRequest) GetAccountDescription() *string {
	return s.AccountDescription
}

func (s *CreateAccountRequest) GetAccountName() *string {
	return s.AccountName
}

func (s *CreateAccountRequest) GetAccountPassword() *string {
	return s.AccountPassword
}

func (s *CreateAccountRequest) GetAccountType() *string {
	return s.AccountType
}

func (s *CreateAccountRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *CreateAccountRequest) GetDatabaseName() *string {
	return s.DatabaseName
}

func (s *CreateAccountRequest) GetOwnerId() *int64 {
	return s.OwnerId
}

func (s *CreateAccountRequest) SetAccountDescription(v string) *CreateAccountRequest {
	s.AccountDescription = &v
	return s
}

func (s *CreateAccountRequest) SetAccountName(v string) *CreateAccountRequest {
	s.AccountName = &v
	return s
}

func (s *CreateAccountRequest) SetAccountPassword(v string) *CreateAccountRequest {
	s.AccountPassword = &v
	return s
}

func (s *CreateAccountRequest) SetAccountType(v string) *CreateAccountRequest {
	s.AccountType = &v
	return s
}

func (s *CreateAccountRequest) SetDBInstanceId(v string) *CreateAccountRequest {
	s.DBInstanceId = &v
	return s
}

func (s *CreateAccountRequest) SetDatabaseName(v string) *CreateAccountRequest {
	s.DatabaseName = &v
	return s
}

func (s *CreateAccountRequest) SetOwnerId(v int64) *CreateAccountRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateAccountRequest) Validate() error {
	return dara.Validate(s)
}

type iCreateAccountResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetRequestId(v string) *CreateAccountResponseBody
	GetRequestId() *string
}

type CreateAccountResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// D4D4BE8A-DD46-440A-BFCD-EE**********
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateAccountResponseBody) String() string {
	return dara.Prettify(s)
}

func (s CreateAccountResponseBody) GoString() string {
	return s.String()
}

func (s *CreateAccountResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *CreateAccountResponseBody) SetRequestId(v string) *CreateAccountResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateAccountResponseBody) Validate() error {
	return dara.Validate(s)
}

type iCreateAccountResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *CreateAccountResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *CreateAccountResponse
	GetStatusCode() *int32
	SetBody(v *CreateAccountResponseBody) *CreateAccountResponse
	GetBody() *CreateAccountResponseBody
}

type CreateAccountResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateAccountResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateAccountResponse) String() string {
	return dara.Prettify(s)
}

func (s CreateAccountResponse) GoString() string {
	return s.String()
}

func (s *CreateAccountResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *CreateAccountResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *CreateAccountResponse) GetBody() *CreateAccountResponseBody {
	return s.Body
}

func (s *CreateAccountResponse) SetHeaders(v map[string]*string) *CreateAccountResponse {
	s.Headers = v
	return s
}

func (s *CreateAccountResponse) SetStatusCode(v int32) *CreateAccountResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateAccountResponse) SetBody(v *CreateAccountResponseBody) *CreateAccountResponse {
	s.Body = v
	return s
}

func (s *CreateAccountResponse) Validate() error {
	return dara.Validate(s)
}

type iCreateBackupRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *CreateBackupRequest
	GetDBInstanceId() *string
}

type CreateBackupRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
}

func (s CreateBackupRequest) String() string {
	return dara.Prettify(s)
}

func (s CreateBackupRequest) GoString() string {
	return s.String()
}

func (s *CreateBackupRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *CreateBackupRequest) SetDBInstanceId(v string) *CreateBackupRequest {
	s.DBInstanceId = &v
	return s
}

func (s *CreateBackupRequest) Validate() error {
	return dara.Validate(s)
}

type iCreateBackupResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetBackupJobId(v int64) *CreateBackupResponseBody
	GetBackupJobId() *int64
	SetRequestId(v string) *CreateBackupResponseBody
	GetRequestId() *string
}

type CreateBackupResponseBody struct {
	// example:
	//
	// 123
	BackupJobId *int64 `json:"BackupJobId,omitempty" xml:"BackupJobId,omitempty"`
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateBackupResponseBody) String() string {
	return dara.Prettify(s)
}

func (s CreateBackupResponseBody) GoString() string {
	return s.String()
}

func (s *CreateBackupResponseBody) GetBackupJobId() *int64 {
	return s.BackupJobId
}

func (s *CreateBackupResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *CreateBackupResponseBody) SetBackupJobId(v int64) *CreateBackupResponseBody {
	s.BackupJobId = &v
	return s
}

func (s *CreateBackupResponseBody) SetRequestId(v string) *CreateBackupResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateBackupResponseBody) Validate() error {
	return dara.Validate(s)
}

type iCreateBackupResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *CreateBackupResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *CreateBackupResponse
	GetStatusCode() *int32
	SetBody(v *CreateBackupResponseBody) *CreateBackupResponse
	GetBody() *CreateBackupResponseBody
}

type CreateBackupResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateBackupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateBackupResponse) String() string {
	return dara.Prettify(s)
}

func (s CreateBackupResponse) GoString() string {
	return s.String()
}

func (s *CreateBackupResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *CreateBackupResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *CreateBackupResponse) GetBody() *CreateBackupResponseBody {
	return s.Body
}

func (s *CreateBackupResponse) SetHeaders(v map[string]*string) *CreateBackupResponse {
	s.Headers = v
	return s
}

func (s *CreateBackupResponse) SetStatusCode(v int32) *CreateBackupResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateBackupResponse) SetBody(v *CreateBackupResponseBody) *CreateBackupResponse {
	s.Body = v
	return s
}

func (s *CreateBackupResponse) Validate() error {
	return dara.Validate(s)
}

type iCreateCollectionRequest interface {
	dara.Model
	String() string
	GoString() string
	SetCollection(v string) *CreateCollectionRequest
	GetCollection() *string
	SetDBInstanceId(v string) *CreateCollectionRequest
	GetDBInstanceId() *string
	SetDimension(v int64) *CreateCollectionRequest
	GetDimension() *int64
	SetExternalStorage(v int32) *CreateCollectionRequest
	GetExternalStorage() *int32
	SetFullTextRetrievalFields(v string) *CreateCollectionRequest
	GetFullTextRetrievalFields() *string
	SetHnswEfConstruction(v string) *CreateCollectionRequest
	GetHnswEfConstruction() *string
	SetHnswM(v int32) *CreateCollectionRequest
	GetHnswM() *int32
	SetManagerAccount(v string) *CreateCollectionRequest
	GetManagerAccount() *string
	SetManagerAccountPassword(v string) *CreateCollectionRequest
	GetManagerAccountPassword() *string
	SetMetadata(v string) *CreateCollectionRequest
	GetMetadata() *string
	SetMetadataIndices(v string) *CreateCollectionRequest
	GetMetadataIndices() *string
	SetMetrics(v string) *CreateCollectionRequest
	GetMetrics() *string
	SetNamespace(v string) *CreateCollectionRequest
	GetNamespace() *string
	SetOwnerId(v int64) *CreateCollectionRequest
	GetOwnerId() *int64
	SetParser(v string) *CreateCollectionRequest
	GetParser() *string
	SetPqEnable(v int32) *CreateCollectionRequest
	GetPqEnable() *int32
	SetRegionId(v string) *CreateCollectionRequest
	GetRegionId() *string
	SetSparseVectorIndexConfig(v *CreateCollectionRequestSparseVectorIndexConfig) *CreateCollectionRequest
	GetSparseVectorIndexConfig() *CreateCollectionRequestSparseVectorIndexConfig
	SetSupportSparse(v bool) *CreateCollectionRequest
	GetSupportSparse() *bool
	SetWorkspaceId(v string) *CreateCollectionRequest
	GetWorkspaceId() *string
}

type CreateCollectionRequest struct {
	// The name of the collection that you want to create.
	//
	// >  The name must comply with the naming conventions of PostgreSQL objects.
	//
	// This parameter is required.
	//
	// example:
	//
	// document
	Collection *string `json:"Collection,omitempty" xml:"Collection,omitempty"`
	// The instance ID.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the IDs of all AnalyticDB for PostgreSQL instances in a specific region.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The number of vector dimensions.
	//
	// >  If you specify this parameter, an index is created. When you call the [UpsertCollectionData](https://help.aliyun.com/document_detail/2401493.html) operation, make sure that the length of the Rows.Vector parameter is the same as the value of this parameter. If you do not specify this parameter, you can call the [CreateVectorIndex](https://help.aliyun.com/document_detail/2401499.html) operation to create an index.
	//
	// example:
	//
	// 1024
	Dimension *int64 `json:"Dimension,omitempty" xml:"Dimension,omitempty"`
	// Specifies whether to use the memory mapping technology to create HNSW indexes. Valid values: 0 and 1. Default value: 0. We recommend that you set the value to 1 in scenarios that require upload speed but not data deletion.
	//
	// >
	//
	// 	- 0: uses segmented paging storage to create indexes. This method uses the shared buffer of PostgreSQL for caching and supports the delete and update operations.
	//
	// 	- 1: uses the memory mapping technology to create indexes. This method does not support the delete or update operation.
	//
	// example:
	//
	// 0
	ExternalStorage *int32 `json:"ExternalStorage,omitempty" xml:"ExternalStorage,omitempty"`
	// The fields used for full-text search. Separate multiple fields with commas (,). These fields must be keys defined in Metadata.
	//
	// example:
	//
	// title,content
	FullTextRetrievalFields *string `json:"FullTextRetrievalFields,omitempty" xml:"FullTextRetrievalFields,omitempty"`
	HnswEfConstruction      *string `json:"HnswEfConstruction,omitempty" xml:"HnswEfConstruction,omitempty"`
	// The maximum number of neighbors for the Hierarchical Navigable Small World (HNSW) algorithm. Valid values: 1 to 1000. In most cases, this parameter is automatically configured based on the value of the Dimension parameter. You do not need to configure this parameter.
	//
	// >  We recommend that you configure this parameter based on the value of the Dimension parameter.
	//
	// *If you set Dimension to a value less than or equal to 384, set the value of HnswM to 16.
	//
	// *If you set Dimension to a value greater than 384 and less than or equal to 768, set the value of HnswM to 32.
	//
	// *If you set Dimension to a value greater than 768 and less than or equal to 1024, set the value of HnswM to 64.
	//
	// *If you set Dimension to a value greater than 1024, set the value of HnswM to 128.
	//
	// example:
	//
	// 64
	HnswM *int32 `json:"HnswM,omitempty" xml:"HnswM,omitempty"`
	// Name of the management account with rds_superuser permissions.
	//
	// > You can create an account through the console -> Account Management, or by using the [CreateAccount](https://help.aliyun.com/document_detail/2361789.html) API.
	//
	// This parameter is required.
	//
	// example:
	//
	// testaccount
	ManagerAccount *string `json:"ManagerAccount,omitempty" xml:"ManagerAccount,omitempty"`
	// The password of the manager account.
	//
	// This parameter is required.
	//
	// example:
	//
	// testpassword
	ManagerAccountPassword *string `json:"ManagerAccountPassword,omitempty" xml:"ManagerAccountPassword,omitempty"`
	// The metadata of the vector data, which is a JSON string in the MAP format. The key specifies the field name, and the value specifies the data type.
	//
	// >  Supported data types:
	//
	// 	- For information about the supported data types, see [Data types](https://www.alibabacloud.com/help/zh/analyticdb/analyticdb-for-postgresql/developer-reference/data-types-1/).
	//
	// 	- The money data type is not supported.
	//
	// **
	//
	// **Warning*	- Reserved fields such as id, vector, to_tsvector, and source cannot be used.
	//
	// This parameter is required.
	//
	// example:
	//
	// {"title":"text","content":"text","response":"int"}
	Metadata *string `json:"Metadata,omitempty" xml:"Metadata,omitempty"`
	// The scalar index fields. Separate multiple fields with commas (,). These fields must be keys defined in Metadata.
	//
	// example:
	//
	// title
	MetadataIndices *string `json:"MetadataIndices,omitempty" xml:"MetadataIndices,omitempty"`
	// The method that is used to create vector indexes. Valid values:
	//
	// 	- l2: Euclidean distance.
	//
	// 	- ip: inner product distance.
	//
	// 	- cosine: cosine similarity.
	//
	// example:
	//
	// cosine
	Metrics *string `json:"Metrics,omitempty" xml:"Metrics,omitempty"`
	// The name of the namespace.
	//
	// >  You can call the [CreateNamespace](https://help.aliyun.com/document_detail/2401495.html) operation to create a namespace and call the [ListNamespaces](https://help.aliyun.com/document_detail/2401502.html) operation to query a list of namespaces.
	//
	// example:
	//
	// mynamespace
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	OwnerId   *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The analyzer that is used for full-text search.
	//
	// example:
	//
	// zh_cn
	Parser *string `json:"Parser,omitempty" xml:"Parser,omitempty"`
	// Specifies whether to enable the product quantization (PQ) feature for index acceleration. We recommend that you enable this feature for more than 500,000 rows of data. Valid values:
	//
	// 	- 0: no.
	//
	// 	- 1 (default): yes.
	//
	// example:
	//
	// 0
	PqEnable *int32 `json:"PqEnable,omitempty" xml:"PqEnable,omitempty"`
	// The region ID of the instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId                *string                                         `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	SparseVectorIndexConfig *CreateCollectionRequestSparseVectorIndexConfig `json:"SparseVectorIndexConfig,omitempty" xml:"SparseVectorIndexConfig,omitempty" type:"Struct"`
	SupportSparse           *bool                                           `json:"SupportSparse,omitempty" xml:"SupportSparse,omitempty"`
	// The ID of the workspace that consists of multiple AnalyticDB for PostgreSQL instances. You must specify one of the WorkspaceId and DBInstanceId parameters. If you specify both parameters, the WorkspaceId parameter takes effect.
	//
	// example:
	//
	// gp-ws-*****
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s CreateCollectionRequest) String() string {
	return dara.Prettify(s)
}

func (s CreateCollectionRequest) GoString() string {
	return s.String()
}

func (s *CreateCollectionRequest) GetCollection() *string {
	return s.Collection
}

func (s *CreateCollectionRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *CreateCollectionRequest) GetDimension() *int64 {
	return s.Dimension
}

func (s *CreateCollectionRequest) GetExternalStorage() *int32 {
	return s.ExternalStorage
}

func (s *CreateCollectionRequest) GetFullTextRetrievalFields() *string {
	return s.FullTextRetrievalFields
}

func (s *CreateCollectionRequest) GetHnswEfConstruction() *string {
	return s.HnswEfConstruction
}

func (s *CreateCollectionRequest) GetHnswM() *int32 {
	return s.HnswM
}

func (s *CreateCollectionRequest) GetManagerAccount() *string {
	return s.ManagerAccount
}

func (s *CreateCollectionRequest) GetManagerAccountPassword() *string {
	return s.ManagerAccountPassword
}

func (s *CreateCollectionRequest) GetMetadata() *string {
	return s.Metadata
}

func (s *CreateCollectionRequest) GetMetadataIndices() *string {
	return s.MetadataIndices
}

func (s *CreateCollectionRequest) GetMetrics() *string {
	return s.Metrics
}

func (s *CreateCollectionRequest) GetNamespace() *string {
	return s.Namespace
}

func (s *CreateCollectionRequest) GetOwnerId() *int64 {
	return s.OwnerId
}

func (s *CreateCollectionRequest) GetParser() *string {
	return s.Parser
}

func (s *CreateCollectionRequest) GetPqEnable() *int32 {
	return s.PqEnable
}

func (s *CreateCollectionRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *CreateCollectionRequest) GetSparseVectorIndexConfig() *CreateCollectionRequestSparseVectorIndexConfig {
	return s.SparseVectorIndexConfig
}

func (s *CreateCollectionRequest) GetSupportSparse() *bool {
	return s.SupportSparse
}

func (s *CreateCollectionRequest) GetWorkspaceId() *string {
	return s.WorkspaceId
}

func (s *CreateCollectionRequest) SetCollection(v string) *CreateCollectionRequest {
	s.Collection = &v
	return s
}

func (s *CreateCollectionRequest) SetDBInstanceId(v string) *CreateCollectionRequest {
	s.DBInstanceId = &v
	return s
}

func (s *CreateCollectionRequest) SetDimension(v int64) *CreateCollectionRequest {
	s.Dimension = &v
	return s
}

func (s *CreateCollectionRequest) SetExternalStorage(v int32) *CreateCollectionRequest {
	s.ExternalStorage = &v
	return s
}

func (s *CreateCollectionRequest) SetFullTextRetrievalFields(v string) *CreateCollectionRequest {
	s.FullTextRetrievalFields = &v
	return s
}

func (s *CreateCollectionRequest) SetHnswEfConstruction(v string) *CreateCollectionRequest {
	s.HnswEfConstruction = &v
	return s
}

func (s *CreateCollectionRequest) SetHnswM(v int32) *CreateCollectionRequest {
	s.HnswM = &v
	return s
}

func (s *CreateCollectionRequest) SetManagerAccount(v string) *CreateCollectionRequest {
	s.ManagerAccount = &v
	return s
}

func (s *CreateCollectionRequest) SetManagerAccountPassword(v string) *CreateCollectionRequest {
	s.ManagerAccountPassword = &v
	return s
}

func (s *CreateCollectionRequest) SetMetadata(v string) *CreateCollectionRequest {
	s.Metadata = &v
	return s
}

func (s *CreateCollectionRequest) SetMetadataIndices(v string) *CreateCollectionRequest {
	s.MetadataIndices = &v
	return s
}

func (s *CreateCollectionRequest) SetMetrics(v string) *CreateCollectionRequest {
	s.Metrics = &v
	return s
}

func (s *CreateCollectionRequest) SetNamespace(v string) *CreateCollectionRequest {
	s.Namespace = &v
	return s
}

func (s *CreateCollectionRequest) SetOwnerId(v int64) *CreateCollectionRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateCollectionRequest) SetParser(v string) *CreateCollectionRequest {
	s.Parser = &v
	return s
}

func (s *CreateCollectionRequest) SetPqEnable(v int32) *CreateCollectionRequest {
	s.PqEnable = &v
	return s
}

func (s *CreateCollectionRequest) SetRegionId(v string) *CreateCollectionRequest {
	s.RegionId = &v
	return s
}

func (s *CreateCollectionRequest) SetSparseVectorIndexConfig(v *CreateCollectionRequestSparseVectorIndexConfig) *CreateCollectionRequest {
	s.SparseVectorIndexConfig = v
	return s
}

func (s *CreateCollectionRequest) SetSupportSparse(v bool) *CreateCollectionRequest {
	s.SupportSparse = &v
	return s
}

func (s *CreateCollectionRequest) SetWorkspaceId(v string) *CreateCollectionRequest {
	s.WorkspaceId = &v
	return s
}

func (s *CreateCollectionRequest) Validate() error {
	return dara.Validate(s)
}

type CreateCollectionRequestSparseVectorIndexConfig struct {
	HnswEfConstruction *int32 `json:"HnswEfConstruction,omitempty" xml:"HnswEfConstruction,omitempty"`
	HnswM              *int32 `json:"HnswM,omitempty" xml:"HnswM,omitempty"`
}

func (s CreateCollectionRequestSparseVectorIndexConfig) String() string {
	return dara.Prettify(s)
}

func (s CreateCollectionRequestSparseVectorIndexConfig) GoString() string {
	return s.String()
}

func (s *CreateCollectionRequestSparseVectorIndexConfig) GetHnswEfConstruction() *int32 {
	return s.HnswEfConstruction
}

func (s *CreateCollectionRequestSparseVectorIndexConfig) GetHnswM() *int32 {
	return s.HnswM
}

func (s *CreateCollectionRequestSparseVectorIndexConfig) SetHnswEfConstruction(v int32) *CreateCollectionRequestSparseVectorIndexConfig {
	s.HnswEfConstruction = &v
	return s
}

func (s *CreateCollectionRequestSparseVectorIndexConfig) SetHnswM(v int32) *CreateCollectionRequestSparseVectorIndexConfig {
	s.HnswM = &v
	return s
}

func (s *CreateCollectionRequestSparseVectorIndexConfig) Validate() error {
	return dara.Validate(s)
}

type iCreateCollectionShrinkRequest interface {
	dara.Model
	String() string
	GoString() string
	SetCollection(v string) *CreateCollectionShrinkRequest
	GetCollection() *string
	SetDBInstanceId(v string) *CreateCollectionShrinkRequest
	GetDBInstanceId() *string
	SetDimension(v int64) *CreateCollectionShrinkRequest
	GetDimension() *int64
	SetExternalStorage(v int32) *CreateCollectionShrinkRequest
	GetExternalStorage() *int32
	SetFullTextRetrievalFields(v string) *CreateCollectionShrinkRequest
	GetFullTextRetrievalFields() *string
	SetHnswEfConstruction(v string) *CreateCollectionShrinkRequest
	GetHnswEfConstruction() *string
	SetHnswM(v int32) *CreateCollectionShrinkRequest
	GetHnswM() *int32
	SetManagerAccount(v string) *CreateCollectionShrinkRequest
	GetManagerAccount() *string
	SetManagerAccountPassword(v string) *CreateCollectionShrinkRequest
	GetManagerAccountPassword() *string
	SetMetadata(v string) *CreateCollectionShrinkRequest
	GetMetadata() *string
	SetMetadataIndices(v string) *CreateCollectionShrinkRequest
	GetMetadataIndices() *string
	SetMetrics(v string) *CreateCollectionShrinkRequest
	GetMetrics() *string
	SetNamespace(v string) *CreateCollectionShrinkRequest
	GetNamespace() *string
	SetOwnerId(v int64) *CreateCollectionShrinkRequest
	GetOwnerId() *int64
	SetParser(v string) *CreateCollectionShrinkRequest
	GetParser() *string
	SetPqEnable(v int32) *CreateCollectionShrinkRequest
	GetPqEnable() *int32
	SetRegionId(v string) *CreateCollectionShrinkRequest
	GetRegionId() *string
	SetSparseVectorIndexConfigShrink(v string) *CreateCollectionShrinkRequest
	GetSparseVectorIndexConfigShrink() *string
	SetSupportSparse(v bool) *CreateCollectionShrinkRequest
	GetSupportSparse() *bool
	SetWorkspaceId(v string) *CreateCollectionShrinkRequest
	GetWorkspaceId() *string
}

type CreateCollectionShrinkRequest struct {
	// The name of the collection that you want to create.
	//
	// >  The name must comply with the naming conventions of PostgreSQL objects.
	//
	// This parameter is required.
	//
	// example:
	//
	// document
	Collection *string `json:"Collection,omitempty" xml:"Collection,omitempty"`
	// The instance ID.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the IDs of all AnalyticDB for PostgreSQL instances in a specific region.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The number of vector dimensions.
	//
	// >  If you specify this parameter, an index is created. When you call the [UpsertCollectionData](https://help.aliyun.com/document_detail/2401493.html) operation, make sure that the length of the Rows.Vector parameter is the same as the value of this parameter. If you do not specify this parameter, you can call the [CreateVectorIndex](https://help.aliyun.com/document_detail/2401499.html) operation to create an index.
	//
	// example:
	//
	// 1024
	Dimension *int64 `json:"Dimension,omitempty" xml:"Dimension,omitempty"`
	// Specifies whether to use the memory mapping technology to create HNSW indexes. Valid values: 0 and 1. Default value: 0. We recommend that you set the value to 1 in scenarios that require upload speed but not data deletion.
	//
	// >
	//
	// 	- 0: uses segmented paging storage to create indexes. This method uses the shared buffer of PostgreSQL for caching and supports the delete and update operations.
	//
	// 	- 1: uses the memory mapping technology to create indexes. This method does not support the delete or update operation.
	//
	// example:
	//
	// 0
	ExternalStorage *int32 `json:"ExternalStorage,omitempty" xml:"ExternalStorage,omitempty"`
	// The fields used for full-text search. Separate multiple fields with commas (,). These fields must be keys defined in Metadata.
	//
	// example:
	//
	// title,content
	FullTextRetrievalFields *string `json:"FullTextRetrievalFields,omitempty" xml:"FullTextRetrievalFields,omitempty"`
	HnswEfConstruction      *string `json:"HnswEfConstruction,omitempty" xml:"HnswEfConstruction,omitempty"`
	// The maximum number of neighbors for the Hierarchical Navigable Small World (HNSW) algorithm. Valid values: 1 to 1000. In most cases, this parameter is automatically configured based on the value of the Dimension parameter. You do not need to configure this parameter.
	//
	// >  We recommend that you configure this parameter based on the value of the Dimension parameter.
	//
	// *If you set Dimension to a value less than or equal to 384, set the value of HnswM to 16.
	//
	// *If you set Dimension to a value greater than 384 and less than or equal to 768, set the value of HnswM to 32.
	//
	// *If you set Dimension to a value greater than 768 and less than or equal to 1024, set the value of HnswM to 64.
	//
	// *If you set Dimension to a value greater than 1024, set the value of HnswM to 128.
	//
	// example:
	//
	// 64
	HnswM *int32 `json:"HnswM,omitempty" xml:"HnswM,omitempty"`
	// Name of the management account with rds_superuser permissions.
	//
	// > You can create an account through the console -> Account Management, or by using the [CreateAccount](https://help.aliyun.com/document_detail/2361789.html) API.
	//
	// This parameter is required.
	//
	// example:
	//
	// testaccount
	ManagerAccount *string `json:"ManagerAccount,omitempty" xml:"ManagerAccount,omitempty"`
	// The password of the manager account.
	//
	// This parameter is required.
	//
	// example:
	//
	// testpassword
	ManagerAccountPassword *string `json:"ManagerAccountPassword,omitempty" xml:"ManagerAccountPassword,omitempty"`
	// The metadata of the vector data, which is a JSON string in the MAP format. The key specifies the field name, and the value specifies the data type.
	//
	// >  Supported data types:
	//
	// 	- For information about the supported data types, see [Data types](https://www.alibabacloud.com/help/zh/analyticdb/analyticdb-for-postgresql/developer-reference/data-types-1/).
	//
	// 	- The money data type is not supported.
	//
	// **
	//
	// **Warning*	- Reserved fields such as id, vector, to_tsvector, and source cannot be used.
	//
	// This parameter is required.
	//
	// example:
	//
	// {"title":"text","content":"text","response":"int"}
	Metadata *string `json:"Metadata,omitempty" xml:"Metadata,omitempty"`
	// The scalar index fields. Separate multiple fields with commas (,). These fields must be keys defined in Metadata.
	//
	// example:
	//
	// title
	MetadataIndices *string `json:"MetadataIndices,omitempty" xml:"MetadataIndices,omitempty"`
	// The method that is used to create vector indexes. Valid values:
	//
	// 	- l2: Euclidean distance.
	//
	// 	- ip: inner product distance.
	//
	// 	- cosine: cosine similarity.
	//
	// example:
	//
	// cosine
	Metrics *string `json:"Metrics,omitempty" xml:"Metrics,omitempty"`
	// The name of the namespace.
	//
	// >  You can call the [CreateNamespace](https://help.aliyun.com/document_detail/2401495.html) operation to create a namespace and call the [ListNamespaces](https://help.aliyun.com/document_detail/2401502.html) operation to query a list of namespaces.
	//
	// example:
	//
	// mynamespace
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	OwnerId   *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The analyzer that is used for full-text search.
	//
	// example:
	//
	// zh_cn
	Parser *string `json:"Parser,omitempty" xml:"Parser,omitempty"`
	// Specifies whether to enable the product quantization (PQ) feature for index acceleration. We recommend that you enable this feature for more than 500,000 rows of data. Valid values:
	//
	// 	- 0: no.
	//
	// 	- 1 (default): yes.
	//
	// example:
	//
	// 0
	PqEnable *int32 `json:"PqEnable,omitempty" xml:"PqEnable,omitempty"`
	// The region ID of the instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId                      *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	SparseVectorIndexConfigShrink *string `json:"SparseVectorIndexConfig,omitempty" xml:"SparseVectorIndexConfig,omitempty"`
	SupportSparse                 *bool   `json:"SupportSparse,omitempty" xml:"SupportSparse,omitempty"`
	// The ID of the workspace that consists of multiple AnalyticDB for PostgreSQL instances. You must specify one of the WorkspaceId and DBInstanceId parameters. If you specify both parameters, the WorkspaceId parameter takes effect.
	//
	// example:
	//
	// gp-ws-*****
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s CreateCollectionShrinkRequest) String() string {
	return dara.Prettify(s)
}

func (s CreateCollectionShrinkRequest) GoString() string {
	return s.String()
}

func (s *CreateCollectionShrinkRequest) GetCollection() *string {
	return s.Collection
}

func (s *CreateCollectionShrinkRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *CreateCollectionShrinkRequest) GetDimension() *int64 {
	return s.Dimension
}

func (s *CreateCollectionShrinkRequest) GetExternalStorage() *int32 {
	return s.ExternalStorage
}

func (s *CreateCollectionShrinkRequest) GetFullTextRetrievalFields() *string {
	return s.FullTextRetrievalFields
}

func (s *CreateCollectionShrinkRequest) GetHnswEfConstruction() *string {
	return s.HnswEfConstruction
}

func (s *CreateCollectionShrinkRequest) GetHnswM() *int32 {
	return s.HnswM
}

func (s *CreateCollectionShrinkRequest) GetManagerAccount() *string {
	return s.ManagerAccount
}

func (s *CreateCollectionShrinkRequest) GetManagerAccountPassword() *string {
	return s.ManagerAccountPassword
}

func (s *CreateCollectionShrinkRequest) GetMetadata() *string {
	return s.Metadata
}

func (s *CreateCollectionShrinkRequest) GetMetadataIndices() *string {
	return s.MetadataIndices
}

func (s *CreateCollectionShrinkRequest) GetMetrics() *string {
	return s.Metrics
}

func (s *CreateCollectionShrinkRequest) GetNamespace() *string {
	return s.Namespace
}

func (s *CreateCollectionShrinkRequest) GetOwnerId() *int64 {
	return s.OwnerId
}

func (s *CreateCollectionShrinkRequest) GetParser() *string {
	return s.Parser
}

func (s *CreateCollectionShrinkRequest) GetPqEnable() *int32 {
	return s.PqEnable
}

func (s *CreateCollectionShrinkRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *CreateCollectionShrinkRequest) GetSparseVectorIndexConfigShrink() *string {
	return s.SparseVectorIndexConfigShrink
}

func (s *CreateCollectionShrinkRequest) GetSupportSparse() *bool {
	return s.SupportSparse
}

func (s *CreateCollectionShrinkRequest) GetWorkspaceId() *string {
	return s.WorkspaceId
}

func (s *CreateCollectionShrinkRequest) SetCollection(v string) *CreateCollectionShrinkRequest {
	s.Collection = &v
	return s
}

func (s *CreateCollectionShrinkRequest) SetDBInstanceId(v string) *CreateCollectionShrinkRequest {
	s.DBInstanceId = &v
	return s
}

func (s *CreateCollectionShrinkRequest) SetDimension(v int64) *CreateCollectionShrinkRequest {
	s.Dimension = &v
	return s
}

func (s *CreateCollectionShrinkRequest) SetExternalStorage(v int32) *CreateCollectionShrinkRequest {
	s.ExternalStorage = &v
	return s
}

func (s *CreateCollectionShrinkRequest) SetFullTextRetrievalFields(v string) *CreateCollectionShrinkRequest {
	s.FullTextRetrievalFields = &v
	return s
}

func (s *CreateCollectionShrinkRequest) SetHnswEfConstruction(v string) *CreateCollectionShrinkRequest {
	s.HnswEfConstruction = &v
	return s
}

func (s *CreateCollectionShrinkRequest) SetHnswM(v int32) *CreateCollectionShrinkRequest {
	s.HnswM = &v
	return s
}

func (s *CreateCollectionShrinkRequest) SetManagerAccount(v string) *CreateCollectionShrinkRequest {
	s.ManagerAccount = &v
	return s
}

func (s *CreateCollectionShrinkRequest) SetManagerAccountPassword(v string) *CreateCollectionShrinkRequest {
	s.ManagerAccountPassword = &v
	return s
}

func (s *CreateCollectionShrinkRequest) SetMetadata(v string) *CreateCollectionShrinkRequest {
	s.Metadata = &v
	return s
}

func (s *CreateCollectionShrinkRequest) SetMetadataIndices(v string) *CreateCollectionShrinkRequest {
	s.MetadataIndices = &v
	return s
}

func (s *CreateCollectionShrinkRequest) SetMetrics(v string) *CreateCollectionShrinkRequest {
	s.Metrics = &v
	return s
}

func (s *CreateCollectionShrinkRequest) SetNamespace(v string) *CreateCollectionShrinkRequest {
	s.Namespace = &v
	return s
}

func (s *CreateCollectionShrinkRequest) SetOwnerId(v int64) *CreateCollectionShrinkRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateCollectionShrinkRequest) SetParser(v string) *CreateCollectionShrinkRequest {
	s.Parser = &v
	return s
}

func (s *CreateCollectionShrinkRequest) SetPqEnable(v int32) *CreateCollectionShrinkRequest {
	s.PqEnable = &v
	return s
}

func (s *CreateCollectionShrinkRequest) SetRegionId(v string) *CreateCollectionShrinkRequest {
	s.RegionId = &v
	return s
}

func (s *CreateCollectionShrinkRequest) SetSparseVectorIndexConfigShrink(v string) *CreateCollectionShrinkRequest {
	s.SparseVectorIndexConfigShrink = &v
	return s
}

func (s *CreateCollectionShrinkRequest) SetSupportSparse(v bool) *CreateCollectionShrinkRequest {
	s.SupportSparse = &v
	return s
}

func (s *CreateCollectionShrinkRequest) SetWorkspaceId(v string) *CreateCollectionShrinkRequest {
	s.WorkspaceId = &v
	return s
}

func (s *CreateCollectionShrinkRequest) Validate() error {
	return dara.Validate(s)
}

type iCreateCollectionResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetMessage(v string) *CreateCollectionResponseBody
	GetMessage() *string
	SetRequestId(v string) *CreateCollectionResponseBody
	GetRequestId() *string
	SetStatus(v string) *CreateCollectionResponseBody
	GetStatus() *string
}

type CreateCollectionResponseBody struct {
	// The returned message.
	//
	// example:
	//
	// create successfully
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The status of the operation. Valid values:
	//
	// 	- **success**
	//
	// 	- **fail**
	//
	// example:
	//
	// success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s CreateCollectionResponseBody) String() string {
	return dara.Prettify(s)
}

func (s CreateCollectionResponseBody) GoString() string {
	return s.String()
}

func (s *CreateCollectionResponseBody) GetMessage() *string {
	return s.Message
}

func (s *CreateCollectionResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *CreateCollectionResponseBody) GetStatus() *string {
	return s.Status
}

func (s *CreateCollectionResponseBody) SetMessage(v string) *CreateCollectionResponseBody {
	s.Message = &v
	return s
}

func (s *CreateCollectionResponseBody) SetRequestId(v string) *CreateCollectionResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateCollectionResponseBody) SetStatus(v string) *CreateCollectionResponseBody {
	s.Status = &v
	return s
}

func (s *CreateCollectionResponseBody) Validate() error {
	return dara.Validate(s)
}

type iCreateCollectionResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *CreateCollectionResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *CreateCollectionResponse
	GetStatusCode() *int32
	SetBody(v *CreateCollectionResponseBody) *CreateCollectionResponse
	GetBody() *CreateCollectionResponseBody
}

type CreateCollectionResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateCollectionResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateCollectionResponse) String() string {
	return dara.Prettify(s)
}

func (s CreateCollectionResponse) GoString() string {
	return s.String()
}

func (s *CreateCollectionResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *CreateCollectionResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *CreateCollectionResponse) GetBody() *CreateCollectionResponseBody {
	return s.Body
}

func (s *CreateCollectionResponse) SetHeaders(v map[string]*string) *CreateCollectionResponse {
	s.Headers = v
	return s
}

func (s *CreateCollectionResponse) SetStatusCode(v int32) *CreateCollectionResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateCollectionResponse) SetBody(v *CreateCollectionResponseBody) *CreateCollectionResponse {
	s.Body = v
	return s
}

func (s *CreateCollectionResponse) Validate() error {
	return dara.Validate(s)
}

type iCreateDBInstanceRequest interface {
	dara.Model
	String() string
	GoString() string
	SetAINodeSpecInfos(v []*CreateDBInstanceRequestAINodeSpecInfos) *CreateDBInstanceRequest
	GetAINodeSpecInfos() []*CreateDBInstanceRequestAINodeSpecInfos
	SetBackupId(v string) *CreateDBInstanceRequest
	GetBackupId() *string
	SetClientToken(v string) *CreateDBInstanceRequest
	GetClientToken() *string
	SetCreateSampleData(v bool) *CreateDBInstanceRequest
	GetCreateSampleData() *bool
	SetDBInstanceCategory(v string) *CreateDBInstanceRequest
	GetDBInstanceCategory() *string
	SetDBInstanceClass(v string) *CreateDBInstanceRequest
	GetDBInstanceClass() *string
	SetDBInstanceDescription(v string) *CreateDBInstanceRequest
	GetDBInstanceDescription() *string
	SetDBInstanceGroupCount(v string) *CreateDBInstanceRequest
	GetDBInstanceGroupCount() *string
	SetDBInstanceMode(v string) *CreateDBInstanceRequest
	GetDBInstanceMode() *string
	SetDeployMode(v string) *CreateDBInstanceRequest
	GetDeployMode() *string
	SetEnableSSL(v bool) *CreateDBInstanceRequest
	GetEnableSSL() *bool
	SetEncryptionKey(v string) *CreateDBInstanceRequest
	GetEncryptionKey() *string
	SetEncryptionType(v string) *CreateDBInstanceRequest
	GetEncryptionType() *string
	SetEngine(v string) *CreateDBInstanceRequest
	GetEngine() *string
	SetEngineVersion(v string) *CreateDBInstanceRequest
	GetEngineVersion() *string
	SetIdleTime(v int32) *CreateDBInstanceRequest
	GetIdleTime() *int32
	SetInstanceNetworkType(v string) *CreateDBInstanceRequest
	GetInstanceNetworkType() *string
	SetInstanceSpec(v string) *CreateDBInstanceRequest
	GetInstanceSpec() *string
	SetMasterAISpec(v string) *CreateDBInstanceRequest
	GetMasterAISpec() *string
	SetMasterCU(v int32) *CreateDBInstanceRequest
	GetMasterCU() *int32
	SetMasterNodeNum(v string) *CreateDBInstanceRequest
	GetMasterNodeNum() *string
	SetOwnerId(v int64) *CreateDBInstanceRequest
	GetOwnerId() *int64
	SetPayType(v string) *CreateDBInstanceRequest
	GetPayType() *string
	SetPeriod(v string) *CreateDBInstanceRequest
	GetPeriod() *string
	SetPrivateIpAddress(v string) *CreateDBInstanceRequest
	GetPrivateIpAddress() *string
	SetProdType(v string) *CreateDBInstanceRequest
	GetProdType() *string
	SetRegionId(v string) *CreateDBInstanceRequest
	GetRegionId() *string
	SetResourceGroupId(v string) *CreateDBInstanceRequest
	GetResourceGroupId() *string
	SetSecurityIPList(v string) *CreateDBInstanceRequest
	GetSecurityIPList() *string
	SetSegDiskPerformanceLevel(v string) *CreateDBInstanceRequest
	GetSegDiskPerformanceLevel() *string
	SetSegNodeNum(v string) *CreateDBInstanceRequest
	GetSegNodeNum() *string
	SetSegStorageType(v string) *CreateDBInstanceRequest
	GetSegStorageType() *string
	SetServerlessMode(v string) *CreateDBInstanceRequest
	GetServerlessMode() *string
	SetServerlessResource(v int32) *CreateDBInstanceRequest
	GetServerlessResource() *int32
	SetSrcDbInstanceName(v string) *CreateDBInstanceRequest
	GetSrcDbInstanceName() *string
	SetStandbyVSwitchId(v string) *CreateDBInstanceRequest
	GetStandbyVSwitchId() *string
	SetStandbyZoneId(v string) *CreateDBInstanceRequest
	GetStandbyZoneId() *string
	SetStorageSize(v int64) *CreateDBInstanceRequest
	GetStorageSize() *int64
	SetStorageType(v string) *CreateDBInstanceRequest
	GetStorageType() *string
	SetTag(v []*CreateDBInstanceRequestTag) *CreateDBInstanceRequest
	GetTag() []*CreateDBInstanceRequestTag
	SetUsedTime(v string) *CreateDBInstanceRequest
	GetUsedTime() *string
	SetVPCId(v string) *CreateDBInstanceRequest
	GetVPCId() *string
	SetVSwitchId(v string) *CreateDBInstanceRequest
	GetVSwitchId() *string
	SetVectorConfigurationStatus(v string) *CreateDBInstanceRequest
	GetVectorConfigurationStatus() *string
	SetZoneId(v string) *CreateDBInstanceRequest
	GetZoneId() *string
}

type CreateDBInstanceRequest struct {
	AINodeSpecInfos []*CreateDBInstanceRequestAINodeSpecInfos `json:"AINodeSpecInfos,omitempty" xml:"AINodeSpecInfos,omitempty" type:"Repeated"`
	// Backup set ID.
	//
	// > You can call the [DescribeDataBackups](https://help.aliyun.com/document_detail/210093.html) interface to view the backup set IDs of all backup sets under the target instance.
	//
	// example:
	//
	// 1111111111
	BackupId *string `json:"BackupId,omitempty" xml:"BackupId,omitempty"`
	// Idempotence check. For more information, see [How to Ensure Idempotence](https://help.aliyun.com/document_detail/327176.html).
	//
	// example:
	//
	// 0c593ea1-3bea-11e9-b96b-88**********
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// Whether to load sample datasets after the instance is created. The values are as follows:
	//
	// - **true**: Load sample datasets.
	//
	// - **false**: Do not load sample datasets.
	//
	// > If this parameter is not specified, it defaults to not loading sample datasets.
	//
	// example:
	//
	// false
	CreateSampleData *bool `json:"CreateSampleData,omitempty" xml:"CreateSampleData,omitempty"`
	// Instance series. The value description is as follows:
	//
	// - **HighAvailability**: High availability version.
	//
	// - **Basic**: Basic version.
	//
	// > This parameter is required when creating an instance in the storage elastic mode.
	//
	// example:
	//
	// HighAvailability
	DBInstanceCategory *string `json:"DBInstanceCategory,omitempty" xml:"DBInstanceCategory,omitempty"`
	// Instance type. For more details, see the supplementary description of the DBInstanceClass parameter.
	//
	// > This parameter is required when creating a reserved storage mode instance.
	//
	// example:
	//
	// gpdb.group.segsdx1
	DBInstanceClass *string `json:"DBInstanceClass,omitempty" xml:"DBInstanceClass,omitempty"`
	// Instance description.
	//
	// example:
	//
	// test
	DBInstanceDescription *string `json:"DBInstanceDescription,omitempty" xml:"DBInstanceDescription,omitempty"`
	// Number of compute groups. The values are: 2, 4, 8, 12, 16, 24, 32, 64, 96, 128.
	//
	// > This parameter is required when creating a reserved storage mode instance.
	//
	// example:
	//
	// 2
	DBInstanceGroupCount *string `json:"DBInstanceGroupCount,omitempty" xml:"DBInstanceGroupCount,omitempty"`
	// Instance resource type. The value description is as follows:
	//
	// - **StorageElastic**: Storage elastic mode.
	//
	// - **Serverless**: Serverless mode.
	//
	// - **Classic**: Storage reserved mode.
	//
	// > This parameter is required.
	//
	// This parameter is required.
	//
	// example:
	//
	// StorageElastic
	DBInstanceMode *string `json:"DBInstanceMode,omitempty" xml:"DBInstanceMode,omitempty"`
	// Deployment mode. The values are as follows:
	//
	// - multiple: Multi-zone deployment.
	//
	// - single: Single-zone deployment.
	//
	// >
	//
	// > - If this parameter is not specified, the default value is single-zone deployment.
	//
	// > - Currently, only single-zone deployment is supported.
	//
	// example:
	//
	// single
	DeployMode *string `json:"DeployMode,omitempty" xml:"DeployMode,omitempty"`
	// Specifies whether to enable SSL encryption. Valid values:
	//
	// 	- **true**
	//
	// 	- **false*	- (default)
	//
	// example:
	//
	// false
	EnableSSL *bool `json:"EnableSSL,omitempty" xml:"EnableSSL,omitempty"`
	// Key ID.
	//
	// > If the value of the **EncryptionType*	- parameter is **CloudDisk**, you need to specify the encryption key ID within the same region through this parameter; otherwise, it should be empty.
	//
	// example:
	//
	// 0d2470df-da7b-4786-b981-88888888****
	EncryptionKey *string `json:"EncryptionKey,omitempty" xml:"EncryptionKey,omitempty"`
	// Encryption type. The value description is as follows:
	//
	// - **NULL**: No encryption (default).
	//
	// - **CloudDisk**: Enable cloud disk encryption and specify the key through the **EncryptionKey*	- parameter.
	//
	// > Once cloud disk encryption is enabled, it cannot be disabled.
	//
	// example:
	//
	// CloudDisk
	EncryptionType *string `json:"EncryptionType,omitempty" xml:"EncryptionType,omitempty"`
	// Database engine, with the value **gpdb**.
	//
	// This parameter is required.
	//
	// example:
	//
	// gpdb
	Engine *string `json:"Engine,omitempty" xml:"Engine,omitempty"`
	// Engine version. The values are as follows:
	//
	// - **6.0**: Version 6.0.
	//
	// - **7.0**: Version 7.0.
	//
	// This parameter is required.
	//
	// example:
	//
	// 6.0
	EngineVersion *string `json:"EngineVersion,omitempty" xml:"EngineVersion,omitempty"`
	// The idle release wait time. When the duration without business traffic reaches the specified time, the instance will enter the idle state. The unit is seconds, with a minimum value of 60, and the default value is 600.
	//
	// > This parameter is required only for Serverless auto-scheduling mode instances.
	//
	// example:
	//
	// 600
	IdleTime *int32 `json:"IdleTime,omitempty" xml:"IdleTime,omitempty"`
	// Instance network type, with the value **VPC**.
	//
	// > - Only VPC networks are supported in public cloud.
	//
	// > - If not specified, it defaults to VPC type.
	//
	// example:
	//
	// VPC
	InstanceNetworkType *string `json:"InstanceNetworkType,omitempty" xml:"InstanceNetworkType,omitempty"`
	// Compute node specifications.
	//
	// For high-availability versions of the elastic storage mode, the values are as follows:
	//
	// - **2C16G**
	//
	// - **4C32G**
	//
	// - **16C128G**
	//
	// For basic versions of the elastic storage mode, the values are as follows:
	//
	// - **2C8G**
	//
	// - **4C16G**
	//
	// - **8C32G**
	//
	// - **16C64G**
	//
	// For Serverless mode, the values are as follows:
	//
	// - **4C16G**
	//
	// - **8C32G**
	//
	// > This parameter is required when creating an elastic storage mode instance or a Serverless mode instance.
	//
	// example:
	//
	// 2C16G
	InstanceSpec *string `json:"InstanceSpec,omitempty" xml:"InstanceSpec,omitempty"`
	// This parameter must be specified if you want to change coordinator nodes to AI coordinator nodes.
	//
	// >-  You cannot specify the MasterAISpec and MasterCU parameters at the same time.
	//
	// >- You can change coordinator nodes to AI coordinator nodes only in specific regions and zones.
	//
	// >- Only AnalyticDB for PostgreSQL V7.0 instances of Basic Edition support AI coordinator nodes.
	//
	// >- You can view the valid values of this parameter on the configuration change page of coordinator nodes.
	//
	// example:
	//
	// ADB.AIMedium.2
	MasterAISpec *string `json:"MasterAISpec,omitempty" xml:"MasterAISpec,omitempty"`
	// Master resources, with the following values:
	//
	// - 2 CU
	//
	// - 4 CU
	//
	// - 8 CU
	//
	// - 16 CU
	//
	// - 32 CU
	//
	// > Master resources above 8 CU will incur charges.
	//
	// example:
	//
	// 8 CU
	MasterCU *int32 `json:"MasterCU,omitempty" xml:"MasterCU,omitempty"`
	// This parameter is deprecated and should not be passed.
	//
	// example:
	//
	// null
	MasterNodeNum *string `json:"MasterNodeNum,omitempty" xml:"MasterNodeNum,omitempty"`
	OwnerId       *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The billing method of the instance. Valid values:
	//
	// 	- **Postpaid**: pay-as-you-go.
	//
	// 	- **Prepaid**: subscription.
	//
	// >
	//
	// 	- If you do not specify this parameter, Postpaid is used.
	//
	// 	- You can obtain more cost savings if you create a subscription instance for one year or longer. We recommend that you select the billing method that best suits your needs.
	//
	// example:
	//
	// Prepaid
	PayType *string `json:"PayType,omitempty" xml:"PayType,omitempty"`
	// Unit of the duration for which resources are purchased. The values are as follows:
	//
	// - **Month**: Month
	//
	// - **Year**: Year
	//
	// > This parameter is required when creating a subscription-billed instance.
	//
	// example:
	//
	// Month
	Period *string `json:"Period,omitempty" xml:"Period,omitempty"`
	// This parameter is deprecated and should not be passed.
	//
	// example:
	//
	// null
	PrivateIpAddress *string `json:"PrivateIpAddress,omitempty" xml:"PrivateIpAddress,omitempty"`
	// Product type. The values are as follows:
	//
	// - **standard**: Standard Edition.
	//
	// - **cost-effective**: Cost-Effective Edition.
	//
	// > If this parameter is not specified, the default value is Standard Edition.
	//
	// example:
	//
	// standard
	ProdType *string `json:"ProdType,omitempty" xml:"ProdType,omitempty"`
	// Region ID.
	//
	// > You can call the [DescribeRegions](https://help.aliyun.com/document_detail/86912.html) interface to view available region IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the enterprise resource group where the instance is located.
	//
	// example:
	//
	// rg-bp67acfmxazb4p****
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	// The IP address whitelist of the instance.
	//
	// A value of 127.0.0.1 denies access from any external IP address. You can call the [ModifySecurityIps](https://help.aliyun.com/document_detail/86928.html) operation to modify the IP address whitelist after you create an instance.
	//
	// example:
	//
	// 127.0.0.1
	SecurityIPList *string `json:"SecurityIPList,omitempty" xml:"SecurityIPList,omitempty"`
	// The performance level of ESSDs. Valid values:
	//
	// 	- **pl0**
	//
	// 	- **pl1**
	//
	// 	- **pl2**
	//
	// >
	//
	// 	- This parameter takes effect only when SegStorageType is set to cloud_essd.
	//
	// 	- If you do not specify this parameter, pl1 is used.
	//
	// example:
	//
	// pl1
	SegDiskPerformanceLevel *string `json:"SegDiskPerformanceLevel,omitempty" xml:"SegDiskPerformanceLevel,omitempty"`
	// The number of compute nodes. The value description is as follows:
	//
	// - For the high-availability version of the storage elastic mode, the value range is 4 to 512, and the value must be a multiple of 4.
	//
	// - For the basic version of the storage elastic mode, the value range is 2 to 512, and the value must be a multiple of 2.
	//
	// - For the Serverless mode, the value range is 2 to 512, and the value must be a multiple of 2.
	//
	// > This parameter is required when creating instances in the storage elastic mode or Serverless mode.
	//
	// example:
	//
	// 4
	SegNodeNum *string `json:"SegNodeNum,omitempty" xml:"SegNodeNum,omitempty"`
	// Disk storage type, currently only ESSD cloud disks are supported, with the value **cloud_essd**.
	//
	// > This parameter is required when creating an elastic storage mode instance.
	//
	// example:
	//
	// cloud_essd
	SegStorageType *string `json:"SegStorageType,omitempty" xml:"SegStorageType,omitempty"`
	// The mode of the Serverless instance. The values are as follows:
	//
	// - **Manual**: Manual scheduling (default).
	//
	// - **Auto**: Auto scheduling.
	//
	// > This parameter is required only for Serverless mode instances.
	//
	// example:
	//
	// Auto
	ServerlessMode *string `json:"ServerlessMode,omitempty" xml:"ServerlessMode,omitempty"`
	// The threshold for computing resources. The value range is 8 to 32, with a step of 8, and the unit is ACU. The default value is 32.
	//
	// > This parameter is required only for Serverless auto-scheduling mode instances.
	//
	// example:
	//
	// 32
	ServerlessResource *int32 `json:"ServerlessResource,omitempty" xml:"ServerlessResource,omitempty"`
	// ID of the source instance to be cloned.
	//
	// > You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) interface to view details of all AnalyticDB for PostgreSQL instances in the target region, including the instance ID.
	//
	// example:
	//
	// gp-bp***************
	SrcDbInstanceName *string `json:"SrcDbInstanceName,omitempty" xml:"SrcDbInstanceName,omitempty"`
	// VSwitch ID of the standby zone.
	//
	// >
	//
	// > - This parameter is required for multi-zone deployment.
	//
	// > - The VSwitch ID of the standby zone must be in the same zone as the StandbyZoneId.
	//
	// example:
	//
	// vsw-bp1cpq8mr64paltkb****
	StandbyVSwitchId *string `json:"StandbyVSwitchId,omitempty" xml:"StandbyVSwitchId,omitempty"`
	// ID of the standby zone.
	//
	// >
	//
	// > - This parameter is required for multi-zone deployment.
	//
	// > - You can call the [DescribeRegions](https://help.aliyun.com/document_detail/86912.html) interface to view available zone IDs.
	//
	// > - The ID of the standby zone must be different from the ID of the primary zone.
	//
	// example:
	//
	// cn-hangzhou-j
	StandbyZoneId *string `json:"StandbyZoneId,omitempty" xml:"StandbyZoneId,omitempty"`
	// The size of the storage space, in GB, with a value range of <props="china">50~8000<props="intl">50~6000.
	//
	// > This parameter is required when creating an instance in the storage elastic mode.
	//
	// example:
	//
	// 200
	StorageSize *int64 `json:"StorageSize,omitempty" xml:"StorageSize,omitempty"`
	// This parameter is deprecated and should not be passed.
	//
	// example:
	//
	// null
	StorageType *string `json:"StorageType,omitempty" xml:"StorageType,omitempty"`
	// The Nth tag. The value of N ranges from 1 to 20.
	Tag []*CreateDBInstanceRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
	// Duration for which resources are purchased. The values are as follows:
	//
	// - When **Period*	- is **Month**, the value ranges from 1 to 9.
	//
	// - When **Period*	- is **Year**, the value ranges from 1 to 3.
	//
	// > This parameter is required when creating a subscription-billed instance.
	//
	// example:
	//
	// 1
	UsedTime *string `json:"UsedTime,omitempty" xml:"UsedTime,omitempty"`
	// VPC ID.
	//
	// > - **VPCId*	- is required.
	//
	// > - The region of the **VPC*	- must be consistent with **RegionId**.
	//
	// example:
	//
	// vpc-bp19ame5m1r3oejns****
	VPCId *string `json:"VPCId,omitempty" xml:"VPCId,omitempty"`
	// vSwitch ID.
	//
	// > - **vSwitchId*	- is required.
	//
	// > - The availability zone of the **vSwitch*	- must be consistent with **ZoneId**.
	//
	// example:
	//
	// vsw-bp1cpq8mr64paltkb****
	VSwitchId *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	// Whether to enable vector engine optimization. The value description is as follows:
	//
	// - **enabled**: Enable vector engine optimization.
	//
	// - **disabled*	- (default): Do not enable vector engine optimization.
	//
	// > - For mainstream analysis scenarios, data warehouse scenarios, and real-time data warehouse scenarios, it is recommended to **not enable*	- vector engine optimization.
	//
	// > - For users using the vector analysis engine for AIGC, vector retrieval, and other scenarios, it is recommended to **enable*	- vector engine optimization.
	//
	// example:
	//
	// enabled
	VectorConfigurationStatus *string `json:"VectorConfigurationStatus,omitempty" xml:"VectorConfigurationStatus,omitempty"`
	// Zone ID.
	//
	// > You can call the [DescribeRegions](https://help.aliyun.com/document_detail/86912.html) interface to view available zone IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou-i
	ZoneId *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s CreateDBInstanceRequest) String() string {
	return dara.Prettify(s)
}

func (s CreateDBInstanceRequest) GoString() string {
	return s.String()
}

func (s *CreateDBInstanceRequest) GetAINodeSpecInfos() []*CreateDBInstanceRequestAINodeSpecInfos {
	return s.AINodeSpecInfos
}

func (s *CreateDBInstanceRequest) GetBackupId() *string {
	return s.BackupId
}

func (s *CreateDBInstanceRequest) GetClientToken() *string {
	return s.ClientToken
}

func (s *CreateDBInstanceRequest) GetCreateSampleData() *bool {
	return s.CreateSampleData
}

func (s *CreateDBInstanceRequest) GetDBInstanceCategory() *string {
	return s.DBInstanceCategory
}

func (s *CreateDBInstanceRequest) GetDBInstanceClass() *string {
	return s.DBInstanceClass
}

func (s *CreateDBInstanceRequest) GetDBInstanceDescription() *string {
	return s.DBInstanceDescription
}

func (s *CreateDBInstanceRequest) GetDBInstanceGroupCount() *string {
	return s.DBInstanceGroupCount
}

func (s *CreateDBInstanceRequest) GetDBInstanceMode() *string {
	return s.DBInstanceMode
}

func (s *CreateDBInstanceRequest) GetDeployMode() *string {
	return s.DeployMode
}

func (s *CreateDBInstanceRequest) GetEnableSSL() *bool {
	return s.EnableSSL
}

func (s *CreateDBInstanceRequest) GetEncryptionKey() *string {
	return s.EncryptionKey
}

func (s *CreateDBInstanceRequest) GetEncryptionType() *string {
	return s.EncryptionType
}

func (s *CreateDBInstanceRequest) GetEngine() *string {
	return s.Engine
}

func (s *CreateDBInstanceRequest) GetEngineVersion() *string {
	return s.EngineVersion
}

func (s *CreateDBInstanceRequest) GetIdleTime() *int32 {
	return s.IdleTime
}

func (s *CreateDBInstanceRequest) GetInstanceNetworkType() *string {
	return s.InstanceNetworkType
}

func (s *CreateDBInstanceRequest) GetInstanceSpec() *string {
	return s.InstanceSpec
}

func (s *CreateDBInstanceRequest) GetMasterAISpec() *string {
	return s.MasterAISpec
}

func (s *CreateDBInstanceRequest) GetMasterCU() *int32 {
	return s.MasterCU
}

func (s *CreateDBInstanceRequest) GetMasterNodeNum() *string {
	return s.MasterNodeNum
}

func (s *CreateDBInstanceRequest) GetOwnerId() *int64 {
	return s.OwnerId
}

func (s *CreateDBInstanceRequest) GetPayType() *string {
	return s.PayType
}

func (s *CreateDBInstanceRequest) GetPeriod() *string {
	return s.Period
}

func (s *CreateDBInstanceRequest) GetPrivateIpAddress() *string {
	return s.PrivateIpAddress
}

func (s *CreateDBInstanceRequest) GetProdType() *string {
	return s.ProdType
}

func (s *CreateDBInstanceRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *CreateDBInstanceRequest) GetResourceGroupId() *string {
	return s.ResourceGroupId
}

func (s *CreateDBInstanceRequest) GetSecurityIPList() *string {
	return s.SecurityIPList
}

func (s *CreateDBInstanceRequest) GetSegDiskPerformanceLevel() *string {
	return s.SegDiskPerformanceLevel
}

func (s *CreateDBInstanceRequest) GetSegNodeNum() *string {
	return s.SegNodeNum
}

func (s *CreateDBInstanceRequest) GetSegStorageType() *string {
	return s.SegStorageType
}

func (s *CreateDBInstanceRequest) GetServerlessMode() *string {
	return s.ServerlessMode
}

func (s *CreateDBInstanceRequest) GetServerlessResource() *int32 {
	return s.ServerlessResource
}

func (s *CreateDBInstanceRequest) GetSrcDbInstanceName() *string {
	return s.SrcDbInstanceName
}

func (s *CreateDBInstanceRequest) GetStandbyVSwitchId() *string {
	return s.StandbyVSwitchId
}

func (s *CreateDBInstanceRequest) GetStandbyZoneId() *string {
	return s.StandbyZoneId
}

func (s *CreateDBInstanceRequest) GetStorageSize() *int64 {
	return s.StorageSize
}

func (s *CreateDBInstanceRequest) GetStorageType() *string {
	return s.StorageType
}

func (s *CreateDBInstanceRequest) GetTag() []*CreateDBInstanceRequestTag {
	return s.Tag
}

func (s *CreateDBInstanceRequest) GetUsedTime() *string {
	return s.UsedTime
}

func (s *CreateDBInstanceRequest) GetVPCId() *string {
	return s.VPCId
}

func (s *CreateDBInstanceRequest) GetVSwitchId() *string {
	return s.VSwitchId
}

func (s *CreateDBInstanceRequest) GetVectorConfigurationStatus() *string {
	return s.VectorConfigurationStatus
}

func (s *CreateDBInstanceRequest) GetZoneId() *string {
	return s.ZoneId
}

func (s *CreateDBInstanceRequest) SetAINodeSpecInfos(v []*CreateDBInstanceRequestAINodeSpecInfos) *CreateDBInstanceRequest {
	s.AINodeSpecInfos = v
	return s
}

func (s *CreateDBInstanceRequest) SetBackupId(v string) *CreateDBInstanceRequest {
	s.BackupId = &v
	return s
}

func (s *CreateDBInstanceRequest) SetClientToken(v string) *CreateDBInstanceRequest {
	s.ClientToken = &v
	return s
}

func (s *CreateDBInstanceRequest) SetCreateSampleData(v bool) *CreateDBInstanceRequest {
	s.CreateSampleData = &v
	return s
}

func (s *CreateDBInstanceRequest) SetDBInstanceCategory(v string) *CreateDBInstanceRequest {
	s.DBInstanceCategory = &v
	return s
}

func (s *CreateDBInstanceRequest) SetDBInstanceClass(v string) *CreateDBInstanceRequest {
	s.DBInstanceClass = &v
	return s
}

func (s *CreateDBInstanceRequest) SetDBInstanceDescription(v string) *CreateDBInstanceRequest {
	s.DBInstanceDescription = &v
	return s
}

func (s *CreateDBInstanceRequest) SetDBInstanceGroupCount(v string) *CreateDBInstanceRequest {
	s.DBInstanceGroupCount = &v
	return s
}

func (s *CreateDBInstanceRequest) SetDBInstanceMode(v string) *CreateDBInstanceRequest {
	s.DBInstanceMode = &v
	return s
}

func (s *CreateDBInstanceRequest) SetDeployMode(v string) *CreateDBInstanceRequest {
	s.DeployMode = &v
	return s
}

func (s *CreateDBInstanceRequest) SetEnableSSL(v bool) *CreateDBInstanceRequest {
	s.EnableSSL = &v
	return s
}

func (s *CreateDBInstanceRequest) SetEncryptionKey(v string) *CreateDBInstanceRequest {
	s.EncryptionKey = &v
	return s
}

func (s *CreateDBInstanceRequest) SetEncryptionType(v string) *CreateDBInstanceRequest {
	s.EncryptionType = &v
	return s
}

func (s *CreateDBInstanceRequest) SetEngine(v string) *CreateDBInstanceRequest {
	s.Engine = &v
	return s
}

func (s *CreateDBInstanceRequest) SetEngineVersion(v string) *CreateDBInstanceRequest {
	s.EngineVersion = &v
	return s
}

func (s *CreateDBInstanceRequest) SetIdleTime(v int32) *CreateDBInstanceRequest {
	s.IdleTime = &v
	return s
}

func (s *CreateDBInstanceRequest) SetInstanceNetworkType(v string) *CreateDBInstanceRequest {
	s.InstanceNetworkType = &v
	return s
}

func (s *CreateDBInstanceRequest) SetInstanceSpec(v string) *CreateDBInstanceRequest {
	s.InstanceSpec = &v
	return s
}

func (s *CreateDBInstanceRequest) SetMasterAISpec(v string) *CreateDBInstanceRequest {
	s.MasterAISpec = &v
	return s
}

func (s *CreateDBInstanceRequest) SetMasterCU(v int32) *CreateDBInstanceRequest {
	s.MasterCU = &v
	return s
}

func (s *CreateDBInstanceRequest) SetMasterNodeNum(v string) *CreateDBInstanceRequest {
	s.MasterNodeNum = &v
	return s
}

func (s *CreateDBInstanceRequest) SetOwnerId(v int64) *CreateDBInstanceRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateDBInstanceRequest) SetPayType(v string) *CreateDBInstanceRequest {
	s.PayType = &v
	return s
}

func (s *CreateDBInstanceRequest) SetPeriod(v string) *CreateDBInstanceRequest {
	s.Period = &v
	return s
}

func (s *CreateDBInstanceRequest) SetPrivateIpAddress(v string) *CreateDBInstanceRequest {
	s.PrivateIpAddress = &v
	return s
}

func (s *CreateDBInstanceRequest) SetProdType(v string) *CreateDBInstanceRequest {
	s.ProdType = &v
	return s
}

func (s *CreateDBInstanceRequest) SetRegionId(v string) *CreateDBInstanceRequest {
	s.RegionId = &v
	return s
}

func (s *CreateDBInstanceRequest) SetResourceGroupId(v string) *CreateDBInstanceRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *CreateDBInstanceRequest) SetSecurityIPList(v string) *CreateDBInstanceRequest {
	s.SecurityIPList = &v
	return s
}

func (s *CreateDBInstanceRequest) SetSegDiskPerformanceLevel(v string) *CreateDBInstanceRequest {
	s.SegDiskPerformanceLevel = &v
	return s
}

func (s *CreateDBInstanceRequest) SetSegNodeNum(v string) *CreateDBInstanceRequest {
	s.SegNodeNum = &v
	return s
}

func (s *CreateDBInstanceRequest) SetSegStorageType(v string) *CreateDBInstanceRequest {
	s.SegStorageType = &v
	return s
}

func (s *CreateDBInstanceRequest) SetServerlessMode(v string) *CreateDBInstanceRequest {
	s.ServerlessMode = &v
	return s
}

func (s *CreateDBInstanceRequest) SetServerlessResource(v int32) *CreateDBInstanceRequest {
	s.ServerlessResource = &v
	return s
}

func (s *CreateDBInstanceRequest) SetSrcDbInstanceName(v string) *CreateDBInstanceRequest {
	s.SrcDbInstanceName = &v
	return s
}

func (s *CreateDBInstanceRequest) SetStandbyVSwitchId(v string) *CreateDBInstanceRequest {
	s.StandbyVSwitchId = &v
	return s
}

func (s *CreateDBInstanceRequest) SetStandbyZoneId(v string) *CreateDBInstanceRequest {
	s.StandbyZoneId = &v
	return s
}

func (s *CreateDBInstanceRequest) SetStorageSize(v int64) *CreateDBInstanceRequest {
	s.StorageSize = &v
	return s
}

func (s *CreateDBInstanceRequest) SetStorageType(v string) *CreateDBInstanceRequest {
	s.StorageType = &v
	return s
}

func (s *CreateDBInstanceRequest) SetTag(v []*CreateDBInstanceRequestTag) *CreateDBInstanceRequest {
	s.Tag = v
	return s
}

func (s *CreateDBInstanceRequest) SetUsedTime(v string) *CreateDBInstanceRequest {
	s.UsedTime = &v
	return s
}

func (s *CreateDBInstanceRequest) SetVPCId(v string) *CreateDBInstanceRequest {
	s.VPCId = &v
	return s
}

func (s *CreateDBInstanceRequest) SetVSwitchId(v string) *CreateDBInstanceRequest {
	s.VSwitchId = &v
	return s
}

func (s *CreateDBInstanceRequest) SetVectorConfigurationStatus(v string) *CreateDBInstanceRequest {
	s.VectorConfigurationStatus = &v
	return s
}

func (s *CreateDBInstanceRequest) SetZoneId(v string) *CreateDBInstanceRequest {
	s.ZoneId = &v
	return s
}

func (s *CreateDBInstanceRequest) Validate() error {
	return dara.Validate(s)
}

type CreateDBInstanceRequestAINodeSpecInfos struct {
	AINodeNum  *string `json:"AINodeNum,omitempty" xml:"AINodeNum,omitempty"`
	AINodeSpec *string `json:"AINodeSpec,omitempty" xml:"AINodeSpec,omitempty"`
}

func (s CreateDBInstanceRequestAINodeSpecInfos) String() string {
	return dara.Prettify(s)
}

func (s CreateDBInstanceRequestAINodeSpecInfos) GoString() string {
	return s.String()
}

func (s *CreateDBInstanceRequestAINodeSpecInfos) GetAINodeNum() *string {
	return s.AINodeNum
}

func (s *CreateDBInstanceRequestAINodeSpecInfos) GetAINodeSpec() *string {
	return s.AINodeSpec
}

func (s *CreateDBInstanceRequestAINodeSpecInfos) SetAINodeNum(v string) *CreateDBInstanceRequestAINodeSpecInfos {
	s.AINodeNum = &v
	return s
}

func (s *CreateDBInstanceRequestAINodeSpecInfos) SetAINodeSpec(v string) *CreateDBInstanceRequestAINodeSpecInfos {
	s.AINodeSpec = &v
	return s
}

func (s *CreateDBInstanceRequestAINodeSpecInfos) Validate() error {
	return dara.Validate(s)
}

type CreateDBInstanceRequestTag struct {
	// Tag key. The restrictions are as follows:
	//
	// - It cannot be an empty string.
	//
	// - It supports up to 128 characters.
	//
	// - It cannot start with `aliyun` or `acs:`, and it cannot contain `http://` or `https://`.
	//
	// example:
	//
	// TestKey
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// Tag value. The restrictions are as follows:
	//
	// - It can be an empty string.
	//
	// - It supports up to 128 characters.
	//
	// - It cannot start with `acs:`, and it cannot contain `http://` or `https://`.
	//
	// example:
	//
	// TestValue
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s CreateDBInstanceRequestTag) String() string {
	return dara.Prettify(s)
}

func (s CreateDBInstanceRequestTag) GoString() string {
	return s.String()
}

func (s *CreateDBInstanceRequestTag) GetKey() *string {
	return s.Key
}

func (s *CreateDBInstanceRequestTag) GetValue() *string {
	return s.Value
}

func (s *CreateDBInstanceRequestTag) SetKey(v string) *CreateDBInstanceRequestTag {
	s.Key = &v
	return s
}

func (s *CreateDBInstanceRequestTag) SetValue(v string) *CreateDBInstanceRequestTag {
	s.Value = &v
	return s
}

func (s *CreateDBInstanceRequestTag) Validate() error {
	return dara.Validate(s)
}

type iCreateDBInstanceResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetConnectionString(v string) *CreateDBInstanceResponseBody
	GetConnectionString() *string
	SetDBInstanceId(v string) *CreateDBInstanceResponseBody
	GetDBInstanceId() *string
	SetOrderId(v string) *CreateDBInstanceResponseBody
	GetOrderId() *string
	SetPort(v string) *CreateDBInstanceResponseBody
	GetPort() *string
	SetRequestId(v string) *CreateDBInstanceResponseBody
	GetRequestId() *string
}

type CreateDBInstanceResponseBody struct {
	// This parameter is deprecated and will not return a value.
	//
	// You can use the [DescribeDBInstanceAttribute](https://help.aliyun.com/document_detail/86910.html) interface to view the connection address of the instance.
	//
	// example:
	//
	// gp-bp12ga6v69h86****.gpdb.rds.aliyuncs.com
	ConnectionString *string `json:"ConnectionString,omitempty" xml:"ConnectionString,omitempty"`
	// Instance ID.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// Order ID.
	//
	// example:
	//
	// 111111111111
	OrderId *string `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
	// This parameter is deprecated and will not return a value.
	//
	// You can use the [DescribeDBInstanceAttribute](https://help.aliyun.com/document_detail/86910.html) interface to view the port number of the instance.
	//
	// example:
	//
	// 3432
	Port *string `json:"Port,omitempty" xml:"Port,omitempty"`
	// Request ID.
	//
	// example:
	//
	// 5414A4E5-4C36-4461-95FC-************
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateDBInstanceResponseBody) String() string {
	return dara.Prettify(s)
}

func (s CreateDBInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *CreateDBInstanceResponseBody) GetConnectionString() *string {
	return s.ConnectionString
}

func (s *CreateDBInstanceResponseBody) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *CreateDBInstanceResponseBody) GetOrderId() *string {
	return s.OrderId
}

func (s *CreateDBInstanceResponseBody) GetPort() *string {
	return s.Port
}

func (s *CreateDBInstanceResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *CreateDBInstanceResponseBody) SetConnectionString(v string) *CreateDBInstanceResponseBody {
	s.ConnectionString = &v
	return s
}

func (s *CreateDBInstanceResponseBody) SetDBInstanceId(v string) *CreateDBInstanceResponseBody {
	s.DBInstanceId = &v
	return s
}

func (s *CreateDBInstanceResponseBody) SetOrderId(v string) *CreateDBInstanceResponseBody {
	s.OrderId = &v
	return s
}

func (s *CreateDBInstanceResponseBody) SetPort(v string) *CreateDBInstanceResponseBody {
	s.Port = &v
	return s
}

func (s *CreateDBInstanceResponseBody) SetRequestId(v string) *CreateDBInstanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateDBInstanceResponseBody) Validate() error {
	return dara.Validate(s)
}

type iCreateDBInstanceResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *CreateDBInstanceResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *CreateDBInstanceResponse
	GetStatusCode() *int32
	SetBody(v *CreateDBInstanceResponseBody) *CreateDBInstanceResponse
	GetBody() *CreateDBInstanceResponseBody
}

type CreateDBInstanceResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateDBInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateDBInstanceResponse) String() string {
	return dara.Prettify(s)
}

func (s CreateDBInstanceResponse) GoString() string {
	return s.String()
}

func (s *CreateDBInstanceResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *CreateDBInstanceResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *CreateDBInstanceResponse) GetBody() *CreateDBInstanceResponseBody {
	return s.Body
}

func (s *CreateDBInstanceResponse) SetHeaders(v map[string]*string) *CreateDBInstanceResponse {
	s.Headers = v
	return s
}

func (s *CreateDBInstanceResponse) SetStatusCode(v int32) *CreateDBInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateDBInstanceResponse) SetBody(v *CreateDBInstanceResponseBody) *CreateDBInstanceResponse {
	s.Body = v
	return s
}

func (s *CreateDBInstanceResponse) Validate() error {
	return dara.Validate(s)
}

type iCreateDBInstancePlanRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *CreateDBInstancePlanRequest
	GetDBInstanceId() *string
	SetOwnerId(v int64) *CreateDBInstancePlanRequest
	GetOwnerId() *int64
	SetPlanConfig(v string) *CreateDBInstancePlanRequest
	GetPlanConfig() *string
	SetPlanDesc(v string) *CreateDBInstancePlanRequest
	GetPlanDesc() *string
	SetPlanEndDate(v string) *CreateDBInstancePlanRequest
	GetPlanEndDate() *string
	SetPlanName(v string) *CreateDBInstancePlanRequest
	GetPlanName() *string
	SetPlanScheduleType(v string) *CreateDBInstancePlanRequest
	GetPlanScheduleType() *string
	SetPlanStartDate(v string) *CreateDBInstancePlanRequest
	GetPlanStartDate() *string
	SetPlanType(v string) *CreateDBInstancePlanRequest
	GetPlanType() *string
}

type CreateDBInstancePlanRequest struct {
	// The instance ID.
	//
	// > You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the IDs of all AnalyticDB for PostgreSQL instances within a region.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The execution information of the plan. Specify the parameter in the JSON format. The parameter value varies based on the values of **PlanType*	- and **PlanScheduleType**. The following section describes the PlanConfig parameter.
	//
	// This parameter is required.
	//
	// example:
	//
	// {"pause":{"planCronTime":"0 0 12 1/1 	- ? "},"resume":{"planCronTime":"0 0 0 1/1 	- ? "}}
	PlanConfig *string `json:"PlanConfig,omitempty" xml:"PlanConfig,omitempty"`
	// The description of the plan.
	//
	// example:
	//
	// this is a test plan
	PlanDesc *string `json:"PlanDesc,omitempty" xml:"PlanDesc,omitempty"`
	// The end time of the plan. Specify the time in the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time must be in UTC. The end time must be later than the start time.
	//
	// >
	//
	// 	- This parameter must be specified only when **PlanScheduleType*	- is set to **Regular**.
	//
	// 	- If you do not specify this parameter, the plan stops until the plan is deleted.
	//
	// example:
	//
	// 2023-04-17T23:00Z
	PlanEndDate *string `json:"PlanEndDate,omitempty" xml:"PlanEndDate,omitempty"`
	// The name of the plan.
	//
	// This parameter is required.
	//
	// example:
	//
	// test-plan
	PlanName *string `json:"PlanName,omitempty" xml:"PlanName,omitempty"`
	// The execution mode of the plan. Valid values:
	//
	// 	- **Postpone**: The plan is executed later.
	//
	// 	- **Regular**: The plan is executed periodically.
	//
	// This parameter is required.
	//
	// example:
	//
	// Regular
	PlanScheduleType *string `json:"PlanScheduleType,omitempty" xml:"PlanScheduleType,omitempty"`
	// The start time of the plan. Specify the time in the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time must be in UTC.
	//
	// >
	//
	// 	- This parameter must be specified only when **PlanScheduleType*	- is set to **Regular**.
	//
	// 	- If you do not specify this parameter, the current time is used.
	//
	// example:
	//
	// 2022-04-17T23:00Z
	PlanStartDate *string `json:"PlanStartDate,omitempty" xml:"PlanStartDate,omitempty"`
	// The type of the plan. Valid values:
	//
	// 	- **PauseResume**: pauses and resumes an instance.
	//
	// 	- **Resize**: changes the number of compute nodes.
	//
	// 	- **ModifySpec**: changes compute node specifications.
	//
	// > - You can specify the value to ModifySpec only for instances in elastic storage mode.
	//
	// >- You can specify the value to ModifySpec only for instances in elastic storage mode.
	//
	// This parameter is required.
	//
	// example:
	//
	// PauseResume
	PlanType *string `json:"PlanType,omitempty" xml:"PlanType,omitempty"`
}

func (s CreateDBInstancePlanRequest) String() string {
	return dara.Prettify(s)
}

func (s CreateDBInstancePlanRequest) GoString() string {
	return s.String()
}

func (s *CreateDBInstancePlanRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *CreateDBInstancePlanRequest) GetOwnerId() *int64 {
	return s.OwnerId
}

func (s *CreateDBInstancePlanRequest) GetPlanConfig() *string {
	return s.PlanConfig
}

func (s *CreateDBInstancePlanRequest) GetPlanDesc() *string {
	return s.PlanDesc
}

func (s *CreateDBInstancePlanRequest) GetPlanEndDate() *string {
	return s.PlanEndDate
}

func (s *CreateDBInstancePlanRequest) GetPlanName() *string {
	return s.PlanName
}

func (s *CreateDBInstancePlanRequest) GetPlanScheduleType() *string {
	return s.PlanScheduleType
}

func (s *CreateDBInstancePlanRequest) GetPlanStartDate() *string {
	return s.PlanStartDate
}

func (s *CreateDBInstancePlanRequest) GetPlanType() *string {
	return s.PlanType
}

func (s *CreateDBInstancePlanRequest) SetDBInstanceId(v string) *CreateDBInstancePlanRequest {
	s.DBInstanceId = &v
	return s
}

func (s *CreateDBInstancePlanRequest) SetOwnerId(v int64) *CreateDBInstancePlanRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateDBInstancePlanRequest) SetPlanConfig(v string) *CreateDBInstancePlanRequest {
	s.PlanConfig = &v
	return s
}

func (s *CreateDBInstancePlanRequest) SetPlanDesc(v string) *CreateDBInstancePlanRequest {
	s.PlanDesc = &v
	return s
}

func (s *CreateDBInstancePlanRequest) SetPlanEndDate(v string) *CreateDBInstancePlanRequest {
	s.PlanEndDate = &v
	return s
}

func (s *CreateDBInstancePlanRequest) SetPlanName(v string) *CreateDBInstancePlanRequest {
	s.PlanName = &v
	return s
}

func (s *CreateDBInstancePlanRequest) SetPlanScheduleType(v string) *CreateDBInstancePlanRequest {
	s.PlanScheduleType = &v
	return s
}

func (s *CreateDBInstancePlanRequest) SetPlanStartDate(v string) *CreateDBInstancePlanRequest {
	s.PlanStartDate = &v
	return s
}

func (s *CreateDBInstancePlanRequest) SetPlanType(v string) *CreateDBInstancePlanRequest {
	s.PlanType = &v
	return s
}

func (s *CreateDBInstancePlanRequest) Validate() error {
	return dara.Validate(s)
}

type iCreateDBInstancePlanResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *CreateDBInstancePlanResponseBody
	GetDBInstanceId() *string
	SetErrorMessage(v string) *CreateDBInstancePlanResponseBody
	GetErrorMessage() *string
	SetPlanId(v string) *CreateDBInstancePlanResponseBody
	GetPlanId() *string
	SetRequestId(v string) *CreateDBInstancePlanResponseBody
	GetRequestId() *string
	SetStatus(v string) *CreateDBInstancePlanResponseBody
	GetStatus() *string
}

type CreateDBInstancePlanResponseBody struct {
	// The instance ID.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The error message.
	//
	// This parameter is returned only if the request fails.
	//
	// example:
	//
	// ****
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// The plan ID.
	//
	// example:
	//
	// 1234
	PlanId *string `json:"PlanId,omitempty" xml:"PlanId,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 34b32a0a-08ef-4a87-b6be-cdd9f56fc3ad
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful.
	//
	// If the request was successful, **success*	- is returned. If the request failed, this parameter is not returned.
	//
	// example:
	//
	// success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s CreateDBInstancePlanResponseBody) String() string {
	return dara.Prettify(s)
}

func (s CreateDBInstancePlanResponseBody) GoString() string {
	return s.String()
}

func (s *CreateDBInstancePlanResponseBody) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *CreateDBInstancePlanResponseBody) GetErrorMessage() *string {
	return s.ErrorMessage
}

func (s *CreateDBInstancePlanResponseBody) GetPlanId() *string {
	return s.PlanId
}

func (s *CreateDBInstancePlanResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *CreateDBInstancePlanResponseBody) GetStatus() *string {
	return s.Status
}

func (s *CreateDBInstancePlanResponseBody) SetDBInstanceId(v string) *CreateDBInstancePlanResponseBody {
	s.DBInstanceId = &v
	return s
}

func (s *CreateDBInstancePlanResponseBody) SetErrorMessage(v string) *CreateDBInstancePlanResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *CreateDBInstancePlanResponseBody) SetPlanId(v string) *CreateDBInstancePlanResponseBody {
	s.PlanId = &v
	return s
}

func (s *CreateDBInstancePlanResponseBody) SetRequestId(v string) *CreateDBInstancePlanResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateDBInstancePlanResponseBody) SetStatus(v string) *CreateDBInstancePlanResponseBody {
	s.Status = &v
	return s
}

func (s *CreateDBInstancePlanResponseBody) Validate() error {
	return dara.Validate(s)
}

type iCreateDBInstancePlanResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *CreateDBInstancePlanResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *CreateDBInstancePlanResponse
	GetStatusCode() *int32
	SetBody(v *CreateDBInstancePlanResponseBody) *CreateDBInstancePlanResponse
	GetBody() *CreateDBInstancePlanResponseBody
}

type CreateDBInstancePlanResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateDBInstancePlanResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateDBInstancePlanResponse) String() string {
	return dara.Prettify(s)
}

func (s CreateDBInstancePlanResponse) GoString() string {
	return s.String()
}

func (s *CreateDBInstancePlanResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *CreateDBInstancePlanResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *CreateDBInstancePlanResponse) GetBody() *CreateDBInstancePlanResponseBody {
	return s.Body
}

func (s *CreateDBInstancePlanResponse) SetHeaders(v map[string]*string) *CreateDBInstancePlanResponse {
	s.Headers = v
	return s
}

func (s *CreateDBInstancePlanResponse) SetStatusCode(v int32) *CreateDBInstancePlanResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateDBInstancePlanResponse) SetBody(v *CreateDBInstancePlanResponseBody) *CreateDBInstancePlanResponse {
	s.Body = v
	return s
}

func (s *CreateDBInstancePlanResponse) Validate() error {
	return dara.Validate(s)
}

type iCreateDBResourceGroupRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *CreateDBResourceGroupRequest
	GetDBInstanceId() *string
	SetOwnerId(v int64) *CreateDBResourceGroupRequest
	GetOwnerId() *int64
	SetResourceGroupConfig(v string) *CreateDBResourceGroupRequest
	GetResourceGroupConfig() *string
	SetResourceGroupName(v string) *CreateDBResourceGroupRequest
	GetResourceGroupName() *string
}

type CreateDBResourceGroupRequest struct {
	// The instance ID.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The configurations of the resource group.
	//
	// >
	//
	// 	- CpuRateLimit: the percentage of CPU resources that are available for the resource group. Unit: %.
	//
	// 	- MemoryLimit: the percentage of memory resources that are available for the resource group. Unit: %.
	//
	// 	- MemorySharedQuota: the percentage of memory resources shared among transactions that are submitted to the resource group. Unit: %. Default value: 80.
	//
	// 	- MemorySpillRatio: the memory spill ratio for memory-intensive transactions. When the memory that is used by memory-intensive transactions reaches this value, data is spilled to disks. Unit: %. Default value: 0.
	//
	// 	- Concurrency: the maximum number of concurrent transactions or parallel queries that are allowed for a resource group. Default value: 20.
	//
	// This parameter is required.
	//
	// example:
	//
	// {"CpuRateLimit":"10","MemoryLimit":"12","MemorySharedQuota":"20","MemorySpillRatio":"75","Concurrency":"3"}
	ResourceGroupConfig *string `json:"ResourceGroupConfig,omitempty" xml:"ResourceGroupConfig,omitempty"`
	// The name of the resource group.
	//
	// This parameter is required.
	//
	// example:
	//
	// testgroup
	ResourceGroupName *string `json:"ResourceGroupName,omitempty" xml:"ResourceGroupName,omitempty"`
}

func (s CreateDBResourceGroupRequest) String() string {
	return dara.Prettify(s)
}

func (s CreateDBResourceGroupRequest) GoString() string {
	return s.String()
}

func (s *CreateDBResourceGroupRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *CreateDBResourceGroupRequest) GetOwnerId() *int64 {
	return s.OwnerId
}

func (s *CreateDBResourceGroupRequest) GetResourceGroupConfig() *string {
	return s.ResourceGroupConfig
}

func (s *CreateDBResourceGroupRequest) GetResourceGroupName() *string {
	return s.ResourceGroupName
}

func (s *CreateDBResourceGroupRequest) SetDBInstanceId(v string) *CreateDBResourceGroupRequest {
	s.DBInstanceId = &v
	return s
}

func (s *CreateDBResourceGroupRequest) SetOwnerId(v int64) *CreateDBResourceGroupRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateDBResourceGroupRequest) SetResourceGroupConfig(v string) *CreateDBResourceGroupRequest {
	s.ResourceGroupConfig = &v
	return s
}

func (s *CreateDBResourceGroupRequest) SetResourceGroupName(v string) *CreateDBResourceGroupRequest {
	s.ResourceGroupName = &v
	return s
}

func (s *CreateDBResourceGroupRequest) Validate() error {
	return dara.Validate(s)
}

type iCreateDBResourceGroupResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetRequestId(v string) *CreateDBResourceGroupResponseBody
	GetRequestId() *string
}

type CreateDBResourceGroupResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateDBResourceGroupResponseBody) String() string {
	return dara.Prettify(s)
}

func (s CreateDBResourceGroupResponseBody) GoString() string {
	return s.String()
}

func (s *CreateDBResourceGroupResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *CreateDBResourceGroupResponseBody) SetRequestId(v string) *CreateDBResourceGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateDBResourceGroupResponseBody) Validate() error {
	return dara.Validate(s)
}

type iCreateDBResourceGroupResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *CreateDBResourceGroupResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *CreateDBResourceGroupResponse
	GetStatusCode() *int32
	SetBody(v *CreateDBResourceGroupResponseBody) *CreateDBResourceGroupResponse
	GetBody() *CreateDBResourceGroupResponseBody
}

type CreateDBResourceGroupResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateDBResourceGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateDBResourceGroupResponse) String() string {
	return dara.Prettify(s)
}

func (s CreateDBResourceGroupResponse) GoString() string {
	return s.String()
}

func (s *CreateDBResourceGroupResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *CreateDBResourceGroupResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *CreateDBResourceGroupResponse) GetBody() *CreateDBResourceGroupResponseBody {
	return s.Body
}

func (s *CreateDBResourceGroupResponse) SetHeaders(v map[string]*string) *CreateDBResourceGroupResponse {
	s.Headers = v
	return s
}

func (s *CreateDBResourceGroupResponse) SetStatusCode(v int32) *CreateDBResourceGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateDBResourceGroupResponse) SetBody(v *CreateDBResourceGroupResponseBody) *CreateDBResourceGroupResponse {
	s.Body = v
	return s
}

func (s *CreateDBResourceGroupResponse) Validate() error {
	return dara.Validate(s)
}

type iCreateDocumentCollectionRequest interface {
	dara.Model
	String() string
	GoString() string
	SetCollection(v string) *CreateDocumentCollectionRequest
	GetCollection() *string
	SetDBInstanceId(v string) *CreateDocumentCollectionRequest
	GetDBInstanceId() *string
	SetDimension(v int32) *CreateDocumentCollectionRequest
	GetDimension() *int32
	SetEmbeddingModel(v string) *CreateDocumentCollectionRequest
	GetEmbeddingModel() *string
	SetExternalStorage(v int32) *CreateDocumentCollectionRequest
	GetExternalStorage() *int32
	SetFullTextRetrievalFields(v string) *CreateDocumentCollectionRequest
	GetFullTextRetrievalFields() *string
	SetHnswEfConstruction(v string) *CreateDocumentCollectionRequest
	GetHnswEfConstruction() *string
	SetHnswM(v int32) *CreateDocumentCollectionRequest
	GetHnswM() *int32
	SetManagerAccount(v string) *CreateDocumentCollectionRequest
	GetManagerAccount() *string
	SetManagerAccountPassword(v string) *CreateDocumentCollectionRequest
	GetManagerAccountPassword() *string
	SetMetadata(v string) *CreateDocumentCollectionRequest
	GetMetadata() *string
	SetMetadataIndices(v string) *CreateDocumentCollectionRequest
	GetMetadataIndices() *string
	SetMetrics(v string) *CreateDocumentCollectionRequest
	GetMetrics() *string
	SetNamespace(v string) *CreateDocumentCollectionRequest
	GetNamespace() *string
	SetOwnerId(v int64) *CreateDocumentCollectionRequest
	GetOwnerId() *int64
	SetParser(v string) *CreateDocumentCollectionRequest
	GetParser() *string
	SetPqEnable(v int32) *CreateDocumentCollectionRequest
	GetPqEnable() *int32
	SetRegionId(v string) *CreateDocumentCollectionRequest
	GetRegionId() *string
}

type CreateDocumentCollectionRequest struct {
	// The name of the document collection that you want to create.
	//
	// > The name must comply with PostgreSQL object naming restrictions.
	//
	// This parameter is required.
	//
	// example:
	//
	// document
	Collection *string `json:"Collection,omitempty" xml:"Collection,omitempty"`
	// The instance ID.
	//
	// > You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) API to view details of all AnalyticDB for PostgreSQL instances in the target region, including the instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	Dimension    *int32  `json:"Dimension,omitempty" xml:"Dimension,omitempty"`
	// The vectorization algorithm.
	//
	// >  Supported algorithms:
	//
	// 	- text-embedding-v1: the algorithm that produces 1536-dimensional vectors.
	//
	// 	- text-embedding-v2: the algorithm that produces 1536-dimensional vectors.
	//
	// 	- text2vec: the algorithm that produces 1024-dimensional vectors.
	//
	// 	- m3e-base: the algorithm that produces 768-dimensional vectors.
	//
	// 	- m3e-small: the algorithm that produces 512-dimensional vectors.
	//
	// 	- clip-vit-b-32: the image vectorization algorithm that uses the Contrastive Language-Image Pre-Training (CLIP) ViT-B/32 model and produces 512-dimensional vectors.
	//
	// 	- clip-vit-b-16: the image vectorization algorithm that uses the CLIP ViT-B/16 model and produces 512-dimensional vectors.
	//
	// 	- clip-vit-l-14: the image vectorization algorithm that uses the CLIP ViT-L/14 model and produces 768-dimensional vectors.
	//
	// 	- clip-vit-l-14-336px: the image vectorization algorithm that uses the CLIP ViT-L/14@336px model and produces 768-dimensional vectors.
	//
	// 	- clip-rn50: the image vectorization algorithm that uses the CLIP RN50 model and produces 1024-dimensional vectors.
	//
	// 	- clip-rn101: the image vectorization algorithm that uses the CLIP RN101 model and produces 512-dimensional vectors.
	//
	// 	- clip-rn50x4: the image vectorization algorithm that uses the CLIP RN50x4 model and produces 640-dimensional vectors.
	//
	// 	- clip-rn50x16: the image vectorization algorithm that uses the CLIP RN50x16 model and produces 768-dimensional vectors.
	//
	// 	- clip-rn50x64: the image vectorization algorithm that uses the CLIP RN50x64 model and produces 1024-dimensional vectors.
	//
	// example:
	//
	// text-embedding-v1
	EmbeddingModel *string `json:"EmbeddingModel,omitempty" xml:"EmbeddingModel,omitempty"`
	// Specifies whether to use the memory mapping technology to create HNSW indexes. Valid values: 0 and 1. Default value: 0. We recommend that you set the value to 1 in scenarios that require upload speed but not data deletion.
	//
	// >
	//
	// 	- 0: uses segmented paging storage to create indexes. This method uses the shared buffer of PostgreSQL for caching and supports the delete and update operations.
	//
	// 	- 1: uses the memory mapping technology to create indexes. This method does not support the delete or update operation.
	//
	// example:
	//
	// 0
	ExternalStorage *int32 `json:"ExternalStorage,omitempty" xml:"ExternalStorage,omitempty"`
	// The fields used for full-text search. Separate multiple fields with commas (,). These fields must be keys defined in Metadata.
	//
	// example:
	//
	// title,page
	FullTextRetrievalFields *string `json:"FullTextRetrievalFields,omitempty" xml:"FullTextRetrievalFields,omitempty"`
	HnswEfConstruction      *string `json:"HnswEfConstruction,omitempty" xml:"HnswEfConstruction,omitempty"`
	// The maximum number of neighbors for the Hierarchical Navigable Small World (HNSW) algorithm. Valid values: 1 to 1000. In most cases, this parameter is automatically configured based on the value of the Dimension parameter. You do not need to configure this parameter.
	//
	// >  We recommend that you configure this parameter based on the value of the Dimension parameter.
	//
	// 	- If you set Dimension to a value less than or equal to 384, set the value of HnswM to 16.
	//
	// 	- If you set Dimension to a value greater than 384 and less than or equal to 768, set the value of HnswM to 32.
	//
	// 	- If you set Dimension to a value greater than 768 and less than or equal to 1024, set the value of HnswM to 64.
	//
	// 	- If you set Dimension to a value greater than 1024, set the value of HnswM to 128.
	//
	// example:
	//
	// 64
	HnswM *int32 `json:"HnswM,omitempty" xml:"HnswM,omitempty"`
	// The name of the manager account that has the rds_superuser permission.
	//
	// > You can create an account through the console -> Account Management, or by using the [CreateAccount](https://help.aliyun.com/document_detail/2361789.html) API.
	//
	// This parameter is required.
	//
	// example:
	//
	// testaccount
	ManagerAccount *string `json:"ManagerAccount,omitempty" xml:"ManagerAccount,omitempty"`
	// The password of the management account.
	//
	// This parameter is required.
	//
	// example:
	//
	// testpassword
	ManagerAccountPassword *string `json:"ManagerAccountPassword,omitempty" xml:"ManagerAccountPassword,omitempty"`
	// The metadata of the vector data, which is a JSON string in the MAP format. The key specifies the field name, and the value specifies the data type.
	//
	// > Supported data types:
	//
	// > - For information about data types, see: [Data Types](https://www.alibabacloud.com/help/en/analyticdb/analyticdb-for-postgresql/developer-reference/data-types-1/).
	//
	// > - The money type is not supported.
	//
	// 	Warning: The fields id, vector, doc_name, content, loader_metadata, source, and to_tsvector are reserved and should not be used.
	//
	// example:
	//
	// {"title":"text","page":"int"}
	Metadata *string `json:"Metadata,omitempty" xml:"Metadata,omitempty"`
	// example:
	//
	// title
	MetadataIndices *string `json:"MetadataIndices,omitempty" xml:"MetadataIndices,omitempty"`
	// The method that is used to create vector indexes.
	//
	// Valid values:
	//
	// 	- **l2**: Euclidean distance.
	//
	// 	- **ip**: inner product distance.
	//
	// 	- **cosine*	- (default): cosine similarity.
	//
	// example:
	//
	// cosine
	Metrics *string `json:"Metrics,omitempty" xml:"Metrics,omitempty"`
	// The name of the namespace. Default value: public.
	//
	// >  You can call the [CreateNamespace](https://help.aliyun.com/document_detail/2401495.html) operation to create a namespace and call the [ListNamespaces](https://help.aliyun.com/document_detail/2401502.html) operation to query a list of namespaces.
	//
	// example:
	//
	// mynamespace
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	OwnerId   *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The analyzer that is used for full-text search. Default value: zh_cn.
	//
	// example:
	//
	// zh_cn
	Parser *string `json:"Parser,omitempty" xml:"Parser,omitempty"`
	// Specifies whether to enable the product quantization (PQ) feature for index acceleration. We recommend that you enable this feature for more than 500,000 rows of data. Valid values:
	//
	// 	- 0: no.
	//
	// 	- 1 (default): yes.
	//
	// example:
	//
	// 1
	PqEnable *int32 `json:"PqEnable,omitempty" xml:"PqEnable,omitempty"`
	// The region ID of the instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s CreateDocumentCollectionRequest) String() string {
	return dara.Prettify(s)
}

func (s CreateDocumentCollectionRequest) GoString() string {
	return s.String()
}

func (s *CreateDocumentCollectionRequest) GetCollection() *string {
	return s.Collection
}

func (s *CreateDocumentCollectionRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *CreateDocumentCollectionRequest) GetDimension() *int32 {
	return s.Dimension
}

func (s *CreateDocumentCollectionRequest) GetEmbeddingModel() *string {
	return s.EmbeddingModel
}

func (s *CreateDocumentCollectionRequest) GetExternalStorage() *int32 {
	return s.ExternalStorage
}

func (s *CreateDocumentCollectionRequest) GetFullTextRetrievalFields() *string {
	return s.FullTextRetrievalFields
}

func (s *CreateDocumentCollectionRequest) GetHnswEfConstruction() *string {
	return s.HnswEfConstruction
}

func (s *CreateDocumentCollectionRequest) GetHnswM() *int32 {
	return s.HnswM
}

func (s *CreateDocumentCollectionRequest) GetManagerAccount() *string {
	return s.ManagerAccount
}

func (s *CreateDocumentCollectionRequest) GetManagerAccountPassword() *string {
	return s.ManagerAccountPassword
}

func (s *CreateDocumentCollectionRequest) GetMetadata() *string {
	return s.Metadata
}

func (s *CreateDocumentCollectionRequest) GetMetadataIndices() *string {
	return s.MetadataIndices
}

func (s *CreateDocumentCollectionRequest) GetMetrics() *string {
	return s.Metrics
}

func (s *CreateDocumentCollectionRequest) GetNamespace() *string {
	return s.Namespace
}

func (s *CreateDocumentCollectionRequest) GetOwnerId() *int64 {
	return s.OwnerId
}

func (s *CreateDocumentCollectionRequest) GetParser() *string {
	return s.Parser
}

func (s *CreateDocumentCollectionRequest) GetPqEnable() *int32 {
	return s.PqEnable
}

func (s *CreateDocumentCollectionRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *CreateDocumentCollectionRequest) SetCollection(v string) *CreateDocumentCollectionRequest {
	s.Collection = &v
	return s
}

func (s *CreateDocumentCollectionRequest) SetDBInstanceId(v string) *CreateDocumentCollectionRequest {
	s.DBInstanceId = &v
	return s
}

func (s *CreateDocumentCollectionRequest) SetDimension(v int32) *CreateDocumentCollectionRequest {
	s.Dimension = &v
	return s
}

func (s *CreateDocumentCollectionRequest) SetEmbeddingModel(v string) *CreateDocumentCollectionRequest {
	s.EmbeddingModel = &v
	return s
}

func (s *CreateDocumentCollectionRequest) SetExternalStorage(v int32) *CreateDocumentCollectionRequest {
	s.ExternalStorage = &v
	return s
}

func (s *CreateDocumentCollectionRequest) SetFullTextRetrievalFields(v string) *CreateDocumentCollectionRequest {
	s.FullTextRetrievalFields = &v
	return s
}

func (s *CreateDocumentCollectionRequest) SetHnswEfConstruction(v string) *CreateDocumentCollectionRequest {
	s.HnswEfConstruction = &v
	return s
}

func (s *CreateDocumentCollectionRequest) SetHnswM(v int32) *CreateDocumentCollectionRequest {
	s.HnswM = &v
	return s
}

func (s *CreateDocumentCollectionRequest) SetManagerAccount(v string) *CreateDocumentCollectionRequest {
	s.ManagerAccount = &v
	return s
}

func (s *CreateDocumentCollectionRequest) SetManagerAccountPassword(v string) *CreateDocumentCollectionRequest {
	s.ManagerAccountPassword = &v
	return s
}

func (s *CreateDocumentCollectionRequest) SetMetadata(v string) *CreateDocumentCollectionRequest {
	s.Metadata = &v
	return s
}

func (s *CreateDocumentCollectionRequest) SetMetadataIndices(v string) *CreateDocumentCollectionRequest {
	s.MetadataIndices = &v
	return s
}

func (s *CreateDocumentCollectionRequest) SetMetrics(v string) *CreateDocumentCollectionRequest {
	s.Metrics = &v
	return s
}

func (s *CreateDocumentCollectionRequest) SetNamespace(v string) *CreateDocumentCollectionRequest {
	s.Namespace = &v
	return s
}

func (s *CreateDocumentCollectionRequest) SetOwnerId(v int64) *CreateDocumentCollectionRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateDocumentCollectionRequest) SetParser(v string) *CreateDocumentCollectionRequest {
	s.Parser = &v
	return s
}

func (s *CreateDocumentCollectionRequest) SetPqEnable(v int32) *CreateDocumentCollectionRequest {
	s.PqEnable = &v
	return s
}

func (s *CreateDocumentCollectionRequest) SetRegionId(v string) *CreateDocumentCollectionRequest {
	s.RegionId = &v
	return s
}

func (s *CreateDocumentCollectionRequest) Validate() error {
	return dara.Validate(s)
}

type iCreateDocumentCollectionResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetMessage(v string) *CreateDocumentCollectionResponseBody
	GetMessage() *string
	SetRequestId(v string) *CreateDocumentCollectionResponseBody
	GetRequestId() *string
	SetStatus(v string) *CreateDocumentCollectionResponseBody
	GetStatus() *string
}

type CreateDocumentCollectionResponseBody struct {
	// The returned message.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The status of the operation. Valid values:
	//
	// - **success**
	//
	// - **fail**
	//
	// example:
	//
	// successs
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s CreateDocumentCollectionResponseBody) String() string {
	return dara.Prettify(s)
}

func (s CreateDocumentCollectionResponseBody) GoString() string {
	return s.String()
}

func (s *CreateDocumentCollectionResponseBody) GetMessage() *string {
	return s.Message
}

func (s *CreateDocumentCollectionResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *CreateDocumentCollectionResponseBody) GetStatus() *string {
	return s.Status
}

func (s *CreateDocumentCollectionResponseBody) SetMessage(v string) *CreateDocumentCollectionResponseBody {
	s.Message = &v
	return s
}

func (s *CreateDocumentCollectionResponseBody) SetRequestId(v string) *CreateDocumentCollectionResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateDocumentCollectionResponseBody) SetStatus(v string) *CreateDocumentCollectionResponseBody {
	s.Status = &v
	return s
}

func (s *CreateDocumentCollectionResponseBody) Validate() error {
	return dara.Validate(s)
}

type iCreateDocumentCollectionResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *CreateDocumentCollectionResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *CreateDocumentCollectionResponse
	GetStatusCode() *int32
	SetBody(v *CreateDocumentCollectionResponseBody) *CreateDocumentCollectionResponse
	GetBody() *CreateDocumentCollectionResponseBody
}

type CreateDocumentCollectionResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateDocumentCollectionResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateDocumentCollectionResponse) String() string {
	return dara.Prettify(s)
}

func (s CreateDocumentCollectionResponse) GoString() string {
	return s.String()
}

func (s *CreateDocumentCollectionResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *CreateDocumentCollectionResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *CreateDocumentCollectionResponse) GetBody() *CreateDocumentCollectionResponseBody {
	return s.Body
}

func (s *CreateDocumentCollectionResponse) SetHeaders(v map[string]*string) *CreateDocumentCollectionResponse {
	s.Headers = v
	return s
}

func (s *CreateDocumentCollectionResponse) SetStatusCode(v int32) *CreateDocumentCollectionResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateDocumentCollectionResponse) SetBody(v *CreateDocumentCollectionResponseBody) *CreateDocumentCollectionResponse {
	s.Body = v
	return s
}

func (s *CreateDocumentCollectionResponse) Validate() error {
	return dara.Validate(s)
}

type iCreateExtensionsRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *CreateExtensionsRequest
	GetDBInstanceId() *string
	SetDBNames(v string) *CreateExtensionsRequest
	GetDBNames() *string
	SetExtensions(v string) *CreateExtensionsRequest
	GetExtensions() *string
	SetRegionId(v string) *CreateExtensionsRequest
	GetRegionId() *string
}

type CreateExtensionsRequest struct {
	// The instance ID.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the IDs of all AnalyticDB for PostgreSQL instances in a specific region.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The name of the database.
	//
	// This parameter is required.
	//
	// example:
	//
	// demo1
	DBNames *string `json:"DBNames,omitempty" xml:"DBNames,omitempty"`
	// The name of the extension that you want to install. Separate multiple extension names with commas (,).
	//
	// This parameter is required.
	//
	// example:
	//
	// citext, dblink
	Extensions *string `json:"Extensions,omitempty" xml:"Extensions,omitempty"`
	// The region ID.
	//
	// >  You can call the [DescribeRegions](https://help.aliyun.com/document_detail/86912.html) operation to query the most recent region list.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s CreateExtensionsRequest) String() string {
	return dara.Prettify(s)
}

func (s CreateExtensionsRequest) GoString() string {
	return s.String()
}

func (s *CreateExtensionsRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *CreateExtensionsRequest) GetDBNames() *string {
	return s.DBNames
}

func (s *CreateExtensionsRequest) GetExtensions() *string {
	return s.Extensions
}

func (s *CreateExtensionsRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *CreateExtensionsRequest) SetDBInstanceId(v string) *CreateExtensionsRequest {
	s.DBInstanceId = &v
	return s
}

func (s *CreateExtensionsRequest) SetDBNames(v string) *CreateExtensionsRequest {
	s.DBNames = &v
	return s
}

func (s *CreateExtensionsRequest) SetExtensions(v string) *CreateExtensionsRequest {
	s.Extensions = &v
	return s
}

func (s *CreateExtensionsRequest) SetRegionId(v string) *CreateExtensionsRequest {
	s.RegionId = &v
	return s
}

func (s *CreateExtensionsRequest) Validate() error {
	return dara.Validate(s)
}

type iCreateExtensionsResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetExtensions(v string) *CreateExtensionsResponseBody
	GetExtensions() *string
	SetRequestId(v string) *CreateExtensionsResponseBody
	GetRequestId() *string
}

type CreateExtensionsResponseBody struct {
	// The name of the extension that you want to install. Multiple extension names are separated with commas (,).
	//
	// example:
	//
	// citext, dblink
	Extensions *string `json:"Extensions,omitempty" xml:"Extensions,omitempty"`
	// The request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateExtensionsResponseBody) String() string {
	return dara.Prettify(s)
}

func (s CreateExtensionsResponseBody) GoString() string {
	return s.String()
}

func (s *CreateExtensionsResponseBody) GetExtensions() *string {
	return s.Extensions
}

func (s *CreateExtensionsResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *CreateExtensionsResponseBody) SetExtensions(v string) *CreateExtensionsResponseBody {
	s.Extensions = &v
	return s
}

func (s *CreateExtensionsResponseBody) SetRequestId(v string) *CreateExtensionsResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateExtensionsResponseBody) Validate() error {
	return dara.Validate(s)
}

type iCreateExtensionsResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *CreateExtensionsResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *CreateExtensionsResponse
	GetStatusCode() *int32
	SetBody(v *CreateExtensionsResponseBody) *CreateExtensionsResponse
	GetBody() *CreateExtensionsResponseBody
}

type CreateExtensionsResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateExtensionsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateExtensionsResponse) String() string {
	return dara.Prettify(s)
}

func (s CreateExtensionsResponse) GoString() string {
	return s.String()
}

func (s *CreateExtensionsResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *CreateExtensionsResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *CreateExtensionsResponse) GetBody() *CreateExtensionsResponseBody {
	return s.Body
}

func (s *CreateExtensionsResponse) SetHeaders(v map[string]*string) *CreateExtensionsResponse {
	s.Headers = v
	return s
}

func (s *CreateExtensionsResponse) SetStatusCode(v int32) *CreateExtensionsResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateExtensionsResponse) SetBody(v *CreateExtensionsResponseBody) *CreateExtensionsResponse {
	s.Body = v
	return s
}

func (s *CreateExtensionsResponse) Validate() error {
	return dara.Validate(s)
}

type iCreateExternalDataServiceRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *CreateExternalDataServiceRequest
	GetDBInstanceId() *string
	SetRegionId(v string) *CreateExternalDataServiceRequest
	GetRegionId() *string
	SetServiceDescription(v string) *CreateExternalDataServiceRequest
	GetServiceDescription() *string
	SetServiceName(v string) *CreateExternalDataServiceRequest
	GetServiceName() *string
	SetServiceSpec(v string) *CreateExternalDataServiceRequest
	GetServiceSpec() *string
}

type CreateExternalDataServiceRequest struct {
	// Instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp10g78o9807yv9h3
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// Region ID, you can view available region IDs through the [DescribeRegions](https://help.aliyun.com/document_detail/86912.html) interface.
	//
	// example:
	//
	// cn-beijing
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// Service description.
	//
	// example:
	//
	// pxf test
	ServiceDescription *string `json:"ServiceDescription,omitempty" xml:"ServiceDescription,omitempty"`
	// Service name.
	//
	// This parameter is required.
	//
	// example:
	//
	// test-adbpgss
	ServiceName *string `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
	// Service specification (in CU), value:
	//
	// - 8
	//
	// This parameter is required.
	//
	// example:
	//
	// 8
	ServiceSpec *string `json:"ServiceSpec,omitempty" xml:"ServiceSpec,omitempty"`
}

func (s CreateExternalDataServiceRequest) String() string {
	return dara.Prettify(s)
}

func (s CreateExternalDataServiceRequest) GoString() string {
	return s.String()
}

func (s *CreateExternalDataServiceRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *CreateExternalDataServiceRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *CreateExternalDataServiceRequest) GetServiceDescription() *string {
	return s.ServiceDescription
}

func (s *CreateExternalDataServiceRequest) GetServiceName() *string {
	return s.ServiceName
}

func (s *CreateExternalDataServiceRequest) GetServiceSpec() *string {
	return s.ServiceSpec
}

func (s *CreateExternalDataServiceRequest) SetDBInstanceId(v string) *CreateExternalDataServiceRequest {
	s.DBInstanceId = &v
	return s
}

func (s *CreateExternalDataServiceRequest) SetRegionId(v string) *CreateExternalDataServiceRequest {
	s.RegionId = &v
	return s
}

func (s *CreateExternalDataServiceRequest) SetServiceDescription(v string) *CreateExternalDataServiceRequest {
	s.ServiceDescription = &v
	return s
}

func (s *CreateExternalDataServiceRequest) SetServiceName(v string) *CreateExternalDataServiceRequest {
	s.ServiceName = &v
	return s
}

func (s *CreateExternalDataServiceRequest) SetServiceSpec(v string) *CreateExternalDataServiceRequest {
	s.ServiceSpec = &v
	return s
}

func (s *CreateExternalDataServiceRequest) Validate() error {
	return dara.Validate(s)
}

type iCreateExternalDataServiceResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetRequestId(v string) *CreateExternalDataServiceResponseBody
	GetRequestId() *string
	SetServiceId(v int32) *CreateExternalDataServiceResponseBody
	GetServiceId() *int32
}

type CreateExternalDataServiceResponseBody struct {
	// Request ID.
	//
	// example:
	//
	// B4CAF581-2AC7-41AD-8940-D56DF7AADF5B
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Service ID.
	//
	// example:
	//
	// 100
	ServiceId *int32 `json:"ServiceId,omitempty" xml:"ServiceId,omitempty"`
}

func (s CreateExternalDataServiceResponseBody) String() string {
	return dara.Prettify(s)
}

func (s CreateExternalDataServiceResponseBody) GoString() string {
	return s.String()
}

func (s *CreateExternalDataServiceResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *CreateExternalDataServiceResponseBody) GetServiceId() *int32 {
	return s.ServiceId
}

func (s *CreateExternalDataServiceResponseBody) SetRequestId(v string) *CreateExternalDataServiceResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateExternalDataServiceResponseBody) SetServiceId(v int32) *CreateExternalDataServiceResponseBody {
	s.ServiceId = &v
	return s
}

func (s *CreateExternalDataServiceResponseBody) Validate() error {
	return dara.Validate(s)
}

type iCreateExternalDataServiceResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *CreateExternalDataServiceResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *CreateExternalDataServiceResponse
	GetStatusCode() *int32
	SetBody(v *CreateExternalDataServiceResponseBody) *CreateExternalDataServiceResponse
	GetBody() *CreateExternalDataServiceResponseBody
}

type CreateExternalDataServiceResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateExternalDataServiceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateExternalDataServiceResponse) String() string {
	return dara.Prettify(s)
}

func (s CreateExternalDataServiceResponse) GoString() string {
	return s.String()
}

func (s *CreateExternalDataServiceResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *CreateExternalDataServiceResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *CreateExternalDataServiceResponse) GetBody() *CreateExternalDataServiceResponseBody {
	return s.Body
}

func (s *CreateExternalDataServiceResponse) SetHeaders(v map[string]*string) *CreateExternalDataServiceResponse {
	s.Headers = v
	return s
}

func (s *CreateExternalDataServiceResponse) SetStatusCode(v int32) *CreateExternalDataServiceResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateExternalDataServiceResponse) SetBody(v *CreateExternalDataServiceResponseBody) *CreateExternalDataServiceResponse {
	s.Body = v
	return s
}

func (s *CreateExternalDataServiceResponse) Validate() error {
	return dara.Validate(s)
}

type iCreateHadoopDataSourceRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *CreateHadoopDataSourceRequest
	GetDBInstanceId() *string
	SetDataSourceDescription(v string) *CreateHadoopDataSourceRequest
	GetDataSourceDescription() *string
	SetDataSourceName(v string) *CreateHadoopDataSourceRequest
	GetDataSourceName() *string
	SetDataSourceType(v string) *CreateHadoopDataSourceRequest
	GetDataSourceType() *string
	SetEmrInstanceId(v string) *CreateHadoopDataSourceRequest
	GetEmrInstanceId() *string
	SetHDFSConf(v string) *CreateHadoopDataSourceRequest
	GetHDFSConf() *string
	SetHadoopCoreConf(v string) *CreateHadoopDataSourceRequest
	GetHadoopCoreConf() *string
	SetHadoopCreateType(v string) *CreateHadoopDataSourceRequest
	GetHadoopCreateType() *string
	SetHadoopHostsAddress(v string) *CreateHadoopDataSourceRequest
	GetHadoopHostsAddress() *string
	SetHiveConf(v string) *CreateHadoopDataSourceRequest
	GetHiveConf() *string
	SetMapReduceConf(v string) *CreateHadoopDataSourceRequest
	GetMapReduceConf() *string
	SetRegionId(v string) *CreateHadoopDataSourceRequest
	GetRegionId() *string
	SetYarnConf(v string) *CreateHadoopDataSourceRequest
	GetYarnConf() *string
}

type CreateHadoopDataSourceRequest struct {
	// Instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// Service description.
	//
	// example:
	//
	// pxf for hdfs data source
	DataSourceDescription *string `json:"DataSourceDescription,omitempty" xml:"DataSourceDescription,omitempty"`
	// Service name.
	//
	// example:
	//
	// hdfs_pxf
	DataSourceName *string `json:"DataSourceName,omitempty" xml:"DataSourceName,omitempty"`
	// Type of Hadoop external table to be enabled, with values:
	//
	// - HDFS
	//
	// - Hive
	//
	// example:
	//
	// HDFS
	DataSourceType *string `json:"DataSourceType,omitempty" xml:"DataSourceType,omitempty"`
	// When HadoopCreateType=Emr, this field should contain the EMR instance ID.
	//
	// example:
	//
	// c-1234567
	EmrInstanceId *string `json:"EmrInstanceId,omitempty" xml:"EmrInstanceId,omitempty"`
	// Content string of the Hadoop hdfs-site.xml file. This field is required when enabling an HDFS external table.
	//
	// example:
	//
	// <?xml version="1.0" ?>
	//
	// <!-- Created at 2023-08-15 13:52:43.945 -->
	//
	// <configuration>
	//
	//     <property>
	//
	//         <name>dfs.datanode.cache.revocation.timeout.ms</name>
	//
	//         <value>900000</value>
	//
	//     </property>
	//
	//     <property>
	//
	//         <name>dfs.namenode.resource.check.interval</name>
	//
	//         <value>5000</value>
	//
	//     </property>
	//
	// </configuration>
	HDFSConf *string `json:"HDFSConf,omitempty" xml:"HDFSConf,omitempty"`
	// Content string of the Hadoop core-site.xml file.
	//
	// example:
	//
	// <?xml version="1.0" ?>
	//
	// <!-- Created at 2023-08-15 13:52:39.527 -->
	//
	// <configuration>
	//
	//     <property>
	//
	//         <name>hadoop.http.authentication.kerberos.keytab</name>
	//
	//         <value>/etc/emr/hadoop-conf/http.keytab</value>
	//
	//     </property>
	//
	//     <property>
	//
	//         <name>fs.oss.idle.timeout.millisecond</name>
	//
	//         <value>30000</value>
	//
	//     </property>
	//
	//     <property>
	//
	//         <name>fs.oss.download.thread.concurrency</name>
	//
	//         <value>32</value>
	//
	//     </property>
	//
	// </configuration>
	HadoopCoreConf *string `json:"HadoopCoreConf,omitempty" xml:"HadoopCoreConf,omitempty"`
	// External service type:
	//
	// - emr
	//
	// - hadoop: Self-built Hadoop
	//
	// example:
	//
	// emr
	HadoopCreateType *string `json:"HadoopCreateType,omitempty" xml:"HadoopCreateType,omitempty"`
	// Address and hostname of the Hadoop cluster\\"s source node in the /etc/hosts file.
	//
	// example:
	//
	// 192.168.220.128 master-1-1.c-xxx.cn-shanghai.emr.aliyuncs.com
	//
	// 192.168.220.129 core-1-1.c-xxx.cn-shanghai.emr.aliyuncs.com
	//
	// 192.168.220.130 core-1-2.c-xxx.cn-shanghai.emr.aliyuncs.com
	HadoopHostsAddress *string `json:"HadoopHostsAddress,omitempty" xml:"HadoopHostsAddress,omitempty"`
	// Content string of the Hadoop hive-site.xml file. This field is required when enabling a HIVE external table.
	//
	// example:
	//
	// <?xml version="1.0" ?>
	//
	// <!-- Created at 2023-08-15 13:52:50.646 -->
	//
	// <configuration>
	//
	//     <property>
	//
	//         <name>hive.exec.reducers.bytes.per.reducer</name>
	//
	//         <value>256000000</value>
	//
	//     </property>
	//
	//     <property>
	//
	//         <name>hive.stats.column.autogather</name>
	//
	//         <value>false</value>
	//
	//     </property>
	//
	// </configuration>
	HiveConf *string `json:"HiveConf,omitempty" xml:"HiveConf,omitempty"`
	// Content string of the Hadoop mapred-site.xml file. This field is required when enabling an HDFS external table.
	//
	// example:
	//
	// xxxxxx
	MapReduceConf *string `json:"MapReduceConf,omitempty" xml:"MapReduceConf,omitempty"`
	// Region ID.
	//
	// > You can call the [DescribeRegions](https://help.aliyun.com/document_detail/86912.html) interface to view available region IDs.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// Content string of the Hadoop yarn-site.xml file. This field is required when enabling an HDFS external table.
	//
	// example:
	//
	// <?xml version="1.0" ?>
	//
	// <!-- Created at 2023-08-15 13:53:29.021 -->
	//
	// <configuration>
	//
	//     <property>
	//
	//         <name>yarn.nodemanager.linux-container-executor.nonsecure-mode.local-user</name>
	//
	//         <value>hadoop</value>
	//
	//     </property>
	//
	//     <property>
	//
	//         <name>yarn.scheduler.fair.dynamic.max.assign</name>
	//
	//         <value>true</value>
	//
	//     </property>
	//
	// </configuration>
	YarnConf *string `json:"YarnConf,omitempty" xml:"YarnConf,omitempty"`
}

func (s CreateHadoopDataSourceRequest) String() string {
	return dara.Prettify(s)
}

func (s CreateHadoopDataSourceRequest) GoString() string {
	return s.String()
}

func (s *CreateHadoopDataSourceRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *CreateHadoopDataSourceRequest) GetDataSourceDescription() *string {
	return s.DataSourceDescription
}

func (s *CreateHadoopDataSourceRequest) GetDataSourceName() *string {
	return s.DataSourceName
}

func (s *CreateHadoopDataSourceRequest) GetDataSourceType() *string {
	return s.DataSourceType
}

func (s *CreateHadoopDataSourceRequest) GetEmrInstanceId() *string {
	return s.EmrInstanceId
}

func (s *CreateHadoopDataSourceRequest) GetHDFSConf() *string {
	return s.HDFSConf
}

func (s *CreateHadoopDataSourceRequest) GetHadoopCoreConf() *string {
	return s.HadoopCoreConf
}

func (s *CreateHadoopDataSourceRequest) GetHadoopCreateType() *string {
	return s.HadoopCreateType
}

func (s *CreateHadoopDataSourceRequest) GetHadoopHostsAddress() *string {
	return s.HadoopHostsAddress
}

func (s *CreateHadoopDataSourceRequest) GetHiveConf() *string {
	return s.HiveConf
}

func (s *CreateHadoopDataSourceRequest) GetMapReduceConf() *string {
	return s.MapReduceConf
}

func (s *CreateHadoopDataSourceRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *CreateHadoopDataSourceRequest) GetYarnConf() *string {
	return s.YarnConf
}

func (s *CreateHadoopDataSourceRequest) SetDBInstanceId(v string) *CreateHadoopDataSourceRequest {
	s.DBInstanceId = &v
	return s
}

func (s *CreateHadoopDataSourceRequest) SetDataSourceDescription(v string) *CreateHadoopDataSourceRequest {
	s.DataSourceDescription = &v
	return s
}

func (s *CreateHadoopDataSourceRequest) SetDataSourceName(v string) *CreateHadoopDataSourceRequest {
	s.DataSourceName = &v
	return s
}

func (s *CreateHadoopDataSourceRequest) SetDataSourceType(v string) *CreateHadoopDataSourceRequest {
	s.DataSourceType = &v
	return s
}

func (s *CreateHadoopDataSourceRequest) SetEmrInstanceId(v string) *CreateHadoopDataSourceRequest {
	s.EmrInstanceId = &v
	return s
}

func (s *CreateHadoopDataSourceRequest) SetHDFSConf(v string) *CreateHadoopDataSourceRequest {
	s.HDFSConf = &v
	return s
}

func (s *CreateHadoopDataSourceRequest) SetHadoopCoreConf(v string) *CreateHadoopDataSourceRequest {
	s.HadoopCoreConf = &v
	return s
}

func (s *CreateHadoopDataSourceRequest) SetHadoopCreateType(v string) *CreateHadoopDataSourceRequest {
	s.HadoopCreateType = &v
	return s
}

func (s *CreateHadoopDataSourceRequest) SetHadoopHostsAddress(v string) *CreateHadoopDataSourceRequest {
	s.HadoopHostsAddress = &v
	return s
}

func (s *CreateHadoopDataSourceRequest) SetHiveConf(v string) *CreateHadoopDataSourceRequest {
	s.HiveConf = &v
	return s
}

func (s *CreateHadoopDataSourceRequest) SetMapReduceConf(v string) *CreateHadoopDataSourceRequest {
	s.MapReduceConf = &v
	return s
}

func (s *CreateHadoopDataSourceRequest) SetRegionId(v string) *CreateHadoopDataSourceRequest {
	s.RegionId = &v
	return s
}

func (s *CreateHadoopDataSourceRequest) SetYarnConf(v string) *CreateHadoopDataSourceRequest {
	s.YarnConf = &v
	return s
}

func (s *CreateHadoopDataSourceRequest) Validate() error {
	return dara.Validate(s)
}

type iCreateHadoopDataSourceResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetDataSourceId(v int32) *CreateHadoopDataSourceResponseBody
	GetDataSourceId() *int32
	SetRequestId(v string) *CreateHadoopDataSourceResponseBody
	GetRequestId() *string
}

type CreateHadoopDataSourceResponseBody struct {
	// Data source ID.
	//
	// example:
	//
	// 123
	DataSourceId *int32 `json:"DataSourceId,omitempty" xml:"DataSourceId,omitempty"`
	// Request ID.
	//
	// example:
	//
	// 2C125605-266F-41CA-8AC5-3A643D4F42C5
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateHadoopDataSourceResponseBody) String() string {
	return dara.Prettify(s)
}

func (s CreateHadoopDataSourceResponseBody) GoString() string {
	return s.String()
}

func (s *CreateHadoopDataSourceResponseBody) GetDataSourceId() *int32 {
	return s.DataSourceId
}

func (s *CreateHadoopDataSourceResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *CreateHadoopDataSourceResponseBody) SetDataSourceId(v int32) *CreateHadoopDataSourceResponseBody {
	s.DataSourceId = &v
	return s
}

func (s *CreateHadoopDataSourceResponseBody) SetRequestId(v string) *CreateHadoopDataSourceResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateHadoopDataSourceResponseBody) Validate() error {
	return dara.Validate(s)
}

type iCreateHadoopDataSourceResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *CreateHadoopDataSourceResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *CreateHadoopDataSourceResponse
	GetStatusCode() *int32
	SetBody(v *CreateHadoopDataSourceResponseBody) *CreateHadoopDataSourceResponse
	GetBody() *CreateHadoopDataSourceResponseBody
}

type CreateHadoopDataSourceResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateHadoopDataSourceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateHadoopDataSourceResponse) String() string {
	return dara.Prettify(s)
}

func (s CreateHadoopDataSourceResponse) GoString() string {
	return s.String()
}

func (s *CreateHadoopDataSourceResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *CreateHadoopDataSourceResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *CreateHadoopDataSourceResponse) GetBody() *CreateHadoopDataSourceResponseBody {
	return s.Body
}

func (s *CreateHadoopDataSourceResponse) SetHeaders(v map[string]*string) *CreateHadoopDataSourceResponse {
	s.Headers = v
	return s
}

func (s *CreateHadoopDataSourceResponse) SetStatusCode(v int32) *CreateHadoopDataSourceResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateHadoopDataSourceResponse) SetBody(v *CreateHadoopDataSourceResponseBody) *CreateHadoopDataSourceResponse {
	s.Body = v
	return s
}

func (s *CreateHadoopDataSourceResponse) Validate() error {
	return dara.Validate(s)
}

type iCreateIndexRequest interface {
	dara.Model
	String() string
	GoString() string
	SetCollection(v string) *CreateIndexRequest
	GetCollection() *string
	SetDBInstanceId(v string) *CreateIndexRequest
	GetDBInstanceId() *string
	SetIndexConfig(v string) *CreateIndexRequest
	GetIndexConfig() *string
	SetIndexField(v string) *CreateIndexRequest
	GetIndexField() *string
	SetIndexName(v string) *CreateIndexRequest
	GetIndexName() *string
	SetNamespace(v string) *CreateIndexRequest
	GetNamespace() *string
	SetNamespacePassword(v string) *CreateIndexRequest
	GetNamespacePassword() *string
	SetOwnerId(v int64) *CreateIndexRequest
	GetOwnerId() *int64
	SetRegionId(v string) *CreateIndexRequest
	GetRegionId() *string
	SetWorkspaceId(v string) *CreateIndexRequest
	GetWorkspaceId() *string
}

type CreateIndexRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// testcollection
	Collection *string `json:"Collection,omitempty" xml:"Collection,omitempty"`
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	IndexConfig  *string `json:"IndexConfig,omitempty" xml:"IndexConfig,omitempty"`
	// example:
	//
	// title
	IndexField *string `json:"IndexField,omitempty" xml:"IndexField,omitempty"`
	// example:
	//
	// testindex
	IndexName *string `json:"IndexName,omitempty" xml:"IndexName,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// mynamespace
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// testpassword
	NamespacePassword *string `json:"NamespacePassword,omitempty" xml:"NamespacePassword,omitempty"`
	OwnerId           *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// example:
	//
	// gp-ws-*****
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s CreateIndexRequest) String() string {
	return dara.Prettify(s)
}

func (s CreateIndexRequest) GoString() string {
	return s.String()
}

func (s *CreateIndexRequest) GetCollection() *string {
	return s.Collection
}

func (s *CreateIndexRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *CreateIndexRequest) GetIndexConfig() *string {
	return s.IndexConfig
}

func (s *CreateIndexRequest) GetIndexField() *string {
	return s.IndexField
}

func (s *CreateIndexRequest) GetIndexName() *string {
	return s.IndexName
}

func (s *CreateIndexRequest) GetNamespace() *string {
	return s.Namespace
}

func (s *CreateIndexRequest) GetNamespacePassword() *string {
	return s.NamespacePassword
}

func (s *CreateIndexRequest) GetOwnerId() *int64 {
	return s.OwnerId
}

func (s *CreateIndexRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *CreateIndexRequest) GetWorkspaceId() *string {
	return s.WorkspaceId
}

func (s *CreateIndexRequest) SetCollection(v string) *CreateIndexRequest {
	s.Collection = &v
	return s
}

func (s *CreateIndexRequest) SetDBInstanceId(v string) *CreateIndexRequest {
	s.DBInstanceId = &v
	return s
}

func (s *CreateIndexRequest) SetIndexConfig(v string) *CreateIndexRequest {
	s.IndexConfig = &v
	return s
}

func (s *CreateIndexRequest) SetIndexField(v string) *CreateIndexRequest {
	s.IndexField = &v
	return s
}

func (s *CreateIndexRequest) SetIndexName(v string) *CreateIndexRequest {
	s.IndexName = &v
	return s
}

func (s *CreateIndexRequest) SetNamespace(v string) *CreateIndexRequest {
	s.Namespace = &v
	return s
}

func (s *CreateIndexRequest) SetNamespacePassword(v string) *CreateIndexRequest {
	s.NamespacePassword = &v
	return s
}

func (s *CreateIndexRequest) SetOwnerId(v int64) *CreateIndexRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateIndexRequest) SetRegionId(v string) *CreateIndexRequest {
	s.RegionId = &v
	return s
}

func (s *CreateIndexRequest) SetWorkspaceId(v string) *CreateIndexRequest {
	s.WorkspaceId = &v
	return s
}

func (s *CreateIndexRequest) Validate() error {
	return dara.Validate(s)
}

type iCreateIndexResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetJobId(v string) *CreateIndexResponseBody
	GetJobId() *string
	SetMessage(v string) *CreateIndexResponseBody
	GetMessage() *string
	SetRequestId(v string) *CreateIndexResponseBody
	GetRequestId() *string
	SetStatus(v string) *CreateIndexResponseBody
	GetStatus() *string
}

type CreateIndexResponseBody struct {
	// example:
	//
	// 231460f8-75dc-405e-a669-0c5204887e91
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// Successfully create job
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s CreateIndexResponseBody) String() string {
	return dara.Prettify(s)
}

func (s CreateIndexResponseBody) GoString() string {
	return s.String()
}

func (s *CreateIndexResponseBody) GetJobId() *string {
	return s.JobId
}

func (s *CreateIndexResponseBody) GetMessage() *string {
	return s.Message
}

func (s *CreateIndexResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *CreateIndexResponseBody) GetStatus() *string {
	return s.Status
}

func (s *CreateIndexResponseBody) SetJobId(v string) *CreateIndexResponseBody {
	s.JobId = &v
	return s
}

func (s *CreateIndexResponseBody) SetMessage(v string) *CreateIndexResponseBody {
	s.Message = &v
	return s
}

func (s *CreateIndexResponseBody) SetRequestId(v string) *CreateIndexResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateIndexResponseBody) SetStatus(v string) *CreateIndexResponseBody {
	s.Status = &v
	return s
}

func (s *CreateIndexResponseBody) Validate() error {
	return dara.Validate(s)
}

type iCreateIndexResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *CreateIndexResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *CreateIndexResponse
	GetStatusCode() *int32
	SetBody(v *CreateIndexResponseBody) *CreateIndexResponse
	GetBody() *CreateIndexResponseBody
}

type CreateIndexResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateIndexResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateIndexResponse) String() string {
	return dara.Prettify(s)
}

func (s CreateIndexResponse) GoString() string {
	return s.String()
}

func (s *CreateIndexResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *CreateIndexResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *CreateIndexResponse) GetBody() *CreateIndexResponseBody {
	return s.Body
}

func (s *CreateIndexResponse) SetHeaders(v map[string]*string) *CreateIndexResponse {
	s.Headers = v
	return s
}

func (s *CreateIndexResponse) SetStatusCode(v int32) *CreateIndexResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateIndexResponse) SetBody(v *CreateIndexResponseBody) *CreateIndexResponse {
	s.Body = v
	return s
}

func (s *CreateIndexResponse) Validate() error {
	return dara.Validate(s)
}

type iCreateJDBCDataSourceRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *CreateJDBCDataSourceRequest
	GetDBInstanceId() *string
	SetDataSourceDescription(v string) *CreateJDBCDataSourceRequest
	GetDataSourceDescription() *string
	SetDataSourceName(v string) *CreateJDBCDataSourceRequest
	GetDataSourceName() *string
	SetDataSourceType(v string) *CreateJDBCDataSourceRequest
	GetDataSourceType() *string
	SetJDBCConnectionString(v string) *CreateJDBCDataSourceRequest
	GetJDBCConnectionString() *string
	SetJDBCPassword(v string) *CreateJDBCDataSourceRequest
	GetJDBCPassword() *string
	SetJDBCUserName(v string) *CreateJDBCDataSourceRequest
	GetJDBCUserName() *string
	SetRegionId(v string) *CreateJDBCDataSourceRequest
	GetRegionId() *string
}

type CreateJDBCDataSourceRequest struct {
	// The instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// Data source description.
	//
	// example:
	//
	// test
	DataSourceDescription *string `json:"DataSourceDescription,omitempty" xml:"DataSourceDescription,omitempty"`
	// The name of data soruce
	//
	// example:
	//
	// jdbc_pxf
	DataSourceName *string `json:"DataSourceName,omitempty" xml:"DataSourceName,omitempty"`
	// The type of the data source.
	//
	// example:
	//
	// mysql
	DataSourceType *string `json:"DataSourceType,omitempty" xml:"DataSourceType,omitempty"`
	// The JDBC connection string.
	//
	// example:
	//
	// xxxxxx
	JDBCConnectionString *string `json:"JDBCConnectionString,omitempty" xml:"JDBCConnectionString,omitempty"`
	// The password of the database account.
	//
	// example:
	//
	// xxxxxx
	JDBCPassword *string `json:"JDBCPassword,omitempty" xml:"JDBCPassword,omitempty"`
	// The name of the database account.
	//
	// example:
	//
	// xxxxxx
	JDBCUserName *string `json:"JDBCUserName,omitempty" xml:"JDBCUserName,omitempty"`
	// The region ID of the instance.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s CreateJDBCDataSourceRequest) String() string {
	return dara.Prettify(s)
}

func (s CreateJDBCDataSourceRequest) GoString() string {
	return s.String()
}

func (s *CreateJDBCDataSourceRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *CreateJDBCDataSourceRequest) GetDataSourceDescription() *string {
	return s.DataSourceDescription
}

func (s *CreateJDBCDataSourceRequest) GetDataSourceName() *string {
	return s.DataSourceName
}

func (s *CreateJDBCDataSourceRequest) GetDataSourceType() *string {
	return s.DataSourceType
}

func (s *CreateJDBCDataSourceRequest) GetJDBCConnectionString() *string {
	return s.JDBCConnectionString
}

func (s *CreateJDBCDataSourceRequest) GetJDBCPassword() *string {
	return s.JDBCPassword
}

func (s *CreateJDBCDataSourceRequest) GetJDBCUserName() *string {
	return s.JDBCUserName
}

func (s *CreateJDBCDataSourceRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *CreateJDBCDataSourceRequest) SetDBInstanceId(v string) *CreateJDBCDataSourceRequest {
	s.DBInstanceId = &v
	return s
}

func (s *CreateJDBCDataSourceRequest) SetDataSourceDescription(v string) *CreateJDBCDataSourceRequest {
	s.DataSourceDescription = &v
	return s
}

func (s *CreateJDBCDataSourceRequest) SetDataSourceName(v string) *CreateJDBCDataSourceRequest {
	s.DataSourceName = &v
	return s
}

func (s *CreateJDBCDataSourceRequest) SetDataSourceType(v string) *CreateJDBCDataSourceRequest {
	s.DataSourceType = &v
	return s
}

func (s *CreateJDBCDataSourceRequest) SetJDBCConnectionString(v string) *CreateJDBCDataSourceRequest {
	s.JDBCConnectionString = &v
	return s
}

func (s *CreateJDBCDataSourceRequest) SetJDBCPassword(v string) *CreateJDBCDataSourceRequest {
	s.JDBCPassword = &v
	return s
}

func (s *CreateJDBCDataSourceRequest) SetJDBCUserName(v string) *CreateJDBCDataSourceRequest {
	s.JDBCUserName = &v
	return s
}

func (s *CreateJDBCDataSourceRequest) SetRegionId(v string) *CreateJDBCDataSourceRequest {
	s.RegionId = &v
	return s
}

func (s *CreateJDBCDataSourceRequest) Validate() error {
	return dara.Validate(s)
}

type iCreateJDBCDataSourceResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetDataSourceId(v string) *CreateJDBCDataSourceResponseBody
	GetDataSourceId() *string
	SetRequestId(v string) *CreateJDBCDataSourceResponseBody
	GetRequestId() *string
}

type CreateJDBCDataSourceResponseBody struct {
	// Data source ID.
	//
	// example:
	//
	// 123
	DataSourceId *string `json:"DataSourceId,omitempty" xml:"DataSourceId,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 2C125605-266F-41CA-8AC5-3A643D4F42C5
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateJDBCDataSourceResponseBody) String() string {
	return dara.Prettify(s)
}

func (s CreateJDBCDataSourceResponseBody) GoString() string {
	return s.String()
}

func (s *CreateJDBCDataSourceResponseBody) GetDataSourceId() *string {
	return s.DataSourceId
}

func (s *CreateJDBCDataSourceResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *CreateJDBCDataSourceResponseBody) SetDataSourceId(v string) *CreateJDBCDataSourceResponseBody {
	s.DataSourceId = &v
	return s
}

func (s *CreateJDBCDataSourceResponseBody) SetRequestId(v string) *CreateJDBCDataSourceResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateJDBCDataSourceResponseBody) Validate() error {
	return dara.Validate(s)
}

type iCreateJDBCDataSourceResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *CreateJDBCDataSourceResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *CreateJDBCDataSourceResponse
	GetStatusCode() *int32
	SetBody(v *CreateJDBCDataSourceResponseBody) *CreateJDBCDataSourceResponse
	GetBody() *CreateJDBCDataSourceResponseBody
}

type CreateJDBCDataSourceResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateJDBCDataSourceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateJDBCDataSourceResponse) String() string {
	return dara.Prettify(s)
}

func (s CreateJDBCDataSourceResponse) GoString() string {
	return s.String()
}

func (s *CreateJDBCDataSourceResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *CreateJDBCDataSourceResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *CreateJDBCDataSourceResponse) GetBody() *CreateJDBCDataSourceResponseBody {
	return s.Body
}

func (s *CreateJDBCDataSourceResponse) SetHeaders(v map[string]*string) *CreateJDBCDataSourceResponse {
	s.Headers = v
	return s
}

func (s *CreateJDBCDataSourceResponse) SetStatusCode(v int32) *CreateJDBCDataSourceResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateJDBCDataSourceResponse) SetBody(v *CreateJDBCDataSourceResponseBody) *CreateJDBCDataSourceResponse {
	s.Body = v
	return s
}

func (s *CreateJDBCDataSourceResponse) Validate() error {
	return dara.Validate(s)
}

type iCreateNamespaceRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *CreateNamespaceRequest
	GetDBInstanceId() *string
	SetManagerAccount(v string) *CreateNamespaceRequest
	GetManagerAccount() *string
	SetManagerAccountPassword(v string) *CreateNamespaceRequest
	GetManagerAccountPassword() *string
	SetNamespace(v string) *CreateNamespaceRequest
	GetNamespace() *string
	SetNamespacePassword(v string) *CreateNamespaceRequest
	GetNamespacePassword() *string
	SetOwnerId(v int64) *CreateNamespaceRequest
	GetOwnerId() *int64
	SetRegionId(v string) *CreateNamespaceRequest
	GetRegionId() *string
	SetWorkspaceId(v string) *CreateNamespaceRequest
	GetWorkspaceId() *string
}

type CreateNamespaceRequest struct {
	// The instance ID.
	//
	// > You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/196830.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The name of the manager account that has the rds_superuser permission.
	//
	// >  You can create an account on the Account Management page of the AnalyticDB for PostgreSQL console or by calling the [CreateAccount](https://help.aliyun.com/document_detail/2361789.html) operation.
	//
	// This parameter is required.
	//
	// example:
	//
	// testaccount
	ManagerAccount *string `json:"ManagerAccount,omitempty" xml:"ManagerAccount,omitempty"`
	// The password of the manager account.
	//
	// This parameter is required.
	//
	// example:
	//
	// testpassword
	ManagerAccountPassword *string `json:"ManagerAccountPassword,omitempty" xml:"ManagerAccountPassword,omitempty"`
	// The name of the namespace. After the namespace is created, the system automatically creates an account that has the same name.
	//
	// >  The name must comply with the naming conventions of PostgreSQL objects.
	//
	// example:
	//
	// mynamespace
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// The password of the namespace.
	//
	// This parameter is required.
	//
	// example:
	//
	// testpassword2
	NamespacePassword *string `json:"NamespacePassword,omitempty" xml:"NamespacePassword,omitempty"`
	OwnerId           *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The region ID of the instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the workspace that consists of multiple AnalyticDB for PostgreSQL instances. You must specify one of the WorkspaceId and DBInstanceId parameters. If you specify both parameters, the WorkspaceId parameter takes effect.
	//
	// example:
	//
	// gp-ws-*****
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s CreateNamespaceRequest) String() string {
	return dara.Prettify(s)
}

func (s CreateNamespaceRequest) GoString() string {
	return s.String()
}

func (s *CreateNamespaceRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *CreateNamespaceRequest) GetManagerAccount() *string {
	return s.ManagerAccount
}

func (s *CreateNamespaceRequest) GetManagerAccountPassword() *string {
	return s.ManagerAccountPassword
}

func (s *CreateNamespaceRequest) GetNamespace() *string {
	return s.Namespace
}

func (s *CreateNamespaceRequest) GetNamespacePassword() *string {
	return s.NamespacePassword
}

func (s *CreateNamespaceRequest) GetOwnerId() *int64 {
	return s.OwnerId
}

func (s *CreateNamespaceRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *CreateNamespaceRequest) GetWorkspaceId() *string {
	return s.WorkspaceId
}

func (s *CreateNamespaceRequest) SetDBInstanceId(v string) *CreateNamespaceRequest {
	s.DBInstanceId = &v
	return s
}

func (s *CreateNamespaceRequest) SetManagerAccount(v string) *CreateNamespaceRequest {
	s.ManagerAccount = &v
	return s
}

func (s *CreateNamespaceRequest) SetManagerAccountPassword(v string) *CreateNamespaceRequest {
	s.ManagerAccountPassword = &v
	return s
}

func (s *CreateNamespaceRequest) SetNamespace(v string) *CreateNamespaceRequest {
	s.Namespace = &v
	return s
}

func (s *CreateNamespaceRequest) SetNamespacePassword(v string) *CreateNamespaceRequest {
	s.NamespacePassword = &v
	return s
}

func (s *CreateNamespaceRequest) SetOwnerId(v int64) *CreateNamespaceRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateNamespaceRequest) SetRegionId(v string) *CreateNamespaceRequest {
	s.RegionId = &v
	return s
}

func (s *CreateNamespaceRequest) SetWorkspaceId(v string) *CreateNamespaceRequest {
	s.WorkspaceId = &v
	return s
}

func (s *CreateNamespaceRequest) Validate() error {
	return dara.Validate(s)
}

type iCreateNamespaceResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetMessage(v string) *CreateNamespaceResponseBody
	GetMessage() *string
	SetRequestId(v string) *CreateNamespaceResponseBody
	GetRequestId() *string
	SetStatus(v string) *CreateNamespaceResponseBody
	GetStatus() *string
}

type CreateNamespaceResponseBody struct {
	// The returned message.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **success**
	//
	// 	- **fail**
	//
	// example:
	//
	// success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s CreateNamespaceResponseBody) String() string {
	return dara.Prettify(s)
}

func (s CreateNamespaceResponseBody) GoString() string {
	return s.String()
}

func (s *CreateNamespaceResponseBody) GetMessage() *string {
	return s.Message
}

func (s *CreateNamespaceResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *CreateNamespaceResponseBody) GetStatus() *string {
	return s.Status
}

func (s *CreateNamespaceResponseBody) SetMessage(v string) *CreateNamespaceResponseBody {
	s.Message = &v
	return s
}

func (s *CreateNamespaceResponseBody) SetRequestId(v string) *CreateNamespaceResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateNamespaceResponseBody) SetStatus(v string) *CreateNamespaceResponseBody {
	s.Status = &v
	return s
}

func (s *CreateNamespaceResponseBody) Validate() error {
	return dara.Validate(s)
}

type iCreateNamespaceResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *CreateNamespaceResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *CreateNamespaceResponse
	GetStatusCode() *int32
	SetBody(v *CreateNamespaceResponseBody) *CreateNamespaceResponse
	GetBody() *CreateNamespaceResponseBody
}

type CreateNamespaceResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateNamespaceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateNamespaceResponse) String() string {
	return dara.Prettify(s)
}

func (s CreateNamespaceResponse) GoString() string {
	return s.String()
}

func (s *CreateNamespaceResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *CreateNamespaceResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *CreateNamespaceResponse) GetBody() *CreateNamespaceResponseBody {
	return s.Body
}

func (s *CreateNamespaceResponse) SetHeaders(v map[string]*string) *CreateNamespaceResponse {
	s.Headers = v
	return s
}

func (s *CreateNamespaceResponse) SetStatusCode(v int32) *CreateNamespaceResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateNamespaceResponse) SetBody(v *CreateNamespaceResponseBody) *CreateNamespaceResponse {
	s.Body = v
	return s
}

func (s *CreateNamespaceResponse) Validate() error {
	return dara.Validate(s)
}

type iCreateRemoteADBDataSourceRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDataSourceName(v string) *CreateRemoteADBDataSourceRequest
	GetDataSourceName() *string
	SetLocalDBInstanceId(v string) *CreateRemoteADBDataSourceRequest
	GetLocalDBInstanceId() *string
	SetLocalDatabase(v string) *CreateRemoteADBDataSourceRequest
	GetLocalDatabase() *string
	SetManagerUserName(v string) *CreateRemoteADBDataSourceRequest
	GetManagerUserName() *string
	SetManagerUserPassword(v string) *CreateRemoteADBDataSourceRequest
	GetManagerUserPassword() *string
	SetOwnerId(v int64) *CreateRemoteADBDataSourceRequest
	GetOwnerId() *int64
	SetRemoteDBInstanceId(v string) *CreateRemoteADBDataSourceRequest
	GetRemoteDBInstanceId() *string
	SetRemoteDatabase(v string) *CreateRemoteADBDataSourceRequest
	GetRemoteDatabase() *string
	SetUserName(v string) *CreateRemoteADBDataSourceRequest
	GetUserName() *string
	SetUserPassword(v string) *CreateRemoteADBDataSourceRequest
	GetUserPassword() *string
}

type CreateRemoteADBDataSourceRequest struct {
	// Customer-specified DataSourceName.
	//
	// example:
	//
	// test
	DataSourceName *string `json:"DataSourceName,omitempty" xml:"DataSourceName,omitempty"`
	// Instance ID of the data being used (required).
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-test1
	LocalDBInstanceId *string `json:"LocalDBInstanceId,omitempty" xml:"LocalDBInstanceId,omitempty"`
	// Database name of the data being used (required)
	//
	// This parameter is required.
	//
	// example:
	//
	// db1
	LocalDatabase *string `json:"LocalDatabase,omitempty" xml:"LocalDatabase,omitempty"`
	// Management account of the data-using instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// managerAccount
	ManagerUserName *string `json:"ManagerUserName,omitempty" xml:"ManagerUserName,omitempty"`
	// Password of the management account of the data-using instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// password2
	ManagerUserPassword *string `json:"ManagerUserPassword,omitempty" xml:"ManagerUserPassword,omitempty"`
	OwnerId             *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// Instance ID providing the data (required).
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-test2
	RemoteDBInstanceId *string `json:"RemoteDBInstanceId,omitempty" xml:"RemoteDBInstanceId,omitempty"`
	// Database name providing the data (required).
	//
	// This parameter is required.
	//
	// example:
	//
	// db2
	RemoteDatabase *string `json:"RemoteDatabase,omitempty" xml:"RemoteDatabase,omitempty"`
	// Account name of the data-providing instance used for user mapping (required).
	//
	// This parameter is required.
	//
	// example:
	//
	// account1
	UserName *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
	// Password of the data-providing instance account used for user mapping.
	//
	// This parameter is required.
	//
	// example:
	//
	// password1
	UserPassword *string `json:"UserPassword,omitempty" xml:"UserPassword,omitempty"`
}

func (s CreateRemoteADBDataSourceRequest) String() string {
	return dara.Prettify(s)
}

func (s CreateRemoteADBDataSourceRequest) GoString() string {
	return s.String()
}

func (s *CreateRemoteADBDataSourceRequest) GetDataSourceName() *string {
	return s.DataSourceName
}

func (s *CreateRemoteADBDataSourceRequest) GetLocalDBInstanceId() *string {
	return s.LocalDBInstanceId
}

func (s *CreateRemoteADBDataSourceRequest) GetLocalDatabase() *string {
	return s.LocalDatabase
}

func (s *CreateRemoteADBDataSourceRequest) GetManagerUserName() *string {
	return s.ManagerUserName
}

func (s *CreateRemoteADBDataSourceRequest) GetManagerUserPassword() *string {
	return s.ManagerUserPassword
}

func (s *CreateRemoteADBDataSourceRequest) GetOwnerId() *int64 {
	return s.OwnerId
}

func (s *CreateRemoteADBDataSourceRequest) GetRemoteDBInstanceId() *string {
	return s.RemoteDBInstanceId
}

func (s *CreateRemoteADBDataSourceRequest) GetRemoteDatabase() *string {
	return s.RemoteDatabase
}

func (s *CreateRemoteADBDataSourceRequest) GetUserName() *string {
	return s.UserName
}

func (s *CreateRemoteADBDataSourceRequest) GetUserPassword() *string {
	return s.UserPassword
}

func (s *CreateRemoteADBDataSourceRequest) SetDataSourceName(v string) *CreateRemoteADBDataSourceRequest {
	s.DataSourceName = &v
	return s
}

func (s *CreateRemoteADBDataSourceRequest) SetLocalDBInstanceId(v string) *CreateRemoteADBDataSourceRequest {
	s.LocalDBInstanceId = &v
	return s
}

func (s *CreateRemoteADBDataSourceRequest) SetLocalDatabase(v string) *CreateRemoteADBDataSourceRequest {
	s.LocalDatabase = &v
	return s
}

func (s *CreateRemoteADBDataSourceRequest) SetManagerUserName(v string) *CreateRemoteADBDataSourceRequest {
	s.ManagerUserName = &v
	return s
}

func (s *CreateRemoteADBDataSourceRequest) SetManagerUserPassword(v string) *CreateRemoteADBDataSourceRequest {
	s.ManagerUserPassword = &v
	return s
}

func (s *CreateRemoteADBDataSourceRequest) SetOwnerId(v int64) *CreateRemoteADBDataSourceRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateRemoteADBDataSourceRequest) SetRemoteDBInstanceId(v string) *CreateRemoteADBDataSourceRequest {
	s.RemoteDBInstanceId = &v
	return s
}

func (s *CreateRemoteADBDataSourceRequest) SetRemoteDatabase(v string) *CreateRemoteADBDataSourceRequest {
	s.RemoteDatabase = &v
	return s
}

func (s *CreateRemoteADBDataSourceRequest) SetUserName(v string) *CreateRemoteADBDataSourceRequest {
	s.UserName = &v
	return s
}

func (s *CreateRemoteADBDataSourceRequest) SetUserPassword(v string) *CreateRemoteADBDataSourceRequest {
	s.UserPassword = &v
	return s
}

func (s *CreateRemoteADBDataSourceRequest) Validate() error {
	return dara.Validate(s)
}

type iCreateRemoteADBDataSourceResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetDataSourceItem(v *CreateRemoteADBDataSourceResponseBodyDataSourceItem) *CreateRemoteADBDataSourceResponseBody
	GetDataSourceItem() *CreateRemoteADBDataSourceResponseBodyDataSourceItem
	SetRequestId(v string) *CreateRemoteADBDataSourceResponseBody
	GetRequestId() *string
	SetTaskId(v int32) *CreateRemoteADBDataSourceResponseBody
	GetTaskId() *int32
}

type CreateRemoteADBDataSourceResponseBody struct {
	// Returns the successfully added data sharing service data.
	DataSourceItem *CreateRemoteADBDataSourceResponseBodyDataSourceItem `json:"DataSourceItem,omitempty" xml:"DataSourceItem,omitempty" type:"Struct"`
	// Request ID.
	//
	// example:
	//
	// e9d60eb1-e90d-4bc6-a470-c8b767460858
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Workflow task ID.
	//
	// example:
	//
	// 90000
	TaskId *int32 `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s CreateRemoteADBDataSourceResponseBody) String() string {
	return dara.Prettify(s)
}

func (s CreateRemoteADBDataSourceResponseBody) GoString() string {
	return s.String()
}

func (s *CreateRemoteADBDataSourceResponseBody) GetDataSourceItem() *CreateRemoteADBDataSourceResponseBodyDataSourceItem {
	return s.DataSourceItem
}

func (s *CreateRemoteADBDataSourceResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *CreateRemoteADBDataSourceResponseBody) GetTaskId() *int32 {
	return s.TaskId
}

func (s *CreateRemoteADBDataSourceResponseBody) SetDataSourceItem(v *CreateRemoteADBDataSourceResponseBodyDataSourceItem) *CreateRemoteADBDataSourceResponseBody {
	s.DataSourceItem = v
	return s
}

func (s *CreateRemoteADBDataSourceResponseBody) SetRequestId(v string) *CreateRemoteADBDataSourceResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateRemoteADBDataSourceResponseBody) SetTaskId(v int32) *CreateRemoteADBDataSourceResponseBody {
	s.TaskId = &v
	return s
}

func (s *CreateRemoteADBDataSourceResponseBody) Validate() error {
	return dara.Validate(s)
}

type CreateRemoteADBDataSourceResponseBodyDataSourceItem struct {
	// Data source name.
	//
	// example:
	//
	// db1_gptest1_to_db2_gp-test2
	DataSourceName *string `json:"DataSourceName,omitempty" xml:"DataSourceName,omitempty"`
	// Description information.
	//
	// example:
	//
	// userName
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// ID
	//
	// example:
	//
	// 1
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// Local database name
	//
	// example:
	//
	// db1
	LocalDatabase *string `json:"LocalDatabase,omitempty" xml:"LocalDatabase,omitempty"`
	// Local instance name
	//
	// example:
	//
	// gp-test1
	LocalInstanceName *string `json:"LocalInstanceName,omitempty" xml:"LocalInstanceName,omitempty"`
	// Management account user name
	//
	// example:
	//
	// manager_user
	ManagerUserName *string `json:"ManagerUserName,omitempty" xml:"ManagerUserName,omitempty"`
	// Region ID.
	//
	// > You can call the [DescribeRegions](https://help.aliyun.com/document_detail/86912.html) API to view available region IDs.
	//
	// example:
	//
	// cn-beijing
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// Remote database name
	//
	// example:
	//
	// db2
	RemoteDatabase *string `json:"RemoteDatabase,omitempty" xml:"RemoteDatabase,omitempty"`
	// Remote instance name
	//
	// example:
	//
	// gp-test2
	RemoteInstanceName *string `json:"RemoteInstanceName,omitempty" xml:"RemoteInstanceName,omitempty"`
	// Synchronization status
	//
	// example:
	//
	// creating
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// User name
	//
	// example:
	//
	// user1
	UserName *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
}

func (s CreateRemoteADBDataSourceResponseBodyDataSourceItem) String() string {
	return dara.Prettify(s)
}

func (s CreateRemoteADBDataSourceResponseBodyDataSourceItem) GoString() string {
	return s.String()
}

func (s *CreateRemoteADBDataSourceResponseBodyDataSourceItem) GetDataSourceName() *string {
	return s.DataSourceName
}

func (s *CreateRemoteADBDataSourceResponseBodyDataSourceItem) GetDescription() *string {
	return s.Description
}

func (s *CreateRemoteADBDataSourceResponseBodyDataSourceItem) GetId() *int64 {
	return s.Id
}

func (s *CreateRemoteADBDataSourceResponseBodyDataSourceItem) GetLocalDatabase() *string {
	return s.LocalDatabase
}

func (s *CreateRemoteADBDataSourceResponseBodyDataSourceItem) GetLocalInstanceName() *string {
	return s.LocalInstanceName
}

func (s *CreateRemoteADBDataSourceResponseBodyDataSourceItem) GetManagerUserName() *string {
	return s.ManagerUserName
}

func (s *CreateRemoteADBDataSourceResponseBodyDataSourceItem) GetRegionId() *string {
	return s.RegionId
}

func (s *CreateRemoteADBDataSourceResponseBodyDataSourceItem) GetRemoteDatabase() *string {
	return s.RemoteDatabase
}

func (s *CreateRemoteADBDataSourceResponseBodyDataSourceItem) GetRemoteInstanceName() *string {
	return s.RemoteInstanceName
}

func (s *CreateRemoteADBDataSourceResponseBodyDataSourceItem) GetStatus() *string {
	return s.Status
}

func (s *CreateRemoteADBDataSourceResponseBodyDataSourceItem) GetUserName() *string {
	return s.UserName
}

func (s *CreateRemoteADBDataSourceResponseBodyDataSourceItem) SetDataSourceName(v string) *CreateRemoteADBDataSourceResponseBodyDataSourceItem {
	s.DataSourceName = &v
	return s
}

func (s *CreateRemoteADBDataSourceResponseBodyDataSourceItem) SetDescription(v string) *CreateRemoteADBDataSourceResponseBodyDataSourceItem {
	s.Description = &v
	return s
}

func (s *CreateRemoteADBDataSourceResponseBodyDataSourceItem) SetId(v int64) *CreateRemoteADBDataSourceResponseBodyDataSourceItem {
	s.Id = &v
	return s
}

func (s *CreateRemoteADBDataSourceResponseBodyDataSourceItem) SetLocalDatabase(v string) *CreateRemoteADBDataSourceResponseBodyDataSourceItem {
	s.LocalDatabase = &v
	return s
}

func (s *CreateRemoteADBDataSourceResponseBodyDataSourceItem) SetLocalInstanceName(v string) *CreateRemoteADBDataSourceResponseBodyDataSourceItem {
	s.LocalInstanceName = &v
	return s
}

func (s *CreateRemoteADBDataSourceResponseBodyDataSourceItem) SetManagerUserName(v string) *CreateRemoteADBDataSourceResponseBodyDataSourceItem {
	s.ManagerUserName = &v
	return s
}

func (s *CreateRemoteADBDataSourceResponseBodyDataSourceItem) SetRegionId(v string) *CreateRemoteADBDataSourceResponseBodyDataSourceItem {
	s.RegionId = &v
	return s
}

func (s *CreateRemoteADBDataSourceResponseBodyDataSourceItem) SetRemoteDatabase(v string) *CreateRemoteADBDataSourceResponseBodyDataSourceItem {
	s.RemoteDatabase = &v
	return s
}

func (s *CreateRemoteADBDataSourceResponseBodyDataSourceItem) SetRemoteInstanceName(v string) *CreateRemoteADBDataSourceResponseBodyDataSourceItem {
	s.RemoteInstanceName = &v
	return s
}

func (s *CreateRemoteADBDataSourceResponseBodyDataSourceItem) SetStatus(v string) *CreateRemoteADBDataSourceResponseBodyDataSourceItem {
	s.Status = &v
	return s
}

func (s *CreateRemoteADBDataSourceResponseBodyDataSourceItem) SetUserName(v string) *CreateRemoteADBDataSourceResponseBodyDataSourceItem {
	s.UserName = &v
	return s
}

func (s *CreateRemoteADBDataSourceResponseBodyDataSourceItem) Validate() error {
	return dara.Validate(s)
}

type iCreateRemoteADBDataSourceResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *CreateRemoteADBDataSourceResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *CreateRemoteADBDataSourceResponse
	GetStatusCode() *int32
	SetBody(v *CreateRemoteADBDataSourceResponseBody) *CreateRemoteADBDataSourceResponse
	GetBody() *CreateRemoteADBDataSourceResponseBody
}

type CreateRemoteADBDataSourceResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateRemoteADBDataSourceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateRemoteADBDataSourceResponse) String() string {
	return dara.Prettify(s)
}

func (s CreateRemoteADBDataSourceResponse) GoString() string {
	return s.String()
}

func (s *CreateRemoteADBDataSourceResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *CreateRemoteADBDataSourceResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *CreateRemoteADBDataSourceResponse) GetBody() *CreateRemoteADBDataSourceResponseBody {
	return s.Body
}

func (s *CreateRemoteADBDataSourceResponse) SetHeaders(v map[string]*string) *CreateRemoteADBDataSourceResponse {
	s.Headers = v
	return s
}

func (s *CreateRemoteADBDataSourceResponse) SetStatusCode(v int32) *CreateRemoteADBDataSourceResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateRemoteADBDataSourceResponse) SetBody(v *CreateRemoteADBDataSourceResponseBody) *CreateRemoteADBDataSourceResponse {
	s.Body = v
	return s
}

func (s *CreateRemoteADBDataSourceResponse) Validate() error {
	return dara.Validate(s)
}

type iCreateSampleDataRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *CreateSampleDataRequest
	GetDBInstanceId() *string
	SetOwnerId(v int64) *CreateSampleDataRequest
	GetOwnerId() *int64
}

type CreateSampleDataRequest struct {
	// The ID of the instance.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/2361776.html) operation to query the IDs of all AnalyticDB for PostgreSQL instances in a specific region.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s CreateSampleDataRequest) String() string {
	return dara.Prettify(s)
}

func (s CreateSampleDataRequest) GoString() string {
	return s.String()
}

func (s *CreateSampleDataRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *CreateSampleDataRequest) GetOwnerId() *int64 {
	return s.OwnerId
}

func (s *CreateSampleDataRequest) SetDBInstanceId(v string) *CreateSampleDataRequest {
	s.DBInstanceId = &v
	return s
}

func (s *CreateSampleDataRequest) SetOwnerId(v int64) *CreateSampleDataRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateSampleDataRequest) Validate() error {
	return dara.Validate(s)
}

type iCreateSampleDataResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *CreateSampleDataResponseBody
	GetDBInstanceId() *string
	SetErrorMessage(v string) *CreateSampleDataResponseBody
	GetErrorMessage() *string
	SetRequestId(v string) *CreateSampleDataResponseBody
	GetRequestId() *string
	SetStatus(v bool) *CreateSampleDataResponseBody
	GetStatus() *bool
}

type CreateSampleDataResponseBody struct {
	// The ID of the instance.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The error message returned if an error occurs. This message does not affect the execution of the operation.
	//
	// example:
	//
	// *********
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 15A6881F-AAAB-5E4D-9B3F-6DCC1BDF4F2E_99
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The execution state of the operation. Valid values:
	//
	// 	- **false**: The operation fails.
	//
	// 	- **true**: The operation is successful.
	//
	// example:
	//
	// true
	Status *bool `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s CreateSampleDataResponseBody) String() string {
	return dara.Prettify(s)
}

func (s CreateSampleDataResponseBody) GoString() string {
	return s.String()
}

func (s *CreateSampleDataResponseBody) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *CreateSampleDataResponseBody) GetErrorMessage() *string {
	return s.ErrorMessage
}

func (s *CreateSampleDataResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *CreateSampleDataResponseBody) GetStatus() *bool {
	return s.Status
}

func (s *CreateSampleDataResponseBody) SetDBInstanceId(v string) *CreateSampleDataResponseBody {
	s.DBInstanceId = &v
	return s
}

func (s *CreateSampleDataResponseBody) SetErrorMessage(v string) *CreateSampleDataResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *CreateSampleDataResponseBody) SetRequestId(v string) *CreateSampleDataResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateSampleDataResponseBody) SetStatus(v bool) *CreateSampleDataResponseBody {
	s.Status = &v
	return s
}

func (s *CreateSampleDataResponseBody) Validate() error {
	return dara.Validate(s)
}

type iCreateSampleDataResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *CreateSampleDataResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *CreateSampleDataResponse
	GetStatusCode() *int32
	SetBody(v *CreateSampleDataResponseBody) *CreateSampleDataResponse
	GetBody() *CreateSampleDataResponseBody
}

type CreateSampleDataResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateSampleDataResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateSampleDataResponse) String() string {
	return dara.Prettify(s)
}

func (s CreateSampleDataResponse) GoString() string {
	return s.String()
}

func (s *CreateSampleDataResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *CreateSampleDataResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *CreateSampleDataResponse) GetBody() *CreateSampleDataResponseBody {
	return s.Body
}

func (s *CreateSampleDataResponse) SetHeaders(v map[string]*string) *CreateSampleDataResponse {
	s.Headers = v
	return s
}

func (s *CreateSampleDataResponse) SetStatusCode(v int32) *CreateSampleDataResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateSampleDataResponse) SetBody(v *CreateSampleDataResponseBody) *CreateSampleDataResponse {
	s.Body = v
	return s
}

func (s *CreateSampleDataResponse) Validate() error {
	return dara.Validate(s)
}

type iCreateSecretRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *CreateSecretRequest
	GetDBInstanceId() *string
	SetDescription(v string) *CreateSecretRequest
	GetDescription() *string
	SetOwnerId(v int64) *CreateSecretRequest
	GetOwnerId() *int64
	SetPassword(v string) *CreateSecretRequest
	GetPassword() *string
	SetRegionId(v string) *CreateSecretRequest
	GetRegionId() *string
	SetSecretName(v string) *CreateSecretRequest
	GetSecretName() *string
	SetTestConnection(v bool) *CreateSecretRequest
	GetTestConnection() *bool
	SetUsername(v string) *CreateSecretRequest
	GetUsername() *string
	SetWorkspaceId(v string) *CreateSecretRequest
	GetWorkspaceId() *string
}

type CreateSecretRequest struct {
	// The instance ID.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The description of the access credential.
	//
	// example:
	//
	// test
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	OwnerId     *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The password of the database account that is used to access the instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// pwd123
	Password *string `json:"Password,omitempty" xml:"Password,omitempty"`
	// The region ID of the instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-beijing
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The name of the access credential. The name must be 1 to 16 characters in length and can contain letters, digits, and underscores (_). If you leave this parameter empty, the value of the Username parameter is used.
	//
	// example:
	//
	// testsecret
	SecretName *string `json:"SecretName,omitempty" xml:"SecretName,omitempty"`
	// Specifies whether to check the connectivity to the instance by using the name and password of the database account.
	//
	// example:
	//
	// true
	TestConnection *bool `json:"TestConnection,omitempty" xml:"TestConnection,omitempty"`
	// The name of the database account that is used to access the instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// testacc
	Username    *string `json:"Username,omitempty" xml:"Username,omitempty"`
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s CreateSecretRequest) String() string {
	return dara.Prettify(s)
}

func (s CreateSecretRequest) GoString() string {
	return s.String()
}

func (s *CreateSecretRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *CreateSecretRequest) GetDescription() *string {
	return s.Description
}

func (s *CreateSecretRequest) GetOwnerId() *int64 {
	return s.OwnerId
}

func (s *CreateSecretRequest) GetPassword() *string {
	return s.Password
}

func (s *CreateSecretRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *CreateSecretRequest) GetSecretName() *string {
	return s.SecretName
}

func (s *CreateSecretRequest) GetTestConnection() *bool {
	return s.TestConnection
}

func (s *CreateSecretRequest) GetUsername() *string {
	return s.Username
}

func (s *CreateSecretRequest) GetWorkspaceId() *string {
	return s.WorkspaceId
}

func (s *CreateSecretRequest) SetDBInstanceId(v string) *CreateSecretRequest {
	s.DBInstanceId = &v
	return s
}

func (s *CreateSecretRequest) SetDescription(v string) *CreateSecretRequest {
	s.Description = &v
	return s
}

func (s *CreateSecretRequest) SetOwnerId(v int64) *CreateSecretRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateSecretRequest) SetPassword(v string) *CreateSecretRequest {
	s.Password = &v
	return s
}

func (s *CreateSecretRequest) SetRegionId(v string) *CreateSecretRequest {
	s.RegionId = &v
	return s
}

func (s *CreateSecretRequest) SetSecretName(v string) *CreateSecretRequest {
	s.SecretName = &v
	return s
}

func (s *CreateSecretRequest) SetTestConnection(v bool) *CreateSecretRequest {
	s.TestConnection = &v
	return s
}

func (s *CreateSecretRequest) SetUsername(v string) *CreateSecretRequest {
	s.Username = &v
	return s
}

func (s *CreateSecretRequest) SetWorkspaceId(v string) *CreateSecretRequest {
	s.WorkspaceId = &v
	return s
}

func (s *CreateSecretRequest) Validate() error {
	return dara.Validate(s)
}

type iCreateSecretResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetMessage(v string) *CreateSecretResponseBody
	GetMessage() *string
	SetRequestId(v string) *CreateSecretResponseBody
	GetRequestId() *string
	SetSecretArn(v string) *CreateSecretResponseBody
	GetSecretArn() *string
	SetSecretName(v string) *CreateSecretResponseBody
	GetSecretName() *string
	SetStatus(v string) *CreateSecretResponseBody
	GetStatus() *string
}

type CreateSecretResponseBody struct {
	// The returned message.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The Alibaba Cloud Resource Name (ARN) of the access credential for the created Data API account. Format: `acs:gpdb:{{region}}:{{accountId}}:secret/{{secretName}}-{{32 digits random string}`.
	//
	// example:
	//
	// acs:gpdb:cn-beijing:1033**:secret/testsecret-eG2AQGRIwQ0zFp4VA7mYL3uiCXTfDQbQ
	SecretArn *string `json:"SecretArn,omitempty" xml:"SecretArn,omitempty"`
	// The name of the access credential.
	//
	// example:
	//
	// testsecret
	SecretName *string `json:"SecretName,omitempty" xml:"SecretName,omitempty"`
	// The status of the operation. Valid values:
	//
	// 	- **success**
	//
	// 	- **fail**
	//
	// example:
	//
	// success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s CreateSecretResponseBody) String() string {
	return dara.Prettify(s)
}

func (s CreateSecretResponseBody) GoString() string {
	return s.String()
}

func (s *CreateSecretResponseBody) GetMessage() *string {
	return s.Message
}

func (s *CreateSecretResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *CreateSecretResponseBody) GetSecretArn() *string {
	return s.SecretArn
}

func (s *CreateSecretResponseBody) GetSecretName() *string {
	return s.SecretName
}

func (s *CreateSecretResponseBody) GetStatus() *string {
	return s.Status
}

func (s *CreateSecretResponseBody) SetMessage(v string) *CreateSecretResponseBody {
	s.Message = &v
	return s
}

func (s *CreateSecretResponseBody) SetRequestId(v string) *CreateSecretResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateSecretResponseBody) SetSecretArn(v string) *CreateSecretResponseBody {
	s.SecretArn = &v
	return s
}

func (s *CreateSecretResponseBody) SetSecretName(v string) *CreateSecretResponseBody {
	s.SecretName = &v
	return s
}

func (s *CreateSecretResponseBody) SetStatus(v string) *CreateSecretResponseBody {
	s.Status = &v
	return s
}

func (s *CreateSecretResponseBody) Validate() error {
	return dara.Validate(s)
}

type iCreateSecretResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *CreateSecretResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *CreateSecretResponse
	GetStatusCode() *int32
	SetBody(v *CreateSecretResponseBody) *CreateSecretResponse
	GetBody() *CreateSecretResponseBody
}

type CreateSecretResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateSecretResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateSecretResponse) String() string {
	return dara.Prettify(s)
}

func (s CreateSecretResponse) GoString() string {
	return s.String()
}

func (s *CreateSecretResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *CreateSecretResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *CreateSecretResponse) GetBody() *CreateSecretResponseBody {
	return s.Body
}

func (s *CreateSecretResponse) SetHeaders(v map[string]*string) *CreateSecretResponse {
	s.Headers = v
	return s
}

func (s *CreateSecretResponse) SetStatusCode(v int32) *CreateSecretResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateSecretResponse) SetBody(v *CreateSecretResponseBody) *CreateSecretResponse {
	s.Body = v
	return s
}

func (s *CreateSecretResponse) Validate() error {
	return dara.Validate(s)
}

type iCreateServiceLinkedRoleRequest interface {
	dara.Model
	String() string
	GoString() string
	SetOwnerId(v int64) *CreateServiceLinkedRoleRequest
	GetOwnerId() *int64
	SetRegionId(v string) *CreateServiceLinkedRoleRequest
	GetRegionId() *string
}

type CreateServiceLinkedRoleRequest struct {
	OwnerId *int64 `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The ID of the region.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s CreateServiceLinkedRoleRequest) String() string {
	return dara.Prettify(s)
}

func (s CreateServiceLinkedRoleRequest) GoString() string {
	return s.String()
}

func (s *CreateServiceLinkedRoleRequest) GetOwnerId() *int64 {
	return s.OwnerId
}

func (s *CreateServiceLinkedRoleRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *CreateServiceLinkedRoleRequest) SetOwnerId(v int64) *CreateServiceLinkedRoleRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateServiceLinkedRoleRequest) SetRegionId(v string) *CreateServiceLinkedRoleRequest {
	s.RegionId = &v
	return s
}

func (s *CreateServiceLinkedRoleRequest) Validate() error {
	return dara.Validate(s)
}

type iCreateServiceLinkedRoleResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetRequestId(v string) *CreateServiceLinkedRoleResponseBody
	GetRequestId() *string
}

type CreateServiceLinkedRoleResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// B4CAF581-2AC7-41AD-8940-D56DF7AADF5B
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateServiceLinkedRoleResponseBody) String() string {
	return dara.Prettify(s)
}

func (s CreateServiceLinkedRoleResponseBody) GoString() string {
	return s.String()
}

func (s *CreateServiceLinkedRoleResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *CreateServiceLinkedRoleResponseBody) SetRequestId(v string) *CreateServiceLinkedRoleResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateServiceLinkedRoleResponseBody) Validate() error {
	return dara.Validate(s)
}

type iCreateServiceLinkedRoleResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *CreateServiceLinkedRoleResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *CreateServiceLinkedRoleResponse
	GetStatusCode() *int32
	SetBody(v *CreateServiceLinkedRoleResponseBody) *CreateServiceLinkedRoleResponse
	GetBody() *CreateServiceLinkedRoleResponseBody
}

type CreateServiceLinkedRoleResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateServiceLinkedRoleResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateServiceLinkedRoleResponse) String() string {
	return dara.Prettify(s)
}

func (s CreateServiceLinkedRoleResponse) GoString() string {
	return s.String()
}

func (s *CreateServiceLinkedRoleResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *CreateServiceLinkedRoleResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *CreateServiceLinkedRoleResponse) GetBody() *CreateServiceLinkedRoleResponseBody {
	return s.Body
}

func (s *CreateServiceLinkedRoleResponse) SetHeaders(v map[string]*string) *CreateServiceLinkedRoleResponse {
	s.Headers = v
	return s
}

func (s *CreateServiceLinkedRoleResponse) SetStatusCode(v int32) *CreateServiceLinkedRoleResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateServiceLinkedRoleResponse) SetBody(v *CreateServiceLinkedRoleResponseBody) *CreateServiceLinkedRoleResponse {
	s.Body = v
	return s
}

func (s *CreateServiceLinkedRoleResponse) Validate() error {
	return dara.Validate(s)
}

type iCreateStreamingDataServiceRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *CreateStreamingDataServiceRequest
	GetDBInstanceId() *string
	SetRegionId(v string) *CreateStreamingDataServiceRequest
	GetRegionId() *string
	SetServiceDescription(v string) *CreateStreamingDataServiceRequest
	GetServiceDescription() *string
	SetServiceName(v string) *CreateStreamingDataServiceRequest
	GetServiceName() *string
	SetServiceSpec(v string) *CreateStreamingDataServiceRequest
	GetServiceSpec() *string
}

type CreateStreamingDataServiceRequest struct {
	// The instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp10g78o9807yv9h3
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The region ID.
	//
	// > You can call the [DescribeRegions](https://help.aliyun.com/document_detail/86912.html) operation to query the most recent list of regions.
	//
	// example:
	//
	// cn-beijing
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The description of the service.
	//
	// example:
	//
	// test-adbpgss
	ServiceDescription *string `json:"ServiceDescription,omitempty" xml:"ServiceDescription,omitempty"`
	// The name of the service.
	//
	// This parameter is required.
	//
	// example:
	//
	// test-adbpgss
	ServiceName *string `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
	// The specifications of the service.
	//
	// This parameter is required.
	//
	// example:
	//
	// 2
	ServiceSpec *string `json:"ServiceSpec,omitempty" xml:"ServiceSpec,omitempty"`
}

func (s CreateStreamingDataServiceRequest) String() string {
	return dara.Prettify(s)
}

func (s CreateStreamingDataServiceRequest) GoString() string {
	return s.String()
}

func (s *CreateStreamingDataServiceRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *CreateStreamingDataServiceRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *CreateStreamingDataServiceRequest) GetServiceDescription() *string {
	return s.ServiceDescription
}

func (s *CreateStreamingDataServiceRequest) GetServiceName() *string {
	return s.ServiceName
}

func (s *CreateStreamingDataServiceRequest) GetServiceSpec() *string {
	return s.ServiceSpec
}

func (s *CreateStreamingDataServiceRequest) SetDBInstanceId(v string) *CreateStreamingDataServiceRequest {
	s.DBInstanceId = &v
	return s
}

func (s *CreateStreamingDataServiceRequest) SetRegionId(v string) *CreateStreamingDataServiceRequest {
	s.RegionId = &v
	return s
}

func (s *CreateStreamingDataServiceRequest) SetServiceDescription(v string) *CreateStreamingDataServiceRequest {
	s.ServiceDescription = &v
	return s
}

func (s *CreateStreamingDataServiceRequest) SetServiceName(v string) *CreateStreamingDataServiceRequest {
	s.ServiceName = &v
	return s
}

func (s *CreateStreamingDataServiceRequest) SetServiceSpec(v string) *CreateStreamingDataServiceRequest {
	s.ServiceSpec = &v
	return s
}

func (s *CreateStreamingDataServiceRequest) Validate() error {
	return dara.Validate(s)
}

type iCreateStreamingDataServiceResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetRequestId(v string) *CreateStreamingDataServiceResponseBody
	GetRequestId() *string
	SetServiceId(v int32) *CreateStreamingDataServiceResponseBody
	GetServiceId() *int32
}

type CreateStreamingDataServiceResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// B4CAF581-2AC7-41AD-8940-D56DF7AADF5B
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The real-time data service ID.
	//
	// example:
	//
	// 1
	ServiceId *int32 `json:"ServiceId,omitempty" xml:"ServiceId,omitempty"`
}

func (s CreateStreamingDataServiceResponseBody) String() string {
	return dara.Prettify(s)
}

func (s CreateStreamingDataServiceResponseBody) GoString() string {
	return s.String()
}

func (s *CreateStreamingDataServiceResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *CreateStreamingDataServiceResponseBody) GetServiceId() *int32 {
	return s.ServiceId
}

func (s *CreateStreamingDataServiceResponseBody) SetRequestId(v string) *CreateStreamingDataServiceResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateStreamingDataServiceResponseBody) SetServiceId(v int32) *CreateStreamingDataServiceResponseBody {
	s.ServiceId = &v
	return s
}

func (s *CreateStreamingDataServiceResponseBody) Validate() error {
	return dara.Validate(s)
}

type iCreateStreamingDataServiceResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *CreateStreamingDataServiceResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *CreateStreamingDataServiceResponse
	GetStatusCode() *int32
	SetBody(v *CreateStreamingDataServiceResponseBody) *CreateStreamingDataServiceResponse
	GetBody() *CreateStreamingDataServiceResponseBody
}

type CreateStreamingDataServiceResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateStreamingDataServiceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateStreamingDataServiceResponse) String() string {
	return dara.Prettify(s)
}

func (s CreateStreamingDataServiceResponse) GoString() string {
	return s.String()
}

func (s *CreateStreamingDataServiceResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *CreateStreamingDataServiceResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *CreateStreamingDataServiceResponse) GetBody() *CreateStreamingDataServiceResponseBody {
	return s.Body
}

func (s *CreateStreamingDataServiceResponse) SetHeaders(v map[string]*string) *CreateStreamingDataServiceResponse {
	s.Headers = v
	return s
}

func (s *CreateStreamingDataServiceResponse) SetStatusCode(v int32) *CreateStreamingDataServiceResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateStreamingDataServiceResponse) SetBody(v *CreateStreamingDataServiceResponseBody) *CreateStreamingDataServiceResponse {
	s.Body = v
	return s
}

func (s *CreateStreamingDataServiceResponse) Validate() error {
	return dara.Validate(s)
}

type iCreateStreamingDataSourceRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *CreateStreamingDataSourceRequest
	GetDBInstanceId() *string
	SetDataSourceConfig(v string) *CreateStreamingDataSourceRequest
	GetDataSourceConfig() *string
	SetDataSourceDescription(v string) *CreateStreamingDataSourceRequest
	GetDataSourceDescription() *string
	SetDataSourceName(v string) *CreateStreamingDataSourceRequest
	GetDataSourceName() *string
	SetDataSourceType(v string) *CreateStreamingDataSourceRequest
	GetDataSourceType() *string
	SetRegionId(v string) *CreateStreamingDataSourceRequest
	GetRegionId() *string
	SetServiceId(v int32) *CreateStreamingDataSourceRequest
	GetServiceId() *int32
}

type CreateStreamingDataSourceRequest struct {
	// Instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// CreateExternalDataSource
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// Data source configuration information.
	//
	// This parameter is required.
	//
	// example:
	//
	// {"broker_list":"broker0:9091,broker1:9091","topic":"topic"}
	DataSourceConfig *string `json:"DataSourceConfig,omitempty" xml:"DataSourceConfig,omitempty"`
	// Data source description.
	//
	// example:
	//
	// test-kafka
	DataSourceDescription *string `json:"DataSourceDescription,omitempty" xml:"DataSourceDescription,omitempty"`
	// Data source name.
	//
	// This parameter is required.
	//
	// example:
	//
	// test-kafka
	DataSourceName *string `json:"DataSourceName,omitempty" xml:"DataSourceName,omitempty"`
	// Data source type. Values:
	//
	//  -  kafka
	//
	// This parameter is required.
	//
	// example:
	//
	// kafka
	DataSourceType *string `json:"DataSourceType,omitempty" xml:"DataSourceType,omitempty"`
	// Region ID.
	//
	// > You can view available region IDs through the [DescribeRegions](https://help.aliyun.com/document_detail/86912.html) interface.
	//
	// example:
	//
	// cn-beijing
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// Real-time data service ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	ServiceId *int32 `json:"ServiceId,omitempty" xml:"ServiceId,omitempty"`
}

func (s CreateStreamingDataSourceRequest) String() string {
	return dara.Prettify(s)
}

func (s CreateStreamingDataSourceRequest) GoString() string {
	return s.String()
}

func (s *CreateStreamingDataSourceRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *CreateStreamingDataSourceRequest) GetDataSourceConfig() *string {
	return s.DataSourceConfig
}

func (s *CreateStreamingDataSourceRequest) GetDataSourceDescription() *string {
	return s.DataSourceDescription
}

func (s *CreateStreamingDataSourceRequest) GetDataSourceName() *string {
	return s.DataSourceName
}

func (s *CreateStreamingDataSourceRequest) GetDataSourceType() *string {
	return s.DataSourceType
}

func (s *CreateStreamingDataSourceRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *CreateStreamingDataSourceRequest) GetServiceId() *int32 {
	return s.ServiceId
}

func (s *CreateStreamingDataSourceRequest) SetDBInstanceId(v string) *CreateStreamingDataSourceRequest {
	s.DBInstanceId = &v
	return s
}

func (s *CreateStreamingDataSourceRequest) SetDataSourceConfig(v string) *CreateStreamingDataSourceRequest {
	s.DataSourceConfig = &v
	return s
}

func (s *CreateStreamingDataSourceRequest) SetDataSourceDescription(v string) *CreateStreamingDataSourceRequest {
	s.DataSourceDescription = &v
	return s
}

func (s *CreateStreamingDataSourceRequest) SetDataSourceName(v string) *CreateStreamingDataSourceRequest {
	s.DataSourceName = &v
	return s
}

func (s *CreateStreamingDataSourceRequest) SetDataSourceType(v string) *CreateStreamingDataSourceRequest {
	s.DataSourceType = &v
	return s
}

func (s *CreateStreamingDataSourceRequest) SetRegionId(v string) *CreateStreamingDataSourceRequest {
	s.RegionId = &v
	return s
}

func (s *CreateStreamingDataSourceRequest) SetServiceId(v int32) *CreateStreamingDataSourceRequest {
	s.ServiceId = &v
	return s
}

func (s *CreateStreamingDataSourceRequest) Validate() error {
	return dara.Validate(s)
}

type iCreateStreamingDataSourceResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetDataSourceId(v int32) *CreateStreamingDataSourceResponseBody
	GetDataSourceId() *int32
	SetRequestId(v string) *CreateStreamingDataSourceResponseBody
	GetRequestId() *string
}

type CreateStreamingDataSourceResponseBody struct {
	// Data source ID.
	//
	// example:
	//
	// 1
	DataSourceId *int32 `json:"DataSourceId,omitempty" xml:"DataSourceId,omitempty"`
	// Request ID.
	//
	// example:
	//
	// B4CAF581-2AC7-41AD-8940-D56DF7AADF5B
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateStreamingDataSourceResponseBody) String() string {
	return dara.Prettify(s)
}

func (s CreateStreamingDataSourceResponseBody) GoString() string {
	return s.String()
}

func (s *CreateStreamingDataSourceResponseBody) GetDataSourceId() *int32 {
	return s.DataSourceId
}

func (s *CreateStreamingDataSourceResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *CreateStreamingDataSourceResponseBody) SetDataSourceId(v int32) *CreateStreamingDataSourceResponseBody {
	s.DataSourceId = &v
	return s
}

func (s *CreateStreamingDataSourceResponseBody) SetRequestId(v string) *CreateStreamingDataSourceResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateStreamingDataSourceResponseBody) Validate() error {
	return dara.Validate(s)
}

type iCreateStreamingDataSourceResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *CreateStreamingDataSourceResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *CreateStreamingDataSourceResponse
	GetStatusCode() *int32
	SetBody(v *CreateStreamingDataSourceResponseBody) *CreateStreamingDataSourceResponse
	GetBody() *CreateStreamingDataSourceResponseBody
}

type CreateStreamingDataSourceResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateStreamingDataSourceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateStreamingDataSourceResponse) String() string {
	return dara.Prettify(s)
}

func (s CreateStreamingDataSourceResponse) GoString() string {
	return s.String()
}

func (s *CreateStreamingDataSourceResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *CreateStreamingDataSourceResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *CreateStreamingDataSourceResponse) GetBody() *CreateStreamingDataSourceResponseBody {
	return s.Body
}

func (s *CreateStreamingDataSourceResponse) SetHeaders(v map[string]*string) *CreateStreamingDataSourceResponse {
	s.Headers = v
	return s
}

func (s *CreateStreamingDataSourceResponse) SetStatusCode(v int32) *CreateStreamingDataSourceResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateStreamingDataSourceResponse) SetBody(v *CreateStreamingDataSourceResponseBody) *CreateStreamingDataSourceResponse {
	s.Body = v
	return s
}

func (s *CreateStreamingDataSourceResponse) Validate() error {
	return dara.Validate(s)
}

type iCreateStreamingJobRequest interface {
	dara.Model
	String() string
	GoString() string
	SetAccount(v string) *CreateStreamingJobRequest
	GetAccount() *string
	SetConsistency(v string) *CreateStreamingJobRequest
	GetConsistency() *string
	SetDBInstanceId(v string) *CreateStreamingJobRequest
	GetDBInstanceId() *string
	SetDataSourceId(v string) *CreateStreamingJobRequest
	GetDataSourceId() *string
	SetDestColumns(v []*string) *CreateStreamingJobRequest
	GetDestColumns() []*string
	SetDestDatabase(v string) *CreateStreamingJobRequest
	GetDestDatabase() *string
	SetDestSchema(v string) *CreateStreamingJobRequest
	GetDestSchema() *string
	SetDestTable(v string) *CreateStreamingJobRequest
	GetDestTable() *string
	SetErrorLimitCount(v int64) *CreateStreamingJobRequest
	GetErrorLimitCount() *int64
	SetFallbackOffset(v string) *CreateStreamingJobRequest
	GetFallbackOffset() *string
	SetGroupName(v string) *CreateStreamingJobRequest
	GetGroupName() *string
	SetJobConfig(v string) *CreateStreamingJobRequest
	GetJobConfig() *string
	SetJobDescription(v string) *CreateStreamingJobRequest
	GetJobDescription() *string
	SetJobName(v string) *CreateStreamingJobRequest
	GetJobName() *string
	SetMatchColumns(v []*string) *CreateStreamingJobRequest
	GetMatchColumns() []*string
	SetMode(v string) *CreateStreamingJobRequest
	GetMode() *string
	SetPassword(v string) *CreateStreamingJobRequest
	GetPassword() *string
	SetRegionId(v string) *CreateStreamingJobRequest
	GetRegionId() *string
	SetSrcColumns(v []*string) *CreateStreamingJobRequest
	GetSrcColumns() []*string
	SetTryRun(v bool) *CreateStreamingJobRequest
	GetTryRun() *bool
	SetUpdateColumns(v []*string) *CreateStreamingJobRequest
	GetUpdateColumns() []*string
	SetWriteMode(v string) *CreateStreamingJobRequest
	GetWriteMode() *string
}

type CreateStreamingJobRequest struct {
	// Target database account.
	//
	// example:
	//
	// test-account
	Account *string `json:"Account,omitempty" xml:"Account,omitempty"`
	// Delivery guarantee.
	//
	// example:
	//
	// ATLEAST / EXACTLY
	Consistency *string `json:"Consistency,omitempty" xml:"Consistency,omitempty"`
	// Instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp10g78o9807yv9h3
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// Data source ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	DataSourceId *string `json:"DataSourceId,omitempty" xml:"DataSourceId,omitempty"`
	// Target data table mapping field list.
	DestColumns []*string `json:"DestColumns,omitempty" xml:"DestColumns,omitempty" type:"Repeated"`
	// Target database name.
	//
	// example:
	//
	// dest-db
	DestDatabase *string `json:"DestDatabase,omitempty" xml:"DestDatabase,omitempty"`
	// Target namespace.
	//
	// example:
	//
	// dest-schema
	DestSchema *string `json:"DestSchema,omitempty" xml:"DestSchema,omitempty"`
	// Target table name.
	//
	// example:
	//
	// dest-table
	DestTable *string `json:"DestTable,omitempty" xml:"DestTable,omitempty"`
	// When data in Kafka does not match the ADBPG target table, it will cause a write failure. This value is the number of error rows allowed; exceeding this will cause the task to fail.
	//
	// example:
	//
	// 5
	ErrorLimitCount *int64 `json:"ErrorLimitCount,omitempty" xml:"ErrorLimitCount,omitempty"`
	// FallbackOffset, fallback offset
	//
	// - The FallbackOffset parameter defines the behavior when the consumer does not request a specific offset or the requested offset exceeds the current Kafka cluster\\"s recorded offset information. You can choose to start consuming from the earliest (newest) or latest (oldest) offset.
	//
	// example:
	//
	// EARLIEST /  LATEST
	FallbackOffset *string `json:"FallbackOffset,omitempty" xml:"FallbackOffset,omitempty"`
	// Kafka group name
	//
	// example:
	//
	// group_name.
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	// Job configuration file, required for professional mode.
	//
	// example:
	//
	// DATABASE: adbpgss_test
	//
	// USER: adbpgss_test
	//
	// PASSWORD: adbpgssTest
	//
	// HOST: gp-xxx-master.gpdb.rds-aliyun-pre.rds.aliyuncs.com
	//
	// PORT: 5432
	//
	// KAFKA:
	//
	//   INPUT:
	//
	//     SOURCE:
	//
	//       BROKERS: broker1:9092,broker2:9092,broker3:9092
	//
	//       TOPIC: testtopic
	//
	//       FALLBACK_OFFSET: earliest
	//
	//     KEY:
	//
	//       COLUMNS:
	//
	//       - NAME: customer_id
	//
	//         TYPE: int
	//
	//       FORMAT: delimited
	//
	//       DELIMITED_OPTION:
	//
	//         DELIMITER: \\"|\\"
	//
	//     VALUE:
	//
	//       COLUMNS:
	//
	//       - TYPE: integer
	//
	//         NAME: l_orderkey
	//
	//       - TYPE: integer
	//
	//         NAME: l_partkey
	//
	//       - TYPE: integer
	//
	//         NAME: l_suppkey
	//
	//       - TYPE: integer
	//
	//         NAME: l_linenumber
	//
	//       - TYPE: decimal
	//
	//         NAME: l_quantity
	//
	//       - TYPE: decimal
	//
	//         NAME: l_extendedprice
	//
	//       - TYPE: decimal
	//
	//         NAME: l_discount
	//
	//       - TYPE: decimal
	//
	//         NAME: l_tax
	//
	//       - TYPE: char
	//
	//         NAME: l_returnflag
	//
	//       - TYPE: char
	//
	//         NAME: l_linestatus
	//
	//       - TYPE: date
	//
	//         NAME: l_shipdate
	//
	//       - TYPE: date
	//
	//         NAME: l_commitdate
	//
	//       - TYPE: date
	//
	//         NAME: l_receiptdate
	//
	//       - TYPE: text
	//
	//         NAME: l_shipinstruct
	//
	//       - TYPE: text
	//
	//         NAME: l_shipmode
	//
	//       - TYPE: text
	//
	//         NAME: l_comment
	//
	//       FORMAT: delimited
	//
	//       DELIMITED_OPTION:
	//
	//         DELIMITER: \\"|\\"
	//
	//     ERROR_LIMIT: 10
	//
	//   OUTPUT:
	//
	//     SCHEMA: adbpgss_test
	//
	//     TABLE: write_with_insert_plaintext
	//
	//     MODE: MERGE
	//
	//     MATCH_COLUMNS:
	//
	//     - l_orderkey
	//
	//     - l_partkey
	//
	//     - l_suppkey
	//
	//     UPDATE_COLUMNS:
	//
	//     - l_linenumber
	//
	//     - l_quantity
	//
	//     - l_extendedprice
	//
	//     - l_discount
	//
	//     - l_tax
	//
	//     - l_returnflag
	//
	//     - l_linestatus
	//
	//     - l_shipdate
	//
	//     - l_commitdate
	//
	//     - l_receiptdate
	//
	//     - l_shipinstruct
	//
	//     - l_shipmode
	//
	//     - l_comment
	//
	//     MAPPING:
	//
	//     - EXPRESSION: l_orderkey
	//
	//       NAME: l_orderkey
	//
	//     - EXPRESSION: l_partkey
	//
	//       NAME: l_partkey
	//
	//     - EXPRESSION: l_suppkey
	//
	//       NAME: l_suppkey
	//
	//     - EXPRESSION: l_linenumber
	//
	//       NAME: l_linenumber
	//
	//     - EXPRESSION: l_quantity
	//
	//       NAME: l_quantity
	//
	//     - EXPRESSION: l_extendedprice
	//
	//       NAME: l_extendedprice
	//
	//     - EXPRESSION: l_discount
	//
	//       NAME: l_discount
	//
	//     - EXPRESSION: l_tax
	//
	//       NAME: l_tax
	//
	//     - EXPRESSION: l_returnflag
	//
	//       NAME: l_returnflag
	//
	//     - EXPRESSION: l_linestatus
	//
	//       NAME: l_linestatus
	//
	//     - EXPRESSION: l_shipdate
	//
	//       NAME: l_shipdate
	//
	//     - EXPRESSION: l_commitdate
	//
	//       NAME: l_commitdate
	//
	//     - EXPRESSION: l_receiptdate
	//
	//       NAME: l_receiptdate
	//
	//     - EXPRESSION: l_shipinstruct
	//
	//       NAME: l_shipinstruct
	//
	//     - EXPRESSION: l_shipmode
	//
	//       NAME: l_shipmode
	//
	//     - EXPRESSION: l_comment
	//
	//       NAME: l_comment
	//
	//   COMMIT:
	//
	//     MAX_ROW: 1000
	//
	//     MINIMAL_INTERVAL: 1000
	//
	//     CONSISTENCY: ATLEAST
	//
	//   POLL:
	//
	//     BATCHSIZE: 1000
	//
	//     TIMEOUT: 1000
	//
	//   PROPERTIES:
	//
	//     group.id: testgroup
	JobConfig *string `json:"JobConfig,omitempty" xml:"JobConfig,omitempty"`
	// Job description.
	//
	// example:
	//
	// test-job
	JobDescription *string `json:"JobDescription,omitempty" xml:"JobDescription,omitempty"`
	// Job name.
	//
	// This parameter is required.
	//
	// example:
	//
	// test-job
	JobName *string `json:"JobName,omitempty" xml:"JobName,omitempty"`
	// Match columns, usually all primary key columns of the target table. If all column values in this configuration are the same, the two rows of data are considered duplicates.
	MatchColumns []*string `json:"MatchColumns,omitempty" xml:"MatchColumns,omitempty" type:"Repeated"`
	// Configuration mode
	//
	// 1. Basic mode requires specifying some configuration fields
	//
	// 1. Professional mode supports submitting a YAML file
	//
	// example:
	//
	// basic / professional
	Mode *string `json:"Mode,omitempty" xml:"Mode,omitempty"`
	// Target database password.
	//
	// example:
	//
	// pwd123
	Password *string `json:"Password,omitempty" xml:"Password,omitempty"`
	// Region ID.
	//
	// > You can call the [DescribeRegions](https://help.aliyun.com/document_detail/86912.html) API to view available region IDs.
	//
	// example:
	//
	// cn-beijing
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// Source data field list.
	SrcColumns []*string `json:"SrcColumns,omitempty" xml:"SrcColumns,omitempty" type:"Repeated"`
	// Whether to test the real-time task, values:
	//
	// - true
	//
	// - false
	//
	// Default value: false.
	//
	// example:
	//
	// true
	TryRun *bool `json:"TryRun,omitempty" xml:"TryRun,omitempty"`
	// Update columns, usually all non-primary key columns of the target table. When data is determined to be duplicate through MatchColumns, updating the UpdateColumns column values will result in new data overwriting old data.
	UpdateColumns []*string `json:"UpdateColumns,omitempty" xml:"UpdateColumns,omitempty" type:"Repeated"`
	// Write mode.
	//
	// example:
	//
	// INSERT/UPDATE/MERGE
	WriteMode *string `json:"WriteMode,omitempty" xml:"WriteMode,omitempty"`
}

func (s CreateStreamingJobRequest) String() string {
	return dara.Prettify(s)
}

func (s CreateStreamingJobRequest) GoString() string {
	return s.String()
}

func (s *CreateStreamingJobRequest) GetAccount() *string {
	return s.Account
}

func (s *CreateStreamingJobRequest) GetConsistency() *string {
	return s.Consistency
}

func (s *CreateStreamingJobRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *CreateStreamingJobRequest) GetDataSourceId() *string {
	return s.DataSourceId
}

func (s *CreateStreamingJobRequest) GetDestColumns() []*string {
	return s.DestColumns
}

func (s *CreateStreamingJobRequest) GetDestDatabase() *string {
	return s.DestDatabase
}

func (s *CreateStreamingJobRequest) GetDestSchema() *string {
	return s.DestSchema
}

func (s *CreateStreamingJobRequest) GetDestTable() *string {
	return s.DestTable
}

func (s *CreateStreamingJobRequest) GetErrorLimitCount() *int64 {
	return s.ErrorLimitCount
}

func (s *CreateStreamingJobRequest) GetFallbackOffset() *string {
	return s.FallbackOffset
}

func (s *CreateStreamingJobRequest) GetGroupName() *string {
	return s.GroupName
}

func (s *CreateStreamingJobRequest) GetJobConfig() *string {
	return s.JobConfig
}

func (s *CreateStreamingJobRequest) GetJobDescription() *string {
	return s.JobDescription
}

func (s *CreateStreamingJobRequest) GetJobName() *string {
	return s.JobName
}

func (s *CreateStreamingJobRequest) GetMatchColumns() []*string {
	return s.MatchColumns
}

func (s *CreateStreamingJobRequest) GetMode() *string {
	return s.Mode
}

func (s *CreateStreamingJobRequest) GetPassword() *string {
	return s.Password
}

func (s *CreateStreamingJobRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *CreateStreamingJobRequest) GetSrcColumns() []*string {
	return s.SrcColumns
}

func (s *CreateStreamingJobRequest) GetTryRun() *bool {
	return s.TryRun
}

func (s *CreateStreamingJobRequest) GetUpdateColumns() []*string {
	return s.UpdateColumns
}

func (s *CreateStreamingJobRequest) GetWriteMode() *string {
	return s.WriteMode
}

func (s *CreateStreamingJobRequest) SetAccount(v string) *CreateStreamingJobRequest {
	s.Account = &v
	return s
}

func (s *CreateStreamingJobRequest) SetConsistency(v string) *CreateStreamingJobRequest {
	s.Consistency = &v
	return s
}

func (s *CreateStreamingJobRequest) SetDBInstanceId(v string) *CreateStreamingJobRequest {
	s.DBInstanceId = &v
	return s
}

func (s *CreateStreamingJobRequest) SetDataSourceId(v string) *CreateStreamingJobRequest {
	s.DataSourceId = &v
	return s
}

func (s *CreateStreamingJobRequest) SetDestColumns(v []*string) *CreateStreamingJobRequest {
	s.DestColumns = v
	return s
}

func (s *CreateStreamingJobRequest) SetDestDatabase(v string) *CreateStreamingJobRequest {
	s.DestDatabase = &v
	return s
}

func (s *CreateStreamingJobRequest) SetDestSchema(v string) *CreateStreamingJobRequest {
	s.DestSchema = &v
	return s
}

func (s *CreateStreamingJobRequest) SetDestTable(v string) *CreateStreamingJobRequest {
	s.DestTable = &v
	return s
}

func (s *CreateStreamingJobRequest) SetErrorLimitCount(v int64) *CreateStreamingJobRequest {
	s.ErrorLimitCount = &v
	return s
}

func (s *CreateStreamingJobRequest) SetFallbackOffset(v string) *CreateStreamingJobRequest {
	s.FallbackOffset = &v
	return s
}

func (s *CreateStreamingJobRequest) SetGroupName(v string) *CreateStreamingJobRequest {
	s.GroupName = &v
	return s
}

func (s *CreateStreamingJobRequest) SetJobConfig(v string) *CreateStreamingJobRequest {
	s.JobConfig = &v
	return s
}

func (s *CreateStreamingJobRequest) SetJobDescription(v string) *CreateStreamingJobRequest {
	s.JobDescription = &v
	return s
}

func (s *CreateStreamingJobRequest) SetJobName(v string) *CreateStreamingJobRequest {
	s.JobName = &v
	return s
}

func (s *CreateStreamingJobRequest) SetMatchColumns(v []*string) *CreateStreamingJobRequest {
	s.MatchColumns = v
	return s
}

func (s *CreateStreamingJobRequest) SetMode(v string) *CreateStreamingJobRequest {
	s.Mode = &v
	return s
}

func (s *CreateStreamingJobRequest) SetPassword(v string) *CreateStreamingJobRequest {
	s.Password = &v
	return s
}

func (s *CreateStreamingJobRequest) SetRegionId(v string) *CreateStreamingJobRequest {
	s.RegionId = &v
	return s
}

func (s *CreateStreamingJobRequest) SetSrcColumns(v []*string) *CreateStreamingJobRequest {
	s.SrcColumns = v
	return s
}

func (s *CreateStreamingJobRequest) SetTryRun(v bool) *CreateStreamingJobRequest {
	s.TryRun = &v
	return s
}

func (s *CreateStreamingJobRequest) SetUpdateColumns(v []*string) *CreateStreamingJobRequest {
	s.UpdateColumns = v
	return s
}

func (s *CreateStreamingJobRequest) SetWriteMode(v string) *CreateStreamingJobRequest {
	s.WriteMode = &v
	return s
}

func (s *CreateStreamingJobRequest) Validate() error {
	return dara.Validate(s)
}

type iCreateStreamingJobShrinkRequest interface {
	dara.Model
	String() string
	GoString() string
	SetAccount(v string) *CreateStreamingJobShrinkRequest
	GetAccount() *string
	SetConsistency(v string) *CreateStreamingJobShrinkRequest
	GetConsistency() *string
	SetDBInstanceId(v string) *CreateStreamingJobShrinkRequest
	GetDBInstanceId() *string
	SetDataSourceId(v string) *CreateStreamingJobShrinkRequest
	GetDataSourceId() *string
	SetDestColumnsShrink(v string) *CreateStreamingJobShrinkRequest
	GetDestColumnsShrink() *string
	SetDestDatabase(v string) *CreateStreamingJobShrinkRequest
	GetDestDatabase() *string
	SetDestSchema(v string) *CreateStreamingJobShrinkRequest
	GetDestSchema() *string
	SetDestTable(v string) *CreateStreamingJobShrinkRequest
	GetDestTable() *string
	SetErrorLimitCount(v int64) *CreateStreamingJobShrinkRequest
	GetErrorLimitCount() *int64
	SetFallbackOffset(v string) *CreateStreamingJobShrinkRequest
	GetFallbackOffset() *string
	SetGroupName(v string) *CreateStreamingJobShrinkRequest
	GetGroupName() *string
	SetJobConfig(v string) *CreateStreamingJobShrinkRequest
	GetJobConfig() *string
	SetJobDescription(v string) *CreateStreamingJobShrinkRequest
	GetJobDescription() *string
	SetJobName(v string) *CreateStreamingJobShrinkRequest
	GetJobName() *string
	SetMatchColumnsShrink(v string) *CreateStreamingJobShrinkRequest
	GetMatchColumnsShrink() *string
	SetMode(v string) *CreateStreamingJobShrinkRequest
	GetMode() *string
	SetPassword(v string) *CreateStreamingJobShrinkRequest
	GetPassword() *string
	SetRegionId(v string) *CreateStreamingJobShrinkRequest
	GetRegionId() *string
	SetSrcColumnsShrink(v string) *CreateStreamingJobShrinkRequest
	GetSrcColumnsShrink() *string
	SetTryRun(v bool) *CreateStreamingJobShrinkRequest
	GetTryRun() *bool
	SetUpdateColumnsShrink(v string) *CreateStreamingJobShrinkRequest
	GetUpdateColumnsShrink() *string
	SetWriteMode(v string) *CreateStreamingJobShrinkRequest
	GetWriteMode() *string
}

type CreateStreamingJobShrinkRequest struct {
	// Target database account.
	//
	// example:
	//
	// test-account
	Account *string `json:"Account,omitempty" xml:"Account,omitempty"`
	// Delivery guarantee.
	//
	// example:
	//
	// ATLEAST / EXACTLY
	Consistency *string `json:"Consistency,omitempty" xml:"Consistency,omitempty"`
	// Instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp10g78o9807yv9h3
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// Data source ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	DataSourceId *string `json:"DataSourceId,omitempty" xml:"DataSourceId,omitempty"`
	// Target data table mapping field list.
	DestColumnsShrink *string `json:"DestColumns,omitempty" xml:"DestColumns,omitempty"`
	// Target database name.
	//
	// example:
	//
	// dest-db
	DestDatabase *string `json:"DestDatabase,omitempty" xml:"DestDatabase,omitempty"`
	// Target namespace.
	//
	// example:
	//
	// dest-schema
	DestSchema *string `json:"DestSchema,omitempty" xml:"DestSchema,omitempty"`
	// Target table name.
	//
	// example:
	//
	// dest-table
	DestTable *string `json:"DestTable,omitempty" xml:"DestTable,omitempty"`
	// When data in Kafka does not match the ADBPG target table, it will cause a write failure. This value is the number of error rows allowed; exceeding this will cause the task to fail.
	//
	// example:
	//
	// 5
	ErrorLimitCount *int64 `json:"ErrorLimitCount,omitempty" xml:"ErrorLimitCount,omitempty"`
	// FallbackOffset, fallback offset
	//
	// - The FallbackOffset parameter defines the behavior when the consumer does not request a specific offset or the requested offset exceeds the current Kafka cluster\\"s recorded offset information. You can choose to start consuming from the earliest (newest) or latest (oldest) offset.
	//
	// example:
	//
	// EARLIEST /  LATEST
	FallbackOffset *string `json:"FallbackOffset,omitempty" xml:"FallbackOffset,omitempty"`
	// Kafka group name
	//
	// example:
	//
	// group_name.
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	// Job configuration file, required for professional mode.
	//
	// example:
	//
	// DATABASE: adbpgss_test
	//
	// USER: adbpgss_test
	//
	// PASSWORD: adbpgssTest
	//
	// HOST: gp-xxx-master.gpdb.rds-aliyun-pre.rds.aliyuncs.com
	//
	// PORT: 5432
	//
	// KAFKA:
	//
	//   INPUT:
	//
	//     SOURCE:
	//
	//       BROKERS: broker1:9092,broker2:9092,broker3:9092
	//
	//       TOPIC: testtopic
	//
	//       FALLBACK_OFFSET: earliest
	//
	//     KEY:
	//
	//       COLUMNS:
	//
	//       - NAME: customer_id
	//
	//         TYPE: int
	//
	//       FORMAT: delimited
	//
	//       DELIMITED_OPTION:
	//
	//         DELIMITER: \\"|\\"
	//
	//     VALUE:
	//
	//       COLUMNS:
	//
	//       - TYPE: integer
	//
	//         NAME: l_orderkey
	//
	//       - TYPE: integer
	//
	//         NAME: l_partkey
	//
	//       - TYPE: integer
	//
	//         NAME: l_suppkey
	//
	//       - TYPE: integer
	//
	//         NAME: l_linenumber
	//
	//       - TYPE: decimal
	//
	//         NAME: l_quantity
	//
	//       - TYPE: decimal
	//
	//         NAME: l_extendedprice
	//
	//       - TYPE: decimal
	//
	//         NAME: l_discount
	//
	//       - TYPE: decimal
	//
	//         NAME: l_tax
	//
	//       - TYPE: char
	//
	//         NAME: l_returnflag
	//
	//       - TYPE: char
	//
	//         NAME: l_linestatus
	//
	//       - TYPE: date
	//
	//         NAME: l_shipdate
	//
	//       - TYPE: date
	//
	//         NAME: l_commitdate
	//
	//       - TYPE: date
	//
	//         NAME: l_receiptdate
	//
	//       - TYPE: text
	//
	//         NAME: l_shipinstruct
	//
	//       - TYPE: text
	//
	//         NAME: l_shipmode
	//
	//       - TYPE: text
	//
	//         NAME: l_comment
	//
	//       FORMAT: delimited
	//
	//       DELIMITED_OPTION:
	//
	//         DELIMITER: \\"|\\"
	//
	//     ERROR_LIMIT: 10
	//
	//   OUTPUT:
	//
	//     SCHEMA: adbpgss_test
	//
	//     TABLE: write_with_insert_plaintext
	//
	//     MODE: MERGE
	//
	//     MATCH_COLUMNS:
	//
	//     - l_orderkey
	//
	//     - l_partkey
	//
	//     - l_suppkey
	//
	//     UPDATE_COLUMNS:
	//
	//     - l_linenumber
	//
	//     - l_quantity
	//
	//     - l_extendedprice
	//
	//     - l_discount
	//
	//     - l_tax
	//
	//     - l_returnflag
	//
	//     - l_linestatus
	//
	//     - l_shipdate
	//
	//     - l_commitdate
	//
	//     - l_receiptdate
	//
	//     - l_shipinstruct
	//
	//     - l_shipmode
	//
	//     - l_comment
	//
	//     MAPPING:
	//
	//     - EXPRESSION: l_orderkey
	//
	//       NAME: l_orderkey
	//
	//     - EXPRESSION: l_partkey
	//
	//       NAME: l_partkey
	//
	//     - EXPRESSION: l_suppkey
	//
	//       NAME: l_suppkey
	//
	//     - EXPRESSION: l_linenumber
	//
	//       NAME: l_linenumber
	//
	//     - EXPRESSION: l_quantity
	//
	//       NAME: l_quantity
	//
	//     - EXPRESSION: l_extendedprice
	//
	//       NAME: l_extendedprice
	//
	//     - EXPRESSION: l_discount
	//
	//       NAME: l_discount
	//
	//     - EXPRESSION: l_tax
	//
	//       NAME: l_tax
	//
	//     - EXPRESSION: l_returnflag
	//
	//       NAME: l_returnflag
	//
	//     - EXPRESSION: l_linestatus
	//
	//       NAME: l_linestatus
	//
	//     - EXPRESSION: l_shipdate
	//
	//       NAME: l_shipdate
	//
	//     - EXPRESSION: l_commitdate
	//
	//       NAME: l_commitdate
	//
	//     - EXPRESSION: l_receiptdate
	//
	//       NAME: l_receiptdate
	//
	//     - EXPRESSION: l_shipinstruct
	//
	//       NAME: l_shipinstruct
	//
	//     - EXPRESSION: l_shipmode
	//
	//       NAME: l_shipmode
	//
	//     - EXPRESSION: l_comment
	//
	//       NAME: l_comment
	//
	//   COMMIT:
	//
	//     MAX_ROW: 1000
	//
	//     MINIMAL_INTERVAL: 1000
	//
	//     CONSISTENCY: ATLEAST
	//
	//   POLL:
	//
	//     BATCHSIZE: 1000
	//
	//     TIMEOUT: 1000
	//
	//   PROPERTIES:
	//
	//     group.id: testgroup
	JobConfig *string `json:"JobConfig,omitempty" xml:"JobConfig,omitempty"`
	// Job description.
	//
	// example:
	//
	// test-job
	JobDescription *string `json:"JobDescription,omitempty" xml:"JobDescription,omitempty"`
	// Job name.
	//
	// This parameter is required.
	//
	// example:
	//
	// test-job
	JobName *string `json:"JobName,omitempty" xml:"JobName,omitempty"`
	// Match columns, usually all primary key columns of the target table. If all column values in this configuration are the same, the two rows of data are considered duplicates.
	MatchColumnsShrink *string `json:"MatchColumns,omitempty" xml:"MatchColumns,omitempty"`
	// Configuration mode
	//
	// 1. Basic mode requires specifying some configuration fields
	//
	// 1. Professional mode supports submitting a YAML file
	//
	// example:
	//
	// basic / professional
	Mode *string `json:"Mode,omitempty" xml:"Mode,omitempty"`
	// Target database password.
	//
	// example:
	//
	// pwd123
	Password *string `json:"Password,omitempty" xml:"Password,omitempty"`
	// Region ID.
	//
	// > You can call the [DescribeRegions](https://help.aliyun.com/document_detail/86912.html) API to view available region IDs.
	//
	// example:
	//
	// cn-beijing
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// Source data field list.
	SrcColumnsShrink *string `json:"SrcColumns,omitempty" xml:"SrcColumns,omitempty"`
	// Whether to test the real-time task, values:
	//
	// - true
	//
	// - false
	//
	// Default value: false.
	//
	// example:
	//
	// true
	TryRun *bool `json:"TryRun,omitempty" xml:"TryRun,omitempty"`
	// Update columns, usually all non-primary key columns of the target table. When data is determined to be duplicate through MatchColumns, updating the UpdateColumns column values will result in new data overwriting old data.
	UpdateColumnsShrink *string `json:"UpdateColumns,omitempty" xml:"UpdateColumns,omitempty"`
	// Write mode.
	//
	// example:
	//
	// INSERT/UPDATE/MERGE
	WriteMode *string `json:"WriteMode,omitempty" xml:"WriteMode,omitempty"`
}

func (s CreateStreamingJobShrinkRequest) String() string {
	return dara.Prettify(s)
}

func (s CreateStreamingJobShrinkRequest) GoString() string {
	return s.String()
}

func (s *CreateStreamingJobShrinkRequest) GetAccount() *string {
	return s.Account
}

func (s *CreateStreamingJobShrinkRequest) GetConsistency() *string {
	return s.Consistency
}

func (s *CreateStreamingJobShrinkRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *CreateStreamingJobShrinkRequest) GetDataSourceId() *string {
	return s.DataSourceId
}

func (s *CreateStreamingJobShrinkRequest) GetDestColumnsShrink() *string {
	return s.DestColumnsShrink
}

func (s *CreateStreamingJobShrinkRequest) GetDestDatabase() *string {
	return s.DestDatabase
}

func (s *CreateStreamingJobShrinkRequest) GetDestSchema() *string {
	return s.DestSchema
}

func (s *CreateStreamingJobShrinkRequest) GetDestTable() *string {
	return s.DestTable
}

func (s *CreateStreamingJobShrinkRequest) GetErrorLimitCount() *int64 {
	return s.ErrorLimitCount
}

func (s *CreateStreamingJobShrinkRequest) GetFallbackOffset() *string {
	return s.FallbackOffset
}

func (s *CreateStreamingJobShrinkRequest) GetGroupName() *string {
	return s.GroupName
}

func (s *CreateStreamingJobShrinkRequest) GetJobConfig() *string {
	return s.JobConfig
}

func (s *CreateStreamingJobShrinkRequest) GetJobDescription() *string {
	return s.JobDescription
}

func (s *CreateStreamingJobShrinkRequest) GetJobName() *string {
	return s.JobName
}

func (s *CreateStreamingJobShrinkRequest) GetMatchColumnsShrink() *string {
	return s.MatchColumnsShrink
}

func (s *CreateStreamingJobShrinkRequest) GetMode() *string {
	return s.Mode
}

func (s *CreateStreamingJobShrinkRequest) GetPassword() *string {
	return s.Password
}

func (s *CreateStreamingJobShrinkRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *CreateStreamingJobShrinkRequest) GetSrcColumnsShrink() *string {
	return s.SrcColumnsShrink
}

func (s *CreateStreamingJobShrinkRequest) GetTryRun() *bool {
	return s.TryRun
}

func (s *CreateStreamingJobShrinkRequest) GetUpdateColumnsShrink() *string {
	return s.UpdateColumnsShrink
}

func (s *CreateStreamingJobShrinkRequest) GetWriteMode() *string {
	return s.WriteMode
}

func (s *CreateStreamingJobShrinkRequest) SetAccount(v string) *CreateStreamingJobShrinkRequest {
	s.Account = &v
	return s
}

func (s *CreateStreamingJobShrinkRequest) SetConsistency(v string) *CreateStreamingJobShrinkRequest {
	s.Consistency = &v
	return s
}

func (s *CreateStreamingJobShrinkRequest) SetDBInstanceId(v string) *CreateStreamingJobShrinkRequest {
	s.DBInstanceId = &v
	return s
}

func (s *CreateStreamingJobShrinkRequest) SetDataSourceId(v string) *CreateStreamingJobShrinkRequest {
	s.DataSourceId = &v
	return s
}

func (s *CreateStreamingJobShrinkRequest) SetDestColumnsShrink(v string) *CreateStreamingJobShrinkRequest {
	s.DestColumnsShrink = &v
	return s
}

func (s *CreateStreamingJobShrinkRequest) SetDestDatabase(v string) *CreateStreamingJobShrinkRequest {
	s.DestDatabase = &v
	return s
}

func (s *CreateStreamingJobShrinkRequest) SetDestSchema(v string) *CreateStreamingJobShrinkRequest {
	s.DestSchema = &v
	return s
}

func (s *CreateStreamingJobShrinkRequest) SetDestTable(v string) *CreateStreamingJobShrinkRequest {
	s.DestTable = &v
	return s
}

func (s *CreateStreamingJobShrinkRequest) SetErrorLimitCount(v int64) *CreateStreamingJobShrinkRequest {
	s.ErrorLimitCount = &v
	return s
}

func (s *CreateStreamingJobShrinkRequest) SetFallbackOffset(v string) *CreateStreamingJobShrinkRequest {
	s.FallbackOffset = &v
	return s
}

func (s *CreateStreamingJobShrinkRequest) SetGroupName(v string) *CreateStreamingJobShrinkRequest {
	s.GroupName = &v
	return s
}

func (s *CreateStreamingJobShrinkRequest) SetJobConfig(v string) *CreateStreamingJobShrinkRequest {
	s.JobConfig = &v
	return s
}

func (s *CreateStreamingJobShrinkRequest) SetJobDescription(v string) *CreateStreamingJobShrinkRequest {
	s.JobDescription = &v
	return s
}

func (s *CreateStreamingJobShrinkRequest) SetJobName(v string) *CreateStreamingJobShrinkRequest {
	s.JobName = &v
	return s
}

func (s *CreateStreamingJobShrinkRequest) SetMatchColumnsShrink(v string) *CreateStreamingJobShrinkRequest {
	s.MatchColumnsShrink = &v
	return s
}

func (s *CreateStreamingJobShrinkRequest) SetMode(v string) *CreateStreamingJobShrinkRequest {
	s.Mode = &v
	return s
}

func (s *CreateStreamingJobShrinkRequest) SetPassword(v string) *CreateStreamingJobShrinkRequest {
	s.Password = &v
	return s
}

func (s *CreateStreamingJobShrinkRequest) SetRegionId(v string) *CreateStreamingJobShrinkRequest {
	s.RegionId = &v
	return s
}

func (s *CreateStreamingJobShrinkRequest) SetSrcColumnsShrink(v string) *CreateStreamingJobShrinkRequest {
	s.SrcColumnsShrink = &v
	return s
}

func (s *CreateStreamingJobShrinkRequest) SetTryRun(v bool) *CreateStreamingJobShrinkRequest {
	s.TryRun = &v
	return s
}

func (s *CreateStreamingJobShrinkRequest) SetUpdateColumnsShrink(v string) *CreateStreamingJobShrinkRequest {
	s.UpdateColumnsShrink = &v
	return s
}

func (s *CreateStreamingJobShrinkRequest) SetWriteMode(v string) *CreateStreamingJobShrinkRequest {
	s.WriteMode = &v
	return s
}

func (s *CreateStreamingJobShrinkRequest) Validate() error {
	return dara.Validate(s)
}

type iCreateStreamingJobResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetJobId(v int32) *CreateStreamingJobResponseBody
	GetJobId() *int32
	SetRequestId(v string) *CreateStreamingJobResponseBody
	GetRequestId() *string
}

type CreateStreamingJobResponseBody struct {
	// Job ID.
	//
	// example:
	//
	// 1
	JobId *int32 `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// Request ID.
	//
	// example:
	//
	// B4CAF581-2AC7-41AD-8940-D56DF7AADF5B
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateStreamingJobResponseBody) String() string {
	return dara.Prettify(s)
}

func (s CreateStreamingJobResponseBody) GoString() string {
	return s.String()
}

func (s *CreateStreamingJobResponseBody) GetJobId() *int32 {
	return s.JobId
}

func (s *CreateStreamingJobResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *CreateStreamingJobResponseBody) SetJobId(v int32) *CreateStreamingJobResponseBody {
	s.JobId = &v
	return s
}

func (s *CreateStreamingJobResponseBody) SetRequestId(v string) *CreateStreamingJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateStreamingJobResponseBody) Validate() error {
	return dara.Validate(s)
}

type iCreateStreamingJobResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *CreateStreamingJobResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *CreateStreamingJobResponse
	GetStatusCode() *int32
	SetBody(v *CreateStreamingJobResponseBody) *CreateStreamingJobResponse
	GetBody() *CreateStreamingJobResponseBody
}

type CreateStreamingJobResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateStreamingJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateStreamingJobResponse) String() string {
	return dara.Prettify(s)
}

func (s CreateStreamingJobResponse) GoString() string {
	return s.String()
}

func (s *CreateStreamingJobResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *CreateStreamingJobResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *CreateStreamingJobResponse) GetBody() *CreateStreamingJobResponseBody {
	return s.Body
}

func (s *CreateStreamingJobResponse) SetHeaders(v map[string]*string) *CreateStreamingJobResponse {
	s.Headers = v
	return s
}

func (s *CreateStreamingJobResponse) SetStatusCode(v int32) *CreateStreamingJobResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateStreamingJobResponse) SetBody(v *CreateStreamingJobResponseBody) *CreateStreamingJobResponse {
	s.Body = v
	return s
}

func (s *CreateStreamingJobResponse) Validate() error {
	return dara.Validate(s)
}

type iCreateVectorIndexRequest interface {
	dara.Model
	String() string
	GoString() string
	SetCollection(v string) *CreateVectorIndexRequest
	GetCollection() *string
	SetDBInstanceId(v string) *CreateVectorIndexRequest
	GetDBInstanceId() *string
	SetDimension(v int32) *CreateVectorIndexRequest
	GetDimension() *int32
	SetExternalStorage(v int32) *CreateVectorIndexRequest
	GetExternalStorage() *int32
	SetHnswEfConstruction(v int32) *CreateVectorIndexRequest
	GetHnswEfConstruction() *int32
	SetHnswM(v int32) *CreateVectorIndexRequest
	GetHnswM() *int32
	SetManagerAccount(v string) *CreateVectorIndexRequest
	GetManagerAccount() *string
	SetManagerAccountPassword(v string) *CreateVectorIndexRequest
	GetManagerAccountPassword() *string
	SetMetrics(v string) *CreateVectorIndexRequest
	GetMetrics() *string
	SetNamespace(v string) *CreateVectorIndexRequest
	GetNamespace() *string
	SetOwnerId(v int64) *CreateVectorIndexRequest
	GetOwnerId() *int64
	SetPqEnable(v int32) *CreateVectorIndexRequest
	GetPqEnable() *int32
	SetRegionId(v string) *CreateVectorIndexRequest
	GetRegionId() *string
	SetType(v string) *CreateVectorIndexRequest
	GetType() *string
}

type CreateVectorIndexRequest struct {
	// Collection name.
	//
	// > You can use the [ListCollections](https://help.aliyun.com/document_detail/2401503.html) API to view the list.
	//
	// This parameter is required.
	//
	// example:
	//
	// document
	Collection *string `json:"Collection,omitempty" xml:"Collection,omitempty"`
	// Instance ID.
	//
	// > You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) API to view details of all AnalyticDB PostgreSQL instances in the target region, including the instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// Vector dimension.
	//
	// > This value must be consistent with the length of the vector data (Rows. Vector) uploaded via the [UpsertCollectionData](https://help.aliyun.com/document_detail/2401493.html) API.
	//
	// example:
	//
	// 1024
	Dimension *int32 `json:"Dimension,omitempty" xml:"Dimension,omitempty"`
	// Whether to use mmap to build the HNSW index, default is 0. If the data does not need to be deleted and there are performance requirements for uploading data, it is recommended to set this to 1.
	//
	// >
	//
	// > - When set to 0, the segment-page storage mode is used to build the index, which can use the shared_buffer in PostgreSQL for caching and supports deletion and update operations.
	//
	// > - When set to 1, the index is built using mmap, which does not support deletion and update operations.
	//
	// example:
	//
	// 0
	ExternalStorage    *int32 `json:"ExternalStorage,omitempty" xml:"ExternalStorage,omitempty"`
	HnswEfConstruction *int32 `json:"HnswEfConstruction,omitempty" xml:"HnswEfConstruction,omitempty"`
	// The maximum number of neighbors in the HNSW algorithm, ranging from 1 to 1000. The API will automatically set this value based on the vector dimension, and it generally does not need to be manually set.
	//
	// > It is suggested to set this based on the vector dimension as follows:
	//
	// > - Less than or equal to 384: 16
	//
	// > - Greater than 384 and less than or equal to 768: 32
	//
	// > - Greater than 768 and less than or equal to 1024: 64
	//
	// > - Greater than 1024: 128
	//
	// example:
	//
	// 64
	HnswM *int32 `json:"HnswM,omitempty" xml:"HnswM,omitempty"`
	// Name of the management account with rds_superuser permissions.
	//
	// > You can create an account through the console -> Account Management, or by using the [CreateAccount](https://help.aliyun.com/document_detail/2361789.html) API.
	//
	// This parameter is required.
	//
	// example:
	//
	// testaccount
	ManagerAccount *string `json:"ManagerAccount,omitempty" xml:"ManagerAccount,omitempty"`
	// Management account password.
	//
	// This parameter is required.
	//
	// example:
	//
	// testpassword
	ManagerAccountPassword *string `json:"ManagerAccountPassword,omitempty" xml:"ManagerAccountPassword,omitempty"`
	// Method used for building the vector index. Value description:
	//
	// - l2: Euclidean distance.
	//
	// - ip: Inner product (dot product) distance.
	//
	// - cosine: Cosine similarity.
	//
	// example:
	//
	// cosine
	Metrics *string `json:"Metrics,omitempty" xml:"Metrics,omitempty"`
	// Namespace, default is public.
	//
	// > You can use the [ListNamespaces](https://help.aliyun.com/document_detail/2401502.html) API to view the list.
	//
	// example:
	//
	// mynamespace
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	OwnerId   *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// Whether to enable PQ (Product Quantization) algorithm acceleration for the index. It is recommended to enable this when the data volume exceeds 500,000. Value description:
	//
	// - 0: Disabled.
	//
	// - 1: Enabled (default).
	//
	// example:
	//
	// 1
	PqEnable *int32 `json:"PqEnable,omitempty" xml:"PqEnable,omitempty"`
	// Region ID where the instance is located.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Type     *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s CreateVectorIndexRequest) String() string {
	return dara.Prettify(s)
}

func (s CreateVectorIndexRequest) GoString() string {
	return s.String()
}

func (s *CreateVectorIndexRequest) GetCollection() *string {
	return s.Collection
}

func (s *CreateVectorIndexRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *CreateVectorIndexRequest) GetDimension() *int32 {
	return s.Dimension
}

func (s *CreateVectorIndexRequest) GetExternalStorage() *int32 {
	return s.ExternalStorage
}

func (s *CreateVectorIndexRequest) GetHnswEfConstruction() *int32 {
	return s.HnswEfConstruction
}

func (s *CreateVectorIndexRequest) GetHnswM() *int32 {
	return s.HnswM
}

func (s *CreateVectorIndexRequest) GetManagerAccount() *string {
	return s.ManagerAccount
}

func (s *CreateVectorIndexRequest) GetManagerAccountPassword() *string {
	return s.ManagerAccountPassword
}

func (s *CreateVectorIndexRequest) GetMetrics() *string {
	return s.Metrics
}

func (s *CreateVectorIndexRequest) GetNamespace() *string {
	return s.Namespace
}

func (s *CreateVectorIndexRequest) GetOwnerId() *int64 {
	return s.OwnerId
}

func (s *CreateVectorIndexRequest) GetPqEnable() *int32 {
	return s.PqEnable
}

func (s *CreateVectorIndexRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *CreateVectorIndexRequest) GetType() *string {
	return s.Type
}

func (s *CreateVectorIndexRequest) SetCollection(v string) *CreateVectorIndexRequest {
	s.Collection = &v
	return s
}

func (s *CreateVectorIndexRequest) SetDBInstanceId(v string) *CreateVectorIndexRequest {
	s.DBInstanceId = &v
	return s
}

func (s *CreateVectorIndexRequest) SetDimension(v int32) *CreateVectorIndexRequest {
	s.Dimension = &v
	return s
}

func (s *CreateVectorIndexRequest) SetExternalStorage(v int32) *CreateVectorIndexRequest {
	s.ExternalStorage = &v
	return s
}

func (s *CreateVectorIndexRequest) SetHnswEfConstruction(v int32) *CreateVectorIndexRequest {
	s.HnswEfConstruction = &v
	return s
}

func (s *CreateVectorIndexRequest) SetHnswM(v int32) *CreateVectorIndexRequest {
	s.HnswM = &v
	return s
}

func (s *CreateVectorIndexRequest) SetManagerAccount(v string) *CreateVectorIndexRequest {
	s.ManagerAccount = &v
	return s
}

func (s *CreateVectorIndexRequest) SetManagerAccountPassword(v string) *CreateVectorIndexRequest {
	s.ManagerAccountPassword = &v
	return s
}

func (s *CreateVectorIndexRequest) SetMetrics(v string) *CreateVectorIndexRequest {
	s.Metrics = &v
	return s
}

func (s *CreateVectorIndexRequest) SetNamespace(v string) *CreateVectorIndexRequest {
	s.Namespace = &v
	return s
}

func (s *CreateVectorIndexRequest) SetOwnerId(v int64) *CreateVectorIndexRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateVectorIndexRequest) SetPqEnable(v int32) *CreateVectorIndexRequest {
	s.PqEnable = &v
	return s
}

func (s *CreateVectorIndexRequest) SetRegionId(v string) *CreateVectorIndexRequest {
	s.RegionId = &v
	return s
}

func (s *CreateVectorIndexRequest) SetType(v string) *CreateVectorIndexRequest {
	s.Type = &v
	return s
}

func (s *CreateVectorIndexRequest) Validate() error {
	return dara.Validate(s)
}

type iCreateVectorIndexResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetMessage(v string) *CreateVectorIndexResponseBody
	GetMessage() *string
	SetRequestId(v string) *CreateVectorIndexResponseBody
	GetRequestId() *string
	SetStatus(v string) *CreateVectorIndexResponseBody
	GetStatus() *string
}

type CreateVectorIndexResponseBody struct {
	// Detailed information returned by the API.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// API execution status. Value description:
	//
	// - **success**: Execution succeeded.
	//
	// - **fail**: Execution failed.
	//
	// example:
	//
	// success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s CreateVectorIndexResponseBody) String() string {
	return dara.Prettify(s)
}

func (s CreateVectorIndexResponseBody) GoString() string {
	return s.String()
}

func (s *CreateVectorIndexResponseBody) GetMessage() *string {
	return s.Message
}

func (s *CreateVectorIndexResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *CreateVectorIndexResponseBody) GetStatus() *string {
	return s.Status
}

func (s *CreateVectorIndexResponseBody) SetMessage(v string) *CreateVectorIndexResponseBody {
	s.Message = &v
	return s
}

func (s *CreateVectorIndexResponseBody) SetRequestId(v string) *CreateVectorIndexResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateVectorIndexResponseBody) SetStatus(v string) *CreateVectorIndexResponseBody {
	s.Status = &v
	return s
}

func (s *CreateVectorIndexResponseBody) Validate() error {
	return dara.Validate(s)
}

type iCreateVectorIndexResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *CreateVectorIndexResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *CreateVectorIndexResponse
	GetStatusCode() *int32
	SetBody(v *CreateVectorIndexResponseBody) *CreateVectorIndexResponse
	GetBody() *CreateVectorIndexResponseBody
}

type CreateVectorIndexResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateVectorIndexResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateVectorIndexResponse) String() string {
	return dara.Prettify(s)
}

func (s CreateVectorIndexResponse) GoString() string {
	return s.String()
}

func (s *CreateVectorIndexResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *CreateVectorIndexResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *CreateVectorIndexResponse) GetBody() *CreateVectorIndexResponseBody {
	return s.Body
}

func (s *CreateVectorIndexResponse) SetHeaders(v map[string]*string) *CreateVectorIndexResponse {
	s.Headers = v
	return s
}

func (s *CreateVectorIndexResponse) SetStatusCode(v int32) *CreateVectorIndexResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateVectorIndexResponse) SetBody(v *CreateVectorIndexResponseBody) *CreateVectorIndexResponse {
	s.Body = v
	return s
}

func (s *CreateVectorIndexResponse) Validate() error {
	return dara.Validate(s)
}

type iDeleteAccountRequest interface {
	dara.Model
	String() string
	GoString() string
	SetAccountName(v string) *DeleteAccountRequest
	GetAccountName() *string
	SetDBInstanceId(v string) *DeleteAccountRequest
	GetDBInstanceId() *string
}

type DeleteAccountRequest struct {
	// The name of the database account. The privileged account cannot be deleted.
	//
	// This parameter is required.
	//
	// example:
	//
	// testuser
	AccountName *string `json:"AccountName,omitempty" xml:"AccountName,omitempty"`
	// The instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp***************
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
}

func (s DeleteAccountRequest) String() string {
	return dara.Prettify(s)
}

func (s DeleteAccountRequest) GoString() string {
	return s.String()
}

func (s *DeleteAccountRequest) GetAccountName() *string {
	return s.AccountName
}

func (s *DeleteAccountRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *DeleteAccountRequest) SetAccountName(v string) *DeleteAccountRequest {
	s.AccountName = &v
	return s
}

func (s *DeleteAccountRequest) SetDBInstanceId(v string) *DeleteAccountRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DeleteAccountRequest) Validate() error {
	return dara.Validate(s)
}

type iDeleteAccountResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetRequestId(v string) *DeleteAccountResponseBody
	GetRequestId() *string
}

type DeleteAccountResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 7565770E-7C45-462D-BA4A-8A5396****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteAccountResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DeleteAccountResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteAccountResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DeleteAccountResponseBody) SetRequestId(v string) *DeleteAccountResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteAccountResponseBody) Validate() error {
	return dara.Validate(s)
}

type iDeleteAccountResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DeleteAccountResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DeleteAccountResponse
	GetStatusCode() *int32
	SetBody(v *DeleteAccountResponseBody) *DeleteAccountResponse
	GetBody() *DeleteAccountResponseBody
}

type DeleteAccountResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteAccountResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteAccountResponse) String() string {
	return dara.Prettify(s)
}

func (s DeleteAccountResponse) GoString() string {
	return s.String()
}

func (s *DeleteAccountResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DeleteAccountResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DeleteAccountResponse) GetBody() *DeleteAccountResponseBody {
	return s.Body
}

func (s *DeleteAccountResponse) SetHeaders(v map[string]*string) *DeleteAccountResponse {
	s.Headers = v
	return s
}

func (s *DeleteAccountResponse) SetStatusCode(v int32) *DeleteAccountResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteAccountResponse) SetBody(v *DeleteAccountResponseBody) *DeleteAccountResponse {
	s.Body = v
	return s
}

func (s *DeleteAccountResponse) Validate() error {
	return dara.Validate(s)
}

type iDeleteBackupRequest interface {
	dara.Model
	String() string
	GoString() string
	SetBackupId(v string) *DeleteBackupRequest
	GetBackupId() *string
	SetDBInstanceId(v string) *DeleteBackupRequest
	GetDBInstanceId() *string
}

type DeleteBackupRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 1111111111
	BackupId *string `json:"BackupId,omitempty" xml:"BackupId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
}

func (s DeleteBackupRequest) String() string {
	return dara.Prettify(s)
}

func (s DeleteBackupRequest) GoString() string {
	return s.String()
}

func (s *DeleteBackupRequest) GetBackupId() *string {
	return s.BackupId
}

func (s *DeleteBackupRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *DeleteBackupRequest) SetBackupId(v string) *DeleteBackupRequest {
	s.BackupId = &v
	return s
}

func (s *DeleteBackupRequest) SetDBInstanceId(v string) *DeleteBackupRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DeleteBackupRequest) Validate() error {
	return dara.Validate(s)
}

type iDeleteBackupResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetRequestId(v string) *DeleteBackupResponseBody
	GetRequestId() *string
}

type DeleteBackupResponseBody struct {
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteBackupResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DeleteBackupResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteBackupResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DeleteBackupResponseBody) SetRequestId(v string) *DeleteBackupResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteBackupResponseBody) Validate() error {
	return dara.Validate(s)
}

type iDeleteBackupResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DeleteBackupResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DeleteBackupResponse
	GetStatusCode() *int32
	SetBody(v *DeleteBackupResponseBody) *DeleteBackupResponse
	GetBody() *DeleteBackupResponseBody
}

type DeleteBackupResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteBackupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteBackupResponse) String() string {
	return dara.Prettify(s)
}

func (s DeleteBackupResponse) GoString() string {
	return s.String()
}

func (s *DeleteBackupResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DeleteBackupResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DeleteBackupResponse) GetBody() *DeleteBackupResponseBody {
	return s.Body
}

func (s *DeleteBackupResponse) SetHeaders(v map[string]*string) *DeleteBackupResponse {
	s.Headers = v
	return s
}

func (s *DeleteBackupResponse) SetStatusCode(v int32) *DeleteBackupResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteBackupResponse) SetBody(v *DeleteBackupResponseBody) *DeleteBackupResponse {
	s.Body = v
	return s
}

func (s *DeleteBackupResponse) Validate() error {
	return dara.Validate(s)
}

type iDeleteCollectionRequest interface {
	dara.Model
	String() string
	GoString() string
	SetCollection(v string) *DeleteCollectionRequest
	GetCollection() *string
	SetDBInstanceId(v string) *DeleteCollectionRequest
	GetDBInstanceId() *string
	SetNamespace(v string) *DeleteCollectionRequest
	GetNamespace() *string
	SetNamespacePassword(v string) *DeleteCollectionRequest
	GetNamespacePassword() *string
	SetOwnerId(v int64) *DeleteCollectionRequest
	GetOwnerId() *int64
	SetRegionId(v string) *DeleteCollectionRequest
	GetRegionId() *string
	SetWorkspaceId(v string) *DeleteCollectionRequest
	GetWorkspaceId() *string
}

type DeleteCollectionRequest struct {
	// The name of the collection.
	//
	// This parameter is required.
	//
	// example:
	//
	// document
	Collection *string `json:"Collection,omitempty" xml:"Collection,omitempty"`
	// The instance ID.
	//
	// > You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The name of the namespace.
	//
	// >  You can call the [ListNamespaces](https://help.aliyun.com/document_detail/2401502.html) operation to query a list of namespaces.
	//
	// example:
	//
	// mynamespace
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// The password of the namespace.
	//
	// This parameter is required.
	//
	// example:
	//
	// testpassword
	NamespacePassword *string `json:"NamespacePassword,omitempty" xml:"NamespacePassword,omitempty"`
	OwnerId           *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The region ID of the instance.
	//
	// >  You can call the [DescribeRegions](https://help.aliyun.com/document_detail/86912.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the workspace that consists of multiple AnalyticDB for PostgreSQL instances. You must specify one of the WorkspaceId and DBInstanceId parameters. If you specify both parameters, the WorkspaceId parameter takes effect.
	//
	// example:
	//
	// gp-ws-*****
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s DeleteCollectionRequest) String() string {
	return dara.Prettify(s)
}

func (s DeleteCollectionRequest) GoString() string {
	return s.String()
}

func (s *DeleteCollectionRequest) GetCollection() *string {
	return s.Collection
}

func (s *DeleteCollectionRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *DeleteCollectionRequest) GetNamespace() *string {
	return s.Namespace
}

func (s *DeleteCollectionRequest) GetNamespacePassword() *string {
	return s.NamespacePassword
}

func (s *DeleteCollectionRequest) GetOwnerId() *int64 {
	return s.OwnerId
}

func (s *DeleteCollectionRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *DeleteCollectionRequest) GetWorkspaceId() *string {
	return s.WorkspaceId
}

func (s *DeleteCollectionRequest) SetCollection(v string) *DeleteCollectionRequest {
	s.Collection = &v
	return s
}

func (s *DeleteCollectionRequest) SetDBInstanceId(v string) *DeleteCollectionRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DeleteCollectionRequest) SetNamespace(v string) *DeleteCollectionRequest {
	s.Namespace = &v
	return s
}

func (s *DeleteCollectionRequest) SetNamespacePassword(v string) *DeleteCollectionRequest {
	s.NamespacePassword = &v
	return s
}

func (s *DeleteCollectionRequest) SetOwnerId(v int64) *DeleteCollectionRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteCollectionRequest) SetRegionId(v string) *DeleteCollectionRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteCollectionRequest) SetWorkspaceId(v string) *DeleteCollectionRequest {
	s.WorkspaceId = &v
	return s
}

func (s *DeleteCollectionRequest) Validate() error {
	return dara.Validate(s)
}

type iDeleteCollectionResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetMessage(v string) *DeleteCollectionResponseBody
	GetMessage() *string
	SetRequestId(v string) *DeleteCollectionResponseBody
	GetRequestId() *string
	SetStatus(v string) *DeleteCollectionResponseBody
	GetStatus() *string
}

type DeleteCollectionResponseBody struct {
	// The returned message.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **success**
	//
	// 	- **fail**
	//
	// example:
	//
	// success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DeleteCollectionResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DeleteCollectionResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteCollectionResponseBody) GetMessage() *string {
	return s.Message
}

func (s *DeleteCollectionResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DeleteCollectionResponseBody) GetStatus() *string {
	return s.Status
}

func (s *DeleteCollectionResponseBody) SetMessage(v string) *DeleteCollectionResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteCollectionResponseBody) SetRequestId(v string) *DeleteCollectionResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteCollectionResponseBody) SetStatus(v string) *DeleteCollectionResponseBody {
	s.Status = &v
	return s
}

func (s *DeleteCollectionResponseBody) Validate() error {
	return dara.Validate(s)
}

type iDeleteCollectionResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DeleteCollectionResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DeleteCollectionResponse
	GetStatusCode() *int32
	SetBody(v *DeleteCollectionResponseBody) *DeleteCollectionResponse
	GetBody() *DeleteCollectionResponseBody
}

type DeleteCollectionResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteCollectionResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteCollectionResponse) String() string {
	return dara.Prettify(s)
}

func (s DeleteCollectionResponse) GoString() string {
	return s.String()
}

func (s *DeleteCollectionResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DeleteCollectionResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DeleteCollectionResponse) GetBody() *DeleteCollectionResponseBody {
	return s.Body
}

func (s *DeleteCollectionResponse) SetHeaders(v map[string]*string) *DeleteCollectionResponse {
	s.Headers = v
	return s
}

func (s *DeleteCollectionResponse) SetStatusCode(v int32) *DeleteCollectionResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteCollectionResponse) SetBody(v *DeleteCollectionResponseBody) *DeleteCollectionResponse {
	s.Body = v
	return s
}

func (s *DeleteCollectionResponse) Validate() error {
	return dara.Validate(s)
}

type iDeleteCollectionDataRequest interface {
	dara.Model
	String() string
	GoString() string
	SetCollection(v string) *DeleteCollectionDataRequest
	GetCollection() *string
	SetCollectionData(v string) *DeleteCollectionDataRequest
	GetCollectionData() *string
	SetCollectionDataFilter(v string) *DeleteCollectionDataRequest
	GetCollectionDataFilter() *string
	SetDBInstanceId(v string) *DeleteCollectionDataRequest
	GetDBInstanceId() *string
	SetNamespace(v string) *DeleteCollectionDataRequest
	GetNamespace() *string
	SetNamespacePassword(v string) *DeleteCollectionDataRequest
	GetNamespacePassword() *string
	SetOwnerId(v int64) *DeleteCollectionDataRequest
	GetOwnerId() *int64
	SetRegionId(v string) *DeleteCollectionDataRequest
	GetRegionId() *string
	SetWorkspaceId(v string) *DeleteCollectionDataRequest
	GetWorkspaceId() *string
}

type DeleteCollectionDataRequest struct {
	// The name of the collection.
	//
	// This parameter is required.
	//
	// example:
	//
	// document
	Collection *string `json:"Collection,omitempty" xml:"Collection,omitempty"`
	// The data that you want to delete.
	//
	// example:
	//
	// {"title":["a","b"]}
	CollectionData *string `json:"CollectionData,omitempty" xml:"CollectionData,omitempty"`
	// The filter conditions for the data to be deleted.
	//
	// example:
	//
	// a < 10
	CollectionDataFilter *string `json:"CollectionDataFilter,omitempty" xml:"CollectionDataFilter,omitempty"`
	// The instance ID.
	//
	// > You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the IDs of all AnalyticDB for PostgreSQL instances within a region.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The name of the namespace. Default value: public.
	//
	// >  You can call the [ListNamespaces](https://help.aliyun.com/document_detail/2401502.html) operation to query a list of namespaces.
	//
	// example:
	//
	// mynamespace
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// The password of the namespace.
	//
	// This parameter is required.
	//
	// example:
	//
	// testpassword
	NamespacePassword *string `json:"NamespacePassword,omitempty" xml:"NamespacePassword,omitempty"`
	OwnerId           *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The region ID of the instance.
	//
	// >  You can call the [DescribeRegions](https://help.aliyun.com/document_detail/86912.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the workspace that consists of multiple AnalyticDB for PostgreSQL instances. You must specify one of the WorkspaceId and DBInstanceId parameters. If you specify both parameters, the WorkspaceId parameter takes effect.
	//
	// example:
	//
	// gp-ws-*****
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s DeleteCollectionDataRequest) String() string {
	return dara.Prettify(s)
}

func (s DeleteCollectionDataRequest) GoString() string {
	return s.String()
}

func (s *DeleteCollectionDataRequest) GetCollection() *string {
	return s.Collection
}

func (s *DeleteCollectionDataRequest) GetCollectionData() *string {
	return s.CollectionData
}

func (s *DeleteCollectionDataRequest) GetCollectionDataFilter() *string {
	return s.CollectionDataFilter
}

func (s *DeleteCollectionDataRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *DeleteCollectionDataRequest) GetNamespace() *string {
	return s.Namespace
}

func (s *DeleteCollectionDataRequest) GetNamespacePassword() *string {
	return s.NamespacePassword
}

func (s *DeleteCollectionDataRequest) GetOwnerId() *int64 {
	return s.OwnerId
}

func (s *DeleteCollectionDataRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *DeleteCollectionDataRequest) GetWorkspaceId() *string {
	return s.WorkspaceId
}

func (s *DeleteCollectionDataRequest) SetCollection(v string) *DeleteCollectionDataRequest {
	s.Collection = &v
	return s
}

func (s *DeleteCollectionDataRequest) SetCollectionData(v string) *DeleteCollectionDataRequest {
	s.CollectionData = &v
	return s
}

func (s *DeleteCollectionDataRequest) SetCollectionDataFilter(v string) *DeleteCollectionDataRequest {
	s.CollectionDataFilter = &v
	return s
}

func (s *DeleteCollectionDataRequest) SetDBInstanceId(v string) *DeleteCollectionDataRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DeleteCollectionDataRequest) SetNamespace(v string) *DeleteCollectionDataRequest {
	s.Namespace = &v
	return s
}

func (s *DeleteCollectionDataRequest) SetNamespacePassword(v string) *DeleteCollectionDataRequest {
	s.NamespacePassword = &v
	return s
}

func (s *DeleteCollectionDataRequest) SetOwnerId(v int64) *DeleteCollectionDataRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteCollectionDataRequest) SetRegionId(v string) *DeleteCollectionDataRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteCollectionDataRequest) SetWorkspaceId(v string) *DeleteCollectionDataRequest {
	s.WorkspaceId = &v
	return s
}

func (s *DeleteCollectionDataRequest) Validate() error {
	return dara.Validate(s)
}

type iDeleteCollectionDataResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetAppliedRows(v int64) *DeleteCollectionDataResponseBody
	GetAppliedRows() *int64
	SetMessage(v string) *DeleteCollectionDataResponseBody
	GetMessage() *string
	SetRequestId(v string) *DeleteCollectionDataResponseBody
	GetRequestId() *string
	SetStatus(v string) *DeleteCollectionDataResponseBody
	GetStatus() *string
}

type DeleteCollectionDataResponseBody struct {
	// The number of rows that are affected by the request.
	//
	// example:
	//
	// 10
	AppliedRows *int64 `json:"AppliedRows,omitempty" xml:"AppliedRows,omitempty"`
	// The returned message.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **success**
	//
	// 	- **fail**
	//
	// example:
	//
	// success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DeleteCollectionDataResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DeleteCollectionDataResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteCollectionDataResponseBody) GetAppliedRows() *int64 {
	return s.AppliedRows
}

func (s *DeleteCollectionDataResponseBody) GetMessage() *string {
	return s.Message
}

func (s *DeleteCollectionDataResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DeleteCollectionDataResponseBody) GetStatus() *string {
	return s.Status
}

func (s *DeleteCollectionDataResponseBody) SetAppliedRows(v int64) *DeleteCollectionDataResponseBody {
	s.AppliedRows = &v
	return s
}

func (s *DeleteCollectionDataResponseBody) SetMessage(v string) *DeleteCollectionDataResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteCollectionDataResponseBody) SetRequestId(v string) *DeleteCollectionDataResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteCollectionDataResponseBody) SetStatus(v string) *DeleteCollectionDataResponseBody {
	s.Status = &v
	return s
}

func (s *DeleteCollectionDataResponseBody) Validate() error {
	return dara.Validate(s)
}

type iDeleteCollectionDataResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DeleteCollectionDataResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DeleteCollectionDataResponse
	GetStatusCode() *int32
	SetBody(v *DeleteCollectionDataResponseBody) *DeleteCollectionDataResponse
	GetBody() *DeleteCollectionDataResponseBody
}

type DeleteCollectionDataResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteCollectionDataResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteCollectionDataResponse) String() string {
	return dara.Prettify(s)
}

func (s DeleteCollectionDataResponse) GoString() string {
	return s.String()
}

func (s *DeleteCollectionDataResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DeleteCollectionDataResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DeleteCollectionDataResponse) GetBody() *DeleteCollectionDataResponseBody {
	return s.Body
}

func (s *DeleteCollectionDataResponse) SetHeaders(v map[string]*string) *DeleteCollectionDataResponse {
	s.Headers = v
	return s
}

func (s *DeleteCollectionDataResponse) SetStatusCode(v int32) *DeleteCollectionDataResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteCollectionDataResponse) SetBody(v *DeleteCollectionDataResponseBody) *DeleteCollectionDataResponse {
	s.Body = v
	return s
}

func (s *DeleteCollectionDataResponse) Validate() error {
	return dara.Validate(s)
}

type iDeleteDBInstanceRequest interface {
	dara.Model
	String() string
	GoString() string
	SetClientToken(v string) *DeleteDBInstanceRequest
	GetClientToken() *string
	SetDBInstanceId(v string) *DeleteDBInstanceRequest
	GetDBInstanceId() *string
	SetOwnerId(v int64) *DeleteDBInstanceRequest
	GetOwnerId() *int64
	SetResourceGroupId(v string) *DeleteDBInstanceRequest
	GetResourceGroupId() *string
}

type DeleteDBInstanceRequest struct {
	// The client token that is used to ensure the idempotence of the request. For more information, see [How to ensure idempotence](https://help.aliyun.com/document_detail/327176.html).
	//
	// example:
	//
	// 0c593ea1-3bea-11e9-b96b-88**********
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// The ID of the instance.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the details of all AnalyticDB for PostgreSQL instances in a specific region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp***************
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// This parameter is no longer used.
	//
	// example:
	//
	// rg-bp67acfmxazb4p****
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
}

func (s DeleteDBInstanceRequest) String() string {
	return dara.Prettify(s)
}

func (s DeleteDBInstanceRequest) GoString() string {
	return s.String()
}

func (s *DeleteDBInstanceRequest) GetClientToken() *string {
	return s.ClientToken
}

func (s *DeleteDBInstanceRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *DeleteDBInstanceRequest) GetOwnerId() *int64 {
	return s.OwnerId
}

func (s *DeleteDBInstanceRequest) GetResourceGroupId() *string {
	return s.ResourceGroupId
}

func (s *DeleteDBInstanceRequest) SetClientToken(v string) *DeleteDBInstanceRequest {
	s.ClientToken = &v
	return s
}

func (s *DeleteDBInstanceRequest) SetDBInstanceId(v string) *DeleteDBInstanceRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DeleteDBInstanceRequest) SetOwnerId(v int64) *DeleteDBInstanceRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteDBInstanceRequest) SetResourceGroupId(v string) *DeleteDBInstanceRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *DeleteDBInstanceRequest) Validate() error {
	return dara.Validate(s)
}

type iDeleteDBInstanceResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetRequestId(v string) *DeleteDBInstanceResponseBody
	GetRequestId() *string
}

type DeleteDBInstanceResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// 65BDA532-28AF-4122-AA39-B3**********
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteDBInstanceResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DeleteDBInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteDBInstanceResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DeleteDBInstanceResponseBody) SetRequestId(v string) *DeleteDBInstanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteDBInstanceResponseBody) Validate() error {
	return dara.Validate(s)
}

type iDeleteDBInstanceResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DeleteDBInstanceResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DeleteDBInstanceResponse
	GetStatusCode() *int32
	SetBody(v *DeleteDBInstanceResponseBody) *DeleteDBInstanceResponse
	GetBody() *DeleteDBInstanceResponseBody
}

type DeleteDBInstanceResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteDBInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteDBInstanceResponse) String() string {
	return dara.Prettify(s)
}

func (s DeleteDBInstanceResponse) GoString() string {
	return s.String()
}

func (s *DeleteDBInstanceResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DeleteDBInstanceResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DeleteDBInstanceResponse) GetBody() *DeleteDBInstanceResponseBody {
	return s.Body
}

func (s *DeleteDBInstanceResponse) SetHeaders(v map[string]*string) *DeleteDBInstanceResponse {
	s.Headers = v
	return s
}

func (s *DeleteDBInstanceResponse) SetStatusCode(v int32) *DeleteDBInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteDBInstanceResponse) SetBody(v *DeleteDBInstanceResponseBody) *DeleteDBInstanceResponse {
	s.Body = v
	return s
}

func (s *DeleteDBInstanceResponse) Validate() error {
	return dara.Validate(s)
}

type iDeleteDBInstancePlanRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *DeleteDBInstancePlanRequest
	GetDBInstanceId() *string
	SetOwnerId(v int64) *DeleteDBInstancePlanRequest
	GetOwnerId() *int64
	SetPlanId(v string) *DeleteDBInstancePlanRequest
	GetPlanId() *string
}

type DeleteDBInstancePlanRequest struct {
	// The ID of the instance.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the details of all AnalyticDB for PostgreSQL instances in a specific region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The ID of the plan.
	//
	// >  You can call the [DescribeDBInstancePlans](https://help.aliyun.com/document_detail/449398.html) operation to query the details of plans, including plan IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1234
	PlanId *string `json:"PlanId,omitempty" xml:"PlanId,omitempty"`
}

func (s DeleteDBInstancePlanRequest) String() string {
	return dara.Prettify(s)
}

func (s DeleteDBInstancePlanRequest) GoString() string {
	return s.String()
}

func (s *DeleteDBInstancePlanRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *DeleteDBInstancePlanRequest) GetOwnerId() *int64 {
	return s.OwnerId
}

func (s *DeleteDBInstancePlanRequest) GetPlanId() *string {
	return s.PlanId
}

func (s *DeleteDBInstancePlanRequest) SetDBInstanceId(v string) *DeleteDBInstancePlanRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DeleteDBInstancePlanRequest) SetOwnerId(v int64) *DeleteDBInstancePlanRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteDBInstancePlanRequest) SetPlanId(v string) *DeleteDBInstancePlanRequest {
	s.PlanId = &v
	return s
}

func (s *DeleteDBInstancePlanRequest) Validate() error {
	return dara.Validate(s)
}

type iDeleteDBInstancePlanResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *DeleteDBInstancePlanResponseBody
	GetDBInstanceId() *string
	SetErrorMessage(v string) *DeleteDBInstancePlanResponseBody
	GetErrorMessage() *string
	SetPlanId(v string) *DeleteDBInstancePlanResponseBody
	GetPlanId() *string
	SetRequestId(v string) *DeleteDBInstancePlanResponseBody
	GetRequestId() *string
	SetStatus(v string) *DeleteDBInstancePlanResponseBody
	GetStatus() *string
}

type DeleteDBInstancePlanResponseBody struct {
	// The ID of the instance.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The error message returned.
	//
	// This parameter is returned only when the operation fails.
	//
	// example:
	//
	// ****
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// The ID of the plan.
	//
	// example:
	//
	// 1234
	PlanId *string `json:"PlanId,omitempty" xml:"PlanId,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 34b32a0a-08ef-4a87-b6be-cdd988888888
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The state of the operation.
	//
	// If the operation is successful, **success*	- is returned. If the operation fails, this parameter is not returned.
	//
	// example:
	//
	// success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DeleteDBInstancePlanResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DeleteDBInstancePlanResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteDBInstancePlanResponseBody) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *DeleteDBInstancePlanResponseBody) GetErrorMessage() *string {
	return s.ErrorMessage
}

func (s *DeleteDBInstancePlanResponseBody) GetPlanId() *string {
	return s.PlanId
}

func (s *DeleteDBInstancePlanResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DeleteDBInstancePlanResponseBody) GetStatus() *string {
	return s.Status
}

func (s *DeleteDBInstancePlanResponseBody) SetDBInstanceId(v string) *DeleteDBInstancePlanResponseBody {
	s.DBInstanceId = &v
	return s
}

func (s *DeleteDBInstancePlanResponseBody) SetErrorMessage(v string) *DeleteDBInstancePlanResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *DeleteDBInstancePlanResponseBody) SetPlanId(v string) *DeleteDBInstancePlanResponseBody {
	s.PlanId = &v
	return s
}

func (s *DeleteDBInstancePlanResponseBody) SetRequestId(v string) *DeleteDBInstancePlanResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteDBInstancePlanResponseBody) SetStatus(v string) *DeleteDBInstancePlanResponseBody {
	s.Status = &v
	return s
}

func (s *DeleteDBInstancePlanResponseBody) Validate() error {
	return dara.Validate(s)
}

type iDeleteDBInstancePlanResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DeleteDBInstancePlanResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DeleteDBInstancePlanResponse
	GetStatusCode() *int32
	SetBody(v *DeleteDBInstancePlanResponseBody) *DeleteDBInstancePlanResponse
	GetBody() *DeleteDBInstancePlanResponseBody
}

type DeleteDBInstancePlanResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteDBInstancePlanResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteDBInstancePlanResponse) String() string {
	return dara.Prettify(s)
}

func (s DeleteDBInstancePlanResponse) GoString() string {
	return s.String()
}

func (s *DeleteDBInstancePlanResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DeleteDBInstancePlanResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DeleteDBInstancePlanResponse) GetBody() *DeleteDBInstancePlanResponseBody {
	return s.Body
}

func (s *DeleteDBInstancePlanResponse) SetHeaders(v map[string]*string) *DeleteDBInstancePlanResponse {
	s.Headers = v
	return s
}

func (s *DeleteDBInstancePlanResponse) SetStatusCode(v int32) *DeleteDBInstancePlanResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteDBInstancePlanResponse) SetBody(v *DeleteDBInstancePlanResponseBody) *DeleteDBInstancePlanResponse {
	s.Body = v
	return s
}

func (s *DeleteDBInstancePlanResponse) Validate() error {
	return dara.Validate(s)
}

type iDeleteDBResourceGroupRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *DeleteDBResourceGroupRequest
	GetDBInstanceId() *string
	SetOwnerId(v int64) *DeleteDBResourceGroupRequest
	GetOwnerId() *int64
	SetResourceGroupName(v string) *DeleteDBResourceGroupRequest
	GetResourceGroupName() *string
}

type DeleteDBResourceGroupRequest struct {
	// The instance ID.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/196830.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The name of the resource group.
	//
	// This parameter is required.
	//
	// example:
	//
	// testgroup
	ResourceGroupName *string `json:"ResourceGroupName,omitempty" xml:"ResourceGroupName,omitempty"`
}

func (s DeleteDBResourceGroupRequest) String() string {
	return dara.Prettify(s)
}

func (s DeleteDBResourceGroupRequest) GoString() string {
	return s.String()
}

func (s *DeleteDBResourceGroupRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *DeleteDBResourceGroupRequest) GetOwnerId() *int64 {
	return s.OwnerId
}

func (s *DeleteDBResourceGroupRequest) GetResourceGroupName() *string {
	return s.ResourceGroupName
}

func (s *DeleteDBResourceGroupRequest) SetDBInstanceId(v string) *DeleteDBResourceGroupRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DeleteDBResourceGroupRequest) SetOwnerId(v int64) *DeleteDBResourceGroupRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteDBResourceGroupRequest) SetResourceGroupName(v string) *DeleteDBResourceGroupRequest {
	s.ResourceGroupName = &v
	return s
}

func (s *DeleteDBResourceGroupRequest) Validate() error {
	return dara.Validate(s)
}

type iDeleteDBResourceGroupResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetRequestId(v string) *DeleteDBResourceGroupResponseBody
	GetRequestId() *string
}

type DeleteDBResourceGroupResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteDBResourceGroupResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DeleteDBResourceGroupResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteDBResourceGroupResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DeleteDBResourceGroupResponseBody) SetRequestId(v string) *DeleteDBResourceGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteDBResourceGroupResponseBody) Validate() error {
	return dara.Validate(s)
}

type iDeleteDBResourceGroupResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DeleteDBResourceGroupResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DeleteDBResourceGroupResponse
	GetStatusCode() *int32
	SetBody(v *DeleteDBResourceGroupResponseBody) *DeleteDBResourceGroupResponse
	GetBody() *DeleteDBResourceGroupResponseBody
}

type DeleteDBResourceGroupResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteDBResourceGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteDBResourceGroupResponse) String() string {
	return dara.Prettify(s)
}

func (s DeleteDBResourceGroupResponse) GoString() string {
	return s.String()
}

func (s *DeleteDBResourceGroupResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DeleteDBResourceGroupResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DeleteDBResourceGroupResponse) GetBody() *DeleteDBResourceGroupResponseBody {
	return s.Body
}

func (s *DeleteDBResourceGroupResponse) SetHeaders(v map[string]*string) *DeleteDBResourceGroupResponse {
	s.Headers = v
	return s
}

func (s *DeleteDBResourceGroupResponse) SetStatusCode(v int32) *DeleteDBResourceGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteDBResourceGroupResponse) SetBody(v *DeleteDBResourceGroupResponseBody) *DeleteDBResourceGroupResponse {
	s.Body = v
	return s
}

func (s *DeleteDBResourceGroupResponse) Validate() error {
	return dara.Validate(s)
}

type iDeleteDocumentRequest interface {
	dara.Model
	String() string
	GoString() string
	SetCollection(v string) *DeleteDocumentRequest
	GetCollection() *string
	SetDBInstanceId(v string) *DeleteDocumentRequest
	GetDBInstanceId() *string
	SetFileName(v string) *DeleteDocumentRequest
	GetFileName() *string
	SetNamespace(v string) *DeleteDocumentRequest
	GetNamespace() *string
	SetNamespacePassword(v string) *DeleteDocumentRequest
	GetNamespacePassword() *string
	SetOwnerId(v int64) *DeleteDocumentRequest
	GetOwnerId() *int64
	SetRegionId(v string) *DeleteDocumentRequest
	GetRegionId() *string
}

type DeleteDocumentRequest struct {
	// Document collection name.
	//
	//
	// > Created by the [CreateDocumentCollection](https://help.aliyun.com/document_detail/2618448.html) API. You can use the [ListDocumentCollections](https://help.aliyun.com/document_detail/2618452.html) API to view the list of created document collections.
	//
	// This parameter is required.
	//
	// example:
	//
	// document
	Collection *string `json:"Collection,omitempty" xml:"Collection,omitempty"`
	// Instance ID.
	//
	// > You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) API to view details of all AnalyticDB PostgreSQL instances in the target region, including the instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// File name.
	//
	// > The name of an uploaded file. You can query the list of files using the [ListDocuments](https://help.aliyun.com/document_detail/2618453.html) API.
	//
	// This parameter is required.
	//
	// example:
	//
	// music.txt
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// Namespace, default is public.
	//
	// > You can create a namespace using the [CreateNamespace](https://help.aliyun.com/document_detail/2401495.html) API and view the list of namespaces using the [ListNamespaces](https://help.aliyun.com/document_detail/2401502.html) API.
	//
	// example:
	//
	// mynamespace
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// Password for the namespace.
	//
	// > This value is specified in the [CreateNamespace](https://help.aliyun.com/document_detail/2401495.html) API.
	//
	// This parameter is required.
	//
	// example:
	//
	// testpassword
	NamespacePassword *string `json:"NamespacePassword,omitempty" xml:"NamespacePassword,omitempty"`
	OwnerId           *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// Region ID where the instance is located.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DeleteDocumentRequest) String() string {
	return dara.Prettify(s)
}

func (s DeleteDocumentRequest) GoString() string {
	return s.String()
}

func (s *DeleteDocumentRequest) GetCollection() *string {
	return s.Collection
}

func (s *DeleteDocumentRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *DeleteDocumentRequest) GetFileName() *string {
	return s.FileName
}

func (s *DeleteDocumentRequest) GetNamespace() *string {
	return s.Namespace
}

func (s *DeleteDocumentRequest) GetNamespacePassword() *string {
	return s.NamespacePassword
}

func (s *DeleteDocumentRequest) GetOwnerId() *int64 {
	return s.OwnerId
}

func (s *DeleteDocumentRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *DeleteDocumentRequest) SetCollection(v string) *DeleteDocumentRequest {
	s.Collection = &v
	return s
}

func (s *DeleteDocumentRequest) SetDBInstanceId(v string) *DeleteDocumentRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DeleteDocumentRequest) SetFileName(v string) *DeleteDocumentRequest {
	s.FileName = &v
	return s
}

func (s *DeleteDocumentRequest) SetNamespace(v string) *DeleteDocumentRequest {
	s.Namespace = &v
	return s
}

func (s *DeleteDocumentRequest) SetNamespacePassword(v string) *DeleteDocumentRequest {
	s.NamespacePassword = &v
	return s
}

func (s *DeleteDocumentRequest) SetOwnerId(v int64) *DeleteDocumentRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteDocumentRequest) SetRegionId(v string) *DeleteDocumentRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteDocumentRequest) Validate() error {
	return dara.Validate(s)
}

type iDeleteDocumentResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetMessage(v string) *DeleteDocumentResponseBody
	GetMessage() *string
	SetRequestId(v string) *DeleteDocumentResponseBody
	GetRequestId() *string
	SetStatus(v string) *DeleteDocumentResponseBody
	GetStatus() *string
}

type DeleteDocumentResponseBody struct {
	// Detailed information returned by the API.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Creation status, value description: - **success**: Success - **fail**: Fail
	//
	// example:
	//
	// success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DeleteDocumentResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DeleteDocumentResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteDocumentResponseBody) GetMessage() *string {
	return s.Message
}

func (s *DeleteDocumentResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DeleteDocumentResponseBody) GetStatus() *string {
	return s.Status
}

func (s *DeleteDocumentResponseBody) SetMessage(v string) *DeleteDocumentResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteDocumentResponseBody) SetRequestId(v string) *DeleteDocumentResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteDocumentResponseBody) SetStatus(v string) *DeleteDocumentResponseBody {
	s.Status = &v
	return s
}

func (s *DeleteDocumentResponseBody) Validate() error {
	return dara.Validate(s)
}

type iDeleteDocumentResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DeleteDocumentResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DeleteDocumentResponse
	GetStatusCode() *int32
	SetBody(v *DeleteDocumentResponseBody) *DeleteDocumentResponse
	GetBody() *DeleteDocumentResponseBody
}

type DeleteDocumentResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteDocumentResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteDocumentResponse) String() string {
	return dara.Prettify(s)
}

func (s DeleteDocumentResponse) GoString() string {
	return s.String()
}

func (s *DeleteDocumentResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DeleteDocumentResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DeleteDocumentResponse) GetBody() *DeleteDocumentResponseBody {
	return s.Body
}

func (s *DeleteDocumentResponse) SetHeaders(v map[string]*string) *DeleteDocumentResponse {
	s.Headers = v
	return s
}

func (s *DeleteDocumentResponse) SetStatusCode(v int32) *DeleteDocumentResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteDocumentResponse) SetBody(v *DeleteDocumentResponseBody) *DeleteDocumentResponse {
	s.Body = v
	return s
}

func (s *DeleteDocumentResponse) Validate() error {
	return dara.Validate(s)
}

type iDeleteDocumentCollectionRequest interface {
	dara.Model
	String() string
	GoString() string
	SetCollection(v string) *DeleteDocumentCollectionRequest
	GetCollection() *string
	SetDBInstanceId(v string) *DeleteDocumentCollectionRequest
	GetDBInstanceId() *string
	SetNamespace(v string) *DeleteDocumentCollectionRequest
	GetNamespace() *string
	SetNamespacePassword(v string) *DeleteDocumentCollectionRequest
	GetNamespacePassword() *string
	SetOwnerId(v int64) *DeleteDocumentCollectionRequest
	GetOwnerId() *int64
	SetRegionId(v string) *DeleteDocumentCollectionRequest
	GetRegionId() *string
}

type DeleteDocumentCollectionRequest struct {
	// The name of the document collection to be deleted.
	//
	// This parameter is required.
	//
	// example:
	//
	// document
	Collection *string `json:"Collection,omitempty" xml:"Collection,omitempty"`
	// Instance ID.
	//
	// > You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) API to view details of all AnalyticDB PostgreSQL instances in the target region, including the instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// Namespace, default is public.
	//
	// > You can create a namespace using the [CreateNamespace](https://help.aliyun.com/document_detail/2401495.html) API and view the list of namespaces using the [ListNamespaces](https://help.aliyun.com/document_detail/2401502.html) API.
	//
	// example:
	//
	// mynamespace
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// Password for the namespace.
	//
	// > This value is specified by the [CreateNamespace](https://help.aliyun.com/document_detail/2401495.html) API.
	//
	// This parameter is required.
	//
	// example:
	//
	// testpassword
	NamespacePassword *string `json:"NamespacePassword,omitempty" xml:"NamespacePassword,omitempty"`
	OwnerId           *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The ID of the region where the instance is located.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DeleteDocumentCollectionRequest) String() string {
	return dara.Prettify(s)
}

func (s DeleteDocumentCollectionRequest) GoString() string {
	return s.String()
}

func (s *DeleteDocumentCollectionRequest) GetCollection() *string {
	return s.Collection
}

func (s *DeleteDocumentCollectionRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *DeleteDocumentCollectionRequest) GetNamespace() *string {
	return s.Namespace
}

func (s *DeleteDocumentCollectionRequest) GetNamespacePassword() *string {
	return s.NamespacePassword
}

func (s *DeleteDocumentCollectionRequest) GetOwnerId() *int64 {
	return s.OwnerId
}

func (s *DeleteDocumentCollectionRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *DeleteDocumentCollectionRequest) SetCollection(v string) *DeleteDocumentCollectionRequest {
	s.Collection = &v
	return s
}

func (s *DeleteDocumentCollectionRequest) SetDBInstanceId(v string) *DeleteDocumentCollectionRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DeleteDocumentCollectionRequest) SetNamespace(v string) *DeleteDocumentCollectionRequest {
	s.Namespace = &v
	return s
}

func (s *DeleteDocumentCollectionRequest) SetNamespacePassword(v string) *DeleteDocumentCollectionRequest {
	s.NamespacePassword = &v
	return s
}

func (s *DeleteDocumentCollectionRequest) SetOwnerId(v int64) *DeleteDocumentCollectionRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteDocumentCollectionRequest) SetRegionId(v string) *DeleteDocumentCollectionRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteDocumentCollectionRequest) Validate() error {
	return dara.Validate(s)
}

type iDeleteDocumentCollectionResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetMessage(v string) *DeleteDocumentCollectionResponseBody
	GetMessage() *string
	SetRequestId(v string) *DeleteDocumentCollectionResponseBody
	GetRequestId() *string
	SetStatus(v string) *DeleteDocumentCollectionResponseBody
	GetStatus() *string
}

type DeleteDocumentCollectionResponseBody struct {
	// Return message.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Status, with the following possible values:
	//
	// - **success**: Success.
	//
	// - **fail**: Failure.
	//
	// example:
	//
	// success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DeleteDocumentCollectionResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DeleteDocumentCollectionResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteDocumentCollectionResponseBody) GetMessage() *string {
	return s.Message
}

func (s *DeleteDocumentCollectionResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DeleteDocumentCollectionResponseBody) GetStatus() *string {
	return s.Status
}

func (s *DeleteDocumentCollectionResponseBody) SetMessage(v string) *DeleteDocumentCollectionResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteDocumentCollectionResponseBody) SetRequestId(v string) *DeleteDocumentCollectionResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteDocumentCollectionResponseBody) SetStatus(v string) *DeleteDocumentCollectionResponseBody {
	s.Status = &v
	return s
}

func (s *DeleteDocumentCollectionResponseBody) Validate() error {
	return dara.Validate(s)
}

type iDeleteDocumentCollectionResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DeleteDocumentCollectionResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DeleteDocumentCollectionResponse
	GetStatusCode() *int32
	SetBody(v *DeleteDocumentCollectionResponseBody) *DeleteDocumentCollectionResponse
	GetBody() *DeleteDocumentCollectionResponseBody
}

type DeleteDocumentCollectionResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteDocumentCollectionResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteDocumentCollectionResponse) String() string {
	return dara.Prettify(s)
}

func (s DeleteDocumentCollectionResponse) GoString() string {
	return s.String()
}

func (s *DeleteDocumentCollectionResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DeleteDocumentCollectionResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DeleteDocumentCollectionResponse) GetBody() *DeleteDocumentCollectionResponseBody {
	return s.Body
}

func (s *DeleteDocumentCollectionResponse) SetHeaders(v map[string]*string) *DeleteDocumentCollectionResponse {
	s.Headers = v
	return s
}

func (s *DeleteDocumentCollectionResponse) SetStatusCode(v int32) *DeleteDocumentCollectionResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteDocumentCollectionResponse) SetBody(v *DeleteDocumentCollectionResponseBody) *DeleteDocumentCollectionResponse {
	s.Body = v
	return s
}

func (s *DeleteDocumentCollectionResponse) Validate() error {
	return dara.Validate(s)
}

type iDeleteExtensionRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *DeleteExtensionRequest
	GetDBInstanceId() *string
	SetDBNames(v string) *DeleteExtensionRequest
	GetDBNames() *string
	SetExtension(v string) *DeleteExtensionRequest
	GetExtension() *string
	SetRegionId(v string) *DeleteExtensionRequest
	GetRegionId() *string
}

type DeleteExtensionRequest struct {
	// The instance ID.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the IDs of all AnalyticDB for PostgreSQL instances in a specific region.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The name of the database.
	//
	// This parameter is required.
	//
	// example:
	//
	// demo1
	DBNames *string `json:"DBNames,omitempty" xml:"DBNames,omitempty"`
	// The name of the extension.
	//
	// This parameter is required.
	//
	// example:
	//
	// citext
	Extension *string `json:"Extension,omitempty" xml:"Extension,omitempty"`
	// The region ID of the instance.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DeleteExtensionRequest) String() string {
	return dara.Prettify(s)
}

func (s DeleteExtensionRequest) GoString() string {
	return s.String()
}

func (s *DeleteExtensionRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *DeleteExtensionRequest) GetDBNames() *string {
	return s.DBNames
}

func (s *DeleteExtensionRequest) GetExtension() *string {
	return s.Extension
}

func (s *DeleteExtensionRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *DeleteExtensionRequest) SetDBInstanceId(v string) *DeleteExtensionRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DeleteExtensionRequest) SetDBNames(v string) *DeleteExtensionRequest {
	s.DBNames = &v
	return s
}

func (s *DeleteExtensionRequest) SetExtension(v string) *DeleteExtensionRequest {
	s.Extension = &v
	return s
}

func (s *DeleteExtensionRequest) SetRegionId(v string) *DeleteExtensionRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteExtensionRequest) Validate() error {
	return dara.Validate(s)
}

type iDeleteExtensionResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetRequestId(v string) *DeleteExtensionResponseBody
	GetRequestId() *string
}

type DeleteExtensionResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteExtensionResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DeleteExtensionResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteExtensionResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DeleteExtensionResponseBody) SetRequestId(v string) *DeleteExtensionResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteExtensionResponseBody) Validate() error {
	return dara.Validate(s)
}

type iDeleteExtensionResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DeleteExtensionResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DeleteExtensionResponse
	GetStatusCode() *int32
	SetBody(v *DeleteExtensionResponseBody) *DeleteExtensionResponse
	GetBody() *DeleteExtensionResponseBody
}

type DeleteExtensionResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteExtensionResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteExtensionResponse) String() string {
	return dara.Prettify(s)
}

func (s DeleteExtensionResponse) GoString() string {
	return s.String()
}

func (s *DeleteExtensionResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DeleteExtensionResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DeleteExtensionResponse) GetBody() *DeleteExtensionResponseBody {
	return s.Body
}

func (s *DeleteExtensionResponse) SetHeaders(v map[string]*string) *DeleteExtensionResponse {
	s.Headers = v
	return s
}

func (s *DeleteExtensionResponse) SetStatusCode(v int32) *DeleteExtensionResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteExtensionResponse) SetBody(v *DeleteExtensionResponseBody) *DeleteExtensionResponse {
	s.Body = v
	return s
}

func (s *DeleteExtensionResponse) Validate() error {
	return dara.Validate(s)
}

type iDeleteExternalDataServiceRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *DeleteExternalDataServiceRequest
	GetDBInstanceId() *string
	SetRegionId(v string) *DeleteExternalDataServiceRequest
	GetRegionId() *string
	SetServiceId(v string) *DeleteExternalDataServiceRequest
	GetServiceId() *string
}

type DeleteExternalDataServiceRequest struct {
	// Instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// Region ID.
	//
	// > You can call the [DescribeRegions](https://help.aliyun.com/document_detail/86912.html) API to view available region IDs.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// Service ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	ServiceId *string `json:"ServiceId,omitempty" xml:"ServiceId,omitempty"`
}

func (s DeleteExternalDataServiceRequest) String() string {
	return dara.Prettify(s)
}

func (s DeleteExternalDataServiceRequest) GoString() string {
	return s.String()
}

func (s *DeleteExternalDataServiceRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *DeleteExternalDataServiceRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *DeleteExternalDataServiceRequest) GetServiceId() *string {
	return s.ServiceId
}

func (s *DeleteExternalDataServiceRequest) SetDBInstanceId(v string) *DeleteExternalDataServiceRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DeleteExternalDataServiceRequest) SetRegionId(v string) *DeleteExternalDataServiceRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteExternalDataServiceRequest) SetServiceId(v string) *DeleteExternalDataServiceRequest {
	s.ServiceId = &v
	return s
}

func (s *DeleteExternalDataServiceRequest) Validate() error {
	return dara.Validate(s)
}

type iDeleteExternalDataServiceResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetRequestId(v string) *DeleteExternalDataServiceResponseBody
	GetRequestId() *string
}

type DeleteExternalDataServiceResponseBody struct {
	// Request ID.
	//
	// example:
	//
	// B4CAF581-2AC7-41AD-8940-D56DF7AADF5B
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteExternalDataServiceResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DeleteExternalDataServiceResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteExternalDataServiceResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DeleteExternalDataServiceResponseBody) SetRequestId(v string) *DeleteExternalDataServiceResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteExternalDataServiceResponseBody) Validate() error {
	return dara.Validate(s)
}

type iDeleteExternalDataServiceResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DeleteExternalDataServiceResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DeleteExternalDataServiceResponse
	GetStatusCode() *int32
	SetBody(v *DeleteExternalDataServiceResponseBody) *DeleteExternalDataServiceResponse
	GetBody() *DeleteExternalDataServiceResponseBody
}

type DeleteExternalDataServiceResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteExternalDataServiceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteExternalDataServiceResponse) String() string {
	return dara.Prettify(s)
}

func (s DeleteExternalDataServiceResponse) GoString() string {
	return s.String()
}

func (s *DeleteExternalDataServiceResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DeleteExternalDataServiceResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DeleteExternalDataServiceResponse) GetBody() *DeleteExternalDataServiceResponseBody {
	return s.Body
}

func (s *DeleteExternalDataServiceResponse) SetHeaders(v map[string]*string) *DeleteExternalDataServiceResponse {
	s.Headers = v
	return s
}

func (s *DeleteExternalDataServiceResponse) SetStatusCode(v int32) *DeleteExternalDataServiceResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteExternalDataServiceResponse) SetBody(v *DeleteExternalDataServiceResponseBody) *DeleteExternalDataServiceResponse {
	s.Body = v
	return s
}

func (s *DeleteExternalDataServiceResponse) Validate() error {
	return dara.Validate(s)
}

type iDeleteHadoopDataSourceRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *DeleteHadoopDataSourceRequest
	GetDBInstanceId() *string
	SetDataSourceId(v string) *DeleteHadoopDataSourceRequest
	GetDataSourceId() *string
	SetRegionId(v string) *DeleteHadoopDataSourceRequest
	GetRegionId() *string
}

type DeleteHadoopDataSourceRequest struct {
	// The instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The service ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 123
	DataSourceId *string `json:"DataSourceId,omitempty" xml:"DataSourceId,omitempty"`
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DeleteHadoopDataSourceRequest) String() string {
	return dara.Prettify(s)
}

func (s DeleteHadoopDataSourceRequest) GoString() string {
	return s.String()
}

func (s *DeleteHadoopDataSourceRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *DeleteHadoopDataSourceRequest) GetDataSourceId() *string {
	return s.DataSourceId
}

func (s *DeleteHadoopDataSourceRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *DeleteHadoopDataSourceRequest) SetDBInstanceId(v string) *DeleteHadoopDataSourceRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DeleteHadoopDataSourceRequest) SetDataSourceId(v string) *DeleteHadoopDataSourceRequest {
	s.DataSourceId = &v
	return s
}

func (s *DeleteHadoopDataSourceRequest) SetRegionId(v string) *DeleteHadoopDataSourceRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteHadoopDataSourceRequest) Validate() error {
	return dara.Validate(s)
}

type iDeleteHadoopDataSourceResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetRequestId(v string) *DeleteHadoopDataSourceResponseBody
	GetRequestId() *string
}

type DeleteHadoopDataSourceResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// B4CAF581-2AC7-41AD-8940-D56DF7AADF5B
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteHadoopDataSourceResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DeleteHadoopDataSourceResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteHadoopDataSourceResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DeleteHadoopDataSourceResponseBody) SetRequestId(v string) *DeleteHadoopDataSourceResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteHadoopDataSourceResponseBody) Validate() error {
	return dara.Validate(s)
}

type iDeleteHadoopDataSourceResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DeleteHadoopDataSourceResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DeleteHadoopDataSourceResponse
	GetStatusCode() *int32
	SetBody(v *DeleteHadoopDataSourceResponseBody) *DeleteHadoopDataSourceResponse
	GetBody() *DeleteHadoopDataSourceResponseBody
}

type DeleteHadoopDataSourceResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteHadoopDataSourceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteHadoopDataSourceResponse) String() string {
	return dara.Prettify(s)
}

func (s DeleteHadoopDataSourceResponse) GoString() string {
	return s.String()
}

func (s *DeleteHadoopDataSourceResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DeleteHadoopDataSourceResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DeleteHadoopDataSourceResponse) GetBody() *DeleteHadoopDataSourceResponseBody {
	return s.Body
}

func (s *DeleteHadoopDataSourceResponse) SetHeaders(v map[string]*string) *DeleteHadoopDataSourceResponse {
	s.Headers = v
	return s
}

func (s *DeleteHadoopDataSourceResponse) SetStatusCode(v int32) *DeleteHadoopDataSourceResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteHadoopDataSourceResponse) SetBody(v *DeleteHadoopDataSourceResponseBody) *DeleteHadoopDataSourceResponse {
	s.Body = v
	return s
}

func (s *DeleteHadoopDataSourceResponse) Validate() error {
	return dara.Validate(s)
}

type iDeleteIndexRequest interface {
	dara.Model
	String() string
	GoString() string
	SetCollection(v string) *DeleteIndexRequest
	GetCollection() *string
	SetDBInstanceId(v string) *DeleteIndexRequest
	GetDBInstanceId() *string
	SetIndexName(v string) *DeleteIndexRequest
	GetIndexName() *string
	SetNamespace(v string) *DeleteIndexRequest
	GetNamespace() *string
	SetNamespacePassword(v string) *DeleteIndexRequest
	GetNamespacePassword() *string
	SetOwnerId(v int64) *DeleteIndexRequest
	GetOwnerId() *int64
	SetRegionId(v string) *DeleteIndexRequest
	GetRegionId() *string
	SetWorkspaceId(v string) *DeleteIndexRequest
	GetWorkspaceId() *string
}

type DeleteIndexRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// testcollection
	Collection *string `json:"Collection,omitempty" xml:"Collection,omitempty"`
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// testindex
	IndexName *string `json:"IndexName,omitempty" xml:"IndexName,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// mynamespace
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// testpassword
	NamespacePassword *string `json:"NamespacePassword,omitempty" xml:"NamespacePassword,omitempty"`
	OwnerId           *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// example:
	//
	// gp-ws-*****
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s DeleteIndexRequest) String() string {
	return dara.Prettify(s)
}

func (s DeleteIndexRequest) GoString() string {
	return s.String()
}

func (s *DeleteIndexRequest) GetCollection() *string {
	return s.Collection
}

func (s *DeleteIndexRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *DeleteIndexRequest) GetIndexName() *string {
	return s.IndexName
}

func (s *DeleteIndexRequest) GetNamespace() *string {
	return s.Namespace
}

func (s *DeleteIndexRequest) GetNamespacePassword() *string {
	return s.NamespacePassword
}

func (s *DeleteIndexRequest) GetOwnerId() *int64 {
	return s.OwnerId
}

func (s *DeleteIndexRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *DeleteIndexRequest) GetWorkspaceId() *string {
	return s.WorkspaceId
}

func (s *DeleteIndexRequest) SetCollection(v string) *DeleteIndexRequest {
	s.Collection = &v
	return s
}

func (s *DeleteIndexRequest) SetDBInstanceId(v string) *DeleteIndexRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DeleteIndexRequest) SetIndexName(v string) *DeleteIndexRequest {
	s.IndexName = &v
	return s
}

func (s *DeleteIndexRequest) SetNamespace(v string) *DeleteIndexRequest {
	s.Namespace = &v
	return s
}

func (s *DeleteIndexRequest) SetNamespacePassword(v string) *DeleteIndexRequest {
	s.NamespacePassword = &v
	return s
}

func (s *DeleteIndexRequest) SetOwnerId(v int64) *DeleteIndexRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteIndexRequest) SetRegionId(v string) *DeleteIndexRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteIndexRequest) SetWorkspaceId(v string) *DeleteIndexRequest {
	s.WorkspaceId = &v
	return s
}

func (s *DeleteIndexRequest) Validate() error {
	return dara.Validate(s)
}

type iDeleteIndexResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetMessage(v string) *DeleteIndexResponseBody
	GetMessage() *string
	SetRequestId(v string) *DeleteIndexResponseBody
	GetRequestId() *string
	SetStatus(v string) *DeleteIndexResponseBody
	GetStatus() *string
}

type DeleteIndexResponseBody struct {
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DeleteIndexResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DeleteIndexResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteIndexResponseBody) GetMessage() *string {
	return s.Message
}

func (s *DeleteIndexResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DeleteIndexResponseBody) GetStatus() *string {
	return s.Status
}

func (s *DeleteIndexResponseBody) SetMessage(v string) *DeleteIndexResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteIndexResponseBody) SetRequestId(v string) *DeleteIndexResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteIndexResponseBody) SetStatus(v string) *DeleteIndexResponseBody {
	s.Status = &v
	return s
}

func (s *DeleteIndexResponseBody) Validate() error {
	return dara.Validate(s)
}

type iDeleteIndexResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DeleteIndexResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DeleteIndexResponse
	GetStatusCode() *int32
	SetBody(v *DeleteIndexResponseBody) *DeleteIndexResponse
	GetBody() *DeleteIndexResponseBody
}

type DeleteIndexResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteIndexResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteIndexResponse) String() string {
	return dara.Prettify(s)
}

func (s DeleteIndexResponse) GoString() string {
	return s.String()
}

func (s *DeleteIndexResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DeleteIndexResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DeleteIndexResponse) GetBody() *DeleteIndexResponseBody {
	return s.Body
}

func (s *DeleteIndexResponse) SetHeaders(v map[string]*string) *DeleteIndexResponse {
	s.Headers = v
	return s
}

func (s *DeleteIndexResponse) SetStatusCode(v int32) *DeleteIndexResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteIndexResponse) SetBody(v *DeleteIndexResponseBody) *DeleteIndexResponse {
	s.Body = v
	return s
}

func (s *DeleteIndexResponse) Validate() error {
	return dara.Validate(s)
}

type iDeleteJDBCDataSourceRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *DeleteJDBCDataSourceRequest
	GetDBInstanceId() *string
	SetDataSourceId(v string) *DeleteJDBCDataSourceRequest
	GetDataSourceId() *string
	SetRegionId(v string) *DeleteJDBCDataSourceRequest
	GetRegionId() *string
}

type DeleteJDBCDataSourceRequest struct {
	// Instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// Data source ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 123
	DataSourceId *string `json:"DataSourceId,omitempty" xml:"DataSourceId,omitempty"`
	// Region ID.
	//
	// > You can call the [DescribeRegions](https://help.aliyun.com/document_detail/86912.html) interface to view available region IDs.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DeleteJDBCDataSourceRequest) String() string {
	return dara.Prettify(s)
}

func (s DeleteJDBCDataSourceRequest) GoString() string {
	return s.String()
}

func (s *DeleteJDBCDataSourceRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *DeleteJDBCDataSourceRequest) GetDataSourceId() *string {
	return s.DataSourceId
}

func (s *DeleteJDBCDataSourceRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *DeleteJDBCDataSourceRequest) SetDBInstanceId(v string) *DeleteJDBCDataSourceRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DeleteJDBCDataSourceRequest) SetDataSourceId(v string) *DeleteJDBCDataSourceRequest {
	s.DataSourceId = &v
	return s
}

func (s *DeleteJDBCDataSourceRequest) SetRegionId(v string) *DeleteJDBCDataSourceRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteJDBCDataSourceRequest) Validate() error {
	return dara.Validate(s)
}

type iDeleteJDBCDataSourceResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetRequestId(v string) *DeleteJDBCDataSourceResponseBody
	GetRequestId() *string
}

type DeleteJDBCDataSourceResponseBody struct {
	// Request ID.
	//
	// example:
	//
	// B4CAF581-2AC7-41AD-8940-D56DF7AADF5B
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteJDBCDataSourceResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DeleteJDBCDataSourceResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteJDBCDataSourceResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DeleteJDBCDataSourceResponseBody) SetRequestId(v string) *DeleteJDBCDataSourceResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteJDBCDataSourceResponseBody) Validate() error {
	return dara.Validate(s)
}

type iDeleteJDBCDataSourceResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DeleteJDBCDataSourceResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DeleteJDBCDataSourceResponse
	GetStatusCode() *int32
	SetBody(v *DeleteJDBCDataSourceResponseBody) *DeleteJDBCDataSourceResponse
	GetBody() *DeleteJDBCDataSourceResponseBody
}

type DeleteJDBCDataSourceResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteJDBCDataSourceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteJDBCDataSourceResponse) String() string {
	return dara.Prettify(s)
}

func (s DeleteJDBCDataSourceResponse) GoString() string {
	return s.String()
}

func (s *DeleteJDBCDataSourceResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DeleteJDBCDataSourceResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DeleteJDBCDataSourceResponse) GetBody() *DeleteJDBCDataSourceResponseBody {
	return s.Body
}

func (s *DeleteJDBCDataSourceResponse) SetHeaders(v map[string]*string) *DeleteJDBCDataSourceResponse {
	s.Headers = v
	return s
}

func (s *DeleteJDBCDataSourceResponse) SetStatusCode(v int32) *DeleteJDBCDataSourceResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteJDBCDataSourceResponse) SetBody(v *DeleteJDBCDataSourceResponseBody) *DeleteJDBCDataSourceResponse {
	s.Body = v
	return s
}

func (s *DeleteJDBCDataSourceResponse) Validate() error {
	return dara.Validate(s)
}

type iDeleteNamespaceRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *DeleteNamespaceRequest
	GetDBInstanceId() *string
	SetManagerAccount(v string) *DeleteNamespaceRequest
	GetManagerAccount() *string
	SetManagerAccountPassword(v string) *DeleteNamespaceRequest
	GetManagerAccountPassword() *string
	SetNamespace(v string) *DeleteNamespaceRequest
	GetNamespace() *string
	SetOwnerId(v int64) *DeleteNamespaceRequest
	GetOwnerId() *int64
	SetRegionId(v string) *DeleteNamespaceRequest
	GetRegionId() *string
	SetWorkspaceId(v string) *DeleteNamespaceRequest
	GetWorkspaceId() *string
}

type DeleteNamespaceRequest struct {
	// The instance ID.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The name of the manager account that has the rds_superuser permission.
	//
	// >  You can create an account on the Account Management page of the AnalyticDB for PostgreSQL console or by calling the [CreateAccount](https://help.aliyun.com/document_detail/2361789.html) operation.
	//
	// This parameter is required.
	//
	// example:
	//
	// testaccount
	ManagerAccount *string `json:"ManagerAccount,omitempty" xml:"ManagerAccount,omitempty"`
	// The password of the manager account.
	//
	// This parameter is required.
	//
	// example:
	//
	// testpassword
	ManagerAccountPassword *string `json:"ManagerAccountPassword,omitempty" xml:"ManagerAccountPassword,omitempty"`
	// The name of the namespace.
	//
	// >  You can call the [ListNamespaces](https://help.aliyun.com/document_detail/2401502.html) operation to query a list of namespaces.
	//
	// This parameter is required.
	//
	// example:
	//
	// mynamespace
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	OwnerId   *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The region ID of the instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the workspace that consists of multiple AnalyticDB for PostgreSQL instances. You must specify one of the WorkspaceId and DBInstanceId parameters. If you specify both parameters, the WorkspaceId parameter takes effect.
	//
	// example:
	//
	// gp-ws-*****
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s DeleteNamespaceRequest) String() string {
	return dara.Prettify(s)
}

func (s DeleteNamespaceRequest) GoString() string {
	return s.String()
}

func (s *DeleteNamespaceRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *DeleteNamespaceRequest) GetManagerAccount() *string {
	return s.ManagerAccount
}

func (s *DeleteNamespaceRequest) GetManagerAccountPassword() *string {
	return s.ManagerAccountPassword
}

func (s *DeleteNamespaceRequest) GetNamespace() *string {
	return s.Namespace
}

func (s *DeleteNamespaceRequest) GetOwnerId() *int64 {
	return s.OwnerId
}

func (s *DeleteNamespaceRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *DeleteNamespaceRequest) GetWorkspaceId() *string {
	return s.WorkspaceId
}

func (s *DeleteNamespaceRequest) SetDBInstanceId(v string) *DeleteNamespaceRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DeleteNamespaceRequest) SetManagerAccount(v string) *DeleteNamespaceRequest {
	s.ManagerAccount = &v
	return s
}

func (s *DeleteNamespaceRequest) SetManagerAccountPassword(v string) *DeleteNamespaceRequest {
	s.ManagerAccountPassword = &v
	return s
}

func (s *DeleteNamespaceRequest) SetNamespace(v string) *DeleteNamespaceRequest {
	s.Namespace = &v
	return s
}

func (s *DeleteNamespaceRequest) SetOwnerId(v int64) *DeleteNamespaceRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteNamespaceRequest) SetRegionId(v string) *DeleteNamespaceRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteNamespaceRequest) SetWorkspaceId(v string) *DeleteNamespaceRequest {
	s.WorkspaceId = &v
	return s
}

func (s *DeleteNamespaceRequest) Validate() error {
	return dara.Validate(s)
}

type iDeleteNamespaceResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetMessage(v string) *DeleteNamespaceResponseBody
	GetMessage() *string
	SetRequestId(v string) *DeleteNamespaceResponseBody
	GetRequestId() *string
	SetStatus(v string) *DeleteNamespaceResponseBody
	GetStatus() *string
}

type DeleteNamespaceResponseBody struct {
	// The returned message.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **success**
	//
	// 	- **fail**
	//
	// example:
	//
	// success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DeleteNamespaceResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DeleteNamespaceResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteNamespaceResponseBody) GetMessage() *string {
	return s.Message
}

func (s *DeleteNamespaceResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DeleteNamespaceResponseBody) GetStatus() *string {
	return s.Status
}

func (s *DeleteNamespaceResponseBody) SetMessage(v string) *DeleteNamespaceResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteNamespaceResponseBody) SetRequestId(v string) *DeleteNamespaceResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteNamespaceResponseBody) SetStatus(v string) *DeleteNamespaceResponseBody {
	s.Status = &v
	return s
}

func (s *DeleteNamespaceResponseBody) Validate() error {
	return dara.Validate(s)
}

type iDeleteNamespaceResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DeleteNamespaceResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DeleteNamespaceResponse
	GetStatusCode() *int32
	SetBody(v *DeleteNamespaceResponseBody) *DeleteNamespaceResponse
	GetBody() *DeleteNamespaceResponseBody
}

type DeleteNamespaceResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteNamespaceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteNamespaceResponse) String() string {
	return dara.Prettify(s)
}

func (s DeleteNamespaceResponse) GoString() string {
	return s.String()
}

func (s *DeleteNamespaceResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DeleteNamespaceResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DeleteNamespaceResponse) GetBody() *DeleteNamespaceResponseBody {
	return s.Body
}

func (s *DeleteNamespaceResponse) SetHeaders(v map[string]*string) *DeleteNamespaceResponse {
	s.Headers = v
	return s
}

func (s *DeleteNamespaceResponse) SetStatusCode(v int32) *DeleteNamespaceResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteNamespaceResponse) SetBody(v *DeleteNamespaceResponseBody) *DeleteNamespaceResponse {
	s.Body = v
	return s
}

func (s *DeleteNamespaceResponse) Validate() error {
	return dara.Validate(s)
}

type iDeleteRemoteADBDataSourceRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDataSourceId(v string) *DeleteRemoteADBDataSourceRequest
	GetDataSourceId() *string
	SetLocalDBInstanceId(v string) *DeleteRemoteADBDataSourceRequest
	GetLocalDBInstanceId() *string
	SetOwnerId(v int64) *DeleteRemoteADBDataSourceRequest
	GetOwnerId() *int64
}

type DeleteRemoteADBDataSourceRequest struct {
	// The service ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	DataSourceId *string `json:"DataSourceId,omitempty" xml:"DataSourceId,omitempty"`
	// The ID of the instance that uses the data provided by another instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-test
	LocalDBInstanceId *string `json:"LocalDBInstanceId,omitempty" xml:"LocalDBInstanceId,omitempty"`
	OwnerId           *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s DeleteRemoteADBDataSourceRequest) String() string {
	return dara.Prettify(s)
}

func (s DeleteRemoteADBDataSourceRequest) GoString() string {
	return s.String()
}

func (s *DeleteRemoteADBDataSourceRequest) GetDataSourceId() *string {
	return s.DataSourceId
}

func (s *DeleteRemoteADBDataSourceRequest) GetLocalDBInstanceId() *string {
	return s.LocalDBInstanceId
}

func (s *DeleteRemoteADBDataSourceRequest) GetOwnerId() *int64 {
	return s.OwnerId
}

func (s *DeleteRemoteADBDataSourceRequest) SetDataSourceId(v string) *DeleteRemoteADBDataSourceRequest {
	s.DataSourceId = &v
	return s
}

func (s *DeleteRemoteADBDataSourceRequest) SetLocalDBInstanceId(v string) *DeleteRemoteADBDataSourceRequest {
	s.LocalDBInstanceId = &v
	return s
}

func (s *DeleteRemoteADBDataSourceRequest) SetOwnerId(v int64) *DeleteRemoteADBDataSourceRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteRemoteADBDataSourceRequest) Validate() error {
	return dara.Validate(s)
}

type iDeleteRemoteADBDataSourceResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetRequestId(v string) *DeleteRemoteADBDataSourceResponseBody
	GetRequestId() *string
	SetTaskId(v int32) *DeleteRemoteADBDataSourceResponseBody
	GetTaskId() *int32
}

type DeleteRemoteADBDataSourceResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// e9d60eb1-e90d-4bc6-a470-c8b767460858
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The job ID.
	//
	// example:
	//
	// 90000
	TaskId *int32 `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s DeleteRemoteADBDataSourceResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DeleteRemoteADBDataSourceResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteRemoteADBDataSourceResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DeleteRemoteADBDataSourceResponseBody) GetTaskId() *int32 {
	return s.TaskId
}

func (s *DeleteRemoteADBDataSourceResponseBody) SetRequestId(v string) *DeleteRemoteADBDataSourceResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteRemoteADBDataSourceResponseBody) SetTaskId(v int32) *DeleteRemoteADBDataSourceResponseBody {
	s.TaskId = &v
	return s
}

func (s *DeleteRemoteADBDataSourceResponseBody) Validate() error {
	return dara.Validate(s)
}

type iDeleteRemoteADBDataSourceResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DeleteRemoteADBDataSourceResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DeleteRemoteADBDataSourceResponse
	GetStatusCode() *int32
	SetBody(v *DeleteRemoteADBDataSourceResponseBody) *DeleteRemoteADBDataSourceResponse
	GetBody() *DeleteRemoteADBDataSourceResponseBody
}

type DeleteRemoteADBDataSourceResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteRemoteADBDataSourceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteRemoteADBDataSourceResponse) String() string {
	return dara.Prettify(s)
}

func (s DeleteRemoteADBDataSourceResponse) GoString() string {
	return s.String()
}

func (s *DeleteRemoteADBDataSourceResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DeleteRemoteADBDataSourceResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DeleteRemoteADBDataSourceResponse) GetBody() *DeleteRemoteADBDataSourceResponseBody {
	return s.Body
}

func (s *DeleteRemoteADBDataSourceResponse) SetHeaders(v map[string]*string) *DeleteRemoteADBDataSourceResponse {
	s.Headers = v
	return s
}

func (s *DeleteRemoteADBDataSourceResponse) SetStatusCode(v int32) *DeleteRemoteADBDataSourceResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteRemoteADBDataSourceResponse) SetBody(v *DeleteRemoteADBDataSourceResponseBody) *DeleteRemoteADBDataSourceResponse {
	s.Body = v
	return s
}

func (s *DeleteRemoteADBDataSourceResponse) Validate() error {
	return dara.Validate(s)
}

type iDeleteSecretRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *DeleteSecretRequest
	GetDBInstanceId() *string
	SetOwnerId(v int64) *DeleteSecretRequest
	GetOwnerId() *int64
	SetRegionId(v string) *DeleteSecretRequest
	GetRegionId() *string
	SetSecretArn(v string) *DeleteSecretRequest
	GetSecretArn() *string
	SetSecretName(v string) *DeleteSecretRequest
	GetSecretName() *string
	SetWorkspaceId(v string) *DeleteSecretRequest
	GetWorkspaceId() *string
}

type DeleteSecretRequest struct {
	// The instance ID. You can call the DescribeDBInstances operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// >
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The region ID of the instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-beijing
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The Alibaba Cloud Resource Name (ARN) of the access credential for the created Data API account. Format: `acs:gpdb:{{region}}:{{accountId}}:secret/{{secretName}}-{{32 digits random string}`.
	//
	// >  You must specify one of the SecretArn and SecretName parameters.
	//
	// example:
	//
	// acs:gpdb:cn-beijing:1033**:secret/testsecret-eG2AQGRIwQ0zFp4VA7mYL3uiCXTfDQbQ
	SecretArn *string `json:"SecretArn,omitempty" xml:"SecretArn,omitempty"`
	// The name of the access credential.
	//
	// >  You must specify one of the SecretArn and SecretName parameters.
	//
	// example:
	//
	// testsecret
	SecretName  *string `json:"SecretName,omitempty" xml:"SecretName,omitempty"`
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s DeleteSecretRequest) String() string {
	return dara.Prettify(s)
}

func (s DeleteSecretRequest) GoString() string {
	return s.String()
}

func (s *DeleteSecretRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *DeleteSecretRequest) GetOwnerId() *int64 {
	return s.OwnerId
}

func (s *DeleteSecretRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *DeleteSecretRequest) GetSecretArn() *string {
	return s.SecretArn
}

func (s *DeleteSecretRequest) GetSecretName() *string {
	return s.SecretName
}

func (s *DeleteSecretRequest) GetWorkspaceId() *string {
	return s.WorkspaceId
}

func (s *DeleteSecretRequest) SetDBInstanceId(v string) *DeleteSecretRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DeleteSecretRequest) SetOwnerId(v int64) *DeleteSecretRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteSecretRequest) SetRegionId(v string) *DeleteSecretRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteSecretRequest) SetSecretArn(v string) *DeleteSecretRequest {
	s.SecretArn = &v
	return s
}

func (s *DeleteSecretRequest) SetSecretName(v string) *DeleteSecretRequest {
	s.SecretName = &v
	return s
}

func (s *DeleteSecretRequest) SetWorkspaceId(v string) *DeleteSecretRequest {
	s.WorkspaceId = &v
	return s
}

func (s *DeleteSecretRequest) Validate() error {
	return dara.Validate(s)
}

type iDeleteSecretResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetMessage(v string) *DeleteSecretResponseBody
	GetMessage() *string
	SetRequestId(v string) *DeleteSecretResponseBody
	GetRequestId() *string
	SetSecretArn(v string) *DeleteSecretResponseBody
	GetSecretArn() *string
	SetStatus(v string) *DeleteSecretResponseBody
	GetStatus() *string
}

type DeleteSecretResponseBody struct {
	// The returned message.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The ARN of the access credential for the created Data API account. Format: `acs:gpdb:{{region}}:{{accountId}}:secret/{{secretName}}-{{32 digits random string}`.
	//
	// example:
	//
	// acs:gpdb:cn-beijing:1033**:secret/testsecret-eG2AQGRIwQ0zFp4VA7mYL3uiCXTfDQbQ
	SecretArn *string `json:"SecretArn,omitempty" xml:"SecretArn,omitempty"`
	// The status of the operation. Valid values:
	//
	// 	- **fail**
	//
	// 	- **success**
	//
	// example:
	//
	// success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DeleteSecretResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DeleteSecretResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteSecretResponseBody) GetMessage() *string {
	return s.Message
}

func (s *DeleteSecretResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DeleteSecretResponseBody) GetSecretArn() *string {
	return s.SecretArn
}

func (s *DeleteSecretResponseBody) GetStatus() *string {
	return s.Status
}

func (s *DeleteSecretResponseBody) SetMessage(v string) *DeleteSecretResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteSecretResponseBody) SetRequestId(v string) *DeleteSecretResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteSecretResponseBody) SetSecretArn(v string) *DeleteSecretResponseBody {
	s.SecretArn = &v
	return s
}

func (s *DeleteSecretResponseBody) SetStatus(v string) *DeleteSecretResponseBody {
	s.Status = &v
	return s
}

func (s *DeleteSecretResponseBody) Validate() error {
	return dara.Validate(s)
}

type iDeleteSecretResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DeleteSecretResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DeleteSecretResponse
	GetStatusCode() *int32
	SetBody(v *DeleteSecretResponseBody) *DeleteSecretResponse
	GetBody() *DeleteSecretResponseBody
}

type DeleteSecretResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteSecretResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteSecretResponse) String() string {
	return dara.Prettify(s)
}

func (s DeleteSecretResponse) GoString() string {
	return s.String()
}

func (s *DeleteSecretResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DeleteSecretResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DeleteSecretResponse) GetBody() *DeleteSecretResponseBody {
	return s.Body
}

func (s *DeleteSecretResponse) SetHeaders(v map[string]*string) *DeleteSecretResponse {
	s.Headers = v
	return s
}

func (s *DeleteSecretResponse) SetStatusCode(v int32) *DeleteSecretResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteSecretResponse) SetBody(v *DeleteSecretResponseBody) *DeleteSecretResponse {
	s.Body = v
	return s
}

func (s *DeleteSecretResponse) Validate() error {
	return dara.Validate(s)
}

type iDeleteStreamingDataServiceRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *DeleteStreamingDataServiceRequest
	GetDBInstanceId() *string
	SetRegionId(v string) *DeleteStreamingDataServiceRequest
	GetRegionId() *string
	SetServiceId(v string) *DeleteStreamingDataServiceRequest
	GetServiceId() *string
}

type DeleteStreamingDataServiceRequest struct {
	// The instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp10g78o9807yv9h3
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// example:
	//
	// cn-beijing
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The service ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	ServiceId *string `json:"ServiceId,omitempty" xml:"ServiceId,omitempty"`
}

func (s DeleteStreamingDataServiceRequest) String() string {
	return dara.Prettify(s)
}

func (s DeleteStreamingDataServiceRequest) GoString() string {
	return s.String()
}

func (s *DeleteStreamingDataServiceRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *DeleteStreamingDataServiceRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *DeleteStreamingDataServiceRequest) GetServiceId() *string {
	return s.ServiceId
}

func (s *DeleteStreamingDataServiceRequest) SetDBInstanceId(v string) *DeleteStreamingDataServiceRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DeleteStreamingDataServiceRequest) SetRegionId(v string) *DeleteStreamingDataServiceRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteStreamingDataServiceRequest) SetServiceId(v string) *DeleteStreamingDataServiceRequest {
	s.ServiceId = &v
	return s
}

func (s *DeleteStreamingDataServiceRequest) Validate() error {
	return dara.Validate(s)
}

type iDeleteStreamingDataServiceResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetErrorMessage(v string) *DeleteStreamingDataServiceResponseBody
	GetErrorMessage() *string
	SetRequestId(v string) *DeleteStreamingDataServiceResponseBody
	GetRequestId() *string
	SetStatus(v bool) *DeleteStreamingDataServiceResponseBody
	GetStatus() *bool
}

type DeleteStreamingDataServiceResponseBody struct {
	// The error message returned if the operation fails.
	//
	// This parameter is returned only when the return value of **Status*	- is **false**.
	//
	// example:
	//
	// This external service cannot be deleted because it is still used by other data source.
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// The request ID.
	//
	// example:
	//
	// B4CAF581-2AC7-41AD-8940-D56DF7AADF5B
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The status of the operation. Valid values:
	//
	// 	- **false**: The operation fails.
	//
	// 	- **true**: The operation is successful.
	//
	// example:
	//
	// true
	Status *bool `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DeleteStreamingDataServiceResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DeleteStreamingDataServiceResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteStreamingDataServiceResponseBody) GetErrorMessage() *string {
	return s.ErrorMessage
}

func (s *DeleteStreamingDataServiceResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DeleteStreamingDataServiceResponseBody) GetStatus() *bool {
	return s.Status
}

func (s *DeleteStreamingDataServiceResponseBody) SetErrorMessage(v string) *DeleteStreamingDataServiceResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *DeleteStreamingDataServiceResponseBody) SetRequestId(v string) *DeleteStreamingDataServiceResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteStreamingDataServiceResponseBody) SetStatus(v bool) *DeleteStreamingDataServiceResponseBody {
	s.Status = &v
	return s
}

func (s *DeleteStreamingDataServiceResponseBody) Validate() error {
	return dara.Validate(s)
}

type iDeleteStreamingDataServiceResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DeleteStreamingDataServiceResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DeleteStreamingDataServiceResponse
	GetStatusCode() *int32
	SetBody(v *DeleteStreamingDataServiceResponseBody) *DeleteStreamingDataServiceResponse
	GetBody() *DeleteStreamingDataServiceResponseBody
}

type DeleteStreamingDataServiceResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteStreamingDataServiceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteStreamingDataServiceResponse) String() string {
	return dara.Prettify(s)
}

func (s DeleteStreamingDataServiceResponse) GoString() string {
	return s.String()
}

func (s *DeleteStreamingDataServiceResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DeleteStreamingDataServiceResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DeleteStreamingDataServiceResponse) GetBody() *DeleteStreamingDataServiceResponseBody {
	return s.Body
}

func (s *DeleteStreamingDataServiceResponse) SetHeaders(v map[string]*string) *DeleteStreamingDataServiceResponse {
	s.Headers = v
	return s
}

func (s *DeleteStreamingDataServiceResponse) SetStatusCode(v int32) *DeleteStreamingDataServiceResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteStreamingDataServiceResponse) SetBody(v *DeleteStreamingDataServiceResponseBody) *DeleteStreamingDataServiceResponse {
	s.Body = v
	return s
}

func (s *DeleteStreamingDataServiceResponse) Validate() error {
	return dara.Validate(s)
}

type iDeleteStreamingDataSourceRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *DeleteStreamingDataSourceRequest
	GetDBInstanceId() *string
	SetDataSourceId(v int32) *DeleteStreamingDataSourceRequest
	GetDataSourceId() *int32
	SetRegionId(v string) *DeleteStreamingDataSourceRequest
	GetRegionId() *string
}

type DeleteStreamingDataSourceRequest struct {
	// The instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp10g78o9807yv9h3
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The data source ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	DataSourceId *int32 `json:"DataSourceId,omitempty" xml:"DataSourceId,omitempty"`
	// example:
	//
	// cn-beijing
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DeleteStreamingDataSourceRequest) String() string {
	return dara.Prettify(s)
}

func (s DeleteStreamingDataSourceRequest) GoString() string {
	return s.String()
}

func (s *DeleteStreamingDataSourceRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *DeleteStreamingDataSourceRequest) GetDataSourceId() *int32 {
	return s.DataSourceId
}

func (s *DeleteStreamingDataSourceRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *DeleteStreamingDataSourceRequest) SetDBInstanceId(v string) *DeleteStreamingDataSourceRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DeleteStreamingDataSourceRequest) SetDataSourceId(v int32) *DeleteStreamingDataSourceRequest {
	s.DataSourceId = &v
	return s
}

func (s *DeleteStreamingDataSourceRequest) SetRegionId(v string) *DeleteStreamingDataSourceRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteStreamingDataSourceRequest) Validate() error {
	return dara.Validate(s)
}

type iDeleteStreamingDataSourceResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetRequestId(v string) *DeleteStreamingDataSourceResponseBody
	GetRequestId() *string
}

type DeleteStreamingDataSourceResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// B4CAF581-2AC7-41AD-8940-D56DF7AADF5B
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteStreamingDataSourceResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DeleteStreamingDataSourceResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteStreamingDataSourceResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DeleteStreamingDataSourceResponseBody) SetRequestId(v string) *DeleteStreamingDataSourceResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteStreamingDataSourceResponseBody) Validate() error {
	return dara.Validate(s)
}

type iDeleteStreamingDataSourceResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DeleteStreamingDataSourceResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DeleteStreamingDataSourceResponse
	GetStatusCode() *int32
	SetBody(v *DeleteStreamingDataSourceResponseBody) *DeleteStreamingDataSourceResponse
	GetBody() *DeleteStreamingDataSourceResponseBody
}

type DeleteStreamingDataSourceResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteStreamingDataSourceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteStreamingDataSourceResponse) String() string {
	return dara.Prettify(s)
}

func (s DeleteStreamingDataSourceResponse) GoString() string {
	return s.String()
}

func (s *DeleteStreamingDataSourceResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DeleteStreamingDataSourceResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DeleteStreamingDataSourceResponse) GetBody() *DeleteStreamingDataSourceResponseBody {
	return s.Body
}

func (s *DeleteStreamingDataSourceResponse) SetHeaders(v map[string]*string) *DeleteStreamingDataSourceResponse {
	s.Headers = v
	return s
}

func (s *DeleteStreamingDataSourceResponse) SetStatusCode(v int32) *DeleteStreamingDataSourceResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteStreamingDataSourceResponse) SetBody(v *DeleteStreamingDataSourceResponseBody) *DeleteStreamingDataSourceResponse {
	s.Body = v
	return s
}

func (s *DeleteStreamingDataSourceResponse) Validate() error {
	return dara.Validate(s)
}

type iDeleteStreamingJobRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *DeleteStreamingJobRequest
	GetDBInstanceId() *string
	SetJobId(v int32) *DeleteStreamingJobRequest
	GetJobId() *int32
	SetRegionId(v string) *DeleteStreamingJobRequest
	GetRegionId() *string
}

type DeleteStreamingJobRequest struct {
	// The instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp10g78o9807yv9h3
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The job ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	JobId *int32 `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// cn-beijing
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DeleteStreamingJobRequest) String() string {
	return dara.Prettify(s)
}

func (s DeleteStreamingJobRequest) GoString() string {
	return s.String()
}

func (s *DeleteStreamingJobRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *DeleteStreamingJobRequest) GetJobId() *int32 {
	return s.JobId
}

func (s *DeleteStreamingJobRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *DeleteStreamingJobRequest) SetDBInstanceId(v string) *DeleteStreamingJobRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DeleteStreamingJobRequest) SetJobId(v int32) *DeleteStreamingJobRequest {
	s.JobId = &v
	return s
}

func (s *DeleteStreamingJobRequest) SetRegionId(v string) *DeleteStreamingJobRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteStreamingJobRequest) Validate() error {
	return dara.Validate(s)
}

type iDeleteStreamingJobResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetRequestId(v string) *DeleteStreamingJobResponseBody
	GetRequestId() *string
}

type DeleteStreamingJobResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// B4CAF581-2AC7-41AD-8940-D56DF7AADF5B
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteStreamingJobResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DeleteStreamingJobResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteStreamingJobResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DeleteStreamingJobResponseBody) SetRequestId(v string) *DeleteStreamingJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteStreamingJobResponseBody) Validate() error {
	return dara.Validate(s)
}

type iDeleteStreamingJobResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DeleteStreamingJobResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DeleteStreamingJobResponse
	GetStatusCode() *int32
	SetBody(v *DeleteStreamingJobResponseBody) *DeleteStreamingJobResponse
	GetBody() *DeleteStreamingJobResponseBody
}

type DeleteStreamingJobResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteStreamingJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteStreamingJobResponse) String() string {
	return dara.Prettify(s)
}

func (s DeleteStreamingJobResponse) GoString() string {
	return s.String()
}

func (s *DeleteStreamingJobResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DeleteStreamingJobResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DeleteStreamingJobResponse) GetBody() *DeleteStreamingJobResponseBody {
	return s.Body
}

func (s *DeleteStreamingJobResponse) SetHeaders(v map[string]*string) *DeleteStreamingJobResponse {
	s.Headers = v
	return s
}

func (s *DeleteStreamingJobResponse) SetStatusCode(v int32) *DeleteStreamingJobResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteStreamingJobResponse) SetBody(v *DeleteStreamingJobResponseBody) *DeleteStreamingJobResponse {
	s.Body = v
	return s
}

func (s *DeleteStreamingJobResponse) Validate() error {
	return dara.Validate(s)
}

type iDeleteVectorIndexRequest interface {
	dara.Model
	String() string
	GoString() string
	SetCollection(v string) *DeleteVectorIndexRequest
	GetCollection() *string
	SetDBInstanceId(v string) *DeleteVectorIndexRequest
	GetDBInstanceId() *string
	SetManagerAccount(v string) *DeleteVectorIndexRequest
	GetManagerAccount() *string
	SetManagerAccountPassword(v string) *DeleteVectorIndexRequest
	GetManagerAccountPassword() *string
	SetNamespace(v string) *DeleteVectorIndexRequest
	GetNamespace() *string
	SetOwnerId(v int64) *DeleteVectorIndexRequest
	GetOwnerId() *int64
	SetRegionId(v string) *DeleteVectorIndexRequest
	GetRegionId() *string
	SetType(v string) *DeleteVectorIndexRequest
	GetType() *string
}

type DeleteVectorIndexRequest struct {
	// The name of the collection.
	//
	// >  You can call the [ListCollections](https://help.aliyun.com/document_detail/2401503.html) operation to query a list of collections.
	//
	// This parameter is required.
	//
	// example:
	//
	// document
	Collection *string `json:"Collection,omitempty" xml:"Collection,omitempty"`
	// The instance ID.
	//
	// > You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The name of the manager account that has the rds_superuser permission.
	//
	// >  You can create an account on the **Account Management*	- page of the AnalyticDB for PostgreSQL console or by calling the [CreateAccount](https://help.aliyun.com/document_detail/2361789.html) operation.
	//
	// This parameter is required.
	//
	// example:
	//
	// testaccount
	ManagerAccount *string `json:"ManagerAccount,omitempty" xml:"ManagerAccount,omitempty"`
	// The password of the manager account.
	//
	// This parameter is required.
	//
	// example:
	//
	// testpassword
	ManagerAccountPassword *string `json:"ManagerAccountPassword,omitempty" xml:"ManagerAccountPassword,omitempty"`
	// The name of the namespace. Default value: public.
	//
	// >  You can call the [ListNamespaces](https://help.aliyun.com/document_detail/2401502.html) operation to query a list of namespaces.
	//
	// example:
	//
	// mynamespace
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	OwnerId   *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The region ID of the instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Type     *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DeleteVectorIndexRequest) String() string {
	return dara.Prettify(s)
}

func (s DeleteVectorIndexRequest) GoString() string {
	return s.String()
}

func (s *DeleteVectorIndexRequest) GetCollection() *string {
	return s.Collection
}

func (s *DeleteVectorIndexRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *DeleteVectorIndexRequest) GetManagerAccount() *string {
	return s.ManagerAccount
}

func (s *DeleteVectorIndexRequest) GetManagerAccountPassword() *string {
	return s.ManagerAccountPassword
}

func (s *DeleteVectorIndexRequest) GetNamespace() *string {
	return s.Namespace
}

func (s *DeleteVectorIndexRequest) GetOwnerId() *int64 {
	return s.OwnerId
}

func (s *DeleteVectorIndexRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *DeleteVectorIndexRequest) GetType() *string {
	return s.Type
}

func (s *DeleteVectorIndexRequest) SetCollection(v string) *DeleteVectorIndexRequest {
	s.Collection = &v
	return s
}

func (s *DeleteVectorIndexRequest) SetDBInstanceId(v string) *DeleteVectorIndexRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DeleteVectorIndexRequest) SetManagerAccount(v string) *DeleteVectorIndexRequest {
	s.ManagerAccount = &v
	return s
}

func (s *DeleteVectorIndexRequest) SetManagerAccountPassword(v string) *DeleteVectorIndexRequest {
	s.ManagerAccountPassword = &v
	return s
}

func (s *DeleteVectorIndexRequest) SetNamespace(v string) *DeleteVectorIndexRequest {
	s.Namespace = &v
	return s
}

func (s *DeleteVectorIndexRequest) SetOwnerId(v int64) *DeleteVectorIndexRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteVectorIndexRequest) SetRegionId(v string) *DeleteVectorIndexRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteVectorIndexRequest) SetType(v string) *DeleteVectorIndexRequest {
	s.Type = &v
	return s
}

func (s *DeleteVectorIndexRequest) Validate() error {
	return dara.Validate(s)
}

type iDeleteVectorIndexResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetMessage(v string) *DeleteVectorIndexResponseBody
	GetMessage() *string
	SetRequestId(v string) *DeleteVectorIndexResponseBody
	GetRequestId() *string
	SetStatus(v string) *DeleteVectorIndexResponseBody
	GetStatus() *string
}

type DeleteVectorIndexResponseBody struct {
	// The returned message.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **success**
	//
	// 	- **fail**
	//
	// example:
	//
	// success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DeleteVectorIndexResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DeleteVectorIndexResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteVectorIndexResponseBody) GetMessage() *string {
	return s.Message
}

func (s *DeleteVectorIndexResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DeleteVectorIndexResponseBody) GetStatus() *string {
	return s.Status
}

func (s *DeleteVectorIndexResponseBody) SetMessage(v string) *DeleteVectorIndexResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteVectorIndexResponseBody) SetRequestId(v string) *DeleteVectorIndexResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteVectorIndexResponseBody) SetStatus(v string) *DeleteVectorIndexResponseBody {
	s.Status = &v
	return s
}

func (s *DeleteVectorIndexResponseBody) Validate() error {
	return dara.Validate(s)
}

type iDeleteVectorIndexResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DeleteVectorIndexResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DeleteVectorIndexResponse
	GetStatusCode() *int32
	SetBody(v *DeleteVectorIndexResponseBody) *DeleteVectorIndexResponse
	GetBody() *DeleteVectorIndexResponseBody
}

type DeleteVectorIndexResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteVectorIndexResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteVectorIndexResponse) String() string {
	return dara.Prettify(s)
}

func (s DeleteVectorIndexResponse) GoString() string {
	return s.String()
}

func (s *DeleteVectorIndexResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DeleteVectorIndexResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DeleteVectorIndexResponse) GetBody() *DeleteVectorIndexResponseBody {
	return s.Body
}

func (s *DeleteVectorIndexResponse) SetHeaders(v map[string]*string) *DeleteVectorIndexResponse {
	s.Headers = v
	return s
}

func (s *DeleteVectorIndexResponse) SetStatusCode(v int32) *DeleteVectorIndexResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteVectorIndexResponse) SetBody(v *DeleteVectorIndexResponseBody) *DeleteVectorIndexResponse {
	s.Body = v
	return s
}

func (s *DeleteVectorIndexResponse) Validate() error {
	return dara.Validate(s)
}

type iDescribeAccountsRequest interface {
	dara.Model
	String() string
	GoString() string
	SetAccountName(v string) *DescribeAccountsRequest
	GetAccountName() *string
	SetAccountType(v string) *DescribeAccountsRequest
	GetAccountType() *string
	SetDBInstanceId(v string) *DescribeAccountsRequest
	GetDBInstanceId() *string
}

type DescribeAccountsRequest struct {
	// The name of the database account.
	//
	// example:
	//
	// testuser
	AccountName *string `json:"AccountName,omitempty" xml:"AccountName,omitempty"`
	// The type of the database account that you want to query. Valid values: Super, Normal, and All. Default value: Super. If you set this parameter to Super, the information about the privileged account is returned. If you set this parameter to Normal, the information about all standard accounts is returned. If you set this parameter to All, the information about all database accounts is returned.
	//
	// example:
	//
	// Super
	AccountType *string `json:"AccountType,omitempty" xml:"AccountType,omitempty"`
	// The instance ID.
	//
	// > You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp***************
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
}

func (s DescribeAccountsRequest) String() string {
	return dara.Prettify(s)
}

func (s DescribeAccountsRequest) GoString() string {
	return s.String()
}

func (s *DescribeAccountsRequest) GetAccountName() *string {
	return s.AccountName
}

func (s *DescribeAccountsRequest) GetAccountType() *string {
	return s.AccountType
}

func (s *DescribeAccountsRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *DescribeAccountsRequest) SetAccountName(v string) *DescribeAccountsRequest {
	s.AccountName = &v
	return s
}

func (s *DescribeAccountsRequest) SetAccountType(v string) *DescribeAccountsRequest {
	s.AccountType = &v
	return s
}

func (s *DescribeAccountsRequest) SetDBInstanceId(v string) *DescribeAccountsRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeAccountsRequest) Validate() error {
	return dara.Validate(s)
}

type iDescribeAccountsResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetAccounts(v *DescribeAccountsResponseBodyAccounts) *DescribeAccountsResponseBody
	GetAccounts() *DescribeAccountsResponseBodyAccounts
	SetRequestId(v string) *DescribeAccountsResponseBody
	GetRequestId() *string
}

type DescribeAccountsResponseBody struct {
	// The queried database accounts.
	Accounts *DescribeAccountsResponseBodyAccounts `json:"Accounts,omitempty" xml:"Accounts,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// 7565770E-7C45-462D-BA4A-8A5396F2CAD1
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeAccountsResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DescribeAccountsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAccountsResponseBody) GetAccounts() *DescribeAccountsResponseBodyAccounts {
	return s.Accounts
}

func (s *DescribeAccountsResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DescribeAccountsResponseBody) SetAccounts(v *DescribeAccountsResponseBodyAccounts) *DescribeAccountsResponseBody {
	s.Accounts = v
	return s
}

func (s *DescribeAccountsResponseBody) SetRequestId(v string) *DescribeAccountsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAccountsResponseBody) Validate() error {
	return dara.Validate(s)
}

type DescribeAccountsResponseBodyAccounts struct {
	DBInstanceAccount []*DescribeAccountsResponseBodyAccountsDBInstanceAccount `json:"DBInstanceAccount,omitempty" xml:"DBInstanceAccount,omitempty" type:"Repeated"`
}

func (s DescribeAccountsResponseBodyAccounts) String() string {
	return dara.Prettify(s)
}

func (s DescribeAccountsResponseBodyAccounts) GoString() string {
	return s.String()
}

func (s *DescribeAccountsResponseBodyAccounts) GetDBInstanceAccount() []*DescribeAccountsResponseBodyAccountsDBInstanceAccount {
	return s.DBInstanceAccount
}

func (s *DescribeAccountsResponseBodyAccounts) SetDBInstanceAccount(v []*DescribeAccountsResponseBodyAccountsDBInstanceAccount) *DescribeAccountsResponseBodyAccounts {
	s.DBInstanceAccount = v
	return s
}

func (s *DescribeAccountsResponseBodyAccounts) Validate() error {
	return dara.Validate(s)
}

type DescribeAccountsResponseBodyAccountsDBInstanceAccount struct {
	// The description of the account.
	//
	// example:
	//
	// testuser
	AccountDescription *string `json:"AccountDescription,omitempty" xml:"AccountDescription,omitempty"`
	// The name of the account.
	//
	// example:
	//
	// testuser
	AccountName *string `json:"AccountName,omitempty" xml:"AccountName,omitempty"`
	// The state of the account.
	//
	// 	- **0**: The account is being created.
	//
	// 	- **1**: The account is in use.
	//
	// 	- **3**: The account is being deleted.
	//
	// example:
	//
	// 1
	AccountStatus *string `json:"AccountStatus,omitempty" xml:"AccountStatus,omitempty"`
	// The type of the database account. Valid values: Super and Normal. Super indicates a privileged account and Normal indicates a standard account.
	//
	// example:
	//
	// Super
	AccountType *string `json:"AccountType,omitempty" xml:"AccountType,omitempty"`
	// The ID of the instance.
	//
	// example:
	//
	// gp-bp***************
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
}

func (s DescribeAccountsResponseBodyAccountsDBInstanceAccount) String() string {
	return dara.Prettify(s)
}

func (s DescribeAccountsResponseBodyAccountsDBInstanceAccount) GoString() string {
	return s.String()
}

func (s *DescribeAccountsResponseBodyAccountsDBInstanceAccount) GetAccountDescription() *string {
	return s.AccountDescription
}

func (s *DescribeAccountsResponseBodyAccountsDBInstanceAccount) GetAccountName() *string {
	return s.AccountName
}

func (s *DescribeAccountsResponseBodyAccountsDBInstanceAccount) GetAccountStatus() *string {
	return s.AccountStatus
}

func (s *DescribeAccountsResponseBodyAccountsDBInstanceAccount) GetAccountType() *string {
	return s.AccountType
}

func (s *DescribeAccountsResponseBodyAccountsDBInstanceAccount) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *DescribeAccountsResponseBodyAccountsDBInstanceAccount) SetAccountDescription(v string) *DescribeAccountsResponseBodyAccountsDBInstanceAccount {
	s.AccountDescription = &v
	return s
}

func (s *DescribeAccountsResponseBodyAccountsDBInstanceAccount) SetAccountName(v string) *DescribeAccountsResponseBodyAccountsDBInstanceAccount {
	s.AccountName = &v
	return s
}

func (s *DescribeAccountsResponseBodyAccountsDBInstanceAccount) SetAccountStatus(v string) *DescribeAccountsResponseBodyAccountsDBInstanceAccount {
	s.AccountStatus = &v
	return s
}

func (s *DescribeAccountsResponseBodyAccountsDBInstanceAccount) SetAccountType(v string) *DescribeAccountsResponseBodyAccountsDBInstanceAccount {
	s.AccountType = &v
	return s
}

func (s *DescribeAccountsResponseBodyAccountsDBInstanceAccount) SetDBInstanceId(v string) *DescribeAccountsResponseBodyAccountsDBInstanceAccount {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeAccountsResponseBodyAccountsDBInstanceAccount) Validate() error {
	return dara.Validate(s)
}

type iDescribeAccountsResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DescribeAccountsResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DescribeAccountsResponse
	GetStatusCode() *int32
	SetBody(v *DescribeAccountsResponseBody) *DescribeAccountsResponse
	GetBody() *DescribeAccountsResponseBody
}

type DescribeAccountsResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAccountsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAccountsResponse) String() string {
	return dara.Prettify(s)
}

func (s DescribeAccountsResponse) GoString() string {
	return s.String()
}

func (s *DescribeAccountsResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DescribeAccountsResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DescribeAccountsResponse) GetBody() *DescribeAccountsResponseBody {
	return s.Body
}

func (s *DescribeAccountsResponse) SetHeaders(v map[string]*string) *DescribeAccountsResponse {
	s.Headers = v
	return s
}

func (s *DescribeAccountsResponse) SetStatusCode(v int32) *DescribeAccountsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAccountsResponse) SetBody(v *DescribeAccountsResponseBody) *DescribeAccountsResponse {
	s.Body = v
	return s
}

func (s *DescribeAccountsResponse) Validate() error {
	return dara.Validate(s)
}

type iDescribeActiveSQLRecordsRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *DescribeActiveSQLRecordsRequest
	GetDBInstanceId() *string
	SetDatabase(v string) *DescribeActiveSQLRecordsRequest
	GetDatabase() *string
	SetEndTime(v string) *DescribeActiveSQLRecordsRequest
	GetEndTime() *string
	SetKeyword(v string) *DescribeActiveSQLRecordsRequest
	GetKeyword() *string
	SetMaxDuration(v string) *DescribeActiveSQLRecordsRequest
	GetMaxDuration() *string
	SetMinDuration(v string) *DescribeActiveSQLRecordsRequest
	GetMinDuration() *string
	SetOrder(v string) *DescribeActiveSQLRecordsRequest
	GetOrder() *string
	SetStartTime(v string) *DescribeActiveSQLRecordsRequest
	GetStartTime() *string
	SetUser(v string) *DescribeActiveSQLRecordsRequest
	GetUser() *string
}

type DescribeActiveSQLRecordsRequest struct {
	// The instance ID.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The name of the database.
	//
	// example:
	//
	// testdb
	Database *string `json:"Database,omitempty" xml:"Database,omitempty"`
	// The end of the time range to query. Specify the time in the yyyy-MM-ddTHH:mm:ssZ format. The end time must be later than the start time.
	//
	// example:
	//
	// 2022-05-07T07:59Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The keyword used to filter queries.
	//
	// example:
	//
	// SELECT
	Keyword *string `json:"Keyword,omitempty" xml:"Keyword,omitempty"`
	// The maxmum amount of time consumed by traces. Unit: milliseconds.
	//
	// example:
	//
	// 600
	MaxDuration *string `json:"MaxDuration,omitempty" xml:"MaxDuration,omitempty"`
	// The minimum amount of time consumed by traces. Unit: milliseconds.
	//
	// example:
	//
	// 300
	MinDuration *string `json:"MinDuration,omitempty" xml:"MinDuration,omitempty"`
	// The field used to sort lock diagnostics records and the sorting order.
	//
	// Default value: `{"Field":"StartTime","Type":"Desc"}`, which indicates that lock diagnostics records are sorted by the start time in descending order. No other values are supported.
	//
	// example:
	//
	// {"Field":"StartTime","Type":"Desc"}
	Order *string `json:"Order,omitempty" xml:"Order,omitempty"`
	// The beginning of the time range to query. Specify the time in the yyyy-MM-ddTHH:mmZ format. The time must be in UTC.
	//
	// example:
	//
	// 2021-08-03T09:30Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The name of the database account.
	//
	// example:
	//
	// testuser
	User *string `json:"User,omitempty" xml:"User,omitempty"`
}

func (s DescribeActiveSQLRecordsRequest) String() string {
	return dara.Prettify(s)
}

func (s DescribeActiveSQLRecordsRequest) GoString() string {
	return s.String()
}

func (s *DescribeActiveSQLRecordsRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *DescribeActiveSQLRecordsRequest) GetDatabase() *string {
	return s.Database
}

func (s *DescribeActiveSQLRecordsRequest) GetEndTime() *string {
	return s.EndTime
}

func (s *DescribeActiveSQLRecordsRequest) GetKeyword() *string {
	return s.Keyword
}

func (s *DescribeActiveSQLRecordsRequest) GetMaxDuration() *string {
	return s.MaxDuration
}

func (s *DescribeActiveSQLRecordsRequest) GetMinDuration() *string {
	return s.MinDuration
}

func (s *DescribeActiveSQLRecordsRequest) GetOrder() *string {
	return s.Order
}

func (s *DescribeActiveSQLRecordsRequest) GetStartTime() *string {
	return s.StartTime
}

func (s *DescribeActiveSQLRecordsRequest) GetUser() *string {
	return s.User
}

func (s *DescribeActiveSQLRecordsRequest) SetDBInstanceId(v string) *DescribeActiveSQLRecordsRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeActiveSQLRecordsRequest) SetDatabase(v string) *DescribeActiveSQLRecordsRequest {
	s.Database = &v
	return s
}

func (s *DescribeActiveSQLRecordsRequest) SetEndTime(v string) *DescribeActiveSQLRecordsRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeActiveSQLRecordsRequest) SetKeyword(v string) *DescribeActiveSQLRecordsRequest {
	s.Keyword = &v
	return s
}

func (s *DescribeActiveSQLRecordsRequest) SetMaxDuration(v string) *DescribeActiveSQLRecordsRequest {
	s.MaxDuration = &v
	return s
}

func (s *DescribeActiveSQLRecordsRequest) SetMinDuration(v string) *DescribeActiveSQLRecordsRequest {
	s.MinDuration = &v
	return s
}

func (s *DescribeActiveSQLRecordsRequest) SetOrder(v string) *DescribeActiveSQLRecordsRequest {
	s.Order = &v
	return s
}

func (s *DescribeActiveSQLRecordsRequest) SetStartTime(v string) *DescribeActiveSQLRecordsRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeActiveSQLRecordsRequest) SetUser(v string) *DescribeActiveSQLRecordsRequest {
	s.User = &v
	return s
}

func (s *DescribeActiveSQLRecordsRequest) Validate() error {
	return dara.Validate(s)
}

type iDescribeActiveSQLRecordsResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *DescribeActiveSQLRecordsResponseBody
	GetDBInstanceId() *string
	SetQueries(v []*DescribeActiveSQLRecordsResponseBodyQueries) *DescribeActiveSQLRecordsResponseBody
	GetQueries() []*DescribeActiveSQLRecordsResponseBodyQueries
	SetRequestId(v string) *DescribeActiveSQLRecordsResponseBody
	GetRequestId() *string
}

type DescribeActiveSQLRecordsResponseBody struct {
	// The instance ID.
	//
	// example:
	//
	// gp-bp***************
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The queried SQL records.
	Queries []*DescribeActiveSQLRecordsResponseBodyQueries `json:"Queries,omitempty" xml:"Queries,omitempty" type:"Repeated"`
	// The request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeActiveSQLRecordsResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DescribeActiveSQLRecordsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeActiveSQLRecordsResponseBody) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *DescribeActiveSQLRecordsResponseBody) GetQueries() []*DescribeActiveSQLRecordsResponseBodyQueries {
	return s.Queries
}

func (s *DescribeActiveSQLRecordsResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DescribeActiveSQLRecordsResponseBody) SetDBInstanceId(v string) *DescribeActiveSQLRecordsResponseBody {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeActiveSQLRecordsResponseBody) SetQueries(v []*DescribeActiveSQLRecordsResponseBodyQueries) *DescribeActiveSQLRecordsResponseBody {
	s.Queries = v
	return s
}

func (s *DescribeActiveSQLRecordsResponseBody) SetRequestId(v string) *DescribeActiveSQLRecordsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeActiveSQLRecordsResponseBody) Validate() error {
	return dara.Validate(s)
}

type DescribeActiveSQLRecordsResponseBodyQueries struct {
	// The IP address of the client.
	//
	// example:
	//
	// 0.0.0.0
	ClientAddr *string `json:"ClientAddr,omitempty" xml:"ClientAddr,omitempty"`
	// The name of the database.
	//
	// example:
	//
	// xg_analyse
	Database *string `json:"Database,omitempty" xml:"Database,omitempty"`
	// The progress ID.
	//
	// example:
	//
	// 6164
	PID *string `json:"PID,omitempty" xml:"PID,omitempty"`
	// The SQL statement of the query.
	//
	// example:
	//
	// Select 	- from t1,t2 where t1.id=t2.id;
	Query *string `json:"Query,omitempty" xml:"Query,omitempty"`
	// The execution duration of the query. Unit: seconds.
	//
	// example:
	//
	// 60s
	QueryDuration *string `json:"QueryDuration,omitempty" xml:"QueryDuration,omitempty"`
	// The start time of the query.
	//
	// example:
	//
	// 2022-05-07T06:59Z
	QueryStart *string `json:"QueryStart,omitempty" xml:"QueryStart,omitempty"`
	// The session ID.
	//
	// example:
	//
	// 6612
	SessionID *string `json:"SessionID,omitempty" xml:"SessionID,omitempty"`
	// Indicates whether the SQL statement is truncated. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// false
	SqlTruncated *string `json:"SqlTruncated,omitempty" xml:"SqlTruncated,omitempty"`
	// The threshold that is used to truncate the SQL statement.
	//
	// example:
	//
	// 1024
	SqlTruncatedThreshold *string `json:"SqlTruncatedThreshold,omitempty" xml:"SqlTruncatedThreshold,omitempty"`
	// The status of the asynchronous request. Valid values:
	//
	// 	- **running**
	//
	// 	- **block**
	//
	// example:
	//
	// running
	State *string `json:"State,omitempty" xml:"State,omitempty"`
	// The name of the database account.
	//
	// example:
	//
	// testuser
	User *string `json:"User,omitempty" xml:"User,omitempty"`
}

func (s DescribeActiveSQLRecordsResponseBodyQueries) String() string {
	return dara.Prettify(s)
}

func (s DescribeActiveSQLRecordsResponseBodyQueries) GoString() string {
	return s.String()
}

func (s *DescribeActiveSQLRecordsResponseBodyQueries) GetClientAddr() *string {
	return s.ClientAddr
}

func (s *DescribeActiveSQLRecordsResponseBodyQueries) GetDatabase() *string {
	return s.Database
}

func (s *DescribeActiveSQLRecordsResponseBodyQueries) GetPID() *string {
	return s.PID
}

func (s *DescribeActiveSQLRecordsResponseBodyQueries) GetQuery() *string {
	return s.Query
}

func (s *DescribeActiveSQLRecordsResponseBodyQueries) GetQueryDuration() *string {
	return s.QueryDuration
}

func (s *DescribeActiveSQLRecordsResponseBodyQueries) GetQueryStart() *string {
	return s.QueryStart
}

func (s *DescribeActiveSQLRecordsResponseBodyQueries) GetSessionID() *string {
	return s.SessionID
}

func (s *DescribeActiveSQLRecordsResponseBodyQueries) GetSqlTruncated() *string {
	return s.SqlTruncated
}

func (s *DescribeActiveSQLRecordsResponseBodyQueries) GetSqlTruncatedThreshold() *string {
	return s.SqlTruncatedThreshold
}

func (s *DescribeActiveSQLRecordsResponseBodyQueries) GetState() *string {
	return s.State
}

func (s *DescribeActiveSQLRecordsResponseBodyQueries) GetUser() *string {
	return s.User
}

func (s *DescribeActiveSQLRecordsResponseBodyQueries) SetClientAddr(v string) *DescribeActiveSQLRecordsResponseBodyQueries {
	s.ClientAddr = &v
	return s
}

func (s *DescribeActiveSQLRecordsResponseBodyQueries) SetDatabase(v string) *DescribeActiveSQLRecordsResponseBodyQueries {
	s.Database = &v
	return s
}

func (s *DescribeActiveSQLRecordsResponseBodyQueries) SetPID(v string) *DescribeActiveSQLRecordsResponseBodyQueries {
	s.PID = &v
	return s
}

func (s *DescribeActiveSQLRecordsResponseBodyQueries) SetQuery(v string) *DescribeActiveSQLRecordsResponseBodyQueries {
	s.Query = &v
	return s
}

func (s *DescribeActiveSQLRecordsResponseBodyQueries) SetQueryDuration(v string) *DescribeActiveSQLRecordsResponseBodyQueries {
	s.QueryDuration = &v
	return s
}

func (s *DescribeActiveSQLRecordsResponseBodyQueries) SetQueryStart(v string) *DescribeActiveSQLRecordsResponseBodyQueries {
	s.QueryStart = &v
	return s
}

func (s *DescribeActiveSQLRecordsResponseBodyQueries) SetSessionID(v string) *DescribeActiveSQLRecordsResponseBodyQueries {
	s.SessionID = &v
	return s
}

func (s *DescribeActiveSQLRecordsResponseBodyQueries) SetSqlTruncated(v string) *DescribeActiveSQLRecordsResponseBodyQueries {
	s.SqlTruncated = &v
	return s
}

func (s *DescribeActiveSQLRecordsResponseBodyQueries) SetSqlTruncatedThreshold(v string) *DescribeActiveSQLRecordsResponseBodyQueries {
	s.SqlTruncatedThreshold = &v
	return s
}

func (s *DescribeActiveSQLRecordsResponseBodyQueries) SetState(v string) *DescribeActiveSQLRecordsResponseBodyQueries {
	s.State = &v
	return s
}

func (s *DescribeActiveSQLRecordsResponseBodyQueries) SetUser(v string) *DescribeActiveSQLRecordsResponseBodyQueries {
	s.User = &v
	return s
}

func (s *DescribeActiveSQLRecordsResponseBodyQueries) Validate() error {
	return dara.Validate(s)
}

type iDescribeActiveSQLRecordsResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DescribeActiveSQLRecordsResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DescribeActiveSQLRecordsResponse
	GetStatusCode() *int32
	SetBody(v *DescribeActiveSQLRecordsResponseBody) *DescribeActiveSQLRecordsResponse
	GetBody() *DescribeActiveSQLRecordsResponseBody
}

type DescribeActiveSQLRecordsResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeActiveSQLRecordsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeActiveSQLRecordsResponse) String() string {
	return dara.Prettify(s)
}

func (s DescribeActiveSQLRecordsResponse) GoString() string {
	return s.String()
}

func (s *DescribeActiveSQLRecordsResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DescribeActiveSQLRecordsResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DescribeActiveSQLRecordsResponse) GetBody() *DescribeActiveSQLRecordsResponseBody {
	return s.Body
}

func (s *DescribeActiveSQLRecordsResponse) SetHeaders(v map[string]*string) *DescribeActiveSQLRecordsResponse {
	s.Headers = v
	return s
}

func (s *DescribeActiveSQLRecordsResponse) SetStatusCode(v int32) *DescribeActiveSQLRecordsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeActiveSQLRecordsResponse) SetBody(v *DescribeActiveSQLRecordsResponseBody) *DescribeActiveSQLRecordsResponse {
	s.Body = v
	return s
}

func (s *DescribeActiveSQLRecordsResponse) Validate() error {
	return dara.Validate(s)
}

type iDescribeAvailableResourcesRequest interface {
	dara.Model
	String() string
	GoString() string
	SetChargeType(v string) *DescribeAvailableResourcesRequest
	GetChargeType() *string
	SetRegion(v string) *DescribeAvailableResourcesRequest
	GetRegion() *string
	SetZoneId(v string) *DescribeAvailableResourcesRequest
	GetZoneId() *string
}

type DescribeAvailableResourcesRequest struct {
	// The billing method. Valid values:
	//
	// 	- **Postpaid**: pay-as-you-go.
	//
	// 	- **Prepaid**: subscription.
	//
	// example:
	//
	// PostPaid
	ChargeType *string `json:"ChargeType,omitempty" xml:"ChargeType,omitempty"`
	// The region ID.
	//
	// > You can call the [DescribeRegions](https://help.aliyun.com/document_detail/86912.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// The zone ID.
	//
	// > You can call the [DescribeRegions](https://help.aliyun.com/document_detail/86912.html) operation to query the most recent zone list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou-h
	ZoneId *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s DescribeAvailableResourcesRequest) String() string {
	return dara.Prettify(s)
}

func (s DescribeAvailableResourcesRequest) GoString() string {
	return s.String()
}

func (s *DescribeAvailableResourcesRequest) GetChargeType() *string {
	return s.ChargeType
}

func (s *DescribeAvailableResourcesRequest) GetRegion() *string {
	return s.Region
}

func (s *DescribeAvailableResourcesRequest) GetZoneId() *string {
	return s.ZoneId
}

func (s *DescribeAvailableResourcesRequest) SetChargeType(v string) *DescribeAvailableResourcesRequest {
	s.ChargeType = &v
	return s
}

func (s *DescribeAvailableResourcesRequest) SetRegion(v string) *DescribeAvailableResourcesRequest {
	s.Region = &v
	return s
}

func (s *DescribeAvailableResourcesRequest) SetZoneId(v string) *DescribeAvailableResourcesRequest {
	s.ZoneId = &v
	return s
}

func (s *DescribeAvailableResourcesRequest) Validate() error {
	return dara.Validate(s)
}

type iDescribeAvailableResourcesResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetRegionId(v string) *DescribeAvailableResourcesResponseBody
	GetRegionId() *string
	SetRequestId(v string) *DescribeAvailableResourcesResponseBody
	GetRequestId() *string
	SetResources(v []*DescribeAvailableResourcesResponseBodyResources) *DescribeAvailableResourcesResponseBody
	GetResources() []*DescribeAvailableResourcesResponseBodyResources
}

type DescribeAvailableResourcesResponseBody struct {
	// The region ID.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 61DC563C-F8E4-593A-8D27-CE**********
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The zone ID.
	Resources []*DescribeAvailableResourcesResponseBodyResources `json:"Resources,omitempty" xml:"Resources,omitempty" type:"Repeated"`
}

func (s DescribeAvailableResourcesResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DescribeAvailableResourcesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAvailableResourcesResponseBody) GetRegionId() *string {
	return s.RegionId
}

func (s *DescribeAvailableResourcesResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DescribeAvailableResourcesResponseBody) GetResources() []*DescribeAvailableResourcesResponseBodyResources {
	return s.Resources
}

func (s *DescribeAvailableResourcesResponseBody) SetRegionId(v string) *DescribeAvailableResourcesResponseBody {
	s.RegionId = &v
	return s
}

func (s *DescribeAvailableResourcesResponseBody) SetRequestId(v string) *DescribeAvailableResourcesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAvailableResourcesResponseBody) SetResources(v []*DescribeAvailableResourcesResponseBodyResources) *DescribeAvailableResourcesResponseBody {
	s.Resources = v
	return s
}

func (s *DescribeAvailableResourcesResponseBody) Validate() error {
	return dara.Validate(s)
}

type DescribeAvailableResourcesResponseBodyResources struct {
	// The available engine version and specifications.
	SupportedEngines []*DescribeAvailableResourcesResponseBodyResourcesSupportedEngines `json:"SupportedEngines,omitempty" xml:"SupportedEngines,omitempty" type:"Repeated"`
	// The ID of the zone.
	//
	// example:
	//
	// cn-hangzhou-h
	ZoneId *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s DescribeAvailableResourcesResponseBodyResources) String() string {
	return dara.Prettify(s)
}

func (s DescribeAvailableResourcesResponseBodyResources) GoString() string {
	return s.String()
}

func (s *DescribeAvailableResourcesResponseBodyResources) GetSupportedEngines() []*DescribeAvailableResourcesResponseBodyResourcesSupportedEngines {
	return s.SupportedEngines
}

func (s *DescribeAvailableResourcesResponseBodyResources) GetZoneId() *string {
	return s.ZoneId
}

func (s *DescribeAvailableResourcesResponseBodyResources) SetSupportedEngines(v []*DescribeAvailableResourcesResponseBodyResourcesSupportedEngines) *DescribeAvailableResourcesResponseBodyResources {
	s.SupportedEngines = v
	return s
}

func (s *DescribeAvailableResourcesResponseBodyResources) SetZoneId(v string) *DescribeAvailableResourcesResponseBodyResources {
	s.ZoneId = &v
	return s
}

func (s *DescribeAvailableResourcesResponseBodyResources) Validate() error {
	return dara.Validate(s)
}

type DescribeAvailableResourcesResponseBodyResourcesSupportedEngines struct {
	// The instance resource type. Valid values:
	//
	// 	- **ecs**: elastic storage mode
	//
	// 	- **serverless**: Serverless mode
	//
	// example:
	//
	// ecs
	Mode *string `json:"Mode,omitempty" xml:"Mode,omitempty"`
	// The available engine version.
	//
	// example:
	//
	// 6.0
	SupportedEngineVersion *string `json:"SupportedEngineVersion,omitempty" xml:"SupportedEngineVersion,omitempty"`
	// The available specifications.
	SupportedInstanceClasses []*DescribeAvailableResourcesResponseBodyResourcesSupportedEnginesSupportedInstanceClasses `json:"SupportedInstanceClasses,omitempty" xml:"SupportedInstanceClasses,omitempty" type:"Repeated"`
}

func (s DescribeAvailableResourcesResponseBodyResourcesSupportedEngines) String() string {
	return dara.Prettify(s)
}

func (s DescribeAvailableResourcesResponseBodyResourcesSupportedEngines) GoString() string {
	return s.String()
}

func (s *DescribeAvailableResourcesResponseBodyResourcesSupportedEngines) GetMode() *string {
	return s.Mode
}

func (s *DescribeAvailableResourcesResponseBodyResourcesSupportedEngines) GetSupportedEngineVersion() *string {
	return s.SupportedEngineVersion
}

func (s *DescribeAvailableResourcesResponseBodyResourcesSupportedEngines) GetSupportedInstanceClasses() []*DescribeAvailableResourcesResponseBodyResourcesSupportedEnginesSupportedInstanceClasses {
	return s.SupportedInstanceClasses
}

func (s *DescribeAvailableResourcesResponseBodyResourcesSupportedEngines) SetMode(v string) *DescribeAvailableResourcesResponseBodyResourcesSupportedEngines {
	s.Mode = &v
	return s
}

func (s *DescribeAvailableResourcesResponseBodyResourcesSupportedEngines) SetSupportedEngineVersion(v string) *DescribeAvailableResourcesResponseBodyResourcesSupportedEngines {
	s.SupportedEngineVersion = &v
	return s
}

func (s *DescribeAvailableResourcesResponseBodyResourcesSupportedEngines) SetSupportedInstanceClasses(v []*DescribeAvailableResourcesResponseBodyResourcesSupportedEnginesSupportedInstanceClasses) *DescribeAvailableResourcesResponseBodyResourcesSupportedEngines {
	s.SupportedInstanceClasses = v
	return s
}

func (s *DescribeAvailableResourcesResponseBodyResourcesSupportedEngines) Validate() error {
	return dara.Validate(s)
}

type DescribeAvailableResourcesResponseBodyResourcesSupportedEnginesSupportedInstanceClasses struct {
	// The instance edition. Valid values:
	//
	// 	- **HighAvailability**: High-availability Edition
	//
	// 	- **Basic**: Basic Edition
	//
	// example:
	//
	// HighAvailability
	Category *string `json:"Category,omitempty" xml:"Category,omitempty"`
	// The description of compute node specifications.
	//
	// example:
	//
	// 2C16G
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The specifications of each compute node.
	//
	// example:
	//
	// 2C16G
	DisplayClass *string `json:"DisplayClass,omitempty" xml:"DisplayClass,omitempty"`
	// The specifications of each compute node.
	//
	// example:
	//
	// 2C16G
	InstanceClass *string `json:"InstanceClass,omitempty" xml:"InstanceClass,omitempty"`
	// Details about the compute nodes.
	NodeCount *DescribeAvailableResourcesResponseBodyResourcesSupportedEnginesSupportedInstanceClassesNodeCount `json:"NodeCount,omitempty" xml:"NodeCount,omitempty" type:"Struct"`
	// Details about the storage capacity of compute nodes.
	StorageSize *DescribeAvailableResourcesResponseBodyResourcesSupportedEnginesSupportedInstanceClassesStorageSize `json:"StorageSize,omitempty" xml:"StorageSize,omitempty" type:"Struct"`
	// The storage type. Valid values:
	//
	// 	- **cloud_essd**: enhanced SSD (ESSD)
	//
	// 	- **cloud_efficiency**: ultra disk
	//
	// 	- **oss**: Object Storage Service (OSS)
	//
	// example:
	//
	// cloud_essd
	StorageType *string `json:"StorageType,omitempty" xml:"StorageType,omitempty"`
}

func (s DescribeAvailableResourcesResponseBodyResourcesSupportedEnginesSupportedInstanceClasses) String() string {
	return dara.Prettify(s)
}

func (s DescribeAvailableResourcesResponseBodyResourcesSupportedEnginesSupportedInstanceClasses) GoString() string {
	return s.String()
}

func (s *DescribeAvailableResourcesResponseBodyResourcesSupportedEnginesSupportedInstanceClasses) GetCategory() *string {
	return s.Category
}

func (s *DescribeAvailableResourcesResponseBodyResourcesSupportedEnginesSupportedInstanceClasses) GetDescription() *string {
	return s.Description
}

func (s *DescribeAvailableResourcesResponseBodyResourcesSupportedEnginesSupportedInstanceClasses) GetDisplayClass() *string {
	return s.DisplayClass
}

func (s *DescribeAvailableResourcesResponseBodyResourcesSupportedEnginesSupportedInstanceClasses) GetInstanceClass() *string {
	return s.InstanceClass
}

func (s *DescribeAvailableResourcesResponseBodyResourcesSupportedEnginesSupportedInstanceClasses) GetNodeCount() *DescribeAvailableResourcesResponseBodyResourcesSupportedEnginesSupportedInstanceClassesNodeCount {
	return s.NodeCount
}

func (s *DescribeAvailableResourcesResponseBodyResourcesSupportedEnginesSupportedInstanceClasses) GetStorageSize() *DescribeAvailableResourcesResponseBodyResourcesSupportedEnginesSupportedInstanceClassesStorageSize {
	return s.StorageSize
}

func (s *DescribeAvailableResourcesResponseBodyResourcesSupportedEnginesSupportedInstanceClasses) GetStorageType() *string {
	return s.StorageType
}

func (s *DescribeAvailableResourcesResponseBodyResourcesSupportedEnginesSupportedInstanceClasses) SetCategory(v string) *DescribeAvailableResourcesResponseBodyResourcesSupportedEnginesSupportedInstanceClasses {
	s.Category = &v
	return s
}

func (s *DescribeAvailableResourcesResponseBodyResourcesSupportedEnginesSupportedInstanceClasses) SetDescription(v string) *DescribeAvailableResourcesResponseBodyResourcesSupportedEnginesSupportedInstanceClasses {
	s.Description = &v
	return s
}

func (s *DescribeAvailableResourcesResponseBodyResourcesSupportedEnginesSupportedInstanceClasses) SetDisplayClass(v string) *DescribeAvailableResourcesResponseBodyResourcesSupportedEnginesSupportedInstanceClasses {
	s.DisplayClass = &v
	return s
}

func (s *DescribeAvailableResourcesResponseBodyResourcesSupportedEnginesSupportedInstanceClasses) SetInstanceClass(v string) *DescribeAvailableResourcesResponseBodyResourcesSupportedEnginesSupportedInstanceClasses {
	s.InstanceClass = &v
	return s
}

func (s *DescribeAvailableResourcesResponseBodyResourcesSupportedEnginesSupportedInstanceClasses) SetNodeCount(v *DescribeAvailableResourcesResponseBodyResourcesSupportedEnginesSupportedInstanceClassesNodeCount) *DescribeAvailableResourcesResponseBodyResourcesSupportedEnginesSupportedInstanceClasses {
	s.NodeCount = v
	return s
}

func (s *DescribeAvailableResourcesResponseBodyResourcesSupportedEnginesSupportedInstanceClasses) SetStorageSize(v *DescribeAvailableResourcesResponseBodyResourcesSupportedEnginesSupportedInstanceClassesStorageSize) *DescribeAvailableResourcesResponseBodyResourcesSupportedEnginesSupportedInstanceClasses {
	s.StorageSize = v
	return s
}

func (s *DescribeAvailableResourcesResponseBodyResourcesSupportedEnginesSupportedInstanceClasses) SetStorageType(v string) *DescribeAvailableResourcesResponseBodyResourcesSupportedEnginesSupportedInstanceClasses {
	s.StorageType = &v
	return s
}

func (s *DescribeAvailableResourcesResponseBodyResourcesSupportedEnginesSupportedInstanceClasses) Validate() error {
	return dara.Validate(s)
}

type DescribeAvailableResourcesResponseBodyResourcesSupportedEnginesSupportedInstanceClassesNodeCount struct {
	// The maximum number of compute nodes.
	//
	// example:
	//
	// 256
	MaxCount *string `json:"MaxCount,omitempty" xml:"MaxCount,omitempty"`
	// The minimum number of compute nodes.
	//
	// example:
	//
	// 4
	MinCount *string `json:"MinCount,omitempty" xml:"MinCount,omitempty"`
	// The step size for adding compute nodes.
	//
	// For example, if the value of this parameter is 4, compute nodes must be added by multiples of 4.
	//
	// example:
	//
	// 4
	Step *string `json:"Step,omitempty" xml:"Step,omitempty"`
}

func (s DescribeAvailableResourcesResponseBodyResourcesSupportedEnginesSupportedInstanceClassesNodeCount) String() string {
	return dara.Prettify(s)
}

func (s DescribeAvailableResourcesResponseBodyResourcesSupportedEnginesSupportedInstanceClassesNodeCount) GoString() string {
	return s.String()
}

func (s *DescribeAvailableResourcesResponseBodyResourcesSupportedEnginesSupportedInstanceClassesNodeCount) GetMaxCount() *string {
	return s.MaxCount
}

func (s *DescribeAvailableResourcesResponseBodyResourcesSupportedEnginesSupportedInstanceClassesNodeCount) GetMinCount() *string {
	return s.MinCount
}

func (s *DescribeAvailableResourcesResponseBodyResourcesSupportedEnginesSupportedInstanceClassesNodeCount) GetStep() *string {
	return s.Step
}

func (s *DescribeAvailableResourcesResponseBodyResourcesSupportedEnginesSupportedInstanceClassesNodeCount) SetMaxCount(v string) *DescribeAvailableResourcesResponseBodyResourcesSupportedEnginesSupportedInstanceClassesNodeCount {
	s.MaxCount = &v
	return s
}

func (s *DescribeAvailableResourcesResponseBodyResourcesSupportedEnginesSupportedInstanceClassesNodeCount) SetMinCount(v string) *DescribeAvailableResourcesResponseBodyResourcesSupportedEnginesSupportedInstanceClassesNodeCount {
	s.MinCount = &v
	return s
}

func (s *DescribeAvailableResourcesResponseBodyResourcesSupportedEnginesSupportedInstanceClassesNodeCount) SetStep(v string) *DescribeAvailableResourcesResponseBodyResourcesSupportedEnginesSupportedInstanceClassesNodeCount {
	s.Step = &v
	return s
}

func (s *DescribeAvailableResourcesResponseBodyResourcesSupportedEnginesSupportedInstanceClassesNodeCount) Validate() error {
	return dara.Validate(s)
}

type DescribeAvailableResourcesResponseBodyResourcesSupportedEnginesSupportedInstanceClassesStorageSize struct {
	// The maximum storage capacity of each compute node.
	//
	// example:
	//
	// 1000
	MaxCount *string `json:"MaxCount,omitempty" xml:"MaxCount,omitempty"`
	// The minimum storage capacity of each compute node.
	//
	// example:
	//
	// 50
	MinCount *string `json:"MinCount,omitempty" xml:"MinCount,omitempty"`
	// The step size for adding storage capacity for compute nodes.
	//
	// example:
	//
	// 50
	Step *string `json:"Step,omitempty" xml:"Step,omitempty"`
}

func (s DescribeAvailableResourcesResponseBodyResourcesSupportedEnginesSupportedInstanceClassesStorageSize) String() string {
	return dara.Prettify(s)
}

func (s DescribeAvailableResourcesResponseBodyResourcesSupportedEnginesSupportedInstanceClassesStorageSize) GoString() string {
	return s.String()
}

func (s *DescribeAvailableResourcesResponseBodyResourcesSupportedEnginesSupportedInstanceClassesStorageSize) GetMaxCount() *string {
	return s.MaxCount
}

func (s *DescribeAvailableResourcesResponseBodyResourcesSupportedEnginesSupportedInstanceClassesStorageSize) GetMinCount() *string {
	return s.MinCount
}

func (s *DescribeAvailableResourcesResponseBodyResourcesSupportedEnginesSupportedInstanceClassesStorageSize) GetStep() *string {
	return s.Step
}

func (s *DescribeAvailableResourcesResponseBodyResourcesSupportedEnginesSupportedInstanceClassesStorageSize) SetMaxCount(v string) *DescribeAvailableResourcesResponseBodyResourcesSupportedEnginesSupportedInstanceClassesStorageSize {
	s.MaxCount = &v
	return s
}

func (s *DescribeAvailableResourcesResponseBodyResourcesSupportedEnginesSupportedInstanceClassesStorageSize) SetMinCount(v string) *DescribeAvailableResourcesResponseBodyResourcesSupportedEnginesSupportedInstanceClassesStorageSize {
	s.MinCount = &v
	return s
}

func (s *DescribeAvailableResourcesResponseBodyResourcesSupportedEnginesSupportedInstanceClassesStorageSize) SetStep(v string) *DescribeAvailableResourcesResponseBodyResourcesSupportedEnginesSupportedInstanceClassesStorageSize {
	s.Step = &v
	return s
}

func (s *DescribeAvailableResourcesResponseBodyResourcesSupportedEnginesSupportedInstanceClassesStorageSize) Validate() error {
	return dara.Validate(s)
}

type iDescribeAvailableResourcesResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DescribeAvailableResourcesResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DescribeAvailableResourcesResponse
	GetStatusCode() *int32
	SetBody(v *DescribeAvailableResourcesResponseBody) *DescribeAvailableResourcesResponse
	GetBody() *DescribeAvailableResourcesResponseBody
}

type DescribeAvailableResourcesResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAvailableResourcesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAvailableResourcesResponse) String() string {
	return dara.Prettify(s)
}

func (s DescribeAvailableResourcesResponse) GoString() string {
	return s.String()
}

func (s *DescribeAvailableResourcesResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DescribeAvailableResourcesResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DescribeAvailableResourcesResponse) GetBody() *DescribeAvailableResourcesResponseBody {
	return s.Body
}

func (s *DescribeAvailableResourcesResponse) SetHeaders(v map[string]*string) *DescribeAvailableResourcesResponse {
	s.Headers = v
	return s
}

func (s *DescribeAvailableResourcesResponse) SetStatusCode(v int32) *DescribeAvailableResourcesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAvailableResourcesResponse) SetBody(v *DescribeAvailableResourcesResponseBody) *DescribeAvailableResourcesResponse {
	s.Body = v
	return s
}

func (s *DescribeAvailableResourcesResponse) Validate() error {
	return dara.Validate(s)
}

type iDescribeBackupJobRequest interface {
	dara.Model
	String() string
	GoString() string
	SetBackupJobId(v int64) *DescribeBackupJobRequest
	GetBackupJobId() *int64
	SetDBInstanceId(v string) *DescribeBackupJobRequest
	GetDBInstanceId() *string
}

type DescribeBackupJobRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 123
	BackupJobId *int64 `json:"BackupJobId,omitempty" xml:"BackupJobId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
}

func (s DescribeBackupJobRequest) String() string {
	return dara.Prettify(s)
}

func (s DescribeBackupJobRequest) GoString() string {
	return s.String()
}

func (s *DescribeBackupJobRequest) GetBackupJobId() *int64 {
	return s.BackupJobId
}

func (s *DescribeBackupJobRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *DescribeBackupJobRequest) SetBackupJobId(v int64) *DescribeBackupJobRequest {
	s.BackupJobId = &v
	return s
}

func (s *DescribeBackupJobRequest) SetDBInstanceId(v string) *DescribeBackupJobRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeBackupJobRequest) Validate() error {
	return dara.Validate(s)
}

type iDescribeBackupJobResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetBackupId(v string) *DescribeBackupJobResponseBody
	GetBackupId() *string
	SetBackupJobId(v string) *DescribeBackupJobResponseBody
	GetBackupJobId() *string
	SetBackupMode(v string) *DescribeBackupJobResponseBody
	GetBackupMode() *string
	SetBackupStatus(v string) *DescribeBackupJobResponseBody
	GetBackupStatus() *string
	SetProcess(v string) *DescribeBackupJobResponseBody
	GetProcess() *string
	SetRequestId(v string) *DescribeBackupJobResponseBody
	GetRequestId() *string
	SetStartTime(v string) *DescribeBackupJobResponseBody
	GetStartTime() *string
}

type DescribeBackupJobResponseBody struct {
	// example:
	//
	// 1111111111
	BackupId *string `json:"BackupId,omitempty" xml:"BackupId,omitempty"`
	// example:
	//
	// 123
	BackupJobId *string `json:"BackupJobId,omitempty" xml:"BackupJobId,omitempty"`
	// example:
	//
	// Automated
	BackupMode *string `json:"BackupMode,omitempty" xml:"BackupMode,omitempty"`
	// example:
	//
	// backup
	BackupStatus *string `json:"BackupStatus,omitempty" xml:"BackupStatus,omitempty"`
	// example:
	//
	// 50%
	Process *string `json:"Process,omitempty" xml:"Process,omitempty"`
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// 2023-01-03T16:00:00Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeBackupJobResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DescribeBackupJobResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeBackupJobResponseBody) GetBackupId() *string {
	return s.BackupId
}

func (s *DescribeBackupJobResponseBody) GetBackupJobId() *string {
	return s.BackupJobId
}

func (s *DescribeBackupJobResponseBody) GetBackupMode() *string {
	return s.BackupMode
}

func (s *DescribeBackupJobResponseBody) GetBackupStatus() *string {
	return s.BackupStatus
}

func (s *DescribeBackupJobResponseBody) GetProcess() *string {
	return s.Process
}

func (s *DescribeBackupJobResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DescribeBackupJobResponseBody) GetStartTime() *string {
	return s.StartTime
}

func (s *DescribeBackupJobResponseBody) SetBackupId(v string) *DescribeBackupJobResponseBody {
	s.BackupId = &v
	return s
}

func (s *DescribeBackupJobResponseBody) SetBackupJobId(v string) *DescribeBackupJobResponseBody {
	s.BackupJobId = &v
	return s
}

func (s *DescribeBackupJobResponseBody) SetBackupMode(v string) *DescribeBackupJobResponseBody {
	s.BackupMode = &v
	return s
}

func (s *DescribeBackupJobResponseBody) SetBackupStatus(v string) *DescribeBackupJobResponseBody {
	s.BackupStatus = &v
	return s
}

func (s *DescribeBackupJobResponseBody) SetProcess(v string) *DescribeBackupJobResponseBody {
	s.Process = &v
	return s
}

func (s *DescribeBackupJobResponseBody) SetRequestId(v string) *DescribeBackupJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeBackupJobResponseBody) SetStartTime(v string) *DescribeBackupJobResponseBody {
	s.StartTime = &v
	return s
}

func (s *DescribeBackupJobResponseBody) Validate() error {
	return dara.Validate(s)
}

type iDescribeBackupJobResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DescribeBackupJobResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DescribeBackupJobResponse
	GetStatusCode() *int32
	SetBody(v *DescribeBackupJobResponseBody) *DescribeBackupJobResponse
	GetBody() *DescribeBackupJobResponseBody
}

type DescribeBackupJobResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeBackupJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeBackupJobResponse) String() string {
	return dara.Prettify(s)
}

func (s DescribeBackupJobResponse) GoString() string {
	return s.String()
}

func (s *DescribeBackupJobResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DescribeBackupJobResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DescribeBackupJobResponse) GetBody() *DescribeBackupJobResponseBody {
	return s.Body
}

func (s *DescribeBackupJobResponse) SetHeaders(v map[string]*string) *DescribeBackupJobResponse {
	s.Headers = v
	return s
}

func (s *DescribeBackupJobResponse) SetStatusCode(v int32) *DescribeBackupJobResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeBackupJobResponse) SetBody(v *DescribeBackupJobResponseBody) *DescribeBackupJobResponse {
	s.Body = v
	return s
}

func (s *DescribeBackupJobResponse) Validate() error {
	return dara.Validate(s)
}

type iDescribeBackupPolicyRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *DescribeBackupPolicyRequest
	GetDBInstanceId() *string
}

type DescribeBackupPolicyRequest struct {
	// The ID of the instance.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the details of all AnalyticDB for PostgreSQL instances in a specific region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp***************
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
}

func (s DescribeBackupPolicyRequest) String() string {
	return dara.Prettify(s)
}

func (s DescribeBackupPolicyRequest) GoString() string {
	return s.String()
}

func (s *DescribeBackupPolicyRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *DescribeBackupPolicyRequest) SetDBInstanceId(v string) *DescribeBackupPolicyRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeBackupPolicyRequest) Validate() error {
	return dara.Validate(s)
}

type iDescribeBackupPolicyResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetBackupRetentionPeriod(v int32) *DescribeBackupPolicyResponseBody
	GetBackupRetentionPeriod() *int32
	SetEnableRecoveryPoint(v bool) *DescribeBackupPolicyResponseBody
	GetEnableRecoveryPoint() *bool
	SetPreferredBackupPeriod(v string) *DescribeBackupPolicyResponseBody
	GetPreferredBackupPeriod() *string
	SetPreferredBackupTime(v string) *DescribeBackupPolicyResponseBody
	GetPreferredBackupTime() *string
	SetRecoveryPointPeriod(v string) *DescribeBackupPolicyResponseBody
	GetRecoveryPointPeriod() *string
	SetRequestId(v string) *DescribeBackupPolicyResponseBody
	GetRequestId() *string
}

type DescribeBackupPolicyResponseBody struct {
	// The number of days for which data backup files are retained.
	//
	// example:
	//
	// 7
	BackupRetentionPeriod *int32 `json:"BackupRetentionPeriod,omitempty" xml:"BackupRetentionPeriod,omitempty"`
	// Indicates whether automatic point-in-time backup is enabled. Valid values:
	//
	// 	- **true**: Automatic point-in-time backup is enabled.
	//
	// 	- **false**: Automatic point-in-time backup is disabled.
	//
	// example:
	//
	// true
	EnableRecoveryPoint *bool `json:"EnableRecoveryPoint,omitempty" xml:"EnableRecoveryPoint,omitempty"`
	// The cycle based on which backups are performed. If more than one day of the week is specified, the days of the week are separated by commas (,). Valid values:
	//
	// 	- **Monday**
	//
	// 	- **Tuesday**
	//
	// 	- **Wednesday**
	//
	// 	- **Thursday**
	//
	// 	- **Friday**
	//
	// 	- **Saturday**
	//
	// 	- **Sunday**
	//
	// example:
	//
	// Wednesday,Friday
	PreferredBackupPeriod *string `json:"PreferredBackupPeriod,omitempty" xml:"PreferredBackupPeriod,omitempty"`
	// The backup time. The time is in the HH:mmZ-HH:mmZ format. The time is displayed in UTC.
	//
	// example:
	//
	// 12:00Z-13:00Z
	PreferredBackupTime *string `json:"PreferredBackupTime,omitempty" xml:"PreferredBackupTime,omitempty"`
	// The frequency of the point-in-time backup. Valid values:
	//
	// 	- **1**: per hour
	//
	// 	- **2**: per 2 hours
	//
	// 	- **4**: per 4 hours
	//
	// 	- **8**: per 8 hours
	//
	// example:
	//
	// 1
	RecoveryPointPeriod *string `json:"RecoveryPointPeriod,omitempty" xml:"RecoveryPointPeriod,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 9E6B3287-A3E2-5A87-B8D8-E9**********
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeBackupPolicyResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DescribeBackupPolicyResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeBackupPolicyResponseBody) GetBackupRetentionPeriod() *int32 {
	return s.BackupRetentionPeriod
}

func (s *DescribeBackupPolicyResponseBody) GetEnableRecoveryPoint() *bool {
	return s.EnableRecoveryPoint
}

func (s *DescribeBackupPolicyResponseBody) GetPreferredBackupPeriod() *string {
	return s.PreferredBackupPeriod
}

func (s *DescribeBackupPolicyResponseBody) GetPreferredBackupTime() *string {
	return s.PreferredBackupTime
}

func (s *DescribeBackupPolicyResponseBody) GetRecoveryPointPeriod() *string {
	return s.RecoveryPointPeriod
}

func (s *DescribeBackupPolicyResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DescribeBackupPolicyResponseBody) SetBackupRetentionPeriod(v int32) *DescribeBackupPolicyResponseBody {
	s.BackupRetentionPeriod = &v
	return s
}

func (s *DescribeBackupPolicyResponseBody) SetEnableRecoveryPoint(v bool) *DescribeBackupPolicyResponseBody {
	s.EnableRecoveryPoint = &v
	return s
}

func (s *DescribeBackupPolicyResponseBody) SetPreferredBackupPeriod(v string) *DescribeBackupPolicyResponseBody {
	s.PreferredBackupPeriod = &v
	return s
}

func (s *DescribeBackupPolicyResponseBody) SetPreferredBackupTime(v string) *DescribeBackupPolicyResponseBody {
	s.PreferredBackupTime = &v
	return s
}

func (s *DescribeBackupPolicyResponseBody) SetRecoveryPointPeriod(v string) *DescribeBackupPolicyResponseBody {
	s.RecoveryPointPeriod = &v
	return s
}

func (s *DescribeBackupPolicyResponseBody) SetRequestId(v string) *DescribeBackupPolicyResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeBackupPolicyResponseBody) Validate() error {
	return dara.Validate(s)
}

type iDescribeBackupPolicyResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DescribeBackupPolicyResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DescribeBackupPolicyResponse
	GetStatusCode() *int32
	SetBody(v *DescribeBackupPolicyResponseBody) *DescribeBackupPolicyResponse
	GetBody() *DescribeBackupPolicyResponseBody
}

type DescribeBackupPolicyResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeBackupPolicyResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeBackupPolicyResponse) String() string {
	return dara.Prettify(s)
}

func (s DescribeBackupPolicyResponse) GoString() string {
	return s.String()
}

func (s *DescribeBackupPolicyResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DescribeBackupPolicyResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DescribeBackupPolicyResponse) GetBody() *DescribeBackupPolicyResponseBody {
	return s.Body
}

func (s *DescribeBackupPolicyResponse) SetHeaders(v map[string]*string) *DescribeBackupPolicyResponse {
	s.Headers = v
	return s
}

func (s *DescribeBackupPolicyResponse) SetStatusCode(v int32) *DescribeBackupPolicyResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeBackupPolicyResponse) SetBody(v *DescribeBackupPolicyResponseBody) *DescribeBackupPolicyResponse {
	s.Body = v
	return s
}

func (s *DescribeBackupPolicyResponse) Validate() error {
	return dara.Validate(s)
}

type iDescribeCollectionRequest interface {
	dara.Model
	String() string
	GoString() string
	SetCollection(v string) *DescribeCollectionRequest
	GetCollection() *string
	SetDBInstanceId(v string) *DescribeCollectionRequest
	GetDBInstanceId() *string
	SetNamespace(v string) *DescribeCollectionRequest
	GetNamespace() *string
	SetNamespacePassword(v string) *DescribeCollectionRequest
	GetNamespacePassword() *string
	SetOwnerId(v int64) *DescribeCollectionRequest
	GetOwnerId() *int64
	SetRegionId(v string) *DescribeCollectionRequest
	GetRegionId() *string
	SetWorkspaceId(v string) *DescribeCollectionRequest
	GetWorkspaceId() *string
}

type DescribeCollectionRequest struct {
	// The name of the collection.
	//
	// >  You can call the [ListCollections](https://help.aliyun.com/document_detail/2401503.html) operation to query a list of collections.
	//
	// This parameter is required.
	//
	// example:
	//
	// document
	Collection *string `json:"Collection,omitempty" xml:"Collection,omitempty"`
	// The instance ID.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The name of the namespace.
	//
	// >  You can call the [ListNamespaces](https://help.aliyun.com/document_detail/2401502.html) operation to query a list of namespaces.
	//
	// example:
	//
	// mynamespace
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// The password of the namespace.
	//
	// This parameter is required.
	//
	// example:
	//
	// testpassword
	NamespacePassword *string `json:"NamespacePassword,omitempty" xml:"NamespacePassword,omitempty"`
	OwnerId           *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The region ID of the instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the workspace that consists of multiple AnalyticDB for PostgreSQL instances. You must specify one of the WorkspaceId and DBInstanceId parameters. If you specify both parameters, the WorkspaceId parameter takes effect.
	//
	// example:
	//
	// gp-ws-*****
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s DescribeCollectionRequest) String() string {
	return dara.Prettify(s)
}

func (s DescribeCollectionRequest) GoString() string {
	return s.String()
}

func (s *DescribeCollectionRequest) GetCollection() *string {
	return s.Collection
}

func (s *DescribeCollectionRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *DescribeCollectionRequest) GetNamespace() *string {
	return s.Namespace
}

func (s *DescribeCollectionRequest) GetNamespacePassword() *string {
	return s.NamespacePassword
}

func (s *DescribeCollectionRequest) GetOwnerId() *int64 {
	return s.OwnerId
}

func (s *DescribeCollectionRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *DescribeCollectionRequest) GetWorkspaceId() *string {
	return s.WorkspaceId
}

func (s *DescribeCollectionRequest) SetCollection(v string) *DescribeCollectionRequest {
	s.Collection = &v
	return s
}

func (s *DescribeCollectionRequest) SetDBInstanceId(v string) *DescribeCollectionRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeCollectionRequest) SetNamespace(v string) *DescribeCollectionRequest {
	s.Namespace = &v
	return s
}

func (s *DescribeCollectionRequest) SetNamespacePassword(v string) *DescribeCollectionRequest {
	s.NamespacePassword = &v
	return s
}

func (s *DescribeCollectionRequest) SetOwnerId(v int64) *DescribeCollectionRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeCollectionRequest) SetRegionId(v string) *DescribeCollectionRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeCollectionRequest) SetWorkspaceId(v string) *DescribeCollectionRequest {
	s.WorkspaceId = &v
	return s
}

func (s *DescribeCollectionRequest) Validate() error {
	return dara.Validate(s)
}

type iDescribeCollectionResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *DescribeCollectionResponseBody
	GetDBInstanceId() *string
	SetDimension(v int32) *DescribeCollectionResponseBody
	GetDimension() *int32
	SetFullTextRetrievalFields(v string) *DescribeCollectionResponseBody
	GetFullTextRetrievalFields() *string
	SetMessage(v string) *DescribeCollectionResponseBody
	GetMessage() *string
	SetMetadata(v map[string]*string) *DescribeCollectionResponseBody
	GetMetadata() map[string]*string
	SetMetrics(v string) *DescribeCollectionResponseBody
	GetMetrics() *string
	SetNamespace(v string) *DescribeCollectionResponseBody
	GetNamespace() *string
	SetParser(v string) *DescribeCollectionResponseBody
	GetParser() *string
	SetRegionId(v string) *DescribeCollectionResponseBody
	GetRegionId() *string
	SetRequestId(v string) *DescribeCollectionResponseBody
	GetRequestId() *string
	SetSparseVectorMetrics(v string) *DescribeCollectionResponseBody
	GetSparseVectorMetrics() *string
	SetStatus(v string) *DescribeCollectionResponseBody
	GetStatus() *string
	SetSupportSparse(v bool) *DescribeCollectionResponseBody
	GetSupportSparse() *bool
}

type DescribeCollectionResponseBody struct {
	// The instance ID.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The number of vector dimensions.
	//
	// example:
	//
	// 1024
	Dimension *int32 `json:"Dimension,omitempty" xml:"Dimension,omitempty"`
	// The fields that are used for full-text search. Multiple fields are separated by commas (,).
	//
	// example:
	//
	// title,content
	FullTextRetrievalFields *string `json:"FullTextRetrievalFields,omitempty" xml:"FullTextRetrievalFields,omitempty"`
	// The returned message.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The metadata of vector data, which is a JSON string in the MAP format. The key specifies the field name, and the value specifies the data type.
	//
	// **
	//
	// **Warning*	- Reserved fields such as id, vector, and to_tsvector cannot be used.
	Metadata map[string]*string `json:"Metadata,omitempty" xml:"Metadata,omitempty"`
	// The distance metrics.
	//
	// example:
	//
	// cosine
	Metrics *string `json:"Metrics,omitempty" xml:"Metrics,omitempty"`
	// The name of the namespace.
	//
	// example:
	//
	// mynamespace
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// The analyzer that is used for full-text search.
	//
	// example:
	//
	// zh_cn
	Parser *string `json:"Parser,omitempty" xml:"Parser,omitempty"`
	// The region ID of the instance.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId           *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	SparseVectorMetrics *string `json:"SparseVectorMetrics,omitempty" xml:"SparseVectorMetrics,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **success**
	//
	// 	- **fail**
	//
	// example:
	//
	// success
	Status        *string `json:"Status,omitempty" xml:"Status,omitempty"`
	SupportSparse *bool   `json:"SupportSparse,omitempty" xml:"SupportSparse,omitempty"`
}

func (s DescribeCollectionResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DescribeCollectionResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeCollectionResponseBody) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *DescribeCollectionResponseBody) GetDimension() *int32 {
	return s.Dimension
}

func (s *DescribeCollectionResponseBody) GetFullTextRetrievalFields() *string {
	return s.FullTextRetrievalFields
}

func (s *DescribeCollectionResponseBody) GetMessage() *string {
	return s.Message
}

func (s *DescribeCollectionResponseBody) GetMetadata() map[string]*string {
	return s.Metadata
}

func (s *DescribeCollectionResponseBody) GetMetrics() *string {
	return s.Metrics
}

func (s *DescribeCollectionResponseBody) GetNamespace() *string {
	return s.Namespace
}

func (s *DescribeCollectionResponseBody) GetParser() *string {
	return s.Parser
}

func (s *DescribeCollectionResponseBody) GetRegionId() *string {
	return s.RegionId
}

func (s *DescribeCollectionResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DescribeCollectionResponseBody) GetSparseVectorMetrics() *string {
	return s.SparseVectorMetrics
}

func (s *DescribeCollectionResponseBody) GetStatus() *string {
	return s.Status
}

func (s *DescribeCollectionResponseBody) GetSupportSparse() *bool {
	return s.SupportSparse
}

func (s *DescribeCollectionResponseBody) SetDBInstanceId(v string) *DescribeCollectionResponseBody {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeCollectionResponseBody) SetDimension(v int32) *DescribeCollectionResponseBody {
	s.Dimension = &v
	return s
}

func (s *DescribeCollectionResponseBody) SetFullTextRetrievalFields(v string) *DescribeCollectionResponseBody {
	s.FullTextRetrievalFields = &v
	return s
}

func (s *DescribeCollectionResponseBody) SetMessage(v string) *DescribeCollectionResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeCollectionResponseBody) SetMetadata(v map[string]*string) *DescribeCollectionResponseBody {
	s.Metadata = v
	return s
}

func (s *DescribeCollectionResponseBody) SetMetrics(v string) *DescribeCollectionResponseBody {
	s.Metrics = &v
	return s
}

func (s *DescribeCollectionResponseBody) SetNamespace(v string) *DescribeCollectionResponseBody {
	s.Namespace = &v
	return s
}

func (s *DescribeCollectionResponseBody) SetParser(v string) *DescribeCollectionResponseBody {
	s.Parser = &v
	return s
}

func (s *DescribeCollectionResponseBody) SetRegionId(v string) *DescribeCollectionResponseBody {
	s.RegionId = &v
	return s
}

func (s *DescribeCollectionResponseBody) SetRequestId(v string) *DescribeCollectionResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeCollectionResponseBody) SetSparseVectorMetrics(v string) *DescribeCollectionResponseBody {
	s.SparseVectorMetrics = &v
	return s
}

func (s *DescribeCollectionResponseBody) SetStatus(v string) *DescribeCollectionResponseBody {
	s.Status = &v
	return s
}

func (s *DescribeCollectionResponseBody) SetSupportSparse(v bool) *DescribeCollectionResponseBody {
	s.SupportSparse = &v
	return s
}

func (s *DescribeCollectionResponseBody) Validate() error {
	return dara.Validate(s)
}

type iDescribeCollectionResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DescribeCollectionResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DescribeCollectionResponse
	GetStatusCode() *int32
	SetBody(v *DescribeCollectionResponseBody) *DescribeCollectionResponse
	GetBody() *DescribeCollectionResponseBody
}

type DescribeCollectionResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeCollectionResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeCollectionResponse) String() string {
	return dara.Prettify(s)
}

func (s DescribeCollectionResponse) GoString() string {
	return s.String()
}

func (s *DescribeCollectionResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DescribeCollectionResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DescribeCollectionResponse) GetBody() *DescribeCollectionResponseBody {
	return s.Body
}

func (s *DescribeCollectionResponse) SetHeaders(v map[string]*string) *DescribeCollectionResponse {
	s.Headers = v
	return s
}

func (s *DescribeCollectionResponse) SetStatusCode(v int32) *DescribeCollectionResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeCollectionResponse) SetBody(v *DescribeCollectionResponseBody) *DescribeCollectionResponse {
	s.Body = v
	return s
}

func (s *DescribeCollectionResponse) Validate() error {
	return dara.Validate(s)
}

type iDescribeCreateIndexJobRequest interface {
	dara.Model
	String() string
	GoString() string
	SetCollection(v string) *DescribeCreateIndexJobRequest
	GetCollection() *string
	SetDBInstanceId(v string) *DescribeCreateIndexJobRequest
	GetDBInstanceId() *string
	SetJobId(v string) *DescribeCreateIndexJobRequest
	GetJobId() *string
	SetNamespace(v string) *DescribeCreateIndexJobRequest
	GetNamespace() *string
	SetNamespacePassword(v string) *DescribeCreateIndexJobRequest
	GetNamespacePassword() *string
	SetOwnerId(v int64) *DescribeCreateIndexJobRequest
	GetOwnerId() *int64
	SetRegionId(v string) *DescribeCreateIndexJobRequest
	GetRegionId() *string
	SetWorkspaceId(v string) *DescribeCreateIndexJobRequest
	GetWorkspaceId() *string
}

type DescribeCreateIndexJobRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// testcollection
	Collection *string `json:"Collection,omitempty" xml:"Collection,omitempty"`
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 231460f8-75dc-405e-a669-0c5204887e91
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// mynamespace
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// testpassword
	NamespacePassword *string `json:"NamespacePassword,omitempty" xml:"NamespacePassword,omitempty"`
	OwnerId           *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// example:
	//
	// gp-ws-*****
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s DescribeCreateIndexJobRequest) String() string {
	return dara.Prettify(s)
}

func (s DescribeCreateIndexJobRequest) GoString() string {
	return s.String()
}

func (s *DescribeCreateIndexJobRequest) GetCollection() *string {
	return s.Collection
}

func (s *DescribeCreateIndexJobRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *DescribeCreateIndexJobRequest) GetJobId() *string {
	return s.JobId
}

func (s *DescribeCreateIndexJobRequest) GetNamespace() *string {
	return s.Namespace
}

func (s *DescribeCreateIndexJobRequest) GetNamespacePassword() *string {
	return s.NamespacePassword
}

func (s *DescribeCreateIndexJobRequest) GetOwnerId() *int64 {
	return s.OwnerId
}

func (s *DescribeCreateIndexJobRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *DescribeCreateIndexJobRequest) GetWorkspaceId() *string {
	return s.WorkspaceId
}

func (s *DescribeCreateIndexJobRequest) SetCollection(v string) *DescribeCreateIndexJobRequest {
	s.Collection = &v
	return s
}

func (s *DescribeCreateIndexJobRequest) SetDBInstanceId(v string) *DescribeCreateIndexJobRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeCreateIndexJobRequest) SetJobId(v string) *DescribeCreateIndexJobRequest {
	s.JobId = &v
	return s
}

func (s *DescribeCreateIndexJobRequest) SetNamespace(v string) *DescribeCreateIndexJobRequest {
	s.Namespace = &v
	return s
}

func (s *DescribeCreateIndexJobRequest) SetNamespacePassword(v string) *DescribeCreateIndexJobRequest {
	s.NamespacePassword = &v
	return s
}

func (s *DescribeCreateIndexJobRequest) SetOwnerId(v int64) *DescribeCreateIndexJobRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeCreateIndexJobRequest) SetRegionId(v string) *DescribeCreateIndexJobRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeCreateIndexJobRequest) SetWorkspaceId(v string) *DescribeCreateIndexJobRequest {
	s.WorkspaceId = &v
	return s
}

func (s *DescribeCreateIndexJobRequest) Validate() error {
	return dara.Validate(s)
}

type iDescribeCreateIndexJobResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetJob(v *DescribeCreateIndexJobResponseBodyJob) *DescribeCreateIndexJobResponseBody
	GetJob() *DescribeCreateIndexJobResponseBodyJob
	SetMessage(v string) *DescribeCreateIndexJobResponseBody
	GetMessage() *string
	SetRequestId(v string) *DescribeCreateIndexJobResponseBody
	GetRequestId() *string
	SetStatus(v string) *DescribeCreateIndexJobResponseBody
	GetStatus() *string
}

type DescribeCreateIndexJobResponseBody struct {
	Job *DescribeCreateIndexJobResponseBodyJob `json:"Job,omitempty" xml:"Job,omitempty" type:"Struct"`
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeCreateIndexJobResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DescribeCreateIndexJobResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeCreateIndexJobResponseBody) GetJob() *DescribeCreateIndexJobResponseBodyJob {
	return s.Job
}

func (s *DescribeCreateIndexJobResponseBody) GetMessage() *string {
	return s.Message
}

func (s *DescribeCreateIndexJobResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DescribeCreateIndexJobResponseBody) GetStatus() *string {
	return s.Status
}

func (s *DescribeCreateIndexJobResponseBody) SetJob(v *DescribeCreateIndexJobResponseBodyJob) *DescribeCreateIndexJobResponseBody {
	s.Job = v
	return s
}

func (s *DescribeCreateIndexJobResponseBody) SetMessage(v string) *DescribeCreateIndexJobResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeCreateIndexJobResponseBody) SetRequestId(v string) *DescribeCreateIndexJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeCreateIndexJobResponseBody) SetStatus(v string) *DescribeCreateIndexJobResponseBody {
	s.Status = &v
	return s
}

func (s *DescribeCreateIndexJobResponseBody) Validate() error {
	return dara.Validate(s)
}

type DescribeCreateIndexJobResponseBodyJob struct {
	// example:
	//
	// false
	Completed *bool `json:"Completed,omitempty" xml:"Completed,omitempty"`
	// example:
	//
	// 2024-01-08 16:52:04.864664
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// Failed to connect database.
	Error *string `json:"Error,omitempty" xml:"Error,omitempty"`
	// Job ID。
	//
	// example:
	//
	// 231460f8-75dc-405e-a669-0c5204887e91
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// 20
	Progress *int32 `json:"Progress,omitempty" xml:"Progress,omitempty"`
	// example:
	//
	// Running
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// example:
	//
	// 2024-01-08 16:53:04.864664
	UpdateTime *string `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
}

func (s DescribeCreateIndexJobResponseBodyJob) String() string {
	return dara.Prettify(s)
}

func (s DescribeCreateIndexJobResponseBodyJob) GoString() string {
	return s.String()
}

func (s *DescribeCreateIndexJobResponseBodyJob) GetCompleted() *bool {
	return s.Completed
}

func (s *DescribeCreateIndexJobResponseBodyJob) GetCreateTime() *string {
	return s.CreateTime
}

func (s *DescribeCreateIndexJobResponseBodyJob) GetError() *string {
	return s.Error
}

func (s *DescribeCreateIndexJobResponseBodyJob) GetId() *string {
	return s.Id
}

func (s *DescribeCreateIndexJobResponseBodyJob) GetProgress() *int32 {
	return s.Progress
}

func (s *DescribeCreateIndexJobResponseBodyJob) GetStatus() *string {
	return s.Status
}

func (s *DescribeCreateIndexJobResponseBodyJob) GetUpdateTime() *string {
	return s.UpdateTime
}

func (s *DescribeCreateIndexJobResponseBodyJob) SetCompleted(v bool) *DescribeCreateIndexJobResponseBodyJob {
	s.Completed = &v
	return s
}

func (s *DescribeCreateIndexJobResponseBodyJob) SetCreateTime(v string) *DescribeCreateIndexJobResponseBodyJob {
	s.CreateTime = &v
	return s
}

func (s *DescribeCreateIndexJobResponseBodyJob) SetError(v string) *DescribeCreateIndexJobResponseBodyJob {
	s.Error = &v
	return s
}

func (s *DescribeCreateIndexJobResponseBodyJob) SetId(v string) *DescribeCreateIndexJobResponseBodyJob {
	s.Id = &v
	return s
}

func (s *DescribeCreateIndexJobResponseBodyJob) SetProgress(v int32) *DescribeCreateIndexJobResponseBodyJob {
	s.Progress = &v
	return s
}

func (s *DescribeCreateIndexJobResponseBodyJob) SetStatus(v string) *DescribeCreateIndexJobResponseBodyJob {
	s.Status = &v
	return s
}

func (s *DescribeCreateIndexJobResponseBodyJob) SetUpdateTime(v string) *DescribeCreateIndexJobResponseBodyJob {
	s.UpdateTime = &v
	return s
}

func (s *DescribeCreateIndexJobResponseBodyJob) Validate() error {
	return dara.Validate(s)
}

type iDescribeCreateIndexJobResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DescribeCreateIndexJobResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DescribeCreateIndexJobResponse
	GetStatusCode() *int32
	SetBody(v *DescribeCreateIndexJobResponseBody) *DescribeCreateIndexJobResponse
	GetBody() *DescribeCreateIndexJobResponseBody
}

type DescribeCreateIndexJobResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeCreateIndexJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeCreateIndexJobResponse) String() string {
	return dara.Prettify(s)
}

func (s DescribeCreateIndexJobResponse) GoString() string {
	return s.String()
}

func (s *DescribeCreateIndexJobResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DescribeCreateIndexJobResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DescribeCreateIndexJobResponse) GetBody() *DescribeCreateIndexJobResponseBody {
	return s.Body
}

func (s *DescribeCreateIndexJobResponse) SetHeaders(v map[string]*string) *DescribeCreateIndexJobResponse {
	s.Headers = v
	return s
}

func (s *DescribeCreateIndexJobResponse) SetStatusCode(v int32) *DescribeCreateIndexJobResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeCreateIndexJobResponse) SetBody(v *DescribeCreateIndexJobResponseBody) *DescribeCreateIndexJobResponse {
	s.Body = v
	return s
}

func (s *DescribeCreateIndexJobResponse) Validate() error {
	return dara.Validate(s)
}

type iDescribeDBClusterNodeRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *DescribeDBClusterNodeRequest
	GetDBInstanceId() *string
	SetNodeType(v string) *DescribeDBClusterNodeRequest
	GetNodeType() *string
}

type DescribeDBClusterNodeRequest struct {
	// The instance ID.
	//
	// > You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query details about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp***************
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The node type. Valid values:
	//
	// 	- **master**: coordinator node.
	//
	// 	- **segment**: compute node.
	//
	// > If you do not specify this parameter, the information about all nodes is returned.
	//
	// example:
	//
	// master
	NodeType *string `json:"NodeType,omitempty" xml:"NodeType,omitempty"`
}

func (s DescribeDBClusterNodeRequest) String() string {
	return dara.Prettify(s)
}

func (s DescribeDBClusterNodeRequest) GoString() string {
	return s.String()
}

func (s *DescribeDBClusterNodeRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *DescribeDBClusterNodeRequest) GetNodeType() *string {
	return s.NodeType
}

func (s *DescribeDBClusterNodeRequest) SetDBInstanceId(v string) *DescribeDBClusterNodeRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDBClusterNodeRequest) SetNodeType(v string) *DescribeDBClusterNodeRequest {
	s.NodeType = &v
	return s
}

func (s *DescribeDBClusterNodeRequest) Validate() error {
	return dara.Validate(s)
}

type iDescribeDBClusterNodeResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetDBClusterId(v string) *DescribeDBClusterNodeResponseBody
	GetDBClusterId() *string
	SetNodes(v []*DescribeDBClusterNodeResponseBodyNodes) *DescribeDBClusterNodeResponseBody
	GetNodes() []*DescribeDBClusterNodeResponseBodyNodes
	SetRequestId(v string) *DescribeDBClusterNodeResponseBody
	GetRequestId() *string
}

type DescribeDBClusterNodeResponseBody struct {
	// The instance ID.
	//
	// example:
	//
	// gp-bp***************
	DBClusterId *string `json:"DBClusterId,omitempty" xml:"DBClusterId,omitempty"`
	// The name of the node.
	Nodes []*DescribeDBClusterNodeResponseBodyNodes `json:"Nodes,omitempty" xml:"Nodes,omitempty" type:"Repeated"`
	// The request ID.
	//
	// example:
	//
	// 87E44B48-B306-4AD3-A63B-C8**********
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeDBClusterNodeResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DescribeDBClusterNodeResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDBClusterNodeResponseBody) GetDBClusterId() *string {
	return s.DBClusterId
}

func (s *DescribeDBClusterNodeResponseBody) GetNodes() []*DescribeDBClusterNodeResponseBodyNodes {
	return s.Nodes
}

func (s *DescribeDBClusterNodeResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DescribeDBClusterNodeResponseBody) SetDBClusterId(v string) *DescribeDBClusterNodeResponseBody {
	s.DBClusterId = &v
	return s
}

func (s *DescribeDBClusterNodeResponseBody) SetNodes(v []*DescribeDBClusterNodeResponseBodyNodes) *DescribeDBClusterNodeResponseBody {
	s.Nodes = v
	return s
}

func (s *DescribeDBClusterNodeResponseBody) SetRequestId(v string) *DescribeDBClusterNodeResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDBClusterNodeResponseBody) Validate() error {
	return dara.Validate(s)
}

type DescribeDBClusterNodeResponseBodyNodes struct {
	// The name of the node.
	//
	// example:
	//
	// master-10*******
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s DescribeDBClusterNodeResponseBodyNodes) String() string {
	return dara.Prettify(s)
}

func (s DescribeDBClusterNodeResponseBodyNodes) GoString() string {
	return s.String()
}

func (s *DescribeDBClusterNodeResponseBodyNodes) GetName() *string {
	return s.Name
}

func (s *DescribeDBClusterNodeResponseBodyNodes) SetName(v string) *DescribeDBClusterNodeResponseBodyNodes {
	s.Name = &v
	return s
}

func (s *DescribeDBClusterNodeResponseBodyNodes) Validate() error {
	return dara.Validate(s)
}

type iDescribeDBClusterNodeResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DescribeDBClusterNodeResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DescribeDBClusterNodeResponse
	GetStatusCode() *int32
	SetBody(v *DescribeDBClusterNodeResponseBody) *DescribeDBClusterNodeResponse
	GetBody() *DescribeDBClusterNodeResponseBody
}

type DescribeDBClusterNodeResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeDBClusterNodeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeDBClusterNodeResponse) String() string {
	return dara.Prettify(s)
}

func (s DescribeDBClusterNodeResponse) GoString() string {
	return s.String()
}

func (s *DescribeDBClusterNodeResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DescribeDBClusterNodeResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DescribeDBClusterNodeResponse) GetBody() *DescribeDBClusterNodeResponseBody {
	return s.Body
}

func (s *DescribeDBClusterNodeResponse) SetHeaders(v map[string]*string) *DescribeDBClusterNodeResponse {
	s.Headers = v
	return s
}

func (s *DescribeDBClusterNodeResponse) SetStatusCode(v int32) *DescribeDBClusterNodeResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDBClusterNodeResponse) SetBody(v *DescribeDBClusterNodeResponseBody) *DescribeDBClusterNodeResponse {
	s.Body = v
	return s
}

func (s *DescribeDBClusterNodeResponse) Validate() error {
	return dara.Validate(s)
}

type iDescribeDBClusterPerformanceRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *DescribeDBClusterPerformanceRequest
	GetDBInstanceId() *string
	SetEndTime(v string) *DescribeDBClusterPerformanceRequest
	GetEndTime() *string
	SetKey(v string) *DescribeDBClusterPerformanceRequest
	GetKey() *string
	SetNodeType(v string) *DescribeDBClusterPerformanceRequest
	GetNodeType() *string
	SetNodes(v string) *DescribeDBClusterPerformanceRequest
	GetNodes() *string
	SetResourceGroupName(v string) *DescribeDBClusterPerformanceRequest
	GetResourceGroupName() *string
	SetStartTime(v string) *DescribeDBClusterPerformanceRequest
	GetStartTime() *string
}

type DescribeDBClusterPerformanceRequest struct {
	// The instance ID.
	//
	// > You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query details about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The end of the time range to query. Specify the time in the ISO 8601 standard in the `YYYY-MM-DDTHH:mmZ` format.
	//
	// > The end time must be later than the start time. The maximum time range that can be specified is seven days.
	//
	// This parameter is required.
	//
	// example:
	//
	// 2021-11-03T15:10Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The performance metric that you want to query. Separate multiple values with commas (,). For more information, see [Performance parameters](https://help.aliyun.com/document_detail/86943.html).
	//
	// This parameter is required.
	//
	// example:
	//
	// adbpg_conn_count
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The node type. Valid values:
	//
	// 	- **master**: coordinator node.
	//
	// 	- **segment**: compute node.
	//
	// > If you do not specify this parameter, the performance metrics of all nodes are returned.
	//
	// example:
	//
	// master
	NodeType *string `json:"NodeType,omitempty" xml:"NodeType,omitempty"`
	// The nodes for which you want to query performance metrics. Separate multiple values with commas (,). Example: `master-10******1,master-10******2`. You can call the [DescribeDBClusterNode](https://help.aliyun.com/document_detail/390136.html) operation to query the names of nodes.
	//
	// You can also filter the nodes based on their metric values. Valid values:
	//
	// 	- **top10**: the 10 nodes that have the highest metric values.
	//
	// 	- **top20**: the 20 nodes that have the highest metric values.
	//
	// 	- **bottom10**: the 10 nodes that have the lowest metric values.
	//
	// 	- **bottom20**: the 20 nodes that have the lowest metric values.
	//
	// example:
	//
	// top10
	Nodes *string `json:"Nodes,omitempty" xml:"Nodes,omitempty"`
	// The name of the resource group.
	//
	// example:
	//
	// testgroup
	ResourceGroupName *string `json:"ResourceGroupName,omitempty" xml:"ResourceGroupName,omitempty"`
	// The beginning of the time range to query. Specify the time in the ISO 8601 standard in the `YYYY-MM-DDTHH:mmZ` format.
	//
	// > You can query monitoring information only within the last 30 days.
	//
	// This parameter is required.
	//
	// example:
	//
	// 2021-11-03T15:00Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeDBClusterPerformanceRequest) String() string {
	return dara.Prettify(s)
}

func (s DescribeDBClusterPerformanceRequest) GoString() string {
	return s.String()
}

func (s *DescribeDBClusterPerformanceRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *DescribeDBClusterPerformanceRequest) GetEndTime() *string {
	return s.EndTime
}

func (s *DescribeDBClusterPerformanceRequest) GetKey() *string {
	return s.Key
}

func (s *DescribeDBClusterPerformanceRequest) GetNodeType() *string {
	return s.NodeType
}

func (s *DescribeDBClusterPerformanceRequest) GetNodes() *string {
	return s.Nodes
}

func (s *DescribeDBClusterPerformanceRequest) GetResourceGroupName() *string {
	return s.ResourceGroupName
}

func (s *DescribeDBClusterPerformanceRequest) GetStartTime() *string {
	return s.StartTime
}

func (s *DescribeDBClusterPerformanceRequest) SetDBInstanceId(v string) *DescribeDBClusterPerformanceRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDBClusterPerformanceRequest) SetEndTime(v string) *DescribeDBClusterPerformanceRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeDBClusterPerformanceRequest) SetKey(v string) *DescribeDBClusterPerformanceRequest {
	s.Key = &v
	return s
}

func (s *DescribeDBClusterPerformanceRequest) SetNodeType(v string) *DescribeDBClusterPerformanceRequest {
	s.NodeType = &v
	return s
}

func (s *DescribeDBClusterPerformanceRequest) SetNodes(v string) *DescribeDBClusterPerformanceRequest {
	s.Nodes = &v
	return s
}

func (s *DescribeDBClusterPerformanceRequest) SetResourceGroupName(v string) *DescribeDBClusterPerformanceRequest {
	s.ResourceGroupName = &v
	return s
}

func (s *DescribeDBClusterPerformanceRequest) SetStartTime(v string) *DescribeDBClusterPerformanceRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeDBClusterPerformanceRequest) Validate() error {
	return dara.Validate(s)
}

type iDescribeDBClusterPerformanceResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetDBClusterId(v string) *DescribeDBClusterPerformanceResponseBody
	GetDBClusterId() *string
	SetEndTime(v string) *DescribeDBClusterPerformanceResponseBody
	GetEndTime() *string
	SetPerformanceKeys(v []*DescribeDBClusterPerformanceResponseBodyPerformanceKeys) *DescribeDBClusterPerformanceResponseBody
	GetPerformanceKeys() []*DescribeDBClusterPerformanceResponseBodyPerformanceKeys
	SetRequestId(v string) *DescribeDBClusterPerformanceResponseBody
	GetRequestId() *string
	SetStartTime(v string) *DescribeDBClusterPerformanceResponseBody
	GetStartTime() *string
}

type DescribeDBClusterPerformanceResponseBody struct {
	// The instance ID.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBClusterId *string `json:"DBClusterId,omitempty" xml:"DBClusterId,omitempty"`
	// The end time of the query. The time follows the ISO 8601 standard in the `YYYY-MM-DDTHH:mmZ` format. The time is displayed in UTC.
	//
	// example:
	//
	// 2021-11-03T15:10Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The name of the performance metric. For more information, see [Performance parameters](https://help.aliyun.com/document_detail/86943.html).
	PerformanceKeys []*DescribeDBClusterPerformanceResponseBodyPerformanceKeys `json:"PerformanceKeys,omitempty" xml:"PerformanceKeys,omitempty" type:"Repeated"`
	// The request ID.
	//
	// example:
	//
	// 8E8990F0-C81E-4C94-8F51-5F**********
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The start time of the query. The time follows the ISO 8601 standard in the `YYYY-MM-DDTHH:mmZ` format. The time is displayed in UTC.
	//
	// example:
	//
	// 2021-11-03T15:00Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeDBClusterPerformanceResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DescribeDBClusterPerformanceResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDBClusterPerformanceResponseBody) GetDBClusterId() *string {
	return s.DBClusterId
}

func (s *DescribeDBClusterPerformanceResponseBody) GetEndTime() *string {
	return s.EndTime
}

func (s *DescribeDBClusterPerformanceResponseBody) GetPerformanceKeys() []*DescribeDBClusterPerformanceResponseBodyPerformanceKeys {
	return s.PerformanceKeys
}

func (s *DescribeDBClusterPerformanceResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DescribeDBClusterPerformanceResponseBody) GetStartTime() *string {
	return s.StartTime
}

func (s *DescribeDBClusterPerformanceResponseBody) SetDBClusterId(v string) *DescribeDBClusterPerformanceResponseBody {
	s.DBClusterId = &v
	return s
}

func (s *DescribeDBClusterPerformanceResponseBody) SetEndTime(v string) *DescribeDBClusterPerformanceResponseBody {
	s.EndTime = &v
	return s
}

func (s *DescribeDBClusterPerformanceResponseBody) SetPerformanceKeys(v []*DescribeDBClusterPerformanceResponseBodyPerformanceKeys) *DescribeDBClusterPerformanceResponseBody {
	s.PerformanceKeys = v
	return s
}

func (s *DescribeDBClusterPerformanceResponseBody) SetRequestId(v string) *DescribeDBClusterPerformanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDBClusterPerformanceResponseBody) SetStartTime(v string) *DescribeDBClusterPerformanceResponseBody {
	s.StartTime = &v
	return s
}

func (s *DescribeDBClusterPerformanceResponseBody) Validate() error {
	return dara.Validate(s)
}

type DescribeDBClusterPerformanceResponseBodyPerformanceKeys struct {
	// The name of the performance metric. For more information, see [Performance parameters](https://help.aliyun.com/document_detail/86943.html).
	//
	// example:
	//
	// adbpg_group_cpu_used_percent
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// Details of the performance metric of a node.
	Series []*DescribeDBClusterPerformanceResponseBodyPerformanceKeysSeries `json:"Series,omitempty" xml:"Series,omitempty" type:"Repeated"`
	// The unit of the performance metric.
	//
	// example:
	//
	// %
	Unit *string `json:"Unit,omitempty" xml:"Unit,omitempty"`
}

func (s DescribeDBClusterPerformanceResponseBodyPerformanceKeys) String() string {
	return dara.Prettify(s)
}

func (s DescribeDBClusterPerformanceResponseBodyPerformanceKeys) GoString() string {
	return s.String()
}

func (s *DescribeDBClusterPerformanceResponseBodyPerformanceKeys) GetName() *string {
	return s.Name
}

func (s *DescribeDBClusterPerformanceResponseBodyPerformanceKeys) GetSeries() []*DescribeDBClusterPerformanceResponseBodyPerformanceKeysSeries {
	return s.Series
}

func (s *DescribeDBClusterPerformanceResponseBodyPerformanceKeys) GetUnit() *string {
	return s.Unit
}

func (s *DescribeDBClusterPerformanceResponseBodyPerformanceKeys) SetName(v string) *DescribeDBClusterPerformanceResponseBodyPerformanceKeys {
	s.Name = &v
	return s
}

func (s *DescribeDBClusterPerformanceResponseBodyPerformanceKeys) SetSeries(v []*DescribeDBClusterPerformanceResponseBodyPerformanceKeysSeries) *DescribeDBClusterPerformanceResponseBodyPerformanceKeys {
	s.Series = v
	return s
}

func (s *DescribeDBClusterPerformanceResponseBodyPerformanceKeys) SetUnit(v string) *DescribeDBClusterPerformanceResponseBodyPerformanceKeys {
	s.Unit = &v
	return s
}

func (s *DescribeDBClusterPerformanceResponseBodyPerformanceKeys) Validate() error {
	return dara.Validate(s)
}

type DescribeDBClusterPerformanceResponseBodyPerformanceKeysSeries struct {
	// The name of the compute node or compute group.
	//
	// example:
	//
	// standby-********-cpu
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The role of the node. Valid values:
	//
	// 	- **master**: primary coordinator node
	//
	// 	- **standby**: standby coordinator node
	//
	// 	- **segment**: compute node
	//
	// example:
	//
	// standby
	Role *string `json:"Role,omitempty" xml:"Role,omitempty"`
	// The value of the performance metric collected at a point in time.
	Values []*DescribeDBClusterPerformanceResponseBodyPerformanceKeysSeriesValues `json:"Values,omitempty" xml:"Values,omitempty" type:"Repeated"`
}

func (s DescribeDBClusterPerformanceResponseBodyPerformanceKeysSeries) String() string {
	return dara.Prettify(s)
}

func (s DescribeDBClusterPerformanceResponseBodyPerformanceKeysSeries) GoString() string {
	return s.String()
}

func (s *DescribeDBClusterPerformanceResponseBodyPerformanceKeysSeries) GetName() *string {
	return s.Name
}

func (s *DescribeDBClusterPerformanceResponseBodyPerformanceKeysSeries) GetRole() *string {
	return s.Role
}

func (s *DescribeDBClusterPerformanceResponseBodyPerformanceKeysSeries) GetValues() []*DescribeDBClusterPerformanceResponseBodyPerformanceKeysSeriesValues {
	return s.Values
}

func (s *DescribeDBClusterPerformanceResponseBodyPerformanceKeysSeries) SetName(v string) *DescribeDBClusterPerformanceResponseBodyPerformanceKeysSeries {
	s.Name = &v
	return s
}

func (s *DescribeDBClusterPerformanceResponseBodyPerformanceKeysSeries) SetRole(v string) *DescribeDBClusterPerformanceResponseBodyPerformanceKeysSeries {
	s.Role = &v
	return s
}

func (s *DescribeDBClusterPerformanceResponseBodyPerformanceKeysSeries) SetValues(v []*DescribeDBClusterPerformanceResponseBodyPerformanceKeysSeriesValues) *DescribeDBClusterPerformanceResponseBodyPerformanceKeysSeries {
	s.Values = v
	return s
}

func (s *DescribeDBClusterPerformanceResponseBodyPerformanceKeysSeries) Validate() error {
	return dara.Validate(s)
}

type DescribeDBClusterPerformanceResponseBodyPerformanceKeysSeriesValues struct {
	// The value of the performance metric and the time when the metric value was collected.
	Point []*string `json:"Point,omitempty" xml:"Point,omitempty" type:"Repeated"`
}

func (s DescribeDBClusterPerformanceResponseBodyPerformanceKeysSeriesValues) String() string {
	return dara.Prettify(s)
}

func (s DescribeDBClusterPerformanceResponseBodyPerformanceKeysSeriesValues) GoString() string {
	return s.String()
}

func (s *DescribeDBClusterPerformanceResponseBodyPerformanceKeysSeriesValues) GetPoint() []*string {
	return s.Point
}

func (s *DescribeDBClusterPerformanceResponseBodyPerformanceKeysSeriesValues) SetPoint(v []*string) *DescribeDBClusterPerformanceResponseBodyPerformanceKeysSeriesValues {
	s.Point = v
	return s
}

func (s *DescribeDBClusterPerformanceResponseBodyPerformanceKeysSeriesValues) Validate() error {
	return dara.Validate(s)
}

type iDescribeDBClusterPerformanceResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DescribeDBClusterPerformanceResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DescribeDBClusterPerformanceResponse
	GetStatusCode() *int32
	SetBody(v *DescribeDBClusterPerformanceResponseBody) *DescribeDBClusterPerformanceResponse
	GetBody() *DescribeDBClusterPerformanceResponseBody
}

type DescribeDBClusterPerformanceResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeDBClusterPerformanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeDBClusterPerformanceResponse) String() string {
	return dara.Prettify(s)
}

func (s DescribeDBClusterPerformanceResponse) GoString() string {
	return s.String()
}

func (s *DescribeDBClusterPerformanceResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DescribeDBClusterPerformanceResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DescribeDBClusterPerformanceResponse) GetBody() *DescribeDBClusterPerformanceResponseBody {
	return s.Body
}

func (s *DescribeDBClusterPerformanceResponse) SetHeaders(v map[string]*string) *DescribeDBClusterPerformanceResponse {
	s.Headers = v
	return s
}

func (s *DescribeDBClusterPerformanceResponse) SetStatusCode(v int32) *DescribeDBClusterPerformanceResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDBClusterPerformanceResponse) SetBody(v *DescribeDBClusterPerformanceResponseBody) *DescribeDBClusterPerformanceResponse {
	s.Body = v
	return s
}

func (s *DescribeDBClusterPerformanceResponse) Validate() error {
	return dara.Validate(s)
}

type iDescribeDBInstanceAttributeRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *DescribeDBInstanceAttributeRequest
	GetDBInstanceId() *string
	SetOwnerId(v int64) *DescribeDBInstanceAttributeRequest
	GetOwnerId() *int64
	SetResourceGroupId(v string) *DescribeDBInstanceAttributeRequest
	GetResourceGroupId() *string
}

type DescribeDBInstanceAttributeRequest struct {
	// Instance ID.
	//
	// > You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) interface to view the instance IDs of all AnalyticDB for PostgreSQL instances in the target region.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp13ue79qk8y1****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// This parameter is deprecated and should not be passed.
	//
	// example:
	//
	// null
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
}

func (s DescribeDBInstanceAttributeRequest) String() string {
	return dara.Prettify(s)
}

func (s DescribeDBInstanceAttributeRequest) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceAttributeRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *DescribeDBInstanceAttributeRequest) GetOwnerId() *int64 {
	return s.OwnerId
}

func (s *DescribeDBInstanceAttributeRequest) GetResourceGroupId() *string {
	return s.ResourceGroupId
}

func (s *DescribeDBInstanceAttributeRequest) SetDBInstanceId(v string) *DescribeDBInstanceAttributeRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDBInstanceAttributeRequest) SetOwnerId(v int64) *DescribeDBInstanceAttributeRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeDBInstanceAttributeRequest) SetResourceGroupId(v string) *DescribeDBInstanceAttributeRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeDBInstanceAttributeRequest) Validate() error {
	return dara.Validate(s)
}

type iDescribeDBInstanceAttributeResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetItems(v *DescribeDBInstanceAttributeResponseBodyItems) *DescribeDBInstanceAttributeResponseBody
	GetItems() *DescribeDBInstanceAttributeResponseBodyItems
	SetRequestId(v string) *DescribeDBInstanceAttributeResponseBody
	GetRequestId() *string
}

type DescribeDBInstanceAttributeResponseBody struct {
	// The queried instance.
	Items *DescribeDBInstanceAttributeResponseBodyItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Struct"`
	// Request ID.
	//
	// example:
	//
	// 5E6EDEB8-D73E-5F2D-B948-86C8AEB05A68
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeDBInstanceAttributeResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DescribeDBInstanceAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceAttributeResponseBody) GetItems() *DescribeDBInstanceAttributeResponseBodyItems {
	return s.Items
}

func (s *DescribeDBInstanceAttributeResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DescribeDBInstanceAttributeResponseBody) SetItems(v *DescribeDBInstanceAttributeResponseBodyItems) *DescribeDBInstanceAttributeResponseBody {
	s.Items = v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBody) SetRequestId(v string) *DescribeDBInstanceAttributeResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBody) Validate() error {
	return dara.Validate(s)
}

type DescribeDBInstanceAttributeResponseBodyItems struct {
	DBInstanceAttribute []*DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute `json:"DBInstanceAttribute,omitempty" xml:"DBInstanceAttribute,omitempty" type:"Repeated"`
}

func (s DescribeDBInstanceAttributeResponseBodyItems) String() string {
	return dara.Prettify(s)
}

func (s DescribeDBInstanceAttributeResponseBodyItems) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceAttributeResponseBodyItems) GetDBInstanceAttribute() []*DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	return s.DBInstanceAttribute
}

func (s *DescribeDBInstanceAttributeResponseBodyItems) SetDBInstanceAttribute(v []*DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) *DescribeDBInstanceAttributeResponseBodyItems {
	s.DBInstanceAttribute = v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItems) Validate() error {
	return dara.Validate(s)
}

type DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute struct {
	// Queries the current instance availability status, in percentage (%).
	//
	// > This parameter is only applicable to instances in the storage reserved mode.
	//
	// example:
	//
	// 100.0%
	AvailabilityValue *string `json:"AvailabilityValue,omitempty" xml:"AvailabilityValue,omitempty"`
	// Access mode, with the following values:
	//
	// - **Performance**: Standard access mode.
	//
	// - **Safty**: High-security access mode.
	//
	// - **LVS**: LVS link mode.
	//
	// example:
	//
	// LVS
	ConnectionMode *string `json:"ConnectionMode,omitempty" xml:"ConnectionMode,omitempty"`
	// Instance connection address.
	//
	// example:
	//
	// gp-bp13ue79qk8y1****-master.gpdb.rds.aliyuncs.com
	ConnectionString *string `json:"ConnectionString,omitempty" xml:"ConnectionString,omitempty"`
	// Minor version number of the kernel.
	//
	// example:
	//
	// mm.v6.3.10.1-202207141918
	CoreVersion *string `json:"CoreVersion,omitempty" xml:"CoreVersion,omitempty"`
	// Number of CPU cores for the compute node, unit: Core.
	//
	// example:
	//
	// 2
	CpuCores *int32 `json:"CpuCores,omitempty" xml:"CpuCores,omitempty"`
	// Number of CPU cores per node.
	//
	// > This parameter is only applicable to instances in the storage reserved mode.
	//
	// example:
	//
	// 0
	CpuCoresPerNode *int32 `json:"CpuCoresPerNode,omitempty" xml:"CpuCoresPerNode,omitempty"`
	// Instance creation time.
	//
	// example:
	//
	// 2022-08-11T09:16:26Z
	CreationTime *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	// Instance series, with the following values:
	//
	// - **Basic**: Basic Edition.
	//
	// - **HighAvailability**: High Availability Edition.
	//
	// example:
	//
	// HighAvailability
	DBInstanceCategory *string `json:"DBInstanceCategory,omitempty" xml:"DBInstanceCategory,omitempty"`
	// Instance specification.
	//
	// > This parameter is only applicable to reserved storage mode instances.
	//
	// example:
	//
	// gpdb.group.segsdx1
	DBInstanceClass *string `json:"DBInstanceClass,omitempty" xml:"DBInstanceClass,omitempty"`
	// Instance family, with the following values:
	//
	// - **s**: Shared type.
	//
	// - **x**: General type.
	//
	// - **d**: Dedicated package.
	//
	// - **h**: Dedicated physical machine.
	//
	// example:
	//
	// x
	DBInstanceClassType *string `json:"DBInstanceClassType,omitempty" xml:"DBInstanceClassType,omitempty"`
	// Number of CPU cores.
	//
	// example:
	//
	// 2
	DBInstanceCpuCores *int32 `json:"DBInstanceCpuCores,omitempty" xml:"DBInstanceCpuCores,omitempty"`
	// Instance description.
	//
	// example:
	//
	// gp-bp13ue79qk8y1****
	DBInstanceDescription *string `json:"DBInstanceDescription,omitempty" xml:"DBInstanceDescription,omitempty"`
	// Maximum BPS (disk throughput) of the compute group, in Mbps.
	//
	// > This parameter is only applicable to reserved storage mode instances.
	//
	// example:
	//
	// 0
	DBInstanceDiskMBPS *int64 `json:"DBInstanceDiskMBPS,omitempty" xml:"DBInstanceDiskMBPS,omitempty"`
	// Number of compute groups.
	//
	// > This parameter is only applicable to reserved storage mode instances.
	//
	// example:
	//
	// 0
	DBInstanceGroupCount *string `json:"DBInstanceGroupCount,omitempty" xml:"DBInstanceGroupCount,omitempty"`
	// Instance ID.
	//
	// example:
	//
	// gp-bp13ue79qk8y1****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// Memory of the compute node.
	//
	// > The unit for storage-reserved mode is MB; for Serverless and storage-elastic modes, it is GB.
	//
	// example:
	//
	// 16
	DBInstanceMemory *int64 `json:"DBInstanceMemory,omitempty" xml:"DBInstanceMemory,omitempty"`
	// Instance resource type, with the following values:
	//
	// - **Serverless**: Serverless mode.
	//
	// - **StorageElastic**: Storage elastic mode.
	//
	// - **Classic**: Storage reserved mode.
	//
	// example:
	//
	// StorageElastic
	DBInstanceMode *string `json:"DBInstanceMode,omitempty" xml:"DBInstanceMode,omitempty"`
	// This parameter is deprecated and will not return any value.
	//
	// example:
	//
	// null
	DBInstanceNetType *string `json:"DBInstanceNetType,omitempty" xml:"DBInstanceNetType,omitempty"`
	// Instance status. For more details, see the supplementary explanation of the DBInstanceStatus parameter.
	//
	// example:
	//
	// Running
	DBInstanceStatus *string `json:"DBInstanceStatus,omitempty" xml:"DBInstanceStatus,omitempty"`
	// Maximum storage space of a single replica, in GB.
	//
	// example:
	//
	// 50
	DBInstanceStorage *int64 `json:"DBInstanceStorage,omitempty" xml:"DBInstanceStorage,omitempty"`
	// The deployment mode.
	//
	// example:
	//
	// single
	DeployMode *string `json:"DeployMode,omitempty" xml:"DeployMode,omitempty"`
	// Encryption key.
	//
	// > This parameter is returned only for instances with disk encryption enabled.
	//
	// example:
	//
	// 0d2470df-da7b-4786-b981-************
	EncryptionKey *string `json:"EncryptionKey,omitempty" xml:"EncryptionKey,omitempty"`
	// Encryption type, with the following value:
	//
	// - **CloudDisk**: Cloud disk encryption.
	//
	// > This parameter is returned only for instances with cloud disk encryption.
	//
	// example:
	//
	// CloudDisk
	EncryptionType *string `json:"EncryptionType,omitempty" xml:"EncryptionType,omitempty"`
	// Database engine.
	//
	// example:
	//
	// gpdb
	Engine *string `json:"Engine,omitempty" xml:"Engine,omitempty"`
	// Database version.
	//
	// example:
	//
	// 6.0
	EngineVersion *string `json:"EngineVersion,omitempty" xml:"EngineVersion,omitempty"`
	// Instance expiration time (in UTC).
	//
	// > The expiration time for pay-as-you-go instances is `2999-09-08T16:00:00Z`.
	//
	// example:
	//
	// 2999-09-08T16:00:00Z
	ExpireTime *string `json:"ExpireTime,omitempty" xml:"ExpireTime,omitempty"`
	// Compute group machine type, with the following values:
	//
	// - **0**: SSD
	//
	// - **1**: HDD
	//
	// > This parameter applies only to storage-reserved mode instances.
	//
	// example:
	//
	// 0
	HostType *string `json:"HostType,omitempty" xml:"HostType,omitempty"`
	// Idle release waiting time. Unit: seconds.
	//
	// > This parameter is returned only for instances in the Serverless automatic scheduling mode.
	//
	// example:
	//
	// 600
	IdleTime *int32 `json:"IdleTime,omitempty" xml:"IdleTime,omitempty"`
	// Instance network type, with the following values:
	//
	// - **Classic**: Classic network.
	//
	// - **VPC**: VPC network.
	//
	// example:
	//
	// VPC
	InstanceNetworkType *string `json:"InstanceNetworkType,omitempty" xml:"InstanceNetworkType,omitempty"`
	// Lock mode, with the following values:
	//
	// - **Unlock**: Normal.
	//
	// - **ManualLock**: Manually triggered lock.
	//
	// - **LockByExpiration**: Automatically locked when the instance expires.
	//
	// - **LockByRestoration**: Automatically locked before the instance rolls back.
	//
	// - **LockByDiskQuota**: Automatically locked when the instance space is full.
	//
	// example:
	//
	// Unlock
	LockMode *string `json:"LockMode,omitempty" xml:"LockMode,omitempty"`
	// This parameter is deprecated and will not return any value.
	//
	// example:
	//
	// null
	LockReason *string `json:"LockReason,omitempty" xml:"LockReason,omitempty"`
	// Maintenance end time.
	//
	// example:
	//
	// 22:00Z
	MaintainEndTime *string `json:"MaintainEndTime,omitempty" xml:"MaintainEndTime,omitempty"`
	// Maintenance start time.
	//
	// example:
	//
	// 18:00Z
	MaintainStartTime *string `json:"MaintainStartTime,omitempty" xml:"MaintainStartTime,omitempty"`
	// The specifications of AI coordinator node resources of the instance. If the coordinator nodes of the instance are not AI nodes, null is returned.
	//
	// example:
	//
	// ADB.AIMedium.2
	MasterAISpec *string `json:"MasterAISpec,omitempty" xml:"MasterAISpec,omitempty"`
	// Master resources.
	//
	// example:
	//
	// 4
	MasterCU *int32 `json:"MasterCU,omitempty" xml:"MasterCU,omitempty"`
	// Number of Master nodes.
	//
	// example:
	//
	// 1
	MasterNodeNum *int32 `json:"MasterNodeNum,omitempty" xml:"MasterNodeNum,omitempty"`
	// Maximum number of concurrent connections for the instance.
	//
	// > This parameter is only applicable to reserved storage mode instances.
	//
	// example:
	//
	// 500
	MaxConnections *int32 `json:"MaxConnections,omitempty" xml:"MaxConnections,omitempty"`
	// Memory size per replica, see the **MemoryUnit*	- parameter for the unit.
	//
	// > This parameter is only applicable to instances in the storage reserved mode.
	//
	// example:
	//
	// 0
	MemoryPerNode *int32 `json:"MemoryPerNode,omitempty" xml:"MemoryPerNode,omitempty"`
	// Memory size of the compute node.
	//
	// > The unit is MB for the storage reserved mode; GB for Serverless and storage elastic modes.
	//
	// example:
	//
	// 16
	MemorySize *int64 `json:"MemorySize,omitempty" xml:"MemorySize,omitempty"`
	// Memory unit.
	//
	// > This parameter is only applicable to reserved storage mode instances.
	//
	// example:
	//
	// GB
	MemoryUnit *string `json:"MemoryUnit,omitempty" xml:"MemoryUnit,omitempty"`
	// Minor version of the kernel.
	//
	// example:
	//
	// 6.3.10.1-202207141918
	MinorVersion *string `json:"MinorVersion,omitempty" xml:"MinorVersion,omitempty"`
	// Billing type, with the following values:
	//
	// - **Postpaid**: Pay-as-you-go.
	//
	// - **Prepaid**: Subscription.
	//
	// example:
	//
	// Postpaid
	PayType *string `json:"PayType,omitempty" xml:"PayType,omitempty"`
	// Instance port number.
	//
	// example:
	//
	// 5432
	Port *string `json:"Port,omitempty" xml:"Port,omitempty"`
	// The service type.
	//
	// example:
	//
	// standard
	ProdType *string `json:"ProdType,omitempty" xml:"ProdType,omitempty"`
	// This parameter has been deprecated and will not return a value.
	//
	// example:
	//
	// null
	ReadDelayTime *string `json:"ReadDelayTime,omitempty" xml:"ReadDelayTime,omitempty"`
	// Region ID.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// ID of the resource group where the instance is located.
	//
	// example:
	//
	// rg-bp67acfmxazb4p****
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	// Instance running time.
	//
	// example:
	//
	// 4 days 22:58:55
	RunningTime *string `json:"RunningTime,omitempty" xml:"RunningTime,omitempty"`
	// This parameter is deprecated and will not return any value.
	//
	// example:
	//
	// null
	SecurityIPList *string `json:"SecurityIPList,omitempty" xml:"SecurityIPList,omitempty"`
	// Performance Level (PL), currently only **PL1*	- is supported.
	//
	// example:
	//
	// PL1
	SegDiskPerformanceLevel *string `json:"SegDiskPerformanceLevel,omitempty" xml:"SegDiskPerformanceLevel,omitempty"`
	// Number of Segment nodes.
	//
	// > This parameter applies only to instances in the storage elastic mode and Serverless manual scheduling mode.
	//
	// example:
	//
	// 4
	SegNodeNum *int32 `json:"SegNodeNum,omitempty" xml:"SegNodeNum,omitempty"`
	// The specifications of AI compute node resources of the instance. If the compute nodes of the instance are not AI nodes, null is returned.
	//
	// example:
	//
	// ADB.AIMedium.2
	SegmentAISpec *string `json:"SegmentAISpec,omitempty" xml:"SegmentAISpec,omitempty"`
	// Number of compute groups.
	//
	// > This parameter applies only to storage-reserved mode instances.
	//
	// example:
	//
	// 0
	SegmentCounts *int32 `json:"SegmentCounts,omitempty" xml:"SegmentCounts,omitempty"`
	// The mode of the Serverless instance, with the following values:
	//
	// - **Manual**: Manual scheduling.
	//
	// - **Auto**: Automatic scheduling.
	//
	// > This parameter is returned only for Serverless mode instances.
	//
	// example:
	//
	// Auto
	ServerlessMode *string `json:"ServerlessMode,omitempty" xml:"ServerlessMode,omitempty"`
	// Compute resource threshold. Unit: ACU.
	//
	// > This parameter is returned only for instances in the Serverless automatic scheduling mode.
	//
	// example:
	//
	// 32
	ServerlessResource *int32 `json:"ServerlessResource,omitempty" xml:"ServerlessResource,omitempty"`
	// The secondary zone ID.
	//
	// example:
	//
	// cn-hangzhou-i
	StandbyZoneId *string `json:"StandbyZoneId,omitempty" xml:"StandbyZoneId,omitempty"`
	// The time when the instance started running.
	//
	// example:
	//
	// 2022-08-11T09:26:43Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// Storage size per replica, see the **StorageUnit*	- parameter for units.
	//
	// > This parameter applies only to storage-reserved mode instances.
	//
	// example:
	//
	// 0
	StoragePerNode *int32 `json:"StoragePerNode,omitempty" xml:"StoragePerNode,omitempty"`
	// Storage space size, unit: GB.
	//
	// example:
	//
	// 50
	StorageSize *int64 `json:"StorageSize,omitempty" xml:"StorageSize,omitempty"`
	// Storage type, with the following values:
	//
	// - **cloud_essd**: ESSD cloud disk.
	//
	// - **cloud_efficiency**: Efficient cloud disk.
	//
	// > This parameter is only applicable to instances in the storage elastic mode.
	//
	// example:
	//
	// cloud_essd
	StorageType *string `json:"StorageType,omitempty" xml:"StorageType,omitempty"`
	// Storage unit, with the following values:
	//
	// - **GB SSD**
	//
	// - **TB SSD**
	//
	// - **GB HDD**
	//
	// > This parameter is only applicable to instances in the storage reserved mode.
	//
	// example:
	//
	// GB SSD
	StorageUnit *string `json:"StorageUnit,omitempty" xml:"StorageUnit,omitempty"`
	// Indicates whether backup recovery is supported, with the following values:
	//
	// - **true**: Backup recovery is supported.
	//
	// - **false**: Backup recovery is not supported.
	//
	// example:
	//
	// true
	SupportRestore *bool `json:"SupportRestore,omitempty" xml:"SupportRestore,omitempty"`
	// Tag key-value pairs.
	Tags *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttributeTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Struct"`
	// vSwitch ID.
	//
	// example:
	//
	// vsw-bp1cpq8mr64paltkb****
	VSwitchId *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	// Indicates whether vector engine optimization is enabled. The values are as follows:
	//
	// - **enabled**: Indicates that vector engine optimization is enabled.
	//
	// - **disabled**: Indicates that vector engine optimization is disabled.
	//
	// example:
	//
	// enabled
	VectorConfigurationStatus *string `json:"VectorConfigurationStatus,omitempty" xml:"VectorConfigurationStatus,omitempty"`
	// VPC ID.
	//
	// example:
	//
	// vpc-bp19ame5m1r3oejns****
	VpcId *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	// Zone ID.
	//
	// example:
	//
	// cn-hangzhou-j
	ZoneId *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) String() string {
	return dara.Prettify(s)
}

func (s DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) GetAvailabilityValue() *string {
	return s.AvailabilityValue
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) GetConnectionMode() *string {
	return s.ConnectionMode
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) GetConnectionString() *string {
	return s.ConnectionString
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) GetCoreVersion() *string {
	return s.CoreVersion
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) GetCpuCores() *int32 {
	return s.CpuCores
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) GetCpuCoresPerNode() *int32 {
	return s.CpuCoresPerNode
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) GetCreationTime() *string {
	return s.CreationTime
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) GetDBInstanceCategory() *string {
	return s.DBInstanceCategory
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) GetDBInstanceClass() *string {
	return s.DBInstanceClass
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) GetDBInstanceClassType() *string {
	return s.DBInstanceClassType
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) GetDBInstanceCpuCores() *int32 {
	return s.DBInstanceCpuCores
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) GetDBInstanceDescription() *string {
	return s.DBInstanceDescription
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) GetDBInstanceDiskMBPS() *int64 {
	return s.DBInstanceDiskMBPS
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) GetDBInstanceGroupCount() *string {
	return s.DBInstanceGroupCount
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) GetDBInstanceMemory() *int64 {
	return s.DBInstanceMemory
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) GetDBInstanceMode() *string {
	return s.DBInstanceMode
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) GetDBInstanceNetType() *string {
	return s.DBInstanceNetType
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) GetDBInstanceStatus() *string {
	return s.DBInstanceStatus
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) GetDBInstanceStorage() *int64 {
	return s.DBInstanceStorage
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) GetDeployMode() *string {
	return s.DeployMode
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) GetEncryptionKey() *string {
	return s.EncryptionKey
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) GetEncryptionType() *string {
	return s.EncryptionType
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) GetEngine() *string {
	return s.Engine
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) GetEngineVersion() *string {
	return s.EngineVersion
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) GetExpireTime() *string {
	return s.ExpireTime
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) GetHostType() *string {
	return s.HostType
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) GetIdleTime() *int32 {
	return s.IdleTime
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) GetInstanceNetworkType() *string {
	return s.InstanceNetworkType
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) GetLockMode() *string {
	return s.LockMode
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) GetLockReason() *string {
	return s.LockReason
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) GetMaintainEndTime() *string {
	return s.MaintainEndTime
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) GetMaintainStartTime() *string {
	return s.MaintainStartTime
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) GetMasterAISpec() *string {
	return s.MasterAISpec
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) GetMasterCU() *int32 {
	return s.MasterCU
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) GetMasterNodeNum() *int32 {
	return s.MasterNodeNum
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) GetMaxConnections() *int32 {
	return s.MaxConnections
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) GetMemoryPerNode() *int32 {
	return s.MemoryPerNode
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) GetMemorySize() *int64 {
	return s.MemorySize
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) GetMemoryUnit() *string {
	return s.MemoryUnit
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) GetMinorVersion() *string {
	return s.MinorVersion
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) GetPayType() *string {
	return s.PayType
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) GetPort() *string {
	return s.Port
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) GetProdType() *string {
	return s.ProdType
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) GetReadDelayTime() *string {
	return s.ReadDelayTime
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) GetRegionId() *string {
	return s.RegionId
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) GetResourceGroupId() *string {
	return s.ResourceGroupId
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) GetRunningTime() *string {
	return s.RunningTime
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) GetSecurityIPList() *string {
	return s.SecurityIPList
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) GetSegDiskPerformanceLevel() *string {
	return s.SegDiskPerformanceLevel
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) GetSegNodeNum() *int32 {
	return s.SegNodeNum
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) GetSegmentAISpec() *string {
	return s.SegmentAISpec
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) GetSegmentCounts() *int32 {
	return s.SegmentCounts
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) GetServerlessMode() *string {
	return s.ServerlessMode
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) GetServerlessResource() *int32 {
	return s.ServerlessResource
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) GetStandbyZoneId() *string {
	return s.StandbyZoneId
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) GetStartTime() *string {
	return s.StartTime
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) GetStoragePerNode() *int32 {
	return s.StoragePerNode
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) GetStorageSize() *int64 {
	return s.StorageSize
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) GetStorageType() *string {
	return s.StorageType
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) GetStorageUnit() *string {
	return s.StorageUnit
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) GetSupportRestore() *bool {
	return s.SupportRestore
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) GetTags() *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttributeTags {
	return s.Tags
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) GetVSwitchId() *string {
	return s.VSwitchId
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) GetVectorConfigurationStatus() *string {
	return s.VectorConfigurationStatus
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) GetVpcId() *string {
	return s.VpcId
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) GetZoneId() *string {
	return s.ZoneId
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetAvailabilityValue(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.AvailabilityValue = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetConnectionMode(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.ConnectionMode = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetConnectionString(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.ConnectionString = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetCoreVersion(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.CoreVersion = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetCpuCores(v int32) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.CpuCores = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetCpuCoresPerNode(v int32) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.CpuCoresPerNode = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetCreationTime(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.CreationTime = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetDBInstanceCategory(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.DBInstanceCategory = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetDBInstanceClass(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.DBInstanceClass = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetDBInstanceClassType(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.DBInstanceClassType = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetDBInstanceCpuCores(v int32) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.DBInstanceCpuCores = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetDBInstanceDescription(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.DBInstanceDescription = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetDBInstanceDiskMBPS(v int64) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.DBInstanceDiskMBPS = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetDBInstanceGroupCount(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.DBInstanceGroupCount = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetDBInstanceId(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetDBInstanceMemory(v int64) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.DBInstanceMemory = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetDBInstanceMode(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.DBInstanceMode = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetDBInstanceNetType(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.DBInstanceNetType = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetDBInstanceStatus(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.DBInstanceStatus = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetDBInstanceStorage(v int64) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.DBInstanceStorage = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetDeployMode(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.DeployMode = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetEncryptionKey(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.EncryptionKey = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetEncryptionType(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.EncryptionType = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetEngine(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.Engine = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetEngineVersion(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.EngineVersion = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetExpireTime(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.ExpireTime = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetHostType(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.HostType = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetIdleTime(v int32) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.IdleTime = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetInstanceNetworkType(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.InstanceNetworkType = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetLockMode(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.LockMode = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetLockReason(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.LockReason = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetMaintainEndTime(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.MaintainEndTime = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetMaintainStartTime(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.MaintainStartTime = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetMasterAISpec(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.MasterAISpec = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetMasterCU(v int32) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.MasterCU = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetMasterNodeNum(v int32) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.MasterNodeNum = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetMaxConnections(v int32) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.MaxConnections = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetMemoryPerNode(v int32) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.MemoryPerNode = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetMemorySize(v int64) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.MemorySize = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetMemoryUnit(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.MemoryUnit = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetMinorVersion(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.MinorVersion = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetPayType(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.PayType = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetPort(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.Port = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetProdType(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.ProdType = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetReadDelayTime(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.ReadDelayTime = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetRegionId(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.RegionId = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetResourceGroupId(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetRunningTime(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.RunningTime = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetSecurityIPList(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.SecurityIPList = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetSegDiskPerformanceLevel(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.SegDiskPerformanceLevel = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetSegNodeNum(v int32) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.SegNodeNum = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetSegmentAISpec(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.SegmentAISpec = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetSegmentCounts(v int32) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.SegmentCounts = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetServerlessMode(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.ServerlessMode = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetServerlessResource(v int32) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.ServerlessResource = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetStandbyZoneId(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.StandbyZoneId = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetStartTime(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.StartTime = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetStoragePerNode(v int32) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.StoragePerNode = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetStorageSize(v int64) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.StorageSize = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetStorageType(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.StorageType = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetStorageUnit(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.StorageUnit = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetSupportRestore(v bool) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.SupportRestore = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetTags(v *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttributeTags) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.Tags = v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetVSwitchId(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.VSwitchId = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetVectorConfigurationStatus(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.VectorConfigurationStatus = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetVpcId(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.VpcId = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetZoneId(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.ZoneId = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) Validate() error {
	return dara.Validate(s)
}

type DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttributeTags struct {
	Tag []*DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttributeTagsTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttributeTags) String() string {
	return dara.Prettify(s)
}

func (s DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttributeTags) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttributeTags) GetTag() []*DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttributeTagsTag {
	return s.Tag
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttributeTags) SetTag(v []*DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttributeTagsTag) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttributeTags {
	s.Tag = v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttributeTags) Validate() error {
	return dara.Validate(s)
}

type DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttributeTagsTag struct {
	// Tag key.
	//
	// example:
	//
	// test-key
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// Tag value.
	//
	// example:
	//
	// test-value
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttributeTagsTag) String() string {
	return dara.Prettify(s)
}

func (s DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttributeTagsTag) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttributeTagsTag) GetKey() *string {
	return s.Key
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttributeTagsTag) GetValue() *string {
	return s.Value
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttributeTagsTag) SetKey(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttributeTagsTag {
	s.Key = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttributeTagsTag) SetValue(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttributeTagsTag {
	s.Value = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttributeTagsTag) Validate() error {
	return dara.Validate(s)
}

type iDescribeDBInstanceAttributeResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DescribeDBInstanceAttributeResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DescribeDBInstanceAttributeResponse
	GetStatusCode() *int32
	SetBody(v *DescribeDBInstanceAttributeResponseBody) *DescribeDBInstanceAttributeResponse
	GetBody() *DescribeDBInstanceAttributeResponseBody
}

type DescribeDBInstanceAttributeResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeDBInstanceAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeDBInstanceAttributeResponse) String() string {
	return dara.Prettify(s)
}

func (s DescribeDBInstanceAttributeResponse) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceAttributeResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DescribeDBInstanceAttributeResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DescribeDBInstanceAttributeResponse) GetBody() *DescribeDBInstanceAttributeResponseBody {
	return s.Body
}

func (s *DescribeDBInstanceAttributeResponse) SetHeaders(v map[string]*string) *DescribeDBInstanceAttributeResponse {
	s.Headers = v
	return s
}

func (s *DescribeDBInstanceAttributeResponse) SetStatusCode(v int32) *DescribeDBInstanceAttributeResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponse) SetBody(v *DescribeDBInstanceAttributeResponseBody) *DescribeDBInstanceAttributeResponse {
	s.Body = v
	return s
}

func (s *DescribeDBInstanceAttributeResponse) Validate() error {
	return dara.Validate(s)
}

type iDescribeDBInstanceDataBloatRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *DescribeDBInstanceDataBloatRequest
	GetDBInstanceId() *string
	SetDatabase(v string) *DescribeDBInstanceDataBloatRequest
	GetDatabase() *string
	SetOrderBy(v string) *DescribeDBInstanceDataBloatRequest
	GetOrderBy() *string
	SetPageNumber(v int32) *DescribeDBInstanceDataBloatRequest
	GetPageNumber() *int32
	SetPageSize(v int32) *DescribeDBInstanceDataBloatRequest
	GetPageSize() *int32
}

type DescribeDBInstanceDataBloatRequest struct {
	// The ID of the instance.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the details of all AnalyticDB for PostgreSQL instances in a specific region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The name of the database.
	//
	// example:
	//
	// test
	Database *string `json:"Database,omitempty" xml:"Database,omitempty"`
	// The sorting order.
	//
	// example:
	//
	// {Field: TableName, Type: Desc}
	OrderBy *string `json:"OrderBy,omitempty" xml:"OrderBy,omitempty"`
	// The number of the page to return. The value must be an integer that is greater than 0. Default value: **1**.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries to return on each page. Valid values:
	//
	// 	- **30**
	//
	// 	- **50**
	//
	// 	- **100**
	//
	// Default value: **30**.
	//
	// example:
	//
	// 30
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s DescribeDBInstanceDataBloatRequest) String() string {
	return dara.Prettify(s)
}

func (s DescribeDBInstanceDataBloatRequest) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceDataBloatRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *DescribeDBInstanceDataBloatRequest) GetDatabase() *string {
	return s.Database
}

func (s *DescribeDBInstanceDataBloatRequest) GetOrderBy() *string {
	return s.OrderBy
}

func (s *DescribeDBInstanceDataBloatRequest) GetPageNumber() *int32 {
	return s.PageNumber
}

func (s *DescribeDBInstanceDataBloatRequest) GetPageSize() *int32 {
	return s.PageSize
}

func (s *DescribeDBInstanceDataBloatRequest) SetDBInstanceId(v string) *DescribeDBInstanceDataBloatRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDBInstanceDataBloatRequest) SetDatabase(v string) *DescribeDBInstanceDataBloatRequest {
	s.Database = &v
	return s
}

func (s *DescribeDBInstanceDataBloatRequest) SetOrderBy(v string) *DescribeDBInstanceDataBloatRequest {
	s.OrderBy = &v
	return s
}

func (s *DescribeDBInstanceDataBloatRequest) SetPageNumber(v int32) *DescribeDBInstanceDataBloatRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeDBInstanceDataBloatRequest) SetPageSize(v int32) *DescribeDBInstanceDataBloatRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeDBInstanceDataBloatRequest) Validate() error {
	return dara.Validate(s)
}

type iDescribeDBInstanceDataBloatResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetItems(v []*DescribeDBInstanceDataBloatResponseBodyItems) *DescribeDBInstanceDataBloatResponseBody
	GetItems() []*DescribeDBInstanceDataBloatResponseBodyItems
	SetPageNumber(v int32) *DescribeDBInstanceDataBloatResponseBody
	GetPageNumber() *int32
	SetRequestId(v string) *DescribeDBInstanceDataBloatResponseBody
	GetRequestId() *string
	SetTotalCount(v int32) *DescribeDBInstanceDataBloatResponseBody
	GetTotalCount() *int32
}

type DescribeDBInstanceDataBloatResponseBody struct {
	// The queried data bloat.
	Items []*DescribeDBInstanceDataBloatResponseBodyItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Repeated"`
	// The page number of the returned page.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// B4CAF581-2AC7-41AD-8940-D56DF7AADF5B
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of entries.
	//
	// example:
	//
	// 1
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeDBInstanceDataBloatResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DescribeDBInstanceDataBloatResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceDataBloatResponseBody) GetItems() []*DescribeDBInstanceDataBloatResponseBodyItems {
	return s.Items
}

func (s *DescribeDBInstanceDataBloatResponseBody) GetPageNumber() *int32 {
	return s.PageNumber
}

func (s *DescribeDBInstanceDataBloatResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DescribeDBInstanceDataBloatResponseBody) GetTotalCount() *int32 {
	return s.TotalCount
}

func (s *DescribeDBInstanceDataBloatResponseBody) SetItems(v []*DescribeDBInstanceDataBloatResponseBodyItems) *DescribeDBInstanceDataBloatResponseBody {
	s.Items = v
	return s
}

func (s *DescribeDBInstanceDataBloatResponseBody) SetPageNumber(v int32) *DescribeDBInstanceDataBloatResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeDBInstanceDataBloatResponseBody) SetRequestId(v string) *DescribeDBInstanceDataBloatResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDBInstanceDataBloatResponseBody) SetTotalCount(v int32) *DescribeDBInstanceDataBloatResponseBody {
	s.TotalCount = &v
	return s
}

func (s *DescribeDBInstanceDataBloatResponseBody) Validate() error {
	return dara.Validate(s)
}

type DescribeDBInstanceDataBloatResponseBodyItems struct {
	// The coefficient of data bloat. It is calculated by using the following formula:
	//
	// Bloat coefficient = Number of dead rows/Number of active rows.
	//
	// example:
	//
	// 1.03
	BloatCeoff *string `json:"BloatCeoff,omitempty" xml:"BloatCeoff,omitempty"`
	// The bloat size of the table. It indicates the amount of space that can be released.
	//
	// example:
	//
	// 0.2MB
	BloatSize *string `json:"BloatSize,omitempty" xml:"BloatSize,omitempty"`
	// The name of the database.
	//
	// example:
	//
	// adbtest
	DatabaseName *string `json:"DatabaseName,omitempty" xml:"DatabaseName,omitempty"`
	// The expected size of the table.
	//
	// It indicates the size of the table that has no data bloat.
	//
	// example:
	//
	// 1MB
	ExpectTableSize *string `json:"ExpectTableSize,omitempty" xml:"ExpectTableSize,omitempty"`
	// The actual size of the table.
	//
	// example:
	//
	// 1.2MB
	RealTableSize *string `json:"RealTableSize,omitempty" xml:"RealTableSize,omitempty"`
	// The name of the schema.
	//
	// example:
	//
	// schema1
	SchemaName *string `json:"SchemaName,omitempty" xml:"SchemaName,omitempty"`
	// The sequence number.
	//
	// example:
	//
	// 1
	Sequence *int32 `json:"Sequence,omitempty" xml:"Sequence,omitempty"`
	// The storage type of the table. Valid values:
	//
	// 	- **Heap Table**
	//
	// 	- **Append-Only Heap Table**
	//
	// 	- **Append-Only Columnar Table**
	//
	// example:
	//
	// Heap Table
	StorageType *string `json:"StorageType,omitempty" xml:"StorageType,omitempty"`
	// This parameter is not returned.
	//
	// example:
	//
	// null
	SuggestedAction *string `json:"SuggestedAction,omitempty" xml:"SuggestedAction,omitempty"`
	// The name of the table.
	//
	// example:
	//
	// tab1
	TableName *string `json:"TableName,omitempty" xml:"TableName,omitempty"`
	// The time when the table was last deleted, inserted, or updated.
	//
	// example:
	//
	// 2022-08-08T20:00:00Z
	TimeLastUpdated *string `json:"TimeLastUpdated,omitempty" xml:"TimeLastUpdated,omitempty"`
	// The time when the table was last vacuumed. The time is displayed in UTC.
	//
	// example:
	//
	// 2022-08-08T16:00:00Z
	TimeLastVacuumed *string `json:"TimeLastVacuumed,omitempty" xml:"TimeLastVacuumed,omitempty"`
}

func (s DescribeDBInstanceDataBloatResponseBodyItems) String() string {
	return dara.Prettify(s)
}

func (s DescribeDBInstanceDataBloatResponseBodyItems) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceDataBloatResponseBodyItems) GetBloatCeoff() *string {
	return s.BloatCeoff
}

func (s *DescribeDBInstanceDataBloatResponseBodyItems) GetBloatSize() *string {
	return s.BloatSize
}

func (s *DescribeDBInstanceDataBloatResponseBodyItems) GetDatabaseName() *string {
	return s.DatabaseName
}

func (s *DescribeDBInstanceDataBloatResponseBodyItems) GetExpectTableSize() *string {
	return s.ExpectTableSize
}

func (s *DescribeDBInstanceDataBloatResponseBodyItems) GetRealTableSize() *string {
	return s.RealTableSize
}

func (s *DescribeDBInstanceDataBloatResponseBodyItems) GetSchemaName() *string {
	return s.SchemaName
}

func (s *DescribeDBInstanceDataBloatResponseBodyItems) GetSequence() *int32 {
	return s.Sequence
}

func (s *DescribeDBInstanceDataBloatResponseBodyItems) GetStorageType() *string {
	return s.StorageType
}

func (s *DescribeDBInstanceDataBloatResponseBodyItems) GetSuggestedAction() *string {
	return s.SuggestedAction
}

func (s *DescribeDBInstanceDataBloatResponseBodyItems) GetTableName() *string {
	return s.TableName
}

func (s *DescribeDBInstanceDataBloatResponseBodyItems) GetTimeLastUpdated() *string {
	return s.TimeLastUpdated
}

func (s *DescribeDBInstanceDataBloatResponseBodyItems) GetTimeLastVacuumed() *string {
	return s.TimeLastVacuumed
}

func (s *DescribeDBInstanceDataBloatResponseBodyItems) SetBloatCeoff(v string) *DescribeDBInstanceDataBloatResponseBodyItems {
	s.BloatCeoff = &v
	return s
}

func (s *DescribeDBInstanceDataBloatResponseBodyItems) SetBloatSize(v string) *DescribeDBInstanceDataBloatResponseBodyItems {
	s.BloatSize = &v
	return s
}

func (s *DescribeDBInstanceDataBloatResponseBodyItems) SetDatabaseName(v string) *DescribeDBInstanceDataBloatResponseBodyItems {
	s.DatabaseName = &v
	return s
}

func (s *DescribeDBInstanceDataBloatResponseBodyItems) SetExpectTableSize(v string) *DescribeDBInstanceDataBloatResponseBodyItems {
	s.ExpectTableSize = &v
	return s
}

func (s *DescribeDBInstanceDataBloatResponseBodyItems) SetRealTableSize(v string) *DescribeDBInstanceDataBloatResponseBodyItems {
	s.RealTableSize = &v
	return s
}

func (s *DescribeDBInstanceDataBloatResponseBodyItems) SetSchemaName(v string) *DescribeDBInstanceDataBloatResponseBodyItems {
	s.SchemaName = &v
	return s
}

func (s *DescribeDBInstanceDataBloatResponseBodyItems) SetSequence(v int32) *DescribeDBInstanceDataBloatResponseBodyItems {
	s.Sequence = &v
	return s
}

func (s *DescribeDBInstanceDataBloatResponseBodyItems) SetStorageType(v string) *DescribeDBInstanceDataBloatResponseBodyItems {
	s.StorageType = &v
	return s
}

func (s *DescribeDBInstanceDataBloatResponseBodyItems) SetSuggestedAction(v string) *DescribeDBInstanceDataBloatResponseBodyItems {
	s.SuggestedAction = &v
	return s
}

func (s *DescribeDBInstanceDataBloatResponseBodyItems) SetTableName(v string) *DescribeDBInstanceDataBloatResponseBodyItems {
	s.TableName = &v
	return s
}

func (s *DescribeDBInstanceDataBloatResponseBodyItems) SetTimeLastUpdated(v string) *DescribeDBInstanceDataBloatResponseBodyItems {
	s.TimeLastUpdated = &v
	return s
}

func (s *DescribeDBInstanceDataBloatResponseBodyItems) SetTimeLastVacuumed(v string) *DescribeDBInstanceDataBloatResponseBodyItems {
	s.TimeLastVacuumed = &v
	return s
}

func (s *DescribeDBInstanceDataBloatResponseBodyItems) Validate() error {
	return dara.Validate(s)
}

type iDescribeDBInstanceDataBloatResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DescribeDBInstanceDataBloatResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DescribeDBInstanceDataBloatResponse
	GetStatusCode() *int32
	SetBody(v *DescribeDBInstanceDataBloatResponseBody) *DescribeDBInstanceDataBloatResponse
	GetBody() *DescribeDBInstanceDataBloatResponseBody
}

type DescribeDBInstanceDataBloatResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeDBInstanceDataBloatResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeDBInstanceDataBloatResponse) String() string {
	return dara.Prettify(s)
}

func (s DescribeDBInstanceDataBloatResponse) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceDataBloatResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DescribeDBInstanceDataBloatResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DescribeDBInstanceDataBloatResponse) GetBody() *DescribeDBInstanceDataBloatResponseBody {
	return s.Body
}

func (s *DescribeDBInstanceDataBloatResponse) SetHeaders(v map[string]*string) *DescribeDBInstanceDataBloatResponse {
	s.Headers = v
	return s
}

func (s *DescribeDBInstanceDataBloatResponse) SetStatusCode(v int32) *DescribeDBInstanceDataBloatResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDBInstanceDataBloatResponse) SetBody(v *DescribeDBInstanceDataBloatResponseBody) *DescribeDBInstanceDataBloatResponse {
	s.Body = v
	return s
}

func (s *DescribeDBInstanceDataBloatResponse) Validate() error {
	return dara.Validate(s)
}

type iDescribeDBInstanceDataSkewRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *DescribeDBInstanceDataSkewRequest
	GetDBInstanceId() *string
	SetDatabase(v string) *DescribeDBInstanceDataSkewRequest
	GetDatabase() *string
	SetOrderBy(v string) *DescribeDBInstanceDataSkewRequest
	GetOrderBy() *string
	SetPageNumber(v int32) *DescribeDBInstanceDataSkewRequest
	GetPageNumber() *int32
	SetPageSize(v int32) *DescribeDBInstanceDataSkewRequest
	GetPageSize() *int32
}

type DescribeDBInstanceDataSkewRequest struct {
	// The ID of the instance.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the details of all AnalyticDB for PostgreSQL instances in a specific region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The name of the database.
	//
	// example:
	//
	// test
	Database *string `json:"Database,omitempty" xml:"Database,omitempty"`
	// order by condition
	//
	// example:
	//
	// {Field: TableSkew, Type: Desc}
	OrderBy *string `json:"OrderBy,omitempty" xml:"OrderBy,omitempty"`
	// The number of the page to return. The value must be an integer that is greater than 0. Default value: **1**.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. Valid values:
	//
	// 	- **30**
	//
	// 	- **50**
	//
	// 	- **100**
	//
	// Default value: **30**.
	//
	// example:
	//
	// 20
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s DescribeDBInstanceDataSkewRequest) String() string {
	return dara.Prettify(s)
}

func (s DescribeDBInstanceDataSkewRequest) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceDataSkewRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *DescribeDBInstanceDataSkewRequest) GetDatabase() *string {
	return s.Database
}

func (s *DescribeDBInstanceDataSkewRequest) GetOrderBy() *string {
	return s.OrderBy
}

func (s *DescribeDBInstanceDataSkewRequest) GetPageNumber() *int32 {
	return s.PageNumber
}

func (s *DescribeDBInstanceDataSkewRequest) GetPageSize() *int32 {
	return s.PageSize
}

func (s *DescribeDBInstanceDataSkewRequest) SetDBInstanceId(v string) *DescribeDBInstanceDataSkewRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDBInstanceDataSkewRequest) SetDatabase(v string) *DescribeDBInstanceDataSkewRequest {
	s.Database = &v
	return s
}

func (s *DescribeDBInstanceDataSkewRequest) SetOrderBy(v string) *DescribeDBInstanceDataSkewRequest {
	s.OrderBy = &v
	return s
}

func (s *DescribeDBInstanceDataSkewRequest) SetPageNumber(v int32) *DescribeDBInstanceDataSkewRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeDBInstanceDataSkewRequest) SetPageSize(v int32) *DescribeDBInstanceDataSkewRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeDBInstanceDataSkewRequest) Validate() error {
	return dara.Validate(s)
}

type iDescribeDBInstanceDataSkewResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetItems(v []*DescribeDBInstanceDataSkewResponseBodyItems) *DescribeDBInstanceDataSkewResponseBody
	GetItems() []*DescribeDBInstanceDataSkewResponseBodyItems
	SetPageNumber(v int32) *DescribeDBInstanceDataSkewResponseBody
	GetPageNumber() *int32
	SetRequestId(v string) *DescribeDBInstanceDataSkewResponseBody
	GetRequestId() *string
	SetTotalCount(v int32) *DescribeDBInstanceDataSkewResponseBody
	GetTotalCount() *int32
}

type DescribeDBInstanceDataSkewResponseBody struct {
	// Details about data skew.
	Items []*DescribeDBInstanceDataSkewResponseBodyItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Repeated"`
	// The page number of the returned page.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// B4CAF581-2AC7-41AD-8940-D56DF7AADF5B
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 100
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeDBInstanceDataSkewResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DescribeDBInstanceDataSkewResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceDataSkewResponseBody) GetItems() []*DescribeDBInstanceDataSkewResponseBodyItems {
	return s.Items
}

func (s *DescribeDBInstanceDataSkewResponseBody) GetPageNumber() *int32 {
	return s.PageNumber
}

func (s *DescribeDBInstanceDataSkewResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DescribeDBInstanceDataSkewResponseBody) GetTotalCount() *int32 {
	return s.TotalCount
}

func (s *DescribeDBInstanceDataSkewResponseBody) SetItems(v []*DescribeDBInstanceDataSkewResponseBodyItems) *DescribeDBInstanceDataSkewResponseBody {
	s.Items = v
	return s
}

func (s *DescribeDBInstanceDataSkewResponseBody) SetPageNumber(v int32) *DescribeDBInstanceDataSkewResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeDBInstanceDataSkewResponseBody) SetRequestId(v string) *DescribeDBInstanceDataSkewResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDBInstanceDataSkewResponseBody) SetTotalCount(v int32) *DescribeDBInstanceDataSkewResponseBody {
	s.TotalCount = &v
	return s
}

func (s *DescribeDBInstanceDataSkewResponseBody) Validate() error {
	return dara.Validate(s)
}

type DescribeDBInstanceDataSkewResponseBodyItems struct {
	// The name of the database.
	//
	// example:
	//
	// adbtest
	DatabaseName *string `json:"DatabaseName,omitempty" xml:"DatabaseName,omitempty"`
	// The distribution key of the table.
	//
	// example:
	//
	// ItemId
	DistributeKey *string `json:"DistributeKey,omitempty" xml:"DistributeKey,omitempty"`
	// The owner of the table.
	//
	// example:
	//
	// adbpguser
	Owner *string `json:"Owner,omitempty" xml:"Owner,omitempty"`
	// The name of the schema.
	//
	// example:
	//
	// schema1
	SchemaName *string `json:"SchemaName,omitempty" xml:"SchemaName,omitempty"`
	// The sequence number of the data skew case. All data skew cases are sorted by severity in descending order.
	//
	// example:
	//
	// 1
	Sequence *int32 `json:"Sequence,omitempty" xml:"Sequence,omitempty"`
	// The name of the table.
	//
	// example:
	//
	// tab1
	TableName *string `json:"TableName,omitempty" xml:"TableName,omitempty"`
	// The total number of rows in the table.
	//
	// example:
	//
	// 100000
	TableSize *string `json:"TableSize,omitempty" xml:"TableSize,omitempty"`
	// The skew ratio of the table. Valid values: 0 to 100. Unit: %. A greater value indicates that the table is more severely skewed. A smaller value indicates less impact on query performance. A value of 0 indicates no data skew.
	//
	// example:
	//
	// 10.23
	TableSkew *string `json:"TableSkew,omitempty" xml:"TableSkew,omitempty"`
	// The time when the table was last deleted, inserted, or updated.
	//
	// example:
	//
	// 2020-09-08T20:00:00Z
	TimeLastUpdated *string `json:"TimeLastUpdated,omitempty" xml:"TimeLastUpdated,omitempty"`
}

func (s DescribeDBInstanceDataSkewResponseBodyItems) String() string {
	return dara.Prettify(s)
}

func (s DescribeDBInstanceDataSkewResponseBodyItems) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceDataSkewResponseBodyItems) GetDatabaseName() *string {
	return s.DatabaseName
}

func (s *DescribeDBInstanceDataSkewResponseBodyItems) GetDistributeKey() *string {
	return s.DistributeKey
}

func (s *DescribeDBInstanceDataSkewResponseBodyItems) GetOwner() *string {
	return s.Owner
}

func (s *DescribeDBInstanceDataSkewResponseBodyItems) GetSchemaName() *string {
	return s.SchemaName
}

func (s *DescribeDBInstanceDataSkewResponseBodyItems) GetSequence() *int32 {
	return s.Sequence
}

func (s *DescribeDBInstanceDataSkewResponseBodyItems) GetTableName() *string {
	return s.TableName
}

func (s *DescribeDBInstanceDataSkewResponseBodyItems) GetTableSize() *string {
	return s.TableSize
}

func (s *DescribeDBInstanceDataSkewResponseBodyItems) GetTableSkew() *string {
	return s.TableSkew
}

func (s *DescribeDBInstanceDataSkewResponseBodyItems) GetTimeLastUpdated() *string {
	return s.TimeLastUpdated
}

func (s *DescribeDBInstanceDataSkewResponseBodyItems) SetDatabaseName(v string) *DescribeDBInstanceDataSkewResponseBodyItems {
	s.DatabaseName = &v
	return s
}

func (s *DescribeDBInstanceDataSkewResponseBodyItems) SetDistributeKey(v string) *DescribeDBInstanceDataSkewResponseBodyItems {
	s.DistributeKey = &v
	return s
}

func (s *DescribeDBInstanceDataSkewResponseBodyItems) SetOwner(v string) *DescribeDBInstanceDataSkewResponseBodyItems {
	s.Owner = &v
	return s
}

func (s *DescribeDBInstanceDataSkewResponseBodyItems) SetSchemaName(v string) *DescribeDBInstanceDataSkewResponseBodyItems {
	s.SchemaName = &v
	return s
}

func (s *DescribeDBInstanceDataSkewResponseBodyItems) SetSequence(v int32) *DescribeDBInstanceDataSkewResponseBodyItems {
	s.Sequence = &v
	return s
}

func (s *DescribeDBInstanceDataSkewResponseBodyItems) SetTableName(v string) *DescribeDBInstanceDataSkewResponseBodyItems {
	s.TableName = &v
	return s
}

func (s *DescribeDBInstanceDataSkewResponseBodyItems) SetTableSize(v string) *DescribeDBInstanceDataSkewResponseBodyItems {
	s.TableSize = &v
	return s
}

func (s *DescribeDBInstanceDataSkewResponseBodyItems) SetTableSkew(v string) *DescribeDBInstanceDataSkewResponseBodyItems {
	s.TableSkew = &v
	return s
}

func (s *DescribeDBInstanceDataSkewResponseBodyItems) SetTimeLastUpdated(v string) *DescribeDBInstanceDataSkewResponseBodyItems {
	s.TimeLastUpdated = &v
	return s
}

func (s *DescribeDBInstanceDataSkewResponseBodyItems) Validate() error {
	return dara.Validate(s)
}

type iDescribeDBInstanceDataSkewResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DescribeDBInstanceDataSkewResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DescribeDBInstanceDataSkewResponse
	GetStatusCode() *int32
	SetBody(v *DescribeDBInstanceDataSkewResponseBody) *DescribeDBInstanceDataSkewResponse
	GetBody() *DescribeDBInstanceDataSkewResponseBody
}

type DescribeDBInstanceDataSkewResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeDBInstanceDataSkewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeDBInstanceDataSkewResponse) String() string {
	return dara.Prettify(s)
}

func (s DescribeDBInstanceDataSkewResponse) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceDataSkewResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DescribeDBInstanceDataSkewResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DescribeDBInstanceDataSkewResponse) GetBody() *DescribeDBInstanceDataSkewResponseBody {
	return s.Body
}

func (s *DescribeDBInstanceDataSkewResponse) SetHeaders(v map[string]*string) *DescribeDBInstanceDataSkewResponse {
	s.Headers = v
	return s
}

func (s *DescribeDBInstanceDataSkewResponse) SetStatusCode(v int32) *DescribeDBInstanceDataSkewResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDBInstanceDataSkewResponse) SetBody(v *DescribeDBInstanceDataSkewResponseBody) *DescribeDBInstanceDataSkewResponse {
	s.Body = v
	return s
}

func (s *DescribeDBInstanceDataSkewResponse) Validate() error {
	return dara.Validate(s)
}

type iDescribeDBInstanceDiagnosisSummaryRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *DescribeDBInstanceDiagnosisSummaryRequest
	GetDBInstanceId() *string
	SetPageNumber(v int32) *DescribeDBInstanceDiagnosisSummaryRequest
	GetPageNumber() *int32
	SetPageSize(v int32) *DescribeDBInstanceDiagnosisSummaryRequest
	GetPageSize() *int32
	SetRolePreferd(v string) *DescribeDBInstanceDiagnosisSummaryRequest
	GetRolePreferd() *string
	SetStartStatus(v string) *DescribeDBInstanceDiagnosisSummaryRequest
	GetStartStatus() *string
	SetSyncMode(v string) *DescribeDBInstanceDiagnosisSummaryRequest
	GetSyncMode() *string
}

type DescribeDBInstanceDiagnosisSummaryRequest struct {
	// The instance ID.
	//
	// > You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query details about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The page number. Pages start from page 1. Default value: **1**.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. Valid values:
	//
	// 	- **20**
	//
	// 	- **50**
	//
	// 	- **100**
	//
	// Default value: **20**.
	//
	// example:
	//
	// 20
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The role state of the node. It specifies whether a primary/secondary switchover occurs. Valid values:
	//
	// 	- **normal**: The node role is normal. No primary/secondary switchover occurs.
	//
	// 	- **reverse**: The node role is reversed. A primary/secondary switchover occurs.
	//
	// example:
	//
	// normal
	RolePreferd *string `json:"RolePreferd,omitempty" xml:"RolePreferd,omitempty"`
	// The running state of the node. Valid values:
	//
	// 	- **UP**: The node is running.
	//
	// 	- **DOWN**: The node is faulty.
	//
	// If you do not specify this parameter, the information about nodes in all running states is returned.
	//
	// example:
	//
	// UP
	StartStatus *string `json:"StartStatus,omitempty" xml:"StartStatus,omitempty"`
	// The data synchronization state of the node. Valid values:
	//
	// 	- **synced**: The node data is synchronized.
	//
	// 	- **notSyncing**: The node data is not synchronized.
	//
	// If you do not specify this parameter, the information about nodes in all synchronization states is returned.
	//
	// example:
	//
	// synced
	SyncMode *string `json:"SyncMode,omitempty" xml:"SyncMode,omitempty"`
}

func (s DescribeDBInstanceDiagnosisSummaryRequest) String() string {
	return dara.Prettify(s)
}

func (s DescribeDBInstanceDiagnosisSummaryRequest) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceDiagnosisSummaryRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *DescribeDBInstanceDiagnosisSummaryRequest) GetPageNumber() *int32 {
	return s.PageNumber
}

func (s *DescribeDBInstanceDiagnosisSummaryRequest) GetPageSize() *int32 {
	return s.PageSize
}

func (s *DescribeDBInstanceDiagnosisSummaryRequest) GetRolePreferd() *string {
	return s.RolePreferd
}

func (s *DescribeDBInstanceDiagnosisSummaryRequest) GetStartStatus() *string {
	return s.StartStatus
}

func (s *DescribeDBInstanceDiagnosisSummaryRequest) GetSyncMode() *string {
	return s.SyncMode
}

func (s *DescribeDBInstanceDiagnosisSummaryRequest) SetDBInstanceId(v string) *DescribeDBInstanceDiagnosisSummaryRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDBInstanceDiagnosisSummaryRequest) SetPageNumber(v int32) *DescribeDBInstanceDiagnosisSummaryRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeDBInstanceDiagnosisSummaryRequest) SetPageSize(v int32) *DescribeDBInstanceDiagnosisSummaryRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeDBInstanceDiagnosisSummaryRequest) SetRolePreferd(v string) *DescribeDBInstanceDiagnosisSummaryRequest {
	s.RolePreferd = &v
	return s
}

func (s *DescribeDBInstanceDiagnosisSummaryRequest) SetStartStatus(v string) *DescribeDBInstanceDiagnosisSummaryRequest {
	s.StartStatus = &v
	return s
}

func (s *DescribeDBInstanceDiagnosisSummaryRequest) SetSyncMode(v string) *DescribeDBInstanceDiagnosisSummaryRequest {
	s.SyncMode = &v
	return s
}

func (s *DescribeDBInstanceDiagnosisSummaryRequest) Validate() error {
	return dara.Validate(s)
}

type iDescribeDBInstanceDiagnosisSummaryResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetItems(v []*DescribeDBInstanceDiagnosisSummaryResponseBodyItems) *DescribeDBInstanceDiagnosisSummaryResponseBody
	GetItems() []*DescribeDBInstanceDiagnosisSummaryResponseBodyItems
	SetMasterStatusInfo(v *DescribeDBInstanceDiagnosisSummaryResponseBodyMasterStatusInfo) *DescribeDBInstanceDiagnosisSummaryResponseBody
	GetMasterStatusInfo() *DescribeDBInstanceDiagnosisSummaryResponseBodyMasterStatusInfo
	SetPageNumber(v string) *DescribeDBInstanceDiagnosisSummaryResponseBody
	GetPageNumber() *string
	SetRequestId(v string) *DescribeDBInstanceDiagnosisSummaryResponseBody
	GetRequestId() *string
	SetSegmentStatusInfo(v *DescribeDBInstanceDiagnosisSummaryResponseBodySegmentStatusInfo) *DescribeDBInstanceDiagnosisSummaryResponseBody
	GetSegmentStatusInfo() *DescribeDBInstanceDiagnosisSummaryResponseBodySegmentStatusInfo
	SetTotalCount(v string) *DescribeDBInstanceDiagnosisSummaryResponseBody
	GetTotalCount() *string
}

type DescribeDBInstanceDiagnosisSummaryResponseBody struct {
	// The group ID.
	Items []*DescribeDBInstanceDiagnosisSummaryResponseBodyItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Repeated"`
	// The state information about the coordinator node.
	MasterStatusInfo *DescribeDBInstanceDiagnosisSummaryResponseBodyMasterStatusInfo `json:"MasterStatusInfo,omitempty" xml:"MasterStatusInfo,omitempty" type:"Struct"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *string `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 070534EC-78D5-5519-83CC-E7B1A9213483
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The state information about compute nodes.
	SegmentStatusInfo *DescribeDBInstanceDiagnosisSummaryResponseBodySegmentStatusInfo `json:"SegmentStatusInfo,omitempty" xml:"SegmentStatusInfo,omitempty" type:"Struct"`
	// The total number of entries returned.
	//
	// example:
	//
	// 6
	TotalCount *string `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeDBInstanceDiagnosisSummaryResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DescribeDBInstanceDiagnosisSummaryResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceDiagnosisSummaryResponseBody) GetItems() []*DescribeDBInstanceDiagnosisSummaryResponseBodyItems {
	return s.Items
}

func (s *DescribeDBInstanceDiagnosisSummaryResponseBody) GetMasterStatusInfo() *DescribeDBInstanceDiagnosisSummaryResponseBodyMasterStatusInfo {
	return s.MasterStatusInfo
}

func (s *DescribeDBInstanceDiagnosisSummaryResponseBody) GetPageNumber() *string {
	return s.PageNumber
}

func (s *DescribeDBInstanceDiagnosisSummaryResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DescribeDBInstanceDiagnosisSummaryResponseBody) GetSegmentStatusInfo() *DescribeDBInstanceDiagnosisSummaryResponseBodySegmentStatusInfo {
	return s.SegmentStatusInfo
}

func (s *DescribeDBInstanceDiagnosisSummaryResponseBody) GetTotalCount() *string {
	return s.TotalCount
}

func (s *DescribeDBInstanceDiagnosisSummaryResponseBody) SetItems(v []*DescribeDBInstanceDiagnosisSummaryResponseBodyItems) *DescribeDBInstanceDiagnosisSummaryResponseBody {
	s.Items = v
	return s
}

func (s *DescribeDBInstanceDiagnosisSummaryResponseBody) SetMasterStatusInfo(v *DescribeDBInstanceDiagnosisSummaryResponseBodyMasterStatusInfo) *DescribeDBInstanceDiagnosisSummaryResponseBody {
	s.MasterStatusInfo = v
	return s
}

func (s *DescribeDBInstanceDiagnosisSummaryResponseBody) SetPageNumber(v string) *DescribeDBInstanceDiagnosisSummaryResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeDBInstanceDiagnosisSummaryResponseBody) SetRequestId(v string) *DescribeDBInstanceDiagnosisSummaryResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDBInstanceDiagnosisSummaryResponseBody) SetSegmentStatusInfo(v *DescribeDBInstanceDiagnosisSummaryResponseBodySegmentStatusInfo) *DescribeDBInstanceDiagnosisSummaryResponseBody {
	s.SegmentStatusInfo = v
	return s
}

func (s *DescribeDBInstanceDiagnosisSummaryResponseBody) SetTotalCount(v string) *DescribeDBInstanceDiagnosisSummaryResponseBody {
	s.TotalCount = &v
	return s
}

func (s *DescribeDBInstanceDiagnosisSummaryResponseBody) Validate() error {
	return dara.Validate(s)
}

type DescribeDBInstanceDiagnosisSummaryResponseBodyItems struct {
	// The name of the node.
	//
	// example:
	//
	// gp-t4np568qe9710****-master-100984919
	Hostname *string `json:"Hostname,omitempty" xml:"Hostname,omitempty"`
	// The IP address of the node.
	//
	// example:
	//
	// 192.168.XX.XX
	NodeAddress *string `json:"NodeAddress,omitempty" xml:"NodeAddress,omitempty"`
	// The node group ID.
	//
	// example:
	//
	// -1
	NodeCID *string `json:"NodeCID,omitempty" xml:"NodeCID,omitempty"`
	// The node ID.
	//
	// example:
	//
	// 1
	NodeID *string `json:"NodeID,omitempty" xml:"NodeID,omitempty"`
	// The name of the host where the node resides.
	//
	// example:
	//
	// ap-southeast-1.i-t4n4c4ryr0yr441d****
	NodeName *string `json:"NodeName,omitempty" xml:"NodeName,omitempty"`
	// The port number of the node.
	//
	// example:
	//
	// 3000
	NodePort *string `json:"NodePort,omitempty" xml:"NodePort,omitempty"`
	// The initial role of the node. Valid values:
	//
	// 	- **primary**: primary node.
	//
	// 	- **mirror**: secondary node.
	//
	// If the value of this parameter is the same as that of **NodeRole**, no primary/secondary switchover occurs. If the value of this parameter is different from that of **NodeRole**, a primary/secondary switchover occurs.
	//
	// example:
	//
	// primary
	NodePreferredRole *string `json:"NodePreferredRole,omitempty" xml:"NodePreferredRole,omitempty"`
	// The data synchronization state of the node. Valid values:
	//
	// 	- **Synced**: The node data is synchronized.
	//
	// 	- **Not Syncing**: The node data is not synchronized.
	//
	// 	- **No sync required**: Data synchronization is not required. This value may be returned only for the coordinator node.
	//
	// example:
	//
	// Synced
	NodeReplicationMode *string `json:"NodeReplicationMode,omitempty" xml:"NodeReplicationMode,omitempty"`
	// The current role of the node. Valid values:
	//
	// 	- **primary**: primary node.
	//
	// 	- **mirror**: secondary node.
	//
	// example:
	//
	// primary
	NodeRole *string `json:"NodeRole,omitempty" xml:"NodeRole,omitempty"`
	// The running state of the node. Valid values:
	//
	// 	- **UP**: The node is running.
	//
	// 	- **DOWN**: The node is faulty.
	//
	// example:
	//
	// UP
	NodeStatus *string `json:"NodeStatus,omitempty" xml:"NodeStatus,omitempty"`
	// The type of the node. Valid values:
	//
	// 	- **master**: primary coordinator node.
	//
	// 	- **slave**: standby coordinator node.
	//
	// 	- **segment**: compute node.
	//
	// example:
	//
	// master
	NodeType *string `json:"NodeType,omitempty" xml:"NodeType,omitempty"`
}

func (s DescribeDBInstanceDiagnosisSummaryResponseBodyItems) String() string {
	return dara.Prettify(s)
}

func (s DescribeDBInstanceDiagnosisSummaryResponseBodyItems) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceDiagnosisSummaryResponseBodyItems) GetHostname() *string {
	return s.Hostname
}

func (s *DescribeDBInstanceDiagnosisSummaryResponseBodyItems) GetNodeAddress() *string {
	return s.NodeAddress
}

func (s *DescribeDBInstanceDiagnosisSummaryResponseBodyItems) GetNodeCID() *string {
	return s.NodeCID
}

func (s *DescribeDBInstanceDiagnosisSummaryResponseBodyItems) GetNodeID() *string {
	return s.NodeID
}

func (s *DescribeDBInstanceDiagnosisSummaryResponseBodyItems) GetNodeName() *string {
	return s.NodeName
}

func (s *DescribeDBInstanceDiagnosisSummaryResponseBodyItems) GetNodePort() *string {
	return s.NodePort
}

func (s *DescribeDBInstanceDiagnosisSummaryResponseBodyItems) GetNodePreferredRole() *string {
	return s.NodePreferredRole
}

func (s *DescribeDBInstanceDiagnosisSummaryResponseBodyItems) GetNodeReplicationMode() *string {
	return s.NodeReplicationMode
}

func (s *DescribeDBInstanceDiagnosisSummaryResponseBodyItems) GetNodeRole() *string {
	return s.NodeRole
}

func (s *DescribeDBInstanceDiagnosisSummaryResponseBodyItems) GetNodeStatus() *string {
	return s.NodeStatus
}

func (s *DescribeDBInstanceDiagnosisSummaryResponseBodyItems) GetNodeType() *string {
	return s.NodeType
}

func (s *DescribeDBInstanceDiagnosisSummaryResponseBodyItems) SetHostname(v string) *DescribeDBInstanceDiagnosisSummaryResponseBodyItems {
	s.Hostname = &v
	return s
}

func (s *DescribeDBInstanceDiagnosisSummaryResponseBodyItems) SetNodeAddress(v string) *DescribeDBInstanceDiagnosisSummaryResponseBodyItems {
	s.NodeAddress = &v
	return s
}

func (s *DescribeDBInstanceDiagnosisSummaryResponseBodyItems) SetNodeCID(v string) *DescribeDBInstanceDiagnosisSummaryResponseBodyItems {
	s.NodeCID = &v
	return s
}

func (s *DescribeDBInstanceDiagnosisSummaryResponseBodyItems) SetNodeID(v string) *DescribeDBInstanceDiagnosisSummaryResponseBodyItems {
	s.NodeID = &v
	return s
}

func (s *DescribeDBInstanceDiagnosisSummaryResponseBodyItems) SetNodeName(v string) *DescribeDBInstanceDiagnosisSummaryResponseBodyItems {
	s.NodeName = &v
	return s
}

func (s *DescribeDBInstanceDiagnosisSummaryResponseBodyItems) SetNodePort(v string) *DescribeDBInstanceDiagnosisSummaryResponseBodyItems {
	s.NodePort = &v
	return s
}

func (s *DescribeDBInstanceDiagnosisSummaryResponseBodyItems) SetNodePreferredRole(v string) *DescribeDBInstanceDiagnosisSummaryResponseBodyItems {
	s.NodePreferredRole = &v
	return s
}

func (s *DescribeDBInstanceDiagnosisSummaryResponseBodyItems) SetNodeReplicationMode(v string) *DescribeDBInstanceDiagnosisSummaryResponseBodyItems {
	s.NodeReplicationMode = &v
	return s
}

func (s *DescribeDBInstanceDiagnosisSummaryResponseBodyItems) SetNodeRole(v string) *DescribeDBInstanceDiagnosisSummaryResponseBodyItems {
	s.NodeRole = &v
	return s
}

func (s *DescribeDBInstanceDiagnosisSummaryResponseBodyItems) SetNodeStatus(v string) *DescribeDBInstanceDiagnosisSummaryResponseBodyItems {
	s.NodeStatus = &v
	return s
}

func (s *DescribeDBInstanceDiagnosisSummaryResponseBodyItems) SetNodeType(v string) *DescribeDBInstanceDiagnosisSummaryResponseBodyItems {
	s.NodeType = &v
	return s
}

func (s *DescribeDBInstanceDiagnosisSummaryResponseBodyItems) Validate() error {
	return dara.Validate(s)
}

type DescribeDBInstanceDiagnosisSummaryResponseBodyMasterStatusInfo struct {
	// The number of abnormal nodes.
	//
	// example:
	//
	// 0
	ExceptionNodeNum *int32 `json:"ExceptionNodeNum,omitempty" xml:"ExceptionNodeNum,omitempty"`
	// The number of normal nodes.
	//
	// example:
	//
	// 2
	NormalNodeNum *int32 `json:"NormalNodeNum,omitempty" xml:"NormalNodeNum,omitempty"`
	// The number of nodes whose roles are reversed.
	//
	// example:
	//
	// 0
	NotPreferredNodeNum *int32 `json:"NotPreferredNodeNum,omitempty" xml:"NotPreferredNodeNum,omitempty"`
	// The number of unsynchronized nodes.
	//
	// example:
	//
	// 0
	NotSyncingNodeNum *int32 `json:"NotSyncingNodeNum,omitempty" xml:"NotSyncingNodeNum,omitempty"`
	// The number of nodes whose roles are normal.
	//
	// example:
	//
	// 2
	PreferredNodeNum *int32 `json:"PreferredNodeNum,omitempty" xml:"PreferredNodeNum,omitempty"`
	// The number of synchronized nodes.
	//
	// example:
	//
	// 1
	SyncedNodeNum *int32 `json:"SyncedNodeNum,omitempty" xml:"SyncedNodeNum,omitempty"`
}

func (s DescribeDBInstanceDiagnosisSummaryResponseBodyMasterStatusInfo) String() string {
	return dara.Prettify(s)
}

func (s DescribeDBInstanceDiagnosisSummaryResponseBodyMasterStatusInfo) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceDiagnosisSummaryResponseBodyMasterStatusInfo) GetExceptionNodeNum() *int32 {
	return s.ExceptionNodeNum
}

func (s *DescribeDBInstanceDiagnosisSummaryResponseBodyMasterStatusInfo) GetNormalNodeNum() *int32 {
	return s.NormalNodeNum
}

func (s *DescribeDBInstanceDiagnosisSummaryResponseBodyMasterStatusInfo) GetNotPreferredNodeNum() *int32 {
	return s.NotPreferredNodeNum
}

func (s *DescribeDBInstanceDiagnosisSummaryResponseBodyMasterStatusInfo) GetNotSyncingNodeNum() *int32 {
	return s.NotSyncingNodeNum
}

func (s *DescribeDBInstanceDiagnosisSummaryResponseBodyMasterStatusInfo) GetPreferredNodeNum() *int32 {
	return s.PreferredNodeNum
}

func (s *DescribeDBInstanceDiagnosisSummaryResponseBodyMasterStatusInfo) GetSyncedNodeNum() *int32 {
	return s.SyncedNodeNum
}

func (s *DescribeDBInstanceDiagnosisSummaryResponseBodyMasterStatusInfo) SetExceptionNodeNum(v int32) *DescribeDBInstanceDiagnosisSummaryResponseBodyMasterStatusInfo {
	s.ExceptionNodeNum = &v
	return s
}

func (s *DescribeDBInstanceDiagnosisSummaryResponseBodyMasterStatusInfo) SetNormalNodeNum(v int32) *DescribeDBInstanceDiagnosisSummaryResponseBodyMasterStatusInfo {
	s.NormalNodeNum = &v
	return s
}

func (s *DescribeDBInstanceDiagnosisSummaryResponseBodyMasterStatusInfo) SetNotPreferredNodeNum(v int32) *DescribeDBInstanceDiagnosisSummaryResponseBodyMasterStatusInfo {
	s.NotPreferredNodeNum = &v
	return s
}

func (s *DescribeDBInstanceDiagnosisSummaryResponseBodyMasterStatusInfo) SetNotSyncingNodeNum(v int32) *DescribeDBInstanceDiagnosisSummaryResponseBodyMasterStatusInfo {
	s.NotSyncingNodeNum = &v
	return s
}

func (s *DescribeDBInstanceDiagnosisSummaryResponseBodyMasterStatusInfo) SetPreferredNodeNum(v int32) *DescribeDBInstanceDiagnosisSummaryResponseBodyMasterStatusInfo {
	s.PreferredNodeNum = &v
	return s
}

func (s *DescribeDBInstanceDiagnosisSummaryResponseBodyMasterStatusInfo) SetSyncedNodeNum(v int32) *DescribeDBInstanceDiagnosisSummaryResponseBodyMasterStatusInfo {
	s.SyncedNodeNum = &v
	return s
}

func (s *DescribeDBInstanceDiagnosisSummaryResponseBodyMasterStatusInfo) Validate() error {
	return dara.Validate(s)
}

type DescribeDBInstanceDiagnosisSummaryResponseBodySegmentStatusInfo struct {
	// The number of abnormal nodes.
	//
	// example:
	//
	// 0
	ExceptionNodeNum *int32 `json:"ExceptionNodeNum,omitempty" xml:"ExceptionNodeNum,omitempty"`
	// The number of normal nodes.
	//
	// example:
	//
	// 4
	NormalNodeNum *int32 `json:"NormalNodeNum,omitempty" xml:"NormalNodeNum,omitempty"`
	// The number of nodes whose roles are reversed.
	//
	// example:
	//
	// 0
	NotPreferredNodeNum *int32 `json:"NotPreferredNodeNum,omitempty" xml:"NotPreferredNodeNum,omitempty"`
	// The number of unsynchronized nodes.
	//
	// example:
	//
	// 4
	NotSyncingNodeNum *int32 `json:"NotSyncingNodeNum,omitempty" xml:"NotSyncingNodeNum,omitempty"`
	// The number of nodes whose roles are normal.
	//
	// example:
	//
	// 4
	PreferredNodeNum *int32 `json:"PreferredNodeNum,omitempty" xml:"PreferredNodeNum,omitempty"`
	// The number of synchronized nodes.
	//
	// example:
	//
	// 0
	SyncedNodeNum *int32 `json:"SyncedNodeNum,omitempty" xml:"SyncedNodeNum,omitempty"`
}

func (s DescribeDBInstanceDiagnosisSummaryResponseBodySegmentStatusInfo) String() string {
	return dara.Prettify(s)
}

func (s DescribeDBInstanceDiagnosisSummaryResponseBodySegmentStatusInfo) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceDiagnosisSummaryResponseBodySegmentStatusInfo) GetExceptionNodeNum() *int32 {
	return s.ExceptionNodeNum
}

func (s *DescribeDBInstanceDiagnosisSummaryResponseBodySegmentStatusInfo) GetNormalNodeNum() *int32 {
	return s.NormalNodeNum
}

func (s *DescribeDBInstanceDiagnosisSummaryResponseBodySegmentStatusInfo) GetNotPreferredNodeNum() *int32 {
	return s.NotPreferredNodeNum
}

func (s *DescribeDBInstanceDiagnosisSummaryResponseBodySegmentStatusInfo) GetNotSyncingNodeNum() *int32 {
	return s.NotSyncingNodeNum
}

func (s *DescribeDBInstanceDiagnosisSummaryResponseBodySegmentStatusInfo) GetPreferredNodeNum() *int32 {
	return s.PreferredNodeNum
}

func (s *DescribeDBInstanceDiagnosisSummaryResponseBodySegmentStatusInfo) GetSyncedNodeNum() *int32 {
	return s.SyncedNodeNum
}

func (s *DescribeDBInstanceDiagnosisSummaryResponseBodySegmentStatusInfo) SetExceptionNodeNum(v int32) *DescribeDBInstanceDiagnosisSummaryResponseBodySegmentStatusInfo {
	s.ExceptionNodeNum = &v
	return s
}

func (s *DescribeDBInstanceDiagnosisSummaryResponseBodySegmentStatusInfo) SetNormalNodeNum(v int32) *DescribeDBInstanceDiagnosisSummaryResponseBodySegmentStatusInfo {
	s.NormalNodeNum = &v
	return s
}

func (s *DescribeDBInstanceDiagnosisSummaryResponseBodySegmentStatusInfo) SetNotPreferredNodeNum(v int32) *DescribeDBInstanceDiagnosisSummaryResponseBodySegmentStatusInfo {
	s.NotPreferredNodeNum = &v
	return s
}

func (s *DescribeDBInstanceDiagnosisSummaryResponseBodySegmentStatusInfo) SetNotSyncingNodeNum(v int32) *DescribeDBInstanceDiagnosisSummaryResponseBodySegmentStatusInfo {
	s.NotSyncingNodeNum = &v
	return s
}

func (s *DescribeDBInstanceDiagnosisSummaryResponseBodySegmentStatusInfo) SetPreferredNodeNum(v int32) *DescribeDBInstanceDiagnosisSummaryResponseBodySegmentStatusInfo {
	s.PreferredNodeNum = &v
	return s
}

func (s *DescribeDBInstanceDiagnosisSummaryResponseBodySegmentStatusInfo) SetSyncedNodeNum(v int32) *DescribeDBInstanceDiagnosisSummaryResponseBodySegmentStatusInfo {
	s.SyncedNodeNum = &v
	return s
}

func (s *DescribeDBInstanceDiagnosisSummaryResponseBodySegmentStatusInfo) Validate() error {
	return dara.Validate(s)
}

type iDescribeDBInstanceDiagnosisSummaryResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DescribeDBInstanceDiagnosisSummaryResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DescribeDBInstanceDiagnosisSummaryResponse
	GetStatusCode() *int32
	SetBody(v *DescribeDBInstanceDiagnosisSummaryResponseBody) *DescribeDBInstanceDiagnosisSummaryResponse
	GetBody() *DescribeDBInstanceDiagnosisSummaryResponseBody
}

type DescribeDBInstanceDiagnosisSummaryResponse struct {
	Headers    map[string]*string                              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeDBInstanceDiagnosisSummaryResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeDBInstanceDiagnosisSummaryResponse) String() string {
	return dara.Prettify(s)
}

func (s DescribeDBInstanceDiagnosisSummaryResponse) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceDiagnosisSummaryResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DescribeDBInstanceDiagnosisSummaryResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DescribeDBInstanceDiagnosisSummaryResponse) GetBody() *DescribeDBInstanceDiagnosisSummaryResponseBody {
	return s.Body
}

func (s *DescribeDBInstanceDiagnosisSummaryResponse) SetHeaders(v map[string]*string) *DescribeDBInstanceDiagnosisSummaryResponse {
	s.Headers = v
	return s
}

func (s *DescribeDBInstanceDiagnosisSummaryResponse) SetStatusCode(v int32) *DescribeDBInstanceDiagnosisSummaryResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDBInstanceDiagnosisSummaryResponse) SetBody(v *DescribeDBInstanceDiagnosisSummaryResponseBody) *DescribeDBInstanceDiagnosisSummaryResponse {
	s.Body = v
	return s
}

func (s *DescribeDBInstanceDiagnosisSummaryResponse) Validate() error {
	return dara.Validate(s)
}

type iDescribeDBInstanceErrorLogRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *DescribeDBInstanceErrorLogRequest
	GetDBInstanceId() *string
	SetDatabase(v string) *DescribeDBInstanceErrorLogRequest
	GetDatabase() *string
	SetEndTime(v string) *DescribeDBInstanceErrorLogRequest
	GetEndTime() *string
	SetHost(v string) *DescribeDBInstanceErrorLogRequest
	GetHost() *string
	SetKeywords(v string) *DescribeDBInstanceErrorLogRequest
	GetKeywords() *string
	SetLogLevel(v string) *DescribeDBInstanceErrorLogRequest
	GetLogLevel() *string
	SetPageNumber(v int32) *DescribeDBInstanceErrorLogRequest
	GetPageNumber() *int32
	SetPageSize(v int32) *DescribeDBInstanceErrorLogRequest
	GetPageSize() *int32
	SetStartTime(v string) *DescribeDBInstanceErrorLogRequest
	GetStartTime() *string
	SetUser(v string) *DescribeDBInstanceErrorLogRequest
	GetUser() *string
}

type DescribeDBInstanceErrorLogRequest struct {
	// The instance ID.
	//
	// > You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The name of the database.
	//
	// example:
	//
	// adbtest
	Database *string `json:"Database,omitempty" xml:"Database,omitempty"`
	// The end of the time range to query. Specify the time in the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm*Z format. The time must be in UTC. The end time must be later than the start time.
	//
	// example:
	//
	// 2022-04-25T06:59Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// This parameter is not supported in Alibaba Cloud public cloud.
	//
	// example:
	//
	// null
	Host *string `json:"Host,omitempty" xml:"Host,omitempty"`
	// One or more keywords that are used to query error logs.
	//
	// example:
	//
	// error
	Keywords *string `json:"Keywords,omitempty" xml:"Keywords,omitempty"`
	// The level of the logs to query. Valid values:
	//
	// 	- **ALL**: queries all error logs.
	//
	// 	- **PANIC**: queries only abnormal logs.
	//
	// 	- **FATAL**: queries only critical logs.
	//
	// 	- **ERROR**: queries only error logs.
	//
	// example:
	//
	// ALL
	LogLevel *string `json:"LogLevel,omitempty" xml:"LogLevel,omitempty"`
	// The page number. Pages start from page 1. Default value: **1**.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. Valid values:
	//
	// 	- **20**
	//
	// 	- **50**
	//
	// 	- **100**
	//
	// Default value: **20**.
	//
	// example:
	//
	// 20
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The beginning of the time range to query. Specify the time in the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm*Z format. The time must be in UTC.
	//
	// example:
	//
	// 2022-04-24T06:59Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The username.
	//
	// example:
	//
	// adbpguser
	User *string `json:"User,omitempty" xml:"User,omitempty"`
}

func (s DescribeDBInstanceErrorLogRequest) String() string {
	return dara.Prettify(s)
}

func (s DescribeDBInstanceErrorLogRequest) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceErrorLogRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *DescribeDBInstanceErrorLogRequest) GetDatabase() *string {
	return s.Database
}

func (s *DescribeDBInstanceErrorLogRequest) GetEndTime() *string {
	return s.EndTime
}

func (s *DescribeDBInstanceErrorLogRequest) GetHost() *string {
	return s.Host
}

func (s *DescribeDBInstanceErrorLogRequest) GetKeywords() *string {
	return s.Keywords
}

func (s *DescribeDBInstanceErrorLogRequest) GetLogLevel() *string {
	return s.LogLevel
}

func (s *DescribeDBInstanceErrorLogRequest) GetPageNumber() *int32 {
	return s.PageNumber
}

func (s *DescribeDBInstanceErrorLogRequest) GetPageSize() *int32 {
	return s.PageSize
}

func (s *DescribeDBInstanceErrorLogRequest) GetStartTime() *string {
	return s.StartTime
}

func (s *DescribeDBInstanceErrorLogRequest) GetUser() *string {
	return s.User
}

func (s *DescribeDBInstanceErrorLogRequest) SetDBInstanceId(v string) *DescribeDBInstanceErrorLogRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDBInstanceErrorLogRequest) SetDatabase(v string) *DescribeDBInstanceErrorLogRequest {
	s.Database = &v
	return s
}

func (s *DescribeDBInstanceErrorLogRequest) SetEndTime(v string) *DescribeDBInstanceErrorLogRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeDBInstanceErrorLogRequest) SetHost(v string) *DescribeDBInstanceErrorLogRequest {
	s.Host = &v
	return s
}

func (s *DescribeDBInstanceErrorLogRequest) SetKeywords(v string) *DescribeDBInstanceErrorLogRequest {
	s.Keywords = &v
	return s
}

func (s *DescribeDBInstanceErrorLogRequest) SetLogLevel(v string) *DescribeDBInstanceErrorLogRequest {
	s.LogLevel = &v
	return s
}

func (s *DescribeDBInstanceErrorLogRequest) SetPageNumber(v int32) *DescribeDBInstanceErrorLogRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeDBInstanceErrorLogRequest) SetPageSize(v int32) *DescribeDBInstanceErrorLogRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeDBInstanceErrorLogRequest) SetStartTime(v string) *DescribeDBInstanceErrorLogRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeDBInstanceErrorLogRequest) SetUser(v string) *DescribeDBInstanceErrorLogRequest {
	s.User = &v
	return s
}

func (s *DescribeDBInstanceErrorLogRequest) Validate() error {
	return dara.Validate(s)
}

type iDescribeDBInstanceErrorLogResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetItems(v []*DescribeDBInstanceErrorLogResponseBodyItems) *DescribeDBInstanceErrorLogResponseBody
	GetItems() []*DescribeDBInstanceErrorLogResponseBodyItems
	SetPageNumber(v int32) *DescribeDBInstanceErrorLogResponseBody
	GetPageNumber() *int32
	SetRequestId(v string) *DescribeDBInstanceErrorLogResponseBody
	GetRequestId() *string
	SetTotalCount(v int32) *DescribeDBInstanceErrorLogResponseBody
	GetTotalCount() *int32
}

type DescribeDBInstanceErrorLogResponseBody struct {
	// The content of the error log.
	Items []*DescribeDBInstanceErrorLogResponseBodyItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Repeated"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The request ID.
	//
	// example:
	//
	// B4CAF581-2AC7-41AD-8940-D56DF7AADF5B
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 1
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeDBInstanceErrorLogResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DescribeDBInstanceErrorLogResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceErrorLogResponseBody) GetItems() []*DescribeDBInstanceErrorLogResponseBodyItems {
	return s.Items
}

func (s *DescribeDBInstanceErrorLogResponseBody) GetPageNumber() *int32 {
	return s.PageNumber
}

func (s *DescribeDBInstanceErrorLogResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DescribeDBInstanceErrorLogResponseBody) GetTotalCount() *int32 {
	return s.TotalCount
}

func (s *DescribeDBInstanceErrorLogResponseBody) SetItems(v []*DescribeDBInstanceErrorLogResponseBodyItems) *DescribeDBInstanceErrorLogResponseBody {
	s.Items = v
	return s
}

func (s *DescribeDBInstanceErrorLogResponseBody) SetPageNumber(v int32) *DescribeDBInstanceErrorLogResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeDBInstanceErrorLogResponseBody) SetRequestId(v string) *DescribeDBInstanceErrorLogResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDBInstanceErrorLogResponseBody) SetTotalCount(v int32) *DescribeDBInstanceErrorLogResponseBody {
	s.TotalCount = &v
	return s
}

func (s *DescribeDBInstanceErrorLogResponseBody) Validate() error {
	return dara.Validate(s)
}

type DescribeDBInstanceErrorLogResponseBodyItems struct {
	// The name of the database.
	//
	// example:
	//
	// adbtest
	Database *string `json:"Database,omitempty" xml:"Database,omitempty"`
	// This parameter is not supported.
	//
	// example:
	//
	// null
	Host *string `json:"Host,omitempty" xml:"Host,omitempty"`
	// The content of the error log.
	//
	// example:
	//
	// unsupported frontend protocol 2689.28208: server supports 1.0 to 3.0
	LogContext *string `json:"LogContext,omitempty" xml:"LogContext,omitempty"`
	// The level of the queried log.
	//
	// example:
	//
	// FATAL
	LogLevel *string `json:"LogLevel,omitempty" xml:"LogLevel,omitempty"`
	// The time when the log was generated. The time is displayed in UTC.
	//
	// example:
	//
	// 2022-04-24 11:28:14
	Time *int64 `json:"Time,omitempty" xml:"Time,omitempty"`
	// The name of the database account.
	//
	// example:
	//
	// adbpguser
	User *string `json:"User,omitempty" xml:"User,omitempty"`
}

func (s DescribeDBInstanceErrorLogResponseBodyItems) String() string {
	return dara.Prettify(s)
}

func (s DescribeDBInstanceErrorLogResponseBodyItems) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceErrorLogResponseBodyItems) GetDatabase() *string {
	return s.Database
}

func (s *DescribeDBInstanceErrorLogResponseBodyItems) GetHost() *string {
	return s.Host
}

func (s *DescribeDBInstanceErrorLogResponseBodyItems) GetLogContext() *string {
	return s.LogContext
}

func (s *DescribeDBInstanceErrorLogResponseBodyItems) GetLogLevel() *string {
	return s.LogLevel
}

func (s *DescribeDBInstanceErrorLogResponseBodyItems) GetTime() *int64 {
	return s.Time
}

func (s *DescribeDBInstanceErrorLogResponseBodyItems) GetUser() *string {
	return s.User
}

func (s *DescribeDBInstanceErrorLogResponseBodyItems) SetDatabase(v string) *DescribeDBInstanceErrorLogResponseBodyItems {
	s.Database = &v
	return s
}

func (s *DescribeDBInstanceErrorLogResponseBodyItems) SetHost(v string) *DescribeDBInstanceErrorLogResponseBodyItems {
	s.Host = &v
	return s
}

func (s *DescribeDBInstanceErrorLogResponseBodyItems) SetLogContext(v string) *DescribeDBInstanceErrorLogResponseBodyItems {
	s.LogContext = &v
	return s
}

func (s *DescribeDBInstanceErrorLogResponseBodyItems) SetLogLevel(v string) *DescribeDBInstanceErrorLogResponseBodyItems {
	s.LogLevel = &v
	return s
}

func (s *DescribeDBInstanceErrorLogResponseBodyItems) SetTime(v int64) *DescribeDBInstanceErrorLogResponseBodyItems {
	s.Time = &v
	return s
}

func (s *DescribeDBInstanceErrorLogResponseBodyItems) SetUser(v string) *DescribeDBInstanceErrorLogResponseBodyItems {
	s.User = &v
	return s
}

func (s *DescribeDBInstanceErrorLogResponseBodyItems) Validate() error {
	return dara.Validate(s)
}

type iDescribeDBInstanceErrorLogResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DescribeDBInstanceErrorLogResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DescribeDBInstanceErrorLogResponse
	GetStatusCode() *int32
	SetBody(v *DescribeDBInstanceErrorLogResponseBody) *DescribeDBInstanceErrorLogResponse
	GetBody() *DescribeDBInstanceErrorLogResponseBody
}

type DescribeDBInstanceErrorLogResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeDBInstanceErrorLogResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeDBInstanceErrorLogResponse) String() string {
	return dara.Prettify(s)
}

func (s DescribeDBInstanceErrorLogResponse) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceErrorLogResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DescribeDBInstanceErrorLogResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DescribeDBInstanceErrorLogResponse) GetBody() *DescribeDBInstanceErrorLogResponseBody {
	return s.Body
}

func (s *DescribeDBInstanceErrorLogResponse) SetHeaders(v map[string]*string) *DescribeDBInstanceErrorLogResponse {
	s.Headers = v
	return s
}

func (s *DescribeDBInstanceErrorLogResponse) SetStatusCode(v int32) *DescribeDBInstanceErrorLogResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDBInstanceErrorLogResponse) SetBody(v *DescribeDBInstanceErrorLogResponseBody) *DescribeDBInstanceErrorLogResponse {
	s.Body = v
	return s
}

func (s *DescribeDBInstanceErrorLogResponse) Validate() error {
	return dara.Validate(s)
}

type iDescribeDBInstanceIPArrayListRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceIPArrayName(v string) *DescribeDBInstanceIPArrayListRequest
	GetDBInstanceIPArrayName() *string
	SetDBInstanceId(v string) *DescribeDBInstanceIPArrayListRequest
	GetDBInstanceId() *string
	SetResourceGroupId(v string) *DescribeDBInstanceIPArrayListRequest
	GetResourceGroupId() *string
}

type DescribeDBInstanceIPArrayListRequest struct {
	// The name of the IP address whitelist. If you do not specify this parameter, the default whitelist is queried.
	//
	// >  Each instance supports up to 50 IP address whitelists.
	//
	// example:
	//
	// Default
	DBInstanceIPArrayName *string `json:"DBInstanceIPArrayName,omitempty" xml:"DBInstanceIPArrayName,omitempty"`
	// The instance ID.
	//
	// > You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query details about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp***************
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The ID of the resource group to which the instance belongs. For information about how to obtain the ID of a resource group, see [View basic information of a resource group](https://help.aliyun.com/document_detail/151181.html).
	//
	// example:
	//
	// rg-bp67acfmxazb4p****
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
}

func (s DescribeDBInstanceIPArrayListRequest) String() string {
	return dara.Prettify(s)
}

func (s DescribeDBInstanceIPArrayListRequest) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceIPArrayListRequest) GetDBInstanceIPArrayName() *string {
	return s.DBInstanceIPArrayName
}

func (s *DescribeDBInstanceIPArrayListRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *DescribeDBInstanceIPArrayListRequest) GetResourceGroupId() *string {
	return s.ResourceGroupId
}

func (s *DescribeDBInstanceIPArrayListRequest) SetDBInstanceIPArrayName(v string) *DescribeDBInstanceIPArrayListRequest {
	s.DBInstanceIPArrayName = &v
	return s
}

func (s *DescribeDBInstanceIPArrayListRequest) SetDBInstanceId(v string) *DescribeDBInstanceIPArrayListRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDBInstanceIPArrayListRequest) SetResourceGroupId(v string) *DescribeDBInstanceIPArrayListRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeDBInstanceIPArrayListRequest) Validate() error {
	return dara.Validate(s)
}

type iDescribeDBInstanceIPArrayListResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetItems(v *DescribeDBInstanceIPArrayListResponseBodyItems) *DescribeDBInstanceIPArrayListResponseBody
	GetItems() *DescribeDBInstanceIPArrayListResponseBodyItems
	SetRequestId(v string) *DescribeDBInstanceIPArrayListResponseBody
	GetRequestId() *string
}

type DescribeDBInstanceIPArrayListResponseBody struct {
	// The queried IP address whitelists.
	Items *DescribeDBInstanceIPArrayListResponseBodyItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// CB7AA0BF-BE41-480E-A3DC-C97BF85A391B
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeDBInstanceIPArrayListResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DescribeDBInstanceIPArrayListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceIPArrayListResponseBody) GetItems() *DescribeDBInstanceIPArrayListResponseBodyItems {
	return s.Items
}

func (s *DescribeDBInstanceIPArrayListResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DescribeDBInstanceIPArrayListResponseBody) SetItems(v *DescribeDBInstanceIPArrayListResponseBodyItems) *DescribeDBInstanceIPArrayListResponseBody {
	s.Items = v
	return s
}

func (s *DescribeDBInstanceIPArrayListResponseBody) SetRequestId(v string) *DescribeDBInstanceIPArrayListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDBInstanceIPArrayListResponseBody) Validate() error {
	return dara.Validate(s)
}

type DescribeDBInstanceIPArrayListResponseBodyItems struct {
	DBInstanceIPArray []*DescribeDBInstanceIPArrayListResponseBodyItemsDBInstanceIPArray `json:"DBInstanceIPArray,omitempty" xml:"DBInstanceIPArray,omitempty" type:"Repeated"`
}

func (s DescribeDBInstanceIPArrayListResponseBodyItems) String() string {
	return dara.Prettify(s)
}

func (s DescribeDBInstanceIPArrayListResponseBodyItems) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceIPArrayListResponseBodyItems) GetDBInstanceIPArray() []*DescribeDBInstanceIPArrayListResponseBodyItemsDBInstanceIPArray {
	return s.DBInstanceIPArray
}

func (s *DescribeDBInstanceIPArrayListResponseBodyItems) SetDBInstanceIPArray(v []*DescribeDBInstanceIPArrayListResponseBodyItemsDBInstanceIPArray) *DescribeDBInstanceIPArrayListResponseBodyItems {
	s.DBInstanceIPArray = v
	return s
}

func (s *DescribeDBInstanceIPArrayListResponseBodyItems) Validate() error {
	return dara.Validate(s)
}

type DescribeDBInstanceIPArrayListResponseBodyItemsDBInstanceIPArray struct {
	// The attribute of the IP address whitelist. By default, this parameter is empty. A whitelist with the `hidden` attribute is not displayed in the console.
	//
	// example:
	//
	// hidden
	DBInstanceIPArrayAttribute *string `json:"DBInstanceIPArrayAttribute,omitempty" xml:"DBInstanceIPArrayAttribute,omitempty"`
	// The name of the IP address whitelist.
	//
	// example:
	//
	// default
	DBInstanceIPArrayName *string `json:"DBInstanceIPArrayName,omitempty" xml:"DBInstanceIPArrayName,omitempty"`
	// The IP addresses listed in the whitelist. Up to 1,000 IP addresses are contained in a whitelist and separated by commas (,). The IP addresses must use one of the following formats:
	//
	// 	- 0.0.0.0/0
	//
	// 	- 10.23.12.24. This is a standard IP address.
	//
	// 	- 10.23.12.24/24. This is a CIDR block. The value `/24` indicates that the prefix of the CIDR block is 24-bit long. You can replace 24 with a value in the range of `1 to 32`.
	//
	// example:
	//
	// 127.0.0.1
	SecurityIPList *string `json:"SecurityIPList,omitempty" xml:"SecurityIPList,omitempty"`
}

func (s DescribeDBInstanceIPArrayListResponseBodyItemsDBInstanceIPArray) String() string {
	return dara.Prettify(s)
}

func (s DescribeDBInstanceIPArrayListResponseBodyItemsDBInstanceIPArray) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceIPArrayListResponseBodyItemsDBInstanceIPArray) GetDBInstanceIPArrayAttribute() *string {
	return s.DBInstanceIPArrayAttribute
}

func (s *DescribeDBInstanceIPArrayListResponseBodyItemsDBInstanceIPArray) GetDBInstanceIPArrayName() *string {
	return s.DBInstanceIPArrayName
}

func (s *DescribeDBInstanceIPArrayListResponseBodyItemsDBInstanceIPArray) GetSecurityIPList() *string {
	return s.SecurityIPList
}

func (s *DescribeDBInstanceIPArrayListResponseBodyItemsDBInstanceIPArray) SetDBInstanceIPArrayAttribute(v string) *DescribeDBInstanceIPArrayListResponseBodyItemsDBInstanceIPArray {
	s.DBInstanceIPArrayAttribute = &v
	return s
}

func (s *DescribeDBInstanceIPArrayListResponseBodyItemsDBInstanceIPArray) SetDBInstanceIPArrayName(v string) *DescribeDBInstanceIPArrayListResponseBodyItemsDBInstanceIPArray {
	s.DBInstanceIPArrayName = &v
	return s
}

func (s *DescribeDBInstanceIPArrayListResponseBodyItemsDBInstanceIPArray) SetSecurityIPList(v string) *DescribeDBInstanceIPArrayListResponseBodyItemsDBInstanceIPArray {
	s.SecurityIPList = &v
	return s
}

func (s *DescribeDBInstanceIPArrayListResponseBodyItemsDBInstanceIPArray) Validate() error {
	return dara.Validate(s)
}

type iDescribeDBInstanceIPArrayListResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DescribeDBInstanceIPArrayListResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DescribeDBInstanceIPArrayListResponse
	GetStatusCode() *int32
	SetBody(v *DescribeDBInstanceIPArrayListResponseBody) *DescribeDBInstanceIPArrayListResponse
	GetBody() *DescribeDBInstanceIPArrayListResponseBody
}

type DescribeDBInstanceIPArrayListResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeDBInstanceIPArrayListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeDBInstanceIPArrayListResponse) String() string {
	return dara.Prettify(s)
}

func (s DescribeDBInstanceIPArrayListResponse) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceIPArrayListResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DescribeDBInstanceIPArrayListResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DescribeDBInstanceIPArrayListResponse) GetBody() *DescribeDBInstanceIPArrayListResponseBody {
	return s.Body
}

func (s *DescribeDBInstanceIPArrayListResponse) SetHeaders(v map[string]*string) *DescribeDBInstanceIPArrayListResponse {
	s.Headers = v
	return s
}

func (s *DescribeDBInstanceIPArrayListResponse) SetStatusCode(v int32) *DescribeDBInstanceIPArrayListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDBInstanceIPArrayListResponse) SetBody(v *DescribeDBInstanceIPArrayListResponseBody) *DescribeDBInstanceIPArrayListResponse {
	s.Body = v
	return s
}

func (s *DescribeDBInstanceIPArrayListResponse) Validate() error {
	return dara.Validate(s)
}

type iDescribeDBInstanceIndexUsageRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *DescribeDBInstanceIndexUsageRequest
	GetDBInstanceId() *string
	SetDatabase(v string) *DescribeDBInstanceIndexUsageRequest
	GetDatabase() *string
	SetOrderBy(v string) *DescribeDBInstanceIndexUsageRequest
	GetOrderBy() *string
	SetPageNumber(v int32) *DescribeDBInstanceIndexUsageRequest
	GetPageNumber() *int32
	SetPageSize(v int32) *DescribeDBInstanceIndexUsageRequest
	GetPageSize() *int32
}

type DescribeDBInstanceIndexUsageRequest struct {
	// The instance ID.
	//
	// > You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The name of the database.
	//
	// example:
	//
	// test
	Database *string `json:"Database,omitempty" xml:"Database,omitempty"`
	// order by search condition
	//
	// example:
	//
	// {Field: TableName, Type: Desc}
	OrderBy *string `json:"OrderBy,omitempty" xml:"OrderBy,omitempty"`
	// The page number. Pages start from page 1. Default value: **1**.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. Valid values:
	//
	// 	- **30**
	//
	// 	- **50**
	//
	// 	- **100**
	//
	// Default value: **30**.
	//
	// example:
	//
	// 20
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s DescribeDBInstanceIndexUsageRequest) String() string {
	return dara.Prettify(s)
}

func (s DescribeDBInstanceIndexUsageRequest) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceIndexUsageRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *DescribeDBInstanceIndexUsageRequest) GetDatabase() *string {
	return s.Database
}

func (s *DescribeDBInstanceIndexUsageRequest) GetOrderBy() *string {
	return s.OrderBy
}

func (s *DescribeDBInstanceIndexUsageRequest) GetPageNumber() *int32 {
	return s.PageNumber
}

func (s *DescribeDBInstanceIndexUsageRequest) GetPageSize() *int32 {
	return s.PageSize
}

func (s *DescribeDBInstanceIndexUsageRequest) SetDBInstanceId(v string) *DescribeDBInstanceIndexUsageRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDBInstanceIndexUsageRequest) SetDatabase(v string) *DescribeDBInstanceIndexUsageRequest {
	s.Database = &v
	return s
}

func (s *DescribeDBInstanceIndexUsageRequest) SetOrderBy(v string) *DescribeDBInstanceIndexUsageRequest {
	s.OrderBy = &v
	return s
}

func (s *DescribeDBInstanceIndexUsageRequest) SetPageNumber(v int32) *DescribeDBInstanceIndexUsageRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeDBInstanceIndexUsageRequest) SetPageSize(v int32) *DescribeDBInstanceIndexUsageRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeDBInstanceIndexUsageRequest) Validate() error {
	return dara.Validate(s)
}

type iDescribeDBInstanceIndexUsageResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetItems(v []*DescribeDBInstanceIndexUsageResponseBodyItems) *DescribeDBInstanceIndexUsageResponseBody
	GetItems() []*DescribeDBInstanceIndexUsageResponseBodyItems
	SetPageNumber(v int32) *DescribeDBInstanceIndexUsageResponseBody
	GetPageNumber() *int32
	SetRequestId(v string) *DescribeDBInstanceIndexUsageResponseBody
	GetRequestId() *string
	SetTotalCount(v int32) *DescribeDBInstanceIndexUsageResponseBody
	GetTotalCount() *int32
}

type DescribeDBInstanceIndexUsageResponseBody struct {
	// The queried index usage.
	Items []*DescribeDBInstanceIndexUsageResponseBodyItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Repeated"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The request ID.
	//
	// example:
	//
	// B4CAF581-2AC7-41AD-8940-D56DF7AADF5B
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 1
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeDBInstanceIndexUsageResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DescribeDBInstanceIndexUsageResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceIndexUsageResponseBody) GetItems() []*DescribeDBInstanceIndexUsageResponseBodyItems {
	return s.Items
}

func (s *DescribeDBInstanceIndexUsageResponseBody) GetPageNumber() *int32 {
	return s.PageNumber
}

func (s *DescribeDBInstanceIndexUsageResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DescribeDBInstanceIndexUsageResponseBody) GetTotalCount() *int32 {
	return s.TotalCount
}

func (s *DescribeDBInstanceIndexUsageResponseBody) SetItems(v []*DescribeDBInstanceIndexUsageResponseBodyItems) *DescribeDBInstanceIndexUsageResponseBody {
	s.Items = v
	return s
}

func (s *DescribeDBInstanceIndexUsageResponseBody) SetPageNumber(v int32) *DescribeDBInstanceIndexUsageResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeDBInstanceIndexUsageResponseBody) SetRequestId(v string) *DescribeDBInstanceIndexUsageResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDBInstanceIndexUsageResponseBody) SetTotalCount(v int32) *DescribeDBInstanceIndexUsageResponseBody {
	s.TotalCount = &v
	return s
}

func (s *DescribeDBInstanceIndexUsageResponseBody) Validate() error {
	return dara.Validate(s)
}

type DescribeDBInstanceIndexUsageResponseBodyItems struct {
	// The name of the database.
	//
	// example:
	//
	// adbtest
	DatabaseName *string `json:"DatabaseName,omitempty" xml:"DatabaseName,omitempty"`
	// The definition of the index.
	//
	// example:
	//
	// CREATE INDEX idx1 ON schema1.tab1_ptr_2010
	IndexDef *string `json:"IndexDef,omitempty" xml:"IndexDef,omitempty"`
	// The name of the index.
	//
	// example:
	//
	// idx1
	IndexName *string `json:"IndexName,omitempty" xml:"IndexName,omitempty"`
	// The number of index scans.
	//
	// example:
	//
	// 50000
	IndexScanTimes *int64 `json:"IndexScanTimes,omitempty" xml:"IndexScanTimes,omitempty"`
	// The size of the index. Unit: bytes.
	//
	// example:
	//
	// 10000
	IndexSize *string `json:"IndexSize,omitempty" xml:"IndexSize,omitempty"`
	// Indicates whether the table is a partitioned table. Valid values:
	//
	// 	- **true**: The table is a partitioned table.
	//
	// 	- **false**: The table is not a partitioned table.
	//
	// example:
	//
	// true
	IsPartitionTable *bool `json:"IsPartitionTable,omitempty" xml:"IsPartitionTable,omitempty"`
	// The name of the parent table.
	//
	// example:
	//
	// tab1
	ParentTableName *string `json:"ParentTableName,omitempty" xml:"ParentTableName,omitempty"`
	// The name of the schema.
	//
	// example:
	//
	// schema1
	SchemaName *string `json:"SchemaName,omitempty" xml:"SchemaName,omitempty"`
	// The name of the table.
	//
	// example:
	//
	// tab1_ptr_2010
	TableName *string `json:"TableName,omitempty" xml:"TableName,omitempty"`
	// The time when the table was last deleted, inserted, or updated.
	//
	// example:
	//
	// 2022-08-08T20:00:00Z
	TimeLastUpdated *string `json:"TimeLastUpdated,omitempty" xml:"TimeLastUpdated,omitempty"`
}

func (s DescribeDBInstanceIndexUsageResponseBodyItems) String() string {
	return dara.Prettify(s)
}

func (s DescribeDBInstanceIndexUsageResponseBodyItems) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceIndexUsageResponseBodyItems) GetDatabaseName() *string {
	return s.DatabaseName
}

func (s *DescribeDBInstanceIndexUsageResponseBodyItems) GetIndexDef() *string {
	return s.IndexDef
}

func (s *DescribeDBInstanceIndexUsageResponseBodyItems) GetIndexName() *string {
	return s.IndexName
}

func (s *DescribeDBInstanceIndexUsageResponseBodyItems) GetIndexScanTimes() *int64 {
	return s.IndexScanTimes
}

func (s *DescribeDBInstanceIndexUsageResponseBodyItems) GetIndexSize() *string {
	return s.IndexSize
}

func (s *DescribeDBInstanceIndexUsageResponseBodyItems) GetIsPartitionTable() *bool {
	return s.IsPartitionTable
}

func (s *DescribeDBInstanceIndexUsageResponseBodyItems) GetParentTableName() *string {
	return s.ParentTableName
}

func (s *DescribeDBInstanceIndexUsageResponseBodyItems) GetSchemaName() *string {
	return s.SchemaName
}

func (s *DescribeDBInstanceIndexUsageResponseBodyItems) GetTableName() *string {
	return s.TableName
}

func (s *DescribeDBInstanceIndexUsageResponseBodyItems) GetTimeLastUpdated() *string {
	return s.TimeLastUpdated
}

func (s *DescribeDBInstanceIndexUsageResponseBodyItems) SetDatabaseName(v string) *DescribeDBInstanceIndexUsageResponseBodyItems {
	s.DatabaseName = &v
	return s
}

func (s *DescribeDBInstanceIndexUsageResponseBodyItems) SetIndexDef(v string) *DescribeDBInstanceIndexUsageResponseBodyItems {
	s.IndexDef = &v
	return s
}

func (s *DescribeDBInstanceIndexUsageResponseBodyItems) SetIndexName(v string) *DescribeDBInstanceIndexUsageResponseBodyItems {
	s.IndexName = &v
	return s
}

func (s *DescribeDBInstanceIndexUsageResponseBodyItems) SetIndexScanTimes(v int64) *DescribeDBInstanceIndexUsageResponseBodyItems {
	s.IndexScanTimes = &v
	return s
}

func (s *DescribeDBInstanceIndexUsageResponseBodyItems) SetIndexSize(v string) *DescribeDBInstanceIndexUsageResponseBodyItems {
	s.IndexSize = &v
	return s
}

func (s *DescribeDBInstanceIndexUsageResponseBodyItems) SetIsPartitionTable(v bool) *DescribeDBInstanceIndexUsageResponseBodyItems {
	s.IsPartitionTable = &v
	return s
}

func (s *DescribeDBInstanceIndexUsageResponseBodyItems) SetParentTableName(v string) *DescribeDBInstanceIndexUsageResponseBodyItems {
	s.ParentTableName = &v
	return s
}

func (s *DescribeDBInstanceIndexUsageResponseBodyItems) SetSchemaName(v string) *DescribeDBInstanceIndexUsageResponseBodyItems {
	s.SchemaName = &v
	return s
}

func (s *DescribeDBInstanceIndexUsageResponseBodyItems) SetTableName(v string) *DescribeDBInstanceIndexUsageResponseBodyItems {
	s.TableName = &v
	return s
}

func (s *DescribeDBInstanceIndexUsageResponseBodyItems) SetTimeLastUpdated(v string) *DescribeDBInstanceIndexUsageResponseBodyItems {
	s.TimeLastUpdated = &v
	return s
}

func (s *DescribeDBInstanceIndexUsageResponseBodyItems) Validate() error {
	return dara.Validate(s)
}

type iDescribeDBInstanceIndexUsageResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DescribeDBInstanceIndexUsageResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DescribeDBInstanceIndexUsageResponse
	GetStatusCode() *int32
	SetBody(v *DescribeDBInstanceIndexUsageResponseBody) *DescribeDBInstanceIndexUsageResponse
	GetBody() *DescribeDBInstanceIndexUsageResponseBody
}

type DescribeDBInstanceIndexUsageResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeDBInstanceIndexUsageResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeDBInstanceIndexUsageResponse) String() string {
	return dara.Prettify(s)
}

func (s DescribeDBInstanceIndexUsageResponse) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceIndexUsageResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DescribeDBInstanceIndexUsageResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DescribeDBInstanceIndexUsageResponse) GetBody() *DescribeDBInstanceIndexUsageResponseBody {
	return s.Body
}

func (s *DescribeDBInstanceIndexUsageResponse) SetHeaders(v map[string]*string) *DescribeDBInstanceIndexUsageResponse {
	s.Headers = v
	return s
}

func (s *DescribeDBInstanceIndexUsageResponse) SetStatusCode(v int32) *DescribeDBInstanceIndexUsageResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDBInstanceIndexUsageResponse) SetBody(v *DescribeDBInstanceIndexUsageResponseBody) *DescribeDBInstanceIndexUsageResponse {
	s.Body = v
	return s
}

func (s *DescribeDBInstanceIndexUsageResponse) Validate() error {
	return dara.Validate(s)
}

type iDescribeDBInstanceNetInfoRequest interface {
	dara.Model
	String() string
	GoString() string
	SetConnectionString(v string) *DescribeDBInstanceNetInfoRequest
	GetConnectionString() *string
	SetDBInstanceId(v string) *DescribeDBInstanceNetInfoRequest
	GetDBInstanceId() *string
}

type DescribeDBInstanceNetInfoRequest struct {
	// The endpoint that is used to connect to the instance.
	//
	// >  If you do not specify this parameter, the information about all endpoints of the instance is returned.
	//
	// example:
	//
	// gp-0xin9q82c33xc****-master.gpdb.rds.aliyuncs.com
	ConnectionString *string `json:"ConnectionString,omitempty" xml:"ConnectionString,omitempty"`
	// The instance ID.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
}

func (s DescribeDBInstanceNetInfoRequest) String() string {
	return dara.Prettify(s)
}

func (s DescribeDBInstanceNetInfoRequest) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceNetInfoRequest) GetConnectionString() *string {
	return s.ConnectionString
}

func (s *DescribeDBInstanceNetInfoRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *DescribeDBInstanceNetInfoRequest) SetConnectionString(v string) *DescribeDBInstanceNetInfoRequest {
	s.ConnectionString = &v
	return s
}

func (s *DescribeDBInstanceNetInfoRequest) SetDBInstanceId(v string) *DescribeDBInstanceNetInfoRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDBInstanceNetInfoRequest) Validate() error {
	return dara.Validate(s)
}

type iDescribeDBInstanceNetInfoResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceNetInfos(v *DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfos) *DescribeDBInstanceNetInfoResponseBody
	GetDBInstanceNetInfos() *DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfos
	SetInstanceNetworkType(v string) *DescribeDBInstanceNetInfoResponseBody
	GetInstanceNetworkType() *string
	SetRequestId(v string) *DescribeDBInstanceNetInfoResponseBody
	GetRequestId() *string
}

type DescribeDBInstanceNetInfoResponseBody struct {
	// The connection information of the instance.
	DBInstanceNetInfos *DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfos `json:"DBInstanceNetInfos,omitempty" xml:"DBInstanceNetInfos,omitempty" type:"Struct"`
	// The network type of the instance. Valid values:
	//
	// 	- Classic: classic network.
	//
	// 	- VPC: VPC.
	//
	// example:
	//
	// Classic
	InstanceNetworkType *string `json:"InstanceNetworkType,omitempty" xml:"InstanceNetworkType,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 7565770E-7C45-462D-BA4A-8A5396F2CAD1
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeDBInstanceNetInfoResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DescribeDBInstanceNetInfoResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceNetInfoResponseBody) GetDBInstanceNetInfos() *DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfos {
	return s.DBInstanceNetInfos
}

func (s *DescribeDBInstanceNetInfoResponseBody) GetInstanceNetworkType() *string {
	return s.InstanceNetworkType
}

func (s *DescribeDBInstanceNetInfoResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DescribeDBInstanceNetInfoResponseBody) SetDBInstanceNetInfos(v *DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfos) *DescribeDBInstanceNetInfoResponseBody {
	s.DBInstanceNetInfos = v
	return s
}

func (s *DescribeDBInstanceNetInfoResponseBody) SetInstanceNetworkType(v string) *DescribeDBInstanceNetInfoResponseBody {
	s.InstanceNetworkType = &v
	return s
}

func (s *DescribeDBInstanceNetInfoResponseBody) SetRequestId(v string) *DescribeDBInstanceNetInfoResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDBInstanceNetInfoResponseBody) Validate() error {
	return dara.Validate(s)
}

type DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfos struct {
	DBInstanceNetInfo []*DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfo `json:"DBInstanceNetInfo,omitempty" xml:"DBInstanceNetInfo,omitempty" type:"Repeated"`
}

func (s DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfos) String() string {
	return dara.Prettify(s)
}

func (s DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfos) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfos) GetDBInstanceNetInfo() []*DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfo {
	return s.DBInstanceNetInfo
}

func (s *DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfos) SetDBInstanceNetInfo(v []*DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfo) *DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfos {
	s.DBInstanceNetInfo = v
	return s
}

func (s *DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfos) Validate() error {
	return dara.Validate(s)
}

type DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfo struct {
	// The type of the endpoint.
	//
	// example:
	//
	// Intranet
	AddressType *string `json:"AddressType,omitempty" xml:"AddressType,omitempty"`
	// The endpoint that is used to connect to the instance.
	//
	// example:
	//
	// gp-xxxxxxx.gpdb.rds.aliyuncs.com
	ConnectionString *string `json:"ConnectionString,omitempty" xml:"ConnectionString,omitempty"`
	// The IP address.
	//
	// example:
	//
	// 127.0.0.1
	IPAddress *string `json:"IPAddress,omitempty" xml:"IPAddress,omitempty"`
	// The type of the IP address.
	//
	// 	- Valid values for instances in the classic network: Inner and Public.
	//
	// 	- Valid values for instances in a virtual private cloud (VPC): Private and Public.
	//
	// example:
	//
	// Inner
	IPType *string `json:"IPType,omitempty" xml:"IPType,omitempty"`
	// The port number.
	//
	// example:
	//
	// 3432
	Port *string `json:"Port,omitempty" xml:"Port,omitempty"`
	// The VPC ID of the instance.
	//
	// example:
	//
	// vpc-xxxxxxx
	VPCId *string `json:"VPCId,omitempty" xml:"VPCId,omitempty"`
	// The vSwitch ID. Multiple IDs are separated by commas (,).
	//
	// example:
	//
	// vsw-xxxxxxxx
	VSwitchId *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	// The ID of the instance that is deployed in a VPC.
	//
	// example:
	//
	// vpc-xxxxxxx
	VpcInstanceId *string `json:"VpcInstanceId,omitempty" xml:"VpcInstanceId,omitempty"`
}

func (s DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfo) String() string {
	return dara.Prettify(s)
}

func (s DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfo) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfo) GetAddressType() *string {
	return s.AddressType
}

func (s *DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfo) GetConnectionString() *string {
	return s.ConnectionString
}

func (s *DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfo) GetIPAddress() *string {
	return s.IPAddress
}

func (s *DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfo) GetIPType() *string {
	return s.IPType
}

func (s *DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfo) GetPort() *string {
	return s.Port
}

func (s *DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfo) GetVPCId() *string {
	return s.VPCId
}

func (s *DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfo) GetVSwitchId() *string {
	return s.VSwitchId
}

func (s *DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfo) GetVpcInstanceId() *string {
	return s.VpcInstanceId
}

func (s *DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfo) SetAddressType(v string) *DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfo {
	s.AddressType = &v
	return s
}

func (s *DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfo) SetConnectionString(v string) *DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfo {
	s.ConnectionString = &v
	return s
}

func (s *DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfo) SetIPAddress(v string) *DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfo {
	s.IPAddress = &v
	return s
}

func (s *DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfo) SetIPType(v string) *DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfo {
	s.IPType = &v
	return s
}

func (s *DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfo) SetPort(v string) *DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfo {
	s.Port = &v
	return s
}

func (s *DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfo) SetVPCId(v string) *DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfo {
	s.VPCId = &v
	return s
}

func (s *DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfo) SetVSwitchId(v string) *DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfo {
	s.VSwitchId = &v
	return s
}

func (s *DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfo) SetVpcInstanceId(v string) *DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfo {
	s.VpcInstanceId = &v
	return s
}

func (s *DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfo) Validate() error {
	return dara.Validate(s)
}

type iDescribeDBInstanceNetInfoResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DescribeDBInstanceNetInfoResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DescribeDBInstanceNetInfoResponse
	GetStatusCode() *int32
	SetBody(v *DescribeDBInstanceNetInfoResponseBody) *DescribeDBInstanceNetInfoResponse
	GetBody() *DescribeDBInstanceNetInfoResponseBody
}

type DescribeDBInstanceNetInfoResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeDBInstanceNetInfoResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeDBInstanceNetInfoResponse) String() string {
	return dara.Prettify(s)
}

func (s DescribeDBInstanceNetInfoResponse) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceNetInfoResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DescribeDBInstanceNetInfoResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DescribeDBInstanceNetInfoResponse) GetBody() *DescribeDBInstanceNetInfoResponseBody {
	return s.Body
}

func (s *DescribeDBInstanceNetInfoResponse) SetHeaders(v map[string]*string) *DescribeDBInstanceNetInfoResponse {
	s.Headers = v
	return s
}

func (s *DescribeDBInstanceNetInfoResponse) SetStatusCode(v int32) *DescribeDBInstanceNetInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDBInstanceNetInfoResponse) SetBody(v *DescribeDBInstanceNetInfoResponseBody) *DescribeDBInstanceNetInfoResponse {
	s.Body = v
	return s
}

func (s *DescribeDBInstanceNetInfoResponse) Validate() error {
	return dara.Validate(s)
}

type iDescribeDBInstancePerformanceRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *DescribeDBInstancePerformanceRequest
	GetDBInstanceId() *string
	SetEndTime(v string) *DescribeDBInstancePerformanceRequest
	GetEndTime() *string
	SetKey(v string) *DescribeDBInstancePerformanceRequest
	GetKey() *string
	SetResourceGroupId(v string) *DescribeDBInstancePerformanceRequest
	GetResourceGroupId() *string
	SetStartTime(v string) *DescribeDBInstancePerformanceRequest
	GetStartTime() *string
}

type DescribeDBInstancePerformanceRequest struct {
	// The instance ID.
	//
	// > You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the IDs of all AnalyticDB for PostgreSQL instances within a region.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The end of the time range to query. Specify the time in the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm*Z format. The time must be in UTC. The end time must be later than the start time.
	//
	// This parameter is required.
	//
	// example:
	//
	// 2022-07-09T03:47Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The performance metric. Separate multiple values with commas (,). For more information, see [Performance parameters](https://help.aliyun.com/document_detail/86943.html).
	//
	// This parameter is required.
	//
	// example:
	//
	// CpuUsage,MemoryUsage,Gpdb_SpaceUsage,Gpdb_IOPS,Gpdb_session
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// This parameter is no longer used.
	//
	// example:
	//
	// rg-bp67acfmxazb4p****
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	// The beginning of the time range to query. Specify the time in the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm*Z format. The time must be in UTC.
	//
	// This parameter is required.
	//
	// example:
	//
	// 2022-07-08T03:47Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeDBInstancePerformanceRequest) String() string {
	return dara.Prettify(s)
}

func (s DescribeDBInstancePerformanceRequest) GoString() string {
	return s.String()
}

func (s *DescribeDBInstancePerformanceRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *DescribeDBInstancePerformanceRequest) GetEndTime() *string {
	return s.EndTime
}

func (s *DescribeDBInstancePerformanceRequest) GetKey() *string {
	return s.Key
}

func (s *DescribeDBInstancePerformanceRequest) GetResourceGroupId() *string {
	return s.ResourceGroupId
}

func (s *DescribeDBInstancePerformanceRequest) GetStartTime() *string {
	return s.StartTime
}

func (s *DescribeDBInstancePerformanceRequest) SetDBInstanceId(v string) *DescribeDBInstancePerformanceRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDBInstancePerformanceRequest) SetEndTime(v string) *DescribeDBInstancePerformanceRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeDBInstancePerformanceRequest) SetKey(v string) *DescribeDBInstancePerformanceRequest {
	s.Key = &v
	return s
}

func (s *DescribeDBInstancePerformanceRequest) SetResourceGroupId(v string) *DescribeDBInstancePerformanceRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeDBInstancePerformanceRequest) SetStartTime(v string) *DescribeDBInstancePerformanceRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeDBInstancePerformanceRequest) Validate() error {
	return dara.Validate(s)
}

type iDescribeDBInstancePerformanceResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *DescribeDBInstancePerformanceResponseBody
	GetDBInstanceId() *string
	SetEndTime(v string) *DescribeDBInstancePerformanceResponseBody
	GetEndTime() *string
	SetEngine(v string) *DescribeDBInstancePerformanceResponseBody
	GetEngine() *string
	SetPerformanceKeys(v []*string) *DescribeDBInstancePerformanceResponseBody
	GetPerformanceKeys() []*string
	SetRequestId(v string) *DescribeDBInstancePerformanceResponseBody
	GetRequestId() *string
	SetStartTime(v string) *DescribeDBInstancePerformanceResponseBody
	GetStartTime() *string
}

type DescribeDBInstancePerformanceResponseBody struct {
	// The instance ID.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The end time of the query.
	//
	// example:
	//
	// 2022-07-09T03:47Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The database engine of the instance.
	//
	// example:
	//
	// gpdb
	Engine *string `json:"Engine,omitempty" xml:"Engine,omitempty"`
	// The queried performance metrics.
	PerformanceKeys []*string `json:"PerformanceKeys,omitempty" xml:"PerformanceKeys,omitempty" type:"Repeated"`
	// The request ID.
	//
	// example:
	//
	// 5E85244A-AB47-46A3-A3AD-5F307DCB407E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The start time of the query.
	//
	// example:
	//
	// 2022-07-08T03:47Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeDBInstancePerformanceResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DescribeDBInstancePerformanceResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDBInstancePerformanceResponseBody) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *DescribeDBInstancePerformanceResponseBody) GetEndTime() *string {
	return s.EndTime
}

func (s *DescribeDBInstancePerformanceResponseBody) GetEngine() *string {
	return s.Engine
}

func (s *DescribeDBInstancePerformanceResponseBody) GetPerformanceKeys() []*string {
	return s.PerformanceKeys
}

func (s *DescribeDBInstancePerformanceResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DescribeDBInstancePerformanceResponseBody) GetStartTime() *string {
	return s.StartTime
}

func (s *DescribeDBInstancePerformanceResponseBody) SetDBInstanceId(v string) *DescribeDBInstancePerformanceResponseBody {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDBInstancePerformanceResponseBody) SetEndTime(v string) *DescribeDBInstancePerformanceResponseBody {
	s.EndTime = &v
	return s
}

func (s *DescribeDBInstancePerformanceResponseBody) SetEngine(v string) *DescribeDBInstancePerformanceResponseBody {
	s.Engine = &v
	return s
}

func (s *DescribeDBInstancePerformanceResponseBody) SetPerformanceKeys(v []*string) *DescribeDBInstancePerformanceResponseBody {
	s.PerformanceKeys = v
	return s
}

func (s *DescribeDBInstancePerformanceResponseBody) SetRequestId(v string) *DescribeDBInstancePerformanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDBInstancePerformanceResponseBody) SetStartTime(v string) *DescribeDBInstancePerformanceResponseBody {
	s.StartTime = &v
	return s
}

func (s *DescribeDBInstancePerformanceResponseBody) Validate() error {
	return dara.Validate(s)
}

type iDescribeDBInstancePerformanceResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DescribeDBInstancePerformanceResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DescribeDBInstancePerformanceResponse
	GetStatusCode() *int32
	SetBody(v *DescribeDBInstancePerformanceResponseBody) *DescribeDBInstancePerformanceResponse
	GetBody() *DescribeDBInstancePerformanceResponseBody
}

type DescribeDBInstancePerformanceResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeDBInstancePerformanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeDBInstancePerformanceResponse) String() string {
	return dara.Prettify(s)
}

func (s DescribeDBInstancePerformanceResponse) GoString() string {
	return s.String()
}

func (s *DescribeDBInstancePerformanceResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DescribeDBInstancePerformanceResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DescribeDBInstancePerformanceResponse) GetBody() *DescribeDBInstancePerformanceResponseBody {
	return s.Body
}

func (s *DescribeDBInstancePerformanceResponse) SetHeaders(v map[string]*string) *DescribeDBInstancePerformanceResponse {
	s.Headers = v
	return s
}

func (s *DescribeDBInstancePerformanceResponse) SetStatusCode(v int32) *DescribeDBInstancePerformanceResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDBInstancePerformanceResponse) SetBody(v *DescribeDBInstancePerformanceResponseBody) *DescribeDBInstancePerformanceResponse {
	s.Body = v
	return s
}

func (s *DescribeDBInstancePerformanceResponse) Validate() error {
	return dara.Validate(s)
}

type iDescribeDBInstancePlansRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *DescribeDBInstancePlansRequest
	GetDBInstanceId() *string
	SetOwnerId(v int64) *DescribeDBInstancePlansRequest
	GetOwnerId() *int64
	SetPlanCreateDate(v string) *DescribeDBInstancePlansRequest
	GetPlanCreateDate() *string
	SetPlanDesc(v string) *DescribeDBInstancePlansRequest
	GetPlanDesc() *string
	SetPlanId(v string) *DescribeDBInstancePlansRequest
	GetPlanId() *string
	SetPlanScheduleType(v string) *DescribeDBInstancePlansRequest
	GetPlanScheduleType() *string
	SetPlanType(v string) *DescribeDBInstancePlansRequest
	GetPlanType() *string
}

type DescribeDBInstancePlansRequest struct {
	// The instance ID.
	//
	// > You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The time that is used to filter plans. If you specify the time in the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format, the plans that are created before this time are returned. The time must be in UTC. If you do not specify this parameter, all plans are returned.
	//
	// example:
	//
	// 2022-04-17T23:00Z
	PlanCreateDate *string `json:"PlanCreateDate,omitempty" xml:"PlanCreateDate,omitempty"`
	// The description of the plan.
	//
	// example:
	//
	// this is a test plan
	PlanDesc *string `json:"PlanDesc,omitempty" xml:"PlanDesc,omitempty"`
	// The plan ID.
	//
	// > You can call the [DescribeDBInstancePlans](https://help.aliyun.com/document_detail/449398.html) operation to query the information about plans, including plan IDs.
	//
	// example:
	//
	// 1234
	PlanId *string `json:"PlanId,omitempty" xml:"PlanId,omitempty"`
	// The execution mode of the plan. Valid values:
	//
	// 	- **Postpone**: The plan is executed later.
	//
	// 	- **Regular**: The plan is executed periodically.
	//
	// example:
	//
	// Regular
	PlanScheduleType *string `json:"PlanScheduleType,omitempty" xml:"PlanScheduleType,omitempty"`
	// The type of the plan. Valid values:
	//
	// 	- **PauseResume**: pauses and resumes an instance.
	//
	// 	- **Resize**: scales an instance.
	//
	// 	- **ModifySpec**: changes compute node specifications.
	//
	// example:
	//
	// PauseResume
	PlanType *string `json:"PlanType,omitempty" xml:"PlanType,omitempty"`
}

func (s DescribeDBInstancePlansRequest) String() string {
	return dara.Prettify(s)
}

func (s DescribeDBInstancePlansRequest) GoString() string {
	return s.String()
}

func (s *DescribeDBInstancePlansRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *DescribeDBInstancePlansRequest) GetOwnerId() *int64 {
	return s.OwnerId
}

func (s *DescribeDBInstancePlansRequest) GetPlanCreateDate() *string {
	return s.PlanCreateDate
}

func (s *DescribeDBInstancePlansRequest) GetPlanDesc() *string {
	return s.PlanDesc
}

func (s *DescribeDBInstancePlansRequest) GetPlanId() *string {
	return s.PlanId
}

func (s *DescribeDBInstancePlansRequest) GetPlanScheduleType() *string {
	return s.PlanScheduleType
}

func (s *DescribeDBInstancePlansRequest) GetPlanType() *string {
	return s.PlanType
}

func (s *DescribeDBInstancePlansRequest) SetDBInstanceId(v string) *DescribeDBInstancePlansRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDBInstancePlansRequest) SetOwnerId(v int64) *DescribeDBInstancePlansRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeDBInstancePlansRequest) SetPlanCreateDate(v string) *DescribeDBInstancePlansRequest {
	s.PlanCreateDate = &v
	return s
}

func (s *DescribeDBInstancePlansRequest) SetPlanDesc(v string) *DescribeDBInstancePlansRequest {
	s.PlanDesc = &v
	return s
}

func (s *DescribeDBInstancePlansRequest) SetPlanId(v string) *DescribeDBInstancePlansRequest {
	s.PlanId = &v
	return s
}

func (s *DescribeDBInstancePlansRequest) SetPlanScheduleType(v string) *DescribeDBInstancePlansRequest {
	s.PlanScheduleType = &v
	return s
}

func (s *DescribeDBInstancePlansRequest) SetPlanType(v string) *DescribeDBInstancePlansRequest {
	s.PlanType = &v
	return s
}

func (s *DescribeDBInstancePlansRequest) Validate() error {
	return dara.Validate(s)
}

type iDescribeDBInstancePlansResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetErrorMessage(v string) *DescribeDBInstancePlansResponseBody
	GetErrorMessage() *string
	SetItems(v *DescribeDBInstancePlansResponseBodyItems) *DescribeDBInstancePlansResponseBody
	GetItems() *DescribeDBInstancePlansResponseBodyItems
	SetPageNumber(v int32) *DescribeDBInstancePlansResponseBody
	GetPageNumber() *int32
	SetPageRecordCount(v int32) *DescribeDBInstancePlansResponseBody
	GetPageRecordCount() *int32
	SetRequestId(v string) *DescribeDBInstancePlansResponseBody
	GetRequestId() *string
	SetStatus(v string) *DescribeDBInstancePlansResponseBody
	GetStatus() *string
	SetTotalRecordCount(v int32) *DescribeDBInstancePlansResponseBody
	GetTotalRecordCount() *int32
}

type DescribeDBInstancePlansResponseBody struct {
	// The error message.
	//
	// This parameter is returned only if the request fails.
	//
	// example:
	//
	// ****
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// The queried plans.
	Items *DescribeDBInstancePlansResponseBodyItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Struct"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 1
	PageRecordCount *int32 `json:"PageRecordCount,omitempty" xml:"PageRecordCount,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 34b32a0a-08ef-4a87-b6be-cdd988888888
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful.
	//
	// If the request was successful, **success*	- is returned. If the request failed, this parameter is not returned.
	//
	// example:
	//
	// success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 1
	TotalRecordCount *int32 `json:"TotalRecordCount,omitempty" xml:"TotalRecordCount,omitempty"`
}

func (s DescribeDBInstancePlansResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DescribeDBInstancePlansResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDBInstancePlansResponseBody) GetErrorMessage() *string {
	return s.ErrorMessage
}

func (s *DescribeDBInstancePlansResponseBody) GetItems() *DescribeDBInstancePlansResponseBodyItems {
	return s.Items
}

func (s *DescribeDBInstancePlansResponseBody) GetPageNumber() *int32 {
	return s.PageNumber
}

func (s *DescribeDBInstancePlansResponseBody) GetPageRecordCount() *int32 {
	return s.PageRecordCount
}

func (s *DescribeDBInstancePlansResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DescribeDBInstancePlansResponseBody) GetStatus() *string {
	return s.Status
}

func (s *DescribeDBInstancePlansResponseBody) GetTotalRecordCount() *int32 {
	return s.TotalRecordCount
}

func (s *DescribeDBInstancePlansResponseBody) SetErrorMessage(v string) *DescribeDBInstancePlansResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *DescribeDBInstancePlansResponseBody) SetItems(v *DescribeDBInstancePlansResponseBodyItems) *DescribeDBInstancePlansResponseBody {
	s.Items = v
	return s
}

func (s *DescribeDBInstancePlansResponseBody) SetPageNumber(v int32) *DescribeDBInstancePlansResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeDBInstancePlansResponseBody) SetPageRecordCount(v int32) *DescribeDBInstancePlansResponseBody {
	s.PageRecordCount = &v
	return s
}

func (s *DescribeDBInstancePlansResponseBody) SetRequestId(v string) *DescribeDBInstancePlansResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDBInstancePlansResponseBody) SetStatus(v string) *DescribeDBInstancePlansResponseBody {
	s.Status = &v
	return s
}

func (s *DescribeDBInstancePlansResponseBody) SetTotalRecordCount(v int32) *DescribeDBInstancePlansResponseBody {
	s.TotalRecordCount = &v
	return s
}

func (s *DescribeDBInstancePlansResponseBody) Validate() error {
	return dara.Validate(s)
}

type DescribeDBInstancePlansResponseBodyItems struct {
	PlanList []*DescribeDBInstancePlansResponseBodyItemsPlanList `json:"PlanList,omitempty" xml:"PlanList,omitempty" type:"Repeated"`
}

func (s DescribeDBInstancePlansResponseBodyItems) String() string {
	return dara.Prettify(s)
}

func (s DescribeDBInstancePlansResponseBodyItems) GoString() string {
	return s.String()
}

func (s *DescribeDBInstancePlansResponseBodyItems) GetPlanList() []*DescribeDBInstancePlansResponseBodyItemsPlanList {
	return s.PlanList
}

func (s *DescribeDBInstancePlansResponseBodyItems) SetPlanList(v []*DescribeDBInstancePlansResponseBodyItemsPlanList) *DescribeDBInstancePlansResponseBodyItems {
	s.PlanList = v
	return s
}

func (s *DescribeDBInstancePlansResponseBodyItems) Validate() error {
	return dara.Validate(s)
}

type DescribeDBInstancePlansResponseBodyItemsPlanList struct {
	// The instance ID.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The execution information of the plan.
	//
	// example:
	//
	// {"pause":{"planCronTime":"0 22 	- 	- 5"},"resume":{"planCronTime":"0 23 	- 	- 5"}}
	PlanConfig *string `json:"PlanConfig,omitempty" xml:"PlanConfig,omitempty"`
	// The description of the plan.
	//
	// example:
	//
	// this is a test plan
	PlanDesc *string `json:"PlanDesc,omitempty" xml:"PlanDesc,omitempty"`
	// The end time of the plan. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.
	//
	// >
	//
	// 	- This parameter is returned only for the plans that are periodically executed.
	//
	// 	- If you did not specify the end time when you created the plan, this parameter is not returned.
	//
	// example:
	//
	// 2023-04-17T23:00Z
	PlanEndDate *string `json:"PlanEndDate,omitempty" xml:"PlanEndDate,omitempty"`
	// The plan ID.
	//
	// example:
	//
	// 1234
	PlanId *string `json:"PlanId,omitempty" xml:"PlanId,omitempty"`
	// The name of the plan.
	//
	// example:
	//
	// test-plan
	PlanName *string `json:"PlanName,omitempty" xml:"PlanName,omitempty"`
	// The execution mode of the plan. Valid values:
	//
	// 	- **Postpone**: The plan is executed later.
	//
	// 	- **Regular**: The plan is executed periodically.
	//
	// example:
	//
	// Regular
	PlanScheduleType *string `json:"PlanScheduleType,omitempty" xml:"PlanScheduleType,omitempty"`
	// The start time of the plan. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.
	//
	// >
	//
	// 	- This parameter is returned only for the plans that are periodically executed.
	//
	// 	- If you did not specify the start time when you created the plan, the current time is returned.
	//
	// example:
	//
	// 2022-04-17T23:00Z
	PlanStartDate *string `json:"PlanStartDate,omitempty" xml:"PlanStartDate,omitempty"`
	// The status of the plan. Valid values:
	//
	// 	- **active**
	//
	// 	- **cancel**
	//
	// 	- **deleted**
	//
	// 	- **finished**
	//
	// example:
	//
	// active
	PlanStatus *string `json:"PlanStatus,omitempty" xml:"PlanStatus,omitempty"`
	// The type of the plan. Valid values:
	//
	// 	- **PauseResume**: pauses and resumes an instance.
	//
	// 	- **Resize**: scales an instance.
	//
	// example:
	//
	// PauseResume
	PlanType *string `json:"PlanType,omitempty" xml:"PlanType,omitempty"`
}

func (s DescribeDBInstancePlansResponseBodyItemsPlanList) String() string {
	return dara.Prettify(s)
}

func (s DescribeDBInstancePlansResponseBodyItemsPlanList) GoString() string {
	return s.String()
}

func (s *DescribeDBInstancePlansResponseBodyItemsPlanList) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *DescribeDBInstancePlansResponseBodyItemsPlanList) GetPlanConfig() *string {
	return s.PlanConfig
}

func (s *DescribeDBInstancePlansResponseBodyItemsPlanList) GetPlanDesc() *string {
	return s.PlanDesc
}

func (s *DescribeDBInstancePlansResponseBodyItemsPlanList) GetPlanEndDate() *string {
	return s.PlanEndDate
}

func (s *DescribeDBInstancePlansResponseBodyItemsPlanList) GetPlanId() *string {
	return s.PlanId
}

func (s *DescribeDBInstancePlansResponseBodyItemsPlanList) GetPlanName() *string {
	return s.PlanName
}

func (s *DescribeDBInstancePlansResponseBodyItemsPlanList) GetPlanScheduleType() *string {
	return s.PlanScheduleType
}

func (s *DescribeDBInstancePlansResponseBodyItemsPlanList) GetPlanStartDate() *string {
	return s.PlanStartDate
}

func (s *DescribeDBInstancePlansResponseBodyItemsPlanList) GetPlanStatus() *string {
	return s.PlanStatus
}

func (s *DescribeDBInstancePlansResponseBodyItemsPlanList) GetPlanType() *string {
	return s.PlanType
}

func (s *DescribeDBInstancePlansResponseBodyItemsPlanList) SetDBInstanceId(v string) *DescribeDBInstancePlansResponseBodyItemsPlanList {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDBInstancePlansResponseBodyItemsPlanList) SetPlanConfig(v string) *DescribeDBInstancePlansResponseBodyItemsPlanList {
	s.PlanConfig = &v
	return s
}

func (s *DescribeDBInstancePlansResponseBodyItemsPlanList) SetPlanDesc(v string) *DescribeDBInstancePlansResponseBodyItemsPlanList {
	s.PlanDesc = &v
	return s
}

func (s *DescribeDBInstancePlansResponseBodyItemsPlanList) SetPlanEndDate(v string) *DescribeDBInstancePlansResponseBodyItemsPlanList {
	s.PlanEndDate = &v
	return s
}

func (s *DescribeDBInstancePlansResponseBodyItemsPlanList) SetPlanId(v string) *DescribeDBInstancePlansResponseBodyItemsPlanList {
	s.PlanId = &v
	return s
}

func (s *DescribeDBInstancePlansResponseBodyItemsPlanList) SetPlanName(v string) *DescribeDBInstancePlansResponseBodyItemsPlanList {
	s.PlanName = &v
	return s
}

func (s *DescribeDBInstancePlansResponseBodyItemsPlanList) SetPlanScheduleType(v string) *DescribeDBInstancePlansResponseBodyItemsPlanList {
	s.PlanScheduleType = &v
	return s
}

func (s *DescribeDBInstancePlansResponseBodyItemsPlanList) SetPlanStartDate(v string) *DescribeDBInstancePlansResponseBodyItemsPlanList {
	s.PlanStartDate = &v
	return s
}

func (s *DescribeDBInstancePlansResponseBodyItemsPlanList) SetPlanStatus(v string) *DescribeDBInstancePlansResponseBodyItemsPlanList {
	s.PlanStatus = &v
	return s
}

func (s *DescribeDBInstancePlansResponseBodyItemsPlanList) SetPlanType(v string) *DescribeDBInstancePlansResponseBodyItemsPlanList {
	s.PlanType = &v
	return s
}

func (s *DescribeDBInstancePlansResponseBodyItemsPlanList) Validate() error {
	return dara.Validate(s)
}

type iDescribeDBInstancePlansResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DescribeDBInstancePlansResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DescribeDBInstancePlansResponse
	GetStatusCode() *int32
	SetBody(v *DescribeDBInstancePlansResponseBody) *DescribeDBInstancePlansResponse
	GetBody() *DescribeDBInstancePlansResponseBody
}

type DescribeDBInstancePlansResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeDBInstancePlansResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeDBInstancePlansResponse) String() string {
	return dara.Prettify(s)
}

func (s DescribeDBInstancePlansResponse) GoString() string {
	return s.String()
}

func (s *DescribeDBInstancePlansResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DescribeDBInstancePlansResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DescribeDBInstancePlansResponse) GetBody() *DescribeDBInstancePlansResponseBody {
	return s.Body
}

func (s *DescribeDBInstancePlansResponse) SetHeaders(v map[string]*string) *DescribeDBInstancePlansResponse {
	s.Headers = v
	return s
}

func (s *DescribeDBInstancePlansResponse) SetStatusCode(v int32) *DescribeDBInstancePlansResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDBInstancePlansResponse) SetBody(v *DescribeDBInstancePlansResponseBody) *DescribeDBInstancePlansResponse {
	s.Body = v
	return s
}

func (s *DescribeDBInstancePlansResponse) Validate() error {
	return dara.Validate(s)
}

type iDescribeDBInstanceSSLRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *DescribeDBInstanceSSLRequest
	GetDBInstanceId() *string
}

type DescribeDBInstanceSSLRequest struct {
	// The ID of the instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
}

func (s DescribeDBInstanceSSLRequest) String() string {
	return dara.Prettify(s)
}

func (s DescribeDBInstanceSSLRequest) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceSSLRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *DescribeDBInstanceSSLRequest) SetDBInstanceId(v string) *DescribeDBInstanceSSLRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDBInstanceSSLRequest) Validate() error {
	return dara.Validate(s)
}

type iDescribeDBInstanceSSLResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetCertCommonName(v string) *DescribeDBInstanceSSLResponseBody
	GetCertCommonName() *string
	SetDBInstanceId(v string) *DescribeDBInstanceSSLResponseBody
	GetDBInstanceId() *string
	SetDBInstanceName(v string) *DescribeDBInstanceSSLResponseBody
	GetDBInstanceName() *string
	SetRequestId(v string) *DescribeDBInstanceSSLResponseBody
	GetRequestId() *string
	SetSSLEnabled(v bool) *DescribeDBInstanceSSLResponseBody
	GetSSLEnabled() *bool
	SetSSLExpiredTime(v string) *DescribeDBInstanceSSLResponseBody
	GetSSLExpiredTime() *string
}

type DescribeDBInstanceSSLResponseBody struct {
	// The name of the SSL certificate.
	//
	// example:
	//
	// *.gpdbmaster.xxx.rds.aliyuncs.com
	CertCommonName *string `json:"CertCommonName,omitempty" xml:"CertCommonName,omitempty"`
	// The ID of the instance.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The name of the instance.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceName *string `json:"DBInstanceName,omitempty" xml:"DBInstanceName,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// D5FF8636-37F6-4CE0-8002-F8734C62C686
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether SSL encryption is enabled.
	//
	// example:
	//
	// true
	SSLEnabled *bool `json:"SSLEnabled,omitempty" xml:"SSLEnabled,omitempty"`
	// The expiration time of the SSL certificate.
	//
	// example:
	//
	// 2023-08-05T09:05:53Z
	SSLExpiredTime *string `json:"SSLExpiredTime,omitempty" xml:"SSLExpiredTime,omitempty"`
}

func (s DescribeDBInstanceSSLResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DescribeDBInstanceSSLResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceSSLResponseBody) GetCertCommonName() *string {
	return s.CertCommonName
}

func (s *DescribeDBInstanceSSLResponseBody) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *DescribeDBInstanceSSLResponseBody) GetDBInstanceName() *string {
	return s.DBInstanceName
}

func (s *DescribeDBInstanceSSLResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DescribeDBInstanceSSLResponseBody) GetSSLEnabled() *bool {
	return s.SSLEnabled
}

func (s *DescribeDBInstanceSSLResponseBody) GetSSLExpiredTime() *string {
	return s.SSLExpiredTime
}

func (s *DescribeDBInstanceSSLResponseBody) SetCertCommonName(v string) *DescribeDBInstanceSSLResponseBody {
	s.CertCommonName = &v
	return s
}

func (s *DescribeDBInstanceSSLResponseBody) SetDBInstanceId(v string) *DescribeDBInstanceSSLResponseBody {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDBInstanceSSLResponseBody) SetDBInstanceName(v string) *DescribeDBInstanceSSLResponseBody {
	s.DBInstanceName = &v
	return s
}

func (s *DescribeDBInstanceSSLResponseBody) SetRequestId(v string) *DescribeDBInstanceSSLResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDBInstanceSSLResponseBody) SetSSLEnabled(v bool) *DescribeDBInstanceSSLResponseBody {
	s.SSLEnabled = &v
	return s
}

func (s *DescribeDBInstanceSSLResponseBody) SetSSLExpiredTime(v string) *DescribeDBInstanceSSLResponseBody {
	s.SSLExpiredTime = &v
	return s
}

func (s *DescribeDBInstanceSSLResponseBody) Validate() error {
	return dara.Validate(s)
}

type iDescribeDBInstanceSSLResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DescribeDBInstanceSSLResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DescribeDBInstanceSSLResponse
	GetStatusCode() *int32
	SetBody(v *DescribeDBInstanceSSLResponseBody) *DescribeDBInstanceSSLResponse
	GetBody() *DescribeDBInstanceSSLResponseBody
}

type DescribeDBInstanceSSLResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeDBInstanceSSLResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeDBInstanceSSLResponse) String() string {
	return dara.Prettify(s)
}

func (s DescribeDBInstanceSSLResponse) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceSSLResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DescribeDBInstanceSSLResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DescribeDBInstanceSSLResponse) GetBody() *DescribeDBInstanceSSLResponseBody {
	return s.Body
}

func (s *DescribeDBInstanceSSLResponse) SetHeaders(v map[string]*string) *DescribeDBInstanceSSLResponse {
	s.Headers = v
	return s
}

func (s *DescribeDBInstanceSSLResponse) SetStatusCode(v int32) *DescribeDBInstanceSSLResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDBInstanceSSLResponse) SetBody(v *DescribeDBInstanceSSLResponseBody) *DescribeDBInstanceSSLResponse {
	s.Body = v
	return s
}

func (s *DescribeDBInstanceSSLResponse) Validate() error {
	return dara.Validate(s)
}

type iDescribeDBInstanceSupportMaxPerformanceRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *DescribeDBInstanceSupportMaxPerformanceRequest
	GetDBInstanceId() *string
	SetOwnerId(v int64) *DescribeDBInstanceSupportMaxPerformanceRequest
	GetOwnerId() *int64
}

type DescribeDBInstanceSupportMaxPerformanceRequest struct {
	// The instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp***************
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s DescribeDBInstanceSupportMaxPerformanceRequest) String() string {
	return dara.Prettify(s)
}

func (s DescribeDBInstanceSupportMaxPerformanceRequest) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceSupportMaxPerformanceRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *DescribeDBInstanceSupportMaxPerformanceRequest) GetOwnerId() *int64 {
	return s.OwnerId
}

func (s *DescribeDBInstanceSupportMaxPerformanceRequest) SetDBInstanceId(v string) *DescribeDBInstanceSupportMaxPerformanceRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDBInstanceSupportMaxPerformanceRequest) SetOwnerId(v int64) *DescribeDBInstanceSupportMaxPerformanceRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeDBInstanceSupportMaxPerformanceRequest) Validate() error {
	return dara.Validate(s)
}

type iDescribeDBInstanceSupportMaxPerformanceResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *DescribeDBInstanceSupportMaxPerformanceResponseBody
	GetDBInstanceId() *string
	SetPerformances(v *DescribeDBInstanceSupportMaxPerformanceResponseBodyPerformances) *DescribeDBInstanceSupportMaxPerformanceResponseBody
	GetPerformances() *DescribeDBInstanceSupportMaxPerformanceResponseBodyPerformances
	SetRequestId(v string) *DescribeDBInstanceSupportMaxPerformanceResponseBody
	GetRequestId() *string
}

type DescribeDBInstanceSupportMaxPerformanceResponseBody struct {
	// The instance ID.
	//
	// example:
	//
	// gp-bp***************
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The queried performance metric.
	Performances *DescribeDBInstanceSupportMaxPerformanceResponseBodyPerformances `json:"Performances,omitempty" xml:"Performances,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeDBInstanceSupportMaxPerformanceResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DescribeDBInstanceSupportMaxPerformanceResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceSupportMaxPerformanceResponseBody) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *DescribeDBInstanceSupportMaxPerformanceResponseBody) GetPerformances() *DescribeDBInstanceSupportMaxPerformanceResponseBodyPerformances {
	return s.Performances
}

func (s *DescribeDBInstanceSupportMaxPerformanceResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DescribeDBInstanceSupportMaxPerformanceResponseBody) SetDBInstanceId(v string) *DescribeDBInstanceSupportMaxPerformanceResponseBody {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDBInstanceSupportMaxPerformanceResponseBody) SetPerformances(v *DescribeDBInstanceSupportMaxPerformanceResponseBodyPerformances) *DescribeDBInstanceSupportMaxPerformanceResponseBody {
	s.Performances = v
	return s
}

func (s *DescribeDBInstanceSupportMaxPerformanceResponseBody) SetRequestId(v string) *DescribeDBInstanceSupportMaxPerformanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDBInstanceSupportMaxPerformanceResponseBody) Validate() error {
	return dara.Validate(s)
}

type DescribeDBInstanceSupportMaxPerformanceResponseBodyPerformances struct {
	Performance []*DescribeDBInstanceSupportMaxPerformanceResponseBodyPerformancesPerformance `json:"Performance,omitempty" xml:"Performance,omitempty" type:"Repeated"`
}

func (s DescribeDBInstanceSupportMaxPerformanceResponseBodyPerformances) String() string {
	return dara.Prettify(s)
}

func (s DescribeDBInstanceSupportMaxPerformanceResponseBodyPerformances) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceSupportMaxPerformanceResponseBodyPerformances) GetPerformance() []*DescribeDBInstanceSupportMaxPerformanceResponseBodyPerformancesPerformance {
	return s.Performance
}

func (s *DescribeDBInstanceSupportMaxPerformanceResponseBodyPerformances) SetPerformance(v []*DescribeDBInstanceSupportMaxPerformanceResponseBodyPerformancesPerformance) *DescribeDBInstanceSupportMaxPerformanceResponseBodyPerformances {
	s.Performance = v
	return s
}

func (s *DescribeDBInstanceSupportMaxPerformanceResponseBodyPerformances) Validate() error {
	return dara.Validate(s)
}

type DescribeDBInstanceSupportMaxPerformanceResponseBodyPerformancesPerformance struct {
	// The performance bottleneck type.
	//
	// example:
	//
	// ecs or disk
	Bottleneck *string `json:"Bottleneck,omitempty" xml:"Bottleneck,omitempty"`
	// The name of the performance metric.
	//
	// example:
	//
	// adbpg_status,adbpg_disk_status,adbpg_connection_status,adbgp_segment_disk_usage_percent_max,adbpg_master_disk_usage_percent_max,adbpg_disk_usage_percent
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The unit of the performance metric.
	//
	// example:
	//
	// %
	Unit *string `json:"Unit,omitempty" xml:"Unit,omitempty"`
	// The value of the performance metric.
	//
	// example:
	//
	// 90
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeDBInstanceSupportMaxPerformanceResponseBodyPerformancesPerformance) String() string {
	return dara.Prettify(s)
}

func (s DescribeDBInstanceSupportMaxPerformanceResponseBodyPerformancesPerformance) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceSupportMaxPerformanceResponseBodyPerformancesPerformance) GetBottleneck() *string {
	return s.Bottleneck
}

func (s *DescribeDBInstanceSupportMaxPerformanceResponseBodyPerformancesPerformance) GetKey() *string {
	return s.Key
}

func (s *DescribeDBInstanceSupportMaxPerformanceResponseBodyPerformancesPerformance) GetUnit() *string {
	return s.Unit
}

func (s *DescribeDBInstanceSupportMaxPerformanceResponseBodyPerformancesPerformance) GetValue() *string {
	return s.Value
}

func (s *DescribeDBInstanceSupportMaxPerformanceResponseBodyPerformancesPerformance) SetBottleneck(v string) *DescribeDBInstanceSupportMaxPerformanceResponseBodyPerformancesPerformance {
	s.Bottleneck = &v
	return s
}

func (s *DescribeDBInstanceSupportMaxPerformanceResponseBodyPerformancesPerformance) SetKey(v string) *DescribeDBInstanceSupportMaxPerformanceResponseBodyPerformancesPerformance {
	s.Key = &v
	return s
}

func (s *DescribeDBInstanceSupportMaxPerformanceResponseBodyPerformancesPerformance) SetUnit(v string) *DescribeDBInstanceSupportMaxPerformanceResponseBodyPerformancesPerformance {
	s.Unit = &v
	return s
}

func (s *DescribeDBInstanceSupportMaxPerformanceResponseBodyPerformancesPerformance) SetValue(v string) *DescribeDBInstanceSupportMaxPerformanceResponseBodyPerformancesPerformance {
	s.Value = &v
	return s
}

func (s *DescribeDBInstanceSupportMaxPerformanceResponseBodyPerformancesPerformance) Validate() error {
	return dara.Validate(s)
}

type iDescribeDBInstanceSupportMaxPerformanceResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DescribeDBInstanceSupportMaxPerformanceResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DescribeDBInstanceSupportMaxPerformanceResponse
	GetStatusCode() *int32
	SetBody(v *DescribeDBInstanceSupportMaxPerformanceResponseBody) *DescribeDBInstanceSupportMaxPerformanceResponse
	GetBody() *DescribeDBInstanceSupportMaxPerformanceResponseBody
}

type DescribeDBInstanceSupportMaxPerformanceResponse struct {
	Headers    map[string]*string                                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeDBInstanceSupportMaxPerformanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeDBInstanceSupportMaxPerformanceResponse) String() string {
	return dara.Prettify(s)
}

func (s DescribeDBInstanceSupportMaxPerformanceResponse) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceSupportMaxPerformanceResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DescribeDBInstanceSupportMaxPerformanceResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DescribeDBInstanceSupportMaxPerformanceResponse) GetBody() *DescribeDBInstanceSupportMaxPerformanceResponseBody {
	return s.Body
}

func (s *DescribeDBInstanceSupportMaxPerformanceResponse) SetHeaders(v map[string]*string) *DescribeDBInstanceSupportMaxPerformanceResponse {
	s.Headers = v
	return s
}

func (s *DescribeDBInstanceSupportMaxPerformanceResponse) SetStatusCode(v int32) *DescribeDBInstanceSupportMaxPerformanceResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDBInstanceSupportMaxPerformanceResponse) SetBody(v *DescribeDBInstanceSupportMaxPerformanceResponseBody) *DescribeDBInstanceSupportMaxPerformanceResponse {
	s.Body = v
	return s
}

func (s *DescribeDBInstanceSupportMaxPerformanceResponse) Validate() error {
	return dara.Validate(s)
}

type iDescribeDBInstancesRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceCategories(v []*string) *DescribeDBInstancesRequest
	GetDBInstanceCategories() []*string
	SetDBInstanceDescription(v string) *DescribeDBInstancesRequest
	GetDBInstanceDescription() *string
	SetDBInstanceIds(v string) *DescribeDBInstancesRequest
	GetDBInstanceIds() *string
	SetDBInstanceModes(v []*string) *DescribeDBInstancesRequest
	GetDBInstanceModes() []*string
	SetDBInstanceStatuses(v []*string) *DescribeDBInstancesRequest
	GetDBInstanceStatuses() []*string
	SetInstanceDeployTypes(v []*string) *DescribeDBInstancesRequest
	GetInstanceDeployTypes() []*string
	SetInstanceNetworkType(v string) *DescribeDBInstancesRequest
	GetInstanceNetworkType() *string
	SetOwnerId(v int64) *DescribeDBInstancesRequest
	GetOwnerId() *int64
	SetPageNumber(v int32) *DescribeDBInstancesRequest
	GetPageNumber() *int32
	SetPageSize(v int32) *DescribeDBInstancesRequest
	GetPageSize() *int32
	SetRegionId(v string) *DescribeDBInstancesRequest
	GetRegionId() *string
	SetResourceGroupId(v string) *DescribeDBInstancesRequest
	GetResourceGroupId() *string
	SetTag(v []*DescribeDBInstancesRequestTag) *DescribeDBInstancesRequest
	GetTag() []*DescribeDBInstancesRequestTag
	SetVpcId(v string) *DescribeDBInstancesRequest
	GetVpcId() *string
}

type DescribeDBInstancesRequest struct {
	// The edition of the instance. Separate multiple values with commas (,).
	DBInstanceCategories []*string `json:"DBInstanceCategories,omitempty" xml:"DBInstanceCategories,omitempty" type:"Repeated"`
	// The description of the instance.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceDescription *string `json:"DBInstanceDescription,omitempty" xml:"DBInstanceDescription,omitempty"`
	// The instance ID. Separate multiple values with commas (,).
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceIds *string `json:"DBInstanceIds,omitempty" xml:"DBInstanceIds,omitempty"`
	// The resource type of the instance. Separate multiple values with commas (,).
	DBInstanceModes []*string `json:"DBInstanceModes,omitempty" xml:"DBInstanceModes,omitempty" type:"Repeated"`
	// The state of the instance.
	DBInstanceStatuses []*string `json:"DBInstanceStatuses,omitempty" xml:"DBInstanceStatuses,omitempty" type:"Repeated"`
	// This parameter is no longer used.
	InstanceDeployTypes []*string `json:"InstanceDeployTypes,omitempty" xml:"InstanceDeployTypes,omitempty" type:"Repeated"`
	// The network type of the instance. Valid values:
	//
	// 	- **VPC**: virtual private cloud (VPC).
	//
	// 	- **Classic**: classic network.
	//
	// > If you do not specify this parameter, instances of all network types are returned.
	//
	// example:
	//
	// VPC
	InstanceNetworkType *string `json:"InstanceNetworkType,omitempty" xml:"InstanceNetworkType,omitempty"`
	OwnerId             *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The page number. Pages start from page 1. Default value: **1**.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. Valid values:
	//
	// 	- **30**
	//
	// 	- **50**
	//
	// 	- **100**
	//
	// Default value: **30**.
	//
	// example:
	//
	// 50
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The region ID.
	//
	// > You can call the [DescribeRegions](https://help.aliyun.com/document_detail/86912.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the resource group to which the instance belongs.
	//
	// example:
	//
	// rg-bp67acfmxazb4p****
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	// The tags.
	Tag []*DescribeDBInstancesRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
	// The VPC ID. You can use this parameter to filter instances that reside in the specified VPC.
	//
	// example:
	//
	// vpc-t4nqyp3tc5mx7vy6****
	VpcId *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
}

func (s DescribeDBInstancesRequest) String() string {
	return dara.Prettify(s)
}

func (s DescribeDBInstancesRequest) GoString() string {
	return s.String()
}

func (s *DescribeDBInstancesRequest) GetDBInstanceCategories() []*string {
	return s.DBInstanceCategories
}

func (s *DescribeDBInstancesRequest) GetDBInstanceDescription() *string {
	return s.DBInstanceDescription
}

func (s *DescribeDBInstancesRequest) GetDBInstanceIds() *string {
	return s.DBInstanceIds
}

func (s *DescribeDBInstancesRequest) GetDBInstanceModes() []*string {
	return s.DBInstanceModes
}

func (s *DescribeDBInstancesRequest) GetDBInstanceStatuses() []*string {
	return s.DBInstanceStatuses
}

func (s *DescribeDBInstancesRequest) GetInstanceDeployTypes() []*string {
	return s.InstanceDeployTypes
}

func (s *DescribeDBInstancesRequest) GetInstanceNetworkType() *string {
	return s.InstanceNetworkType
}

func (s *DescribeDBInstancesRequest) GetOwnerId() *int64 {
	return s.OwnerId
}

func (s *DescribeDBInstancesRequest) GetPageNumber() *int32 {
	return s.PageNumber
}

func (s *DescribeDBInstancesRequest) GetPageSize() *int32 {
	return s.PageSize
}

func (s *DescribeDBInstancesRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *DescribeDBInstancesRequest) GetResourceGroupId() *string {
	return s.ResourceGroupId
}

func (s *DescribeDBInstancesRequest) GetTag() []*DescribeDBInstancesRequestTag {
	return s.Tag
}

func (s *DescribeDBInstancesRequest) GetVpcId() *string {
	return s.VpcId
}

func (s *DescribeDBInstancesRequest) SetDBInstanceCategories(v []*string) *DescribeDBInstancesRequest {
	s.DBInstanceCategories = v
	return s
}

func (s *DescribeDBInstancesRequest) SetDBInstanceDescription(v string) *DescribeDBInstancesRequest {
	s.DBInstanceDescription = &v
	return s
}

func (s *DescribeDBInstancesRequest) SetDBInstanceIds(v string) *DescribeDBInstancesRequest {
	s.DBInstanceIds = &v
	return s
}

func (s *DescribeDBInstancesRequest) SetDBInstanceModes(v []*string) *DescribeDBInstancesRequest {
	s.DBInstanceModes = v
	return s
}

func (s *DescribeDBInstancesRequest) SetDBInstanceStatuses(v []*string) *DescribeDBInstancesRequest {
	s.DBInstanceStatuses = v
	return s
}

func (s *DescribeDBInstancesRequest) SetInstanceDeployTypes(v []*string) *DescribeDBInstancesRequest {
	s.InstanceDeployTypes = v
	return s
}

func (s *DescribeDBInstancesRequest) SetInstanceNetworkType(v string) *DescribeDBInstancesRequest {
	s.InstanceNetworkType = &v
	return s
}

func (s *DescribeDBInstancesRequest) SetOwnerId(v int64) *DescribeDBInstancesRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeDBInstancesRequest) SetPageNumber(v int32) *DescribeDBInstancesRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeDBInstancesRequest) SetPageSize(v int32) *DescribeDBInstancesRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeDBInstancesRequest) SetRegionId(v string) *DescribeDBInstancesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeDBInstancesRequest) SetResourceGroupId(v string) *DescribeDBInstancesRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeDBInstancesRequest) SetTag(v []*DescribeDBInstancesRequestTag) *DescribeDBInstancesRequest {
	s.Tag = v
	return s
}

func (s *DescribeDBInstancesRequest) SetVpcId(v string) *DescribeDBInstancesRequest {
	s.VpcId = &v
	return s
}

func (s *DescribeDBInstancesRequest) Validate() error {
	return dara.Validate(s)
}

type DescribeDBInstancesRequestTag struct {
	// The key of tag N.
	//
	// example:
	//
	// test-key
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The value of tag N.
	//
	// example:
	//
	// test-value
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeDBInstancesRequestTag) String() string {
	return dara.Prettify(s)
}

func (s DescribeDBInstancesRequestTag) GoString() string {
	return s.String()
}

func (s *DescribeDBInstancesRequestTag) GetKey() *string {
	return s.Key
}

func (s *DescribeDBInstancesRequestTag) GetValue() *string {
	return s.Value
}

func (s *DescribeDBInstancesRequestTag) SetKey(v string) *DescribeDBInstancesRequestTag {
	s.Key = &v
	return s
}

func (s *DescribeDBInstancesRequestTag) SetValue(v string) *DescribeDBInstancesRequestTag {
	s.Value = &v
	return s
}

func (s *DescribeDBInstancesRequestTag) Validate() error {
	return dara.Validate(s)
}

type iDescribeDBInstancesShrinkRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceCategoriesShrink(v string) *DescribeDBInstancesShrinkRequest
	GetDBInstanceCategoriesShrink() *string
	SetDBInstanceDescription(v string) *DescribeDBInstancesShrinkRequest
	GetDBInstanceDescription() *string
	SetDBInstanceIds(v string) *DescribeDBInstancesShrinkRequest
	GetDBInstanceIds() *string
	SetDBInstanceModesShrink(v string) *DescribeDBInstancesShrinkRequest
	GetDBInstanceModesShrink() *string
	SetDBInstanceStatusesShrink(v string) *DescribeDBInstancesShrinkRequest
	GetDBInstanceStatusesShrink() *string
	SetInstanceDeployTypesShrink(v string) *DescribeDBInstancesShrinkRequest
	GetInstanceDeployTypesShrink() *string
	SetInstanceNetworkType(v string) *DescribeDBInstancesShrinkRequest
	GetInstanceNetworkType() *string
	SetOwnerId(v int64) *DescribeDBInstancesShrinkRequest
	GetOwnerId() *int64
	SetPageNumber(v int32) *DescribeDBInstancesShrinkRequest
	GetPageNumber() *int32
	SetPageSize(v int32) *DescribeDBInstancesShrinkRequest
	GetPageSize() *int32
	SetRegionId(v string) *DescribeDBInstancesShrinkRequest
	GetRegionId() *string
	SetResourceGroupId(v string) *DescribeDBInstancesShrinkRequest
	GetResourceGroupId() *string
	SetTag(v []*DescribeDBInstancesShrinkRequestTag) *DescribeDBInstancesShrinkRequest
	GetTag() []*DescribeDBInstancesShrinkRequestTag
	SetVpcId(v string) *DescribeDBInstancesShrinkRequest
	GetVpcId() *string
}

type DescribeDBInstancesShrinkRequest struct {
	// The edition of the instance. Separate multiple values with commas (,).
	DBInstanceCategoriesShrink *string `json:"DBInstanceCategories,omitempty" xml:"DBInstanceCategories,omitempty"`
	// The description of the instance.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceDescription *string `json:"DBInstanceDescription,omitempty" xml:"DBInstanceDescription,omitempty"`
	// The instance ID. Separate multiple values with commas (,).
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceIds *string `json:"DBInstanceIds,omitempty" xml:"DBInstanceIds,omitempty"`
	// The resource type of the instance. Separate multiple values with commas (,).
	DBInstanceModesShrink *string `json:"DBInstanceModes,omitempty" xml:"DBInstanceModes,omitempty"`
	// The state of the instance.
	DBInstanceStatusesShrink *string `json:"DBInstanceStatuses,omitempty" xml:"DBInstanceStatuses,omitempty"`
	// This parameter is no longer used.
	InstanceDeployTypesShrink *string `json:"InstanceDeployTypes,omitempty" xml:"InstanceDeployTypes,omitempty"`
	// The network type of the instance. Valid values:
	//
	// 	- **VPC**: virtual private cloud (VPC).
	//
	// 	- **Classic**: classic network.
	//
	// > If you do not specify this parameter, instances of all network types are returned.
	//
	// example:
	//
	// VPC
	InstanceNetworkType *string `json:"InstanceNetworkType,omitempty" xml:"InstanceNetworkType,omitempty"`
	OwnerId             *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The page number. Pages start from page 1. Default value: **1**.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. Valid values:
	//
	// 	- **30**
	//
	// 	- **50**
	//
	// 	- **100**
	//
	// Default value: **30**.
	//
	// example:
	//
	// 50
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The region ID.
	//
	// > You can call the [DescribeRegions](https://help.aliyun.com/document_detail/86912.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the resource group to which the instance belongs.
	//
	// example:
	//
	// rg-bp67acfmxazb4p****
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	// The tags.
	Tag []*DescribeDBInstancesShrinkRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
	// The VPC ID. You can use this parameter to filter instances that reside in the specified VPC.
	//
	// example:
	//
	// vpc-t4nqyp3tc5mx7vy6****
	VpcId *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
}

func (s DescribeDBInstancesShrinkRequest) String() string {
	return dara.Prettify(s)
}

func (s DescribeDBInstancesShrinkRequest) GoString() string {
	return s.String()
}

func (s *DescribeDBInstancesShrinkRequest) GetDBInstanceCategoriesShrink() *string {
	return s.DBInstanceCategoriesShrink
}

func (s *DescribeDBInstancesShrinkRequest) GetDBInstanceDescription() *string {
	return s.DBInstanceDescription
}

func (s *DescribeDBInstancesShrinkRequest) GetDBInstanceIds() *string {
	return s.DBInstanceIds
}

func (s *DescribeDBInstancesShrinkRequest) GetDBInstanceModesShrink() *string {
	return s.DBInstanceModesShrink
}

func (s *DescribeDBInstancesShrinkRequest) GetDBInstanceStatusesShrink() *string {
	return s.DBInstanceStatusesShrink
}

func (s *DescribeDBInstancesShrinkRequest) GetInstanceDeployTypesShrink() *string {
	return s.InstanceDeployTypesShrink
}

func (s *DescribeDBInstancesShrinkRequest) GetInstanceNetworkType() *string {
	return s.InstanceNetworkType
}

func (s *DescribeDBInstancesShrinkRequest) GetOwnerId() *int64 {
	return s.OwnerId
}

func (s *DescribeDBInstancesShrinkRequest) GetPageNumber() *int32 {
	return s.PageNumber
}

func (s *DescribeDBInstancesShrinkRequest) GetPageSize() *int32 {
	return s.PageSize
}

func (s *DescribeDBInstancesShrinkRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *DescribeDBInstancesShrinkRequest) GetResourceGroupId() *string {
	return s.ResourceGroupId
}

func (s *DescribeDBInstancesShrinkRequest) GetTag() []*DescribeDBInstancesShrinkRequestTag {
	return s.Tag
}

func (s *DescribeDBInstancesShrinkRequest) GetVpcId() *string {
	return s.VpcId
}

func (s *DescribeDBInstancesShrinkRequest) SetDBInstanceCategoriesShrink(v string) *DescribeDBInstancesShrinkRequest {
	s.DBInstanceCategoriesShrink = &v
	return s
}

func (s *DescribeDBInstancesShrinkRequest) SetDBInstanceDescription(v string) *DescribeDBInstancesShrinkRequest {
	s.DBInstanceDescription = &v
	return s
}

func (s *DescribeDBInstancesShrinkRequest) SetDBInstanceIds(v string) *DescribeDBInstancesShrinkRequest {
	s.DBInstanceIds = &v
	return s
}

func (s *DescribeDBInstancesShrinkRequest) SetDBInstanceModesShrink(v string) *DescribeDBInstancesShrinkRequest {
	s.DBInstanceModesShrink = &v
	return s
}

func (s *DescribeDBInstancesShrinkRequest) SetDBInstanceStatusesShrink(v string) *DescribeDBInstancesShrinkRequest {
	s.DBInstanceStatusesShrink = &v
	return s
}

func (s *DescribeDBInstancesShrinkRequest) SetInstanceDeployTypesShrink(v string) *DescribeDBInstancesShrinkRequest {
	s.InstanceDeployTypesShrink = &v
	return s
}

func (s *DescribeDBInstancesShrinkRequest) SetInstanceNetworkType(v string) *DescribeDBInstancesShrinkRequest {
	s.InstanceNetworkType = &v
	return s
}

func (s *DescribeDBInstancesShrinkRequest) SetOwnerId(v int64) *DescribeDBInstancesShrinkRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeDBInstancesShrinkRequest) SetPageNumber(v int32) *DescribeDBInstancesShrinkRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeDBInstancesShrinkRequest) SetPageSize(v int32) *DescribeDBInstancesShrinkRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeDBInstancesShrinkRequest) SetRegionId(v string) *DescribeDBInstancesShrinkRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeDBInstancesShrinkRequest) SetResourceGroupId(v string) *DescribeDBInstancesShrinkRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeDBInstancesShrinkRequest) SetTag(v []*DescribeDBInstancesShrinkRequestTag) *DescribeDBInstancesShrinkRequest {
	s.Tag = v
	return s
}

func (s *DescribeDBInstancesShrinkRequest) SetVpcId(v string) *DescribeDBInstancesShrinkRequest {
	s.VpcId = &v
	return s
}

func (s *DescribeDBInstancesShrinkRequest) Validate() error {
	return dara.Validate(s)
}

type DescribeDBInstancesShrinkRequestTag struct {
	// The key of tag N.
	//
	// example:
	//
	// test-key
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The value of tag N.
	//
	// example:
	//
	// test-value
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeDBInstancesShrinkRequestTag) String() string {
	return dara.Prettify(s)
}

func (s DescribeDBInstancesShrinkRequestTag) GoString() string {
	return s.String()
}

func (s *DescribeDBInstancesShrinkRequestTag) GetKey() *string {
	return s.Key
}

func (s *DescribeDBInstancesShrinkRequestTag) GetValue() *string {
	return s.Value
}

func (s *DescribeDBInstancesShrinkRequestTag) SetKey(v string) *DescribeDBInstancesShrinkRequestTag {
	s.Key = &v
	return s
}

func (s *DescribeDBInstancesShrinkRequestTag) SetValue(v string) *DescribeDBInstancesShrinkRequestTag {
	s.Value = &v
	return s
}

func (s *DescribeDBInstancesShrinkRequestTag) Validate() error {
	return dara.Validate(s)
}

type iDescribeDBInstancesResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetItems(v *DescribeDBInstancesResponseBodyItems) *DescribeDBInstancesResponseBody
	GetItems() *DescribeDBInstancesResponseBodyItems
	SetPageNumber(v int32) *DescribeDBInstancesResponseBody
	GetPageNumber() *int32
	SetPageRecordCount(v int32) *DescribeDBInstancesResponseBody
	GetPageRecordCount() *int32
	SetRequestId(v string) *DescribeDBInstancesResponseBody
	GetRequestId() *string
	SetTotalRecordCount(v int32) *DescribeDBInstancesResponseBody
	GetTotalRecordCount() *int32
}

type DescribeDBInstancesResponseBody struct {
	// The queried instances.
	Items *DescribeDBInstancesResponseBodyItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Struct"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 1
	PageRecordCount *int32 `json:"PageRecordCount,omitempty" xml:"PageRecordCount,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 53EA07B7-FC2A-521B-AB7C-27**********
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 1
	TotalRecordCount *int32 `json:"TotalRecordCount,omitempty" xml:"TotalRecordCount,omitempty"`
}

func (s DescribeDBInstancesResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DescribeDBInstancesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDBInstancesResponseBody) GetItems() *DescribeDBInstancesResponseBodyItems {
	return s.Items
}

func (s *DescribeDBInstancesResponseBody) GetPageNumber() *int32 {
	return s.PageNumber
}

func (s *DescribeDBInstancesResponseBody) GetPageRecordCount() *int32 {
	return s.PageRecordCount
}

func (s *DescribeDBInstancesResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DescribeDBInstancesResponseBody) GetTotalRecordCount() *int32 {
	return s.TotalRecordCount
}

func (s *DescribeDBInstancesResponseBody) SetItems(v *DescribeDBInstancesResponseBodyItems) *DescribeDBInstancesResponseBody {
	s.Items = v
	return s
}

func (s *DescribeDBInstancesResponseBody) SetPageNumber(v int32) *DescribeDBInstancesResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeDBInstancesResponseBody) SetPageRecordCount(v int32) *DescribeDBInstancesResponseBody {
	s.PageRecordCount = &v
	return s
}

func (s *DescribeDBInstancesResponseBody) SetRequestId(v string) *DescribeDBInstancesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDBInstancesResponseBody) SetTotalRecordCount(v int32) *DescribeDBInstancesResponseBody {
	s.TotalRecordCount = &v
	return s
}

func (s *DescribeDBInstancesResponseBody) Validate() error {
	return dara.Validate(s)
}

type DescribeDBInstancesResponseBodyItems struct {
	DBInstance []*DescribeDBInstancesResponseBodyItemsDBInstance `json:"DBInstance,omitempty" xml:"DBInstance,omitempty" type:"Repeated"`
}

func (s DescribeDBInstancesResponseBodyItems) String() string {
	return dara.Prettify(s)
}

func (s DescribeDBInstancesResponseBodyItems) GoString() string {
	return s.String()
}

func (s *DescribeDBInstancesResponseBodyItems) GetDBInstance() []*DescribeDBInstancesResponseBodyItemsDBInstance {
	return s.DBInstance
}

func (s *DescribeDBInstancesResponseBodyItems) SetDBInstance(v []*DescribeDBInstancesResponseBodyItemsDBInstance) *DescribeDBInstancesResponseBodyItems {
	s.DBInstance = v
	return s
}

func (s *DescribeDBInstancesResponseBodyItems) Validate() error {
	return dara.Validate(s)
}

type DescribeDBInstancesResponseBodyItemsDBInstance struct {
	// An invalid parameter. It is no longer returned when you call this operation.
	//
	// You can call the [DescribeDBInstanceAttribute](https://help.aliyun.com/document_detail/86910.html) operation to query the access mode of an instance.
	//
	// example:
	//
	// null
	ConnectionMode *string `json:"ConnectionMode,omitempty" xml:"ConnectionMode,omitempty"`
	// The time when the instance was created. The time is displayed in UTC.
	//
	// example:
	//
	// 2021-10-09T04:54:08Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The edition of the instance. Valid values:
	//
	// 	- **Basic**: Basic Edition.
	//
	// 	- **HighAvailability**: High-availability Edition.
	//
	// 	- **Finance**: Enterprise Edition.
	//
	// example:
	//
	// HighAvailability
	DBInstanceCategory *string `json:"DBInstanceCategory,omitempty" xml:"DBInstanceCategory,omitempty"`
	// The description of the instance.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceDescription *string `json:"DBInstanceDescription,omitempty" xml:"DBInstanceDescription,omitempty"`
	// The instance ID.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The resource type of the instance. Valid values:
	//
	// 	- **Serverless**: Serverless mode.
	//
	// 	- **StorageElastic**: elastic storage mode.
	//
	// 	- **Classic**: reserved storage mode.
	//
	// example:
	//
	// StorageElastic
	DBInstanceMode *string `json:"DBInstanceMode,omitempty" xml:"DBInstanceMode,omitempty"`
	// The type of the network interface card (NIC) that is used by the instance. Valid values:
	//
	// 	- **0**: Internet.
	//
	// 	- **1**: internal network.
	//
	// 	- **2**: VPC.
	//
	// example:
	//
	// 2
	DBInstanceNetType *string `json:"DBInstanceNetType,omitempty" xml:"DBInstanceNetType,omitempty"`
	// The status of the instance. For more information, see [Instance statuses](https://help.aliyun.com/document_detail/86944.html).
	//
	// example:
	//
	// Running
	DBInstanceStatus *string `json:"DBInstanceStatus,omitempty" xml:"DBInstanceStatus,omitempty"`
	// The database engine of the instance.
	//
	// example:
	//
	// gpdb
	Engine *string `json:"Engine,omitempty" xml:"Engine,omitempty"`
	// The database engine version of the instance.
	//
	// example:
	//
	// 6.0
	EngineVersion *string `json:"EngineVersion,omitempty" xml:"EngineVersion,omitempty"`
	// The expiration time of the instance. The time is displayed in UTC.
	//
	// >  The expiration time of a pay-as-you-go instance is `2999-09-08T16:00:00Z`.
	//
	// example:
	//
	// 2999-09-08T16:00:00Z
	ExpireTime *string `json:"ExpireTime,omitempty" xml:"ExpireTime,omitempty"`
	// The resource type of the instance. Valid values:
	//
	// 	- **cluster**: Serverless mode or elastic storage mode.
	//
	// 	- **replicaSet**: reserved storage mode.
	//
	// example:
	//
	// cluster
	InstanceDeployType *string `json:"InstanceDeployType,omitempty" xml:"InstanceDeployType,omitempty"`
	// The network type of the instance. Valid values:
	//
	// 	- **Classic**: classic network.
	//
	// 	- **VPC**: VPC.
	//
	// example:
	//
	// VPC
	InstanceNetworkType *string `json:"InstanceNetworkType,omitempty" xml:"InstanceNetworkType,omitempty"`
	// The lock mode of the instance. Valid values:
	//
	// 	- **Unlock**: The instance is not locked.
	//
	// 	- **ManualLock**: The instance is manually locked.
	//
	// 	- **LockByExpiration**: The instance is automatically locked due to instance expiration.
	//
	// 	- **LockByRestoration**: The instance is automatically locked due to instance restoration.
	//
	// 	- **LockByDiskQuota**: The instance is automatically locked due to exhausted storage.
	//
	// 	- **LockReadInstanceByDiskQuota**: The instance is a read-only instance and is automatically locked when the disk space is full.
	//
	// example:
	//
	// Unlock
	LockMode *string `json:"LockMode,omitempty" xml:"LockMode,omitempty"`
	// The reason why the instance is locked. Valid values:
	//
	// 	- **0**: The instance is not locked.
	//
	// 	- **1**: The instance is manually locked.
	//
	// 	- **2**: The instance is automatically locked due to instance expiration.
	//
	// 	- **3**: The instance is automatically locked due to instance restoration.
	//
	// 	- **4**: The instance is automatically locked due to exhausted storage.
	//
	// >  If the instance is in reserved storage mode and is not locked, null is returned.
	//
	// example:
	//
	// 0
	LockReason *string `json:"LockReason,omitempty" xml:"LockReason,omitempty"`
	// The number of coordinator nodes.
	//
	// example:
	//
	// 1
	MasterNodeNum *int32 `json:"MasterNodeNum,omitempty" xml:"MasterNodeNum,omitempty"`
	// The billing method of the instance. Valid values:
	//
	// 	- **Postpaid**: pay-as-you-go.
	//
	// 	- **Prepaid**: subscription.
	//
	// example:
	//
	// Postpaid
	PayType *string `json:"PayType,omitempty" xml:"PayType,omitempty"`
	// product type
	//
	// example:
	//
	// standard
	ProdType *string `json:"ProdType,omitempty" xml:"ProdType,omitempty"`
	// The region ID.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the resource group to which the instance belongs.
	//
	// example:
	//
	// rg-bp67acfmxazb4p****
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	// The number of compute nodes.
	//
	// example:
	//
	// 4
	SegNodeNum *string `json:"SegNodeNum,omitempty" xml:"SegNodeNum,omitempty"`
	// The type of the Serverless mode. Valid values:
	//
	// 	- **Manual**: manual scheduling.
	//
	// 	- **Auto**: automatic scheduling.
	//
	// >  This parameter is returned only for instances in Serverless mode.
	//
	// example:
	//
	// Manual
	ServerlessMode *string `json:"ServerlessMode,omitempty" xml:"ServerlessMode,omitempty"`
	// The storage capacity of the instance. Unit: GB.
	//
	// example:
	//
	// 50
	StorageSize *string `json:"StorageSize,omitempty" xml:"StorageSize,omitempty"`
	// The storage type of the instance. Valid values:
	//
	// 	- **cloud_essd**: enhanced SSD (ESSD).
	//
	// 	- **cloud_efficiency**: ultra disk.
	//
	// example:
	//
	// cloud_essd
	StorageType *string `json:"StorageType,omitempty" xml:"StorageType,omitempty"`
	// The tags that are added to the instance.
	Tags *DescribeDBInstancesResponseBodyItemsDBInstanceTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Struct"`
	// The vSwitch ID.
	//
	// example:
	//
	// vsw-bp1cpq8mr64paltkb****
	VSwitchId *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	// The VPC ID of the instance.
	//
	// example:
	//
	// vpc-bp19ame5m1r3oejns****
	VpcId *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	// The zone ID.
	//
	// example:
	//
	// cn-hangzhou-h
	ZoneId *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s DescribeDBInstancesResponseBodyItemsDBInstance) String() string {
	return dara.Prettify(s)
}

func (s DescribeDBInstancesResponseBodyItemsDBInstance) GoString() string {
	return s.String()
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) GetConnectionMode() *string {
	return s.ConnectionMode
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) GetCreateTime() *string {
	return s.CreateTime
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) GetDBInstanceCategory() *string {
	return s.DBInstanceCategory
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) GetDBInstanceDescription() *string {
	return s.DBInstanceDescription
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) GetDBInstanceMode() *string {
	return s.DBInstanceMode
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) GetDBInstanceNetType() *string {
	return s.DBInstanceNetType
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) GetDBInstanceStatus() *string {
	return s.DBInstanceStatus
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) GetEngine() *string {
	return s.Engine
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) GetEngineVersion() *string {
	return s.EngineVersion
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) GetExpireTime() *string {
	return s.ExpireTime
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) GetInstanceDeployType() *string {
	return s.InstanceDeployType
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) GetInstanceNetworkType() *string {
	return s.InstanceNetworkType
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) GetLockMode() *string {
	return s.LockMode
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) GetLockReason() *string {
	return s.LockReason
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) GetMasterNodeNum() *int32 {
	return s.MasterNodeNum
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) GetPayType() *string {
	return s.PayType
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) GetProdType() *string {
	return s.ProdType
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) GetRegionId() *string {
	return s.RegionId
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) GetResourceGroupId() *string {
	return s.ResourceGroupId
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) GetSegNodeNum() *string {
	return s.SegNodeNum
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) GetServerlessMode() *string {
	return s.ServerlessMode
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) GetStorageSize() *string {
	return s.StorageSize
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) GetStorageType() *string {
	return s.StorageType
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) GetTags() *DescribeDBInstancesResponseBodyItemsDBInstanceTags {
	return s.Tags
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) GetVSwitchId() *string {
	return s.VSwitchId
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) GetVpcId() *string {
	return s.VpcId
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) GetZoneId() *string {
	return s.ZoneId
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) SetConnectionMode(v string) *DescribeDBInstancesResponseBodyItemsDBInstance {
	s.ConnectionMode = &v
	return s
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) SetCreateTime(v string) *DescribeDBInstancesResponseBodyItemsDBInstance {
	s.CreateTime = &v
	return s
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) SetDBInstanceCategory(v string) *DescribeDBInstancesResponseBodyItemsDBInstance {
	s.DBInstanceCategory = &v
	return s
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) SetDBInstanceDescription(v string) *DescribeDBInstancesResponseBodyItemsDBInstance {
	s.DBInstanceDescription = &v
	return s
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) SetDBInstanceId(v string) *DescribeDBInstancesResponseBodyItemsDBInstance {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) SetDBInstanceMode(v string) *DescribeDBInstancesResponseBodyItemsDBInstance {
	s.DBInstanceMode = &v
	return s
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) SetDBInstanceNetType(v string) *DescribeDBInstancesResponseBodyItemsDBInstance {
	s.DBInstanceNetType = &v
	return s
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) SetDBInstanceStatus(v string) *DescribeDBInstancesResponseBodyItemsDBInstance {
	s.DBInstanceStatus = &v
	return s
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) SetEngine(v string) *DescribeDBInstancesResponseBodyItemsDBInstance {
	s.Engine = &v
	return s
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) SetEngineVersion(v string) *DescribeDBInstancesResponseBodyItemsDBInstance {
	s.EngineVersion = &v
	return s
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) SetExpireTime(v string) *DescribeDBInstancesResponseBodyItemsDBInstance {
	s.ExpireTime = &v
	return s
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) SetInstanceDeployType(v string) *DescribeDBInstancesResponseBodyItemsDBInstance {
	s.InstanceDeployType = &v
	return s
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) SetInstanceNetworkType(v string) *DescribeDBInstancesResponseBodyItemsDBInstance {
	s.InstanceNetworkType = &v
	return s
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) SetLockMode(v string) *DescribeDBInstancesResponseBodyItemsDBInstance {
	s.LockMode = &v
	return s
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) SetLockReason(v string) *DescribeDBInstancesResponseBodyItemsDBInstance {
	s.LockReason = &v
	return s
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) SetMasterNodeNum(v int32) *DescribeDBInstancesResponseBodyItemsDBInstance {
	s.MasterNodeNum = &v
	return s
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) SetPayType(v string) *DescribeDBInstancesResponseBodyItemsDBInstance {
	s.PayType = &v
	return s
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) SetProdType(v string) *DescribeDBInstancesResponseBodyItemsDBInstance {
	s.ProdType = &v
	return s
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) SetRegionId(v string) *DescribeDBInstancesResponseBodyItemsDBInstance {
	s.RegionId = &v
	return s
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) SetResourceGroupId(v string) *DescribeDBInstancesResponseBodyItemsDBInstance {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) SetSegNodeNum(v string) *DescribeDBInstancesResponseBodyItemsDBInstance {
	s.SegNodeNum = &v
	return s
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) SetServerlessMode(v string) *DescribeDBInstancesResponseBodyItemsDBInstance {
	s.ServerlessMode = &v
	return s
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) SetStorageSize(v string) *DescribeDBInstancesResponseBodyItemsDBInstance {
	s.StorageSize = &v
	return s
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) SetStorageType(v string) *DescribeDBInstancesResponseBodyItemsDBInstance {
	s.StorageType = &v
	return s
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) SetTags(v *DescribeDBInstancesResponseBodyItemsDBInstanceTags) *DescribeDBInstancesResponseBodyItemsDBInstance {
	s.Tags = v
	return s
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) SetVSwitchId(v string) *DescribeDBInstancesResponseBodyItemsDBInstance {
	s.VSwitchId = &v
	return s
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) SetVpcId(v string) *DescribeDBInstancesResponseBodyItemsDBInstance {
	s.VpcId = &v
	return s
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) SetZoneId(v string) *DescribeDBInstancesResponseBodyItemsDBInstance {
	s.ZoneId = &v
	return s
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) Validate() error {
	return dara.Validate(s)
}

type DescribeDBInstancesResponseBodyItemsDBInstanceTags struct {
	Tag []*DescribeDBInstancesResponseBodyItemsDBInstanceTagsTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s DescribeDBInstancesResponseBodyItemsDBInstanceTags) String() string {
	return dara.Prettify(s)
}

func (s DescribeDBInstancesResponseBodyItemsDBInstanceTags) GoString() string {
	return s.String()
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstanceTags) GetTag() []*DescribeDBInstancesResponseBodyItemsDBInstanceTagsTag {
	return s.Tag
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstanceTags) SetTag(v []*DescribeDBInstancesResponseBodyItemsDBInstanceTagsTag) *DescribeDBInstancesResponseBodyItemsDBInstanceTags {
	s.Tag = v
	return s
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstanceTags) Validate() error {
	return dara.Validate(s)
}

type DescribeDBInstancesResponseBodyItemsDBInstanceTagsTag struct {
	// The key of tag N.
	//
	// example:
	//
	// test-key
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The value of tag N.
	//
	// example:
	//
	// test-value
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeDBInstancesResponseBodyItemsDBInstanceTagsTag) String() string {
	return dara.Prettify(s)
}

func (s DescribeDBInstancesResponseBodyItemsDBInstanceTagsTag) GoString() string {
	return s.String()
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstanceTagsTag) GetKey() *string {
	return s.Key
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstanceTagsTag) GetValue() *string {
	return s.Value
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstanceTagsTag) SetKey(v string) *DescribeDBInstancesResponseBodyItemsDBInstanceTagsTag {
	s.Key = &v
	return s
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstanceTagsTag) SetValue(v string) *DescribeDBInstancesResponseBodyItemsDBInstanceTagsTag {
	s.Value = &v
	return s
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstanceTagsTag) Validate() error {
	return dara.Validate(s)
}

type iDescribeDBInstancesResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DescribeDBInstancesResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DescribeDBInstancesResponse
	GetStatusCode() *int32
	SetBody(v *DescribeDBInstancesResponseBody) *DescribeDBInstancesResponse
	GetBody() *DescribeDBInstancesResponseBody
}

type DescribeDBInstancesResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeDBInstancesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeDBInstancesResponse) String() string {
	return dara.Prettify(s)
}

func (s DescribeDBInstancesResponse) GoString() string {
	return s.String()
}

func (s *DescribeDBInstancesResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DescribeDBInstancesResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DescribeDBInstancesResponse) GetBody() *DescribeDBInstancesResponseBody {
	return s.Body
}

func (s *DescribeDBInstancesResponse) SetHeaders(v map[string]*string) *DescribeDBInstancesResponse {
	s.Headers = v
	return s
}

func (s *DescribeDBInstancesResponse) SetStatusCode(v int32) *DescribeDBInstancesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDBInstancesResponse) SetBody(v *DescribeDBInstancesResponseBody) *DescribeDBInstancesResponse {
	s.Body = v
	return s
}

func (s *DescribeDBInstancesResponse) Validate() error {
	return dara.Validate(s)
}

type iDescribeDBResourceGroupRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *DescribeDBResourceGroupRequest
	GetDBInstanceId() *string
	SetOwnerId(v int64) *DescribeDBResourceGroupRequest
	GetOwnerId() *int64
	SetResourceGroupName(v string) *DescribeDBResourceGroupRequest
	GetResourceGroupName() *string
}

type DescribeDBResourceGroupRequest struct {
	// The instance ID.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The name of the resource group.
	//
	// >  If you specify this parameter, the information about the specified resource group is returned. If you do not specify this parameter, the information about all resource groups is returned.
	//
	// example:
	//
	// testgroup
	ResourceGroupName *string `json:"ResourceGroupName,omitempty" xml:"ResourceGroupName,omitempty"`
}

func (s DescribeDBResourceGroupRequest) String() string {
	return dara.Prettify(s)
}

func (s DescribeDBResourceGroupRequest) GoString() string {
	return s.String()
}

func (s *DescribeDBResourceGroupRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *DescribeDBResourceGroupRequest) GetOwnerId() *int64 {
	return s.OwnerId
}

func (s *DescribeDBResourceGroupRequest) GetResourceGroupName() *string {
	return s.ResourceGroupName
}

func (s *DescribeDBResourceGroupRequest) SetDBInstanceId(v string) *DescribeDBResourceGroupRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDBResourceGroupRequest) SetOwnerId(v int64) *DescribeDBResourceGroupRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeDBResourceGroupRequest) SetResourceGroupName(v string) *DescribeDBResourceGroupRequest {
	s.ResourceGroupName = &v
	return s
}

func (s *DescribeDBResourceGroupRequest) Validate() error {
	return dara.Validate(s)
}

type iDescribeDBResourceGroupResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetRequestId(v string) *DescribeDBResourceGroupResponseBody
	GetRequestId() *string
	SetResourceGroupItems(v *DescribeDBResourceGroupResponseBodyResourceGroupItems) *DescribeDBResourceGroupResponseBody
	GetResourceGroupItems() *DescribeDBResourceGroupResponseBodyResourceGroupItems
}

type DescribeDBResourceGroupResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The queried resource group information.
	ResourceGroupItems *DescribeDBResourceGroupResponseBodyResourceGroupItems `json:"ResourceGroupItems,omitempty" xml:"ResourceGroupItems,omitempty" type:"Struct"`
}

func (s DescribeDBResourceGroupResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DescribeDBResourceGroupResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDBResourceGroupResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DescribeDBResourceGroupResponseBody) GetResourceGroupItems() *DescribeDBResourceGroupResponseBodyResourceGroupItems {
	return s.ResourceGroupItems
}

func (s *DescribeDBResourceGroupResponseBody) SetRequestId(v string) *DescribeDBResourceGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDBResourceGroupResponseBody) SetResourceGroupItems(v *DescribeDBResourceGroupResponseBodyResourceGroupItems) *DescribeDBResourceGroupResponseBody {
	s.ResourceGroupItems = v
	return s
}

func (s *DescribeDBResourceGroupResponseBody) Validate() error {
	return dara.Validate(s)
}

type DescribeDBResourceGroupResponseBodyResourceGroupItems struct {
	ResourceGroupItem []*DescribeDBResourceGroupResponseBodyResourceGroupItemsResourceGroupItem `json:"ResourceGroupItem,omitempty" xml:"ResourceGroupItem,omitempty" type:"Repeated"`
}

func (s DescribeDBResourceGroupResponseBodyResourceGroupItems) String() string {
	return dara.Prettify(s)
}

func (s DescribeDBResourceGroupResponseBodyResourceGroupItems) GoString() string {
	return s.String()
}

func (s *DescribeDBResourceGroupResponseBodyResourceGroupItems) GetResourceGroupItem() []*DescribeDBResourceGroupResponseBodyResourceGroupItemsResourceGroupItem {
	return s.ResourceGroupItem
}

func (s *DescribeDBResourceGroupResponseBodyResourceGroupItems) SetResourceGroupItem(v []*DescribeDBResourceGroupResponseBodyResourceGroupItemsResourceGroupItem) *DescribeDBResourceGroupResponseBodyResourceGroupItems {
	s.ResourceGroupItem = v
	return s
}

func (s *DescribeDBResourceGroupResponseBodyResourceGroupItems) Validate() error {
	return dara.Validate(s)
}

type DescribeDBResourceGroupResponseBodyResourceGroupItemsResourceGroupItem struct {
	// The configurations of the resource group.
	//
	// >
	//
	// 	- CpuRateLimit: the percentage of CPU resources that are available for the resource group. Unit: %.
	//
	// 	- MemoryLimit: the percentage of memory resources that are available for the resource group. Unit: %.
	//
	// 	- MemorySharedQuota: the percentage of memory resources shared among transactions that are submitted to the resource group. Unit: %. Default value: 80.
	//
	// 	- MemorySpillRatio: the memory spill ratio for memory-intensive transactions. When the memory that is used by memory-intensive transactions reaches this value, data is spilled to disks. Unit: %. Default value: 0.
	//
	// 	- Concurrency: the maximum number of concurrent transactions or parallel queries that are allowed for a resource group. Default value: 20.
	//
	// example:
	//
	// {"CpuRateLimit":"10","MemoryLimit":"12","MemorySharedQuota":"20","MemorySpillRatio":"75","Concurrency":"3"}
	ResourceGroupConfig *string `json:"ResourceGroupConfig,omitempty" xml:"ResourceGroupConfig,omitempty"`
	// The name of the resource group.
	//
	// example:
	//
	// testgroup
	ResourceGroupName *string `json:"ResourceGroupName,omitempty" xml:"ResourceGroupName,omitempty"`
	// The roles.
	RoleList *DescribeDBResourceGroupResponseBodyResourceGroupItemsResourceGroupItemRoleList `json:"RoleList,omitempty" xml:"RoleList,omitempty" type:"Struct"`
}

func (s DescribeDBResourceGroupResponseBodyResourceGroupItemsResourceGroupItem) String() string {
	return dara.Prettify(s)
}

func (s DescribeDBResourceGroupResponseBodyResourceGroupItemsResourceGroupItem) GoString() string {
	return s.String()
}

func (s *DescribeDBResourceGroupResponseBodyResourceGroupItemsResourceGroupItem) GetResourceGroupConfig() *string {
	return s.ResourceGroupConfig
}

func (s *DescribeDBResourceGroupResponseBodyResourceGroupItemsResourceGroupItem) GetResourceGroupName() *string {
	return s.ResourceGroupName
}

func (s *DescribeDBResourceGroupResponseBodyResourceGroupItemsResourceGroupItem) GetRoleList() *DescribeDBResourceGroupResponseBodyResourceGroupItemsResourceGroupItemRoleList {
	return s.RoleList
}

func (s *DescribeDBResourceGroupResponseBodyResourceGroupItemsResourceGroupItem) SetResourceGroupConfig(v string) *DescribeDBResourceGroupResponseBodyResourceGroupItemsResourceGroupItem {
	s.ResourceGroupConfig = &v
	return s
}

func (s *DescribeDBResourceGroupResponseBodyResourceGroupItemsResourceGroupItem) SetResourceGroupName(v string) *DescribeDBResourceGroupResponseBodyResourceGroupItemsResourceGroupItem {
	s.ResourceGroupName = &v
	return s
}

func (s *DescribeDBResourceGroupResponseBodyResourceGroupItemsResourceGroupItem) SetRoleList(v *DescribeDBResourceGroupResponseBodyResourceGroupItemsResourceGroupItemRoleList) *DescribeDBResourceGroupResponseBodyResourceGroupItemsResourceGroupItem {
	s.RoleList = v
	return s
}

func (s *DescribeDBResourceGroupResponseBodyResourceGroupItemsResourceGroupItem) Validate() error {
	return dara.Validate(s)
}

type DescribeDBResourceGroupResponseBodyResourceGroupItemsResourceGroupItemRoleList struct {
	Role []*string `json:"Role,omitempty" xml:"Role,omitempty" type:"Repeated"`
}

func (s DescribeDBResourceGroupResponseBodyResourceGroupItemsResourceGroupItemRoleList) String() string {
	return dara.Prettify(s)
}

func (s DescribeDBResourceGroupResponseBodyResourceGroupItemsResourceGroupItemRoleList) GoString() string {
	return s.String()
}

func (s *DescribeDBResourceGroupResponseBodyResourceGroupItemsResourceGroupItemRoleList) GetRole() []*string {
	return s.Role
}

func (s *DescribeDBResourceGroupResponseBodyResourceGroupItemsResourceGroupItemRoleList) SetRole(v []*string) *DescribeDBResourceGroupResponseBodyResourceGroupItemsResourceGroupItemRoleList {
	s.Role = v
	return s
}

func (s *DescribeDBResourceGroupResponseBodyResourceGroupItemsResourceGroupItemRoleList) Validate() error {
	return dara.Validate(s)
}

type iDescribeDBResourceGroupResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DescribeDBResourceGroupResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DescribeDBResourceGroupResponse
	GetStatusCode() *int32
	SetBody(v *DescribeDBResourceGroupResponseBody) *DescribeDBResourceGroupResponse
	GetBody() *DescribeDBResourceGroupResponseBody
}

type DescribeDBResourceGroupResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeDBResourceGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeDBResourceGroupResponse) String() string {
	return dara.Prettify(s)
}

func (s DescribeDBResourceGroupResponse) GoString() string {
	return s.String()
}

func (s *DescribeDBResourceGroupResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DescribeDBResourceGroupResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DescribeDBResourceGroupResponse) GetBody() *DescribeDBResourceGroupResponseBody {
	return s.Body
}

func (s *DescribeDBResourceGroupResponse) SetHeaders(v map[string]*string) *DescribeDBResourceGroupResponse {
	s.Headers = v
	return s
}

func (s *DescribeDBResourceGroupResponse) SetStatusCode(v int32) *DescribeDBResourceGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDBResourceGroupResponse) SetBody(v *DescribeDBResourceGroupResponseBody) *DescribeDBResourceGroupResponse {
	s.Body = v
	return s
}

func (s *DescribeDBResourceGroupResponse) Validate() error {
	return dara.Validate(s)
}

type iDescribeDBResourceManagementModeRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *DescribeDBResourceManagementModeRequest
	GetDBInstanceId() *string
	SetOwnerId(v int64) *DescribeDBResourceManagementModeRequest
	GetOwnerId() *int64
}

type DescribeDBResourceManagementModeRequest struct {
	// The instance ID.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s DescribeDBResourceManagementModeRequest) String() string {
	return dara.Prettify(s)
}

func (s DescribeDBResourceManagementModeRequest) GoString() string {
	return s.String()
}

func (s *DescribeDBResourceManagementModeRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *DescribeDBResourceManagementModeRequest) GetOwnerId() *int64 {
	return s.OwnerId
}

func (s *DescribeDBResourceManagementModeRequest) SetDBInstanceId(v string) *DescribeDBResourceManagementModeRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDBResourceManagementModeRequest) SetOwnerId(v int64) *DescribeDBResourceManagementModeRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeDBResourceManagementModeRequest) Validate() error {
	return dara.Validate(s)
}

type iDescribeDBResourceManagementModeResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetRequestId(v string) *DescribeDBResourceManagementModeResponseBody
	GetRequestId() *string
	SetResourceManagementMode(v string) *DescribeDBResourceManagementModeResponseBody
	GetResourceManagementMode() *string
}

type DescribeDBResourceManagementModeResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The resource management mode. Valid values:
	//
	// 	- resourceGroup: resource group management.
	//
	// 	- resourceQueue: resource queue management.
	//
	// example:
	//
	// resourceGroup
	ResourceManagementMode *string `json:"ResourceManagementMode,omitempty" xml:"ResourceManagementMode,omitempty"`
}

func (s DescribeDBResourceManagementModeResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DescribeDBResourceManagementModeResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDBResourceManagementModeResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DescribeDBResourceManagementModeResponseBody) GetResourceManagementMode() *string {
	return s.ResourceManagementMode
}

func (s *DescribeDBResourceManagementModeResponseBody) SetRequestId(v string) *DescribeDBResourceManagementModeResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDBResourceManagementModeResponseBody) SetResourceManagementMode(v string) *DescribeDBResourceManagementModeResponseBody {
	s.ResourceManagementMode = &v
	return s
}

func (s *DescribeDBResourceManagementModeResponseBody) Validate() error {
	return dara.Validate(s)
}

type iDescribeDBResourceManagementModeResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DescribeDBResourceManagementModeResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DescribeDBResourceManagementModeResponse
	GetStatusCode() *int32
	SetBody(v *DescribeDBResourceManagementModeResponseBody) *DescribeDBResourceManagementModeResponse
	GetBody() *DescribeDBResourceManagementModeResponseBody
}

type DescribeDBResourceManagementModeResponse struct {
	Headers    map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeDBResourceManagementModeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeDBResourceManagementModeResponse) String() string {
	return dara.Prettify(s)
}

func (s DescribeDBResourceManagementModeResponse) GoString() string {
	return s.String()
}

func (s *DescribeDBResourceManagementModeResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DescribeDBResourceManagementModeResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DescribeDBResourceManagementModeResponse) GetBody() *DescribeDBResourceManagementModeResponseBody {
	return s.Body
}

func (s *DescribeDBResourceManagementModeResponse) SetHeaders(v map[string]*string) *DescribeDBResourceManagementModeResponse {
	s.Headers = v
	return s
}

func (s *DescribeDBResourceManagementModeResponse) SetStatusCode(v int32) *DescribeDBResourceManagementModeResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDBResourceManagementModeResponse) SetBody(v *DescribeDBResourceManagementModeResponseBody) *DescribeDBResourceManagementModeResponse {
	s.Body = v
	return s
}

func (s *DescribeDBResourceManagementModeResponse) Validate() error {
	return dara.Validate(s)
}

type iDescribeDBVersionInfosRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceMode(v string) *DescribeDBVersionInfosRequest
	GetDBInstanceMode() *string
	SetDBVersion(v string) *DescribeDBVersionInfosRequest
	GetDBVersion() *string
	SetOwnerId(v int64) *DescribeDBVersionInfosRequest
	GetOwnerId() *int64
	SetRegionId(v string) *DescribeDBVersionInfosRequest
	GetRegionId() *string
	SetResourceGroupId(v string) *DescribeDBVersionInfosRequest
	GetResourceGroupId() *string
}

type DescribeDBVersionInfosRequest struct {
	// The resource type of the instance. Valid values:
	//
	// 	- **StorageElastic**: elastic storage mode.
	//
	// 	- **Serverless**: Serverless mode.
	//
	// example:
	//
	// StorageElastic
	DBInstanceMode *string `json:"DBInstanceMode,omitempty" xml:"DBInstanceMode,omitempty"`
	// The minor version number that does not include the prefix.
	//
	// example:
	//
	// 6.3.10.20
	DBVersion *string `json:"DBVersion,omitempty" xml:"DBVersion,omitempty"`
	OwnerId   *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The region ID of the instance.
	//
	// >  You can call the [DescribeRegions](https://help.aliyun.com/document_detail/86912.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the resource group to which the instance belongs. For information about how to obtain the ID of a resource group, see [View basic information of a resource group](https://help.aliyun.com/document_detail/151181.html).
	//
	// example:
	//
	// rg-bp67acfmxazb4p****
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
}

func (s DescribeDBVersionInfosRequest) String() string {
	return dara.Prettify(s)
}

func (s DescribeDBVersionInfosRequest) GoString() string {
	return s.String()
}

func (s *DescribeDBVersionInfosRequest) GetDBInstanceMode() *string {
	return s.DBInstanceMode
}

func (s *DescribeDBVersionInfosRequest) GetDBVersion() *string {
	return s.DBVersion
}

func (s *DescribeDBVersionInfosRequest) GetOwnerId() *int64 {
	return s.OwnerId
}

func (s *DescribeDBVersionInfosRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *DescribeDBVersionInfosRequest) GetResourceGroupId() *string {
	return s.ResourceGroupId
}

func (s *DescribeDBVersionInfosRequest) SetDBInstanceMode(v string) *DescribeDBVersionInfosRequest {
	s.DBInstanceMode = &v
	return s
}

func (s *DescribeDBVersionInfosRequest) SetDBVersion(v string) *DescribeDBVersionInfosRequest {
	s.DBVersion = &v
	return s
}

func (s *DescribeDBVersionInfosRequest) SetOwnerId(v int64) *DescribeDBVersionInfosRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeDBVersionInfosRequest) SetRegionId(v string) *DescribeDBVersionInfosRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeDBVersionInfosRequest) SetResourceGroupId(v string) *DescribeDBVersionInfosRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeDBVersionInfosRequest) Validate() error {
	return dara.Validate(s)
}

type iDescribeDBVersionInfosResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetRequestId(v string) *DescribeDBVersionInfosResponseBody
	GetRequestId() *string
	SetVersionDetails(v *DescribeDBVersionInfosResponseBodyVersionDetails) *DescribeDBVersionInfosResponseBody
	GetVersionDetails() *DescribeDBVersionInfosResponseBodyVersionDetails
}

type DescribeDBVersionInfosResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The queried minor versions.
	VersionDetails *DescribeDBVersionInfosResponseBodyVersionDetails `json:"VersionDetails,omitempty" xml:"VersionDetails,omitempty" type:"Struct"`
}

func (s DescribeDBVersionInfosResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DescribeDBVersionInfosResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDBVersionInfosResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DescribeDBVersionInfosResponseBody) GetVersionDetails() *DescribeDBVersionInfosResponseBodyVersionDetails {
	return s.VersionDetails
}

func (s *DescribeDBVersionInfosResponseBody) SetRequestId(v string) *DescribeDBVersionInfosResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDBVersionInfosResponseBody) SetVersionDetails(v *DescribeDBVersionInfosResponseBodyVersionDetails) *DescribeDBVersionInfosResponseBody {
	s.VersionDetails = v
	return s
}

func (s *DescribeDBVersionInfosResponseBody) Validate() error {
	return dara.Validate(s)
}

type DescribeDBVersionInfosResponseBodyVersionDetails struct {
	// The queried minor version information about the instance in Serverless mode.
	//
	// example:
	//
	// "Serverless": [
	//
	//                 {
	//
	//                     "engineVersion": "6.0",
	//
	//                     "versionInfos": [
	//
	//                         {
	//
	//                             "kernelVersion": "v2.0.0.5",
	//
	//                             "releaseDate": "2023-05-28T07:48Z",
	//
	//                             "expirationDate": "2026-05-28T07:48Z"
	//
	//                         },
	//
	//                         {
	//
	//                             "kernelVersion": "v2.0.0.1",
	//
	//                             "releaseDate": "2023-03-27T12:44Z",
	//
	//                             "expirationDate": "2026-03-27T12:44Z"
	//
	//                         },
	//
	//                         {
	//
	//                             "kernelVersion": "v1.0.5.1",
	//
	//                             "releaseDate": "2023-02-22T11:39Z",
	//
	//                             "expirationDate": "2026-02-22T11:39Z"
	//
	//                         }
	//
	//                     ]
	//
	//                 }
	//
	// ]
	Serverless interface{} `json:"Serverless,omitempty" xml:"Serverless,omitempty"`
	// The queried minor version information about the instance in elastic storage mode.
	//
	// example:
	//
	// "StorageElasic": [
	//
	//                 {
	//
	//                     "engineVersion": "6.0",
	//
	//                     "versionInfos": [
	//
	//                         {
	//
	//                             "kernelVersion": "v6.3.11.2",
	//
	//                             "releaseDate": "2023-08-17T09:14Z",
	//
	//                             "expirationDate": "2026-08-17T09:14Z"
	//
	//                         }
	//
	//           },
	//
	//                 {
	//
	//                     "engineVersion": "7.0",
	//
	//                     "versionInfos": [
	//
	//                         {
	//
	//                             "kernelVersion": "v7.0.2.0",
	//
	//                             "releaseDate": "2023-08-09T06:47Z",
	//
	//                             "expirationDate": "2026-08-09T06:47Z"
	//
	//                         },
	//
	//                         {
	//
	//                             "kernelVersion": "v7.0.1.8",
	//
	//                             "releaseDate": "2023-05-25T06:56Z",
	//
	//                             "expirationDate": "2026-05-25T06:56Z"
	//
	//                         }
	//
	//                     ]
	//
	//                 }
	//
	// ]
	StorageElastic interface{} `json:"StorageElastic,omitempty" xml:"StorageElastic,omitempty"`
}

func (s DescribeDBVersionInfosResponseBodyVersionDetails) String() string {
	return dara.Prettify(s)
}

func (s DescribeDBVersionInfosResponseBodyVersionDetails) GoString() string {
	return s.String()
}

func (s *DescribeDBVersionInfosResponseBodyVersionDetails) GetServerless() interface{} {
	return s.Serverless
}

func (s *DescribeDBVersionInfosResponseBodyVersionDetails) GetStorageElastic() interface{} {
	return s.StorageElastic
}

func (s *DescribeDBVersionInfosResponseBodyVersionDetails) SetServerless(v interface{}) *DescribeDBVersionInfosResponseBodyVersionDetails {
	s.Serverless = v
	return s
}

func (s *DescribeDBVersionInfosResponseBodyVersionDetails) SetStorageElastic(v interface{}) *DescribeDBVersionInfosResponseBodyVersionDetails {
	s.StorageElastic = v
	return s
}

func (s *DescribeDBVersionInfosResponseBodyVersionDetails) Validate() error {
	return dara.Validate(s)
}

type iDescribeDBVersionInfosResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DescribeDBVersionInfosResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DescribeDBVersionInfosResponse
	GetStatusCode() *int32
	SetBody(v *DescribeDBVersionInfosResponseBody) *DescribeDBVersionInfosResponse
	GetBody() *DescribeDBVersionInfosResponseBody
}

type DescribeDBVersionInfosResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeDBVersionInfosResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeDBVersionInfosResponse) String() string {
	return dara.Prettify(s)
}

func (s DescribeDBVersionInfosResponse) GoString() string {
	return s.String()
}

func (s *DescribeDBVersionInfosResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DescribeDBVersionInfosResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DescribeDBVersionInfosResponse) GetBody() *DescribeDBVersionInfosResponseBody {
	return s.Body
}

func (s *DescribeDBVersionInfosResponse) SetHeaders(v map[string]*string) *DescribeDBVersionInfosResponse {
	s.Headers = v
	return s
}

func (s *DescribeDBVersionInfosResponse) SetStatusCode(v int32) *DescribeDBVersionInfosResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDBVersionInfosResponse) SetBody(v *DescribeDBVersionInfosResponseBody) *DescribeDBVersionInfosResponse {
	s.Body = v
	return s
}

func (s *DescribeDBVersionInfosResponse) Validate() error {
	return dara.Validate(s)
}

type iDescribeDataBackupsRequest interface {
	dara.Model
	String() string
	GoString() string
	SetBackupId(v string) *DescribeDataBackupsRequest
	GetBackupId() *string
	SetBackupMode(v string) *DescribeDataBackupsRequest
	GetBackupMode() *string
	SetBackupStatus(v string) *DescribeDataBackupsRequest
	GetBackupStatus() *string
	SetDBInstanceId(v string) *DescribeDataBackupsRequest
	GetDBInstanceId() *string
	SetDataType(v string) *DescribeDataBackupsRequest
	GetDataType() *string
	SetEndTime(v string) *DescribeDataBackupsRequest
	GetEndTime() *string
	SetPageNumber(v int32) *DescribeDataBackupsRequest
	GetPageNumber() *int32
	SetPageSize(v int32) *DescribeDataBackupsRequest
	GetPageSize() *int32
	SetStartTime(v string) *DescribeDataBackupsRequest
	GetStartTime() *string
}

type DescribeDataBackupsRequest struct {
	// The ID of the backup set. If you specify BackupId, the details of the backup set are returned.
	//
	// > You can call the [DescribeDataBackups](https://help.aliyun.com/document_detail/210093.html) operation to query the information about all backup sets of an instance, including backup set IDs.
	//
	// example:
	//
	// 327329803
	BackupId *string `json:"BackupId,omitempty" xml:"BackupId,omitempty"`
	// The backup mode. Valid values:
	//
	// 	- Automated
	//
	// 	- Manual
	//
	// If you do not specify this parameter, all backup sets are returned.
	//
	// example:
	//
	// Automated
	BackupMode *string `json:"BackupMode,omitempty" xml:"BackupMode,omitempty"`
	// The state of the backup set. Valid values:
	//
	// 	- Success
	//
	// 	- Failed
	//
	// If you do not specify this parameter, all backup sets are returned.
	//
	// example:
	//
	// Success
	BackupStatus *string `json:"BackupStatus,omitempty" xml:"BackupStatus,omitempty"`
	// The instance ID.
	//
	// > You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp***************
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The backup type. Valid values:
	//
	// 	- **DATA**: full backup.
	//
	// 	- **RESTOREPOI**: point-in-time recovery backup.
	//
	// If you do not specify this parameter, the backup sets of full backup are returned.
	//
	// example:
	//
	// DATA
	DataType *string `json:"DataType,omitempty" xml:"DataType,omitempty"`
	// The end of the time range to query. The end time must be later than the start time. Specify the time in the yyyy-MM-ddTHH:mmZ format. The time must be in UTC.
	//
	// example:
	//
	// 2011-06-01T16:00Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The page number. Pages start from page 1. Default value: 1
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. Valid values:
	//
	// 	- 30
	//
	// 	- 50
	//
	// 	- 100
	//
	// Default value: 30.
	//
	// example:
	//
	// 30
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The beginning of the time range to query. Specify the time in the yyyy-MM-ddTHH:mmZ format. The time must be in UTC.
	//
	// example:
	//
	// 2011-06-01T15:00Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeDataBackupsRequest) String() string {
	return dara.Prettify(s)
}

func (s DescribeDataBackupsRequest) GoString() string {
	return s.String()
}

func (s *DescribeDataBackupsRequest) GetBackupId() *string {
	return s.BackupId
}

func (s *DescribeDataBackupsRequest) GetBackupMode() *string {
	return s.BackupMode
}

func (s *DescribeDataBackupsRequest) GetBackupStatus() *string {
	return s.BackupStatus
}

func (s *DescribeDataBackupsRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *DescribeDataBackupsRequest) GetDataType() *string {
	return s.DataType
}

func (s *DescribeDataBackupsRequest) GetEndTime() *string {
	return s.EndTime
}

func (s *DescribeDataBackupsRequest) GetPageNumber() *int32 {
	return s.PageNumber
}

func (s *DescribeDataBackupsRequest) GetPageSize() *int32 {
	return s.PageSize
}

func (s *DescribeDataBackupsRequest) GetStartTime() *string {
	return s.StartTime
}

func (s *DescribeDataBackupsRequest) SetBackupId(v string) *DescribeDataBackupsRequest {
	s.BackupId = &v
	return s
}

func (s *DescribeDataBackupsRequest) SetBackupMode(v string) *DescribeDataBackupsRequest {
	s.BackupMode = &v
	return s
}

func (s *DescribeDataBackupsRequest) SetBackupStatus(v string) *DescribeDataBackupsRequest {
	s.BackupStatus = &v
	return s
}

func (s *DescribeDataBackupsRequest) SetDBInstanceId(v string) *DescribeDataBackupsRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDataBackupsRequest) SetDataType(v string) *DescribeDataBackupsRequest {
	s.DataType = &v
	return s
}

func (s *DescribeDataBackupsRequest) SetEndTime(v string) *DescribeDataBackupsRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeDataBackupsRequest) SetPageNumber(v int32) *DescribeDataBackupsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeDataBackupsRequest) SetPageSize(v int32) *DescribeDataBackupsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeDataBackupsRequest) SetStartTime(v string) *DescribeDataBackupsRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeDataBackupsRequest) Validate() error {
	return dara.Validate(s)
}

type iDescribeDataBackupsResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetItems(v []*DescribeDataBackupsResponseBodyItems) *DescribeDataBackupsResponseBody
	GetItems() []*DescribeDataBackupsResponseBodyItems
	SetPageNumber(v int32) *DescribeDataBackupsResponseBody
	GetPageNumber() *int32
	SetPageSize(v int32) *DescribeDataBackupsResponseBody
	GetPageSize() *int32
	SetRequestId(v string) *DescribeDataBackupsResponseBody
	GetRequestId() *string
	SetTotalBackupSize(v int64) *DescribeDataBackupsResponseBody
	GetTotalBackupSize() *int64
	SetTotalCount(v int32) *DescribeDataBackupsResponseBody
	GetTotalCount() *int32
}

type DescribeDataBackupsResponseBody struct {
	// The instance ID.
	Items []*DescribeDataBackupsResponseBodyItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Repeated"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 1
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 3E387971-33A5-5019-AD7F-DC**********
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total backup set size. Unit: Byte.
	//
	// example:
	//
	// 1111111111
	TotalBackupSize *int64 `json:"TotalBackupSize,omitempty" xml:"TotalBackupSize,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 1
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeDataBackupsResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DescribeDataBackupsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDataBackupsResponseBody) GetItems() []*DescribeDataBackupsResponseBodyItems {
	return s.Items
}

func (s *DescribeDataBackupsResponseBody) GetPageNumber() *int32 {
	return s.PageNumber
}

func (s *DescribeDataBackupsResponseBody) GetPageSize() *int32 {
	return s.PageSize
}

func (s *DescribeDataBackupsResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DescribeDataBackupsResponseBody) GetTotalBackupSize() *int64 {
	return s.TotalBackupSize
}

func (s *DescribeDataBackupsResponseBody) GetTotalCount() *int32 {
	return s.TotalCount
}

func (s *DescribeDataBackupsResponseBody) SetItems(v []*DescribeDataBackupsResponseBodyItems) *DescribeDataBackupsResponseBody {
	s.Items = v
	return s
}

func (s *DescribeDataBackupsResponseBody) SetPageNumber(v int32) *DescribeDataBackupsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeDataBackupsResponseBody) SetPageSize(v int32) *DescribeDataBackupsResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeDataBackupsResponseBody) SetRequestId(v string) *DescribeDataBackupsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDataBackupsResponseBody) SetTotalBackupSize(v int64) *DescribeDataBackupsResponseBody {
	s.TotalBackupSize = &v
	return s
}

func (s *DescribeDataBackupsResponseBody) SetTotalCount(v int32) *DescribeDataBackupsResponseBody {
	s.TotalCount = &v
	return s
}

func (s *DescribeDataBackupsResponseBody) Validate() error {
	return dara.Validate(s)
}

type DescribeDataBackupsResponseBodyItems struct {
	// The UTC time when the backup ended. The time is in the yyyy-MM-ddTHH:mmZ format. The time is displayed in UTC.
	//
	// example:
	//
	// 2021-12-22T12:01:43Z
	BackupEndTime *string `json:"BackupEndTime,omitempty" xml:"BackupEndTime,omitempty"`
	// The local time when the backup ended. The time is in the yyyy-MM-dd HH:mm:ss format. The time is your local time.
	//
	// example:
	//
	// 2021-12-22 20:00:25
	BackupEndTimeLocal *string `json:"BackupEndTimeLocal,omitempty" xml:"BackupEndTimeLocal,omitempty"`
	// The method that is used to generate the backup set. Valid values:
	//
	// 	- **Logical**: logical backup
	//
	// 	- **Physical**: physical backup
	//
	// 	- **Snapshot**: snapshot backup
	//
	// example:
	//
	// Physical
	BackupMethod *string `json:"BackupMethod,omitempty" xml:"BackupMethod,omitempty"`
	// The backup mode.
	//
	// Valid values for full backup:
	//
	// 	- Automated: automatic backup
	//
	// 	- Manual: manual backup
	//
	// Valid values for point-in-time backup:
	//
	// 	- Automated: point-in-time backup after full backup
	//
	// 	- Manual: manual point-in-time backup
	//
	// 	- Period: point-in-time backup that is triggered by a backup policy
	//
	// example:
	//
	// Automated
	BackupMode *string `json:"BackupMode,omitempty" xml:"BackupMode,omitempty"`
	// The ID of the backup set.
	//
	// example:
	//
	// 1111111111
	BackupSetId *string `json:"BackupSetId,omitempty" xml:"BackupSetId,omitempty"`
	// The size of the backup file. Unit: bytes.
	//
	// example:
	//
	// 2167808
	BackupSize *int64 `json:"BackupSize,omitempty" xml:"BackupSize,omitempty"`
	// The UTC time when the backup started. The time is in the yyyy-MM-ddTHH:mmZ format. The time is displayed in UTC.
	//
	// example:
	//
	// 2021-12-22T12:00:25Z
	BackupStartTime *string `json:"BackupStartTime,omitempty" xml:"BackupStartTime,omitempty"`
	// The local time when the backup started. The time is in the yyyy-MM-dd HH:mm:ss format. The time is your local time.
	//
	// example:
	//
	// 2011-05-30 03:29:00
	BackupStartTimeLocal *string `json:"BackupStartTimeLocal,omitempty" xml:"BackupStartTimeLocal,omitempty"`
	// The status of the backup set. Valid values:
	//
	// 	- Success
	//
	// 	- Failure
	//
	// example:
	//
	// Success
	BackupStatus *string `json:"BackupStatus,omitempty" xml:"BackupStatus,omitempty"`
	// The name of a point-in-time backup set or the full backup set.
	//
	// example:
	//
	// adbpgbackup_555*****_20211222200019
	BaksetName *string `json:"BaksetName,omitempty" xml:"BaksetName,omitempty"`
	// 	- For full backup, this parameter indicates the point in time at which the data in the data backup file is consistent.
	//
	// 	- For point-in-time backup, this parameter indicates that the returned point in time is a timestamp.
	//
	// example:
	//
	// 1576506856
	ConsistentTime *int64 `json:"ConsistentTime,omitempty" xml:"ConsistentTime,omitempty"`
	// The ID of the instance.
	//
	// example:
	//
	// gp-bp**************-master
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The type of the backup. Valid values:
	//
	// 	- DATA: full backup
	//
	// 	- RESTOREPOI: point-in-time backup
	//
	// example:
	//
	// DATA
	DataType *string `json:"DataType,omitempty" xml:"DataType,omitempty"`
}

func (s DescribeDataBackupsResponseBodyItems) String() string {
	return dara.Prettify(s)
}

func (s DescribeDataBackupsResponseBodyItems) GoString() string {
	return s.String()
}

func (s *DescribeDataBackupsResponseBodyItems) GetBackupEndTime() *string {
	return s.BackupEndTime
}

func (s *DescribeDataBackupsResponseBodyItems) GetBackupEndTimeLocal() *string {
	return s.BackupEndTimeLocal
}

func (s *DescribeDataBackupsResponseBodyItems) GetBackupMethod() *string {
	return s.BackupMethod
}

func (s *DescribeDataBackupsResponseBodyItems) GetBackupMode() *string {
	return s.BackupMode
}

func (s *DescribeDataBackupsResponseBodyItems) GetBackupSetId() *string {
	return s.BackupSetId
}

func (s *DescribeDataBackupsResponseBodyItems) GetBackupSize() *int64 {
	return s.BackupSize
}

func (s *DescribeDataBackupsResponseBodyItems) GetBackupStartTime() *string {
	return s.BackupStartTime
}

func (s *DescribeDataBackupsResponseBodyItems) GetBackupStartTimeLocal() *string {
	return s.BackupStartTimeLocal
}

func (s *DescribeDataBackupsResponseBodyItems) GetBackupStatus() *string {
	return s.BackupStatus
}

func (s *DescribeDataBackupsResponseBodyItems) GetBaksetName() *string {
	return s.BaksetName
}

func (s *DescribeDataBackupsResponseBodyItems) GetConsistentTime() *int64 {
	return s.ConsistentTime
}

func (s *DescribeDataBackupsResponseBodyItems) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *DescribeDataBackupsResponseBodyItems) GetDataType() *string {
	return s.DataType
}

func (s *DescribeDataBackupsResponseBodyItems) SetBackupEndTime(v string) *DescribeDataBackupsResponseBodyItems {
	s.BackupEndTime = &v
	return s
}

func (s *DescribeDataBackupsResponseBodyItems) SetBackupEndTimeLocal(v string) *DescribeDataBackupsResponseBodyItems {
	s.BackupEndTimeLocal = &v
	return s
}

func (s *DescribeDataBackupsResponseBodyItems) SetBackupMethod(v string) *DescribeDataBackupsResponseBodyItems {
	s.BackupMethod = &v
	return s
}

func (s *DescribeDataBackupsResponseBodyItems) SetBackupMode(v string) *DescribeDataBackupsResponseBodyItems {
	s.BackupMode = &v
	return s
}

func (s *DescribeDataBackupsResponseBodyItems) SetBackupSetId(v string) *DescribeDataBackupsResponseBodyItems {
	s.BackupSetId = &v
	return s
}

func (s *DescribeDataBackupsResponseBodyItems) SetBackupSize(v int64) *DescribeDataBackupsResponseBodyItems {
	s.BackupSize = &v
	return s
}

func (s *DescribeDataBackupsResponseBodyItems) SetBackupStartTime(v string) *DescribeDataBackupsResponseBodyItems {
	s.BackupStartTime = &v
	return s
}

func (s *DescribeDataBackupsResponseBodyItems) SetBackupStartTimeLocal(v string) *DescribeDataBackupsResponseBodyItems {
	s.BackupStartTimeLocal = &v
	return s
}

func (s *DescribeDataBackupsResponseBodyItems) SetBackupStatus(v string) *DescribeDataBackupsResponseBodyItems {
	s.BackupStatus = &v
	return s
}

func (s *DescribeDataBackupsResponseBodyItems) SetBaksetName(v string) *DescribeDataBackupsResponseBodyItems {
	s.BaksetName = &v
	return s
}

func (s *DescribeDataBackupsResponseBodyItems) SetConsistentTime(v int64) *DescribeDataBackupsResponseBodyItems {
	s.ConsistentTime = &v
	return s
}

func (s *DescribeDataBackupsResponseBodyItems) SetDBInstanceId(v string) *DescribeDataBackupsResponseBodyItems {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDataBackupsResponseBodyItems) SetDataType(v string) *DescribeDataBackupsResponseBodyItems {
	s.DataType = &v
	return s
}

func (s *DescribeDataBackupsResponseBodyItems) Validate() error {
	return dara.Validate(s)
}

type iDescribeDataBackupsResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DescribeDataBackupsResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DescribeDataBackupsResponse
	GetStatusCode() *int32
	SetBody(v *DescribeDataBackupsResponseBody) *DescribeDataBackupsResponse
	GetBody() *DescribeDataBackupsResponseBody
}

type DescribeDataBackupsResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeDataBackupsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeDataBackupsResponse) String() string {
	return dara.Prettify(s)
}

func (s DescribeDataBackupsResponse) GoString() string {
	return s.String()
}

func (s *DescribeDataBackupsResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DescribeDataBackupsResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DescribeDataBackupsResponse) GetBody() *DescribeDataBackupsResponseBody {
	return s.Body
}

func (s *DescribeDataBackupsResponse) SetHeaders(v map[string]*string) *DescribeDataBackupsResponse {
	s.Headers = v
	return s
}

func (s *DescribeDataBackupsResponse) SetStatusCode(v int32) *DescribeDataBackupsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDataBackupsResponse) SetBody(v *DescribeDataBackupsResponseBody) *DescribeDataBackupsResponse {
	s.Body = v
	return s
}

func (s *DescribeDataBackupsResponse) Validate() error {
	return dara.Validate(s)
}

type iDescribeDataReDistributeInfoRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *DescribeDataReDistributeInfoRequest
	GetDBInstanceId() *string
	SetOwnerId(v int64) *DescribeDataReDistributeInfoRequest
	GetOwnerId() *int64
}

type DescribeDataReDistributeInfoRequest struct {
	// The instance ID.
	//
	// > You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the IDs of all AnalyticDB for PostgreSQL instances within a region.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s DescribeDataReDistributeInfoRequest) String() string {
	return dara.Prettify(s)
}

func (s DescribeDataReDistributeInfoRequest) GoString() string {
	return s.String()
}

func (s *DescribeDataReDistributeInfoRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *DescribeDataReDistributeInfoRequest) GetOwnerId() *int64 {
	return s.OwnerId
}

func (s *DescribeDataReDistributeInfoRequest) SetDBInstanceId(v string) *DescribeDataReDistributeInfoRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDataReDistributeInfoRequest) SetOwnerId(v int64) *DescribeDataReDistributeInfoRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeDataReDistributeInfoRequest) Validate() error {
	return dara.Validate(s)
}

type iDescribeDataReDistributeInfoResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetDataReDistributeInfo(v *DescribeDataReDistributeInfoResponseBodyDataReDistributeInfo) *DescribeDataReDistributeInfoResponseBody
	GetDataReDistributeInfo() *DescribeDataReDistributeInfoResponseBodyDataReDistributeInfo
	SetRequestId(v string) *DescribeDataReDistributeInfoResponseBody
	GetRequestId() *string
}

type DescribeDataReDistributeInfoResponseBody struct {
	// The data redistribution information.
	DataReDistributeInfo *DescribeDataReDistributeInfoResponseBodyDataReDistributeInfo `json:"DataReDistributeInfo,omitempty" xml:"DataReDistributeInfo,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// 04836A02-ADC9-1AA7-AC36-DE5E048BF505
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeDataReDistributeInfoResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DescribeDataReDistributeInfoResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDataReDistributeInfoResponseBody) GetDataReDistributeInfo() *DescribeDataReDistributeInfoResponseBodyDataReDistributeInfo {
	return s.DataReDistributeInfo
}

func (s *DescribeDataReDistributeInfoResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DescribeDataReDistributeInfoResponseBody) SetDataReDistributeInfo(v *DescribeDataReDistributeInfoResponseBodyDataReDistributeInfo) *DescribeDataReDistributeInfoResponseBody {
	s.DataReDistributeInfo = v
	return s
}

func (s *DescribeDataReDistributeInfoResponseBody) SetRequestId(v string) *DescribeDataReDistributeInfoResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDataReDistributeInfoResponseBody) Validate() error {
	return dara.Validate(s)
}

type DescribeDataReDistributeInfoResponseBodyDataReDistributeInfo struct {
	// The execution information. If an error occurs, the error message is returned.
	//
	// example:
	//
	// redistributing
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The progress of data redistribution. Unit: %.
	//
	// example:
	//
	// 33
	Progress *int64 `json:"Progress,omitempty" xml:"Progress,omitempty"`
	// The estimated remaining time for data redistribution.
	//
	// example:
	//
	// 00:01:28
	RemainTime *string `json:"RemainTime,omitempty" xml:"RemainTime,omitempty"`
	// This parameter is not supported.
	//
	// example:
	//
	// null
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The status of data redistribution.
	//
	// example:
	//
	// RUNNING
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The execution type. The value **immediate*	- is returned, indicating immediate execution.
	//
	// example:
	//
	// immediate
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeDataReDistributeInfoResponseBodyDataReDistributeInfo) String() string {
	return dara.Prettify(s)
}

func (s DescribeDataReDistributeInfoResponseBodyDataReDistributeInfo) GoString() string {
	return s.String()
}

func (s *DescribeDataReDistributeInfoResponseBodyDataReDistributeInfo) GetMessage() *string {
	return s.Message
}

func (s *DescribeDataReDistributeInfoResponseBodyDataReDistributeInfo) GetProgress() *int64 {
	return s.Progress
}

func (s *DescribeDataReDistributeInfoResponseBodyDataReDistributeInfo) GetRemainTime() *string {
	return s.RemainTime
}

func (s *DescribeDataReDistributeInfoResponseBodyDataReDistributeInfo) GetStartTime() *string {
	return s.StartTime
}

func (s *DescribeDataReDistributeInfoResponseBodyDataReDistributeInfo) GetStatus() *string {
	return s.Status
}

func (s *DescribeDataReDistributeInfoResponseBodyDataReDistributeInfo) GetType() *string {
	return s.Type
}

func (s *DescribeDataReDistributeInfoResponseBodyDataReDistributeInfo) SetMessage(v string) *DescribeDataReDistributeInfoResponseBodyDataReDistributeInfo {
	s.Message = &v
	return s
}

func (s *DescribeDataReDistributeInfoResponseBodyDataReDistributeInfo) SetProgress(v int64) *DescribeDataReDistributeInfoResponseBodyDataReDistributeInfo {
	s.Progress = &v
	return s
}

func (s *DescribeDataReDistributeInfoResponseBodyDataReDistributeInfo) SetRemainTime(v string) *DescribeDataReDistributeInfoResponseBodyDataReDistributeInfo {
	s.RemainTime = &v
	return s
}

func (s *DescribeDataReDistributeInfoResponseBodyDataReDistributeInfo) SetStartTime(v string) *DescribeDataReDistributeInfoResponseBodyDataReDistributeInfo {
	s.StartTime = &v
	return s
}

func (s *DescribeDataReDistributeInfoResponseBodyDataReDistributeInfo) SetStatus(v string) *DescribeDataReDistributeInfoResponseBodyDataReDistributeInfo {
	s.Status = &v
	return s
}

func (s *DescribeDataReDistributeInfoResponseBodyDataReDistributeInfo) SetType(v string) *DescribeDataReDistributeInfoResponseBodyDataReDistributeInfo {
	s.Type = &v
	return s
}

func (s *DescribeDataReDistributeInfoResponseBodyDataReDistributeInfo) Validate() error {
	return dara.Validate(s)
}

type iDescribeDataReDistributeInfoResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DescribeDataReDistributeInfoResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DescribeDataReDistributeInfoResponse
	GetStatusCode() *int32
	SetBody(v *DescribeDataReDistributeInfoResponseBody) *DescribeDataReDistributeInfoResponse
	GetBody() *DescribeDataReDistributeInfoResponseBody
}

type DescribeDataReDistributeInfoResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeDataReDistributeInfoResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeDataReDistributeInfoResponse) String() string {
	return dara.Prettify(s)
}

func (s DescribeDataReDistributeInfoResponse) GoString() string {
	return s.String()
}

func (s *DescribeDataReDistributeInfoResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DescribeDataReDistributeInfoResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DescribeDataReDistributeInfoResponse) GetBody() *DescribeDataReDistributeInfoResponseBody {
	return s.Body
}

func (s *DescribeDataReDistributeInfoResponse) SetHeaders(v map[string]*string) *DescribeDataReDistributeInfoResponse {
	s.Headers = v
	return s
}

func (s *DescribeDataReDistributeInfoResponse) SetStatusCode(v int32) *DescribeDataReDistributeInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDataReDistributeInfoResponse) SetBody(v *DescribeDataReDistributeInfoResponseBody) *DescribeDataReDistributeInfoResponse {
	s.Body = v
	return s
}

func (s *DescribeDataReDistributeInfoResponse) Validate() error {
	return dara.Validate(s)
}

type iDescribeDataShareInstancesRequest interface {
	dara.Model
	String() string
	GoString() string
	SetOwnerId(v int64) *DescribeDataShareInstancesRequest
	GetOwnerId() *int64
	SetPageNumber(v int32) *DescribeDataShareInstancesRequest
	GetPageNumber() *int32
	SetPageSize(v int32) *DescribeDataShareInstancesRequest
	GetPageSize() *int32
	SetRegionId(v string) *DescribeDataShareInstancesRequest
	GetRegionId() *string
	SetResourceGroupId(v string) *DescribeDataShareInstancesRequest
	GetResourceGroupId() *string
	SetSearchValue(v string) *DescribeDataShareInstancesRequest
	GetSearchValue() *string
}

type DescribeDataShareInstancesRequest struct {
	OwnerId *int64 `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The page number. Pages start from page 1. Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. Valid values:
	//
	// 	- **30**
	//
	// 	- **50**
	//
	// 	- **100**
	//
	// Default value: 30.
	//
	// example:
	//
	// 30
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The region ID of the instance.
	//
	// > You can call the [DescribeRegions](https://help.aliyun.com/document_detail/86912.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the resource group to which the instance belongs. For information about how to obtain the ID of a resource group, see [View basic information of a resource group](https://help.aliyun.com/document_detail/151181.html).
	//
	// example:
	//
	// rg-bp67acfmxazb4p****
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	// The keyword used to filter instances, which can be an instance ID or instance description.
	//
	// > You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs and instance descriptions.
	//
	// example:
	//
	// gp-bp***************
	SearchValue *string `json:"SearchValue,omitempty" xml:"SearchValue,omitempty"`
}

func (s DescribeDataShareInstancesRequest) String() string {
	return dara.Prettify(s)
}

func (s DescribeDataShareInstancesRequest) GoString() string {
	return s.String()
}

func (s *DescribeDataShareInstancesRequest) GetOwnerId() *int64 {
	return s.OwnerId
}

func (s *DescribeDataShareInstancesRequest) GetPageNumber() *int32 {
	return s.PageNumber
}

func (s *DescribeDataShareInstancesRequest) GetPageSize() *int32 {
	return s.PageSize
}

func (s *DescribeDataShareInstancesRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *DescribeDataShareInstancesRequest) GetResourceGroupId() *string {
	return s.ResourceGroupId
}

func (s *DescribeDataShareInstancesRequest) GetSearchValue() *string {
	return s.SearchValue
}

func (s *DescribeDataShareInstancesRequest) SetOwnerId(v int64) *DescribeDataShareInstancesRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeDataShareInstancesRequest) SetPageNumber(v int32) *DescribeDataShareInstancesRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeDataShareInstancesRequest) SetPageSize(v int32) *DescribeDataShareInstancesRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeDataShareInstancesRequest) SetRegionId(v string) *DescribeDataShareInstancesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeDataShareInstancesRequest) SetResourceGroupId(v string) *DescribeDataShareInstancesRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeDataShareInstancesRequest) SetSearchValue(v string) *DescribeDataShareInstancesRequest {
	s.SearchValue = &v
	return s
}

func (s *DescribeDataShareInstancesRequest) Validate() error {
	return dara.Validate(s)
}

type iDescribeDataShareInstancesResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetItems(v *DescribeDataShareInstancesResponseBodyItems) *DescribeDataShareInstancesResponseBody
	GetItems() *DescribeDataShareInstancesResponseBodyItems
	SetPageNumber(v int32) *DescribeDataShareInstancesResponseBody
	GetPageNumber() *int32
	SetPageRecordCount(v int32) *DescribeDataShareInstancesResponseBody
	GetPageRecordCount() *int32
	SetRequestId(v string) *DescribeDataShareInstancesResponseBody
	GetRequestId() *string
	SetTotalRecordCount(v int32) *DescribeDataShareInstancesResponseBody
	GetTotalRecordCount() *int32
}

type DescribeDataShareInstancesResponseBody struct {
	// The state of data sharing. Valid values:
	//
	// 	- **opening**
	//
	// 	- **opened**
	//
	// 	- **closing**
	//
	// 	- **closed**
	Items *DescribeDataShareInstancesResponseBodyItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Struct"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 1
	PageRecordCount *int32 `json:"PageRecordCount,omitempty" xml:"PageRecordCount,omitempty"`
	// The request ID.
	//
	// example:
	//
	// B4CAF581-2AC7-41AD-8940-D5**********
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 1
	TotalRecordCount *int32 `json:"TotalRecordCount,omitempty" xml:"TotalRecordCount,omitempty"`
}

func (s DescribeDataShareInstancesResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DescribeDataShareInstancesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDataShareInstancesResponseBody) GetItems() *DescribeDataShareInstancesResponseBodyItems {
	return s.Items
}

func (s *DescribeDataShareInstancesResponseBody) GetPageNumber() *int32 {
	return s.PageNumber
}

func (s *DescribeDataShareInstancesResponseBody) GetPageRecordCount() *int32 {
	return s.PageRecordCount
}

func (s *DescribeDataShareInstancesResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DescribeDataShareInstancesResponseBody) GetTotalRecordCount() *int32 {
	return s.TotalRecordCount
}

func (s *DescribeDataShareInstancesResponseBody) SetItems(v *DescribeDataShareInstancesResponseBodyItems) *DescribeDataShareInstancesResponseBody {
	s.Items = v
	return s
}

func (s *DescribeDataShareInstancesResponseBody) SetPageNumber(v int32) *DescribeDataShareInstancesResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeDataShareInstancesResponseBody) SetPageRecordCount(v int32) *DescribeDataShareInstancesResponseBody {
	s.PageRecordCount = &v
	return s
}

func (s *DescribeDataShareInstancesResponseBody) SetRequestId(v string) *DescribeDataShareInstancesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDataShareInstancesResponseBody) SetTotalRecordCount(v int32) *DescribeDataShareInstancesResponseBody {
	s.TotalRecordCount = &v
	return s
}

func (s *DescribeDataShareInstancesResponseBody) Validate() error {
	return dara.Validate(s)
}

type DescribeDataShareInstancesResponseBodyItems struct {
	DBInstance []*DescribeDataShareInstancesResponseBodyItemsDBInstance `json:"DBInstance,omitempty" xml:"DBInstance,omitempty" type:"Repeated"`
}

func (s DescribeDataShareInstancesResponseBodyItems) String() string {
	return dara.Prettify(s)
}

func (s DescribeDataShareInstancesResponseBodyItems) GoString() string {
	return s.String()
}

func (s *DescribeDataShareInstancesResponseBodyItems) GetDBInstance() []*DescribeDataShareInstancesResponseBodyItemsDBInstance {
	return s.DBInstance
}

func (s *DescribeDataShareInstancesResponseBodyItems) SetDBInstance(v []*DescribeDataShareInstancesResponseBodyItemsDBInstance) *DescribeDataShareInstancesResponseBodyItems {
	s.DBInstance = v
	return s
}

func (s *DescribeDataShareInstancesResponseBodyItems) Validate() error {
	return dara.Validate(s)
}

type DescribeDataShareInstancesResponseBodyItemsDBInstance struct {
	// The ID of the instance.
	//
	// example:
	//
	// gp-bp***************
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The resource type of the instance. Valid values:
	//
	// 	- **Serverless**: Serverless mode
	//
	// 	- **StorageElasic**: elastic storage mode
	//
	// 	- **Classic**: reserved storage mode
	//
	// example:
	//
	// Serverless
	DBInstanceMode *string `json:"DBInstanceMode,omitempty" xml:"DBInstanceMode,omitempty"`
	// The state of data sharing. Valid values:
	//
	// 	- **opening**: Data sharing is being enabled.
	//
	// 	- **opened**: Data sharing is enabled.
	//
	// 	- **closing**: Data sharing is being disabled.
	//
	// 	- **closed**: Data sharing is disabled.
	//
	// example:
	//
	// opened
	DataShareStatus *string `json:"DataShareStatus,omitempty" xml:"DataShareStatus,omitempty"`
	// The description of the instance.
	//
	// example:
	//
	// gp-bp***************
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The region ID of the instance.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The zone ID of the instance.
	//
	// example:
	//
	// cn-hangzhou-j
	ZoneId *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s DescribeDataShareInstancesResponseBodyItemsDBInstance) String() string {
	return dara.Prettify(s)
}

func (s DescribeDataShareInstancesResponseBodyItemsDBInstance) GoString() string {
	return s.String()
}

func (s *DescribeDataShareInstancesResponseBodyItemsDBInstance) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *DescribeDataShareInstancesResponseBodyItemsDBInstance) GetDBInstanceMode() *string {
	return s.DBInstanceMode
}

func (s *DescribeDataShareInstancesResponseBodyItemsDBInstance) GetDataShareStatus() *string {
	return s.DataShareStatus
}

func (s *DescribeDataShareInstancesResponseBodyItemsDBInstance) GetDescription() *string {
	return s.Description
}

func (s *DescribeDataShareInstancesResponseBodyItemsDBInstance) GetRegionId() *string {
	return s.RegionId
}

func (s *DescribeDataShareInstancesResponseBodyItemsDBInstance) GetZoneId() *string {
	return s.ZoneId
}

func (s *DescribeDataShareInstancesResponseBodyItemsDBInstance) SetDBInstanceId(v string) *DescribeDataShareInstancesResponseBodyItemsDBInstance {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDataShareInstancesResponseBodyItemsDBInstance) SetDBInstanceMode(v string) *DescribeDataShareInstancesResponseBodyItemsDBInstance {
	s.DBInstanceMode = &v
	return s
}

func (s *DescribeDataShareInstancesResponseBodyItemsDBInstance) SetDataShareStatus(v string) *DescribeDataShareInstancesResponseBodyItemsDBInstance {
	s.DataShareStatus = &v
	return s
}

func (s *DescribeDataShareInstancesResponseBodyItemsDBInstance) SetDescription(v string) *DescribeDataShareInstancesResponseBodyItemsDBInstance {
	s.Description = &v
	return s
}

func (s *DescribeDataShareInstancesResponseBodyItemsDBInstance) SetRegionId(v string) *DescribeDataShareInstancesResponseBodyItemsDBInstance {
	s.RegionId = &v
	return s
}

func (s *DescribeDataShareInstancesResponseBodyItemsDBInstance) SetZoneId(v string) *DescribeDataShareInstancesResponseBodyItemsDBInstance {
	s.ZoneId = &v
	return s
}

func (s *DescribeDataShareInstancesResponseBodyItemsDBInstance) Validate() error {
	return dara.Validate(s)
}

type iDescribeDataShareInstancesResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DescribeDataShareInstancesResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DescribeDataShareInstancesResponse
	GetStatusCode() *int32
	SetBody(v *DescribeDataShareInstancesResponseBody) *DescribeDataShareInstancesResponse
	GetBody() *DescribeDataShareInstancesResponseBody
}

type DescribeDataShareInstancesResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeDataShareInstancesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeDataShareInstancesResponse) String() string {
	return dara.Prettify(s)
}

func (s DescribeDataShareInstancesResponse) GoString() string {
	return s.String()
}

func (s *DescribeDataShareInstancesResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DescribeDataShareInstancesResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DescribeDataShareInstancesResponse) GetBody() *DescribeDataShareInstancesResponseBody {
	return s.Body
}

func (s *DescribeDataShareInstancesResponse) SetHeaders(v map[string]*string) *DescribeDataShareInstancesResponse {
	s.Headers = v
	return s
}

func (s *DescribeDataShareInstancesResponse) SetStatusCode(v int32) *DescribeDataShareInstancesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDataShareInstancesResponse) SetBody(v *DescribeDataShareInstancesResponseBody) *DescribeDataShareInstancesResponse {
	s.Body = v
	return s
}

func (s *DescribeDataShareInstancesResponse) Validate() error {
	return dara.Validate(s)
}

type iDescribeDataSharePerformanceRequest interface {
	dara.Model
	String() string
	GoString() string
	SetEndTime(v string) *DescribeDataSharePerformanceRequest
	GetEndTime() *string
	SetKey(v string) *DescribeDataSharePerformanceRequest
	GetKey() *string
	SetRegionId(v string) *DescribeDataSharePerformanceRequest
	GetRegionId() *string
	SetResourceGroupId(v string) *DescribeDataSharePerformanceRequest
	GetResourceGroupId() *string
	SetStartTime(v string) *DescribeDataSharePerformanceRequest
	GetStartTime() *string
}

type DescribeDataSharePerformanceRequest struct {
	// The end of the time range to query. Specify the time in the *yyyy-MM-dd*T*HH:mm*Z format. The time must be in UTC.
	//
	// example:
	//
	// 2022-08-03T15:10Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The name of the performance metric. Separate multiple values with commas (,). Valid values:
	//
	// 	- **adbpg_datashare_topic_count**: the number of shared topics.
	//
	// 	- **adbpg_datashare_data_size_mb**: the amount of data shared.
	//
	// This parameter is required.
	//
	// example:
	//
	// adbpg_datashare_topic_count
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The region ID of the instance.
	//
	// >  You can call the [DescribeRegions](https://help.aliyun.com/document_detail/86912.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// This parameter is no longer used.
	//
	// example:
	//
	// rg-bp67acfmxazb4p****
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	// The beginning of the time range to query. Specify the time in the *yyyy-MM-dd*T*HH:mm*Z format. The time must be in UTC.
	//
	// example:
	//
	// 2022-08-03T15:00Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeDataSharePerformanceRequest) String() string {
	return dara.Prettify(s)
}

func (s DescribeDataSharePerformanceRequest) GoString() string {
	return s.String()
}

func (s *DescribeDataSharePerformanceRequest) GetEndTime() *string {
	return s.EndTime
}

func (s *DescribeDataSharePerformanceRequest) GetKey() *string {
	return s.Key
}

func (s *DescribeDataSharePerformanceRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *DescribeDataSharePerformanceRequest) GetResourceGroupId() *string {
	return s.ResourceGroupId
}

func (s *DescribeDataSharePerformanceRequest) GetStartTime() *string {
	return s.StartTime
}

func (s *DescribeDataSharePerformanceRequest) SetEndTime(v string) *DescribeDataSharePerformanceRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeDataSharePerformanceRequest) SetKey(v string) *DescribeDataSharePerformanceRequest {
	s.Key = &v
	return s
}

func (s *DescribeDataSharePerformanceRequest) SetRegionId(v string) *DescribeDataSharePerformanceRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeDataSharePerformanceRequest) SetResourceGroupId(v string) *DescribeDataSharePerformanceRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeDataSharePerformanceRequest) SetStartTime(v string) *DescribeDataSharePerformanceRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeDataSharePerformanceRequest) Validate() error {
	return dara.Validate(s)
}

type iDescribeDataSharePerformanceResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetDBClusterId(v string) *DescribeDataSharePerformanceResponseBody
	GetDBClusterId() *string
	SetEndTime(v string) *DescribeDataSharePerformanceResponseBody
	GetEndTime() *string
	SetPerformanceKeys(v []*DescribeDataSharePerformanceResponseBodyPerformanceKeys) *DescribeDataSharePerformanceResponseBody
	GetPerformanceKeys() []*DescribeDataSharePerformanceResponseBodyPerformanceKeys
	SetRequestId(v string) *DescribeDataSharePerformanceResponseBody
	GetRequestId() *string
	SetStartTime(v string) *DescribeDataSharePerformanceResponseBody
	GetStartTime() *string
}

type DescribeDataSharePerformanceResponseBody struct {
	// The ID of the instance.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBClusterId *string `json:"DBClusterId,omitempty" xml:"DBClusterId,omitempty"`
	// The end time of the query.
	//
	// example:
	//
	// 2022-08-03T15:10Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// Details of data sharing performance metrics.
	PerformanceKeys []*DescribeDataSharePerformanceResponseBodyPerformanceKeys `json:"PerformanceKeys,omitempty" xml:"PerformanceKeys,omitempty" type:"Repeated"`
	// The ID of the request.
	//
	// example:
	//
	// BBE00C04-A3E8-4114-881D-0480A72CB92E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The start time of the query.
	//
	// example:
	//
	// 2022-08-03T15:00Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeDataSharePerformanceResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DescribeDataSharePerformanceResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDataSharePerformanceResponseBody) GetDBClusterId() *string {
	return s.DBClusterId
}

func (s *DescribeDataSharePerformanceResponseBody) GetEndTime() *string {
	return s.EndTime
}

func (s *DescribeDataSharePerformanceResponseBody) GetPerformanceKeys() []*DescribeDataSharePerformanceResponseBodyPerformanceKeys {
	return s.PerformanceKeys
}

func (s *DescribeDataSharePerformanceResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DescribeDataSharePerformanceResponseBody) GetStartTime() *string {
	return s.StartTime
}

func (s *DescribeDataSharePerformanceResponseBody) SetDBClusterId(v string) *DescribeDataSharePerformanceResponseBody {
	s.DBClusterId = &v
	return s
}

func (s *DescribeDataSharePerformanceResponseBody) SetEndTime(v string) *DescribeDataSharePerformanceResponseBody {
	s.EndTime = &v
	return s
}

func (s *DescribeDataSharePerformanceResponseBody) SetPerformanceKeys(v []*DescribeDataSharePerformanceResponseBodyPerformanceKeys) *DescribeDataSharePerformanceResponseBody {
	s.PerformanceKeys = v
	return s
}

func (s *DescribeDataSharePerformanceResponseBody) SetRequestId(v string) *DescribeDataSharePerformanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDataSharePerformanceResponseBody) SetStartTime(v string) *DescribeDataSharePerformanceResponseBody {
	s.StartTime = &v
	return s
}

func (s *DescribeDataSharePerformanceResponseBody) Validate() error {
	return dara.Validate(s)
}

type DescribeDataSharePerformanceResponseBodyPerformanceKeys struct {
	// The name of the performance metric.
	//
	// example:
	//
	// adbpg_datashare_topic_count
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// Details of the performance metric.
	Series []*DescribeDataSharePerformanceResponseBodyPerformanceKeysSeries `json:"Series,omitempty" xml:"Series,omitempty" type:"Repeated"`
	// The unit of the performance metric.
	//
	// example:
	//
	// int
	Unit *string `json:"Unit,omitempty" xml:"Unit,omitempty"`
}

func (s DescribeDataSharePerformanceResponseBodyPerformanceKeys) String() string {
	return dara.Prettify(s)
}

func (s DescribeDataSharePerformanceResponseBodyPerformanceKeys) GoString() string {
	return s.String()
}

func (s *DescribeDataSharePerformanceResponseBodyPerformanceKeys) GetName() *string {
	return s.Name
}

func (s *DescribeDataSharePerformanceResponseBodyPerformanceKeys) GetSeries() []*DescribeDataSharePerformanceResponseBodyPerformanceKeysSeries {
	return s.Series
}

func (s *DescribeDataSharePerformanceResponseBodyPerformanceKeys) GetUnit() *string {
	return s.Unit
}

func (s *DescribeDataSharePerformanceResponseBodyPerformanceKeys) SetName(v string) *DescribeDataSharePerformanceResponseBodyPerformanceKeys {
	s.Name = &v
	return s
}

func (s *DescribeDataSharePerformanceResponseBodyPerformanceKeys) SetSeries(v []*DescribeDataSharePerformanceResponseBodyPerformanceKeysSeries) *DescribeDataSharePerformanceResponseBodyPerformanceKeys {
	s.Series = v
	return s
}

func (s *DescribeDataSharePerformanceResponseBodyPerformanceKeys) SetUnit(v string) *DescribeDataSharePerformanceResponseBodyPerformanceKeys {
	s.Unit = &v
	return s
}

func (s *DescribeDataSharePerformanceResponseBodyPerformanceKeys) Validate() error {
	return dara.Validate(s)
}

type DescribeDataSharePerformanceResponseBodyPerformanceKeysSeries struct {
	// The name of the performance metric.
	//
	// example:
	//
	// adbpg_datashare_topic_count
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// One or more values of the performance metric.
	Values []*DescribeDataSharePerformanceResponseBodyPerformanceKeysSeriesValues `json:"Values,omitempty" xml:"Values,omitempty" type:"Repeated"`
}

func (s DescribeDataSharePerformanceResponseBodyPerformanceKeysSeries) String() string {
	return dara.Prettify(s)
}

func (s DescribeDataSharePerformanceResponseBodyPerformanceKeysSeries) GoString() string {
	return s.String()
}

func (s *DescribeDataSharePerformanceResponseBodyPerformanceKeysSeries) GetName() *string {
	return s.Name
}

func (s *DescribeDataSharePerformanceResponseBodyPerformanceKeysSeries) GetValues() []*DescribeDataSharePerformanceResponseBodyPerformanceKeysSeriesValues {
	return s.Values
}

func (s *DescribeDataSharePerformanceResponseBodyPerformanceKeysSeries) SetName(v string) *DescribeDataSharePerformanceResponseBodyPerformanceKeysSeries {
	s.Name = &v
	return s
}

func (s *DescribeDataSharePerformanceResponseBodyPerformanceKeysSeries) SetValues(v []*DescribeDataSharePerformanceResponseBodyPerformanceKeysSeriesValues) *DescribeDataSharePerformanceResponseBodyPerformanceKeysSeries {
	s.Values = v
	return s
}

func (s *DescribeDataSharePerformanceResponseBodyPerformanceKeysSeries) Validate() error {
	return dara.Validate(s)
}

type DescribeDataSharePerformanceResponseBodyPerformanceKeysSeriesValues struct {
	// The value of the performance metric at a point in time.
	Point []*string `json:"Point,omitempty" xml:"Point,omitempty" type:"Repeated"`
}

func (s DescribeDataSharePerformanceResponseBodyPerformanceKeysSeriesValues) String() string {
	return dara.Prettify(s)
}

func (s DescribeDataSharePerformanceResponseBodyPerformanceKeysSeriesValues) GoString() string {
	return s.String()
}

func (s *DescribeDataSharePerformanceResponseBodyPerformanceKeysSeriesValues) GetPoint() []*string {
	return s.Point
}

func (s *DescribeDataSharePerformanceResponseBodyPerformanceKeysSeriesValues) SetPoint(v []*string) *DescribeDataSharePerformanceResponseBodyPerformanceKeysSeriesValues {
	s.Point = v
	return s
}

func (s *DescribeDataSharePerformanceResponseBodyPerformanceKeysSeriesValues) Validate() error {
	return dara.Validate(s)
}

type iDescribeDataSharePerformanceResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DescribeDataSharePerformanceResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DescribeDataSharePerformanceResponse
	GetStatusCode() *int32
	SetBody(v *DescribeDataSharePerformanceResponseBody) *DescribeDataSharePerformanceResponse
	GetBody() *DescribeDataSharePerformanceResponseBody
}

type DescribeDataSharePerformanceResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeDataSharePerformanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeDataSharePerformanceResponse) String() string {
	return dara.Prettify(s)
}

func (s DescribeDataSharePerformanceResponse) GoString() string {
	return s.String()
}

func (s *DescribeDataSharePerformanceResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DescribeDataSharePerformanceResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DescribeDataSharePerformanceResponse) GetBody() *DescribeDataSharePerformanceResponseBody {
	return s.Body
}

func (s *DescribeDataSharePerformanceResponse) SetHeaders(v map[string]*string) *DescribeDataSharePerformanceResponse {
	s.Headers = v
	return s
}

func (s *DescribeDataSharePerformanceResponse) SetStatusCode(v int32) *DescribeDataSharePerformanceResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDataSharePerformanceResponse) SetBody(v *DescribeDataSharePerformanceResponseBody) *DescribeDataSharePerformanceResponse {
	s.Body = v
	return s
}

func (s *DescribeDataSharePerformanceResponse) Validate() error {
	return dara.Validate(s)
}

type iDescribeDiagnosisDimensionsRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *DescribeDiagnosisDimensionsRequest
	GetDBInstanceId() *string
}

type DescribeDiagnosisDimensionsRequest struct {
	// The instance ID.
	//
	// > You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
}

func (s DescribeDiagnosisDimensionsRequest) String() string {
	return dara.Prettify(s)
}

func (s DescribeDiagnosisDimensionsRequest) GoString() string {
	return s.String()
}

func (s *DescribeDiagnosisDimensionsRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *DescribeDiagnosisDimensionsRequest) SetDBInstanceId(v string) *DescribeDiagnosisDimensionsRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDiagnosisDimensionsRequest) Validate() error {
	return dara.Validate(s)
}

type iDescribeDiagnosisDimensionsResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetDatabases(v []*string) *DescribeDiagnosisDimensionsResponseBody
	GetDatabases() []*string
	SetRequestId(v string) *DescribeDiagnosisDimensionsResponseBody
	GetRequestId() *string
	SetUserNames(v []*string) *DescribeDiagnosisDimensionsResponseBody
	GetUserNames() []*string
}

type DescribeDiagnosisDimensionsResponseBody struct {
	// The names of the databases.
	Databases []*string `json:"Databases,omitempty" xml:"Databases,omitempty" type:"Repeated"`
	// The request ID.
	//
	// example:
	//
	// 9ADCAACA-E0E8-5319-AE3B-E260E957BDF9
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The names of the database accounts.
	UserNames []*string `json:"UserNames,omitempty" xml:"UserNames,omitempty" type:"Repeated"`
}

func (s DescribeDiagnosisDimensionsResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DescribeDiagnosisDimensionsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDiagnosisDimensionsResponseBody) GetDatabases() []*string {
	return s.Databases
}

func (s *DescribeDiagnosisDimensionsResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DescribeDiagnosisDimensionsResponseBody) GetUserNames() []*string {
	return s.UserNames
}

func (s *DescribeDiagnosisDimensionsResponseBody) SetDatabases(v []*string) *DescribeDiagnosisDimensionsResponseBody {
	s.Databases = v
	return s
}

func (s *DescribeDiagnosisDimensionsResponseBody) SetRequestId(v string) *DescribeDiagnosisDimensionsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDiagnosisDimensionsResponseBody) SetUserNames(v []*string) *DescribeDiagnosisDimensionsResponseBody {
	s.UserNames = v
	return s
}

func (s *DescribeDiagnosisDimensionsResponseBody) Validate() error {
	return dara.Validate(s)
}

type iDescribeDiagnosisDimensionsResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DescribeDiagnosisDimensionsResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DescribeDiagnosisDimensionsResponse
	GetStatusCode() *int32
	SetBody(v *DescribeDiagnosisDimensionsResponseBody) *DescribeDiagnosisDimensionsResponse
	GetBody() *DescribeDiagnosisDimensionsResponseBody
}

type DescribeDiagnosisDimensionsResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeDiagnosisDimensionsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeDiagnosisDimensionsResponse) String() string {
	return dara.Prettify(s)
}

func (s DescribeDiagnosisDimensionsResponse) GoString() string {
	return s.String()
}

func (s *DescribeDiagnosisDimensionsResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DescribeDiagnosisDimensionsResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DescribeDiagnosisDimensionsResponse) GetBody() *DescribeDiagnosisDimensionsResponseBody {
	return s.Body
}

func (s *DescribeDiagnosisDimensionsResponse) SetHeaders(v map[string]*string) *DescribeDiagnosisDimensionsResponse {
	s.Headers = v
	return s
}

func (s *DescribeDiagnosisDimensionsResponse) SetStatusCode(v int32) *DescribeDiagnosisDimensionsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDiagnosisDimensionsResponse) SetBody(v *DescribeDiagnosisDimensionsResponseBody) *DescribeDiagnosisDimensionsResponse {
	s.Body = v
	return s
}

func (s *DescribeDiagnosisDimensionsResponse) Validate() error {
	return dara.Validate(s)
}

type iDescribeDiagnosisMonitorPerformanceRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *DescribeDiagnosisMonitorPerformanceRequest
	GetDBInstanceId() *string
	SetDatabase(v string) *DescribeDiagnosisMonitorPerformanceRequest
	GetDatabase() *string
	SetEndTime(v string) *DescribeDiagnosisMonitorPerformanceRequest
	GetEndTime() *string
	SetQueryCondition(v string) *DescribeDiagnosisMonitorPerformanceRequest
	GetQueryCondition() *string
	SetStartTime(v string) *DescribeDiagnosisMonitorPerformanceRequest
	GetStartTime() *string
	SetUser(v string) *DescribeDiagnosisMonitorPerformanceRequest
	GetUser() *string
}

type DescribeDiagnosisMonitorPerformanceRequest struct {
	// The ID of the instance.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the details of all AnalyticDB for PostgreSQL instances in a specific region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The name of the database.
	//
	// This parameter is required.
	//
	// example:
	//
	// adbtest
	Database *string `json:"Database,omitempty" xml:"Database,omitempty"`
	// The end of the time range to query. Specify the time in the *yyyy-MM-dd*T*HH:mm*Z format. The time must be in UTC. The end time must be later than the start time.
	//
	// example:
	//
	// 2022-05-07T07:59Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The filter condition on queries. Specify the value in the JSON format. Valid values:
	//
	// 	- `{"Type":"maxCost", "Value":"100"}`: filters the top 100 queries that are the most time-consuming.
	//
	// 	- `{"Type":"status","Value":"finished"}`: filters completed queries.
	//
	// 	- `{"Type":"status","Value":"running"}`: filters running queries.
	//
	// 	- `{"Type":"cost","Min":"30","Max":"50"}`: filters the queries that consume 30 milliseconds or more and less than 50 milliseconds. You can customize a filter condition by setting **Min*	- and **Max**.
	//
	//     	- If only **Min*	- is specified, the queries that consume a period of time that is greater than or equal to the Min value are filtered.
	//
	//     	- If only **Max*	- is specified, the queries that consume a period of time that is less than the Max value are filtered.
	//
	//     	- If both **Min*	- and **Max*	- are specified, the queries that consume a period of time that is greater than or equal to the **Min*	- value and less than the **Max*	- value are filtered.
	//
	// example:
	//
	// {"Type":"maxCost", "Value":"100"}
	QueryCondition *string `json:"QueryCondition,omitempty" xml:"QueryCondition,omitempty"`
	// The beginning of the time range to query. Specify the time in the *yyyy-MM-dd*T*HH:mm*Z format. The time must be in UTC.
	//
	// example:
	//
	// 2022-05-07T06:59Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The name of the database account.
	//
	// example:
	//
	// adbpguser
	User *string `json:"User,omitempty" xml:"User,omitempty"`
}

func (s DescribeDiagnosisMonitorPerformanceRequest) String() string {
	return dara.Prettify(s)
}

func (s DescribeDiagnosisMonitorPerformanceRequest) GoString() string {
	return s.String()
}

func (s *DescribeDiagnosisMonitorPerformanceRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *DescribeDiagnosisMonitorPerformanceRequest) GetDatabase() *string {
	return s.Database
}

func (s *DescribeDiagnosisMonitorPerformanceRequest) GetEndTime() *string {
	return s.EndTime
}

func (s *DescribeDiagnosisMonitorPerformanceRequest) GetQueryCondition() *string {
	return s.QueryCondition
}

func (s *DescribeDiagnosisMonitorPerformanceRequest) GetStartTime() *string {
	return s.StartTime
}

func (s *DescribeDiagnosisMonitorPerformanceRequest) GetUser() *string {
	return s.User
}

func (s *DescribeDiagnosisMonitorPerformanceRequest) SetDBInstanceId(v string) *DescribeDiagnosisMonitorPerformanceRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDiagnosisMonitorPerformanceRequest) SetDatabase(v string) *DescribeDiagnosisMonitorPerformanceRequest {
	s.Database = &v
	return s
}

func (s *DescribeDiagnosisMonitorPerformanceRequest) SetEndTime(v string) *DescribeDiagnosisMonitorPerformanceRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeDiagnosisMonitorPerformanceRequest) SetQueryCondition(v string) *DescribeDiagnosisMonitorPerformanceRequest {
	s.QueryCondition = &v
	return s
}

func (s *DescribeDiagnosisMonitorPerformanceRequest) SetStartTime(v string) *DescribeDiagnosisMonitorPerformanceRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeDiagnosisMonitorPerformanceRequest) SetUser(v string) *DescribeDiagnosisMonitorPerformanceRequest {
	s.User = &v
	return s
}

func (s *DescribeDiagnosisMonitorPerformanceRequest) Validate() error {
	return dara.Validate(s)
}

type iDescribeDiagnosisMonitorPerformanceResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetPerformances(v []*DescribeDiagnosisMonitorPerformanceResponseBodyPerformances) *DescribeDiagnosisMonitorPerformanceResponseBody
	GetPerformances() []*DescribeDiagnosisMonitorPerformanceResponseBodyPerformances
	SetPerformancesThreshold(v int32) *DescribeDiagnosisMonitorPerformanceResponseBody
	GetPerformancesThreshold() *int32
	SetPerformancesTruncated(v bool) *DescribeDiagnosisMonitorPerformanceResponseBody
	GetPerformancesTruncated() *bool
	SetRequestId(v string) *DescribeDiagnosisMonitorPerformanceResponseBody
	GetRequestId() *string
}

type DescribeDiagnosisMonitorPerformanceResponseBody struct {
	// Details of query execution.
	Performances []*DescribeDiagnosisMonitorPerformanceResponseBodyPerformances `json:"Performances,omitempty" xml:"Performances,omitempty" type:"Repeated"`
	// The threshold for the number of queries.
	//
	// example:
	//
	// 10000
	PerformancesThreshold *int32 `json:"PerformancesThreshold,omitempty" xml:"PerformancesThreshold,omitempty"`
	// Indicates whether the queries are truncated when the number of queries exceeds the threshold. Valid values:
	//
	// 	- **true**: The queries are truncated.
	//
	// 	- **false**: The queries are not truncated.
	//
	// example:
	//
	// false
	PerformancesTruncated *bool `json:"PerformancesTruncated,omitempty" xml:"PerformancesTruncated,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// B4CAF581-2AC7-41AD-8940-D56DF7AADF5B
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeDiagnosisMonitorPerformanceResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DescribeDiagnosisMonitorPerformanceResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDiagnosisMonitorPerformanceResponseBody) GetPerformances() []*DescribeDiagnosisMonitorPerformanceResponseBodyPerformances {
	return s.Performances
}

func (s *DescribeDiagnosisMonitorPerformanceResponseBody) GetPerformancesThreshold() *int32 {
	return s.PerformancesThreshold
}

func (s *DescribeDiagnosisMonitorPerformanceResponseBody) GetPerformancesTruncated() *bool {
	return s.PerformancesTruncated
}

func (s *DescribeDiagnosisMonitorPerformanceResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DescribeDiagnosisMonitorPerformanceResponseBody) SetPerformances(v []*DescribeDiagnosisMonitorPerformanceResponseBodyPerformances) *DescribeDiagnosisMonitorPerformanceResponseBody {
	s.Performances = v
	return s
}

func (s *DescribeDiagnosisMonitorPerformanceResponseBody) SetPerformancesThreshold(v int32) *DescribeDiagnosisMonitorPerformanceResponseBody {
	s.PerformancesThreshold = &v
	return s
}

func (s *DescribeDiagnosisMonitorPerformanceResponseBody) SetPerformancesTruncated(v bool) *DescribeDiagnosisMonitorPerformanceResponseBody {
	s.PerformancesTruncated = &v
	return s
}

func (s *DescribeDiagnosisMonitorPerformanceResponseBody) SetRequestId(v string) *DescribeDiagnosisMonitorPerformanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDiagnosisMonitorPerformanceResponseBody) Validate() error {
	return dara.Validate(s)
}

type DescribeDiagnosisMonitorPerformanceResponseBodyPerformances struct {
	// The execution duration of the query. Unit: milliseconds.
	//
	// example:
	//
	// 1
	Cost *int32 `json:"Cost,omitempty" xml:"Cost,omitempty"`
	// The name of the database.
	//
	// example:
	//
	// adbtest
	Database *string `json:"Database,omitempty" xml:"Database,omitempty"`
	// The ID of the query. It is a unique identifier of the query.
	//
	// example:
	//
	// 2022042612465401000000012903151998970
	QueryID *string `json:"QueryID,omitempty" xml:"QueryID,omitempty"`
	// The start time of the query. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.
	//
	// example:
	//
	// 1651877940000
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The execution state of the query. Valid values:
	//
	// 	- **running**: The query is being executed.
	//
	// 	- **finished**: The query is complete.
	//
	// example:
	//
	// finished
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The name of the database account.
	//
	// example:
	//
	// adbpguser
	User *string `json:"User,omitempty" xml:"User,omitempty"`
}

func (s DescribeDiagnosisMonitorPerformanceResponseBodyPerformances) String() string {
	return dara.Prettify(s)
}

func (s DescribeDiagnosisMonitorPerformanceResponseBodyPerformances) GoString() string {
	return s.String()
}

func (s *DescribeDiagnosisMonitorPerformanceResponseBodyPerformances) GetCost() *int32 {
	return s.Cost
}

func (s *DescribeDiagnosisMonitorPerformanceResponseBodyPerformances) GetDatabase() *string {
	return s.Database
}

func (s *DescribeDiagnosisMonitorPerformanceResponseBodyPerformances) GetQueryID() *string {
	return s.QueryID
}

func (s *DescribeDiagnosisMonitorPerformanceResponseBodyPerformances) GetStartTime() *int64 {
	return s.StartTime
}

func (s *DescribeDiagnosisMonitorPerformanceResponseBodyPerformances) GetStatus() *string {
	return s.Status
}

func (s *DescribeDiagnosisMonitorPerformanceResponseBodyPerformances) GetUser() *string {
	return s.User
}

func (s *DescribeDiagnosisMonitorPerformanceResponseBodyPerformances) SetCost(v int32) *DescribeDiagnosisMonitorPerformanceResponseBodyPerformances {
	s.Cost = &v
	return s
}

func (s *DescribeDiagnosisMonitorPerformanceResponseBodyPerformances) SetDatabase(v string) *DescribeDiagnosisMonitorPerformanceResponseBodyPerformances {
	s.Database = &v
	return s
}

func (s *DescribeDiagnosisMonitorPerformanceResponseBodyPerformances) SetQueryID(v string) *DescribeDiagnosisMonitorPerformanceResponseBodyPerformances {
	s.QueryID = &v
	return s
}

func (s *DescribeDiagnosisMonitorPerformanceResponseBodyPerformances) SetStartTime(v int64) *DescribeDiagnosisMonitorPerformanceResponseBodyPerformances {
	s.StartTime = &v
	return s
}

func (s *DescribeDiagnosisMonitorPerformanceResponseBodyPerformances) SetStatus(v string) *DescribeDiagnosisMonitorPerformanceResponseBodyPerformances {
	s.Status = &v
	return s
}

func (s *DescribeDiagnosisMonitorPerformanceResponseBodyPerformances) SetUser(v string) *DescribeDiagnosisMonitorPerformanceResponseBodyPerformances {
	s.User = &v
	return s
}

func (s *DescribeDiagnosisMonitorPerformanceResponseBodyPerformances) Validate() error {
	return dara.Validate(s)
}

type iDescribeDiagnosisMonitorPerformanceResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DescribeDiagnosisMonitorPerformanceResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DescribeDiagnosisMonitorPerformanceResponse
	GetStatusCode() *int32
	SetBody(v *DescribeDiagnosisMonitorPerformanceResponseBody) *DescribeDiagnosisMonitorPerformanceResponse
	GetBody() *DescribeDiagnosisMonitorPerformanceResponseBody
}

type DescribeDiagnosisMonitorPerformanceResponse struct {
	Headers    map[string]*string                               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeDiagnosisMonitorPerformanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeDiagnosisMonitorPerformanceResponse) String() string {
	return dara.Prettify(s)
}

func (s DescribeDiagnosisMonitorPerformanceResponse) GoString() string {
	return s.String()
}

func (s *DescribeDiagnosisMonitorPerformanceResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DescribeDiagnosisMonitorPerformanceResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DescribeDiagnosisMonitorPerformanceResponse) GetBody() *DescribeDiagnosisMonitorPerformanceResponseBody {
	return s.Body
}

func (s *DescribeDiagnosisMonitorPerformanceResponse) SetHeaders(v map[string]*string) *DescribeDiagnosisMonitorPerformanceResponse {
	s.Headers = v
	return s
}

func (s *DescribeDiagnosisMonitorPerformanceResponse) SetStatusCode(v int32) *DescribeDiagnosisMonitorPerformanceResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDiagnosisMonitorPerformanceResponse) SetBody(v *DescribeDiagnosisMonitorPerformanceResponseBody) *DescribeDiagnosisMonitorPerformanceResponse {
	s.Body = v
	return s
}

func (s *DescribeDiagnosisMonitorPerformanceResponse) Validate() error {
	return dara.Validate(s)
}

type iDescribeDiagnosisRecordsRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *DescribeDiagnosisRecordsRequest
	GetDBInstanceId() *string
	SetDatabase(v string) *DescribeDiagnosisRecordsRequest
	GetDatabase() *string
	SetEndTime(v string) *DescribeDiagnosisRecordsRequest
	GetEndTime() *string
	SetKeyword(v string) *DescribeDiagnosisRecordsRequest
	GetKeyword() *string
	SetOrder(v string) *DescribeDiagnosisRecordsRequest
	GetOrder() *string
	SetPageNumber(v int32) *DescribeDiagnosisRecordsRequest
	GetPageNumber() *int32
	SetPageSize(v int32) *DescribeDiagnosisRecordsRequest
	GetPageSize() *int32
	SetQueryCondition(v string) *DescribeDiagnosisRecordsRequest
	GetQueryCondition() *string
	SetStartTime(v string) *DescribeDiagnosisRecordsRequest
	GetStartTime() *string
	SetUser(v string) *DescribeDiagnosisRecordsRequest
	GetUser() *string
}

type DescribeDiagnosisRecordsRequest struct {
	// The instance ID.
	//
	// > You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The name of the database.
	//
	// This parameter is required.
	//
	// example:
	//
	// adbtest
	Database *string `json:"Database,omitempty" xml:"Database,omitempty"`
	// The end of the time range to query. Specify the time in the *yyyy-MM-dd*T*HH:mm*Z format. The time must be in UTC. The end time must be later than the start time.
	//
	// example:
	//
	// 2022-05-07T07:59Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The keyword of the SQL statement.
	//
	// example:
	//
	// SELECT
	Keyword *string `json:"Keyword,omitempty" xml:"Keyword,omitempty"`
	// The order of fields in the console. You do not need to specify this parameter.
	//
	// example:
	//
	// null
	Order *string `json:"Order,omitempty" xml:"Order,omitempty"`
	// The page number. Pages start from page 1. Default value: **1**.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. Valid values:
	//
	// 	- **30**
	//
	// 	- **50**
	//
	// 	- **100**
	//
	// Default value: **30**.
	//
	// example:
	//
	// 30
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The filter condition on queries. Specify the value in the JSON format. Valid values:
	//
	// 	- `{"Type":"maxCost", "Value":"100"}`: filters the top 100 queries that are the most time-consuming.
	//
	// 	- `{"Type":"status","Value":"finished"}`: filters completed queries.
	//
	// 	- `{"Type":"status","Value":"running"}`: filters running queries.
	//
	// 	- `{"Type":"cost","Min":"30","Max":"50"}`: filters the queries that consume a period of 30 milliseconds to less than 50 milliseconds. You can customize a filter condition by setting **Min*	- and **Max**.
	//
	//     	- If only **Min*	- is specified, the queries that consume a period of time that is greater than the Min value are filtered.
	//
	//     	- If only **Max*	- is specified, the queries that consume a period of time that is less than the Max value are filtered.
	//
	//     	- If both **Min*	- and **Max*	- are specified, the queries that consume a period of time that is greater than or equal to the **Min*	- value and less than or equal to the **Max*	- value are filtered.
	//
	// example:
	//
	// { "Type":"maxCost", "Value":"100" }
	QueryCondition *string `json:"QueryCondition,omitempty" xml:"QueryCondition,omitempty"`
	// The beginning of the time range to query. Specify the time in the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm*Z format. The time must be in UTC.
	//
	// example:
	//
	// 2022-05-07T06:59Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The name of the database account.
	//
	// example:
	//
	// adbpguser
	User *string `json:"User,omitempty" xml:"User,omitempty"`
}

func (s DescribeDiagnosisRecordsRequest) String() string {
	return dara.Prettify(s)
}

func (s DescribeDiagnosisRecordsRequest) GoString() string {
	return s.String()
}

func (s *DescribeDiagnosisRecordsRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *DescribeDiagnosisRecordsRequest) GetDatabase() *string {
	return s.Database
}

func (s *DescribeDiagnosisRecordsRequest) GetEndTime() *string {
	return s.EndTime
}

func (s *DescribeDiagnosisRecordsRequest) GetKeyword() *string {
	return s.Keyword
}

func (s *DescribeDiagnosisRecordsRequest) GetOrder() *string {
	return s.Order
}

func (s *DescribeDiagnosisRecordsRequest) GetPageNumber() *int32 {
	return s.PageNumber
}

func (s *DescribeDiagnosisRecordsRequest) GetPageSize() *int32 {
	return s.PageSize
}

func (s *DescribeDiagnosisRecordsRequest) GetQueryCondition() *string {
	return s.QueryCondition
}

func (s *DescribeDiagnosisRecordsRequest) GetStartTime() *string {
	return s.StartTime
}

func (s *DescribeDiagnosisRecordsRequest) GetUser() *string {
	return s.User
}

func (s *DescribeDiagnosisRecordsRequest) SetDBInstanceId(v string) *DescribeDiagnosisRecordsRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDiagnosisRecordsRequest) SetDatabase(v string) *DescribeDiagnosisRecordsRequest {
	s.Database = &v
	return s
}

func (s *DescribeDiagnosisRecordsRequest) SetEndTime(v string) *DescribeDiagnosisRecordsRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeDiagnosisRecordsRequest) SetKeyword(v string) *DescribeDiagnosisRecordsRequest {
	s.Keyword = &v
	return s
}

func (s *DescribeDiagnosisRecordsRequest) SetOrder(v string) *DescribeDiagnosisRecordsRequest {
	s.Order = &v
	return s
}

func (s *DescribeDiagnosisRecordsRequest) SetPageNumber(v int32) *DescribeDiagnosisRecordsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeDiagnosisRecordsRequest) SetPageSize(v int32) *DescribeDiagnosisRecordsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeDiagnosisRecordsRequest) SetQueryCondition(v string) *DescribeDiagnosisRecordsRequest {
	s.QueryCondition = &v
	return s
}

func (s *DescribeDiagnosisRecordsRequest) SetStartTime(v string) *DescribeDiagnosisRecordsRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeDiagnosisRecordsRequest) SetUser(v string) *DescribeDiagnosisRecordsRequest {
	s.User = &v
	return s
}

func (s *DescribeDiagnosisRecordsRequest) Validate() error {
	return dara.Validate(s)
}

type iDescribeDiagnosisRecordsResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetItems(v []*DescribeDiagnosisRecordsResponseBodyItems) *DescribeDiagnosisRecordsResponseBody
	GetItems() []*DescribeDiagnosisRecordsResponseBodyItems
	SetPageNumber(v int32) *DescribeDiagnosisRecordsResponseBody
	GetPageNumber() *int32
	SetRequestId(v string) *DescribeDiagnosisRecordsResponseBody
	GetRequestId() *string
	SetTotalCount(v int32) *DescribeDiagnosisRecordsResponseBody
	GetTotalCount() *int32
}

type DescribeDiagnosisRecordsResponseBody struct {
	// The threshold that determines whether the SQL statement must be truncated. The value is the number of characters.
	Items []*DescribeDiagnosisRecordsResponseBodyItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Repeated"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The request ID.
	//
	// example:
	//
	// B4CAF581-2AC7-41AD-8940-D56DF7AADF5B
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 100
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeDiagnosisRecordsResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DescribeDiagnosisRecordsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDiagnosisRecordsResponseBody) GetItems() []*DescribeDiagnosisRecordsResponseBodyItems {
	return s.Items
}

func (s *DescribeDiagnosisRecordsResponseBody) GetPageNumber() *int32 {
	return s.PageNumber
}

func (s *DescribeDiagnosisRecordsResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DescribeDiagnosisRecordsResponseBody) GetTotalCount() *int32 {
	return s.TotalCount
}

func (s *DescribeDiagnosisRecordsResponseBody) SetItems(v []*DescribeDiagnosisRecordsResponseBodyItems) *DescribeDiagnosisRecordsResponseBody {
	s.Items = v
	return s
}

func (s *DescribeDiagnosisRecordsResponseBody) SetPageNumber(v int32) *DescribeDiagnosisRecordsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeDiagnosisRecordsResponseBody) SetRequestId(v string) *DescribeDiagnosisRecordsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDiagnosisRecordsResponseBody) SetTotalCount(v int32) *DescribeDiagnosisRecordsResponseBody {
	s.TotalCount = &v
	return s
}

func (s *DescribeDiagnosisRecordsResponseBody) Validate() error {
	return dara.Validate(s)
}

type DescribeDiagnosisRecordsResponseBodyItems struct {
	// The name of the database.
	//
	// example:
	//
	// adbtest
	Database *string `json:"Database,omitempty" xml:"Database,omitempty"`
	// The execution duration of the query. Unit: seconds.
	//
	// example:
	//
	// 1
	Duration *int32 `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// The ID of the query. It is a unique identifier of the query.
	//
	// example:
	//
	// 2022042612465401000000012903151998970
	QueryID *string `json:"QueryID,omitempty" xml:"QueryID,omitempty"`
	// The SQL statement.
	//
	// example:
	//
	// SELECT 	- FROM t1,t2 WHERE t1.id=t2.id;
	SQLStmt *string `json:"SQLStmt,omitempty" xml:"SQLStmt,omitempty"`
	// Indicates whether the SQL statement needs to be truncated. Valid values:
	//
	// 	- **true**: The SQL statement needs to be truncated.
	//
	// 	- **false**: The SQL statement does not need to be truncated.
	//
	// example:
	//
	// false
	SQLTruncated *bool `json:"SQLTruncated,omitempty" xml:"SQLTruncated,omitempty"`
	// The threshold used to determine whether an SQL statement must be truncated. The value is the number of characters.
	//
	// example:
	//
	// 5120
	SQLTruncatedThreshold *int32 `json:"SQLTruncatedThreshold,omitempty" xml:"SQLTruncatedThreshold,omitempty"`
	// The ID of the session that contains the query.
	//
	// example:
	//
	// 50
	SessionID *string `json:"SessionID,omitempty" xml:"SessionID,omitempty"`
	// The start time of the query. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.
	//
	// example:
	//
	// 1651877940000
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The execution state of the query. Valid values:
	//
	// 	- **running**: The query is being executed.
	//
	// 	- **finished**: The query is complete.
	//
	// example:
	//
	// finished
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The name of the database account.
	//
	// example:
	//
	// adbpguser
	User *string `json:"User,omitempty" xml:"User,omitempty"`
}

func (s DescribeDiagnosisRecordsResponseBodyItems) String() string {
	return dara.Prettify(s)
}

func (s DescribeDiagnosisRecordsResponseBodyItems) GoString() string {
	return s.String()
}

func (s *DescribeDiagnosisRecordsResponseBodyItems) GetDatabase() *string {
	return s.Database
}

func (s *DescribeDiagnosisRecordsResponseBodyItems) GetDuration() *int32 {
	return s.Duration
}

func (s *DescribeDiagnosisRecordsResponseBodyItems) GetQueryID() *string {
	return s.QueryID
}

func (s *DescribeDiagnosisRecordsResponseBodyItems) GetSQLStmt() *string {
	return s.SQLStmt
}

func (s *DescribeDiagnosisRecordsResponseBodyItems) GetSQLTruncated() *bool {
	return s.SQLTruncated
}

func (s *DescribeDiagnosisRecordsResponseBodyItems) GetSQLTruncatedThreshold() *int32 {
	return s.SQLTruncatedThreshold
}

func (s *DescribeDiagnosisRecordsResponseBodyItems) GetSessionID() *string {
	return s.SessionID
}

func (s *DescribeDiagnosisRecordsResponseBodyItems) GetStartTime() *int64 {
	return s.StartTime
}

func (s *DescribeDiagnosisRecordsResponseBodyItems) GetStatus() *string {
	return s.Status
}

func (s *DescribeDiagnosisRecordsResponseBodyItems) GetUser() *string {
	return s.User
}

func (s *DescribeDiagnosisRecordsResponseBodyItems) SetDatabase(v string) *DescribeDiagnosisRecordsResponseBodyItems {
	s.Database = &v
	return s
}

func (s *DescribeDiagnosisRecordsResponseBodyItems) SetDuration(v int32) *DescribeDiagnosisRecordsResponseBodyItems {
	s.Duration = &v
	return s
}

func (s *DescribeDiagnosisRecordsResponseBodyItems) SetQueryID(v string) *DescribeDiagnosisRecordsResponseBodyItems {
	s.QueryID = &v
	return s
}

func (s *DescribeDiagnosisRecordsResponseBodyItems) SetSQLStmt(v string) *DescribeDiagnosisRecordsResponseBodyItems {
	s.SQLStmt = &v
	return s
}

func (s *DescribeDiagnosisRecordsResponseBodyItems) SetSQLTruncated(v bool) *DescribeDiagnosisRecordsResponseBodyItems {
	s.SQLTruncated = &v
	return s
}

func (s *DescribeDiagnosisRecordsResponseBodyItems) SetSQLTruncatedThreshold(v int32) *DescribeDiagnosisRecordsResponseBodyItems {
	s.SQLTruncatedThreshold = &v
	return s
}

func (s *DescribeDiagnosisRecordsResponseBodyItems) SetSessionID(v string) *DescribeDiagnosisRecordsResponseBodyItems {
	s.SessionID = &v
	return s
}

func (s *DescribeDiagnosisRecordsResponseBodyItems) SetStartTime(v int64) *DescribeDiagnosisRecordsResponseBodyItems {
	s.StartTime = &v
	return s
}

func (s *DescribeDiagnosisRecordsResponseBodyItems) SetStatus(v string) *DescribeDiagnosisRecordsResponseBodyItems {
	s.Status = &v
	return s
}

func (s *DescribeDiagnosisRecordsResponseBodyItems) SetUser(v string) *DescribeDiagnosisRecordsResponseBodyItems {
	s.User = &v
	return s
}

func (s *DescribeDiagnosisRecordsResponseBodyItems) Validate() error {
	return dara.Validate(s)
}

type iDescribeDiagnosisRecordsResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DescribeDiagnosisRecordsResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DescribeDiagnosisRecordsResponse
	GetStatusCode() *int32
	SetBody(v *DescribeDiagnosisRecordsResponseBody) *DescribeDiagnosisRecordsResponse
	GetBody() *DescribeDiagnosisRecordsResponseBody
}

type DescribeDiagnosisRecordsResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeDiagnosisRecordsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeDiagnosisRecordsResponse) String() string {
	return dara.Prettify(s)
}

func (s DescribeDiagnosisRecordsResponse) GoString() string {
	return s.String()
}

func (s *DescribeDiagnosisRecordsResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DescribeDiagnosisRecordsResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DescribeDiagnosisRecordsResponse) GetBody() *DescribeDiagnosisRecordsResponseBody {
	return s.Body
}

func (s *DescribeDiagnosisRecordsResponse) SetHeaders(v map[string]*string) *DescribeDiagnosisRecordsResponse {
	s.Headers = v
	return s
}

func (s *DescribeDiagnosisRecordsResponse) SetStatusCode(v int32) *DescribeDiagnosisRecordsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDiagnosisRecordsResponse) SetBody(v *DescribeDiagnosisRecordsResponseBody) *DescribeDiagnosisRecordsResponse {
	s.Body = v
	return s
}

func (s *DescribeDiagnosisRecordsResponse) Validate() error {
	return dara.Validate(s)
}

type iDescribeDiagnosisSQLInfoRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *DescribeDiagnosisSQLInfoRequest
	GetDBInstanceId() *string
	SetDatabase(v string) *DescribeDiagnosisSQLInfoRequest
	GetDatabase() *string
	SetQueryID(v string) *DescribeDiagnosisSQLInfoRequest
	GetQueryID() *string
}

type DescribeDiagnosisSQLInfoRequest struct {
	// The instance ID.
	//
	// > You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query details about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The name of the database.
	//
	// This parameter is required.
	//
	// example:
	//
	// adbtest
	Database *string `json:"Database,omitempty" xml:"Database,omitempty"`
	// The query ID. It is a unique identifier of the query.
	//
	// > You can call the [DescribeDiagnosisRecords](https://help.aliyun.com/document_detail/450511.html) operation to obtain query IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// 71403480878****
	QueryID *string `json:"QueryID,omitempty" xml:"QueryID,omitempty"`
}

func (s DescribeDiagnosisSQLInfoRequest) String() string {
	return dara.Prettify(s)
}

func (s DescribeDiagnosisSQLInfoRequest) GoString() string {
	return s.String()
}

func (s *DescribeDiagnosisSQLInfoRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *DescribeDiagnosisSQLInfoRequest) GetDatabase() *string {
	return s.Database
}

func (s *DescribeDiagnosisSQLInfoRequest) GetQueryID() *string {
	return s.QueryID
}

func (s *DescribeDiagnosisSQLInfoRequest) SetDBInstanceId(v string) *DescribeDiagnosisSQLInfoRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDiagnosisSQLInfoRequest) SetDatabase(v string) *DescribeDiagnosisSQLInfoRequest {
	s.Database = &v
	return s
}

func (s *DescribeDiagnosisSQLInfoRequest) SetQueryID(v string) *DescribeDiagnosisSQLInfoRequest {
	s.QueryID = &v
	return s
}

func (s *DescribeDiagnosisSQLInfoRequest) Validate() error {
	return dara.Validate(s)
}

type iDescribeDiagnosisSQLInfoResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetDatabase(v string) *DescribeDiagnosisSQLInfoResponseBody
	GetDatabase() *string
	SetDuration(v int32) *DescribeDiagnosisSQLInfoResponseBody
	GetDuration() *int32
	SetMaxOutputRows(v string) *DescribeDiagnosisSQLInfoResponseBody
	GetMaxOutputRows() *string
	SetQueryID(v string) *DescribeDiagnosisSQLInfoResponseBody
	GetQueryID() *string
	SetQueryPlan(v string) *DescribeDiagnosisSQLInfoResponseBody
	GetQueryPlan() *string
	SetRequestId(v string) *DescribeDiagnosisSQLInfoResponseBody
	GetRequestId() *string
	SetSQLStmt(v string) *DescribeDiagnosisSQLInfoResponseBody
	GetSQLStmt() *string
	SetSessionID(v string) *DescribeDiagnosisSQLInfoResponseBody
	GetSessionID() *string
	SetSortedMetrics(v string) *DescribeDiagnosisSQLInfoResponseBody
	GetSortedMetrics() *string
	SetStartTime(v int64) *DescribeDiagnosisSQLInfoResponseBody
	GetStartTime() *int64
	SetStatus(v string) *DescribeDiagnosisSQLInfoResponseBody
	GetStatus() *string
	SetTextPlan(v string) *DescribeDiagnosisSQLInfoResponseBody
	GetTextPlan() *string
	SetUser(v string) *DescribeDiagnosisSQLInfoResponseBody
	GetUser() *string
}

type DescribeDiagnosisSQLInfoResponseBody struct {
	// The name of the database.
	//
	// example:
	//
	// adbtest
	Database *string `json:"Database,omitempty" xml:"Database,omitempty"`
	// The execution duration of the query. Unit: seconds.
	//
	// example:
	//
	// 16
	Duration *int32 `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// The maximum number of output rows.
	//
	// example:
	//
	// 10
	MaxOutputRows *string `json:"MaxOutputRows,omitempty" xml:"MaxOutputRows,omitempty"`
	// The query ID.
	//
	// example:
	//
	// 71403480878****
	QueryID *string `json:"QueryID,omitempty" xml:"QueryID,omitempty"`
	// The information about the operator.
	//
	// example:
	//
	// {\\"children\\":********\\"startTime\\":1660719602199}
	QueryPlan *string `json:"QueryPlan,omitempty" xml:"QueryPlan,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 425AAA6A-63E0-1929-A1CE-3D9036CBC463
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The SQL statement.
	//
	// example:
	//
	// select n_live_tup, n_live_tup + n_dead_tup, pg_relation_size(table_name), last_vacuum from pg_stat_user_tables where relid = table_name::regclass
	SQLStmt *string `json:"SQLStmt,omitempty" xml:"SQLStmt,omitempty"`
	// The ID of the session that contains the query.
	//
	// example:
	//
	// 658****
	SessionID *string `json:"SessionID,omitempty" xml:"SessionID,omitempty"`
	// The sequence of metrics.
	//
	// example:
	//
	// {\\"costSort\\":******:\\"Seq Scan-9\\",\\"value\\":0.0}]}
	SortedMetrics *string `json:"SortedMetrics,omitempty" xml:"SortedMetrics,omitempty"`
	// The start time of the query. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// example:
	//
	// 1660719602199
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The execution state of the query. Valid values:
	//
	// 	- **running**
	//
	// 	- **finished**
	//
	// example:
	//
	// finished
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The information about the execution plan.
	//
	// example:
	//
	// ******
	TextPlan *string `json:"TextPlan,omitempty" xml:"TextPlan,omitempty"`
	// The username.
	//
	// example:
	//
	// adbpguser
	User *string `json:"User,omitempty" xml:"User,omitempty"`
}

func (s DescribeDiagnosisSQLInfoResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DescribeDiagnosisSQLInfoResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDiagnosisSQLInfoResponseBody) GetDatabase() *string {
	return s.Database
}

func (s *DescribeDiagnosisSQLInfoResponseBody) GetDuration() *int32 {
	return s.Duration
}

func (s *DescribeDiagnosisSQLInfoResponseBody) GetMaxOutputRows() *string {
	return s.MaxOutputRows
}

func (s *DescribeDiagnosisSQLInfoResponseBody) GetQueryID() *string {
	return s.QueryID
}

func (s *DescribeDiagnosisSQLInfoResponseBody) GetQueryPlan() *string {
	return s.QueryPlan
}

func (s *DescribeDiagnosisSQLInfoResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DescribeDiagnosisSQLInfoResponseBody) GetSQLStmt() *string {
	return s.SQLStmt
}

func (s *DescribeDiagnosisSQLInfoResponseBody) GetSessionID() *string {
	return s.SessionID
}

func (s *DescribeDiagnosisSQLInfoResponseBody) GetSortedMetrics() *string {
	return s.SortedMetrics
}

func (s *DescribeDiagnosisSQLInfoResponseBody) GetStartTime() *int64 {
	return s.StartTime
}

func (s *DescribeDiagnosisSQLInfoResponseBody) GetStatus() *string {
	return s.Status
}

func (s *DescribeDiagnosisSQLInfoResponseBody) GetTextPlan() *string {
	return s.TextPlan
}

func (s *DescribeDiagnosisSQLInfoResponseBody) GetUser() *string {
	return s.User
}

func (s *DescribeDiagnosisSQLInfoResponseBody) SetDatabase(v string) *DescribeDiagnosisSQLInfoResponseBody {
	s.Database = &v
	return s
}

func (s *DescribeDiagnosisSQLInfoResponseBody) SetDuration(v int32) *DescribeDiagnosisSQLInfoResponseBody {
	s.Duration = &v
	return s
}

func (s *DescribeDiagnosisSQLInfoResponseBody) SetMaxOutputRows(v string) *DescribeDiagnosisSQLInfoResponseBody {
	s.MaxOutputRows = &v
	return s
}

func (s *DescribeDiagnosisSQLInfoResponseBody) SetQueryID(v string) *DescribeDiagnosisSQLInfoResponseBody {
	s.QueryID = &v
	return s
}

func (s *DescribeDiagnosisSQLInfoResponseBody) SetQueryPlan(v string) *DescribeDiagnosisSQLInfoResponseBody {
	s.QueryPlan = &v
	return s
}

func (s *DescribeDiagnosisSQLInfoResponseBody) SetRequestId(v string) *DescribeDiagnosisSQLInfoResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDiagnosisSQLInfoResponseBody) SetSQLStmt(v string) *DescribeDiagnosisSQLInfoResponseBody {
	s.SQLStmt = &v
	return s
}

func (s *DescribeDiagnosisSQLInfoResponseBody) SetSessionID(v string) *DescribeDiagnosisSQLInfoResponseBody {
	s.SessionID = &v
	return s
}

func (s *DescribeDiagnosisSQLInfoResponseBody) SetSortedMetrics(v string) *DescribeDiagnosisSQLInfoResponseBody {
	s.SortedMetrics = &v
	return s
}

func (s *DescribeDiagnosisSQLInfoResponseBody) SetStartTime(v int64) *DescribeDiagnosisSQLInfoResponseBody {
	s.StartTime = &v
	return s
}

func (s *DescribeDiagnosisSQLInfoResponseBody) SetStatus(v string) *DescribeDiagnosisSQLInfoResponseBody {
	s.Status = &v
	return s
}

func (s *DescribeDiagnosisSQLInfoResponseBody) SetTextPlan(v string) *DescribeDiagnosisSQLInfoResponseBody {
	s.TextPlan = &v
	return s
}

func (s *DescribeDiagnosisSQLInfoResponseBody) SetUser(v string) *DescribeDiagnosisSQLInfoResponseBody {
	s.User = &v
	return s
}

func (s *DescribeDiagnosisSQLInfoResponseBody) Validate() error {
	return dara.Validate(s)
}

type iDescribeDiagnosisSQLInfoResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DescribeDiagnosisSQLInfoResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DescribeDiagnosisSQLInfoResponse
	GetStatusCode() *int32
	SetBody(v *DescribeDiagnosisSQLInfoResponseBody) *DescribeDiagnosisSQLInfoResponse
	GetBody() *DescribeDiagnosisSQLInfoResponseBody
}

type DescribeDiagnosisSQLInfoResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeDiagnosisSQLInfoResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeDiagnosisSQLInfoResponse) String() string {
	return dara.Prettify(s)
}

func (s DescribeDiagnosisSQLInfoResponse) GoString() string {
	return s.String()
}

func (s *DescribeDiagnosisSQLInfoResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DescribeDiagnosisSQLInfoResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DescribeDiagnosisSQLInfoResponse) GetBody() *DescribeDiagnosisSQLInfoResponseBody {
	return s.Body
}

func (s *DescribeDiagnosisSQLInfoResponse) SetHeaders(v map[string]*string) *DescribeDiagnosisSQLInfoResponse {
	s.Headers = v
	return s
}

func (s *DescribeDiagnosisSQLInfoResponse) SetStatusCode(v int32) *DescribeDiagnosisSQLInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDiagnosisSQLInfoResponse) SetBody(v *DescribeDiagnosisSQLInfoResponseBody) *DescribeDiagnosisSQLInfoResponse {
	s.Body = v
	return s
}

func (s *DescribeDiagnosisSQLInfoResponse) Validate() error {
	return dara.Validate(s)
}

type iDescribeDocumentRequest interface {
	dara.Model
	String() string
	GoString() string
	SetCollection(v string) *DescribeDocumentRequest
	GetCollection() *string
	SetDBInstanceId(v string) *DescribeDocumentRequest
	GetDBInstanceId() *string
	SetFileName(v string) *DescribeDocumentRequest
	GetFileName() *string
	SetNamespace(v string) *DescribeDocumentRequest
	GetNamespace() *string
	SetNamespacePassword(v string) *DescribeDocumentRequest
	GetNamespacePassword() *string
	SetOwnerId(v int64) *DescribeDocumentRequest
	GetOwnerId() *int64
	SetRegionId(v string) *DescribeDocumentRequest
	GetRegionId() *string
}

type DescribeDocumentRequest struct {
	// Document collection name.
	//
	// > Created by the [CreateDocumentCollection](https://help.aliyun.com/document_detail/2618448.html) API. You can use the [ListDocumentCollections](https://help.aliyun.com/document_detail/2618452.html) API to view the already created document collections.
	//
	// This parameter is required.
	//
	// example:
	//
	// document
	Collection *string `json:"Collection,omitempty" xml:"Collection,omitempty"`
	// Instance ID.
	//
	// > You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) API to view details of all AnalyticDB PostgreSQL instances in the target region, including the instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// Document name.
	//
	// > You can view the list of documents using the [ListDocuments](https://help.aliyun.com/document_detail/2618453.html) API.
	//
	// This parameter is required.
	//
	// example:
	//
	// music.txt
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// Namespace, default is public.
	//
	// > You can create it via the [CreateNamespace](https://help.aliyun.com/document_detail/2401495.html) API and view the list through the [ListNamespaces](https://help.aliyun.com/document_detail/2401502.html) API.
	//
	// example:
	//
	// mynamespace
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// Password for the namespace.
	//
	// > This value is specified by the [CreateNamespace](https://help.aliyun.com/document_detail/2401495.html) API.
	//
	// This parameter is required.
	//
	// example:
	//
	// testpassword
	NamespacePassword *string `json:"NamespacePassword,omitempty" xml:"NamespacePassword,omitempty"`
	OwnerId           *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// Region ID where the instance is located.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeDocumentRequest) String() string {
	return dara.Prettify(s)
}

func (s DescribeDocumentRequest) GoString() string {
	return s.String()
}

func (s *DescribeDocumentRequest) GetCollection() *string {
	return s.Collection
}

func (s *DescribeDocumentRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *DescribeDocumentRequest) GetFileName() *string {
	return s.FileName
}

func (s *DescribeDocumentRequest) GetNamespace() *string {
	return s.Namespace
}

func (s *DescribeDocumentRequest) GetNamespacePassword() *string {
	return s.NamespacePassword
}

func (s *DescribeDocumentRequest) GetOwnerId() *int64 {
	return s.OwnerId
}

func (s *DescribeDocumentRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *DescribeDocumentRequest) SetCollection(v string) *DescribeDocumentRequest {
	s.Collection = &v
	return s
}

func (s *DescribeDocumentRequest) SetDBInstanceId(v string) *DescribeDocumentRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDocumentRequest) SetFileName(v string) *DescribeDocumentRequest {
	s.FileName = &v
	return s
}

func (s *DescribeDocumentRequest) SetNamespace(v string) *DescribeDocumentRequest {
	s.Namespace = &v
	return s
}

func (s *DescribeDocumentRequest) SetNamespacePassword(v string) *DescribeDocumentRequest {
	s.NamespacePassword = &v
	return s
}

func (s *DescribeDocumentRequest) SetOwnerId(v int64) *DescribeDocumentRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeDocumentRequest) SetRegionId(v string) *DescribeDocumentRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeDocumentRequest) Validate() error {
	return dara.Validate(s)
}

type iDescribeDocumentResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetChunkFileUrl(v string) *DescribeDocumentResponseBody
	GetChunkFileUrl() *string
	SetDocsCount(v int32) *DescribeDocumentResponseBody
	GetDocsCount() *int32
	SetDocumentLoader(v string) *DescribeDocumentResponseBody
	GetDocumentLoader() *string
	SetFileExt(v string) *DescribeDocumentResponseBody
	GetFileExt() *string
	SetFileMd5(v string) *DescribeDocumentResponseBody
	GetFileMd5() *string
	SetFileMtime(v string) *DescribeDocumentResponseBody
	GetFileMtime() *string
	SetFileName(v string) *DescribeDocumentResponseBody
	GetFileName() *string
	SetFileSize(v int64) *DescribeDocumentResponseBody
	GetFileSize() *int64
	SetFileUrl(v string) *DescribeDocumentResponseBody
	GetFileUrl() *string
	SetFileVersion(v int32) *DescribeDocumentResponseBody
	GetFileVersion() *int32
	SetMessage(v string) *DescribeDocumentResponseBody
	GetMessage() *string
	SetPlainChunkFileUrl(v string) *DescribeDocumentResponseBody
	GetPlainChunkFileUrl() *string
	SetRequestId(v string) *DescribeDocumentResponseBody
	GetRequestId() *string
	SetSource(v string) *DescribeDocumentResponseBody
	GetSource() *string
	SetStatus(v string) *DescribeDocumentResponseBody
	GetStatus() *string
	SetTextSplitter(v string) *DescribeDocumentResponseBody
	GetTextSplitter() *string
}

type DescribeDocumentResponseBody struct {
	// URL of the split file, valid for 2 hours. The file format is JSONL, with each line formatted as `{"page_content":"*****", "metadata": {"**":"***","**":"***"}`.
	//
	// example:
	//
	// http://oss.xxx/music_chunk.jsonl
	ChunkFileUrl *string `json:"ChunkFileUrl,omitempty" xml:"ChunkFileUrl,omitempty"`
	// Number of documents after splitting.
	//
	// example:
	//
	// 100
	DocsCount *int32 `json:"DocsCount,omitempty" xml:"DocsCount,omitempty"`
	// Name of the document loader.
	//
	// example:
	//
	// RapidOCRPDFLoader
	DocumentLoader *string `json:"DocumentLoader,omitempty" xml:"DocumentLoader,omitempty"`
	// File extension.
	//
	// example:
	//
	// txt
	FileExt *string `json:"FileExt,omitempty" xml:"FileExt,omitempty"`
	// MD5 value of the file.
	//
	// example:
	//
	// b8078c9591413550f8963e37e24abcea
	FileMd5 *string `json:"FileMd5,omitempty" xml:"FileMd5,omitempty"`
	// The last modified time of the document.
	//
	// example:
	//
	// 2023-11-01 10:01:01.123456
	FileMtime *string `json:"FileMtime,omitempty" xml:"FileMtime,omitempty"`
	// File name.
	//
	// example:
	//
	// music.txt
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// File size, in bytes.
	//
	// example:
	//
	// 10000
	FileSize *int64 `json:"FileSize,omitempty" xml:"FileSize,omitempty"`
	// Download URL of the document, valid for 2 hours.
	//
	// example:
	//
	// http://oss.xxx/music.txt
	FileUrl *string `json:"FileUrl,omitempty" xml:"FileUrl,omitempty"`
	// Document version. This value increments by 1 each time the same document is updated and uploaded.
	//
	// example:
	//
	// 1
	FileVersion *int32 `json:"FileVersion,omitempty" xml:"FileVersion,omitempty"`
	// Detailed information returned by the API.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Download URL for the plain text (without metadata) after splitting, each line is a chunk, valid for 2 hours.
	//
	// example:
	//
	// http://oss.xxx/music_plain_chunk.txt
	PlainChunkFileUrl *string `json:"PlainChunkFileUrl,omitempty" xml:"PlainChunkFileUrl,omitempty"`
	// Request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Source of the document.
	//
	// example:
	//
	// OSS
	Source *string `json:"Source,omitempty" xml:"Source,omitempty"`
	// API execution status, with values as follows:
	//
	// - **success**: Execution succeeded.
	//
	// - **fail**: Execution failed.
	//
	// example:
	//
	// success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// Name of the text splitter.
	//
	// example:
	//
	// ChineseRecursiveTextSplitter
	TextSplitter *string `json:"TextSplitter,omitempty" xml:"TextSplitter,omitempty"`
}

func (s DescribeDocumentResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DescribeDocumentResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDocumentResponseBody) GetChunkFileUrl() *string {
	return s.ChunkFileUrl
}

func (s *DescribeDocumentResponseBody) GetDocsCount() *int32 {
	return s.DocsCount
}

func (s *DescribeDocumentResponseBody) GetDocumentLoader() *string {
	return s.DocumentLoader
}

func (s *DescribeDocumentResponseBody) GetFileExt() *string {
	return s.FileExt
}

func (s *DescribeDocumentResponseBody) GetFileMd5() *string {
	return s.FileMd5
}

func (s *DescribeDocumentResponseBody) GetFileMtime() *string {
	return s.FileMtime
}

func (s *DescribeDocumentResponseBody) GetFileName() *string {
	return s.FileName
}

func (s *DescribeDocumentResponseBody) GetFileSize() *int64 {
	return s.FileSize
}

func (s *DescribeDocumentResponseBody) GetFileUrl() *string {
	return s.FileUrl
}

func (s *DescribeDocumentResponseBody) GetFileVersion() *int32 {
	return s.FileVersion
}

func (s *DescribeDocumentResponseBody) GetMessage() *string {
	return s.Message
}

func (s *DescribeDocumentResponseBody) GetPlainChunkFileUrl() *string {
	return s.PlainChunkFileUrl
}

func (s *DescribeDocumentResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DescribeDocumentResponseBody) GetSource() *string {
	return s.Source
}

func (s *DescribeDocumentResponseBody) GetStatus() *string {
	return s.Status
}

func (s *DescribeDocumentResponseBody) GetTextSplitter() *string {
	return s.TextSplitter
}

func (s *DescribeDocumentResponseBody) SetChunkFileUrl(v string) *DescribeDocumentResponseBody {
	s.ChunkFileUrl = &v
	return s
}

func (s *DescribeDocumentResponseBody) SetDocsCount(v int32) *DescribeDocumentResponseBody {
	s.DocsCount = &v
	return s
}

func (s *DescribeDocumentResponseBody) SetDocumentLoader(v string) *DescribeDocumentResponseBody {
	s.DocumentLoader = &v
	return s
}

func (s *DescribeDocumentResponseBody) SetFileExt(v string) *DescribeDocumentResponseBody {
	s.FileExt = &v
	return s
}

func (s *DescribeDocumentResponseBody) SetFileMd5(v string) *DescribeDocumentResponseBody {
	s.FileMd5 = &v
	return s
}

func (s *DescribeDocumentResponseBody) SetFileMtime(v string) *DescribeDocumentResponseBody {
	s.FileMtime = &v
	return s
}

func (s *DescribeDocumentResponseBody) SetFileName(v string) *DescribeDocumentResponseBody {
	s.FileName = &v
	return s
}

func (s *DescribeDocumentResponseBody) SetFileSize(v int64) *DescribeDocumentResponseBody {
	s.FileSize = &v
	return s
}

func (s *DescribeDocumentResponseBody) SetFileUrl(v string) *DescribeDocumentResponseBody {
	s.FileUrl = &v
	return s
}

func (s *DescribeDocumentResponseBody) SetFileVersion(v int32) *DescribeDocumentResponseBody {
	s.FileVersion = &v
	return s
}

func (s *DescribeDocumentResponseBody) SetMessage(v string) *DescribeDocumentResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeDocumentResponseBody) SetPlainChunkFileUrl(v string) *DescribeDocumentResponseBody {
	s.PlainChunkFileUrl = &v
	return s
}

func (s *DescribeDocumentResponseBody) SetRequestId(v string) *DescribeDocumentResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDocumentResponseBody) SetSource(v string) *DescribeDocumentResponseBody {
	s.Source = &v
	return s
}

func (s *DescribeDocumentResponseBody) SetStatus(v string) *DescribeDocumentResponseBody {
	s.Status = &v
	return s
}

func (s *DescribeDocumentResponseBody) SetTextSplitter(v string) *DescribeDocumentResponseBody {
	s.TextSplitter = &v
	return s
}

func (s *DescribeDocumentResponseBody) Validate() error {
	return dara.Validate(s)
}

type iDescribeDocumentResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DescribeDocumentResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DescribeDocumentResponse
	GetStatusCode() *int32
	SetBody(v *DescribeDocumentResponseBody) *DescribeDocumentResponse
	GetBody() *DescribeDocumentResponseBody
}

type DescribeDocumentResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeDocumentResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeDocumentResponse) String() string {
	return dara.Prettify(s)
}

func (s DescribeDocumentResponse) GoString() string {
	return s.String()
}

func (s *DescribeDocumentResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DescribeDocumentResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DescribeDocumentResponse) GetBody() *DescribeDocumentResponseBody {
	return s.Body
}

func (s *DescribeDocumentResponse) SetHeaders(v map[string]*string) *DescribeDocumentResponse {
	s.Headers = v
	return s
}

func (s *DescribeDocumentResponse) SetStatusCode(v int32) *DescribeDocumentResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDocumentResponse) SetBody(v *DescribeDocumentResponseBody) *DescribeDocumentResponse {
	s.Body = v
	return s
}

func (s *DescribeDocumentResponse) Validate() error {
	return dara.Validate(s)
}

type iDescribeDownloadRecordsRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *DescribeDownloadRecordsRequest
	GetDBInstanceId() *string
	SetDownloadTaskType(v string) *DescribeDownloadRecordsRequest
	GetDownloadTaskType() *string
}

type DescribeDownloadRecordsRequest struct {
	// The instance ID.
	//
	// > You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId     *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	DownloadTaskType *string `json:"DownloadTaskType,omitempty" xml:"DownloadTaskType,omitempty"`
}

func (s DescribeDownloadRecordsRequest) String() string {
	return dara.Prettify(s)
}

func (s DescribeDownloadRecordsRequest) GoString() string {
	return s.String()
}

func (s *DescribeDownloadRecordsRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *DescribeDownloadRecordsRequest) GetDownloadTaskType() *string {
	return s.DownloadTaskType
}

func (s *DescribeDownloadRecordsRequest) SetDBInstanceId(v string) *DescribeDownloadRecordsRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDownloadRecordsRequest) SetDownloadTaskType(v string) *DescribeDownloadRecordsRequest {
	s.DownloadTaskType = &v
	return s
}

func (s *DescribeDownloadRecordsRequest) Validate() error {
	return dara.Validate(s)
}

type iDescribeDownloadRecordsResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetRecords(v []*DescribeDownloadRecordsResponseBodyRecords) *DescribeDownloadRecordsResponseBody
	GetRecords() []*DescribeDownloadRecordsResponseBodyRecords
	SetRequestId(v string) *DescribeDownloadRecordsResponseBody
	GetRequestId() *string
}

type DescribeDownloadRecordsResponseBody struct {
	// The URL that is used to download the file.
	Records []*DescribeDownloadRecordsResponseBodyRecords `json:"Records,omitempty" xml:"Records,omitempty" type:"Repeated"`
	// The request ID.
	//
	// example:
	//
	// B4CAF581-2AC7-41AD-8940-D56DF7AADF5B
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeDownloadRecordsResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DescribeDownloadRecordsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDownloadRecordsResponseBody) GetRecords() []*DescribeDownloadRecordsResponseBodyRecords {
	return s.Records
}

func (s *DescribeDownloadRecordsResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DescribeDownloadRecordsResponseBody) SetRecords(v []*DescribeDownloadRecordsResponseBodyRecords) *DescribeDownloadRecordsResponseBody {
	s.Records = v
	return s
}

func (s *DescribeDownloadRecordsResponseBody) SetRequestId(v string) *DescribeDownloadRecordsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDownloadRecordsResponseBody) Validate() error {
	return dara.Validate(s)
}

type DescribeDownloadRecordsResponseBodyRecords struct {
	// The ID of the download record.
	//
	// example:
	//
	// 1150
	DownloadId *int64 `json:"DownloadId,omitempty" xml:"DownloadId,omitempty"`
	// The URL that can be used to download the file.
	//
	// example:
	//
	// https://perth-download-task.oss-cn-beijing.aliyuncs.com/*****
	DownloadUrl *string `json:"DownloadUrl,omitempty" xml:"DownloadUrl,omitempty"`
	// The error message returned.
	//
	// example:
	//
	// Error message
	ExceptionMsg *string `json:"ExceptionMsg,omitempty" xml:"ExceptionMsg,omitempty"`
	// The name of the file.
	//
	// example:
	//
	// 20220509113448-20220509173448.csv
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// The state of the upload task. After you call the DownloadDiagnosisRecords operation, query diagnostic information is first uploaded to Object Storage Service (OSS). After the upload task is complete, the query diagnostic information can be downloaded. Valid values:
	//
	// 	- **running**: uploading
	//
	// 	- **finished**: uploaded
	//
	// 	- **failed**: failed
	//
	// example:
	//
	// finished
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeDownloadRecordsResponseBodyRecords) String() string {
	return dara.Prettify(s)
}

func (s DescribeDownloadRecordsResponseBodyRecords) GoString() string {
	return s.String()
}

func (s *DescribeDownloadRecordsResponseBodyRecords) GetDownloadId() *int64 {
	return s.DownloadId
}

func (s *DescribeDownloadRecordsResponseBodyRecords) GetDownloadUrl() *string {
	return s.DownloadUrl
}

func (s *DescribeDownloadRecordsResponseBodyRecords) GetExceptionMsg() *string {
	return s.ExceptionMsg
}

func (s *DescribeDownloadRecordsResponseBodyRecords) GetFileName() *string {
	return s.FileName
}

func (s *DescribeDownloadRecordsResponseBodyRecords) GetStatus() *string {
	return s.Status
}

func (s *DescribeDownloadRecordsResponseBodyRecords) SetDownloadId(v int64) *DescribeDownloadRecordsResponseBodyRecords {
	s.DownloadId = &v
	return s
}

func (s *DescribeDownloadRecordsResponseBodyRecords) SetDownloadUrl(v string) *DescribeDownloadRecordsResponseBodyRecords {
	s.DownloadUrl = &v
	return s
}

func (s *DescribeDownloadRecordsResponseBodyRecords) SetExceptionMsg(v string) *DescribeDownloadRecordsResponseBodyRecords {
	s.ExceptionMsg = &v
	return s
}

func (s *DescribeDownloadRecordsResponseBodyRecords) SetFileName(v string) *DescribeDownloadRecordsResponseBodyRecords {
	s.FileName = &v
	return s
}

func (s *DescribeDownloadRecordsResponseBodyRecords) SetStatus(v string) *DescribeDownloadRecordsResponseBodyRecords {
	s.Status = &v
	return s
}

func (s *DescribeDownloadRecordsResponseBodyRecords) Validate() error {
	return dara.Validate(s)
}

type iDescribeDownloadRecordsResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DescribeDownloadRecordsResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DescribeDownloadRecordsResponse
	GetStatusCode() *int32
	SetBody(v *DescribeDownloadRecordsResponseBody) *DescribeDownloadRecordsResponse
	GetBody() *DescribeDownloadRecordsResponseBody
}

type DescribeDownloadRecordsResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeDownloadRecordsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeDownloadRecordsResponse) String() string {
	return dara.Prettify(s)
}

func (s DescribeDownloadRecordsResponse) GoString() string {
	return s.String()
}

func (s *DescribeDownloadRecordsResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DescribeDownloadRecordsResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DescribeDownloadRecordsResponse) GetBody() *DescribeDownloadRecordsResponseBody {
	return s.Body
}

func (s *DescribeDownloadRecordsResponse) SetHeaders(v map[string]*string) *DescribeDownloadRecordsResponse {
	s.Headers = v
	return s
}

func (s *DescribeDownloadRecordsResponse) SetStatusCode(v int32) *DescribeDownloadRecordsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDownloadRecordsResponse) SetBody(v *DescribeDownloadRecordsResponseBody) *DescribeDownloadRecordsResponse {
	s.Body = v
	return s
}

func (s *DescribeDownloadRecordsResponse) Validate() error {
	return dara.Validate(s)
}

type iDescribeDownloadSQLLogsRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *DescribeDownloadSQLLogsRequest
	GetDBInstanceId() *string
}

type DescribeDownloadSQLLogsRequest struct {
	// Instance ID.
	//
	// > You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) API to view details of all AnalyticDB for PostgreSQL instances in the target region, including the instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
}

func (s DescribeDownloadSQLLogsRequest) String() string {
	return dara.Prettify(s)
}

func (s DescribeDownloadSQLLogsRequest) GoString() string {
	return s.String()
}

func (s *DescribeDownloadSQLLogsRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *DescribeDownloadSQLLogsRequest) SetDBInstanceId(v string) *DescribeDownloadSQLLogsRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDownloadSQLLogsRequest) Validate() error {
	return dara.Validate(s)
}

type iDescribeDownloadSQLLogsResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetRecords(v []*DescribeDownloadSQLLogsResponseBodyRecords) *DescribeDownloadSQLLogsResponseBody
	GetRecords() []*DescribeDownloadSQLLogsResponseBodyRecords
	SetRequestId(v string) *DescribeDownloadSQLLogsResponseBody
	GetRequestId() *string
}

type DescribeDownloadSQLLogsResponseBody struct {
	// List of download records.
	Records []*DescribeDownloadSQLLogsResponseBodyRecords `json:"Records,omitempty" xml:"Records,omitempty" type:"Repeated"`
	// Request ID.
	//
	// example:
	//
	// FDE9942A-D919-527B-B559-5D0F6F20CCEC
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeDownloadSQLLogsResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DescribeDownloadSQLLogsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDownloadSQLLogsResponseBody) GetRecords() []*DescribeDownloadSQLLogsResponseBodyRecords {
	return s.Records
}

func (s *DescribeDownloadSQLLogsResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DescribeDownloadSQLLogsResponseBody) SetRecords(v []*DescribeDownloadSQLLogsResponseBodyRecords) *DescribeDownloadSQLLogsResponseBody {
	s.Records = v
	return s
}

func (s *DescribeDownloadSQLLogsResponseBody) SetRequestId(v string) *DescribeDownloadSQLLogsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDownloadSQLLogsResponseBody) Validate() error {
	return dara.Validate(s)
}

type DescribeDownloadSQLLogsResponseBodyRecords struct {
	// Download record ID.
	//
	// example:
	//
	// 1150
	DownloadId *int64 `json:"DownloadId,omitempty" xml:"DownloadId,omitempty"`
	// Download link.
	//
	// example:
	//
	// https://perth-download-task.oss-cn-beijing.aliyuncs.com/*****
	DownloadUrl *string `json:"DownloadUrl,omitempty" xml:"DownloadUrl,omitempty"`
	// Error message.
	//
	// example:
	//
	// Error message
	ExceptionMsg *string `json:"ExceptionMsg,omitempty" xml:"ExceptionMsg,omitempty"`
	// File name.
	//
	// example:
	//
	// 20220509113448-20220509173448.csv
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// Task status, with possible values being:
	//
	// - **running**: Downloading.
	//
	// - **finished**: Completed.
	//
	// - **failed**: Download failed.
	//
	// example:
	//
	// finished
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeDownloadSQLLogsResponseBodyRecords) String() string {
	return dara.Prettify(s)
}

func (s DescribeDownloadSQLLogsResponseBodyRecords) GoString() string {
	return s.String()
}

func (s *DescribeDownloadSQLLogsResponseBodyRecords) GetDownloadId() *int64 {
	return s.DownloadId
}

func (s *DescribeDownloadSQLLogsResponseBodyRecords) GetDownloadUrl() *string {
	return s.DownloadUrl
}

func (s *DescribeDownloadSQLLogsResponseBodyRecords) GetExceptionMsg() *string {
	return s.ExceptionMsg
}

func (s *DescribeDownloadSQLLogsResponseBodyRecords) GetFileName() *string {
	return s.FileName
}

func (s *DescribeDownloadSQLLogsResponseBodyRecords) GetStatus() *string {
	return s.Status
}

func (s *DescribeDownloadSQLLogsResponseBodyRecords) SetDownloadId(v int64) *DescribeDownloadSQLLogsResponseBodyRecords {
	s.DownloadId = &v
	return s
}

func (s *DescribeDownloadSQLLogsResponseBodyRecords) SetDownloadUrl(v string) *DescribeDownloadSQLLogsResponseBodyRecords {
	s.DownloadUrl = &v
	return s
}

func (s *DescribeDownloadSQLLogsResponseBodyRecords) SetExceptionMsg(v string) *DescribeDownloadSQLLogsResponseBodyRecords {
	s.ExceptionMsg = &v
	return s
}

func (s *DescribeDownloadSQLLogsResponseBodyRecords) SetFileName(v string) *DescribeDownloadSQLLogsResponseBodyRecords {
	s.FileName = &v
	return s
}

func (s *DescribeDownloadSQLLogsResponseBodyRecords) SetStatus(v string) *DescribeDownloadSQLLogsResponseBodyRecords {
	s.Status = &v
	return s
}

func (s *DescribeDownloadSQLLogsResponseBodyRecords) Validate() error {
	return dara.Validate(s)
}

type iDescribeDownloadSQLLogsResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DescribeDownloadSQLLogsResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DescribeDownloadSQLLogsResponse
	GetStatusCode() *int32
	SetBody(v *DescribeDownloadSQLLogsResponseBody) *DescribeDownloadSQLLogsResponse
	GetBody() *DescribeDownloadSQLLogsResponseBody
}

type DescribeDownloadSQLLogsResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeDownloadSQLLogsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeDownloadSQLLogsResponse) String() string {
	return dara.Prettify(s)
}

func (s DescribeDownloadSQLLogsResponse) GoString() string {
	return s.String()
}

func (s *DescribeDownloadSQLLogsResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DescribeDownloadSQLLogsResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DescribeDownloadSQLLogsResponse) GetBody() *DescribeDownloadSQLLogsResponseBody {
	return s.Body
}

func (s *DescribeDownloadSQLLogsResponse) SetHeaders(v map[string]*string) *DescribeDownloadSQLLogsResponse {
	s.Headers = v
	return s
}

func (s *DescribeDownloadSQLLogsResponse) SetStatusCode(v int32) *DescribeDownloadSQLLogsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDownloadSQLLogsResponse) SetBody(v *DescribeDownloadSQLLogsResponseBody) *DescribeDownloadSQLLogsResponse {
	s.Body = v
	return s
}

func (s *DescribeDownloadSQLLogsResponse) Validate() error {
	return dara.Validate(s)
}

type iDescribeExternalDataServiceRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *DescribeExternalDataServiceRequest
	GetDBInstanceId() *string
	SetRegionId(v string) *DescribeExternalDataServiceRequest
	GetRegionId() *string
	SetServiceId(v string) *DescribeExternalDataServiceRequest
	GetServiceId() *string
}

type DescribeExternalDataServiceRequest struct {
	// The instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp10g78o9807yv9h3
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The region ID.
	//
	// >  You can call the [DescribeRegions](https://help.aliyun.com/document_detail/86912.html) operation to query the most recent region list.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The service ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	ServiceId *string `json:"ServiceId,omitempty" xml:"ServiceId,omitempty"`
}

func (s DescribeExternalDataServiceRequest) String() string {
	return dara.Prettify(s)
}

func (s DescribeExternalDataServiceRequest) GoString() string {
	return s.String()
}

func (s *DescribeExternalDataServiceRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *DescribeExternalDataServiceRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *DescribeExternalDataServiceRequest) GetServiceId() *string {
	return s.ServiceId
}

func (s *DescribeExternalDataServiceRequest) SetDBInstanceId(v string) *DescribeExternalDataServiceRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeExternalDataServiceRequest) SetRegionId(v string) *DescribeExternalDataServiceRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeExternalDataServiceRequest) SetServiceId(v string) *DescribeExternalDataServiceRequest {
	s.ServiceId = &v
	return s
}

func (s *DescribeExternalDataServiceRequest) Validate() error {
	return dara.Validate(s)
}

type iDescribeExternalDataServiceResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetCreateTime(v string) *DescribeExternalDataServiceResponseBody
	GetCreateTime() *string
	SetModifyTime(v string) *DescribeExternalDataServiceResponseBody
	GetModifyTime() *string
	SetRequestId(v string) *DescribeExternalDataServiceResponseBody
	GetRequestId() *string
	SetServiceDescription(v string) *DescribeExternalDataServiceResponseBody
	GetServiceDescription() *string
	SetServiceId(v string) *DescribeExternalDataServiceResponseBody
	GetServiceId() *string
	SetServiceName(v string) *DescribeExternalDataServiceResponseBody
	GetServiceName() *string
	SetServiceSpec(v string) *DescribeExternalDataServiceResponseBody
	GetServiceSpec() *string
	SetStatus(v string) *DescribeExternalDataServiceResponseBody
	GetStatus() *string
}

type DescribeExternalDataServiceResponseBody struct {
	// The time when the service was created.
	//
	// example:
	//
	// 2019-09-08T16:00:00Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The time when the service was last modified.
	//
	// example:
	//
	// 2019-09-08T17:00:00Z
	ModifyTime *string `json:"ModifyTime,omitempty" xml:"ModifyTime,omitempty"`
	// The request ID.
	//
	// example:
	//
	// B4CAF581-2AC7-41AD-8940-D56DF7AADF5B
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The description of the service.
	//
	// example:
	//
	// test-adbpgss
	ServiceDescription *string `json:"ServiceDescription,omitempty" xml:"ServiceDescription,omitempty"`
	// The service ID.
	//
	// example:
	//
	// 1
	ServiceId *string `json:"ServiceId,omitempty" xml:"ServiceId,omitempty"`
	// The name of the service.
	//
	// example:
	//
	// test-adbpgss
	ServiceName *string `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
	// The specifications of the service. Unit: compute units (CUs).
	//
	// example:
	//
	// 2
	ServiceSpec *string `json:"ServiceSpec,omitempty" xml:"ServiceSpec,omitempty"`
	// The status of the operation.
	//
	// example:
	//
	// Running
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeExternalDataServiceResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DescribeExternalDataServiceResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeExternalDataServiceResponseBody) GetCreateTime() *string {
	return s.CreateTime
}

func (s *DescribeExternalDataServiceResponseBody) GetModifyTime() *string {
	return s.ModifyTime
}

func (s *DescribeExternalDataServiceResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DescribeExternalDataServiceResponseBody) GetServiceDescription() *string {
	return s.ServiceDescription
}

func (s *DescribeExternalDataServiceResponseBody) GetServiceId() *string {
	return s.ServiceId
}

func (s *DescribeExternalDataServiceResponseBody) GetServiceName() *string {
	return s.ServiceName
}

func (s *DescribeExternalDataServiceResponseBody) GetServiceSpec() *string {
	return s.ServiceSpec
}

func (s *DescribeExternalDataServiceResponseBody) GetStatus() *string {
	return s.Status
}

func (s *DescribeExternalDataServiceResponseBody) SetCreateTime(v string) *DescribeExternalDataServiceResponseBody {
	s.CreateTime = &v
	return s
}

func (s *DescribeExternalDataServiceResponseBody) SetModifyTime(v string) *DescribeExternalDataServiceResponseBody {
	s.ModifyTime = &v
	return s
}

func (s *DescribeExternalDataServiceResponseBody) SetRequestId(v string) *DescribeExternalDataServiceResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeExternalDataServiceResponseBody) SetServiceDescription(v string) *DescribeExternalDataServiceResponseBody {
	s.ServiceDescription = &v
	return s
}

func (s *DescribeExternalDataServiceResponseBody) SetServiceId(v string) *DescribeExternalDataServiceResponseBody {
	s.ServiceId = &v
	return s
}

func (s *DescribeExternalDataServiceResponseBody) SetServiceName(v string) *DescribeExternalDataServiceResponseBody {
	s.ServiceName = &v
	return s
}

func (s *DescribeExternalDataServiceResponseBody) SetServiceSpec(v string) *DescribeExternalDataServiceResponseBody {
	s.ServiceSpec = &v
	return s
}

func (s *DescribeExternalDataServiceResponseBody) SetStatus(v string) *DescribeExternalDataServiceResponseBody {
	s.Status = &v
	return s
}

func (s *DescribeExternalDataServiceResponseBody) Validate() error {
	return dara.Validate(s)
}

type iDescribeExternalDataServiceResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DescribeExternalDataServiceResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DescribeExternalDataServiceResponse
	GetStatusCode() *int32
	SetBody(v *DescribeExternalDataServiceResponseBody) *DescribeExternalDataServiceResponse
	GetBody() *DescribeExternalDataServiceResponseBody
}

type DescribeExternalDataServiceResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeExternalDataServiceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeExternalDataServiceResponse) String() string {
	return dara.Prettify(s)
}

func (s DescribeExternalDataServiceResponse) GoString() string {
	return s.String()
}

func (s *DescribeExternalDataServiceResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DescribeExternalDataServiceResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DescribeExternalDataServiceResponse) GetBody() *DescribeExternalDataServiceResponseBody {
	return s.Body
}

func (s *DescribeExternalDataServiceResponse) SetHeaders(v map[string]*string) *DescribeExternalDataServiceResponse {
	s.Headers = v
	return s
}

func (s *DescribeExternalDataServiceResponse) SetStatusCode(v int32) *DescribeExternalDataServiceResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeExternalDataServiceResponse) SetBody(v *DescribeExternalDataServiceResponseBody) *DescribeExternalDataServiceResponse {
	s.Body = v
	return s
}

func (s *DescribeExternalDataServiceResponse) Validate() error {
	return dara.Validate(s)
}

type iDescribeHadoopClustersInSameNetRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *DescribeHadoopClustersInSameNetRequest
	GetDBInstanceId() *string
	SetRegionId(v string) *DescribeHadoopClustersInSameNetRequest
	GetRegionId() *string
}

type DescribeHadoopClustersInSameNetRequest struct {
	// The instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The region ID.
	//
	// example:
	//
	// cn-beijing
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeHadoopClustersInSameNetRequest) String() string {
	return dara.Prettify(s)
}

func (s DescribeHadoopClustersInSameNetRequest) GoString() string {
	return s.String()
}

func (s *DescribeHadoopClustersInSameNetRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *DescribeHadoopClustersInSameNetRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *DescribeHadoopClustersInSameNetRequest) SetDBInstanceId(v string) *DescribeHadoopClustersInSameNetRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeHadoopClustersInSameNetRequest) SetRegionId(v string) *DescribeHadoopClustersInSameNetRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeHadoopClustersInSameNetRequest) Validate() error {
	return dara.Validate(s)
}

type iDescribeHadoopClustersInSameNetResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetClusters(v []*string) *DescribeHadoopClustersInSameNetResponseBody
	GetClusters() []*string
	SetRequestId(v string) *DescribeHadoopClustersInSameNetResponseBody
	GetRequestId() *string
}

type DescribeHadoopClustersInSameNetResponseBody struct {
	Clusters []*string `json:"Clusters,omitempty" xml:"Clusters,omitempty" type:"Repeated"`
	// The request ID.
	//
	// example:
	//
	// B4CAF581-2AC7-41AD-8940-D56DF7AADF5B
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeHadoopClustersInSameNetResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DescribeHadoopClustersInSameNetResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeHadoopClustersInSameNetResponseBody) GetClusters() []*string {
	return s.Clusters
}

func (s *DescribeHadoopClustersInSameNetResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DescribeHadoopClustersInSameNetResponseBody) SetClusters(v []*string) *DescribeHadoopClustersInSameNetResponseBody {
	s.Clusters = v
	return s
}

func (s *DescribeHadoopClustersInSameNetResponseBody) SetRequestId(v string) *DescribeHadoopClustersInSameNetResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeHadoopClustersInSameNetResponseBody) Validate() error {
	return dara.Validate(s)
}

type iDescribeHadoopClustersInSameNetResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DescribeHadoopClustersInSameNetResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DescribeHadoopClustersInSameNetResponse
	GetStatusCode() *int32
	SetBody(v *DescribeHadoopClustersInSameNetResponseBody) *DescribeHadoopClustersInSameNetResponse
	GetBody() *DescribeHadoopClustersInSameNetResponseBody
}

type DescribeHadoopClustersInSameNetResponse struct {
	Headers    map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeHadoopClustersInSameNetResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeHadoopClustersInSameNetResponse) String() string {
	return dara.Prettify(s)
}

func (s DescribeHadoopClustersInSameNetResponse) GoString() string {
	return s.String()
}

func (s *DescribeHadoopClustersInSameNetResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DescribeHadoopClustersInSameNetResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DescribeHadoopClustersInSameNetResponse) GetBody() *DescribeHadoopClustersInSameNetResponseBody {
	return s.Body
}

func (s *DescribeHadoopClustersInSameNetResponse) SetHeaders(v map[string]*string) *DescribeHadoopClustersInSameNetResponse {
	s.Headers = v
	return s
}

func (s *DescribeHadoopClustersInSameNetResponse) SetStatusCode(v int32) *DescribeHadoopClustersInSameNetResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeHadoopClustersInSameNetResponse) SetBody(v *DescribeHadoopClustersInSameNetResponseBody) *DescribeHadoopClustersInSameNetResponse {
	s.Body = v
	return s
}

func (s *DescribeHadoopClustersInSameNetResponse) Validate() error {
	return dara.Validate(s)
}

type iDescribeHadoopConfigsRequest interface {
	dara.Model
	String() string
	GoString() string
	SetConfigName(v string) *DescribeHadoopConfigsRequest
	GetConfigName() *string
	SetDBInstanceId(v string) *DescribeHadoopConfigsRequest
	GetDBInstanceId() *string
	SetEmrInstanceId(v string) *DescribeHadoopConfigsRequest
	GetEmrInstanceId() *string
	SetRegionId(v string) *DescribeHadoopConfigsRequest
	GetRegionId() *string
}

type DescribeHadoopConfigsRequest struct {
	// The name of the configuration file. Valid values:
	//
	// 	- hdfs-site
	//
	// 	- core-site
	//
	// 	- yarn-site
	//
	// 	- mapred-site
	//
	// 	- hive-site
	//
	// This parameter is required.
	//
	// example:
	//
	// hdfs-site
	ConfigName *string `json:"ConfigName,omitempty" xml:"ConfigName,omitempty"`
	// The instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The E-MapReduce (EMR) Hadoop cluster ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// c-xxx
	EmrInstanceId *string `json:"EmrInstanceId,omitempty" xml:"EmrInstanceId,omitempty"`
	// The region ID of the instance.
	//
	// >  You can call the [DescribeRegions](https://help.aliyun.com/document_detail/86912.html) operation to query the most recent region list.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeHadoopConfigsRequest) String() string {
	return dara.Prettify(s)
}

func (s DescribeHadoopConfigsRequest) GoString() string {
	return s.String()
}

func (s *DescribeHadoopConfigsRequest) GetConfigName() *string {
	return s.ConfigName
}

func (s *DescribeHadoopConfigsRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *DescribeHadoopConfigsRequest) GetEmrInstanceId() *string {
	return s.EmrInstanceId
}

func (s *DescribeHadoopConfigsRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *DescribeHadoopConfigsRequest) SetConfigName(v string) *DescribeHadoopConfigsRequest {
	s.ConfigName = &v
	return s
}

func (s *DescribeHadoopConfigsRequest) SetDBInstanceId(v string) *DescribeHadoopConfigsRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeHadoopConfigsRequest) SetEmrInstanceId(v string) *DescribeHadoopConfigsRequest {
	s.EmrInstanceId = &v
	return s
}

func (s *DescribeHadoopConfigsRequest) SetRegionId(v string) *DescribeHadoopConfigsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeHadoopConfigsRequest) Validate() error {
	return dara.Validate(s)
}

type iDescribeHadoopConfigsResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetConfigName(v string) *DescribeHadoopConfigsResponseBody
	GetConfigName() *string
	SetConfigValue(v string) *DescribeHadoopConfigsResponseBody
	GetConfigValue() *string
	SetRequestId(v string) *DescribeHadoopConfigsResponseBody
	GetRequestId() *string
}

type DescribeHadoopConfigsResponseBody struct {
	// The name of the configuration file. Valid values:
	//
	// 	- hdfs-site
	//
	// 	- core-site
	//
	// 	- yarn-site
	//
	// 	- mapred-site
	//
	// 	- hive-site
	//
	// example:
	//
	// hdfs-site
	ConfigName *string `json:"ConfigName,omitempty" xml:"ConfigName,omitempty"`
	// The configuration value.
	//
	// example:
	//
	// <?xml version="1.0"?>
	//
	// <configuration>
	//
	//     <property>
	ConfigValue *string `json:"ConfigValue,omitempty" xml:"ConfigValue,omitempty"`
	// The request ID.
	//
	// example:
	//
	// B4CAF581-2AC7-41AD-8940-D56DF7AADF5B
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeHadoopConfigsResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DescribeHadoopConfigsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeHadoopConfigsResponseBody) GetConfigName() *string {
	return s.ConfigName
}

func (s *DescribeHadoopConfigsResponseBody) GetConfigValue() *string {
	return s.ConfigValue
}

func (s *DescribeHadoopConfigsResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DescribeHadoopConfigsResponseBody) SetConfigName(v string) *DescribeHadoopConfigsResponseBody {
	s.ConfigName = &v
	return s
}

func (s *DescribeHadoopConfigsResponseBody) SetConfigValue(v string) *DescribeHadoopConfigsResponseBody {
	s.ConfigValue = &v
	return s
}

func (s *DescribeHadoopConfigsResponseBody) SetRequestId(v string) *DescribeHadoopConfigsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeHadoopConfigsResponseBody) Validate() error {
	return dara.Validate(s)
}

type iDescribeHadoopConfigsResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DescribeHadoopConfigsResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DescribeHadoopConfigsResponse
	GetStatusCode() *int32
	SetBody(v *DescribeHadoopConfigsResponseBody) *DescribeHadoopConfigsResponse
	GetBody() *DescribeHadoopConfigsResponseBody
}

type DescribeHadoopConfigsResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeHadoopConfigsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeHadoopConfigsResponse) String() string {
	return dara.Prettify(s)
}

func (s DescribeHadoopConfigsResponse) GoString() string {
	return s.String()
}

func (s *DescribeHadoopConfigsResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DescribeHadoopConfigsResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DescribeHadoopConfigsResponse) GetBody() *DescribeHadoopConfigsResponseBody {
	return s.Body
}

func (s *DescribeHadoopConfigsResponse) SetHeaders(v map[string]*string) *DescribeHadoopConfigsResponse {
	s.Headers = v
	return s
}

func (s *DescribeHadoopConfigsResponse) SetStatusCode(v int32) *DescribeHadoopConfigsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeHadoopConfigsResponse) SetBody(v *DescribeHadoopConfigsResponseBody) *DescribeHadoopConfigsResponse {
	s.Body = v
	return s
}

func (s *DescribeHadoopConfigsResponse) Validate() error {
	return dara.Validate(s)
}

type iDescribeHadoopDataSourceRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *DescribeHadoopDataSourceRequest
	GetDBInstanceId() *string
	SetDataSourceId(v string) *DescribeHadoopDataSourceRequest
	GetDataSourceId() *string
	SetRegionId(v string) *DescribeHadoopDataSourceRequest
	GetRegionId() *string
}

type DescribeHadoopDataSourceRequest struct {
	// The instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The data source ID.
	//
	// example:
	//
	// 123
	DataSourceId *string `json:"DataSourceId,omitempty" xml:"DataSourceId,omitempty"`
	// The region ID of the instance.
	//
	// >  You can call the [DescribeRegions](https://help.aliyun.com/document_detail/2361846.html) operation to query the most recent region list.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeHadoopDataSourceRequest) String() string {
	return dara.Prettify(s)
}

func (s DescribeHadoopDataSourceRequest) GoString() string {
	return s.String()
}

func (s *DescribeHadoopDataSourceRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *DescribeHadoopDataSourceRequest) GetDataSourceId() *string {
	return s.DataSourceId
}

func (s *DescribeHadoopDataSourceRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *DescribeHadoopDataSourceRequest) SetDBInstanceId(v string) *DescribeHadoopDataSourceRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeHadoopDataSourceRequest) SetDataSourceId(v string) *DescribeHadoopDataSourceRequest {
	s.DataSourceId = &v
	return s
}

func (s *DescribeHadoopDataSourceRequest) SetRegionId(v string) *DescribeHadoopDataSourceRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeHadoopDataSourceRequest) Validate() error {
	return dara.Validate(s)
}

type iDescribeHadoopDataSourceResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetCreateTime(v string) *DescribeHadoopDataSourceResponseBody
	GetCreateTime() *string
	SetDataSourceDescription(v string) *DescribeHadoopDataSourceResponseBody
	GetDataSourceDescription() *string
	SetDataSourceDir(v string) *DescribeHadoopDataSourceResponseBody
	GetDataSourceDir() *string
	SetDataSourceId(v string) *DescribeHadoopDataSourceResponseBody
	GetDataSourceId() *string
	SetDataSourceName(v string) *DescribeHadoopDataSourceResponseBody
	GetDataSourceName() *string
	SetDataSourceStatus(v string) *DescribeHadoopDataSourceResponseBody
	GetDataSourceStatus() *string
	SetDataSourceType(v string) *DescribeHadoopDataSourceResponseBody
	GetDataSourceType() *string
	SetEmrInstanceId(v string) *DescribeHadoopDataSourceResponseBody
	GetEmrInstanceId() *string
	SetExternalDataServiceId(v string) *DescribeHadoopDataSourceResponseBody
	GetExternalDataServiceId() *string
	SetHDFSConf(v string) *DescribeHadoopDataSourceResponseBody
	GetHDFSConf() *string
	SetHadoopCoreConf(v string) *DescribeHadoopDataSourceResponseBody
	GetHadoopCoreConf() *string
	SetHadoopCreateType(v string) *DescribeHadoopDataSourceResponseBody
	GetHadoopCreateType() *string
	SetHadoopHostsAddress(v string) *DescribeHadoopDataSourceResponseBody
	GetHadoopHostsAddress() *string
	SetHiveConf(v string) *DescribeHadoopDataSourceResponseBody
	GetHiveConf() *string
	SetMapReduceConf(v string) *DescribeHadoopDataSourceResponseBody
	GetMapReduceConf() *string
	SetModifyTime(v string) *DescribeHadoopDataSourceResponseBody
	GetModifyTime() *string
	SetRequestId(v string) *DescribeHadoopDataSourceResponseBody
	GetRequestId() *string
	SetStatusMessage(v string) *DescribeHadoopDataSourceResponseBody
	GetStatusMessage() *string
	SetYarnConf(v string) *DescribeHadoopDataSourceResponseBody
	GetYarnConf() *string
}

type DescribeHadoopDataSourceResponseBody struct {
	// The time when the service was created.
	//
	// example:
	//
	// 2019-09-08T16:00:00Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The description of the service. The description can be up to 256 characters in length.
	//
	// example:
	//
	// pxf for hdfs data source
	DataSourceDescription *string `json:"DataSourceDescription,omitempty" xml:"DataSourceDescription,omitempty"`
	// The service directory in which Hadoop-related configuration files are stored.
	//
	// example:
	//
	// HadoopDir
	DataSourceDir *string `json:"DataSourceDir,omitempty" xml:"DataSourceDir,omitempty"`
	// The data source ID.
	//
	// example:
	//
	// 123
	DataSourceId *string `json:"DataSourceId,omitempty" xml:"DataSourceId,omitempty"`
	// The name of the service.
	//
	// example:
	//
	// hdfs_pxf
	DataSourceName *string `json:"DataSourceName,omitempty" xml:"DataSourceName,omitempty"`
	// The status of the service. Valid values:
	//
	// 	- Init
	//
	// 	- Running
	//
	// 	- Exception
	//
	// example:
	//
	// Running
	DataSourceStatus *string `json:"DataSourceStatus,omitempty" xml:"DataSourceStatus,omitempty"`
	// The type of the data source.
	//
	// example:
	//
	// hive
	DataSourceType *string `json:"DataSourceType,omitempty" xml:"DataSourceType,omitempty"`
	// The E-MapReduce (EMR) Hadoop cluster ID.
	//
	// example:
	//
	// c-1234567
	EmrInstanceId *string `json:"EmrInstanceId,omitempty" xml:"EmrInstanceId,omitempty"`
	// The ID of the external data service.
	//
	// example:
	//
	// 2988
	ExternalDataServiceId *string `json:"ExternalDataServiceId,omitempty" xml:"ExternalDataServiceId,omitempty"`
	// The content of the Hadoop hdfs-site.xml file.
	//
	// example:
	//
	// xxxxxx
	HDFSConf *string `json:"HDFSConf,omitempty" xml:"HDFSConf,omitempty"`
	// The content of the Hadoop core-site.xml file.
	//
	// example:
	//
	// xxxxxx
	HadoopCoreConf *string `json:"HadoopCoreConf,omitempty" xml:"HadoopCoreConf,omitempty"`
	// The type of the external service. Valid values:
	//
	// 	- emr
	//
	// 	- selfCreate
	//
	// example:
	//
	// HDFS
	HadoopCreateType *string `json:"HadoopCreateType,omitempty" xml:"HadoopCreateType,omitempty"`
	// The IP address and hostname of the Hadoop cluster (data source) in the /etc/hosts file.
	//
	// example:
	//
	// 127.0.0.1 localhost
	HadoopHostsAddress *string `json:"HadoopHostsAddress,omitempty" xml:"HadoopHostsAddress,omitempty"`
	// The content of the Hadoop hive-site.xml file.
	//
	// example:
	//
	// xxxxxx
	HiveConf *string `json:"HiveConf,omitempty" xml:"HiveConf,omitempty"`
	// The content of the Hadoop mapred-site.xml file.
	//
	// example:
	//
	// xxxxxx
	MapReduceConf *string `json:"MapReduceConf,omitempty" xml:"MapReduceConf,omitempty"`
	// The time when the data source was last modified.
	//
	// example:
	//
	// 2024-08-23T02:11:47Z
	ModifyTime *string `json:"ModifyTime,omitempty" xml:"ModifyTime,omitempty"`
	// The request ID.
	//
	// example:
	//
	// B4CAF581-2AC7-41AD-8940-D56DF7AADF5B
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The information about the service status. For example, if the service is in the exception state, the cause of the exception is displayed. If the service is in the running state, this parameter is left empty.
	//
	// example:
	//
	// ""
	StatusMessage *string `json:"StatusMessage,omitempty" xml:"StatusMessage,omitempty"`
	// The content of the Hadoop yarn-site.xml file.
	//
	// example:
	//
	// xxxxxx
	YarnConf *string `json:"YarnConf,omitempty" xml:"YarnConf,omitempty"`
}

func (s DescribeHadoopDataSourceResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DescribeHadoopDataSourceResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeHadoopDataSourceResponseBody) GetCreateTime() *string {
	return s.CreateTime
}

func (s *DescribeHadoopDataSourceResponseBody) GetDataSourceDescription() *string {
	return s.DataSourceDescription
}

func (s *DescribeHadoopDataSourceResponseBody) GetDataSourceDir() *string {
	return s.DataSourceDir
}

func (s *DescribeHadoopDataSourceResponseBody) GetDataSourceId() *string {
	return s.DataSourceId
}

func (s *DescribeHadoopDataSourceResponseBody) GetDataSourceName() *string {
	return s.DataSourceName
}

func (s *DescribeHadoopDataSourceResponseBody) GetDataSourceStatus() *string {
	return s.DataSourceStatus
}

func (s *DescribeHadoopDataSourceResponseBody) GetDataSourceType() *string {
	return s.DataSourceType
}

func (s *DescribeHadoopDataSourceResponseBody) GetEmrInstanceId() *string {
	return s.EmrInstanceId
}

func (s *DescribeHadoopDataSourceResponseBody) GetExternalDataServiceId() *string {
	return s.ExternalDataServiceId
}

func (s *DescribeHadoopDataSourceResponseBody) GetHDFSConf() *string {
	return s.HDFSConf
}

func (s *DescribeHadoopDataSourceResponseBody) GetHadoopCoreConf() *string {
	return s.HadoopCoreConf
}

func (s *DescribeHadoopDataSourceResponseBody) GetHadoopCreateType() *string {
	return s.HadoopCreateType
}

func (s *DescribeHadoopDataSourceResponseBody) GetHadoopHostsAddress() *string {
	return s.HadoopHostsAddress
}

func (s *DescribeHadoopDataSourceResponseBody) GetHiveConf() *string {
	return s.HiveConf
}

func (s *DescribeHadoopDataSourceResponseBody) GetMapReduceConf() *string {
	return s.MapReduceConf
}

func (s *DescribeHadoopDataSourceResponseBody) GetModifyTime() *string {
	return s.ModifyTime
}

func (s *DescribeHadoopDataSourceResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DescribeHadoopDataSourceResponseBody) GetStatusMessage() *string {
	return s.StatusMessage
}

func (s *DescribeHadoopDataSourceResponseBody) GetYarnConf() *string {
	return s.YarnConf
}

func (s *DescribeHadoopDataSourceResponseBody) SetCreateTime(v string) *DescribeHadoopDataSourceResponseBody {
	s.CreateTime = &v
	return s
}

func (s *DescribeHadoopDataSourceResponseBody) SetDataSourceDescription(v string) *DescribeHadoopDataSourceResponseBody {
	s.DataSourceDescription = &v
	return s
}

func (s *DescribeHadoopDataSourceResponseBody) SetDataSourceDir(v string) *DescribeHadoopDataSourceResponseBody {
	s.DataSourceDir = &v
	return s
}

func (s *DescribeHadoopDataSourceResponseBody) SetDataSourceId(v string) *DescribeHadoopDataSourceResponseBody {
	s.DataSourceId = &v
	return s
}

func (s *DescribeHadoopDataSourceResponseBody) SetDataSourceName(v string) *DescribeHadoopDataSourceResponseBody {
	s.DataSourceName = &v
	return s
}

func (s *DescribeHadoopDataSourceResponseBody) SetDataSourceStatus(v string) *DescribeHadoopDataSourceResponseBody {
	s.DataSourceStatus = &v
	return s
}

func (s *DescribeHadoopDataSourceResponseBody) SetDataSourceType(v string) *DescribeHadoopDataSourceResponseBody {
	s.DataSourceType = &v
	return s
}

func (s *DescribeHadoopDataSourceResponseBody) SetEmrInstanceId(v string) *DescribeHadoopDataSourceResponseBody {
	s.EmrInstanceId = &v
	return s
}

func (s *DescribeHadoopDataSourceResponseBody) SetExternalDataServiceId(v string) *DescribeHadoopDataSourceResponseBody {
	s.ExternalDataServiceId = &v
	return s
}

func (s *DescribeHadoopDataSourceResponseBody) SetHDFSConf(v string) *DescribeHadoopDataSourceResponseBody {
	s.HDFSConf = &v
	return s
}

func (s *DescribeHadoopDataSourceResponseBody) SetHadoopCoreConf(v string) *DescribeHadoopDataSourceResponseBody {
	s.HadoopCoreConf = &v
	return s
}

func (s *DescribeHadoopDataSourceResponseBody) SetHadoopCreateType(v string) *DescribeHadoopDataSourceResponseBody {
	s.HadoopCreateType = &v
	return s
}

func (s *DescribeHadoopDataSourceResponseBody) SetHadoopHostsAddress(v string) *DescribeHadoopDataSourceResponseBody {
	s.HadoopHostsAddress = &v
	return s
}

func (s *DescribeHadoopDataSourceResponseBody) SetHiveConf(v string) *DescribeHadoopDataSourceResponseBody {
	s.HiveConf = &v
	return s
}

func (s *DescribeHadoopDataSourceResponseBody) SetMapReduceConf(v string) *DescribeHadoopDataSourceResponseBody {
	s.MapReduceConf = &v
	return s
}

func (s *DescribeHadoopDataSourceResponseBody) SetModifyTime(v string) *DescribeHadoopDataSourceResponseBody {
	s.ModifyTime = &v
	return s
}

func (s *DescribeHadoopDataSourceResponseBody) SetRequestId(v string) *DescribeHadoopDataSourceResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeHadoopDataSourceResponseBody) SetStatusMessage(v string) *DescribeHadoopDataSourceResponseBody {
	s.StatusMessage = &v
	return s
}

func (s *DescribeHadoopDataSourceResponseBody) SetYarnConf(v string) *DescribeHadoopDataSourceResponseBody {
	s.YarnConf = &v
	return s
}

func (s *DescribeHadoopDataSourceResponseBody) Validate() error {
	return dara.Validate(s)
}

type iDescribeHadoopDataSourceResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DescribeHadoopDataSourceResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DescribeHadoopDataSourceResponse
	GetStatusCode() *int32
	SetBody(v *DescribeHadoopDataSourceResponseBody) *DescribeHadoopDataSourceResponse
	GetBody() *DescribeHadoopDataSourceResponseBody
}

type DescribeHadoopDataSourceResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeHadoopDataSourceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeHadoopDataSourceResponse) String() string {
	return dara.Prettify(s)
}

func (s DescribeHadoopDataSourceResponse) GoString() string {
	return s.String()
}

func (s *DescribeHadoopDataSourceResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DescribeHadoopDataSourceResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DescribeHadoopDataSourceResponse) GetBody() *DescribeHadoopDataSourceResponseBody {
	return s.Body
}

func (s *DescribeHadoopDataSourceResponse) SetHeaders(v map[string]*string) *DescribeHadoopDataSourceResponse {
	s.Headers = v
	return s
}

func (s *DescribeHadoopDataSourceResponse) SetStatusCode(v int32) *DescribeHadoopDataSourceResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeHadoopDataSourceResponse) SetBody(v *DescribeHadoopDataSourceResponseBody) *DescribeHadoopDataSourceResponse {
	s.Body = v
	return s
}

func (s *DescribeHadoopDataSourceResponse) Validate() error {
	return dara.Validate(s)
}

type iDescribeHealthStatusRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *DescribeHealthStatusRequest
	GetDBInstanceId() *string
	SetKey(v string) *DescribeHealthStatusRequest
	GetKey() *string
}

type DescribeHealthStatusRequest struct {
	// The ID of the instance.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the details of all AnalyticDB for PostgreSQL instances in a specific region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The performance metric that you want to query. Separate multiple values with commas (,). For more information, see [Performance parameters](https://help.aliyun.com/document_detail/86943.html).
	//
	// This parameter is required.
	//
	// example:
	//
	// node_master_status,node_master_connection_status,node_segment_connection_status,node_segment_disk_status
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
}

func (s DescribeHealthStatusRequest) String() string {
	return dara.Prettify(s)
}

func (s DescribeHealthStatusRequest) GoString() string {
	return s.String()
}

func (s *DescribeHealthStatusRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *DescribeHealthStatusRequest) GetKey() *string {
	return s.Key
}

func (s *DescribeHealthStatusRequest) SetDBInstanceId(v string) *DescribeHealthStatusRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeHealthStatusRequest) SetKey(v string) *DescribeHealthStatusRequest {
	s.Key = &v
	return s
}

func (s *DescribeHealthStatusRequest) Validate() error {
	return dara.Validate(s)
}

type iDescribeHealthStatusResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetDBClusterId(v string) *DescribeHealthStatusResponseBody
	GetDBClusterId() *string
	SetRequestId(v string) *DescribeHealthStatusResponseBody
	GetRequestId() *string
	SetStatus(v *DescribeHealthStatusResponseBodyStatus) *DescribeHealthStatusResponseBody
	GetStatus() *DescribeHealthStatusResponseBodyStatus
}

type DescribeHealthStatusResponseBody struct {
	// The ID of instance.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBClusterId *string `json:"DBClusterId,omitempty" xml:"DBClusterId,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// D97B4191-104D-10CE-8BC5-53**********
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The queried performance metrics. Each performance metric consists of the parameter name, status, and metric value. The metric information is returned only for the performance parameters specified by **Key**. For example, if you set **Key*	- to **adbpg_status**, only the metric information of **adbpg_status*	- is returned.
	//
	// For more information about performance parameters, see [Performance parameters](https://help.aliyun.com/document_detail/86943.html).
	//
	// example:
	//
	// {"node_master_connection_status":{"Status":"healthy","Value":1.6}}
	Status *DescribeHealthStatusResponseBodyStatus `json:"Status,omitempty" xml:"Status,omitempty" type:"Struct"`
}

func (s DescribeHealthStatusResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DescribeHealthStatusResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeHealthStatusResponseBody) GetDBClusterId() *string {
	return s.DBClusterId
}

func (s *DescribeHealthStatusResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DescribeHealthStatusResponseBody) GetStatus() *DescribeHealthStatusResponseBodyStatus {
	return s.Status
}

func (s *DescribeHealthStatusResponseBody) SetDBClusterId(v string) *DescribeHealthStatusResponseBody {
	s.DBClusterId = &v
	return s
}

func (s *DescribeHealthStatusResponseBody) SetRequestId(v string) *DescribeHealthStatusResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeHealthStatusResponseBody) SetStatus(v *DescribeHealthStatusResponseBodyStatus) *DescribeHealthStatusResponseBody {
	s.Status = v
	return s
}

func (s *DescribeHealthStatusResponseBody) Validate() error {
	return dara.Validate(s)
}

type DescribeHealthStatusResponseBodyStatus struct {
	// The information of maximum compute node storage usage.
	//
	// >  This parameter value is returned only for instances in elastic storage mode.
	AdbgpSegmentDiskUsagePercentMax *DescribeHealthStatusResponseBodyStatusAdbgpSegmentDiskUsagePercentMax `json:"adbgp_segment_disk_usage_percent_max,omitempty" xml:"adbgp_segment_disk_usage_percent_max,omitempty" type:"Struct"`
	// The information of instance connection health status.
	AdbpgConnectionStatus *DescribeHealthStatusResponseBodyStatusAdbpgConnectionStatus `json:"adbpg_connection_status,omitempty" xml:"adbpg_connection_status,omitempty" type:"Struct"`
	// The information of instance storage status.
	//
	// >  This parameter value is returned only for instances in elastic storage mode.
	AdbpgDiskStatus *DescribeHealthStatusResponseBodyStatusAdbpgDiskStatus `json:"adbpg_disk_status,omitempty" xml:"adbpg_disk_status,omitempty" type:"Struct"`
	// The information of instance storage usage.
	//
	// >  This parameter value is returned only for instances in elastic storage mode.
	AdbpgDiskUsagePercent *DescribeHealthStatusResponseBodyStatusAdbpgDiskUsagePercent `json:"adbpg_disk_usage_percent,omitempty" xml:"adbpg_disk_usage_percent,omitempty" type:"Struct"`
	// The total amount of cold data storage.
	AdbpgInstanceColdDataGb *DescribeHealthStatusResponseBodyStatusAdbpgInstanceColdDataGb `json:"adbpg_instance_cold_data_gb,omitempty" xml:"adbpg_instance_cold_data_gb,omitempty" type:"Struct"`
	// The total amount of hot data storage.
	AdbpgInstanceHotDataGb *DescribeHealthStatusResponseBodyStatusAdbpgInstanceHotDataGb `json:"adbpg_instance_hot_data_gb,omitempty" xml:"adbpg_instance_hot_data_gb,omitempty" type:"Struct"`
	// The total amount of data storage of the instance.
	AdbpgInstanceTotalDataGb *DescribeHealthStatusResponseBodyStatusAdbpgInstanceTotalDataGb `json:"adbpg_instance_total_data_gb,omitempty" xml:"adbpg_instance_total_data_gb,omitempty" type:"Struct"`
	// The information of maximum coordinator node storage usage.
	//
	// >  This parameter value is returned only for instances in elastic storage mode.
	AdbpgMasterDiskUsagePercentMax *DescribeHealthStatusResponseBodyStatusAdbpgMasterDiskUsagePercentMax `json:"adbpg_master_disk_usage_percent_max,omitempty" xml:"adbpg_master_disk_usage_percent_max,omitempty" type:"Struct"`
	// The information of coordinator node availability status.
	AdbpgMasterStatus *DescribeHealthStatusResponseBodyStatusAdbpgMasterStatus `json:"adbpg_master_status,omitempty" xml:"adbpg_master_status,omitempty" type:"Struct"`
	// The information of compute node availability status.
	AdbpgSegmentStatus *DescribeHealthStatusResponseBodyStatusAdbpgSegmentStatus `json:"adbpg_segment_status,omitempty" xml:"adbpg_segment_status,omitempty" type:"Struct"`
	// The information of instance health status.
	AdbpgStatus *DescribeHealthStatusResponseBodyStatusAdbpgStatus `json:"adbpg_status,omitempty" xml:"adbpg_status,omitempty" type:"Struct"`
	// The information of coordinator node connection health status.
	NodeMasterConnectionStatus *DescribeHealthStatusResponseBodyStatusNodeMasterConnectionStatus `json:"node_master_connection_status,omitempty" xml:"node_master_connection_status,omitempty" type:"Struct"`
	// The information of coordinator node health status.
	NodeMasterStatus *DescribeHealthStatusResponseBodyStatusNodeMasterStatus `json:"node_master_status,omitempty" xml:"node_master_status,omitempty" type:"Struct"`
	// The information of compute node connection health status.
	NodeSegmentConnectionStatus *DescribeHealthStatusResponseBodyStatusNodeSegmentConnectionStatus `json:"node_segment_connection_status,omitempty" xml:"node_segment_connection_status,omitempty" type:"Struct"`
	// The information of compute node storage status.
	//
	// >  This parameter value is returned only for instances in elastic storage mode.
	NodeSegmentDiskStatus *DescribeHealthStatusResponseBodyStatusNodeSegmentDiskStatus `json:"node_segment_disk_status,omitempty" xml:"node_segment_disk_status,omitempty" type:"Struct"`
}

func (s DescribeHealthStatusResponseBodyStatus) String() string {
	return dara.Prettify(s)
}

func (s DescribeHealthStatusResponseBodyStatus) GoString() string {
	return s.String()
}

func (s *DescribeHealthStatusResponseBodyStatus) GetAdbgpSegmentDiskUsagePercentMax() *DescribeHealthStatusResponseBodyStatusAdbgpSegmentDiskUsagePercentMax {
	return s.AdbgpSegmentDiskUsagePercentMax
}

func (s *DescribeHealthStatusResponseBodyStatus) GetAdbpgConnectionStatus() *DescribeHealthStatusResponseBodyStatusAdbpgConnectionStatus {
	return s.AdbpgConnectionStatus
}

func (s *DescribeHealthStatusResponseBodyStatus) GetAdbpgDiskStatus() *DescribeHealthStatusResponseBodyStatusAdbpgDiskStatus {
	return s.AdbpgDiskStatus
}

func (s *DescribeHealthStatusResponseBodyStatus) GetAdbpgDiskUsagePercent() *DescribeHealthStatusResponseBodyStatusAdbpgDiskUsagePercent {
	return s.AdbpgDiskUsagePercent
}

func (s *DescribeHealthStatusResponseBodyStatus) GetAdbpgInstanceColdDataGb() *DescribeHealthStatusResponseBodyStatusAdbpgInstanceColdDataGb {
	return s.AdbpgInstanceColdDataGb
}

func (s *DescribeHealthStatusResponseBodyStatus) GetAdbpgInstanceHotDataGb() *DescribeHealthStatusResponseBodyStatusAdbpgInstanceHotDataGb {
	return s.AdbpgInstanceHotDataGb
}

func (s *DescribeHealthStatusResponseBodyStatus) GetAdbpgInstanceTotalDataGb() *DescribeHealthStatusResponseBodyStatusAdbpgInstanceTotalDataGb {
	return s.AdbpgInstanceTotalDataGb
}

func (s *DescribeHealthStatusResponseBodyStatus) GetAdbpgMasterDiskUsagePercentMax() *DescribeHealthStatusResponseBodyStatusAdbpgMasterDiskUsagePercentMax {
	return s.AdbpgMasterDiskUsagePercentMax
}

func (s *DescribeHealthStatusResponseBodyStatus) GetAdbpgMasterStatus() *DescribeHealthStatusResponseBodyStatusAdbpgMasterStatus {
	return s.AdbpgMasterStatus
}

func (s *DescribeHealthStatusResponseBodyStatus) GetAdbpgSegmentStatus() *DescribeHealthStatusResponseBodyStatusAdbpgSegmentStatus {
	return s.AdbpgSegmentStatus
}

func (s *DescribeHealthStatusResponseBodyStatus) GetAdbpgStatus() *DescribeHealthStatusResponseBodyStatusAdbpgStatus {
	return s.AdbpgStatus
}

func (s *DescribeHealthStatusResponseBodyStatus) GetNodeMasterConnectionStatus() *DescribeHealthStatusResponseBodyStatusNodeMasterConnectionStatus {
	return s.NodeMasterConnectionStatus
}

func (s *DescribeHealthStatusResponseBodyStatus) GetNodeMasterStatus() *DescribeHealthStatusResponseBodyStatusNodeMasterStatus {
	return s.NodeMasterStatus
}

func (s *DescribeHealthStatusResponseBodyStatus) GetNodeSegmentConnectionStatus() *DescribeHealthStatusResponseBodyStatusNodeSegmentConnectionStatus {
	return s.NodeSegmentConnectionStatus
}

func (s *DescribeHealthStatusResponseBodyStatus) GetNodeSegmentDiskStatus() *DescribeHealthStatusResponseBodyStatusNodeSegmentDiskStatus {
	return s.NodeSegmentDiskStatus
}

func (s *DescribeHealthStatusResponseBodyStatus) SetAdbgpSegmentDiskUsagePercentMax(v *DescribeHealthStatusResponseBodyStatusAdbgpSegmentDiskUsagePercentMax) *DescribeHealthStatusResponseBodyStatus {
	s.AdbgpSegmentDiskUsagePercentMax = v
	return s
}

func (s *DescribeHealthStatusResponseBodyStatus) SetAdbpgConnectionStatus(v *DescribeHealthStatusResponseBodyStatusAdbpgConnectionStatus) *DescribeHealthStatusResponseBodyStatus {
	s.AdbpgConnectionStatus = v
	return s
}

func (s *DescribeHealthStatusResponseBodyStatus) SetAdbpgDiskStatus(v *DescribeHealthStatusResponseBodyStatusAdbpgDiskStatus) *DescribeHealthStatusResponseBodyStatus {
	s.AdbpgDiskStatus = v
	return s
}

func (s *DescribeHealthStatusResponseBodyStatus) SetAdbpgDiskUsagePercent(v *DescribeHealthStatusResponseBodyStatusAdbpgDiskUsagePercent) *DescribeHealthStatusResponseBodyStatus {
	s.AdbpgDiskUsagePercent = v
	return s
}

func (s *DescribeHealthStatusResponseBodyStatus) SetAdbpgInstanceColdDataGb(v *DescribeHealthStatusResponseBodyStatusAdbpgInstanceColdDataGb) *DescribeHealthStatusResponseBodyStatus {
	s.AdbpgInstanceColdDataGb = v
	return s
}

func (s *DescribeHealthStatusResponseBodyStatus) SetAdbpgInstanceHotDataGb(v *DescribeHealthStatusResponseBodyStatusAdbpgInstanceHotDataGb) *DescribeHealthStatusResponseBodyStatus {
	s.AdbpgInstanceHotDataGb = v
	return s
}

func (s *DescribeHealthStatusResponseBodyStatus) SetAdbpgInstanceTotalDataGb(v *DescribeHealthStatusResponseBodyStatusAdbpgInstanceTotalDataGb) *DescribeHealthStatusResponseBodyStatus {
	s.AdbpgInstanceTotalDataGb = v
	return s
}

func (s *DescribeHealthStatusResponseBodyStatus) SetAdbpgMasterDiskUsagePercentMax(v *DescribeHealthStatusResponseBodyStatusAdbpgMasterDiskUsagePercentMax) *DescribeHealthStatusResponseBodyStatus {
	s.AdbpgMasterDiskUsagePercentMax = v
	return s
}

func (s *DescribeHealthStatusResponseBodyStatus) SetAdbpgMasterStatus(v *DescribeHealthStatusResponseBodyStatusAdbpgMasterStatus) *DescribeHealthStatusResponseBodyStatus {
	s.AdbpgMasterStatus = v
	return s
}

func (s *DescribeHealthStatusResponseBodyStatus) SetAdbpgSegmentStatus(v *DescribeHealthStatusResponseBodyStatusAdbpgSegmentStatus) *DescribeHealthStatusResponseBodyStatus {
	s.AdbpgSegmentStatus = v
	return s
}

func (s *DescribeHealthStatusResponseBodyStatus) SetAdbpgStatus(v *DescribeHealthStatusResponseBodyStatusAdbpgStatus) *DescribeHealthStatusResponseBodyStatus {
	s.AdbpgStatus = v
	return s
}

func (s *DescribeHealthStatusResponseBodyStatus) SetNodeMasterConnectionStatus(v *DescribeHealthStatusResponseBodyStatusNodeMasterConnectionStatus) *DescribeHealthStatusResponseBodyStatus {
	s.NodeMasterConnectionStatus = v
	return s
}

func (s *DescribeHealthStatusResponseBodyStatus) SetNodeMasterStatus(v *DescribeHealthStatusResponseBodyStatusNodeMasterStatus) *DescribeHealthStatusResponseBodyStatus {
	s.NodeMasterStatus = v
	return s
}

func (s *DescribeHealthStatusResponseBodyStatus) SetNodeSegmentConnectionStatus(v *DescribeHealthStatusResponseBodyStatusNodeSegmentConnectionStatus) *DescribeHealthStatusResponseBodyStatus {
	s.NodeSegmentConnectionStatus = v
	return s
}

func (s *DescribeHealthStatusResponseBodyStatus) SetNodeSegmentDiskStatus(v *DescribeHealthStatusResponseBodyStatusNodeSegmentDiskStatus) *DescribeHealthStatusResponseBodyStatus {
	s.NodeSegmentDiskStatus = v
	return s
}

func (s *DescribeHealthStatusResponseBodyStatus) Validate() error {
	return dara.Validate(s)
}

type DescribeHealthStatusResponseBodyStatusAdbgpSegmentDiskUsagePercentMax struct {
	// The status corresponding to the maximum storage usage among all compute nodes. Valid values:
	//
	// 	- **critical**: The compute node storage usage is greater than or equal to 90%. In this case, the instance is locked.
	//
	// 	- **warning**: The compute node storage usage is greater than or equal to 80% and less than 90%.
	//
	// 	- **healthy**: The compute node storage usage is less than 80%.
	//
	// example:
	//
	// healthy
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The metric value of maximum compute node storage usage.
	//
	// Unit: %.
	//
	// example:
	//
	// 1.52
	Value *float32 `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeHealthStatusResponseBodyStatusAdbgpSegmentDiskUsagePercentMax) String() string {
	return dara.Prettify(s)
}

func (s DescribeHealthStatusResponseBodyStatusAdbgpSegmentDiskUsagePercentMax) GoString() string {
	return s.String()
}

func (s *DescribeHealthStatusResponseBodyStatusAdbgpSegmentDiskUsagePercentMax) GetStatus() *string {
	return s.Status
}

func (s *DescribeHealthStatusResponseBodyStatusAdbgpSegmentDiskUsagePercentMax) GetValue() *float32 {
	return s.Value
}

func (s *DescribeHealthStatusResponseBodyStatusAdbgpSegmentDiskUsagePercentMax) SetStatus(v string) *DescribeHealthStatusResponseBodyStatusAdbgpSegmentDiskUsagePercentMax {
	s.Status = &v
	return s
}

func (s *DescribeHealthStatusResponseBodyStatusAdbgpSegmentDiskUsagePercentMax) SetValue(v float32) *DescribeHealthStatusResponseBodyStatusAdbgpSegmentDiskUsagePercentMax {
	s.Value = &v
	return s
}

func (s *DescribeHealthStatusResponseBodyStatusAdbgpSegmentDiskUsagePercentMax) Validate() error {
	return dara.Validate(s)
}

type DescribeHealthStatusResponseBodyStatusAdbpgConnectionStatus struct {
	// The connection health status of the instance. Valid values:
	//
	// 	- **critical**: The instance connection usage is greater than 95%. In this case, this metric is marked in red in the console.
	//
	// 	- **warning**: The instance connection usage is greater than 90% and less than or equal to 95%. In this case, this metric is marked in yellow in the console.
	//
	// 	- **healthy**: The instance connection usage is less than or equal to 90%. In this case, this metric is marked in green in the console.
	//
	// >  The instance connection usage is the maximum connection usage among all the coordinator and compute nodes.
	//
	// example:
	//
	// healthy
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The metric value of instance connection usage.
	//
	// Unit: %.
	//
	// example:
	//
	// 1.71
	Value *float32 `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeHealthStatusResponseBodyStatusAdbpgConnectionStatus) String() string {
	return dara.Prettify(s)
}

func (s DescribeHealthStatusResponseBodyStatusAdbpgConnectionStatus) GoString() string {
	return s.String()
}

func (s *DescribeHealthStatusResponseBodyStatusAdbpgConnectionStatus) GetStatus() *string {
	return s.Status
}

func (s *DescribeHealthStatusResponseBodyStatusAdbpgConnectionStatus) GetValue() *float32 {
	return s.Value
}

func (s *DescribeHealthStatusResponseBodyStatusAdbpgConnectionStatus) SetStatus(v string) *DescribeHealthStatusResponseBodyStatusAdbpgConnectionStatus {
	s.Status = &v
	return s
}

func (s *DescribeHealthStatusResponseBodyStatusAdbpgConnectionStatus) SetValue(v float32) *DescribeHealthStatusResponseBodyStatusAdbpgConnectionStatus {
	s.Value = &v
	return s
}

func (s *DescribeHealthStatusResponseBodyStatusAdbpgConnectionStatus) Validate() error {
	return dara.Validate(s)
}

type DescribeHealthStatusResponseBodyStatusAdbpgDiskStatus struct {
	// The storage status of the instance. Valid values:
	//
	// 	- **critical**: The instance storage usage is greater than or equal to 90%. In this case, this metric is marked in red in the console and the instance is locked.
	//
	// 	- **warning**: The instance storage usage is greater than or equal to 70% and less than 90%. In this case, this metric is marked in yellow in the console.
	//
	// 	- **healthy**: The instance storage usage is less than 70%. In this case, this metric is marked in green in the console.
	//
	// >  The instance storage usage is the average storage usage of all compute nodes.
	//
	// example:
	//
	// healthy
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The metric value of instance storage usage.
	//
	// Unit: %.
	//
	// example:
	//
	// 1.52
	Value *float32 `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeHealthStatusResponseBodyStatusAdbpgDiskStatus) String() string {
	return dara.Prettify(s)
}

func (s DescribeHealthStatusResponseBodyStatusAdbpgDiskStatus) GoString() string {
	return s.String()
}

func (s *DescribeHealthStatusResponseBodyStatusAdbpgDiskStatus) GetStatus() *string {
	return s.Status
}

func (s *DescribeHealthStatusResponseBodyStatusAdbpgDiskStatus) GetValue() *float32 {
	return s.Value
}

func (s *DescribeHealthStatusResponseBodyStatusAdbpgDiskStatus) SetStatus(v string) *DescribeHealthStatusResponseBodyStatusAdbpgDiskStatus {
	s.Status = &v
	return s
}

func (s *DescribeHealthStatusResponseBodyStatusAdbpgDiskStatus) SetValue(v float32) *DescribeHealthStatusResponseBodyStatusAdbpgDiskStatus {
	s.Value = &v
	return s
}

func (s *DescribeHealthStatusResponseBodyStatusAdbpgDiskStatus) Validate() error {
	return dara.Validate(s)
}

type DescribeHealthStatusResponseBodyStatusAdbpgDiskUsagePercent struct {
	// The status corresponding to the storage usage of the instance. Valid values:
	//
	// 	- **critical**: The instance storage usage is greater than or equal to 90%. In this case, the instance is locked.
	//
	// 	- **warning**: The instance storage usage is greater than or equal to 70% and less than 90%.
	//
	// 	- **healthy**: The instance storage usage is less than 70%.
	//
	// >  The instance storage usage is the average storage usage of all compute nodes.
	//
	// example:
	//
	// healthy
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The metric value of instance storage usage.
	//
	// Unit: %.
	//
	// example:
	//
	// 1.52
	Value *float32 `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeHealthStatusResponseBodyStatusAdbpgDiskUsagePercent) String() string {
	return dara.Prettify(s)
}

func (s DescribeHealthStatusResponseBodyStatusAdbpgDiskUsagePercent) GoString() string {
	return s.String()
}

func (s *DescribeHealthStatusResponseBodyStatusAdbpgDiskUsagePercent) GetStatus() *string {
	return s.Status
}

func (s *DescribeHealthStatusResponseBodyStatusAdbpgDiskUsagePercent) GetValue() *float32 {
	return s.Value
}

func (s *DescribeHealthStatusResponseBodyStatusAdbpgDiskUsagePercent) SetStatus(v string) *DescribeHealthStatusResponseBodyStatusAdbpgDiskUsagePercent {
	s.Status = &v
	return s
}

func (s *DescribeHealthStatusResponseBodyStatusAdbpgDiskUsagePercent) SetValue(v float32) *DescribeHealthStatusResponseBodyStatusAdbpgDiskUsagePercent {
	s.Value = &v
	return s
}

func (s *DescribeHealthStatusResponseBodyStatusAdbpgDiskUsagePercent) Validate() error {
	return dara.Validate(s)
}

type DescribeHealthStatusResponseBodyStatusAdbpgInstanceColdDataGb struct {
	// The total amount of cold data storage. Unit: GB.
	//
	// example:
	//
	// 0
	Value *float32 `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeHealthStatusResponseBodyStatusAdbpgInstanceColdDataGb) String() string {
	return dara.Prettify(s)
}

func (s DescribeHealthStatusResponseBodyStatusAdbpgInstanceColdDataGb) GoString() string {
	return s.String()
}

func (s *DescribeHealthStatusResponseBodyStatusAdbpgInstanceColdDataGb) GetValue() *float32 {
	return s.Value
}

func (s *DescribeHealthStatusResponseBodyStatusAdbpgInstanceColdDataGb) SetValue(v float32) *DescribeHealthStatusResponseBodyStatusAdbpgInstanceColdDataGb {
	s.Value = &v
	return s
}

func (s *DescribeHealthStatusResponseBodyStatusAdbpgInstanceColdDataGb) Validate() error {
	return dara.Validate(s)
}

type DescribeHealthStatusResponseBodyStatusAdbpgInstanceHotDataGb struct {
	// The total amount of hot data storage. Unit: GB.
	//
	// example:
	//
	// 4.1
	Value *float32 `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeHealthStatusResponseBodyStatusAdbpgInstanceHotDataGb) String() string {
	return dara.Prettify(s)
}

func (s DescribeHealthStatusResponseBodyStatusAdbpgInstanceHotDataGb) GoString() string {
	return s.String()
}

func (s *DescribeHealthStatusResponseBodyStatusAdbpgInstanceHotDataGb) GetValue() *float32 {
	return s.Value
}

func (s *DescribeHealthStatusResponseBodyStatusAdbpgInstanceHotDataGb) SetValue(v float32) *DescribeHealthStatusResponseBodyStatusAdbpgInstanceHotDataGb {
	s.Value = &v
	return s
}

func (s *DescribeHealthStatusResponseBodyStatusAdbpgInstanceHotDataGb) Validate() error {
	return dara.Validate(s)
}

type DescribeHealthStatusResponseBodyStatusAdbpgInstanceTotalDataGb struct {
	// The total amount of data storage of the instance. Unit: GB.
	//
	// example:
	//
	// 4.1
	Value *float32 `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeHealthStatusResponseBodyStatusAdbpgInstanceTotalDataGb) String() string {
	return dara.Prettify(s)
}

func (s DescribeHealthStatusResponseBodyStatusAdbpgInstanceTotalDataGb) GoString() string {
	return s.String()
}

func (s *DescribeHealthStatusResponseBodyStatusAdbpgInstanceTotalDataGb) GetValue() *float32 {
	return s.Value
}

func (s *DescribeHealthStatusResponseBodyStatusAdbpgInstanceTotalDataGb) SetValue(v float32) *DescribeHealthStatusResponseBodyStatusAdbpgInstanceTotalDataGb {
	s.Value = &v
	return s
}

func (s *DescribeHealthStatusResponseBodyStatusAdbpgInstanceTotalDataGb) Validate() error {
	return dara.Validate(s)
}

type DescribeHealthStatusResponseBodyStatusAdbpgMasterDiskUsagePercentMax struct {
	// The status corresponding to the maximum storage usage of the coordinator node. Valid values:
	//
	// 	- **critical**: The coordinator node storage usage is greater than or equal to 90%. In this case, the instance is locked.
	//
	// 	- **warning**: The coordinator node storage usage is greater than or equal to 70% and less than 90%.
	//
	// 	- **healthy**: The coordinator node storage usage is less than 70%.
	//
	// example:
	//
	// healthy
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The metric value of maximum coordinator node storage usage.
	//
	// Unit: %.
	//
	// example:
	//
	// 1.34
	Value *float32 `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeHealthStatusResponseBodyStatusAdbpgMasterDiskUsagePercentMax) String() string {
	return dara.Prettify(s)
}

func (s DescribeHealthStatusResponseBodyStatusAdbpgMasterDiskUsagePercentMax) GoString() string {
	return s.String()
}

func (s *DescribeHealthStatusResponseBodyStatusAdbpgMasterDiskUsagePercentMax) GetStatus() *string {
	return s.Status
}

func (s *DescribeHealthStatusResponseBodyStatusAdbpgMasterDiskUsagePercentMax) GetValue() *float32 {
	return s.Value
}

func (s *DescribeHealthStatusResponseBodyStatusAdbpgMasterDiskUsagePercentMax) SetStatus(v string) *DescribeHealthStatusResponseBodyStatusAdbpgMasterDiskUsagePercentMax {
	s.Status = &v
	return s
}

func (s *DescribeHealthStatusResponseBodyStatusAdbpgMasterDiskUsagePercentMax) SetValue(v float32) *DescribeHealthStatusResponseBodyStatusAdbpgMasterDiskUsagePercentMax {
	s.Value = &v
	return s
}

func (s *DescribeHealthStatusResponseBodyStatusAdbpgMasterDiskUsagePercentMax) Validate() error {
	return dara.Validate(s)
}

type DescribeHealthStatusResponseBodyStatusAdbpgMasterStatus struct {
	// The availability status of the coordinator node. Valid values:
	//
	// 	- **critical**: Both the primary and standby coordinator nodes are unavailable. In this case, this metric is marked in red in the console.
	//
	// 	- **warning**: The primary or standby coordinator node is unavailable. In this case, this metric is marked in yellow in the console.
	//
	// 	- **healthy**: Both the primary and standby coordinator nodes are available. In this case, this metric is marked in green in the console.
	//
	// example:
	//
	// healthy
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The metric value of coordinator node availability status. Valid values:
	//
	// example:
	//
	// 1
	Value *float32 `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeHealthStatusResponseBodyStatusAdbpgMasterStatus) String() string {
	return dara.Prettify(s)
}

func (s DescribeHealthStatusResponseBodyStatusAdbpgMasterStatus) GoString() string {
	return s.String()
}

func (s *DescribeHealthStatusResponseBodyStatusAdbpgMasterStatus) GetStatus() *string {
	return s.Status
}

func (s *DescribeHealthStatusResponseBodyStatusAdbpgMasterStatus) GetValue() *float32 {
	return s.Value
}

func (s *DescribeHealthStatusResponseBodyStatusAdbpgMasterStatus) SetStatus(v string) *DescribeHealthStatusResponseBodyStatusAdbpgMasterStatus {
	s.Status = &v
	return s
}

func (s *DescribeHealthStatusResponseBodyStatusAdbpgMasterStatus) SetValue(v float32) *DescribeHealthStatusResponseBodyStatusAdbpgMasterStatus {
	s.Value = &v
	return s
}

func (s *DescribeHealthStatusResponseBodyStatusAdbpgMasterStatus) Validate() error {
	return dara.Validate(s)
}

type DescribeHealthStatusResponseBodyStatusAdbpgSegmentStatus struct {
	// The availability status of compute nodes. Valid values:
	//
	// 	- **critical**: All the primary and secondary compute nodes are unavailable. In this case, this metric is marked in red in the console.
	//
	// 	- **warning**: Fifty percent or more than fifty percent of compute nodes are unavailable. In this case, this metric is marked in yellow in the console.
	//
	// 	- **healthy**: All compute nodes are available. In this case, this metric is marked in green in the console.
	//
	// example:
	//
	// healthy
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The metric value of compute node availability status.
	//
	// example:
	//
	// 1
	Value *float32 `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeHealthStatusResponseBodyStatusAdbpgSegmentStatus) String() string {
	return dara.Prettify(s)
}

func (s DescribeHealthStatusResponseBodyStatusAdbpgSegmentStatus) GoString() string {
	return s.String()
}

func (s *DescribeHealthStatusResponseBodyStatusAdbpgSegmentStatus) GetStatus() *string {
	return s.Status
}

func (s *DescribeHealthStatusResponseBodyStatusAdbpgSegmentStatus) GetValue() *float32 {
	return s.Value
}

func (s *DescribeHealthStatusResponseBodyStatusAdbpgSegmentStatus) SetStatus(v string) *DescribeHealthStatusResponseBodyStatusAdbpgSegmentStatus {
	s.Status = &v
	return s
}

func (s *DescribeHealthStatusResponseBodyStatusAdbpgSegmentStatus) SetValue(v float32) *DescribeHealthStatusResponseBodyStatusAdbpgSegmentStatus {
	s.Value = &v
	return s
}

func (s *DescribeHealthStatusResponseBodyStatusAdbpgSegmentStatus) Validate() error {
	return dara.Validate(s)
}

type DescribeHealthStatusResponseBodyStatusAdbpgStatus struct {
	// The health status of the instance. Valid values:
	//
	// 	- **critical**: The coordinator node or a compute node is unavailable. In this case, this metric is marked in red in the console.
	//
	// 	- **healthy**: All nodes are available. In this case, this metric is marked in green in the console.
	//
	// example:
	//
	// healthy
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The metric value of instance health status. Valid values:
	//
	// 	- **1**: healthy
	//
	// 	- **0**: critical
	//
	// example:
	//
	// 1
	Value *float32 `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeHealthStatusResponseBodyStatusAdbpgStatus) String() string {
	return dara.Prettify(s)
}

func (s DescribeHealthStatusResponseBodyStatusAdbpgStatus) GoString() string {
	return s.String()
}

func (s *DescribeHealthStatusResponseBodyStatusAdbpgStatus) GetStatus() *string {
	return s.Status
}

func (s *DescribeHealthStatusResponseBodyStatusAdbpgStatus) GetValue() *float32 {
	return s.Value
}

func (s *DescribeHealthStatusResponseBodyStatusAdbpgStatus) SetStatus(v string) *DescribeHealthStatusResponseBodyStatusAdbpgStatus {
	s.Status = &v
	return s
}

func (s *DescribeHealthStatusResponseBodyStatusAdbpgStatus) SetValue(v float32) *DescribeHealthStatusResponseBodyStatusAdbpgStatus {
	s.Value = &v
	return s
}

func (s *DescribeHealthStatusResponseBodyStatusAdbpgStatus) Validate() error {
	return dara.Validate(s)
}

type DescribeHealthStatusResponseBodyStatusNodeMasterConnectionStatus struct {
	// The connection health status of the coordinator node. Valid values:
	//
	// 	- **critical**: The coordinator node connection usage is greater than 95%. In this case, this metric is marked in red in the console.
	//
	// 	- **warning**: The coordinator node connection usage is greater than or equal to 90% and less than 95%. In this case, this metric is marked in yellow in the console.
	//
	// 	- **healthy**: The coordinator node connection usage is less than 90%. In this case, this metric is marked in green in the console.
	//
	// >  The coordinator node connection usage is the maximum connection usage of the coordinator node.
	//
	// example:
	//
	// healthy
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The metric value of coordinator node connection usage.
	//
	// Unit: %.
	//
	// example:
	//
	// 1.71
	Value *float32 `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeHealthStatusResponseBodyStatusNodeMasterConnectionStatus) String() string {
	return dara.Prettify(s)
}

func (s DescribeHealthStatusResponseBodyStatusNodeMasterConnectionStatus) GoString() string {
	return s.String()
}

func (s *DescribeHealthStatusResponseBodyStatusNodeMasterConnectionStatus) GetStatus() *string {
	return s.Status
}

func (s *DescribeHealthStatusResponseBodyStatusNodeMasterConnectionStatus) GetValue() *float32 {
	return s.Value
}

func (s *DescribeHealthStatusResponseBodyStatusNodeMasterConnectionStatus) SetStatus(v string) *DescribeHealthStatusResponseBodyStatusNodeMasterConnectionStatus {
	s.Status = &v
	return s
}

func (s *DescribeHealthStatusResponseBodyStatusNodeMasterConnectionStatus) SetValue(v float32) *DescribeHealthStatusResponseBodyStatusNodeMasterConnectionStatus {
	s.Value = &v
	return s
}

func (s *DescribeHealthStatusResponseBodyStatusNodeMasterConnectionStatus) Validate() error {
	return dara.Validate(s)
}

type DescribeHealthStatusResponseBodyStatusNodeMasterStatus struct {
	// The health status of the coordinator node. Valid values:
	//
	// 	- **critical**: The primary or standby coordinator node is unavailable. In this case, this metric is marked in red in the console.
	//
	// 	- **healthy**: Both the primary and standby coordinator nodes are available. In this case, this metric is marked in green in the console.
	//
	// example:
	//
	// healthy
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The metric value of coordinator node health status. Valid values:
	//
	// 	- **1**: healthy
	//
	// 	- **0**: critical
	//
	// example:
	//
	// 1
	Value *float32 `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeHealthStatusResponseBodyStatusNodeMasterStatus) String() string {
	return dara.Prettify(s)
}

func (s DescribeHealthStatusResponseBodyStatusNodeMasterStatus) GoString() string {
	return s.String()
}

func (s *DescribeHealthStatusResponseBodyStatusNodeMasterStatus) GetStatus() *string {
	return s.Status
}

func (s *DescribeHealthStatusResponseBodyStatusNodeMasterStatus) GetValue() *float32 {
	return s.Value
}

func (s *DescribeHealthStatusResponseBodyStatusNodeMasterStatus) SetStatus(v string) *DescribeHealthStatusResponseBodyStatusNodeMasterStatus {
	s.Status = &v
	return s
}

func (s *DescribeHealthStatusResponseBodyStatusNodeMasterStatus) SetValue(v float32) *DescribeHealthStatusResponseBodyStatusNodeMasterStatus {
	s.Value = &v
	return s
}

func (s *DescribeHealthStatusResponseBodyStatusNodeMasterStatus) Validate() error {
	return dara.Validate(s)
}

type DescribeHealthStatusResponseBodyStatusNodeSegmentConnectionStatus struct {
	// The connection health status of compute nodes. Valid values:
	//
	// 	- **critical**: The compute node connection usage is greater than or equal to 95%. In this case, this metric is marked in red in the console.
	//
	// 	- **warning**: The compute node connection usage is greater than or equal to 90% and less than 95%. In this case, this metric is marked in yellow in the console.
	//
	// 	- **healthy**: The compute node connection usage is less than 90%. In this case, this metric is marked in green in the console.
	//
	// >  The compute node connection usage is the maximum connection usage among all compute nodes.
	//
	// example:
	//
	// healthy
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The metric value of maximum compute node connection usage.
	//
	// Unit: %.
	//
	// example:
	//
	// 0.48
	Value *float32 `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeHealthStatusResponseBodyStatusNodeSegmentConnectionStatus) String() string {
	return dara.Prettify(s)
}

func (s DescribeHealthStatusResponseBodyStatusNodeSegmentConnectionStatus) GoString() string {
	return s.String()
}

func (s *DescribeHealthStatusResponseBodyStatusNodeSegmentConnectionStatus) GetStatus() *string {
	return s.Status
}

func (s *DescribeHealthStatusResponseBodyStatusNodeSegmentConnectionStatus) GetValue() *float32 {
	return s.Value
}

func (s *DescribeHealthStatusResponseBodyStatusNodeSegmentConnectionStatus) SetStatus(v string) *DescribeHealthStatusResponseBodyStatusNodeSegmentConnectionStatus {
	s.Status = &v
	return s
}

func (s *DescribeHealthStatusResponseBodyStatusNodeSegmentConnectionStatus) SetValue(v float32) *DescribeHealthStatusResponseBodyStatusNodeSegmentConnectionStatus {
	s.Value = &v
	return s
}

func (s *DescribeHealthStatusResponseBodyStatusNodeSegmentConnectionStatus) Validate() error {
	return dara.Validate(s)
}

type DescribeHealthStatusResponseBodyStatusNodeSegmentDiskStatus struct {
	// The storage status of compute nodes. Valid values:
	//
	// 	- **critical**: The compute node storage usage is greater than or equal to 90%. In this case, this metric is marked in red in the console and the instance is locked.
	//
	// 	- **warning**: The compute node storage usage is greater than or equal to 80% and less than 90%. In this case, this metric is marked in yellow in the console.
	//
	// 	- **healthy**: The compute node storage usage is less than 80%. In this case, this metric is marked in green in the console.
	//
	// >  The compute node storage usage is the maximum storage usage among all compute nodes.
	//
	// example:
	//
	// healthy
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The metric value of maximum compute node storage usage.
	//
	// Unit: %.
	//
	// example:
	//
	// 1.52
	Value *float32 `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeHealthStatusResponseBodyStatusNodeSegmentDiskStatus) String() string {
	return dara.Prettify(s)
}

func (s DescribeHealthStatusResponseBodyStatusNodeSegmentDiskStatus) GoString() string {
	return s.String()
}

func (s *DescribeHealthStatusResponseBodyStatusNodeSegmentDiskStatus) GetStatus() *string {
	return s.Status
}

func (s *DescribeHealthStatusResponseBodyStatusNodeSegmentDiskStatus) GetValue() *float32 {
	return s.Value
}

func (s *DescribeHealthStatusResponseBodyStatusNodeSegmentDiskStatus) SetStatus(v string) *DescribeHealthStatusResponseBodyStatusNodeSegmentDiskStatus {
	s.Status = &v
	return s
}

func (s *DescribeHealthStatusResponseBodyStatusNodeSegmentDiskStatus) SetValue(v float32) *DescribeHealthStatusResponseBodyStatusNodeSegmentDiskStatus {
	s.Value = &v
	return s
}

func (s *DescribeHealthStatusResponseBodyStatusNodeSegmentDiskStatus) Validate() error {
	return dara.Validate(s)
}

type iDescribeHealthStatusResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DescribeHealthStatusResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DescribeHealthStatusResponse
	GetStatusCode() *int32
	SetBody(v *DescribeHealthStatusResponseBody) *DescribeHealthStatusResponse
	GetBody() *DescribeHealthStatusResponseBody
}

type DescribeHealthStatusResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeHealthStatusResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeHealthStatusResponse) String() string {
	return dara.Prettify(s)
}

func (s DescribeHealthStatusResponse) GoString() string {
	return s.String()
}

func (s *DescribeHealthStatusResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DescribeHealthStatusResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DescribeHealthStatusResponse) GetBody() *DescribeHealthStatusResponseBody {
	return s.Body
}

func (s *DescribeHealthStatusResponse) SetHeaders(v map[string]*string) *DescribeHealthStatusResponse {
	s.Headers = v
	return s
}

func (s *DescribeHealthStatusResponse) SetStatusCode(v int32) *DescribeHealthStatusResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeHealthStatusResponse) SetBody(v *DescribeHealthStatusResponseBody) *DescribeHealthStatusResponse {
	s.Body = v
	return s
}

func (s *DescribeHealthStatusResponse) Validate() error {
	return dara.Validate(s)
}

type iDescribeIMVInfosRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *DescribeIMVInfosRequest
	GetDBInstanceId() *string
	SetDatabase(v string) *DescribeIMVInfosRequest
	GetDatabase() *string
	SetMVName(v string) *DescribeIMVInfosRequest
	GetMVName() *string
}

type DescribeIMVInfosRequest struct {
	// The instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The name of the database.
	//
	// This parameter is required.
	//
	// example:
	//
	// testdb
	Database *string `json:"Database,omitempty" xml:"Database,omitempty"`
	// The name of MV
	//
	// example:
	//
	// public."mv1"
	MVName *string `json:"MVName,omitempty" xml:"MVName,omitempty"`
}

func (s DescribeIMVInfosRequest) String() string {
	return dara.Prettify(s)
}

func (s DescribeIMVInfosRequest) GoString() string {
	return s.String()
}

func (s *DescribeIMVInfosRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *DescribeIMVInfosRequest) GetDatabase() *string {
	return s.Database
}

func (s *DescribeIMVInfosRequest) GetMVName() *string {
	return s.MVName
}

func (s *DescribeIMVInfosRequest) SetDBInstanceId(v string) *DescribeIMVInfosRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeIMVInfosRequest) SetDatabase(v string) *DescribeIMVInfosRequest {
	s.Database = &v
	return s
}

func (s *DescribeIMVInfosRequest) SetMVName(v string) *DescribeIMVInfosRequest {
	s.MVName = &v
	return s
}

func (s *DescribeIMVInfosRequest) Validate() error {
	return dara.Validate(s)
}

type iDescribeIMVInfosResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *DescribeIMVInfosResponseBody
	GetDBInstanceId() *string
	SetImvInfos(v []*DescribeIMVInfosResponseBodyImvInfos) *DescribeIMVInfosResponseBody
	GetImvInfos() []*DescribeIMVInfosResponseBodyImvInfos
	SetRequestId(v string) *DescribeIMVInfosResponseBody
	GetRequestId() *string
}

type DescribeIMVInfosResponseBody struct {
	// The ID of the instance.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the details of all AnalyticDB for PostgreSQL instances in a specific region, including instance IDs.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The queried materialized views.
	ImvInfos []*DescribeIMVInfosResponseBodyImvInfos `json:"ImvInfos,omitempty" xml:"ImvInfos,omitempty" type:"Repeated"`
	// The request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeIMVInfosResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DescribeIMVInfosResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeIMVInfosResponseBody) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *DescribeIMVInfosResponseBody) GetImvInfos() []*DescribeIMVInfosResponseBodyImvInfos {
	return s.ImvInfos
}

func (s *DescribeIMVInfosResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DescribeIMVInfosResponseBody) SetDBInstanceId(v string) *DescribeIMVInfosResponseBody {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeIMVInfosResponseBody) SetImvInfos(v []*DescribeIMVInfosResponseBodyImvInfos) *DescribeIMVInfosResponseBody {
	s.ImvInfos = v
	return s
}

func (s *DescribeIMVInfosResponseBody) SetRequestId(v string) *DescribeIMVInfosResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeIMVInfosResponseBody) Validate() error {
	return dara.Validate(s)
}

type DescribeIMVInfosResponseBodyImvInfos struct {
	// The name of the table based on which the materialized view is created.
	//
	// example:
	//
	// "public."t2"
	Base *string `json:"Base,omitempty" xml:"Base,omitempty"`
	// The dependency between the materialized view and the base table and all metric values, which can be used to build a lineage graph.
	//
	// example:
	//
	// {\\"maintenance_calls\\" : 1, \\"avg_apply_time\\" : 2, \\"avg_calc_rows\\" : 1, \\"avg_calc_time\\" : 11, \\"avg_delta_rows\\" : 1, \\"avg_maintenance_total_time\\" : 14, \\"avg_maintenance_total_time_total\\" : 14, \\"max_apply_time\\" : 2, \\"max_calc_rows\\" : 1, \\"max_calc_time\\" : 11, \\"max_delta_rows\\" : 1, \\"max_maintenance_total_time\\" : 14, \\"max_maintenance_total_time_total\\" : 14, \\"min_apply_time\\" : 2, \\"min_calc_rows\\" : 1, \\"min_calc_time\\" : 11, \\"min_delta_rows\\" : 1, \\"min_maintenance_total_time\\" : 14, \\"min_maintenance_total_time_total\\" : 14, \\"max_outerjoin_apply_time\\" : null, \\"max_outerjoin_calc_rows\\" : null, \\"max_outerjoin_calc_time\\" : null, \\"max_outerjoin_delta_rows\\" : null, \\"avg_outerjoin_apply_time\\" : null, \\"avg_outerjoin_calc_rows\\" : null, \\"avg_outerjoin_calc_time\\" : null, \\"avg_outerjoin_delta_rows\\" : null, \\"min_outerjoin_apply_time\\" : null, \\"min_outerjoin_calc_rows\\" : null, \\"min_outerjoin_calc_time\\" : null, \\"min_outerjoin_delta_rows\\" : null, \\"create_rows\\" : null, \\"create_time\\" : null, \\"direct_visited\\" : null, \\"indirect_visited\\" : null, \\"max_refresh_rows\\" : null, \\"max_refresh_time\\" : null, \\"avg_refresh_rows\\" : null, \\"avg_refresh_time\\" : null, \\"min_refresh_rows\\" : null, \\"min_refresh_time\\" : null, \\"refresh_calls\\" : null, \\"avg_wait_lock_time\\" : null, \\"max_wait_lock_time\\" : null, \\"min_wait_lock_time\\" : null, \\"latest_maintenance_time\\" : \\"2023-08-09T07:39:14.753252+00:00\\"}
	DetailInfo *string `json:"DetailInfo,omitempty" xml:"DetailInfo,omitempty"`
	// The name of the materialized view.
	//
	// example:
	//
	// public."mv1"
	MV *string `json:"MV,omitempty" xml:"MV,omitempty"`
}

func (s DescribeIMVInfosResponseBodyImvInfos) String() string {
	return dara.Prettify(s)
}

func (s DescribeIMVInfosResponseBodyImvInfos) GoString() string {
	return s.String()
}

func (s *DescribeIMVInfosResponseBodyImvInfos) GetBase() *string {
	return s.Base
}

func (s *DescribeIMVInfosResponseBodyImvInfos) GetDetailInfo() *string {
	return s.DetailInfo
}

func (s *DescribeIMVInfosResponseBodyImvInfos) GetMV() *string {
	return s.MV
}

func (s *DescribeIMVInfosResponseBodyImvInfos) SetBase(v string) *DescribeIMVInfosResponseBodyImvInfos {
	s.Base = &v
	return s
}

func (s *DescribeIMVInfosResponseBodyImvInfos) SetDetailInfo(v string) *DescribeIMVInfosResponseBodyImvInfos {
	s.DetailInfo = &v
	return s
}

func (s *DescribeIMVInfosResponseBodyImvInfos) SetMV(v string) *DescribeIMVInfosResponseBodyImvInfos {
	s.MV = &v
	return s
}

func (s *DescribeIMVInfosResponseBodyImvInfos) Validate() error {
	return dara.Validate(s)
}

type iDescribeIMVInfosResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DescribeIMVInfosResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DescribeIMVInfosResponse
	GetStatusCode() *int32
	SetBody(v *DescribeIMVInfosResponseBody) *DescribeIMVInfosResponse
	GetBody() *DescribeIMVInfosResponseBody
}

type DescribeIMVInfosResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeIMVInfosResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeIMVInfosResponse) String() string {
	return dara.Prettify(s)
}

func (s DescribeIMVInfosResponse) GoString() string {
	return s.String()
}

func (s *DescribeIMVInfosResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DescribeIMVInfosResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DescribeIMVInfosResponse) GetBody() *DescribeIMVInfosResponseBody {
	return s.Body
}

func (s *DescribeIMVInfosResponse) SetHeaders(v map[string]*string) *DescribeIMVInfosResponse {
	s.Headers = v
	return s
}

func (s *DescribeIMVInfosResponse) SetStatusCode(v int32) *DescribeIMVInfosResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeIMVInfosResponse) SetBody(v *DescribeIMVInfosResponseBody) *DescribeIMVInfosResponse {
	s.Body = v
	return s
}

func (s *DescribeIMVInfosResponse) Validate() error {
	return dara.Validate(s)
}

type iDescribeIndexRequest interface {
	dara.Model
	String() string
	GoString() string
	SetCollection(v string) *DescribeIndexRequest
	GetCollection() *string
	SetDBInstanceId(v string) *DescribeIndexRequest
	GetDBInstanceId() *string
	SetIndexName(v string) *DescribeIndexRequest
	GetIndexName() *string
	SetNamespace(v string) *DescribeIndexRequest
	GetNamespace() *string
	SetNamespacePassword(v string) *DescribeIndexRequest
	GetNamespacePassword() *string
	SetOwnerId(v int64) *DescribeIndexRequest
	GetOwnerId() *int64
	SetRegionId(v string) *DescribeIndexRequest
	GetRegionId() *string
	SetWorkspaceId(v string) *DescribeIndexRequest
	GetWorkspaceId() *string
}

type DescribeIndexRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// testcollection
	Collection *string `json:"Collection,omitempty" xml:"Collection,omitempty"`
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// testindex
	IndexName *string `json:"IndexName,omitempty" xml:"IndexName,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// mynamespace
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// testpassword
	NamespacePassword *string `json:"NamespacePassword,omitempty" xml:"NamespacePassword,omitempty"`
	OwnerId           *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// example:
	//
	// gp-ws-*****
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s DescribeIndexRequest) String() string {
	return dara.Prettify(s)
}

func (s DescribeIndexRequest) GoString() string {
	return s.String()
}

func (s *DescribeIndexRequest) GetCollection() *string {
	return s.Collection
}

func (s *DescribeIndexRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *DescribeIndexRequest) GetIndexName() *string {
	return s.IndexName
}

func (s *DescribeIndexRequest) GetNamespace() *string {
	return s.Namespace
}

func (s *DescribeIndexRequest) GetNamespacePassword() *string {
	return s.NamespacePassword
}

func (s *DescribeIndexRequest) GetOwnerId() *int64 {
	return s.OwnerId
}

func (s *DescribeIndexRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *DescribeIndexRequest) GetWorkspaceId() *string {
	return s.WorkspaceId
}

func (s *DescribeIndexRequest) SetCollection(v string) *DescribeIndexRequest {
	s.Collection = &v
	return s
}

func (s *DescribeIndexRequest) SetDBInstanceId(v string) *DescribeIndexRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeIndexRequest) SetIndexName(v string) *DescribeIndexRequest {
	s.IndexName = &v
	return s
}

func (s *DescribeIndexRequest) SetNamespace(v string) *DescribeIndexRequest {
	s.Namespace = &v
	return s
}

func (s *DescribeIndexRequest) SetNamespacePassword(v string) *DescribeIndexRequest {
	s.NamespacePassword = &v
	return s
}

func (s *DescribeIndexRequest) SetOwnerId(v int64) *DescribeIndexRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeIndexRequest) SetRegionId(v string) *DescribeIndexRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeIndexRequest) SetWorkspaceId(v string) *DescribeIndexRequest {
	s.WorkspaceId = &v
	return s
}

func (s *DescribeIndexRequest) Validate() error {
	return dara.Validate(s)
}

type iDescribeIndexResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetCollection(v string) *DescribeIndexResponseBody
	GetCollection() *string
	SetIndexDef(v string) *DescribeIndexResponseBody
	GetIndexDef() *string
	SetIndexName(v string) *DescribeIndexResponseBody
	GetIndexName() *string
	SetMessage(v string) *DescribeIndexResponseBody
	GetMessage() *string
	SetNamespace(v string) *DescribeIndexResponseBody
	GetNamespace() *string
	SetRequestId(v string) *DescribeIndexResponseBody
	GetRequestId() *string
	SetStatus(v string) *DescribeIndexResponseBody
	GetStatus() *string
}

type DescribeIndexResponseBody struct {
	// example:
	//
	// testcollection
	Collection *string `json:"Collection,omitempty" xml:"Collection,omitempty"`
	// example:
	//
	// CREATE INDEX testindex ON mynamespace. testcollection
	IndexDef *string `json:"IndexDef,omitempty" xml:"IndexDef,omitempty"`
	// example:
	//
	// testindex
	IndexName *string `json:"IndexName,omitempty" xml:"IndexName,omitempty"`
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// mynamespace
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeIndexResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DescribeIndexResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeIndexResponseBody) GetCollection() *string {
	return s.Collection
}

func (s *DescribeIndexResponseBody) GetIndexDef() *string {
	return s.IndexDef
}

func (s *DescribeIndexResponseBody) GetIndexName() *string {
	return s.IndexName
}

func (s *DescribeIndexResponseBody) GetMessage() *string {
	return s.Message
}

func (s *DescribeIndexResponseBody) GetNamespace() *string {
	return s.Namespace
}

func (s *DescribeIndexResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DescribeIndexResponseBody) GetStatus() *string {
	return s.Status
}

func (s *DescribeIndexResponseBody) SetCollection(v string) *DescribeIndexResponseBody {
	s.Collection = &v
	return s
}

func (s *DescribeIndexResponseBody) SetIndexDef(v string) *DescribeIndexResponseBody {
	s.IndexDef = &v
	return s
}

func (s *DescribeIndexResponseBody) SetIndexName(v string) *DescribeIndexResponseBody {
	s.IndexName = &v
	return s
}

func (s *DescribeIndexResponseBody) SetMessage(v string) *DescribeIndexResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeIndexResponseBody) SetNamespace(v string) *DescribeIndexResponseBody {
	s.Namespace = &v
	return s
}

func (s *DescribeIndexResponseBody) SetRequestId(v string) *DescribeIndexResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeIndexResponseBody) SetStatus(v string) *DescribeIndexResponseBody {
	s.Status = &v
	return s
}

func (s *DescribeIndexResponseBody) Validate() error {
	return dara.Validate(s)
}

type iDescribeIndexResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DescribeIndexResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DescribeIndexResponse
	GetStatusCode() *int32
	SetBody(v *DescribeIndexResponseBody) *DescribeIndexResponse
	GetBody() *DescribeIndexResponseBody
}

type DescribeIndexResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeIndexResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeIndexResponse) String() string {
	return dara.Prettify(s)
}

func (s DescribeIndexResponse) GoString() string {
	return s.String()
}

func (s *DescribeIndexResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DescribeIndexResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DescribeIndexResponse) GetBody() *DescribeIndexResponseBody {
	return s.Body
}

func (s *DescribeIndexResponse) SetHeaders(v map[string]*string) *DescribeIndexResponse {
	s.Headers = v
	return s
}

func (s *DescribeIndexResponse) SetStatusCode(v int32) *DescribeIndexResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeIndexResponse) SetBody(v *DescribeIndexResponseBody) *DescribeIndexResponse {
	s.Body = v
	return s
}

func (s *DescribeIndexResponse) Validate() error {
	return dara.Validate(s)
}

type iDescribeJDBCDataSourceRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *DescribeJDBCDataSourceRequest
	GetDBInstanceId() *string
	SetDataSourceId(v string) *DescribeJDBCDataSourceRequest
	GetDataSourceId() *string
}

type DescribeJDBCDataSourceRequest struct {
	// The instance ID.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The data source ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 123
	DataSourceId *string `json:"DataSourceId,omitempty" xml:"DataSourceId,omitempty"`
}

func (s DescribeJDBCDataSourceRequest) String() string {
	return dara.Prettify(s)
}

func (s DescribeJDBCDataSourceRequest) GoString() string {
	return s.String()
}

func (s *DescribeJDBCDataSourceRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *DescribeJDBCDataSourceRequest) GetDataSourceId() *string {
	return s.DataSourceId
}

func (s *DescribeJDBCDataSourceRequest) SetDBInstanceId(v string) *DescribeJDBCDataSourceRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeJDBCDataSourceRequest) SetDataSourceId(v string) *DescribeJDBCDataSourceRequest {
	s.DataSourceId = &v
	return s
}

func (s *DescribeJDBCDataSourceRequest) Validate() error {
	return dara.Validate(s)
}

type iDescribeJDBCDataSourceResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetCreateTime(v string) *DescribeJDBCDataSourceResponseBody
	GetCreateTime() *string
	SetDataSourceDescription(v string) *DescribeJDBCDataSourceResponseBody
	GetDataSourceDescription() *string
	SetDataSourceId(v string) *DescribeJDBCDataSourceResponseBody
	GetDataSourceId() *string
	SetDataSourceName(v string) *DescribeJDBCDataSourceResponseBody
	GetDataSourceName() *string
	SetDataSourceStatus(v string) *DescribeJDBCDataSourceResponseBody
	GetDataSourceStatus() *string
	SetDataSourceType(v string) *DescribeJDBCDataSourceResponseBody
	GetDataSourceType() *string
	SetExternalDataServiceId(v string) *DescribeJDBCDataSourceResponseBody
	GetExternalDataServiceId() *string
	SetJDBCConnectionString(v string) *DescribeJDBCDataSourceResponseBody
	GetJDBCConnectionString() *string
	SetJDBCPassword(v string) *DescribeJDBCDataSourceResponseBody
	GetJDBCPassword() *string
	SetJDBCUserName(v string) *DescribeJDBCDataSourceResponseBody
	GetJDBCUserName() *string
	SetModifyTime(v string) *DescribeJDBCDataSourceResponseBody
	GetModifyTime() *string
	SetRequestId(v string) *DescribeJDBCDataSourceResponseBody
	GetRequestId() *string
	SetStatusMessage(v string) *DescribeJDBCDataSourceResponseBody
	GetStatusMessage() *string
}

type DescribeJDBCDataSourceResponseBody struct {
	// The time when the service was created.
	//
	// example:
	//
	// 2019-09-08T16:00:00Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The description of the service. The description can be up to 256 characters in length.
	//
	// example:
	//
	// mysql data source config
	DataSourceDescription *string `json:"DataSourceDescription,omitempty" xml:"DataSourceDescription,omitempty"`
	// The data source ID.
	//
	// example:
	//
	// 123
	DataSourceId *string `json:"DataSourceId,omitempty" xml:"DataSourceId,omitempty"`
	// The name of data soruce
	//
	// example:
	//
	// hdfs_pxf
	DataSourceName *string `json:"DataSourceName,omitempty" xml:"DataSourceName,omitempty"`
	// The status of the service. Valid values:
	//
	// 	- Init
	//
	// 	- Running
	//
	// 	- Exception
	//
	// example:
	//
	// Running
	DataSourceStatus *string `json:"DataSourceStatus,omitempty" xml:"DataSourceStatus,omitempty"`
	// The type of the data source.
	//
	// example:
	//
	// MySQL
	DataSourceType *string `json:"DataSourceType,omitempty" xml:"DataSourceType,omitempty"`
	// The id of the external data service
	//
	// example:
	//
	// 2989
	ExternalDataServiceId *string `json:"ExternalDataServiceId,omitempty" xml:"ExternalDataServiceId,omitempty"`
	// The JDBC connection string.
	//
	// example:
	//
	// xxxxxx
	JDBCConnectionString *string `json:"JDBCConnectionString,omitempty" xml:"JDBCConnectionString,omitempty"`
	// The password of the database account.
	//
	// example:
	//
	// xxxxxx
	JDBCPassword *string `json:"JDBCPassword,omitempty" xml:"JDBCPassword,omitempty"`
	// The name of the database account.
	//
	// example:
	//
	// xxxxxx
	JDBCUserName *string `json:"JDBCUserName,omitempty" xml:"JDBCUserName,omitempty"`
	// The time when the data source was last modified.
	//
	// example:
	//
	// 2024-08-27T02:01:10Z
	ModifyTime *string `json:"ModifyTime,omitempty" xml:"ModifyTime,omitempty"`
	// The request ID.
	//
	// example:
	//
	// B4CAF581-2AC7-41AD-8940-D56DF7AADF5B
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The message of the status
	//
	// example:
	//
	// ""
	StatusMessage *string `json:"StatusMessage,omitempty" xml:"StatusMessage,omitempty"`
}

func (s DescribeJDBCDataSourceResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DescribeJDBCDataSourceResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeJDBCDataSourceResponseBody) GetCreateTime() *string {
	return s.CreateTime
}

func (s *DescribeJDBCDataSourceResponseBody) GetDataSourceDescription() *string {
	return s.DataSourceDescription
}

func (s *DescribeJDBCDataSourceResponseBody) GetDataSourceId() *string {
	return s.DataSourceId
}

func (s *DescribeJDBCDataSourceResponseBody) GetDataSourceName() *string {
	return s.DataSourceName
}

func (s *DescribeJDBCDataSourceResponseBody) GetDataSourceStatus() *string {
	return s.DataSourceStatus
}

func (s *DescribeJDBCDataSourceResponseBody) GetDataSourceType() *string {
	return s.DataSourceType
}

func (s *DescribeJDBCDataSourceResponseBody) GetExternalDataServiceId() *string {
	return s.ExternalDataServiceId
}

func (s *DescribeJDBCDataSourceResponseBody) GetJDBCConnectionString() *string {
	return s.JDBCConnectionString
}

func (s *DescribeJDBCDataSourceResponseBody) GetJDBCPassword() *string {
	return s.JDBCPassword
}

func (s *DescribeJDBCDataSourceResponseBody) GetJDBCUserName() *string {
	return s.JDBCUserName
}

func (s *DescribeJDBCDataSourceResponseBody) GetModifyTime() *string {
	return s.ModifyTime
}

func (s *DescribeJDBCDataSourceResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DescribeJDBCDataSourceResponseBody) GetStatusMessage() *string {
	return s.StatusMessage
}

func (s *DescribeJDBCDataSourceResponseBody) SetCreateTime(v string) *DescribeJDBCDataSourceResponseBody {
	s.CreateTime = &v
	return s
}

func (s *DescribeJDBCDataSourceResponseBody) SetDataSourceDescription(v string) *DescribeJDBCDataSourceResponseBody {
	s.DataSourceDescription = &v
	return s
}

func (s *DescribeJDBCDataSourceResponseBody) SetDataSourceId(v string) *DescribeJDBCDataSourceResponseBody {
	s.DataSourceId = &v
	return s
}

func (s *DescribeJDBCDataSourceResponseBody) SetDataSourceName(v string) *DescribeJDBCDataSourceResponseBody {
	s.DataSourceName = &v
	return s
}

func (s *DescribeJDBCDataSourceResponseBody) SetDataSourceStatus(v string) *DescribeJDBCDataSourceResponseBody {
	s.DataSourceStatus = &v
	return s
}

func (s *DescribeJDBCDataSourceResponseBody) SetDataSourceType(v string) *DescribeJDBCDataSourceResponseBody {
	s.DataSourceType = &v
	return s
}

func (s *DescribeJDBCDataSourceResponseBody) SetExternalDataServiceId(v string) *DescribeJDBCDataSourceResponseBody {
	s.ExternalDataServiceId = &v
	return s
}

func (s *DescribeJDBCDataSourceResponseBody) SetJDBCConnectionString(v string) *DescribeJDBCDataSourceResponseBody {
	s.JDBCConnectionString = &v
	return s
}

func (s *DescribeJDBCDataSourceResponseBody) SetJDBCPassword(v string) *DescribeJDBCDataSourceResponseBody {
	s.JDBCPassword = &v
	return s
}

func (s *DescribeJDBCDataSourceResponseBody) SetJDBCUserName(v string) *DescribeJDBCDataSourceResponseBody {
	s.JDBCUserName = &v
	return s
}

func (s *DescribeJDBCDataSourceResponseBody) SetModifyTime(v string) *DescribeJDBCDataSourceResponseBody {
	s.ModifyTime = &v
	return s
}

func (s *DescribeJDBCDataSourceResponseBody) SetRequestId(v string) *DescribeJDBCDataSourceResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeJDBCDataSourceResponseBody) SetStatusMessage(v string) *DescribeJDBCDataSourceResponseBody {
	s.StatusMessage = &v
	return s
}

func (s *DescribeJDBCDataSourceResponseBody) Validate() error {
	return dara.Validate(s)
}

type iDescribeJDBCDataSourceResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DescribeJDBCDataSourceResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DescribeJDBCDataSourceResponse
	GetStatusCode() *int32
	SetBody(v *DescribeJDBCDataSourceResponseBody) *DescribeJDBCDataSourceResponse
	GetBody() *DescribeJDBCDataSourceResponseBody
}

type DescribeJDBCDataSourceResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeJDBCDataSourceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeJDBCDataSourceResponse) String() string {
	return dara.Prettify(s)
}

func (s DescribeJDBCDataSourceResponse) GoString() string {
	return s.String()
}

func (s *DescribeJDBCDataSourceResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DescribeJDBCDataSourceResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DescribeJDBCDataSourceResponse) GetBody() *DescribeJDBCDataSourceResponseBody {
	return s.Body
}

func (s *DescribeJDBCDataSourceResponse) SetHeaders(v map[string]*string) *DescribeJDBCDataSourceResponse {
	s.Headers = v
	return s
}

func (s *DescribeJDBCDataSourceResponse) SetStatusCode(v int32) *DescribeJDBCDataSourceResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeJDBCDataSourceResponse) SetBody(v *DescribeJDBCDataSourceResponseBody) *DescribeJDBCDataSourceResponse {
	s.Body = v
	return s
}

func (s *DescribeJDBCDataSourceResponse) Validate() error {
	return dara.Validate(s)
}

type iDescribeLogBackupsRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *DescribeLogBackupsRequest
	GetDBInstanceId() *string
	SetEndTime(v string) *DescribeLogBackupsRequest
	GetEndTime() *string
	SetPageNumber(v int32) *DescribeLogBackupsRequest
	GetPageNumber() *int32
	SetPageSize(v int32) *DescribeLogBackupsRequest
	GetPageSize() *int32
	SetStartTime(v string) *DescribeLogBackupsRequest
	GetStartTime() *string
}

type DescribeLogBackupsRequest struct {
	// The ID of the instance.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the IDs of all AnalyticDB for PostgreSQL instances in a specific region.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The end of the time range to query. The end time must be later than the start time. Specify the time in the yyyy-MM-ddTHH:mmZ format. The time must be in UTC.
	//
	// This parameter is required.
	//
	// example:
	//
	// 2022-12-12T03:00Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The number of the page to return. The value must be an integer that is greater than 0. Default value: **1**.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries to return on each page. Valid values:
	//
	// 	- **30**
	//
	// 	- **50**
	//
	// 	- **100**
	//
	// Default value: **30**.
	//
	// example:
	//
	// 30
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The beginning of the time range to query. Specify the time in the yyyy-MM-ddTHH:mmZ format. The time must be in UTC.
	//
	// This parameter is required.
	//
	// example:
	//
	// 2022-12-12T02:00Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeLogBackupsRequest) String() string {
	return dara.Prettify(s)
}

func (s DescribeLogBackupsRequest) GoString() string {
	return s.String()
}

func (s *DescribeLogBackupsRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *DescribeLogBackupsRequest) GetEndTime() *string {
	return s.EndTime
}

func (s *DescribeLogBackupsRequest) GetPageNumber() *int32 {
	return s.PageNumber
}

func (s *DescribeLogBackupsRequest) GetPageSize() *int32 {
	return s.PageSize
}

func (s *DescribeLogBackupsRequest) GetStartTime() *string {
	return s.StartTime
}

func (s *DescribeLogBackupsRequest) SetDBInstanceId(v string) *DescribeLogBackupsRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeLogBackupsRequest) SetEndTime(v string) *DescribeLogBackupsRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeLogBackupsRequest) SetPageNumber(v int32) *DescribeLogBackupsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeLogBackupsRequest) SetPageSize(v int32) *DescribeLogBackupsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeLogBackupsRequest) SetStartTime(v string) *DescribeLogBackupsRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeLogBackupsRequest) Validate() error {
	return dara.Validate(s)
}

type iDescribeLogBackupsResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetItems(v []*DescribeLogBackupsResponseBodyItems) *DescribeLogBackupsResponseBody
	GetItems() []*DescribeLogBackupsResponseBodyItems
	SetPageNumber(v int32) *DescribeLogBackupsResponseBody
	GetPageNumber() *int32
	SetPageSize(v int32) *DescribeLogBackupsResponseBody
	GetPageSize() *int32
	SetRequestId(v string) *DescribeLogBackupsResponseBody
	GetRequestId() *string
	SetTotalCount(v int32) *DescribeLogBackupsResponseBody
	GetTotalCount() *int32
	SetTotalLogSize(v int64) *DescribeLogBackupsResponseBody
	GetTotalLogSize() *int64
}

type DescribeLogBackupsResponseBody struct {
	// Details of the backup sets.
	Items []*DescribeLogBackupsResponseBodyItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Repeated"`
	// The page number of the returned page.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of backup sets on the current page.
	//
	// example:
	//
	// 30
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 24B9FCAF-2CBC-51C3-B563-F1C70D750187
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of entries.
	//
	// example:
	//
	// 5
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	// The total size of logs in the time range. Unit: bytes.
	//
	// example:
	//
	// 386748
	TotalLogSize *int64 `json:"TotalLogSize,omitempty" xml:"TotalLogSize,omitempty"`
}

func (s DescribeLogBackupsResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DescribeLogBackupsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLogBackupsResponseBody) GetItems() []*DescribeLogBackupsResponseBodyItems {
	return s.Items
}

func (s *DescribeLogBackupsResponseBody) GetPageNumber() *int32 {
	return s.PageNumber
}

func (s *DescribeLogBackupsResponseBody) GetPageSize() *int32 {
	return s.PageSize
}

func (s *DescribeLogBackupsResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DescribeLogBackupsResponseBody) GetTotalCount() *int32 {
	return s.TotalCount
}

func (s *DescribeLogBackupsResponseBody) GetTotalLogSize() *int64 {
	return s.TotalLogSize
}

func (s *DescribeLogBackupsResponseBody) SetItems(v []*DescribeLogBackupsResponseBodyItems) *DescribeLogBackupsResponseBody {
	s.Items = v
	return s
}

func (s *DescribeLogBackupsResponseBody) SetPageNumber(v int32) *DescribeLogBackupsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeLogBackupsResponseBody) SetPageSize(v int32) *DescribeLogBackupsResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeLogBackupsResponseBody) SetRequestId(v string) *DescribeLogBackupsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLogBackupsResponseBody) SetTotalCount(v int32) *DescribeLogBackupsResponseBody {
	s.TotalCount = &v
	return s
}

func (s *DescribeLogBackupsResponseBody) SetTotalLogSize(v int64) *DescribeLogBackupsResponseBody {
	s.TotalLogSize = &v
	return s
}

func (s *DescribeLogBackupsResponseBody) Validate() error {
	return dara.Validate(s)
}

type DescribeLogBackupsResponseBodyItems struct {
	// The ID of the backup set.
	//
	// example:
	//
	// 12413721782
	BackupId *string `json:"BackupId,omitempty" xml:"BackupId,omitempty"`
	// The ID of the coordinator node.
	//
	// example:
	//
	// gp-bp12ga6v69h86****-master
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The name of the log backup set that is stored in Object Storage Service (OSS).
	//
	// example:
	//
	// 000000010000000400000012
	LogFileName *string `json:"LogFileName,omitempty" xml:"LogFileName,omitempty"`
	// The size of the log backup set. Unit: bytes.
	//
	// example:
	//
	// 77350
	LogFileSize *int64 `json:"LogFileSize,omitempty" xml:"LogFileSize,omitempty"`
	// The timestamp of the log.
	//
	// example:
	//
	// 2022-12-12T02:14:26Z
	LogTime *string `json:"LogTime,omitempty" xml:"LogTime,omitempty"`
	// The name of the compute node.
	//
	// example:
	//
	// segment-0
	SegmentName *string `json:"SegmentName,omitempty" xml:"SegmentName,omitempty"`
}

func (s DescribeLogBackupsResponseBodyItems) String() string {
	return dara.Prettify(s)
}

func (s DescribeLogBackupsResponseBodyItems) GoString() string {
	return s.String()
}

func (s *DescribeLogBackupsResponseBodyItems) GetBackupId() *string {
	return s.BackupId
}

func (s *DescribeLogBackupsResponseBodyItems) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *DescribeLogBackupsResponseBodyItems) GetLogFileName() *string {
	return s.LogFileName
}

func (s *DescribeLogBackupsResponseBodyItems) GetLogFileSize() *int64 {
	return s.LogFileSize
}

func (s *DescribeLogBackupsResponseBodyItems) GetLogTime() *string {
	return s.LogTime
}

func (s *DescribeLogBackupsResponseBodyItems) GetSegmentName() *string {
	return s.SegmentName
}

func (s *DescribeLogBackupsResponseBodyItems) SetBackupId(v string) *DescribeLogBackupsResponseBodyItems {
	s.BackupId = &v
	return s
}

func (s *DescribeLogBackupsResponseBodyItems) SetDBInstanceId(v string) *DescribeLogBackupsResponseBodyItems {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeLogBackupsResponseBodyItems) SetLogFileName(v string) *DescribeLogBackupsResponseBodyItems {
	s.LogFileName = &v
	return s
}

func (s *DescribeLogBackupsResponseBodyItems) SetLogFileSize(v int64) *DescribeLogBackupsResponseBodyItems {
	s.LogFileSize = &v
	return s
}

func (s *DescribeLogBackupsResponseBodyItems) SetLogTime(v string) *DescribeLogBackupsResponseBodyItems {
	s.LogTime = &v
	return s
}

func (s *DescribeLogBackupsResponseBodyItems) SetSegmentName(v string) *DescribeLogBackupsResponseBodyItems {
	s.SegmentName = &v
	return s
}

func (s *DescribeLogBackupsResponseBodyItems) Validate() error {
	return dara.Validate(s)
}

type iDescribeLogBackupsResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DescribeLogBackupsResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DescribeLogBackupsResponse
	GetStatusCode() *int32
	SetBody(v *DescribeLogBackupsResponseBody) *DescribeLogBackupsResponse
	GetBody() *DescribeLogBackupsResponseBody
}

type DescribeLogBackupsResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeLogBackupsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeLogBackupsResponse) String() string {
	return dara.Prettify(s)
}

func (s DescribeLogBackupsResponse) GoString() string {
	return s.String()
}

func (s *DescribeLogBackupsResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DescribeLogBackupsResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DescribeLogBackupsResponse) GetBody() *DescribeLogBackupsResponseBody {
	return s.Body
}

func (s *DescribeLogBackupsResponse) SetHeaders(v map[string]*string) *DescribeLogBackupsResponse {
	s.Headers = v
	return s
}

func (s *DescribeLogBackupsResponse) SetStatusCode(v int32) *DescribeLogBackupsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeLogBackupsResponse) SetBody(v *DescribeLogBackupsResponseBody) *DescribeLogBackupsResponse {
	s.Body = v
	return s
}

func (s *DescribeLogBackupsResponse) Validate() error {
	return dara.Validate(s)
}

type iDescribeModifyParameterLogRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *DescribeModifyParameterLogRequest
	GetDBInstanceId() *string
	SetEndTime(v string) *DescribeModifyParameterLogRequest
	GetEndTime() *string
	SetStartTime(v string) *DescribeModifyParameterLogRequest
	GetStartTime() *string
}

type DescribeModifyParameterLogRequest struct {
	// The instance ID.
	//
	// > You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/196830.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The end of the time range to query. Specify the time in the ISO 8601 standard in the *yyyy-MM-ddTHH:mmZ	- format. The time must be in UTC. The end time must be later than the start time.
	//
	// example:
	//
	// 2020-05-05T11:22:22Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The beginning of the time range to query. Specify the time in the ISO 8601 standard in the *yyyy-MM-ddTHH:mmZ	- format. The time must be in UTC.
	//
	// example:
	//
	// 2020-02-02T11:22:22Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeModifyParameterLogRequest) String() string {
	return dara.Prettify(s)
}

func (s DescribeModifyParameterLogRequest) GoString() string {
	return s.String()
}

func (s *DescribeModifyParameterLogRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *DescribeModifyParameterLogRequest) GetEndTime() *string {
	return s.EndTime
}

func (s *DescribeModifyParameterLogRequest) GetStartTime() *string {
	return s.StartTime
}

func (s *DescribeModifyParameterLogRequest) SetDBInstanceId(v string) *DescribeModifyParameterLogRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeModifyParameterLogRequest) SetEndTime(v string) *DescribeModifyParameterLogRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeModifyParameterLogRequest) SetStartTime(v string) *DescribeModifyParameterLogRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeModifyParameterLogRequest) Validate() error {
	return dara.Validate(s)
}

type iDescribeModifyParameterLogResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetChangelogs(v []*DescribeModifyParameterLogResponseBodyChangelogs) *DescribeModifyParameterLogResponseBody
	GetChangelogs() []*DescribeModifyParameterLogResponseBodyChangelogs
	SetRequestId(v string) *DescribeModifyParameterLogResponseBody
	GetRequestId() *string
}

type DescribeModifyParameterLogResponseBody struct {
	// The queried parameter modification logs.
	Changelogs []*DescribeModifyParameterLogResponseBodyChangelogs `json:"Changelogs,omitempty" xml:"Changelogs,omitempty" type:"Repeated"`
	// The request ID.
	//
	// example:
	//
	// 7565770E-7C45-462D-BA4A-8A5396F2CAD1
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeModifyParameterLogResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DescribeModifyParameterLogResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeModifyParameterLogResponseBody) GetChangelogs() []*DescribeModifyParameterLogResponseBodyChangelogs {
	return s.Changelogs
}

func (s *DescribeModifyParameterLogResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DescribeModifyParameterLogResponseBody) SetChangelogs(v []*DescribeModifyParameterLogResponseBodyChangelogs) *DescribeModifyParameterLogResponseBody {
	s.Changelogs = v
	return s
}

func (s *DescribeModifyParameterLogResponseBody) SetRequestId(v string) *DescribeModifyParameterLogResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeModifyParameterLogResponseBody) Validate() error {
	return dara.Validate(s)
}

type DescribeModifyParameterLogResponseBodyChangelogs struct {
	// The effective time.
	//
	// example:
	//
	// 2020-05-05T11:22:22Z
	EffectTime *string `json:"EffectTime,omitempty" xml:"EffectTime,omitempty"`
	// The name of the parameter.
	//
	// example:
	//
	// testkey
	ParameterName *string `json:"ParameterName,omitempty" xml:"ParameterName,omitempty"`
	// Indicates whether the modification takes effect.
	//
	// example:
	//
	// true
	ParameterValid *string `json:"ParameterValid,omitempty" xml:"ParameterValid,omitempty"`
	// The original value of the parameter.
	//
	// example:
	//
	// 100
	ParameterValueAfter *string `json:"ParameterValueAfter,omitempty" xml:"ParameterValueAfter,omitempty"`
	// The new value of the parameter.
	//
	// example:
	//
	// 200
	ParameterValueBefore *string `json:"ParameterValueBefore,omitempty" xml:"ParameterValueBefore,omitempty"`
}

func (s DescribeModifyParameterLogResponseBodyChangelogs) String() string {
	return dara.Prettify(s)
}

func (s DescribeModifyParameterLogResponseBodyChangelogs) GoString() string {
	return s.String()
}

func (s *DescribeModifyParameterLogResponseBodyChangelogs) GetEffectTime() *string {
	return s.EffectTime
}

func (s *DescribeModifyParameterLogResponseBodyChangelogs) GetParameterName() *string {
	return s.ParameterName
}

func (s *DescribeModifyParameterLogResponseBodyChangelogs) GetParameterValid() *string {
	return s.ParameterValid
}

func (s *DescribeModifyParameterLogResponseBodyChangelogs) GetParameterValueAfter() *string {
	return s.ParameterValueAfter
}

func (s *DescribeModifyParameterLogResponseBodyChangelogs) GetParameterValueBefore() *string {
	return s.ParameterValueBefore
}

func (s *DescribeModifyParameterLogResponseBodyChangelogs) SetEffectTime(v string) *DescribeModifyParameterLogResponseBodyChangelogs {
	s.EffectTime = &v
	return s
}

func (s *DescribeModifyParameterLogResponseBodyChangelogs) SetParameterName(v string) *DescribeModifyParameterLogResponseBodyChangelogs {
	s.ParameterName = &v
	return s
}

func (s *DescribeModifyParameterLogResponseBodyChangelogs) SetParameterValid(v string) *DescribeModifyParameterLogResponseBodyChangelogs {
	s.ParameterValid = &v
	return s
}

func (s *DescribeModifyParameterLogResponseBodyChangelogs) SetParameterValueAfter(v string) *DescribeModifyParameterLogResponseBodyChangelogs {
	s.ParameterValueAfter = &v
	return s
}

func (s *DescribeModifyParameterLogResponseBodyChangelogs) SetParameterValueBefore(v string) *DescribeModifyParameterLogResponseBodyChangelogs {
	s.ParameterValueBefore = &v
	return s
}

func (s *DescribeModifyParameterLogResponseBodyChangelogs) Validate() error {
	return dara.Validate(s)
}

type iDescribeModifyParameterLogResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DescribeModifyParameterLogResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DescribeModifyParameterLogResponse
	GetStatusCode() *int32
	SetBody(v *DescribeModifyParameterLogResponseBody) *DescribeModifyParameterLogResponse
	GetBody() *DescribeModifyParameterLogResponseBody
}

type DescribeModifyParameterLogResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeModifyParameterLogResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeModifyParameterLogResponse) String() string {
	return dara.Prettify(s)
}

func (s DescribeModifyParameterLogResponse) GoString() string {
	return s.String()
}

func (s *DescribeModifyParameterLogResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DescribeModifyParameterLogResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DescribeModifyParameterLogResponse) GetBody() *DescribeModifyParameterLogResponseBody {
	return s.Body
}

func (s *DescribeModifyParameterLogResponse) SetHeaders(v map[string]*string) *DescribeModifyParameterLogResponse {
	s.Headers = v
	return s
}

func (s *DescribeModifyParameterLogResponse) SetStatusCode(v int32) *DescribeModifyParameterLogResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeModifyParameterLogResponse) SetBody(v *DescribeModifyParameterLogResponseBody) *DescribeModifyParameterLogResponse {
	s.Body = v
	return s
}

func (s *DescribeModifyParameterLogResponse) Validate() error {
	return dara.Validate(s)
}

type iDescribeNamespaceRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *DescribeNamespaceRequest
	GetDBInstanceId() *string
	SetManagerAccount(v string) *DescribeNamespaceRequest
	GetManagerAccount() *string
	SetManagerAccountPassword(v string) *DescribeNamespaceRequest
	GetManagerAccountPassword() *string
	SetNamespace(v string) *DescribeNamespaceRequest
	GetNamespace() *string
	SetOwnerId(v int64) *DescribeNamespaceRequest
	GetOwnerId() *int64
	SetRegionId(v string) *DescribeNamespaceRequest
	GetRegionId() *string
	SetWorkspaceId(v string) *DescribeNamespaceRequest
	GetWorkspaceId() *string
}

type DescribeNamespaceRequest struct {
	// The instance ID.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The name of the manager account that has the rds_superuser permission.
	//
	// >  You can create an account on the Account Management page of the AnalyticDB for PostgreSQL console or by calling the [CreateAccount](https://help.aliyun.com/document_detail/2361789.html) operation.
	//
	// This parameter is required.
	//
	// example:
	//
	// testaccount
	ManagerAccount *string `json:"ManagerAccount,omitempty" xml:"ManagerAccount,omitempty"`
	// The password of the manager account.
	//
	// This parameter is required.
	//
	// example:
	//
	// testpassword
	ManagerAccountPassword *string `json:"ManagerAccountPassword,omitempty" xml:"ManagerAccountPassword,omitempty"`
	// The name of the namespace. Default value: public.
	//
	// >  You can call the [ListNamespaces](https://help.aliyun.com/document_detail/2401502.html) operation to query a list of namespaces.
	//
	// This parameter is required.
	//
	// example:
	//
	// mynamespace
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	OwnerId   *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The region ID of the instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the workspace that consists of multiple AnalyticDB for PostgreSQL instances. You must specify one of the WorkspaceId and DBInstanceId parameters. If you specify both parameters, the WorkspaceId parameter takes effect.
	//
	// example:
	//
	// gp-ws-*****
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s DescribeNamespaceRequest) String() string {
	return dara.Prettify(s)
}

func (s DescribeNamespaceRequest) GoString() string {
	return s.String()
}

func (s *DescribeNamespaceRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *DescribeNamespaceRequest) GetManagerAccount() *string {
	return s.ManagerAccount
}

func (s *DescribeNamespaceRequest) GetManagerAccountPassword() *string {
	return s.ManagerAccountPassword
}

func (s *DescribeNamespaceRequest) GetNamespace() *string {
	return s.Namespace
}

func (s *DescribeNamespaceRequest) GetOwnerId() *int64 {
	return s.OwnerId
}

func (s *DescribeNamespaceRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *DescribeNamespaceRequest) GetWorkspaceId() *string {
	return s.WorkspaceId
}

func (s *DescribeNamespaceRequest) SetDBInstanceId(v string) *DescribeNamespaceRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeNamespaceRequest) SetManagerAccount(v string) *DescribeNamespaceRequest {
	s.ManagerAccount = &v
	return s
}

func (s *DescribeNamespaceRequest) SetManagerAccountPassword(v string) *DescribeNamespaceRequest {
	s.ManagerAccountPassword = &v
	return s
}

func (s *DescribeNamespaceRequest) SetNamespace(v string) *DescribeNamespaceRequest {
	s.Namespace = &v
	return s
}

func (s *DescribeNamespaceRequest) SetOwnerId(v int64) *DescribeNamespaceRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeNamespaceRequest) SetRegionId(v string) *DescribeNamespaceRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeNamespaceRequest) SetWorkspaceId(v string) *DescribeNamespaceRequest {
	s.WorkspaceId = &v
	return s
}

func (s *DescribeNamespaceRequest) Validate() error {
	return dara.Validate(s)
}

type iDescribeNamespaceResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *DescribeNamespaceResponseBody
	GetDBInstanceId() *string
	SetMessage(v string) *DescribeNamespaceResponseBody
	GetMessage() *string
	SetNamespace(v string) *DescribeNamespaceResponseBody
	GetNamespace() *string
	SetNamespaceInfo(v map[string]*string) *DescribeNamespaceResponseBody
	GetNamespaceInfo() map[string]*string
	SetRegionId(v string) *DescribeNamespaceResponseBody
	GetRegionId() *string
	SetRequestId(v string) *DescribeNamespaceResponseBody
	GetRequestId() *string
	SetStatus(v string) *DescribeNamespaceResponseBody
	GetStatus() *string
}

type DescribeNamespaceResponseBody struct {
	// The instance ID.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The returned message.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The name of the namespace.
	//
	// example:
	//
	// mynamespace
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// The queried namespace.
	NamespaceInfo map[string]*string `json:"NamespaceInfo,omitempty" xml:"NamespaceInfo,omitempty"`
	// The region ID of the instance.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **success**
	//
	// 	- **fail**
	//
	// example:
	//
	// success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeNamespaceResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DescribeNamespaceResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeNamespaceResponseBody) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *DescribeNamespaceResponseBody) GetMessage() *string {
	return s.Message
}

func (s *DescribeNamespaceResponseBody) GetNamespace() *string {
	return s.Namespace
}

func (s *DescribeNamespaceResponseBody) GetNamespaceInfo() map[string]*string {
	return s.NamespaceInfo
}

func (s *DescribeNamespaceResponseBody) GetRegionId() *string {
	return s.RegionId
}

func (s *DescribeNamespaceResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DescribeNamespaceResponseBody) GetStatus() *string {
	return s.Status
}

func (s *DescribeNamespaceResponseBody) SetDBInstanceId(v string) *DescribeNamespaceResponseBody {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeNamespaceResponseBody) SetMessage(v string) *DescribeNamespaceResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeNamespaceResponseBody) SetNamespace(v string) *DescribeNamespaceResponseBody {
	s.Namespace = &v
	return s
}

func (s *DescribeNamespaceResponseBody) SetNamespaceInfo(v map[string]*string) *DescribeNamespaceResponseBody {
	s.NamespaceInfo = v
	return s
}

func (s *DescribeNamespaceResponseBody) SetRegionId(v string) *DescribeNamespaceResponseBody {
	s.RegionId = &v
	return s
}

func (s *DescribeNamespaceResponseBody) SetRequestId(v string) *DescribeNamespaceResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeNamespaceResponseBody) SetStatus(v string) *DescribeNamespaceResponseBody {
	s.Status = &v
	return s
}

func (s *DescribeNamespaceResponseBody) Validate() error {
	return dara.Validate(s)
}

type iDescribeNamespaceResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DescribeNamespaceResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DescribeNamespaceResponse
	GetStatusCode() *int32
	SetBody(v *DescribeNamespaceResponseBody) *DescribeNamespaceResponse
	GetBody() *DescribeNamespaceResponseBody
}

type DescribeNamespaceResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeNamespaceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeNamespaceResponse) String() string {
	return dara.Prettify(s)
}

func (s DescribeNamespaceResponse) GoString() string {
	return s.String()
}

func (s *DescribeNamespaceResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DescribeNamespaceResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DescribeNamespaceResponse) GetBody() *DescribeNamespaceResponseBody {
	return s.Body
}

func (s *DescribeNamespaceResponse) SetHeaders(v map[string]*string) *DescribeNamespaceResponse {
	s.Headers = v
	return s
}

func (s *DescribeNamespaceResponse) SetStatusCode(v int32) *DescribeNamespaceResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeNamespaceResponse) SetBody(v *DescribeNamespaceResponseBody) *DescribeNamespaceResponse {
	s.Body = v
	return s
}

func (s *DescribeNamespaceResponse) Validate() error {
	return dara.Validate(s)
}

type iDescribeParametersRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *DescribeParametersRequest
	GetDBInstanceId() *string
}

type DescribeParametersRequest struct {
	// The ID of the instance.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the details of all AnalyticDB for PostgreSQL instances in a specific region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp***************
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
}

func (s DescribeParametersRequest) String() string {
	return dara.Prettify(s)
}

func (s DescribeParametersRequest) GoString() string {
	return s.String()
}

func (s *DescribeParametersRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *DescribeParametersRequest) SetDBInstanceId(v string) *DescribeParametersRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeParametersRequest) Validate() error {
	return dara.Validate(s)
}

type iDescribeParametersResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetParameters(v []*DescribeParametersResponseBodyParameters) *DescribeParametersResponseBody
	GetParameters() []*DescribeParametersResponseBodyParameters
	SetRequestId(v string) *DescribeParametersResponseBody
	GetRequestId() *string
}

type DescribeParametersResponseBody struct {
	// The queried configuration parameters.
	Parameters []*DescribeParametersResponseBodyParameters `json:"Parameters,omitempty" xml:"Parameters,omitempty" type:"Repeated"`
	// The ID of the request.
	//
	// example:
	//
	// 62506167-D284-562A-B7C2-0A**********
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeParametersResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DescribeParametersResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeParametersResponseBody) GetParameters() []*DescribeParametersResponseBodyParameters {
	return s.Parameters
}

func (s *DescribeParametersResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DescribeParametersResponseBody) SetParameters(v []*DescribeParametersResponseBodyParameters) *DescribeParametersResponseBody {
	s.Parameters = v
	return s
}

func (s *DescribeParametersResponseBody) SetRequestId(v string) *DescribeParametersResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeParametersResponseBody) Validate() error {
	return dara.Validate(s)
}

type DescribeParametersResponseBodyParameters struct {
	// The current value of the configuration parameter.
	//
	// example:
	//
	// 10800000
	CurrentValue *string `json:"CurrentValue,omitempty" xml:"CurrentValue,omitempty"`
	// Indicates whether a restart is required for parameter modifications to take effect. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// false
	ForceRestartInstance *string `json:"ForceRestartInstance,omitempty" xml:"ForceRestartInstance,omitempty"`
	// Indicates whether the configuration parameter can be modified. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	IsChangeableConfig *string `json:"IsChangeableConfig,omitempty" xml:"IsChangeableConfig,omitempty"`
	// The valid values of the configuration parameter.
	//
	// example:
	//
	// [0-2147483647]
	OptionalRange *string `json:"OptionalRange,omitempty" xml:"OptionalRange,omitempty"`
	// The description of the configuration parameter.
	//
	// example:
	//
	// Sets the maximum allowed duration of any statement, A value of 0 turns off the timeout.
	ParameterDescription *string `json:"ParameterDescription,omitempty" xml:"ParameterDescription,omitempty"`
	// The name of the configuration parameter.
	//
	// example:
	//
	// statement_timeout
	ParameterName *string `json:"ParameterName,omitempty" xml:"ParameterName,omitempty"`
	// The default value of the configuration parameter.
	//
	// example:
	//
	// 10800000
	ParameterValue *string `json:"ParameterValue,omitempty" xml:"ParameterValue,omitempty"`
}

func (s DescribeParametersResponseBodyParameters) String() string {
	return dara.Prettify(s)
}

func (s DescribeParametersResponseBodyParameters) GoString() string {
	return s.String()
}

func (s *DescribeParametersResponseBodyParameters) GetCurrentValue() *string {
	return s.CurrentValue
}

func (s *DescribeParametersResponseBodyParameters) GetForceRestartInstance() *string {
	return s.ForceRestartInstance
}

func (s *DescribeParametersResponseBodyParameters) GetIsChangeableConfig() *string {
	return s.IsChangeableConfig
}

func (s *DescribeParametersResponseBodyParameters) GetOptionalRange() *string {
	return s.OptionalRange
}

func (s *DescribeParametersResponseBodyParameters) GetParameterDescription() *string {
	return s.ParameterDescription
}

func (s *DescribeParametersResponseBodyParameters) GetParameterName() *string {
	return s.ParameterName
}

func (s *DescribeParametersResponseBodyParameters) GetParameterValue() *string {
	return s.ParameterValue
}

func (s *DescribeParametersResponseBodyParameters) SetCurrentValue(v string) *DescribeParametersResponseBodyParameters {
	s.CurrentValue = &v
	return s
}

func (s *DescribeParametersResponseBodyParameters) SetForceRestartInstance(v string) *DescribeParametersResponseBodyParameters {
	s.ForceRestartInstance = &v
	return s
}

func (s *DescribeParametersResponseBodyParameters) SetIsChangeableConfig(v string) *DescribeParametersResponseBodyParameters {
	s.IsChangeableConfig = &v
	return s
}

func (s *DescribeParametersResponseBodyParameters) SetOptionalRange(v string) *DescribeParametersResponseBodyParameters {
	s.OptionalRange = &v
	return s
}

func (s *DescribeParametersResponseBodyParameters) SetParameterDescription(v string) *DescribeParametersResponseBodyParameters {
	s.ParameterDescription = &v
	return s
}

func (s *DescribeParametersResponseBodyParameters) SetParameterName(v string) *DescribeParametersResponseBodyParameters {
	s.ParameterName = &v
	return s
}

func (s *DescribeParametersResponseBodyParameters) SetParameterValue(v string) *DescribeParametersResponseBodyParameters {
	s.ParameterValue = &v
	return s
}

func (s *DescribeParametersResponseBodyParameters) Validate() error {
	return dara.Validate(s)
}

type iDescribeParametersResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DescribeParametersResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DescribeParametersResponse
	GetStatusCode() *int32
	SetBody(v *DescribeParametersResponseBody) *DescribeParametersResponse
	GetBody() *DescribeParametersResponseBody
}

type DescribeParametersResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeParametersResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeParametersResponse) String() string {
	return dara.Prettify(s)
}

func (s DescribeParametersResponse) GoString() string {
	return s.String()
}

func (s *DescribeParametersResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DescribeParametersResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DescribeParametersResponse) GetBody() *DescribeParametersResponseBody {
	return s.Body
}

func (s *DescribeParametersResponse) SetHeaders(v map[string]*string) *DescribeParametersResponse {
	s.Headers = v
	return s
}

func (s *DescribeParametersResponse) SetStatusCode(v int32) *DescribeParametersResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeParametersResponse) SetBody(v *DescribeParametersResponseBody) *DescribeParametersResponse {
	s.Body = v
	return s
}

func (s *DescribeParametersResponse) Validate() error {
	return dara.Validate(s)
}

type iDescribeRdsVSwitchsRequest interface {
	dara.Model
	String() string
	GoString() string
	SetOwnerAccount(v string) *DescribeRdsVSwitchsRequest
	GetOwnerAccount() *string
	SetOwnerId(v int64) *DescribeRdsVSwitchsRequest
	GetOwnerId() *int64
	SetRegionId(v string) *DescribeRdsVSwitchsRequest
	GetRegionId() *string
	SetResourceGroupId(v string) *DescribeRdsVSwitchsRequest
	GetResourceGroupId() *string
	SetResourceOwnerAccount(v string) *DescribeRdsVSwitchsRequest
	GetResourceOwnerAccount() *string
	SetResourceOwnerId(v int64) *DescribeRdsVSwitchsRequest
	GetResourceOwnerId() *int64
	SetSecurityToken(v string) *DescribeRdsVSwitchsRequest
	GetSecurityToken() *string
	SetVpcId(v string) *DescribeRdsVSwitchsRequest
	GetVpcId() *string
	SetZoneId(v string) *DescribeRdsVSwitchsRequest
	GetZoneId() *string
}

type DescribeRdsVSwitchsRequest struct {
	OwnerAccount *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The ID of the region.
	//
	// >  You can call the [DescribeRegions](https://help.aliyun.com/document_detail/86912.html) operation to query the most recent region list and zone list.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// This parameter is no longer used.
	//
	// example:
	//
	// rg-bp67acfmxazb4p****
	ResourceGroupId      *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SecurityToken        *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The virtual private cloud (VPC) ID of the instance.
	//
	// >
	//
	// 	- You can call the [DescribeRdsVpcs](https://help.aliyun.com/document_detail/208327.html) operation to query the available VPC IDs.
	//
	// 	- This parameter must be specified.
	//
	// example:
	//
	// vpc-bp*******************
	VpcId *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	// The ID of the zone.
	//
	// >  You can call the [DescribeRegions](https://help.aliyun.com/document_detail/86912.html) operation to query the most recent region list and zone list.
	//
	// example:
	//
	// cn-hangzhou-h
	ZoneId *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s DescribeRdsVSwitchsRequest) String() string {
	return dara.Prettify(s)
}

func (s DescribeRdsVSwitchsRequest) GoString() string {
	return s.String()
}

func (s *DescribeRdsVSwitchsRequest) GetOwnerAccount() *string {
	return s.OwnerAccount
}

func (s *DescribeRdsVSwitchsRequest) GetOwnerId() *int64 {
	return s.OwnerId
}

func (s *DescribeRdsVSwitchsRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *DescribeRdsVSwitchsRequest) GetResourceGroupId() *string {
	return s.ResourceGroupId
}

func (s *DescribeRdsVSwitchsRequest) GetResourceOwnerAccount() *string {
	return s.ResourceOwnerAccount
}

func (s *DescribeRdsVSwitchsRequest) GetResourceOwnerId() *int64 {
	return s.ResourceOwnerId
}

func (s *DescribeRdsVSwitchsRequest) GetSecurityToken() *string {
	return s.SecurityToken
}

func (s *DescribeRdsVSwitchsRequest) GetVpcId() *string {
	return s.VpcId
}

func (s *DescribeRdsVSwitchsRequest) GetZoneId() *string {
	return s.ZoneId
}

func (s *DescribeRdsVSwitchsRequest) SetOwnerAccount(v string) *DescribeRdsVSwitchsRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeRdsVSwitchsRequest) SetOwnerId(v int64) *DescribeRdsVSwitchsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeRdsVSwitchsRequest) SetRegionId(v string) *DescribeRdsVSwitchsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeRdsVSwitchsRequest) SetResourceGroupId(v string) *DescribeRdsVSwitchsRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeRdsVSwitchsRequest) SetResourceOwnerAccount(v string) *DescribeRdsVSwitchsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeRdsVSwitchsRequest) SetResourceOwnerId(v int64) *DescribeRdsVSwitchsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeRdsVSwitchsRequest) SetSecurityToken(v string) *DescribeRdsVSwitchsRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribeRdsVSwitchsRequest) SetVpcId(v string) *DescribeRdsVSwitchsRequest {
	s.VpcId = &v
	return s
}

func (s *DescribeRdsVSwitchsRequest) SetZoneId(v string) *DescribeRdsVSwitchsRequest {
	s.ZoneId = &v
	return s
}

func (s *DescribeRdsVSwitchsRequest) Validate() error {
	return dara.Validate(s)
}

type iDescribeRdsVSwitchsResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetRequestId(v string) *DescribeRdsVSwitchsResponseBody
	GetRequestId() *string
	SetVSwitches(v *DescribeRdsVSwitchsResponseBodyVSwitches) *DescribeRdsVSwitchsResponseBody
	GetVSwitches() *DescribeRdsVSwitchsResponseBodyVSwitches
}

type DescribeRdsVSwitchsResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// B0BA251D-6854-5A99-A964-3C**********
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Details of the vSwitches.
	VSwitches *DescribeRdsVSwitchsResponseBodyVSwitches `json:"VSwitches,omitempty" xml:"VSwitches,omitempty" type:"Struct"`
}

func (s DescribeRdsVSwitchsResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DescribeRdsVSwitchsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeRdsVSwitchsResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DescribeRdsVSwitchsResponseBody) GetVSwitches() *DescribeRdsVSwitchsResponseBodyVSwitches {
	return s.VSwitches
}

func (s *DescribeRdsVSwitchsResponseBody) SetRequestId(v string) *DescribeRdsVSwitchsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeRdsVSwitchsResponseBody) SetVSwitches(v *DescribeRdsVSwitchsResponseBodyVSwitches) *DescribeRdsVSwitchsResponseBody {
	s.VSwitches = v
	return s
}

func (s *DescribeRdsVSwitchsResponseBody) Validate() error {
	return dara.Validate(s)
}

type DescribeRdsVSwitchsResponseBodyVSwitches struct {
	// Details of the vSwitch.
	VSwitch []*DescribeRdsVSwitchsResponseBodyVSwitchesVSwitch `json:"VSwitch,omitempty" xml:"VSwitch,omitempty" type:"Repeated"`
}

func (s DescribeRdsVSwitchsResponseBodyVSwitches) String() string {
	return dara.Prettify(s)
}

func (s DescribeRdsVSwitchsResponseBodyVSwitches) GoString() string {
	return s.String()
}

func (s *DescribeRdsVSwitchsResponseBodyVSwitches) GetVSwitch() []*DescribeRdsVSwitchsResponseBodyVSwitchesVSwitch {
	return s.VSwitch
}

func (s *DescribeRdsVSwitchsResponseBodyVSwitches) SetVSwitch(v []*DescribeRdsVSwitchsResponseBodyVSwitchesVSwitch) *DescribeRdsVSwitchsResponseBodyVSwitches {
	s.VSwitch = v
	return s
}

func (s *DescribeRdsVSwitchsResponseBodyVSwitches) Validate() error {
	return dara.Validate(s)
}

type DescribeRdsVSwitchsResponseBodyVSwitchesVSwitch struct {
	// An invalid parameter. It is no longer returned when you call this operation.
	//
	// example:
	//
	// null
	AliUid *string `json:"AliUid,omitempty" xml:"AliUid,omitempty"`
	// An invalid parameter. It is no longer returned when you call this operation.
	//
	// example:
	//
	// null
	Bid *string `json:"Bid,omitempty" xml:"Bid,omitempty"`
	// The CIDR block of the vSwitch.
	//
	// example:
	//
	// 192.**.**.0/24
	CidrBlock *string `json:"CidrBlock,omitempty" xml:"CidrBlock,omitempty"`
	// An invalid parameter. It is no longer returned when you call this operation.
	//
	// example:
	//
	// null
	GmtCreate *string `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	// An invalid parameter. It is no longer returned when you call this operation.
	//
	// example:
	//
	// null
	GmtModified *string `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	// Indicates whether the vSwitch is the default vSwitch. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// false
	IsDefault *bool `json:"IsDefault,omitempty" xml:"IsDefault,omitempty"`
	// The ID of the zone.
	//
	// example:
	//
	// cn-hangzhou-h
	IzNo *string `json:"IzNo,omitempty" xml:"IzNo,omitempty"`
	// An invalid parameter. It is no longer returned when you call this operation.
	//
	// example:
	//
	// null
	RegionNo *string `json:"RegionNo,omitempty" xml:"RegionNo,omitempty"`
	// The state of the vSwitch. If **Available*	- is returned, the vSwitch is available.
	//
	// example:
	//
	// Available
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The ID of the vSwitch.
	//
	// example:
	//
	// vsw-bp*******************
	VSwitchId *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	// The name of the vSwitch.
	//
	// example:
	//
	// vsw-name
	VSwitchName *string `json:"VSwitchName,omitempty" xml:"VSwitchName,omitempty"`
}

func (s DescribeRdsVSwitchsResponseBodyVSwitchesVSwitch) String() string {
	return dara.Prettify(s)
}

func (s DescribeRdsVSwitchsResponseBodyVSwitchesVSwitch) GoString() string {
	return s.String()
}

func (s *DescribeRdsVSwitchsResponseBodyVSwitchesVSwitch) GetAliUid() *string {
	return s.AliUid
}

func (s *DescribeRdsVSwitchsResponseBodyVSwitchesVSwitch) GetBid() *string {
	return s.Bid
}

func (s *DescribeRdsVSwitchsResponseBodyVSwitchesVSwitch) GetCidrBlock() *string {
	return s.CidrBlock
}

func (s *DescribeRdsVSwitchsResponseBodyVSwitchesVSwitch) GetGmtCreate() *string {
	return s.GmtCreate
}

func (s *DescribeRdsVSwitchsResponseBodyVSwitchesVSwitch) GetGmtModified() *string {
	return s.GmtModified
}

func (s *DescribeRdsVSwitchsResponseBodyVSwitchesVSwitch) GetIsDefault() *bool {
	return s.IsDefault
}

func (s *DescribeRdsVSwitchsResponseBodyVSwitchesVSwitch) GetIzNo() *string {
	return s.IzNo
}

func (s *DescribeRdsVSwitchsResponseBodyVSwitchesVSwitch) GetRegionNo() *string {
	return s.RegionNo
}

func (s *DescribeRdsVSwitchsResponseBodyVSwitchesVSwitch) GetStatus() *string {
	return s.Status
}

func (s *DescribeRdsVSwitchsResponseBodyVSwitchesVSwitch) GetVSwitchId() *string {
	return s.VSwitchId
}

func (s *DescribeRdsVSwitchsResponseBodyVSwitchesVSwitch) GetVSwitchName() *string {
	return s.VSwitchName
}

func (s *DescribeRdsVSwitchsResponseBodyVSwitchesVSwitch) SetAliUid(v string) *DescribeRdsVSwitchsResponseBodyVSwitchesVSwitch {
	s.AliUid = &v
	return s
}

func (s *DescribeRdsVSwitchsResponseBodyVSwitchesVSwitch) SetBid(v string) *DescribeRdsVSwitchsResponseBodyVSwitchesVSwitch {
	s.Bid = &v
	return s
}

func (s *DescribeRdsVSwitchsResponseBodyVSwitchesVSwitch) SetCidrBlock(v string) *DescribeRdsVSwitchsResponseBodyVSwitchesVSwitch {
	s.CidrBlock = &v
	return s
}

func (s *DescribeRdsVSwitchsResponseBodyVSwitchesVSwitch) SetGmtCreate(v string) *DescribeRdsVSwitchsResponseBodyVSwitchesVSwitch {
	s.GmtCreate = &v
	return s
}

func (s *DescribeRdsVSwitchsResponseBodyVSwitchesVSwitch) SetGmtModified(v string) *DescribeRdsVSwitchsResponseBodyVSwitchesVSwitch {
	s.GmtModified = &v
	return s
}

func (s *DescribeRdsVSwitchsResponseBodyVSwitchesVSwitch) SetIsDefault(v bool) *DescribeRdsVSwitchsResponseBodyVSwitchesVSwitch {
	s.IsDefault = &v
	return s
}

func (s *DescribeRdsVSwitchsResponseBodyVSwitchesVSwitch) SetIzNo(v string) *DescribeRdsVSwitchsResponseBodyVSwitchesVSwitch {
	s.IzNo = &v
	return s
}

func (s *DescribeRdsVSwitchsResponseBodyVSwitchesVSwitch) SetRegionNo(v string) *DescribeRdsVSwitchsResponseBodyVSwitchesVSwitch {
	s.RegionNo = &v
	return s
}

func (s *DescribeRdsVSwitchsResponseBodyVSwitchesVSwitch) SetStatus(v string) *DescribeRdsVSwitchsResponseBodyVSwitchesVSwitch {
	s.Status = &v
	return s
}

func (s *DescribeRdsVSwitchsResponseBodyVSwitchesVSwitch) SetVSwitchId(v string) *DescribeRdsVSwitchsResponseBodyVSwitchesVSwitch {
	s.VSwitchId = &v
	return s
}

func (s *DescribeRdsVSwitchsResponseBodyVSwitchesVSwitch) SetVSwitchName(v string) *DescribeRdsVSwitchsResponseBodyVSwitchesVSwitch {
	s.VSwitchName = &v
	return s
}

func (s *DescribeRdsVSwitchsResponseBodyVSwitchesVSwitch) Validate() error {
	return dara.Validate(s)
}

type iDescribeRdsVSwitchsResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DescribeRdsVSwitchsResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DescribeRdsVSwitchsResponse
	GetStatusCode() *int32
	SetBody(v *DescribeRdsVSwitchsResponseBody) *DescribeRdsVSwitchsResponse
	GetBody() *DescribeRdsVSwitchsResponseBody
}

type DescribeRdsVSwitchsResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeRdsVSwitchsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeRdsVSwitchsResponse) String() string {
	return dara.Prettify(s)
}

func (s DescribeRdsVSwitchsResponse) GoString() string {
	return s.String()
}

func (s *DescribeRdsVSwitchsResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DescribeRdsVSwitchsResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DescribeRdsVSwitchsResponse) GetBody() *DescribeRdsVSwitchsResponseBody {
	return s.Body
}

func (s *DescribeRdsVSwitchsResponse) SetHeaders(v map[string]*string) *DescribeRdsVSwitchsResponse {
	s.Headers = v
	return s
}

func (s *DescribeRdsVSwitchsResponse) SetStatusCode(v int32) *DescribeRdsVSwitchsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeRdsVSwitchsResponse) SetBody(v *DescribeRdsVSwitchsResponseBody) *DescribeRdsVSwitchsResponse {
	s.Body = v
	return s
}

func (s *DescribeRdsVSwitchsResponse) Validate() error {
	return dara.Validate(s)
}

type iDescribeRdsVpcsRequest interface {
	dara.Model
	String() string
	GoString() string
	SetOwnerAccount(v string) *DescribeRdsVpcsRequest
	GetOwnerAccount() *string
	SetOwnerId(v int64) *DescribeRdsVpcsRequest
	GetOwnerId() *int64
	SetRegionId(v string) *DescribeRdsVpcsRequest
	GetRegionId() *string
	SetResourceGroupId(v string) *DescribeRdsVpcsRequest
	GetResourceGroupId() *string
	SetResourceOwnerAccount(v string) *DescribeRdsVpcsRequest
	GetResourceOwnerAccount() *string
	SetResourceOwnerId(v int64) *DescribeRdsVpcsRequest
	GetResourceOwnerId() *int64
	SetSecurityToken(v string) *DescribeRdsVpcsRequest
	GetSecurityToken() *string
	SetZoneId(v string) *DescribeRdsVpcsRequest
	GetZoneId() *string
}

type DescribeRdsVpcsRequest struct {
	OwnerAccount *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The ID of the region.
	//
	// >  You can call the [DescribeRegions](https://help.aliyun.com/document_detail/86912.html) operation to query the most recent region list.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// This parameter is no longer used.
	//
	// example:
	//
	// rg-bp67acfmxazb4p****
	ResourceGroupId      *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SecurityToken        *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The ID of the zone.
	//
	// example:
	//
	// cn-hangzhou-h
	ZoneId *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s DescribeRdsVpcsRequest) String() string {
	return dara.Prettify(s)
}

func (s DescribeRdsVpcsRequest) GoString() string {
	return s.String()
}

func (s *DescribeRdsVpcsRequest) GetOwnerAccount() *string {
	return s.OwnerAccount
}

func (s *DescribeRdsVpcsRequest) GetOwnerId() *int64 {
	return s.OwnerId
}

func (s *DescribeRdsVpcsRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *DescribeRdsVpcsRequest) GetResourceGroupId() *string {
	return s.ResourceGroupId
}

func (s *DescribeRdsVpcsRequest) GetResourceOwnerAccount() *string {
	return s.ResourceOwnerAccount
}

func (s *DescribeRdsVpcsRequest) GetResourceOwnerId() *int64 {
	return s.ResourceOwnerId
}

func (s *DescribeRdsVpcsRequest) GetSecurityToken() *string {
	return s.SecurityToken
}

func (s *DescribeRdsVpcsRequest) GetZoneId() *string {
	return s.ZoneId
}

func (s *DescribeRdsVpcsRequest) SetOwnerAccount(v string) *DescribeRdsVpcsRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeRdsVpcsRequest) SetOwnerId(v int64) *DescribeRdsVpcsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeRdsVpcsRequest) SetRegionId(v string) *DescribeRdsVpcsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeRdsVpcsRequest) SetResourceGroupId(v string) *DescribeRdsVpcsRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeRdsVpcsRequest) SetResourceOwnerAccount(v string) *DescribeRdsVpcsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeRdsVpcsRequest) SetResourceOwnerId(v int64) *DescribeRdsVpcsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeRdsVpcsRequest) SetSecurityToken(v string) *DescribeRdsVpcsRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribeRdsVpcsRequest) SetZoneId(v string) *DescribeRdsVpcsRequest {
	s.ZoneId = &v
	return s
}

func (s *DescribeRdsVpcsRequest) Validate() error {
	return dara.Validate(s)
}

type iDescribeRdsVpcsResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetRequestId(v string) *DescribeRdsVpcsResponseBody
	GetRequestId() *string
	SetVpcs(v *DescribeRdsVpcsResponseBodyVpcs) *DescribeRdsVpcsResponseBody
	GetVpcs() *DescribeRdsVpcsResponseBodyVpcs
}

type DescribeRdsVpcsResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// 53924AF0-1628-5AA2-9C95-D4**********
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The queried VPCs.
	Vpcs *DescribeRdsVpcsResponseBodyVpcs `json:"Vpcs,omitempty" xml:"Vpcs,omitempty" type:"Struct"`
}

func (s DescribeRdsVpcsResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DescribeRdsVpcsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeRdsVpcsResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DescribeRdsVpcsResponseBody) GetVpcs() *DescribeRdsVpcsResponseBodyVpcs {
	return s.Vpcs
}

func (s *DescribeRdsVpcsResponseBody) SetRequestId(v string) *DescribeRdsVpcsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeRdsVpcsResponseBody) SetVpcs(v *DescribeRdsVpcsResponseBodyVpcs) *DescribeRdsVpcsResponseBody {
	s.Vpcs = v
	return s
}

func (s *DescribeRdsVpcsResponseBody) Validate() error {
	return dara.Validate(s)
}

type DescribeRdsVpcsResponseBodyVpcs struct {
	// The queried VPC.
	Vpc []*DescribeRdsVpcsResponseBodyVpcsVpc `json:"Vpc,omitempty" xml:"Vpc,omitempty" type:"Repeated"`
}

func (s DescribeRdsVpcsResponseBodyVpcs) String() string {
	return dara.Prettify(s)
}

func (s DescribeRdsVpcsResponseBodyVpcs) GoString() string {
	return s.String()
}

func (s *DescribeRdsVpcsResponseBodyVpcs) GetVpc() []*DescribeRdsVpcsResponseBodyVpcsVpc {
	return s.Vpc
}

func (s *DescribeRdsVpcsResponseBodyVpcs) SetVpc(v []*DescribeRdsVpcsResponseBodyVpcsVpc) *DescribeRdsVpcsResponseBodyVpcs {
	s.Vpc = v
	return s
}

func (s *DescribeRdsVpcsResponseBodyVpcs) Validate() error {
	return dara.Validate(s)
}

type DescribeRdsVpcsResponseBodyVpcsVpc struct {
	// An invalid parameter. It is no longer returned when you call this operation.
	//
	// example:
	//
	// null
	AliUid *string `json:"AliUid,omitempty" xml:"AliUid,omitempty"`
	// An invalid parameter. It is no longer returned when you call this operation.
	//
	// example:
	//
	// null
	Bid *string `json:"Bid,omitempty" xml:"Bid,omitempty"`
	// The CIDR block of the VPC.
	//
	// example:
	//
	// 10.**.**.0/8
	CidrBlock *string `json:"CidrBlock,omitempty" xml:"CidrBlock,omitempty"`
	// An invalid parameter. It is no longer returned when you call this operation.
	//
	// example:
	//
	// null
	GmtCreate *string `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	// An invalid parameter. It is no longer returned when you call this operation.
	//
	// example:
	//
	// null
	GmtModified *string `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	// Indicates whether the VPC is the default VPC. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	IsDefault *bool `json:"IsDefault,omitempty" xml:"IsDefault,omitempty"`
	// The region ID of the instance.
	//
	// example:
	//
	// cn-hangzhou
	RegionNo *string `json:"RegionNo,omitempty" xml:"RegionNo,omitempty"`
	// The state of the VPC. If **Available*	- is returned, the VPC is available.
	//
	// example:
	//
	// Available
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The queried vSwitches.
	VSwitchs []*DescribeRdsVpcsResponseBodyVpcsVpcVSwitchs `json:"VSwitchs,omitempty" xml:"VSwitchs,omitempty" type:"Repeated"`
	// The VPC ID.
	//
	// example:
	//
	// vpc-bp*******************
	VpcId *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	// The name of the VPC.
	//
	// example:
	//
	// vpc-name
	VpcName *string `json:"VpcName,omitempty" xml:"VpcName,omitempty"`
}

func (s DescribeRdsVpcsResponseBodyVpcsVpc) String() string {
	return dara.Prettify(s)
}

func (s DescribeRdsVpcsResponseBodyVpcsVpc) GoString() string {
	return s.String()
}

func (s *DescribeRdsVpcsResponseBodyVpcsVpc) GetAliUid() *string {
	return s.AliUid
}

func (s *DescribeRdsVpcsResponseBodyVpcsVpc) GetBid() *string {
	return s.Bid
}

func (s *DescribeRdsVpcsResponseBodyVpcsVpc) GetCidrBlock() *string {
	return s.CidrBlock
}

func (s *DescribeRdsVpcsResponseBodyVpcsVpc) GetGmtCreate() *string {
	return s.GmtCreate
}

func (s *DescribeRdsVpcsResponseBodyVpcsVpc) GetGmtModified() *string {
	return s.GmtModified
}

func (s *DescribeRdsVpcsResponseBodyVpcsVpc) GetIsDefault() *bool {
	return s.IsDefault
}

func (s *DescribeRdsVpcsResponseBodyVpcsVpc) GetRegionNo() *string {
	return s.RegionNo
}

func (s *DescribeRdsVpcsResponseBodyVpcsVpc) GetStatus() *string {
	return s.Status
}

func (s *DescribeRdsVpcsResponseBodyVpcsVpc) GetVSwitchs() []*DescribeRdsVpcsResponseBodyVpcsVpcVSwitchs {
	return s.VSwitchs
}

func (s *DescribeRdsVpcsResponseBodyVpcsVpc) GetVpcId() *string {
	return s.VpcId
}

func (s *DescribeRdsVpcsResponseBodyVpcsVpc) GetVpcName() *string {
	return s.VpcName
}

func (s *DescribeRdsVpcsResponseBodyVpcsVpc) SetAliUid(v string) *DescribeRdsVpcsResponseBodyVpcsVpc {
	s.AliUid = &v
	return s
}

func (s *DescribeRdsVpcsResponseBodyVpcsVpc) SetBid(v string) *DescribeRdsVpcsResponseBodyVpcsVpc {
	s.Bid = &v
	return s
}

func (s *DescribeRdsVpcsResponseBodyVpcsVpc) SetCidrBlock(v string) *DescribeRdsVpcsResponseBodyVpcsVpc {
	s.CidrBlock = &v
	return s
}

func (s *DescribeRdsVpcsResponseBodyVpcsVpc) SetGmtCreate(v string) *DescribeRdsVpcsResponseBodyVpcsVpc {
	s.GmtCreate = &v
	return s
}

func (s *DescribeRdsVpcsResponseBodyVpcsVpc) SetGmtModified(v string) *DescribeRdsVpcsResponseBodyVpcsVpc {
	s.GmtModified = &v
	return s
}

func (s *DescribeRdsVpcsResponseBodyVpcsVpc) SetIsDefault(v bool) *DescribeRdsVpcsResponseBodyVpcsVpc {
	s.IsDefault = &v
	return s
}

func (s *DescribeRdsVpcsResponseBodyVpcsVpc) SetRegionNo(v string) *DescribeRdsVpcsResponseBodyVpcsVpc {
	s.RegionNo = &v
	return s
}

func (s *DescribeRdsVpcsResponseBodyVpcsVpc) SetStatus(v string) *DescribeRdsVpcsResponseBodyVpcsVpc {
	s.Status = &v
	return s
}

func (s *DescribeRdsVpcsResponseBodyVpcsVpc) SetVSwitchs(v []*DescribeRdsVpcsResponseBodyVpcsVpcVSwitchs) *DescribeRdsVpcsResponseBodyVpcsVpc {
	s.VSwitchs = v
	return s
}

func (s *DescribeRdsVpcsResponseBodyVpcsVpc) SetVpcId(v string) *DescribeRdsVpcsResponseBodyVpcsVpc {
	s.VpcId = &v
	return s
}

func (s *DescribeRdsVpcsResponseBodyVpcsVpc) SetVpcName(v string) *DescribeRdsVpcsResponseBodyVpcsVpc {
	s.VpcName = &v
	return s
}

func (s *DescribeRdsVpcsResponseBodyVpcsVpc) Validate() error {
	return dara.Validate(s)
}

type DescribeRdsVpcsResponseBodyVpcsVpcVSwitchs struct {
	// The CIDR block of the vSwitch.
	//
	// example:
	//
	// 10.**.**.0/24
	CidrBlock *string `json:"CidrBlock,omitempty" xml:"CidrBlock,omitempty"`
	// An invalid parameter. It is no longer returned when you call this operation.
	//
	// example:
	//
	// null
	GmtCreate *string `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	// An invalid parameter. It is no longer returned when you call this operation.
	//
	// example:
	//
	// null
	GmtModified *string `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	// Indicates whether the vSwitch is the default vSwitch. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	IsDefault *bool `json:"IsDefault,omitempty" xml:"IsDefault,omitempty"`
	// The ID of the zone to which the vSwitch belongs.
	//
	// example:
	//
	// cn-hangzhou-i
	IzNo *string `json:"IzNo,omitempty" xml:"IzNo,omitempty"`
	// The state of the vSwitch. If **Available*	- is returned, the vSwitch is available.
	//
	// example:
	//
	// Available
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The vSwitch ID.
	//
	// example:
	//
	// vsw-bp*******************
	VSwitchId *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	// The name of the vSwitch.
	//
	// example:
	//
	// vsw-name
	VSwitchName *string `json:"VSwitchName,omitempty" xml:"VSwitchName,omitempty"`
}

func (s DescribeRdsVpcsResponseBodyVpcsVpcVSwitchs) String() string {
	return dara.Prettify(s)
}

func (s DescribeRdsVpcsResponseBodyVpcsVpcVSwitchs) GoString() string {
	return s.String()
}

func (s *DescribeRdsVpcsResponseBodyVpcsVpcVSwitchs) GetCidrBlock() *string {
	return s.CidrBlock
}

func (s *DescribeRdsVpcsResponseBodyVpcsVpcVSwitchs) GetGmtCreate() *string {
	return s.GmtCreate
}

func (s *DescribeRdsVpcsResponseBodyVpcsVpcVSwitchs) GetGmtModified() *string {
	return s.GmtModified
}

func (s *DescribeRdsVpcsResponseBodyVpcsVpcVSwitchs) GetIsDefault() *bool {
	return s.IsDefault
}

func (s *DescribeRdsVpcsResponseBodyVpcsVpcVSwitchs) GetIzNo() *string {
	return s.IzNo
}

func (s *DescribeRdsVpcsResponseBodyVpcsVpcVSwitchs) GetStatus() *string {
	return s.Status
}

func (s *DescribeRdsVpcsResponseBodyVpcsVpcVSwitchs) GetVSwitchId() *string {
	return s.VSwitchId
}

func (s *DescribeRdsVpcsResponseBodyVpcsVpcVSwitchs) GetVSwitchName() *string {
	return s.VSwitchName
}

func (s *DescribeRdsVpcsResponseBodyVpcsVpcVSwitchs) SetCidrBlock(v string) *DescribeRdsVpcsResponseBodyVpcsVpcVSwitchs {
	s.CidrBlock = &v
	return s
}

func (s *DescribeRdsVpcsResponseBodyVpcsVpcVSwitchs) SetGmtCreate(v string) *DescribeRdsVpcsResponseBodyVpcsVpcVSwitchs {
	s.GmtCreate = &v
	return s
}

func (s *DescribeRdsVpcsResponseBodyVpcsVpcVSwitchs) SetGmtModified(v string) *DescribeRdsVpcsResponseBodyVpcsVpcVSwitchs {
	s.GmtModified = &v
	return s
}

func (s *DescribeRdsVpcsResponseBodyVpcsVpcVSwitchs) SetIsDefault(v bool) *DescribeRdsVpcsResponseBodyVpcsVpcVSwitchs {
	s.IsDefault = &v
	return s
}

func (s *DescribeRdsVpcsResponseBodyVpcsVpcVSwitchs) SetIzNo(v string) *DescribeRdsVpcsResponseBodyVpcsVpcVSwitchs {
	s.IzNo = &v
	return s
}

func (s *DescribeRdsVpcsResponseBodyVpcsVpcVSwitchs) SetStatus(v string) *DescribeRdsVpcsResponseBodyVpcsVpcVSwitchs {
	s.Status = &v
	return s
}

func (s *DescribeRdsVpcsResponseBodyVpcsVpcVSwitchs) SetVSwitchId(v string) *DescribeRdsVpcsResponseBodyVpcsVpcVSwitchs {
	s.VSwitchId = &v
	return s
}

func (s *DescribeRdsVpcsResponseBodyVpcsVpcVSwitchs) SetVSwitchName(v string) *DescribeRdsVpcsResponseBodyVpcsVpcVSwitchs {
	s.VSwitchName = &v
	return s
}

func (s *DescribeRdsVpcsResponseBodyVpcsVpcVSwitchs) Validate() error {
	return dara.Validate(s)
}

type iDescribeRdsVpcsResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DescribeRdsVpcsResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DescribeRdsVpcsResponse
	GetStatusCode() *int32
	SetBody(v *DescribeRdsVpcsResponseBody) *DescribeRdsVpcsResponse
	GetBody() *DescribeRdsVpcsResponseBody
}

type DescribeRdsVpcsResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeRdsVpcsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeRdsVpcsResponse) String() string {
	return dara.Prettify(s)
}

func (s DescribeRdsVpcsResponse) GoString() string {
	return s.String()
}

func (s *DescribeRdsVpcsResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DescribeRdsVpcsResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DescribeRdsVpcsResponse) GetBody() *DescribeRdsVpcsResponseBody {
	return s.Body
}

func (s *DescribeRdsVpcsResponse) SetHeaders(v map[string]*string) *DescribeRdsVpcsResponse {
	s.Headers = v
	return s
}

func (s *DescribeRdsVpcsResponse) SetStatusCode(v int32) *DescribeRdsVpcsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeRdsVpcsResponse) SetBody(v *DescribeRdsVpcsResponseBody) *DescribeRdsVpcsResponse {
	s.Body = v
	return s
}

func (s *DescribeRdsVpcsResponse) Validate() error {
	return dara.Validate(s)
}

type iDescribeRegionsRequest interface {
	dara.Model
	String() string
	GoString() string
	SetRegion(v string) *DescribeRegionsRequest
	GetRegion() *string
}

type DescribeRegionsRequest struct {
	// The ID of the region.
	//
	// >  You can call the [DescribeRegions](https://help.aliyun.com/document_detail/86912.html) operation to query the most recent region list.
	//
	// example:
	//
	// cn-hangzhou
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
}

func (s DescribeRegionsRequest) String() string {
	return dara.Prettify(s)
}

func (s DescribeRegionsRequest) GoString() string {
	return s.String()
}

func (s *DescribeRegionsRequest) GetRegion() *string {
	return s.Region
}

func (s *DescribeRegionsRequest) SetRegion(v string) *DescribeRegionsRequest {
	s.Region = &v
	return s
}

func (s *DescribeRegionsRequest) Validate() error {
	return dara.Validate(s)
}

type iDescribeRegionsResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetRegions(v *DescribeRegionsResponseBodyRegions) *DescribeRegionsResponseBody
	GetRegions() *DescribeRegionsResponseBodyRegions
	SetRequestId(v string) *DescribeRegionsResponseBody
	GetRequestId() *string
}

type DescribeRegionsResponseBody struct {
	// Details of the regions.
	Regions *DescribeRegionsResponseBodyRegions `json:"Regions,omitempty" xml:"Regions,omitempty" type:"Struct"`
	// The ID of the request.
	//
	// example:
	//
	// FF8EB261-5447-4B1B-9F14-294CEA008A9F
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeRegionsResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DescribeRegionsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeRegionsResponseBody) GetRegions() *DescribeRegionsResponseBodyRegions {
	return s.Regions
}

func (s *DescribeRegionsResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DescribeRegionsResponseBody) SetRegions(v *DescribeRegionsResponseBodyRegions) *DescribeRegionsResponseBody {
	s.Regions = v
	return s
}

func (s *DescribeRegionsResponseBody) SetRequestId(v string) *DescribeRegionsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeRegionsResponseBody) Validate() error {
	return dara.Validate(s)
}

type DescribeRegionsResponseBodyRegions struct {
	Region []*DescribeRegionsResponseBodyRegionsRegion `json:"Region,omitempty" xml:"Region,omitempty" type:"Repeated"`
}

func (s DescribeRegionsResponseBodyRegions) String() string {
	return dara.Prettify(s)
}

func (s DescribeRegionsResponseBodyRegions) GoString() string {
	return s.String()
}

func (s *DescribeRegionsResponseBodyRegions) GetRegion() []*DescribeRegionsResponseBodyRegionsRegion {
	return s.Region
}

func (s *DescribeRegionsResponseBodyRegions) SetRegion(v []*DescribeRegionsResponseBodyRegionsRegion) *DescribeRegionsResponseBodyRegions {
	s.Region = v
	return s
}

func (s *DescribeRegionsResponseBodyRegions) Validate() error {
	return dara.Validate(s)
}

type DescribeRegionsResponseBodyRegionsRegion struct {
	// The ID of the region.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// Details of the zones.
	Zones *DescribeRegionsResponseBodyRegionsRegionZones `json:"Zones,omitempty" xml:"Zones,omitempty" type:"Struct"`
}

func (s DescribeRegionsResponseBodyRegionsRegion) String() string {
	return dara.Prettify(s)
}

func (s DescribeRegionsResponseBodyRegionsRegion) GoString() string {
	return s.String()
}

func (s *DescribeRegionsResponseBodyRegionsRegion) GetRegionId() *string {
	return s.RegionId
}

func (s *DescribeRegionsResponseBodyRegionsRegion) GetZones() *DescribeRegionsResponseBodyRegionsRegionZones {
	return s.Zones
}

func (s *DescribeRegionsResponseBodyRegionsRegion) SetRegionId(v string) *DescribeRegionsResponseBodyRegionsRegion {
	s.RegionId = &v
	return s
}

func (s *DescribeRegionsResponseBodyRegionsRegion) SetZones(v *DescribeRegionsResponseBodyRegionsRegionZones) *DescribeRegionsResponseBodyRegionsRegion {
	s.Zones = v
	return s
}

func (s *DescribeRegionsResponseBodyRegionsRegion) Validate() error {
	return dara.Validate(s)
}

type DescribeRegionsResponseBodyRegionsRegionZones struct {
	Zone []*DescribeRegionsResponseBodyRegionsRegionZonesZone `json:"Zone,omitempty" xml:"Zone,omitempty" type:"Repeated"`
}

func (s DescribeRegionsResponseBodyRegionsRegionZones) String() string {
	return dara.Prettify(s)
}

func (s DescribeRegionsResponseBodyRegionsRegionZones) GoString() string {
	return s.String()
}

func (s *DescribeRegionsResponseBodyRegionsRegionZones) GetZone() []*DescribeRegionsResponseBodyRegionsRegionZonesZone {
	return s.Zone
}

func (s *DescribeRegionsResponseBodyRegionsRegionZones) SetZone(v []*DescribeRegionsResponseBodyRegionsRegionZonesZone) *DescribeRegionsResponseBodyRegionsRegionZones {
	s.Zone = v
	return s
}

func (s *DescribeRegionsResponseBodyRegionsRegionZones) Validate() error {
	return dara.Validate(s)
}

type DescribeRegionsResponseBodyRegionsRegionZonesZone struct {
	// Indicates whether Virtual Private Cloud (VPC) is available.
	//
	// 	- **true**: VPC is available.
	//
	// 	- **false**: VPC is unavailable.
	//
	// example:
	//
	// true
	VpcEnabled *bool `json:"VpcEnabled,omitempty" xml:"VpcEnabled,omitempty"`
	// The ID of the zone.
	//
	// example:
	//
	// cn-hangzhou-c
	ZoneId *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s DescribeRegionsResponseBodyRegionsRegionZonesZone) String() string {
	return dara.Prettify(s)
}

func (s DescribeRegionsResponseBodyRegionsRegionZonesZone) GoString() string {
	return s.String()
}

func (s *DescribeRegionsResponseBodyRegionsRegionZonesZone) GetVpcEnabled() *bool {
	return s.VpcEnabled
}

func (s *DescribeRegionsResponseBodyRegionsRegionZonesZone) GetZoneId() *string {
	return s.ZoneId
}

func (s *DescribeRegionsResponseBodyRegionsRegionZonesZone) SetVpcEnabled(v bool) *DescribeRegionsResponseBodyRegionsRegionZonesZone {
	s.VpcEnabled = &v
	return s
}

func (s *DescribeRegionsResponseBodyRegionsRegionZonesZone) SetZoneId(v string) *DescribeRegionsResponseBodyRegionsRegionZonesZone {
	s.ZoneId = &v
	return s
}

func (s *DescribeRegionsResponseBodyRegionsRegionZonesZone) Validate() error {
	return dara.Validate(s)
}

type iDescribeRegionsResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DescribeRegionsResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DescribeRegionsResponse
	GetStatusCode() *int32
	SetBody(v *DescribeRegionsResponseBody) *DescribeRegionsResponse
	GetBody() *DescribeRegionsResponseBody
}

type DescribeRegionsResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeRegionsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeRegionsResponse) String() string {
	return dara.Prettify(s)
}

func (s DescribeRegionsResponse) GoString() string {
	return s.String()
}

func (s *DescribeRegionsResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DescribeRegionsResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DescribeRegionsResponse) GetBody() *DescribeRegionsResponseBody {
	return s.Body
}

func (s *DescribeRegionsResponse) SetHeaders(v map[string]*string) *DescribeRegionsResponse {
	s.Headers = v
	return s
}

func (s *DescribeRegionsResponse) SetStatusCode(v int32) *DescribeRegionsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeRegionsResponse) SetBody(v *DescribeRegionsResponseBody) *DescribeRegionsResponse {
	s.Body = v
	return s
}

func (s *DescribeRegionsResponse) Validate() error {
	return dara.Validate(s)
}

type iDescribeRolesRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *DescribeRolesRequest
	GetDBInstanceId() *string
	SetOwnerId(v int64) *DescribeRolesRequest
	GetOwnerId() *int64
}

type DescribeRolesRequest struct {
	// The instance ID.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s DescribeRolesRequest) String() string {
	return dara.Prettify(s)
}

func (s DescribeRolesRequest) GoString() string {
	return s.String()
}

func (s *DescribeRolesRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *DescribeRolesRequest) GetOwnerId() *int64 {
	return s.OwnerId
}

func (s *DescribeRolesRequest) SetDBInstanceId(v string) *DescribeRolesRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeRolesRequest) SetOwnerId(v int64) *DescribeRolesRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeRolesRequest) Validate() error {
	return dara.Validate(s)
}

type iDescribeRolesResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetRequestId(v string) *DescribeRolesResponseBody
	GetRequestId() *string
	SetRoleList(v *DescribeRolesResponseBodyRoleList) *DescribeRolesResponseBody
	GetRoleList() *DescribeRolesResponseBodyRoleList
}

type DescribeRolesResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The roles.
	RoleList *DescribeRolesResponseBodyRoleList `json:"RoleList,omitempty" xml:"RoleList,omitempty" type:"Struct"`
}

func (s DescribeRolesResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DescribeRolesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeRolesResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DescribeRolesResponseBody) GetRoleList() *DescribeRolesResponseBodyRoleList {
	return s.RoleList
}

func (s *DescribeRolesResponseBody) SetRequestId(v string) *DescribeRolesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeRolesResponseBody) SetRoleList(v *DescribeRolesResponseBodyRoleList) *DescribeRolesResponseBody {
	s.RoleList = v
	return s
}

func (s *DescribeRolesResponseBody) Validate() error {
	return dara.Validate(s)
}

type DescribeRolesResponseBodyRoleList struct {
	Role []*string `json:"Role,omitempty" xml:"Role,omitempty" type:"Repeated"`
}

func (s DescribeRolesResponseBodyRoleList) String() string {
	return dara.Prettify(s)
}

func (s DescribeRolesResponseBodyRoleList) GoString() string {
	return s.String()
}

func (s *DescribeRolesResponseBodyRoleList) GetRole() []*string {
	return s.Role
}

func (s *DescribeRolesResponseBodyRoleList) SetRole(v []*string) *DescribeRolesResponseBodyRoleList {
	s.Role = v
	return s
}

func (s *DescribeRolesResponseBodyRoleList) Validate() error {
	return dara.Validate(s)
}

type iDescribeRolesResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DescribeRolesResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DescribeRolesResponse
	GetStatusCode() *int32
	SetBody(v *DescribeRolesResponseBody) *DescribeRolesResponse
	GetBody() *DescribeRolesResponseBody
}

type DescribeRolesResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeRolesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeRolesResponse) String() string {
	return dara.Prettify(s)
}

func (s DescribeRolesResponse) GoString() string {
	return s.String()
}

func (s *DescribeRolesResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DescribeRolesResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DescribeRolesResponse) GetBody() *DescribeRolesResponseBody {
	return s.Body
}

func (s *DescribeRolesResponse) SetHeaders(v map[string]*string) *DescribeRolesResponse {
	s.Headers = v
	return s
}

func (s *DescribeRolesResponse) SetStatusCode(v int32) *DescribeRolesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeRolesResponse) SetBody(v *DescribeRolesResponseBody) *DescribeRolesResponse {
	s.Body = v
	return s
}

func (s *DescribeRolesResponse) Validate() error {
	return dara.Validate(s)
}

type iDescribeSQLLogCountRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *DescribeSQLLogCountRequest
	GetDBInstanceId() *string
	SetDatabase(v string) *DescribeSQLLogCountRequest
	GetDatabase() *string
	SetEndTime(v string) *DescribeSQLLogCountRequest
	GetEndTime() *string
	SetExecuteCost(v string) *DescribeSQLLogCountRequest
	GetExecuteCost() *string
	SetExecuteState(v string) *DescribeSQLLogCountRequest
	GetExecuteState() *string
	SetMaxExecuteCost(v string) *DescribeSQLLogCountRequest
	GetMaxExecuteCost() *string
	SetMinExecuteCost(v string) *DescribeSQLLogCountRequest
	GetMinExecuteCost() *string
	SetOperationClass(v string) *DescribeSQLLogCountRequest
	GetOperationClass() *string
	SetOperationType(v string) *DescribeSQLLogCountRequest
	GetOperationType() *string
	SetQueryKeywords(v string) *DescribeSQLLogCountRequest
	GetQueryKeywords() *string
	SetSourceIP(v string) *DescribeSQLLogCountRequest
	GetSourceIP() *string
	SetStartTime(v string) *DescribeSQLLogCountRequest
	GetStartTime() *string
	SetUser(v string) *DescribeSQLLogCountRequest
	GetUser() *string
}

type DescribeSQLLogCountRequest struct {
	// The instance ID.
	//
	// > You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The name of the database.
	//
	// example:
	//
	// testdb
	Database *string `json:"Database,omitempty" xml:"Database,omitempty"`
	// The end of the time range to query. Specify the time in the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm*Z format. The time must be in UTC.
	//
	// > The end time must be later than the start time. The maximum time range that can be specified is seven days.
	//
	// This parameter is required.
	//
	// example:
	//
	// 2020-12-14T11:22Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The execution duration of the SQL statement. Unit: seconds.
	//
	// example:
	//
	// 100
	ExecuteCost *string `json:"ExecuteCost,omitempty" xml:"ExecuteCost,omitempty"`
	// The execution status of the query. Valid values:
	//
	// 	- 1: successful.
	//
	// 	- 0: failed.
	//
	// 	- 0,1 or 1,0: all.
	//
	// example:
	//
	// success
	ExecuteState *string `json:"ExecuteState,omitempty" xml:"ExecuteState,omitempty"`
	// The maximum amount of time consumed by a slow query. Unit: seconds. Minimum value: 0.
	//
	// example:
	//
	// 1000
	MaxExecuteCost *string `json:"MaxExecuteCost,omitempty" xml:"MaxExecuteCost,omitempty"`
	// The minimum amount of time consumed by a slow query. Unit: seconds. Minimum value: 0.
	//
	// example:
	//
	// 10
	MinExecuteCost *string `json:"MinExecuteCost,omitempty" xml:"MinExecuteCost,omitempty"`
	// The type of the query language. Valid values:
	//
	// 	- **DQL**
	//
	// 	- **DML**
	//
	// 	- **DDL**
	//
	// 	- **DCL**
	//
	// 	- **TCL**
	//
	// example:
	//
	// DQL
	OperationClass *string `json:"OperationClass,omitempty" xml:"OperationClass,omitempty"`
	// The type of the SQL statement.
	//
	// >
	//
	// 	- If you specify **OperationClass**, the value of **OperationType*	- must be of the corresponding query language. For example, if you set **OperationClass*	- to **DQL**, the value of **OperationType*	- must be a **DQL*	- statement such as **SELECT**.
	//
	// 	- If you leave **OperationClass*	- empty, the value of **OperationType*	- can be an SQL statement of any query language.
	//
	// 	- If you leave **OperationClass*	- and **OperationType*	- empty, all types of SQL statements are returned.
	//
	// example:
	//
	// SELECT
	OperationType *string `json:"OperationType,omitempty" xml:"OperationType,omitempty"`
	// The keywords that are used to query audit logs.
	//
	// example:
	//
	// test
	QueryKeywords *string `json:"QueryKeywords,omitempty" xml:"QueryKeywords,omitempty"`
	// The source IP address.
	//
	// example:
	//
	// 10.**.**.13
	SourceIP *string `json:"SourceIP,omitempty" xml:"SourceIP,omitempty"`
	// The beginning of the time range to query. Specify the time in the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm*Z format. The time must be in UTC.
	//
	// This parameter is required.
	//
	// example:
	//
	// 2020-12-12T11:22Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The name of the database account that is used to connect to the database.
	//
	// example:
	//
	// adbpgadmin
	User *string `json:"User,omitempty" xml:"User,omitempty"`
}

func (s DescribeSQLLogCountRequest) String() string {
	return dara.Prettify(s)
}

func (s DescribeSQLLogCountRequest) GoString() string {
	return s.String()
}

func (s *DescribeSQLLogCountRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *DescribeSQLLogCountRequest) GetDatabase() *string {
	return s.Database
}

func (s *DescribeSQLLogCountRequest) GetEndTime() *string {
	return s.EndTime
}

func (s *DescribeSQLLogCountRequest) GetExecuteCost() *string {
	return s.ExecuteCost
}

func (s *DescribeSQLLogCountRequest) GetExecuteState() *string {
	return s.ExecuteState
}

func (s *DescribeSQLLogCountRequest) GetMaxExecuteCost() *string {
	return s.MaxExecuteCost
}

func (s *DescribeSQLLogCountRequest) GetMinExecuteCost() *string {
	return s.MinExecuteCost
}

func (s *DescribeSQLLogCountRequest) GetOperationClass() *string {
	return s.OperationClass
}

func (s *DescribeSQLLogCountRequest) GetOperationType() *string {
	return s.OperationType
}

func (s *DescribeSQLLogCountRequest) GetQueryKeywords() *string {
	return s.QueryKeywords
}

func (s *DescribeSQLLogCountRequest) GetSourceIP() *string {
	return s.SourceIP
}

func (s *DescribeSQLLogCountRequest) GetStartTime() *string {
	return s.StartTime
}

func (s *DescribeSQLLogCountRequest) GetUser() *string {
	return s.User
}

func (s *DescribeSQLLogCountRequest) SetDBInstanceId(v string) *DescribeSQLLogCountRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeSQLLogCountRequest) SetDatabase(v string) *DescribeSQLLogCountRequest {
	s.Database = &v
	return s
}

func (s *DescribeSQLLogCountRequest) SetEndTime(v string) *DescribeSQLLogCountRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeSQLLogCountRequest) SetExecuteCost(v string) *DescribeSQLLogCountRequest {
	s.ExecuteCost = &v
	return s
}

func (s *DescribeSQLLogCountRequest) SetExecuteState(v string) *DescribeSQLLogCountRequest {
	s.ExecuteState = &v
	return s
}

func (s *DescribeSQLLogCountRequest) SetMaxExecuteCost(v string) *DescribeSQLLogCountRequest {
	s.MaxExecuteCost = &v
	return s
}

func (s *DescribeSQLLogCountRequest) SetMinExecuteCost(v string) *DescribeSQLLogCountRequest {
	s.MinExecuteCost = &v
	return s
}

func (s *DescribeSQLLogCountRequest) SetOperationClass(v string) *DescribeSQLLogCountRequest {
	s.OperationClass = &v
	return s
}

func (s *DescribeSQLLogCountRequest) SetOperationType(v string) *DescribeSQLLogCountRequest {
	s.OperationType = &v
	return s
}

func (s *DescribeSQLLogCountRequest) SetQueryKeywords(v string) *DescribeSQLLogCountRequest {
	s.QueryKeywords = &v
	return s
}

func (s *DescribeSQLLogCountRequest) SetSourceIP(v string) *DescribeSQLLogCountRequest {
	s.SourceIP = &v
	return s
}

func (s *DescribeSQLLogCountRequest) SetStartTime(v string) *DescribeSQLLogCountRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeSQLLogCountRequest) SetUser(v string) *DescribeSQLLogCountRequest {
	s.User = &v
	return s
}

func (s *DescribeSQLLogCountRequest) Validate() error {
	return dara.Validate(s)
}

type iDescribeSQLLogCountResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetDBClusterId(v string) *DescribeSQLLogCountResponseBody
	GetDBClusterId() *string
	SetEndTime(v string) *DescribeSQLLogCountResponseBody
	GetEndTime() *string
	SetItems(v []*DescribeSQLLogCountResponseBodyItems) *DescribeSQLLogCountResponseBody
	GetItems() []*DescribeSQLLogCountResponseBodyItems
	SetRequestId(v string) *DescribeSQLLogCountResponseBody
	GetRequestId() *string
	SetStartTime(v string) *DescribeSQLLogCountResponseBody
	GetStartTime() *string
}

type DescribeSQLLogCountResponseBody struct {
	// The instance ID.
	//
	// example:
	//
	// gp-xxxxxxxx
	DBClusterId *string `json:"DBClusterId,omitempty" xml:"DBClusterId,omitempty"`
	// The end time of the query.
	//
	// example:
	//
	// 2020-12-14T11:22Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The name of the instance.
	Items []*DescribeSQLLogCountResponseBodyItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Repeated"`
	// The request ID.
	//
	// example:
	//
	// 7565770E-7C45-462D-BA4A-8A**********
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The start time of the query.
	//
	// example:
	//
	// 2020-12-12T11:22Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeSQLLogCountResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DescribeSQLLogCountResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSQLLogCountResponseBody) GetDBClusterId() *string {
	return s.DBClusterId
}

func (s *DescribeSQLLogCountResponseBody) GetEndTime() *string {
	return s.EndTime
}

func (s *DescribeSQLLogCountResponseBody) GetItems() []*DescribeSQLLogCountResponseBodyItems {
	return s.Items
}

func (s *DescribeSQLLogCountResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DescribeSQLLogCountResponseBody) GetStartTime() *string {
	return s.StartTime
}

func (s *DescribeSQLLogCountResponseBody) SetDBClusterId(v string) *DescribeSQLLogCountResponseBody {
	s.DBClusterId = &v
	return s
}

func (s *DescribeSQLLogCountResponseBody) SetEndTime(v string) *DescribeSQLLogCountResponseBody {
	s.EndTime = &v
	return s
}

func (s *DescribeSQLLogCountResponseBody) SetItems(v []*DescribeSQLLogCountResponseBodyItems) *DescribeSQLLogCountResponseBody {
	s.Items = v
	return s
}

func (s *DescribeSQLLogCountResponseBody) SetRequestId(v string) *DescribeSQLLogCountResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSQLLogCountResponseBody) SetStartTime(v string) *DescribeSQLLogCountResponseBody {
	s.StartTime = &v
	return s
}

func (s *DescribeSQLLogCountResponseBody) Validate() error {
	return dara.Validate(s)
}

type DescribeSQLLogCountResponseBodyItems struct {
	// The name of the table.
	//
	// example:
	//
	// gp-xxxxxxxx
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// Details of the audit logs.
	Series []*DescribeSQLLogCountResponseBodyItemsSeries `json:"Series,omitempty" xml:"Series,omitempty" type:"Repeated"`
}

func (s DescribeSQLLogCountResponseBodyItems) String() string {
	return dara.Prettify(s)
}

func (s DescribeSQLLogCountResponseBodyItems) GoString() string {
	return s.String()
}

func (s *DescribeSQLLogCountResponseBodyItems) GetName() *string {
	return s.Name
}

func (s *DescribeSQLLogCountResponseBodyItems) GetSeries() []*DescribeSQLLogCountResponseBodyItemsSeries {
	return s.Series
}

func (s *DescribeSQLLogCountResponseBodyItems) SetName(v string) *DescribeSQLLogCountResponseBodyItems {
	s.Name = &v
	return s
}

func (s *DescribeSQLLogCountResponseBodyItems) SetSeries(v []*DescribeSQLLogCountResponseBodyItemsSeries) *DescribeSQLLogCountResponseBodyItems {
	s.Series = v
	return s
}

func (s *DescribeSQLLogCountResponseBodyItems) Validate() error {
	return dara.Validate(s)
}

type DescribeSQLLogCountResponseBodyItemsSeries struct {
	// Details of the audit logs.
	Values []*DescribeSQLLogCountResponseBodyItemsSeriesValues `json:"Values,omitempty" xml:"Values,omitempty" type:"Repeated"`
}

func (s DescribeSQLLogCountResponseBodyItemsSeries) String() string {
	return dara.Prettify(s)
}

func (s DescribeSQLLogCountResponseBodyItemsSeries) GoString() string {
	return s.String()
}

func (s *DescribeSQLLogCountResponseBodyItemsSeries) GetValues() []*DescribeSQLLogCountResponseBodyItemsSeriesValues {
	return s.Values
}

func (s *DescribeSQLLogCountResponseBodyItemsSeries) SetValues(v []*DescribeSQLLogCountResponseBodyItemsSeriesValues) *DescribeSQLLogCountResponseBodyItemsSeries {
	s.Values = v
	return s
}

func (s *DescribeSQLLogCountResponseBodyItemsSeries) Validate() error {
	return dara.Validate(s)
}

type DescribeSQLLogCountResponseBodyItemsSeriesValues struct {
	// The time when the audit logs were generated and the number of the audit logs.
	Point []*string `json:"Point,omitempty" xml:"Point,omitempty" type:"Repeated"`
}

func (s DescribeSQLLogCountResponseBodyItemsSeriesValues) String() string {
	return dara.Prettify(s)
}

func (s DescribeSQLLogCountResponseBodyItemsSeriesValues) GoString() string {
	return s.String()
}

func (s *DescribeSQLLogCountResponseBodyItemsSeriesValues) GetPoint() []*string {
	return s.Point
}

func (s *DescribeSQLLogCountResponseBodyItemsSeriesValues) SetPoint(v []*string) *DescribeSQLLogCountResponseBodyItemsSeriesValues {
	s.Point = v
	return s
}

func (s *DescribeSQLLogCountResponseBodyItemsSeriesValues) Validate() error {
	return dara.Validate(s)
}

type iDescribeSQLLogCountResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DescribeSQLLogCountResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DescribeSQLLogCountResponse
	GetStatusCode() *int32
	SetBody(v *DescribeSQLLogCountResponseBody) *DescribeSQLLogCountResponse
	GetBody() *DescribeSQLLogCountResponseBody
}

type DescribeSQLLogCountResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeSQLLogCountResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeSQLLogCountResponse) String() string {
	return dara.Prettify(s)
}

func (s DescribeSQLLogCountResponse) GoString() string {
	return s.String()
}

func (s *DescribeSQLLogCountResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DescribeSQLLogCountResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DescribeSQLLogCountResponse) GetBody() *DescribeSQLLogCountResponseBody {
	return s.Body
}

func (s *DescribeSQLLogCountResponse) SetHeaders(v map[string]*string) *DescribeSQLLogCountResponse {
	s.Headers = v
	return s
}

func (s *DescribeSQLLogCountResponse) SetStatusCode(v int32) *DescribeSQLLogCountResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSQLLogCountResponse) SetBody(v *DescribeSQLLogCountResponseBody) *DescribeSQLLogCountResponse {
	s.Body = v
	return s
}

func (s *DescribeSQLLogCountResponse) Validate() error {
	return dara.Validate(s)
}

type iDescribeSQLLogsRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *DescribeSQLLogsRequest
	GetDBInstanceId() *string
	SetDatabase(v string) *DescribeSQLLogsRequest
	GetDatabase() *string
	SetEndTime(v string) *DescribeSQLLogsRequest
	GetEndTime() *string
	SetExecuteCost(v string) *DescribeSQLLogsRequest
	GetExecuteCost() *string
	SetExecuteState(v string) *DescribeSQLLogsRequest
	GetExecuteState() *string
	SetMaxExecuteCost(v string) *DescribeSQLLogsRequest
	GetMaxExecuteCost() *string
	SetMinExecuteCost(v string) *DescribeSQLLogsRequest
	GetMinExecuteCost() *string
	SetOperationClass(v string) *DescribeSQLLogsRequest
	GetOperationClass() *string
	SetOperationType(v string) *DescribeSQLLogsRequest
	GetOperationType() *string
	SetPageNumber(v int32) *DescribeSQLLogsRequest
	GetPageNumber() *int32
	SetPageSize(v int32) *DescribeSQLLogsRequest
	GetPageSize() *int32
	SetQueryKeywords(v string) *DescribeSQLLogsRequest
	GetQueryKeywords() *string
	SetSourceIP(v string) *DescribeSQLLogsRequest
	GetSourceIP() *string
	SetStartTime(v string) *DescribeSQLLogsRequest
	GetStartTime() *string
	SetUser(v string) *DescribeSQLLogsRequest
	GetUser() *string
}

type DescribeSQLLogsRequest struct {
	// The instance ID.
	//
	// > You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the IDs of all AnalyticDB for PostgreSQL instances within a region.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The name of the database.
	//
	// example:
	//
	// adbpgadmin
	Database *string `json:"Database,omitempty" xml:"Database,omitempty"`
	// The end of the time range to query. Specify the time in the ISO 8601 standard in the *yyyy-MM-ddTHH:mmZ	- format. The time must be in UTC.
	//
	// > The end time must be later than the start time. The maximum time range that can be specified is seven days.
	//
	// This parameter is required.
	//
	// example:
	//
	// 2021-03-17T06:30Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The execution duration of the SQL statement. Unit: seconds.
	//
	// example:
	//
	// 1
	ExecuteCost *string `json:"ExecuteCost,omitempty" xml:"ExecuteCost,omitempty"`
	// The execution status of the SQL statement. Valid values:
	//
	// 	- **1**: successful.
	//
	// 	- **0**: failed.
	//
	// example:
	//
	// success
	ExecuteState *string `json:"ExecuteState,omitempty" xml:"ExecuteState,omitempty"`
	// The maximum amount of time consumed by a slow query. Unit: seconds. Minimum value: 0.
	//
	// example:
	//
	// 1000
	MaxExecuteCost *string `json:"MaxExecuteCost,omitempty" xml:"MaxExecuteCost,omitempty"`
	// The minimum amount of time consumed by a slow query. Unit: seconds. Minimum value: 0.
	//
	// example:
	//
	// 1
	MinExecuteCost *string `json:"MinExecuteCost,omitempty" xml:"MinExecuteCost,omitempty"`
	// The type of the query language. Valid values:
	//
	// 	- **DQL**
	//
	// 	- **DML**
	//
	// 	- **DDL**
	//
	// 	- **DCL**
	//
	// 	- **TCL**
	//
	// example:
	//
	// DQL
	OperationClass *string `json:"OperationClass,omitempty" xml:"OperationClass,omitempty"`
	// The type of the SQL statement.
	//
	// >
	//
	// 	- If **OperationClass*	- is specified, the value of **OperationType*	- must belong to the corresponding query language. For example, if **OperationClass*	- is set to **DQL**, the value of **OperationType*	- must be a **DQL*	- statement such as **SELECT**.
	//
	// 	- If **OperationClass*	- is not specified, the value of **OperationType*	- can be an SQL statement of any query language.
	//
	// 	- If **OperationClass*	- and **OperationType*	- are not specified, all types of SQL statements are returned.
	//
	// example:
	//
	// SELECT
	OperationType *string `json:"OperationType,omitempty" xml:"OperationType,omitempty"`
	// The page number. Pages start from page 1. Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. Valid values:
	//
	// 	- **30**
	//
	// 	- **50**
	//
	// 	- **100**
	//
	// Default value: **30**.
	//
	// example:
	//
	// 30
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The keywords of the SQL statement.
	//
	// example:
	//
	// select 1
	QueryKeywords *string `json:"QueryKeywords,omitempty" xml:"QueryKeywords,omitempty"`
	// The source IP address.
	//
	// example:
	//
	// 100.**.**.90
	SourceIP *string `json:"SourceIP,omitempty" xml:"SourceIP,omitempty"`
	// The beginning of the time range to query. Specify the time in the ISO 8601 standard in the *yyyy-MM-ddTHH:mmZ	- format. The time must be in UTC.
	//
	// This parameter is required.
	//
	// example:
	//
	// 2021-03-10T06:30Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The name of the database account.
	//
	// example:
	//
	// testadmin
	User *string `json:"User,omitempty" xml:"User,omitempty"`
}

func (s DescribeSQLLogsRequest) String() string {
	return dara.Prettify(s)
}

func (s DescribeSQLLogsRequest) GoString() string {
	return s.String()
}

func (s *DescribeSQLLogsRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *DescribeSQLLogsRequest) GetDatabase() *string {
	return s.Database
}

func (s *DescribeSQLLogsRequest) GetEndTime() *string {
	return s.EndTime
}

func (s *DescribeSQLLogsRequest) GetExecuteCost() *string {
	return s.ExecuteCost
}

func (s *DescribeSQLLogsRequest) GetExecuteState() *string {
	return s.ExecuteState
}

func (s *DescribeSQLLogsRequest) GetMaxExecuteCost() *string {
	return s.MaxExecuteCost
}

func (s *DescribeSQLLogsRequest) GetMinExecuteCost() *string {
	return s.MinExecuteCost
}

func (s *DescribeSQLLogsRequest) GetOperationClass() *string {
	return s.OperationClass
}

func (s *DescribeSQLLogsRequest) GetOperationType() *string {
	return s.OperationType
}

func (s *DescribeSQLLogsRequest) GetPageNumber() *int32 {
	return s.PageNumber
}

func (s *DescribeSQLLogsRequest) GetPageSize() *int32 {
	return s.PageSize
}

func (s *DescribeSQLLogsRequest) GetQueryKeywords() *string {
	return s.QueryKeywords
}

func (s *DescribeSQLLogsRequest) GetSourceIP() *string {
	return s.SourceIP
}

func (s *DescribeSQLLogsRequest) GetStartTime() *string {
	return s.StartTime
}

func (s *DescribeSQLLogsRequest) GetUser() *string {
	return s.User
}

func (s *DescribeSQLLogsRequest) SetDBInstanceId(v string) *DescribeSQLLogsRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeSQLLogsRequest) SetDatabase(v string) *DescribeSQLLogsRequest {
	s.Database = &v
	return s
}

func (s *DescribeSQLLogsRequest) SetEndTime(v string) *DescribeSQLLogsRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeSQLLogsRequest) SetExecuteCost(v string) *DescribeSQLLogsRequest {
	s.ExecuteCost = &v
	return s
}

func (s *DescribeSQLLogsRequest) SetExecuteState(v string) *DescribeSQLLogsRequest {
	s.ExecuteState = &v
	return s
}

func (s *DescribeSQLLogsRequest) SetMaxExecuteCost(v string) *DescribeSQLLogsRequest {
	s.MaxExecuteCost = &v
	return s
}

func (s *DescribeSQLLogsRequest) SetMinExecuteCost(v string) *DescribeSQLLogsRequest {
	s.MinExecuteCost = &v
	return s
}

func (s *DescribeSQLLogsRequest) SetOperationClass(v string) *DescribeSQLLogsRequest {
	s.OperationClass = &v
	return s
}

func (s *DescribeSQLLogsRequest) SetOperationType(v string) *DescribeSQLLogsRequest {
	s.OperationType = &v
	return s
}

func (s *DescribeSQLLogsRequest) SetPageNumber(v int32) *DescribeSQLLogsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeSQLLogsRequest) SetPageSize(v int32) *DescribeSQLLogsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeSQLLogsRequest) SetQueryKeywords(v string) *DescribeSQLLogsRequest {
	s.QueryKeywords = &v
	return s
}

func (s *DescribeSQLLogsRequest) SetSourceIP(v string) *DescribeSQLLogsRequest {
	s.SourceIP = &v
	return s
}

func (s *DescribeSQLLogsRequest) SetStartTime(v string) *DescribeSQLLogsRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeSQLLogsRequest) SetUser(v string) *DescribeSQLLogsRequest {
	s.User = &v
	return s
}

func (s *DescribeSQLLogsRequest) Validate() error {
	return dara.Validate(s)
}

type iDescribeSQLLogsResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetItems(v []*DescribeSQLLogsResponseBodyItems) *DescribeSQLLogsResponseBody
	GetItems() []*DescribeSQLLogsResponseBodyItems
	SetPageNumber(v int32) *DescribeSQLLogsResponseBody
	GetPageNumber() *int32
	SetPageRecordCount(v int32) *DescribeSQLLogsResponseBody
	GetPageRecordCount() *int32
	SetRequestId(v string) *DescribeSQLLogsResponseBody
	GetRequestId() *string
}

type DescribeSQLLogsResponseBody struct {
	// The queried SQL execution logs.
	Items []*DescribeSQLLogsResponseBodyItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Repeated"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 1
	PageRecordCount *int32 `json:"PageRecordCount,omitempty" xml:"PageRecordCount,omitempty"`
	// The request ID.
	//
	// example:
	//
	// A7941C94-B92F-46A0-BD3E-2D**********
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeSQLLogsResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DescribeSQLLogsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSQLLogsResponseBody) GetItems() []*DescribeSQLLogsResponseBodyItems {
	return s.Items
}

func (s *DescribeSQLLogsResponseBody) GetPageNumber() *int32 {
	return s.PageNumber
}

func (s *DescribeSQLLogsResponseBody) GetPageRecordCount() *int32 {
	return s.PageRecordCount
}

func (s *DescribeSQLLogsResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DescribeSQLLogsResponseBody) SetItems(v []*DescribeSQLLogsResponseBodyItems) *DescribeSQLLogsResponseBody {
	s.Items = v
	return s
}

func (s *DescribeSQLLogsResponseBody) SetPageNumber(v int32) *DescribeSQLLogsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeSQLLogsResponseBody) SetPageRecordCount(v int32) *DescribeSQLLogsResponseBody {
	s.PageRecordCount = &v
	return s
}

func (s *DescribeSQLLogsResponseBody) SetRequestId(v string) *DescribeSQLLogsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSQLLogsResponseBody) Validate() error {
	return dara.Validate(s)
}

type DescribeSQLLogsResponseBodyItems struct {
	// The database account that executes the SQL statement.
	//
	// example:
	//
	// testadmin
	AccountName *string `json:"AccountName,omitempty" xml:"AccountName,omitempty"`
	// The name of the database.
	//
	// example:
	//
	// adbpgadmin
	DBName *string `json:"DBName,omitempty" xml:"DBName,omitempty"`
	// The role of the database.
	//
	// example:
	//
	// master
	DBRole *string `json:"DBRole,omitempty" xml:"DBRole,omitempty"`
	// The execution duration of the SQL statement.
	//
	// example:
	//
	// 2
	ExecuteCost *float32 `json:"ExecuteCost,omitempty" xml:"ExecuteCost,omitempty"`
	// The execution status of the SQL statement. Valid values:
	//
	// 	- **success**
	//
	// 	- **fail**
	//
	// example:
	//
	// success
	ExecuteState *string `json:"ExecuteState,omitempty" xml:"ExecuteState,omitempty"`
	// The type of the query language.
	//
	// example:
	//
	// DQL
	OperationClass *string `json:"OperationClass,omitempty" xml:"OperationClass,omitempty"`
	// The time when the SQL statement was executed.
	//
	// example:
	//
	// 2021-03-15T17:02:32Z
	OperationExecuteTime *string `json:"OperationExecuteTime,omitempty" xml:"OperationExecuteTime,omitempty"`
	// The type of the SQL statement.
	//
	// example:
	//
	// SELECT
	OperationType *string `json:"OperationType,omitempty" xml:"OperationType,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 1
	ReturnRowCounts *int64 `json:"ReturnRowCounts,omitempty" xml:"ReturnRowCounts,omitempty"`
	// The SQL execution plan.
	//
	// example:
	//
	// ""
	SQLPlan *string `json:"SQLPlan,omitempty" xml:"SQLPlan,omitempty"`
	// The SQL statement.
	//
	// example:
	//
	// select 1
	SQLText *string `json:"SQLText,omitempty" xml:"SQLText,omitempty"`
	// The number of entries scanned.
	//
	// example:
	//
	// 1
	ScanRowCounts *int64 `json:"ScanRowCounts,omitempty" xml:"ScanRowCounts,omitempty"`
	// The source IP address.
	//
	// example:
	//
	// 100.**.**.90
	SourceIP *string `json:"SourceIP,omitempty" xml:"SourceIP,omitempty"`
	// The number of the source port.
	//
	// example:
	//
	// 50514
	SourcePort *int32 `json:"SourcePort,omitempty" xml:"SourcePort,omitempty"`
}

func (s DescribeSQLLogsResponseBodyItems) String() string {
	return dara.Prettify(s)
}

func (s DescribeSQLLogsResponseBodyItems) GoString() string {
	return s.String()
}

func (s *DescribeSQLLogsResponseBodyItems) GetAccountName() *string {
	return s.AccountName
}

func (s *DescribeSQLLogsResponseBodyItems) GetDBName() *string {
	return s.DBName
}

func (s *DescribeSQLLogsResponseBodyItems) GetDBRole() *string {
	return s.DBRole
}

func (s *DescribeSQLLogsResponseBodyItems) GetExecuteCost() *float32 {
	return s.ExecuteCost
}

func (s *DescribeSQLLogsResponseBodyItems) GetExecuteState() *string {
	return s.ExecuteState
}

func (s *DescribeSQLLogsResponseBodyItems) GetOperationClass() *string {
	return s.OperationClass
}

func (s *DescribeSQLLogsResponseBodyItems) GetOperationExecuteTime() *string {
	return s.OperationExecuteTime
}

func (s *DescribeSQLLogsResponseBodyItems) GetOperationType() *string {
	return s.OperationType
}

func (s *DescribeSQLLogsResponseBodyItems) GetReturnRowCounts() *int64 {
	return s.ReturnRowCounts
}

func (s *DescribeSQLLogsResponseBodyItems) GetSQLPlan() *string {
	return s.SQLPlan
}

func (s *DescribeSQLLogsResponseBodyItems) GetSQLText() *string {
	return s.SQLText
}

func (s *DescribeSQLLogsResponseBodyItems) GetScanRowCounts() *int64 {
	return s.ScanRowCounts
}

func (s *DescribeSQLLogsResponseBodyItems) GetSourceIP() *string {
	return s.SourceIP
}

func (s *DescribeSQLLogsResponseBodyItems) GetSourcePort() *int32 {
	return s.SourcePort
}

func (s *DescribeSQLLogsResponseBodyItems) SetAccountName(v string) *DescribeSQLLogsResponseBodyItems {
	s.AccountName = &v
	return s
}

func (s *DescribeSQLLogsResponseBodyItems) SetDBName(v string) *DescribeSQLLogsResponseBodyItems {
	s.DBName = &v
	return s
}

func (s *DescribeSQLLogsResponseBodyItems) SetDBRole(v string) *DescribeSQLLogsResponseBodyItems {
	s.DBRole = &v
	return s
}

func (s *DescribeSQLLogsResponseBodyItems) SetExecuteCost(v float32) *DescribeSQLLogsResponseBodyItems {
	s.ExecuteCost = &v
	return s
}

func (s *DescribeSQLLogsResponseBodyItems) SetExecuteState(v string) *DescribeSQLLogsResponseBodyItems {
	s.ExecuteState = &v
	return s
}

func (s *DescribeSQLLogsResponseBodyItems) SetOperationClass(v string) *DescribeSQLLogsResponseBodyItems {
	s.OperationClass = &v
	return s
}

func (s *DescribeSQLLogsResponseBodyItems) SetOperationExecuteTime(v string) *DescribeSQLLogsResponseBodyItems {
	s.OperationExecuteTime = &v
	return s
}

func (s *DescribeSQLLogsResponseBodyItems) SetOperationType(v string) *DescribeSQLLogsResponseBodyItems {
	s.OperationType = &v
	return s
}

func (s *DescribeSQLLogsResponseBodyItems) SetReturnRowCounts(v int64) *DescribeSQLLogsResponseBodyItems {
	s.ReturnRowCounts = &v
	return s
}

func (s *DescribeSQLLogsResponseBodyItems) SetSQLPlan(v string) *DescribeSQLLogsResponseBodyItems {
	s.SQLPlan = &v
	return s
}

func (s *DescribeSQLLogsResponseBodyItems) SetSQLText(v string) *DescribeSQLLogsResponseBodyItems {
	s.SQLText = &v
	return s
}

func (s *DescribeSQLLogsResponseBodyItems) SetScanRowCounts(v int64) *DescribeSQLLogsResponseBodyItems {
	s.ScanRowCounts = &v
	return s
}

func (s *DescribeSQLLogsResponseBodyItems) SetSourceIP(v string) *DescribeSQLLogsResponseBodyItems {
	s.SourceIP = &v
	return s
}

func (s *DescribeSQLLogsResponseBodyItems) SetSourcePort(v int32) *DescribeSQLLogsResponseBodyItems {
	s.SourcePort = &v
	return s
}

func (s *DescribeSQLLogsResponseBodyItems) Validate() error {
	return dara.Validate(s)
}

type iDescribeSQLLogsResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DescribeSQLLogsResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DescribeSQLLogsResponse
	GetStatusCode() *int32
	SetBody(v *DescribeSQLLogsResponseBody) *DescribeSQLLogsResponse
	GetBody() *DescribeSQLLogsResponseBody
}

type DescribeSQLLogsResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeSQLLogsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeSQLLogsResponse) String() string {
	return dara.Prettify(s)
}

func (s DescribeSQLLogsResponse) GoString() string {
	return s.String()
}

func (s *DescribeSQLLogsResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DescribeSQLLogsResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DescribeSQLLogsResponse) GetBody() *DescribeSQLLogsResponseBody {
	return s.Body
}

func (s *DescribeSQLLogsResponse) SetHeaders(v map[string]*string) *DescribeSQLLogsResponse {
	s.Headers = v
	return s
}

func (s *DescribeSQLLogsResponse) SetStatusCode(v int32) *DescribeSQLLogsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSQLLogsResponse) SetBody(v *DescribeSQLLogsResponseBody) *DescribeSQLLogsResponse {
	s.Body = v
	return s
}

func (s *DescribeSQLLogsResponse) Validate() error {
	return dara.Validate(s)
}

type iDescribeSQLLogsV2Request interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *DescribeSQLLogsV2Request
	GetDBInstanceId() *string
	SetDatabase(v string) *DescribeSQLLogsV2Request
	GetDatabase() *string
	SetEndTime(v string) *DescribeSQLLogsV2Request
	GetEndTime() *string
	SetExecuteCost(v string) *DescribeSQLLogsV2Request
	GetExecuteCost() *string
	SetExecuteState(v string) *DescribeSQLLogsV2Request
	GetExecuteState() *string
	SetMaxExecuteCost(v string) *DescribeSQLLogsV2Request
	GetMaxExecuteCost() *string
	SetMinExecuteCost(v string) *DescribeSQLLogsV2Request
	GetMinExecuteCost() *string
	SetOperationClass(v string) *DescribeSQLLogsV2Request
	GetOperationClass() *string
	SetOperationType(v string) *DescribeSQLLogsV2Request
	GetOperationType() *string
	SetPageNumber(v string) *DescribeSQLLogsV2Request
	GetPageNumber() *string
	SetPageSize(v string) *DescribeSQLLogsV2Request
	GetPageSize() *string
	SetQueryKeywords(v string) *DescribeSQLLogsV2Request
	GetQueryKeywords() *string
	SetRegionId(v string) *DescribeSQLLogsV2Request
	GetRegionId() *string
	SetResourceGroupId(v string) *DescribeSQLLogsV2Request
	GetResourceGroupId() *string
	SetSourceIP(v string) *DescribeSQLLogsV2Request
	GetSourceIP() *string
	SetStartTime(v string) *DescribeSQLLogsV2Request
	GetStartTime() *string
	SetUser(v string) *DescribeSQLLogsV2Request
	GetUser() *string
}

type DescribeSQLLogsV2Request struct {
	// The ID of instance.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query details of all AnalyticDB for PostgreSQL instances in a specific region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The name of the database.
	//
	// example:
	//
	// adbpgadmin
	Database *string `json:"Database,omitempty" xml:"Database,omitempty"`
	// The end of the time range to query. Specify the time in the ISO 8601 standard in the *yyyy-MM-ddTHH:mmZ	- format. The time must be in UTC.
	//
	// >  The end time must be later than the start time. The interval cannot be more than 24 hours.
	//
	// example:
	//
	// 2022-03-17T06:30Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The execution duration of the SQL statement. Unit: seconds.
	//
	// example:
	//
	// 1
	ExecuteCost *string `json:"ExecuteCost,omitempty" xml:"ExecuteCost,omitempty"`
	// The execution status of the SQL statement. Valid values:
	//
	// 	- **1**: successful.
	//
	// 	- **0**: failed.
	//
	// example:
	//
	// success
	ExecuteState *string `json:"ExecuteState,omitempty" xml:"ExecuteState,omitempty"`
	// The maximum amount of time consumed by a slow query. Minimum value: 0. Unit: seconds.
	//
	// example:
	//
	// 1000
	MaxExecuteCost *string `json:"MaxExecuteCost,omitempty" xml:"MaxExecuteCost,omitempty"`
	// The minimum amount of time consumed by a slow query. Minimum value: 0. Unit: seconds.
	//
	// example:
	//
	// 1
	MinExecuteCost *string `json:"MinExecuteCost,omitempty" xml:"MinExecuteCost,omitempty"`
	// The type of the query language. Valid values:
	//
	// 	- **DQL**
	//
	// 	- **DML**
	//
	// 	- **DDL**
	//
	// 	- **DCL**
	//
	// 	- **TCL**
	//
	// example:
	//
	// DQL
	OperationClass *string `json:"OperationClass,omitempty" xml:"OperationClass,omitempty"`
	// The type of the SQL statement.
	//
	// > 	- If the **OperationClass*	- parameter is specified, the **OperationType*	- value must belong to the corresponding query language. For example, if the **OperationClass*	- value is **DQL**, the **OperationType*	- value must be a **DQL*	- SQL statement such as **SELECT**.
	//
	// >	- If the **OperationClass*	- parameter is not specified, the **OperationType*	- value can be an SQL statement of all query languages.
	//
	// >	- If neither of the **OperationClass*	- and **OperationType*	- parameters is specified, all types of SQL statements are returned.
	//
	// example:
	//
	// SELECT
	OperationType *string `json:"OperationType,omitempty" xml:"OperationType,omitempty"`
	// The number of entries to return on each page.
	//
	// example:
	//
	// 10
	PageNumber *string `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of the page to return. The maximum value is 200.
	//
	// example:
	//
	// 1
	PageSize *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The keywords of the SQL statement.
	//
	// example:
	//
	// select 1
	QueryKeywords *string `json:"QueryKeywords,omitempty" xml:"QueryKeywords,omitempty"`
	// The region ID of the instance.
	//
	// > You can call the [DescribeRegions](https://help.aliyun.com/document_detail/86912.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the resource group to which the instance belongs.
	//
	// example:
	//
	// rg-bp67acfmxazb4p****
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	// The source IP address.
	//
	// example:
	//
	// 100.XX.XX.90
	SourceIP *string `json:"SourceIP,omitempty" xml:"SourceIP,omitempty"`
	// The beginning of the time range. Specify the time in the ISO 8601 standard in the *yyyy-MM-ddTHH:mmZ	- format. The time must be in UTC.
	//
	// example:
	//
	// 2022-03-10T06:30Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The name of the database account.
	//
	// example:
	//
	// testadmin
	User *string `json:"User,omitempty" xml:"User,omitempty"`
}

func (s DescribeSQLLogsV2Request) String() string {
	return dara.Prettify(s)
}

func (s DescribeSQLLogsV2Request) GoString() string {
	return s.String()
}

func (s *DescribeSQLLogsV2Request) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *DescribeSQLLogsV2Request) GetDatabase() *string {
	return s.Database
}

func (s *DescribeSQLLogsV2Request) GetEndTime() *string {
	return s.EndTime
}

func (s *DescribeSQLLogsV2Request) GetExecuteCost() *string {
	return s.ExecuteCost
}

func (s *DescribeSQLLogsV2Request) GetExecuteState() *string {
	return s.ExecuteState
}

func (s *DescribeSQLLogsV2Request) GetMaxExecuteCost() *string {
	return s.MaxExecuteCost
}

func (s *DescribeSQLLogsV2Request) GetMinExecuteCost() *string {
	return s.MinExecuteCost
}

func (s *DescribeSQLLogsV2Request) GetOperationClass() *string {
	return s.OperationClass
}

func (s *DescribeSQLLogsV2Request) GetOperationType() *string {
	return s.OperationType
}

func (s *DescribeSQLLogsV2Request) GetPageNumber() *string {
	return s.PageNumber
}

func (s *DescribeSQLLogsV2Request) GetPageSize() *string {
	return s.PageSize
}

func (s *DescribeSQLLogsV2Request) GetQueryKeywords() *string {
	return s.QueryKeywords
}

func (s *DescribeSQLLogsV2Request) GetRegionId() *string {
	return s.RegionId
}

func (s *DescribeSQLLogsV2Request) GetResourceGroupId() *string {
	return s.ResourceGroupId
}

func (s *DescribeSQLLogsV2Request) GetSourceIP() *string {
	return s.SourceIP
}

func (s *DescribeSQLLogsV2Request) GetStartTime() *string {
	return s.StartTime
}

func (s *DescribeSQLLogsV2Request) GetUser() *string {
	return s.User
}

func (s *DescribeSQLLogsV2Request) SetDBInstanceId(v string) *DescribeSQLLogsV2Request {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeSQLLogsV2Request) SetDatabase(v string) *DescribeSQLLogsV2Request {
	s.Database = &v
	return s
}

func (s *DescribeSQLLogsV2Request) SetEndTime(v string) *DescribeSQLLogsV2Request {
	s.EndTime = &v
	return s
}

func (s *DescribeSQLLogsV2Request) SetExecuteCost(v string) *DescribeSQLLogsV2Request {
	s.ExecuteCost = &v
	return s
}

func (s *DescribeSQLLogsV2Request) SetExecuteState(v string) *DescribeSQLLogsV2Request {
	s.ExecuteState = &v
	return s
}

func (s *DescribeSQLLogsV2Request) SetMaxExecuteCost(v string) *DescribeSQLLogsV2Request {
	s.MaxExecuteCost = &v
	return s
}

func (s *DescribeSQLLogsV2Request) SetMinExecuteCost(v string) *DescribeSQLLogsV2Request {
	s.MinExecuteCost = &v
	return s
}

func (s *DescribeSQLLogsV2Request) SetOperationClass(v string) *DescribeSQLLogsV2Request {
	s.OperationClass = &v
	return s
}

func (s *DescribeSQLLogsV2Request) SetOperationType(v string) *DescribeSQLLogsV2Request {
	s.OperationType = &v
	return s
}

func (s *DescribeSQLLogsV2Request) SetPageNumber(v string) *DescribeSQLLogsV2Request {
	s.PageNumber = &v
	return s
}

func (s *DescribeSQLLogsV2Request) SetPageSize(v string) *DescribeSQLLogsV2Request {
	s.PageSize = &v
	return s
}

func (s *DescribeSQLLogsV2Request) SetQueryKeywords(v string) *DescribeSQLLogsV2Request {
	s.QueryKeywords = &v
	return s
}

func (s *DescribeSQLLogsV2Request) SetRegionId(v string) *DescribeSQLLogsV2Request {
	s.RegionId = &v
	return s
}

func (s *DescribeSQLLogsV2Request) SetResourceGroupId(v string) *DescribeSQLLogsV2Request {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeSQLLogsV2Request) SetSourceIP(v string) *DescribeSQLLogsV2Request {
	s.SourceIP = &v
	return s
}

func (s *DescribeSQLLogsV2Request) SetStartTime(v string) *DescribeSQLLogsV2Request {
	s.StartTime = &v
	return s
}

func (s *DescribeSQLLogsV2Request) SetUser(v string) *DescribeSQLLogsV2Request {
	s.User = &v
	return s
}

func (s *DescribeSQLLogsV2Request) Validate() error {
	return dara.Validate(s)
}

type iDescribeSQLLogsV2ResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetAccessDeniedDetail(v string) *DescribeSQLLogsV2ResponseBody
	GetAccessDeniedDetail() *string
	SetItems(v []*DescribeSQLLogsV2ResponseBodyItems) *DescribeSQLLogsV2ResponseBody
	GetItems() []*DescribeSQLLogsV2ResponseBodyItems
	SetPageNumber(v int32) *DescribeSQLLogsV2ResponseBody
	GetPageNumber() *int32
	SetPageRecordCount(v int32) *DescribeSQLLogsV2ResponseBody
	GetPageRecordCount() *int32
	SetRequestId(v string) *DescribeSQLLogsV2ResponseBody
	GetRequestId() *string
}

type DescribeSQLLogsV2ResponseBody struct {
	// The details about the access denial.
	//
	// example:
	//
	// account name invalid
	AccessDeniedDetail *string `json:"AccessDeniedDetail,omitempty" xml:"AccessDeniedDetail,omitempty"`
	// The queried SQL execution logs.
	Items []*DescribeSQLLogsV2ResponseBodyItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Repeated"`
	// The page number of the returned page.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries returned per page.
	//
	// example:
	//
	// 1
	PageRecordCount *int32 `json:"PageRecordCount,omitempty" xml:"PageRecordCount,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// A7941C94-B92F-46A0-BD3E-2D**********
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeSQLLogsV2ResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DescribeSQLLogsV2ResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSQLLogsV2ResponseBody) GetAccessDeniedDetail() *string {
	return s.AccessDeniedDetail
}

func (s *DescribeSQLLogsV2ResponseBody) GetItems() []*DescribeSQLLogsV2ResponseBodyItems {
	return s.Items
}

func (s *DescribeSQLLogsV2ResponseBody) GetPageNumber() *int32 {
	return s.PageNumber
}

func (s *DescribeSQLLogsV2ResponseBody) GetPageRecordCount() *int32 {
	return s.PageRecordCount
}

func (s *DescribeSQLLogsV2ResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DescribeSQLLogsV2ResponseBody) SetAccessDeniedDetail(v string) *DescribeSQLLogsV2ResponseBody {
	s.AccessDeniedDetail = &v
	return s
}

func (s *DescribeSQLLogsV2ResponseBody) SetItems(v []*DescribeSQLLogsV2ResponseBodyItems) *DescribeSQLLogsV2ResponseBody {
	s.Items = v
	return s
}

func (s *DescribeSQLLogsV2ResponseBody) SetPageNumber(v int32) *DescribeSQLLogsV2ResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeSQLLogsV2ResponseBody) SetPageRecordCount(v int32) *DescribeSQLLogsV2ResponseBody {
	s.PageRecordCount = &v
	return s
}

func (s *DescribeSQLLogsV2ResponseBody) SetRequestId(v string) *DescribeSQLLogsV2ResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSQLLogsV2ResponseBody) Validate() error {
	return dara.Validate(s)
}

type DescribeSQLLogsV2ResponseBodyItems struct {
	// The database account that executes the SQL statement.
	//
	// example:
	//
	// testadmin
	AccountName *string `json:"AccountName,omitempty" xml:"AccountName,omitempty"`
	// The name of the database.
	//
	// example:
	//
	// adbpgadmin
	DBName *string `json:"DBName,omitempty" xml:"DBName,omitempty"`
	// The role of the database.
	//
	// example:
	//
	// master
	DBRole *string `json:"DBRole,omitempty" xml:"DBRole,omitempty"`
	// The error code.
	//
	// example:
	//
	// InternalError
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// The error message.
	//
	// example:
	//
	// User not authorized to operate on the specified resource.
	ErrorMsg *string `json:"ErrorMsg,omitempty" xml:"ErrorMsg,omitempty"`
	// The execution duration of the SQL statement.
	//
	// example:
	//
	// 2
	ExecuteCost *float32 `json:"ExecuteCost,omitempty" xml:"ExecuteCost,omitempty"`
	// The execution status of the SQL statement. Valid values:
	//
	// 	- **success**
	//
	// 	- **fail**
	//
	// example:
	//
	// success
	ExecuteState *string `json:"ExecuteState,omitempty" xml:"ExecuteState,omitempty"`
	// The type of the query language.
	//
	// example:
	//
	// DQL
	OperationClass *string `json:"OperationClass,omitempty" xml:"OperationClass,omitempty"`
	// The time when the SQL statement was executed.
	//
	// example:
	//
	// 2021-03-15T17:02:32Z
	OperationExecuteTime *string `json:"OperationExecuteTime,omitempty" xml:"OperationExecuteTime,omitempty"`
	// The type of the SQL statement.
	//
	// example:
	//
	// SELECT
	OperationType *string `json:"OperationType,omitempty" xml:"OperationType,omitempty"`
	// The query ID.
	//
	// example:
	//
	// 2548026401648157601713924318883
	QueryId *string `json:"QueryId,omitempty" xml:"QueryId,omitempty"`
	// The number of entries returned.
	//
	// example:
	//
	// 1
	ReturnRowCounts *int64 `json:"ReturnRowCounts,omitempty" xml:"ReturnRowCounts,omitempty"`
	// The SQL statement.
	//
	// example:
	//
	// select 1
	SQLText *string `json:"SQLText,omitempty" xml:"SQLText,omitempty"`
	// The number of entries scanned.
	//
	// example:
	//
	// 1
	ScanRowCounts *int64 `json:"ScanRowCounts,omitempty" xml:"ScanRowCounts,omitempty"`
	// The ID of the session.
	//
	// example:
	//
	// efc33bd7-f1dc-4b24-b4fb-ab0d5329b7bb
	SessionId *string `json:"SessionId,omitempty" xml:"SessionId,omitempty"`
	// The source IP address.
	//
	// example:
	//
	// 100.**.**.90
	SourceIP *string `json:"SourceIP,omitempty" xml:"SourceIP,omitempty"`
	// The number of the source port.
	//
	// example:
	//
	// 50514
	SourcePort *int32 `json:"SourcePort,omitempty" xml:"SourcePort,omitempty"`
}

func (s DescribeSQLLogsV2ResponseBodyItems) String() string {
	return dara.Prettify(s)
}

func (s DescribeSQLLogsV2ResponseBodyItems) GoString() string {
	return s.String()
}

func (s *DescribeSQLLogsV2ResponseBodyItems) GetAccountName() *string {
	return s.AccountName
}

func (s *DescribeSQLLogsV2ResponseBodyItems) GetDBName() *string {
	return s.DBName
}

func (s *DescribeSQLLogsV2ResponseBodyItems) GetDBRole() *string {
	return s.DBRole
}

func (s *DescribeSQLLogsV2ResponseBodyItems) GetErrorCode() *string {
	return s.ErrorCode
}

func (s *DescribeSQLLogsV2ResponseBodyItems) GetErrorMsg() *string {
	return s.ErrorMsg
}

func (s *DescribeSQLLogsV2ResponseBodyItems) GetExecuteCost() *float32 {
	return s.ExecuteCost
}

func (s *DescribeSQLLogsV2ResponseBodyItems) GetExecuteState() *string {
	return s.ExecuteState
}

func (s *DescribeSQLLogsV2ResponseBodyItems) GetOperationClass() *string {
	return s.OperationClass
}

func (s *DescribeSQLLogsV2ResponseBodyItems) GetOperationExecuteTime() *string {
	return s.OperationExecuteTime
}

func (s *DescribeSQLLogsV2ResponseBodyItems) GetOperationType() *string {
	return s.OperationType
}

func (s *DescribeSQLLogsV2ResponseBodyItems) GetQueryId() *string {
	return s.QueryId
}

func (s *DescribeSQLLogsV2ResponseBodyItems) GetReturnRowCounts() *int64 {
	return s.ReturnRowCounts
}

func (s *DescribeSQLLogsV2ResponseBodyItems) GetSQLText() *string {
	return s.SQLText
}

func (s *DescribeSQLLogsV2ResponseBodyItems) GetScanRowCounts() *int64 {
	return s.ScanRowCounts
}

func (s *DescribeSQLLogsV2ResponseBodyItems) GetSessionId() *string {
	return s.SessionId
}

func (s *DescribeSQLLogsV2ResponseBodyItems) GetSourceIP() *string {
	return s.SourceIP
}

func (s *DescribeSQLLogsV2ResponseBodyItems) GetSourcePort() *int32 {
	return s.SourcePort
}

func (s *DescribeSQLLogsV2ResponseBodyItems) SetAccountName(v string) *DescribeSQLLogsV2ResponseBodyItems {
	s.AccountName = &v
	return s
}

func (s *DescribeSQLLogsV2ResponseBodyItems) SetDBName(v string) *DescribeSQLLogsV2ResponseBodyItems {
	s.DBName = &v
	return s
}

func (s *DescribeSQLLogsV2ResponseBodyItems) SetDBRole(v string) *DescribeSQLLogsV2ResponseBodyItems {
	s.DBRole = &v
	return s
}

func (s *DescribeSQLLogsV2ResponseBodyItems) SetErrorCode(v string) *DescribeSQLLogsV2ResponseBodyItems {
	s.ErrorCode = &v
	return s
}

func (s *DescribeSQLLogsV2ResponseBodyItems) SetErrorMsg(v string) *DescribeSQLLogsV2ResponseBodyItems {
	s.ErrorMsg = &v
	return s
}

func (s *DescribeSQLLogsV2ResponseBodyItems) SetExecuteCost(v float32) *DescribeSQLLogsV2ResponseBodyItems {
	s.ExecuteCost = &v
	return s
}

func (s *DescribeSQLLogsV2ResponseBodyItems) SetExecuteState(v string) *DescribeSQLLogsV2ResponseBodyItems {
	s.ExecuteState = &v
	return s
}

func (s *DescribeSQLLogsV2ResponseBodyItems) SetOperationClass(v string) *DescribeSQLLogsV2ResponseBodyItems {
	s.OperationClass = &v
	return s
}

func (s *DescribeSQLLogsV2ResponseBodyItems) SetOperationExecuteTime(v string) *DescribeSQLLogsV2ResponseBodyItems {
	s.OperationExecuteTime = &v
	return s
}

func (s *DescribeSQLLogsV2ResponseBodyItems) SetOperationType(v string) *DescribeSQLLogsV2ResponseBodyItems {
	s.OperationType = &v
	return s
}

func (s *DescribeSQLLogsV2ResponseBodyItems) SetQueryId(v string) *DescribeSQLLogsV2ResponseBodyItems {
	s.QueryId = &v
	return s
}

func (s *DescribeSQLLogsV2ResponseBodyItems) SetReturnRowCounts(v int64) *DescribeSQLLogsV2ResponseBodyItems {
	s.ReturnRowCounts = &v
	return s
}

func (s *DescribeSQLLogsV2ResponseBodyItems) SetSQLText(v string) *DescribeSQLLogsV2ResponseBodyItems {
	s.SQLText = &v
	return s
}

func (s *DescribeSQLLogsV2ResponseBodyItems) SetScanRowCounts(v int64) *DescribeSQLLogsV2ResponseBodyItems {
	s.ScanRowCounts = &v
	return s
}

func (s *DescribeSQLLogsV2ResponseBodyItems) SetSessionId(v string) *DescribeSQLLogsV2ResponseBodyItems {
	s.SessionId = &v
	return s
}

func (s *DescribeSQLLogsV2ResponseBodyItems) SetSourceIP(v string) *DescribeSQLLogsV2ResponseBodyItems {
	s.SourceIP = &v
	return s
}

func (s *DescribeSQLLogsV2ResponseBodyItems) SetSourcePort(v int32) *DescribeSQLLogsV2ResponseBodyItems {
	s.SourcePort = &v
	return s
}

func (s *DescribeSQLLogsV2ResponseBodyItems) Validate() error {
	return dara.Validate(s)
}

type iDescribeSQLLogsV2Response interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DescribeSQLLogsV2Response
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DescribeSQLLogsV2Response
	GetStatusCode() *int32
	SetBody(v *DescribeSQLLogsV2ResponseBody) *DescribeSQLLogsV2Response
	GetBody() *DescribeSQLLogsV2ResponseBody
}

type DescribeSQLLogsV2Response struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeSQLLogsV2ResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeSQLLogsV2Response) String() string {
	return dara.Prettify(s)
}

func (s DescribeSQLLogsV2Response) GoString() string {
	return s.String()
}

func (s *DescribeSQLLogsV2Response) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DescribeSQLLogsV2Response) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DescribeSQLLogsV2Response) GetBody() *DescribeSQLLogsV2ResponseBody {
	return s.Body
}

func (s *DescribeSQLLogsV2Response) SetHeaders(v map[string]*string) *DescribeSQLLogsV2Response {
	s.Headers = v
	return s
}

func (s *DescribeSQLLogsV2Response) SetStatusCode(v int32) *DescribeSQLLogsV2Response {
	s.StatusCode = &v
	return s
}

func (s *DescribeSQLLogsV2Response) SetBody(v *DescribeSQLLogsV2ResponseBody) *DescribeSQLLogsV2Response {
	s.Body = v
	return s
}

func (s *DescribeSQLLogsV2Response) Validate() error {
	return dara.Validate(s)
}

type iDescribeSampleDataRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *DescribeSampleDataRequest
	GetDBInstanceId() *string
	SetOwnerId(v int64) *DescribeSampleDataRequest
	GetOwnerId() *int64
}

type DescribeSampleDataRequest struct {
	// The ID of the instance.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the IDs of all AnalyticDB for PostgreSQL instances in a specific region.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s DescribeSampleDataRequest) String() string {
	return dara.Prettify(s)
}

func (s DescribeSampleDataRequest) GoString() string {
	return s.String()
}

func (s *DescribeSampleDataRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *DescribeSampleDataRequest) GetOwnerId() *int64 {
	return s.OwnerId
}

func (s *DescribeSampleDataRequest) SetDBInstanceId(v string) *DescribeSampleDataRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeSampleDataRequest) SetOwnerId(v int64) *DescribeSampleDataRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeSampleDataRequest) Validate() error {
	return dara.Validate(s)
}

type iDescribeSampleDataResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *DescribeSampleDataResponseBody
	GetDBInstanceId() *string
	SetErrorMessage(v string) *DescribeSampleDataResponseBody
	GetErrorMessage() *string
	SetHasSampleData(v bool) *DescribeSampleDataResponseBody
	GetHasSampleData() *bool
	SetRequestId(v string) *DescribeSampleDataResponseBody
	GetRequestId() *string
	SetSampleDataStatus(v string) *DescribeSampleDataResponseBody
	GetSampleDataStatus() *string
}

type DescribeSampleDataResponseBody struct {
	// The ID of the instance.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The error message returned if an error occurs. This message does not affect the execution of the operation.
	//
	// example:
	//
	// ******
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// Indicates whether a sample dataset is loaded to the instance. Valid values:
	//
	// 	- **true**: A sample dataset is loaded.
	//
	// 	- **false**: No sample dataset is loaded.
	//
	// example:
	//
	// true
	HasSampleData *bool `json:"HasSampleData,omitempty" xml:"HasSampleData,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 84CD7CAF-FA7B-5178-B19F-D8CDE307D5FA_8111
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The loading status of the sample dataset. Valid values:
	//
	// 	- **loaded**
	//
	// 	- **loading**
	//
	// 	- **unload**
	//
	// example:
	//
	// loaded
	SampleDataStatus *string `json:"SampleDataStatus,omitempty" xml:"SampleDataStatus,omitempty"`
}

func (s DescribeSampleDataResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DescribeSampleDataResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSampleDataResponseBody) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *DescribeSampleDataResponseBody) GetErrorMessage() *string {
	return s.ErrorMessage
}

func (s *DescribeSampleDataResponseBody) GetHasSampleData() *bool {
	return s.HasSampleData
}

func (s *DescribeSampleDataResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DescribeSampleDataResponseBody) GetSampleDataStatus() *string {
	return s.SampleDataStatus
}

func (s *DescribeSampleDataResponseBody) SetDBInstanceId(v string) *DescribeSampleDataResponseBody {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeSampleDataResponseBody) SetErrorMessage(v string) *DescribeSampleDataResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *DescribeSampleDataResponseBody) SetHasSampleData(v bool) *DescribeSampleDataResponseBody {
	s.HasSampleData = &v
	return s
}

func (s *DescribeSampleDataResponseBody) SetRequestId(v string) *DescribeSampleDataResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSampleDataResponseBody) SetSampleDataStatus(v string) *DescribeSampleDataResponseBody {
	s.SampleDataStatus = &v
	return s
}

func (s *DescribeSampleDataResponseBody) Validate() error {
	return dara.Validate(s)
}

type iDescribeSampleDataResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DescribeSampleDataResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DescribeSampleDataResponse
	GetStatusCode() *int32
	SetBody(v *DescribeSampleDataResponseBody) *DescribeSampleDataResponse
	GetBody() *DescribeSampleDataResponseBody
}

type DescribeSampleDataResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeSampleDataResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeSampleDataResponse) String() string {
	return dara.Prettify(s)
}

func (s DescribeSampleDataResponse) GoString() string {
	return s.String()
}

func (s *DescribeSampleDataResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DescribeSampleDataResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DescribeSampleDataResponse) GetBody() *DescribeSampleDataResponseBody {
	return s.Body
}

func (s *DescribeSampleDataResponse) SetHeaders(v map[string]*string) *DescribeSampleDataResponse {
	s.Headers = v
	return s
}

func (s *DescribeSampleDataResponse) SetStatusCode(v int32) *DescribeSampleDataResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSampleDataResponse) SetBody(v *DescribeSampleDataResponseBody) *DescribeSampleDataResponse {
	s.Body = v
	return s
}

func (s *DescribeSampleDataResponse) Validate() error {
	return dara.Validate(s)
}

type iDescribeStreamingDataServiceRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *DescribeStreamingDataServiceRequest
	GetDBInstanceId() *string
	SetRegionId(v string) *DescribeStreamingDataServiceRequest
	GetRegionId() *string
	SetServiceId(v string) *DescribeStreamingDataServiceRequest
	GetServiceId() *string
}

type DescribeStreamingDataServiceRequest struct {
	// The instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp10g78o9807yv9h3
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The region ID.
	//
	// >  You can call the [DescribeRegions](https://help.aliyun.com/document_detail/86912.html) operation to query the most recent region list.
	//
	// example:
	//
	// cn-beijing
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The service ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	ServiceId *string `json:"ServiceId,omitempty" xml:"ServiceId,omitempty"`
}

func (s DescribeStreamingDataServiceRequest) String() string {
	return dara.Prettify(s)
}

func (s DescribeStreamingDataServiceRequest) GoString() string {
	return s.String()
}

func (s *DescribeStreamingDataServiceRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *DescribeStreamingDataServiceRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *DescribeStreamingDataServiceRequest) GetServiceId() *string {
	return s.ServiceId
}

func (s *DescribeStreamingDataServiceRequest) SetDBInstanceId(v string) *DescribeStreamingDataServiceRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeStreamingDataServiceRequest) SetRegionId(v string) *DescribeStreamingDataServiceRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeStreamingDataServiceRequest) SetServiceId(v string) *DescribeStreamingDataServiceRequest {
	s.ServiceId = &v
	return s
}

func (s *DescribeStreamingDataServiceRequest) Validate() error {
	return dara.Validate(s)
}

type iDescribeStreamingDataServiceResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetCreateTime(v string) *DescribeStreamingDataServiceResponseBody
	GetCreateTime() *string
	SetModifyTime(v string) *DescribeStreamingDataServiceResponseBody
	GetModifyTime() *string
	SetRequestId(v string) *DescribeStreamingDataServiceResponseBody
	GetRequestId() *string
	SetServiceDescription(v string) *DescribeStreamingDataServiceResponseBody
	GetServiceDescription() *string
	SetServiceId(v string) *DescribeStreamingDataServiceResponseBody
	GetServiceId() *string
	SetServiceIp(v string) *DescribeStreamingDataServiceResponseBody
	GetServiceIp() *string
	SetServiceManaged(v bool) *DescribeStreamingDataServiceResponseBody
	GetServiceManaged() *bool
	SetServiceName(v string) *DescribeStreamingDataServiceResponseBody
	GetServiceName() *string
	SetServiceOwnerId(v string) *DescribeStreamingDataServiceResponseBody
	GetServiceOwnerId() *string
	SetServicePort(v int32) *DescribeStreamingDataServiceResponseBody
	GetServicePort() *int32
	SetServiceSpec(v string) *DescribeStreamingDataServiceResponseBody
	GetServiceSpec() *string
	SetStatus(v string) *DescribeStreamingDataServiceResponseBody
	GetStatus() *string
}

type DescribeStreamingDataServiceResponseBody struct {
	// The time when the service was created.
	//
	// example:
	//
	// 2019-09-08T16:00:00Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The time when the service was last modified.
	//
	// example:
	//
	// 2019-09-08T17:00:00Z
	ModifyTime *string `json:"ModifyTime,omitempty" xml:"ModifyTime,omitempty"`
	// The request ID.
	//
	// example:
	//
	// B4CAF581-2AC7-41AD-8940-D56DF7AADF5B
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The description of the service.
	//
	// example:
	//
	// test-adbpgss
	ServiceDescription *string `json:"ServiceDescription,omitempty" xml:"ServiceDescription,omitempty"`
	// The service ID.
	//
	// example:
	//
	// 1
	ServiceId *string `json:"ServiceId,omitempty" xml:"ServiceId,omitempty"`
	// The IP address of the service.
	//
	// example:
	//
	// 192.168.0.1
	ServiceIp *string `json:"ServiceIp,omitempty" xml:"ServiceIp,omitempty"`
	// The service is managed by other aliyun product or not.
	//
	// example:
	//
	// False
	ServiceManaged *bool `json:"ServiceManaged,omitempty" xml:"ServiceManaged,omitempty"`
	// The name of the service.
	//
	// example:
	//
	// test-adbpgss
	ServiceName *string `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
	// The service account uid of the aliyun product
	//
	// example:
	//
	// 123456
	ServiceOwnerId *string `json:"ServiceOwnerId,omitempty" xml:"ServiceOwnerId,omitempty"`
	// The port number of the service.
	//
	// example:
	//
	// 5432
	ServicePort *int32 `json:"ServicePort,omitempty" xml:"ServicePort,omitempty"`
	// The specifications of the service.
	//
	// example:
	//
	// 2
	ServiceSpec *string `json:"ServiceSpec,omitempty" xml:"ServiceSpec,omitempty"`
	// The status of the service. Valid values:
	//
	// 	- Init
	//
	// 	- Running
	//
	// 	- Exception
	//
	// 	- Paused
	//
	// example:
	//
	// Running
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeStreamingDataServiceResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DescribeStreamingDataServiceResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeStreamingDataServiceResponseBody) GetCreateTime() *string {
	return s.CreateTime
}

func (s *DescribeStreamingDataServiceResponseBody) GetModifyTime() *string {
	return s.ModifyTime
}

func (s *DescribeStreamingDataServiceResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DescribeStreamingDataServiceResponseBody) GetServiceDescription() *string {
	return s.ServiceDescription
}

func (s *DescribeStreamingDataServiceResponseBody) GetServiceId() *string {
	return s.ServiceId
}

func (s *DescribeStreamingDataServiceResponseBody) GetServiceIp() *string {
	return s.ServiceIp
}

func (s *DescribeStreamingDataServiceResponseBody) GetServiceManaged() *bool {
	return s.ServiceManaged
}

func (s *DescribeStreamingDataServiceResponseBody) GetServiceName() *string {
	return s.ServiceName
}

func (s *DescribeStreamingDataServiceResponseBody) GetServiceOwnerId() *string {
	return s.ServiceOwnerId
}

func (s *DescribeStreamingDataServiceResponseBody) GetServicePort() *int32 {
	return s.ServicePort
}

func (s *DescribeStreamingDataServiceResponseBody) GetServiceSpec() *string {
	return s.ServiceSpec
}

func (s *DescribeStreamingDataServiceResponseBody) GetStatus() *string {
	return s.Status
}

func (s *DescribeStreamingDataServiceResponseBody) SetCreateTime(v string) *DescribeStreamingDataServiceResponseBody {
	s.CreateTime = &v
	return s
}

func (s *DescribeStreamingDataServiceResponseBody) SetModifyTime(v string) *DescribeStreamingDataServiceResponseBody {
	s.ModifyTime = &v
	return s
}

func (s *DescribeStreamingDataServiceResponseBody) SetRequestId(v string) *DescribeStreamingDataServiceResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeStreamingDataServiceResponseBody) SetServiceDescription(v string) *DescribeStreamingDataServiceResponseBody {
	s.ServiceDescription = &v
	return s
}

func (s *DescribeStreamingDataServiceResponseBody) SetServiceId(v string) *DescribeStreamingDataServiceResponseBody {
	s.ServiceId = &v
	return s
}

func (s *DescribeStreamingDataServiceResponseBody) SetServiceIp(v string) *DescribeStreamingDataServiceResponseBody {
	s.ServiceIp = &v
	return s
}

func (s *DescribeStreamingDataServiceResponseBody) SetServiceManaged(v bool) *DescribeStreamingDataServiceResponseBody {
	s.ServiceManaged = &v
	return s
}

func (s *DescribeStreamingDataServiceResponseBody) SetServiceName(v string) *DescribeStreamingDataServiceResponseBody {
	s.ServiceName = &v
	return s
}

func (s *DescribeStreamingDataServiceResponseBody) SetServiceOwnerId(v string) *DescribeStreamingDataServiceResponseBody {
	s.ServiceOwnerId = &v
	return s
}

func (s *DescribeStreamingDataServiceResponseBody) SetServicePort(v int32) *DescribeStreamingDataServiceResponseBody {
	s.ServicePort = &v
	return s
}

func (s *DescribeStreamingDataServiceResponseBody) SetServiceSpec(v string) *DescribeStreamingDataServiceResponseBody {
	s.ServiceSpec = &v
	return s
}

func (s *DescribeStreamingDataServiceResponseBody) SetStatus(v string) *DescribeStreamingDataServiceResponseBody {
	s.Status = &v
	return s
}

func (s *DescribeStreamingDataServiceResponseBody) Validate() error {
	return dara.Validate(s)
}

type iDescribeStreamingDataServiceResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DescribeStreamingDataServiceResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DescribeStreamingDataServiceResponse
	GetStatusCode() *int32
	SetBody(v *DescribeStreamingDataServiceResponseBody) *DescribeStreamingDataServiceResponse
	GetBody() *DescribeStreamingDataServiceResponseBody
}

type DescribeStreamingDataServiceResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeStreamingDataServiceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeStreamingDataServiceResponse) String() string {
	return dara.Prettify(s)
}

func (s DescribeStreamingDataServiceResponse) GoString() string {
	return s.String()
}

func (s *DescribeStreamingDataServiceResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DescribeStreamingDataServiceResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DescribeStreamingDataServiceResponse) GetBody() *DescribeStreamingDataServiceResponseBody {
	return s.Body
}

func (s *DescribeStreamingDataServiceResponse) SetHeaders(v map[string]*string) *DescribeStreamingDataServiceResponse {
	s.Headers = v
	return s
}

func (s *DescribeStreamingDataServiceResponse) SetStatusCode(v int32) *DescribeStreamingDataServiceResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeStreamingDataServiceResponse) SetBody(v *DescribeStreamingDataServiceResponseBody) *DescribeStreamingDataServiceResponse {
	s.Body = v
	return s
}

func (s *DescribeStreamingDataServiceResponse) Validate() error {
	return dara.Validate(s)
}

type iDescribeStreamingDataSourceRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *DescribeStreamingDataSourceRequest
	GetDBInstanceId() *string
	SetDataSourceId(v int32) *DescribeStreamingDataSourceRequest
	GetDataSourceId() *int32
	SetRegionId(v string) *DescribeStreamingDataSourceRequest
	GetRegionId() *string
}

type DescribeStreamingDataSourceRequest struct {
	// Instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp10g78o9807yv9h3
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// Data source ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	DataSourceId *int32 `json:"DataSourceId,omitempty" xml:"DataSourceId,omitempty"`
	// Region ID.
	//
	// > You can call the [DescribeRegions](https://help.aliyun.com/document_detail/86912.html) API to view available region IDs.
	//
	// example:
	//
	// cn-beijing
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeStreamingDataSourceRequest) String() string {
	return dara.Prettify(s)
}

func (s DescribeStreamingDataSourceRequest) GoString() string {
	return s.String()
}

func (s *DescribeStreamingDataSourceRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *DescribeStreamingDataSourceRequest) GetDataSourceId() *int32 {
	return s.DataSourceId
}

func (s *DescribeStreamingDataSourceRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *DescribeStreamingDataSourceRequest) SetDBInstanceId(v string) *DescribeStreamingDataSourceRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeStreamingDataSourceRequest) SetDataSourceId(v int32) *DescribeStreamingDataSourceRequest {
	s.DataSourceId = &v
	return s
}

func (s *DescribeStreamingDataSourceRequest) SetRegionId(v string) *DescribeStreamingDataSourceRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeStreamingDataSourceRequest) Validate() error {
	return dara.Validate(s)
}

type iDescribeStreamingDataSourceResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetCreateTime(v string) *DescribeStreamingDataSourceResponseBody
	GetCreateTime() *string
	SetDataSourceConfig(v string) *DescribeStreamingDataSourceResponseBody
	GetDataSourceConfig() *string
	SetDataSourceDescription(v string) *DescribeStreamingDataSourceResponseBody
	GetDataSourceDescription() *string
	SetDataSourceId(v string) *DescribeStreamingDataSourceResponseBody
	GetDataSourceId() *string
	SetDataSourceName(v string) *DescribeStreamingDataSourceResponseBody
	GetDataSourceName() *string
	SetDataSourceType(v string) *DescribeStreamingDataSourceResponseBody
	GetDataSourceType() *string
	SetErrorMessage(v string) *DescribeStreamingDataSourceResponseBody
	GetErrorMessage() *string
	SetRequestId(v string) *DescribeStreamingDataSourceResponseBody
	GetRequestId() *string
	SetServiceId(v int32) *DescribeStreamingDataSourceResponseBody
	GetServiceId() *int32
	SetStatus(v string) *DescribeStreamingDataSourceResponseBody
	GetStatus() *string
}

type DescribeStreamingDataSourceResponseBody struct {
	// Creation time.
	//
	// example:
	//
	// 2019-09-08T16:00:00Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// Data source configuration information.
	//
	// example:
	//
	// {"brokers":"broker0:9091,broker1:9091","topic":"topic"}
	DataSourceConfig *string `json:"DataSourceConfig,omitempty" xml:"DataSourceConfig,omitempty"`
	// Data source description.
	//
	// example:
	//
	// test-kafka
	DataSourceDescription *string `json:"DataSourceDescription,omitempty" xml:"DataSourceDescription,omitempty"`
	// Data source ID.
	//
	// example:
	//
	// 1
	DataSourceId *string `json:"DataSourceId,omitempty" xml:"DataSourceId,omitempty"`
	// Data source name.
	//
	// example:
	//
	// test-kafka
	DataSourceName *string `json:"DataSourceName,omitempty" xml:"DataSourceName,omitempty"`
	// Data source type, values include:
	//
	//  -  kafka
	//
	// example:
	//
	// kafka
	DataSourceType *string `json:"DataSourceType,omitempty" xml:"DataSourceType,omitempty"`
	// Service status message, for example, in case of an exception, it will show the reason for the exception. In normal Running state, this value is empty.
	//
	// example:
	//
	// ""
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// Request ID.
	//
	// example:
	//
	// B4CAF581-2AC7-41AD-8940-D56DF7AADF5B
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// External data service ID.
	//
	// example:
	//
	// 1
	ServiceId *int32 `json:"ServiceId,omitempty" xml:"ServiceId,omitempty"`
	// Service status:
	//
	// - Initializing init
	//
	// - Running running
	//
	// - Exception exception
	//
	// example:
	//
	// running
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeStreamingDataSourceResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DescribeStreamingDataSourceResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeStreamingDataSourceResponseBody) GetCreateTime() *string {
	return s.CreateTime
}

func (s *DescribeStreamingDataSourceResponseBody) GetDataSourceConfig() *string {
	return s.DataSourceConfig
}

func (s *DescribeStreamingDataSourceResponseBody) GetDataSourceDescription() *string {
	return s.DataSourceDescription
}

func (s *DescribeStreamingDataSourceResponseBody) GetDataSourceId() *string {
	return s.DataSourceId
}

func (s *DescribeStreamingDataSourceResponseBody) GetDataSourceName() *string {
	return s.DataSourceName
}

func (s *DescribeStreamingDataSourceResponseBody) GetDataSourceType() *string {
	return s.DataSourceType
}

func (s *DescribeStreamingDataSourceResponseBody) GetErrorMessage() *string {
	return s.ErrorMessage
}

func (s *DescribeStreamingDataSourceResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DescribeStreamingDataSourceResponseBody) GetServiceId() *int32 {
	return s.ServiceId
}

func (s *DescribeStreamingDataSourceResponseBody) GetStatus() *string {
	return s.Status
}

func (s *DescribeStreamingDataSourceResponseBody) SetCreateTime(v string) *DescribeStreamingDataSourceResponseBody {
	s.CreateTime = &v
	return s
}

func (s *DescribeStreamingDataSourceResponseBody) SetDataSourceConfig(v string) *DescribeStreamingDataSourceResponseBody {
	s.DataSourceConfig = &v
	return s
}

func (s *DescribeStreamingDataSourceResponseBody) SetDataSourceDescription(v string) *DescribeStreamingDataSourceResponseBody {
	s.DataSourceDescription = &v
	return s
}

func (s *DescribeStreamingDataSourceResponseBody) SetDataSourceId(v string) *DescribeStreamingDataSourceResponseBody {
	s.DataSourceId = &v
	return s
}

func (s *DescribeStreamingDataSourceResponseBody) SetDataSourceName(v string) *DescribeStreamingDataSourceResponseBody {
	s.DataSourceName = &v
	return s
}

func (s *DescribeStreamingDataSourceResponseBody) SetDataSourceType(v string) *DescribeStreamingDataSourceResponseBody {
	s.DataSourceType = &v
	return s
}

func (s *DescribeStreamingDataSourceResponseBody) SetErrorMessage(v string) *DescribeStreamingDataSourceResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *DescribeStreamingDataSourceResponseBody) SetRequestId(v string) *DescribeStreamingDataSourceResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeStreamingDataSourceResponseBody) SetServiceId(v int32) *DescribeStreamingDataSourceResponseBody {
	s.ServiceId = &v
	return s
}

func (s *DescribeStreamingDataSourceResponseBody) SetStatus(v string) *DescribeStreamingDataSourceResponseBody {
	s.Status = &v
	return s
}

func (s *DescribeStreamingDataSourceResponseBody) Validate() error {
	return dara.Validate(s)
}

type iDescribeStreamingDataSourceResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DescribeStreamingDataSourceResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DescribeStreamingDataSourceResponse
	GetStatusCode() *int32
	SetBody(v *DescribeStreamingDataSourceResponseBody) *DescribeStreamingDataSourceResponse
	GetBody() *DescribeStreamingDataSourceResponseBody
}

type DescribeStreamingDataSourceResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeStreamingDataSourceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeStreamingDataSourceResponse) String() string {
	return dara.Prettify(s)
}

func (s DescribeStreamingDataSourceResponse) GoString() string {
	return s.String()
}

func (s *DescribeStreamingDataSourceResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DescribeStreamingDataSourceResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DescribeStreamingDataSourceResponse) GetBody() *DescribeStreamingDataSourceResponseBody {
	return s.Body
}

func (s *DescribeStreamingDataSourceResponse) SetHeaders(v map[string]*string) *DescribeStreamingDataSourceResponse {
	s.Headers = v
	return s
}

func (s *DescribeStreamingDataSourceResponse) SetStatusCode(v int32) *DescribeStreamingDataSourceResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeStreamingDataSourceResponse) SetBody(v *DescribeStreamingDataSourceResponseBody) *DescribeStreamingDataSourceResponse {
	s.Body = v
	return s
}

func (s *DescribeStreamingDataSourceResponse) Validate() error {
	return dara.Validate(s)
}

type iDescribeStreamingJobRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *DescribeStreamingJobRequest
	GetDBInstanceId() *string
	SetJobId(v int32) *DescribeStreamingJobRequest
	GetJobId() *int32
	SetRegionId(v string) *DescribeStreamingJobRequest
	GetRegionId() *string
}

type DescribeStreamingJobRequest struct {
	// Instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp10g78o9807yv9h3
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// Job ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	JobId *int32 `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// Region ID.
	//
	// > You can call the [DescribeRegions](https://help.aliyun.com/document_detail/86912.html) interface to view available region IDs.
	//
	// example:
	//
	// cn-beijing
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeStreamingJobRequest) String() string {
	return dara.Prettify(s)
}

func (s DescribeStreamingJobRequest) GoString() string {
	return s.String()
}

func (s *DescribeStreamingJobRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *DescribeStreamingJobRequest) GetJobId() *int32 {
	return s.JobId
}

func (s *DescribeStreamingJobRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *DescribeStreamingJobRequest) SetDBInstanceId(v string) *DescribeStreamingJobRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeStreamingJobRequest) SetJobId(v int32) *DescribeStreamingJobRequest {
	s.JobId = &v
	return s
}

func (s *DescribeStreamingJobRequest) SetRegionId(v string) *DescribeStreamingJobRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeStreamingJobRequest) Validate() error {
	return dara.Validate(s)
}

type iDescribeStreamingJobResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetAccount(v string) *DescribeStreamingJobResponseBody
	GetAccount() *string
	SetConsistency(v string) *DescribeStreamingJobResponseBody
	GetConsistency() *string
	SetCreateTime(v string) *DescribeStreamingJobResponseBody
	GetCreateTime() *string
	SetDataSourceId(v string) *DescribeStreamingJobResponseBody
	GetDataSourceId() *string
	SetDataSourceName(v string) *DescribeStreamingJobResponseBody
	GetDataSourceName() *string
	SetDestColumns(v []*string) *DescribeStreamingJobResponseBody
	GetDestColumns() []*string
	SetDestDatabase(v string) *DescribeStreamingJobResponseBody
	GetDestDatabase() *string
	SetDestSchema(v string) *DescribeStreamingJobResponseBody
	GetDestSchema() *string
	SetDestTable(v string) *DescribeStreamingJobResponseBody
	GetDestTable() *string
	SetErrorLimitCount(v int32) *DescribeStreamingJobResponseBody
	GetErrorLimitCount() *int32
	SetErrorMessage(v string) *DescribeStreamingJobResponseBody
	GetErrorMessage() *string
	SetFallbackOffset(v string) *DescribeStreamingJobResponseBody
	GetFallbackOffset() *string
	SetGroupName(v string) *DescribeStreamingJobResponseBody
	GetGroupName() *string
	SetJobConfig(v string) *DescribeStreamingJobResponseBody
	GetJobConfig() *string
	SetJobDescription(v string) *DescribeStreamingJobResponseBody
	GetJobDescription() *string
	SetJobId(v string) *DescribeStreamingJobResponseBody
	GetJobId() *string
	SetJobName(v string) *DescribeStreamingJobResponseBody
	GetJobName() *string
	SetMatchColumns(v []*string) *DescribeStreamingJobResponseBody
	GetMatchColumns() []*string
	SetMode(v string) *DescribeStreamingJobResponseBody
	GetMode() *string
	SetModifyTime(v string) *DescribeStreamingJobResponseBody
	GetModifyTime() *string
	SetPassword(v string) *DescribeStreamingJobResponseBody
	GetPassword() *string
	SetRequestId(v string) *DescribeStreamingJobResponseBody
	GetRequestId() *string
	SetSrcColumns(v []*string) *DescribeStreamingJobResponseBody
	GetSrcColumns() []*string
	SetStatus(v string) *DescribeStreamingJobResponseBody
	GetStatus() *string
	SetUpdateColumns(v []*string) *DescribeStreamingJobResponseBody
	GetUpdateColumns() []*string
	SetWriteMode(v string) *DescribeStreamingJobResponseBody
	GetWriteMode() *string
}

type DescribeStreamingJobResponseBody struct {
	// Target database account.
	//
	// example:
	//
	// test-account
	Account *string `json:"Account,omitempty" xml:"Account,omitempty"`
	// Delivery guarantee.
	//
	// example:
	//
	// ATLEAST / EXACTLY
	Consistency *string `json:"Consistency,omitempty" xml:"Consistency,omitempty"`
	// Creation time.
	//
	// Use the UTC time format: yyyy-MM-ddTHH:mm:ssZ
	//
	// example:
	//
	// 2019-09-08T16:00:00Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// Data source ID.
	//
	// example:
	//
	// 2
	DataSourceId *string `json:"DataSourceId,omitempty" xml:"DataSourceId,omitempty"`
	// Data source name.
	//
	// example:
	//
	// test_kafka
	DataSourceName *string `json:"DataSourceName,omitempty" xml:"DataSourceName,omitempty"`
	// Target data table mapping field list.
	DestColumns []*string `json:"DestColumns,omitempty" xml:"DestColumns,omitempty" type:"Repeated"`
	// Target database name.
	//
	// example:
	//
	// dest-db
	DestDatabase *string `json:"DestDatabase,omitempty" xml:"DestDatabase,omitempty"`
	// Target namespace.
	//
	// example:
	//
	// dest-schema
	DestSchema *string `json:"DestSchema,omitempty" xml:"DestSchema,omitempty"`
	// Target table name.
	//
	// example:
	//
	// dest-table
	DestTable *string `json:"DestTable,omitempty" xml:"DestTable,omitempty"`
	// When data in Kafka does not match the ADBPG target table, it can cause write failures. This value represents the number of error rows allowed; if exceeded, the task will fail.
	//
	// example:
	//
	// 5
	ErrorLimitCount *int32 `json:"ErrorLimitCount,omitempty" xml:"ErrorLimitCount,omitempty"`
	// Service status information, such as the reason for an exception. It is empty in the normal Running state.
	//
	// example:
	//
	// ""
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// Fallback offset, which is the fallback position
	//
	// - The FallbackOffset parameter defines the behavior when the consumer has not requested a specific offset to consume or the requested offset exceeds the current record\\"s offset information in the Kafka cluster. You can choose to start consuming from the earliest (newest) or latest (oldest) offset.
	//
	// example:
	//
	// EARLIEST /  LATEST
	FallbackOffset *string `json:"FallbackOffset,omitempty" xml:"FallbackOffset,omitempty"`
	// Kafka group name
	//
	// example:
	//
	// test_group
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	// Job configuration file.
	//
	// example:
	//
	// DATABASE: adbpgss_test
	//
	// USER: adbpgss_test
	//
	// PASSWORD: adbpgssTest
	//
	// HOST: gp-xxx-master.gpdb.rds-aliyun-pre.rds.aliyuncs.com
	//
	// PORT: 5432
	//
	// KAFKA:
	//
	//   INPUT:
	//
	//     SOURCE:
	//
	//       BROKERS: broker1:9092,broker2:9092,broker3:9092
	//
	//       TOPIC: testtopic
	//
	//       FALLBACK_OFFSET: earliest
	//
	//     KEY:
	//
	//       COLUMNS:
	//
	//       - NAME: customer_id
	//
	//         TYPE: int
	//
	//       FORMAT: delimited
	//
	//       DELIMITED_OPTION:
	//
	//         DELIMITER: \\"|\\"
	//
	//     VALUE:
	//
	//       COLUMNS:
	//
	//       - TYPE: integer
	//
	//         NAME: l_orderkey
	//
	//       - TYPE: integer
	//
	//         NAME: l_partkey
	//
	//       - TYPE: integer
	//
	//         NAME: l_suppkey
	//
	//       - TYPE: integer
	//
	//         NAME: l_linenumber
	//
	//       - TYPE: decimal
	//
	//         NAME: l_quantity
	//
	//       - TYPE: decimal
	//
	//         NAME: l_extendedprice
	//
	//       - TYPE: decimal
	//
	//         NAME: l_discount
	//
	//       - TYPE: decimal
	//
	//         NAME: l_tax
	//
	//       - TYPE: char
	//
	//         NAME: l_returnflag
	//
	//       - TYPE: char
	//
	//         NAME: l_linestatus
	//
	//       - TYPE: date
	//
	//         NAME: l_shipdate
	//
	//       - TYPE: date
	//
	//         NAME: l_commitdate
	//
	//       - TYPE: date
	//
	//         NAME: l_receiptdate
	//
	//       - TYPE: text
	//
	//         NAME: l_shipinstruct
	//
	//       - TYPE: text
	//
	//         NAME: l_shipmode
	//
	//       - TYPE: text
	//
	//         NAME: l_comment
	//
	//       FORMAT: delimited
	//
	//       DELIMITED_OPTION:
	//
	//         DELIMITER: \\"|\\"
	//
	//     ERROR_LIMIT: 10
	//
	//   OUTPUT:
	//
	//     SCHEMA: adbpgss_test
	//
	//     TABLE: write_with_insert_plaintext
	//
	//     MODE: MERGE
	//
	//     MATCH_COLUMNS:
	//
	//     - l_orderkey
	//
	//     - l_partkey
	//
	//     - l_suppkey
	//
	//     UPDATE_COLUMNS:
	//
	//     - l_linenumber
	//
	//     - l_quantity
	//
	//     - l_extendedprice
	//
	//     - l_discount
	//
	//     - l_tax
	//
	//     - l_returnflag
	//
	//     - l_linestatus
	//
	//     - l_shipdate
	//
	//     - l_commitdate
	//
	//     - l_receiptdate
	//
	//     - l_shipinstruct
	//
	//     - l_shipmode
	//
	//     - l_comment
	//
	//     MAPPING:
	//
	//     - EXPRESSION: l_orderkey
	//
	//       NAME: l_orderkey
	//
	//     - EXPRESSION: l_partkey
	//
	//       NAME: l_partkey
	//
	//     - EXPRESSION: l_suppkey
	//
	//       NAME: l_suppkey
	//
	//     - EXPRESSION: l_linenumber
	//
	//       NAME: l_linenumber
	//
	//     - EXPRESSION: l_quantity
	//
	//       NAME: l_quantity
	//
	//     - EXPRESSION: l_extendedprice
	//
	//       NAME: l_extendedprice
	//
	//     - EXPRESSION: l_discount
	//
	//       NAME: l_discount
	//
	//     - EXPRESSION: l_tax
	//
	//       NAME: l_tax
	//
	//     - EXPRESSION: l_returnflag
	//
	//       NAME: l_returnflag
	//
	//     - EXPRESSION: l_linestatus
	//
	//       NAME: l_linestatus
	//
	//     - EXPRESSION: l_shipdate
	//
	//       NAME: l_shipdate
	//
	//     - EXPRESSION: l_commitdate
	//
	//       NAME: l_commitdate
	//
	//     - EXPRESSION: l_receiptdate
	//
	//       NAME: l_receiptdate
	//
	//     - EXPRESSION: l_shipinstruct
	//
	//       NAME: l_shipinstruct
	//
	//     - EXPRESSION: l_shipmode
	//
	//       NAME: l_shipmode
	//
	//     - EXPRESSION: l_comment
	//
	//       NAME: l_comment
	//
	//   COMMIT:
	//
	//     MAX_ROW: 1000
	//
	//     MINIMAL_INTERVAL: 1000
	//
	//     CONSISTENCY: ATLEAST
	//
	//   POLL:
	//
	//     BATCHSIZE: 1000
	//
	//     TIMEOUT: 1000
	//
	//   PROPERTIES:
	//
	//     group.id: testgroup
	JobConfig *string `json:"JobConfig,omitempty" xml:"JobConfig,omitempty"`
	// Job description.
	//
	// example:
	//
	// test_job
	JobDescription *string `json:"JobDescription,omitempty" xml:"JobDescription,omitempty"`
	// Job ID.
	//
	// example:
	//
	// 1
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// Job name.
	//
	// example:
	//
	// test-job
	JobName *string `json:"JobName,omitempty" xml:"JobName,omitempty"`
	// Match columns, usually all primary key columns of the target table. If all column values in this configuration are the same, the two rows of data are considered duplicates.
	MatchColumns []*string `json:"MatchColumns,omitempty" xml:"MatchColumns,omitempty" type:"Repeated"`
	// Configuration mode
	//
	// 1. Basic mode requires specifying some configuration fields
	//
	// 1. Professional mode supports submitting YAML files
	//
	// example:
	//
	// basic/professional
	Mode *string `json:"Mode,omitempty" xml:"Mode,omitempty"`
	// Last modified time.
	//
	// Use the UTC time format: yyyy-MM-ddTHH:mm:ssZ
	//
	// example:
	//
	// 2019-09-08T17:00:00Z
	ModifyTime *string `json:"ModifyTime,omitempty" xml:"ModifyTime,omitempty"`
	// Target database password.
	//
	// example:
	//
	// pwd123
	Password *string `json:"Password,omitempty" xml:"Password,omitempty"`
	// Request ID.
	//
	// example:
	//
	// B4CAF581-2AC7-41AD-8940-D56DF7AADF5B
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Source field list.
	SrcColumns []*string `json:"SrcColumns,omitempty" xml:"SrcColumns,omitempty" type:"Repeated"`
	// Service status, with possible values:
	//
	// - Init: Initializing
	//
	// - Running: Running
	//
	// - Exception: Exception
	//
	// - Paused: Paused
	//
	// example:
	//
	// Running
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// Update columns, usually all non-primary key columns of the target table. When data duplication is determined through MatchColumns, updating the UpdateColumns column values will result in new data overwriting old data.
	UpdateColumns []*string `json:"UpdateColumns,omitempty" xml:"UpdateColumns,omitempty" type:"Repeated"`
	// Write mode.
	//
	// example:
	//
	// INSERT/UPDATE/MERGE
	WriteMode *string `json:"WriteMode,omitempty" xml:"WriteMode,omitempty"`
}

func (s DescribeStreamingJobResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DescribeStreamingJobResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeStreamingJobResponseBody) GetAccount() *string {
	return s.Account
}

func (s *DescribeStreamingJobResponseBody) GetConsistency() *string {
	return s.Consistency
}

func (s *DescribeStreamingJobResponseBody) GetCreateTime() *string {
	return s.CreateTime
}

func (s *DescribeStreamingJobResponseBody) GetDataSourceId() *string {
	return s.DataSourceId
}

func (s *DescribeStreamingJobResponseBody) GetDataSourceName() *string {
	return s.DataSourceName
}

func (s *DescribeStreamingJobResponseBody) GetDestColumns() []*string {
	return s.DestColumns
}

func (s *DescribeStreamingJobResponseBody) GetDestDatabase() *string {
	return s.DestDatabase
}

func (s *DescribeStreamingJobResponseBody) GetDestSchema() *string {
	return s.DestSchema
}

func (s *DescribeStreamingJobResponseBody) GetDestTable() *string {
	return s.DestTable
}

func (s *DescribeStreamingJobResponseBody) GetErrorLimitCount() *int32 {
	return s.ErrorLimitCount
}

func (s *DescribeStreamingJobResponseBody) GetErrorMessage() *string {
	return s.ErrorMessage
}

func (s *DescribeStreamingJobResponseBody) GetFallbackOffset() *string {
	return s.FallbackOffset
}

func (s *DescribeStreamingJobResponseBody) GetGroupName() *string {
	return s.GroupName
}

func (s *DescribeStreamingJobResponseBody) GetJobConfig() *string {
	return s.JobConfig
}

func (s *DescribeStreamingJobResponseBody) GetJobDescription() *string {
	return s.JobDescription
}

func (s *DescribeStreamingJobResponseBody) GetJobId() *string {
	return s.JobId
}

func (s *DescribeStreamingJobResponseBody) GetJobName() *string {
	return s.JobName
}

func (s *DescribeStreamingJobResponseBody) GetMatchColumns() []*string {
	return s.MatchColumns
}

func (s *DescribeStreamingJobResponseBody) GetMode() *string {
	return s.Mode
}

func (s *DescribeStreamingJobResponseBody) GetModifyTime() *string {
	return s.ModifyTime
}

func (s *DescribeStreamingJobResponseBody) GetPassword() *string {
	return s.Password
}

func (s *DescribeStreamingJobResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DescribeStreamingJobResponseBody) GetSrcColumns() []*string {
	return s.SrcColumns
}

func (s *DescribeStreamingJobResponseBody) GetStatus() *string {
	return s.Status
}

func (s *DescribeStreamingJobResponseBody) GetUpdateColumns() []*string {
	return s.UpdateColumns
}

func (s *DescribeStreamingJobResponseBody) GetWriteMode() *string {
	return s.WriteMode
}

func (s *DescribeStreamingJobResponseBody) SetAccount(v string) *DescribeStreamingJobResponseBody {
	s.Account = &v
	return s
}

func (s *DescribeStreamingJobResponseBody) SetConsistency(v string) *DescribeStreamingJobResponseBody {
	s.Consistency = &v
	return s
}

func (s *DescribeStreamingJobResponseBody) SetCreateTime(v string) *DescribeStreamingJobResponseBody {
	s.CreateTime = &v
	return s
}

func (s *DescribeStreamingJobResponseBody) SetDataSourceId(v string) *DescribeStreamingJobResponseBody {
	s.DataSourceId = &v
	return s
}

func (s *DescribeStreamingJobResponseBody) SetDataSourceName(v string) *DescribeStreamingJobResponseBody {
	s.DataSourceName = &v
	return s
}

func (s *DescribeStreamingJobResponseBody) SetDestColumns(v []*string) *DescribeStreamingJobResponseBody {
	s.DestColumns = v
	return s
}

func (s *DescribeStreamingJobResponseBody) SetDestDatabase(v string) *DescribeStreamingJobResponseBody {
	s.DestDatabase = &v
	return s
}

func (s *DescribeStreamingJobResponseBody) SetDestSchema(v string) *DescribeStreamingJobResponseBody {
	s.DestSchema = &v
	return s
}

func (s *DescribeStreamingJobResponseBody) SetDestTable(v string) *DescribeStreamingJobResponseBody {
	s.DestTable = &v
	return s
}

func (s *DescribeStreamingJobResponseBody) SetErrorLimitCount(v int32) *DescribeStreamingJobResponseBody {
	s.ErrorLimitCount = &v
	return s
}

func (s *DescribeStreamingJobResponseBody) SetErrorMessage(v string) *DescribeStreamingJobResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *DescribeStreamingJobResponseBody) SetFallbackOffset(v string) *DescribeStreamingJobResponseBody {
	s.FallbackOffset = &v
	return s
}

func (s *DescribeStreamingJobResponseBody) SetGroupName(v string) *DescribeStreamingJobResponseBody {
	s.GroupName = &v
	return s
}

func (s *DescribeStreamingJobResponseBody) SetJobConfig(v string) *DescribeStreamingJobResponseBody {
	s.JobConfig = &v
	return s
}

func (s *DescribeStreamingJobResponseBody) SetJobDescription(v string) *DescribeStreamingJobResponseBody {
	s.JobDescription = &v
	return s
}

func (s *DescribeStreamingJobResponseBody) SetJobId(v string) *DescribeStreamingJobResponseBody {
	s.JobId = &v
	return s
}

func (s *DescribeStreamingJobResponseBody) SetJobName(v string) *DescribeStreamingJobResponseBody {
	s.JobName = &v
	return s
}

func (s *DescribeStreamingJobResponseBody) SetMatchColumns(v []*string) *DescribeStreamingJobResponseBody {
	s.MatchColumns = v
	return s
}

func (s *DescribeStreamingJobResponseBody) SetMode(v string) *DescribeStreamingJobResponseBody {
	s.Mode = &v
	return s
}

func (s *DescribeStreamingJobResponseBody) SetModifyTime(v string) *DescribeStreamingJobResponseBody {
	s.ModifyTime = &v
	return s
}

func (s *DescribeStreamingJobResponseBody) SetPassword(v string) *DescribeStreamingJobResponseBody {
	s.Password = &v
	return s
}

func (s *DescribeStreamingJobResponseBody) SetRequestId(v string) *DescribeStreamingJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeStreamingJobResponseBody) SetSrcColumns(v []*string) *DescribeStreamingJobResponseBody {
	s.SrcColumns = v
	return s
}

func (s *DescribeStreamingJobResponseBody) SetStatus(v string) *DescribeStreamingJobResponseBody {
	s.Status = &v
	return s
}

func (s *DescribeStreamingJobResponseBody) SetUpdateColumns(v []*string) *DescribeStreamingJobResponseBody {
	s.UpdateColumns = v
	return s
}

func (s *DescribeStreamingJobResponseBody) SetWriteMode(v string) *DescribeStreamingJobResponseBody {
	s.WriteMode = &v
	return s
}

func (s *DescribeStreamingJobResponseBody) Validate() error {
	return dara.Validate(s)
}

type iDescribeStreamingJobResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DescribeStreamingJobResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DescribeStreamingJobResponse
	GetStatusCode() *int32
	SetBody(v *DescribeStreamingJobResponseBody) *DescribeStreamingJobResponse
	GetBody() *DescribeStreamingJobResponseBody
}

type DescribeStreamingJobResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeStreamingJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeStreamingJobResponse) String() string {
	return dara.Prettify(s)
}

func (s DescribeStreamingJobResponse) GoString() string {
	return s.String()
}

func (s *DescribeStreamingJobResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DescribeStreamingJobResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DescribeStreamingJobResponse) GetBody() *DescribeStreamingJobResponseBody {
	return s.Body
}

func (s *DescribeStreamingJobResponse) SetHeaders(v map[string]*string) *DescribeStreamingJobResponse {
	s.Headers = v
	return s
}

func (s *DescribeStreamingJobResponse) SetStatusCode(v int32) *DescribeStreamingJobResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeStreamingJobResponse) SetBody(v *DescribeStreamingJobResponseBody) *DescribeStreamingJobResponse {
	s.Body = v
	return s
}

func (s *DescribeStreamingJobResponse) Validate() error {
	return dara.Validate(s)
}

type iDescribeSupportFeaturesRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *DescribeSupportFeaturesRequest
	GetDBInstanceId() *string
	SetOwnerId(v int64) *DescribeSupportFeaturesRequest
	GetOwnerId() *int64
}

type DescribeSupportFeaturesRequest struct {
	// The ID of the instance.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the instance IDs of all AnalyticDB for PostgreSQL instances in a specific region.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s DescribeSupportFeaturesRequest) String() string {
	return dara.Prettify(s)
}

func (s DescribeSupportFeaturesRequest) GoString() string {
	return s.String()
}

func (s *DescribeSupportFeaturesRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *DescribeSupportFeaturesRequest) GetOwnerId() *int64 {
	return s.OwnerId
}

func (s *DescribeSupportFeaturesRequest) SetDBInstanceId(v string) *DescribeSupportFeaturesRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeSupportFeaturesRequest) SetOwnerId(v int64) *DescribeSupportFeaturesRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeSupportFeaturesRequest) Validate() error {
	return dara.Validate(s)
}

type iDescribeSupportFeaturesResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *DescribeSupportFeaturesResponseBody
	GetDBInstanceId() *string
	SetRequestId(v string) *DescribeSupportFeaturesResponseBody
	GetRequestId() *string
	SetSupportFeatureList(v string) *DescribeSupportFeaturesResponseBody
	GetSupportFeatureList() *string
}

type DescribeSupportFeaturesResponseBody struct {
	// The ID of the instance.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 63E5BE60-91FF-57F1-B873-7F1EB734B93D_2724
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The features supported by the instance. Valid values:
	//
	// 	- sample_data: sample dataset. For more information, see [Sample dataset](https://help.aliyun.com/document_detail/452278.html).
	//
	// 	- diagnose_and_optimize: diagnostics and optimization. For more information, see [Diagnostics and optimization](https://help.aliyun.com/document_detail/323453.html).
	//
	// example:
	//
	// [ "sample_data", "diagnose_and_optimize" ]
	SupportFeatureList *string `json:"SupportFeatureList,omitempty" xml:"SupportFeatureList,omitempty"`
}

func (s DescribeSupportFeaturesResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DescribeSupportFeaturesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSupportFeaturesResponseBody) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *DescribeSupportFeaturesResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DescribeSupportFeaturesResponseBody) GetSupportFeatureList() *string {
	return s.SupportFeatureList
}

func (s *DescribeSupportFeaturesResponseBody) SetDBInstanceId(v string) *DescribeSupportFeaturesResponseBody {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeSupportFeaturesResponseBody) SetRequestId(v string) *DescribeSupportFeaturesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSupportFeaturesResponseBody) SetSupportFeatureList(v string) *DescribeSupportFeaturesResponseBody {
	s.SupportFeatureList = &v
	return s
}

func (s *DescribeSupportFeaturesResponseBody) Validate() error {
	return dara.Validate(s)
}

type iDescribeSupportFeaturesResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DescribeSupportFeaturesResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DescribeSupportFeaturesResponse
	GetStatusCode() *int32
	SetBody(v *DescribeSupportFeaturesResponseBody) *DescribeSupportFeaturesResponse
	GetBody() *DescribeSupportFeaturesResponseBody
}

type DescribeSupportFeaturesResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeSupportFeaturesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeSupportFeaturesResponse) String() string {
	return dara.Prettify(s)
}

func (s DescribeSupportFeaturesResponse) GoString() string {
	return s.String()
}

func (s *DescribeSupportFeaturesResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DescribeSupportFeaturesResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DescribeSupportFeaturesResponse) GetBody() *DescribeSupportFeaturesResponseBody {
	return s.Body
}

func (s *DescribeSupportFeaturesResponse) SetHeaders(v map[string]*string) *DescribeSupportFeaturesResponse {
	s.Headers = v
	return s
}

func (s *DescribeSupportFeaturesResponse) SetStatusCode(v int32) *DescribeSupportFeaturesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSupportFeaturesResponse) SetBody(v *DescribeSupportFeaturesResponseBody) *DescribeSupportFeaturesResponse {
	s.Body = v
	return s
}

func (s *DescribeSupportFeaturesResponse) Validate() error {
	return dara.Validate(s)
}

type iDescribeTableRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *DescribeTableRequest
	GetDBInstanceId() *string
	SetDatabase(v string) *DescribeTableRequest
	GetDatabase() *string
	SetOwnerId(v int64) *DescribeTableRequest
	GetOwnerId() *int64
	SetRegionId(v string) *DescribeTableRequest
	GetRegionId() *string
	SetSchema(v string) *DescribeTableRequest
	GetSchema() *string
	SetSecretArn(v string) *DescribeTableRequest
	GetSecretArn() *string
	SetTable(v string) *DescribeTableRequest
	GetTable() *string
	SetWorkspaceId(v string) *DescribeTableRequest
	GetWorkspaceId() *string
}

type DescribeTableRequest struct {
	// The instance ID.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The name of the database.
	//
	// This parameter is required.
	//
	// example:
	//
	// adbtest
	Database *string `json:"Database,omitempty" xml:"Database,omitempty"`
	OwnerId  *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The region ID of the instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-beijing
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The name of the schema to which the table belongs.
	//
	// This parameter is required.
	//
	// example:
	//
	// public
	Schema *string `json:"Schema,omitempty" xml:"Schema,omitempty"`
	// The Alibaba Cloud Resource Name (ARN) of the access credential for the created Data API account. You can call the CreateSecret operation to create an access credential.
	//
	// >  To call the DescribeTable operation as a Resource Access Management (RAM) user, the RAM user must have the permissions to call the UseSecret or GetSecretValue operation on the ARN of the access credential.
	//
	// This parameter is required.
	//
	// example:
	//
	// acs:gpdb:cn-beijing:1033**:secret/testsecret-eG2AQGRIwQ0zFp4VA7mYL3uiCXTfDQbQ
	SecretArn *string `json:"SecretArn,omitempty" xml:"SecretArn,omitempty"`
	// The name of the table.
	//
	// This parameter is required.
	//
	// example:
	//
	// mytable
	Table       *string `json:"Table,omitempty" xml:"Table,omitempty"`
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s DescribeTableRequest) String() string {
	return dara.Prettify(s)
}

func (s DescribeTableRequest) GoString() string {
	return s.String()
}

func (s *DescribeTableRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *DescribeTableRequest) GetDatabase() *string {
	return s.Database
}

func (s *DescribeTableRequest) GetOwnerId() *int64 {
	return s.OwnerId
}

func (s *DescribeTableRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *DescribeTableRequest) GetSchema() *string {
	return s.Schema
}

func (s *DescribeTableRequest) GetSecretArn() *string {
	return s.SecretArn
}

func (s *DescribeTableRequest) GetTable() *string {
	return s.Table
}

func (s *DescribeTableRequest) GetWorkspaceId() *string {
	return s.WorkspaceId
}

func (s *DescribeTableRequest) SetDBInstanceId(v string) *DescribeTableRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeTableRequest) SetDatabase(v string) *DescribeTableRequest {
	s.Database = &v
	return s
}

func (s *DescribeTableRequest) SetOwnerId(v int64) *DescribeTableRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeTableRequest) SetRegionId(v string) *DescribeTableRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeTableRequest) SetSchema(v string) *DescribeTableRequest {
	s.Schema = &v
	return s
}

func (s *DescribeTableRequest) SetSecretArn(v string) *DescribeTableRequest {
	s.SecretArn = &v
	return s
}

func (s *DescribeTableRequest) SetTable(v string) *DescribeTableRequest {
	s.Table = &v
	return s
}

func (s *DescribeTableRequest) SetWorkspaceId(v string) *DescribeTableRequest {
	s.WorkspaceId = &v
	return s
}

func (s *DescribeTableRequest) Validate() error {
	return dara.Validate(s)
}

type iDescribeTableResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetColumnList(v *DescribeTableResponseBodyColumnList) *DescribeTableResponseBody
	GetColumnList() *DescribeTableResponseBodyColumnList
	SetMessage(v string) *DescribeTableResponseBody
	GetMessage() *string
	SetRequestId(v string) *DescribeTableResponseBody
	GetRequestId() *string
	SetStatus(v string) *DescribeTableResponseBody
	GetStatus() *string
}

type DescribeTableResponseBody struct {
	// The columns of the table.
	ColumnList *DescribeTableResponseBodyColumnList `json:"ColumnList,omitempty" xml:"ColumnList,omitempty" type:"Struct"`
	// The returned message.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The status of the operation. Valid values:
	//
	// 	- **success**
	//
	// 	- **fail**
	//
	// example:
	//
	// success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeTableResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DescribeTableResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeTableResponseBody) GetColumnList() *DescribeTableResponseBodyColumnList {
	return s.ColumnList
}

func (s *DescribeTableResponseBody) GetMessage() *string {
	return s.Message
}

func (s *DescribeTableResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DescribeTableResponseBody) GetStatus() *string {
	return s.Status
}

func (s *DescribeTableResponseBody) SetColumnList(v *DescribeTableResponseBodyColumnList) *DescribeTableResponseBody {
	s.ColumnList = v
	return s
}

func (s *DescribeTableResponseBody) SetMessage(v string) *DescribeTableResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeTableResponseBody) SetRequestId(v string) *DescribeTableResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeTableResponseBody) SetStatus(v string) *DescribeTableResponseBody {
	s.Status = &v
	return s
}

func (s *DescribeTableResponseBody) Validate() error {
	return dara.Validate(s)
}

type DescribeTableResponseBodyColumnList struct {
	ColumnList []*ColumnMetadata `json:"ColumnList,omitempty" xml:"ColumnList,omitempty" type:"Repeated"`
}

func (s DescribeTableResponseBodyColumnList) String() string {
	return dara.Prettify(s)
}

func (s DescribeTableResponseBodyColumnList) GoString() string {
	return s.String()
}

func (s *DescribeTableResponseBodyColumnList) GetColumnList() []*ColumnMetadata {
	return s.ColumnList
}

func (s *DescribeTableResponseBodyColumnList) SetColumnList(v []*ColumnMetadata) *DescribeTableResponseBodyColumnList {
	s.ColumnList = v
	return s
}

func (s *DescribeTableResponseBodyColumnList) Validate() error {
	return dara.Validate(s)
}

type iDescribeTableResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DescribeTableResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DescribeTableResponse
	GetStatusCode() *int32
	SetBody(v *DescribeTableResponseBody) *DescribeTableResponse
	GetBody() *DescribeTableResponseBody
}

type DescribeTableResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeTableResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeTableResponse) String() string {
	return dara.Prettify(s)
}

func (s DescribeTableResponse) GoString() string {
	return s.String()
}

func (s *DescribeTableResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DescribeTableResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DescribeTableResponse) GetBody() *DescribeTableResponseBody {
	return s.Body
}

func (s *DescribeTableResponse) SetHeaders(v map[string]*string) *DescribeTableResponse {
	s.Headers = v
	return s
}

func (s *DescribeTableResponse) SetStatusCode(v int32) *DescribeTableResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeTableResponse) SetBody(v *DescribeTableResponseBody) *DescribeTableResponse {
	s.Body = v
	return s
}

func (s *DescribeTableResponse) Validate() error {
	return dara.Validate(s)
}

type iDescribeTagsRequest interface {
	dara.Model
	String() string
	GoString() string
	SetOwnerAccount(v string) *DescribeTagsRequest
	GetOwnerAccount() *string
	SetOwnerId(v int64) *DescribeTagsRequest
	GetOwnerId() *int64
	SetRegionId(v string) *DescribeTagsRequest
	GetRegionId() *string
	SetResourceGroupId(v string) *DescribeTagsRequest
	GetResourceGroupId() *string
	SetResourceOwnerAccount(v string) *DescribeTagsRequest
	GetResourceOwnerAccount() *string
	SetResourceOwnerId(v int64) *DescribeTagsRequest
	GetResourceOwnerId() *int64
	SetResourceType(v string) *DescribeTagsRequest
	GetResourceType() *string
}

type DescribeTagsRequest struct {
	OwnerAccount *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The ID of the region.
	//
	// >  You can call the [DescribeRegions](https://help.aliyun.com/document_detail/86912.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// This parameter is no longer used.
	//
	// example:
	//
	// rg-bp67acfmxazb4p****
	ResourceGroupId      *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	// The type of the resource. Set the value to **instance**.
	//
	// This parameter is required.
	//
	// example:
	//
	// instance
	ResourceType *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
}

func (s DescribeTagsRequest) String() string {
	return dara.Prettify(s)
}

func (s DescribeTagsRequest) GoString() string {
	return s.String()
}

func (s *DescribeTagsRequest) GetOwnerAccount() *string {
	return s.OwnerAccount
}

func (s *DescribeTagsRequest) GetOwnerId() *int64 {
	return s.OwnerId
}

func (s *DescribeTagsRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *DescribeTagsRequest) GetResourceGroupId() *string {
	return s.ResourceGroupId
}

func (s *DescribeTagsRequest) GetResourceOwnerAccount() *string {
	return s.ResourceOwnerAccount
}

func (s *DescribeTagsRequest) GetResourceOwnerId() *int64 {
	return s.ResourceOwnerId
}

func (s *DescribeTagsRequest) GetResourceType() *string {
	return s.ResourceType
}

func (s *DescribeTagsRequest) SetOwnerAccount(v string) *DescribeTagsRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeTagsRequest) SetOwnerId(v int64) *DescribeTagsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeTagsRequest) SetRegionId(v string) *DescribeTagsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeTagsRequest) SetResourceGroupId(v string) *DescribeTagsRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeTagsRequest) SetResourceOwnerAccount(v string) *DescribeTagsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeTagsRequest) SetResourceOwnerId(v int64) *DescribeTagsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeTagsRequest) SetResourceType(v string) *DescribeTagsRequest {
	s.ResourceType = &v
	return s
}

func (s *DescribeTagsRequest) Validate() error {
	return dara.Validate(s)
}

type iDescribeTagsResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetRequestId(v string) *DescribeTagsResponseBody
	GetRequestId() *string
	SetTags(v []*DescribeTagsResponseBodyTags) *DescribeTagsResponseBody
	GetTags() []*DescribeTagsResponseBodyTags
}

type DescribeTagsResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// A29EC547-B392-4340-AA4F-7C0A7B626E74
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The queried tags.
	Tags []*DescribeTagsResponseBodyTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
}

func (s DescribeTagsResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DescribeTagsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeTagsResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DescribeTagsResponseBody) GetTags() []*DescribeTagsResponseBodyTags {
	return s.Tags
}

func (s *DescribeTagsResponseBody) SetRequestId(v string) *DescribeTagsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeTagsResponseBody) SetTags(v []*DescribeTagsResponseBodyTags) *DescribeTagsResponseBody {
	s.Tags = v
	return s
}

func (s *DescribeTagsResponseBody) Validate() error {
	return dara.Validate(s)
}

type DescribeTagsResponseBodyTags struct {
	// The tag key.
	//
	// example:
	//
	// user
	TagKey *string `json:"TagKey,omitempty" xml:"TagKey,omitempty"`
	// The tag value.
	//
	// example:
	//
	// test
	TagValue *string `json:"TagValue,omitempty" xml:"TagValue,omitempty"`
}

func (s DescribeTagsResponseBodyTags) String() string {
	return dara.Prettify(s)
}

func (s DescribeTagsResponseBodyTags) GoString() string {
	return s.String()
}

func (s *DescribeTagsResponseBodyTags) GetTagKey() *string {
	return s.TagKey
}

func (s *DescribeTagsResponseBodyTags) GetTagValue() *string {
	return s.TagValue
}

func (s *DescribeTagsResponseBodyTags) SetTagKey(v string) *DescribeTagsResponseBodyTags {
	s.TagKey = &v
	return s
}

func (s *DescribeTagsResponseBodyTags) SetTagValue(v string) *DescribeTagsResponseBodyTags {
	s.TagValue = &v
	return s
}

func (s *DescribeTagsResponseBodyTags) Validate() error {
	return dara.Validate(s)
}

type iDescribeTagsResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DescribeTagsResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DescribeTagsResponse
	GetStatusCode() *int32
	SetBody(v *DescribeTagsResponseBody) *DescribeTagsResponse
	GetBody() *DescribeTagsResponseBody
}

type DescribeTagsResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeTagsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeTagsResponse) String() string {
	return dara.Prettify(s)
}

func (s DescribeTagsResponse) GoString() string {
	return s.String()
}

func (s *DescribeTagsResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DescribeTagsResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DescribeTagsResponse) GetBody() *DescribeTagsResponseBody {
	return s.Body
}

func (s *DescribeTagsResponse) SetHeaders(v map[string]*string) *DescribeTagsResponse {
	s.Headers = v
	return s
}

func (s *DescribeTagsResponse) SetStatusCode(v int32) *DescribeTagsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeTagsResponse) SetBody(v *DescribeTagsResponseBody) *DescribeTagsResponse {
	s.Body = v
	return s
}

func (s *DescribeTagsResponse) Validate() error {
	return dara.Validate(s)
}

type iDescribeUserEncryptionKeyListRequest interface {
	dara.Model
	String() string
	GoString() string
	SetPageNumber(v string) *DescribeUserEncryptionKeyListRequest
	GetPageNumber() *string
	SetPageSize(v string) *DescribeUserEncryptionKeyListRequest
	GetPageSize() *string
	SetRegionId(v string) *DescribeUserEncryptionKeyListRequest
	GetRegionId() *string
}

type DescribeUserEncryptionKeyListRequest struct {
	// The number of the page to return. Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *string `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of KMS keys to return on each page. Default value: 10.
	//
	// example:
	//
	// 10
	PageSize *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the region.
	//
	// This parameter is required.
	//
	// example:
	//
	// ap-southeast-1
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeUserEncryptionKeyListRequest) String() string {
	return dara.Prettify(s)
}

func (s DescribeUserEncryptionKeyListRequest) GoString() string {
	return s.String()
}

func (s *DescribeUserEncryptionKeyListRequest) GetPageNumber() *string {
	return s.PageNumber
}

func (s *DescribeUserEncryptionKeyListRequest) GetPageSize() *string {
	return s.PageSize
}

func (s *DescribeUserEncryptionKeyListRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *DescribeUserEncryptionKeyListRequest) SetPageNumber(v string) *DescribeUserEncryptionKeyListRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeUserEncryptionKeyListRequest) SetPageSize(v string) *DescribeUserEncryptionKeyListRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeUserEncryptionKeyListRequest) SetRegionId(v string) *DescribeUserEncryptionKeyListRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeUserEncryptionKeyListRequest) Validate() error {
	return dara.Validate(s)
}

type iDescribeUserEncryptionKeyListResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetKmsKeys(v []*DescribeUserEncryptionKeyListResponseBodyKmsKeys) *DescribeUserEncryptionKeyListResponseBody
	GetKmsKeys() []*DescribeUserEncryptionKeyListResponseBodyKmsKeys
	SetRequestId(v string) *DescribeUserEncryptionKeyListResponseBody
	GetRequestId() *string
}

type DescribeUserEncryptionKeyListResponseBody struct {
	// Details about the KMS keys.
	KmsKeys []*DescribeUserEncryptionKeyListResponseBodyKmsKeys `json:"KmsKeys,omitempty" xml:"KmsKeys,omitempty" type:"Repeated"`
	// The ID of the request.
	//
	// example:
	//
	// B4CAF581-2AC7-41AD-8940-D56DF7AADF5B
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeUserEncryptionKeyListResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DescribeUserEncryptionKeyListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeUserEncryptionKeyListResponseBody) GetKmsKeys() []*DescribeUserEncryptionKeyListResponseBodyKmsKeys {
	return s.KmsKeys
}

func (s *DescribeUserEncryptionKeyListResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DescribeUserEncryptionKeyListResponseBody) SetKmsKeys(v []*DescribeUserEncryptionKeyListResponseBodyKmsKeys) *DescribeUserEncryptionKeyListResponseBody {
	s.KmsKeys = v
	return s
}

func (s *DescribeUserEncryptionKeyListResponseBody) SetRequestId(v string) *DescribeUserEncryptionKeyListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeUserEncryptionKeyListResponseBody) Validate() error {
	return dara.Validate(s)
}

type DescribeUserEncryptionKeyListResponseBodyKmsKeys struct {
	// The ID of the KMS key.
	//
	// example:
	//
	// 0b8b1825-fd99-418f-875e-e4dec1dd8715
	KeyId *string `json:"KeyId,omitempty" xml:"KeyId,omitempty"`
}

func (s DescribeUserEncryptionKeyListResponseBodyKmsKeys) String() string {
	return dara.Prettify(s)
}

func (s DescribeUserEncryptionKeyListResponseBodyKmsKeys) GoString() string {
	return s.String()
}

func (s *DescribeUserEncryptionKeyListResponseBodyKmsKeys) GetKeyId() *string {
	return s.KeyId
}

func (s *DescribeUserEncryptionKeyListResponseBodyKmsKeys) SetKeyId(v string) *DescribeUserEncryptionKeyListResponseBodyKmsKeys {
	s.KeyId = &v
	return s
}

func (s *DescribeUserEncryptionKeyListResponseBodyKmsKeys) Validate() error {
	return dara.Validate(s)
}

type iDescribeUserEncryptionKeyListResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DescribeUserEncryptionKeyListResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DescribeUserEncryptionKeyListResponse
	GetStatusCode() *int32
	SetBody(v *DescribeUserEncryptionKeyListResponseBody) *DescribeUserEncryptionKeyListResponse
	GetBody() *DescribeUserEncryptionKeyListResponseBody
}

type DescribeUserEncryptionKeyListResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeUserEncryptionKeyListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeUserEncryptionKeyListResponse) String() string {
	return dara.Prettify(s)
}

func (s DescribeUserEncryptionKeyListResponse) GoString() string {
	return s.String()
}

func (s *DescribeUserEncryptionKeyListResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DescribeUserEncryptionKeyListResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DescribeUserEncryptionKeyListResponse) GetBody() *DescribeUserEncryptionKeyListResponseBody {
	return s.Body
}

func (s *DescribeUserEncryptionKeyListResponse) SetHeaders(v map[string]*string) *DescribeUserEncryptionKeyListResponse {
	s.Headers = v
	return s
}

func (s *DescribeUserEncryptionKeyListResponse) SetStatusCode(v int32) *DescribeUserEncryptionKeyListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeUserEncryptionKeyListResponse) SetBody(v *DescribeUserEncryptionKeyListResponseBody) *DescribeUserEncryptionKeyListResponse {
	s.Body = v
	return s
}

func (s *DescribeUserEncryptionKeyListResponse) Validate() error {
	return dara.Validate(s)
}

type iDescribeWaitingSQLInfoRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *DescribeWaitingSQLInfoRequest
	GetDBInstanceId() *string
	SetDatabase(v string) *DescribeWaitingSQLInfoRequest
	GetDatabase() *string
	SetPID(v string) *DescribeWaitingSQLInfoRequest
	GetPID() *string
}

type DescribeWaitingSQLInfoRequest struct {
	// The ID of the instance.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the instance IDs of all AnalyticDB for PostgreSQL instances in a specific region.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The name of the database.
	//
	// This parameter is required.
	//
	// example:
	//
	// test
	Database *string `json:"Database,omitempty" xml:"Database,omitempty"`
	// The ID of the process that uniquely identifies the query.
	//
	// >  You can call the [DescribeWaitingSQLRecords](https://help.aliyun.com/document_detail/461735.html) operation to obtain the process IDs of lock-waiting queries.
	//
	// This parameter is required.
	//
	// example:
	//
	// 100
	PID *string `json:"PID,omitempty" xml:"PID,omitempty"`
}

func (s DescribeWaitingSQLInfoRequest) String() string {
	return dara.Prettify(s)
}

func (s DescribeWaitingSQLInfoRequest) GoString() string {
	return s.String()
}

func (s *DescribeWaitingSQLInfoRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *DescribeWaitingSQLInfoRequest) GetDatabase() *string {
	return s.Database
}

func (s *DescribeWaitingSQLInfoRequest) GetPID() *string {
	return s.PID
}

func (s *DescribeWaitingSQLInfoRequest) SetDBInstanceId(v string) *DescribeWaitingSQLInfoRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeWaitingSQLInfoRequest) SetDatabase(v string) *DescribeWaitingSQLInfoRequest {
	s.Database = &v
	return s
}

func (s *DescribeWaitingSQLInfoRequest) SetPID(v string) *DescribeWaitingSQLInfoRequest {
	s.PID = &v
	return s
}

func (s *DescribeWaitingSQLInfoRequest) Validate() error {
	return dara.Validate(s)
}

type iDescribeWaitingSQLInfoResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetDatabase(v string) *DescribeWaitingSQLInfoResponseBody
	GetDatabase() *string
	SetItems(v []*DescribeWaitingSQLInfoResponseBodyItems) *DescribeWaitingSQLInfoResponseBody
	GetItems() []*DescribeWaitingSQLInfoResponseBodyItems
	SetRequestId(v string) *DescribeWaitingSQLInfoResponseBody
	GetRequestId() *string
}

type DescribeWaitingSQLInfoResponseBody struct {
	// The name of the database.
	//
	// example:
	//
	// test
	Database *string `json:"Database,omitempty" xml:"Database,omitempty"`
	// The queried lock-waiting query.
	Items []*DescribeWaitingSQLInfoResponseBodyItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Repeated"`
	// The ID of the request.
	//
	// example:
	//
	// B4CAF581-2AC7-41AD-8940-D56DF7AADF5B
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeWaitingSQLInfoResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DescribeWaitingSQLInfoResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeWaitingSQLInfoResponseBody) GetDatabase() *string {
	return s.Database
}

func (s *DescribeWaitingSQLInfoResponseBody) GetItems() []*DescribeWaitingSQLInfoResponseBodyItems {
	return s.Items
}

func (s *DescribeWaitingSQLInfoResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DescribeWaitingSQLInfoResponseBody) SetDatabase(v string) *DescribeWaitingSQLInfoResponseBody {
	s.Database = &v
	return s
}

func (s *DescribeWaitingSQLInfoResponseBody) SetItems(v []*DescribeWaitingSQLInfoResponseBodyItems) *DescribeWaitingSQLInfoResponseBody {
	s.Items = v
	return s
}

func (s *DescribeWaitingSQLInfoResponseBody) SetRequestId(v string) *DescribeWaitingSQLInfoResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeWaitingSQLInfoResponseBody) Validate() error {
	return dara.Validate(s)
}

type DescribeWaitingSQLInfoResponseBodyItems struct {
	// The application that sent the query.
	//
	// example:
	//
	// DataGrip 2022.1.5
	Application *string `json:"Application,omitempty" xml:"Application,omitempty"`
	// The application that sent the blocking query.
	//
	// example:
	//
	// DataGrip 2022.1.5
	BlockedByApplication *string `json:"BlockedByApplication,omitempty" xml:"BlockedByApplication,omitempty"`
	// The process ID of the blocking query.
	//
	// example:
	//
	// 110
	BlockedByPID *string `json:"BlockedByPID,omitempty" xml:"BlockedByPID,omitempty"`
	// The SQL statement of the blocking query.
	//
	// example:
	//
	// Select 	- from t1;
	BlockedBySQLStmt *string `json:"BlockedBySQLStmt,omitempty" xml:"BlockedBySQLStmt,omitempty"`
	// The database account that is used to perform the blocking query.
	//
	// example:
	//
	// testUser1
	BlockedByUser *string `json:"BlockedByUser,omitempty" xml:"BlockedByUser,omitempty"`
	// The authorized locks.
	//
	// example:
	//
	// ShareLock,AccessExclusiveLock
	GrantLocks *string `json:"GrantLocks,omitempty" xml:"GrantLocks,omitempty"`
	// The unauthorized locks.
	//
	// example:
	//
	// AccessShareLock
	NotGrantLocks *string `json:"NotGrantLocks,omitempty" xml:"NotGrantLocks,omitempty"`
	// The ID of the process that uniquely identifies the query.
	//
	// example:
	//
	// 100
	PID *string `json:"PID,omitempty" xml:"PID,omitempty"`
	// The SQL statement of the query.
	//
	// example:
	//
	// Select 	- from t1,t2 where t1.id=t2.id;
	SQLStmt *string `json:"SQLStmt,omitempty" xml:"SQLStmt,omitempty"`
	// The database account that is used to perform the query.
	//
	// example:
	//
	// testUser
	User *string `json:"User,omitempty" xml:"User,omitempty"`
}

func (s DescribeWaitingSQLInfoResponseBodyItems) String() string {
	return dara.Prettify(s)
}

func (s DescribeWaitingSQLInfoResponseBodyItems) GoString() string {
	return s.String()
}

func (s *DescribeWaitingSQLInfoResponseBodyItems) GetApplication() *string {
	return s.Application
}

func (s *DescribeWaitingSQLInfoResponseBodyItems) GetBlockedByApplication() *string {
	return s.BlockedByApplication
}

func (s *DescribeWaitingSQLInfoResponseBodyItems) GetBlockedByPID() *string {
	return s.BlockedByPID
}

func (s *DescribeWaitingSQLInfoResponseBodyItems) GetBlockedBySQLStmt() *string {
	return s.BlockedBySQLStmt
}

func (s *DescribeWaitingSQLInfoResponseBodyItems) GetBlockedByUser() *string {
	return s.BlockedByUser
}

func (s *DescribeWaitingSQLInfoResponseBodyItems) GetGrantLocks() *string {
	return s.GrantLocks
}

func (s *DescribeWaitingSQLInfoResponseBodyItems) GetNotGrantLocks() *string {
	return s.NotGrantLocks
}

func (s *DescribeWaitingSQLInfoResponseBodyItems) GetPID() *string {
	return s.PID
}

func (s *DescribeWaitingSQLInfoResponseBodyItems) GetSQLStmt() *string {
	return s.SQLStmt
}

func (s *DescribeWaitingSQLInfoResponseBodyItems) GetUser() *string {
	return s.User
}

func (s *DescribeWaitingSQLInfoResponseBodyItems) SetApplication(v string) *DescribeWaitingSQLInfoResponseBodyItems {
	s.Application = &v
	return s
}

func (s *DescribeWaitingSQLInfoResponseBodyItems) SetBlockedByApplication(v string) *DescribeWaitingSQLInfoResponseBodyItems {
	s.BlockedByApplication = &v
	return s
}

func (s *DescribeWaitingSQLInfoResponseBodyItems) SetBlockedByPID(v string) *DescribeWaitingSQLInfoResponseBodyItems {
	s.BlockedByPID = &v
	return s
}

func (s *DescribeWaitingSQLInfoResponseBodyItems) SetBlockedBySQLStmt(v string) *DescribeWaitingSQLInfoResponseBodyItems {
	s.BlockedBySQLStmt = &v
	return s
}

func (s *DescribeWaitingSQLInfoResponseBodyItems) SetBlockedByUser(v string) *DescribeWaitingSQLInfoResponseBodyItems {
	s.BlockedByUser = &v
	return s
}

func (s *DescribeWaitingSQLInfoResponseBodyItems) SetGrantLocks(v string) *DescribeWaitingSQLInfoResponseBodyItems {
	s.GrantLocks = &v
	return s
}

func (s *DescribeWaitingSQLInfoResponseBodyItems) SetNotGrantLocks(v string) *DescribeWaitingSQLInfoResponseBodyItems {
	s.NotGrantLocks = &v
	return s
}

func (s *DescribeWaitingSQLInfoResponseBodyItems) SetPID(v string) *DescribeWaitingSQLInfoResponseBodyItems {
	s.PID = &v
	return s
}

func (s *DescribeWaitingSQLInfoResponseBodyItems) SetSQLStmt(v string) *DescribeWaitingSQLInfoResponseBodyItems {
	s.SQLStmt = &v
	return s
}

func (s *DescribeWaitingSQLInfoResponseBodyItems) SetUser(v string) *DescribeWaitingSQLInfoResponseBodyItems {
	s.User = &v
	return s
}

func (s *DescribeWaitingSQLInfoResponseBodyItems) Validate() error {
	return dara.Validate(s)
}

type iDescribeWaitingSQLInfoResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DescribeWaitingSQLInfoResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DescribeWaitingSQLInfoResponse
	GetStatusCode() *int32
	SetBody(v *DescribeWaitingSQLInfoResponseBody) *DescribeWaitingSQLInfoResponse
	GetBody() *DescribeWaitingSQLInfoResponseBody
}

type DescribeWaitingSQLInfoResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeWaitingSQLInfoResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeWaitingSQLInfoResponse) String() string {
	return dara.Prettify(s)
}

func (s DescribeWaitingSQLInfoResponse) GoString() string {
	return s.String()
}

func (s *DescribeWaitingSQLInfoResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DescribeWaitingSQLInfoResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DescribeWaitingSQLInfoResponse) GetBody() *DescribeWaitingSQLInfoResponseBody {
	return s.Body
}

func (s *DescribeWaitingSQLInfoResponse) SetHeaders(v map[string]*string) *DescribeWaitingSQLInfoResponse {
	s.Headers = v
	return s
}

func (s *DescribeWaitingSQLInfoResponse) SetStatusCode(v int32) *DescribeWaitingSQLInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeWaitingSQLInfoResponse) SetBody(v *DescribeWaitingSQLInfoResponseBody) *DescribeWaitingSQLInfoResponse {
	s.Body = v
	return s
}

func (s *DescribeWaitingSQLInfoResponse) Validate() error {
	return dara.Validate(s)
}

type iDescribeWaitingSQLRecordsRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *DescribeWaitingSQLRecordsRequest
	GetDBInstanceId() *string
	SetDatabase(v string) *DescribeWaitingSQLRecordsRequest
	GetDatabase() *string
	SetEndTime(v string) *DescribeWaitingSQLRecordsRequest
	GetEndTime() *string
	SetKeyword(v string) *DescribeWaitingSQLRecordsRequest
	GetKeyword() *string
	SetOrder(v string) *DescribeWaitingSQLRecordsRequest
	GetOrder() *string
	SetPageNumber(v int32) *DescribeWaitingSQLRecordsRequest
	GetPageNumber() *int32
	SetPageSize(v int32) *DescribeWaitingSQLRecordsRequest
	GetPageSize() *int32
	SetQueryCondition(v string) *DescribeWaitingSQLRecordsRequest
	GetQueryCondition() *string
	SetStartTime(v string) *DescribeWaitingSQLRecordsRequest
	GetStartTime() *string
	SetUser(v string) *DescribeWaitingSQLRecordsRequest
	GetUser() *string
}

type DescribeWaitingSQLRecordsRequest struct {
	// The ID of the instance.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the instance IDs of all AnalyticDB for PostgreSQL instances in a specific region.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The name of the database.
	//
	// This parameter is required.
	//
	// example:
	//
	// test
	Database *string `json:"Database,omitempty" xml:"Database,omitempty"`
	// The end of the time range to query. Specify the time in the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm*Z format. The time must be in UTC. The end time must be later than the start time.
	//
	// If this parameter is not specified, all lock diagnostics records that are generated after the query start time are returned. If the query start time is not specified either, all lock diagnostics records are returned.
	//
	// example:
	//
	// 2022-08-20T07:59Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The keyword used to filter queries.
	//
	// example:
	//
	// table
	Keyword *string `json:"Keyword,omitempty" xml:"Keyword,omitempty"`
	// The field used to sort lock diagnostics records and the sorting order.
	//
	// Default value: `{"Field":"StartTime","Type":"Desc"}`, which indicates that lock diagnostics records are sorted by the start time in descending order. No other values are supported.
	//
	// example:
	//
	// {"Field":"StartTime","Type":"Desc"}
	Order *string `json:"Order,omitempty" xml:"Order,omitempty"`
	// The number of the page to return. The value must be an integer that is greater than 0. Default value: **1**.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries to return on each page. Valid values:
	//
	// 	- **30**
	//
	// 	- **50**
	//
	// 	- **100**
	//
	// Default value: **30**.
	//
	// example:
	//
	// 30
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The filter condition on queries. Valid values:
	//
	// 	- `{"Type":"maxCost","Value":"10"}`: filters the top 10 longest-waiting queries.
	//
	// 	- `{"Type":"status","Value":"LockWaiting"}`: filters lock-waiting queries.
	//
	// 	- `{"Type":"status","Value":"ResourceWaiting"}`: filters resource-waiting queries.
	//
	// This parameter is required.
	//
	// example:
	//
	// {"Type":"maxCost","Value":"10"}
	QueryCondition *string `json:"QueryCondition,omitempty" xml:"QueryCondition,omitempty"`
	// The beginning of the time range to query. Specify the time in the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm*Z format. The time must be in UTC.
	//
	// If this parameter is not specified, all lock diagnostics records that are generated before the query end time are returned. If the query end time is not specified either, all lock diagnostics records are returned.
	//
	// example:
	//
	// 2022-08-15T06:59Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The name of the database account. If this parameter is not specified, the lock diagnostics records of all database accounts are queried.
	//
	// example:
	//
	// testUser
	User *string `json:"User,omitempty" xml:"User,omitempty"`
}

func (s DescribeWaitingSQLRecordsRequest) String() string {
	return dara.Prettify(s)
}

func (s DescribeWaitingSQLRecordsRequest) GoString() string {
	return s.String()
}

func (s *DescribeWaitingSQLRecordsRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *DescribeWaitingSQLRecordsRequest) GetDatabase() *string {
	return s.Database
}

func (s *DescribeWaitingSQLRecordsRequest) GetEndTime() *string {
	return s.EndTime
}

func (s *DescribeWaitingSQLRecordsRequest) GetKeyword() *string {
	return s.Keyword
}

func (s *DescribeWaitingSQLRecordsRequest) GetOrder() *string {
	return s.Order
}

func (s *DescribeWaitingSQLRecordsRequest) GetPageNumber() *int32 {
	return s.PageNumber
}

func (s *DescribeWaitingSQLRecordsRequest) GetPageSize() *int32 {
	return s.PageSize
}

func (s *DescribeWaitingSQLRecordsRequest) GetQueryCondition() *string {
	return s.QueryCondition
}

func (s *DescribeWaitingSQLRecordsRequest) GetStartTime() *string {
	return s.StartTime
}

func (s *DescribeWaitingSQLRecordsRequest) GetUser() *string {
	return s.User
}

func (s *DescribeWaitingSQLRecordsRequest) SetDBInstanceId(v string) *DescribeWaitingSQLRecordsRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeWaitingSQLRecordsRequest) SetDatabase(v string) *DescribeWaitingSQLRecordsRequest {
	s.Database = &v
	return s
}

func (s *DescribeWaitingSQLRecordsRequest) SetEndTime(v string) *DescribeWaitingSQLRecordsRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeWaitingSQLRecordsRequest) SetKeyword(v string) *DescribeWaitingSQLRecordsRequest {
	s.Keyword = &v
	return s
}

func (s *DescribeWaitingSQLRecordsRequest) SetOrder(v string) *DescribeWaitingSQLRecordsRequest {
	s.Order = &v
	return s
}

func (s *DescribeWaitingSQLRecordsRequest) SetPageNumber(v int32) *DescribeWaitingSQLRecordsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeWaitingSQLRecordsRequest) SetPageSize(v int32) *DescribeWaitingSQLRecordsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeWaitingSQLRecordsRequest) SetQueryCondition(v string) *DescribeWaitingSQLRecordsRequest {
	s.QueryCondition = &v
	return s
}

func (s *DescribeWaitingSQLRecordsRequest) SetStartTime(v string) *DescribeWaitingSQLRecordsRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeWaitingSQLRecordsRequest) SetUser(v string) *DescribeWaitingSQLRecordsRequest {
	s.User = &v
	return s
}

func (s *DescribeWaitingSQLRecordsRequest) Validate() error {
	return dara.Validate(s)
}

type iDescribeWaitingSQLRecordsResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetItems(v []*DescribeWaitingSQLRecordsResponseBodyItems) *DescribeWaitingSQLRecordsResponseBody
	GetItems() []*DescribeWaitingSQLRecordsResponseBodyItems
	SetPageNumber(v int32) *DescribeWaitingSQLRecordsResponseBody
	GetPageNumber() *int32
	SetRequestId(v string) *DescribeWaitingSQLRecordsResponseBody
	GetRequestId() *string
	SetTotalCount(v int32) *DescribeWaitingSQLRecordsResponseBody
	GetTotalCount() *int32
}

type DescribeWaitingSQLRecordsResponseBody struct {
	// The list of lock diagnostics records.
	Items []*DescribeWaitingSQLRecordsResponseBodyItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Repeated"`
	// The page number of the returned page.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// B4CAF581-2AC7-41AD-8940-D56DF7AADF5B
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 1
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeWaitingSQLRecordsResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DescribeWaitingSQLRecordsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeWaitingSQLRecordsResponseBody) GetItems() []*DescribeWaitingSQLRecordsResponseBodyItems {
	return s.Items
}

func (s *DescribeWaitingSQLRecordsResponseBody) GetPageNumber() *int32 {
	return s.PageNumber
}

func (s *DescribeWaitingSQLRecordsResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DescribeWaitingSQLRecordsResponseBody) GetTotalCount() *int32 {
	return s.TotalCount
}

func (s *DescribeWaitingSQLRecordsResponseBody) SetItems(v []*DescribeWaitingSQLRecordsResponseBodyItems) *DescribeWaitingSQLRecordsResponseBody {
	s.Items = v
	return s
}

func (s *DescribeWaitingSQLRecordsResponseBody) SetPageNumber(v int32) *DescribeWaitingSQLRecordsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeWaitingSQLRecordsResponseBody) SetRequestId(v string) *DescribeWaitingSQLRecordsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeWaitingSQLRecordsResponseBody) SetTotalCount(v int32) *DescribeWaitingSQLRecordsResponseBody {
	s.TotalCount = &v
	return s
}

func (s *DescribeWaitingSQLRecordsResponseBody) Validate() error {
	return dara.Validate(s)
}

type DescribeWaitingSQLRecordsResponseBodyItems struct {
	// The name of the database.
	//
	// example:
	//
	// test
	Database *string `json:"Database,omitempty" xml:"Database,omitempty"`
	// The ID of the process that uniquely identifies the query.
	//
	// example:
	//
	// 100
	PID *string `json:"PID,omitempty" xml:"PID,omitempty"`
	// The SQL statement of the query.
	//
	// example:
	//
	// Select 	- from t1,t2 where t1.id=t2.id;
	SQLStmt *string `json:"SQLStmt,omitempty" xml:"SQLStmt,omitempty"`
	// The ID of the session that contains the query.
	//
	// example:
	//
	// 50
	SessionID *string `json:"SessionID,omitempty" xml:"SessionID,omitempty"`
	// The start time of the query. This value is in the timestamp format. Unit: milliseconds.
	//
	// example:
	//
	// 1660902033374
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The waiting state of the query. Valid values:
	//
	// 	- **LockWaiting**
	//
	// 	- **ResourceWaiting**
	//
	// example:
	//
	// LockWaiting
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The database account that is used to perform the query.
	//
	// example:
	//
	// testUser
	User *string `json:"User,omitempty" xml:"User,omitempty"`
	// The waiting period of the query. Unit: milliseconds.
	//
	// example:
	//
	// 26911000
	WaitingTime *int64 `json:"WaitingTime,omitempty" xml:"WaitingTime,omitempty"`
}

func (s DescribeWaitingSQLRecordsResponseBodyItems) String() string {
	return dara.Prettify(s)
}

func (s DescribeWaitingSQLRecordsResponseBodyItems) GoString() string {
	return s.String()
}

func (s *DescribeWaitingSQLRecordsResponseBodyItems) GetDatabase() *string {
	return s.Database
}

func (s *DescribeWaitingSQLRecordsResponseBodyItems) GetPID() *string {
	return s.PID
}

func (s *DescribeWaitingSQLRecordsResponseBodyItems) GetSQLStmt() *string {
	return s.SQLStmt
}

func (s *DescribeWaitingSQLRecordsResponseBodyItems) GetSessionID() *string {
	return s.SessionID
}

func (s *DescribeWaitingSQLRecordsResponseBodyItems) GetStartTime() *int64 {
	return s.StartTime
}

func (s *DescribeWaitingSQLRecordsResponseBodyItems) GetStatus() *string {
	return s.Status
}

func (s *DescribeWaitingSQLRecordsResponseBodyItems) GetUser() *string {
	return s.User
}

func (s *DescribeWaitingSQLRecordsResponseBodyItems) GetWaitingTime() *int64 {
	return s.WaitingTime
}

func (s *DescribeWaitingSQLRecordsResponseBodyItems) SetDatabase(v string) *DescribeWaitingSQLRecordsResponseBodyItems {
	s.Database = &v
	return s
}

func (s *DescribeWaitingSQLRecordsResponseBodyItems) SetPID(v string) *DescribeWaitingSQLRecordsResponseBodyItems {
	s.PID = &v
	return s
}

func (s *DescribeWaitingSQLRecordsResponseBodyItems) SetSQLStmt(v string) *DescribeWaitingSQLRecordsResponseBodyItems {
	s.SQLStmt = &v
	return s
}

func (s *DescribeWaitingSQLRecordsResponseBodyItems) SetSessionID(v string) *DescribeWaitingSQLRecordsResponseBodyItems {
	s.SessionID = &v
	return s
}

func (s *DescribeWaitingSQLRecordsResponseBodyItems) SetStartTime(v int64) *DescribeWaitingSQLRecordsResponseBodyItems {
	s.StartTime = &v
	return s
}

func (s *DescribeWaitingSQLRecordsResponseBodyItems) SetStatus(v string) *DescribeWaitingSQLRecordsResponseBodyItems {
	s.Status = &v
	return s
}

func (s *DescribeWaitingSQLRecordsResponseBodyItems) SetUser(v string) *DescribeWaitingSQLRecordsResponseBodyItems {
	s.User = &v
	return s
}

func (s *DescribeWaitingSQLRecordsResponseBodyItems) SetWaitingTime(v int64) *DescribeWaitingSQLRecordsResponseBodyItems {
	s.WaitingTime = &v
	return s
}

func (s *DescribeWaitingSQLRecordsResponseBodyItems) Validate() error {
	return dara.Validate(s)
}

type iDescribeWaitingSQLRecordsResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DescribeWaitingSQLRecordsResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DescribeWaitingSQLRecordsResponse
	GetStatusCode() *int32
	SetBody(v *DescribeWaitingSQLRecordsResponseBody) *DescribeWaitingSQLRecordsResponse
	GetBody() *DescribeWaitingSQLRecordsResponseBody
}

type DescribeWaitingSQLRecordsResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeWaitingSQLRecordsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeWaitingSQLRecordsResponse) String() string {
	return dara.Prettify(s)
}

func (s DescribeWaitingSQLRecordsResponse) GoString() string {
	return s.String()
}

func (s *DescribeWaitingSQLRecordsResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DescribeWaitingSQLRecordsResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DescribeWaitingSQLRecordsResponse) GetBody() *DescribeWaitingSQLRecordsResponseBody {
	return s.Body
}

func (s *DescribeWaitingSQLRecordsResponse) SetHeaders(v map[string]*string) *DescribeWaitingSQLRecordsResponse {
	s.Headers = v
	return s
}

func (s *DescribeWaitingSQLRecordsResponse) SetStatusCode(v int32) *DescribeWaitingSQLRecordsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeWaitingSQLRecordsResponse) SetBody(v *DescribeWaitingSQLRecordsResponseBody) *DescribeWaitingSQLRecordsResponse {
	s.Body = v
	return s
}

func (s *DescribeWaitingSQLRecordsResponse) Validate() error {
	return dara.Validate(s)
}

type iDisableDBResourceGroupRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *DisableDBResourceGroupRequest
	GetDBInstanceId() *string
	SetOwnerId(v int64) *DisableDBResourceGroupRequest
	GetOwnerId() *int64
}

type DisableDBResourceGroupRequest struct {
	// The instance ID.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s DisableDBResourceGroupRequest) String() string {
	return dara.Prettify(s)
}

func (s DisableDBResourceGroupRequest) GoString() string {
	return s.String()
}

func (s *DisableDBResourceGroupRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *DisableDBResourceGroupRequest) GetOwnerId() *int64 {
	return s.OwnerId
}

func (s *DisableDBResourceGroupRequest) SetDBInstanceId(v string) *DisableDBResourceGroupRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DisableDBResourceGroupRequest) SetOwnerId(v int64) *DisableDBResourceGroupRequest {
	s.OwnerId = &v
	return s
}

func (s *DisableDBResourceGroupRequest) Validate() error {
	return dara.Validate(s)
}

type iDisableDBResourceGroupResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetRequestId(v string) *DisableDBResourceGroupResponseBody
	GetRequestId() *string
}

type DisableDBResourceGroupResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 53EA07B7-FC2A-521B-AB7C-27**********
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DisableDBResourceGroupResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DisableDBResourceGroupResponseBody) GoString() string {
	return s.String()
}

func (s *DisableDBResourceGroupResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DisableDBResourceGroupResponseBody) SetRequestId(v string) *DisableDBResourceGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *DisableDBResourceGroupResponseBody) Validate() error {
	return dara.Validate(s)
}

type iDisableDBResourceGroupResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DisableDBResourceGroupResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DisableDBResourceGroupResponse
	GetStatusCode() *int32
	SetBody(v *DisableDBResourceGroupResponseBody) *DisableDBResourceGroupResponse
	GetBody() *DisableDBResourceGroupResponseBody
}

type DisableDBResourceGroupResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DisableDBResourceGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DisableDBResourceGroupResponse) String() string {
	return dara.Prettify(s)
}

func (s DisableDBResourceGroupResponse) GoString() string {
	return s.String()
}

func (s *DisableDBResourceGroupResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DisableDBResourceGroupResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DisableDBResourceGroupResponse) GetBody() *DisableDBResourceGroupResponseBody {
	return s.Body
}

func (s *DisableDBResourceGroupResponse) SetHeaders(v map[string]*string) *DisableDBResourceGroupResponse {
	s.Headers = v
	return s
}

func (s *DisableDBResourceGroupResponse) SetStatusCode(v int32) *DisableDBResourceGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *DisableDBResourceGroupResponse) SetBody(v *DisableDBResourceGroupResponseBody) *DisableDBResourceGroupResponse {
	s.Body = v
	return s
}

func (s *DisableDBResourceGroupResponse) Validate() error {
	return dara.Validate(s)
}

type iDownloadDiagnosisRecordsRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *DownloadDiagnosisRecordsRequest
	GetDBInstanceId() *string
	SetDatabase(v string) *DownloadDiagnosisRecordsRequest
	GetDatabase() *string
	SetEndTime(v string) *DownloadDiagnosisRecordsRequest
	GetEndTime() *string
	SetLang(v string) *DownloadDiagnosisRecordsRequest
	GetLang() *string
	SetQueryCondition(v string) *DownloadDiagnosisRecordsRequest
	GetQueryCondition() *string
	SetResourceGroupId(v string) *DownloadDiagnosisRecordsRequest
	GetResourceGroupId() *string
	SetStartTime(v string) *DownloadDiagnosisRecordsRequest
	GetStartTime() *string
	SetUser(v string) *DownloadDiagnosisRecordsRequest
	GetUser() *string
}

type DownloadDiagnosisRecordsRequest struct {
	// The ID of the instance.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the details of all AnalyticDB for PostgreSQL instances in a specific region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The name of the database.
	//
	// This parameter is required.
	//
	// example:
	//
	// adbtest
	Database *string `json:"Database,omitempty" xml:"Database,omitempty"`
	// The end of the time range to query. Specify the time in the *yyyy-MM-dd*T*HH:mm*Z format. The time must be in UTC.
	//
	// example:
	//
	// 2022-05-07T07:59Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The language of the file that contains the query diagnostic information. Valid values:
	//
	// 	- **zh**: simplified Chinese
	//
	// 	- **en**: English
	//
	// 	- **ja**: Japanese
	//
	// 	- **zh-tw**: traditional Chinese
	//
	// example:
	//
	// zh
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// The filter condition on queries. The value is in the JSON format. Valid values:
	//
	// 	- `{"Type":"maxCost", "Value":"100"}`: filters the top 100 queries that are the most time-consuming.
	//
	// 	- `{"Type":"status","Value":"finished"}`: filters completed queries.
	//
	// 	- `{"Type":"status","Value":"running"}`: filters running queries.
	//
	// 	- `{"Type":"cost","Max":"200"}`: filters the queries that consume less than 200 milliseconds.
	//
	// 	- `{"Type":"cost","Min":"200","Max":"60000"}`: filters the queries that consume 200 milliseconds or more and less than 1 minute.
	//
	// 	- `{"Type":"cost","Min":"60000"}`: filters the queries that consume 1 minute or more.
	//
	// 	- `{"Type":"cost","Min":"30","Max":"50"}`: filters the queries that consume 30 milliseconds or more and less than 50 milliseconds. You can customize a filter condition by setting **Min*	- and **Max**.
	//
	// example:
	//
	// { "Type":"maxCost", "Value":"100" }
	QueryCondition *string `json:"QueryCondition,omitempty" xml:"QueryCondition,omitempty"`
	// The ID of the resource group to which the instance belongs. For more information about how to obtain the ID of a resource group, see [View basic information of a resource group](https://help.aliyun.com/document_detail/151181.html).
	//
	// example:
	//
	// rg-bp67acfmxazb4p****
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	// The beginning of the time range to query. Specify the time in the *yyyy-MM-dd*T*HH:mm*Z format. The time must be in UTC.
	//
	// example:
	//
	// 2022-05-07T06:59Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The name of the database account.
	//
	// example:
	//
	// adbpguser
	User *string `json:"User,omitempty" xml:"User,omitempty"`
}

func (s DownloadDiagnosisRecordsRequest) String() string {
	return dara.Prettify(s)
}

func (s DownloadDiagnosisRecordsRequest) GoString() string {
	return s.String()
}

func (s *DownloadDiagnosisRecordsRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *DownloadDiagnosisRecordsRequest) GetDatabase() *string {
	return s.Database
}

func (s *DownloadDiagnosisRecordsRequest) GetEndTime() *string {
	return s.EndTime
}

func (s *DownloadDiagnosisRecordsRequest) GetLang() *string {
	return s.Lang
}

func (s *DownloadDiagnosisRecordsRequest) GetQueryCondition() *string {
	return s.QueryCondition
}

func (s *DownloadDiagnosisRecordsRequest) GetResourceGroupId() *string {
	return s.ResourceGroupId
}

func (s *DownloadDiagnosisRecordsRequest) GetStartTime() *string {
	return s.StartTime
}

func (s *DownloadDiagnosisRecordsRequest) GetUser() *string {
	return s.User
}

func (s *DownloadDiagnosisRecordsRequest) SetDBInstanceId(v string) *DownloadDiagnosisRecordsRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DownloadDiagnosisRecordsRequest) SetDatabase(v string) *DownloadDiagnosisRecordsRequest {
	s.Database = &v
	return s
}

func (s *DownloadDiagnosisRecordsRequest) SetEndTime(v string) *DownloadDiagnosisRecordsRequest {
	s.EndTime = &v
	return s
}

func (s *DownloadDiagnosisRecordsRequest) SetLang(v string) *DownloadDiagnosisRecordsRequest {
	s.Lang = &v
	return s
}

func (s *DownloadDiagnosisRecordsRequest) SetQueryCondition(v string) *DownloadDiagnosisRecordsRequest {
	s.QueryCondition = &v
	return s
}

func (s *DownloadDiagnosisRecordsRequest) SetResourceGroupId(v string) *DownloadDiagnosisRecordsRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *DownloadDiagnosisRecordsRequest) SetStartTime(v string) *DownloadDiagnosisRecordsRequest {
	s.StartTime = &v
	return s
}

func (s *DownloadDiagnosisRecordsRequest) SetUser(v string) *DownloadDiagnosisRecordsRequest {
	s.User = &v
	return s
}

func (s *DownloadDiagnosisRecordsRequest) Validate() error {
	return dara.Validate(s)
}

type iDownloadDiagnosisRecordsResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *DownloadDiagnosisRecordsResponseBody
	GetDBInstanceId() *string
	SetDownloadId(v string) *DownloadDiagnosisRecordsResponseBody
	GetDownloadId() *string
	SetRequestId(v string) *DownloadDiagnosisRecordsResponseBody
	GetRequestId() *string
}

type DownloadDiagnosisRecordsResponseBody struct {
	// The ID of the instance.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The ID of the download task.
	//
	// example:
	//
	// 11
	DownloadId *string `json:"DownloadId,omitempty" xml:"DownloadId,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// B4CAF581-2AC7-41AD-8940-D56DF7AADF5B
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DownloadDiagnosisRecordsResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DownloadDiagnosisRecordsResponseBody) GoString() string {
	return s.String()
}

func (s *DownloadDiagnosisRecordsResponseBody) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *DownloadDiagnosisRecordsResponseBody) GetDownloadId() *string {
	return s.DownloadId
}

func (s *DownloadDiagnosisRecordsResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DownloadDiagnosisRecordsResponseBody) SetDBInstanceId(v string) *DownloadDiagnosisRecordsResponseBody {
	s.DBInstanceId = &v
	return s
}

func (s *DownloadDiagnosisRecordsResponseBody) SetDownloadId(v string) *DownloadDiagnosisRecordsResponseBody {
	s.DownloadId = &v
	return s
}

func (s *DownloadDiagnosisRecordsResponseBody) SetRequestId(v string) *DownloadDiagnosisRecordsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DownloadDiagnosisRecordsResponseBody) Validate() error {
	return dara.Validate(s)
}

type iDownloadDiagnosisRecordsResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DownloadDiagnosisRecordsResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DownloadDiagnosisRecordsResponse
	GetStatusCode() *int32
	SetBody(v *DownloadDiagnosisRecordsResponseBody) *DownloadDiagnosisRecordsResponse
	GetBody() *DownloadDiagnosisRecordsResponseBody
}

type DownloadDiagnosisRecordsResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DownloadDiagnosisRecordsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DownloadDiagnosisRecordsResponse) String() string {
	return dara.Prettify(s)
}

func (s DownloadDiagnosisRecordsResponse) GoString() string {
	return s.String()
}

func (s *DownloadDiagnosisRecordsResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DownloadDiagnosisRecordsResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DownloadDiagnosisRecordsResponse) GetBody() *DownloadDiagnosisRecordsResponseBody {
	return s.Body
}

func (s *DownloadDiagnosisRecordsResponse) SetHeaders(v map[string]*string) *DownloadDiagnosisRecordsResponse {
	s.Headers = v
	return s
}

func (s *DownloadDiagnosisRecordsResponse) SetStatusCode(v int32) *DownloadDiagnosisRecordsResponse {
	s.StatusCode = &v
	return s
}

func (s *DownloadDiagnosisRecordsResponse) SetBody(v *DownloadDiagnosisRecordsResponseBody) *DownloadDiagnosisRecordsResponse {
	s.Body = v
	return s
}

func (s *DownloadDiagnosisRecordsResponse) Validate() error {
	return dara.Validate(s)
}

type iDownloadSQLLogsRecordsRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *DownloadSQLLogsRecordsRequest
	GetDBInstanceId() *string
	SetDatabase(v string) *DownloadSQLLogsRecordsRequest
	GetDatabase() *string
	SetEndTime(v string) *DownloadSQLLogsRecordsRequest
	GetEndTime() *string
	SetExecuteCost(v string) *DownloadSQLLogsRecordsRequest
	GetExecuteCost() *string
	SetExecuteState(v string) *DownloadSQLLogsRecordsRequest
	GetExecuteState() *string
	SetLang(v string) *DownloadSQLLogsRecordsRequest
	GetLang() *string
	SetMaxExecuteCost(v string) *DownloadSQLLogsRecordsRequest
	GetMaxExecuteCost() *string
	SetMinExecuteCost(v string) *DownloadSQLLogsRecordsRequest
	GetMinExecuteCost() *string
	SetOperationClass(v string) *DownloadSQLLogsRecordsRequest
	GetOperationClass() *string
	SetOperationType(v string) *DownloadSQLLogsRecordsRequest
	GetOperationType() *string
	SetPageNumber(v int32) *DownloadSQLLogsRecordsRequest
	GetPageNumber() *int32
	SetPageSize(v int32) *DownloadSQLLogsRecordsRequest
	GetPageSize() *int32
	SetQueryKeywords(v string) *DownloadSQLLogsRecordsRequest
	GetQueryKeywords() *string
	SetSourceIP(v string) *DownloadSQLLogsRecordsRequest
	GetSourceIP() *string
	SetStartTime(v string) *DownloadSQLLogsRecordsRequest
	GetStartTime() *string
	SetUser(v string) *DownloadSQLLogsRecordsRequest
	GetUser() *string
}

type DownloadSQLLogsRecordsRequest struct {
	// The instance ID.
	//
	// > You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The name of the database.
	//
	// example:
	//
	// testdb
	Database *string `json:"Database,omitempty" xml:"Database,omitempty"`
	// The end of the time range to query. Specify the time in the yyyy-MM-ddTHH:mm:ssZ format. The end time must be later than the start time.
	//
	// This parameter is required.
	//
	// example:
	//
	// 2023-05-08T06:59Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The execution duration of the SQL statement. Unit: seconds.
	//
	// example:
	//
	// 1
	ExecuteCost *string `json:"ExecuteCost,omitempty" xml:"ExecuteCost,omitempty"`
	// The execution status of the SQL statement.
	//
	// 	- **1**: successful.
	//
	// 	- **0**: failed.
	//
	// example:
	//
	// 1
	ExecuteState *string `json:"ExecuteState,omitempty" xml:"ExecuteState,omitempty"`
	// The language of the file that contains the query diagnostic information. Valid values:
	//
	// 	- **zh**: simplified Chinese.
	//
	// 	- **en**: English.
	//
	// 	- **ja**: Japanese.
	//
	// 	- **zh-tw**: traditional Chinese.
	//
	// example:
	//
	// zh
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// The maximum amount of time consumed by a slow query. Unit: seconds. Minimum value: 0.
	//
	// example:
	//
	// 999
	MaxExecuteCost *string `json:"MaxExecuteCost,omitempty" xml:"MaxExecuteCost,omitempty"`
	// The minimum amount of time consumed by a slow query. Unit: seconds. Minimum value: 0.
	//
	// example:
	//
	// 1
	MinExecuteCost *string `json:"MinExecuteCost,omitempty" xml:"MinExecuteCost,omitempty"`
	// The type of the query language. Example: DQL, DML, or DDL.
	//
	// example:
	//
	// DQL
	OperationClass *string `json:"OperationClass,omitempty" xml:"OperationClass,omitempty"`
	// The type of the SQL statement. Example: SELECT.
	//
	// example:
	//
	// SELECT
	OperationType *string `json:"OperationType,omitempty" xml:"OperationType,omitempty"`
	// The page number. Pages start from page 1. Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. Valid values:
	//
	// 	- **30**
	//
	// 	- **50**
	//
	// 	- **100**
	//
	// Default value: **30**.
	//
	// example:
	//
	// 30
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The keywords that are used for query.
	//
	// example:
	//
	// select 1
	QueryKeywords *string `json:"QueryKeywords,omitempty" xml:"QueryKeywords,omitempty"`
	// The source IP address.
	//
	// example:
	//
	// 100.XX.XX.90
	SourceIP *string `json:"SourceIP,omitempty" xml:"SourceIP,omitempty"`
	// The beginning of the time range to query. Specify the time in the yyyy-MM-ddTHH:mmZ format. The time must be in UTC.
	//
	// This parameter is required.
	//
	// example:
	//
	// 2023-05-07T06:59Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The name of the database account.
	//
	// example:
	//
	// testuser
	User *string `json:"User,omitempty" xml:"User,omitempty"`
}

func (s DownloadSQLLogsRecordsRequest) String() string {
	return dara.Prettify(s)
}

func (s DownloadSQLLogsRecordsRequest) GoString() string {
	return s.String()
}

func (s *DownloadSQLLogsRecordsRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *DownloadSQLLogsRecordsRequest) GetDatabase() *string {
	return s.Database
}

func (s *DownloadSQLLogsRecordsRequest) GetEndTime() *string {
	return s.EndTime
}

func (s *DownloadSQLLogsRecordsRequest) GetExecuteCost() *string {
	return s.ExecuteCost
}

func (s *DownloadSQLLogsRecordsRequest) GetExecuteState() *string {
	return s.ExecuteState
}

func (s *DownloadSQLLogsRecordsRequest) GetLang() *string {
	return s.Lang
}

func (s *DownloadSQLLogsRecordsRequest) GetMaxExecuteCost() *string {
	return s.MaxExecuteCost
}

func (s *DownloadSQLLogsRecordsRequest) GetMinExecuteCost() *string {
	return s.MinExecuteCost
}

func (s *DownloadSQLLogsRecordsRequest) GetOperationClass() *string {
	return s.OperationClass
}

func (s *DownloadSQLLogsRecordsRequest) GetOperationType() *string {
	return s.OperationType
}

func (s *DownloadSQLLogsRecordsRequest) GetPageNumber() *int32 {
	return s.PageNumber
}

func (s *DownloadSQLLogsRecordsRequest) GetPageSize() *int32 {
	return s.PageSize
}

func (s *DownloadSQLLogsRecordsRequest) GetQueryKeywords() *string {
	return s.QueryKeywords
}

func (s *DownloadSQLLogsRecordsRequest) GetSourceIP() *string {
	return s.SourceIP
}

func (s *DownloadSQLLogsRecordsRequest) GetStartTime() *string {
	return s.StartTime
}

func (s *DownloadSQLLogsRecordsRequest) GetUser() *string {
	return s.User
}

func (s *DownloadSQLLogsRecordsRequest) SetDBInstanceId(v string) *DownloadSQLLogsRecordsRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DownloadSQLLogsRecordsRequest) SetDatabase(v string) *DownloadSQLLogsRecordsRequest {
	s.Database = &v
	return s
}

func (s *DownloadSQLLogsRecordsRequest) SetEndTime(v string) *DownloadSQLLogsRecordsRequest {
	s.EndTime = &v
	return s
}

func (s *DownloadSQLLogsRecordsRequest) SetExecuteCost(v string) *DownloadSQLLogsRecordsRequest {
	s.ExecuteCost = &v
	return s
}

func (s *DownloadSQLLogsRecordsRequest) SetExecuteState(v string) *DownloadSQLLogsRecordsRequest {
	s.ExecuteState = &v
	return s
}

func (s *DownloadSQLLogsRecordsRequest) SetLang(v string) *DownloadSQLLogsRecordsRequest {
	s.Lang = &v
	return s
}

func (s *DownloadSQLLogsRecordsRequest) SetMaxExecuteCost(v string) *DownloadSQLLogsRecordsRequest {
	s.MaxExecuteCost = &v
	return s
}

func (s *DownloadSQLLogsRecordsRequest) SetMinExecuteCost(v string) *DownloadSQLLogsRecordsRequest {
	s.MinExecuteCost = &v
	return s
}

func (s *DownloadSQLLogsRecordsRequest) SetOperationClass(v string) *DownloadSQLLogsRecordsRequest {
	s.OperationClass = &v
	return s
}

func (s *DownloadSQLLogsRecordsRequest) SetOperationType(v string) *DownloadSQLLogsRecordsRequest {
	s.OperationType = &v
	return s
}

func (s *DownloadSQLLogsRecordsRequest) SetPageNumber(v int32) *DownloadSQLLogsRecordsRequest {
	s.PageNumber = &v
	return s
}

func (s *DownloadSQLLogsRecordsRequest) SetPageSize(v int32) *DownloadSQLLogsRecordsRequest {
	s.PageSize = &v
	return s
}

func (s *DownloadSQLLogsRecordsRequest) SetQueryKeywords(v string) *DownloadSQLLogsRecordsRequest {
	s.QueryKeywords = &v
	return s
}

func (s *DownloadSQLLogsRecordsRequest) SetSourceIP(v string) *DownloadSQLLogsRecordsRequest {
	s.SourceIP = &v
	return s
}

func (s *DownloadSQLLogsRecordsRequest) SetStartTime(v string) *DownloadSQLLogsRecordsRequest {
	s.StartTime = &v
	return s
}

func (s *DownloadSQLLogsRecordsRequest) SetUser(v string) *DownloadSQLLogsRecordsRequest {
	s.User = &v
	return s
}

func (s *DownloadSQLLogsRecordsRequest) Validate() error {
	return dara.Validate(s)
}

type iDownloadSQLLogsRecordsResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetDownloadId(v int64) *DownloadSQLLogsRecordsResponseBody
	GetDownloadId() *int64
	SetRequestId(v string) *DownloadSQLLogsRecordsResponseBody
	GetRequestId() *string
}

type DownloadSQLLogsRecordsResponseBody struct {
	// The ID of the download task.
	//
	// example:
	//
	// 11
	DownloadId *int64 `json:"DownloadId,omitempty" xml:"DownloadId,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 7565770E-7C45-462D-BA4A-8A5396F2CAD1
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DownloadSQLLogsRecordsResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DownloadSQLLogsRecordsResponseBody) GoString() string {
	return s.String()
}

func (s *DownloadSQLLogsRecordsResponseBody) GetDownloadId() *int64 {
	return s.DownloadId
}

func (s *DownloadSQLLogsRecordsResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DownloadSQLLogsRecordsResponseBody) SetDownloadId(v int64) *DownloadSQLLogsRecordsResponseBody {
	s.DownloadId = &v
	return s
}

func (s *DownloadSQLLogsRecordsResponseBody) SetRequestId(v string) *DownloadSQLLogsRecordsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DownloadSQLLogsRecordsResponseBody) Validate() error {
	return dara.Validate(s)
}

type iDownloadSQLLogsRecordsResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *DownloadSQLLogsRecordsResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *DownloadSQLLogsRecordsResponse
	GetStatusCode() *int32
	SetBody(v *DownloadSQLLogsRecordsResponseBody) *DownloadSQLLogsRecordsResponse
	GetBody() *DownloadSQLLogsRecordsResponseBody
}

type DownloadSQLLogsRecordsResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DownloadSQLLogsRecordsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DownloadSQLLogsRecordsResponse) String() string {
	return dara.Prettify(s)
}

func (s DownloadSQLLogsRecordsResponse) GoString() string {
	return s.String()
}

func (s *DownloadSQLLogsRecordsResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *DownloadSQLLogsRecordsResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *DownloadSQLLogsRecordsResponse) GetBody() *DownloadSQLLogsRecordsResponseBody {
	return s.Body
}

func (s *DownloadSQLLogsRecordsResponse) SetHeaders(v map[string]*string) *DownloadSQLLogsRecordsResponse {
	s.Headers = v
	return s
}

func (s *DownloadSQLLogsRecordsResponse) SetStatusCode(v int32) *DownloadSQLLogsRecordsResponse {
	s.StatusCode = &v
	return s
}

func (s *DownloadSQLLogsRecordsResponse) SetBody(v *DownloadSQLLogsRecordsResponseBody) *DownloadSQLLogsRecordsResponse {
	s.Body = v
	return s
}

func (s *DownloadSQLLogsRecordsResponse) Validate() error {
	return dara.Validate(s)
}

type iEnableDBResourceGroupRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *EnableDBResourceGroupRequest
	GetDBInstanceId() *string
	SetOwnerId(v int64) *EnableDBResourceGroupRequest
	GetOwnerId() *int64
}

type EnableDBResourceGroupRequest struct {
	// The instance ID.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s EnableDBResourceGroupRequest) String() string {
	return dara.Prettify(s)
}

func (s EnableDBResourceGroupRequest) GoString() string {
	return s.String()
}

func (s *EnableDBResourceGroupRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *EnableDBResourceGroupRequest) GetOwnerId() *int64 {
	return s.OwnerId
}

func (s *EnableDBResourceGroupRequest) SetDBInstanceId(v string) *EnableDBResourceGroupRequest {
	s.DBInstanceId = &v
	return s
}

func (s *EnableDBResourceGroupRequest) SetOwnerId(v int64) *EnableDBResourceGroupRequest {
	s.OwnerId = &v
	return s
}

func (s *EnableDBResourceGroupRequest) Validate() error {
	return dara.Validate(s)
}

type iEnableDBResourceGroupResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetRequestId(v string) *EnableDBResourceGroupResponseBody
	GetRequestId() *string
}

type EnableDBResourceGroupResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 5850BF81-1A2B-5ACE-AF41-57**********
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s EnableDBResourceGroupResponseBody) String() string {
	return dara.Prettify(s)
}

func (s EnableDBResourceGroupResponseBody) GoString() string {
	return s.String()
}

func (s *EnableDBResourceGroupResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *EnableDBResourceGroupResponseBody) SetRequestId(v string) *EnableDBResourceGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *EnableDBResourceGroupResponseBody) Validate() error {
	return dara.Validate(s)
}

type iEnableDBResourceGroupResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *EnableDBResourceGroupResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *EnableDBResourceGroupResponse
	GetStatusCode() *int32
	SetBody(v *EnableDBResourceGroupResponseBody) *EnableDBResourceGroupResponse
	GetBody() *EnableDBResourceGroupResponseBody
}

type EnableDBResourceGroupResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *EnableDBResourceGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s EnableDBResourceGroupResponse) String() string {
	return dara.Prettify(s)
}

func (s EnableDBResourceGroupResponse) GoString() string {
	return s.String()
}

func (s *EnableDBResourceGroupResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *EnableDBResourceGroupResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *EnableDBResourceGroupResponse) GetBody() *EnableDBResourceGroupResponseBody {
	return s.Body
}

func (s *EnableDBResourceGroupResponse) SetHeaders(v map[string]*string) *EnableDBResourceGroupResponse {
	s.Headers = v
	return s
}

func (s *EnableDBResourceGroupResponse) SetStatusCode(v int32) *EnableDBResourceGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *EnableDBResourceGroupResponse) SetBody(v *EnableDBResourceGroupResponseBody) *EnableDBResourceGroupResponse {
	s.Body = v
	return s
}

func (s *EnableDBResourceGroupResponse) Validate() error {
	return dara.Validate(s)
}

type iExecuteStatementRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *ExecuteStatementRequest
	GetDBInstanceId() *string
	SetDatabase(v string) *ExecuteStatementRequest
	GetDatabase() *string
	SetOwnerId(v int64) *ExecuteStatementRequest
	GetOwnerId() *int64
	SetParameters(v []interface{}) *ExecuteStatementRequest
	GetParameters() []interface{}
	SetRagWorkspaceCollection(v *ExecuteStatementRequestRagWorkspaceCollection) *ExecuteStatementRequest
	GetRagWorkspaceCollection() *ExecuteStatementRequestRagWorkspaceCollection
	SetRegionId(v string) *ExecuteStatementRequest
	GetRegionId() *string
	SetRunType(v string) *ExecuteStatementRequest
	GetRunType() *string
	SetSecretArn(v string) *ExecuteStatementRequest
	GetSecretArn() *string
	SetSql(v string) *ExecuteStatementRequest
	GetSql() *string
	SetSqls(v []*string) *ExecuteStatementRequest
	GetSqls() []*string
	SetStatementName(v string) *ExecuteStatementRequest
	GetStatementName() *string
	SetWorkspaceId(v string) *ExecuteStatementRequest
	GetWorkspaceId() *string
}

type ExecuteStatementRequest struct {
	// The instance ID.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The name of the database.
	//
	// This parameter is required.
	//
	// example:
	//
	// adbtest
	Database *string `json:"Database,omitempty" xml:"Database,omitempty"`
	OwnerId  *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The configuration parameters.
	Parameters             []interface{}                                  `json:"Parameters,omitempty" xml:"Parameters,omitempty" type:"Repeated"`
	RagWorkspaceCollection *ExecuteStatementRequestRagWorkspaceCollection `json:"RagWorkspaceCollection,omitempty" xml:"RagWorkspaceCollection,omitempty" type:"Struct"`
	// The region ID of the instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-beijing
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The execution type. Valid values:
	//
	// 	- synchronous
	//
	// 	- asynchronous (not supported)
	//
	// example:
	//
	// synchronous
	RunType *string `json:"RunType,omitempty" xml:"RunType,omitempty"`
	// The Alibaba Cloud Resource Name (ARN) of the access credential for the created Data API account. You can call the CreateSecret operation to create an access credential.
	//
	// >  To call the ExecuteStatement operation as a Resource Access Management (RAM) user, the RAM user must have the permissions to call the UseSecret or GetSecretValue operation on the ARN of the access credential.
	//
	// This parameter is required.
	//
	// example:
	//
	// acs:gpdb:cn-beijing:1033**:secret/testsecret-eG2AQGRIwQ0zFp4VA7mYL3uiCXTfDQbQ
	SecretArn *string `json:"SecretArn,omitempty" xml:"SecretArn,omitempty"`
	// The SQL statements that you want to execute.
	//
	// example:
	//
	// select 	- from table1
	Sql *string `json:"Sql,omitempty" xml:"Sql,omitempty"`
	// The SQL statements.
	Sqls []*string `json:"Sqls,omitempty" xml:"Sqls,omitempty" type:"Repeated"`
	// The name of the set of SQL statements that you want to execute. This parameter takes effect when the RunType parameter is set to asynchronous.
	//
	// example:
	//
	// test
	StatementName *string `json:"StatementName,omitempty" xml:"StatementName,omitempty"`
	WorkspaceId   *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s ExecuteStatementRequest) String() string {
	return dara.Prettify(s)
}

func (s ExecuteStatementRequest) GoString() string {
	return s.String()
}

func (s *ExecuteStatementRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *ExecuteStatementRequest) GetDatabase() *string {
	return s.Database
}

func (s *ExecuteStatementRequest) GetOwnerId() *int64 {
	return s.OwnerId
}

func (s *ExecuteStatementRequest) GetParameters() []interface{} {
	return s.Parameters
}

func (s *ExecuteStatementRequest) GetRagWorkspaceCollection() *ExecuteStatementRequestRagWorkspaceCollection {
	return s.RagWorkspaceCollection
}

func (s *ExecuteStatementRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *ExecuteStatementRequest) GetRunType() *string {
	return s.RunType
}

func (s *ExecuteStatementRequest) GetSecretArn() *string {
	return s.SecretArn
}

func (s *ExecuteStatementRequest) GetSql() *string {
	return s.Sql
}

func (s *ExecuteStatementRequest) GetSqls() []*string {
	return s.Sqls
}

func (s *ExecuteStatementRequest) GetStatementName() *string {
	return s.StatementName
}

func (s *ExecuteStatementRequest) GetWorkspaceId() *string {
	return s.WorkspaceId
}

func (s *ExecuteStatementRequest) SetDBInstanceId(v string) *ExecuteStatementRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ExecuteStatementRequest) SetDatabase(v string) *ExecuteStatementRequest {
	s.Database = &v
	return s
}

func (s *ExecuteStatementRequest) SetOwnerId(v int64) *ExecuteStatementRequest {
	s.OwnerId = &v
	return s
}

func (s *ExecuteStatementRequest) SetParameters(v []interface{}) *ExecuteStatementRequest {
	s.Parameters = v
	return s
}

func (s *ExecuteStatementRequest) SetRagWorkspaceCollection(v *ExecuteStatementRequestRagWorkspaceCollection) *ExecuteStatementRequest {
	s.RagWorkspaceCollection = v
	return s
}

func (s *ExecuteStatementRequest) SetRegionId(v string) *ExecuteStatementRequest {
	s.RegionId = &v
	return s
}

func (s *ExecuteStatementRequest) SetRunType(v string) *ExecuteStatementRequest {
	s.RunType = &v
	return s
}

func (s *ExecuteStatementRequest) SetSecretArn(v string) *ExecuteStatementRequest {
	s.SecretArn = &v
	return s
}

func (s *ExecuteStatementRequest) SetSql(v string) *ExecuteStatementRequest {
	s.Sql = &v
	return s
}

func (s *ExecuteStatementRequest) SetSqls(v []*string) *ExecuteStatementRequest {
	s.Sqls = v
	return s
}

func (s *ExecuteStatementRequest) SetStatementName(v string) *ExecuteStatementRequest {
	s.StatementName = &v
	return s
}

func (s *ExecuteStatementRequest) SetWorkspaceId(v string) *ExecuteStatementRequest {
	s.WorkspaceId = &v
	return s
}

func (s *ExecuteStatementRequest) Validate() error {
	return dara.Validate(s)
}

type ExecuteStatementRequestRagWorkspaceCollection struct {
	Collection *string `json:"Collection,omitempty" xml:"Collection,omitempty"`
	Namespace  *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
}

func (s ExecuteStatementRequestRagWorkspaceCollection) String() string {
	return dara.Prettify(s)
}

func (s ExecuteStatementRequestRagWorkspaceCollection) GoString() string {
	return s.String()
}

func (s *ExecuteStatementRequestRagWorkspaceCollection) GetCollection() *string {
	return s.Collection
}

func (s *ExecuteStatementRequestRagWorkspaceCollection) GetNamespace() *string {
	return s.Namespace
}

func (s *ExecuteStatementRequestRagWorkspaceCollection) SetCollection(v string) *ExecuteStatementRequestRagWorkspaceCollection {
	s.Collection = &v
	return s
}

func (s *ExecuteStatementRequestRagWorkspaceCollection) SetNamespace(v string) *ExecuteStatementRequestRagWorkspaceCollection {
	s.Namespace = &v
	return s
}

func (s *ExecuteStatementRequestRagWorkspaceCollection) Validate() error {
	return dara.Validate(s)
}

type iExecuteStatementShrinkRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *ExecuteStatementShrinkRequest
	GetDBInstanceId() *string
	SetDatabase(v string) *ExecuteStatementShrinkRequest
	GetDatabase() *string
	SetOwnerId(v int64) *ExecuteStatementShrinkRequest
	GetOwnerId() *int64
	SetParametersShrink(v string) *ExecuteStatementShrinkRequest
	GetParametersShrink() *string
	SetRagWorkspaceCollectionShrink(v string) *ExecuteStatementShrinkRequest
	GetRagWorkspaceCollectionShrink() *string
	SetRegionId(v string) *ExecuteStatementShrinkRequest
	GetRegionId() *string
	SetRunType(v string) *ExecuteStatementShrinkRequest
	GetRunType() *string
	SetSecretArn(v string) *ExecuteStatementShrinkRequest
	GetSecretArn() *string
	SetSql(v string) *ExecuteStatementShrinkRequest
	GetSql() *string
	SetSqlsShrink(v string) *ExecuteStatementShrinkRequest
	GetSqlsShrink() *string
	SetStatementName(v string) *ExecuteStatementShrinkRequest
	GetStatementName() *string
	SetWorkspaceId(v string) *ExecuteStatementShrinkRequest
	GetWorkspaceId() *string
}

type ExecuteStatementShrinkRequest struct {
	// The instance ID.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The name of the database.
	//
	// This parameter is required.
	//
	// example:
	//
	// adbtest
	Database *string `json:"Database,omitempty" xml:"Database,omitempty"`
	OwnerId  *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The configuration parameters.
	ParametersShrink             *string `json:"Parameters,omitempty" xml:"Parameters,omitempty"`
	RagWorkspaceCollectionShrink *string `json:"RagWorkspaceCollection,omitempty" xml:"RagWorkspaceCollection,omitempty"`
	// The region ID of the instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-beijing
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The execution type. Valid values:
	//
	// 	- synchronous
	//
	// 	- asynchronous (not supported)
	//
	// example:
	//
	// synchronous
	RunType *string `json:"RunType,omitempty" xml:"RunType,omitempty"`
	// The Alibaba Cloud Resource Name (ARN) of the access credential for the created Data API account. You can call the CreateSecret operation to create an access credential.
	//
	// >  To call the ExecuteStatement operation as a Resource Access Management (RAM) user, the RAM user must have the permissions to call the UseSecret or GetSecretValue operation on the ARN of the access credential.
	//
	// This parameter is required.
	//
	// example:
	//
	// acs:gpdb:cn-beijing:1033**:secret/testsecret-eG2AQGRIwQ0zFp4VA7mYL3uiCXTfDQbQ
	SecretArn *string `json:"SecretArn,omitempty" xml:"SecretArn,omitempty"`
	// The SQL statements that you want to execute.
	//
	// example:
	//
	// select 	- from table1
	Sql *string `json:"Sql,omitempty" xml:"Sql,omitempty"`
	// The SQL statements.
	SqlsShrink *string `json:"Sqls,omitempty" xml:"Sqls,omitempty"`
	// The name of the set of SQL statements that you want to execute. This parameter takes effect when the RunType parameter is set to asynchronous.
	//
	// example:
	//
	// test
	StatementName *string `json:"StatementName,omitempty" xml:"StatementName,omitempty"`
	WorkspaceId   *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s ExecuteStatementShrinkRequest) String() string {
	return dara.Prettify(s)
}

func (s ExecuteStatementShrinkRequest) GoString() string {
	return s.String()
}

func (s *ExecuteStatementShrinkRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *ExecuteStatementShrinkRequest) GetDatabase() *string {
	return s.Database
}

func (s *ExecuteStatementShrinkRequest) GetOwnerId() *int64 {
	return s.OwnerId
}

func (s *ExecuteStatementShrinkRequest) GetParametersShrink() *string {
	return s.ParametersShrink
}

func (s *ExecuteStatementShrinkRequest) GetRagWorkspaceCollectionShrink() *string {
	return s.RagWorkspaceCollectionShrink
}

func (s *ExecuteStatementShrinkRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *ExecuteStatementShrinkRequest) GetRunType() *string {
	return s.RunType
}

func (s *ExecuteStatementShrinkRequest) GetSecretArn() *string {
	return s.SecretArn
}

func (s *ExecuteStatementShrinkRequest) GetSql() *string {
	return s.Sql
}

func (s *ExecuteStatementShrinkRequest) GetSqlsShrink() *string {
	return s.SqlsShrink
}

func (s *ExecuteStatementShrinkRequest) GetStatementName() *string {
	return s.StatementName
}

func (s *ExecuteStatementShrinkRequest) GetWorkspaceId() *string {
	return s.WorkspaceId
}

func (s *ExecuteStatementShrinkRequest) SetDBInstanceId(v string) *ExecuteStatementShrinkRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ExecuteStatementShrinkRequest) SetDatabase(v string) *ExecuteStatementShrinkRequest {
	s.Database = &v
	return s
}

func (s *ExecuteStatementShrinkRequest) SetOwnerId(v int64) *ExecuteStatementShrinkRequest {
	s.OwnerId = &v
	return s
}

func (s *ExecuteStatementShrinkRequest) SetParametersShrink(v string) *ExecuteStatementShrinkRequest {
	s.ParametersShrink = &v
	return s
}

func (s *ExecuteStatementShrinkRequest) SetRagWorkspaceCollectionShrink(v string) *ExecuteStatementShrinkRequest {
	s.RagWorkspaceCollectionShrink = &v
	return s
}

func (s *ExecuteStatementShrinkRequest) SetRegionId(v string) *ExecuteStatementShrinkRequest {
	s.RegionId = &v
	return s
}

func (s *ExecuteStatementShrinkRequest) SetRunType(v string) *ExecuteStatementShrinkRequest {
	s.RunType = &v
	return s
}

func (s *ExecuteStatementShrinkRequest) SetSecretArn(v string) *ExecuteStatementShrinkRequest {
	s.SecretArn = &v
	return s
}

func (s *ExecuteStatementShrinkRequest) SetSql(v string) *ExecuteStatementShrinkRequest {
	s.Sql = &v
	return s
}

func (s *ExecuteStatementShrinkRequest) SetSqlsShrink(v string) *ExecuteStatementShrinkRequest {
	s.SqlsShrink = &v
	return s
}

func (s *ExecuteStatementShrinkRequest) SetStatementName(v string) *ExecuteStatementShrinkRequest {
	s.StatementName = &v
	return s
}

func (s *ExecuteStatementShrinkRequest) SetWorkspaceId(v string) *ExecuteStatementShrinkRequest {
	s.WorkspaceId = &v
	return s
}

func (s *ExecuteStatementShrinkRequest) Validate() error {
	return dara.Validate(s)
}

type iExecuteStatementResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetCreatedAt(v string) *ExecuteStatementResponseBody
	GetCreatedAt() *string
	SetDBInstanceId(v string) *ExecuteStatementResponseBody
	GetDBInstanceId() *string
	SetData(v *ExecuteStatementResponseBodyData) *ExecuteStatementResponseBody
	GetData() *ExecuteStatementResponseBodyData
	SetDatabase(v string) *ExecuteStatementResponseBody
	GetDatabase() *string
	SetId(v string) *ExecuteStatementResponseBody
	GetId() *string
	SetMessage(v string) *ExecuteStatementResponseBody
	GetMessage() *string
	SetRequestId(v string) *ExecuteStatementResponseBody
	GetRequestId() *string
	SetSecretArn(v string) *ExecuteStatementResponseBody
	GetSecretArn() *string
	SetStatus(v string) *ExecuteStatementResponseBody
	GetStatus() *string
}

type ExecuteStatementResponseBody struct {
	// The time when the SQL statements were created.
	//
	// example:
	//
	// 2023-12-04T10:08:47+0800
	CreatedAt *string `json:"CreatedAt,omitempty" xml:"CreatedAt,omitempty"`
	// The instance ID.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The returned results of the synchronous call.
	Data *ExecuteStatementResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The name of the database.
	//
	// example:
	//
	// adbtest
	Database *string `json:"Database,omitempty" xml:"Database,omitempty"`
	// The ID of the job for asynchronously executing the SQL statements.
	//
	// example:
	//
	// ABB39CC3
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// The returned message.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The ARN of the access credential for the created Data API account.
	//
	// example:
	//
	// acs:gpdb:cn-beijing:1033**:secret/testsecret-eG2AQGRIwQ0zFp4VA7mYL3uiCXTfDQbQ
	SecretArn *string `json:"SecretArn,omitempty" xml:"SecretArn,omitempty"`
	// The status of the operation. Valid values:
	//
	// 	- **success**
	//
	// 	- **fail**
	//
	// example:
	//
	// success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ExecuteStatementResponseBody) String() string {
	return dara.Prettify(s)
}

func (s ExecuteStatementResponseBody) GoString() string {
	return s.String()
}

func (s *ExecuteStatementResponseBody) GetCreatedAt() *string {
	return s.CreatedAt
}

func (s *ExecuteStatementResponseBody) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *ExecuteStatementResponseBody) GetData() *ExecuteStatementResponseBodyData {
	return s.Data
}

func (s *ExecuteStatementResponseBody) GetDatabase() *string {
	return s.Database
}

func (s *ExecuteStatementResponseBody) GetId() *string {
	return s.Id
}

func (s *ExecuteStatementResponseBody) GetMessage() *string {
	return s.Message
}

func (s *ExecuteStatementResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *ExecuteStatementResponseBody) GetSecretArn() *string {
	return s.SecretArn
}

func (s *ExecuteStatementResponseBody) GetStatus() *string {
	return s.Status
}

func (s *ExecuteStatementResponseBody) SetCreatedAt(v string) *ExecuteStatementResponseBody {
	s.CreatedAt = &v
	return s
}

func (s *ExecuteStatementResponseBody) SetDBInstanceId(v string) *ExecuteStatementResponseBody {
	s.DBInstanceId = &v
	return s
}

func (s *ExecuteStatementResponseBody) SetData(v *ExecuteStatementResponseBodyData) *ExecuteStatementResponseBody {
	s.Data = v
	return s
}

func (s *ExecuteStatementResponseBody) SetDatabase(v string) *ExecuteStatementResponseBody {
	s.Database = &v
	return s
}

func (s *ExecuteStatementResponseBody) SetId(v string) *ExecuteStatementResponseBody {
	s.Id = &v
	return s
}

func (s *ExecuteStatementResponseBody) SetMessage(v string) *ExecuteStatementResponseBody {
	s.Message = &v
	return s
}

func (s *ExecuteStatementResponseBody) SetRequestId(v string) *ExecuteStatementResponseBody {
	s.RequestId = &v
	return s
}

func (s *ExecuteStatementResponseBody) SetSecretArn(v string) *ExecuteStatementResponseBody {
	s.SecretArn = &v
	return s
}

func (s *ExecuteStatementResponseBody) SetStatus(v string) *ExecuteStatementResponseBody {
	s.Status = &v
	return s
}

func (s *ExecuteStatementResponseBody) Validate() error {
	return dara.Validate(s)
}

type ExecuteStatementResponseBodyData struct {
	// The metadata of the columns.
	ColumnMetadata *ExecuteStatementResponseBodyDataColumnMetadata `json:"ColumnMetadata,omitempty" xml:"ColumnMetadata,omitempty" type:"Struct"`
	// The rows of data.
	Records *ExecuteStatementResponseBodyDataRecords `json:"Records,omitempty" xml:"Records,omitempty" type:"Struct"`
	// The total number of entries returned.
	//
	// example:
	//
	// 10
	TotalNumRows *int64 `json:"TotalNumRows,omitempty" xml:"TotalNumRows,omitempty"`
}

func (s ExecuteStatementResponseBodyData) String() string {
	return dara.Prettify(s)
}

func (s ExecuteStatementResponseBodyData) GoString() string {
	return s.String()
}

func (s *ExecuteStatementResponseBodyData) GetColumnMetadata() *ExecuteStatementResponseBodyDataColumnMetadata {
	return s.ColumnMetadata
}

func (s *ExecuteStatementResponseBodyData) GetRecords() *ExecuteStatementResponseBodyDataRecords {
	return s.Records
}

func (s *ExecuteStatementResponseBodyData) GetTotalNumRows() *int64 {
	return s.TotalNumRows
}

func (s *ExecuteStatementResponseBodyData) SetColumnMetadata(v *ExecuteStatementResponseBodyDataColumnMetadata) *ExecuteStatementResponseBodyData {
	s.ColumnMetadata = v
	return s
}

func (s *ExecuteStatementResponseBodyData) SetRecords(v *ExecuteStatementResponseBodyDataRecords) *ExecuteStatementResponseBodyData {
	s.Records = v
	return s
}

func (s *ExecuteStatementResponseBodyData) SetTotalNumRows(v int64) *ExecuteStatementResponseBodyData {
	s.TotalNumRows = &v
	return s
}

func (s *ExecuteStatementResponseBodyData) Validate() error {
	return dara.Validate(s)
}

type ExecuteStatementResponseBodyDataColumnMetadata struct {
	ColumnMetadata []*ColumnMetadata `json:"ColumnMetadata,omitempty" xml:"ColumnMetadata,omitempty" type:"Repeated"`
}

func (s ExecuteStatementResponseBodyDataColumnMetadata) String() string {
	return dara.Prettify(s)
}

func (s ExecuteStatementResponseBodyDataColumnMetadata) GoString() string {
	return s.String()
}

func (s *ExecuteStatementResponseBodyDataColumnMetadata) GetColumnMetadata() []*ColumnMetadata {
	return s.ColumnMetadata
}

func (s *ExecuteStatementResponseBodyDataColumnMetadata) SetColumnMetadata(v []*ColumnMetadata) *ExecuteStatementResponseBodyDataColumnMetadata {
	s.ColumnMetadata = v
	return s
}

func (s *ExecuteStatementResponseBodyDataColumnMetadata) Validate() error {
	return dara.Validate(s)
}

type ExecuteStatementResponseBodyDataRecords struct {
	Records []*ExecuteStatementResponseBodyDataRecordsRecords `json:"Records,omitempty" xml:"Records,omitempty" type:"Repeated"`
}

func (s ExecuteStatementResponseBodyDataRecords) String() string {
	return dara.Prettify(s)
}

func (s ExecuteStatementResponseBodyDataRecords) GoString() string {
	return s.String()
}

func (s *ExecuteStatementResponseBodyDataRecords) GetRecords() []*ExecuteStatementResponseBodyDataRecordsRecords {
	return s.Records
}

func (s *ExecuteStatementResponseBodyDataRecords) SetRecords(v []*ExecuteStatementResponseBodyDataRecordsRecords) *ExecuteStatementResponseBodyDataRecords {
	s.Records = v
	return s
}

func (s *ExecuteStatementResponseBodyDataRecords) Validate() error {
	return dara.Validate(s)
}

type ExecuteStatementResponseBodyDataRecordsRecords struct {
	Record []*Field `json:"Record,omitempty" xml:"Record,omitempty" type:"Repeated"`
}

func (s ExecuteStatementResponseBodyDataRecordsRecords) String() string {
	return dara.Prettify(s)
}

func (s ExecuteStatementResponseBodyDataRecordsRecords) GoString() string {
	return s.String()
}

func (s *ExecuteStatementResponseBodyDataRecordsRecords) GetRecord() []*Field {
	return s.Record
}

func (s *ExecuteStatementResponseBodyDataRecordsRecords) SetRecord(v []*Field) *ExecuteStatementResponseBodyDataRecordsRecords {
	s.Record = v
	return s
}

func (s *ExecuteStatementResponseBodyDataRecordsRecords) Validate() error {
	return dara.Validate(s)
}

type iExecuteStatementResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *ExecuteStatementResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *ExecuteStatementResponse
	GetStatusCode() *int32
	SetBody(v *ExecuteStatementResponseBody) *ExecuteStatementResponse
	GetBody() *ExecuteStatementResponseBody
}

type ExecuteStatementResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ExecuteStatementResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ExecuteStatementResponse) String() string {
	return dara.Prettify(s)
}

func (s ExecuteStatementResponse) GoString() string {
	return s.String()
}

func (s *ExecuteStatementResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *ExecuteStatementResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *ExecuteStatementResponse) GetBody() *ExecuteStatementResponseBody {
	return s.Body
}

func (s *ExecuteStatementResponse) SetHeaders(v map[string]*string) *ExecuteStatementResponse {
	s.Headers = v
	return s
}

func (s *ExecuteStatementResponse) SetStatusCode(v int32) *ExecuteStatementResponse {
	s.StatusCode = &v
	return s
}

func (s *ExecuteStatementResponse) SetBody(v *ExecuteStatementResponseBody) *ExecuteStatementResponse {
	s.Body = v
	return s
}

func (s *ExecuteStatementResponse) Validate() error {
	return dara.Validate(s)
}

type iGetAccountRequest interface {
	dara.Model
	String() string
	GoString() string
	SetAccountName(v string) *GetAccountRequest
	GetAccountName() *string
	SetDBInstanceId(v string) *GetAccountRequest
	GetDBInstanceId() *string
}

type GetAccountRequest struct {
	// The name of the database account.
	//
	// This parameter is required.
	//
	// example:
	//
	// testuser
	AccountName *string `json:"AccountName,omitempty" xml:"AccountName,omitempty"`
	// The instance ID.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the IDs of all AnalyticDB for PostgreSQL instances in a specific region.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
}

func (s GetAccountRequest) String() string {
	return dara.Prettify(s)
}

func (s GetAccountRequest) GoString() string {
	return s.String()
}

func (s *GetAccountRequest) GetAccountName() *string {
	return s.AccountName
}

func (s *GetAccountRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *GetAccountRequest) SetAccountName(v string) *GetAccountRequest {
	s.AccountName = &v
	return s
}

func (s *GetAccountRequest) SetDBInstanceId(v string) *GetAccountRequest {
	s.DBInstanceId = &v
	return s
}

func (s *GetAccountRequest) Validate() error {
	return dara.Validate(s)
}

type iGetAccountResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetAccountDescription(v string) *GetAccountResponseBody
	GetAccountDescription() *string
	SetAccountName(v string) *GetAccountResponseBody
	GetAccountName() *string
	SetAccountStatus(v string) *GetAccountResponseBody
	GetAccountStatus() *string
	SetAccountType(v string) *GetAccountResponseBody
	GetAccountType() *string
	SetDBInstanceId(v string) *GetAccountResponseBody
	GetDBInstanceId() *string
	SetRequestId(v string) *GetAccountResponseBody
	GetRequestId() *string
}

type GetAccountResponseBody struct {
	// The new description of the database account.
	//
	// 	- The description must start with a letter.
	//
	// 	- The description cannot start with `http://` or `https://`.
	//
	// 	- The description can contain letters, underscores (_), hyphens (-), and digits.
	//
	// 	- The description must be 2 to 256 characters in length.
	//
	// example:
	//
	// The instance used by this account to log in is DBInstanceId. The name used to log in is AccountName.
	AccountDescription *string `json:"AccountDescription,omitempty" xml:"AccountDescription,omitempty"`
	// The name of the initial account.
	//
	// 	- The name can contain lowercase letters, digits, and underscores (_).
	//
	// 	- The name must start with a lowercase letter and end with a lowercase letter or a digit.
	//
	// 	- The name cannot start with gp.
	//
	// 	- The name must be 2 to 16 characters in length.
	//
	// example:
	//
	// testaccount
	AccountName *string `json:"AccountName,omitempty" xml:"AccountName,omitempty"`
	// The status of the member that you want to query.
	//
	// 	- **enabled**: managed.
	//
	// 	- **disabled**: not managed.
	//
	// 	- **disabling**: being deleted.
	//
	// example:
	//
	// 1
	AccountStatus *string `json:"AccountStatus,omitempty" xml:"AccountStatus,omitempty"`
	// 	- Normal: standard account
	//
	// 	- Super: privileged account
	//
	// example:
	//
	// Normal
	AccountType *string `json:"AccountType,omitempty" xml:"AccountType,omitempty"`
	// The instance ID.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// Id of the request
	//
	// example:
	//
	// CA7E4276-E2D5-5F8D-AF06-9EAB3F6C****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetAccountResponseBody) String() string {
	return dara.Prettify(s)
}

func (s GetAccountResponseBody) GoString() string {
	return s.String()
}

func (s *GetAccountResponseBody) GetAccountDescription() *string {
	return s.AccountDescription
}

func (s *GetAccountResponseBody) GetAccountName() *string {
	return s.AccountName
}

func (s *GetAccountResponseBody) GetAccountStatus() *string {
	return s.AccountStatus
}

func (s *GetAccountResponseBody) GetAccountType() *string {
	return s.AccountType
}

func (s *GetAccountResponseBody) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *GetAccountResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *GetAccountResponseBody) SetAccountDescription(v string) *GetAccountResponseBody {
	s.AccountDescription = &v
	return s
}

func (s *GetAccountResponseBody) SetAccountName(v string) *GetAccountResponseBody {
	s.AccountName = &v
	return s
}

func (s *GetAccountResponseBody) SetAccountStatus(v string) *GetAccountResponseBody {
	s.AccountStatus = &v
	return s
}

func (s *GetAccountResponseBody) SetAccountType(v string) *GetAccountResponseBody {
	s.AccountType = &v
	return s
}

func (s *GetAccountResponseBody) SetDBInstanceId(v string) *GetAccountResponseBody {
	s.DBInstanceId = &v
	return s
}

func (s *GetAccountResponseBody) SetRequestId(v string) *GetAccountResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetAccountResponseBody) Validate() error {
	return dara.Validate(s)
}

type iGetAccountResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *GetAccountResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *GetAccountResponse
	GetStatusCode() *int32
	SetBody(v *GetAccountResponseBody) *GetAccountResponse
	GetBody() *GetAccountResponseBody
}

type GetAccountResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetAccountResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetAccountResponse) String() string {
	return dara.Prettify(s)
}

func (s GetAccountResponse) GoString() string {
	return s.String()
}

func (s *GetAccountResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *GetAccountResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *GetAccountResponse) GetBody() *GetAccountResponseBody {
	return s.Body
}

func (s *GetAccountResponse) SetHeaders(v map[string]*string) *GetAccountResponse {
	s.Headers = v
	return s
}

func (s *GetAccountResponse) SetStatusCode(v int32) *GetAccountResponse {
	s.StatusCode = &v
	return s
}

func (s *GetAccountResponse) SetBody(v *GetAccountResponseBody) *GetAccountResponse {
	s.Body = v
	return s
}

func (s *GetAccountResponse) Validate() error {
	return dara.Validate(s)
}

type iGetSecretValueRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *GetSecretValueRequest
	GetDBInstanceId() *string
	SetOwnerId(v int64) *GetSecretValueRequest
	GetOwnerId() *int64
	SetRegionId(v string) *GetSecretValueRequest
	GetRegionId() *string
	SetSecretArn(v string) *GetSecretValueRequest
	GetSecretArn() *string
	SetSecretName(v string) *GetSecretValueRequest
	GetSecretName() *string
	SetWorkspaceId(v string) *GetSecretValueRequest
	GetWorkspaceId() *string
}

type GetSecretValueRequest struct {
	// The instance ID.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The region ID of the instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-beijing
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The Alibaba Cloud Resource Name (ARN) of the access credential for the created Data API account. Format: `acs:gpdb:{{region}}:{{accountId}}:secret/{{secretName}}-{{32 digits random string}`.
	//
	// >  You must specify one of the SecretArn and SecretName parameters.
	//
	// example:
	//
	// acs:gpdb:cn-beijing:1033**:secret/testsecret-eG2AQGRIwQ0zFp4VA7mYL3uiCXTfDQbQ
	SecretArn *string `json:"SecretArn,omitempty" xml:"SecretArn,omitempty"`
	// The name of the access credential.
	//
	// >  You must specify one of the SecretArn and SecretName parameters.
	//
	// example:
	//
	// testsecret
	SecretName  *string `json:"SecretName,omitempty" xml:"SecretName,omitempty"`
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s GetSecretValueRequest) String() string {
	return dara.Prettify(s)
}

func (s GetSecretValueRequest) GoString() string {
	return s.String()
}

func (s *GetSecretValueRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *GetSecretValueRequest) GetOwnerId() *int64 {
	return s.OwnerId
}

func (s *GetSecretValueRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *GetSecretValueRequest) GetSecretArn() *string {
	return s.SecretArn
}

func (s *GetSecretValueRequest) GetSecretName() *string {
	return s.SecretName
}

func (s *GetSecretValueRequest) GetWorkspaceId() *string {
	return s.WorkspaceId
}

func (s *GetSecretValueRequest) SetDBInstanceId(v string) *GetSecretValueRequest {
	s.DBInstanceId = &v
	return s
}

func (s *GetSecretValueRequest) SetOwnerId(v int64) *GetSecretValueRequest {
	s.OwnerId = &v
	return s
}

func (s *GetSecretValueRequest) SetRegionId(v string) *GetSecretValueRequest {
	s.RegionId = &v
	return s
}

func (s *GetSecretValueRequest) SetSecretArn(v string) *GetSecretValueRequest {
	s.SecretArn = &v
	return s
}

func (s *GetSecretValueRequest) SetSecretName(v string) *GetSecretValueRequest {
	s.SecretName = &v
	return s
}

func (s *GetSecretValueRequest) SetWorkspaceId(v string) *GetSecretValueRequest {
	s.WorkspaceId = &v
	return s
}

func (s *GetSecretValueRequest) Validate() error {
	return dara.Validate(s)
}

type iGetSecretValueResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetCode(v string) *GetSecretValueResponseBody
	GetCode() *string
	SetDBInstanceId(v string) *GetSecretValueResponseBody
	GetDBInstanceId() *string
	SetDescription(v string) *GetSecretValueResponseBody
	GetDescription() *string
	SetMessage(v string) *GetSecretValueResponseBody
	GetMessage() *string
	SetPassword(v string) *GetSecretValueResponseBody
	GetPassword() *string
	SetRequestId(v string) *GetSecretValueResponseBody
	GetRequestId() *string
	SetSecretArn(v string) *GetSecretValueResponseBody
	GetSecretArn() *string
	SetSecretName(v string) *GetSecretValueResponseBody
	GetSecretName() *string
	SetStatus(v string) *GetSecretValueResponseBody
	GetStatus() *string
	SetUsername(v string) *GetSecretValueResponseBody
	GetUsername() *string
}

type GetSecretValueResponseBody struct {
	// The error code.
	//
	// example:
	//
	// Secret.NotFound
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The instance ID.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The description of the access credential.
	//
	// example:
	//
	// test secret
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The returned message.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The password of the database account.
	//
	// example:
	//
	// pwd123
	Password *string `json:"Password,omitempty" xml:"Password,omitempty"`
	// The request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The ARN of the access credential for the created Data API account. Format: `acs:gpdb:{{region}}:{{accountId}}:secret/{{secretName}}-{{32 digits random string}`.
	//
	// example:
	//
	// acs:gpdb:cn-beijing:1033**:secret/testsecret-eG2AQGRIwQ0zFp4VA7mYL3uiCXTfDQbQ
	SecretArn *string `json:"SecretArn,omitempty" xml:"SecretArn,omitempty"`
	// The name of the access credential.
	//
	// example:
	//
	// testsecret
	SecretName *string `json:"SecretName,omitempty" xml:"SecretName,omitempty"`
	// The status of the operation. Valid values:
	//
	// 	- **success**
	//
	// 	- **fail**
	//
	// example:
	//
	// success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The name of the database account.
	//
	// example:
	//
	// testacc
	Username *string `json:"Username,omitempty" xml:"Username,omitempty"`
}

func (s GetSecretValueResponseBody) String() string {
	return dara.Prettify(s)
}

func (s GetSecretValueResponseBody) GoString() string {
	return s.String()
}

func (s *GetSecretValueResponseBody) GetCode() *string {
	return s.Code
}

func (s *GetSecretValueResponseBody) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *GetSecretValueResponseBody) GetDescription() *string {
	return s.Description
}

func (s *GetSecretValueResponseBody) GetMessage() *string {
	return s.Message
}

func (s *GetSecretValueResponseBody) GetPassword() *string {
	return s.Password
}

func (s *GetSecretValueResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *GetSecretValueResponseBody) GetSecretArn() *string {
	return s.SecretArn
}

func (s *GetSecretValueResponseBody) GetSecretName() *string {
	return s.SecretName
}

func (s *GetSecretValueResponseBody) GetStatus() *string {
	return s.Status
}

func (s *GetSecretValueResponseBody) GetUsername() *string {
	return s.Username
}

func (s *GetSecretValueResponseBody) SetCode(v string) *GetSecretValueResponseBody {
	s.Code = &v
	return s
}

func (s *GetSecretValueResponseBody) SetDBInstanceId(v string) *GetSecretValueResponseBody {
	s.DBInstanceId = &v
	return s
}

func (s *GetSecretValueResponseBody) SetDescription(v string) *GetSecretValueResponseBody {
	s.Description = &v
	return s
}

func (s *GetSecretValueResponseBody) SetMessage(v string) *GetSecretValueResponseBody {
	s.Message = &v
	return s
}

func (s *GetSecretValueResponseBody) SetPassword(v string) *GetSecretValueResponseBody {
	s.Password = &v
	return s
}

func (s *GetSecretValueResponseBody) SetRequestId(v string) *GetSecretValueResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetSecretValueResponseBody) SetSecretArn(v string) *GetSecretValueResponseBody {
	s.SecretArn = &v
	return s
}

func (s *GetSecretValueResponseBody) SetSecretName(v string) *GetSecretValueResponseBody {
	s.SecretName = &v
	return s
}

func (s *GetSecretValueResponseBody) SetStatus(v string) *GetSecretValueResponseBody {
	s.Status = &v
	return s
}

func (s *GetSecretValueResponseBody) SetUsername(v string) *GetSecretValueResponseBody {
	s.Username = &v
	return s
}

func (s *GetSecretValueResponseBody) Validate() error {
	return dara.Validate(s)
}

type iGetSecretValueResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *GetSecretValueResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *GetSecretValueResponse
	GetStatusCode() *int32
	SetBody(v *GetSecretValueResponseBody) *GetSecretValueResponse
	GetBody() *GetSecretValueResponseBody
}

type GetSecretValueResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetSecretValueResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetSecretValueResponse) String() string {
	return dara.Prettify(s)
}

func (s GetSecretValueResponse) GoString() string {
	return s.String()
}

func (s *GetSecretValueResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *GetSecretValueResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *GetSecretValueResponse) GetBody() *GetSecretValueResponseBody {
	return s.Body
}

func (s *GetSecretValueResponse) SetHeaders(v map[string]*string) *GetSecretValueResponse {
	s.Headers = v
	return s
}

func (s *GetSecretValueResponse) SetStatusCode(v int32) *GetSecretValueResponse {
	s.StatusCode = &v
	return s
}

func (s *GetSecretValueResponse) SetBody(v *GetSecretValueResponseBody) *GetSecretValueResponse {
	s.Body = v
	return s
}

func (s *GetSecretValueResponse) Validate() error {
	return dara.Validate(s)
}

type iGetStatementResultRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *GetStatementResultRequest
	GetDBInstanceId() *string
	SetDatabase(v string) *GetStatementResultRequest
	GetDatabase() *string
	SetId(v string) *GetStatementResultRequest
	GetId() *string
	SetOwnerId(v int64) *GetStatementResultRequest
	GetOwnerId() *int64
	SetRegionId(v string) *GetStatementResultRequest
	GetRegionId() *string
	SetSecretArn(v string) *GetStatementResultRequest
	GetSecretArn() *string
}

type GetStatementResultRequest struct {
	// Instance ID. Can be obtained by calling DescribeDBInstances.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// Database name.
	//
	// example:
	//
	// test
	Database *string `json:"Database,omitempty" xml:"Database,omitempty"`
	// Task ID for asynchronous SQL execution.
	//
	// This parameter is required.
	//
	// example:
	//
	// 9A920F47-416A-4044-817C-7C2A72AD16D3
	Id      *string `json:"Id,omitempty" xml:"Id,omitempty"`
	OwnerId *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// Region ID where the instance is located.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-beijing
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// Access credential. Created through the CreateSecret interface.
	//
	// > When accessing this interface with a sub-account, the sub-account must have the UseSecret or GetSecretValue permission for this SecretArn.
	//
	// This parameter is required.
	//
	// example:
	//
	// acs:gpdb:cn-beijing:1033**:secret/testsecret-eG2AQGRIwQ0zFp4VA7mYL3uiCXTfDQbQ
	SecretArn *string `json:"SecretArn,omitempty" xml:"SecretArn,omitempty"`
}

func (s GetStatementResultRequest) String() string {
	return dara.Prettify(s)
}

func (s GetStatementResultRequest) GoString() string {
	return s.String()
}

func (s *GetStatementResultRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *GetStatementResultRequest) GetDatabase() *string {
	return s.Database
}

func (s *GetStatementResultRequest) GetId() *string {
	return s.Id
}

func (s *GetStatementResultRequest) GetOwnerId() *int64 {
	return s.OwnerId
}

func (s *GetStatementResultRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *GetStatementResultRequest) GetSecretArn() *string {
	return s.SecretArn
}

func (s *GetStatementResultRequest) SetDBInstanceId(v string) *GetStatementResultRequest {
	s.DBInstanceId = &v
	return s
}

func (s *GetStatementResultRequest) SetDatabase(v string) *GetStatementResultRequest {
	s.Database = &v
	return s
}

func (s *GetStatementResultRequest) SetId(v string) *GetStatementResultRequest {
	s.Id = &v
	return s
}

func (s *GetStatementResultRequest) SetOwnerId(v int64) *GetStatementResultRequest {
	s.OwnerId = &v
	return s
}

func (s *GetStatementResultRequest) SetRegionId(v string) *GetStatementResultRequest {
	s.RegionId = &v
	return s
}

func (s *GetStatementResultRequest) SetSecretArn(v string) *GetStatementResultRequest {
	s.SecretArn = &v
	return s
}

func (s *GetStatementResultRequest) Validate() error {
	return dara.Validate(s)
}

type iGetStatementResultResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetData(v *GetStatementResultResponseBodyData) *GetStatementResultResponseBody
	GetData() *GetStatementResultResponseBodyData
	SetMessage(v string) *GetStatementResultResponseBody
	GetMessage() *string
	SetRequestId(v string) *GetStatementResultResponseBody
	GetRequestId() *string
	SetStatus(v string) *GetStatementResultResponseBody
	GetStatus() *string
}

type GetStatementResultResponseBody struct {
	// The result of the asynchronous call.
	Data *GetStatementResultResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// Return message.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// API execution status, with values as follows:
	//
	// - **false**: Execution failed.
	//
	// - **true**: Execution succeeded.
	//
	// example:
	//
	// success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetStatementResultResponseBody) String() string {
	return dara.Prettify(s)
}

func (s GetStatementResultResponseBody) GoString() string {
	return s.String()
}

func (s *GetStatementResultResponseBody) GetData() *GetStatementResultResponseBodyData {
	return s.Data
}

func (s *GetStatementResultResponseBody) GetMessage() *string {
	return s.Message
}

func (s *GetStatementResultResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *GetStatementResultResponseBody) GetStatus() *string {
	return s.Status
}

func (s *GetStatementResultResponseBody) SetData(v *GetStatementResultResponseBodyData) *GetStatementResultResponseBody {
	s.Data = v
	return s
}

func (s *GetStatementResultResponseBody) SetMessage(v string) *GetStatementResultResponseBody {
	s.Message = &v
	return s
}

func (s *GetStatementResultResponseBody) SetRequestId(v string) *GetStatementResultResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetStatementResultResponseBody) SetStatus(v string) *GetStatementResultResponseBody {
	s.Status = &v
	return s
}

func (s *GetStatementResultResponseBody) Validate() error {
	return dara.Validate(s)
}

type GetStatementResultResponseBodyData struct {
	// List of column metadata.
	ColumnMetadata *GetStatementResultResponseBodyDataColumnMetadata `json:"ColumnMetadata,omitempty" xml:"ColumnMetadata,omitempty" type:"Struct"`
	// Multiple rows of data.
	Records *GetStatementResultResponseBodyDataRecords `json:"Records,omitempty" xml:"Records,omitempty" type:"Struct"`
	// Total number of entries.
	//
	// example:
	//
	// 10
	TotalNumRows *int64 `json:"TotalNumRows,omitempty" xml:"TotalNumRows,omitempty"`
}

func (s GetStatementResultResponseBodyData) String() string {
	return dara.Prettify(s)
}

func (s GetStatementResultResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetStatementResultResponseBodyData) GetColumnMetadata() *GetStatementResultResponseBodyDataColumnMetadata {
	return s.ColumnMetadata
}

func (s *GetStatementResultResponseBodyData) GetRecords() *GetStatementResultResponseBodyDataRecords {
	return s.Records
}

func (s *GetStatementResultResponseBodyData) GetTotalNumRows() *int64 {
	return s.TotalNumRows
}

func (s *GetStatementResultResponseBodyData) SetColumnMetadata(v *GetStatementResultResponseBodyDataColumnMetadata) *GetStatementResultResponseBodyData {
	s.ColumnMetadata = v
	return s
}

func (s *GetStatementResultResponseBodyData) SetRecords(v *GetStatementResultResponseBodyDataRecords) *GetStatementResultResponseBodyData {
	s.Records = v
	return s
}

func (s *GetStatementResultResponseBodyData) SetTotalNumRows(v int64) *GetStatementResultResponseBodyData {
	s.TotalNumRows = &v
	return s
}

func (s *GetStatementResultResponseBodyData) Validate() error {
	return dara.Validate(s)
}

type GetStatementResultResponseBodyDataColumnMetadata struct {
	ColumnMetadata []*ColumnMetadata `json:"ColumnMetadata,omitempty" xml:"ColumnMetadata,omitempty" type:"Repeated"`
}

func (s GetStatementResultResponseBodyDataColumnMetadata) String() string {
	return dara.Prettify(s)
}

func (s GetStatementResultResponseBodyDataColumnMetadata) GoString() string {
	return s.String()
}

func (s *GetStatementResultResponseBodyDataColumnMetadata) GetColumnMetadata() []*ColumnMetadata {
	return s.ColumnMetadata
}

func (s *GetStatementResultResponseBodyDataColumnMetadata) SetColumnMetadata(v []*ColumnMetadata) *GetStatementResultResponseBodyDataColumnMetadata {
	s.ColumnMetadata = v
	return s
}

func (s *GetStatementResultResponseBodyDataColumnMetadata) Validate() error {
	return dara.Validate(s)
}

type GetStatementResultResponseBodyDataRecords struct {
	Records []*GetStatementResultResponseBodyDataRecordsRecords `json:"Records,omitempty" xml:"Records,omitempty" type:"Repeated"`
}

func (s GetStatementResultResponseBodyDataRecords) String() string {
	return dara.Prettify(s)
}

func (s GetStatementResultResponseBodyDataRecords) GoString() string {
	return s.String()
}

func (s *GetStatementResultResponseBodyDataRecords) GetRecords() []*GetStatementResultResponseBodyDataRecordsRecords {
	return s.Records
}

func (s *GetStatementResultResponseBodyDataRecords) SetRecords(v []*GetStatementResultResponseBodyDataRecordsRecords) *GetStatementResultResponseBodyDataRecords {
	s.Records = v
	return s
}

func (s *GetStatementResultResponseBodyDataRecords) Validate() error {
	return dara.Validate(s)
}

type GetStatementResultResponseBodyDataRecordsRecords struct {
	Record []*Field `json:"Record,omitempty" xml:"Record,omitempty" type:"Repeated"`
}

func (s GetStatementResultResponseBodyDataRecordsRecords) String() string {
	return dara.Prettify(s)
}

func (s GetStatementResultResponseBodyDataRecordsRecords) GoString() string {
	return s.String()
}

func (s *GetStatementResultResponseBodyDataRecordsRecords) GetRecord() []*Field {
	return s.Record
}

func (s *GetStatementResultResponseBodyDataRecordsRecords) SetRecord(v []*Field) *GetStatementResultResponseBodyDataRecordsRecords {
	s.Record = v
	return s
}

func (s *GetStatementResultResponseBodyDataRecordsRecords) Validate() error {
	return dara.Validate(s)
}

type iGetStatementResultResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *GetStatementResultResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *GetStatementResultResponse
	GetStatusCode() *int32
	SetBody(v *GetStatementResultResponseBody) *GetStatementResultResponse
	GetBody() *GetStatementResultResponseBody
}

type GetStatementResultResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetStatementResultResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetStatementResultResponse) String() string {
	return dara.Prettify(s)
}

func (s GetStatementResultResponse) GoString() string {
	return s.String()
}

func (s *GetStatementResultResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *GetStatementResultResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *GetStatementResultResponse) GetBody() *GetStatementResultResponseBody {
	return s.Body
}

func (s *GetStatementResultResponse) SetHeaders(v map[string]*string) *GetStatementResultResponse {
	s.Headers = v
	return s
}

func (s *GetStatementResultResponse) SetStatusCode(v int32) *GetStatementResultResponse {
	s.StatusCode = &v
	return s
}

func (s *GetStatementResultResponse) SetBody(v *GetStatementResultResponseBody) *GetStatementResultResponse {
	s.Body = v
	return s
}

func (s *GetStatementResultResponse) Validate() error {
	return dara.Validate(s)
}

type iGetUploadDocumentJobRequest interface {
	dara.Model
	String() string
	GoString() string
	SetCollection(v string) *GetUploadDocumentJobRequest
	GetCollection() *string
	SetDBInstanceId(v string) *GetUploadDocumentJobRequest
	GetDBInstanceId() *string
	SetJobId(v string) *GetUploadDocumentJobRequest
	GetJobId() *string
	SetNamespace(v string) *GetUploadDocumentJobRequest
	GetNamespace() *string
	SetNamespacePassword(v string) *GetUploadDocumentJobRequest
	GetNamespacePassword() *string
	SetOwnerId(v int64) *GetUploadDocumentJobRequest
	GetOwnerId() *int64
	SetRegionId(v string) *GetUploadDocumentJobRequest
	GetRegionId() *string
}

type GetUploadDocumentJobRequest struct {
	// The name of the document collection.
	//
	// >  You can call the [CreateDocumentCollection](https://help.aliyun.com/document_detail/2618448.html) operation to create a document collection and call the [ListDocumentCollections](https://help.aliyun.com/document_detail/2618452.html) operation to query a list of document collections.
	//
	// This parameter is required.
	//
	// example:
	//
	// document
	Collection *string `json:"Collection,omitempty" xml:"Collection,omitempty"`
	// The ID of the instance for which vector engine optimization is enabled.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The ID of the document upload job. You can call the `UploadDocumentAsync` operation to query the job ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// bf8f7bc4-9276-44f7-9c22-1d06edc8dfd1
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// The name of the namespace. Default value: public.
	//
	// >  You can call the [CreateNamespace](https://help.aliyun.com/document_detail/2401495.html) operation to create a namespace and call the [ListNamespaces](https://help.aliyun.com/document_detail/2401502.html) operation to query a list of namespaces.
	//
	// example:
	//
	// mynamespace
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// The password of the namespace.
	//
	// >  The value of this parameter is specified when you call the CreateNamespace operation.
	//
	// This parameter is required.
	//
	// example:
	//
	// testpassword
	NamespacePassword *string `json:"NamespacePassword,omitempty" xml:"NamespacePassword,omitempty"`
	OwnerId           *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The region ID of the instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s GetUploadDocumentJobRequest) String() string {
	return dara.Prettify(s)
}

func (s GetUploadDocumentJobRequest) GoString() string {
	return s.String()
}

func (s *GetUploadDocumentJobRequest) GetCollection() *string {
	return s.Collection
}

func (s *GetUploadDocumentJobRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *GetUploadDocumentJobRequest) GetJobId() *string {
	return s.JobId
}

func (s *GetUploadDocumentJobRequest) GetNamespace() *string {
	return s.Namespace
}

func (s *GetUploadDocumentJobRequest) GetNamespacePassword() *string {
	return s.NamespacePassword
}

func (s *GetUploadDocumentJobRequest) GetOwnerId() *int64 {
	return s.OwnerId
}

func (s *GetUploadDocumentJobRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *GetUploadDocumentJobRequest) SetCollection(v string) *GetUploadDocumentJobRequest {
	s.Collection = &v
	return s
}

func (s *GetUploadDocumentJobRequest) SetDBInstanceId(v string) *GetUploadDocumentJobRequest {
	s.DBInstanceId = &v
	return s
}

func (s *GetUploadDocumentJobRequest) SetJobId(v string) *GetUploadDocumentJobRequest {
	s.JobId = &v
	return s
}

func (s *GetUploadDocumentJobRequest) SetNamespace(v string) *GetUploadDocumentJobRequest {
	s.Namespace = &v
	return s
}

func (s *GetUploadDocumentJobRequest) SetNamespacePassword(v string) *GetUploadDocumentJobRequest {
	s.NamespacePassword = &v
	return s
}

func (s *GetUploadDocumentJobRequest) SetOwnerId(v int64) *GetUploadDocumentJobRequest {
	s.OwnerId = &v
	return s
}

func (s *GetUploadDocumentJobRequest) SetRegionId(v string) *GetUploadDocumentJobRequest {
	s.RegionId = &v
	return s
}

func (s *GetUploadDocumentJobRequest) Validate() error {
	return dara.Validate(s)
}

type iGetUploadDocumentJobResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetChunkResult(v *GetUploadDocumentJobResponseBodyChunkResult) *GetUploadDocumentJobResponseBody
	GetChunkResult() *GetUploadDocumentJobResponseBodyChunkResult
	SetJob(v *GetUploadDocumentJobResponseBodyJob) *GetUploadDocumentJobResponseBody
	GetJob() *GetUploadDocumentJobResponseBodyJob
	SetMessage(v string) *GetUploadDocumentJobResponseBody
	GetMessage() *string
	SetRequestId(v string) *GetUploadDocumentJobResponseBody
	GetRequestId() *string
	SetStatus(v string) *GetUploadDocumentJobResponseBody
	GetStatus() *string
	SetUsage(v *GetUploadDocumentJobResponseBodyUsage) *GetUploadDocumentJobResponseBody
	GetUsage() *GetUploadDocumentJobResponseBodyUsage
}

type GetUploadDocumentJobResponseBody struct {
	// The chunking result.
	ChunkResult *GetUploadDocumentJobResponseBodyChunkResult `json:"ChunkResult,omitempty" xml:"ChunkResult,omitempty" type:"Struct"`
	// The information about the document upload job.
	Job *GetUploadDocumentJobResponseBodyJob `json:"Job,omitempty" xml:"Job,omitempty" type:"Struct"`
	// The returned message.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The status of the operation. Valid values:
	//
	// 	- **success**
	//
	// 	- **fail**
	//
	// example:
	//
	// success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The number of tokens that are used for document understanding or embedding.
	Usage *GetUploadDocumentJobResponseBodyUsage `json:"Usage,omitempty" xml:"Usage,omitempty" type:"Struct"`
}

func (s GetUploadDocumentJobResponseBody) String() string {
	return dara.Prettify(s)
}

func (s GetUploadDocumentJobResponseBody) GoString() string {
	return s.String()
}

func (s *GetUploadDocumentJobResponseBody) GetChunkResult() *GetUploadDocumentJobResponseBodyChunkResult {
	return s.ChunkResult
}

func (s *GetUploadDocumentJobResponseBody) GetJob() *GetUploadDocumentJobResponseBodyJob {
	return s.Job
}

func (s *GetUploadDocumentJobResponseBody) GetMessage() *string {
	return s.Message
}

func (s *GetUploadDocumentJobResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *GetUploadDocumentJobResponseBody) GetStatus() *string {
	return s.Status
}

func (s *GetUploadDocumentJobResponseBody) GetUsage() *GetUploadDocumentJobResponseBodyUsage {
	return s.Usage
}

func (s *GetUploadDocumentJobResponseBody) SetChunkResult(v *GetUploadDocumentJobResponseBodyChunkResult) *GetUploadDocumentJobResponseBody {
	s.ChunkResult = v
	return s
}

func (s *GetUploadDocumentJobResponseBody) SetJob(v *GetUploadDocumentJobResponseBodyJob) *GetUploadDocumentJobResponseBody {
	s.Job = v
	return s
}

func (s *GetUploadDocumentJobResponseBody) SetMessage(v string) *GetUploadDocumentJobResponseBody {
	s.Message = &v
	return s
}

func (s *GetUploadDocumentJobResponseBody) SetRequestId(v string) *GetUploadDocumentJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetUploadDocumentJobResponseBody) SetStatus(v string) *GetUploadDocumentJobResponseBody {
	s.Status = &v
	return s
}

func (s *GetUploadDocumentJobResponseBody) SetUsage(v *GetUploadDocumentJobResponseBodyUsage) *GetUploadDocumentJobResponseBody {
	s.Usage = v
	return s
}

func (s *GetUploadDocumentJobResponseBody) Validate() error {
	return dara.Validate(s)
}

type GetUploadDocumentJobResponseBodyChunkResult struct {
	// The URL of the file after chunking. The validity period of the URL is 2 hours. The file is in the JSONL format. Each line is in the `{"page_content":"*****", "metadata": {"**":"***","**":"***"}` format.
	//
	// example:
	//
	// http://xxx/test.jsonl
	ChunkFileUrl *string `json:"ChunkFileUrl,omitempty" xml:"ChunkFileUrl,omitempty"`
	// The URL of the file that does not contain metadata after chunking. The validity period of the URL is 2 hours. The file is in the TXT format. Each line is a chunk. The file can be easily used for embedding.
	//
	// example:
	//
	// http://xxx/test.txt
	PlainChunkFileUrl *string `json:"PlainChunkFileUrl,omitempty" xml:"PlainChunkFileUrl,omitempty"`
}

func (s GetUploadDocumentJobResponseBodyChunkResult) String() string {
	return dara.Prettify(s)
}

func (s GetUploadDocumentJobResponseBodyChunkResult) GoString() string {
	return s.String()
}

func (s *GetUploadDocumentJobResponseBodyChunkResult) GetChunkFileUrl() *string {
	return s.ChunkFileUrl
}

func (s *GetUploadDocumentJobResponseBodyChunkResult) GetPlainChunkFileUrl() *string {
	return s.PlainChunkFileUrl
}

func (s *GetUploadDocumentJobResponseBodyChunkResult) SetChunkFileUrl(v string) *GetUploadDocumentJobResponseBodyChunkResult {
	s.ChunkFileUrl = &v
	return s
}

func (s *GetUploadDocumentJobResponseBodyChunkResult) SetPlainChunkFileUrl(v string) *GetUploadDocumentJobResponseBodyChunkResult {
	s.PlainChunkFileUrl = &v
	return s
}

func (s *GetUploadDocumentJobResponseBodyChunkResult) Validate() error {
	return dara.Validate(s)
}

type GetUploadDocumentJobResponseBodyJob struct {
	// Indicates whether the operation is complete.
	//
	// example:
	//
	// false
	Completed *bool `json:"Completed,omitempty" xml:"Completed,omitempty"`
	// The time when the job was created.
	//
	// example:
	//
	// 2024-01-08 16:52:04.864664
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The error message.
	//
	// example:
	//
	// Failed to connect database.
	Error *string `json:"Error,omitempty" xml:"Error,omitempty"`
	// The error code.
	//
	// example:
	//
	// InternalError
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// The job ID.
	//
	// example:
	//
	// 231460f8-75dc-405e-a669-0c5204887e91
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// The progress of the document upload job. Unit: %. A value of 100 indicates that the job is complete.
	//
	// example:
	//
	// 20
	Progress *int32 `json:"Progress,omitempty" xml:"Progress,omitempty"`
	// The status of the job. Valid values: Valid values:
	//
	// 	- Success
	//
	// 	- Failed (See the Error parameter for failure reasons.)
	//
	// 	- Cancelling
	//
	// 	- Cancelled
	//
	// 	- Start
	//
	// 	- Running
	//
	// 	- Pending
	//
	// example:
	//
	// Running
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The time when the job was updated.
	//
	// example:
	//
	// 2024-01-08 16:53:04.864664
	UpdateTime *string `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
}

func (s GetUploadDocumentJobResponseBodyJob) String() string {
	return dara.Prettify(s)
}

func (s GetUploadDocumentJobResponseBodyJob) GoString() string {
	return s.String()
}

func (s *GetUploadDocumentJobResponseBodyJob) GetCompleted() *bool {
	return s.Completed
}

func (s *GetUploadDocumentJobResponseBodyJob) GetCreateTime() *string {
	return s.CreateTime
}

func (s *GetUploadDocumentJobResponseBodyJob) GetError() *string {
	return s.Error
}

func (s *GetUploadDocumentJobResponseBodyJob) GetErrorCode() *string {
	return s.ErrorCode
}

func (s *GetUploadDocumentJobResponseBodyJob) GetId() *string {
	return s.Id
}

func (s *GetUploadDocumentJobResponseBodyJob) GetProgress() *int32 {
	return s.Progress
}

func (s *GetUploadDocumentJobResponseBodyJob) GetStatus() *string {
	return s.Status
}

func (s *GetUploadDocumentJobResponseBodyJob) GetUpdateTime() *string {
	return s.UpdateTime
}

func (s *GetUploadDocumentJobResponseBodyJob) SetCompleted(v bool) *GetUploadDocumentJobResponseBodyJob {
	s.Completed = &v
	return s
}

func (s *GetUploadDocumentJobResponseBodyJob) SetCreateTime(v string) *GetUploadDocumentJobResponseBodyJob {
	s.CreateTime = &v
	return s
}

func (s *GetUploadDocumentJobResponseBodyJob) SetError(v string) *GetUploadDocumentJobResponseBodyJob {
	s.Error = &v
	return s
}

func (s *GetUploadDocumentJobResponseBodyJob) SetErrorCode(v string) *GetUploadDocumentJobResponseBodyJob {
	s.ErrorCode = &v
	return s
}

func (s *GetUploadDocumentJobResponseBodyJob) SetId(v string) *GetUploadDocumentJobResponseBodyJob {
	s.Id = &v
	return s
}

func (s *GetUploadDocumentJobResponseBodyJob) SetProgress(v int32) *GetUploadDocumentJobResponseBodyJob {
	s.Progress = &v
	return s
}

func (s *GetUploadDocumentJobResponseBodyJob) SetStatus(v string) *GetUploadDocumentJobResponseBodyJob {
	s.Status = &v
	return s
}

func (s *GetUploadDocumentJobResponseBodyJob) SetUpdateTime(v string) *GetUploadDocumentJobResponseBodyJob {
	s.UpdateTime = &v
	return s
}

func (s *GetUploadDocumentJobResponseBodyJob) Validate() error {
	return dara.Validate(s)
}

type GetUploadDocumentJobResponseBodyUsage struct {
	// The count of embedding entries.
	//
	// example:
	//
	// 10
	EmbeddingEntries *int32 `json:"EmbeddingEntries,omitempty" xml:"EmbeddingEntries,omitempty"`
	// The number of tokens that are used for vectorization.
	//
	// >  A token is the minimum unit for splitting text. A token can be a word, phrase, punctuation, or character.
	//
	// example:
	//
	// 475
	EmbeddingTokens *int32 `json:"EmbeddingTokens,omitempty" xml:"EmbeddingTokens,omitempty"`
}

func (s GetUploadDocumentJobResponseBodyUsage) String() string {
	return dara.Prettify(s)
}

func (s GetUploadDocumentJobResponseBodyUsage) GoString() string {
	return s.String()
}

func (s *GetUploadDocumentJobResponseBodyUsage) GetEmbeddingEntries() *int32 {
	return s.EmbeddingEntries
}

func (s *GetUploadDocumentJobResponseBodyUsage) GetEmbeddingTokens() *int32 {
	return s.EmbeddingTokens
}

func (s *GetUploadDocumentJobResponseBodyUsage) SetEmbeddingEntries(v int32) *GetUploadDocumentJobResponseBodyUsage {
	s.EmbeddingEntries = &v
	return s
}

func (s *GetUploadDocumentJobResponseBodyUsage) SetEmbeddingTokens(v int32) *GetUploadDocumentJobResponseBodyUsage {
	s.EmbeddingTokens = &v
	return s
}

func (s *GetUploadDocumentJobResponseBodyUsage) Validate() error {
	return dara.Validate(s)
}

type iGetUploadDocumentJobResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *GetUploadDocumentJobResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *GetUploadDocumentJobResponse
	GetStatusCode() *int32
	SetBody(v *GetUploadDocumentJobResponseBody) *GetUploadDocumentJobResponse
	GetBody() *GetUploadDocumentJobResponseBody
}

type GetUploadDocumentJobResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetUploadDocumentJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetUploadDocumentJobResponse) String() string {
	return dara.Prettify(s)
}

func (s GetUploadDocumentJobResponse) GoString() string {
	return s.String()
}

func (s *GetUploadDocumentJobResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *GetUploadDocumentJobResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *GetUploadDocumentJobResponse) GetBody() *GetUploadDocumentJobResponseBody {
	return s.Body
}

func (s *GetUploadDocumentJobResponse) SetHeaders(v map[string]*string) *GetUploadDocumentJobResponse {
	s.Headers = v
	return s
}

func (s *GetUploadDocumentJobResponse) SetStatusCode(v int32) *GetUploadDocumentJobResponse {
	s.StatusCode = &v
	return s
}

func (s *GetUploadDocumentJobResponse) SetBody(v *GetUploadDocumentJobResponseBody) *GetUploadDocumentJobResponse {
	s.Body = v
	return s
}

func (s *GetUploadDocumentJobResponse) Validate() error {
	return dara.Validate(s)
}

type iGetUpsertCollectionDataJobRequest interface {
	dara.Model
	String() string
	GoString() string
	SetCollection(v string) *GetUpsertCollectionDataJobRequest
	GetCollection() *string
	SetDBInstanceId(v string) *GetUpsertCollectionDataJobRequest
	GetDBInstanceId() *string
	SetJobId(v string) *GetUpsertCollectionDataJobRequest
	GetJobId() *string
	SetNamespace(v string) *GetUpsertCollectionDataJobRequest
	GetNamespace() *string
	SetNamespacePassword(v string) *GetUpsertCollectionDataJobRequest
	GetNamespacePassword() *string
	SetOwnerId(v int64) *GetUpsertCollectionDataJobRequest
	GetOwnerId() *int64
	SetRegionId(v string) *GetUpsertCollectionDataJobRequest
	GetRegionId() *string
	SetWorkspaceId(v string) *GetUpsertCollectionDataJobRequest
	GetWorkspaceId() *string
}

type GetUpsertCollectionDataJobRequest struct {
	// The name of the collection.
	//
	// >  You can call the [ListCollections](https://help.aliyun.com/document_detail/2401503.html) operation to query a list of collections.
	//
	// This parameter is required.
	//
	// example:
	//
	// document
	Collection *string `json:"Collection,omitempty" xml:"Collection,omitempty"`
	// The instance ID.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The ID of the vector data upload job. You can call the `UpsertCollectionDataAsync` operation to query the job ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 231460f8-75dc-405e-a669-0c5204887e91
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// The name of the namespace. Default value: public.
	//
	// >  You can call the CreateNamespace operation to create a namespace and call the ListNamespaces operation to query a list of namespaces.
	//
	// example:
	//
	// mynamespace
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// The password of the namespace.
	//
	// >  The value of this parameter is specified when you call the CreateNamespace operation.
	//
	// This parameter is required.
	//
	// example:
	//
	// testpassword
	NamespacePassword *string `json:"NamespacePassword,omitempty" xml:"NamespacePassword,omitempty"`
	OwnerId           *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The region ID of the instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the workspace that consists of multiple AnalyticDB for PostgreSQL instances. You must specify one of the WorkspaceId and DBInstanceId parameters. If you specify both parameters, the WorkspaceId parameter takes effect.
	//
	// example:
	//
	// gp-ws-*****
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s GetUpsertCollectionDataJobRequest) String() string {
	return dara.Prettify(s)
}

func (s GetUpsertCollectionDataJobRequest) GoString() string {
	return s.String()
}

func (s *GetUpsertCollectionDataJobRequest) GetCollection() *string {
	return s.Collection
}

func (s *GetUpsertCollectionDataJobRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *GetUpsertCollectionDataJobRequest) GetJobId() *string {
	return s.JobId
}

func (s *GetUpsertCollectionDataJobRequest) GetNamespace() *string {
	return s.Namespace
}

func (s *GetUpsertCollectionDataJobRequest) GetNamespacePassword() *string {
	return s.NamespacePassword
}

func (s *GetUpsertCollectionDataJobRequest) GetOwnerId() *int64 {
	return s.OwnerId
}

func (s *GetUpsertCollectionDataJobRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *GetUpsertCollectionDataJobRequest) GetWorkspaceId() *string {
	return s.WorkspaceId
}

func (s *GetUpsertCollectionDataJobRequest) SetCollection(v string) *GetUpsertCollectionDataJobRequest {
	s.Collection = &v
	return s
}

func (s *GetUpsertCollectionDataJobRequest) SetDBInstanceId(v string) *GetUpsertCollectionDataJobRequest {
	s.DBInstanceId = &v
	return s
}

func (s *GetUpsertCollectionDataJobRequest) SetJobId(v string) *GetUpsertCollectionDataJobRequest {
	s.JobId = &v
	return s
}

func (s *GetUpsertCollectionDataJobRequest) SetNamespace(v string) *GetUpsertCollectionDataJobRequest {
	s.Namespace = &v
	return s
}

func (s *GetUpsertCollectionDataJobRequest) SetNamespacePassword(v string) *GetUpsertCollectionDataJobRequest {
	s.NamespacePassword = &v
	return s
}

func (s *GetUpsertCollectionDataJobRequest) SetOwnerId(v int64) *GetUpsertCollectionDataJobRequest {
	s.OwnerId = &v
	return s
}

func (s *GetUpsertCollectionDataJobRequest) SetRegionId(v string) *GetUpsertCollectionDataJobRequest {
	s.RegionId = &v
	return s
}

func (s *GetUpsertCollectionDataJobRequest) SetWorkspaceId(v string) *GetUpsertCollectionDataJobRequest {
	s.WorkspaceId = &v
	return s
}

func (s *GetUpsertCollectionDataJobRequest) Validate() error {
	return dara.Validate(s)
}

type iGetUpsertCollectionDataJobResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetJob(v *GetUpsertCollectionDataJobResponseBodyJob) *GetUpsertCollectionDataJobResponseBody
	GetJob() *GetUpsertCollectionDataJobResponseBodyJob
	SetMessage(v string) *GetUpsertCollectionDataJobResponseBody
	GetMessage() *string
	SetRequestId(v string) *GetUpsertCollectionDataJobResponseBody
	GetRequestId() *string
	SetStatus(v string) *GetUpsertCollectionDataJobResponseBody
	GetStatus() *string
}

type GetUpsertCollectionDataJobResponseBody struct {
	// The information about the vector data upload job.
	Job *GetUpsertCollectionDataJobResponseBodyJob `json:"Job,omitempty" xml:"Job,omitempty" type:"Struct"`
	// The returned message.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The status of the operation. Valid values:
	//
	// 	- **success**
	//
	// 	- **fail**
	//
	// example:
	//
	// success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetUpsertCollectionDataJobResponseBody) String() string {
	return dara.Prettify(s)
}

func (s GetUpsertCollectionDataJobResponseBody) GoString() string {
	return s.String()
}

func (s *GetUpsertCollectionDataJobResponseBody) GetJob() *GetUpsertCollectionDataJobResponseBodyJob {
	return s.Job
}

func (s *GetUpsertCollectionDataJobResponseBody) GetMessage() *string {
	return s.Message
}

func (s *GetUpsertCollectionDataJobResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *GetUpsertCollectionDataJobResponseBody) GetStatus() *string {
	return s.Status
}

func (s *GetUpsertCollectionDataJobResponseBody) SetJob(v *GetUpsertCollectionDataJobResponseBodyJob) *GetUpsertCollectionDataJobResponseBody {
	s.Job = v
	return s
}

func (s *GetUpsertCollectionDataJobResponseBody) SetMessage(v string) *GetUpsertCollectionDataJobResponseBody {
	s.Message = &v
	return s
}

func (s *GetUpsertCollectionDataJobResponseBody) SetRequestId(v string) *GetUpsertCollectionDataJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetUpsertCollectionDataJobResponseBody) SetStatus(v string) *GetUpsertCollectionDataJobResponseBody {
	s.Status = &v
	return s
}

func (s *GetUpsertCollectionDataJobResponseBody) Validate() error {
	return dara.Validate(s)
}

type GetUpsertCollectionDataJobResponseBodyJob struct {
	// Indicates whether the operation is complete.
	//
	// example:
	//
	// false
	Completed *bool `json:"Completed,omitempty" xml:"Completed,omitempty"`
	// The time when the job was created.
	//
	// example:
	//
	// 2024-01-08 16:52:04.864664
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The error message.
	//
	// example:
	//
	// Failed to connect database.
	Error *string `json:"Error,omitempty" xml:"Error,omitempty"`
	// The job ID.
	//
	// example:
	//
	// 231460f8-75dc-405e-a669-0c5204887e91
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// The progress of the vector data upload job. The value of this parameter indicates the number of data entries that have been uploaded.
	//
	// example:
	//
	// 1600
	Progress *int32 `json:"Progress,omitempty" xml:"Progress,omitempty"`
	// The status of the job.
	//
	// >  Valid values:
	//
	// 	- Success
	//
	// 	- Failed (See the Error parameter for failure reasons.)
	//
	// 	- Cancelling
	//
	// 	- Cancelled
	//
	// 	- Start
	//
	// 	- Running
	//
	// example:
	//
	// Success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The time when the job was updated.
	//
	// example:
	//
	// 2024-01-08 16:53:04.864664
	UpdateTime *string `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
}

func (s GetUpsertCollectionDataJobResponseBodyJob) String() string {
	return dara.Prettify(s)
}

func (s GetUpsertCollectionDataJobResponseBodyJob) GoString() string {
	return s.String()
}

func (s *GetUpsertCollectionDataJobResponseBodyJob) GetCompleted() *bool {
	return s.Completed
}

func (s *GetUpsertCollectionDataJobResponseBodyJob) GetCreateTime() *string {
	return s.CreateTime
}

func (s *GetUpsertCollectionDataJobResponseBodyJob) GetError() *string {
	return s.Error
}

func (s *GetUpsertCollectionDataJobResponseBodyJob) GetId() *string {
	return s.Id
}

func (s *GetUpsertCollectionDataJobResponseBodyJob) GetProgress() *int32 {
	return s.Progress
}

func (s *GetUpsertCollectionDataJobResponseBodyJob) GetStatus() *string {
	return s.Status
}

func (s *GetUpsertCollectionDataJobResponseBodyJob) GetUpdateTime() *string {
	return s.UpdateTime
}

func (s *GetUpsertCollectionDataJobResponseBodyJob) SetCompleted(v bool) *GetUpsertCollectionDataJobResponseBodyJob {
	s.Completed = &v
	return s
}

func (s *GetUpsertCollectionDataJobResponseBodyJob) SetCreateTime(v string) *GetUpsertCollectionDataJobResponseBodyJob {
	s.CreateTime = &v
	return s
}

func (s *GetUpsertCollectionDataJobResponseBodyJob) SetError(v string) *GetUpsertCollectionDataJobResponseBodyJob {
	s.Error = &v
	return s
}

func (s *GetUpsertCollectionDataJobResponseBodyJob) SetId(v string) *GetUpsertCollectionDataJobResponseBodyJob {
	s.Id = &v
	return s
}

func (s *GetUpsertCollectionDataJobResponseBodyJob) SetProgress(v int32) *GetUpsertCollectionDataJobResponseBodyJob {
	s.Progress = &v
	return s
}

func (s *GetUpsertCollectionDataJobResponseBodyJob) SetStatus(v string) *GetUpsertCollectionDataJobResponseBodyJob {
	s.Status = &v
	return s
}

func (s *GetUpsertCollectionDataJobResponseBodyJob) SetUpdateTime(v string) *GetUpsertCollectionDataJobResponseBodyJob {
	s.UpdateTime = &v
	return s
}

func (s *GetUpsertCollectionDataJobResponseBodyJob) Validate() error {
	return dara.Validate(s)
}

type iGetUpsertCollectionDataJobResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *GetUpsertCollectionDataJobResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *GetUpsertCollectionDataJobResponse
	GetStatusCode() *int32
	SetBody(v *GetUpsertCollectionDataJobResponseBody) *GetUpsertCollectionDataJobResponse
	GetBody() *GetUpsertCollectionDataJobResponseBody
}

type GetUpsertCollectionDataJobResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetUpsertCollectionDataJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetUpsertCollectionDataJobResponse) String() string {
	return dara.Prettify(s)
}

func (s GetUpsertCollectionDataJobResponse) GoString() string {
	return s.String()
}

func (s *GetUpsertCollectionDataJobResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *GetUpsertCollectionDataJobResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *GetUpsertCollectionDataJobResponse) GetBody() *GetUpsertCollectionDataJobResponseBody {
	return s.Body
}

func (s *GetUpsertCollectionDataJobResponse) SetHeaders(v map[string]*string) *GetUpsertCollectionDataJobResponse {
	s.Headers = v
	return s
}

func (s *GetUpsertCollectionDataJobResponse) SetStatusCode(v int32) *GetUpsertCollectionDataJobResponse {
	s.StatusCode = &v
	return s
}

func (s *GetUpsertCollectionDataJobResponse) SetBody(v *GetUpsertCollectionDataJobResponseBody) *GetUpsertCollectionDataJobResponse {
	s.Body = v
	return s
}

func (s *GetUpsertCollectionDataJobResponse) Validate() error {
	return dara.Validate(s)
}

type iGrantCollectionRequest interface {
	dara.Model
	String() string
	GoString() string
	SetCollection(v string) *GrantCollectionRequest
	GetCollection() *string
	SetDBInstanceId(v string) *GrantCollectionRequest
	GetDBInstanceId() *string
	SetGrantToNamespace(v string) *GrantCollectionRequest
	GetGrantToNamespace() *string
	SetGrantType(v string) *GrantCollectionRequest
	GetGrantType() *string
	SetManagerAccount(v string) *GrantCollectionRequest
	GetManagerAccount() *string
	SetManagerAccountPassword(v string) *GrantCollectionRequest
	GetManagerAccountPassword() *string
	SetNamespace(v string) *GrantCollectionRequest
	GetNamespace() *string
	SetOwnerId(v int64) *GrantCollectionRequest
	GetOwnerId() *int64
	SetRegionId(v string) *GrantCollectionRequest
	GetRegionId() *string
}

type GrantCollectionRequest struct {
	// The name of the collection.
	//
	// >  You can call the [CreateCollection](https://help.aliyun.com/document_detail/2401497.html) operation to create a vector collection and call the [ListCollections](https://help.aliyun.com/document_detail/2401503.html) operation to query a list of vector collections.
	//
	// This parameter is required.
	//
	// example:
	//
	// document
	Collection *string `json:"Collection,omitempty" xml:"Collection,omitempty"`
	// The ID of the instance in reserved storage mode.
	//
	// > You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The name of the namespace to which you want to grant the vector collection permissions.
	//
	// This parameter is required.
	//
	// example:
	//
	// othernamespace
	GrantToNamespace *string `json:"GrantToNamespace,omitempty" xml:"GrantToNamespace,omitempty"`
	// The type of the permissions that you want to grant. Valid values:
	//
	// 	- rw: the read and write permissions.
	//
	// 	- ro: the read-only permission.
	//
	// 	- none: the delete permission.
	//
	// This parameter is required.
	//
	// example:
	//
	// rw
	GrantType *string `json:"GrantType,omitempty" xml:"GrantType,omitempty"`
	// The name of the manager account that has the rds_superuser permission.
	//
	// >  You can create an account on the Account Management page of the AnalyticDB for PostgreSQL console or by calling the [CreateAccount](https://help.aliyun.com/document_detail/2361789.html) operation.
	//
	// This parameter is required.
	//
	// example:
	//
	// testaccount
	ManagerAccount *string `json:"ManagerAccount,omitempty" xml:"ManagerAccount,omitempty"`
	// The password of the manager account.
	//
	// This parameter is required.
	//
	// example:
	//
	// testpassword
	ManagerAccountPassword *string `json:"ManagerAccountPassword,omitempty" xml:"ManagerAccountPassword,omitempty"`
	// The name of the namespace.
	//
	// >  You can call the [ListNamespaces](https://help.aliyun.com/document_detail/2401502.html) operation to query a list of namespaces.
	//
	// example:
	//
	// mynamespace
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	OwnerId   *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The region ID of the instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s GrantCollectionRequest) String() string {
	return dara.Prettify(s)
}

func (s GrantCollectionRequest) GoString() string {
	return s.String()
}

func (s *GrantCollectionRequest) GetCollection() *string {
	return s.Collection
}

func (s *GrantCollectionRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *GrantCollectionRequest) GetGrantToNamespace() *string {
	return s.GrantToNamespace
}

func (s *GrantCollectionRequest) GetGrantType() *string {
	return s.GrantType
}

func (s *GrantCollectionRequest) GetManagerAccount() *string {
	return s.ManagerAccount
}

func (s *GrantCollectionRequest) GetManagerAccountPassword() *string {
	return s.ManagerAccountPassword
}

func (s *GrantCollectionRequest) GetNamespace() *string {
	return s.Namespace
}

func (s *GrantCollectionRequest) GetOwnerId() *int64 {
	return s.OwnerId
}

func (s *GrantCollectionRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *GrantCollectionRequest) SetCollection(v string) *GrantCollectionRequest {
	s.Collection = &v
	return s
}

func (s *GrantCollectionRequest) SetDBInstanceId(v string) *GrantCollectionRequest {
	s.DBInstanceId = &v
	return s
}

func (s *GrantCollectionRequest) SetGrantToNamespace(v string) *GrantCollectionRequest {
	s.GrantToNamespace = &v
	return s
}

func (s *GrantCollectionRequest) SetGrantType(v string) *GrantCollectionRequest {
	s.GrantType = &v
	return s
}

func (s *GrantCollectionRequest) SetManagerAccount(v string) *GrantCollectionRequest {
	s.ManagerAccount = &v
	return s
}

func (s *GrantCollectionRequest) SetManagerAccountPassword(v string) *GrantCollectionRequest {
	s.ManagerAccountPassword = &v
	return s
}

func (s *GrantCollectionRequest) SetNamespace(v string) *GrantCollectionRequest {
	s.Namespace = &v
	return s
}

func (s *GrantCollectionRequest) SetOwnerId(v int64) *GrantCollectionRequest {
	s.OwnerId = &v
	return s
}

func (s *GrantCollectionRequest) SetRegionId(v string) *GrantCollectionRequest {
	s.RegionId = &v
	return s
}

func (s *GrantCollectionRequest) Validate() error {
	return dara.Validate(s)
}

type iGrantCollectionResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetMessage(v string) *GrantCollectionResponseBody
	GetMessage() *string
	SetRequestId(v string) *GrantCollectionResponseBody
	GetRequestId() *string
	SetStatus(v string) *GrantCollectionResponseBody
	GetStatus() *string
}

type GrantCollectionResponseBody struct {
	// The returned message.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **success**
	//
	// 	- **fail**
	//
	// example:
	//
	// success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GrantCollectionResponseBody) String() string {
	return dara.Prettify(s)
}

func (s GrantCollectionResponseBody) GoString() string {
	return s.String()
}

func (s *GrantCollectionResponseBody) GetMessage() *string {
	return s.Message
}

func (s *GrantCollectionResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *GrantCollectionResponseBody) GetStatus() *string {
	return s.Status
}

func (s *GrantCollectionResponseBody) SetMessage(v string) *GrantCollectionResponseBody {
	s.Message = &v
	return s
}

func (s *GrantCollectionResponseBody) SetRequestId(v string) *GrantCollectionResponseBody {
	s.RequestId = &v
	return s
}

func (s *GrantCollectionResponseBody) SetStatus(v string) *GrantCollectionResponseBody {
	s.Status = &v
	return s
}

func (s *GrantCollectionResponseBody) Validate() error {
	return dara.Validate(s)
}

type iGrantCollectionResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *GrantCollectionResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *GrantCollectionResponse
	GetStatusCode() *int32
	SetBody(v *GrantCollectionResponseBody) *GrantCollectionResponse
	GetBody() *GrantCollectionResponseBody
}

type GrantCollectionResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GrantCollectionResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GrantCollectionResponse) String() string {
	return dara.Prettify(s)
}

func (s GrantCollectionResponse) GoString() string {
	return s.String()
}

func (s *GrantCollectionResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *GrantCollectionResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *GrantCollectionResponse) GetBody() *GrantCollectionResponseBody {
	return s.Body
}

func (s *GrantCollectionResponse) SetHeaders(v map[string]*string) *GrantCollectionResponse {
	s.Headers = v
	return s
}

func (s *GrantCollectionResponse) SetStatusCode(v int32) *GrantCollectionResponse {
	s.StatusCode = &v
	return s
}

func (s *GrantCollectionResponse) SetBody(v *GrantCollectionResponseBody) *GrantCollectionResponse {
	s.Body = v
	return s
}

func (s *GrantCollectionResponse) Validate() error {
	return dara.Validate(s)
}

type iHandleActiveSQLRecordRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *HandleActiveSQLRecordRequest
	GetDBInstanceId() *string
	SetOperateType(v int32) *HandleActiveSQLRecordRequest
	GetOperateType() *int32
	SetPids(v string) *HandleActiveSQLRecordRequest
	GetPids() *string
}

type HandleActiveSQLRecordRequest struct {
	// The instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp***************
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The type of the operation on the process ID. Valid values:
	//
	// 	- **0**: cancel.
	//
	// 	- **1**: terminate.
	//
	// 	- **2**: forcefully terminate.
	//
	// example:
	//
	// 0
	OperateType *int32 `json:"OperateType,omitempty" xml:"OperateType,omitempty"`
	// The process IDs. A process ID is a unique identifier of a query.
	//
	// This parameter is required.
	//
	// example:
	//
	// "3003925,3003928"
	Pids *string `json:"Pids,omitempty" xml:"Pids,omitempty"`
}

func (s HandleActiveSQLRecordRequest) String() string {
	return dara.Prettify(s)
}

func (s HandleActiveSQLRecordRequest) GoString() string {
	return s.String()
}

func (s *HandleActiveSQLRecordRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *HandleActiveSQLRecordRequest) GetOperateType() *int32 {
	return s.OperateType
}

func (s *HandleActiveSQLRecordRequest) GetPids() *string {
	return s.Pids
}

func (s *HandleActiveSQLRecordRequest) SetDBInstanceId(v string) *HandleActiveSQLRecordRequest {
	s.DBInstanceId = &v
	return s
}

func (s *HandleActiveSQLRecordRequest) SetOperateType(v int32) *HandleActiveSQLRecordRequest {
	s.OperateType = &v
	return s
}

func (s *HandleActiveSQLRecordRequest) SetPids(v string) *HandleActiveSQLRecordRequest {
	s.Pids = &v
	return s
}

func (s *HandleActiveSQLRecordRequest) Validate() error {
	return dara.Validate(s)
}

type iHandleActiveSQLRecordResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *HandleActiveSQLRecordResponseBody
	GetDBInstanceId() *string
	SetRequestId(v string) *HandleActiveSQLRecordResponseBody
	GetRequestId() *string
	SetResults(v []*HandleActiveSQLRecordResponseBodyResults) *HandleActiveSQLRecordResponseBody
	GetResults() []*HandleActiveSQLRecordResponseBodyResults
	SetStatus(v string) *HandleActiveSQLRecordResponseBody
	GetStatus() *string
}

type HandleActiveSQLRecordResponseBody struct {
	// The instance ID.
	//
	// example:
	//
	// gp-bp***************
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The processing result of the active query.
	Results []*HandleActiveSQLRecordResponseBodyResults `json:"Results,omitempty" xml:"Results,omitempty" type:"Repeated"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **false**
	//
	// 	- **true**
	//
	// example:
	//
	// true
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s HandleActiveSQLRecordResponseBody) String() string {
	return dara.Prettify(s)
}

func (s HandleActiveSQLRecordResponseBody) GoString() string {
	return s.String()
}

func (s *HandleActiveSQLRecordResponseBody) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *HandleActiveSQLRecordResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *HandleActiveSQLRecordResponseBody) GetResults() []*HandleActiveSQLRecordResponseBodyResults {
	return s.Results
}

func (s *HandleActiveSQLRecordResponseBody) GetStatus() *string {
	return s.Status
}

func (s *HandleActiveSQLRecordResponseBody) SetDBInstanceId(v string) *HandleActiveSQLRecordResponseBody {
	s.DBInstanceId = &v
	return s
}

func (s *HandleActiveSQLRecordResponseBody) SetRequestId(v string) *HandleActiveSQLRecordResponseBody {
	s.RequestId = &v
	return s
}

func (s *HandleActiveSQLRecordResponseBody) SetResults(v []*HandleActiveSQLRecordResponseBodyResults) *HandleActiveSQLRecordResponseBody {
	s.Results = v
	return s
}

func (s *HandleActiveSQLRecordResponseBody) SetStatus(v string) *HandleActiveSQLRecordResponseBody {
	s.Status = &v
	return s
}

func (s *HandleActiveSQLRecordResponseBody) Validate() error {
	return dara.Validate(s)
}

type HandleActiveSQLRecordResponseBodyResults struct {
	// The process ID, which is a unique identifier of the query.
	//
	// example:
	//
	// 3003925
	Pid *string `json:"Pid,omitempty" xml:"Pid,omitempty"`
	// Indicates whether the processing was successful. Valid values:
	//
	// 	- **false**
	//
	// 	- **true**
	//
	// example:
	//
	// true
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s HandleActiveSQLRecordResponseBodyResults) String() string {
	return dara.Prettify(s)
}

func (s HandleActiveSQLRecordResponseBodyResults) GoString() string {
	return s.String()
}

func (s *HandleActiveSQLRecordResponseBodyResults) GetPid() *string {
	return s.Pid
}

func (s *HandleActiveSQLRecordResponseBodyResults) GetStatus() *string {
	return s.Status
}

func (s *HandleActiveSQLRecordResponseBodyResults) SetPid(v string) *HandleActiveSQLRecordResponseBodyResults {
	s.Pid = &v
	return s
}

func (s *HandleActiveSQLRecordResponseBodyResults) SetStatus(v string) *HandleActiveSQLRecordResponseBodyResults {
	s.Status = &v
	return s
}

func (s *HandleActiveSQLRecordResponseBodyResults) Validate() error {
	return dara.Validate(s)
}

type iHandleActiveSQLRecordResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *HandleActiveSQLRecordResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *HandleActiveSQLRecordResponse
	GetStatusCode() *int32
	SetBody(v *HandleActiveSQLRecordResponseBody) *HandleActiveSQLRecordResponse
	GetBody() *HandleActiveSQLRecordResponseBody
}

type HandleActiveSQLRecordResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *HandleActiveSQLRecordResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s HandleActiveSQLRecordResponse) String() string {
	return dara.Prettify(s)
}

func (s HandleActiveSQLRecordResponse) GoString() string {
	return s.String()
}

func (s *HandleActiveSQLRecordResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *HandleActiveSQLRecordResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *HandleActiveSQLRecordResponse) GetBody() *HandleActiveSQLRecordResponseBody {
	return s.Body
}

func (s *HandleActiveSQLRecordResponse) SetHeaders(v map[string]*string) *HandleActiveSQLRecordResponse {
	s.Headers = v
	return s
}

func (s *HandleActiveSQLRecordResponse) SetStatusCode(v int32) *HandleActiveSQLRecordResponse {
	s.StatusCode = &v
	return s
}

func (s *HandleActiveSQLRecordResponse) SetBody(v *HandleActiveSQLRecordResponseBody) *HandleActiveSQLRecordResponse {
	s.Body = v
	return s
}

func (s *HandleActiveSQLRecordResponse) Validate() error {
	return dara.Validate(s)
}

type iInitVectorDatabaseRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *InitVectorDatabaseRequest
	GetDBInstanceId() *string
	SetManagerAccount(v string) *InitVectorDatabaseRequest
	GetManagerAccount() *string
	SetManagerAccountPassword(v string) *InitVectorDatabaseRequest
	GetManagerAccountPassword() *string
	SetOwnerId(v int64) *InitVectorDatabaseRequest
	GetOwnerId() *int64
	SetRegionId(v string) *InitVectorDatabaseRequest
	GetRegionId() *string
	SetWorkspaceId(v string) *InitVectorDatabaseRequest
	GetWorkspaceId() *string
}

type InitVectorDatabaseRequest struct {
	// The instance ID.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The name of the manager account that has the rds_superuser permission.
	//
	// >  You can create an account on the Account Management page of the AnalyticDB for PostgreSQL console or by calling the [CreateAccount](https://help.aliyun.com/document_detail/2361789.html) operation.
	//
	// This parameter is required.
	//
	// example:
	//
	// testaccount
	ManagerAccount *string `json:"ManagerAccount,omitempty" xml:"ManagerAccount,omitempty"`
	// The password of the database account.
	//
	// This parameter is required.
	//
	// example:
	//
	// testpassword
	ManagerAccountPassword *string `json:"ManagerAccountPassword,omitempty" xml:"ManagerAccountPassword,omitempty"`
	OwnerId                *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The region ID of the instance.
	//
	// >  You can call the [DescribeRegions](https://help.aliyun.com/document_detail/86912.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the workspace that consists of multiple AnalyticDB for PostgreSQL instances. You must specify one of the WorkspaceId and DBInstanceId parameters. If you specify both parameters, the WorkspaceId parameter takes effect.
	//
	// example:
	//
	// gp-ws-*****
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s InitVectorDatabaseRequest) String() string {
	return dara.Prettify(s)
}

func (s InitVectorDatabaseRequest) GoString() string {
	return s.String()
}

func (s *InitVectorDatabaseRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *InitVectorDatabaseRequest) GetManagerAccount() *string {
	return s.ManagerAccount
}

func (s *InitVectorDatabaseRequest) GetManagerAccountPassword() *string {
	return s.ManagerAccountPassword
}

func (s *InitVectorDatabaseRequest) GetOwnerId() *int64 {
	return s.OwnerId
}

func (s *InitVectorDatabaseRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *InitVectorDatabaseRequest) GetWorkspaceId() *string {
	return s.WorkspaceId
}

func (s *InitVectorDatabaseRequest) SetDBInstanceId(v string) *InitVectorDatabaseRequest {
	s.DBInstanceId = &v
	return s
}

func (s *InitVectorDatabaseRequest) SetManagerAccount(v string) *InitVectorDatabaseRequest {
	s.ManagerAccount = &v
	return s
}

func (s *InitVectorDatabaseRequest) SetManagerAccountPassword(v string) *InitVectorDatabaseRequest {
	s.ManagerAccountPassword = &v
	return s
}

func (s *InitVectorDatabaseRequest) SetOwnerId(v int64) *InitVectorDatabaseRequest {
	s.OwnerId = &v
	return s
}

func (s *InitVectorDatabaseRequest) SetRegionId(v string) *InitVectorDatabaseRequest {
	s.RegionId = &v
	return s
}

func (s *InitVectorDatabaseRequest) SetWorkspaceId(v string) *InitVectorDatabaseRequest {
	s.WorkspaceId = &v
	return s
}

func (s *InitVectorDatabaseRequest) Validate() error {
	return dara.Validate(s)
}

type iInitVectorDatabaseResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetMessage(v string) *InitVectorDatabaseResponseBody
	GetMessage() *string
	SetRequestId(v string) *InitVectorDatabaseResponseBody
	GetRequestId() *string
	SetStatus(v string) *InitVectorDatabaseResponseBody
	GetStatus() *string
}

type InitVectorDatabaseResponseBody struct {
	// The error message returned if the request fails.
	//
	// example:
	//
	// failed to connect database, detailMsg: getConnection fail::SQL State: 28P01, Error Code: 0, Error Message: FATAL: password
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **Success**
	//
	// 	- **fail**
	//
	// example:
	//
	// success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s InitVectorDatabaseResponseBody) String() string {
	return dara.Prettify(s)
}

func (s InitVectorDatabaseResponseBody) GoString() string {
	return s.String()
}

func (s *InitVectorDatabaseResponseBody) GetMessage() *string {
	return s.Message
}

func (s *InitVectorDatabaseResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *InitVectorDatabaseResponseBody) GetStatus() *string {
	return s.Status
}

func (s *InitVectorDatabaseResponseBody) SetMessage(v string) *InitVectorDatabaseResponseBody {
	s.Message = &v
	return s
}

func (s *InitVectorDatabaseResponseBody) SetRequestId(v string) *InitVectorDatabaseResponseBody {
	s.RequestId = &v
	return s
}

func (s *InitVectorDatabaseResponseBody) SetStatus(v string) *InitVectorDatabaseResponseBody {
	s.Status = &v
	return s
}

func (s *InitVectorDatabaseResponseBody) Validate() error {
	return dara.Validate(s)
}

type iInitVectorDatabaseResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *InitVectorDatabaseResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *InitVectorDatabaseResponse
	GetStatusCode() *int32
	SetBody(v *InitVectorDatabaseResponseBody) *InitVectorDatabaseResponse
	GetBody() *InitVectorDatabaseResponseBody
}

type InitVectorDatabaseResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *InitVectorDatabaseResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s InitVectorDatabaseResponse) String() string {
	return dara.Prettify(s)
}

func (s InitVectorDatabaseResponse) GoString() string {
	return s.String()
}

func (s *InitVectorDatabaseResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *InitVectorDatabaseResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *InitVectorDatabaseResponse) GetBody() *InitVectorDatabaseResponseBody {
	return s.Body
}

func (s *InitVectorDatabaseResponse) SetHeaders(v map[string]*string) *InitVectorDatabaseResponse {
	s.Headers = v
	return s
}

func (s *InitVectorDatabaseResponse) SetStatusCode(v int32) *InitVectorDatabaseResponse {
	s.StatusCode = &v
	return s
}

func (s *InitVectorDatabaseResponse) SetBody(v *InitVectorDatabaseResponseBody) *InitVectorDatabaseResponse {
	s.Body = v
	return s
}

func (s *InitVectorDatabaseResponse) Validate() error {
	return dara.Validate(s)
}

type iListBackupJobsRequest interface {
	dara.Model
	String() string
	GoString() string
	SetBackupMode(v string) *ListBackupJobsRequest
	GetBackupMode() *string
	SetDBInstanceId(v string) *ListBackupJobsRequest
	GetDBInstanceId() *string
}

type ListBackupJobsRequest struct {
	// example:
	//
	// Automated
	BackupMode *string `json:"BackupMode,omitempty" xml:"BackupMode,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
}

func (s ListBackupJobsRequest) String() string {
	return dara.Prettify(s)
}

func (s ListBackupJobsRequest) GoString() string {
	return s.String()
}

func (s *ListBackupJobsRequest) GetBackupMode() *string {
	return s.BackupMode
}

func (s *ListBackupJobsRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *ListBackupJobsRequest) SetBackupMode(v string) *ListBackupJobsRequest {
	s.BackupMode = &v
	return s
}

func (s *ListBackupJobsRequest) SetDBInstanceId(v string) *ListBackupJobsRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ListBackupJobsRequest) Validate() error {
	return dara.Validate(s)
}

type iListBackupJobsResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetItems(v *ListBackupJobsResponseBodyItems) *ListBackupJobsResponseBody
	GetItems() *ListBackupJobsResponseBodyItems
	SetRequestId(v string) *ListBackupJobsResponseBody
	GetRequestId() *string
}

type ListBackupJobsResponseBody struct {
	Items *ListBackupJobsResponseBodyItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Struct"`
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListBackupJobsResponseBody) String() string {
	return dara.Prettify(s)
}

func (s ListBackupJobsResponseBody) GoString() string {
	return s.String()
}

func (s *ListBackupJobsResponseBody) GetItems() *ListBackupJobsResponseBodyItems {
	return s.Items
}

func (s *ListBackupJobsResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *ListBackupJobsResponseBody) SetItems(v *ListBackupJobsResponseBodyItems) *ListBackupJobsResponseBody {
	s.Items = v
	return s
}

func (s *ListBackupJobsResponseBody) SetRequestId(v string) *ListBackupJobsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListBackupJobsResponseBody) Validate() error {
	return dara.Validate(s)
}

type ListBackupJobsResponseBodyItems struct {
	BackupJob []*ListBackupJobsResponseBodyItemsBackupJob `json:"BackupJob,omitempty" xml:"BackupJob,omitempty" type:"Repeated"`
}

func (s ListBackupJobsResponseBodyItems) String() string {
	return dara.Prettify(s)
}

func (s ListBackupJobsResponseBodyItems) GoString() string {
	return s.String()
}

func (s *ListBackupJobsResponseBodyItems) GetBackupJob() []*ListBackupJobsResponseBodyItemsBackupJob {
	return s.BackupJob
}

func (s *ListBackupJobsResponseBodyItems) SetBackupJob(v []*ListBackupJobsResponseBodyItemsBackupJob) *ListBackupJobsResponseBodyItems {
	s.BackupJob = v
	return s
}

func (s *ListBackupJobsResponseBodyItems) Validate() error {
	return dara.Validate(s)
}

type ListBackupJobsResponseBodyItemsBackupJob struct {
	// example:
	//
	// 123
	BackupJobId *string `json:"BackupJobId,omitempty" xml:"BackupJobId,omitempty"`
	// example:
	//
	// Automated
	BackupMode *string `json:"BackupMode,omitempty" xml:"BackupMode,omitempty"`
	// example:
	//
	// Success
	BackupStatus *string `json:"BackupStatus,omitempty" xml:"BackupStatus,omitempty"`
	// example:
	//
	// 50%
	Process *string `json:"Process,omitempty" xml:"Process,omitempty"`
	// example:
	//
	// 2022-08-11T09:26:43Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s ListBackupJobsResponseBodyItemsBackupJob) String() string {
	return dara.Prettify(s)
}

func (s ListBackupJobsResponseBodyItemsBackupJob) GoString() string {
	return s.String()
}

func (s *ListBackupJobsResponseBodyItemsBackupJob) GetBackupJobId() *string {
	return s.BackupJobId
}

func (s *ListBackupJobsResponseBodyItemsBackupJob) GetBackupMode() *string {
	return s.BackupMode
}

func (s *ListBackupJobsResponseBodyItemsBackupJob) GetBackupStatus() *string {
	return s.BackupStatus
}

func (s *ListBackupJobsResponseBodyItemsBackupJob) GetProcess() *string {
	return s.Process
}

func (s *ListBackupJobsResponseBodyItemsBackupJob) GetStartTime() *string {
	return s.StartTime
}

func (s *ListBackupJobsResponseBodyItemsBackupJob) SetBackupJobId(v string) *ListBackupJobsResponseBodyItemsBackupJob {
	s.BackupJobId = &v
	return s
}

func (s *ListBackupJobsResponseBodyItemsBackupJob) SetBackupMode(v string) *ListBackupJobsResponseBodyItemsBackupJob {
	s.BackupMode = &v
	return s
}

func (s *ListBackupJobsResponseBodyItemsBackupJob) SetBackupStatus(v string) *ListBackupJobsResponseBodyItemsBackupJob {
	s.BackupStatus = &v
	return s
}

func (s *ListBackupJobsResponseBodyItemsBackupJob) SetProcess(v string) *ListBackupJobsResponseBodyItemsBackupJob {
	s.Process = &v
	return s
}

func (s *ListBackupJobsResponseBodyItemsBackupJob) SetStartTime(v string) *ListBackupJobsResponseBodyItemsBackupJob {
	s.StartTime = &v
	return s
}

func (s *ListBackupJobsResponseBodyItemsBackupJob) Validate() error {
	return dara.Validate(s)
}

type iListBackupJobsResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *ListBackupJobsResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *ListBackupJobsResponse
	GetStatusCode() *int32
	SetBody(v *ListBackupJobsResponseBody) *ListBackupJobsResponse
	GetBody() *ListBackupJobsResponseBody
}

type ListBackupJobsResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListBackupJobsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListBackupJobsResponse) String() string {
	return dara.Prettify(s)
}

func (s ListBackupJobsResponse) GoString() string {
	return s.String()
}

func (s *ListBackupJobsResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *ListBackupJobsResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *ListBackupJobsResponse) GetBody() *ListBackupJobsResponseBody {
	return s.Body
}

func (s *ListBackupJobsResponse) SetHeaders(v map[string]*string) *ListBackupJobsResponse {
	s.Headers = v
	return s
}

func (s *ListBackupJobsResponse) SetStatusCode(v int32) *ListBackupJobsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListBackupJobsResponse) SetBody(v *ListBackupJobsResponseBody) *ListBackupJobsResponse {
	s.Body = v
	return s
}

func (s *ListBackupJobsResponse) Validate() error {
	return dara.Validate(s)
}

type iListCollectionsRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *ListCollectionsRequest
	GetDBInstanceId() *string
	SetNamespace(v string) *ListCollectionsRequest
	GetNamespace() *string
	SetNamespacePassword(v string) *ListCollectionsRequest
	GetNamespacePassword() *string
	SetOwnerId(v int64) *ListCollectionsRequest
	GetOwnerId() *int64
	SetRegionId(v string) *ListCollectionsRequest
	GetRegionId() *string
	SetWorkspaceId(v string) *ListCollectionsRequest
	GetWorkspaceId() *string
}

type ListCollectionsRequest struct {
	// The instance ID.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The name of the namespace.
	//
	// example:
	//
	// mynamespace
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// The password of the namespace.
	//
	// This parameter is required.
	//
	// example:
	//
	// testpassword
	NamespacePassword *string `json:"NamespacePassword,omitempty" xml:"NamespacePassword,omitempty"`
	OwnerId           *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The region ID of the instance.
	//
	// >  You can call the [DescribeRegions](https://help.aliyun.com/document_detail/86912.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the workspace that consists of multiple AnalyticDB for PostgreSQL instances. You must specify one of the WorkspaceId and DBInstanceId parameters. If you specify both parameters, the WorkspaceId parameter takes effect.
	//
	// example:
	//
	// gp-ws-*****
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s ListCollectionsRequest) String() string {
	return dara.Prettify(s)
}

func (s ListCollectionsRequest) GoString() string {
	return s.String()
}

func (s *ListCollectionsRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *ListCollectionsRequest) GetNamespace() *string {
	return s.Namespace
}

func (s *ListCollectionsRequest) GetNamespacePassword() *string {
	return s.NamespacePassword
}

func (s *ListCollectionsRequest) GetOwnerId() *int64 {
	return s.OwnerId
}

func (s *ListCollectionsRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *ListCollectionsRequest) GetWorkspaceId() *string {
	return s.WorkspaceId
}

func (s *ListCollectionsRequest) SetDBInstanceId(v string) *ListCollectionsRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ListCollectionsRequest) SetNamespace(v string) *ListCollectionsRequest {
	s.Namespace = &v
	return s
}

func (s *ListCollectionsRequest) SetNamespacePassword(v string) *ListCollectionsRequest {
	s.NamespacePassword = &v
	return s
}

func (s *ListCollectionsRequest) SetOwnerId(v int64) *ListCollectionsRequest {
	s.OwnerId = &v
	return s
}

func (s *ListCollectionsRequest) SetRegionId(v string) *ListCollectionsRequest {
	s.RegionId = &v
	return s
}

func (s *ListCollectionsRequest) SetWorkspaceId(v string) *ListCollectionsRequest {
	s.WorkspaceId = &v
	return s
}

func (s *ListCollectionsRequest) Validate() error {
	return dara.Validate(s)
}

type iListCollectionsResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetCollections(v *ListCollectionsResponseBodyCollections) *ListCollectionsResponseBody
	GetCollections() *ListCollectionsResponseBodyCollections
	SetCount(v int32) *ListCollectionsResponseBody
	GetCount() *int32
	SetDBInstanceId(v string) *ListCollectionsResponseBody
	GetDBInstanceId() *string
	SetMessage(v string) *ListCollectionsResponseBody
	GetMessage() *string
	SetNamespace(v string) *ListCollectionsResponseBody
	GetNamespace() *string
	SetRegionId(v string) *ListCollectionsResponseBody
	GetRegionId() *string
	SetRequestId(v string) *ListCollectionsResponseBody
	GetRequestId() *string
	SetStatus(v string) *ListCollectionsResponseBody
	GetStatus() *string
}

type ListCollectionsResponseBody struct {
	// The queried vector collections.
	Collections *ListCollectionsResponseBodyCollections `json:"Collections,omitempty" xml:"Collections,omitempty" type:"Struct"`
	// The total number of entries returned.
	//
	// example:
	//
	// 1
	Count *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	// The instance ID.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The returned message.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The name of the namespace.
	//
	// example:
	//
	// mynamespace
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// The region ID of the instance.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **success**
	//
	// 	- **fail**
	//
	// example:
	//
	// success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListCollectionsResponseBody) String() string {
	return dara.Prettify(s)
}

func (s ListCollectionsResponseBody) GoString() string {
	return s.String()
}

func (s *ListCollectionsResponseBody) GetCollections() *ListCollectionsResponseBodyCollections {
	return s.Collections
}

func (s *ListCollectionsResponseBody) GetCount() *int32 {
	return s.Count
}

func (s *ListCollectionsResponseBody) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *ListCollectionsResponseBody) GetMessage() *string {
	return s.Message
}

func (s *ListCollectionsResponseBody) GetNamespace() *string {
	return s.Namespace
}

func (s *ListCollectionsResponseBody) GetRegionId() *string {
	return s.RegionId
}

func (s *ListCollectionsResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *ListCollectionsResponseBody) GetStatus() *string {
	return s.Status
}

func (s *ListCollectionsResponseBody) SetCollections(v *ListCollectionsResponseBodyCollections) *ListCollectionsResponseBody {
	s.Collections = v
	return s
}

func (s *ListCollectionsResponseBody) SetCount(v int32) *ListCollectionsResponseBody {
	s.Count = &v
	return s
}

func (s *ListCollectionsResponseBody) SetDBInstanceId(v string) *ListCollectionsResponseBody {
	s.DBInstanceId = &v
	return s
}

func (s *ListCollectionsResponseBody) SetMessage(v string) *ListCollectionsResponseBody {
	s.Message = &v
	return s
}

func (s *ListCollectionsResponseBody) SetNamespace(v string) *ListCollectionsResponseBody {
	s.Namespace = &v
	return s
}

func (s *ListCollectionsResponseBody) SetRegionId(v string) *ListCollectionsResponseBody {
	s.RegionId = &v
	return s
}

func (s *ListCollectionsResponseBody) SetRequestId(v string) *ListCollectionsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListCollectionsResponseBody) SetStatus(v string) *ListCollectionsResponseBody {
	s.Status = &v
	return s
}

func (s *ListCollectionsResponseBody) Validate() error {
	return dara.Validate(s)
}

type ListCollectionsResponseBodyCollections struct {
	Collection []*string `json:"Collection,omitempty" xml:"Collection,omitempty" type:"Repeated"`
}

func (s ListCollectionsResponseBodyCollections) String() string {
	return dara.Prettify(s)
}

func (s ListCollectionsResponseBodyCollections) GoString() string {
	return s.String()
}

func (s *ListCollectionsResponseBodyCollections) GetCollection() []*string {
	return s.Collection
}

func (s *ListCollectionsResponseBodyCollections) SetCollection(v []*string) *ListCollectionsResponseBodyCollections {
	s.Collection = v
	return s
}

func (s *ListCollectionsResponseBodyCollections) Validate() error {
	return dara.Validate(s)
}

type iListCollectionsResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *ListCollectionsResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *ListCollectionsResponse
	GetStatusCode() *int32
	SetBody(v *ListCollectionsResponseBody) *ListCollectionsResponse
	GetBody() *ListCollectionsResponseBody
}

type ListCollectionsResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListCollectionsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListCollectionsResponse) String() string {
	return dara.Prettify(s)
}

func (s ListCollectionsResponse) GoString() string {
	return s.String()
}

func (s *ListCollectionsResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *ListCollectionsResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *ListCollectionsResponse) GetBody() *ListCollectionsResponseBody {
	return s.Body
}

func (s *ListCollectionsResponse) SetHeaders(v map[string]*string) *ListCollectionsResponse {
	s.Headers = v
	return s
}

func (s *ListCollectionsResponse) SetStatusCode(v int32) *ListCollectionsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListCollectionsResponse) SetBody(v *ListCollectionsResponseBody) *ListCollectionsResponse {
	s.Body = v
	return s
}

func (s *ListCollectionsResponse) Validate() error {
	return dara.Validate(s)
}

type iListDatabasesRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *ListDatabasesRequest
	GetDBInstanceId() *string
	SetDatabase(v string) *ListDatabasesRequest
	GetDatabase() *string
	SetMaxResults(v int32) *ListDatabasesRequest
	GetMaxResults() *int32
	SetNextToken(v string) *ListDatabasesRequest
	GetNextToken() *string
	SetOwnerId(v int64) *ListDatabasesRequest
	GetOwnerId() *int64
	SetRegionId(v string) *ListDatabasesRequest
	GetRegionId() *string
	SetSecretArn(v string) *ListDatabasesRequest
	GetSecretArn() *string
}

type ListDatabasesRequest struct {
	// The instance ID.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The name of the database.
	//
	// This parameter is required.
	//
	// example:
	//
	// testdb
	Database *string `json:"Database,omitempty" xml:"Database,omitempty"`
	// The maximum number of entries per page. Valid values: 1 to 100.
	//
	// example:
	//
	// 50
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// The pagination token that is used in the next request to retrieve a new page of results. You do not need to specify this parameter for the first request. You must specify the token that is obtained from the previous query as the value of NextToken.
	//
	// example:
	//
	// caeba0bbb2be03f84eb48b699f0a4883
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	OwnerId   *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The region ID of the instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-beijing
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The Alibaba Cloud Resource Name (ARN) of the access credential for the created Data API account. You can call the CreateSecret operation to create an access credential.
	//
	// >  To call the DescribeTable operation as a Resource Access Management (RAM) user, the RAM user must have the permissions to call the UseSecret or GetSecretValue operation on the ARN of the access credential.
	//
	// This parameter is required.
	//
	// example:
	//
	// acs:gpdb:cn-beijing:1033**:secret/testsecret-eG2AQGRIwQ0zFp4VA7mYL3uiCXTfDQbQ
	SecretArn *string `json:"SecretArn,omitempty" xml:"SecretArn,omitempty"`
}

func (s ListDatabasesRequest) String() string {
	return dara.Prettify(s)
}

func (s ListDatabasesRequest) GoString() string {
	return s.String()
}

func (s *ListDatabasesRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *ListDatabasesRequest) GetDatabase() *string {
	return s.Database
}

func (s *ListDatabasesRequest) GetMaxResults() *int32 {
	return s.MaxResults
}

func (s *ListDatabasesRequest) GetNextToken() *string {
	return s.NextToken
}

func (s *ListDatabasesRequest) GetOwnerId() *int64 {
	return s.OwnerId
}

func (s *ListDatabasesRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *ListDatabasesRequest) GetSecretArn() *string {
	return s.SecretArn
}

func (s *ListDatabasesRequest) SetDBInstanceId(v string) *ListDatabasesRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ListDatabasesRequest) SetDatabase(v string) *ListDatabasesRequest {
	s.Database = &v
	return s
}

func (s *ListDatabasesRequest) SetMaxResults(v int32) *ListDatabasesRequest {
	s.MaxResults = &v
	return s
}

func (s *ListDatabasesRequest) SetNextToken(v string) *ListDatabasesRequest {
	s.NextToken = &v
	return s
}

func (s *ListDatabasesRequest) SetOwnerId(v int64) *ListDatabasesRequest {
	s.OwnerId = &v
	return s
}

func (s *ListDatabasesRequest) SetRegionId(v string) *ListDatabasesRequest {
	s.RegionId = &v
	return s
}

func (s *ListDatabasesRequest) SetSecretArn(v string) *ListDatabasesRequest {
	s.SecretArn = &v
	return s
}

func (s *ListDatabasesRequest) Validate() error {
	return dara.Validate(s)
}

type iListDatabasesResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetDatabases(v *ListDatabasesResponseBodyDatabases) *ListDatabasesResponseBody
	GetDatabases() *ListDatabasesResponseBodyDatabases
	SetMessage(v string) *ListDatabasesResponseBody
	GetMessage() *string
	SetNextToken(v string) *ListDatabasesResponseBody
	GetNextToken() *string
	SetRequestId(v string) *ListDatabasesResponseBody
	GetRequestId() *string
	SetStatus(v string) *ListDatabasesResponseBody
	GetStatus() *string
}

type ListDatabasesResponseBody struct {
	// The queried databases.
	Databases *ListDatabasesResponseBodyDatabases `json:"Databases,omitempty" xml:"Databases,omitempty" type:"Struct"`
	// The returned message.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// A pagination token. It can be used in the next request to retrieve a new page of results. If NextToken is empty, no next page exists.
	//
	// example:
	//
	// caeba0bbb2be03f84eb48b699f0a4883
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The status of the operation. Valid values:
	//
	// 	- **success**
	//
	// 	- **fail**
	//
	// example:
	//
	// success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListDatabasesResponseBody) String() string {
	return dara.Prettify(s)
}

func (s ListDatabasesResponseBody) GoString() string {
	return s.String()
}

func (s *ListDatabasesResponseBody) GetDatabases() *ListDatabasesResponseBodyDatabases {
	return s.Databases
}

func (s *ListDatabasesResponseBody) GetMessage() *string {
	return s.Message
}

func (s *ListDatabasesResponseBody) GetNextToken() *string {
	return s.NextToken
}

func (s *ListDatabasesResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *ListDatabasesResponseBody) GetStatus() *string {
	return s.Status
}

func (s *ListDatabasesResponseBody) SetDatabases(v *ListDatabasesResponseBodyDatabases) *ListDatabasesResponseBody {
	s.Databases = v
	return s
}

func (s *ListDatabasesResponseBody) SetMessage(v string) *ListDatabasesResponseBody {
	s.Message = &v
	return s
}

func (s *ListDatabasesResponseBody) SetNextToken(v string) *ListDatabasesResponseBody {
	s.NextToken = &v
	return s
}

func (s *ListDatabasesResponseBody) SetRequestId(v string) *ListDatabasesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListDatabasesResponseBody) SetStatus(v string) *ListDatabasesResponseBody {
	s.Status = &v
	return s
}

func (s *ListDatabasesResponseBody) Validate() error {
	return dara.Validate(s)
}

type ListDatabasesResponseBodyDatabases struct {
	Databases []*string `json:"Databases,omitempty" xml:"Databases,omitempty" type:"Repeated"`
}

func (s ListDatabasesResponseBodyDatabases) String() string {
	return dara.Prettify(s)
}

func (s ListDatabasesResponseBodyDatabases) GoString() string {
	return s.String()
}

func (s *ListDatabasesResponseBodyDatabases) GetDatabases() []*string {
	return s.Databases
}

func (s *ListDatabasesResponseBodyDatabases) SetDatabases(v []*string) *ListDatabasesResponseBodyDatabases {
	s.Databases = v
	return s
}

func (s *ListDatabasesResponseBodyDatabases) Validate() error {
	return dara.Validate(s)
}

type iListDatabasesResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *ListDatabasesResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *ListDatabasesResponse
	GetStatusCode() *int32
	SetBody(v *ListDatabasesResponseBody) *ListDatabasesResponse
	GetBody() *ListDatabasesResponseBody
}

type ListDatabasesResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListDatabasesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListDatabasesResponse) String() string {
	return dara.Prettify(s)
}

func (s ListDatabasesResponse) GoString() string {
	return s.String()
}

func (s *ListDatabasesResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *ListDatabasesResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *ListDatabasesResponse) GetBody() *ListDatabasesResponseBody {
	return s.Body
}

func (s *ListDatabasesResponse) SetHeaders(v map[string]*string) *ListDatabasesResponse {
	s.Headers = v
	return s
}

func (s *ListDatabasesResponse) SetStatusCode(v int32) *ListDatabasesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListDatabasesResponse) SetBody(v *ListDatabasesResponseBody) *ListDatabasesResponse {
	s.Body = v
	return s
}

func (s *ListDatabasesResponse) Validate() error {
	return dara.Validate(s)
}

type iListDocumentCollectionsRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *ListDocumentCollectionsRequest
	GetDBInstanceId() *string
	SetNamespace(v string) *ListDocumentCollectionsRequest
	GetNamespace() *string
	SetNamespacePassword(v string) *ListDocumentCollectionsRequest
	GetNamespacePassword() *string
	SetOwnerId(v int64) *ListDocumentCollectionsRequest
	GetOwnerId() *int64
	SetRegionId(v string) *ListDocumentCollectionsRequest
	GetRegionId() *string
}

type ListDocumentCollectionsRequest struct {
	// The instance ID.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The name of the namespace. Default value: public.
	//
	// >  You can call the CreateNamespace operation to create a namespace and call the ListNamespaces operation to query a list of namespaces.
	//
	// example:
	//
	// mynamespace
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// The password of the namespace.
	//
	// >  This value is specified when you call the CreateNamespace operation.
	//
	// This parameter is required.
	//
	// example:
	//
	// testpassword
	NamespacePassword *string `json:"NamespacePassword,omitempty" xml:"NamespacePassword,omitempty"`
	OwnerId           *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The region ID of the instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ListDocumentCollectionsRequest) String() string {
	return dara.Prettify(s)
}

func (s ListDocumentCollectionsRequest) GoString() string {
	return s.String()
}

func (s *ListDocumentCollectionsRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *ListDocumentCollectionsRequest) GetNamespace() *string {
	return s.Namespace
}

func (s *ListDocumentCollectionsRequest) GetNamespacePassword() *string {
	return s.NamespacePassword
}

func (s *ListDocumentCollectionsRequest) GetOwnerId() *int64 {
	return s.OwnerId
}

func (s *ListDocumentCollectionsRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *ListDocumentCollectionsRequest) SetDBInstanceId(v string) *ListDocumentCollectionsRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ListDocumentCollectionsRequest) SetNamespace(v string) *ListDocumentCollectionsRequest {
	s.Namespace = &v
	return s
}

func (s *ListDocumentCollectionsRequest) SetNamespacePassword(v string) *ListDocumentCollectionsRequest {
	s.NamespacePassword = &v
	return s
}

func (s *ListDocumentCollectionsRequest) SetOwnerId(v int64) *ListDocumentCollectionsRequest {
	s.OwnerId = &v
	return s
}

func (s *ListDocumentCollectionsRequest) SetRegionId(v string) *ListDocumentCollectionsRequest {
	s.RegionId = &v
	return s
}

func (s *ListDocumentCollectionsRequest) Validate() error {
	return dara.Validate(s)
}

type iListDocumentCollectionsResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetCount(v int32) *ListDocumentCollectionsResponseBody
	GetCount() *int32
	SetItems(v *ListDocumentCollectionsResponseBodyItems) *ListDocumentCollectionsResponseBody
	GetItems() *ListDocumentCollectionsResponseBodyItems
	SetMessage(v string) *ListDocumentCollectionsResponseBody
	GetMessage() *string
	SetRequestId(v string) *ListDocumentCollectionsResponseBody
	GetRequestId() *string
	SetStatus(v string) *ListDocumentCollectionsResponseBody
	GetStatus() *string
}

type ListDocumentCollectionsResponseBody struct {
	// The total number of entries returned.
	//
	// example:
	//
	// 10
	Count *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	// The queried document collections.
	Items *ListDocumentCollectionsResponseBodyItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Struct"`
	// The returned message.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **success**
	//
	// 	- **fail**
	//
	// example:
	//
	// success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListDocumentCollectionsResponseBody) String() string {
	return dara.Prettify(s)
}

func (s ListDocumentCollectionsResponseBody) GoString() string {
	return s.String()
}

func (s *ListDocumentCollectionsResponseBody) GetCount() *int32 {
	return s.Count
}

func (s *ListDocumentCollectionsResponseBody) GetItems() *ListDocumentCollectionsResponseBodyItems {
	return s.Items
}

func (s *ListDocumentCollectionsResponseBody) GetMessage() *string {
	return s.Message
}

func (s *ListDocumentCollectionsResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *ListDocumentCollectionsResponseBody) GetStatus() *string {
	return s.Status
}

func (s *ListDocumentCollectionsResponseBody) SetCount(v int32) *ListDocumentCollectionsResponseBody {
	s.Count = &v
	return s
}

func (s *ListDocumentCollectionsResponseBody) SetItems(v *ListDocumentCollectionsResponseBodyItems) *ListDocumentCollectionsResponseBody {
	s.Items = v
	return s
}

func (s *ListDocumentCollectionsResponseBody) SetMessage(v string) *ListDocumentCollectionsResponseBody {
	s.Message = &v
	return s
}

func (s *ListDocumentCollectionsResponseBody) SetRequestId(v string) *ListDocumentCollectionsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListDocumentCollectionsResponseBody) SetStatus(v string) *ListDocumentCollectionsResponseBody {
	s.Status = &v
	return s
}

func (s *ListDocumentCollectionsResponseBody) Validate() error {
	return dara.Validate(s)
}

type ListDocumentCollectionsResponseBodyItems struct {
	CollectionList []*ListDocumentCollectionsResponseBodyItemsCollectionList `json:"CollectionList,omitempty" xml:"CollectionList,omitempty" type:"Repeated"`
}

func (s ListDocumentCollectionsResponseBodyItems) String() string {
	return dara.Prettify(s)
}

func (s ListDocumentCollectionsResponseBodyItems) GoString() string {
	return s.String()
}

func (s *ListDocumentCollectionsResponseBodyItems) GetCollectionList() []*ListDocumentCollectionsResponseBodyItemsCollectionList {
	return s.CollectionList
}

func (s *ListDocumentCollectionsResponseBodyItems) SetCollectionList(v []*ListDocumentCollectionsResponseBodyItemsCollectionList) *ListDocumentCollectionsResponseBodyItems {
	s.CollectionList = v
	return s
}

func (s *ListDocumentCollectionsResponseBodyItems) Validate() error {
	return dara.Validate(s)
}

type ListDocumentCollectionsResponseBodyItemsCollectionList struct {
	// The name of the document collection.
	//
	// example:
	//
	// document
	CollectionName *string `json:"CollectionName,omitempty" xml:"CollectionName,omitempty"`
	// The number of vector dimensions.
	//
	// example:
	//
	// 1536
	Dimension *int32 `json:"Dimension,omitempty" xml:"Dimension,omitempty"`
	// The name of the vector algorithm.
	//
	// example:
	//
	// text-embeddding-v1
	EmbeddingModel *string `json:"EmbeddingModel,omitempty" xml:"EmbeddingModel,omitempty"`
	// The fields that are used for full-text search. Multiple fields are separated by commas (,).
	//
	// example:
	//
	// title
	FullTextRetrievalFields *string `json:"FullTextRetrievalFields,omitempty" xml:"FullTextRetrievalFields,omitempty"`
	// The metadata.
	//
	// example:
	//
	// {\\"page\\": \\"int\\", \\"title\\": \\"text\\"}
	Metadata *string `json:"Metadata,omitempty" xml:"Metadata,omitempty"`
	// The vector similarity algorithm.
	//
	// example:
	//
	// cosine
	Metrics *string `json:"Metrics,omitempty" xml:"Metrics,omitempty"`
	// The analyzer that is used for full-text search.
	//
	// example:
	//
	// zh_cn
	Parser *string `json:"Parser,omitempty" xml:"Parser,omitempty"`
}

func (s ListDocumentCollectionsResponseBodyItemsCollectionList) String() string {
	return dara.Prettify(s)
}

func (s ListDocumentCollectionsResponseBodyItemsCollectionList) GoString() string {
	return s.String()
}

func (s *ListDocumentCollectionsResponseBodyItemsCollectionList) GetCollectionName() *string {
	return s.CollectionName
}

func (s *ListDocumentCollectionsResponseBodyItemsCollectionList) GetDimension() *int32 {
	return s.Dimension
}

func (s *ListDocumentCollectionsResponseBodyItemsCollectionList) GetEmbeddingModel() *string {
	return s.EmbeddingModel
}

func (s *ListDocumentCollectionsResponseBodyItemsCollectionList) GetFullTextRetrievalFields() *string {
	return s.FullTextRetrievalFields
}

func (s *ListDocumentCollectionsResponseBodyItemsCollectionList) GetMetadata() *string {
	return s.Metadata
}

func (s *ListDocumentCollectionsResponseBodyItemsCollectionList) GetMetrics() *string {
	return s.Metrics
}

func (s *ListDocumentCollectionsResponseBodyItemsCollectionList) GetParser() *string {
	return s.Parser
}

func (s *ListDocumentCollectionsResponseBodyItemsCollectionList) SetCollectionName(v string) *ListDocumentCollectionsResponseBodyItemsCollectionList {
	s.CollectionName = &v
	return s
}

func (s *ListDocumentCollectionsResponseBodyItemsCollectionList) SetDimension(v int32) *ListDocumentCollectionsResponseBodyItemsCollectionList {
	s.Dimension = &v
	return s
}

func (s *ListDocumentCollectionsResponseBodyItemsCollectionList) SetEmbeddingModel(v string) *ListDocumentCollectionsResponseBodyItemsCollectionList {
	s.EmbeddingModel = &v
	return s
}

func (s *ListDocumentCollectionsResponseBodyItemsCollectionList) SetFullTextRetrievalFields(v string) *ListDocumentCollectionsResponseBodyItemsCollectionList {
	s.FullTextRetrievalFields = &v
	return s
}

func (s *ListDocumentCollectionsResponseBodyItemsCollectionList) SetMetadata(v string) *ListDocumentCollectionsResponseBodyItemsCollectionList {
	s.Metadata = &v
	return s
}

func (s *ListDocumentCollectionsResponseBodyItemsCollectionList) SetMetrics(v string) *ListDocumentCollectionsResponseBodyItemsCollectionList {
	s.Metrics = &v
	return s
}

func (s *ListDocumentCollectionsResponseBodyItemsCollectionList) SetParser(v string) *ListDocumentCollectionsResponseBodyItemsCollectionList {
	s.Parser = &v
	return s
}

func (s *ListDocumentCollectionsResponseBodyItemsCollectionList) Validate() error {
	return dara.Validate(s)
}

type iListDocumentCollectionsResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *ListDocumentCollectionsResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *ListDocumentCollectionsResponse
	GetStatusCode() *int32
	SetBody(v *ListDocumentCollectionsResponseBody) *ListDocumentCollectionsResponse
	GetBody() *ListDocumentCollectionsResponseBody
}

type ListDocumentCollectionsResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListDocumentCollectionsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListDocumentCollectionsResponse) String() string {
	return dara.Prettify(s)
}

func (s ListDocumentCollectionsResponse) GoString() string {
	return s.String()
}

func (s *ListDocumentCollectionsResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *ListDocumentCollectionsResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *ListDocumentCollectionsResponse) GetBody() *ListDocumentCollectionsResponseBody {
	return s.Body
}

func (s *ListDocumentCollectionsResponse) SetHeaders(v map[string]*string) *ListDocumentCollectionsResponse {
	s.Headers = v
	return s
}

func (s *ListDocumentCollectionsResponse) SetStatusCode(v int32) *ListDocumentCollectionsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListDocumentCollectionsResponse) SetBody(v *ListDocumentCollectionsResponseBody) *ListDocumentCollectionsResponse {
	s.Body = v
	return s
}

func (s *ListDocumentCollectionsResponse) Validate() error {
	return dara.Validate(s)
}

type iListDocumentsRequest interface {
	dara.Model
	String() string
	GoString() string
	SetCollection(v string) *ListDocumentsRequest
	GetCollection() *string
	SetDBInstanceId(v string) *ListDocumentsRequest
	GetDBInstanceId() *string
	SetMaxResults(v int32) *ListDocumentsRequest
	GetMaxResults() *int32
	SetNamespace(v string) *ListDocumentsRequest
	GetNamespace() *string
	SetNamespacePassword(v string) *ListDocumentsRequest
	GetNamespacePassword() *string
	SetNextToken(v string) *ListDocumentsRequest
	GetNextToken() *string
	SetOwnerId(v int64) *ListDocumentsRequest
	GetOwnerId() *int64
	SetRegionId(v string) *ListDocumentsRequest
	GetRegionId() *string
}

type ListDocumentsRequest struct {
	// The name of the document collection.
	//
	// >  You can call the [CreateDocumentCollection](https://help.aliyun.com/document_detail/2618448.html) operation to create a document collection and call the [ListDocumentCollections](https://help.aliyun.com/document_detail/2618452.html) operation to query a list of document collections.
	//
	// This parameter is required.
	//
	// example:
	//
	// document
	Collection *string `json:"Collection,omitempty" xml:"Collection,omitempty"`
	// The instance ID.
	//
	// > You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query details about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The maximum number of entries per page. Valid values: 1 to 100.
	//
	// example:
	//
	// 100
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// The name of the namespace. Default value: public.
	//
	// >  You can call the [CreateNamespace](https://help.aliyun.com/document_detail/2401495.html) operation to create a namespace and call the [ListNamespaces](https://help.aliyun.com/document_detail/2401502.html) operation to query a list of namespaces.
	//
	// example:
	//
	// mynamespace
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// The password of the namespace.
	//
	// >  This value is specified when you call the [CreateNamespace](https://help.aliyun.com/document_detail/2401495.html) operation.
	//
	// This parameter is required.
	//
	// example:
	//
	// testpassword
	NamespacePassword *string `json:"NamespacePassword,omitempty" xml:"NamespacePassword,omitempty"`
	// The pagination token that is used in the next request to retrieve a new page of results. You do not need to specify this parameter for the first request. You must specify the token that is obtained from the previous query as the value of NextToken.
	//
	// example:
	//
	// caeba0bbb2be03f84eb48b699f0a4883
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	OwnerId   *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The region ID of the instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ListDocumentsRequest) String() string {
	return dara.Prettify(s)
}

func (s ListDocumentsRequest) GoString() string {
	return s.String()
}

func (s *ListDocumentsRequest) GetCollection() *string {
	return s.Collection
}

func (s *ListDocumentsRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *ListDocumentsRequest) GetMaxResults() *int32 {
	return s.MaxResults
}

func (s *ListDocumentsRequest) GetNamespace() *string {
	return s.Namespace
}

func (s *ListDocumentsRequest) GetNamespacePassword() *string {
	return s.NamespacePassword
}

func (s *ListDocumentsRequest) GetNextToken() *string {
	return s.NextToken
}

func (s *ListDocumentsRequest) GetOwnerId() *int64 {
	return s.OwnerId
}

func (s *ListDocumentsRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *ListDocumentsRequest) SetCollection(v string) *ListDocumentsRequest {
	s.Collection = &v
	return s
}

func (s *ListDocumentsRequest) SetDBInstanceId(v string) *ListDocumentsRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ListDocumentsRequest) SetMaxResults(v int32) *ListDocumentsRequest {
	s.MaxResults = &v
	return s
}

func (s *ListDocumentsRequest) SetNamespace(v string) *ListDocumentsRequest {
	s.Namespace = &v
	return s
}

func (s *ListDocumentsRequest) SetNamespacePassword(v string) *ListDocumentsRequest {
	s.NamespacePassword = &v
	return s
}

func (s *ListDocumentsRequest) SetNextToken(v string) *ListDocumentsRequest {
	s.NextToken = &v
	return s
}

func (s *ListDocumentsRequest) SetOwnerId(v int64) *ListDocumentsRequest {
	s.OwnerId = &v
	return s
}

func (s *ListDocumentsRequest) SetRegionId(v string) *ListDocumentsRequest {
	s.RegionId = &v
	return s
}

func (s *ListDocumentsRequest) Validate() error {
	return dara.Validate(s)
}

type iListDocumentsResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetCount(v int32) *ListDocumentsResponseBody
	GetCount() *int32
	SetItems(v *ListDocumentsResponseBodyItems) *ListDocumentsResponseBody
	GetItems() *ListDocumentsResponseBodyItems
	SetMessage(v string) *ListDocumentsResponseBody
	GetMessage() *string
	SetNextToken(v string) *ListDocumentsResponseBody
	GetNextToken() *string
	SetRequestId(v string) *ListDocumentsResponseBody
	GetRequestId() *string
	SetStatus(v string) *ListDocumentsResponseBody
	GetStatus() *string
}

type ListDocumentsResponseBody struct {
	// The total number of entries returned.
	//
	// example:
	//
	// 3
	Count *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	// The queried documents.
	Items *ListDocumentsResponseBodyItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Struct"`
	// The returned message.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// A pagination token. It can be used in the next request to retrieve a new page of results. If NextToken is empty, no next page exists.
	//
	// example:
	//
	// caeba0bbb2be03f84eb48b699f0a4883
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **success**
	//
	// 	- **fail**
	//
	// example:
	//
	// success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListDocumentsResponseBody) String() string {
	return dara.Prettify(s)
}

func (s ListDocumentsResponseBody) GoString() string {
	return s.String()
}

func (s *ListDocumentsResponseBody) GetCount() *int32 {
	return s.Count
}

func (s *ListDocumentsResponseBody) GetItems() *ListDocumentsResponseBodyItems {
	return s.Items
}

func (s *ListDocumentsResponseBody) GetMessage() *string {
	return s.Message
}

func (s *ListDocumentsResponseBody) GetNextToken() *string {
	return s.NextToken
}

func (s *ListDocumentsResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *ListDocumentsResponseBody) GetStatus() *string {
	return s.Status
}

func (s *ListDocumentsResponseBody) SetCount(v int32) *ListDocumentsResponseBody {
	s.Count = &v
	return s
}

func (s *ListDocumentsResponseBody) SetItems(v *ListDocumentsResponseBodyItems) *ListDocumentsResponseBody {
	s.Items = v
	return s
}

func (s *ListDocumentsResponseBody) SetMessage(v string) *ListDocumentsResponseBody {
	s.Message = &v
	return s
}

func (s *ListDocumentsResponseBody) SetNextToken(v string) *ListDocumentsResponseBody {
	s.NextToken = &v
	return s
}

func (s *ListDocumentsResponseBody) SetRequestId(v string) *ListDocumentsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListDocumentsResponseBody) SetStatus(v string) *ListDocumentsResponseBody {
	s.Status = &v
	return s
}

func (s *ListDocumentsResponseBody) Validate() error {
	return dara.Validate(s)
}

type ListDocumentsResponseBodyItems struct {
	DocumentList []*ListDocumentsResponseBodyItemsDocumentList `json:"DocumentList,omitempty" xml:"DocumentList,omitempty" type:"Repeated"`
}

func (s ListDocumentsResponseBodyItems) String() string {
	return dara.Prettify(s)
}

func (s ListDocumentsResponseBodyItems) GoString() string {
	return s.String()
}

func (s *ListDocumentsResponseBodyItems) GetDocumentList() []*ListDocumentsResponseBodyItemsDocumentList {
	return s.DocumentList
}

func (s *ListDocumentsResponseBodyItems) SetDocumentList(v []*ListDocumentsResponseBodyItemsDocumentList) *ListDocumentsResponseBodyItems {
	s.DocumentList = v
	return s
}

func (s *ListDocumentsResponseBodyItems) Validate() error {
	return dara.Validate(s)
}

type ListDocumentsResponseBodyItemsDocumentList struct {
	// The name of the document.
	//
	// example:
	//
	// music.txt
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// The source of the document.
	//
	// example:
	//
	// http://oss.xxx/music.txt
	Source *string `json:"Source,omitempty" xml:"Source,omitempty"`
}

func (s ListDocumentsResponseBodyItemsDocumentList) String() string {
	return dara.Prettify(s)
}

func (s ListDocumentsResponseBodyItemsDocumentList) GoString() string {
	return s.String()
}

func (s *ListDocumentsResponseBodyItemsDocumentList) GetFileName() *string {
	return s.FileName
}

func (s *ListDocumentsResponseBodyItemsDocumentList) GetSource() *string {
	return s.Source
}

func (s *ListDocumentsResponseBodyItemsDocumentList) SetFileName(v string) *ListDocumentsResponseBodyItemsDocumentList {
	s.FileName = &v
	return s
}

func (s *ListDocumentsResponseBodyItemsDocumentList) SetSource(v string) *ListDocumentsResponseBodyItemsDocumentList {
	s.Source = &v
	return s
}

func (s *ListDocumentsResponseBodyItemsDocumentList) Validate() error {
	return dara.Validate(s)
}

type iListDocumentsResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *ListDocumentsResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *ListDocumentsResponse
	GetStatusCode() *int32
	SetBody(v *ListDocumentsResponseBody) *ListDocumentsResponse
	GetBody() *ListDocumentsResponseBody
}

type ListDocumentsResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListDocumentsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListDocumentsResponse) String() string {
	return dara.Prettify(s)
}

func (s ListDocumentsResponse) GoString() string {
	return s.String()
}

func (s *ListDocumentsResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *ListDocumentsResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *ListDocumentsResponse) GetBody() *ListDocumentsResponseBody {
	return s.Body
}

func (s *ListDocumentsResponse) SetHeaders(v map[string]*string) *ListDocumentsResponse {
	s.Headers = v
	return s
}

func (s *ListDocumentsResponse) SetStatusCode(v int32) *ListDocumentsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListDocumentsResponse) SetBody(v *ListDocumentsResponseBody) *ListDocumentsResponse {
	s.Body = v
	return s
}

func (s *ListDocumentsResponse) Validate() error {
	return dara.Validate(s)
}

type iListExternalDataServicesRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *ListExternalDataServicesRequest
	GetDBInstanceId() *string
	SetPageNumber(v int32) *ListExternalDataServicesRequest
	GetPageNumber() *int32
	SetPageSize(v int32) *ListExternalDataServicesRequest
	GetPageSize() *int32
	SetRegionId(v string) *ListExternalDataServicesRequest
	GetRegionId() *string
}

type ListExternalDataServicesRequest struct {
	// The instance ID.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp10g78o9807yv9h3
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 50
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/86912.html) operation to query the most recent region list.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ListExternalDataServicesRequest) String() string {
	return dara.Prettify(s)
}

func (s ListExternalDataServicesRequest) GoString() string {
	return s.String()
}

func (s *ListExternalDataServicesRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *ListExternalDataServicesRequest) GetPageNumber() *int32 {
	return s.PageNumber
}

func (s *ListExternalDataServicesRequest) GetPageSize() *int32 {
	return s.PageSize
}

func (s *ListExternalDataServicesRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *ListExternalDataServicesRequest) SetDBInstanceId(v string) *ListExternalDataServicesRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ListExternalDataServicesRequest) SetPageNumber(v int32) *ListExternalDataServicesRequest {
	s.PageNumber = &v
	return s
}

func (s *ListExternalDataServicesRequest) SetPageSize(v int32) *ListExternalDataServicesRequest {
	s.PageSize = &v
	return s
}

func (s *ListExternalDataServicesRequest) SetRegionId(v string) *ListExternalDataServicesRequest {
	s.RegionId = &v
	return s
}

func (s *ListExternalDataServicesRequest) Validate() error {
	return dara.Validate(s)
}

type iListExternalDataServicesResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetPageNumber(v int32) *ListExternalDataServicesResponseBody
	GetPageNumber() *int32
	SetRequestId(v string) *ListExternalDataServicesResponseBody
	GetRequestId() *string
	SetServiceItems(v []*ListExternalDataServicesResponseBodyServiceItems) *ListExternalDataServicesResponseBody
	GetServiceItems() []*ListExternalDataServicesResponseBodyServiceItems
	SetTotalRecordCount(v int32) *ListExternalDataServicesResponseBody
	GetTotalRecordCount() *int32
}

type ListExternalDataServicesResponseBody struct {
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The request ID.
	//
	// example:
	//
	// B4CAF581-2AC7-41AD-8940-D56DF7AADF5B
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The queried services.
	ServiceItems []*ListExternalDataServicesResponseBodyServiceItems `json:"ServiceItems,omitempty" xml:"ServiceItems,omitempty" type:"Repeated"`
	// The total number of entries returned.
	//
	// example:
	//
	// 2
	TotalRecordCount *int32 `json:"TotalRecordCount,omitempty" xml:"TotalRecordCount,omitempty"`
}

func (s ListExternalDataServicesResponseBody) String() string {
	return dara.Prettify(s)
}

func (s ListExternalDataServicesResponseBody) GoString() string {
	return s.String()
}

func (s *ListExternalDataServicesResponseBody) GetPageNumber() *int32 {
	return s.PageNumber
}

func (s *ListExternalDataServicesResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *ListExternalDataServicesResponseBody) GetServiceItems() []*ListExternalDataServicesResponseBodyServiceItems {
	return s.ServiceItems
}

func (s *ListExternalDataServicesResponseBody) GetTotalRecordCount() *int32 {
	return s.TotalRecordCount
}

func (s *ListExternalDataServicesResponseBody) SetPageNumber(v int32) *ListExternalDataServicesResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListExternalDataServicesResponseBody) SetRequestId(v string) *ListExternalDataServicesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListExternalDataServicesResponseBody) SetServiceItems(v []*ListExternalDataServicesResponseBodyServiceItems) *ListExternalDataServicesResponseBody {
	s.ServiceItems = v
	return s
}

func (s *ListExternalDataServicesResponseBody) SetTotalRecordCount(v int32) *ListExternalDataServicesResponseBody {
	s.TotalRecordCount = &v
	return s
}

func (s *ListExternalDataServicesResponseBody) Validate() error {
	return dara.Validate(s)
}

type ListExternalDataServicesResponseBodyServiceItems struct {
	// The time when the service was created.
	//
	// example:
	//
	// 2019-09-08T16:00:00Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The time when the service was last modified.
	//
	// example:
	//
	// 2019-09-08T17:00:00Z
	ModifyTime *string `json:"ModifyTime,omitempty" xml:"ModifyTime,omitempty"`
	// The description of the service.
	//
	// example:
	//
	// test-adbpgss
	ServiceDescription *string `json:"ServiceDescription,omitempty" xml:"ServiceDescription,omitempty"`
	// The service ID.
	//
	// example:
	//
	// 1
	ServiceId *string `json:"ServiceId,omitempty" xml:"ServiceId,omitempty"`
	// The name of the service.
	//
	// example:
	//
	// test-adbpgss
	ServiceName *string `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
	// The specifications of the service. Unit: compute units (CUs).
	//
	// example:
	//
	// 2
	ServiceSpec *string `json:"ServiceSpec,omitempty" xml:"ServiceSpec,omitempty"`
	// The type of the service. Valid values:
	//
	// 	- pxf
	//
	// example:
	//
	// pxf
	ServiceType *string `json:"ServiceType,omitempty" xml:"ServiceType,omitempty"`
	// The status of the service. Valid values:
	//
	// 	- Init
	//
	// 	- Running
	//
	// 	- Exception
	//
	// 	- Paused
	//
	// example:
	//
	// Running
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListExternalDataServicesResponseBodyServiceItems) String() string {
	return dara.Prettify(s)
}

func (s ListExternalDataServicesResponseBodyServiceItems) GoString() string {
	return s.String()
}

func (s *ListExternalDataServicesResponseBodyServiceItems) GetCreateTime() *string {
	return s.CreateTime
}

func (s *ListExternalDataServicesResponseBodyServiceItems) GetModifyTime() *string {
	return s.ModifyTime
}

func (s *ListExternalDataServicesResponseBodyServiceItems) GetServiceDescription() *string {
	return s.ServiceDescription
}

func (s *ListExternalDataServicesResponseBodyServiceItems) GetServiceId() *string {
	return s.ServiceId
}

func (s *ListExternalDataServicesResponseBodyServiceItems) GetServiceName() *string {
	return s.ServiceName
}

func (s *ListExternalDataServicesResponseBodyServiceItems) GetServiceSpec() *string {
	return s.ServiceSpec
}

func (s *ListExternalDataServicesResponseBodyServiceItems) GetServiceType() *string {
	return s.ServiceType
}

func (s *ListExternalDataServicesResponseBodyServiceItems) GetStatus() *string {
	return s.Status
}

func (s *ListExternalDataServicesResponseBodyServiceItems) SetCreateTime(v string) *ListExternalDataServicesResponseBodyServiceItems {
	s.CreateTime = &v
	return s
}

func (s *ListExternalDataServicesResponseBodyServiceItems) SetModifyTime(v string) *ListExternalDataServicesResponseBodyServiceItems {
	s.ModifyTime = &v
	return s
}

func (s *ListExternalDataServicesResponseBodyServiceItems) SetServiceDescription(v string) *ListExternalDataServicesResponseBodyServiceItems {
	s.ServiceDescription = &v
	return s
}

func (s *ListExternalDataServicesResponseBodyServiceItems) SetServiceId(v string) *ListExternalDataServicesResponseBodyServiceItems {
	s.ServiceId = &v
	return s
}

func (s *ListExternalDataServicesResponseBodyServiceItems) SetServiceName(v string) *ListExternalDataServicesResponseBodyServiceItems {
	s.ServiceName = &v
	return s
}

func (s *ListExternalDataServicesResponseBodyServiceItems) SetServiceSpec(v string) *ListExternalDataServicesResponseBodyServiceItems {
	s.ServiceSpec = &v
	return s
}

func (s *ListExternalDataServicesResponseBodyServiceItems) SetServiceType(v string) *ListExternalDataServicesResponseBodyServiceItems {
	s.ServiceType = &v
	return s
}

func (s *ListExternalDataServicesResponseBodyServiceItems) SetStatus(v string) *ListExternalDataServicesResponseBodyServiceItems {
	s.Status = &v
	return s
}

func (s *ListExternalDataServicesResponseBodyServiceItems) Validate() error {
	return dara.Validate(s)
}

type iListExternalDataServicesResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *ListExternalDataServicesResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *ListExternalDataServicesResponse
	GetStatusCode() *int32
	SetBody(v *ListExternalDataServicesResponseBody) *ListExternalDataServicesResponse
	GetBody() *ListExternalDataServicesResponseBody
}

type ListExternalDataServicesResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListExternalDataServicesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListExternalDataServicesResponse) String() string {
	return dara.Prettify(s)
}

func (s ListExternalDataServicesResponse) GoString() string {
	return s.String()
}

func (s *ListExternalDataServicesResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *ListExternalDataServicesResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *ListExternalDataServicesResponse) GetBody() *ListExternalDataServicesResponseBody {
	return s.Body
}

func (s *ListExternalDataServicesResponse) SetHeaders(v map[string]*string) *ListExternalDataServicesResponse {
	s.Headers = v
	return s
}

func (s *ListExternalDataServicesResponse) SetStatusCode(v int32) *ListExternalDataServicesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListExternalDataServicesResponse) SetBody(v *ListExternalDataServicesResponseBody) *ListExternalDataServicesResponse {
	s.Body = v
	return s
}

func (s *ListExternalDataServicesResponse) Validate() error {
	return dara.Validate(s)
}

type iListExternalDataSourcesRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *ListExternalDataSourcesRequest
	GetDBInstanceId() *string
	SetPageNumber(v int32) *ListExternalDataSourcesRequest
	GetPageNumber() *int32
	SetPageSize(v int32) *ListExternalDataSourcesRequest
	GetPageSize() *int32
	SetRegionId(v string) *ListExternalDataSourcesRequest
	GetRegionId() *string
}

type ListExternalDataSourcesRequest struct {
	// The instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The page number. Pages start from page 1. Default value: **1**.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. Valid values:
	//
	// 	- **30**
	//
	// 	- **50**
	//
	// 	- **100**
	//
	// Default value: 30.
	//
	// example:
	//
	// 50
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The region ID of the instance.
	//
	// example:
	//
	// cn-shanghai
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ListExternalDataSourcesRequest) String() string {
	return dara.Prettify(s)
}

func (s ListExternalDataSourcesRequest) GoString() string {
	return s.String()
}

func (s *ListExternalDataSourcesRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *ListExternalDataSourcesRequest) GetPageNumber() *int32 {
	return s.PageNumber
}

func (s *ListExternalDataSourcesRequest) GetPageSize() *int32 {
	return s.PageSize
}

func (s *ListExternalDataSourcesRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *ListExternalDataSourcesRequest) SetDBInstanceId(v string) *ListExternalDataSourcesRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ListExternalDataSourcesRequest) SetPageNumber(v int32) *ListExternalDataSourcesRequest {
	s.PageNumber = &v
	return s
}

func (s *ListExternalDataSourcesRequest) SetPageSize(v int32) *ListExternalDataSourcesRequest {
	s.PageSize = &v
	return s
}

func (s *ListExternalDataSourcesRequest) SetRegionId(v string) *ListExternalDataSourcesRequest {
	s.RegionId = &v
	return s
}

func (s *ListExternalDataSourcesRequest) Validate() error {
	return dara.Validate(s)
}

type iListExternalDataSourcesResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetItems(v []*ListExternalDataSourcesResponseBodyItems) *ListExternalDataSourcesResponseBody
	GetItems() []*ListExternalDataSourcesResponseBodyItems
	SetPageNumber(v int32) *ListExternalDataSourcesResponseBody
	GetPageNumber() *int32
	SetRequestId(v string) *ListExternalDataSourcesResponseBody
	GetRequestId() *string
	SetTotalRecordCount(v int32) *ListExternalDataSourcesResponseBody
	GetTotalRecordCount() *int32
}

type ListExternalDataSourcesResponseBody struct {
	// The Hadoop external table services.
	Items []*ListExternalDataSourcesResponseBodyItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Repeated"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The request ID.
	//
	// example:
	//
	// BBE00C04-A3E8-4114-881D-0480A72CB92E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 2
	TotalRecordCount *int32 `json:"TotalRecordCount,omitempty" xml:"TotalRecordCount,omitempty"`
}

func (s ListExternalDataSourcesResponseBody) String() string {
	return dara.Prettify(s)
}

func (s ListExternalDataSourcesResponseBody) GoString() string {
	return s.String()
}

func (s *ListExternalDataSourcesResponseBody) GetItems() []*ListExternalDataSourcesResponseBodyItems {
	return s.Items
}

func (s *ListExternalDataSourcesResponseBody) GetPageNumber() *int32 {
	return s.PageNumber
}

func (s *ListExternalDataSourcesResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *ListExternalDataSourcesResponseBody) GetTotalRecordCount() *int32 {
	return s.TotalRecordCount
}

func (s *ListExternalDataSourcesResponseBody) SetItems(v []*ListExternalDataSourcesResponseBodyItems) *ListExternalDataSourcesResponseBody {
	s.Items = v
	return s
}

func (s *ListExternalDataSourcesResponseBody) SetPageNumber(v int32) *ListExternalDataSourcesResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListExternalDataSourcesResponseBody) SetRequestId(v string) *ListExternalDataSourcesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListExternalDataSourcesResponseBody) SetTotalRecordCount(v int32) *ListExternalDataSourcesResponseBody {
	s.TotalRecordCount = &v
	return s
}

func (s *ListExternalDataSourcesResponseBody) Validate() error {
	return dara.Validate(s)
}

type ListExternalDataSourcesResponseBodyItems struct {
	// The time when the service was created.
	//
	// example:
	//
	// 2019-09-08T16:00:00Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The description of the data source.
	//
	// example:
	//
	// test
	DataSourceDescription *string `json:"DataSourceDescription,omitempty" xml:"DataSourceDescription,omitempty"`
	// The service directory in which Hadoop-related configuration files are stored.
	//
	// example:
	//
	// HadoopDir
	DataSourceDir *string `json:"DataSourceDir,omitempty" xml:"DataSourceDir,omitempty"`
	// The service ID.
	//
	// example:
	//
	// 123
	DataSourceId *int32 `json:"DataSourceId,omitempty" xml:"DataSourceId,omitempty"`
	// The name of the service.
	//
	// example:
	//
	// hdfs_pxf
	DataSourceName *string `json:"DataSourceName,omitempty" xml:"DataSourceName,omitempty"`
	// The status of the service. Valid values:
	//
	// 	- init
	//
	// 	- running
	//
	// 	- exception
	//
	// example:
	//
	// Running
	DataSourceStatus *string `json:"DataSourceStatus,omitempty" xml:"DataSourceStatus,omitempty"`
	// The type of the data source.
	//
	// example:
	//
	// HDFS
	DataSourceType *string `json:"DataSourceType,omitempty" xml:"DataSourceType,omitempty"`
	// The Id of external data service
	//
	// example:
	//
	// 123
	ExternalDataServiceId *int32 `json:"ExternalDataServiceId,omitempty" xml:"ExternalDataServiceId,omitempty"`
	// The time when the service was last modified.
	//
	// example:
	//
	// 2019-10-08T16:00:00Z
	ModifyTime *string `json:"ModifyTime,omitempty" xml:"ModifyTime,omitempty"`
	// The information about the service status. For example, if the service is in the exception state, the cause of the exception is displayed. If the service is in the running state, this parameter is left empty.
	//
	// example:
	//
	// ""
	StatusMessage *string `json:"StatusMessage,omitempty" xml:"StatusMessage,omitempty"`
}

func (s ListExternalDataSourcesResponseBodyItems) String() string {
	return dara.Prettify(s)
}

func (s ListExternalDataSourcesResponseBodyItems) GoString() string {
	return s.String()
}

func (s *ListExternalDataSourcesResponseBodyItems) GetCreateTime() *string {
	return s.CreateTime
}

func (s *ListExternalDataSourcesResponseBodyItems) GetDataSourceDescription() *string {
	return s.DataSourceDescription
}

func (s *ListExternalDataSourcesResponseBodyItems) GetDataSourceDir() *string {
	return s.DataSourceDir
}

func (s *ListExternalDataSourcesResponseBodyItems) GetDataSourceId() *int32 {
	return s.DataSourceId
}

func (s *ListExternalDataSourcesResponseBodyItems) GetDataSourceName() *string {
	return s.DataSourceName
}

func (s *ListExternalDataSourcesResponseBodyItems) GetDataSourceStatus() *string {
	return s.DataSourceStatus
}

func (s *ListExternalDataSourcesResponseBodyItems) GetDataSourceType() *string {
	return s.DataSourceType
}

func (s *ListExternalDataSourcesResponseBodyItems) GetExternalDataServiceId() *int32 {
	return s.ExternalDataServiceId
}

func (s *ListExternalDataSourcesResponseBodyItems) GetModifyTime() *string {
	return s.ModifyTime
}

func (s *ListExternalDataSourcesResponseBodyItems) GetStatusMessage() *string {
	return s.StatusMessage
}

func (s *ListExternalDataSourcesResponseBodyItems) SetCreateTime(v string) *ListExternalDataSourcesResponseBodyItems {
	s.CreateTime = &v
	return s
}

func (s *ListExternalDataSourcesResponseBodyItems) SetDataSourceDescription(v string) *ListExternalDataSourcesResponseBodyItems {
	s.DataSourceDescription = &v
	return s
}

func (s *ListExternalDataSourcesResponseBodyItems) SetDataSourceDir(v string) *ListExternalDataSourcesResponseBodyItems {
	s.DataSourceDir = &v
	return s
}

func (s *ListExternalDataSourcesResponseBodyItems) SetDataSourceId(v int32) *ListExternalDataSourcesResponseBodyItems {
	s.DataSourceId = &v
	return s
}

func (s *ListExternalDataSourcesResponseBodyItems) SetDataSourceName(v string) *ListExternalDataSourcesResponseBodyItems {
	s.DataSourceName = &v
	return s
}

func (s *ListExternalDataSourcesResponseBodyItems) SetDataSourceStatus(v string) *ListExternalDataSourcesResponseBodyItems {
	s.DataSourceStatus = &v
	return s
}

func (s *ListExternalDataSourcesResponseBodyItems) SetDataSourceType(v string) *ListExternalDataSourcesResponseBodyItems {
	s.DataSourceType = &v
	return s
}

func (s *ListExternalDataSourcesResponseBodyItems) SetExternalDataServiceId(v int32) *ListExternalDataSourcesResponseBodyItems {
	s.ExternalDataServiceId = &v
	return s
}

func (s *ListExternalDataSourcesResponseBodyItems) SetModifyTime(v string) *ListExternalDataSourcesResponseBodyItems {
	s.ModifyTime = &v
	return s
}

func (s *ListExternalDataSourcesResponseBodyItems) SetStatusMessage(v string) *ListExternalDataSourcesResponseBodyItems {
	s.StatusMessage = &v
	return s
}

func (s *ListExternalDataSourcesResponseBodyItems) Validate() error {
	return dara.Validate(s)
}

type iListExternalDataSourcesResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *ListExternalDataSourcesResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *ListExternalDataSourcesResponse
	GetStatusCode() *int32
	SetBody(v *ListExternalDataSourcesResponseBody) *ListExternalDataSourcesResponse
	GetBody() *ListExternalDataSourcesResponseBody
}

type ListExternalDataSourcesResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListExternalDataSourcesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListExternalDataSourcesResponse) String() string {
	return dara.Prettify(s)
}

func (s ListExternalDataSourcesResponse) GoString() string {
	return s.String()
}

func (s *ListExternalDataSourcesResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *ListExternalDataSourcesResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *ListExternalDataSourcesResponse) GetBody() *ListExternalDataSourcesResponseBody {
	return s.Body
}

func (s *ListExternalDataSourcesResponse) SetHeaders(v map[string]*string) *ListExternalDataSourcesResponse {
	s.Headers = v
	return s
}

func (s *ListExternalDataSourcesResponse) SetStatusCode(v int32) *ListExternalDataSourcesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListExternalDataSourcesResponse) SetBody(v *ListExternalDataSourcesResponseBody) *ListExternalDataSourcesResponse {
	s.Body = v
	return s
}

func (s *ListExternalDataSourcesResponse) Validate() error {
	return dara.Validate(s)
}

type iListIndicesRequest interface {
	dara.Model
	String() string
	GoString() string
	SetCollection(v string) *ListIndicesRequest
	GetCollection() *string
	SetDBInstanceId(v string) *ListIndicesRequest
	GetDBInstanceId() *string
	SetNamespace(v string) *ListIndicesRequest
	GetNamespace() *string
	SetNamespacePassword(v string) *ListIndicesRequest
	GetNamespacePassword() *string
	SetOwnerId(v int64) *ListIndicesRequest
	GetOwnerId() *int64
	SetRegionId(v string) *ListIndicesRequest
	GetRegionId() *string
	SetWorkspaceId(v string) *ListIndicesRequest
	GetWorkspaceId() *string
}

type ListIndicesRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// testcollection
	Collection *string `json:"Collection,omitempty" xml:"Collection,omitempty"`
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// mynamespace
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// testpassword
	NamespacePassword *string `json:"NamespacePassword,omitempty" xml:"NamespacePassword,omitempty"`
	OwnerId           *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// example:
	//
	// gp-ws-*****
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s ListIndicesRequest) String() string {
	return dara.Prettify(s)
}

func (s ListIndicesRequest) GoString() string {
	return s.String()
}

func (s *ListIndicesRequest) GetCollection() *string {
	return s.Collection
}

func (s *ListIndicesRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *ListIndicesRequest) GetNamespace() *string {
	return s.Namespace
}

func (s *ListIndicesRequest) GetNamespacePassword() *string {
	return s.NamespacePassword
}

func (s *ListIndicesRequest) GetOwnerId() *int64 {
	return s.OwnerId
}

func (s *ListIndicesRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *ListIndicesRequest) GetWorkspaceId() *string {
	return s.WorkspaceId
}

func (s *ListIndicesRequest) SetCollection(v string) *ListIndicesRequest {
	s.Collection = &v
	return s
}

func (s *ListIndicesRequest) SetDBInstanceId(v string) *ListIndicesRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ListIndicesRequest) SetNamespace(v string) *ListIndicesRequest {
	s.Namespace = &v
	return s
}

func (s *ListIndicesRequest) SetNamespacePassword(v string) *ListIndicesRequest {
	s.NamespacePassword = &v
	return s
}

func (s *ListIndicesRequest) SetOwnerId(v int64) *ListIndicesRequest {
	s.OwnerId = &v
	return s
}

func (s *ListIndicesRequest) SetRegionId(v string) *ListIndicesRequest {
	s.RegionId = &v
	return s
}

func (s *ListIndicesRequest) SetWorkspaceId(v string) *ListIndicesRequest {
	s.WorkspaceId = &v
	return s
}

func (s *ListIndicesRequest) Validate() error {
	return dara.Validate(s)
}

type iListIndicesResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetIndices(v *ListIndicesResponseBodyIndices) *ListIndicesResponseBody
	GetIndices() *ListIndicesResponseBodyIndices
	SetMessage(v string) *ListIndicesResponseBody
	GetMessage() *string
	SetRequestId(v string) *ListIndicesResponseBody
	GetRequestId() *string
	SetStatus(v string) *ListIndicesResponseBody
	GetStatus() *string
}

type ListIndicesResponseBody struct {
	Indices *ListIndicesResponseBodyIndices `json:"Indices,omitempty" xml:"Indices,omitempty" type:"Struct"`
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListIndicesResponseBody) String() string {
	return dara.Prettify(s)
}

func (s ListIndicesResponseBody) GoString() string {
	return s.String()
}

func (s *ListIndicesResponseBody) GetIndices() *ListIndicesResponseBodyIndices {
	return s.Indices
}

func (s *ListIndicesResponseBody) GetMessage() *string {
	return s.Message
}

func (s *ListIndicesResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *ListIndicesResponseBody) GetStatus() *string {
	return s.Status
}

func (s *ListIndicesResponseBody) SetIndices(v *ListIndicesResponseBodyIndices) *ListIndicesResponseBody {
	s.Indices = v
	return s
}

func (s *ListIndicesResponseBody) SetMessage(v string) *ListIndicesResponseBody {
	s.Message = &v
	return s
}

func (s *ListIndicesResponseBody) SetRequestId(v string) *ListIndicesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListIndicesResponseBody) SetStatus(v string) *ListIndicesResponseBody {
	s.Status = &v
	return s
}

func (s *ListIndicesResponseBody) Validate() error {
	return dara.Validate(s)
}

type ListIndicesResponseBodyIndices struct {
	Indices []*ListIndicesResponseBodyIndicesIndices `json:"Indices,omitempty" xml:"Indices,omitempty" type:"Repeated"`
}

func (s ListIndicesResponseBodyIndices) String() string {
	return dara.Prettify(s)
}

func (s ListIndicesResponseBodyIndices) GoString() string {
	return s.String()
}

func (s *ListIndicesResponseBodyIndices) GetIndices() []*ListIndicesResponseBodyIndicesIndices {
	return s.Indices
}

func (s *ListIndicesResponseBodyIndices) SetIndices(v []*ListIndicesResponseBodyIndicesIndices) *ListIndicesResponseBodyIndices {
	s.Indices = v
	return s
}

func (s *ListIndicesResponseBodyIndices) Validate() error {
	return dara.Validate(s)
}

type ListIndicesResponseBodyIndicesIndices struct {
	// example:
	//
	// testcollection
	Collection *string `json:"Collection,omitempty" xml:"Collection,omitempty"`
	// example:
	//
	// CREATE INDEX testindex ON mynamespace. testcollection
	IndexDef *string `json:"IndexDef,omitempty" xml:"IndexDef,omitempty"`
	// example:
	//
	// testindex
	IndexName *string `json:"IndexName,omitempty" xml:"IndexName,omitempty"`
	// example:
	//
	// mynamespace
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
}

func (s ListIndicesResponseBodyIndicesIndices) String() string {
	return dara.Prettify(s)
}

func (s ListIndicesResponseBodyIndicesIndices) GoString() string {
	return s.String()
}

func (s *ListIndicesResponseBodyIndicesIndices) GetCollection() *string {
	return s.Collection
}

func (s *ListIndicesResponseBodyIndicesIndices) GetIndexDef() *string {
	return s.IndexDef
}

func (s *ListIndicesResponseBodyIndicesIndices) GetIndexName() *string {
	return s.IndexName
}

func (s *ListIndicesResponseBodyIndicesIndices) GetNamespace() *string {
	return s.Namespace
}

func (s *ListIndicesResponseBodyIndicesIndices) SetCollection(v string) *ListIndicesResponseBodyIndicesIndices {
	s.Collection = &v
	return s
}

func (s *ListIndicesResponseBodyIndicesIndices) SetIndexDef(v string) *ListIndicesResponseBodyIndicesIndices {
	s.IndexDef = &v
	return s
}

func (s *ListIndicesResponseBodyIndicesIndices) SetIndexName(v string) *ListIndicesResponseBodyIndicesIndices {
	s.IndexName = &v
	return s
}

func (s *ListIndicesResponseBodyIndicesIndices) SetNamespace(v string) *ListIndicesResponseBodyIndicesIndices {
	s.Namespace = &v
	return s
}

func (s *ListIndicesResponseBodyIndicesIndices) Validate() error {
	return dara.Validate(s)
}

type iListIndicesResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *ListIndicesResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *ListIndicesResponse
	GetStatusCode() *int32
	SetBody(v *ListIndicesResponseBody) *ListIndicesResponse
	GetBody() *ListIndicesResponseBody
}

type ListIndicesResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListIndicesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListIndicesResponse) String() string {
	return dara.Prettify(s)
}

func (s ListIndicesResponse) GoString() string {
	return s.String()
}

func (s *ListIndicesResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *ListIndicesResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *ListIndicesResponse) GetBody() *ListIndicesResponseBody {
	return s.Body
}

func (s *ListIndicesResponse) SetHeaders(v map[string]*string) *ListIndicesResponse {
	s.Headers = v
	return s
}

func (s *ListIndicesResponse) SetStatusCode(v int32) *ListIndicesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListIndicesResponse) SetBody(v *ListIndicesResponseBody) *ListIndicesResponse {
	s.Body = v
	return s
}

func (s *ListIndicesResponse) Validate() error {
	return dara.Validate(s)
}

type iListInstanceExtensionsRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *ListInstanceExtensionsRequest
	GetDBInstanceId() *string
	SetExtension(v string) *ListInstanceExtensionsRequest
	GetExtension() *string
	SetInstallStatus(v string) *ListInstanceExtensionsRequest
	GetInstallStatus() *string
	SetPageNumber(v int32) *ListInstanceExtensionsRequest
	GetPageNumber() *int32
	SetPageSize(v int32) *ListInstanceExtensionsRequest
	GetPageSize() *int32
	SetRegionId(v string) *ListInstanceExtensionsRequest
	GetRegionId() *string
}

type ListInstanceExtensionsRequest struct {
	// The instance ID.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The name of the extension.
	//
	// example:
	//
	// citext
	Extension *string `json:"Extension,omitempty" xml:"Extension,omitempty"`
	// The installation status of the extension. Valid values:
	//
	// 	- installed
	//
	// 	- installing
	//
	// 	- uninstalled
	//
	// example:
	//
	// installed
	InstallStatus *string `json:"InstallStatus,omitempty" xml:"InstallStatus,omitempty"`
	// The page number. Pages start from page 1. Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. Valid values:
	//
	// 	- **30**
	//
	// 	- **50**
	//
	// 	- **100**
	//
	// Default value: **30**.
	//
	// example:
	//
	// 30
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The region ID of the instance.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ListInstanceExtensionsRequest) String() string {
	return dara.Prettify(s)
}

func (s ListInstanceExtensionsRequest) GoString() string {
	return s.String()
}

func (s *ListInstanceExtensionsRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *ListInstanceExtensionsRequest) GetExtension() *string {
	return s.Extension
}

func (s *ListInstanceExtensionsRequest) GetInstallStatus() *string {
	return s.InstallStatus
}

func (s *ListInstanceExtensionsRequest) GetPageNumber() *int32 {
	return s.PageNumber
}

func (s *ListInstanceExtensionsRequest) GetPageSize() *int32 {
	return s.PageSize
}

func (s *ListInstanceExtensionsRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *ListInstanceExtensionsRequest) SetDBInstanceId(v string) *ListInstanceExtensionsRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ListInstanceExtensionsRequest) SetExtension(v string) *ListInstanceExtensionsRequest {
	s.Extension = &v
	return s
}

func (s *ListInstanceExtensionsRequest) SetInstallStatus(v string) *ListInstanceExtensionsRequest {
	s.InstallStatus = &v
	return s
}

func (s *ListInstanceExtensionsRequest) SetPageNumber(v int32) *ListInstanceExtensionsRequest {
	s.PageNumber = &v
	return s
}

func (s *ListInstanceExtensionsRequest) SetPageSize(v int32) *ListInstanceExtensionsRequest {
	s.PageSize = &v
	return s
}

func (s *ListInstanceExtensionsRequest) SetRegionId(v string) *ListInstanceExtensionsRequest {
	s.RegionId = &v
	return s
}

func (s *ListInstanceExtensionsRequest) Validate() error {
	return dara.Validate(s)
}

type iListInstanceExtensionsResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetItems(v []*ListInstanceExtensionsResponseBodyItems) *ListInstanceExtensionsResponseBody
	GetItems() []*ListInstanceExtensionsResponseBodyItems
	SetPageNumber(v int32) *ListInstanceExtensionsResponseBody
	GetPageNumber() *int32
	SetPageRecordCount(v int32) *ListInstanceExtensionsResponseBody
	GetPageRecordCount() *int32
	SetRequestId(v string) *ListInstanceExtensionsResponseBody
	GetRequestId() *string
	SetTotalRecordCount(v int32) *ListInstanceExtensionsResponseBody
	GetTotalRecordCount() *int32
}

type ListInstanceExtensionsResponseBody struct {
	// The queried extensions.
	Items []*ListInstanceExtensionsResponseBodyItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Repeated"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 20
	PageRecordCount *int32 `json:"PageRecordCount,omitempty" xml:"PageRecordCount,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 7565770E-7C45-462D-BA4A-8A5396F2CAD1
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 1
	TotalRecordCount *int32 `json:"TotalRecordCount,omitempty" xml:"TotalRecordCount,omitempty"`
}

func (s ListInstanceExtensionsResponseBody) String() string {
	return dara.Prettify(s)
}

func (s ListInstanceExtensionsResponseBody) GoString() string {
	return s.String()
}

func (s *ListInstanceExtensionsResponseBody) GetItems() []*ListInstanceExtensionsResponseBodyItems {
	return s.Items
}

func (s *ListInstanceExtensionsResponseBody) GetPageNumber() *int32 {
	return s.PageNumber
}

func (s *ListInstanceExtensionsResponseBody) GetPageRecordCount() *int32 {
	return s.PageRecordCount
}

func (s *ListInstanceExtensionsResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *ListInstanceExtensionsResponseBody) GetTotalRecordCount() *int32 {
	return s.TotalRecordCount
}

func (s *ListInstanceExtensionsResponseBody) SetItems(v []*ListInstanceExtensionsResponseBodyItems) *ListInstanceExtensionsResponseBody {
	s.Items = v
	return s
}

func (s *ListInstanceExtensionsResponseBody) SetPageNumber(v int32) *ListInstanceExtensionsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListInstanceExtensionsResponseBody) SetPageRecordCount(v int32) *ListInstanceExtensionsResponseBody {
	s.PageRecordCount = &v
	return s
}

func (s *ListInstanceExtensionsResponseBody) SetRequestId(v string) *ListInstanceExtensionsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListInstanceExtensionsResponseBody) SetTotalRecordCount(v int32) *ListInstanceExtensionsResponseBody {
	s.TotalRecordCount = &v
	return s
}

func (s *ListInstanceExtensionsResponseBody) Validate() error {
	return dara.Validate(s)
}

type ListInstanceExtensionsResponseBodyItems struct {
	// The current version.
	//
	// example:
	//
	// 1.0
	CurrentVersion *string `json:"CurrentVersion,omitempty" xml:"CurrentVersion,omitempty"`
	// The description of the extension.
	//
	// example:
	//
	// citext usage
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The extension ID.
	//
	// example:
	//
	// 1
	ExtensionId *string `json:"ExtensionId,omitempty" xml:"ExtensionId,omitempty"`
	// The names of the databases in which the extension is installed.
	//
	// example:
	//
	// test
	InstalledDatabases *string `json:"InstalledDatabases,omitempty" xml:"InstalledDatabases,omitempty"`
	// Indicates whether an instance restart is required after you install the extension for the extension to take effect.
	//
	// example:
	//
	// false
	IsInstallNeedRestart *bool `json:"IsInstallNeedRestart,omitempty" xml:"IsInstallNeedRestart,omitempty"`
	// The latest version.
	//
	// example:
	//
	// 1.1
	LatestVersion *string `json:"LatestVersion,omitempty" xml:"LatestVersion,omitempty"`
	// The name of the extension.
	//
	// example:
	//
	// citext
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The status of the extension.
	//
	// example:
	//
	// installed
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListInstanceExtensionsResponseBodyItems) String() string {
	return dara.Prettify(s)
}

func (s ListInstanceExtensionsResponseBodyItems) GoString() string {
	return s.String()
}

func (s *ListInstanceExtensionsResponseBodyItems) GetCurrentVersion() *string {
	return s.CurrentVersion
}

func (s *ListInstanceExtensionsResponseBodyItems) GetDescription() *string {
	return s.Description
}

func (s *ListInstanceExtensionsResponseBodyItems) GetExtensionId() *string {
	return s.ExtensionId
}

func (s *ListInstanceExtensionsResponseBodyItems) GetInstalledDatabases() *string {
	return s.InstalledDatabases
}

func (s *ListInstanceExtensionsResponseBodyItems) GetIsInstallNeedRestart() *bool {
	return s.IsInstallNeedRestart
}

func (s *ListInstanceExtensionsResponseBodyItems) GetLatestVersion() *string {
	return s.LatestVersion
}

func (s *ListInstanceExtensionsResponseBodyItems) GetName() *string {
	return s.Name
}

func (s *ListInstanceExtensionsResponseBodyItems) GetStatus() *string {
	return s.Status
}

func (s *ListInstanceExtensionsResponseBodyItems) SetCurrentVersion(v string) *ListInstanceExtensionsResponseBodyItems {
	s.CurrentVersion = &v
	return s
}

func (s *ListInstanceExtensionsResponseBodyItems) SetDescription(v string) *ListInstanceExtensionsResponseBodyItems {
	s.Description = &v
	return s
}

func (s *ListInstanceExtensionsResponseBodyItems) SetExtensionId(v string) *ListInstanceExtensionsResponseBodyItems {
	s.ExtensionId = &v
	return s
}

func (s *ListInstanceExtensionsResponseBodyItems) SetInstalledDatabases(v string) *ListInstanceExtensionsResponseBodyItems {
	s.InstalledDatabases = &v
	return s
}

func (s *ListInstanceExtensionsResponseBodyItems) SetIsInstallNeedRestart(v bool) *ListInstanceExtensionsResponseBodyItems {
	s.IsInstallNeedRestart = &v
	return s
}

func (s *ListInstanceExtensionsResponseBodyItems) SetLatestVersion(v string) *ListInstanceExtensionsResponseBodyItems {
	s.LatestVersion = &v
	return s
}

func (s *ListInstanceExtensionsResponseBodyItems) SetName(v string) *ListInstanceExtensionsResponseBodyItems {
	s.Name = &v
	return s
}

func (s *ListInstanceExtensionsResponseBodyItems) SetStatus(v string) *ListInstanceExtensionsResponseBodyItems {
	s.Status = &v
	return s
}

func (s *ListInstanceExtensionsResponseBodyItems) Validate() error {
	return dara.Validate(s)
}

type iListInstanceExtensionsResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *ListInstanceExtensionsResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *ListInstanceExtensionsResponse
	GetStatusCode() *int32
	SetBody(v *ListInstanceExtensionsResponseBody) *ListInstanceExtensionsResponse
	GetBody() *ListInstanceExtensionsResponseBody
}

type ListInstanceExtensionsResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListInstanceExtensionsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListInstanceExtensionsResponse) String() string {
	return dara.Prettify(s)
}

func (s ListInstanceExtensionsResponse) GoString() string {
	return s.String()
}

func (s *ListInstanceExtensionsResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *ListInstanceExtensionsResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *ListInstanceExtensionsResponse) GetBody() *ListInstanceExtensionsResponseBody {
	return s.Body
}

func (s *ListInstanceExtensionsResponse) SetHeaders(v map[string]*string) *ListInstanceExtensionsResponse {
	s.Headers = v
	return s
}

func (s *ListInstanceExtensionsResponse) SetStatusCode(v int32) *ListInstanceExtensionsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListInstanceExtensionsResponse) SetBody(v *ListInstanceExtensionsResponseBody) *ListInstanceExtensionsResponse {
	s.Body = v
	return s
}

func (s *ListInstanceExtensionsResponse) Validate() error {
	return dara.Validate(s)
}

type iListNamespacesRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *ListNamespacesRequest
	GetDBInstanceId() *string
	SetManagerAccount(v string) *ListNamespacesRequest
	GetManagerAccount() *string
	SetManagerAccountPassword(v string) *ListNamespacesRequest
	GetManagerAccountPassword() *string
	SetOwnerId(v int64) *ListNamespacesRequest
	GetOwnerId() *int64
	SetRegionId(v string) *ListNamespacesRequest
	GetRegionId() *string
	SetWorkspaceId(v string) *ListNamespacesRequest
	GetWorkspaceId() *string
}

type ListNamespacesRequest struct {
	// The instance ID.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The name of the manager account that has the rds_superuser permission.
	//
	// >  You can create an account on the Account Management page of the AnalyticDB for PostgreSQL console or by calling the [CreateAccount](https://help.aliyun.com/document_detail/2361789.html) operation.
	//
	// This parameter is required.
	//
	// example:
	//
	// testaccount
	ManagerAccount *string `json:"ManagerAccount,omitempty" xml:"ManagerAccount,omitempty"`
	// The password of the manager account.
	//
	// This parameter is required.
	//
	// example:
	//
	// testpassword
	ManagerAccountPassword *string `json:"ManagerAccountPassword,omitempty" xml:"ManagerAccountPassword,omitempty"`
	OwnerId                *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The region ID of the instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the workspace that consists of multiple AnalyticDB for PostgreSQL instances. You must specify one of the WorkspaceId and DBInstanceId parameters. If you specify both parameters, the WorkspaceId parameter takes effect.
	//
	// example:
	//
	// gp-ws-*****
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s ListNamespacesRequest) String() string {
	return dara.Prettify(s)
}

func (s ListNamespacesRequest) GoString() string {
	return s.String()
}

func (s *ListNamespacesRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *ListNamespacesRequest) GetManagerAccount() *string {
	return s.ManagerAccount
}

func (s *ListNamespacesRequest) GetManagerAccountPassword() *string {
	return s.ManagerAccountPassword
}

func (s *ListNamespacesRequest) GetOwnerId() *int64 {
	return s.OwnerId
}

func (s *ListNamespacesRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *ListNamespacesRequest) GetWorkspaceId() *string {
	return s.WorkspaceId
}

func (s *ListNamespacesRequest) SetDBInstanceId(v string) *ListNamespacesRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ListNamespacesRequest) SetManagerAccount(v string) *ListNamespacesRequest {
	s.ManagerAccount = &v
	return s
}

func (s *ListNamespacesRequest) SetManagerAccountPassword(v string) *ListNamespacesRequest {
	s.ManagerAccountPassword = &v
	return s
}

func (s *ListNamespacesRequest) SetOwnerId(v int64) *ListNamespacesRequest {
	s.OwnerId = &v
	return s
}

func (s *ListNamespacesRequest) SetRegionId(v string) *ListNamespacesRequest {
	s.RegionId = &v
	return s
}

func (s *ListNamespacesRequest) SetWorkspaceId(v string) *ListNamespacesRequest {
	s.WorkspaceId = &v
	return s
}

func (s *ListNamespacesRequest) Validate() error {
	return dara.Validate(s)
}

type iListNamespacesResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetCount(v int32) *ListNamespacesResponseBody
	GetCount() *int32
	SetDBInstanceId(v string) *ListNamespacesResponseBody
	GetDBInstanceId() *string
	SetMessage(v string) *ListNamespacesResponseBody
	GetMessage() *string
	SetNamespaces(v *ListNamespacesResponseBodyNamespaces) *ListNamespacesResponseBody
	GetNamespaces() *ListNamespacesResponseBodyNamespaces
	SetRegionId(v string) *ListNamespacesResponseBody
	GetRegionId() *string
	SetRequestId(v string) *ListNamespacesResponseBody
	GetRequestId() *string
	SetStatus(v string) *ListNamespacesResponseBody
	GetStatus() *string
}

type ListNamespacesResponseBody struct {
	// The total number of entries returned.
	//
	// example:
	//
	// 1
	Count *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	// The instance ID.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The returned message.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The queried namespaces.
	Namespaces *ListNamespacesResponseBodyNamespaces `json:"Namespaces,omitempty" xml:"Namespaces,omitempty" type:"Struct"`
	// The region ID of the instance.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **success**
	//
	// 	- **fail**
	//
	// example:
	//
	// success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListNamespacesResponseBody) String() string {
	return dara.Prettify(s)
}

func (s ListNamespacesResponseBody) GoString() string {
	return s.String()
}

func (s *ListNamespacesResponseBody) GetCount() *int32 {
	return s.Count
}

func (s *ListNamespacesResponseBody) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *ListNamespacesResponseBody) GetMessage() *string {
	return s.Message
}

func (s *ListNamespacesResponseBody) GetNamespaces() *ListNamespacesResponseBodyNamespaces {
	return s.Namespaces
}

func (s *ListNamespacesResponseBody) GetRegionId() *string {
	return s.RegionId
}

func (s *ListNamespacesResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *ListNamespacesResponseBody) GetStatus() *string {
	return s.Status
}

func (s *ListNamespacesResponseBody) SetCount(v int32) *ListNamespacesResponseBody {
	s.Count = &v
	return s
}

func (s *ListNamespacesResponseBody) SetDBInstanceId(v string) *ListNamespacesResponseBody {
	s.DBInstanceId = &v
	return s
}

func (s *ListNamespacesResponseBody) SetMessage(v string) *ListNamespacesResponseBody {
	s.Message = &v
	return s
}

func (s *ListNamespacesResponseBody) SetNamespaces(v *ListNamespacesResponseBodyNamespaces) *ListNamespacesResponseBody {
	s.Namespaces = v
	return s
}

func (s *ListNamespacesResponseBody) SetRegionId(v string) *ListNamespacesResponseBody {
	s.RegionId = &v
	return s
}

func (s *ListNamespacesResponseBody) SetRequestId(v string) *ListNamespacesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListNamespacesResponseBody) SetStatus(v string) *ListNamespacesResponseBody {
	s.Status = &v
	return s
}

func (s *ListNamespacesResponseBody) Validate() error {
	return dara.Validate(s)
}

type ListNamespacesResponseBodyNamespaces struct {
	Namespace []*string `json:"Namespace,omitempty" xml:"Namespace,omitempty" type:"Repeated"`
}

func (s ListNamespacesResponseBodyNamespaces) String() string {
	return dara.Prettify(s)
}

func (s ListNamespacesResponseBodyNamespaces) GoString() string {
	return s.String()
}

func (s *ListNamespacesResponseBodyNamespaces) GetNamespace() []*string {
	return s.Namespace
}

func (s *ListNamespacesResponseBodyNamespaces) SetNamespace(v []*string) *ListNamespacesResponseBodyNamespaces {
	s.Namespace = v
	return s
}

func (s *ListNamespacesResponseBodyNamespaces) Validate() error {
	return dara.Validate(s)
}

type iListNamespacesResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *ListNamespacesResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *ListNamespacesResponse
	GetStatusCode() *int32
	SetBody(v *ListNamespacesResponseBody) *ListNamespacesResponse
	GetBody() *ListNamespacesResponseBody
}

type ListNamespacesResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListNamespacesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListNamespacesResponse) String() string {
	return dara.Prettify(s)
}

func (s ListNamespacesResponse) GoString() string {
	return s.String()
}

func (s *ListNamespacesResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *ListNamespacesResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *ListNamespacesResponse) GetBody() *ListNamespacesResponseBody {
	return s.Body
}

func (s *ListNamespacesResponse) SetHeaders(v map[string]*string) *ListNamespacesResponse {
	s.Headers = v
	return s
}

func (s *ListNamespacesResponse) SetStatusCode(v int32) *ListNamespacesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListNamespacesResponse) SetBody(v *ListNamespacesResponseBody) *ListNamespacesResponse {
	s.Body = v
	return s
}

func (s *ListNamespacesResponse) Validate() error {
	return dara.Validate(s)
}

type iListRemoteADBDataSourcesRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *ListRemoteADBDataSourcesRequest
	GetDBInstanceId() *string
	SetDataSourceId(v string) *ListRemoteADBDataSourcesRequest
	GetDataSourceId() *string
	SetOwnerId(v int64) *ListRemoteADBDataSourcesRequest
	GetOwnerId() *int64
}

type ListRemoteADBDataSourcesRequest struct {
	// Instance name.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// Data source ID.
	//
	// example:
	//
	// 119
	DataSourceId *string `json:"DataSourceId,omitempty" xml:"DataSourceId,omitempty"`
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s ListRemoteADBDataSourcesRequest) String() string {
	return dara.Prettify(s)
}

func (s ListRemoteADBDataSourcesRequest) GoString() string {
	return s.String()
}

func (s *ListRemoteADBDataSourcesRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *ListRemoteADBDataSourcesRequest) GetDataSourceId() *string {
	return s.DataSourceId
}

func (s *ListRemoteADBDataSourcesRequest) GetOwnerId() *int64 {
	return s.OwnerId
}

func (s *ListRemoteADBDataSourcesRequest) SetDBInstanceId(v string) *ListRemoteADBDataSourcesRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ListRemoteADBDataSourcesRequest) SetDataSourceId(v string) *ListRemoteADBDataSourcesRequest {
	s.DataSourceId = &v
	return s
}

func (s *ListRemoteADBDataSourcesRequest) SetOwnerId(v int64) *ListRemoteADBDataSourcesRequest {
	s.OwnerId = &v
	return s
}

func (s *ListRemoteADBDataSourcesRequest) Validate() error {
	return dara.Validate(s)
}

type iListRemoteADBDataSourcesResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetDataSourceItems(v *ListRemoteADBDataSourcesResponseBodyDataSourceItems) *ListRemoteADBDataSourcesResponseBody
	GetDataSourceItems() *ListRemoteADBDataSourcesResponseBodyDataSourceItems
	SetRequestId(v string) *ListRemoteADBDataSourcesResponseBody
	GetRequestId() *string
	SetTaskId(v int32) *ListRemoteADBDataSourcesResponseBody
	GetTaskId() *int32
}

type ListRemoteADBDataSourcesResponseBody struct {
	// Returns the successfully added data sharing service data.
	DataSourceItems *ListRemoteADBDataSourcesResponseBodyDataSourceItems `json:"DataSourceItems,omitempty" xml:"DataSourceItems,omitempty" type:"Struct"`
	// Request ID.
	//
	// example:
	//
	// e9d60eb1-e90d-4bc6-a470-c8b767460858
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Task ID.
	//
	// example:
	//
	// 90000
	TaskId *int32 `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s ListRemoteADBDataSourcesResponseBody) String() string {
	return dara.Prettify(s)
}

func (s ListRemoteADBDataSourcesResponseBody) GoString() string {
	return s.String()
}

func (s *ListRemoteADBDataSourcesResponseBody) GetDataSourceItems() *ListRemoteADBDataSourcesResponseBodyDataSourceItems {
	return s.DataSourceItems
}

func (s *ListRemoteADBDataSourcesResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *ListRemoteADBDataSourcesResponseBody) GetTaskId() *int32 {
	return s.TaskId
}

func (s *ListRemoteADBDataSourcesResponseBody) SetDataSourceItems(v *ListRemoteADBDataSourcesResponseBodyDataSourceItems) *ListRemoteADBDataSourcesResponseBody {
	s.DataSourceItems = v
	return s
}

func (s *ListRemoteADBDataSourcesResponseBody) SetRequestId(v string) *ListRemoteADBDataSourcesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListRemoteADBDataSourcesResponseBody) SetTaskId(v int32) *ListRemoteADBDataSourcesResponseBody {
	s.TaskId = &v
	return s
}

func (s *ListRemoteADBDataSourcesResponseBody) Validate() error {
	return dara.Validate(s)
}

type ListRemoteADBDataSourcesResponseBodyDataSourceItems struct {
	RemoteDataSources []*ListRemoteADBDataSourcesResponseBodyDataSourceItemsRemoteDataSources `json:"RemoteDataSources,omitempty" xml:"RemoteDataSources,omitempty" type:"Repeated"`
}

func (s ListRemoteADBDataSourcesResponseBodyDataSourceItems) String() string {
	return dara.Prettify(s)
}

func (s ListRemoteADBDataSourcesResponseBodyDataSourceItems) GoString() string {
	return s.String()
}

func (s *ListRemoteADBDataSourcesResponseBodyDataSourceItems) GetRemoteDataSources() []*ListRemoteADBDataSourcesResponseBodyDataSourceItemsRemoteDataSources {
	return s.RemoteDataSources
}

func (s *ListRemoteADBDataSourcesResponseBodyDataSourceItems) SetRemoteDataSources(v []*ListRemoteADBDataSourcesResponseBodyDataSourceItemsRemoteDataSources) *ListRemoteADBDataSourcesResponseBodyDataSourceItems {
	s.RemoteDataSources = v
	return s
}

func (s *ListRemoteADBDataSourcesResponseBodyDataSourceItems) Validate() error {
	return dara.Validate(s)
}

type ListRemoteADBDataSourcesResponseBodyDataSourceItemsRemoteDataSources struct {
	// Data source name
	//
	// example:
	//
	// db1_gptest1_to_db2_gp-test2
	DataSourceName *string `json:"DataSourceName,omitempty" xml:"DataSourceName,omitempty"`
	// Description.
	//
	// example:
	//
	// test
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// ID.
	//
	// example:
	//
	// 1
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// Local database name
	//
	// example:
	//
	// db1
	LocalDatabase *string `json:"LocalDatabase,omitempty" xml:"LocalDatabase,omitempty"`
	// Local instance name
	//
	// example:
	//
	// gp-test1
	LocalInstanceName *string `json:"LocalInstanceName,omitempty" xml:"LocalInstanceName,omitempty"`
	// Manager user name
	//
	// example:
	//
	// admin
	ManagerUserName *string `json:"ManagerUserName,omitempty" xml:"ManagerUserName,omitempty"`
	// Region ID.
	//
	// > You can call the [DescribeRegions](https://help.aliyun.com/document_detail/86912.html) API to view available region IDs.
	//
	// example:
	//
	// cn-beijing
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// Remote database name
	//
	// example:
	//
	// db2
	RemoteDatabase *string `json:"RemoteDatabase,omitempty" xml:"RemoteDatabase,omitempty"`
	// Remote instance name
	//
	// example:
	//
	// gp-test2
	RemoteInstanceName *string `json:"RemoteInstanceName,omitempty" xml:"RemoteInstanceName,omitempty"`
	// Data source status
	//
	// example:
	//
	// creating
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// User name
	//
	// example:
	//
	// user1
	UserName *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
}

func (s ListRemoteADBDataSourcesResponseBodyDataSourceItemsRemoteDataSources) String() string {
	return dara.Prettify(s)
}

func (s ListRemoteADBDataSourcesResponseBodyDataSourceItemsRemoteDataSources) GoString() string {
	return s.String()
}

func (s *ListRemoteADBDataSourcesResponseBodyDataSourceItemsRemoteDataSources) GetDataSourceName() *string {
	return s.DataSourceName
}

func (s *ListRemoteADBDataSourcesResponseBodyDataSourceItemsRemoteDataSources) GetDescription() *string {
	return s.Description
}

func (s *ListRemoteADBDataSourcesResponseBodyDataSourceItemsRemoteDataSources) GetId() *int64 {
	return s.Id
}

func (s *ListRemoteADBDataSourcesResponseBodyDataSourceItemsRemoteDataSources) GetLocalDatabase() *string {
	return s.LocalDatabase
}

func (s *ListRemoteADBDataSourcesResponseBodyDataSourceItemsRemoteDataSources) GetLocalInstanceName() *string {
	return s.LocalInstanceName
}

func (s *ListRemoteADBDataSourcesResponseBodyDataSourceItemsRemoteDataSources) GetManagerUserName() *string {
	return s.ManagerUserName
}

func (s *ListRemoteADBDataSourcesResponseBodyDataSourceItemsRemoteDataSources) GetRegionId() *string {
	return s.RegionId
}

func (s *ListRemoteADBDataSourcesResponseBodyDataSourceItemsRemoteDataSources) GetRemoteDatabase() *string {
	return s.RemoteDatabase
}

func (s *ListRemoteADBDataSourcesResponseBodyDataSourceItemsRemoteDataSources) GetRemoteInstanceName() *string {
	return s.RemoteInstanceName
}

func (s *ListRemoteADBDataSourcesResponseBodyDataSourceItemsRemoteDataSources) GetStatus() *string {
	return s.Status
}

func (s *ListRemoteADBDataSourcesResponseBodyDataSourceItemsRemoteDataSources) GetUserName() *string {
	return s.UserName
}

func (s *ListRemoteADBDataSourcesResponseBodyDataSourceItemsRemoteDataSources) SetDataSourceName(v string) *ListRemoteADBDataSourcesResponseBodyDataSourceItemsRemoteDataSources {
	s.DataSourceName = &v
	return s
}

func (s *ListRemoteADBDataSourcesResponseBodyDataSourceItemsRemoteDataSources) SetDescription(v string) *ListRemoteADBDataSourcesResponseBodyDataSourceItemsRemoteDataSources {
	s.Description = &v
	return s
}

func (s *ListRemoteADBDataSourcesResponseBodyDataSourceItemsRemoteDataSources) SetId(v int64) *ListRemoteADBDataSourcesResponseBodyDataSourceItemsRemoteDataSources {
	s.Id = &v
	return s
}

func (s *ListRemoteADBDataSourcesResponseBodyDataSourceItemsRemoteDataSources) SetLocalDatabase(v string) *ListRemoteADBDataSourcesResponseBodyDataSourceItemsRemoteDataSources {
	s.LocalDatabase = &v
	return s
}

func (s *ListRemoteADBDataSourcesResponseBodyDataSourceItemsRemoteDataSources) SetLocalInstanceName(v string) *ListRemoteADBDataSourcesResponseBodyDataSourceItemsRemoteDataSources {
	s.LocalInstanceName = &v
	return s
}

func (s *ListRemoteADBDataSourcesResponseBodyDataSourceItemsRemoteDataSources) SetManagerUserName(v string) *ListRemoteADBDataSourcesResponseBodyDataSourceItemsRemoteDataSources {
	s.ManagerUserName = &v
	return s
}

func (s *ListRemoteADBDataSourcesResponseBodyDataSourceItemsRemoteDataSources) SetRegionId(v string) *ListRemoteADBDataSourcesResponseBodyDataSourceItemsRemoteDataSources {
	s.RegionId = &v
	return s
}

func (s *ListRemoteADBDataSourcesResponseBodyDataSourceItemsRemoteDataSources) SetRemoteDatabase(v string) *ListRemoteADBDataSourcesResponseBodyDataSourceItemsRemoteDataSources {
	s.RemoteDatabase = &v
	return s
}

func (s *ListRemoteADBDataSourcesResponseBodyDataSourceItemsRemoteDataSources) SetRemoteInstanceName(v string) *ListRemoteADBDataSourcesResponseBodyDataSourceItemsRemoteDataSources {
	s.RemoteInstanceName = &v
	return s
}

func (s *ListRemoteADBDataSourcesResponseBodyDataSourceItemsRemoteDataSources) SetStatus(v string) *ListRemoteADBDataSourcesResponseBodyDataSourceItemsRemoteDataSources {
	s.Status = &v
	return s
}

func (s *ListRemoteADBDataSourcesResponseBodyDataSourceItemsRemoteDataSources) SetUserName(v string) *ListRemoteADBDataSourcesResponseBodyDataSourceItemsRemoteDataSources {
	s.UserName = &v
	return s
}

func (s *ListRemoteADBDataSourcesResponseBodyDataSourceItemsRemoteDataSources) Validate() error {
	return dara.Validate(s)
}

type iListRemoteADBDataSourcesResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *ListRemoteADBDataSourcesResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *ListRemoteADBDataSourcesResponse
	GetStatusCode() *int32
	SetBody(v *ListRemoteADBDataSourcesResponseBody) *ListRemoteADBDataSourcesResponse
	GetBody() *ListRemoteADBDataSourcesResponseBody
}

type ListRemoteADBDataSourcesResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListRemoteADBDataSourcesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListRemoteADBDataSourcesResponse) String() string {
	return dara.Prettify(s)
}

func (s ListRemoteADBDataSourcesResponse) GoString() string {
	return s.String()
}

func (s *ListRemoteADBDataSourcesResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *ListRemoteADBDataSourcesResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *ListRemoteADBDataSourcesResponse) GetBody() *ListRemoteADBDataSourcesResponseBody {
	return s.Body
}

func (s *ListRemoteADBDataSourcesResponse) SetHeaders(v map[string]*string) *ListRemoteADBDataSourcesResponse {
	s.Headers = v
	return s
}

func (s *ListRemoteADBDataSourcesResponse) SetStatusCode(v int32) *ListRemoteADBDataSourcesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListRemoteADBDataSourcesResponse) SetBody(v *ListRemoteADBDataSourcesResponseBody) *ListRemoteADBDataSourcesResponse {
	s.Body = v
	return s
}

func (s *ListRemoteADBDataSourcesResponse) Validate() error {
	return dara.Validate(s)
}

type iListSchemasRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *ListSchemasRequest
	GetDBInstanceId() *string
	SetDatabase(v string) *ListSchemasRequest
	GetDatabase() *string
	SetMaxResults(v int32) *ListSchemasRequest
	GetMaxResults() *int32
	SetNextToken(v string) *ListSchemasRequest
	GetNextToken() *string
	SetOwnerId(v int64) *ListSchemasRequest
	GetOwnerId() *int64
	SetRegionId(v string) *ListSchemasRequest
	GetRegionId() *string
	SetSchemaPattern(v string) *ListSchemasRequest
	GetSchemaPattern() *string
	SetSecretArn(v string) *ListSchemasRequest
	GetSecretArn() *string
}

type ListSchemasRequest struct {
	// The instance ID.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The name of the database.
	//
	// This parameter is required.
	//
	// example:
	//
	// adbtest
	Database *string `json:"Database,omitempty" xml:"Database,omitempty"`
	// The maximum number of entries per page. Valid values: 1 to 100.
	//
	// example:
	//
	// 20
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// The pagination token that is used in the next request to retrieve a new page of results. You do not need to specify this parameter for the first request. You must specify the token that is obtained from the previous query as the value of NextToken.
	//
	// example:
	//
	// caeba0bbb2be03f84eb48b699f0a4883
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	OwnerId   *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The region ID of the instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-beijing
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The schema name pattern for matching. For example, `ab%` specifies to match schema names that start with ab.
	//
	// example:
	//
	// aaa%
	SchemaPattern *string `json:"SchemaPattern,omitempty" xml:"SchemaPattern,omitempty"`
	// The Alibaba Cloud Resource Name (ARN) of the access credential for the created Data API account. You can call the CreateSecret operation to create an access credential.
	//
	// >  To call the ListSchemas operation as a Resource Access Management (RAM) user, the RAM user must have the permissions to call the UseSecret or GetSecretValue operation on the ARN of the access credential.
	//
	// This parameter is required.
	//
	// example:
	//
	// acs:gpdb:cn-beijing:1033**:secret/testsecret-eG2AQGRIwQ0zFp4VA7mYL3uiCXTfDQbQ
	SecretArn *string `json:"SecretArn,omitempty" xml:"SecretArn,omitempty"`
}

func (s ListSchemasRequest) String() string {
	return dara.Prettify(s)
}

func (s ListSchemasRequest) GoString() string {
	return s.String()
}

func (s *ListSchemasRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *ListSchemasRequest) GetDatabase() *string {
	return s.Database
}

func (s *ListSchemasRequest) GetMaxResults() *int32 {
	return s.MaxResults
}

func (s *ListSchemasRequest) GetNextToken() *string {
	return s.NextToken
}

func (s *ListSchemasRequest) GetOwnerId() *int64 {
	return s.OwnerId
}

func (s *ListSchemasRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *ListSchemasRequest) GetSchemaPattern() *string {
	return s.SchemaPattern
}

func (s *ListSchemasRequest) GetSecretArn() *string {
	return s.SecretArn
}

func (s *ListSchemasRequest) SetDBInstanceId(v string) *ListSchemasRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ListSchemasRequest) SetDatabase(v string) *ListSchemasRequest {
	s.Database = &v
	return s
}

func (s *ListSchemasRequest) SetMaxResults(v int32) *ListSchemasRequest {
	s.MaxResults = &v
	return s
}

func (s *ListSchemasRequest) SetNextToken(v string) *ListSchemasRequest {
	s.NextToken = &v
	return s
}

func (s *ListSchemasRequest) SetOwnerId(v int64) *ListSchemasRequest {
	s.OwnerId = &v
	return s
}

func (s *ListSchemasRequest) SetRegionId(v string) *ListSchemasRequest {
	s.RegionId = &v
	return s
}

func (s *ListSchemasRequest) SetSchemaPattern(v string) *ListSchemasRequest {
	s.SchemaPattern = &v
	return s
}

func (s *ListSchemasRequest) SetSecretArn(v string) *ListSchemasRequest {
	s.SecretArn = &v
	return s
}

func (s *ListSchemasRequest) Validate() error {
	return dara.Validate(s)
}

type iListSchemasResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetMessage(v string) *ListSchemasResponseBody
	GetMessage() *string
	SetNextToken(v string) *ListSchemasResponseBody
	GetNextToken() *string
	SetRequestId(v string) *ListSchemasResponseBody
	GetRequestId() *string
	SetSchemas(v *ListSchemasResponseBodySchemas) *ListSchemasResponseBody
	GetSchemas() *ListSchemasResponseBodySchemas
	SetStatus(v string) *ListSchemasResponseBody
	GetStatus() *string
}

type ListSchemasResponseBody struct {
	// The returned message.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// A pagination token. It can be used in the next request to retrieve a new page of results. If NextToken is empty, no next page exists.
	//
	// example:
	//
	// caeba0bbb2be03f84eb48b699f0a4883
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The queried schemas.
	Schemas *ListSchemasResponseBodySchemas `json:"Schemas,omitempty" xml:"Schemas,omitempty" type:"Struct"`
	// The status of the operation. Valid values:
	//
	// 	- **success**
	//
	// 	- **fail**
	//
	// example:
	//
	// success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListSchemasResponseBody) String() string {
	return dara.Prettify(s)
}

func (s ListSchemasResponseBody) GoString() string {
	return s.String()
}

func (s *ListSchemasResponseBody) GetMessage() *string {
	return s.Message
}

func (s *ListSchemasResponseBody) GetNextToken() *string {
	return s.NextToken
}

func (s *ListSchemasResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *ListSchemasResponseBody) GetSchemas() *ListSchemasResponseBodySchemas {
	return s.Schemas
}

func (s *ListSchemasResponseBody) GetStatus() *string {
	return s.Status
}

func (s *ListSchemasResponseBody) SetMessage(v string) *ListSchemasResponseBody {
	s.Message = &v
	return s
}

func (s *ListSchemasResponseBody) SetNextToken(v string) *ListSchemasResponseBody {
	s.NextToken = &v
	return s
}

func (s *ListSchemasResponseBody) SetRequestId(v string) *ListSchemasResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListSchemasResponseBody) SetSchemas(v *ListSchemasResponseBodySchemas) *ListSchemasResponseBody {
	s.Schemas = v
	return s
}

func (s *ListSchemasResponseBody) SetStatus(v string) *ListSchemasResponseBody {
	s.Status = &v
	return s
}

func (s *ListSchemasResponseBody) Validate() error {
	return dara.Validate(s)
}

type ListSchemasResponseBodySchemas struct {
	Schemas []*string `json:"Schemas,omitempty" xml:"Schemas,omitempty" type:"Repeated"`
}

func (s ListSchemasResponseBodySchemas) String() string {
	return dara.Prettify(s)
}

func (s ListSchemasResponseBodySchemas) GoString() string {
	return s.String()
}

func (s *ListSchemasResponseBodySchemas) GetSchemas() []*string {
	return s.Schemas
}

func (s *ListSchemasResponseBodySchemas) SetSchemas(v []*string) *ListSchemasResponseBodySchemas {
	s.Schemas = v
	return s
}

func (s *ListSchemasResponseBodySchemas) Validate() error {
	return dara.Validate(s)
}

type iListSchemasResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *ListSchemasResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *ListSchemasResponse
	GetStatusCode() *int32
	SetBody(v *ListSchemasResponseBody) *ListSchemasResponse
	GetBody() *ListSchemasResponseBody
}

type ListSchemasResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListSchemasResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListSchemasResponse) String() string {
	return dara.Prettify(s)
}

func (s ListSchemasResponse) GoString() string {
	return s.String()
}

func (s *ListSchemasResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *ListSchemasResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *ListSchemasResponse) GetBody() *ListSchemasResponseBody {
	return s.Body
}

func (s *ListSchemasResponse) SetHeaders(v map[string]*string) *ListSchemasResponse {
	s.Headers = v
	return s
}

func (s *ListSchemasResponse) SetStatusCode(v int32) *ListSchemasResponse {
	s.StatusCode = &v
	return s
}

func (s *ListSchemasResponse) SetBody(v *ListSchemasResponseBody) *ListSchemasResponse {
	s.Body = v
	return s
}

func (s *ListSchemasResponse) Validate() error {
	return dara.Validate(s)
}

type iListSecretsRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *ListSecretsRequest
	GetDBInstanceId() *string
	SetOwnerId(v int64) *ListSecretsRequest
	GetOwnerId() *int64
	SetRegionId(v string) *ListSecretsRequest
	GetRegionId() *string
	SetWorkspaceId(v string) *ListSecretsRequest
	GetWorkspaceId() *string
}

type ListSecretsRequest struct {
	// The instance ID.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The region ID of the instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-beijing
	RegionId    *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s ListSecretsRequest) String() string {
	return dara.Prettify(s)
}

func (s ListSecretsRequest) GoString() string {
	return s.String()
}

func (s *ListSecretsRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *ListSecretsRequest) GetOwnerId() *int64 {
	return s.OwnerId
}

func (s *ListSecretsRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *ListSecretsRequest) GetWorkspaceId() *string {
	return s.WorkspaceId
}

func (s *ListSecretsRequest) SetDBInstanceId(v string) *ListSecretsRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ListSecretsRequest) SetOwnerId(v int64) *ListSecretsRequest {
	s.OwnerId = &v
	return s
}

func (s *ListSecretsRequest) SetRegionId(v string) *ListSecretsRequest {
	s.RegionId = &v
	return s
}

func (s *ListSecretsRequest) SetWorkspaceId(v string) *ListSecretsRequest {
	s.WorkspaceId = &v
	return s
}

func (s *ListSecretsRequest) Validate() error {
	return dara.Validate(s)
}

type iListSecretsResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetCount(v int64) *ListSecretsResponseBody
	GetCount() *int64
	SetMessage(v string) *ListSecretsResponseBody
	GetMessage() *string
	SetRequestId(v string) *ListSecretsResponseBody
	GetRequestId() *string
	SetSecrets(v *ListSecretsResponseBodySecrets) *ListSecretsResponseBody
	GetSecrets() *ListSecretsResponseBodySecrets
	SetStatus(v string) *ListSecretsResponseBody
	GetStatus() *string
}

type ListSecretsResponseBody struct {
	// The number of access credentials.
	//
	// example:
	//
	// 4
	Count *int64 `json:"Count,omitempty" xml:"Count,omitempty"`
	// The returned message.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The queried access credentials.
	Secrets *ListSecretsResponseBodySecrets `json:"Secrets,omitempty" xml:"Secrets,omitempty" type:"Struct"`
	// The status of the operation. Valid values:
	//
	// 	- **success**
	//
	// 	- **fail**
	//
	// example:
	//
	// success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListSecretsResponseBody) String() string {
	return dara.Prettify(s)
}

func (s ListSecretsResponseBody) GoString() string {
	return s.String()
}

func (s *ListSecretsResponseBody) GetCount() *int64 {
	return s.Count
}

func (s *ListSecretsResponseBody) GetMessage() *string {
	return s.Message
}

func (s *ListSecretsResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *ListSecretsResponseBody) GetSecrets() *ListSecretsResponseBodySecrets {
	return s.Secrets
}

func (s *ListSecretsResponseBody) GetStatus() *string {
	return s.Status
}

func (s *ListSecretsResponseBody) SetCount(v int64) *ListSecretsResponseBody {
	s.Count = &v
	return s
}

func (s *ListSecretsResponseBody) SetMessage(v string) *ListSecretsResponseBody {
	s.Message = &v
	return s
}

func (s *ListSecretsResponseBody) SetRequestId(v string) *ListSecretsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListSecretsResponseBody) SetSecrets(v *ListSecretsResponseBodySecrets) *ListSecretsResponseBody {
	s.Secrets = v
	return s
}

func (s *ListSecretsResponseBody) SetStatus(v string) *ListSecretsResponseBody {
	s.Status = &v
	return s
}

func (s *ListSecretsResponseBody) Validate() error {
	return dara.Validate(s)
}

type ListSecretsResponseBodySecrets struct {
	Secrets []*ListSecretsResponseBodySecretsSecrets `json:"Secrets,omitempty" xml:"Secrets,omitempty" type:"Repeated"`
}

func (s ListSecretsResponseBodySecrets) String() string {
	return dara.Prettify(s)
}

func (s ListSecretsResponseBodySecrets) GoString() string {
	return s.String()
}

func (s *ListSecretsResponseBodySecrets) GetSecrets() []*ListSecretsResponseBodySecretsSecrets {
	return s.Secrets
}

func (s *ListSecretsResponseBodySecrets) SetSecrets(v []*ListSecretsResponseBodySecretsSecrets) *ListSecretsResponseBodySecrets {
	s.Secrets = v
	return s
}

func (s *ListSecretsResponseBodySecrets) Validate() error {
	return dara.Validate(s)
}

type ListSecretsResponseBodySecretsSecrets struct {
	// The ID of the Alibaba Cloud account.
	//
	// example:
	//
	// 1033***
	AccountId *string `json:"AccountId,omitempty" xml:"AccountId,omitempty"`
	// The instance ID.
	//
	// example:
	//
	// gp-bp14****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The description of the access credential.
	//
	// example:
	//
	// test description
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The region ID of the instance.
	//
	// example:
	//
	// cn-beijing
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The Alibaba Cloud Resource Name (ARN) of the access credential for the created Data API account. Format: `acs:gpdb:{{region}}:{{accountId}}:secret/{{secretName}}-{{32 digits random string}`.
	//
	// example:
	//
	// acs:gpdb:cn-beijing:1033**:secret/testsecret-eG2AQGRIwQ0zFp4VA7mYL3uiCXTfDQbQ
	SecretArn *string `json:"SecretArn,omitempty" xml:"SecretArn,omitempty"`
	// The name of the access credential.
	//
	// example:
	//
	// testsecret
	SecretName *string `json:"SecretName,omitempty" xml:"SecretName,omitempty"`
	// The name of the database account.
	//
	// example:
	//
	// testacc
	Username *string `json:"Username,omitempty" xml:"Username,omitempty"`
}

func (s ListSecretsResponseBodySecretsSecrets) String() string {
	return dara.Prettify(s)
}

func (s ListSecretsResponseBodySecretsSecrets) GoString() string {
	return s.String()
}

func (s *ListSecretsResponseBodySecretsSecrets) GetAccountId() *string {
	return s.AccountId
}

func (s *ListSecretsResponseBodySecretsSecrets) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *ListSecretsResponseBodySecretsSecrets) GetDescription() *string {
	return s.Description
}

func (s *ListSecretsResponseBodySecretsSecrets) GetRegionId() *string {
	return s.RegionId
}

func (s *ListSecretsResponseBodySecretsSecrets) GetSecretArn() *string {
	return s.SecretArn
}

func (s *ListSecretsResponseBodySecretsSecrets) GetSecretName() *string {
	return s.SecretName
}

func (s *ListSecretsResponseBodySecretsSecrets) GetUsername() *string {
	return s.Username
}

func (s *ListSecretsResponseBodySecretsSecrets) SetAccountId(v string) *ListSecretsResponseBodySecretsSecrets {
	s.AccountId = &v
	return s
}

func (s *ListSecretsResponseBodySecretsSecrets) SetDBInstanceId(v string) *ListSecretsResponseBodySecretsSecrets {
	s.DBInstanceId = &v
	return s
}

func (s *ListSecretsResponseBodySecretsSecrets) SetDescription(v string) *ListSecretsResponseBodySecretsSecrets {
	s.Description = &v
	return s
}

func (s *ListSecretsResponseBodySecretsSecrets) SetRegionId(v string) *ListSecretsResponseBodySecretsSecrets {
	s.RegionId = &v
	return s
}

func (s *ListSecretsResponseBodySecretsSecrets) SetSecretArn(v string) *ListSecretsResponseBodySecretsSecrets {
	s.SecretArn = &v
	return s
}

func (s *ListSecretsResponseBodySecretsSecrets) SetSecretName(v string) *ListSecretsResponseBodySecretsSecrets {
	s.SecretName = &v
	return s
}

func (s *ListSecretsResponseBodySecretsSecrets) SetUsername(v string) *ListSecretsResponseBodySecretsSecrets {
	s.Username = &v
	return s
}

func (s *ListSecretsResponseBodySecretsSecrets) Validate() error {
	return dara.Validate(s)
}

type iListSecretsResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *ListSecretsResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *ListSecretsResponse
	GetStatusCode() *int32
	SetBody(v *ListSecretsResponseBody) *ListSecretsResponse
	GetBody() *ListSecretsResponseBody
}

type ListSecretsResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListSecretsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListSecretsResponse) String() string {
	return dara.Prettify(s)
}

func (s ListSecretsResponse) GoString() string {
	return s.String()
}

func (s *ListSecretsResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *ListSecretsResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *ListSecretsResponse) GetBody() *ListSecretsResponseBody {
	return s.Body
}

func (s *ListSecretsResponse) SetHeaders(v map[string]*string) *ListSecretsResponse {
	s.Headers = v
	return s
}

func (s *ListSecretsResponse) SetStatusCode(v int32) *ListSecretsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListSecretsResponse) SetBody(v *ListSecretsResponseBody) *ListSecretsResponse {
	s.Body = v
	return s
}

func (s *ListSecretsResponse) Validate() error {
	return dara.Validate(s)
}

type iListStreamingDataServicesRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *ListStreamingDataServicesRequest
	GetDBInstanceId() *string
	SetPageNumber(v int32) *ListStreamingDataServicesRequest
	GetPageNumber() *int32
	SetPageSize(v int32) *ListStreamingDataServicesRequest
	GetPageSize() *int32
	SetRegionId(v string) *ListStreamingDataServicesRequest
	GetRegionId() *string
}

type ListStreamingDataServicesRequest struct {
	// Instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp10g78o9807yv9h3
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// Page number, greater than 0 and not exceeding the maximum value of Integer, default value: **1**.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// Number of records per page, with the following values:
	//
	// - 30 (default)
	//
	// - 50
	//
	// - 100
	//
	// example:
	//
	// 50
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// Region ID
	//
	// example:
	//
	// cn-beijing
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ListStreamingDataServicesRequest) String() string {
	return dara.Prettify(s)
}

func (s ListStreamingDataServicesRequest) GoString() string {
	return s.String()
}

func (s *ListStreamingDataServicesRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *ListStreamingDataServicesRequest) GetPageNumber() *int32 {
	return s.PageNumber
}

func (s *ListStreamingDataServicesRequest) GetPageSize() *int32 {
	return s.PageSize
}

func (s *ListStreamingDataServicesRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *ListStreamingDataServicesRequest) SetDBInstanceId(v string) *ListStreamingDataServicesRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ListStreamingDataServicesRequest) SetPageNumber(v int32) *ListStreamingDataServicesRequest {
	s.PageNumber = &v
	return s
}

func (s *ListStreamingDataServicesRequest) SetPageSize(v int32) *ListStreamingDataServicesRequest {
	s.PageSize = &v
	return s
}

func (s *ListStreamingDataServicesRequest) SetRegionId(v string) *ListStreamingDataServicesRequest {
	s.RegionId = &v
	return s
}

func (s *ListStreamingDataServicesRequest) Validate() error {
	return dara.Validate(s)
}

type iListStreamingDataServicesResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetRequestId(v string) *ListStreamingDataServicesResponseBody
	GetRequestId() *string
	SetServiceItems(v []*ListStreamingDataServicesResponseBodyServiceItems) *ListStreamingDataServicesResponseBody
	GetServiceItems() []*ListStreamingDataServicesResponseBodyServiceItems
	SetTotalRecordCount(v int32) *ListStreamingDataServicesResponseBody
	GetTotalRecordCount() *int32
}

type ListStreamingDataServicesResponseBody struct {
	// Request ID.
	//
	// example:
	//
	// B4CAF581-2AC7-41AD-8940-D56DF7AADF5B
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Returns real-time data service items
	ServiceItems []*ListStreamingDataServicesResponseBodyServiceItems `json:"ServiceItems,omitempty" xml:"ServiceItems,omitempty" type:"Repeated"`
	// Total record count.
	//
	// example:
	//
	// 1
	TotalRecordCount *int32 `json:"TotalRecordCount,omitempty" xml:"TotalRecordCount,omitempty"`
}

func (s ListStreamingDataServicesResponseBody) String() string {
	return dara.Prettify(s)
}

func (s ListStreamingDataServicesResponseBody) GoString() string {
	return s.String()
}

func (s *ListStreamingDataServicesResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *ListStreamingDataServicesResponseBody) GetServiceItems() []*ListStreamingDataServicesResponseBodyServiceItems {
	return s.ServiceItems
}

func (s *ListStreamingDataServicesResponseBody) GetTotalRecordCount() *int32 {
	return s.TotalRecordCount
}

func (s *ListStreamingDataServicesResponseBody) SetRequestId(v string) *ListStreamingDataServicesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListStreamingDataServicesResponseBody) SetServiceItems(v []*ListStreamingDataServicesResponseBodyServiceItems) *ListStreamingDataServicesResponseBody {
	s.ServiceItems = v
	return s
}

func (s *ListStreamingDataServicesResponseBody) SetTotalRecordCount(v int32) *ListStreamingDataServicesResponseBody {
	s.TotalRecordCount = &v
	return s
}

func (s *ListStreamingDataServicesResponseBody) Validate() error {
	return dara.Validate(s)
}

type ListStreamingDataServicesResponseBodyServiceItems struct {
	// Creation time.
	//
	// example:
	//
	// 2019-09-08T16:00:00Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// Last modified time
	//
	// example:
	//
	// 2019-09-08T17:00:00Z
	ModifyTime *string `json:"ModifyTime,omitempty" xml:"ModifyTime,omitempty"`
	// Service description.
	//
	// example:
	//
	// test-adbpgss
	ServiceDescription *string `json:"ServiceDescription,omitempty" xml:"ServiceDescription,omitempty"`
	// Service ID.
	//
	// example:
	//
	// 1
	ServiceId *string `json:"ServiceId,omitempty" xml:"ServiceId,omitempty"`
	// Service IP.
	//
	// example:
	//
	// 192.168.0.1
	ServiceIp *string `json:"ServiceIp,omitempty" xml:"ServiceIp,omitempty"`
	// Whether it is a managed service.
	//
	// example:
	//
	// true
	ServiceManaged *bool `json:"ServiceManaged,omitempty" xml:"ServiceManaged,omitempty"`
	// Service name.
	//
	// example:
	//
	// test-adbpgss
	ServiceName *string `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
	// Service owner ID.
	//
	// example:
	//
	// 123
	ServiceOwnerId *string `json:"ServiceOwnerId,omitempty" xml:"ServiceOwnerId,omitempty"`
	// Service port.
	//
	// example:
	//
	// 5432
	ServicePort *string `json:"ServicePort,omitempty" xml:"ServicePort,omitempty"`
	// Service specification (in CU).
	//
	// example:
	//
	// 8
	ServiceSpec *string `json:"ServiceSpec,omitempty" xml:"ServiceSpec,omitempty"`
	// Service type, with the following value:
	//
	// - **adbpgss**
	//
	// example:
	//
	// adbpgss
	ServiceType *string `json:"ServiceType,omitempty" xml:"ServiceType,omitempty"`
	// Service status, with the following values:
	//
	// - Init: Initializing
	//
	// - Running: In operation
	//
	// - Exception: Abnormal
	//
	// - Paused: Suspended
	//
	// example:
	//
	// Running
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListStreamingDataServicesResponseBodyServiceItems) String() string {
	return dara.Prettify(s)
}

func (s ListStreamingDataServicesResponseBodyServiceItems) GoString() string {
	return s.String()
}

func (s *ListStreamingDataServicesResponseBodyServiceItems) GetCreateTime() *string {
	return s.CreateTime
}

func (s *ListStreamingDataServicesResponseBodyServiceItems) GetModifyTime() *string {
	return s.ModifyTime
}

func (s *ListStreamingDataServicesResponseBodyServiceItems) GetServiceDescription() *string {
	return s.ServiceDescription
}

func (s *ListStreamingDataServicesResponseBodyServiceItems) GetServiceId() *string {
	return s.ServiceId
}

func (s *ListStreamingDataServicesResponseBodyServiceItems) GetServiceIp() *string {
	return s.ServiceIp
}

func (s *ListStreamingDataServicesResponseBodyServiceItems) GetServiceManaged() *bool {
	return s.ServiceManaged
}

func (s *ListStreamingDataServicesResponseBodyServiceItems) GetServiceName() *string {
	return s.ServiceName
}

func (s *ListStreamingDataServicesResponseBodyServiceItems) GetServiceOwnerId() *string {
	return s.ServiceOwnerId
}

func (s *ListStreamingDataServicesResponseBodyServiceItems) GetServicePort() *string {
	return s.ServicePort
}

func (s *ListStreamingDataServicesResponseBodyServiceItems) GetServiceSpec() *string {
	return s.ServiceSpec
}

func (s *ListStreamingDataServicesResponseBodyServiceItems) GetServiceType() *string {
	return s.ServiceType
}

func (s *ListStreamingDataServicesResponseBodyServiceItems) GetStatus() *string {
	return s.Status
}

func (s *ListStreamingDataServicesResponseBodyServiceItems) SetCreateTime(v string) *ListStreamingDataServicesResponseBodyServiceItems {
	s.CreateTime = &v
	return s
}

func (s *ListStreamingDataServicesResponseBodyServiceItems) SetModifyTime(v string) *ListStreamingDataServicesResponseBodyServiceItems {
	s.ModifyTime = &v
	return s
}

func (s *ListStreamingDataServicesResponseBodyServiceItems) SetServiceDescription(v string) *ListStreamingDataServicesResponseBodyServiceItems {
	s.ServiceDescription = &v
	return s
}

func (s *ListStreamingDataServicesResponseBodyServiceItems) SetServiceId(v string) *ListStreamingDataServicesResponseBodyServiceItems {
	s.ServiceId = &v
	return s
}

func (s *ListStreamingDataServicesResponseBodyServiceItems) SetServiceIp(v string) *ListStreamingDataServicesResponseBodyServiceItems {
	s.ServiceIp = &v
	return s
}

func (s *ListStreamingDataServicesResponseBodyServiceItems) SetServiceManaged(v bool) *ListStreamingDataServicesResponseBodyServiceItems {
	s.ServiceManaged = &v
	return s
}

func (s *ListStreamingDataServicesResponseBodyServiceItems) SetServiceName(v string) *ListStreamingDataServicesResponseBodyServiceItems {
	s.ServiceName = &v
	return s
}

func (s *ListStreamingDataServicesResponseBodyServiceItems) SetServiceOwnerId(v string) *ListStreamingDataServicesResponseBodyServiceItems {
	s.ServiceOwnerId = &v
	return s
}

func (s *ListStreamingDataServicesResponseBodyServiceItems) SetServicePort(v string) *ListStreamingDataServicesResponseBodyServiceItems {
	s.ServicePort = &v
	return s
}

func (s *ListStreamingDataServicesResponseBodyServiceItems) SetServiceSpec(v string) *ListStreamingDataServicesResponseBodyServiceItems {
	s.ServiceSpec = &v
	return s
}

func (s *ListStreamingDataServicesResponseBodyServiceItems) SetServiceType(v string) *ListStreamingDataServicesResponseBodyServiceItems {
	s.ServiceType = &v
	return s
}

func (s *ListStreamingDataServicesResponseBodyServiceItems) SetStatus(v string) *ListStreamingDataServicesResponseBodyServiceItems {
	s.Status = &v
	return s
}

func (s *ListStreamingDataServicesResponseBodyServiceItems) Validate() error {
	return dara.Validate(s)
}

type iListStreamingDataServicesResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *ListStreamingDataServicesResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *ListStreamingDataServicesResponse
	GetStatusCode() *int32
	SetBody(v *ListStreamingDataServicesResponseBody) *ListStreamingDataServicesResponse
	GetBody() *ListStreamingDataServicesResponseBody
}

type ListStreamingDataServicesResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListStreamingDataServicesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListStreamingDataServicesResponse) String() string {
	return dara.Prettify(s)
}

func (s ListStreamingDataServicesResponse) GoString() string {
	return s.String()
}

func (s *ListStreamingDataServicesResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *ListStreamingDataServicesResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *ListStreamingDataServicesResponse) GetBody() *ListStreamingDataServicesResponseBody {
	return s.Body
}

func (s *ListStreamingDataServicesResponse) SetHeaders(v map[string]*string) *ListStreamingDataServicesResponse {
	s.Headers = v
	return s
}

func (s *ListStreamingDataServicesResponse) SetStatusCode(v int32) *ListStreamingDataServicesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListStreamingDataServicesResponse) SetBody(v *ListStreamingDataServicesResponseBody) *ListStreamingDataServicesResponse {
	s.Body = v
	return s
}

func (s *ListStreamingDataServicesResponse) Validate() error {
	return dara.Validate(s)
}

type iListStreamingDataSourcesRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *ListStreamingDataSourcesRequest
	GetDBInstanceId() *string
	SetPageNumber(v int32) *ListStreamingDataSourcesRequest
	GetPageNumber() *int32
	SetPageSize(v int32) *ListStreamingDataSourcesRequest
	GetPageSize() *int32
	SetRegionId(v string) *ListStreamingDataSourcesRequest
	GetRegionId() *string
}

type ListStreamingDataSourcesRequest struct {
	// The instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp10g78o9807yv9h3
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The page number. Pages start from page 1. Default value: **1**.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. Valid values:
	//
	// 	- **30**
	//
	// 	- **50**
	//
	// 	- **100**
	//
	// Default value: **30**.
	//
	// example:
	//
	// 30
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The region ID.
	//
	// >  You can call the [DescribeRegions](https://help.aliyun.com/document_detail/86912.html) operation to query the most recent region list.
	//
	// example:
	//
	// cn-beijing
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ListStreamingDataSourcesRequest) String() string {
	return dara.Prettify(s)
}

func (s ListStreamingDataSourcesRequest) GoString() string {
	return s.String()
}

func (s *ListStreamingDataSourcesRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *ListStreamingDataSourcesRequest) GetPageNumber() *int32 {
	return s.PageNumber
}

func (s *ListStreamingDataSourcesRequest) GetPageSize() *int32 {
	return s.PageSize
}

func (s *ListStreamingDataSourcesRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *ListStreamingDataSourcesRequest) SetDBInstanceId(v string) *ListStreamingDataSourcesRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ListStreamingDataSourcesRequest) SetPageNumber(v int32) *ListStreamingDataSourcesRequest {
	s.PageNumber = &v
	return s
}

func (s *ListStreamingDataSourcesRequest) SetPageSize(v int32) *ListStreamingDataSourcesRequest {
	s.PageSize = &v
	return s
}

func (s *ListStreamingDataSourcesRequest) SetRegionId(v string) *ListStreamingDataSourcesRequest {
	s.RegionId = &v
	return s
}

func (s *ListStreamingDataSourcesRequest) Validate() error {
	return dara.Validate(s)
}

type iListStreamingDataSourcesResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetDataSourceItems(v []*ListStreamingDataSourcesResponseBodyDataSourceItems) *ListStreamingDataSourcesResponseBody
	GetDataSourceItems() []*ListStreamingDataSourcesResponseBodyDataSourceItems
	SetPageNumber(v int32) *ListStreamingDataSourcesResponseBody
	GetPageNumber() *int32
	SetRequestId(v string) *ListStreamingDataSourcesResponseBody
	GetRequestId() *string
	SetTotalRecordCount(v int32) *ListStreamingDataSourcesResponseBody
	GetTotalRecordCount() *int32
}

type ListStreamingDataSourcesResponseBody struct {
	// The queried data sources.
	DataSourceItems []*ListStreamingDataSourcesResponseBodyDataSourceItems `json:"DataSourceItems,omitempty" xml:"DataSourceItems,omitempty" type:"Repeated"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The request ID.
	//
	// example:
	//
	// B4CAF581-2AC7-41AD-8940-D56DF7AADF5B
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 2
	TotalRecordCount *int32 `json:"TotalRecordCount,omitempty" xml:"TotalRecordCount,omitempty"`
}

func (s ListStreamingDataSourcesResponseBody) String() string {
	return dara.Prettify(s)
}

func (s ListStreamingDataSourcesResponseBody) GoString() string {
	return s.String()
}

func (s *ListStreamingDataSourcesResponseBody) GetDataSourceItems() []*ListStreamingDataSourcesResponseBodyDataSourceItems {
	return s.DataSourceItems
}

func (s *ListStreamingDataSourcesResponseBody) GetPageNumber() *int32 {
	return s.PageNumber
}

func (s *ListStreamingDataSourcesResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *ListStreamingDataSourcesResponseBody) GetTotalRecordCount() *int32 {
	return s.TotalRecordCount
}

func (s *ListStreamingDataSourcesResponseBody) SetDataSourceItems(v []*ListStreamingDataSourcesResponseBodyDataSourceItems) *ListStreamingDataSourcesResponseBody {
	s.DataSourceItems = v
	return s
}

func (s *ListStreamingDataSourcesResponseBody) SetPageNumber(v int32) *ListStreamingDataSourcesResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListStreamingDataSourcesResponseBody) SetRequestId(v string) *ListStreamingDataSourcesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListStreamingDataSourcesResponseBody) SetTotalRecordCount(v int32) *ListStreamingDataSourcesResponseBody {
	s.TotalRecordCount = &v
	return s
}

func (s *ListStreamingDataSourcesResponseBody) Validate() error {
	return dara.Validate(s)
}

type ListStreamingDataSourcesResponseBodyDataSourceItems struct {
	// The time when the data source was created.
	//
	// example:
	//
	// 2019-09-08T16:00:00Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The configurations of the data source.
	//
	// example:
	//
	// {"brokers":"broker0:9091,broker1:9091","topic":"topic"}
	DataSourceConfig *string `json:"DataSourceConfig,omitempty" xml:"DataSourceConfig,omitempty"`
	// The description of the data source.
	//
	// example:
	//
	// test-kafka
	DataSourceDescription *string `json:"DataSourceDescription,omitempty" xml:"DataSourceDescription,omitempty"`
	// The data source ID.
	//
	// example:
	//
	// 1
	DataSourceId *int32 `json:"DataSourceId,omitempty" xml:"DataSourceId,omitempty"`
	// The name of the data source.
	//
	// example:
	//
	// test-kafka
	DataSourceName *string `json:"DataSourceName,omitempty" xml:"DataSourceName,omitempty"`
	// The type of the data source. Valid values:
	//
	// 	- kafka
	//
	// example:
	//
	// kafka
	DataSourceType *string `json:"DataSourceType,omitempty" xml:"DataSourceType,omitempty"`
	// The information about the service status. For example, if the service is in the exception state, the cause of the exception is displayed. If the service is in the running state, this parameter is left empty.
	//
	// example:
	//
	// ""
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// The time when the data source was last modified.
	//
	// example:
	//
	// 2019-09-08T17:00:00Z
	ModifyTime *string `json:"ModifyTime,omitempty" xml:"ModifyTime,omitempty"`
	// The service ID.
	//
	// example:
	//
	// 1
	ServiceId *int32 `json:"ServiceId,omitempty" xml:"ServiceId,omitempty"`
	// The status of the service. Valid values:
	//
	// 	- init
	//
	// 	- running
	//
	// 	- exception
	//
	// example:
	//
	// running
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListStreamingDataSourcesResponseBodyDataSourceItems) String() string {
	return dara.Prettify(s)
}

func (s ListStreamingDataSourcesResponseBodyDataSourceItems) GoString() string {
	return s.String()
}

func (s *ListStreamingDataSourcesResponseBodyDataSourceItems) GetCreateTime() *string {
	return s.CreateTime
}

func (s *ListStreamingDataSourcesResponseBodyDataSourceItems) GetDataSourceConfig() *string {
	return s.DataSourceConfig
}

func (s *ListStreamingDataSourcesResponseBodyDataSourceItems) GetDataSourceDescription() *string {
	return s.DataSourceDescription
}

func (s *ListStreamingDataSourcesResponseBodyDataSourceItems) GetDataSourceId() *int32 {
	return s.DataSourceId
}

func (s *ListStreamingDataSourcesResponseBodyDataSourceItems) GetDataSourceName() *string {
	return s.DataSourceName
}

func (s *ListStreamingDataSourcesResponseBodyDataSourceItems) GetDataSourceType() *string {
	return s.DataSourceType
}

func (s *ListStreamingDataSourcesResponseBodyDataSourceItems) GetErrorMessage() *string {
	return s.ErrorMessage
}

func (s *ListStreamingDataSourcesResponseBodyDataSourceItems) GetModifyTime() *string {
	return s.ModifyTime
}

func (s *ListStreamingDataSourcesResponseBodyDataSourceItems) GetServiceId() *int32 {
	return s.ServiceId
}

func (s *ListStreamingDataSourcesResponseBodyDataSourceItems) GetStatus() *string {
	return s.Status
}

func (s *ListStreamingDataSourcesResponseBodyDataSourceItems) SetCreateTime(v string) *ListStreamingDataSourcesResponseBodyDataSourceItems {
	s.CreateTime = &v
	return s
}

func (s *ListStreamingDataSourcesResponseBodyDataSourceItems) SetDataSourceConfig(v string) *ListStreamingDataSourcesResponseBodyDataSourceItems {
	s.DataSourceConfig = &v
	return s
}

func (s *ListStreamingDataSourcesResponseBodyDataSourceItems) SetDataSourceDescription(v string) *ListStreamingDataSourcesResponseBodyDataSourceItems {
	s.DataSourceDescription = &v
	return s
}

func (s *ListStreamingDataSourcesResponseBodyDataSourceItems) SetDataSourceId(v int32) *ListStreamingDataSourcesResponseBodyDataSourceItems {
	s.DataSourceId = &v
	return s
}

func (s *ListStreamingDataSourcesResponseBodyDataSourceItems) SetDataSourceName(v string) *ListStreamingDataSourcesResponseBodyDataSourceItems {
	s.DataSourceName = &v
	return s
}

func (s *ListStreamingDataSourcesResponseBodyDataSourceItems) SetDataSourceType(v string) *ListStreamingDataSourcesResponseBodyDataSourceItems {
	s.DataSourceType = &v
	return s
}

func (s *ListStreamingDataSourcesResponseBodyDataSourceItems) SetErrorMessage(v string) *ListStreamingDataSourcesResponseBodyDataSourceItems {
	s.ErrorMessage = &v
	return s
}

func (s *ListStreamingDataSourcesResponseBodyDataSourceItems) SetModifyTime(v string) *ListStreamingDataSourcesResponseBodyDataSourceItems {
	s.ModifyTime = &v
	return s
}

func (s *ListStreamingDataSourcesResponseBodyDataSourceItems) SetServiceId(v int32) *ListStreamingDataSourcesResponseBodyDataSourceItems {
	s.ServiceId = &v
	return s
}

func (s *ListStreamingDataSourcesResponseBodyDataSourceItems) SetStatus(v string) *ListStreamingDataSourcesResponseBodyDataSourceItems {
	s.Status = &v
	return s
}

func (s *ListStreamingDataSourcesResponseBodyDataSourceItems) Validate() error {
	return dara.Validate(s)
}

type iListStreamingDataSourcesResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *ListStreamingDataSourcesResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *ListStreamingDataSourcesResponse
	GetStatusCode() *int32
	SetBody(v *ListStreamingDataSourcesResponseBody) *ListStreamingDataSourcesResponse
	GetBody() *ListStreamingDataSourcesResponseBody
}

type ListStreamingDataSourcesResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListStreamingDataSourcesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListStreamingDataSourcesResponse) String() string {
	return dara.Prettify(s)
}

func (s ListStreamingDataSourcesResponse) GoString() string {
	return s.String()
}

func (s *ListStreamingDataSourcesResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *ListStreamingDataSourcesResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *ListStreamingDataSourcesResponse) GetBody() *ListStreamingDataSourcesResponseBody {
	return s.Body
}

func (s *ListStreamingDataSourcesResponse) SetHeaders(v map[string]*string) *ListStreamingDataSourcesResponse {
	s.Headers = v
	return s
}

func (s *ListStreamingDataSourcesResponse) SetStatusCode(v int32) *ListStreamingDataSourcesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListStreamingDataSourcesResponse) SetBody(v *ListStreamingDataSourcesResponseBody) *ListStreamingDataSourcesResponse {
	s.Body = v
	return s
}

func (s *ListStreamingDataSourcesResponse) Validate() error {
	return dara.Validate(s)
}

type iListStreamingJobsRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *ListStreamingJobsRequest
	GetDBInstanceId() *string
	SetPageNumber(v int32) *ListStreamingJobsRequest
	GetPageNumber() *int32
	SetPageSize(v int32) *ListStreamingJobsRequest
	GetPageSize() *int32
	SetRegionId(v string) *ListStreamingJobsRequest
	GetRegionId() *string
}

type ListStreamingJobsRequest struct {
	// Instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp10g78o9807yv9h3
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// Page number, greater than 0 and not exceeding the maximum value of Integer. Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// Number of records per page, with the following options:
	//
	// - **30*	- - **50*	- - **100**
	//
	// Default value: 30.
	//
	// example:
	//
	// kafka
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The region ID.
	//
	// >  You can call the [DescribeRegions](https://help.aliyun.com/document_detail/86912.html) operation to query the most recent region list.
	//
	// example:
	//
	// cn-beijing
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ListStreamingJobsRequest) String() string {
	return dara.Prettify(s)
}

func (s ListStreamingJobsRequest) GoString() string {
	return s.String()
}

func (s *ListStreamingJobsRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *ListStreamingJobsRequest) GetPageNumber() *int32 {
	return s.PageNumber
}

func (s *ListStreamingJobsRequest) GetPageSize() *int32 {
	return s.PageSize
}

func (s *ListStreamingJobsRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *ListStreamingJobsRequest) SetDBInstanceId(v string) *ListStreamingJobsRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ListStreamingJobsRequest) SetPageNumber(v int32) *ListStreamingJobsRequest {
	s.PageNumber = &v
	return s
}

func (s *ListStreamingJobsRequest) SetPageSize(v int32) *ListStreamingJobsRequest {
	s.PageSize = &v
	return s
}

func (s *ListStreamingJobsRequest) SetRegionId(v string) *ListStreamingJobsRequest {
	s.RegionId = &v
	return s
}

func (s *ListStreamingJobsRequest) Validate() error {
	return dara.Validate(s)
}

type iListStreamingJobsResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetJobItems(v []*ListStreamingJobsResponseBodyJobItems) *ListStreamingJobsResponseBody
	GetJobItems() []*ListStreamingJobsResponseBodyJobItems
	SetPageNumber(v int32) *ListStreamingJobsResponseBody
	GetPageNumber() *int32
	SetPageRecordCount(v int32) *ListStreamingJobsResponseBody
	GetPageRecordCount() *int32
	SetRequestId(v string) *ListStreamingJobsResponseBody
	GetRequestId() *string
	SetTotalRecordCount(v int32) *ListStreamingJobsResponseBody
	GetTotalRecordCount() *int32
}

type ListStreamingJobsResponseBody struct {
	// The queried jobs.
	JobItems []*ListStreamingJobsResponseBodyJobItems `json:"JobItems,omitempty" xml:"JobItems,omitempty" type:"Repeated"`
	// Current page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// Number of records per page.
	//
	// example:
	//
	// 2
	PageRecordCount *int32 `json:"PageRecordCount,omitempty" xml:"PageRecordCount,omitempty"`
	// Request ID.
	//
	// example:
	//
	// B4CAF581-2AC7-41AD-8940-D56DF7AADF5B
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Total number of records.
	//
	// example:
	//
	// 2
	TotalRecordCount *int32 `json:"TotalRecordCount,omitempty" xml:"TotalRecordCount,omitempty"`
}

func (s ListStreamingJobsResponseBody) String() string {
	return dara.Prettify(s)
}

func (s ListStreamingJobsResponseBody) GoString() string {
	return s.String()
}

func (s *ListStreamingJobsResponseBody) GetJobItems() []*ListStreamingJobsResponseBodyJobItems {
	return s.JobItems
}

func (s *ListStreamingJobsResponseBody) GetPageNumber() *int32 {
	return s.PageNumber
}

func (s *ListStreamingJobsResponseBody) GetPageRecordCount() *int32 {
	return s.PageRecordCount
}

func (s *ListStreamingJobsResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *ListStreamingJobsResponseBody) GetTotalRecordCount() *int32 {
	return s.TotalRecordCount
}

func (s *ListStreamingJobsResponseBody) SetJobItems(v []*ListStreamingJobsResponseBodyJobItems) *ListStreamingJobsResponseBody {
	s.JobItems = v
	return s
}

func (s *ListStreamingJobsResponseBody) SetPageNumber(v int32) *ListStreamingJobsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListStreamingJobsResponseBody) SetPageRecordCount(v int32) *ListStreamingJobsResponseBody {
	s.PageRecordCount = &v
	return s
}

func (s *ListStreamingJobsResponseBody) SetRequestId(v string) *ListStreamingJobsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListStreamingJobsResponseBody) SetTotalRecordCount(v int32) *ListStreamingJobsResponseBody {
	s.TotalRecordCount = &v
	return s
}

func (s *ListStreamingJobsResponseBody) Validate() error {
	return dara.Validate(s)
}

type ListStreamingJobsResponseBodyJobItems struct {
	// The name of the database account.
	//
	// example:
	//
	// test-account
	Account *string `json:"Account,omitempty" xml:"Account,omitempty"`
	// The delivery guarantee setting.
	//
	// example:
	//
	// ATLEAST / EXACTLY
	Consistency *string `json:"Consistency,omitempty" xml:"Consistency,omitempty"`
	// The time when the job was created.
	//
	// example:
	//
	// 2019-09-08T16:00:00Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The data source ID.
	//
	// example:
	//
	// 58
	DataSourceId *string `json:"DataSourceId,omitempty" xml:"DataSourceId,omitempty"`
	// The name of the data source.
	//
	// example:
	//
	// test-kafka
	DataSourceName *string `json:"DataSourceName,omitempty" xml:"DataSourceName,omitempty"`
	// The mapped fields in the destination table.
	DestColumns []*string `json:"DestColumns,omitempty" xml:"DestColumns,omitempty" type:"Repeated"`
	// The name of the destination database.
	//
	// example:
	//
	// dest-db
	DestDatabase *string `json:"DestDatabase,omitempty" xml:"DestDatabase,omitempty"`
	// The name of the destination namespace.
	//
	// example:
	//
	// dest-schema
	DestSchema *string `json:"DestSchema,omitempty" xml:"DestSchema,omitempty"`
	// The name of the destination table.
	//
	// example:
	//
	// dest-table
	DestTable *string `json:"DestTable,omitempty" xml:"DestTable,omitempty"`
	// The error message returned.
	//
	// This parameter is returned only when the return value of **Status*	- is **false**.
	//
	// example:
	//
	// ""
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// The fallback offset for data consumption.
	//
	// 	- This parameter indicates the starting offset from which data consumption resumes when a consumer does not request a consumption offset or requests a consumption offset that is beyond the range of the offset information recorded in the current Kafka cluster. Valid values: EARLIEST and LATEST.
	//
	// example:
	//
	// EARLIEST /  LATEST
	FallbackOffset *string `json:"FallbackOffset,omitempty" xml:"FallbackOffset,omitempty"`
	// The description of the job.
	//
	// example:
	//
	// test job
	JobDescription *string `json:"JobDescription,omitempty" xml:"JobDescription,omitempty"`
	// The job ID.
	//
	// example:
	//
	// 1
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// The name of the job.
	//
	// example:
	//
	// test-job
	JobName *string `json:"JobName,omitempty" xml:"JobName,omitempty"`
	// The update condition columns that are used to join the source data and the destination table. Typically, the columns are all the primary key columns of the destination table. If the values of all columns specified by this parameter in different rows are the same, the rows are considered duplicates.
	MatchColumns []*string `json:"MatchColumns,omitempty" xml:"MatchColumns,omitempty" type:"Repeated"`
	// The configuration mode. Valid values:
	//
	// 1.  basic: In basic mode, you must configure the configuration parameters.
	//
	// 2.  professional: In professional mode, you can submit a YAML configuration file.
	//
	// example:
	//
	// Basic / Professional
	Mode *string `json:"Mode,omitempty" xml:"Mode,omitempty"`
	// The time when the job was last modified.
	//
	// example:
	//
	// 2019-09-08T17:00:00Z
	ModifyTime *string `json:"ModifyTime,omitempty" xml:"ModifyTime,omitempty"`
	// The password of the database account.
	//
	// example:
	//
	// pwd123
	Password *string `json:"Password,omitempty" xml:"Password,omitempty"`
	// The source fields.
	SrcColumns []*string `json:"SrcColumns,omitempty" xml:"SrcColumns,omitempty" type:"Repeated"`
	// The status of the job. Valid values:
	//
	// 	- Init
	//
	// 	- Running
	//
	// 	- Exception
	//
	// 	- Paused
	//
	// example:
	//
	// Running
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The columns to be updated if a row of data meets the update condition. Typically, the columns are all non-primary key columns of the destination table. When the columns specified by the MatchColumns parameter are used as conditions to join the source data and the destination table, data in columns of the UpdateColumns type is updated if data is matched.
	UpdateColumns []*string `json:"UpdateColumns,omitempty" xml:"UpdateColumns,omitempty" type:"Repeated"`
	// The write mode.
	//
	// example:
	//
	// INSERT/UPDATE/MERGE
	WriteMode *string `json:"WriteMode,omitempty" xml:"WriteMode,omitempty"`
}

func (s ListStreamingJobsResponseBodyJobItems) String() string {
	return dara.Prettify(s)
}

func (s ListStreamingJobsResponseBodyJobItems) GoString() string {
	return s.String()
}

func (s *ListStreamingJobsResponseBodyJobItems) GetAccount() *string {
	return s.Account
}

func (s *ListStreamingJobsResponseBodyJobItems) GetConsistency() *string {
	return s.Consistency
}

func (s *ListStreamingJobsResponseBodyJobItems) GetCreateTime() *string {
	return s.CreateTime
}

func (s *ListStreamingJobsResponseBodyJobItems) GetDataSourceId() *string {
	return s.DataSourceId
}

func (s *ListStreamingJobsResponseBodyJobItems) GetDataSourceName() *string {
	return s.DataSourceName
}

func (s *ListStreamingJobsResponseBodyJobItems) GetDestColumns() []*string {
	return s.DestColumns
}

func (s *ListStreamingJobsResponseBodyJobItems) GetDestDatabase() *string {
	return s.DestDatabase
}

func (s *ListStreamingJobsResponseBodyJobItems) GetDestSchema() *string {
	return s.DestSchema
}

func (s *ListStreamingJobsResponseBodyJobItems) GetDestTable() *string {
	return s.DestTable
}

func (s *ListStreamingJobsResponseBodyJobItems) GetErrorMessage() *string {
	return s.ErrorMessage
}

func (s *ListStreamingJobsResponseBodyJobItems) GetFallbackOffset() *string {
	return s.FallbackOffset
}

func (s *ListStreamingJobsResponseBodyJobItems) GetJobDescription() *string {
	return s.JobDescription
}

func (s *ListStreamingJobsResponseBodyJobItems) GetJobId() *string {
	return s.JobId
}

func (s *ListStreamingJobsResponseBodyJobItems) GetJobName() *string {
	return s.JobName
}

func (s *ListStreamingJobsResponseBodyJobItems) GetMatchColumns() []*string {
	return s.MatchColumns
}

func (s *ListStreamingJobsResponseBodyJobItems) GetMode() *string {
	return s.Mode
}

func (s *ListStreamingJobsResponseBodyJobItems) GetModifyTime() *string {
	return s.ModifyTime
}

func (s *ListStreamingJobsResponseBodyJobItems) GetPassword() *string {
	return s.Password
}

func (s *ListStreamingJobsResponseBodyJobItems) GetSrcColumns() []*string {
	return s.SrcColumns
}

func (s *ListStreamingJobsResponseBodyJobItems) GetStatus() *string {
	return s.Status
}

func (s *ListStreamingJobsResponseBodyJobItems) GetUpdateColumns() []*string {
	return s.UpdateColumns
}

func (s *ListStreamingJobsResponseBodyJobItems) GetWriteMode() *string {
	return s.WriteMode
}

func (s *ListStreamingJobsResponseBodyJobItems) SetAccount(v string) *ListStreamingJobsResponseBodyJobItems {
	s.Account = &v
	return s
}

func (s *ListStreamingJobsResponseBodyJobItems) SetConsistency(v string) *ListStreamingJobsResponseBodyJobItems {
	s.Consistency = &v
	return s
}

func (s *ListStreamingJobsResponseBodyJobItems) SetCreateTime(v string) *ListStreamingJobsResponseBodyJobItems {
	s.CreateTime = &v
	return s
}

func (s *ListStreamingJobsResponseBodyJobItems) SetDataSourceId(v string) *ListStreamingJobsResponseBodyJobItems {
	s.DataSourceId = &v
	return s
}

func (s *ListStreamingJobsResponseBodyJobItems) SetDataSourceName(v string) *ListStreamingJobsResponseBodyJobItems {
	s.DataSourceName = &v
	return s
}

func (s *ListStreamingJobsResponseBodyJobItems) SetDestColumns(v []*string) *ListStreamingJobsResponseBodyJobItems {
	s.DestColumns = v
	return s
}

func (s *ListStreamingJobsResponseBodyJobItems) SetDestDatabase(v string) *ListStreamingJobsResponseBodyJobItems {
	s.DestDatabase = &v
	return s
}

func (s *ListStreamingJobsResponseBodyJobItems) SetDestSchema(v string) *ListStreamingJobsResponseBodyJobItems {
	s.DestSchema = &v
	return s
}

func (s *ListStreamingJobsResponseBodyJobItems) SetDestTable(v string) *ListStreamingJobsResponseBodyJobItems {
	s.DestTable = &v
	return s
}

func (s *ListStreamingJobsResponseBodyJobItems) SetErrorMessage(v string) *ListStreamingJobsResponseBodyJobItems {
	s.ErrorMessage = &v
	return s
}

func (s *ListStreamingJobsResponseBodyJobItems) SetFallbackOffset(v string) *ListStreamingJobsResponseBodyJobItems {
	s.FallbackOffset = &v
	return s
}

func (s *ListStreamingJobsResponseBodyJobItems) SetJobDescription(v string) *ListStreamingJobsResponseBodyJobItems {
	s.JobDescription = &v
	return s
}

func (s *ListStreamingJobsResponseBodyJobItems) SetJobId(v string) *ListStreamingJobsResponseBodyJobItems {
	s.JobId = &v
	return s
}

func (s *ListStreamingJobsResponseBodyJobItems) SetJobName(v string) *ListStreamingJobsResponseBodyJobItems {
	s.JobName = &v
	return s
}

func (s *ListStreamingJobsResponseBodyJobItems) SetMatchColumns(v []*string) *ListStreamingJobsResponseBodyJobItems {
	s.MatchColumns = v
	return s
}

func (s *ListStreamingJobsResponseBodyJobItems) SetMode(v string) *ListStreamingJobsResponseBodyJobItems {
	s.Mode = &v
	return s
}

func (s *ListStreamingJobsResponseBodyJobItems) SetModifyTime(v string) *ListStreamingJobsResponseBodyJobItems {
	s.ModifyTime = &v
	return s
}

func (s *ListStreamingJobsResponseBodyJobItems) SetPassword(v string) *ListStreamingJobsResponseBodyJobItems {
	s.Password = &v
	return s
}

func (s *ListStreamingJobsResponseBodyJobItems) SetSrcColumns(v []*string) *ListStreamingJobsResponseBodyJobItems {
	s.SrcColumns = v
	return s
}

func (s *ListStreamingJobsResponseBodyJobItems) SetStatus(v string) *ListStreamingJobsResponseBodyJobItems {
	s.Status = &v
	return s
}

func (s *ListStreamingJobsResponseBodyJobItems) SetUpdateColumns(v []*string) *ListStreamingJobsResponseBodyJobItems {
	s.UpdateColumns = v
	return s
}

func (s *ListStreamingJobsResponseBodyJobItems) SetWriteMode(v string) *ListStreamingJobsResponseBodyJobItems {
	s.WriteMode = &v
	return s
}

func (s *ListStreamingJobsResponseBodyJobItems) Validate() error {
	return dara.Validate(s)
}

type iListStreamingJobsResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *ListStreamingJobsResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *ListStreamingJobsResponse
	GetStatusCode() *int32
	SetBody(v *ListStreamingJobsResponseBody) *ListStreamingJobsResponse
	GetBody() *ListStreamingJobsResponseBody
}

type ListStreamingJobsResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListStreamingJobsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListStreamingJobsResponse) String() string {
	return dara.Prettify(s)
}

func (s ListStreamingJobsResponse) GoString() string {
	return s.String()
}

func (s *ListStreamingJobsResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *ListStreamingJobsResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *ListStreamingJobsResponse) GetBody() *ListStreamingJobsResponseBody {
	return s.Body
}

func (s *ListStreamingJobsResponse) SetHeaders(v map[string]*string) *ListStreamingJobsResponse {
	s.Headers = v
	return s
}

func (s *ListStreamingJobsResponse) SetStatusCode(v int32) *ListStreamingJobsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListStreamingJobsResponse) SetBody(v *ListStreamingJobsResponseBody) *ListStreamingJobsResponse {
	s.Body = v
	return s
}

func (s *ListStreamingJobsResponse) Validate() error {
	return dara.Validate(s)
}

type iListTablesRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *ListTablesRequest
	GetDBInstanceId() *string
	SetDatabase(v string) *ListTablesRequest
	GetDatabase() *string
	SetMaxResults(v int32) *ListTablesRequest
	GetMaxResults() *int32
	SetNextToken(v string) *ListTablesRequest
	GetNextToken() *string
	SetOwnerId(v int64) *ListTablesRequest
	GetOwnerId() *int64
	SetRegionId(v string) *ListTablesRequest
	GetRegionId() *string
	SetSchema(v string) *ListTablesRequest
	GetSchema() *string
	SetSecretArn(v string) *ListTablesRequest
	GetSecretArn() *string
	SetTablePattern(v string) *ListTablesRequest
	GetTablePattern() *string
}

type ListTablesRequest struct {
	// The instance ID.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/196830.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The name of the database.
	//
	// This parameter is required.
	//
	// example:
	//
	// adbtest
	Database *string `json:"Database,omitempty" xml:"Database,omitempty"`
	// The maximum number of entries per page. Valid values: 1 to 100.
	//
	// example:
	//
	// 100
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// The pagination token that is used in the next request to retrieve a new page of results. You do not need to specify this parameter for the first request. You must specify the token that is obtained from the previous query as the value of NextToken.
	//
	// example:
	//
	// caeba0bbb2be03f84eb48b699f0a4883
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	OwnerId   *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The region ID of the instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-beijing
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The name of the schema to which the table belongs.
	//
	// This parameter is required.
	//
	// example:
	//
	// public
	Schema *string `json:"Schema,omitempty" xml:"Schema,omitempty"`
	// The Alibaba Cloud Resource Name (ARN) of the access credential for the created Data API account. You can call the CreateSecret operation to create an access credential.
	//
	// >  To call the ListTables operation as a Resource Access Management (RAM) user, the RAM user must have the permissions to call the UseSecret or GetSecretValue operation on the ARN of the access credential.
	//
	// This parameter is required.
	//
	// example:
	//
	// acs:gpdb:cn-beijing:1033**:secret/testsecret-eG2AQGRIwQ0zFp4VA7mYL3uiCXTfDQbQ
	SecretArn *string `json:"SecretArn,omitempty" xml:"SecretArn,omitempty"`
	// The table name pattern for matching. For example, `ab%` specifies to match table names that start with ab.
	//
	// example:
	//
	// ab%
	TablePattern *string `json:"TablePattern,omitempty" xml:"TablePattern,omitempty"`
}

func (s ListTablesRequest) String() string {
	return dara.Prettify(s)
}

func (s ListTablesRequest) GoString() string {
	return s.String()
}

func (s *ListTablesRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *ListTablesRequest) GetDatabase() *string {
	return s.Database
}

func (s *ListTablesRequest) GetMaxResults() *int32 {
	return s.MaxResults
}

func (s *ListTablesRequest) GetNextToken() *string {
	return s.NextToken
}

func (s *ListTablesRequest) GetOwnerId() *int64 {
	return s.OwnerId
}

func (s *ListTablesRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *ListTablesRequest) GetSchema() *string {
	return s.Schema
}

func (s *ListTablesRequest) GetSecretArn() *string {
	return s.SecretArn
}

func (s *ListTablesRequest) GetTablePattern() *string {
	return s.TablePattern
}

func (s *ListTablesRequest) SetDBInstanceId(v string) *ListTablesRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ListTablesRequest) SetDatabase(v string) *ListTablesRequest {
	s.Database = &v
	return s
}

func (s *ListTablesRequest) SetMaxResults(v int32) *ListTablesRequest {
	s.MaxResults = &v
	return s
}

func (s *ListTablesRequest) SetNextToken(v string) *ListTablesRequest {
	s.NextToken = &v
	return s
}

func (s *ListTablesRequest) SetOwnerId(v int64) *ListTablesRequest {
	s.OwnerId = &v
	return s
}

func (s *ListTablesRequest) SetRegionId(v string) *ListTablesRequest {
	s.RegionId = &v
	return s
}

func (s *ListTablesRequest) SetSchema(v string) *ListTablesRequest {
	s.Schema = &v
	return s
}

func (s *ListTablesRequest) SetSecretArn(v string) *ListTablesRequest {
	s.SecretArn = &v
	return s
}

func (s *ListTablesRequest) SetTablePattern(v string) *ListTablesRequest {
	s.TablePattern = &v
	return s
}

func (s *ListTablesRequest) Validate() error {
	return dara.Validate(s)
}

type iListTablesResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetMessage(v string) *ListTablesResponseBody
	GetMessage() *string
	SetNextToken(v string) *ListTablesResponseBody
	GetNextToken() *string
	SetRequestId(v string) *ListTablesResponseBody
	GetRequestId() *string
	SetStatus(v string) *ListTablesResponseBody
	GetStatus() *string
	SetTables(v *ListTablesResponseBodyTables) *ListTablesResponseBody
	GetTables() *ListTablesResponseBodyTables
}

type ListTablesResponseBody struct {
	// The returned message.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// A pagination token. It can be used in the next request to retrieve a new page of results. If NextToken is empty, no next page exists.
	//
	// example:
	//
	// caeba0bbb2be03f84eb48b699f0a4883
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The status of the operation. Valid values:
	//
	// 	- **success**
	//
	// 	- **fail**
	//
	// example:
	//
	// success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The queried tables.
	Tables *ListTablesResponseBodyTables `json:"Tables,omitempty" xml:"Tables,omitempty" type:"Struct"`
}

func (s ListTablesResponseBody) String() string {
	return dara.Prettify(s)
}

func (s ListTablesResponseBody) GoString() string {
	return s.String()
}

func (s *ListTablesResponseBody) GetMessage() *string {
	return s.Message
}

func (s *ListTablesResponseBody) GetNextToken() *string {
	return s.NextToken
}

func (s *ListTablesResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *ListTablesResponseBody) GetStatus() *string {
	return s.Status
}

func (s *ListTablesResponseBody) GetTables() *ListTablesResponseBodyTables {
	return s.Tables
}

func (s *ListTablesResponseBody) SetMessage(v string) *ListTablesResponseBody {
	s.Message = &v
	return s
}

func (s *ListTablesResponseBody) SetNextToken(v string) *ListTablesResponseBody {
	s.NextToken = &v
	return s
}

func (s *ListTablesResponseBody) SetRequestId(v string) *ListTablesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListTablesResponseBody) SetStatus(v string) *ListTablesResponseBody {
	s.Status = &v
	return s
}

func (s *ListTablesResponseBody) SetTables(v *ListTablesResponseBodyTables) *ListTablesResponseBody {
	s.Tables = v
	return s
}

func (s *ListTablesResponseBody) Validate() error {
	return dara.Validate(s)
}

type ListTablesResponseBodyTables struct {
	Tables []*string `json:"Tables,omitempty" xml:"Tables,omitempty" type:"Repeated"`
}

func (s ListTablesResponseBodyTables) String() string {
	return dara.Prettify(s)
}

func (s ListTablesResponseBodyTables) GoString() string {
	return s.String()
}

func (s *ListTablesResponseBodyTables) GetTables() []*string {
	return s.Tables
}

func (s *ListTablesResponseBodyTables) SetTables(v []*string) *ListTablesResponseBodyTables {
	s.Tables = v
	return s
}

func (s *ListTablesResponseBodyTables) Validate() error {
	return dara.Validate(s)
}

type iListTablesResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *ListTablesResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *ListTablesResponse
	GetStatusCode() *int32
	SetBody(v *ListTablesResponseBody) *ListTablesResponse
	GetBody() *ListTablesResponseBody
}

type ListTablesResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListTablesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListTablesResponse) String() string {
	return dara.Prettify(s)
}

func (s ListTablesResponse) GoString() string {
	return s.String()
}

func (s *ListTablesResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *ListTablesResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *ListTablesResponse) GetBody() *ListTablesResponseBody {
	return s.Body
}

func (s *ListTablesResponse) SetHeaders(v map[string]*string) *ListTablesResponse {
	s.Headers = v
	return s
}

func (s *ListTablesResponse) SetStatusCode(v int32) *ListTablesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListTablesResponse) SetBody(v *ListTablesResponseBody) *ListTablesResponse {
	s.Body = v
	return s
}

func (s *ListTablesResponse) Validate() error {
	return dara.Validate(s)
}

type iListTagResourcesRequest interface {
	dara.Model
	String() string
	GoString() string
	SetNextToken(v string) *ListTagResourcesRequest
	GetNextToken() *string
	SetOwnerAccount(v string) *ListTagResourcesRequest
	GetOwnerAccount() *string
	SetOwnerId(v int64) *ListTagResourcesRequest
	GetOwnerId() *int64
	SetRegionId(v string) *ListTagResourcesRequest
	GetRegionId() *string
	SetResourceId(v []*string) *ListTagResourcesRequest
	GetResourceId() []*string
	SetResourceOwnerAccount(v string) *ListTagResourcesRequest
	GetResourceOwnerAccount() *string
	SetResourceOwnerId(v int64) *ListTagResourcesRequest
	GetResourceOwnerId() *int64
	SetResourceType(v string) *ListTagResourcesRequest
	GetResourceType() *string
	SetTag(v []*ListTagResourcesRequestTag) *ListTagResourcesRequest
	GetTag() []*ListTagResourcesRequestTag
}

type ListTagResourcesRequest struct {
	// The token used to perform the next query.
	//
	// example:
	//
	// caeba0bbb2be03f84eb48b699f0a4883
	NextToken    *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	OwnerAccount *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The region ID of the instance. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/86912.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of instance N. Valid values of N: 1 to 50.
	//
	// example:
	//
	// gp-xxxxxxxxxx
	ResourceId           []*string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty" type:"Repeated"`
	ResourceOwnerAccount *string   `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	// The resource type. Set the value to instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// instance
	ResourceType *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	// The tags that are added to instances.
	//
	// >  You must specify at least one of the ResourceId and Tag parameters.
	Tag []*ListTagResourcesRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s ListTagResourcesRequest) String() string {
	return dara.Prettify(s)
}

func (s ListTagResourcesRequest) GoString() string {
	return s.String()
}

func (s *ListTagResourcesRequest) GetNextToken() *string {
	return s.NextToken
}

func (s *ListTagResourcesRequest) GetOwnerAccount() *string {
	return s.OwnerAccount
}

func (s *ListTagResourcesRequest) GetOwnerId() *int64 {
	return s.OwnerId
}

func (s *ListTagResourcesRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *ListTagResourcesRequest) GetResourceId() []*string {
	return s.ResourceId
}

func (s *ListTagResourcesRequest) GetResourceOwnerAccount() *string {
	return s.ResourceOwnerAccount
}

func (s *ListTagResourcesRequest) GetResourceOwnerId() *int64 {
	return s.ResourceOwnerId
}

func (s *ListTagResourcesRequest) GetResourceType() *string {
	return s.ResourceType
}

func (s *ListTagResourcesRequest) GetTag() []*ListTagResourcesRequestTag {
	return s.Tag
}

func (s *ListTagResourcesRequest) SetNextToken(v string) *ListTagResourcesRequest {
	s.NextToken = &v
	return s
}

func (s *ListTagResourcesRequest) SetOwnerAccount(v string) *ListTagResourcesRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ListTagResourcesRequest) SetOwnerId(v int64) *ListTagResourcesRequest {
	s.OwnerId = &v
	return s
}

func (s *ListTagResourcesRequest) SetRegionId(v string) *ListTagResourcesRequest {
	s.RegionId = &v
	return s
}

func (s *ListTagResourcesRequest) SetResourceId(v []*string) *ListTagResourcesRequest {
	s.ResourceId = v
	return s
}

func (s *ListTagResourcesRequest) SetResourceOwnerAccount(v string) *ListTagResourcesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ListTagResourcesRequest) SetResourceOwnerId(v int64) *ListTagResourcesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ListTagResourcesRequest) SetResourceType(v string) *ListTagResourcesRequest {
	s.ResourceType = &v
	return s
}

func (s *ListTagResourcesRequest) SetTag(v []*ListTagResourcesRequestTag) *ListTagResourcesRequest {
	s.Tag = v
	return s
}

func (s *ListTagResourcesRequest) Validate() error {
	return dara.Validate(s)
}

type ListTagResourcesRequestTag struct {
	// The key of tag N. The key must be 1 to 64 characters in length.
	//
	// You can use `Tag.N` to query AnalyticDB for PostgreSQL instances that have specific tags added. Tag.N consists of Tag.N.Key and Tag.N.Value.
	//
	// Valid values of N: 1 to 20.
	//
	// 	- If you specify only `Tag.N.Key`, all instances that have the tag key added are returned.
	//
	// 	- If you specify only `Tag.N.Value`, the `InvalidParameter.TagValue` error message is returned.
	//
	// 	- If you specify multiple tag key-value pairs at a time, the instances that match all the specified tag key-value pairs are returned.
	//
	// example:
	//
	// TestKey
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The value of tag N. The value must be 1 to 128 characters in length.
	//
	// Valid values of N: 1 to 20.
	//
	// example:
	//
	// TestValue
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s ListTagResourcesRequestTag) String() string {
	return dara.Prettify(s)
}

func (s ListTagResourcesRequestTag) GoString() string {
	return s.String()
}

func (s *ListTagResourcesRequestTag) GetKey() *string {
	return s.Key
}

func (s *ListTagResourcesRequestTag) GetValue() *string {
	return s.Value
}

func (s *ListTagResourcesRequestTag) SetKey(v string) *ListTagResourcesRequestTag {
	s.Key = &v
	return s
}

func (s *ListTagResourcesRequestTag) SetValue(v string) *ListTagResourcesRequestTag {
	s.Value = &v
	return s
}

func (s *ListTagResourcesRequestTag) Validate() error {
	return dara.Validate(s)
}

type iListTagResourcesResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetNextToken(v string) *ListTagResourcesResponseBody
	GetNextToken() *string
	SetRequestId(v string) *ListTagResourcesResponseBody
	GetRequestId() *string
	SetTagResources(v *ListTagResourcesResponseBodyTagResources) *ListTagResourcesResponseBody
	GetTagResources() *ListTagResourcesResponseBodyTagResources
}

type ListTagResourcesResponseBody struct {
	// The token used to perform the next query.
	//
	// example:
	//
	// caeba0bbb2be03f84eb48b699f0a4883
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 5414A4E5-4C36-4461-95FC-23757A20B5F8
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Details about the instances and tags, including the instance IDs, instance modes, and tag key-value pairs.
	TagResources *ListTagResourcesResponseBodyTagResources `json:"TagResources,omitempty" xml:"TagResources,omitempty" type:"Struct"`
}

func (s ListTagResourcesResponseBody) String() string {
	return dara.Prettify(s)
}

func (s ListTagResourcesResponseBody) GoString() string {
	return s.String()
}

func (s *ListTagResourcesResponseBody) GetNextToken() *string {
	return s.NextToken
}

func (s *ListTagResourcesResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *ListTagResourcesResponseBody) GetTagResources() *ListTagResourcesResponseBodyTagResources {
	return s.TagResources
}

func (s *ListTagResourcesResponseBody) SetNextToken(v string) *ListTagResourcesResponseBody {
	s.NextToken = &v
	return s
}

func (s *ListTagResourcesResponseBody) SetRequestId(v string) *ListTagResourcesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListTagResourcesResponseBody) SetTagResources(v *ListTagResourcesResponseBodyTagResources) *ListTagResourcesResponseBody {
	s.TagResources = v
	return s
}

func (s *ListTagResourcesResponseBody) Validate() error {
	return dara.Validate(s)
}

type ListTagResourcesResponseBodyTagResources struct {
	TagResource []*ListTagResourcesResponseBodyTagResourcesTagResource `json:"TagResource,omitempty" xml:"TagResource,omitempty" type:"Repeated"`
}

func (s ListTagResourcesResponseBodyTagResources) String() string {
	return dara.Prettify(s)
}

func (s ListTagResourcesResponseBodyTagResources) GoString() string {
	return s.String()
}

func (s *ListTagResourcesResponseBodyTagResources) GetTagResource() []*ListTagResourcesResponseBodyTagResourcesTagResource {
	return s.TagResource
}

func (s *ListTagResourcesResponseBodyTagResources) SetTagResource(v []*ListTagResourcesResponseBodyTagResourcesTagResource) *ListTagResourcesResponseBodyTagResources {
	s.TagResource = v
	return s
}

func (s *ListTagResourcesResponseBodyTagResources) Validate() error {
	return dara.Validate(s)
}

type ListTagResourcesResponseBodyTagResourcesTagResource struct {
	// The ID of the instance.
	//
	// example:
	//
	// gp-xxxxxxxxxx
	ResourceId *string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty"`
	// The storage mode of the instance.
	//
	// example:
	//
	// instance
	ResourceType *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	// The tag key.
	//
	// example:
	//
	// TestKey
	TagKey *string `json:"TagKey,omitempty" xml:"TagKey,omitempty"`
	// The tag value.
	//
	// example:
	//
	// TestValue
	TagValue *string `json:"TagValue,omitempty" xml:"TagValue,omitempty"`
}

func (s ListTagResourcesResponseBodyTagResourcesTagResource) String() string {
	return dara.Prettify(s)
}

func (s ListTagResourcesResponseBodyTagResourcesTagResource) GoString() string {
	return s.String()
}

func (s *ListTagResourcesResponseBodyTagResourcesTagResource) GetResourceId() *string {
	return s.ResourceId
}

func (s *ListTagResourcesResponseBodyTagResourcesTagResource) GetResourceType() *string {
	return s.ResourceType
}

func (s *ListTagResourcesResponseBodyTagResourcesTagResource) GetTagKey() *string {
	return s.TagKey
}

func (s *ListTagResourcesResponseBodyTagResourcesTagResource) GetTagValue() *string {
	return s.TagValue
}

func (s *ListTagResourcesResponseBodyTagResourcesTagResource) SetResourceId(v string) *ListTagResourcesResponseBodyTagResourcesTagResource {
	s.ResourceId = &v
	return s
}

func (s *ListTagResourcesResponseBodyTagResourcesTagResource) SetResourceType(v string) *ListTagResourcesResponseBodyTagResourcesTagResource {
	s.ResourceType = &v
	return s
}

func (s *ListTagResourcesResponseBodyTagResourcesTagResource) SetTagKey(v string) *ListTagResourcesResponseBodyTagResourcesTagResource {
	s.TagKey = &v
	return s
}

func (s *ListTagResourcesResponseBodyTagResourcesTagResource) SetTagValue(v string) *ListTagResourcesResponseBodyTagResourcesTagResource {
	s.TagValue = &v
	return s
}

func (s *ListTagResourcesResponseBodyTagResourcesTagResource) Validate() error {
	return dara.Validate(s)
}

type iListTagResourcesResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *ListTagResourcesResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *ListTagResourcesResponse
	GetStatusCode() *int32
	SetBody(v *ListTagResourcesResponseBody) *ListTagResourcesResponse
	GetBody() *ListTagResourcesResponseBody
}

type ListTagResourcesResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListTagResourcesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListTagResourcesResponse) String() string {
	return dara.Prettify(s)
}

func (s ListTagResourcesResponse) GoString() string {
	return s.String()
}

func (s *ListTagResourcesResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *ListTagResourcesResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *ListTagResourcesResponse) GetBody() *ListTagResourcesResponseBody {
	return s.Body
}

func (s *ListTagResourcesResponse) SetHeaders(v map[string]*string) *ListTagResourcesResponse {
	s.Headers = v
	return s
}

func (s *ListTagResourcesResponse) SetStatusCode(v int32) *ListTagResourcesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListTagResourcesResponse) SetBody(v *ListTagResourcesResponseBody) *ListTagResourcesResponse {
	s.Body = v
	return s
}

func (s *ListTagResourcesResponse) Validate() error {
	return dara.Validate(s)
}

type iModifyAccountDescriptionRequest interface {
	dara.Model
	String() string
	GoString() string
	SetAccountDescription(v string) *ModifyAccountDescriptionRequest
	GetAccountDescription() *string
	SetAccountName(v string) *ModifyAccountDescriptionRequest
	GetAccountName() *string
	SetClientToken(v string) *ModifyAccountDescriptionRequest
	GetClientToken() *string
	SetDBInstanceId(v string) *ModifyAccountDescriptionRequest
	GetDBInstanceId() *string
}

type ModifyAccountDescriptionRequest struct {
	// The new description of the database account.
	//
	// 	- The description must start with a letter.
	//
	// 	- The description cannot start with `http://` or `https://`.
	//
	// 	- The description can contain letters, underscores (_), hyphens (-), and digits.
	//
	// 	- The description must be 2 to 256 characters in length.
	//
	// example:
	//
	// testAccoutdescribe
	AccountDescription *string `json:"AccountDescription,omitempty" xml:"AccountDescription,omitempty"`
	// The name of the database account.
	//
	// This parameter is required.
	//
	// example:
	//
	// testAccout
	AccountName *string `json:"AccountName,omitempty" xml:"AccountName,omitempty"`
	// Idempotence check. For more information, see [How to Ensure Idempotence](https://help.aliyun.com/document_detail/327176.html).
	//
	// example:
	//
	// 0c593ea1-3bea-11e9-b96b-88**********
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// The instance ID.
	//
	// > You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the IDs of all AnalyticDB for PostgreSQL instances within a region.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
}

func (s ModifyAccountDescriptionRequest) String() string {
	return dara.Prettify(s)
}

func (s ModifyAccountDescriptionRequest) GoString() string {
	return s.String()
}

func (s *ModifyAccountDescriptionRequest) GetAccountDescription() *string {
	return s.AccountDescription
}

func (s *ModifyAccountDescriptionRequest) GetAccountName() *string {
	return s.AccountName
}

func (s *ModifyAccountDescriptionRequest) GetClientToken() *string {
	return s.ClientToken
}

func (s *ModifyAccountDescriptionRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *ModifyAccountDescriptionRequest) SetAccountDescription(v string) *ModifyAccountDescriptionRequest {
	s.AccountDescription = &v
	return s
}

func (s *ModifyAccountDescriptionRequest) SetAccountName(v string) *ModifyAccountDescriptionRequest {
	s.AccountName = &v
	return s
}

func (s *ModifyAccountDescriptionRequest) SetClientToken(v string) *ModifyAccountDescriptionRequest {
	s.ClientToken = &v
	return s
}

func (s *ModifyAccountDescriptionRequest) SetDBInstanceId(v string) *ModifyAccountDescriptionRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ModifyAccountDescriptionRequest) Validate() error {
	return dara.Validate(s)
}

type iModifyAccountDescriptionResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetRequestId(v string) *ModifyAccountDescriptionResponseBody
	GetRequestId() *string
}

type ModifyAccountDescriptionResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 99BBBD5E-B5D8-4FC8-B8BF-FB1A0A38BBA2
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyAccountDescriptionResponseBody) String() string {
	return dara.Prettify(s)
}

func (s ModifyAccountDescriptionResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyAccountDescriptionResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *ModifyAccountDescriptionResponseBody) SetRequestId(v string) *ModifyAccountDescriptionResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyAccountDescriptionResponseBody) Validate() error {
	return dara.Validate(s)
}

type iModifyAccountDescriptionResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *ModifyAccountDescriptionResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *ModifyAccountDescriptionResponse
	GetStatusCode() *int32
	SetBody(v *ModifyAccountDescriptionResponseBody) *ModifyAccountDescriptionResponse
	GetBody() *ModifyAccountDescriptionResponseBody
}

type ModifyAccountDescriptionResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyAccountDescriptionResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyAccountDescriptionResponse) String() string {
	return dara.Prettify(s)
}

func (s ModifyAccountDescriptionResponse) GoString() string {
	return s.String()
}

func (s *ModifyAccountDescriptionResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *ModifyAccountDescriptionResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *ModifyAccountDescriptionResponse) GetBody() *ModifyAccountDescriptionResponseBody {
	return s.Body
}

func (s *ModifyAccountDescriptionResponse) SetHeaders(v map[string]*string) *ModifyAccountDescriptionResponse {
	s.Headers = v
	return s
}

func (s *ModifyAccountDescriptionResponse) SetStatusCode(v int32) *ModifyAccountDescriptionResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyAccountDescriptionResponse) SetBody(v *ModifyAccountDescriptionResponseBody) *ModifyAccountDescriptionResponse {
	s.Body = v
	return s
}

func (s *ModifyAccountDescriptionResponse) Validate() error {
	return dara.Validate(s)
}

type iModifyBackupPolicyRequest interface {
	dara.Model
	String() string
	GoString() string
	SetBackupRetentionPeriod(v int32) *ModifyBackupPolicyRequest
	GetBackupRetentionPeriod() *int32
	SetDBInstanceId(v string) *ModifyBackupPolicyRequest
	GetDBInstanceId() *string
	SetEnableRecoveryPoint(v bool) *ModifyBackupPolicyRequest
	GetEnableRecoveryPoint() *bool
	SetPreferredBackupPeriod(v string) *ModifyBackupPolicyRequest
	GetPreferredBackupPeriod() *string
	SetPreferredBackupTime(v string) *ModifyBackupPolicyRequest
	GetPreferredBackupTime() *string
	SetRecoveryPointPeriod(v string) *ModifyBackupPolicyRequest
	GetRecoveryPointPeriod() *string
}

type ModifyBackupPolicyRequest struct {
	// The number of days for which data backup files are retained. Default value: 7. Maximum value: 7. Valid values: 1 to 7.
	//
	// example:
	//
	// 7
	BackupRetentionPeriod *int32 `json:"BackupRetentionPeriod,omitempty" xml:"BackupRetentionPeriod,omitempty"`
	// The ID of the instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp***************
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// Specifies whether to enable automatic point-in-time backup.
	//
	// 	- true
	//
	// 	- false
	//
	// Default value: true.
	//
	// example:
	//
	// true
	EnableRecoveryPoint *bool `json:"EnableRecoveryPoint,omitempty" xml:"EnableRecoveryPoint,omitempty"`
	// The cycle based on which backups are performed. If more than one day of the week is specified, the days of the week are separated by commas (,). Valid values:
	//
	// 	- Monday
	//
	// 	- Tuesday
	//
	// 	- Wednesday
	//
	// 	- Thursday
	//
	// 	- Friday
	//
	// 	- Saturday
	//
	// 	- Sunday
	//
	// This parameter is required.
	//
	// example:
	//
	// Tuesday, Thursday, Saturday
	PreferredBackupPeriod *string `json:"PreferredBackupPeriod,omitempty" xml:"PreferredBackupPeriod,omitempty"`
	// The backup window. Specify the backup window in the HH:mmZ-HH:mmZ format. The backup window must be in UTC. Default value: 00:00-01:00.
	//
	// This parameter is required.
	//
	// example:
	//
	// 15:00Z-16:00Z
	PreferredBackupTime *string `json:"PreferredBackupTime,omitempty" xml:"PreferredBackupTime,omitempty"`
	// The frequency of point-in-time backup.
	//
	// 	- 1: per hour
	//
	// 	- 2: per 2 hours
	//
	// 	- 4: per 4 hours
	//
	// 	- 8: per 8 hours
	//
	// Default value: 8.
	//
	// example:
	//
	// 8
	RecoveryPointPeriod *string `json:"RecoveryPointPeriod,omitempty" xml:"RecoveryPointPeriod,omitempty"`
}

func (s ModifyBackupPolicyRequest) String() string {
	return dara.Prettify(s)
}

func (s ModifyBackupPolicyRequest) GoString() string {
	return s.String()
}

func (s *ModifyBackupPolicyRequest) GetBackupRetentionPeriod() *int32 {
	return s.BackupRetentionPeriod
}

func (s *ModifyBackupPolicyRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *ModifyBackupPolicyRequest) GetEnableRecoveryPoint() *bool {
	return s.EnableRecoveryPoint
}

func (s *ModifyBackupPolicyRequest) GetPreferredBackupPeriod() *string {
	return s.PreferredBackupPeriod
}

func (s *ModifyBackupPolicyRequest) GetPreferredBackupTime() *string {
	return s.PreferredBackupTime
}

func (s *ModifyBackupPolicyRequest) GetRecoveryPointPeriod() *string {
	return s.RecoveryPointPeriod
}

func (s *ModifyBackupPolicyRequest) SetBackupRetentionPeriod(v int32) *ModifyBackupPolicyRequest {
	s.BackupRetentionPeriod = &v
	return s
}

func (s *ModifyBackupPolicyRequest) SetDBInstanceId(v string) *ModifyBackupPolicyRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ModifyBackupPolicyRequest) SetEnableRecoveryPoint(v bool) *ModifyBackupPolicyRequest {
	s.EnableRecoveryPoint = &v
	return s
}

func (s *ModifyBackupPolicyRequest) SetPreferredBackupPeriod(v string) *ModifyBackupPolicyRequest {
	s.PreferredBackupPeriod = &v
	return s
}

func (s *ModifyBackupPolicyRequest) SetPreferredBackupTime(v string) *ModifyBackupPolicyRequest {
	s.PreferredBackupTime = &v
	return s
}

func (s *ModifyBackupPolicyRequest) SetRecoveryPointPeriod(v string) *ModifyBackupPolicyRequest {
	s.RecoveryPointPeriod = &v
	return s
}

func (s *ModifyBackupPolicyRequest) Validate() error {
	return dara.Validate(s)
}

type iModifyBackupPolicyResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetRequestId(v string) *ModifyBackupPolicyResponseBody
	GetRequestId() *string
}

type ModifyBackupPolicyResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// DA147739-AEAD-4417-9089-65**********
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyBackupPolicyResponseBody) String() string {
	return dara.Prettify(s)
}

func (s ModifyBackupPolicyResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyBackupPolicyResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *ModifyBackupPolicyResponseBody) SetRequestId(v string) *ModifyBackupPolicyResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyBackupPolicyResponseBody) Validate() error {
	return dara.Validate(s)
}

type iModifyBackupPolicyResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *ModifyBackupPolicyResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *ModifyBackupPolicyResponse
	GetStatusCode() *int32
	SetBody(v *ModifyBackupPolicyResponseBody) *ModifyBackupPolicyResponse
	GetBody() *ModifyBackupPolicyResponseBody
}

type ModifyBackupPolicyResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyBackupPolicyResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyBackupPolicyResponse) String() string {
	return dara.Prettify(s)
}

func (s ModifyBackupPolicyResponse) GoString() string {
	return s.String()
}

func (s *ModifyBackupPolicyResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *ModifyBackupPolicyResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *ModifyBackupPolicyResponse) GetBody() *ModifyBackupPolicyResponseBody {
	return s.Body
}

func (s *ModifyBackupPolicyResponse) SetHeaders(v map[string]*string) *ModifyBackupPolicyResponse {
	s.Headers = v
	return s
}

func (s *ModifyBackupPolicyResponse) SetStatusCode(v int32) *ModifyBackupPolicyResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyBackupPolicyResponse) SetBody(v *ModifyBackupPolicyResponseBody) *ModifyBackupPolicyResponse {
	s.Body = v
	return s
}

func (s *ModifyBackupPolicyResponse) Validate() error {
	return dara.Validate(s)
}

type iModifyDBInstanceConfigRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceDescription(v string) *ModifyDBInstanceConfigRequest
	GetDBInstanceDescription() *string
	SetDBInstanceId(v string) *ModifyDBInstanceConfigRequest
	GetDBInstanceId() *string
	SetIdleTime(v int32) *ModifyDBInstanceConfigRequest
	GetIdleTime() *int32
	SetResourceGroupId(v string) *ModifyDBInstanceConfigRequest
	GetResourceGroupId() *string
	SetServerlessResource(v int32) *ModifyDBInstanceConfigRequest
	GetServerlessResource() *int32
}

type ModifyDBInstanceConfigRequest struct {
	// The description of the instance.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceDescription *string `json:"DBInstanceDescription,omitempty" xml:"DBInstanceDescription,omitempty"`
	// The ID of the instance.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the instance IDs of all AnalyticDB for PostgreSQL instances in a specific region.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The wait period for the instance that has no traffic to become idle. Minimum value: 60. Default value: 600. Unit: seconds.
	//
	// example:
	//
	// 600
	IdleTime *int32 `json:"IdleTime,omitempty" xml:"IdleTime,omitempty"`
	// The ID of the resource group to which the instance belongs. For more information about how to obtain the ID of a resource group, see [View basic information of a resource group](https://help.aliyun.com/document_detail/151181.html).
	//
	// example:
	//
	// rg-bp67acfmxazb4p****
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	// The threshold of computing resources. Valid values: 8 to 32. Unit: AnalyticDB Compute Units (ACUs).
	//
	// example:
	//
	// 32
	ServerlessResource *int32 `json:"ServerlessResource,omitempty" xml:"ServerlessResource,omitempty"`
}

func (s ModifyDBInstanceConfigRequest) String() string {
	return dara.Prettify(s)
}

func (s ModifyDBInstanceConfigRequest) GoString() string {
	return s.String()
}

func (s *ModifyDBInstanceConfigRequest) GetDBInstanceDescription() *string {
	return s.DBInstanceDescription
}

func (s *ModifyDBInstanceConfigRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *ModifyDBInstanceConfigRequest) GetIdleTime() *int32 {
	return s.IdleTime
}

func (s *ModifyDBInstanceConfigRequest) GetResourceGroupId() *string {
	return s.ResourceGroupId
}

func (s *ModifyDBInstanceConfigRequest) GetServerlessResource() *int32 {
	return s.ServerlessResource
}

func (s *ModifyDBInstanceConfigRequest) SetDBInstanceDescription(v string) *ModifyDBInstanceConfigRequest {
	s.DBInstanceDescription = &v
	return s
}

func (s *ModifyDBInstanceConfigRequest) SetDBInstanceId(v string) *ModifyDBInstanceConfigRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ModifyDBInstanceConfigRequest) SetIdleTime(v int32) *ModifyDBInstanceConfigRequest {
	s.IdleTime = &v
	return s
}

func (s *ModifyDBInstanceConfigRequest) SetResourceGroupId(v string) *ModifyDBInstanceConfigRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *ModifyDBInstanceConfigRequest) SetServerlessResource(v int32) *ModifyDBInstanceConfigRequest {
	s.ServerlessResource = &v
	return s
}

func (s *ModifyDBInstanceConfigRequest) Validate() error {
	return dara.Validate(s)
}

type iModifyDBInstanceConfigResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetDbInstanceId(v string) *ModifyDBInstanceConfigResponseBody
	GetDbInstanceId() *string
	SetErrorMessage(v string) *ModifyDBInstanceConfigResponseBody
	GetErrorMessage() *string
	SetRequestId(v string) *ModifyDBInstanceConfigResponseBody
	GetRequestId() *string
	SetStatus(v bool) *ModifyDBInstanceConfigResponseBody
	GetStatus() *bool
}

type ModifyDBInstanceConfigResponseBody struct {
	// The ID of the instance.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DbInstanceId *string `json:"DbInstanceId,omitempty" xml:"DbInstanceId,omitempty"`
	// The error message returned if the operation fails.
	//
	// example:
	//
	// \\"error message\\"
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 34B32A0A-08EF-4A87-B6BE-CDD9F56FC3AD
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The state of the operation. Valid values:
	//
	// 	- **0**: The operation failed.
	//
	// 	- **1**: The operation is successful.
	//
	// example:
	//
	// 1
	Status *bool `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ModifyDBInstanceConfigResponseBody) String() string {
	return dara.Prettify(s)
}

func (s ModifyDBInstanceConfigResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyDBInstanceConfigResponseBody) GetDbInstanceId() *string {
	return s.DbInstanceId
}

func (s *ModifyDBInstanceConfigResponseBody) GetErrorMessage() *string {
	return s.ErrorMessage
}

func (s *ModifyDBInstanceConfigResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *ModifyDBInstanceConfigResponseBody) GetStatus() *bool {
	return s.Status
}

func (s *ModifyDBInstanceConfigResponseBody) SetDbInstanceId(v string) *ModifyDBInstanceConfigResponseBody {
	s.DbInstanceId = &v
	return s
}

func (s *ModifyDBInstanceConfigResponseBody) SetErrorMessage(v string) *ModifyDBInstanceConfigResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *ModifyDBInstanceConfigResponseBody) SetRequestId(v string) *ModifyDBInstanceConfigResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyDBInstanceConfigResponseBody) SetStatus(v bool) *ModifyDBInstanceConfigResponseBody {
	s.Status = &v
	return s
}

func (s *ModifyDBInstanceConfigResponseBody) Validate() error {
	return dara.Validate(s)
}

type iModifyDBInstanceConfigResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *ModifyDBInstanceConfigResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *ModifyDBInstanceConfigResponse
	GetStatusCode() *int32
	SetBody(v *ModifyDBInstanceConfigResponseBody) *ModifyDBInstanceConfigResponse
	GetBody() *ModifyDBInstanceConfigResponseBody
}

type ModifyDBInstanceConfigResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyDBInstanceConfigResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyDBInstanceConfigResponse) String() string {
	return dara.Prettify(s)
}

func (s ModifyDBInstanceConfigResponse) GoString() string {
	return s.String()
}

func (s *ModifyDBInstanceConfigResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *ModifyDBInstanceConfigResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *ModifyDBInstanceConfigResponse) GetBody() *ModifyDBInstanceConfigResponseBody {
	return s.Body
}

func (s *ModifyDBInstanceConfigResponse) SetHeaders(v map[string]*string) *ModifyDBInstanceConfigResponse {
	s.Headers = v
	return s
}

func (s *ModifyDBInstanceConfigResponse) SetStatusCode(v int32) *ModifyDBInstanceConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyDBInstanceConfigResponse) SetBody(v *ModifyDBInstanceConfigResponseBody) *ModifyDBInstanceConfigResponse {
	s.Body = v
	return s
}

func (s *ModifyDBInstanceConfigResponse) Validate() error {
	return dara.Validate(s)
}

type iModifyDBInstanceConnectionStringRequest interface {
	dara.Model
	String() string
	GoString() string
	SetClientToken(v string) *ModifyDBInstanceConnectionStringRequest
	GetClientToken() *string
	SetConnectionStringPrefix(v string) *ModifyDBInstanceConnectionStringRequest
	GetConnectionStringPrefix() *string
	SetCurrentConnectionString(v string) *ModifyDBInstanceConnectionStringRequest
	GetCurrentConnectionString() *string
	SetDBInstanceId(v string) *ModifyDBInstanceConnectionStringRequest
	GetDBInstanceId() *string
	SetPort(v string) *ModifyDBInstanceConnectionStringRequest
	GetPort() *string
}

type ModifyDBInstanceConnectionStringRequest struct {
	// Idempotence check. For more information, see [How to Ensure Idempotence](https://help.aliyun.com/document_detail/327176.html).
	//
	// example:
	//
	// 0c593ea1-3bea-11e9-b96b-88**********
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// The endpoint prefix of the instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-test
	ConnectionStringPrefix *string `json:"ConnectionStringPrefix,omitempty" xml:"ConnectionStringPrefix,omitempty"`
	// The current endpoint of the instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-t4n2qg19bnn98****-master.gpdb.rds.aliyuncs.com
	CurrentConnectionString *string `json:"CurrentConnectionString,omitempty" xml:"CurrentConnectionString,omitempty"`
	// The instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-t4n2qg19bnn98****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The port number. Example: 5432.
	//
	// This parameter is required.
	//
	// example:
	//
	// 5432
	Port *string `json:"Port,omitempty" xml:"Port,omitempty"`
}

func (s ModifyDBInstanceConnectionStringRequest) String() string {
	return dara.Prettify(s)
}

func (s ModifyDBInstanceConnectionStringRequest) GoString() string {
	return s.String()
}

func (s *ModifyDBInstanceConnectionStringRequest) GetClientToken() *string {
	return s.ClientToken
}

func (s *ModifyDBInstanceConnectionStringRequest) GetConnectionStringPrefix() *string {
	return s.ConnectionStringPrefix
}

func (s *ModifyDBInstanceConnectionStringRequest) GetCurrentConnectionString() *string {
	return s.CurrentConnectionString
}

func (s *ModifyDBInstanceConnectionStringRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *ModifyDBInstanceConnectionStringRequest) GetPort() *string {
	return s.Port
}

func (s *ModifyDBInstanceConnectionStringRequest) SetClientToken(v string) *ModifyDBInstanceConnectionStringRequest {
	s.ClientToken = &v
	return s
}

func (s *ModifyDBInstanceConnectionStringRequest) SetConnectionStringPrefix(v string) *ModifyDBInstanceConnectionStringRequest {
	s.ConnectionStringPrefix = &v
	return s
}

func (s *ModifyDBInstanceConnectionStringRequest) SetCurrentConnectionString(v string) *ModifyDBInstanceConnectionStringRequest {
	s.CurrentConnectionString = &v
	return s
}

func (s *ModifyDBInstanceConnectionStringRequest) SetDBInstanceId(v string) *ModifyDBInstanceConnectionStringRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ModifyDBInstanceConnectionStringRequest) SetPort(v string) *ModifyDBInstanceConnectionStringRequest {
	s.Port = &v
	return s
}

func (s *ModifyDBInstanceConnectionStringRequest) Validate() error {
	return dara.Validate(s)
}

type iModifyDBInstanceConnectionStringResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetRequestId(v string) *ModifyDBInstanceConnectionStringResponseBody
	GetRequestId() *string
}

type ModifyDBInstanceConnectionStringResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 29B0BF34-D069-4495-92C7-FA6D94528A9E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyDBInstanceConnectionStringResponseBody) String() string {
	return dara.Prettify(s)
}

func (s ModifyDBInstanceConnectionStringResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyDBInstanceConnectionStringResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *ModifyDBInstanceConnectionStringResponseBody) SetRequestId(v string) *ModifyDBInstanceConnectionStringResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyDBInstanceConnectionStringResponseBody) Validate() error {
	return dara.Validate(s)
}

type iModifyDBInstanceConnectionStringResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *ModifyDBInstanceConnectionStringResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *ModifyDBInstanceConnectionStringResponse
	GetStatusCode() *int32
	SetBody(v *ModifyDBInstanceConnectionStringResponseBody) *ModifyDBInstanceConnectionStringResponse
	GetBody() *ModifyDBInstanceConnectionStringResponseBody
}

type ModifyDBInstanceConnectionStringResponse struct {
	Headers    map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyDBInstanceConnectionStringResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyDBInstanceConnectionStringResponse) String() string {
	return dara.Prettify(s)
}

func (s ModifyDBInstanceConnectionStringResponse) GoString() string {
	return s.String()
}

func (s *ModifyDBInstanceConnectionStringResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *ModifyDBInstanceConnectionStringResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *ModifyDBInstanceConnectionStringResponse) GetBody() *ModifyDBInstanceConnectionStringResponseBody {
	return s.Body
}

func (s *ModifyDBInstanceConnectionStringResponse) SetHeaders(v map[string]*string) *ModifyDBInstanceConnectionStringResponse {
	s.Headers = v
	return s
}

func (s *ModifyDBInstanceConnectionStringResponse) SetStatusCode(v int32) *ModifyDBInstanceConnectionStringResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyDBInstanceConnectionStringResponse) SetBody(v *ModifyDBInstanceConnectionStringResponseBody) *ModifyDBInstanceConnectionStringResponse {
	s.Body = v
	return s
}

func (s *ModifyDBInstanceConnectionStringResponse) Validate() error {
	return dara.Validate(s)
}

type iModifyDBInstanceDeploymentModeRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *ModifyDBInstanceDeploymentModeRequest
	GetDBInstanceId() *string
	SetDeployMode(v string) *ModifyDBInstanceDeploymentModeRequest
	GetDeployMode() *string
	SetStandbyVSwitchId(v string) *ModifyDBInstanceDeploymentModeRequest
	GetStandbyVSwitchId() *string
	SetStandbyZoneId(v string) *ModifyDBInstanceDeploymentModeRequest
	GetStandbyZoneId() *string
}

type ModifyDBInstanceDeploymentModeRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// multiple
	DeployMode *string `json:"DeployMode,omitempty" xml:"DeployMode,omitempty"`
	// example:
	//
	// vsw-bp1cpq8mr64paltkb****
	StandbyVSwitchId *string `json:"StandbyVSwitchId,omitempty" xml:"StandbyVSwitchId,omitempty"`
	// example:
	//
	// cn-hangzhou-j
	StandbyZoneId *string `json:"StandbyZoneId,omitempty" xml:"StandbyZoneId,omitempty"`
}

func (s ModifyDBInstanceDeploymentModeRequest) String() string {
	return dara.Prettify(s)
}

func (s ModifyDBInstanceDeploymentModeRequest) GoString() string {
	return s.String()
}

func (s *ModifyDBInstanceDeploymentModeRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *ModifyDBInstanceDeploymentModeRequest) GetDeployMode() *string {
	return s.DeployMode
}

func (s *ModifyDBInstanceDeploymentModeRequest) GetStandbyVSwitchId() *string {
	return s.StandbyVSwitchId
}

func (s *ModifyDBInstanceDeploymentModeRequest) GetStandbyZoneId() *string {
	return s.StandbyZoneId
}

func (s *ModifyDBInstanceDeploymentModeRequest) SetDBInstanceId(v string) *ModifyDBInstanceDeploymentModeRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ModifyDBInstanceDeploymentModeRequest) SetDeployMode(v string) *ModifyDBInstanceDeploymentModeRequest {
	s.DeployMode = &v
	return s
}

func (s *ModifyDBInstanceDeploymentModeRequest) SetStandbyVSwitchId(v string) *ModifyDBInstanceDeploymentModeRequest {
	s.StandbyVSwitchId = &v
	return s
}

func (s *ModifyDBInstanceDeploymentModeRequest) SetStandbyZoneId(v string) *ModifyDBInstanceDeploymentModeRequest {
	s.StandbyZoneId = &v
	return s
}

func (s *ModifyDBInstanceDeploymentModeRequest) Validate() error {
	return dara.Validate(s)
}

type iModifyDBInstanceDeploymentModeResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetRequestId(v string) *ModifyDBInstanceDeploymentModeResponseBody
	GetRequestId() *string
}

type ModifyDBInstanceDeploymentModeResponseBody struct {
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyDBInstanceDeploymentModeResponseBody) String() string {
	return dara.Prettify(s)
}

func (s ModifyDBInstanceDeploymentModeResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyDBInstanceDeploymentModeResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *ModifyDBInstanceDeploymentModeResponseBody) SetRequestId(v string) *ModifyDBInstanceDeploymentModeResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyDBInstanceDeploymentModeResponseBody) Validate() error {
	return dara.Validate(s)
}

type iModifyDBInstanceDeploymentModeResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *ModifyDBInstanceDeploymentModeResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *ModifyDBInstanceDeploymentModeResponse
	GetStatusCode() *int32
	SetBody(v *ModifyDBInstanceDeploymentModeResponseBody) *ModifyDBInstanceDeploymentModeResponse
	GetBody() *ModifyDBInstanceDeploymentModeResponseBody
}

type ModifyDBInstanceDeploymentModeResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyDBInstanceDeploymentModeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyDBInstanceDeploymentModeResponse) String() string {
	return dara.Prettify(s)
}

func (s ModifyDBInstanceDeploymentModeResponse) GoString() string {
	return s.String()
}

func (s *ModifyDBInstanceDeploymentModeResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *ModifyDBInstanceDeploymentModeResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *ModifyDBInstanceDeploymentModeResponse) GetBody() *ModifyDBInstanceDeploymentModeResponseBody {
	return s.Body
}

func (s *ModifyDBInstanceDeploymentModeResponse) SetHeaders(v map[string]*string) *ModifyDBInstanceDeploymentModeResponse {
	s.Headers = v
	return s
}

func (s *ModifyDBInstanceDeploymentModeResponse) SetStatusCode(v int32) *ModifyDBInstanceDeploymentModeResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyDBInstanceDeploymentModeResponse) SetBody(v *ModifyDBInstanceDeploymentModeResponseBody) *ModifyDBInstanceDeploymentModeResponse {
	s.Body = v
	return s
}

func (s *ModifyDBInstanceDeploymentModeResponse) Validate() error {
	return dara.Validate(s)
}

type iModifyDBInstanceDescriptionRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceDescription(v string) *ModifyDBInstanceDescriptionRequest
	GetDBInstanceDescription() *string
	SetDBInstanceId(v string) *ModifyDBInstanceDescriptionRequest
	GetDBInstanceId() *string
	SetResourceGroupId(v string) *ModifyDBInstanceDescriptionRequest
	GetResourceGroupId() *string
}

type ModifyDBInstanceDescriptionRequest struct {
	// The description of the instance.
	//
	// The description must be 2 to 256 characters in length. It cannot start with http:// or https://.
	//
	// This parameter is required.
	//
	// example:
	//
	// test
	DBInstanceDescription *string `json:"DBInstanceDescription,omitempty" xml:"DBInstanceDescription,omitempty"`
	// The ID of the instance.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the instance IDs of all AnalyticDB for PostgreSQL instances in a specific region.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// This parameter is no longer used.
	//
	// example:
	//
	// rg-bp67acfmxazb4p****
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
}

func (s ModifyDBInstanceDescriptionRequest) String() string {
	return dara.Prettify(s)
}

func (s ModifyDBInstanceDescriptionRequest) GoString() string {
	return s.String()
}

func (s *ModifyDBInstanceDescriptionRequest) GetDBInstanceDescription() *string {
	return s.DBInstanceDescription
}

func (s *ModifyDBInstanceDescriptionRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *ModifyDBInstanceDescriptionRequest) GetResourceGroupId() *string {
	return s.ResourceGroupId
}

func (s *ModifyDBInstanceDescriptionRequest) SetDBInstanceDescription(v string) *ModifyDBInstanceDescriptionRequest {
	s.DBInstanceDescription = &v
	return s
}

func (s *ModifyDBInstanceDescriptionRequest) SetDBInstanceId(v string) *ModifyDBInstanceDescriptionRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ModifyDBInstanceDescriptionRequest) SetResourceGroupId(v string) *ModifyDBInstanceDescriptionRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *ModifyDBInstanceDescriptionRequest) Validate() error {
	return dara.Validate(s)
}

type iModifyDBInstanceDescriptionResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetRequestId(v string) *ModifyDBInstanceDescriptionResponseBody
	GetRequestId() *string
}

type ModifyDBInstanceDescriptionResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// 107BE202-D1A2-479E-98E0-A8**********
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyDBInstanceDescriptionResponseBody) String() string {
	return dara.Prettify(s)
}

func (s ModifyDBInstanceDescriptionResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyDBInstanceDescriptionResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *ModifyDBInstanceDescriptionResponseBody) SetRequestId(v string) *ModifyDBInstanceDescriptionResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyDBInstanceDescriptionResponseBody) Validate() error {
	return dara.Validate(s)
}

type iModifyDBInstanceDescriptionResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *ModifyDBInstanceDescriptionResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *ModifyDBInstanceDescriptionResponse
	GetStatusCode() *int32
	SetBody(v *ModifyDBInstanceDescriptionResponseBody) *ModifyDBInstanceDescriptionResponse
	GetBody() *ModifyDBInstanceDescriptionResponseBody
}

type ModifyDBInstanceDescriptionResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyDBInstanceDescriptionResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyDBInstanceDescriptionResponse) String() string {
	return dara.Prettify(s)
}

func (s ModifyDBInstanceDescriptionResponse) GoString() string {
	return s.String()
}

func (s *ModifyDBInstanceDescriptionResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *ModifyDBInstanceDescriptionResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *ModifyDBInstanceDescriptionResponse) GetBody() *ModifyDBInstanceDescriptionResponseBody {
	return s.Body
}

func (s *ModifyDBInstanceDescriptionResponse) SetHeaders(v map[string]*string) *ModifyDBInstanceDescriptionResponse {
	s.Headers = v
	return s
}

func (s *ModifyDBInstanceDescriptionResponse) SetStatusCode(v int32) *ModifyDBInstanceDescriptionResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyDBInstanceDescriptionResponse) SetBody(v *ModifyDBInstanceDescriptionResponseBody) *ModifyDBInstanceDescriptionResponse {
	s.Body = v
	return s
}

func (s *ModifyDBInstanceDescriptionResponse) Validate() error {
	return dara.Validate(s)
}

type iModifyDBInstanceMaintainTimeRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *ModifyDBInstanceMaintainTimeRequest
	GetDBInstanceId() *string
	SetEndTime(v string) *ModifyDBInstanceMaintainTimeRequest
	GetEndTime() *string
	SetResourceGroupId(v string) *ModifyDBInstanceMaintainTimeRequest
	GetResourceGroupId() *string
	SetStartTime(v string) *ModifyDBInstanceMaintainTimeRequest
	GetStartTime() *string
}

type ModifyDBInstanceMaintainTimeRequest struct {
	// The ID of the instance.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the details of all AnalyticDB for PostgreSQL instances in a specific region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp***************
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The end time of the maintenance window. The end time must be later than the start time. Specify the time in the HH:mmZ format. The time must be in UTC.
	//
	// This parameter is required.
	//
	// example:
	//
	// 03:00Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// This parameter is no longer used.
	//
	// example:
	//
	// rg-bp67acfmxazb4p****
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	// The start time of the maintenance window. Specify the time in the HH:mmZ format. The time must be in UTC.
	//
	// This parameter is required.
	//
	// example:
	//
	// 02:00Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s ModifyDBInstanceMaintainTimeRequest) String() string {
	return dara.Prettify(s)
}

func (s ModifyDBInstanceMaintainTimeRequest) GoString() string {
	return s.String()
}

func (s *ModifyDBInstanceMaintainTimeRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *ModifyDBInstanceMaintainTimeRequest) GetEndTime() *string {
	return s.EndTime
}

func (s *ModifyDBInstanceMaintainTimeRequest) GetResourceGroupId() *string {
	return s.ResourceGroupId
}

func (s *ModifyDBInstanceMaintainTimeRequest) GetStartTime() *string {
	return s.StartTime
}

func (s *ModifyDBInstanceMaintainTimeRequest) SetDBInstanceId(v string) *ModifyDBInstanceMaintainTimeRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ModifyDBInstanceMaintainTimeRequest) SetEndTime(v string) *ModifyDBInstanceMaintainTimeRequest {
	s.EndTime = &v
	return s
}

func (s *ModifyDBInstanceMaintainTimeRequest) SetResourceGroupId(v string) *ModifyDBInstanceMaintainTimeRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *ModifyDBInstanceMaintainTimeRequest) SetStartTime(v string) *ModifyDBInstanceMaintainTimeRequest {
	s.StartTime = &v
	return s
}

func (s *ModifyDBInstanceMaintainTimeRequest) Validate() error {
	return dara.Validate(s)
}

type iModifyDBInstanceMaintainTimeResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetRequestId(v string) *ModifyDBInstanceMaintainTimeResponseBody
	GetRequestId() *string
}

type ModifyDBInstanceMaintainTimeResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// CA9A34C8-AC95-413B-AC6A-CE**********
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyDBInstanceMaintainTimeResponseBody) String() string {
	return dara.Prettify(s)
}

func (s ModifyDBInstanceMaintainTimeResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyDBInstanceMaintainTimeResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *ModifyDBInstanceMaintainTimeResponseBody) SetRequestId(v string) *ModifyDBInstanceMaintainTimeResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyDBInstanceMaintainTimeResponseBody) Validate() error {
	return dara.Validate(s)
}

type iModifyDBInstanceMaintainTimeResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *ModifyDBInstanceMaintainTimeResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *ModifyDBInstanceMaintainTimeResponse
	GetStatusCode() *int32
	SetBody(v *ModifyDBInstanceMaintainTimeResponseBody) *ModifyDBInstanceMaintainTimeResponse
	GetBody() *ModifyDBInstanceMaintainTimeResponseBody
}

type ModifyDBInstanceMaintainTimeResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyDBInstanceMaintainTimeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyDBInstanceMaintainTimeResponse) String() string {
	return dara.Prettify(s)
}

func (s ModifyDBInstanceMaintainTimeResponse) GoString() string {
	return s.String()
}

func (s *ModifyDBInstanceMaintainTimeResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *ModifyDBInstanceMaintainTimeResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *ModifyDBInstanceMaintainTimeResponse) GetBody() *ModifyDBInstanceMaintainTimeResponseBody {
	return s.Body
}

func (s *ModifyDBInstanceMaintainTimeResponse) SetHeaders(v map[string]*string) *ModifyDBInstanceMaintainTimeResponse {
	s.Headers = v
	return s
}

func (s *ModifyDBInstanceMaintainTimeResponse) SetStatusCode(v int32) *ModifyDBInstanceMaintainTimeResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyDBInstanceMaintainTimeResponse) SetBody(v *ModifyDBInstanceMaintainTimeResponseBody) *ModifyDBInstanceMaintainTimeResponse {
	s.Body = v
	return s
}

func (s *ModifyDBInstanceMaintainTimeResponse) Validate() error {
	return dara.Validate(s)
}

type iModifyDBInstanceNetworkTypeRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *ModifyDBInstanceNetworkTypeRequest
	GetDBInstanceId() *string
	SetInstanceNetworkType(v string) *ModifyDBInstanceNetworkTypeRequest
	GetInstanceNetworkType() *string
	SetPrivateIpAddress(v string) *ModifyDBInstanceNetworkTypeRequest
	GetPrivateIpAddress() *string
	SetVPCId(v string) *ModifyDBInstanceNetworkTypeRequest
	GetVPCId() *string
	SetVSwitchId(v string) *ModifyDBInstanceNetworkTypeRequest
	GetVSwitchId() *string
}

type ModifyDBInstanceNetworkTypeRequest struct {
	// The instance ID.
	//
	// > You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The new network type of the instance. Valid values:
	//
	// 	- VPC
	//
	// 	- Classic
	//
	// This parameter is required.
	//
	// example:
	//
	// VPC
	InstanceNetworkType *string `json:"InstanceNetworkType,omitempty" xml:"InstanceNetworkType,omitempty"`
	// The internal IP address of the instance.
	//
	// example:
	//
	// 10.10.XX.XX
	PrivateIpAddress *string `json:"PrivateIpAddress,omitempty" xml:"PrivateIpAddress,omitempty"`
	// The virtual private cloud (VPC) ID of the instance.
	//
	// example:
	//
	// vpc-bp19ame5m1r3oejns****
	VPCId *string `json:"VPCId,omitempty" xml:"VPCId,omitempty"`
	// The vSwitch ID of the instance. This parameter must be specified when VPCId is specified.
	//
	// example:
	//
	// vsw-bp1cpq8mr64paltkb****
	VSwitchId *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
}

func (s ModifyDBInstanceNetworkTypeRequest) String() string {
	return dara.Prettify(s)
}

func (s ModifyDBInstanceNetworkTypeRequest) GoString() string {
	return s.String()
}

func (s *ModifyDBInstanceNetworkTypeRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *ModifyDBInstanceNetworkTypeRequest) GetInstanceNetworkType() *string {
	return s.InstanceNetworkType
}

func (s *ModifyDBInstanceNetworkTypeRequest) GetPrivateIpAddress() *string {
	return s.PrivateIpAddress
}

func (s *ModifyDBInstanceNetworkTypeRequest) GetVPCId() *string {
	return s.VPCId
}

func (s *ModifyDBInstanceNetworkTypeRequest) GetVSwitchId() *string {
	return s.VSwitchId
}

func (s *ModifyDBInstanceNetworkTypeRequest) SetDBInstanceId(v string) *ModifyDBInstanceNetworkTypeRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ModifyDBInstanceNetworkTypeRequest) SetInstanceNetworkType(v string) *ModifyDBInstanceNetworkTypeRequest {
	s.InstanceNetworkType = &v
	return s
}

func (s *ModifyDBInstanceNetworkTypeRequest) SetPrivateIpAddress(v string) *ModifyDBInstanceNetworkTypeRequest {
	s.PrivateIpAddress = &v
	return s
}

func (s *ModifyDBInstanceNetworkTypeRequest) SetVPCId(v string) *ModifyDBInstanceNetworkTypeRequest {
	s.VPCId = &v
	return s
}

func (s *ModifyDBInstanceNetworkTypeRequest) SetVSwitchId(v string) *ModifyDBInstanceNetworkTypeRequest {
	s.VSwitchId = &v
	return s
}

func (s *ModifyDBInstanceNetworkTypeRequest) Validate() error {
	return dara.Validate(s)
}

type iModifyDBInstanceNetworkTypeResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetRequestId(v string) *ModifyDBInstanceNetworkTypeResponseBody
	GetRequestId() *string
}

type ModifyDBInstanceNetworkTypeResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 2d0c35a9-f5da-44ba-852d-741e27b7eb0b
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyDBInstanceNetworkTypeResponseBody) String() string {
	return dara.Prettify(s)
}

func (s ModifyDBInstanceNetworkTypeResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyDBInstanceNetworkTypeResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *ModifyDBInstanceNetworkTypeResponseBody) SetRequestId(v string) *ModifyDBInstanceNetworkTypeResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyDBInstanceNetworkTypeResponseBody) Validate() error {
	return dara.Validate(s)
}

type iModifyDBInstanceNetworkTypeResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *ModifyDBInstanceNetworkTypeResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *ModifyDBInstanceNetworkTypeResponse
	GetStatusCode() *int32
	SetBody(v *ModifyDBInstanceNetworkTypeResponseBody) *ModifyDBInstanceNetworkTypeResponse
	GetBody() *ModifyDBInstanceNetworkTypeResponseBody
}

type ModifyDBInstanceNetworkTypeResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyDBInstanceNetworkTypeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyDBInstanceNetworkTypeResponse) String() string {
	return dara.Prettify(s)
}

func (s ModifyDBInstanceNetworkTypeResponse) GoString() string {
	return s.String()
}

func (s *ModifyDBInstanceNetworkTypeResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *ModifyDBInstanceNetworkTypeResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *ModifyDBInstanceNetworkTypeResponse) GetBody() *ModifyDBInstanceNetworkTypeResponseBody {
	return s.Body
}

func (s *ModifyDBInstanceNetworkTypeResponse) SetHeaders(v map[string]*string) *ModifyDBInstanceNetworkTypeResponse {
	s.Headers = v
	return s
}

func (s *ModifyDBInstanceNetworkTypeResponse) SetStatusCode(v int32) *ModifyDBInstanceNetworkTypeResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyDBInstanceNetworkTypeResponse) SetBody(v *ModifyDBInstanceNetworkTypeResponseBody) *ModifyDBInstanceNetworkTypeResponse {
	s.Body = v
	return s
}

func (s *ModifyDBInstanceNetworkTypeResponse) Validate() error {
	return dara.Validate(s)
}

type iModifyDBInstancePayTypeRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *ModifyDBInstancePayTypeRequest
	GetDBInstanceId() *string
	SetPayType(v string) *ModifyDBInstancePayTypeRequest
	GetPayType() *string
	SetPeriod(v string) *ModifyDBInstancePayTypeRequest
	GetPeriod() *string
	SetUsedTime(v int32) *ModifyDBInstancePayTypeRequest
	GetUsedTime() *int32
}

type ModifyDBInstancePayTypeRequest struct {
	// The instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp***************
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The billing method of the instance. Valid values:
	//
	// 	- Postpaid: pay-as-you-go.
	//
	// 	- Prepaid: subscription.
	//
	// This parameter is required.
	//
	// example:
	//
	// Postpaid
	PayType *string `json:"PayType,omitempty" xml:"PayType,omitempty"`
	// The unit of the subscription duration. Valid values:
	//
	// 	- Month
	//
	// 	- Year
	//
	// This parameter must be specified only when PayType is set to Prepaid.
	//
	// example:
	//
	// Month
	Period *string `json:"Period,omitempty" xml:"Period,omitempty"`
	// The subscription duration.
	//
	// 	- Valid values when Period is set to Month: 1 to 9.
	//
	// 	- Valid values when Period is set to Year: 1 to 3.
	//
	// This parameter must be specified only when PayType is set to Prepaid.
	//
	// example:
	//
	// 1
	UsedTime *int32 `json:"UsedTime,omitempty" xml:"UsedTime,omitempty"`
}

func (s ModifyDBInstancePayTypeRequest) String() string {
	return dara.Prettify(s)
}

func (s ModifyDBInstancePayTypeRequest) GoString() string {
	return s.String()
}

func (s *ModifyDBInstancePayTypeRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *ModifyDBInstancePayTypeRequest) GetPayType() *string {
	return s.PayType
}

func (s *ModifyDBInstancePayTypeRequest) GetPeriod() *string {
	return s.Period
}

func (s *ModifyDBInstancePayTypeRequest) GetUsedTime() *int32 {
	return s.UsedTime
}

func (s *ModifyDBInstancePayTypeRequest) SetDBInstanceId(v string) *ModifyDBInstancePayTypeRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ModifyDBInstancePayTypeRequest) SetPayType(v string) *ModifyDBInstancePayTypeRequest {
	s.PayType = &v
	return s
}

func (s *ModifyDBInstancePayTypeRequest) SetPeriod(v string) *ModifyDBInstancePayTypeRequest {
	s.Period = &v
	return s
}

func (s *ModifyDBInstancePayTypeRequest) SetUsedTime(v int32) *ModifyDBInstancePayTypeRequest {
	s.UsedTime = &v
	return s
}

func (s *ModifyDBInstancePayTypeRequest) Validate() error {
	return dara.Validate(s)
}

type iModifyDBInstancePayTypeResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *ModifyDBInstancePayTypeResponseBody
	GetDBInstanceId() *string
	SetOrderId(v string) *ModifyDBInstancePayTypeResponseBody
	GetOrderId() *string
	SetRequestId(v string) *ModifyDBInstancePayTypeResponseBody
	GetRequestId() *string
}

type ModifyDBInstancePayTypeResponseBody struct {
	// The instance ID.
	//
	// example:
	//
	// gp-bp***************
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The order ID.
	//
	// example:
	//
	// 50578361067****
	OrderId *string `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
	// Id of the request
	//
	// example:
	//
	// 7565770E-7C45-462D-BA4A-8A5396F2****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyDBInstancePayTypeResponseBody) String() string {
	return dara.Prettify(s)
}

func (s ModifyDBInstancePayTypeResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyDBInstancePayTypeResponseBody) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *ModifyDBInstancePayTypeResponseBody) GetOrderId() *string {
	return s.OrderId
}

func (s *ModifyDBInstancePayTypeResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *ModifyDBInstancePayTypeResponseBody) SetDBInstanceId(v string) *ModifyDBInstancePayTypeResponseBody {
	s.DBInstanceId = &v
	return s
}

func (s *ModifyDBInstancePayTypeResponseBody) SetOrderId(v string) *ModifyDBInstancePayTypeResponseBody {
	s.OrderId = &v
	return s
}

func (s *ModifyDBInstancePayTypeResponseBody) SetRequestId(v string) *ModifyDBInstancePayTypeResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyDBInstancePayTypeResponseBody) Validate() error {
	return dara.Validate(s)
}

type iModifyDBInstancePayTypeResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *ModifyDBInstancePayTypeResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *ModifyDBInstancePayTypeResponse
	GetStatusCode() *int32
	SetBody(v *ModifyDBInstancePayTypeResponseBody) *ModifyDBInstancePayTypeResponse
	GetBody() *ModifyDBInstancePayTypeResponseBody
}

type ModifyDBInstancePayTypeResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyDBInstancePayTypeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyDBInstancePayTypeResponse) String() string {
	return dara.Prettify(s)
}

func (s ModifyDBInstancePayTypeResponse) GoString() string {
	return s.String()
}

func (s *ModifyDBInstancePayTypeResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *ModifyDBInstancePayTypeResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *ModifyDBInstancePayTypeResponse) GetBody() *ModifyDBInstancePayTypeResponseBody {
	return s.Body
}

func (s *ModifyDBInstancePayTypeResponse) SetHeaders(v map[string]*string) *ModifyDBInstancePayTypeResponse {
	s.Headers = v
	return s
}

func (s *ModifyDBInstancePayTypeResponse) SetStatusCode(v int32) *ModifyDBInstancePayTypeResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyDBInstancePayTypeResponse) SetBody(v *ModifyDBInstancePayTypeResponseBody) *ModifyDBInstancePayTypeResponse {
	s.Body = v
	return s
}

func (s *ModifyDBInstancePayTypeResponse) Validate() error {
	return dara.Validate(s)
}

type iModifyDBInstanceResourceGroupRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *ModifyDBInstanceResourceGroupRequest
	GetDBInstanceId() *string
	SetNewResourceGroupId(v string) *ModifyDBInstanceResourceGroupRequest
	GetNewResourceGroupId() *string
	SetOwnerAccount(v string) *ModifyDBInstanceResourceGroupRequest
	GetOwnerAccount() *string
	SetOwnerId(v int64) *ModifyDBInstanceResourceGroupRequest
	GetOwnerId() *int64
	SetResourceGroupId(v string) *ModifyDBInstanceResourceGroupRequest
	GetResourceGroupId() *string
	SetResourceOwnerAccount(v string) *ModifyDBInstanceResourceGroupRequest
	GetResourceOwnerAccount() *string
	SetResourceOwnerId(v int64) *ModifyDBInstanceResourceGroupRequest
	GetResourceOwnerId() *int64
}

type ModifyDBInstanceResourceGroupRequest struct {
	// The ID of the instance.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the instance IDs of all AnalyticDB for PostgreSQL instances in a specific region.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The ID of the resource group to which you want to move the instance. For more information about how to obtain the ID of a resource group, see [View basic information of a resource group](https://help.aliyun.com/document_detail/151181.html).
	//
	// This parameter is required.
	//
	// example:
	//
	// rg-bp67acfmxazb4b****
	NewResourceGroupId *string `json:"NewResourceGroupId,omitempty" xml:"NewResourceGroupId,omitempty"`
	OwnerAccount       *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId            *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The ID of the resource group to which the instance belongs. For more information about how to obtain the ID of a resource group, see [View basic information of a resource group](https://help.aliyun.com/document_detail/151181.html).
	//
	// example:
	//
	// rg-bp67acfmxazb4p****
	ResourceGroupId      *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s ModifyDBInstanceResourceGroupRequest) String() string {
	return dara.Prettify(s)
}

func (s ModifyDBInstanceResourceGroupRequest) GoString() string {
	return s.String()
}

func (s *ModifyDBInstanceResourceGroupRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *ModifyDBInstanceResourceGroupRequest) GetNewResourceGroupId() *string {
	return s.NewResourceGroupId
}

func (s *ModifyDBInstanceResourceGroupRequest) GetOwnerAccount() *string {
	return s.OwnerAccount
}

func (s *ModifyDBInstanceResourceGroupRequest) GetOwnerId() *int64 {
	return s.OwnerId
}

func (s *ModifyDBInstanceResourceGroupRequest) GetResourceGroupId() *string {
	return s.ResourceGroupId
}

func (s *ModifyDBInstanceResourceGroupRequest) GetResourceOwnerAccount() *string {
	return s.ResourceOwnerAccount
}

func (s *ModifyDBInstanceResourceGroupRequest) GetResourceOwnerId() *int64 {
	return s.ResourceOwnerId
}

func (s *ModifyDBInstanceResourceGroupRequest) SetDBInstanceId(v string) *ModifyDBInstanceResourceGroupRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ModifyDBInstanceResourceGroupRequest) SetNewResourceGroupId(v string) *ModifyDBInstanceResourceGroupRequest {
	s.NewResourceGroupId = &v
	return s
}

func (s *ModifyDBInstanceResourceGroupRequest) SetOwnerAccount(v string) *ModifyDBInstanceResourceGroupRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifyDBInstanceResourceGroupRequest) SetOwnerId(v int64) *ModifyDBInstanceResourceGroupRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyDBInstanceResourceGroupRequest) SetResourceGroupId(v string) *ModifyDBInstanceResourceGroupRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *ModifyDBInstanceResourceGroupRequest) SetResourceOwnerAccount(v string) *ModifyDBInstanceResourceGroupRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyDBInstanceResourceGroupRequest) SetResourceOwnerId(v int64) *ModifyDBInstanceResourceGroupRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyDBInstanceResourceGroupRequest) Validate() error {
	return dara.Validate(s)
}

type iModifyDBInstanceResourceGroupResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetRequestId(v string) *ModifyDBInstanceResourceGroupResponseBody
	GetRequestId() *string
}

type ModifyDBInstanceResourceGroupResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// 65BDA532-28AF-4122-AA39-B382721EEE64
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyDBInstanceResourceGroupResponseBody) String() string {
	return dara.Prettify(s)
}

func (s ModifyDBInstanceResourceGroupResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyDBInstanceResourceGroupResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *ModifyDBInstanceResourceGroupResponseBody) SetRequestId(v string) *ModifyDBInstanceResourceGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyDBInstanceResourceGroupResponseBody) Validate() error {
	return dara.Validate(s)
}

type iModifyDBInstanceResourceGroupResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *ModifyDBInstanceResourceGroupResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *ModifyDBInstanceResourceGroupResponse
	GetStatusCode() *int32
	SetBody(v *ModifyDBInstanceResourceGroupResponseBody) *ModifyDBInstanceResourceGroupResponse
	GetBody() *ModifyDBInstanceResourceGroupResponseBody
}

type ModifyDBInstanceResourceGroupResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyDBInstanceResourceGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyDBInstanceResourceGroupResponse) String() string {
	return dara.Prettify(s)
}

func (s ModifyDBInstanceResourceGroupResponse) GoString() string {
	return s.String()
}

func (s *ModifyDBInstanceResourceGroupResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *ModifyDBInstanceResourceGroupResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *ModifyDBInstanceResourceGroupResponse) GetBody() *ModifyDBInstanceResourceGroupResponseBody {
	return s.Body
}

func (s *ModifyDBInstanceResourceGroupResponse) SetHeaders(v map[string]*string) *ModifyDBInstanceResourceGroupResponse {
	s.Headers = v
	return s
}

func (s *ModifyDBInstanceResourceGroupResponse) SetStatusCode(v int32) *ModifyDBInstanceResourceGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyDBInstanceResourceGroupResponse) SetBody(v *ModifyDBInstanceResourceGroupResponseBody) *ModifyDBInstanceResourceGroupResponse {
	s.Body = v
	return s
}

func (s *ModifyDBInstanceResourceGroupResponse) Validate() error {
	return dara.Validate(s)
}

type iModifyDBInstanceSSLRequest interface {
	dara.Model
	String() string
	GoString() string
	SetConnectionString(v string) *ModifyDBInstanceSSLRequest
	GetConnectionString() *string
	SetDBInstanceId(v string) *ModifyDBInstanceSSLRequest
	GetDBInstanceId() *string
	SetSSLEnabled(v int32) *ModifyDBInstanceSSLRequest
	GetSSLEnabled() *int32
}

type ModifyDBInstanceSSLRequest struct {
	// The encrypted endpoint. By default, the wildcards are used for instances that are hosted on ECS instances. This way, the endpoints that can be resolved to the same IP address are encrypted.
	//
	// example:
	//
	// gp-xxxxxxxxxxx-master.gpdbmaster.singapore.rds.aliyuncs.com
	ConnectionString *string `json:"ConnectionString,omitempty" xml:"ConnectionString,omitempty"`
	// The ID of the instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The status of SSL encryption. Valid values:
	//
	// 	- 0: disables SSL encryption.
	//
	// 	- 1: enables SSL encryption.
	//
	// 	- 2: updates SSL encryption.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	SSLEnabled *int32 `json:"SSLEnabled,omitempty" xml:"SSLEnabled,omitempty"`
}

func (s ModifyDBInstanceSSLRequest) String() string {
	return dara.Prettify(s)
}

func (s ModifyDBInstanceSSLRequest) GoString() string {
	return s.String()
}

func (s *ModifyDBInstanceSSLRequest) GetConnectionString() *string {
	return s.ConnectionString
}

func (s *ModifyDBInstanceSSLRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *ModifyDBInstanceSSLRequest) GetSSLEnabled() *int32 {
	return s.SSLEnabled
}

func (s *ModifyDBInstanceSSLRequest) SetConnectionString(v string) *ModifyDBInstanceSSLRequest {
	s.ConnectionString = &v
	return s
}

func (s *ModifyDBInstanceSSLRequest) SetDBInstanceId(v string) *ModifyDBInstanceSSLRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ModifyDBInstanceSSLRequest) SetSSLEnabled(v int32) *ModifyDBInstanceSSLRequest {
	s.SSLEnabled = &v
	return s
}

func (s *ModifyDBInstanceSSLRequest) Validate() error {
	return dara.Validate(s)
}

type iModifyDBInstanceSSLResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetRequestId(v string) *ModifyDBInstanceSSLResponseBody
	GetRequestId() *string
}

type ModifyDBInstanceSSLResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// ADD6EA90-EECB-4C12-9F26-0B6DB58710EF
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyDBInstanceSSLResponseBody) String() string {
	return dara.Prettify(s)
}

func (s ModifyDBInstanceSSLResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyDBInstanceSSLResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *ModifyDBInstanceSSLResponseBody) SetRequestId(v string) *ModifyDBInstanceSSLResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyDBInstanceSSLResponseBody) Validate() error {
	return dara.Validate(s)
}

type iModifyDBInstanceSSLResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *ModifyDBInstanceSSLResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *ModifyDBInstanceSSLResponse
	GetStatusCode() *int32
	SetBody(v *ModifyDBInstanceSSLResponseBody) *ModifyDBInstanceSSLResponse
	GetBody() *ModifyDBInstanceSSLResponseBody
}

type ModifyDBInstanceSSLResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyDBInstanceSSLResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyDBInstanceSSLResponse) String() string {
	return dara.Prettify(s)
}

func (s ModifyDBInstanceSSLResponse) GoString() string {
	return s.String()
}

func (s *ModifyDBInstanceSSLResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *ModifyDBInstanceSSLResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *ModifyDBInstanceSSLResponse) GetBody() *ModifyDBInstanceSSLResponseBody {
	return s.Body
}

func (s *ModifyDBInstanceSSLResponse) SetHeaders(v map[string]*string) *ModifyDBInstanceSSLResponse {
	s.Headers = v
	return s
}

func (s *ModifyDBInstanceSSLResponse) SetStatusCode(v int32) *ModifyDBInstanceSSLResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyDBInstanceSSLResponse) SetBody(v *ModifyDBInstanceSSLResponseBody) *ModifyDBInstanceSSLResponse {
	s.Body = v
	return s
}

func (s *ModifyDBInstanceSSLResponse) Validate() error {
	return dara.Validate(s)
}

type iModifyDBResourceGroupRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *ModifyDBResourceGroupRequest
	GetDBInstanceId() *string
	SetOwnerId(v int64) *ModifyDBResourceGroupRequest
	GetOwnerId() *int64
	SetResourceGroupItems(v []*ModifyDBResourceGroupRequestResourceGroupItems) *ModifyDBResourceGroupRequest
	GetResourceGroupItems() []*ModifyDBResourceGroupRequestResourceGroupItems
}

type ModifyDBResourceGroupRequest struct {
	// The instance ID.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The information about the resource group.
	//
	// This parameter is required.
	ResourceGroupItems []*ModifyDBResourceGroupRequestResourceGroupItems `json:"ResourceGroupItems,omitempty" xml:"ResourceGroupItems,omitempty" type:"Repeated"`
}

func (s ModifyDBResourceGroupRequest) String() string {
	return dara.Prettify(s)
}

func (s ModifyDBResourceGroupRequest) GoString() string {
	return s.String()
}

func (s *ModifyDBResourceGroupRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *ModifyDBResourceGroupRequest) GetOwnerId() *int64 {
	return s.OwnerId
}

func (s *ModifyDBResourceGroupRequest) GetResourceGroupItems() []*ModifyDBResourceGroupRequestResourceGroupItems {
	return s.ResourceGroupItems
}

func (s *ModifyDBResourceGroupRequest) SetDBInstanceId(v string) *ModifyDBResourceGroupRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ModifyDBResourceGroupRequest) SetOwnerId(v int64) *ModifyDBResourceGroupRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyDBResourceGroupRequest) SetResourceGroupItems(v []*ModifyDBResourceGroupRequestResourceGroupItems) *ModifyDBResourceGroupRequest {
	s.ResourceGroupItems = v
	return s
}

func (s *ModifyDBResourceGroupRequest) Validate() error {
	return dara.Validate(s)
}

type ModifyDBResourceGroupRequestResourceGroupItems struct {
	// The configurations of the resource group to which you want to modify.
	//
	// >
	//
	// 	- CpuRateLimit: the percentage of CPU resources that are available for the resource group. Unit: %.
	//
	// 	- MemoryLimit: the percentage of memory resources that are available for the resource group. Unit: %.
	//
	// 	- MemorySharedQuota: the percentage of memory resources shared among transactions that are submitted to the resource group. Unit: %. Default value: 80.
	//
	// 	- MemorySpillRatio: the memory spill ratio for memory-intensive transactions. When the memory that is used by memory-intensive transactions reaches this value, data is spilled to disks. Unit: %. Default value: 0.
	//
	// 	- Concurrency: the maximum number of concurrent transactions or parallel queries that are allowed for a resource group. Default value: 20.
	//
	// This parameter is required.
	//
	// example:
	//
	// {"CpuRateLimit":"10","MemoryLimit":"12","MemorySharedQuota":"20","MemorySpillRatio":"75","Concurrency":"3"}
	ResourceGroupConfig *string `json:"ResourceGroupConfig,omitempty" xml:"ResourceGroupConfig,omitempty"`
	// The name of the resource group.
	//
	// This parameter is required.
	//
	// example:
	//
	// testgroup
	ResourceGroupName *string `json:"ResourceGroupName,omitempty" xml:"ResourceGroupName,omitempty"`
}

func (s ModifyDBResourceGroupRequestResourceGroupItems) String() string {
	return dara.Prettify(s)
}

func (s ModifyDBResourceGroupRequestResourceGroupItems) GoString() string {
	return s.String()
}

func (s *ModifyDBResourceGroupRequestResourceGroupItems) GetResourceGroupConfig() *string {
	return s.ResourceGroupConfig
}

func (s *ModifyDBResourceGroupRequestResourceGroupItems) GetResourceGroupName() *string {
	return s.ResourceGroupName
}

func (s *ModifyDBResourceGroupRequestResourceGroupItems) SetResourceGroupConfig(v string) *ModifyDBResourceGroupRequestResourceGroupItems {
	s.ResourceGroupConfig = &v
	return s
}

func (s *ModifyDBResourceGroupRequestResourceGroupItems) SetResourceGroupName(v string) *ModifyDBResourceGroupRequestResourceGroupItems {
	s.ResourceGroupName = &v
	return s
}

func (s *ModifyDBResourceGroupRequestResourceGroupItems) Validate() error {
	return dara.Validate(s)
}

type iModifyDBResourceGroupShrinkRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *ModifyDBResourceGroupShrinkRequest
	GetDBInstanceId() *string
	SetOwnerId(v int64) *ModifyDBResourceGroupShrinkRequest
	GetOwnerId() *int64
	SetResourceGroupItemsShrink(v string) *ModifyDBResourceGroupShrinkRequest
	GetResourceGroupItemsShrink() *string
}

type ModifyDBResourceGroupShrinkRequest struct {
	// The instance ID.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The information about the resource group.
	//
	// This parameter is required.
	ResourceGroupItemsShrink *string `json:"ResourceGroupItems,omitempty" xml:"ResourceGroupItems,omitempty"`
}

func (s ModifyDBResourceGroupShrinkRequest) String() string {
	return dara.Prettify(s)
}

func (s ModifyDBResourceGroupShrinkRequest) GoString() string {
	return s.String()
}

func (s *ModifyDBResourceGroupShrinkRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *ModifyDBResourceGroupShrinkRequest) GetOwnerId() *int64 {
	return s.OwnerId
}

func (s *ModifyDBResourceGroupShrinkRequest) GetResourceGroupItemsShrink() *string {
	return s.ResourceGroupItemsShrink
}

func (s *ModifyDBResourceGroupShrinkRequest) SetDBInstanceId(v string) *ModifyDBResourceGroupShrinkRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ModifyDBResourceGroupShrinkRequest) SetOwnerId(v int64) *ModifyDBResourceGroupShrinkRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyDBResourceGroupShrinkRequest) SetResourceGroupItemsShrink(v string) *ModifyDBResourceGroupShrinkRequest {
	s.ResourceGroupItemsShrink = &v
	return s
}

func (s *ModifyDBResourceGroupShrinkRequest) Validate() error {
	return dara.Validate(s)
}

type iModifyDBResourceGroupResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetRequestId(v string) *ModifyDBResourceGroupResponseBody
	GetRequestId() *string
}

type ModifyDBResourceGroupResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyDBResourceGroupResponseBody) String() string {
	return dara.Prettify(s)
}

func (s ModifyDBResourceGroupResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyDBResourceGroupResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *ModifyDBResourceGroupResponseBody) SetRequestId(v string) *ModifyDBResourceGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyDBResourceGroupResponseBody) Validate() error {
	return dara.Validate(s)
}

type iModifyDBResourceGroupResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *ModifyDBResourceGroupResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *ModifyDBResourceGroupResponse
	GetStatusCode() *int32
	SetBody(v *ModifyDBResourceGroupResponseBody) *ModifyDBResourceGroupResponse
	GetBody() *ModifyDBResourceGroupResponseBody
}

type ModifyDBResourceGroupResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyDBResourceGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyDBResourceGroupResponse) String() string {
	return dara.Prettify(s)
}

func (s ModifyDBResourceGroupResponse) GoString() string {
	return s.String()
}

func (s *ModifyDBResourceGroupResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *ModifyDBResourceGroupResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *ModifyDBResourceGroupResponse) GetBody() *ModifyDBResourceGroupResponseBody {
	return s.Body
}

func (s *ModifyDBResourceGroupResponse) SetHeaders(v map[string]*string) *ModifyDBResourceGroupResponse {
	s.Headers = v
	return s
}

func (s *ModifyDBResourceGroupResponse) SetStatusCode(v int32) *ModifyDBResourceGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyDBResourceGroupResponse) SetBody(v *ModifyDBResourceGroupResponseBody) *ModifyDBResourceGroupResponse {
	s.Body = v
	return s
}

func (s *ModifyDBResourceGroupResponse) Validate() error {
	return dara.Validate(s)
}

type iModifyExternalDataServiceRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *ModifyExternalDataServiceRequest
	GetDBInstanceId() *string
	SetRegionId(v string) *ModifyExternalDataServiceRequest
	GetRegionId() *string
	SetServiceDescription(v string) *ModifyExternalDataServiceRequest
	GetServiceDescription() *string
	SetServiceId(v string) *ModifyExternalDataServiceRequest
	GetServiceId() *string
	SetServiceSpec(v string) *ModifyExternalDataServiceRequest
	GetServiceSpec() *string
}

type ModifyExternalDataServiceRequest struct {
	// Instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp10g78o9807yv9h3
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// Region ID.
	//
	// > You can call the [DescribeRegions](https://help.aliyun.com/document_detail/86912.html) API to view available region IDs.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// Service description.
	//
	// example:
	//
	// pxf test
	ServiceDescription *string `json:"ServiceDescription,omitempty" xml:"ServiceDescription,omitempty"`
	// Service ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	ServiceId *string `json:"ServiceId,omitempty" xml:"ServiceId,omitempty"`
	// Service specification (in CU), value:
	//
	// - 8
	//
	// This parameter is required.
	//
	// example:
	//
	// 8
	ServiceSpec *string `json:"ServiceSpec,omitempty" xml:"ServiceSpec,omitempty"`
}

func (s ModifyExternalDataServiceRequest) String() string {
	return dara.Prettify(s)
}

func (s ModifyExternalDataServiceRequest) GoString() string {
	return s.String()
}

func (s *ModifyExternalDataServiceRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *ModifyExternalDataServiceRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *ModifyExternalDataServiceRequest) GetServiceDescription() *string {
	return s.ServiceDescription
}

func (s *ModifyExternalDataServiceRequest) GetServiceId() *string {
	return s.ServiceId
}

func (s *ModifyExternalDataServiceRequest) GetServiceSpec() *string {
	return s.ServiceSpec
}

func (s *ModifyExternalDataServiceRequest) SetDBInstanceId(v string) *ModifyExternalDataServiceRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ModifyExternalDataServiceRequest) SetRegionId(v string) *ModifyExternalDataServiceRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyExternalDataServiceRequest) SetServiceDescription(v string) *ModifyExternalDataServiceRequest {
	s.ServiceDescription = &v
	return s
}

func (s *ModifyExternalDataServiceRequest) SetServiceId(v string) *ModifyExternalDataServiceRequest {
	s.ServiceId = &v
	return s
}

func (s *ModifyExternalDataServiceRequest) SetServiceSpec(v string) *ModifyExternalDataServiceRequest {
	s.ServiceSpec = &v
	return s
}

func (s *ModifyExternalDataServiceRequest) Validate() error {
	return dara.Validate(s)
}

type iModifyExternalDataServiceResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetRequestId(v string) *ModifyExternalDataServiceResponseBody
	GetRequestId() *string
}

type ModifyExternalDataServiceResponseBody struct {
	// Request ID.
	//
	// example:
	//
	// B4CAF581-2AC7-41AD-8940-D56DF7AADF5B
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyExternalDataServiceResponseBody) String() string {
	return dara.Prettify(s)
}

func (s ModifyExternalDataServiceResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyExternalDataServiceResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *ModifyExternalDataServiceResponseBody) SetRequestId(v string) *ModifyExternalDataServiceResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyExternalDataServiceResponseBody) Validate() error {
	return dara.Validate(s)
}

type iModifyExternalDataServiceResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *ModifyExternalDataServiceResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *ModifyExternalDataServiceResponse
	GetStatusCode() *int32
	SetBody(v *ModifyExternalDataServiceResponseBody) *ModifyExternalDataServiceResponse
	GetBody() *ModifyExternalDataServiceResponseBody
}

type ModifyExternalDataServiceResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyExternalDataServiceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyExternalDataServiceResponse) String() string {
	return dara.Prettify(s)
}

func (s ModifyExternalDataServiceResponse) GoString() string {
	return s.String()
}

func (s *ModifyExternalDataServiceResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *ModifyExternalDataServiceResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *ModifyExternalDataServiceResponse) GetBody() *ModifyExternalDataServiceResponseBody {
	return s.Body
}

func (s *ModifyExternalDataServiceResponse) SetHeaders(v map[string]*string) *ModifyExternalDataServiceResponse {
	s.Headers = v
	return s
}

func (s *ModifyExternalDataServiceResponse) SetStatusCode(v int32) *ModifyExternalDataServiceResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyExternalDataServiceResponse) SetBody(v *ModifyExternalDataServiceResponseBody) *ModifyExternalDataServiceResponse {
	s.Body = v
	return s
}

func (s *ModifyExternalDataServiceResponse) Validate() error {
	return dara.Validate(s)
}

type iModifyHadoopDataSourceRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *ModifyHadoopDataSourceRequest
	GetDBInstanceId() *string
	SetDataSourceDescription(v string) *ModifyHadoopDataSourceRequest
	GetDataSourceDescription() *string
	SetDataSourceId(v string) *ModifyHadoopDataSourceRequest
	GetDataSourceId() *string
	SetDataSourceType(v string) *ModifyHadoopDataSourceRequest
	GetDataSourceType() *string
	SetEmrInstanceId(v string) *ModifyHadoopDataSourceRequest
	GetEmrInstanceId() *string
	SetHDFSConf(v string) *ModifyHadoopDataSourceRequest
	GetHDFSConf() *string
	SetHadoopCoreConf(v string) *ModifyHadoopDataSourceRequest
	GetHadoopCoreConf() *string
	SetHadoopCreateType(v string) *ModifyHadoopDataSourceRequest
	GetHadoopCreateType() *string
	SetHadoopHostsAddress(v string) *ModifyHadoopDataSourceRequest
	GetHadoopHostsAddress() *string
	SetHiveConf(v string) *ModifyHadoopDataSourceRequest
	GetHiveConf() *string
	SetMapReduceConf(v string) *ModifyHadoopDataSourceRequest
	GetMapReduceConf() *string
	SetRegionId(v string) *ModifyHadoopDataSourceRequest
	GetRegionId() *string
	SetYarnConf(v string) *ModifyHadoopDataSourceRequest
	GetYarnConf() *string
}

type ModifyHadoopDataSourceRequest struct {
	// Instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// Service description, with a maximum length of 256 characters.
	//
	// example:
	//
	// pxf for hdfs data source
	DataSourceDescription *string `json:"DataSourceDescription,omitempty" xml:"DataSourceDescription,omitempty"`
	// The data source ID.
	//
	// example:
	//
	// 123
	DataSourceId *string `json:"DataSourceId,omitempty" xml:"DataSourceId,omitempty"`
	// The type of the data source. Valid values:
	//
	// 	- mysql
	//
	// - postgresql
	//
	// 	- hdfs
	//
	// - hive
	//
	// example:
	//
	// mysql
	DataSourceType *string `json:"DataSourceType,omitempty" xml:"DataSourceType,omitempty"`
	// When HadoopCreateType is Emr, the value of this field is the EMR instance ID.
	//
	// example:
	//
	// c-1234567
	EmrInstanceId *string `json:"EmrInstanceId,omitempty" xml:"EmrInstanceId,omitempty"`
	// The content of the Hadoop hdfs-site.xml file. This parameter must be specified when DataSourceType is set to HDFS.
	//
	// example:
	//
	// xxxxxx
	HDFSConf *string `json:"HDFSConf,omitempty" xml:"HDFSConf,omitempty"`
	// The content of the Hadoop core-site.xml file.
	//
	// example:
	//
	// xxxxxx
	HadoopCoreConf *string `json:"HadoopCoreConf,omitempty" xml:"HadoopCoreConf,omitempty"`
	// The type of the external service. Valid values:
	//
	// 	- emr: E-MapReduce (EMR) Hadoop cluster.
	//
	// 	- selfCreate: self-managed Hadoop cluster.
	//
	// example:
	//
	// emr
	HadoopCreateType *string `json:"HadoopCreateType,omitempty" xml:"HadoopCreateType,omitempty"`
	// The IP address and hostname of the Hadoop cluster (data source) in the /etc/hosts file.
	//
	// example:
	//
	// 127.0.0.1 localhost
	HadoopHostsAddress *string `json:"HadoopHostsAddress,omitempty" xml:"HadoopHostsAddress,omitempty"`
	// The content of the Hadoop hive-site.xml file. This parameter must be specified when DataSourceType is set to Hive.
	//
	// example:
	//
	// xxxxxx
	HiveConf *string `json:"HiveConf,omitempty" xml:"HiveConf,omitempty"`
	// The content of the Hadoop mapred-site.xml file. This parameter must be specified when DataSourceType is set to HDFS.
	//
	// example:
	//
	// <?xml version="1.0" ?>
	//
	// <!-- Created at 2023-08-15 13:53:28.962 -->
	//
	// <configuration>
	//
	//     <property>
	//
	//         <name>mapreduce.map.speculative</name>
	//
	//         <value>true</value>
	//
	//     </property>
	//
	//     <property>
	//
	//         <name>mapreduce.jobhistory.keytab</name>
	//
	//         <value></value>
	//
	//     </property>
	//
	// </configuration>
	MapReduceConf *string `json:"MapReduceConf,omitempty" xml:"MapReduceConf,omitempty"`
	// The region ID.
	//
	// >  You can call the [DescribeRegions](https://help.aliyun.com/document_detail/86912.html) operation to query the most recent region list.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The content of the Hadoop yarn-site.xml file. This parameter must be specified when DataSourceType is set to HDFS.
	//
	// example:
	//
	// xxxxxx
	YarnConf *string `json:"YarnConf,omitempty" xml:"YarnConf,omitempty"`
}

func (s ModifyHadoopDataSourceRequest) String() string {
	return dara.Prettify(s)
}

func (s ModifyHadoopDataSourceRequest) GoString() string {
	return s.String()
}

func (s *ModifyHadoopDataSourceRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *ModifyHadoopDataSourceRequest) GetDataSourceDescription() *string {
	return s.DataSourceDescription
}

func (s *ModifyHadoopDataSourceRequest) GetDataSourceId() *string {
	return s.DataSourceId
}

func (s *ModifyHadoopDataSourceRequest) GetDataSourceType() *string {
	return s.DataSourceType
}

func (s *ModifyHadoopDataSourceRequest) GetEmrInstanceId() *string {
	return s.EmrInstanceId
}

func (s *ModifyHadoopDataSourceRequest) GetHDFSConf() *string {
	return s.HDFSConf
}

func (s *ModifyHadoopDataSourceRequest) GetHadoopCoreConf() *string {
	return s.HadoopCoreConf
}

func (s *ModifyHadoopDataSourceRequest) GetHadoopCreateType() *string {
	return s.HadoopCreateType
}

func (s *ModifyHadoopDataSourceRequest) GetHadoopHostsAddress() *string {
	return s.HadoopHostsAddress
}

func (s *ModifyHadoopDataSourceRequest) GetHiveConf() *string {
	return s.HiveConf
}

func (s *ModifyHadoopDataSourceRequest) GetMapReduceConf() *string {
	return s.MapReduceConf
}

func (s *ModifyHadoopDataSourceRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *ModifyHadoopDataSourceRequest) GetYarnConf() *string {
	return s.YarnConf
}

func (s *ModifyHadoopDataSourceRequest) SetDBInstanceId(v string) *ModifyHadoopDataSourceRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ModifyHadoopDataSourceRequest) SetDataSourceDescription(v string) *ModifyHadoopDataSourceRequest {
	s.DataSourceDescription = &v
	return s
}

func (s *ModifyHadoopDataSourceRequest) SetDataSourceId(v string) *ModifyHadoopDataSourceRequest {
	s.DataSourceId = &v
	return s
}

func (s *ModifyHadoopDataSourceRequest) SetDataSourceType(v string) *ModifyHadoopDataSourceRequest {
	s.DataSourceType = &v
	return s
}

func (s *ModifyHadoopDataSourceRequest) SetEmrInstanceId(v string) *ModifyHadoopDataSourceRequest {
	s.EmrInstanceId = &v
	return s
}

func (s *ModifyHadoopDataSourceRequest) SetHDFSConf(v string) *ModifyHadoopDataSourceRequest {
	s.HDFSConf = &v
	return s
}

func (s *ModifyHadoopDataSourceRequest) SetHadoopCoreConf(v string) *ModifyHadoopDataSourceRequest {
	s.HadoopCoreConf = &v
	return s
}

func (s *ModifyHadoopDataSourceRequest) SetHadoopCreateType(v string) *ModifyHadoopDataSourceRequest {
	s.HadoopCreateType = &v
	return s
}

func (s *ModifyHadoopDataSourceRequest) SetHadoopHostsAddress(v string) *ModifyHadoopDataSourceRequest {
	s.HadoopHostsAddress = &v
	return s
}

func (s *ModifyHadoopDataSourceRequest) SetHiveConf(v string) *ModifyHadoopDataSourceRequest {
	s.HiveConf = &v
	return s
}

func (s *ModifyHadoopDataSourceRequest) SetMapReduceConf(v string) *ModifyHadoopDataSourceRequest {
	s.MapReduceConf = &v
	return s
}

func (s *ModifyHadoopDataSourceRequest) SetRegionId(v string) *ModifyHadoopDataSourceRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyHadoopDataSourceRequest) SetYarnConf(v string) *ModifyHadoopDataSourceRequest {
	s.YarnConf = &v
	return s
}

func (s *ModifyHadoopDataSourceRequest) Validate() error {
	return dara.Validate(s)
}

type iModifyHadoopDataSourceResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetRequestId(v string) *ModifyHadoopDataSourceResponseBody
	GetRequestId() *string
}

type ModifyHadoopDataSourceResponseBody struct {
	// Request ID.
	//
	// example:
	//
	// 2C125605-266F-41CA-8AC5-3A643D4F42C5
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyHadoopDataSourceResponseBody) String() string {
	return dara.Prettify(s)
}

func (s ModifyHadoopDataSourceResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyHadoopDataSourceResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *ModifyHadoopDataSourceResponseBody) SetRequestId(v string) *ModifyHadoopDataSourceResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyHadoopDataSourceResponseBody) Validate() error {
	return dara.Validate(s)
}

type iModifyHadoopDataSourceResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *ModifyHadoopDataSourceResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *ModifyHadoopDataSourceResponse
	GetStatusCode() *int32
	SetBody(v *ModifyHadoopDataSourceResponseBody) *ModifyHadoopDataSourceResponse
	GetBody() *ModifyHadoopDataSourceResponseBody
}

type ModifyHadoopDataSourceResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyHadoopDataSourceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyHadoopDataSourceResponse) String() string {
	return dara.Prettify(s)
}

func (s ModifyHadoopDataSourceResponse) GoString() string {
	return s.String()
}

func (s *ModifyHadoopDataSourceResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *ModifyHadoopDataSourceResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *ModifyHadoopDataSourceResponse) GetBody() *ModifyHadoopDataSourceResponseBody {
	return s.Body
}

func (s *ModifyHadoopDataSourceResponse) SetHeaders(v map[string]*string) *ModifyHadoopDataSourceResponse {
	s.Headers = v
	return s
}

func (s *ModifyHadoopDataSourceResponse) SetStatusCode(v int32) *ModifyHadoopDataSourceResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyHadoopDataSourceResponse) SetBody(v *ModifyHadoopDataSourceResponseBody) *ModifyHadoopDataSourceResponse {
	s.Body = v
	return s
}

func (s *ModifyHadoopDataSourceResponse) Validate() error {
	return dara.Validate(s)
}

type iModifyJDBCDataSourceRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *ModifyJDBCDataSourceRequest
	GetDBInstanceId() *string
	SetDataSourceDescription(v string) *ModifyJDBCDataSourceRequest
	GetDataSourceDescription() *string
	SetDataSourceId(v string) *ModifyJDBCDataSourceRequest
	GetDataSourceId() *string
	SetDataSourceType(v string) *ModifyJDBCDataSourceRequest
	GetDataSourceType() *string
	SetJDBCConnectionString(v string) *ModifyJDBCDataSourceRequest
	GetJDBCConnectionString() *string
	SetJDBCPassword(v string) *ModifyJDBCDataSourceRequest
	GetJDBCPassword() *string
	SetJDBCUserName(v string) *ModifyJDBCDataSourceRequest
	GetJDBCUserName() *string
	SetRegionId(v string) *ModifyJDBCDataSourceRequest
	GetRegionId() *string
}

type ModifyJDBCDataSourceRequest struct {
	// Instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// Data source description.
	//
	// example:
	//
	// test
	DataSourceDescription *string `json:"DataSourceDescription,omitempty" xml:"DataSourceDescription,omitempty"`
	// Data source ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 123
	DataSourceId *string `json:"DataSourceId,omitempty" xml:"DataSourceId,omitempty"`
	// Database type: - mysql - postgresql - sqlserver
	//
	// example:
	//
	// mysql
	DataSourceType *string `json:"DataSourceType,omitempty" xml:"DataSourceType,omitempty"`
	// The JDBC connection string.
	//
	// example:
	//
	// xxxxxx
	JDBCConnectionString *string `json:"JDBCConnectionString,omitempty" xml:"JDBCConnectionString,omitempty"`
	// The password of the database account.
	//
	// example:
	//
	// xxxxxx
	JDBCPassword *string `json:"JDBCPassword,omitempty" xml:"JDBCPassword,omitempty"`
	// The name of the database account.
	//
	// example:
	//
	// xxxxxx
	JDBCUserName *string `json:"JDBCUserName,omitempty" xml:"JDBCUserName,omitempty"`
	// The region ID of the instance.
	//
	// example:
	//
	// cn-shanghai
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ModifyJDBCDataSourceRequest) String() string {
	return dara.Prettify(s)
}

func (s ModifyJDBCDataSourceRequest) GoString() string {
	return s.String()
}

func (s *ModifyJDBCDataSourceRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *ModifyJDBCDataSourceRequest) GetDataSourceDescription() *string {
	return s.DataSourceDescription
}

func (s *ModifyJDBCDataSourceRequest) GetDataSourceId() *string {
	return s.DataSourceId
}

func (s *ModifyJDBCDataSourceRequest) GetDataSourceType() *string {
	return s.DataSourceType
}

func (s *ModifyJDBCDataSourceRequest) GetJDBCConnectionString() *string {
	return s.JDBCConnectionString
}

func (s *ModifyJDBCDataSourceRequest) GetJDBCPassword() *string {
	return s.JDBCPassword
}

func (s *ModifyJDBCDataSourceRequest) GetJDBCUserName() *string {
	return s.JDBCUserName
}

func (s *ModifyJDBCDataSourceRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *ModifyJDBCDataSourceRequest) SetDBInstanceId(v string) *ModifyJDBCDataSourceRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ModifyJDBCDataSourceRequest) SetDataSourceDescription(v string) *ModifyJDBCDataSourceRequest {
	s.DataSourceDescription = &v
	return s
}

func (s *ModifyJDBCDataSourceRequest) SetDataSourceId(v string) *ModifyJDBCDataSourceRequest {
	s.DataSourceId = &v
	return s
}

func (s *ModifyJDBCDataSourceRequest) SetDataSourceType(v string) *ModifyJDBCDataSourceRequest {
	s.DataSourceType = &v
	return s
}

func (s *ModifyJDBCDataSourceRequest) SetJDBCConnectionString(v string) *ModifyJDBCDataSourceRequest {
	s.JDBCConnectionString = &v
	return s
}

func (s *ModifyJDBCDataSourceRequest) SetJDBCPassword(v string) *ModifyJDBCDataSourceRequest {
	s.JDBCPassword = &v
	return s
}

func (s *ModifyJDBCDataSourceRequest) SetJDBCUserName(v string) *ModifyJDBCDataSourceRequest {
	s.JDBCUserName = &v
	return s
}

func (s *ModifyJDBCDataSourceRequest) SetRegionId(v string) *ModifyJDBCDataSourceRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyJDBCDataSourceRequest) Validate() error {
	return dara.Validate(s)
}

type iModifyJDBCDataSourceResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetRequestId(v string) *ModifyJDBCDataSourceResponseBody
	GetRequestId() *string
}

type ModifyJDBCDataSourceResponseBody struct {
	// Request ID.
	//
	// example:
	//
	// 2C125605-266F-41CA-8AC5-3A643D4F42C5
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyJDBCDataSourceResponseBody) String() string {
	return dara.Prettify(s)
}

func (s ModifyJDBCDataSourceResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyJDBCDataSourceResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *ModifyJDBCDataSourceResponseBody) SetRequestId(v string) *ModifyJDBCDataSourceResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyJDBCDataSourceResponseBody) Validate() error {
	return dara.Validate(s)
}

type iModifyJDBCDataSourceResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *ModifyJDBCDataSourceResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *ModifyJDBCDataSourceResponse
	GetStatusCode() *int32
	SetBody(v *ModifyJDBCDataSourceResponseBody) *ModifyJDBCDataSourceResponse
	GetBody() *ModifyJDBCDataSourceResponseBody
}

type ModifyJDBCDataSourceResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyJDBCDataSourceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyJDBCDataSourceResponse) String() string {
	return dara.Prettify(s)
}

func (s ModifyJDBCDataSourceResponse) GoString() string {
	return s.String()
}

func (s *ModifyJDBCDataSourceResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *ModifyJDBCDataSourceResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *ModifyJDBCDataSourceResponse) GetBody() *ModifyJDBCDataSourceResponseBody {
	return s.Body
}

func (s *ModifyJDBCDataSourceResponse) SetHeaders(v map[string]*string) *ModifyJDBCDataSourceResponse {
	s.Headers = v
	return s
}

func (s *ModifyJDBCDataSourceResponse) SetStatusCode(v int32) *ModifyJDBCDataSourceResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyJDBCDataSourceResponse) SetBody(v *ModifyJDBCDataSourceResponseBody) *ModifyJDBCDataSourceResponse {
	s.Body = v
	return s
}

func (s *ModifyJDBCDataSourceResponse) Validate() error {
	return dara.Validate(s)
}

type iModifyMasterSpecRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceDescription(v string) *ModifyMasterSpecRequest
	GetDBInstanceDescription() *string
	SetDBInstanceId(v string) *ModifyMasterSpecRequest
	GetDBInstanceId() *string
	SetMasterAISpec(v string) *ModifyMasterSpecRequest
	GetMasterAISpec() *string
	SetMasterCU(v int32) *ModifyMasterSpecRequest
	GetMasterCU() *int32
	SetResourceGroupId(v string) *ModifyMasterSpecRequest
	GetResourceGroupId() *string
}

type ModifyMasterSpecRequest struct {
	// The description of the instance.
	//
	// example:
	//
	// test
	DBInstanceDescription *string `json:"DBInstanceDescription,omitempty" xml:"DBInstanceDescription,omitempty"`
	// The instance ID.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the IDs of all AnalyticDB for PostgreSQL instances in a region.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// This parameter must be specified if you want to change coordinator nodes to AI coordinator nodes.
	//
	// >-  You cannot specify the MasterAISpec and MasterCU parameters at the same time.
	//
	// >- You can change coordinator nodes to AI coordinator nodes only in specific regions and zones.
	//
	// >- Only AnalyticDB for PostgreSQL V7.0 instances of Basic Edition support AI coordinator nodes.
	//
	// >- You can view the valid values of this parameter on the configuration change page of coordinator nodes.
	//
	// example:
	//
	// ADB.AIMedium.2
	MasterAISpec *string `json:"MasterAISpec,omitempty" xml:"MasterAISpec,omitempty"`
	// The specifications of coordinator node resources. Valid values:
	//
	// 	- 2 CU
	//
	// 	- 4 CU
	//
	// 	- 8 CU
	//
	// 	- 16 CU
	//
	// 	- 32 CU
	//
	// >  You are charged for coordinator node resources of more than 8 compute units (CUs).
	//
	// example:
	//
	// 8 CU
	MasterCU *int32 `json:"MasterCU,omitempty" xml:"MasterCU,omitempty"`
	// The ID of the resource group to which the instance belongs. For information about how to obtain the ID of a resource group, see [View basic information of a resource group](https://help.aliyun.com/document_detail/151181.html).
	//
	// example:
	//
	// rg-bp67acfmxazb4p****
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
}

func (s ModifyMasterSpecRequest) String() string {
	return dara.Prettify(s)
}

func (s ModifyMasterSpecRequest) GoString() string {
	return s.String()
}

func (s *ModifyMasterSpecRequest) GetDBInstanceDescription() *string {
	return s.DBInstanceDescription
}

func (s *ModifyMasterSpecRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *ModifyMasterSpecRequest) GetMasterAISpec() *string {
	return s.MasterAISpec
}

func (s *ModifyMasterSpecRequest) GetMasterCU() *int32 {
	return s.MasterCU
}

func (s *ModifyMasterSpecRequest) GetResourceGroupId() *string {
	return s.ResourceGroupId
}

func (s *ModifyMasterSpecRequest) SetDBInstanceDescription(v string) *ModifyMasterSpecRequest {
	s.DBInstanceDescription = &v
	return s
}

func (s *ModifyMasterSpecRequest) SetDBInstanceId(v string) *ModifyMasterSpecRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ModifyMasterSpecRequest) SetMasterAISpec(v string) *ModifyMasterSpecRequest {
	s.MasterAISpec = &v
	return s
}

func (s *ModifyMasterSpecRequest) SetMasterCU(v int32) *ModifyMasterSpecRequest {
	s.MasterCU = &v
	return s
}

func (s *ModifyMasterSpecRequest) SetResourceGroupId(v string) *ModifyMasterSpecRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *ModifyMasterSpecRequest) Validate() error {
	return dara.Validate(s)
}

type iModifyMasterSpecResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetDbInstanceId(v string) *ModifyMasterSpecResponseBody
	GetDbInstanceId() *string
	SetErrorMessage(v string) *ModifyMasterSpecResponseBody
	GetErrorMessage() *string
	SetRequestId(v string) *ModifyMasterSpecResponseBody
	GetRequestId() *string
	SetStatus(v bool) *ModifyMasterSpecResponseBody
	GetStatus() *bool
}

type ModifyMasterSpecResponseBody struct {
	// The instance ID.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DbInstanceId *string `json:"DbInstanceId,omitempty" xml:"DbInstanceId,omitempty"`
	// The returned message.
	//
	// This parameter is returned only if the request fails.
	//
	// example:
	//
	// ******
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// The request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **false**
	//
	// 	- **true**
	//
	// example:
	//
	// true
	Status *bool `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ModifyMasterSpecResponseBody) String() string {
	return dara.Prettify(s)
}

func (s ModifyMasterSpecResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyMasterSpecResponseBody) GetDbInstanceId() *string {
	return s.DbInstanceId
}

func (s *ModifyMasterSpecResponseBody) GetErrorMessage() *string {
	return s.ErrorMessage
}

func (s *ModifyMasterSpecResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *ModifyMasterSpecResponseBody) GetStatus() *bool {
	return s.Status
}

func (s *ModifyMasterSpecResponseBody) SetDbInstanceId(v string) *ModifyMasterSpecResponseBody {
	s.DbInstanceId = &v
	return s
}

func (s *ModifyMasterSpecResponseBody) SetErrorMessage(v string) *ModifyMasterSpecResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *ModifyMasterSpecResponseBody) SetRequestId(v string) *ModifyMasterSpecResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyMasterSpecResponseBody) SetStatus(v bool) *ModifyMasterSpecResponseBody {
	s.Status = &v
	return s
}

func (s *ModifyMasterSpecResponseBody) Validate() error {
	return dara.Validate(s)
}

type iModifyMasterSpecResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *ModifyMasterSpecResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *ModifyMasterSpecResponse
	GetStatusCode() *int32
	SetBody(v *ModifyMasterSpecResponseBody) *ModifyMasterSpecResponse
	GetBody() *ModifyMasterSpecResponseBody
}

type ModifyMasterSpecResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyMasterSpecResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyMasterSpecResponse) String() string {
	return dara.Prettify(s)
}

func (s ModifyMasterSpecResponse) GoString() string {
	return s.String()
}

func (s *ModifyMasterSpecResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *ModifyMasterSpecResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *ModifyMasterSpecResponse) GetBody() *ModifyMasterSpecResponseBody {
	return s.Body
}

func (s *ModifyMasterSpecResponse) SetHeaders(v map[string]*string) *ModifyMasterSpecResponse {
	s.Headers = v
	return s
}

func (s *ModifyMasterSpecResponse) SetStatusCode(v int32) *ModifyMasterSpecResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyMasterSpecResponse) SetBody(v *ModifyMasterSpecResponseBody) *ModifyMasterSpecResponse {
	s.Body = v
	return s
}

func (s *ModifyMasterSpecResponse) Validate() error {
	return dara.Validate(s)
}

type iModifyParametersRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *ModifyParametersRequest
	GetDBInstanceId() *string
	SetForceRestartInstance(v bool) *ModifyParametersRequest
	GetForceRestartInstance() *bool
	SetParameters(v string) *ModifyParametersRequest
	GetParameters() *string
}

type ModifyParametersRequest struct {
	// The ID of the instance.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the details of all AnalyticDB for PostgreSQL instances in a specific region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp***************
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// Specifies whether to forcibly restart the instance. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// false
	ForceRestartInstance *bool `json:"ForceRestartInstance,omitempty" xml:"ForceRestartInstance,omitempty"`
	// The name and value of the parameter to be modified. Specify the parameter in the `<Parameter name>:<Parameter value>` format.
	//
	// You can call the [DescribeParameters](https://help.aliyun.com/document_detail/208310.html) operation to query the parameters that can be modified.
	//
	// This parameter is required.
	//
	// example:
	//
	// {"statement_timeout":"11800010"}
	Parameters *string `json:"Parameters,omitempty" xml:"Parameters,omitempty"`
}

func (s ModifyParametersRequest) String() string {
	return dara.Prettify(s)
}

func (s ModifyParametersRequest) GoString() string {
	return s.String()
}

func (s *ModifyParametersRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *ModifyParametersRequest) GetForceRestartInstance() *bool {
	return s.ForceRestartInstance
}

func (s *ModifyParametersRequest) GetParameters() *string {
	return s.Parameters
}

func (s *ModifyParametersRequest) SetDBInstanceId(v string) *ModifyParametersRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ModifyParametersRequest) SetForceRestartInstance(v bool) *ModifyParametersRequest {
	s.ForceRestartInstance = &v
	return s
}

func (s *ModifyParametersRequest) SetParameters(v string) *ModifyParametersRequest {
	s.Parameters = &v
	return s
}

func (s *ModifyParametersRequest) Validate() error {
	return dara.Validate(s)
}

type iModifyParametersResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetRequestId(v string) *ModifyParametersResponseBody
	GetRequestId() *string
}

type ModifyParametersResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// 3FE698B6-6579-547C-A403-07**********
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyParametersResponseBody) String() string {
	return dara.Prettify(s)
}

func (s ModifyParametersResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyParametersResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *ModifyParametersResponseBody) SetRequestId(v string) *ModifyParametersResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyParametersResponseBody) Validate() error {
	return dara.Validate(s)
}

type iModifyParametersResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *ModifyParametersResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *ModifyParametersResponse
	GetStatusCode() *int32
	SetBody(v *ModifyParametersResponseBody) *ModifyParametersResponse
	GetBody() *ModifyParametersResponseBody
}

type ModifyParametersResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyParametersResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyParametersResponse) String() string {
	return dara.Prettify(s)
}

func (s ModifyParametersResponse) GoString() string {
	return s.String()
}

func (s *ModifyParametersResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *ModifyParametersResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *ModifyParametersResponse) GetBody() *ModifyParametersResponseBody {
	return s.Body
}

func (s *ModifyParametersResponse) SetHeaders(v map[string]*string) *ModifyParametersResponse {
	s.Headers = v
	return s
}

func (s *ModifyParametersResponse) SetStatusCode(v int32) *ModifyParametersResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyParametersResponse) SetBody(v *ModifyParametersResponseBody) *ModifyParametersResponse {
	s.Body = v
	return s
}

func (s *ModifyParametersResponse) Validate() error {
	return dara.Validate(s)
}

type iModifyRemoteADBDataSourceRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDataSourceId(v string) *ModifyRemoteADBDataSourceRequest
	GetDataSourceId() *string
	SetDataSourceName(v string) *ModifyRemoteADBDataSourceRequest
	GetDataSourceName() *string
	SetLocalDBInstanceId(v string) *ModifyRemoteADBDataSourceRequest
	GetLocalDBInstanceId() *string
	SetOwnerId(v int64) *ModifyRemoteADBDataSourceRequest
	GetOwnerId() *int64
	SetUserName(v string) *ModifyRemoteADBDataSourceRequest
	GetUserName() *string
	SetUserPassword(v string) *ModifyRemoteADBDataSourceRequest
	GetUserPassword() *string
}

type ModifyRemoteADBDataSourceRequest struct {
	// Service ID
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	DataSourceId *string `json:"DataSourceId,omitempty" xml:"DataSourceId,omitempty"`
	// Specified dataSourceName.
	//
	// example:
	//
	// test
	DataSourceName *string `json:"DataSourceName,omitempty" xml:"DataSourceName,omitempty"`
	// The ID of the local data instance being used.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-test
	LocalDBInstanceId *string `json:"LocalDBInstanceId,omitempty" xml:"LocalDBInstanceId,omitempty"`
	OwnerId           *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// New user name.
	//
	// This parameter is required.
	//
	// example:
	//
	// newUserName
	UserName *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
	// New user password, which must be transmitted in encrypted form.
	//
	// This parameter is required.
	//
	// example:
	//
	// newUserPassword
	UserPassword *string `json:"UserPassword,omitempty" xml:"UserPassword,omitempty"`
}

func (s ModifyRemoteADBDataSourceRequest) String() string {
	return dara.Prettify(s)
}

func (s ModifyRemoteADBDataSourceRequest) GoString() string {
	return s.String()
}

func (s *ModifyRemoteADBDataSourceRequest) GetDataSourceId() *string {
	return s.DataSourceId
}

func (s *ModifyRemoteADBDataSourceRequest) GetDataSourceName() *string {
	return s.DataSourceName
}

func (s *ModifyRemoteADBDataSourceRequest) GetLocalDBInstanceId() *string {
	return s.LocalDBInstanceId
}

func (s *ModifyRemoteADBDataSourceRequest) GetOwnerId() *int64 {
	return s.OwnerId
}

func (s *ModifyRemoteADBDataSourceRequest) GetUserName() *string {
	return s.UserName
}

func (s *ModifyRemoteADBDataSourceRequest) GetUserPassword() *string {
	return s.UserPassword
}

func (s *ModifyRemoteADBDataSourceRequest) SetDataSourceId(v string) *ModifyRemoteADBDataSourceRequest {
	s.DataSourceId = &v
	return s
}

func (s *ModifyRemoteADBDataSourceRequest) SetDataSourceName(v string) *ModifyRemoteADBDataSourceRequest {
	s.DataSourceName = &v
	return s
}

func (s *ModifyRemoteADBDataSourceRequest) SetLocalDBInstanceId(v string) *ModifyRemoteADBDataSourceRequest {
	s.LocalDBInstanceId = &v
	return s
}

func (s *ModifyRemoteADBDataSourceRequest) SetOwnerId(v int64) *ModifyRemoteADBDataSourceRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyRemoteADBDataSourceRequest) SetUserName(v string) *ModifyRemoteADBDataSourceRequest {
	s.UserName = &v
	return s
}

func (s *ModifyRemoteADBDataSourceRequest) SetUserPassword(v string) *ModifyRemoteADBDataSourceRequest {
	s.UserPassword = &v
	return s
}

func (s *ModifyRemoteADBDataSourceRequest) Validate() error {
	return dara.Validate(s)
}

type iModifyRemoteADBDataSourceResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetDataSourceItem(v *ModifyRemoteADBDataSourceResponseBodyDataSourceItem) *ModifyRemoteADBDataSourceResponseBody
	GetDataSourceItem() *ModifyRemoteADBDataSourceResponseBodyDataSourceItem
	SetRequestId(v string) *ModifyRemoteADBDataSourceResponseBody
	GetRequestId() *string
	SetTaskId(v int32) *ModifyRemoteADBDataSourceResponseBody
	GetTaskId() *int32
}

type ModifyRemoteADBDataSourceResponseBody struct {
	// Returns the successfully modified data sharing service data.
	DataSourceItem *ModifyRemoteADBDataSourceResponseBodyDataSourceItem `json:"DataSourceItem,omitempty" xml:"DataSourceItem,omitempty" type:"Struct"`
	// Request ID.
	//
	// example:
	//
	// e9d60eb1-e90d-4bc6-a470-c8b767460858
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Task ID.
	//
	// example:
	//
	// 90000
	TaskId *int32 `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s ModifyRemoteADBDataSourceResponseBody) String() string {
	return dara.Prettify(s)
}

func (s ModifyRemoteADBDataSourceResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyRemoteADBDataSourceResponseBody) GetDataSourceItem() *ModifyRemoteADBDataSourceResponseBodyDataSourceItem {
	return s.DataSourceItem
}

func (s *ModifyRemoteADBDataSourceResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *ModifyRemoteADBDataSourceResponseBody) GetTaskId() *int32 {
	return s.TaskId
}

func (s *ModifyRemoteADBDataSourceResponseBody) SetDataSourceItem(v *ModifyRemoteADBDataSourceResponseBodyDataSourceItem) *ModifyRemoteADBDataSourceResponseBody {
	s.DataSourceItem = v
	return s
}

func (s *ModifyRemoteADBDataSourceResponseBody) SetRequestId(v string) *ModifyRemoteADBDataSourceResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyRemoteADBDataSourceResponseBody) SetTaskId(v int32) *ModifyRemoteADBDataSourceResponseBody {
	s.TaskId = &v
	return s
}

func (s *ModifyRemoteADBDataSourceResponseBody) Validate() error {
	return dara.Validate(s)
}

type ModifyRemoteADBDataSourceResponseBodyDataSourceItem struct {
	// Data source name.
	//
	// example:
	//
	// db1_gptest1_to_db2_gp-test2
	DataSourceName *string `json:"DataSourceName,omitempty" xml:"DataSourceName,omitempty"`
	// Description information.
	//
	// example:
	//
	// test
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// ID
	//
	// example:
	//
	// 1
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// Local database name
	//
	// example:
	//
	// db1
	LocalDatabase *string `json:"LocalDatabase,omitempty" xml:"LocalDatabase,omitempty"`
	// Local instance name
	//
	// example:
	//
	// gp-test1
	LocalInstanceName *string `json:"LocalInstanceName,omitempty" xml:"LocalInstanceName,omitempty"`
	// Manager user name
	//
	// example:
	//
	// test
	ManagerUserName *string `json:"ManagerUserName,omitempty" xml:"ManagerUserName,omitempty"`
	// Region ID where the instance is located.
	//
	// example:
	//
	// cn-beijing
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// Remote database name
	//
	// example:
	//
	// db2
	RemoteDatabase *string `json:"RemoteDatabase,omitempty" xml:"RemoteDatabase,omitempty"`
	// Remote instance name
	//
	// example:
	//
	// gp-test2
	RemoteInstanceName *string `json:"RemoteInstanceName,omitempty" xml:"RemoteInstanceName,omitempty"`
	// Data source status
	//
	// example:
	//
	// creating
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// User name
	//
	// example:
	//
	// user1
	UserName *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
}

func (s ModifyRemoteADBDataSourceResponseBodyDataSourceItem) String() string {
	return dara.Prettify(s)
}

func (s ModifyRemoteADBDataSourceResponseBodyDataSourceItem) GoString() string {
	return s.String()
}

func (s *ModifyRemoteADBDataSourceResponseBodyDataSourceItem) GetDataSourceName() *string {
	return s.DataSourceName
}

func (s *ModifyRemoteADBDataSourceResponseBodyDataSourceItem) GetDescription() *string {
	return s.Description
}

func (s *ModifyRemoteADBDataSourceResponseBodyDataSourceItem) GetId() *int64 {
	return s.Id
}

func (s *ModifyRemoteADBDataSourceResponseBodyDataSourceItem) GetLocalDatabase() *string {
	return s.LocalDatabase
}

func (s *ModifyRemoteADBDataSourceResponseBodyDataSourceItem) GetLocalInstanceName() *string {
	return s.LocalInstanceName
}

func (s *ModifyRemoteADBDataSourceResponseBodyDataSourceItem) GetManagerUserName() *string {
	return s.ManagerUserName
}

func (s *ModifyRemoteADBDataSourceResponseBodyDataSourceItem) GetRegionId() *string {
	return s.RegionId
}

func (s *ModifyRemoteADBDataSourceResponseBodyDataSourceItem) GetRemoteDatabase() *string {
	return s.RemoteDatabase
}

func (s *ModifyRemoteADBDataSourceResponseBodyDataSourceItem) GetRemoteInstanceName() *string {
	return s.RemoteInstanceName
}

func (s *ModifyRemoteADBDataSourceResponseBodyDataSourceItem) GetStatus() *string {
	return s.Status
}

func (s *ModifyRemoteADBDataSourceResponseBodyDataSourceItem) GetUserName() *string {
	return s.UserName
}

func (s *ModifyRemoteADBDataSourceResponseBodyDataSourceItem) SetDataSourceName(v string) *ModifyRemoteADBDataSourceResponseBodyDataSourceItem {
	s.DataSourceName = &v
	return s
}

func (s *ModifyRemoteADBDataSourceResponseBodyDataSourceItem) SetDescription(v string) *ModifyRemoteADBDataSourceResponseBodyDataSourceItem {
	s.Description = &v
	return s
}

func (s *ModifyRemoteADBDataSourceResponseBodyDataSourceItem) SetId(v int64) *ModifyRemoteADBDataSourceResponseBodyDataSourceItem {
	s.Id = &v
	return s
}

func (s *ModifyRemoteADBDataSourceResponseBodyDataSourceItem) SetLocalDatabase(v string) *ModifyRemoteADBDataSourceResponseBodyDataSourceItem {
	s.LocalDatabase = &v
	return s
}

func (s *ModifyRemoteADBDataSourceResponseBodyDataSourceItem) SetLocalInstanceName(v string) *ModifyRemoteADBDataSourceResponseBodyDataSourceItem {
	s.LocalInstanceName = &v
	return s
}

func (s *ModifyRemoteADBDataSourceResponseBodyDataSourceItem) SetManagerUserName(v string) *ModifyRemoteADBDataSourceResponseBodyDataSourceItem {
	s.ManagerUserName = &v
	return s
}

func (s *ModifyRemoteADBDataSourceResponseBodyDataSourceItem) SetRegionId(v string) *ModifyRemoteADBDataSourceResponseBodyDataSourceItem {
	s.RegionId = &v
	return s
}

func (s *ModifyRemoteADBDataSourceResponseBodyDataSourceItem) SetRemoteDatabase(v string) *ModifyRemoteADBDataSourceResponseBodyDataSourceItem {
	s.RemoteDatabase = &v
	return s
}

func (s *ModifyRemoteADBDataSourceResponseBodyDataSourceItem) SetRemoteInstanceName(v string) *ModifyRemoteADBDataSourceResponseBodyDataSourceItem {
	s.RemoteInstanceName = &v
	return s
}

func (s *ModifyRemoteADBDataSourceResponseBodyDataSourceItem) SetStatus(v string) *ModifyRemoteADBDataSourceResponseBodyDataSourceItem {
	s.Status = &v
	return s
}

func (s *ModifyRemoteADBDataSourceResponseBodyDataSourceItem) SetUserName(v string) *ModifyRemoteADBDataSourceResponseBodyDataSourceItem {
	s.UserName = &v
	return s
}

func (s *ModifyRemoteADBDataSourceResponseBodyDataSourceItem) Validate() error {
	return dara.Validate(s)
}

type iModifyRemoteADBDataSourceResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *ModifyRemoteADBDataSourceResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *ModifyRemoteADBDataSourceResponse
	GetStatusCode() *int32
	SetBody(v *ModifyRemoteADBDataSourceResponseBody) *ModifyRemoteADBDataSourceResponse
	GetBody() *ModifyRemoteADBDataSourceResponseBody
}

type ModifyRemoteADBDataSourceResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyRemoteADBDataSourceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyRemoteADBDataSourceResponse) String() string {
	return dara.Prettify(s)
}

func (s ModifyRemoteADBDataSourceResponse) GoString() string {
	return s.String()
}

func (s *ModifyRemoteADBDataSourceResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *ModifyRemoteADBDataSourceResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *ModifyRemoteADBDataSourceResponse) GetBody() *ModifyRemoteADBDataSourceResponseBody {
	return s.Body
}

func (s *ModifyRemoteADBDataSourceResponse) SetHeaders(v map[string]*string) *ModifyRemoteADBDataSourceResponse {
	s.Headers = v
	return s
}

func (s *ModifyRemoteADBDataSourceResponse) SetStatusCode(v int32) *ModifyRemoteADBDataSourceResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyRemoteADBDataSourceResponse) SetBody(v *ModifyRemoteADBDataSourceResponseBody) *ModifyRemoteADBDataSourceResponse {
	s.Body = v
	return s
}

func (s *ModifyRemoteADBDataSourceResponse) Validate() error {
	return dara.Validate(s)
}

type iModifySQLCollectorPolicyRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *ModifySQLCollectorPolicyRequest
	GetDBInstanceId() *string
	SetSQLCollectorStatus(v string) *ModifySQLCollectorPolicyRequest
	GetSQLCollectorStatus() *string
}

type ModifySQLCollectorPolicyRequest struct {
	// The ID of the instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// Specifies whether to enable or disable SQL collection.
	//
	// 	- Enable: enables SQL collection.
	//
	// 	- Disabled: disables SQL collection.
	//
	// This parameter is required.
	//
	// example:
	//
	// Enable
	SQLCollectorStatus *string `json:"SQLCollectorStatus,omitempty" xml:"SQLCollectorStatus,omitempty"`
}

func (s ModifySQLCollectorPolicyRequest) String() string {
	return dara.Prettify(s)
}

func (s ModifySQLCollectorPolicyRequest) GoString() string {
	return s.String()
}

func (s *ModifySQLCollectorPolicyRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *ModifySQLCollectorPolicyRequest) GetSQLCollectorStatus() *string {
	return s.SQLCollectorStatus
}

func (s *ModifySQLCollectorPolicyRequest) SetDBInstanceId(v string) *ModifySQLCollectorPolicyRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ModifySQLCollectorPolicyRequest) SetSQLCollectorStatus(v string) *ModifySQLCollectorPolicyRequest {
	s.SQLCollectorStatus = &v
	return s
}

func (s *ModifySQLCollectorPolicyRequest) Validate() error {
	return dara.Validate(s)
}

type iModifySQLCollectorPolicyResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetRequestId(v string) *ModifySQLCollectorPolicyResponseBody
	GetRequestId() *string
}

type ModifySQLCollectorPolicyResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// 4FA1F1D1-50A6-4F60-9A78-5752F2076A53
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifySQLCollectorPolicyResponseBody) String() string {
	return dara.Prettify(s)
}

func (s ModifySQLCollectorPolicyResponseBody) GoString() string {
	return s.String()
}

func (s *ModifySQLCollectorPolicyResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *ModifySQLCollectorPolicyResponseBody) SetRequestId(v string) *ModifySQLCollectorPolicyResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifySQLCollectorPolicyResponseBody) Validate() error {
	return dara.Validate(s)
}

type iModifySQLCollectorPolicyResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *ModifySQLCollectorPolicyResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *ModifySQLCollectorPolicyResponse
	GetStatusCode() *int32
	SetBody(v *ModifySQLCollectorPolicyResponseBody) *ModifySQLCollectorPolicyResponse
	GetBody() *ModifySQLCollectorPolicyResponseBody
}

type ModifySQLCollectorPolicyResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifySQLCollectorPolicyResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifySQLCollectorPolicyResponse) String() string {
	return dara.Prettify(s)
}

func (s ModifySQLCollectorPolicyResponse) GoString() string {
	return s.String()
}

func (s *ModifySQLCollectorPolicyResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *ModifySQLCollectorPolicyResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *ModifySQLCollectorPolicyResponse) GetBody() *ModifySQLCollectorPolicyResponseBody {
	return s.Body
}

func (s *ModifySQLCollectorPolicyResponse) SetHeaders(v map[string]*string) *ModifySQLCollectorPolicyResponse {
	s.Headers = v
	return s
}

func (s *ModifySQLCollectorPolicyResponse) SetStatusCode(v int32) *ModifySQLCollectorPolicyResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifySQLCollectorPolicyResponse) SetBody(v *ModifySQLCollectorPolicyResponseBody) *ModifySQLCollectorPolicyResponse {
	s.Body = v
	return s
}

func (s *ModifySQLCollectorPolicyResponse) Validate() error {
	return dara.Validate(s)
}

type iModifySecurityIpsRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceIPArrayAttribute(v string) *ModifySecurityIpsRequest
	GetDBInstanceIPArrayAttribute() *string
	SetDBInstanceIPArrayName(v string) *ModifySecurityIpsRequest
	GetDBInstanceIPArrayName() *string
	SetDBInstanceId(v string) *ModifySecurityIpsRequest
	GetDBInstanceId() *string
	SetModifyMode(v string) *ModifySecurityIpsRequest
	GetModifyMode() *string
	SetResourceGroupId(v string) *ModifySecurityIpsRequest
	GetResourceGroupId() *string
	SetSecurityIPList(v string) *ModifySecurityIpsRequest
	GetSecurityIPList() *string
}

type ModifySecurityIpsRequest struct {
	// The attribute of the IP address whitelist. By default, this parameter is empty. A whitelist with the `hidden` attribute does not appear in the console.
	//
	// example:
	//
	// hidden
	DBInstanceIPArrayAttribute *string `json:"DBInstanceIPArrayAttribute,omitempty" xml:"DBInstanceIPArrayAttribute,omitempty"`
	// The name of the whitelist. If you do not enter a name, IP addresses are added to the default whitelist.
	//
	// >  You can create up to 50 whitelists for an instance.
	//
	// example:
	//
	// default
	DBInstanceIPArrayName *string `json:"DBInstanceIPArrayName,omitempty" xml:"DBInstanceIPArrayName,omitempty"`
	// The ID of the instance.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the instance IDs of all AnalyticDB for PostgreSQL instances in a specific region.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The method of modification. Valid values:
	//
	// 	- **Cover**: overwrites the whitelist.
	//
	// 	- **Append**: appends data to the whitelist.
	//
	// 	- **Delete**: deletes the whitelist.
	//
	// example:
	//
	// 0
	ModifyMode *string `json:"ModifyMode,omitempty" xml:"ModifyMode,omitempty"`
	// The ID of the resource group to which the instance belongs. For more information about how to obtain the ID of a resource group, see [View basic information of a resource group](https://help.aliyun.com/document_detail/151181.html).
	//
	// example:
	//
	// rg-bp67acfmxazb4p****
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	// The IP addresses listed in the whitelist. You can add up to 1,000 IP addresses to the whitelist. Separate multiple IP addresses with commas (,). The IP addresses must use one of the following formats:
	//
	// 	- 0.0.0.0/0
	//
	// 	- 10.23.12.24. This is a standard IP address.
	//
	// 	- 10.23.12.24/24. This is a CIDR block. The value `/24` indicates that the prefix of the CIDR block is 24-bit long. You can replace 24 with a value in the range of `1 to 32`.
	//
	// This parameter is required.
	//
	// example:
	//
	// ``10.10.**.**``
	SecurityIPList *string `json:"SecurityIPList,omitempty" xml:"SecurityIPList,omitempty"`
}

func (s ModifySecurityIpsRequest) String() string {
	return dara.Prettify(s)
}

func (s ModifySecurityIpsRequest) GoString() string {
	return s.String()
}

func (s *ModifySecurityIpsRequest) GetDBInstanceIPArrayAttribute() *string {
	return s.DBInstanceIPArrayAttribute
}

func (s *ModifySecurityIpsRequest) GetDBInstanceIPArrayName() *string {
	return s.DBInstanceIPArrayName
}

func (s *ModifySecurityIpsRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *ModifySecurityIpsRequest) GetModifyMode() *string {
	return s.ModifyMode
}

func (s *ModifySecurityIpsRequest) GetResourceGroupId() *string {
	return s.ResourceGroupId
}

func (s *ModifySecurityIpsRequest) GetSecurityIPList() *string {
	return s.SecurityIPList
}

func (s *ModifySecurityIpsRequest) SetDBInstanceIPArrayAttribute(v string) *ModifySecurityIpsRequest {
	s.DBInstanceIPArrayAttribute = &v
	return s
}

func (s *ModifySecurityIpsRequest) SetDBInstanceIPArrayName(v string) *ModifySecurityIpsRequest {
	s.DBInstanceIPArrayName = &v
	return s
}

func (s *ModifySecurityIpsRequest) SetDBInstanceId(v string) *ModifySecurityIpsRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ModifySecurityIpsRequest) SetModifyMode(v string) *ModifySecurityIpsRequest {
	s.ModifyMode = &v
	return s
}

func (s *ModifySecurityIpsRequest) SetResourceGroupId(v string) *ModifySecurityIpsRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *ModifySecurityIpsRequest) SetSecurityIPList(v string) *ModifySecurityIpsRequest {
	s.SecurityIPList = &v
	return s
}

func (s *ModifySecurityIpsRequest) Validate() error {
	return dara.Validate(s)
}

type iModifySecurityIpsResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetRequestId(v string) *ModifySecurityIpsResponseBody
	GetRequestId() *string
}

type ModifySecurityIpsResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// 871C698F-B43D-4D1D-ACD6-DF56B0F89978
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifySecurityIpsResponseBody) String() string {
	return dara.Prettify(s)
}

func (s ModifySecurityIpsResponseBody) GoString() string {
	return s.String()
}

func (s *ModifySecurityIpsResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *ModifySecurityIpsResponseBody) SetRequestId(v string) *ModifySecurityIpsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifySecurityIpsResponseBody) Validate() error {
	return dara.Validate(s)
}

type iModifySecurityIpsResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *ModifySecurityIpsResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *ModifySecurityIpsResponse
	GetStatusCode() *int32
	SetBody(v *ModifySecurityIpsResponseBody) *ModifySecurityIpsResponse
	GetBody() *ModifySecurityIpsResponseBody
}

type ModifySecurityIpsResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifySecurityIpsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifySecurityIpsResponse) String() string {
	return dara.Prettify(s)
}

func (s ModifySecurityIpsResponse) GoString() string {
	return s.String()
}

func (s *ModifySecurityIpsResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *ModifySecurityIpsResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *ModifySecurityIpsResponse) GetBody() *ModifySecurityIpsResponseBody {
	return s.Body
}

func (s *ModifySecurityIpsResponse) SetHeaders(v map[string]*string) *ModifySecurityIpsResponse {
	s.Headers = v
	return s
}

func (s *ModifySecurityIpsResponse) SetStatusCode(v int32) *ModifySecurityIpsResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifySecurityIpsResponse) SetBody(v *ModifySecurityIpsResponseBody) *ModifySecurityIpsResponse {
	s.Body = v
	return s
}

func (s *ModifySecurityIpsResponse) Validate() error {
	return dara.Validate(s)
}

type iModifyStreamingDataServiceRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *ModifyStreamingDataServiceRequest
	GetDBInstanceId() *string
	SetRegionId(v string) *ModifyStreamingDataServiceRequest
	GetRegionId() *string
	SetServiceDescription(v string) *ModifyStreamingDataServiceRequest
	GetServiceDescription() *string
	SetServiceId(v string) *ModifyStreamingDataServiceRequest
	GetServiceId() *string
	SetServiceSpec(v string) *ModifyStreamingDataServiceRequest
	GetServiceSpec() *string
}

type ModifyStreamingDataServiceRequest struct {
	// The instance ID.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/196830.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp10g78o9807yv9h3
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// example:
	//
	// cn-beijing
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The description of the service.
	//
	// example:
	//
	// test-adbpgss
	ServiceDescription *string `json:"ServiceDescription,omitempty" xml:"ServiceDescription,omitempty"`
	// The service ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	ServiceId *string `json:"ServiceId,omitempty" xml:"ServiceId,omitempty"`
	// The specifications of the service. Unit: capacity units (CUs). Valid values:
	//
	// 	- 2
	//
	// 	- 4
	//
	// 	- 8
	//
	// 	- 16
	//
	// This parameter is required.
	//
	// example:
	//
	// 2
	ServiceSpec *string `json:"ServiceSpec,omitempty" xml:"ServiceSpec,omitempty"`
}

func (s ModifyStreamingDataServiceRequest) String() string {
	return dara.Prettify(s)
}

func (s ModifyStreamingDataServiceRequest) GoString() string {
	return s.String()
}

func (s *ModifyStreamingDataServiceRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *ModifyStreamingDataServiceRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *ModifyStreamingDataServiceRequest) GetServiceDescription() *string {
	return s.ServiceDescription
}

func (s *ModifyStreamingDataServiceRequest) GetServiceId() *string {
	return s.ServiceId
}

func (s *ModifyStreamingDataServiceRequest) GetServiceSpec() *string {
	return s.ServiceSpec
}

func (s *ModifyStreamingDataServiceRequest) SetDBInstanceId(v string) *ModifyStreamingDataServiceRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ModifyStreamingDataServiceRequest) SetRegionId(v string) *ModifyStreamingDataServiceRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyStreamingDataServiceRequest) SetServiceDescription(v string) *ModifyStreamingDataServiceRequest {
	s.ServiceDescription = &v
	return s
}

func (s *ModifyStreamingDataServiceRequest) SetServiceId(v string) *ModifyStreamingDataServiceRequest {
	s.ServiceId = &v
	return s
}

func (s *ModifyStreamingDataServiceRequest) SetServiceSpec(v string) *ModifyStreamingDataServiceRequest {
	s.ServiceSpec = &v
	return s
}

func (s *ModifyStreamingDataServiceRequest) Validate() error {
	return dara.Validate(s)
}

type iModifyStreamingDataServiceResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetRequestId(v string) *ModifyStreamingDataServiceResponseBody
	GetRequestId() *string
}

type ModifyStreamingDataServiceResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// B4CAF581-2AC7-41AD-8940-D56DF7AADF5B
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyStreamingDataServiceResponseBody) String() string {
	return dara.Prettify(s)
}

func (s ModifyStreamingDataServiceResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyStreamingDataServiceResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *ModifyStreamingDataServiceResponseBody) SetRequestId(v string) *ModifyStreamingDataServiceResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyStreamingDataServiceResponseBody) Validate() error {
	return dara.Validate(s)
}

type iModifyStreamingDataServiceResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *ModifyStreamingDataServiceResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *ModifyStreamingDataServiceResponse
	GetStatusCode() *int32
	SetBody(v *ModifyStreamingDataServiceResponseBody) *ModifyStreamingDataServiceResponse
	GetBody() *ModifyStreamingDataServiceResponseBody
}

type ModifyStreamingDataServiceResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyStreamingDataServiceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyStreamingDataServiceResponse) String() string {
	return dara.Prettify(s)
}

func (s ModifyStreamingDataServiceResponse) GoString() string {
	return s.String()
}

func (s *ModifyStreamingDataServiceResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *ModifyStreamingDataServiceResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *ModifyStreamingDataServiceResponse) GetBody() *ModifyStreamingDataServiceResponseBody {
	return s.Body
}

func (s *ModifyStreamingDataServiceResponse) SetHeaders(v map[string]*string) *ModifyStreamingDataServiceResponse {
	s.Headers = v
	return s
}

func (s *ModifyStreamingDataServiceResponse) SetStatusCode(v int32) *ModifyStreamingDataServiceResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyStreamingDataServiceResponse) SetBody(v *ModifyStreamingDataServiceResponseBody) *ModifyStreamingDataServiceResponse {
	s.Body = v
	return s
}

func (s *ModifyStreamingDataServiceResponse) Validate() error {
	return dara.Validate(s)
}

type iModifyStreamingDataSourceRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *ModifyStreamingDataSourceRequest
	GetDBInstanceId() *string
	SetDataSourceConfig(v string) *ModifyStreamingDataSourceRequest
	GetDataSourceConfig() *string
	SetDataSourceDescription(v string) *ModifyStreamingDataSourceRequest
	GetDataSourceDescription() *string
	SetDataSourceId(v string) *ModifyStreamingDataSourceRequest
	GetDataSourceId() *string
	SetRegionId(v string) *ModifyStreamingDataSourceRequest
	GetRegionId() *string
}

type ModifyStreamingDataSourceRequest struct {
	// The instance ID.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/196830.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-k2j36a3172b102593
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The configurations of the data source.
	//
	// example:
	//
	// {"brokers":"broker0:9091,broker1:9091","topic":"topic"}
	DataSourceConfig *string `json:"DataSourceConfig,omitempty" xml:"DataSourceConfig,omitempty"`
	// The description of the data source.
	//
	// example:
	//
	// test-kafka
	DataSourceDescription *string `json:"DataSourceDescription,omitempty" xml:"DataSourceDescription,omitempty"`
	// The data source ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 57
	DataSourceId *string `json:"DataSourceId,omitempty" xml:"DataSourceId,omitempty"`
	// The region ID.
	//
	// >  You can call the [DescribeRegions](https://help.aliyun.com/document_detail/86912.html) operation to query the most recent region list.
	//
	// example:
	//
	// cn-beijing
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ModifyStreamingDataSourceRequest) String() string {
	return dara.Prettify(s)
}

func (s ModifyStreamingDataSourceRequest) GoString() string {
	return s.String()
}

func (s *ModifyStreamingDataSourceRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *ModifyStreamingDataSourceRequest) GetDataSourceConfig() *string {
	return s.DataSourceConfig
}

func (s *ModifyStreamingDataSourceRequest) GetDataSourceDescription() *string {
	return s.DataSourceDescription
}

func (s *ModifyStreamingDataSourceRequest) GetDataSourceId() *string {
	return s.DataSourceId
}

func (s *ModifyStreamingDataSourceRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *ModifyStreamingDataSourceRequest) SetDBInstanceId(v string) *ModifyStreamingDataSourceRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ModifyStreamingDataSourceRequest) SetDataSourceConfig(v string) *ModifyStreamingDataSourceRequest {
	s.DataSourceConfig = &v
	return s
}

func (s *ModifyStreamingDataSourceRequest) SetDataSourceDescription(v string) *ModifyStreamingDataSourceRequest {
	s.DataSourceDescription = &v
	return s
}

func (s *ModifyStreamingDataSourceRequest) SetDataSourceId(v string) *ModifyStreamingDataSourceRequest {
	s.DataSourceId = &v
	return s
}

func (s *ModifyStreamingDataSourceRequest) SetRegionId(v string) *ModifyStreamingDataSourceRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyStreamingDataSourceRequest) Validate() error {
	return dara.Validate(s)
}

type iModifyStreamingDataSourceResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetRequestId(v string) *ModifyStreamingDataSourceResponseBody
	GetRequestId() *string
}

type ModifyStreamingDataSourceResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyStreamingDataSourceResponseBody) String() string {
	return dara.Prettify(s)
}

func (s ModifyStreamingDataSourceResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyStreamingDataSourceResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *ModifyStreamingDataSourceResponseBody) SetRequestId(v string) *ModifyStreamingDataSourceResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyStreamingDataSourceResponseBody) Validate() error {
	return dara.Validate(s)
}

type iModifyStreamingDataSourceResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *ModifyStreamingDataSourceResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *ModifyStreamingDataSourceResponse
	GetStatusCode() *int32
	SetBody(v *ModifyStreamingDataSourceResponseBody) *ModifyStreamingDataSourceResponse
	GetBody() *ModifyStreamingDataSourceResponseBody
}

type ModifyStreamingDataSourceResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyStreamingDataSourceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyStreamingDataSourceResponse) String() string {
	return dara.Prettify(s)
}

func (s ModifyStreamingDataSourceResponse) GoString() string {
	return s.String()
}

func (s *ModifyStreamingDataSourceResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *ModifyStreamingDataSourceResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *ModifyStreamingDataSourceResponse) GetBody() *ModifyStreamingDataSourceResponseBody {
	return s.Body
}

func (s *ModifyStreamingDataSourceResponse) SetHeaders(v map[string]*string) *ModifyStreamingDataSourceResponse {
	s.Headers = v
	return s
}

func (s *ModifyStreamingDataSourceResponse) SetStatusCode(v int32) *ModifyStreamingDataSourceResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyStreamingDataSourceResponse) SetBody(v *ModifyStreamingDataSourceResponseBody) *ModifyStreamingDataSourceResponse {
	s.Body = v
	return s
}

func (s *ModifyStreamingDataSourceResponse) Validate() error {
	return dara.Validate(s)
}

type iModifyStreamingJobRequest interface {
	dara.Model
	String() string
	GoString() string
	SetAccount(v string) *ModifyStreamingJobRequest
	GetAccount() *string
	SetConsistency(v string) *ModifyStreamingJobRequest
	GetConsistency() *string
	SetDBInstanceId(v string) *ModifyStreamingJobRequest
	GetDBInstanceId() *string
	SetDestColumns(v []*string) *ModifyStreamingJobRequest
	GetDestColumns() []*string
	SetDestDatabase(v string) *ModifyStreamingJobRequest
	GetDestDatabase() *string
	SetDestSchema(v string) *ModifyStreamingJobRequest
	GetDestSchema() *string
	SetDestTable(v string) *ModifyStreamingJobRequest
	GetDestTable() *string
	SetErrorLimitCount(v int64) *ModifyStreamingJobRequest
	GetErrorLimitCount() *int64
	SetFallbackOffset(v string) *ModifyStreamingJobRequest
	GetFallbackOffset() *string
	SetGroupName(v string) *ModifyStreamingJobRequest
	GetGroupName() *string
	SetJobConfig(v string) *ModifyStreamingJobRequest
	GetJobConfig() *string
	SetJobDescription(v string) *ModifyStreamingJobRequest
	GetJobDescription() *string
	SetJobId(v int64) *ModifyStreamingJobRequest
	GetJobId() *int64
	SetMatchColumns(v []*string) *ModifyStreamingJobRequest
	GetMatchColumns() []*string
	SetPassword(v string) *ModifyStreamingJobRequest
	GetPassword() *string
	SetRegionId(v string) *ModifyStreamingJobRequest
	GetRegionId() *string
	SetSrcColumns(v []*string) *ModifyStreamingJobRequest
	GetSrcColumns() []*string
	SetTryRun(v bool) *ModifyStreamingJobRequest
	GetTryRun() *bool
	SetUpdateColumns(v []*string) *ModifyStreamingJobRequest
	GetUpdateColumns() []*string
	SetWriteMode(v string) *ModifyStreamingJobRequest
	GetWriteMode() *string
}

type ModifyStreamingJobRequest struct {
	// Account name.
	//
	// example:
	//
	// test-account
	Account *string `json:"Account,omitempty" xml:"Account,omitempty"`
	// Delivery guarantee.
	//
	// example:
	//
	// ATLEAST / EXACTLY
	Consistency *string `json:"Consistency,omitempty" xml:"Consistency,omitempty"`
	// Instance ID
	//
	// This parameter is required.
	//
	// example:
	//
	// ModifyStreamingJob
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// Target data table mapping field list.
	DestColumns []*string `json:"DestColumns,omitempty" xml:"DestColumns,omitempty" type:"Repeated"`
	// Target database name.
	//
	// example:
	//
	// dest-db
	DestDatabase *string `json:"DestDatabase,omitempty" xml:"DestDatabase,omitempty"`
	// Target schema.
	//
	// example:
	//
	// dest-schema
	DestSchema *string `json:"DestSchema,omitempty" xml:"DestSchema,omitempty"`
	// Target table name.
	//
	// example:
	//
	// dest-table
	DestTable *string `json:"DestTable,omitempty" xml:"DestTable,omitempty"`
	// When the data in Kafka does not match the ADBPG target table, it will cause a write failure. This value is the number of error rows allowed; exceeding this will cause the task to fail.
	//
	// example:
	//
	// 5
	ErrorLimitCount *int64 `json:"ErrorLimitCount,omitempty" xml:"ErrorLimitCount,omitempty"`
	// FallbackOffset rollback position, offset rollback
	//
	// - The FallbackOffset parameter defines the behavior when the consumer does not request a specific consumption point or the requested consumption point exceeds the current Kafka cluster\\"s recorded points. You can choose to start consuming from the earliest (newest) or latest (oldest) point.
	//
	// example:
	//
	// EARLIEST /  LATEST
	FallbackOffset *string `json:"FallbackOffset,omitempty" xml:"FallbackOffset,omitempty"`
	// Kafka group name
	//
	// example:
	//
	// group_name
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	// Job configuration file, required for professional mode.
	//
	// example:
	//
	// DATABASE: adbpgss_test
	//
	// USER: adbpgss_test
	//
	// PASSWORD: adbpgssTest
	//
	// HOST: gp-xxx-master.gpdb.rds-aliyun-pre.rds.aliyuncs.com
	//
	// PORT: 5432
	//
	// KAFKA:
	//
	//   INPUT:
	//
	//     SOURCE:
	//
	//       BROKERS: broker1:9092,broker2:9092,broker3:9092
	//
	//       TOPIC: testtopic
	//
	//       FALLBACK_OFFSET: earliest
	//
	//     KEY:
	//
	//       COLUMNS:
	//
	//       - NAME: customer_id
	//
	//         TYPE: int
	//
	//       FORMAT: delimited
	//
	//       DELIMITED_OPTION:
	//
	//         DELIMITER: \\"|\\"
	//
	//     VALUE:
	//
	//       COLUMNS:
	//
	//       - TYPE: integer
	//
	//         NAME: l_orderkey
	//
	//       - TYPE: integer
	//
	//         NAME: l_partkey
	//
	//       - TYPE: integer
	//
	//         NAME: l_suppkey
	//
	//       - TYPE: integer
	//
	//         NAME: l_linenumber
	//
	//       - TYPE: decimal
	//
	//         NAME: l_quantity
	//
	//       - TYPE: decimal
	//
	//         NAME: l_extendedprice
	//
	//       - TYPE: decimal
	//
	//         NAME: l_discount
	//
	//       - TYPE: decimal
	//
	//         NAME: l_tax
	//
	//       - TYPE: char
	//
	//         NAME: l_returnflag
	//
	//       - TYPE: char
	//
	//         NAME: l_linestatus
	//
	//       - TYPE: date
	//
	//         NAME: l_shipdate
	//
	//       - TYPE: date
	//
	//         NAME: l_commitdate
	//
	//       - TYPE: date
	//
	//         NAME: l_receiptdate
	//
	//       - TYPE: text
	//
	//         NAME: l_shipinstruct
	//
	//       - TYPE: text
	//
	//         NAME: l_shipmode
	//
	//       - TYPE: text
	//
	//         NAME: l_comment
	//
	//       FORMAT: delimited
	//
	//       DELIMITED_OPTION:
	//
	//         DELIMITER: \\"|\\"
	//
	//     ERROR_LIMIT: 10
	//
	//   OUTPUT:
	//
	//     SCHEMA: adbpgss_test
	//
	//     TABLE: write_with_insert_plaintext
	//
	//     MODE: MERGE
	//
	//     MATCH_COLUMNS:
	//
	//     - l_orderkey
	//
	//     - l_partkey
	//
	//     - l_suppkey
	//
	//     UPDATE_COLUMNS:
	//
	//     - l_linenumber
	//
	//     - l_quantity
	//
	//     - l_extendedprice
	//
	//     - l_discount
	//
	//     - l_tax
	//
	//     - l_returnflag
	//
	//     - l_linestatus
	//
	//     - l_shipdate
	//
	//     - l_commitdate
	//
	//     - l_receiptdate
	//
	//     - l_shipinstruct
	//
	//     - l_shipmode
	//
	//     - l_comment
	//
	//     MAPPING:
	//
	//     - EXPRESSION: l_orderkey
	//
	//       NAME: l_orderkey
	//
	//     - EXPRESSION: l_partkey
	//
	//       NAME: l_partkey
	//
	//     - EXPRESSION: l_suppkey
	//
	//       NAME: l_suppkey
	//
	//     - EXPRESSION: l_linenumber
	//
	//       NAME: l_linenumber
	//
	//     - EXPRESSION: l_quantity
	//
	//       NAME: l_quantity
	//
	//     - EXPRESSION: l_extendedprice
	//
	//       NAME: l_extendedprice
	//
	//     - EXPRESSION: l_discount
	//
	//       NAME: l_discount
	//
	//     - EXPRESSION: l_tax
	//
	//       NAME: l_tax
	//
	//     - EXPRESSION: l_returnflag
	//
	//       NAME: l_returnflag
	//
	//     - EXPRESSION: l_linestatus
	//
	//       NAME: l_linestatus
	//
	//     - EXPRESSION: l_shipdate
	//
	//       NAME: l_shipdate
	//
	//     - EXPRESSION: l_commitdate
	//
	//       NAME: l_commitdate
	//
	//     - EXPRESSION: l_receiptdate
	//
	//       NAME: l_receiptdate
	//
	//     - EXPRESSION: l_shipinstruct
	//
	//       NAME: l_shipinstruct
	//
	//     - EXPRESSION: l_shipmode
	//
	//       NAME: l_shipmode
	//
	//     - EXPRESSION: l_comment
	//
	//       NAME: l_comment
	//
	//   COMMIT:
	//
	//     MAX_ROW: 1000
	//
	//     MINIMAL_INTERVAL: 1000
	//
	//     CONSISTENCY: ATLEAST
	//
	//   POLL:
	//
	//     BATCHSIZE: 1000
	//
	//     TIMEOUT: 1000
	//
	//   PROPERTIES:
	//
	//     group.id: testgroup
	JobConfig *string `json:"JobConfig,omitempty" xml:"JobConfig,omitempty"`
	// Job description.
	//
	// example:
	//
	// test-job
	JobDescription *string `json:"JobDescription,omitempty" xml:"JobDescription,omitempty"`
	// Job ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	JobId *int64 `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// Match columns, usually all primary key columns of the target table. If all column values in this configuration are the same, the two rows of data are considered duplicates.
	MatchColumns []*string `json:"MatchColumns,omitempty" xml:"MatchColumns,omitempty" type:"Repeated"`
	// Password.
	//
	// example:
	//
	// pwd123
	Password *string `json:"Password,omitempty" xml:"Password,omitempty"`
	// Region ID.
	//
	// > You can call the [DescribeRegions](https://help.aliyun.com/document_detail/86912.html) API to view available region IDs.
	//
	// example:
	//
	// cn-beijing
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// Source data field list.
	SrcColumns []*string `json:"SrcColumns,omitempty" xml:"SrcColumns,omitempty" type:"Repeated"`
	// Whether to test the real-time task, values:
	//
	// -  true
	//
	// - false
	//
	// Default value: false.
	//
	// example:
	//
	// true
	TryRun *bool `json:"TryRun,omitempty" xml:"TryRun,omitempty"`
	// Update columns, usually all non-primary key columns of the target table. When data duplication is determined through MatchColumns, updating the UpdateColumns column values will result in new data overwriting old data.
	UpdateColumns []*string `json:"UpdateColumns,omitempty" xml:"UpdateColumns,omitempty" type:"Repeated"`
	// Write mode.
	//
	// example:
	//
	// INSERT/UPDATE/MERGE
	WriteMode *string `json:"WriteMode,omitempty" xml:"WriteMode,omitempty"`
}

func (s ModifyStreamingJobRequest) String() string {
	return dara.Prettify(s)
}

func (s ModifyStreamingJobRequest) GoString() string {
	return s.String()
}

func (s *ModifyStreamingJobRequest) GetAccount() *string {
	return s.Account
}

func (s *ModifyStreamingJobRequest) GetConsistency() *string {
	return s.Consistency
}

func (s *ModifyStreamingJobRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *ModifyStreamingJobRequest) GetDestColumns() []*string {
	return s.DestColumns
}

func (s *ModifyStreamingJobRequest) GetDestDatabase() *string {
	return s.DestDatabase
}

func (s *ModifyStreamingJobRequest) GetDestSchema() *string {
	return s.DestSchema
}

func (s *ModifyStreamingJobRequest) GetDestTable() *string {
	return s.DestTable
}

func (s *ModifyStreamingJobRequest) GetErrorLimitCount() *int64 {
	return s.ErrorLimitCount
}

func (s *ModifyStreamingJobRequest) GetFallbackOffset() *string {
	return s.FallbackOffset
}

func (s *ModifyStreamingJobRequest) GetGroupName() *string {
	return s.GroupName
}

func (s *ModifyStreamingJobRequest) GetJobConfig() *string {
	return s.JobConfig
}

func (s *ModifyStreamingJobRequest) GetJobDescription() *string {
	return s.JobDescription
}

func (s *ModifyStreamingJobRequest) GetJobId() *int64 {
	return s.JobId
}

func (s *ModifyStreamingJobRequest) GetMatchColumns() []*string {
	return s.MatchColumns
}

func (s *ModifyStreamingJobRequest) GetPassword() *string {
	return s.Password
}

func (s *ModifyStreamingJobRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *ModifyStreamingJobRequest) GetSrcColumns() []*string {
	return s.SrcColumns
}

func (s *ModifyStreamingJobRequest) GetTryRun() *bool {
	return s.TryRun
}

func (s *ModifyStreamingJobRequest) GetUpdateColumns() []*string {
	return s.UpdateColumns
}

func (s *ModifyStreamingJobRequest) GetWriteMode() *string {
	return s.WriteMode
}

func (s *ModifyStreamingJobRequest) SetAccount(v string) *ModifyStreamingJobRequest {
	s.Account = &v
	return s
}

func (s *ModifyStreamingJobRequest) SetConsistency(v string) *ModifyStreamingJobRequest {
	s.Consistency = &v
	return s
}

func (s *ModifyStreamingJobRequest) SetDBInstanceId(v string) *ModifyStreamingJobRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ModifyStreamingJobRequest) SetDestColumns(v []*string) *ModifyStreamingJobRequest {
	s.DestColumns = v
	return s
}

func (s *ModifyStreamingJobRequest) SetDestDatabase(v string) *ModifyStreamingJobRequest {
	s.DestDatabase = &v
	return s
}

func (s *ModifyStreamingJobRequest) SetDestSchema(v string) *ModifyStreamingJobRequest {
	s.DestSchema = &v
	return s
}

func (s *ModifyStreamingJobRequest) SetDestTable(v string) *ModifyStreamingJobRequest {
	s.DestTable = &v
	return s
}

func (s *ModifyStreamingJobRequest) SetErrorLimitCount(v int64) *ModifyStreamingJobRequest {
	s.ErrorLimitCount = &v
	return s
}

func (s *ModifyStreamingJobRequest) SetFallbackOffset(v string) *ModifyStreamingJobRequest {
	s.FallbackOffset = &v
	return s
}

func (s *ModifyStreamingJobRequest) SetGroupName(v string) *ModifyStreamingJobRequest {
	s.GroupName = &v
	return s
}

func (s *ModifyStreamingJobRequest) SetJobConfig(v string) *ModifyStreamingJobRequest {
	s.JobConfig = &v
	return s
}

func (s *ModifyStreamingJobRequest) SetJobDescription(v string) *ModifyStreamingJobRequest {
	s.JobDescription = &v
	return s
}

func (s *ModifyStreamingJobRequest) SetJobId(v int64) *ModifyStreamingJobRequest {
	s.JobId = &v
	return s
}

func (s *ModifyStreamingJobRequest) SetMatchColumns(v []*string) *ModifyStreamingJobRequest {
	s.MatchColumns = v
	return s
}

func (s *ModifyStreamingJobRequest) SetPassword(v string) *ModifyStreamingJobRequest {
	s.Password = &v
	return s
}

func (s *ModifyStreamingJobRequest) SetRegionId(v string) *ModifyStreamingJobRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyStreamingJobRequest) SetSrcColumns(v []*string) *ModifyStreamingJobRequest {
	s.SrcColumns = v
	return s
}

func (s *ModifyStreamingJobRequest) SetTryRun(v bool) *ModifyStreamingJobRequest {
	s.TryRun = &v
	return s
}

func (s *ModifyStreamingJobRequest) SetUpdateColumns(v []*string) *ModifyStreamingJobRequest {
	s.UpdateColumns = v
	return s
}

func (s *ModifyStreamingJobRequest) SetWriteMode(v string) *ModifyStreamingJobRequest {
	s.WriteMode = &v
	return s
}

func (s *ModifyStreamingJobRequest) Validate() error {
	return dara.Validate(s)
}

type iModifyStreamingJobShrinkRequest interface {
	dara.Model
	String() string
	GoString() string
	SetAccount(v string) *ModifyStreamingJobShrinkRequest
	GetAccount() *string
	SetConsistency(v string) *ModifyStreamingJobShrinkRequest
	GetConsistency() *string
	SetDBInstanceId(v string) *ModifyStreamingJobShrinkRequest
	GetDBInstanceId() *string
	SetDestColumnsShrink(v string) *ModifyStreamingJobShrinkRequest
	GetDestColumnsShrink() *string
	SetDestDatabase(v string) *ModifyStreamingJobShrinkRequest
	GetDestDatabase() *string
	SetDestSchema(v string) *ModifyStreamingJobShrinkRequest
	GetDestSchema() *string
	SetDestTable(v string) *ModifyStreamingJobShrinkRequest
	GetDestTable() *string
	SetErrorLimitCount(v int64) *ModifyStreamingJobShrinkRequest
	GetErrorLimitCount() *int64
	SetFallbackOffset(v string) *ModifyStreamingJobShrinkRequest
	GetFallbackOffset() *string
	SetGroupName(v string) *ModifyStreamingJobShrinkRequest
	GetGroupName() *string
	SetJobConfig(v string) *ModifyStreamingJobShrinkRequest
	GetJobConfig() *string
	SetJobDescription(v string) *ModifyStreamingJobShrinkRequest
	GetJobDescription() *string
	SetJobId(v int64) *ModifyStreamingJobShrinkRequest
	GetJobId() *int64
	SetMatchColumnsShrink(v string) *ModifyStreamingJobShrinkRequest
	GetMatchColumnsShrink() *string
	SetPassword(v string) *ModifyStreamingJobShrinkRequest
	GetPassword() *string
	SetRegionId(v string) *ModifyStreamingJobShrinkRequest
	GetRegionId() *string
	SetSrcColumnsShrink(v string) *ModifyStreamingJobShrinkRequest
	GetSrcColumnsShrink() *string
	SetTryRun(v bool) *ModifyStreamingJobShrinkRequest
	GetTryRun() *bool
	SetUpdateColumnsShrink(v string) *ModifyStreamingJobShrinkRequest
	GetUpdateColumnsShrink() *string
	SetWriteMode(v string) *ModifyStreamingJobShrinkRequest
	GetWriteMode() *string
}

type ModifyStreamingJobShrinkRequest struct {
	// Account name.
	//
	// example:
	//
	// test-account
	Account *string `json:"Account,omitempty" xml:"Account,omitempty"`
	// Delivery guarantee.
	//
	// example:
	//
	// ATLEAST / EXACTLY
	Consistency *string `json:"Consistency,omitempty" xml:"Consistency,omitempty"`
	// Instance ID
	//
	// This parameter is required.
	//
	// example:
	//
	// ModifyStreamingJob
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// Target data table mapping field list.
	DestColumnsShrink *string `json:"DestColumns,omitempty" xml:"DestColumns,omitempty"`
	// Target database name.
	//
	// example:
	//
	// dest-db
	DestDatabase *string `json:"DestDatabase,omitempty" xml:"DestDatabase,omitempty"`
	// Target schema.
	//
	// example:
	//
	// dest-schema
	DestSchema *string `json:"DestSchema,omitempty" xml:"DestSchema,omitempty"`
	// Target table name.
	//
	// example:
	//
	// dest-table
	DestTable *string `json:"DestTable,omitempty" xml:"DestTable,omitempty"`
	// When the data in Kafka does not match the ADBPG target table, it will cause a write failure. This value is the number of error rows allowed; exceeding this will cause the task to fail.
	//
	// example:
	//
	// 5
	ErrorLimitCount *int64 `json:"ErrorLimitCount,omitempty" xml:"ErrorLimitCount,omitempty"`
	// FallbackOffset rollback position, offset rollback
	//
	// - The FallbackOffset parameter defines the behavior when the consumer does not request a specific consumption point or the requested consumption point exceeds the current Kafka cluster\\"s recorded points. You can choose to start consuming from the earliest (newest) or latest (oldest) point.
	//
	// example:
	//
	// EARLIEST /  LATEST
	FallbackOffset *string `json:"FallbackOffset,omitempty" xml:"FallbackOffset,omitempty"`
	// Kafka group name
	//
	// example:
	//
	// group_name
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	// Job configuration file, required for professional mode.
	//
	// example:
	//
	// DATABASE: adbpgss_test
	//
	// USER: adbpgss_test
	//
	// PASSWORD: adbpgssTest
	//
	// HOST: gp-xxx-master.gpdb.rds-aliyun-pre.rds.aliyuncs.com
	//
	// PORT: 5432
	//
	// KAFKA:
	//
	//   INPUT:
	//
	//     SOURCE:
	//
	//       BROKERS: broker1:9092,broker2:9092,broker3:9092
	//
	//       TOPIC: testtopic
	//
	//       FALLBACK_OFFSET: earliest
	//
	//     KEY:
	//
	//       COLUMNS:
	//
	//       - NAME: customer_id
	//
	//         TYPE: int
	//
	//       FORMAT: delimited
	//
	//       DELIMITED_OPTION:
	//
	//         DELIMITER: \\"|\\"
	//
	//     VALUE:
	//
	//       COLUMNS:
	//
	//       - TYPE: integer
	//
	//         NAME: l_orderkey
	//
	//       - TYPE: integer
	//
	//         NAME: l_partkey
	//
	//       - TYPE: integer
	//
	//         NAME: l_suppkey
	//
	//       - TYPE: integer
	//
	//         NAME: l_linenumber
	//
	//       - TYPE: decimal
	//
	//         NAME: l_quantity
	//
	//       - TYPE: decimal
	//
	//         NAME: l_extendedprice
	//
	//       - TYPE: decimal
	//
	//         NAME: l_discount
	//
	//       - TYPE: decimal
	//
	//         NAME: l_tax
	//
	//       - TYPE: char
	//
	//         NAME: l_returnflag
	//
	//       - TYPE: char
	//
	//         NAME: l_linestatus
	//
	//       - TYPE: date
	//
	//         NAME: l_shipdate
	//
	//       - TYPE: date
	//
	//         NAME: l_commitdate
	//
	//       - TYPE: date
	//
	//         NAME: l_receiptdate
	//
	//       - TYPE: text
	//
	//         NAME: l_shipinstruct
	//
	//       - TYPE: text
	//
	//         NAME: l_shipmode
	//
	//       - TYPE: text
	//
	//         NAME: l_comment
	//
	//       FORMAT: delimited
	//
	//       DELIMITED_OPTION:
	//
	//         DELIMITER: \\"|\\"
	//
	//     ERROR_LIMIT: 10
	//
	//   OUTPUT:
	//
	//     SCHEMA: adbpgss_test
	//
	//     TABLE: write_with_insert_plaintext
	//
	//     MODE: MERGE
	//
	//     MATCH_COLUMNS:
	//
	//     - l_orderkey
	//
	//     - l_partkey
	//
	//     - l_suppkey
	//
	//     UPDATE_COLUMNS:
	//
	//     - l_linenumber
	//
	//     - l_quantity
	//
	//     - l_extendedprice
	//
	//     - l_discount
	//
	//     - l_tax
	//
	//     - l_returnflag
	//
	//     - l_linestatus
	//
	//     - l_shipdate
	//
	//     - l_commitdate
	//
	//     - l_receiptdate
	//
	//     - l_shipinstruct
	//
	//     - l_shipmode
	//
	//     - l_comment
	//
	//     MAPPING:
	//
	//     - EXPRESSION: l_orderkey
	//
	//       NAME: l_orderkey
	//
	//     - EXPRESSION: l_partkey
	//
	//       NAME: l_partkey
	//
	//     - EXPRESSION: l_suppkey
	//
	//       NAME: l_suppkey
	//
	//     - EXPRESSION: l_linenumber
	//
	//       NAME: l_linenumber
	//
	//     - EXPRESSION: l_quantity
	//
	//       NAME: l_quantity
	//
	//     - EXPRESSION: l_extendedprice
	//
	//       NAME: l_extendedprice
	//
	//     - EXPRESSION: l_discount
	//
	//       NAME: l_discount
	//
	//     - EXPRESSION: l_tax
	//
	//       NAME: l_tax
	//
	//     - EXPRESSION: l_returnflag
	//
	//       NAME: l_returnflag
	//
	//     - EXPRESSION: l_linestatus
	//
	//       NAME: l_linestatus
	//
	//     - EXPRESSION: l_shipdate
	//
	//       NAME: l_shipdate
	//
	//     - EXPRESSION: l_commitdate
	//
	//       NAME: l_commitdate
	//
	//     - EXPRESSION: l_receiptdate
	//
	//       NAME: l_receiptdate
	//
	//     - EXPRESSION: l_shipinstruct
	//
	//       NAME: l_shipinstruct
	//
	//     - EXPRESSION: l_shipmode
	//
	//       NAME: l_shipmode
	//
	//     - EXPRESSION: l_comment
	//
	//       NAME: l_comment
	//
	//   COMMIT:
	//
	//     MAX_ROW: 1000
	//
	//     MINIMAL_INTERVAL: 1000
	//
	//     CONSISTENCY: ATLEAST
	//
	//   POLL:
	//
	//     BATCHSIZE: 1000
	//
	//     TIMEOUT: 1000
	//
	//   PROPERTIES:
	//
	//     group.id: testgroup
	JobConfig *string `json:"JobConfig,omitempty" xml:"JobConfig,omitempty"`
	// Job description.
	//
	// example:
	//
	// test-job
	JobDescription *string `json:"JobDescription,omitempty" xml:"JobDescription,omitempty"`
	// Job ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	JobId *int64 `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// Match columns, usually all primary key columns of the target table. If all column values in this configuration are the same, the two rows of data are considered duplicates.
	MatchColumnsShrink *string `json:"MatchColumns,omitempty" xml:"MatchColumns,omitempty"`
	// Password.
	//
	// example:
	//
	// pwd123
	Password *string `json:"Password,omitempty" xml:"Password,omitempty"`
	// Region ID.
	//
	// > You can call the [DescribeRegions](https://help.aliyun.com/document_detail/86912.html) API to view available region IDs.
	//
	// example:
	//
	// cn-beijing
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// Source data field list.
	SrcColumnsShrink *string `json:"SrcColumns,omitempty" xml:"SrcColumns,omitempty"`
	// Whether to test the real-time task, values:
	//
	// -  true
	//
	// - false
	//
	// Default value: false.
	//
	// example:
	//
	// true
	TryRun *bool `json:"TryRun,omitempty" xml:"TryRun,omitempty"`
	// Update columns, usually all non-primary key columns of the target table. When data duplication is determined through MatchColumns, updating the UpdateColumns column values will result in new data overwriting old data.
	UpdateColumnsShrink *string `json:"UpdateColumns,omitempty" xml:"UpdateColumns,omitempty"`
	// Write mode.
	//
	// example:
	//
	// INSERT/UPDATE/MERGE
	WriteMode *string `json:"WriteMode,omitempty" xml:"WriteMode,omitempty"`
}

func (s ModifyStreamingJobShrinkRequest) String() string {
	return dara.Prettify(s)
}

func (s ModifyStreamingJobShrinkRequest) GoString() string {
	return s.String()
}

func (s *ModifyStreamingJobShrinkRequest) GetAccount() *string {
	return s.Account
}

func (s *ModifyStreamingJobShrinkRequest) GetConsistency() *string {
	return s.Consistency
}

func (s *ModifyStreamingJobShrinkRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *ModifyStreamingJobShrinkRequest) GetDestColumnsShrink() *string {
	return s.DestColumnsShrink
}

func (s *ModifyStreamingJobShrinkRequest) GetDestDatabase() *string {
	return s.DestDatabase
}

func (s *ModifyStreamingJobShrinkRequest) GetDestSchema() *string {
	return s.DestSchema
}

func (s *ModifyStreamingJobShrinkRequest) GetDestTable() *string {
	return s.DestTable
}

func (s *ModifyStreamingJobShrinkRequest) GetErrorLimitCount() *int64 {
	return s.ErrorLimitCount
}

func (s *ModifyStreamingJobShrinkRequest) GetFallbackOffset() *string {
	return s.FallbackOffset
}

func (s *ModifyStreamingJobShrinkRequest) GetGroupName() *string {
	return s.GroupName
}

func (s *ModifyStreamingJobShrinkRequest) GetJobConfig() *string {
	return s.JobConfig
}

func (s *ModifyStreamingJobShrinkRequest) GetJobDescription() *string {
	return s.JobDescription
}

func (s *ModifyStreamingJobShrinkRequest) GetJobId() *int64 {
	return s.JobId
}

func (s *ModifyStreamingJobShrinkRequest) GetMatchColumnsShrink() *string {
	return s.MatchColumnsShrink
}

func (s *ModifyStreamingJobShrinkRequest) GetPassword() *string {
	return s.Password
}

func (s *ModifyStreamingJobShrinkRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *ModifyStreamingJobShrinkRequest) GetSrcColumnsShrink() *string {
	return s.SrcColumnsShrink
}

func (s *ModifyStreamingJobShrinkRequest) GetTryRun() *bool {
	return s.TryRun
}

func (s *ModifyStreamingJobShrinkRequest) GetUpdateColumnsShrink() *string {
	return s.UpdateColumnsShrink
}

func (s *ModifyStreamingJobShrinkRequest) GetWriteMode() *string {
	return s.WriteMode
}

func (s *ModifyStreamingJobShrinkRequest) SetAccount(v string) *ModifyStreamingJobShrinkRequest {
	s.Account = &v
	return s
}

func (s *ModifyStreamingJobShrinkRequest) SetConsistency(v string) *ModifyStreamingJobShrinkRequest {
	s.Consistency = &v
	return s
}

func (s *ModifyStreamingJobShrinkRequest) SetDBInstanceId(v string) *ModifyStreamingJobShrinkRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ModifyStreamingJobShrinkRequest) SetDestColumnsShrink(v string) *ModifyStreamingJobShrinkRequest {
	s.DestColumnsShrink = &v
	return s
}

func (s *ModifyStreamingJobShrinkRequest) SetDestDatabase(v string) *ModifyStreamingJobShrinkRequest {
	s.DestDatabase = &v
	return s
}

func (s *ModifyStreamingJobShrinkRequest) SetDestSchema(v string) *ModifyStreamingJobShrinkRequest {
	s.DestSchema = &v
	return s
}

func (s *ModifyStreamingJobShrinkRequest) SetDestTable(v string) *ModifyStreamingJobShrinkRequest {
	s.DestTable = &v
	return s
}

func (s *ModifyStreamingJobShrinkRequest) SetErrorLimitCount(v int64) *ModifyStreamingJobShrinkRequest {
	s.ErrorLimitCount = &v
	return s
}

func (s *ModifyStreamingJobShrinkRequest) SetFallbackOffset(v string) *ModifyStreamingJobShrinkRequest {
	s.FallbackOffset = &v
	return s
}

func (s *ModifyStreamingJobShrinkRequest) SetGroupName(v string) *ModifyStreamingJobShrinkRequest {
	s.GroupName = &v
	return s
}

func (s *ModifyStreamingJobShrinkRequest) SetJobConfig(v string) *ModifyStreamingJobShrinkRequest {
	s.JobConfig = &v
	return s
}

func (s *ModifyStreamingJobShrinkRequest) SetJobDescription(v string) *ModifyStreamingJobShrinkRequest {
	s.JobDescription = &v
	return s
}

func (s *ModifyStreamingJobShrinkRequest) SetJobId(v int64) *ModifyStreamingJobShrinkRequest {
	s.JobId = &v
	return s
}

func (s *ModifyStreamingJobShrinkRequest) SetMatchColumnsShrink(v string) *ModifyStreamingJobShrinkRequest {
	s.MatchColumnsShrink = &v
	return s
}

func (s *ModifyStreamingJobShrinkRequest) SetPassword(v string) *ModifyStreamingJobShrinkRequest {
	s.Password = &v
	return s
}

func (s *ModifyStreamingJobShrinkRequest) SetRegionId(v string) *ModifyStreamingJobShrinkRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyStreamingJobShrinkRequest) SetSrcColumnsShrink(v string) *ModifyStreamingJobShrinkRequest {
	s.SrcColumnsShrink = &v
	return s
}

func (s *ModifyStreamingJobShrinkRequest) SetTryRun(v bool) *ModifyStreamingJobShrinkRequest {
	s.TryRun = &v
	return s
}

func (s *ModifyStreamingJobShrinkRequest) SetUpdateColumnsShrink(v string) *ModifyStreamingJobShrinkRequest {
	s.UpdateColumnsShrink = &v
	return s
}

func (s *ModifyStreamingJobShrinkRequest) SetWriteMode(v string) *ModifyStreamingJobShrinkRequest {
	s.WriteMode = &v
	return s
}

func (s *ModifyStreamingJobShrinkRequest) Validate() error {
	return dara.Validate(s)
}

type iModifyStreamingJobResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetRequestId(v string) *ModifyStreamingJobResponseBody
	GetRequestId() *string
}

type ModifyStreamingJobResponseBody struct {
	// Request ID.
	//
	// example:
	//
	// B4CAF581-2AC7-41AD-8940-D56DF7AADF5B
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyStreamingJobResponseBody) String() string {
	return dara.Prettify(s)
}

func (s ModifyStreamingJobResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyStreamingJobResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *ModifyStreamingJobResponseBody) SetRequestId(v string) *ModifyStreamingJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyStreamingJobResponseBody) Validate() error {
	return dara.Validate(s)
}

type iModifyStreamingJobResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *ModifyStreamingJobResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *ModifyStreamingJobResponse
	GetStatusCode() *int32
	SetBody(v *ModifyStreamingJobResponseBody) *ModifyStreamingJobResponse
	GetBody() *ModifyStreamingJobResponseBody
}

type ModifyStreamingJobResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyStreamingJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyStreamingJobResponse) String() string {
	return dara.Prettify(s)
}

func (s ModifyStreamingJobResponse) GoString() string {
	return s.String()
}

func (s *ModifyStreamingJobResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *ModifyStreamingJobResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *ModifyStreamingJobResponse) GetBody() *ModifyStreamingJobResponseBody {
	return s.Body
}

func (s *ModifyStreamingJobResponse) SetHeaders(v map[string]*string) *ModifyStreamingJobResponse {
	s.Headers = v
	return s
}

func (s *ModifyStreamingJobResponse) SetStatusCode(v int32) *ModifyStreamingJobResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyStreamingJobResponse) SetBody(v *ModifyStreamingJobResponseBody) *ModifyStreamingJobResponse {
	s.Body = v
	return s
}

func (s *ModifyStreamingJobResponse) Validate() error {
	return dara.Validate(s)
}

type iModifyVectorConfigurationRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *ModifyVectorConfigurationRequest
	GetDBInstanceId() *string
	SetOwnerId(v int64) *ModifyVectorConfigurationRequest
	GetOwnerId() *int64
	SetVectorConfigurationStatus(v string) *ModifyVectorConfigurationRequest
	GetVectorConfigurationStatus() *string
}

type ModifyVectorConfigurationRequest struct {
	// The instance ID.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the IDs of all AnalyticDB for PostgreSQL instances in a region.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// Specifies whether to enable vector engine optimization. Valid values:
	//
	// 	- **enabled**
	//
	// 	- **disabled**
	//
	// > 	- We recommend that you **do not enable*	- vector engine optimization in mainstream analysis and real-time data warehousing scenarios.
	//
	// > 	- We recommend that you **enable*	- vector engine optimization in AI Generated Content (AIGC) and vector retrieval scenarios that require the vector analysis engine.
	//
	// example:
	//
	// enabled
	VectorConfigurationStatus *string `json:"VectorConfigurationStatus,omitempty" xml:"VectorConfigurationStatus,omitempty"`
}

func (s ModifyVectorConfigurationRequest) String() string {
	return dara.Prettify(s)
}

func (s ModifyVectorConfigurationRequest) GoString() string {
	return s.String()
}

func (s *ModifyVectorConfigurationRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *ModifyVectorConfigurationRequest) GetOwnerId() *int64 {
	return s.OwnerId
}

func (s *ModifyVectorConfigurationRequest) GetVectorConfigurationStatus() *string {
	return s.VectorConfigurationStatus
}

func (s *ModifyVectorConfigurationRequest) SetDBInstanceId(v string) *ModifyVectorConfigurationRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ModifyVectorConfigurationRequest) SetOwnerId(v int64) *ModifyVectorConfigurationRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyVectorConfigurationRequest) SetVectorConfigurationStatus(v string) *ModifyVectorConfigurationRequest {
	s.VectorConfigurationStatus = &v
	return s
}

func (s *ModifyVectorConfigurationRequest) Validate() error {
	return dara.Validate(s)
}

type iModifyVectorConfigurationResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *ModifyVectorConfigurationResponseBody
	GetDBInstanceId() *string
	SetErrorMessage(v string) *ModifyVectorConfigurationResponseBody
	GetErrorMessage() *string
	SetRequestId(v string) *ModifyVectorConfigurationResponseBody
	GetRequestId() *string
	SetStatus(v bool) *ModifyVectorConfigurationResponseBody
	GetStatus() *bool
}

type ModifyVectorConfigurationResponseBody struct {
	// The instance ID.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The error message that is returned.
	//
	// This parameter is returned only if the request fails.
	//
	// example:
	//
	// Failed to modify vector configuration.
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 107BE202-D1A2-479E-98E0-A8**********
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	Status *bool `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ModifyVectorConfigurationResponseBody) String() string {
	return dara.Prettify(s)
}

func (s ModifyVectorConfigurationResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyVectorConfigurationResponseBody) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *ModifyVectorConfigurationResponseBody) GetErrorMessage() *string {
	return s.ErrorMessage
}

func (s *ModifyVectorConfigurationResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *ModifyVectorConfigurationResponseBody) GetStatus() *bool {
	return s.Status
}

func (s *ModifyVectorConfigurationResponseBody) SetDBInstanceId(v string) *ModifyVectorConfigurationResponseBody {
	s.DBInstanceId = &v
	return s
}

func (s *ModifyVectorConfigurationResponseBody) SetErrorMessage(v string) *ModifyVectorConfigurationResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *ModifyVectorConfigurationResponseBody) SetRequestId(v string) *ModifyVectorConfigurationResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyVectorConfigurationResponseBody) SetStatus(v bool) *ModifyVectorConfigurationResponseBody {
	s.Status = &v
	return s
}

func (s *ModifyVectorConfigurationResponseBody) Validate() error {
	return dara.Validate(s)
}

type iModifyVectorConfigurationResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *ModifyVectorConfigurationResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *ModifyVectorConfigurationResponse
	GetStatusCode() *int32
	SetBody(v *ModifyVectorConfigurationResponseBody) *ModifyVectorConfigurationResponse
	GetBody() *ModifyVectorConfigurationResponseBody
}

type ModifyVectorConfigurationResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyVectorConfigurationResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyVectorConfigurationResponse) String() string {
	return dara.Prettify(s)
}

func (s ModifyVectorConfigurationResponse) GoString() string {
	return s.String()
}

func (s *ModifyVectorConfigurationResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *ModifyVectorConfigurationResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *ModifyVectorConfigurationResponse) GetBody() *ModifyVectorConfigurationResponseBody {
	return s.Body
}

func (s *ModifyVectorConfigurationResponse) SetHeaders(v map[string]*string) *ModifyVectorConfigurationResponse {
	s.Headers = v
	return s
}

func (s *ModifyVectorConfigurationResponse) SetStatusCode(v int32) *ModifyVectorConfigurationResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyVectorConfigurationResponse) SetBody(v *ModifyVectorConfigurationResponseBody) *ModifyVectorConfigurationResponse {
	s.Body = v
	return s
}

func (s *ModifyVectorConfigurationResponse) Validate() error {
	return dara.Validate(s)
}

type iPauseDataRedistributeRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *PauseDataRedistributeRequest
	GetDBInstanceId() *string
	SetOwnerId(v int64) *PauseDataRedistributeRequest
	GetOwnerId() *int64
}

type PauseDataRedistributeRequest struct {
	// The cluster ID.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s PauseDataRedistributeRequest) String() string {
	return dara.Prettify(s)
}

func (s PauseDataRedistributeRequest) GoString() string {
	return s.String()
}

func (s *PauseDataRedistributeRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *PauseDataRedistributeRequest) GetOwnerId() *int64 {
	return s.OwnerId
}

func (s *PauseDataRedistributeRequest) SetDBInstanceId(v string) *PauseDataRedistributeRequest {
	s.DBInstanceId = &v
	return s
}

func (s *PauseDataRedistributeRequest) SetOwnerId(v int64) *PauseDataRedistributeRequest {
	s.OwnerId = &v
	return s
}

func (s *PauseDataRedistributeRequest) Validate() error {
	return dara.Validate(s)
}

type iPauseDataRedistributeResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetRequestId(v string) *PauseDataRedistributeResponseBody
	GetRequestId() *string
}

type PauseDataRedistributeResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s PauseDataRedistributeResponseBody) String() string {
	return dara.Prettify(s)
}

func (s PauseDataRedistributeResponseBody) GoString() string {
	return s.String()
}

func (s *PauseDataRedistributeResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *PauseDataRedistributeResponseBody) SetRequestId(v string) *PauseDataRedistributeResponseBody {
	s.RequestId = &v
	return s
}

func (s *PauseDataRedistributeResponseBody) Validate() error {
	return dara.Validate(s)
}

type iPauseDataRedistributeResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *PauseDataRedistributeResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *PauseDataRedistributeResponse
	GetStatusCode() *int32
	SetBody(v *PauseDataRedistributeResponseBody) *PauseDataRedistributeResponse
	GetBody() *PauseDataRedistributeResponseBody
}

type PauseDataRedistributeResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *PauseDataRedistributeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s PauseDataRedistributeResponse) String() string {
	return dara.Prettify(s)
}

func (s PauseDataRedistributeResponse) GoString() string {
	return s.String()
}

func (s *PauseDataRedistributeResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *PauseDataRedistributeResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *PauseDataRedistributeResponse) GetBody() *PauseDataRedistributeResponseBody {
	return s.Body
}

func (s *PauseDataRedistributeResponse) SetHeaders(v map[string]*string) *PauseDataRedistributeResponse {
	s.Headers = v
	return s
}

func (s *PauseDataRedistributeResponse) SetStatusCode(v int32) *PauseDataRedistributeResponse {
	s.StatusCode = &v
	return s
}

func (s *PauseDataRedistributeResponse) SetBody(v *PauseDataRedistributeResponseBody) *PauseDataRedistributeResponse {
	s.Body = v
	return s
}

func (s *PauseDataRedistributeResponse) Validate() error {
	return dara.Validate(s)
}

type iPauseInstanceRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *PauseInstanceRequest
	GetDBInstanceId() *string
	SetOwnerId(v int64) *PauseInstanceRequest
	GetOwnerId() *int64
}

type PauseInstanceRequest struct {
	// The ID of the instance.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the details of all AnalyticDB for PostgreSQL instances in a specific region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s PauseInstanceRequest) String() string {
	return dara.Prettify(s)
}

func (s PauseInstanceRequest) GoString() string {
	return s.String()
}

func (s *PauseInstanceRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *PauseInstanceRequest) GetOwnerId() *int64 {
	return s.OwnerId
}

func (s *PauseInstanceRequest) SetDBInstanceId(v string) *PauseInstanceRequest {
	s.DBInstanceId = &v
	return s
}

func (s *PauseInstanceRequest) SetOwnerId(v int64) *PauseInstanceRequest {
	s.OwnerId = &v
	return s
}

func (s *PauseInstanceRequest) Validate() error {
	return dara.Validate(s)
}

type iPauseInstanceResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *PauseInstanceResponseBody
	GetDBInstanceId() *string
	SetErrorMessage(v string) *PauseInstanceResponseBody
	GetErrorMessage() *string
	SetRequestId(v string) *PauseInstanceResponseBody
	GetRequestId() *string
	SetStatus(v bool) *PauseInstanceResponseBody
	GetStatus() *bool
}

type PauseInstanceResponseBody struct {
	// The ID of the instance.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The error message returned.
	//
	// This parameter is returned only if **false*	- is returned for the **Status*	- parameter.
	//
	// example:
	//
	// *******
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 34b32a0a-08ef-4a87-b6be-cdd9********
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **false**: The request failed.
	//
	// 	- **true**: The request was successful.
	//
	// example:
	//
	// true
	Status *bool `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s PauseInstanceResponseBody) String() string {
	return dara.Prettify(s)
}

func (s PauseInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *PauseInstanceResponseBody) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *PauseInstanceResponseBody) GetErrorMessage() *string {
	return s.ErrorMessage
}

func (s *PauseInstanceResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *PauseInstanceResponseBody) GetStatus() *bool {
	return s.Status
}

func (s *PauseInstanceResponseBody) SetDBInstanceId(v string) *PauseInstanceResponseBody {
	s.DBInstanceId = &v
	return s
}

func (s *PauseInstanceResponseBody) SetErrorMessage(v string) *PauseInstanceResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *PauseInstanceResponseBody) SetRequestId(v string) *PauseInstanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *PauseInstanceResponseBody) SetStatus(v bool) *PauseInstanceResponseBody {
	s.Status = &v
	return s
}

func (s *PauseInstanceResponseBody) Validate() error {
	return dara.Validate(s)
}

type iPauseInstanceResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *PauseInstanceResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *PauseInstanceResponse
	GetStatusCode() *int32
	SetBody(v *PauseInstanceResponseBody) *PauseInstanceResponse
	GetBody() *PauseInstanceResponseBody
}

type PauseInstanceResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *PauseInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s PauseInstanceResponse) String() string {
	return dara.Prettify(s)
}

func (s PauseInstanceResponse) GoString() string {
	return s.String()
}

func (s *PauseInstanceResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *PauseInstanceResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *PauseInstanceResponse) GetBody() *PauseInstanceResponseBody {
	return s.Body
}

func (s *PauseInstanceResponse) SetHeaders(v map[string]*string) *PauseInstanceResponse {
	s.Headers = v
	return s
}

func (s *PauseInstanceResponse) SetStatusCode(v int32) *PauseInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *PauseInstanceResponse) SetBody(v *PauseInstanceResponseBody) *PauseInstanceResponse {
	s.Body = v
	return s
}

func (s *PauseInstanceResponse) Validate() error {
	return dara.Validate(s)
}

type iQueryCollectionDataRequest interface {
	dara.Model
	String() string
	GoString() string
	SetCollection(v string) *QueryCollectionDataRequest
	GetCollection() *string
	SetContent(v string) *QueryCollectionDataRequest
	GetContent() *string
	SetDBInstanceId(v string) *QueryCollectionDataRequest
	GetDBInstanceId() *string
	SetFilter(v string) *QueryCollectionDataRequest
	GetFilter() *string
	SetHybridSearch(v string) *QueryCollectionDataRequest
	GetHybridSearch() *string
	SetHybridSearchArgs(v map[string]map[string]interface{}) *QueryCollectionDataRequest
	GetHybridSearchArgs() map[string]map[string]interface{}
	SetIncludeMetadataFields(v string) *QueryCollectionDataRequest
	GetIncludeMetadataFields() *string
	SetIncludeValues(v bool) *QueryCollectionDataRequest
	GetIncludeValues() *bool
	SetMetrics(v string) *QueryCollectionDataRequest
	GetMetrics() *string
	SetNamespace(v string) *QueryCollectionDataRequest
	GetNamespace() *string
	SetNamespacePassword(v string) *QueryCollectionDataRequest
	GetNamespacePassword() *string
	SetOffset(v int32) *QueryCollectionDataRequest
	GetOffset() *int32
	SetOrderBy(v string) *QueryCollectionDataRequest
	GetOrderBy() *string
	SetOwnerId(v int64) *QueryCollectionDataRequest
	GetOwnerId() *int64
	SetRegionId(v string) *QueryCollectionDataRequest
	GetRegionId() *string
	SetRelationalTableFilter(v *QueryCollectionDataRequestRelationalTableFilter) *QueryCollectionDataRequest
	GetRelationalTableFilter() *QueryCollectionDataRequestRelationalTableFilter
	SetSparseVector(v *QueryCollectionDataRequestSparseVector) *QueryCollectionDataRequest
	GetSparseVector() *QueryCollectionDataRequestSparseVector
	SetTopK(v int64) *QueryCollectionDataRequest
	GetTopK() *int64
	SetVector(v []*float64) *QueryCollectionDataRequest
	GetVector() []*float64
	SetWorkspaceId(v string) *QueryCollectionDataRequest
	GetWorkspaceId() *string
}

type QueryCollectionDataRequest struct {
	// Collection name.
	//
	// > You can use the [ListCollections](https://help.aliyun.com/document_detail/2401503.html) API to view the list.
	//
	// This parameter is required.
	//
	// example:
	//
	// document
	Collection *string `json:"Collection,omitempty" xml:"Collection,omitempty"`
	// Content for full-text search. When this value is empty, only vector search is used; when it is not empty, both vector and full-text search are used.
	//
	// > The Vector parameter cannot be empty at the same time.
	//
	// example:
	//
	// hello_world
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// Instance ID.
	//
	// > You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) API to view details of all AnalyticDB PostgreSQL instances in the target region, including the instance ID.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// Filter conditions for the data to be queried, in SQL WHERE format. It is an expression that returns a boolean value (true or false). Conditions can be simple comparison operators such as equal (=), not equal (<> or !=), greater than (>), less than (<), greater than or equal to (>=), less than or equal to (<=), or more complex expressions combined with logical operators (AND, OR, NOT), as well as conditions using keywords like IN, BETWEEN, and LIKE.
	//
	// >
	//
	// > - For detailed syntax, refer to: https://www.postgresqltutorial.com/postgresql-tutorial/postgresql-where/
	//
	// example:
	//
	// response > 200
	Filter *string `json:"Filter,omitempty" xml:"Filter,omitempty"`
	// Dual-path recall algorithm, default is empty (i.e., directly compare and sort the scores of vectors and full-text).
	//
	// Available values:
	//
	// - RRF: Reciprocal rank fusion, with a parameter k controlling the fusion effect. See HybridSearchArgs configuration for details;
	//
	// - Weight: Weighted sorting, using a parameter alpha to control the score ratio of vectors and full-text, then sorting. See HybridSearchArgs configuration for details;
	//
	// - Cascaded: Perform full-text search first, then vector search based on the full-text results;
	//
	// example:
	//
	// RRF
	HybridSearch *string `json:"HybridSearch,omitempty" xml:"HybridSearch,omitempty"`
	// The parameters of the two-way retrieval algorithm. The following parameters are supported:
	//
	// 	- When HybridSearch is set to RRF, the scores are calculated by using the `1/(k+rank_i)` formula. The constant k is a positive integer that is greater than 1.
	//
	// <!---->
	//
	//     {
	//
	//        "RRF": {
	//
	//         "k": 60
	//
	//        }
	//
	//     }
	//
	// 	- When HybridSearch is set to Weight, the scores are calculated by using the `alpha 	- vector_score + (1-alpha) 	- text_score` formula. The alpha parameter specifies the proportion of the vector search score and the full-text search score and ranges from 0 to 1. A value of 0 specifies full-text search and a value of 1 specifies vector search.
	//
	// <!---->
	//
	//     {
	//
	//        "Weight": {
	//
	//         "alpha": 0.5
	//
	//        }
	//
	//     }
	HybridSearchArgs map[string]map[string]interface{} `json:"HybridSearchArgs,omitempty" xml:"HybridSearchArgs,omitempty"`
	// Defaults to empty, indicating the metadata fields to return. Multiple fields should be separated by commas.
	//
	// example:
	//
	// title,content
	IncludeMetadataFields *string `json:"IncludeMetadataFields,omitempty" xml:"IncludeMetadataFields,omitempty"`
	// Whether to return vector data. Value descriptions:
	//
	// - **true**: Return vector data.
	//
	// - **false**: Do not return vector data, used for full-text search scenarios.
	//
	// example:
	//
	// true
	IncludeValues *bool `json:"IncludeValues,omitempty" xml:"IncludeValues,omitempty"`
	// Similarity algorithm used during retrieval. Value descriptions:
	//
	// - **l2**: Euclidean distance.
	//
	// - **ip**: Inner product (dot product) distance.
	//
	// - **cosine**: Cosine similarity.
	//
	// > If this value is empty, the algorithm specified during index creation is used.
	//
	// example:
	//
	// cosine
	Metrics *string `json:"Metrics,omitempty" xml:"Metrics,omitempty"`
	// Namespace.
	//
	// > You can use the [ListNamespaces](https://help.aliyun.com/document_detail/2401502.html) API to view the list.
	//
	// example:
	//
	// mynamespace
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// Password for the namespace.
	//
	// This parameter is required.
	//
	// example:
	//
	// testpassword
	NamespacePassword *string `json:"NamespacePassword,omitempty" xml:"NamespacePassword,omitempty"`
	// Defaults to empty, indicating the starting point for pagination queries. Does not support hybrid search scenarios.
	//
	// The value must be >= 0. When this value is not empty, it will return `Total`, which indicates the total number of hits. This parameter works with `TopK`. For example, to paginate 20 and retrieve chunks with `chunk_id` from 0 to 44, you need to make three requests:
	//
	// - `Offset=0, TopK=20` returns `chunk_id` 0~19
	//
	// - `Offset=20, TopK=20` returns `chunk_id` 20~39
	//
	// - `Offset=30, TopK=20` returns `chunk_id` 40~44
	//
	// example:
	//
	// 0
	Offset *int32 `json:"Offset,omitempty" xml:"Offset,omitempty"`
	// Defaults to empty, indicating the field for sorting. Does not support hybrid search scenarios.
	//
	// The field must belong to metadata or be a default field in the table, such as `id`. The supported formats are:
	//
	// - A single field, e.g., `chunk_id`;
	//
	// - Multiple fields, separated by commas, e.g., `block_id, chunk_id`;
	//
	// - Supports reverse order, e.g., `block_id DESC, chunk_id DESC`;
	//
	// example:
	//
	// chunk_id
	OrderBy *string `json:"OrderBy,omitempty" xml:"OrderBy,omitempty"`
	OwnerId *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// Region ID where the instance is located.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// Uses another relational table to filter vector data (similar to a Join function).
	//
	// > Data from the relational table can be returned by setting the `IncludeMetadataFields` parameter. For example, `rds_table_name.id` indicates returning the `id` field from the relational table.
	RelationalTableFilter *QueryCollectionDataRequestRelationalTableFilter `json:"RelationalTableFilter,omitempty" xml:"RelationalTableFilter,omitempty" type:"Struct"`
	SparseVector          *QueryCollectionDataRequestSparseVector          `json:"SparseVector,omitempty" xml:"SparseVector,omitempty" type:"Struct"`
	// Set the number of top results to return.
	//
	// This parameter is required.
	//
	// example:
	//
	// 10
	TopK *int64 `json:"TopK,omitempty" xml:"TopK,omitempty"`
	// Vector data, with the same dimension as specified in the [CreateCollection](https://help.aliyun.com/document_detail/2401497.html) API.
	//
	// > When the vector is empty, only full-text search results are returned.
	Vector []*float64 `json:"Vector,omitempty" xml:"Vector,omitempty" type:"Repeated"`
	// The ID of the Workspace composed of multiple database instances. This parameter and `DBInstanceId` cannot both be empty. If both are specified, this parameter takes precedence.
	//
	// example:
	//
	// gp-ws-*****
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s QueryCollectionDataRequest) String() string {
	return dara.Prettify(s)
}

func (s QueryCollectionDataRequest) GoString() string {
	return s.String()
}

func (s *QueryCollectionDataRequest) GetCollection() *string {
	return s.Collection
}

func (s *QueryCollectionDataRequest) GetContent() *string {
	return s.Content
}

func (s *QueryCollectionDataRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *QueryCollectionDataRequest) GetFilter() *string {
	return s.Filter
}

func (s *QueryCollectionDataRequest) GetHybridSearch() *string {
	return s.HybridSearch
}

func (s *QueryCollectionDataRequest) GetHybridSearchArgs() map[string]map[string]interface{} {
	return s.HybridSearchArgs
}

func (s *QueryCollectionDataRequest) GetIncludeMetadataFields() *string {
	return s.IncludeMetadataFields
}

func (s *QueryCollectionDataRequest) GetIncludeValues() *bool {
	return s.IncludeValues
}

func (s *QueryCollectionDataRequest) GetMetrics() *string {
	return s.Metrics
}

func (s *QueryCollectionDataRequest) GetNamespace() *string {
	return s.Namespace
}

func (s *QueryCollectionDataRequest) GetNamespacePassword() *string {
	return s.NamespacePassword
}

func (s *QueryCollectionDataRequest) GetOffset() *int32 {
	return s.Offset
}

func (s *QueryCollectionDataRequest) GetOrderBy() *string {
	return s.OrderBy
}

func (s *QueryCollectionDataRequest) GetOwnerId() *int64 {
	return s.OwnerId
}

func (s *QueryCollectionDataRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *QueryCollectionDataRequest) GetRelationalTableFilter() *QueryCollectionDataRequestRelationalTableFilter {
	return s.RelationalTableFilter
}

func (s *QueryCollectionDataRequest) GetSparseVector() *QueryCollectionDataRequestSparseVector {
	return s.SparseVector
}

func (s *QueryCollectionDataRequest) GetTopK() *int64 {
	return s.TopK
}

func (s *QueryCollectionDataRequest) GetVector() []*float64 {
	return s.Vector
}

func (s *QueryCollectionDataRequest) GetWorkspaceId() *string {
	return s.WorkspaceId
}

func (s *QueryCollectionDataRequest) SetCollection(v string) *QueryCollectionDataRequest {
	s.Collection = &v
	return s
}

func (s *QueryCollectionDataRequest) SetContent(v string) *QueryCollectionDataRequest {
	s.Content = &v
	return s
}

func (s *QueryCollectionDataRequest) SetDBInstanceId(v string) *QueryCollectionDataRequest {
	s.DBInstanceId = &v
	return s
}

func (s *QueryCollectionDataRequest) SetFilter(v string) *QueryCollectionDataRequest {
	s.Filter = &v
	return s
}

func (s *QueryCollectionDataRequest) SetHybridSearch(v string) *QueryCollectionDataRequest {
	s.HybridSearch = &v
	return s
}

func (s *QueryCollectionDataRequest) SetHybridSearchArgs(v map[string]map[string]interface{}) *QueryCollectionDataRequest {
	s.HybridSearchArgs = v
	return s
}

func (s *QueryCollectionDataRequest) SetIncludeMetadataFields(v string) *QueryCollectionDataRequest {
	s.IncludeMetadataFields = &v
	return s
}

func (s *QueryCollectionDataRequest) SetIncludeValues(v bool) *QueryCollectionDataRequest {
	s.IncludeValues = &v
	return s
}

func (s *QueryCollectionDataRequest) SetMetrics(v string) *QueryCollectionDataRequest {
	s.Metrics = &v
	return s
}

func (s *QueryCollectionDataRequest) SetNamespace(v string) *QueryCollectionDataRequest {
	s.Namespace = &v
	return s
}

func (s *QueryCollectionDataRequest) SetNamespacePassword(v string) *QueryCollectionDataRequest {
	s.NamespacePassword = &v
	return s
}

func (s *QueryCollectionDataRequest) SetOffset(v int32) *QueryCollectionDataRequest {
	s.Offset = &v
	return s
}

func (s *QueryCollectionDataRequest) SetOrderBy(v string) *QueryCollectionDataRequest {
	s.OrderBy = &v
	return s
}

func (s *QueryCollectionDataRequest) SetOwnerId(v int64) *QueryCollectionDataRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryCollectionDataRequest) SetRegionId(v string) *QueryCollectionDataRequest {
	s.RegionId = &v
	return s
}

func (s *QueryCollectionDataRequest) SetRelationalTableFilter(v *QueryCollectionDataRequestRelationalTableFilter) *QueryCollectionDataRequest {
	s.RelationalTableFilter = v
	return s
}

func (s *QueryCollectionDataRequest) SetSparseVector(v *QueryCollectionDataRequestSparseVector) *QueryCollectionDataRequest {
	s.SparseVector = v
	return s
}

func (s *QueryCollectionDataRequest) SetTopK(v int64) *QueryCollectionDataRequest {
	s.TopK = &v
	return s
}

func (s *QueryCollectionDataRequest) SetVector(v []*float64) *QueryCollectionDataRequest {
	s.Vector = v
	return s
}

func (s *QueryCollectionDataRequest) SetWorkspaceId(v string) *QueryCollectionDataRequest {
	s.WorkspaceId = &v
	return s
}

func (s *QueryCollectionDataRequest) Validate() error {
	return dara.Validate(s)
}

type QueryCollectionDataRequestRelationalTableFilter struct {
	// The Metadata field of the vector collection, used to associate with the fields in the vector table.
	//
	// example:
	//
	// doc_id
	CollectionMetadataField *string `json:"CollectionMetadataField,omitempty" xml:"CollectionMetadataField,omitempty"`
	// The filtering condition for the relational table.
	//
	// example:
	//
	// tags @> ARRAY[\\"art\\"]
	Condition *string `json:"Condition,omitempty" xml:"Condition,omitempty"`
	// The field in the relational table, used to associate with the Metadata field of the vector collection.
	//
	// example:
	//
	// id
	TableField *string `json:"TableField,omitempty" xml:"TableField,omitempty"`
	// The name of the relational table.
	//
	// example:
	//
	// my_rds_table
	TableName *string `json:"TableName,omitempty" xml:"TableName,omitempty"`
}

func (s QueryCollectionDataRequestRelationalTableFilter) String() string {
	return dara.Prettify(s)
}

func (s QueryCollectionDataRequestRelationalTableFilter) GoString() string {
	return s.String()
}

func (s *QueryCollectionDataRequestRelationalTableFilter) GetCollectionMetadataField() *string {
	return s.CollectionMetadataField
}

func (s *QueryCollectionDataRequestRelationalTableFilter) GetCondition() *string {
	return s.Condition
}

func (s *QueryCollectionDataRequestRelationalTableFilter) GetTableField() *string {
	return s.TableField
}

func (s *QueryCollectionDataRequestRelationalTableFilter) GetTableName() *string {
	return s.TableName
}

func (s *QueryCollectionDataRequestRelationalTableFilter) SetCollectionMetadataField(v string) *QueryCollectionDataRequestRelationalTableFilter {
	s.CollectionMetadataField = &v
	return s
}

func (s *QueryCollectionDataRequestRelationalTableFilter) SetCondition(v string) *QueryCollectionDataRequestRelationalTableFilter {
	s.Condition = &v
	return s
}

func (s *QueryCollectionDataRequestRelationalTableFilter) SetTableField(v string) *QueryCollectionDataRequestRelationalTableFilter {
	s.TableField = &v
	return s
}

func (s *QueryCollectionDataRequestRelationalTableFilter) SetTableName(v string) *QueryCollectionDataRequestRelationalTableFilter {
	s.TableName = &v
	return s
}

func (s *QueryCollectionDataRequestRelationalTableFilter) Validate() error {
	return dara.Validate(s)
}

type QueryCollectionDataRequestSparseVector struct {
	Indices []*int64   `json:"Indices,omitempty" xml:"Indices,omitempty" type:"Repeated"`
	Values  []*float64 `json:"Values,omitempty" xml:"Values,omitempty" type:"Repeated"`
}

func (s QueryCollectionDataRequestSparseVector) String() string {
	return dara.Prettify(s)
}

func (s QueryCollectionDataRequestSparseVector) GoString() string {
	return s.String()
}

func (s *QueryCollectionDataRequestSparseVector) GetIndices() []*int64 {
	return s.Indices
}

func (s *QueryCollectionDataRequestSparseVector) GetValues() []*float64 {
	return s.Values
}

func (s *QueryCollectionDataRequestSparseVector) SetIndices(v []*int64) *QueryCollectionDataRequestSparseVector {
	s.Indices = v
	return s
}

func (s *QueryCollectionDataRequestSparseVector) SetValues(v []*float64) *QueryCollectionDataRequestSparseVector {
	s.Values = v
	return s
}

func (s *QueryCollectionDataRequestSparseVector) Validate() error {
	return dara.Validate(s)
}

type iQueryCollectionDataShrinkRequest interface {
	dara.Model
	String() string
	GoString() string
	SetCollection(v string) *QueryCollectionDataShrinkRequest
	GetCollection() *string
	SetContent(v string) *QueryCollectionDataShrinkRequest
	GetContent() *string
	SetDBInstanceId(v string) *QueryCollectionDataShrinkRequest
	GetDBInstanceId() *string
	SetFilter(v string) *QueryCollectionDataShrinkRequest
	GetFilter() *string
	SetHybridSearch(v string) *QueryCollectionDataShrinkRequest
	GetHybridSearch() *string
	SetHybridSearchArgsShrink(v string) *QueryCollectionDataShrinkRequest
	GetHybridSearchArgsShrink() *string
	SetIncludeMetadataFields(v string) *QueryCollectionDataShrinkRequest
	GetIncludeMetadataFields() *string
	SetIncludeValues(v bool) *QueryCollectionDataShrinkRequest
	GetIncludeValues() *bool
	SetMetrics(v string) *QueryCollectionDataShrinkRequest
	GetMetrics() *string
	SetNamespace(v string) *QueryCollectionDataShrinkRequest
	GetNamespace() *string
	SetNamespacePassword(v string) *QueryCollectionDataShrinkRequest
	GetNamespacePassword() *string
	SetOffset(v int32) *QueryCollectionDataShrinkRequest
	GetOffset() *int32
	SetOrderBy(v string) *QueryCollectionDataShrinkRequest
	GetOrderBy() *string
	SetOwnerId(v int64) *QueryCollectionDataShrinkRequest
	GetOwnerId() *int64
	SetRegionId(v string) *QueryCollectionDataShrinkRequest
	GetRegionId() *string
	SetRelationalTableFilterShrink(v string) *QueryCollectionDataShrinkRequest
	GetRelationalTableFilterShrink() *string
	SetSparseVectorShrink(v string) *QueryCollectionDataShrinkRequest
	GetSparseVectorShrink() *string
	SetTopK(v int64) *QueryCollectionDataShrinkRequest
	GetTopK() *int64
	SetVectorShrink(v string) *QueryCollectionDataShrinkRequest
	GetVectorShrink() *string
	SetWorkspaceId(v string) *QueryCollectionDataShrinkRequest
	GetWorkspaceId() *string
}

type QueryCollectionDataShrinkRequest struct {
	// Collection name.
	//
	// > You can use the [ListCollections](https://help.aliyun.com/document_detail/2401503.html) API to view the list.
	//
	// This parameter is required.
	//
	// example:
	//
	// document
	Collection *string `json:"Collection,omitempty" xml:"Collection,omitempty"`
	// Content for full-text search. When this value is empty, only vector search is used; when it is not empty, both vector and full-text search are used.
	//
	// > The Vector parameter cannot be empty at the same time.
	//
	// example:
	//
	// hello_world
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// Instance ID.
	//
	// > You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) API to view details of all AnalyticDB PostgreSQL instances in the target region, including the instance ID.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// Filter conditions for the data to be queried, in SQL WHERE format. It is an expression that returns a boolean value (true or false). Conditions can be simple comparison operators such as equal (=), not equal (<> or !=), greater than (>), less than (<), greater than or equal to (>=), less than or equal to (<=), or more complex expressions combined with logical operators (AND, OR, NOT), as well as conditions using keywords like IN, BETWEEN, and LIKE.
	//
	// >
	//
	// > - For detailed syntax, refer to: https://www.postgresqltutorial.com/postgresql-tutorial/postgresql-where/
	//
	// example:
	//
	// response > 200
	Filter *string `json:"Filter,omitempty" xml:"Filter,omitempty"`
	// Dual-path recall algorithm, default is empty (i.e., directly compare and sort the scores of vectors and full-text).
	//
	// Available values:
	//
	// - RRF: Reciprocal rank fusion, with a parameter k controlling the fusion effect. See HybridSearchArgs configuration for details;
	//
	// - Weight: Weighted sorting, using a parameter alpha to control the score ratio of vectors and full-text, then sorting. See HybridSearchArgs configuration for details;
	//
	// - Cascaded: Perform full-text search first, then vector search based on the full-text results;
	//
	// example:
	//
	// RRF
	HybridSearch *string `json:"HybridSearch,omitempty" xml:"HybridSearch,omitempty"`
	// The parameters of the two-way retrieval algorithm. The following parameters are supported:
	//
	// 	- When HybridSearch is set to RRF, the scores are calculated by using the `1/(k+rank_i)` formula. The constant k is a positive integer that is greater than 1.
	//
	// <!---->
	//
	//     {
	//
	//        "RRF": {
	//
	//         "k": 60
	//
	//        }
	//
	//     }
	//
	// 	- When HybridSearch is set to Weight, the scores are calculated by using the `alpha 	- vector_score + (1-alpha) 	- text_score` formula. The alpha parameter specifies the proportion of the vector search score and the full-text search score and ranges from 0 to 1. A value of 0 specifies full-text search and a value of 1 specifies vector search.
	//
	// <!---->
	//
	//     {
	//
	//        "Weight": {
	//
	//         "alpha": 0.5
	//
	//        }
	//
	//     }
	HybridSearchArgsShrink *string `json:"HybridSearchArgs,omitempty" xml:"HybridSearchArgs,omitempty"`
	// Defaults to empty, indicating the metadata fields to return. Multiple fields should be separated by commas.
	//
	// example:
	//
	// title,content
	IncludeMetadataFields *string `json:"IncludeMetadataFields,omitempty" xml:"IncludeMetadataFields,omitempty"`
	// Whether to return vector data. Value descriptions:
	//
	// - **true**: Return vector data.
	//
	// - **false**: Do not return vector data, used for full-text search scenarios.
	//
	// example:
	//
	// true
	IncludeValues *bool `json:"IncludeValues,omitempty" xml:"IncludeValues,omitempty"`
	// Similarity algorithm used during retrieval. Value descriptions:
	//
	// - **l2**: Euclidean distance.
	//
	// - **ip**: Inner product (dot product) distance.
	//
	// - **cosine**: Cosine similarity.
	//
	// > If this value is empty, the algorithm specified during index creation is used.
	//
	// example:
	//
	// cosine
	Metrics *string `json:"Metrics,omitempty" xml:"Metrics,omitempty"`
	// Namespace.
	//
	// > You can use the [ListNamespaces](https://help.aliyun.com/document_detail/2401502.html) API to view the list.
	//
	// example:
	//
	// mynamespace
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// Password for the namespace.
	//
	// This parameter is required.
	//
	// example:
	//
	// testpassword
	NamespacePassword *string `json:"NamespacePassword,omitempty" xml:"NamespacePassword,omitempty"`
	// Defaults to empty, indicating the starting point for pagination queries. Does not support hybrid search scenarios.
	//
	// The value must be >= 0. When this value is not empty, it will return `Total`, which indicates the total number of hits. This parameter works with `TopK`. For example, to paginate 20 and retrieve chunks with `chunk_id` from 0 to 44, you need to make three requests:
	//
	// - `Offset=0, TopK=20` returns `chunk_id` 0~19
	//
	// - `Offset=20, TopK=20` returns `chunk_id` 20~39
	//
	// - `Offset=30, TopK=20` returns `chunk_id` 40~44
	//
	// example:
	//
	// 0
	Offset *int32 `json:"Offset,omitempty" xml:"Offset,omitempty"`
	// Defaults to empty, indicating the field for sorting. Does not support hybrid search scenarios.
	//
	// The field must belong to metadata or be a default field in the table, such as `id`. The supported formats are:
	//
	// - A single field, e.g., `chunk_id`;
	//
	// - Multiple fields, separated by commas, e.g., `block_id, chunk_id`;
	//
	// - Supports reverse order, e.g., `block_id DESC, chunk_id DESC`;
	//
	// example:
	//
	// chunk_id
	OrderBy *string `json:"OrderBy,omitempty" xml:"OrderBy,omitempty"`
	OwnerId *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// Region ID where the instance is located.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// Uses another relational table to filter vector data (similar to a Join function).
	//
	// > Data from the relational table can be returned by setting the `IncludeMetadataFields` parameter. For example, `rds_table_name.id` indicates returning the `id` field from the relational table.
	RelationalTableFilterShrink *string `json:"RelationalTableFilter,omitempty" xml:"RelationalTableFilter,omitempty"`
	SparseVectorShrink          *string `json:"SparseVector,omitempty" xml:"SparseVector,omitempty"`
	// Set the number of top results to return.
	//
	// This parameter is required.
	//
	// example:
	//
	// 10
	TopK *int64 `json:"TopK,omitempty" xml:"TopK,omitempty"`
	// Vector data, with the same dimension as specified in the [CreateCollection](https://help.aliyun.com/document_detail/2401497.html) API.
	//
	// > When the vector is empty, only full-text search results are returned.
	VectorShrink *string `json:"Vector,omitempty" xml:"Vector,omitempty"`
	// The ID of the Workspace composed of multiple database instances. This parameter and `DBInstanceId` cannot both be empty. If both are specified, this parameter takes precedence.
	//
	// example:
	//
	// gp-ws-*****
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s QueryCollectionDataShrinkRequest) String() string {
	return dara.Prettify(s)
}

func (s QueryCollectionDataShrinkRequest) GoString() string {
	return s.String()
}

func (s *QueryCollectionDataShrinkRequest) GetCollection() *string {
	return s.Collection
}

func (s *QueryCollectionDataShrinkRequest) GetContent() *string {
	return s.Content
}

func (s *QueryCollectionDataShrinkRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *QueryCollectionDataShrinkRequest) GetFilter() *string {
	return s.Filter
}

func (s *QueryCollectionDataShrinkRequest) GetHybridSearch() *string {
	return s.HybridSearch
}

func (s *QueryCollectionDataShrinkRequest) GetHybridSearchArgsShrink() *string {
	return s.HybridSearchArgsShrink
}

func (s *QueryCollectionDataShrinkRequest) GetIncludeMetadataFields() *string {
	return s.IncludeMetadataFields
}

func (s *QueryCollectionDataShrinkRequest) GetIncludeValues() *bool {
	return s.IncludeValues
}

func (s *QueryCollectionDataShrinkRequest) GetMetrics() *string {
	return s.Metrics
}

func (s *QueryCollectionDataShrinkRequest) GetNamespace() *string {
	return s.Namespace
}

func (s *QueryCollectionDataShrinkRequest) GetNamespacePassword() *string {
	return s.NamespacePassword
}

func (s *QueryCollectionDataShrinkRequest) GetOffset() *int32 {
	return s.Offset
}

func (s *QueryCollectionDataShrinkRequest) GetOrderBy() *string {
	return s.OrderBy
}

func (s *QueryCollectionDataShrinkRequest) GetOwnerId() *int64 {
	return s.OwnerId
}

func (s *QueryCollectionDataShrinkRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *QueryCollectionDataShrinkRequest) GetRelationalTableFilterShrink() *string {
	return s.RelationalTableFilterShrink
}

func (s *QueryCollectionDataShrinkRequest) GetSparseVectorShrink() *string {
	return s.SparseVectorShrink
}

func (s *QueryCollectionDataShrinkRequest) GetTopK() *int64 {
	return s.TopK
}

func (s *QueryCollectionDataShrinkRequest) GetVectorShrink() *string {
	return s.VectorShrink
}

func (s *QueryCollectionDataShrinkRequest) GetWorkspaceId() *string {
	return s.WorkspaceId
}

func (s *QueryCollectionDataShrinkRequest) SetCollection(v string) *QueryCollectionDataShrinkRequest {
	s.Collection = &v
	return s
}

func (s *QueryCollectionDataShrinkRequest) SetContent(v string) *QueryCollectionDataShrinkRequest {
	s.Content = &v
	return s
}

func (s *QueryCollectionDataShrinkRequest) SetDBInstanceId(v string) *QueryCollectionDataShrinkRequest {
	s.DBInstanceId = &v
	return s
}

func (s *QueryCollectionDataShrinkRequest) SetFilter(v string) *QueryCollectionDataShrinkRequest {
	s.Filter = &v
	return s
}

func (s *QueryCollectionDataShrinkRequest) SetHybridSearch(v string) *QueryCollectionDataShrinkRequest {
	s.HybridSearch = &v
	return s
}

func (s *QueryCollectionDataShrinkRequest) SetHybridSearchArgsShrink(v string) *QueryCollectionDataShrinkRequest {
	s.HybridSearchArgsShrink = &v
	return s
}

func (s *QueryCollectionDataShrinkRequest) SetIncludeMetadataFields(v string) *QueryCollectionDataShrinkRequest {
	s.IncludeMetadataFields = &v
	return s
}

func (s *QueryCollectionDataShrinkRequest) SetIncludeValues(v bool) *QueryCollectionDataShrinkRequest {
	s.IncludeValues = &v
	return s
}

func (s *QueryCollectionDataShrinkRequest) SetMetrics(v string) *QueryCollectionDataShrinkRequest {
	s.Metrics = &v
	return s
}

func (s *QueryCollectionDataShrinkRequest) SetNamespace(v string) *QueryCollectionDataShrinkRequest {
	s.Namespace = &v
	return s
}

func (s *QueryCollectionDataShrinkRequest) SetNamespacePassword(v string) *QueryCollectionDataShrinkRequest {
	s.NamespacePassword = &v
	return s
}

func (s *QueryCollectionDataShrinkRequest) SetOffset(v int32) *QueryCollectionDataShrinkRequest {
	s.Offset = &v
	return s
}

func (s *QueryCollectionDataShrinkRequest) SetOrderBy(v string) *QueryCollectionDataShrinkRequest {
	s.OrderBy = &v
	return s
}

func (s *QueryCollectionDataShrinkRequest) SetOwnerId(v int64) *QueryCollectionDataShrinkRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryCollectionDataShrinkRequest) SetRegionId(v string) *QueryCollectionDataShrinkRequest {
	s.RegionId = &v
	return s
}

func (s *QueryCollectionDataShrinkRequest) SetRelationalTableFilterShrink(v string) *QueryCollectionDataShrinkRequest {
	s.RelationalTableFilterShrink = &v
	return s
}

func (s *QueryCollectionDataShrinkRequest) SetSparseVectorShrink(v string) *QueryCollectionDataShrinkRequest {
	s.SparseVectorShrink = &v
	return s
}

func (s *QueryCollectionDataShrinkRequest) SetTopK(v int64) *QueryCollectionDataShrinkRequest {
	s.TopK = &v
	return s
}

func (s *QueryCollectionDataShrinkRequest) SetVectorShrink(v string) *QueryCollectionDataShrinkRequest {
	s.VectorShrink = &v
	return s
}

func (s *QueryCollectionDataShrinkRequest) SetWorkspaceId(v string) *QueryCollectionDataShrinkRequest {
	s.WorkspaceId = &v
	return s
}

func (s *QueryCollectionDataShrinkRequest) Validate() error {
	return dara.Validate(s)
}

type iQueryCollectionDataResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetMatches(v *QueryCollectionDataResponseBodyMatches) *QueryCollectionDataResponseBody
	GetMatches() *QueryCollectionDataResponseBodyMatches
	SetMessage(v string) *QueryCollectionDataResponseBody
	GetMessage() *string
	SetRequestId(v string) *QueryCollectionDataResponseBody
	GetRequestId() *string
	SetStatus(v string) *QueryCollectionDataResponseBody
	GetStatus() *string
	SetTotal(v int32) *QueryCollectionDataResponseBody
	GetTotal() *int32
}

type QueryCollectionDataResponseBody struct {
	// Data list.
	Matches *QueryCollectionDataResponseBodyMatches `json:"Matches,omitempty" xml:"Matches,omitempty" type:"Struct"`
	// Detailed information when the request fails.
	//
	// example:
	//
	// 0.1234
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Status, with the following values:
	//
	// - **success**: Success.
	//
	// - **fail**: Failure.
	//
	// example:
	//
	// success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// Only returned when the Offset is not 0, this value represents the total number of hits for the search criteria.
	//
	// example:
	//
	// 100
	Total *int32 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s QueryCollectionDataResponseBody) String() string {
	return dara.Prettify(s)
}

func (s QueryCollectionDataResponseBody) GoString() string {
	return s.String()
}

func (s *QueryCollectionDataResponseBody) GetMatches() *QueryCollectionDataResponseBodyMatches {
	return s.Matches
}

func (s *QueryCollectionDataResponseBody) GetMessage() *string {
	return s.Message
}

func (s *QueryCollectionDataResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *QueryCollectionDataResponseBody) GetStatus() *string {
	return s.Status
}

func (s *QueryCollectionDataResponseBody) GetTotal() *int32 {
	return s.Total
}

func (s *QueryCollectionDataResponseBody) SetMatches(v *QueryCollectionDataResponseBodyMatches) *QueryCollectionDataResponseBody {
	s.Matches = v
	return s
}

func (s *QueryCollectionDataResponseBody) SetMessage(v string) *QueryCollectionDataResponseBody {
	s.Message = &v
	return s
}

func (s *QueryCollectionDataResponseBody) SetRequestId(v string) *QueryCollectionDataResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryCollectionDataResponseBody) SetStatus(v string) *QueryCollectionDataResponseBody {
	s.Status = &v
	return s
}

func (s *QueryCollectionDataResponseBody) SetTotal(v int32) *QueryCollectionDataResponseBody {
	s.Total = &v
	return s
}

func (s *QueryCollectionDataResponseBody) Validate() error {
	return dara.Validate(s)
}

type QueryCollectionDataResponseBodyMatches struct {
	Match []*QueryCollectionDataResponseBodyMatchesMatch `json:"match,omitempty" xml:"match,omitempty" type:"Repeated"`
}

func (s QueryCollectionDataResponseBodyMatches) String() string {
	return dara.Prettify(s)
}

func (s QueryCollectionDataResponseBodyMatches) GoString() string {
	return s.String()
}

func (s *QueryCollectionDataResponseBodyMatches) GetMatch() []*QueryCollectionDataResponseBodyMatchesMatch {
	return s.Match
}

func (s *QueryCollectionDataResponseBodyMatches) SetMatch(v []*QueryCollectionDataResponseBodyMatchesMatch) *QueryCollectionDataResponseBodyMatches {
	s.Match = v
	return s
}

func (s *QueryCollectionDataResponseBodyMatches) Validate() error {
	return dara.Validate(s)
}

type QueryCollectionDataResponseBodyMatchesMatch struct {
	// The unique ID of the vector data.
	//
	// example:
	//
	// doca-1234
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// Metadata.
	Metadata map[string]*string `json:"Metadata,omitempty" xml:"Metadata,omitempty"`
	// The similarity score of this data, which is related to the algorithm `(l2/ip/cosine)` specified when creating the index.
	//
	// example:
	//
	// 0.12345
	Score *float64 `json:"Score,omitempty" xml:"Score,omitempty"`
	// List of vector data.
	Values *QueryCollectionDataResponseBodyMatchesMatchValues `json:"Values,omitempty" xml:"Values,omitempty" type:"Struct"`
}

func (s QueryCollectionDataResponseBodyMatchesMatch) String() string {
	return dara.Prettify(s)
}

func (s QueryCollectionDataResponseBodyMatchesMatch) GoString() string {
	return s.String()
}

func (s *QueryCollectionDataResponseBodyMatchesMatch) GetId() *string {
	return s.Id
}

func (s *QueryCollectionDataResponseBodyMatchesMatch) GetMetadata() map[string]*string {
	return s.Metadata
}

func (s *QueryCollectionDataResponseBodyMatchesMatch) GetScore() *float64 {
	return s.Score
}

func (s *QueryCollectionDataResponseBodyMatchesMatch) GetValues() *QueryCollectionDataResponseBodyMatchesMatchValues {
	return s.Values
}

func (s *QueryCollectionDataResponseBodyMatchesMatch) SetId(v string) *QueryCollectionDataResponseBodyMatchesMatch {
	s.Id = &v
	return s
}

func (s *QueryCollectionDataResponseBodyMatchesMatch) SetMetadata(v map[string]*string) *QueryCollectionDataResponseBodyMatchesMatch {
	s.Metadata = v
	return s
}

func (s *QueryCollectionDataResponseBodyMatchesMatch) SetScore(v float64) *QueryCollectionDataResponseBodyMatchesMatch {
	s.Score = &v
	return s
}

func (s *QueryCollectionDataResponseBodyMatchesMatch) SetValues(v *QueryCollectionDataResponseBodyMatchesMatchValues) *QueryCollectionDataResponseBodyMatchesMatch {
	s.Values = v
	return s
}

func (s *QueryCollectionDataResponseBodyMatchesMatch) Validate() error {
	return dara.Validate(s)
}

type QueryCollectionDataResponseBodyMatchesMatchValues struct {
	Value []*float64 `json:"value,omitempty" xml:"value,omitempty" type:"Repeated"`
}

func (s QueryCollectionDataResponseBodyMatchesMatchValues) String() string {
	return dara.Prettify(s)
}

func (s QueryCollectionDataResponseBodyMatchesMatchValues) GoString() string {
	return s.String()
}

func (s *QueryCollectionDataResponseBodyMatchesMatchValues) GetValue() []*float64 {
	return s.Value
}

func (s *QueryCollectionDataResponseBodyMatchesMatchValues) SetValue(v []*float64) *QueryCollectionDataResponseBodyMatchesMatchValues {
	s.Value = v
	return s
}

func (s *QueryCollectionDataResponseBodyMatchesMatchValues) Validate() error {
	return dara.Validate(s)
}

type iQueryCollectionDataResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *QueryCollectionDataResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *QueryCollectionDataResponse
	GetStatusCode() *int32
	SetBody(v *QueryCollectionDataResponseBody) *QueryCollectionDataResponse
	GetBody() *QueryCollectionDataResponseBody
}

type QueryCollectionDataResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryCollectionDataResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryCollectionDataResponse) String() string {
	return dara.Prettify(s)
}

func (s QueryCollectionDataResponse) GoString() string {
	return s.String()
}

func (s *QueryCollectionDataResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *QueryCollectionDataResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *QueryCollectionDataResponse) GetBody() *QueryCollectionDataResponseBody {
	return s.Body
}

func (s *QueryCollectionDataResponse) SetHeaders(v map[string]*string) *QueryCollectionDataResponse {
	s.Headers = v
	return s
}

func (s *QueryCollectionDataResponse) SetStatusCode(v int32) *QueryCollectionDataResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryCollectionDataResponse) SetBody(v *QueryCollectionDataResponseBody) *QueryCollectionDataResponse {
	s.Body = v
	return s
}

func (s *QueryCollectionDataResponse) Validate() error {
	return dara.Validate(s)
}

type iQueryContentRequest interface {
	dara.Model
	String() string
	GoString() string
	SetCollection(v string) *QueryContentRequest
	GetCollection() *string
	SetContent(v string) *QueryContentRequest
	GetContent() *string
	SetDBInstanceId(v string) *QueryContentRequest
	GetDBInstanceId() *string
	SetFileName(v string) *QueryContentRequest
	GetFileName() *string
	SetFileUrl(v string) *QueryContentRequest
	GetFileUrl() *string
	SetFilter(v string) *QueryContentRequest
	GetFilter() *string
	SetHybridSearch(v string) *QueryContentRequest
	GetHybridSearch() *string
	SetHybridSearchArgs(v map[string]map[string]interface{}) *QueryContentRequest
	GetHybridSearchArgs() map[string]map[string]interface{}
	SetIncludeFileUrl(v bool) *QueryContentRequest
	GetIncludeFileUrl() *bool
	SetIncludeMetadataFields(v string) *QueryContentRequest
	GetIncludeMetadataFields() *string
	SetIncludeVector(v bool) *QueryContentRequest
	GetIncludeVector() *bool
	SetMetrics(v string) *QueryContentRequest
	GetMetrics() *string
	SetNamespace(v string) *QueryContentRequest
	GetNamespace() *string
	SetNamespacePassword(v string) *QueryContentRequest
	GetNamespacePassword() *string
	SetOwnerId(v int64) *QueryContentRequest
	GetOwnerId() *int64
	SetRecallWindow(v []*int32) *QueryContentRequest
	GetRecallWindow() []*int32
	SetRegionId(v string) *QueryContentRequest
	GetRegionId() *string
	SetRerankFactor(v float64) *QueryContentRequest
	GetRerankFactor() *float64
	SetTopK(v int32) *QueryContentRequest
	GetTopK() *int32
	SetUseFullTextRetrieval(v bool) *QueryContentRequest
	GetUseFullTextRetrieval() *bool
}

type QueryContentRequest struct {
	// Document collection name.
	//
	// > Created by the [CreateDocumentCollection](https://help.aliyun.com/document_detail/2618448.html) API. You can use the [ListDocumentCollections](https://help.aliyun.com/document_detail/2618452.html) API to view the list of created document collections.
	//
	// This parameter is required.
	//
	// example:
	//
	// document
	Collection *string `json:"Collection,omitempty" xml:"Collection,omitempty"`
	Content    *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// Instance ID.
	//
	// > You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) API to view details of all AnalyticDB for PostgreSQL instances in the target region, including the instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// In image search scenarios, the source file name of the image to be searched.
	//
	// > The image file must have a file extension. Currently supported image extensions: bmp, jpg, jpeg, png, tiff.
	//
	// example:
	//
	// test.jpg
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// In image search scenarios, the publicly accessible URL of the image file.
	//
	// > The image file must have a file extension. Currently supported image extensions: bmp, jpg, jpeg, png, tiff.
	//
	// example:
	//
	// https://xx/myImage.jpg
	FileUrl *string `json:"FileUrl,omitempty" xml:"FileUrl,omitempty"`
	// Filter condition for the data to be queried, in SQL WHERE format. It is an expression that returns a boolean value (true or false). The conditions can be simple comparison operators such as equal (=), not equal (<> or !=), greater than (>), less than (<), greater than or equal to (>=), less than or equal to (<=), or more complex expressions combined with logical operators (AND, OR, NOT), and conditions using keywords like IN, BETWEEN, LIKE, etc.
	//
	// >
	//
	// > - For detailed syntax, refer to: https://www.postgresqltutorial.com/postgresql-tutorial/postgresql-where/
	//
	// example:
	//
	// title = \\"test\\" AND name like \\"test%\\"
	Filter *string `json:"Filter,omitempty" xml:"Filter,omitempty"`
	// Dual recall algorithm, default is empty (i.e., directly compare and sort the scores of vectors and full text).
	//
	// Available values:
	//
	// - RRF: Reciprocal rank fusion, with a parameter k controlling the fusion effect. See HybridSearchArgs configuration for details;
	//
	// - Weight: Weighted ranking, using a parameter alpha to control the weight of vector and full-text scores, then sorting. See HybridSearchArgs configuration for details;
	//
	// - Cascaded: Perform full-text retrieval first, then vector retrieval on top of it;
	//
	// example:
	//
	// RRF
	HybridSearch *string `json:"HybridSearch,omitempty" xml:"HybridSearch,omitempty"`
	// The parameters of the two-way retrieval algorithm. The following parameters are supported:
	//
	// 	- When HybridSearch is set to RRF, the scores are calculated by using the `1/(k+rank_i)` formula. The constant k is a positive integer that is greater than 1.
	//
	// <!---->
	//
	//     {
	//
	//        "RRF": {
	//
	//         "k": 60
	//
	//        }
	//
	//     }
	//
	// 	- When HybridSearch is set to Weight, the scores are calculated by using the `alpha 	- vector_score + (1-alpha) 	- text_score` formula. The alpha parameter specifies the proportion of the vector search score and the full-text search score and ranges from 0 to 1. A value of 0 specifies full-text search and a value of 1 specifies vector search.
	//
	// <!---->
	//
	//     {
	//
	//        "Weight": {
	//
	//         "alpha": 0.5
	//
	//        }
	//
	//     }
	HybridSearchArgs map[string]map[string]interface{} `json:"HybridSearchArgs,omitempty" xml:"HybridSearchArgs,omitempty"`
	// Specifies whether to return the URL of the document. Default value: false.
	//
	// example:
	//
	// false
	IncludeFileUrl *bool `json:"IncludeFileUrl,omitempty" xml:"IncludeFileUrl,omitempty"`
	// The metadata fields to be returned. Separate multiple fields with commas (,). This parameter is empty by default.
	//
	// example:
	//
	// title,page
	IncludeMetadataFields *string `json:"IncludeMetadataFields,omitempty" xml:"IncludeMetadataFields,omitempty"`
	// Whether to return vectors. Default is false.
	//
	// > - **false**: Do not return vectors.
	//
	// > - **true**: Return vectors.
	//
	// example:
	//
	// true
	IncludeVector *bool `json:"IncludeVector,omitempty" xml:"IncludeVector,omitempty"`
	// Similarity algorithm used during retrieval. If this value is empty, the algorithm specified at the time of knowledge base creation is used. It is recommended not to set this unless there is a specific need.
	//
	// > Value description:
	//
	// > - **l2**: Euclidean distance.
	//
	// > - **ip**: Inner product (dot product) distance.
	//
	// > - **cosine**: Cosine similarity.
	//
	// example:
	//
	// cosine
	Metrics *string `json:"Metrics,omitempty" xml:"Metrics,omitempty"`
	// Namespace, default is public.
	//
	// > You can create a namespace using the [CreateNamespace](https://help.aliyun.com/document_detail/2401495.html) API and view the list of namespaces using the [ListNamespaces](https://help.aliyun.com/document_detail/2401502.html) API.
	//
	// example:
	//
	// mynamespace
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// Password for the namespace.
	//
	// > This value is specified in the [CreateNamespace](https://help.aliyun.com/document_detail/2401495.html) API.
	//
	// This parameter is required.
	//
	// example:
	//
	// testpassword
	NamespacePassword *string `json:"NamespacePassword,omitempty" xml:"NamespacePassword,omitempty"`
	OwnerId           *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// Recall window. When this value is not empty, it adds context to the returned search results. The format is an array of 2 elements: List<A, B>, where -10 <= A <= 0 and 0 <= B <= 10.
	//
	// > - Recommended when documents are fragmented and retrieval may lose contextual information.
	//
	// > - Re-ranking takes precedence over windowing, i.e., re-rank first, then apply windowing.
	RecallWindow []*int32 `json:"RecallWindow,omitempty" xml:"RecallWindow,omitempty" type:"Repeated"`
	// The region ID where the instance is located.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// Re-ranking factor. When this value is not empty, it will re-rank the vector search results. The value range is 1 < RerankFactor <= 5.
	//
	// > - Re-ranking is slower when documents are sparsely split.
	//
	// > - It is recommended that the re-ranked count (TopK 	- Factor, rounded up) does not exceed 50.
	//
	// example:
	//
	// 2
	RerankFactor *float64 `json:"RerankFactor,omitempty" xml:"RerankFactor,omitempty"`
	// Set the number of top results to return.
	//
	// example:
	//
	// 10
	TopK *int32 `json:"TopK,omitempty" xml:"TopK,omitempty"`
	// Whether to use full-text retrieval (dual recall). Default is false, which means only vector retrieval is used.
	//
	// example:
	//
	// true
	UseFullTextRetrieval *bool `json:"UseFullTextRetrieval,omitempty" xml:"UseFullTextRetrieval,omitempty"`
}

func (s QueryContentRequest) String() string {
	return dara.Prettify(s)
}

func (s QueryContentRequest) GoString() string {
	return s.String()
}

func (s *QueryContentRequest) GetCollection() *string {
	return s.Collection
}

func (s *QueryContentRequest) GetContent() *string {
	return s.Content
}

func (s *QueryContentRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *QueryContentRequest) GetFileName() *string {
	return s.FileName
}

func (s *QueryContentRequest) GetFileUrl() *string {
	return s.FileUrl
}

func (s *QueryContentRequest) GetFilter() *string {
	return s.Filter
}

func (s *QueryContentRequest) GetHybridSearch() *string {
	return s.HybridSearch
}

func (s *QueryContentRequest) GetHybridSearchArgs() map[string]map[string]interface{} {
	return s.HybridSearchArgs
}

func (s *QueryContentRequest) GetIncludeFileUrl() *bool {
	return s.IncludeFileUrl
}

func (s *QueryContentRequest) GetIncludeMetadataFields() *string {
	return s.IncludeMetadataFields
}

func (s *QueryContentRequest) GetIncludeVector() *bool {
	return s.IncludeVector
}

func (s *QueryContentRequest) GetMetrics() *string {
	return s.Metrics
}

func (s *QueryContentRequest) GetNamespace() *string {
	return s.Namespace
}

func (s *QueryContentRequest) GetNamespacePassword() *string {
	return s.NamespacePassword
}

func (s *QueryContentRequest) GetOwnerId() *int64 {
	return s.OwnerId
}

func (s *QueryContentRequest) GetRecallWindow() []*int32 {
	return s.RecallWindow
}

func (s *QueryContentRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *QueryContentRequest) GetRerankFactor() *float64 {
	return s.RerankFactor
}

func (s *QueryContentRequest) GetTopK() *int32 {
	return s.TopK
}

func (s *QueryContentRequest) GetUseFullTextRetrieval() *bool {
	return s.UseFullTextRetrieval
}

func (s *QueryContentRequest) SetCollection(v string) *QueryContentRequest {
	s.Collection = &v
	return s
}

func (s *QueryContentRequest) SetContent(v string) *QueryContentRequest {
	s.Content = &v
	return s
}

func (s *QueryContentRequest) SetDBInstanceId(v string) *QueryContentRequest {
	s.DBInstanceId = &v
	return s
}

func (s *QueryContentRequest) SetFileName(v string) *QueryContentRequest {
	s.FileName = &v
	return s
}

func (s *QueryContentRequest) SetFileUrl(v string) *QueryContentRequest {
	s.FileUrl = &v
	return s
}

func (s *QueryContentRequest) SetFilter(v string) *QueryContentRequest {
	s.Filter = &v
	return s
}

func (s *QueryContentRequest) SetHybridSearch(v string) *QueryContentRequest {
	s.HybridSearch = &v
	return s
}

func (s *QueryContentRequest) SetHybridSearchArgs(v map[string]map[string]interface{}) *QueryContentRequest {
	s.HybridSearchArgs = v
	return s
}

func (s *QueryContentRequest) SetIncludeFileUrl(v bool) *QueryContentRequest {
	s.IncludeFileUrl = &v
	return s
}

func (s *QueryContentRequest) SetIncludeMetadataFields(v string) *QueryContentRequest {
	s.IncludeMetadataFields = &v
	return s
}

func (s *QueryContentRequest) SetIncludeVector(v bool) *QueryContentRequest {
	s.IncludeVector = &v
	return s
}

func (s *QueryContentRequest) SetMetrics(v string) *QueryContentRequest {
	s.Metrics = &v
	return s
}

func (s *QueryContentRequest) SetNamespace(v string) *QueryContentRequest {
	s.Namespace = &v
	return s
}

func (s *QueryContentRequest) SetNamespacePassword(v string) *QueryContentRequest {
	s.NamespacePassword = &v
	return s
}

func (s *QueryContentRequest) SetOwnerId(v int64) *QueryContentRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryContentRequest) SetRecallWindow(v []*int32) *QueryContentRequest {
	s.RecallWindow = v
	return s
}

func (s *QueryContentRequest) SetRegionId(v string) *QueryContentRequest {
	s.RegionId = &v
	return s
}

func (s *QueryContentRequest) SetRerankFactor(v float64) *QueryContentRequest {
	s.RerankFactor = &v
	return s
}

func (s *QueryContentRequest) SetTopK(v int32) *QueryContentRequest {
	s.TopK = &v
	return s
}

func (s *QueryContentRequest) SetUseFullTextRetrieval(v bool) *QueryContentRequest {
	s.UseFullTextRetrieval = &v
	return s
}

func (s *QueryContentRequest) Validate() error {
	return dara.Validate(s)
}

type iQueryContentAdvanceRequest interface {
	dara.Model
	String() string
	GoString() string
	SetCollection(v string) *QueryContentAdvanceRequest
	GetCollection() *string
	SetContent(v string) *QueryContentAdvanceRequest
	GetContent() *string
	SetDBInstanceId(v string) *QueryContentAdvanceRequest
	GetDBInstanceId() *string
	SetFileName(v string) *QueryContentAdvanceRequest
	GetFileName() *string
	SetFileUrlObject(v io.Reader) *QueryContentAdvanceRequest
	GetFileUrlObject() io.Reader
	SetFilter(v string) *QueryContentAdvanceRequest
	GetFilter() *string
	SetHybridSearch(v string) *QueryContentAdvanceRequest
	GetHybridSearch() *string
	SetHybridSearchArgs(v map[string]map[string]interface{}) *QueryContentAdvanceRequest
	GetHybridSearchArgs() map[string]map[string]interface{}
	SetIncludeFileUrl(v bool) *QueryContentAdvanceRequest
	GetIncludeFileUrl() *bool
	SetIncludeMetadataFields(v string) *QueryContentAdvanceRequest
	GetIncludeMetadataFields() *string
	SetIncludeVector(v bool) *QueryContentAdvanceRequest
	GetIncludeVector() *bool
	SetMetrics(v string) *QueryContentAdvanceRequest
	GetMetrics() *string
	SetNamespace(v string) *QueryContentAdvanceRequest
	GetNamespace() *string
	SetNamespacePassword(v string) *QueryContentAdvanceRequest
	GetNamespacePassword() *string
	SetOwnerId(v int64) *QueryContentAdvanceRequest
	GetOwnerId() *int64
	SetRecallWindow(v []*int32) *QueryContentAdvanceRequest
	GetRecallWindow() []*int32
	SetRegionId(v string) *QueryContentAdvanceRequest
	GetRegionId() *string
	SetRerankFactor(v float64) *QueryContentAdvanceRequest
	GetRerankFactor() *float64
	SetTopK(v int32) *QueryContentAdvanceRequest
	GetTopK() *int32
	SetUseFullTextRetrieval(v bool) *QueryContentAdvanceRequest
	GetUseFullTextRetrieval() *bool
}

type QueryContentAdvanceRequest struct {
	// Document collection name.
	//
	// > Created by the [CreateDocumentCollection](https://help.aliyun.com/document_detail/2618448.html) API. You can use the [ListDocumentCollections](https://help.aliyun.com/document_detail/2618452.html) API to view the list of created document collections.
	//
	// This parameter is required.
	//
	// example:
	//
	// document
	Collection *string `json:"Collection,omitempty" xml:"Collection,omitempty"`
	Content    *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// Instance ID.
	//
	// > You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) API to view details of all AnalyticDB for PostgreSQL instances in the target region, including the instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// In image search scenarios, the source file name of the image to be searched.
	//
	// > The image file must have a file extension. Currently supported image extensions: bmp, jpg, jpeg, png, tiff.
	//
	// example:
	//
	// test.jpg
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// In image search scenarios, the publicly accessible URL of the image file.
	//
	// > The image file must have a file extension. Currently supported image extensions: bmp, jpg, jpeg, png, tiff.
	//
	// example:
	//
	// https://xx/myImage.jpg
	FileUrlObject io.Reader `json:"FileUrl,omitempty" xml:"FileUrl,omitempty"`
	// Filter condition for the data to be queried, in SQL WHERE format. It is an expression that returns a boolean value (true or false). The conditions can be simple comparison operators such as equal (=), not equal (<> or !=), greater than (>), less than (<), greater than or equal to (>=), less than or equal to (<=), or more complex expressions combined with logical operators (AND, OR, NOT), and conditions using keywords like IN, BETWEEN, LIKE, etc.
	//
	// >
	//
	// > - For detailed syntax, refer to: https://www.postgresqltutorial.com/postgresql-tutorial/postgresql-where/
	//
	// example:
	//
	// title = \\"test\\" AND name like \\"test%\\"
	Filter *string `json:"Filter,omitempty" xml:"Filter,omitempty"`
	// Dual recall algorithm, default is empty (i.e., directly compare and sort the scores of vectors and full text).
	//
	// Available values:
	//
	// - RRF: Reciprocal rank fusion, with a parameter k controlling the fusion effect. See HybridSearchArgs configuration for details;
	//
	// - Weight: Weighted ranking, using a parameter alpha to control the weight of vector and full-text scores, then sorting. See HybridSearchArgs configuration for details;
	//
	// - Cascaded: Perform full-text retrieval first, then vector retrieval on top of it;
	//
	// example:
	//
	// RRF
	HybridSearch *string `json:"HybridSearch,omitempty" xml:"HybridSearch,omitempty"`
	// The parameters of the two-way retrieval algorithm. The following parameters are supported:
	//
	// 	- When HybridSearch is set to RRF, the scores are calculated by using the `1/(k+rank_i)` formula. The constant k is a positive integer that is greater than 1.
	//
	// <!---->
	//
	//     {
	//
	//        "RRF": {
	//
	//         "k": 60
	//
	//        }
	//
	//     }
	//
	// 	- When HybridSearch is set to Weight, the scores are calculated by using the `alpha 	- vector_score + (1-alpha) 	- text_score` formula. The alpha parameter specifies the proportion of the vector search score and the full-text search score and ranges from 0 to 1. A value of 0 specifies full-text search and a value of 1 specifies vector search.
	//
	// <!---->
	//
	//     {
	//
	//        "Weight": {
	//
	//         "alpha": 0.5
	//
	//        }
	//
	//     }
	HybridSearchArgs map[string]map[string]interface{} `json:"HybridSearchArgs,omitempty" xml:"HybridSearchArgs,omitempty"`
	// Specifies whether to return the URL of the document. Default value: false.
	//
	// example:
	//
	// false
	IncludeFileUrl *bool `json:"IncludeFileUrl,omitempty" xml:"IncludeFileUrl,omitempty"`
	// The metadata fields to be returned. Separate multiple fields with commas (,). This parameter is empty by default.
	//
	// example:
	//
	// title,page
	IncludeMetadataFields *string `json:"IncludeMetadataFields,omitempty" xml:"IncludeMetadataFields,omitempty"`
	// Whether to return vectors. Default is false.
	//
	// > - **false**: Do not return vectors.
	//
	// > - **true**: Return vectors.
	//
	// example:
	//
	// true
	IncludeVector *bool `json:"IncludeVector,omitempty" xml:"IncludeVector,omitempty"`
	// Similarity algorithm used during retrieval. If this value is empty, the algorithm specified at the time of knowledge base creation is used. It is recommended not to set this unless there is a specific need.
	//
	// > Value description:
	//
	// > - **l2**: Euclidean distance.
	//
	// > - **ip**: Inner product (dot product) distance.
	//
	// > - **cosine**: Cosine similarity.
	//
	// example:
	//
	// cosine
	Metrics *string `json:"Metrics,omitempty" xml:"Metrics,omitempty"`
	// Namespace, default is public.
	//
	// > You can create a namespace using the [CreateNamespace](https://help.aliyun.com/document_detail/2401495.html) API and view the list of namespaces using the [ListNamespaces](https://help.aliyun.com/document_detail/2401502.html) API.
	//
	// example:
	//
	// mynamespace
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// Password for the namespace.
	//
	// > This value is specified in the [CreateNamespace](https://help.aliyun.com/document_detail/2401495.html) API.
	//
	// This parameter is required.
	//
	// example:
	//
	// testpassword
	NamespacePassword *string `json:"NamespacePassword,omitempty" xml:"NamespacePassword,omitempty"`
	OwnerId           *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// Recall window. When this value is not empty, it adds context to the returned search results. The format is an array of 2 elements: List<A, B>, where -10 <= A <= 0 and 0 <= B <= 10.
	//
	// > - Recommended when documents are fragmented and retrieval may lose contextual information.
	//
	// > - Re-ranking takes precedence over windowing, i.e., re-rank first, then apply windowing.
	RecallWindow []*int32 `json:"RecallWindow,omitempty" xml:"RecallWindow,omitempty" type:"Repeated"`
	// The region ID where the instance is located.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// Re-ranking factor. When this value is not empty, it will re-rank the vector search results. The value range is 1 < RerankFactor <= 5.
	//
	// > - Re-ranking is slower when documents are sparsely split.
	//
	// > - It is recommended that the re-ranked count (TopK 	- Factor, rounded up) does not exceed 50.
	//
	// example:
	//
	// 2
	RerankFactor *float64 `json:"RerankFactor,omitempty" xml:"RerankFactor,omitempty"`
	// Set the number of top results to return.
	//
	// example:
	//
	// 10
	TopK *int32 `json:"TopK,omitempty" xml:"TopK,omitempty"`
	// Whether to use full-text retrieval (dual recall). Default is false, which means only vector retrieval is used.
	//
	// example:
	//
	// true
	UseFullTextRetrieval *bool `json:"UseFullTextRetrieval,omitempty" xml:"UseFullTextRetrieval,omitempty"`
}

func (s QueryContentAdvanceRequest) String() string {
	return dara.Prettify(s)
}

func (s QueryContentAdvanceRequest) GoString() string {
	return s.String()
}

func (s *QueryContentAdvanceRequest) GetCollection() *string {
	return s.Collection
}

func (s *QueryContentAdvanceRequest) GetContent() *string {
	return s.Content
}

func (s *QueryContentAdvanceRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *QueryContentAdvanceRequest) GetFileName() *string {
	return s.FileName
}

func (s *QueryContentAdvanceRequest) GetFileUrlObject() io.Reader {
	return s.FileUrlObject
}

func (s *QueryContentAdvanceRequest) GetFilter() *string {
	return s.Filter
}

func (s *QueryContentAdvanceRequest) GetHybridSearch() *string {
	return s.HybridSearch
}

func (s *QueryContentAdvanceRequest) GetHybridSearchArgs() map[string]map[string]interface{} {
	return s.HybridSearchArgs
}

func (s *QueryContentAdvanceRequest) GetIncludeFileUrl() *bool {
	return s.IncludeFileUrl
}

func (s *QueryContentAdvanceRequest) GetIncludeMetadataFields() *string {
	return s.IncludeMetadataFields
}

func (s *QueryContentAdvanceRequest) GetIncludeVector() *bool {
	return s.IncludeVector
}

func (s *QueryContentAdvanceRequest) GetMetrics() *string {
	return s.Metrics
}

func (s *QueryContentAdvanceRequest) GetNamespace() *string {
	return s.Namespace
}

func (s *QueryContentAdvanceRequest) GetNamespacePassword() *string {
	return s.NamespacePassword
}

func (s *QueryContentAdvanceRequest) GetOwnerId() *int64 {
	return s.OwnerId
}

func (s *QueryContentAdvanceRequest) GetRecallWindow() []*int32 {
	return s.RecallWindow
}

func (s *QueryContentAdvanceRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *QueryContentAdvanceRequest) GetRerankFactor() *float64 {
	return s.RerankFactor
}

func (s *QueryContentAdvanceRequest) GetTopK() *int32 {
	return s.TopK
}

func (s *QueryContentAdvanceRequest) GetUseFullTextRetrieval() *bool {
	return s.UseFullTextRetrieval
}

func (s *QueryContentAdvanceRequest) SetCollection(v string) *QueryContentAdvanceRequest {
	s.Collection = &v
	return s
}

func (s *QueryContentAdvanceRequest) SetContent(v string) *QueryContentAdvanceRequest {
	s.Content = &v
	return s
}

func (s *QueryContentAdvanceRequest) SetDBInstanceId(v string) *QueryContentAdvanceRequest {
	s.DBInstanceId = &v
	return s
}

func (s *QueryContentAdvanceRequest) SetFileName(v string) *QueryContentAdvanceRequest {
	s.FileName = &v
	return s
}

func (s *QueryContentAdvanceRequest) SetFileUrlObject(v io.Reader) *QueryContentAdvanceRequest {
	s.FileUrlObject = v
	return s
}

func (s *QueryContentAdvanceRequest) SetFilter(v string) *QueryContentAdvanceRequest {
	s.Filter = &v
	return s
}

func (s *QueryContentAdvanceRequest) SetHybridSearch(v string) *QueryContentAdvanceRequest {
	s.HybridSearch = &v
	return s
}

func (s *QueryContentAdvanceRequest) SetHybridSearchArgs(v map[string]map[string]interface{}) *QueryContentAdvanceRequest {
	s.HybridSearchArgs = v
	return s
}

func (s *QueryContentAdvanceRequest) SetIncludeFileUrl(v bool) *QueryContentAdvanceRequest {
	s.IncludeFileUrl = &v
	return s
}

func (s *QueryContentAdvanceRequest) SetIncludeMetadataFields(v string) *QueryContentAdvanceRequest {
	s.IncludeMetadataFields = &v
	return s
}

func (s *QueryContentAdvanceRequest) SetIncludeVector(v bool) *QueryContentAdvanceRequest {
	s.IncludeVector = &v
	return s
}

func (s *QueryContentAdvanceRequest) SetMetrics(v string) *QueryContentAdvanceRequest {
	s.Metrics = &v
	return s
}

func (s *QueryContentAdvanceRequest) SetNamespace(v string) *QueryContentAdvanceRequest {
	s.Namespace = &v
	return s
}

func (s *QueryContentAdvanceRequest) SetNamespacePassword(v string) *QueryContentAdvanceRequest {
	s.NamespacePassword = &v
	return s
}

func (s *QueryContentAdvanceRequest) SetOwnerId(v int64) *QueryContentAdvanceRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryContentAdvanceRequest) SetRecallWindow(v []*int32) *QueryContentAdvanceRequest {
	s.RecallWindow = v
	return s
}

func (s *QueryContentAdvanceRequest) SetRegionId(v string) *QueryContentAdvanceRequest {
	s.RegionId = &v
	return s
}

func (s *QueryContentAdvanceRequest) SetRerankFactor(v float64) *QueryContentAdvanceRequest {
	s.RerankFactor = &v
	return s
}

func (s *QueryContentAdvanceRequest) SetTopK(v int32) *QueryContentAdvanceRequest {
	s.TopK = &v
	return s
}

func (s *QueryContentAdvanceRequest) SetUseFullTextRetrieval(v bool) *QueryContentAdvanceRequest {
	s.UseFullTextRetrieval = &v
	return s
}

func (s *QueryContentAdvanceRequest) Validate() error {
	return dara.Validate(s)
}

type iQueryContentShrinkRequest interface {
	dara.Model
	String() string
	GoString() string
	SetCollection(v string) *QueryContentShrinkRequest
	GetCollection() *string
	SetContent(v string) *QueryContentShrinkRequest
	GetContent() *string
	SetDBInstanceId(v string) *QueryContentShrinkRequest
	GetDBInstanceId() *string
	SetFileName(v string) *QueryContentShrinkRequest
	GetFileName() *string
	SetFileUrl(v string) *QueryContentShrinkRequest
	GetFileUrl() *string
	SetFilter(v string) *QueryContentShrinkRequest
	GetFilter() *string
	SetHybridSearch(v string) *QueryContentShrinkRequest
	GetHybridSearch() *string
	SetHybridSearchArgsShrink(v string) *QueryContentShrinkRequest
	GetHybridSearchArgsShrink() *string
	SetIncludeFileUrl(v bool) *QueryContentShrinkRequest
	GetIncludeFileUrl() *bool
	SetIncludeMetadataFields(v string) *QueryContentShrinkRequest
	GetIncludeMetadataFields() *string
	SetIncludeVector(v bool) *QueryContentShrinkRequest
	GetIncludeVector() *bool
	SetMetrics(v string) *QueryContentShrinkRequest
	GetMetrics() *string
	SetNamespace(v string) *QueryContentShrinkRequest
	GetNamespace() *string
	SetNamespacePassword(v string) *QueryContentShrinkRequest
	GetNamespacePassword() *string
	SetOwnerId(v int64) *QueryContentShrinkRequest
	GetOwnerId() *int64
	SetRecallWindowShrink(v string) *QueryContentShrinkRequest
	GetRecallWindowShrink() *string
	SetRegionId(v string) *QueryContentShrinkRequest
	GetRegionId() *string
	SetRerankFactor(v float64) *QueryContentShrinkRequest
	GetRerankFactor() *float64
	SetTopK(v int32) *QueryContentShrinkRequest
	GetTopK() *int32
	SetUseFullTextRetrieval(v bool) *QueryContentShrinkRequest
	GetUseFullTextRetrieval() *bool
}

type QueryContentShrinkRequest struct {
	// Document collection name.
	//
	// > Created by the [CreateDocumentCollection](https://help.aliyun.com/document_detail/2618448.html) API. You can use the [ListDocumentCollections](https://help.aliyun.com/document_detail/2618452.html) API to view the list of created document collections.
	//
	// This parameter is required.
	//
	// example:
	//
	// document
	Collection *string `json:"Collection,omitempty" xml:"Collection,omitempty"`
	Content    *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// Instance ID.
	//
	// > You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) API to view details of all AnalyticDB for PostgreSQL instances in the target region, including the instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// In image search scenarios, the source file name of the image to be searched.
	//
	// > The image file must have a file extension. Currently supported image extensions: bmp, jpg, jpeg, png, tiff.
	//
	// example:
	//
	// test.jpg
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// In image search scenarios, the publicly accessible URL of the image file.
	//
	// > The image file must have a file extension. Currently supported image extensions: bmp, jpg, jpeg, png, tiff.
	//
	// example:
	//
	// https://xx/myImage.jpg
	FileUrl *string `json:"FileUrl,omitempty" xml:"FileUrl,omitempty"`
	// Filter condition for the data to be queried, in SQL WHERE format. It is an expression that returns a boolean value (true or false). The conditions can be simple comparison operators such as equal (=), not equal (<> or !=), greater than (>), less than (<), greater than or equal to (>=), less than or equal to (<=), or more complex expressions combined with logical operators (AND, OR, NOT), and conditions using keywords like IN, BETWEEN, LIKE, etc.
	//
	// >
	//
	// > - For detailed syntax, refer to: https://www.postgresqltutorial.com/postgresql-tutorial/postgresql-where/
	//
	// example:
	//
	// title = \\"test\\" AND name like \\"test%\\"
	Filter *string `json:"Filter,omitempty" xml:"Filter,omitempty"`
	// Dual recall algorithm, default is empty (i.e., directly compare and sort the scores of vectors and full text).
	//
	// Available values:
	//
	// - RRF: Reciprocal rank fusion, with a parameter k controlling the fusion effect. See HybridSearchArgs configuration for details;
	//
	// - Weight: Weighted ranking, using a parameter alpha to control the weight of vector and full-text scores, then sorting. See HybridSearchArgs configuration for details;
	//
	// - Cascaded: Perform full-text retrieval first, then vector retrieval on top of it;
	//
	// example:
	//
	// RRF
	HybridSearch *string `json:"HybridSearch,omitempty" xml:"HybridSearch,omitempty"`
	// The parameters of the two-way retrieval algorithm. The following parameters are supported:
	//
	// 	- When HybridSearch is set to RRF, the scores are calculated by using the `1/(k+rank_i)` formula. The constant k is a positive integer that is greater than 1.
	//
	// <!---->
	//
	//     {
	//
	//        "RRF": {
	//
	//         "k": 60
	//
	//        }
	//
	//     }
	//
	// 	- When HybridSearch is set to Weight, the scores are calculated by using the `alpha 	- vector_score + (1-alpha) 	- text_score` formula. The alpha parameter specifies the proportion of the vector search score and the full-text search score and ranges from 0 to 1. A value of 0 specifies full-text search and a value of 1 specifies vector search.
	//
	// <!---->
	//
	//     {
	//
	//        "Weight": {
	//
	//         "alpha": 0.5
	//
	//        }
	//
	//     }
	HybridSearchArgsShrink *string `json:"HybridSearchArgs,omitempty" xml:"HybridSearchArgs,omitempty"`
	// Specifies whether to return the URL of the document. Default value: false.
	//
	// example:
	//
	// false
	IncludeFileUrl *bool `json:"IncludeFileUrl,omitempty" xml:"IncludeFileUrl,omitempty"`
	// The metadata fields to be returned. Separate multiple fields with commas (,). This parameter is empty by default.
	//
	// example:
	//
	// title,page
	IncludeMetadataFields *string `json:"IncludeMetadataFields,omitempty" xml:"IncludeMetadataFields,omitempty"`
	// Whether to return vectors. Default is false.
	//
	// > - **false**: Do not return vectors.
	//
	// > - **true**: Return vectors.
	//
	// example:
	//
	// true
	IncludeVector *bool `json:"IncludeVector,omitempty" xml:"IncludeVector,omitempty"`
	// Similarity algorithm used during retrieval. If this value is empty, the algorithm specified at the time of knowledge base creation is used. It is recommended not to set this unless there is a specific need.
	//
	// > Value description:
	//
	// > - **l2**: Euclidean distance.
	//
	// > - **ip**: Inner product (dot product) distance.
	//
	// > - **cosine**: Cosine similarity.
	//
	// example:
	//
	// cosine
	Metrics *string `json:"Metrics,omitempty" xml:"Metrics,omitempty"`
	// Namespace, default is public.
	//
	// > You can create a namespace using the [CreateNamespace](https://help.aliyun.com/document_detail/2401495.html) API and view the list of namespaces using the [ListNamespaces](https://help.aliyun.com/document_detail/2401502.html) API.
	//
	// example:
	//
	// mynamespace
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// Password for the namespace.
	//
	// > This value is specified in the [CreateNamespace](https://help.aliyun.com/document_detail/2401495.html) API.
	//
	// This parameter is required.
	//
	// example:
	//
	// testpassword
	NamespacePassword *string `json:"NamespacePassword,omitempty" xml:"NamespacePassword,omitempty"`
	OwnerId           *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// Recall window. When this value is not empty, it adds context to the returned search results. The format is an array of 2 elements: List<A, B>, where -10 <= A <= 0 and 0 <= B <= 10.
	//
	// > - Recommended when documents are fragmented and retrieval may lose contextual information.
	//
	// > - Re-ranking takes precedence over windowing, i.e., re-rank first, then apply windowing.
	RecallWindowShrink *string `json:"RecallWindow,omitempty" xml:"RecallWindow,omitempty"`
	// The region ID where the instance is located.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// Re-ranking factor. When this value is not empty, it will re-rank the vector search results. The value range is 1 < RerankFactor <= 5.
	//
	// > - Re-ranking is slower when documents are sparsely split.
	//
	// > - It is recommended that the re-ranked count (TopK 	- Factor, rounded up) does not exceed 50.
	//
	// example:
	//
	// 2
	RerankFactor *float64 `json:"RerankFactor,omitempty" xml:"RerankFactor,omitempty"`
	// Set the number of top results to return.
	//
	// example:
	//
	// 10
	TopK *int32 `json:"TopK,omitempty" xml:"TopK,omitempty"`
	// Whether to use full-text retrieval (dual recall). Default is false, which means only vector retrieval is used.
	//
	// example:
	//
	// true
	UseFullTextRetrieval *bool `json:"UseFullTextRetrieval,omitempty" xml:"UseFullTextRetrieval,omitempty"`
}

func (s QueryContentShrinkRequest) String() string {
	return dara.Prettify(s)
}

func (s QueryContentShrinkRequest) GoString() string {
	return s.String()
}

func (s *QueryContentShrinkRequest) GetCollection() *string {
	return s.Collection
}

func (s *QueryContentShrinkRequest) GetContent() *string {
	return s.Content
}

func (s *QueryContentShrinkRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *QueryContentShrinkRequest) GetFileName() *string {
	return s.FileName
}

func (s *QueryContentShrinkRequest) GetFileUrl() *string {
	return s.FileUrl
}

func (s *QueryContentShrinkRequest) GetFilter() *string {
	return s.Filter
}

func (s *QueryContentShrinkRequest) GetHybridSearch() *string {
	return s.HybridSearch
}

func (s *QueryContentShrinkRequest) GetHybridSearchArgsShrink() *string {
	return s.HybridSearchArgsShrink
}

func (s *QueryContentShrinkRequest) GetIncludeFileUrl() *bool {
	return s.IncludeFileUrl
}

func (s *QueryContentShrinkRequest) GetIncludeMetadataFields() *string {
	return s.IncludeMetadataFields
}

func (s *QueryContentShrinkRequest) GetIncludeVector() *bool {
	return s.IncludeVector
}

func (s *QueryContentShrinkRequest) GetMetrics() *string {
	return s.Metrics
}

func (s *QueryContentShrinkRequest) GetNamespace() *string {
	return s.Namespace
}

func (s *QueryContentShrinkRequest) GetNamespacePassword() *string {
	return s.NamespacePassword
}

func (s *QueryContentShrinkRequest) GetOwnerId() *int64 {
	return s.OwnerId
}

func (s *QueryContentShrinkRequest) GetRecallWindowShrink() *string {
	return s.RecallWindowShrink
}

func (s *QueryContentShrinkRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *QueryContentShrinkRequest) GetRerankFactor() *float64 {
	return s.RerankFactor
}

func (s *QueryContentShrinkRequest) GetTopK() *int32 {
	return s.TopK
}

func (s *QueryContentShrinkRequest) GetUseFullTextRetrieval() *bool {
	return s.UseFullTextRetrieval
}

func (s *QueryContentShrinkRequest) SetCollection(v string) *QueryContentShrinkRequest {
	s.Collection = &v
	return s
}

func (s *QueryContentShrinkRequest) SetContent(v string) *QueryContentShrinkRequest {
	s.Content = &v
	return s
}

func (s *QueryContentShrinkRequest) SetDBInstanceId(v string) *QueryContentShrinkRequest {
	s.DBInstanceId = &v
	return s
}

func (s *QueryContentShrinkRequest) SetFileName(v string) *QueryContentShrinkRequest {
	s.FileName = &v
	return s
}

func (s *QueryContentShrinkRequest) SetFileUrl(v string) *QueryContentShrinkRequest {
	s.FileUrl = &v
	return s
}

func (s *QueryContentShrinkRequest) SetFilter(v string) *QueryContentShrinkRequest {
	s.Filter = &v
	return s
}

func (s *QueryContentShrinkRequest) SetHybridSearch(v string) *QueryContentShrinkRequest {
	s.HybridSearch = &v
	return s
}

func (s *QueryContentShrinkRequest) SetHybridSearchArgsShrink(v string) *QueryContentShrinkRequest {
	s.HybridSearchArgsShrink = &v
	return s
}

func (s *QueryContentShrinkRequest) SetIncludeFileUrl(v bool) *QueryContentShrinkRequest {
	s.IncludeFileUrl = &v
	return s
}

func (s *QueryContentShrinkRequest) SetIncludeMetadataFields(v string) *QueryContentShrinkRequest {
	s.IncludeMetadataFields = &v
	return s
}

func (s *QueryContentShrinkRequest) SetIncludeVector(v bool) *QueryContentShrinkRequest {
	s.IncludeVector = &v
	return s
}

func (s *QueryContentShrinkRequest) SetMetrics(v string) *QueryContentShrinkRequest {
	s.Metrics = &v
	return s
}

func (s *QueryContentShrinkRequest) SetNamespace(v string) *QueryContentShrinkRequest {
	s.Namespace = &v
	return s
}

func (s *QueryContentShrinkRequest) SetNamespacePassword(v string) *QueryContentShrinkRequest {
	s.NamespacePassword = &v
	return s
}

func (s *QueryContentShrinkRequest) SetOwnerId(v int64) *QueryContentShrinkRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryContentShrinkRequest) SetRecallWindowShrink(v string) *QueryContentShrinkRequest {
	s.RecallWindowShrink = &v
	return s
}

func (s *QueryContentShrinkRequest) SetRegionId(v string) *QueryContentShrinkRequest {
	s.RegionId = &v
	return s
}

func (s *QueryContentShrinkRequest) SetRerankFactor(v float64) *QueryContentShrinkRequest {
	s.RerankFactor = &v
	return s
}

func (s *QueryContentShrinkRequest) SetTopK(v int32) *QueryContentShrinkRequest {
	s.TopK = &v
	return s
}

func (s *QueryContentShrinkRequest) SetUseFullTextRetrieval(v bool) *QueryContentShrinkRequest {
	s.UseFullTextRetrieval = &v
	return s
}

func (s *QueryContentShrinkRequest) Validate() error {
	return dara.Validate(s)
}

type iQueryContentResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetEmbeddingTokens(v string) *QueryContentResponseBody
	GetEmbeddingTokens() *string
	SetMatches(v *QueryContentResponseBodyMatches) *QueryContentResponseBody
	GetMatches() *QueryContentResponseBodyMatches
	SetMessage(v string) *QueryContentResponseBody
	GetMessage() *string
	SetRequestId(v string) *QueryContentResponseBody
	GetRequestId() *string
	SetStatus(v string) *QueryContentResponseBody
	GetStatus() *string
	SetUsage(v *QueryContentResponseBodyUsage) *QueryContentResponseBody
	GetUsage() *QueryContentResponseBodyUsage
	SetWindowMatches(v *QueryContentResponseBodyWindowMatches) *QueryContentResponseBody
	GetWindowMatches() *QueryContentResponseBodyWindowMatches
}

type QueryContentResponseBody struct {
	// Number of tokens used for vectorization.
	//
	// > A token refers to the smallest unit into which the input text is divided; a token can be a word, a phrase, a punctuation mark, or a character, etc.
	//
	// example:
	//
	// 100
	EmbeddingTokens *string `json:"EmbeddingTokens,omitempty" xml:"EmbeddingTokens,omitempty"`
	// The retrieved data.
	Matches *QueryContentResponseBodyMatches `json:"Matches,omitempty" xml:"Matches,omitempty" type:"Struct"`
	// Return message.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The execution state of the operation. Valid values:
	//
	// 	- **false**: The operation fails.
	//
	// 	- **true**: The operation is successful.
	//
	// example:
	//
	// success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// Resource usage for this query.
	Usage *QueryContentResponseBodyUsage `json:"Usage,omitempty" xml:"Usage,omitempty" type:"Struct"`
	// List of windowed matches.
	WindowMatches *QueryContentResponseBodyWindowMatches `json:"WindowMatches,omitempty" xml:"WindowMatches,omitempty" type:"Struct"`
}

func (s QueryContentResponseBody) String() string {
	return dara.Prettify(s)
}

func (s QueryContentResponseBody) GoString() string {
	return s.String()
}

func (s *QueryContentResponseBody) GetEmbeddingTokens() *string {
	return s.EmbeddingTokens
}

func (s *QueryContentResponseBody) GetMatches() *QueryContentResponseBodyMatches {
	return s.Matches
}

func (s *QueryContentResponseBody) GetMessage() *string {
	return s.Message
}

func (s *QueryContentResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *QueryContentResponseBody) GetStatus() *string {
	return s.Status
}

func (s *QueryContentResponseBody) GetUsage() *QueryContentResponseBodyUsage {
	return s.Usage
}

func (s *QueryContentResponseBody) GetWindowMatches() *QueryContentResponseBodyWindowMatches {
	return s.WindowMatches
}

func (s *QueryContentResponseBody) SetEmbeddingTokens(v string) *QueryContentResponseBody {
	s.EmbeddingTokens = &v
	return s
}

func (s *QueryContentResponseBody) SetMatches(v *QueryContentResponseBodyMatches) *QueryContentResponseBody {
	s.Matches = v
	return s
}

func (s *QueryContentResponseBody) SetMessage(v string) *QueryContentResponseBody {
	s.Message = &v
	return s
}

func (s *QueryContentResponseBody) SetRequestId(v string) *QueryContentResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryContentResponseBody) SetStatus(v string) *QueryContentResponseBody {
	s.Status = &v
	return s
}

func (s *QueryContentResponseBody) SetUsage(v *QueryContentResponseBodyUsage) *QueryContentResponseBody {
	s.Usage = v
	return s
}

func (s *QueryContentResponseBody) SetWindowMatches(v *QueryContentResponseBodyWindowMatches) *QueryContentResponseBody {
	s.WindowMatches = v
	return s
}

func (s *QueryContentResponseBody) Validate() error {
	return dara.Validate(s)
}

type QueryContentResponseBodyMatches struct {
	MatchList []*QueryContentResponseBodyMatchesMatchList `json:"MatchList,omitempty" xml:"MatchList,omitempty" type:"Repeated"`
}

func (s QueryContentResponseBodyMatches) String() string {
	return dara.Prettify(s)
}

func (s QueryContentResponseBodyMatches) GoString() string {
	return s.String()
}

func (s *QueryContentResponseBodyMatches) GetMatchList() []*QueryContentResponseBodyMatchesMatchList {
	return s.MatchList
}

func (s *QueryContentResponseBodyMatches) SetMatchList(v []*QueryContentResponseBodyMatchesMatchList) *QueryContentResponseBodyMatches {
	s.MatchList = v
	return s
}

func (s *QueryContentResponseBodyMatches) Validate() error {
	return dara.Validate(s)
}

type QueryContentResponseBodyMatchesMatchList struct {
	// The content that is used for full-text search. If you leave this parameter empty, only vector search is used. If you do not leave this parameter empty, two-way retrieval based on vector search and full-text search is used.
	//
	// >  You must specify at least one of the Content and Vector parameters.
	//
	// example:
	//
	// Cloud-native data warehouse AnalyticDB PostgreSQL Edition provides a simple, fast, and cost-effective PB-level cloud data warehouse solution.
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// The name of the document.
	//
	// >  You can call the [ListDocuments](https://help.aliyun.com/document_detail/2618453.html) operation to query a list of documents.
	//
	// example:
	//
	// my_doc.txt
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// The public URL of the query result image, valid for 2 hours
	//
	// example:
	//
	// https://xxx-cn-beijing.aliyuncs.com/image/test.png
	FileURL *string `json:"FileURL,omitempty" xml:"FileURL,omitempty"`
	// The unique ID of the vector data.
	//
	// example:
	//
	// doca-1234
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// Metadata during document loader loading.
	//
	// example:
	//
	// {"page_pos": 1}
	LoaderMetadata *string `json:"LoaderMetadata,omitempty" xml:"LoaderMetadata,omitempty"`
	// The metadata.
	Metadata map[string]*string `json:"Metadata,omitempty" xml:"Metadata,omitempty"`
	// Re-ranking score.
	//
	// example:
	//
	// 6.2345
	RerankScore *float64 `json:"RerankScore,omitempty" xml:"RerankScore,omitempty"`
	// Source of the retrieval results:
	//
	// - 1 indicates vector retrieval
	//
	// - 2 indicates full-text retrieval
	//
	// - 3 indicates dual-path recall
	//
	// example:
	//
	// 1
	RetrievalSource *int32 `json:"RetrievalSource,omitempty" xml:"RetrievalSource,omitempty"`
	// The similarity score of the data. It is related to the `l2, ip, or cosine` algorithm that is specified when you create an index.
	//
	// example:
	//
	// 0.12345
	Score *float64 `json:"Score,omitempty" xml:"Score,omitempty"`
	// The vector data. The length of the value must be the same as that of the Dimension parameter in the [CreateCollection](https://help.aliyun.com/document_detail/2401497.html) operation.
	//
	// >  If you leave this parameter empty, only full-text search results are returned.
	Vector *QueryContentResponseBodyMatchesMatchListVector `json:"Vector,omitempty" xml:"Vector,omitempty" type:"Struct"`
}

func (s QueryContentResponseBodyMatchesMatchList) String() string {
	return dara.Prettify(s)
}

func (s QueryContentResponseBodyMatchesMatchList) GoString() string {
	return s.String()
}

func (s *QueryContentResponseBodyMatchesMatchList) GetContent() *string {
	return s.Content
}

func (s *QueryContentResponseBodyMatchesMatchList) GetFileName() *string {
	return s.FileName
}

func (s *QueryContentResponseBodyMatchesMatchList) GetFileURL() *string {
	return s.FileURL
}

func (s *QueryContentResponseBodyMatchesMatchList) GetId() *string {
	return s.Id
}

func (s *QueryContentResponseBodyMatchesMatchList) GetLoaderMetadata() *string {
	return s.LoaderMetadata
}

func (s *QueryContentResponseBodyMatchesMatchList) GetMetadata() map[string]*string {
	return s.Metadata
}

func (s *QueryContentResponseBodyMatchesMatchList) GetRerankScore() *float64 {
	return s.RerankScore
}

func (s *QueryContentResponseBodyMatchesMatchList) GetRetrievalSource() *int32 {
	return s.RetrievalSource
}

func (s *QueryContentResponseBodyMatchesMatchList) GetScore() *float64 {
	return s.Score
}

func (s *QueryContentResponseBodyMatchesMatchList) GetVector() *QueryContentResponseBodyMatchesMatchListVector {
	return s.Vector
}

func (s *QueryContentResponseBodyMatchesMatchList) SetContent(v string) *QueryContentResponseBodyMatchesMatchList {
	s.Content = &v
	return s
}

func (s *QueryContentResponseBodyMatchesMatchList) SetFileName(v string) *QueryContentResponseBodyMatchesMatchList {
	s.FileName = &v
	return s
}

func (s *QueryContentResponseBodyMatchesMatchList) SetFileURL(v string) *QueryContentResponseBodyMatchesMatchList {
	s.FileURL = &v
	return s
}

func (s *QueryContentResponseBodyMatchesMatchList) SetId(v string) *QueryContentResponseBodyMatchesMatchList {
	s.Id = &v
	return s
}

func (s *QueryContentResponseBodyMatchesMatchList) SetLoaderMetadata(v string) *QueryContentResponseBodyMatchesMatchList {
	s.LoaderMetadata = &v
	return s
}

func (s *QueryContentResponseBodyMatchesMatchList) SetMetadata(v map[string]*string) *QueryContentResponseBodyMatchesMatchList {
	s.Metadata = v
	return s
}

func (s *QueryContentResponseBodyMatchesMatchList) SetRerankScore(v float64) *QueryContentResponseBodyMatchesMatchList {
	s.RerankScore = &v
	return s
}

func (s *QueryContentResponseBodyMatchesMatchList) SetRetrievalSource(v int32) *QueryContentResponseBodyMatchesMatchList {
	s.RetrievalSource = &v
	return s
}

func (s *QueryContentResponseBodyMatchesMatchList) SetScore(v float64) *QueryContentResponseBodyMatchesMatchList {
	s.Score = &v
	return s
}

func (s *QueryContentResponseBodyMatchesMatchList) SetVector(v *QueryContentResponseBodyMatchesMatchListVector) *QueryContentResponseBodyMatchesMatchList {
	s.Vector = v
	return s
}

func (s *QueryContentResponseBodyMatchesMatchList) Validate() error {
	return dara.Validate(s)
}

type QueryContentResponseBodyMatchesMatchListVector struct {
	VectorList []*float64 `json:"VectorList,omitempty" xml:"VectorList,omitempty" type:"Repeated"`
}

func (s QueryContentResponseBodyMatchesMatchListVector) String() string {
	return dara.Prettify(s)
}

func (s QueryContentResponseBodyMatchesMatchListVector) GoString() string {
	return s.String()
}

func (s *QueryContentResponseBodyMatchesMatchListVector) GetVectorList() []*float64 {
	return s.VectorList
}

func (s *QueryContentResponseBodyMatchesMatchListVector) SetVectorList(v []*float64) *QueryContentResponseBodyMatchesMatchListVector {
	s.VectorList = v
	return s
}

func (s *QueryContentResponseBodyMatchesMatchListVector) Validate() error {
	return dara.Validate(s)
}

type QueryContentResponseBodyUsage struct {
	// The number of entries used for vectorization.
	//
	// > An entry refers to the number of processing items when performing vectorization on text or images. For example, processing one piece of text counts as 1 entry, while processing one image counts as 2 entries.
	//
	// example:
	//
	// 10
	EmbeddingEntries *string `json:"EmbeddingEntries,omitempty" xml:"EmbeddingEntries,omitempty"`
	// Number of tokens used for vectorization.
	//
	// > A token refers to the smallest unit into which the input text is divided; a token can be a word, a phrase, a punctuation mark, or a character, etc.
	//
	// example:
	//
	// 100
	EmbeddingTokens *string `json:"EmbeddingTokens,omitempty" xml:"EmbeddingTokens,omitempty"`
}

func (s QueryContentResponseBodyUsage) String() string {
	return dara.Prettify(s)
}

func (s QueryContentResponseBodyUsage) GoString() string {
	return s.String()
}

func (s *QueryContentResponseBodyUsage) GetEmbeddingEntries() *string {
	return s.EmbeddingEntries
}

func (s *QueryContentResponseBodyUsage) GetEmbeddingTokens() *string {
	return s.EmbeddingTokens
}

func (s *QueryContentResponseBodyUsage) SetEmbeddingEntries(v string) *QueryContentResponseBodyUsage {
	s.EmbeddingEntries = &v
	return s
}

func (s *QueryContentResponseBodyUsage) SetEmbeddingTokens(v string) *QueryContentResponseBodyUsage {
	s.EmbeddingTokens = &v
	return s
}

func (s *QueryContentResponseBodyUsage) Validate() error {
	return dara.Validate(s)
}

type QueryContentResponseBodyWindowMatches struct {
	WindowMatches []*QueryContentResponseBodyWindowMatchesWindowMatches `json:"windowMatches,omitempty" xml:"windowMatches,omitempty" type:"Repeated"`
}

func (s QueryContentResponseBodyWindowMatches) String() string {
	return dara.Prettify(s)
}

func (s QueryContentResponseBodyWindowMatches) GoString() string {
	return s.String()
}

func (s *QueryContentResponseBodyWindowMatches) GetWindowMatches() []*QueryContentResponseBodyWindowMatchesWindowMatches {
	return s.WindowMatches
}

func (s *QueryContentResponseBodyWindowMatches) SetWindowMatches(v []*QueryContentResponseBodyWindowMatchesWindowMatches) *QueryContentResponseBodyWindowMatches {
	s.WindowMatches = v
	return s
}

func (s *QueryContentResponseBodyWindowMatches) Validate() error {
	return dara.Validate(s)
}

type QueryContentResponseBodyWindowMatchesWindowMatches struct {
	// List of individual top windowed matches.
	WindowMatch *QueryContentResponseBodyWindowMatchesWindowMatchesWindowMatch `json:"WindowMatch,omitempty" xml:"WindowMatch,omitempty" type:"Struct"`
}

func (s QueryContentResponseBodyWindowMatchesWindowMatches) String() string {
	return dara.Prettify(s)
}

func (s QueryContentResponseBodyWindowMatchesWindowMatches) GoString() string {
	return s.String()
}

func (s *QueryContentResponseBodyWindowMatchesWindowMatches) GetWindowMatch() *QueryContentResponseBodyWindowMatchesWindowMatchesWindowMatch {
	return s.WindowMatch
}

func (s *QueryContentResponseBodyWindowMatchesWindowMatches) SetWindowMatch(v *QueryContentResponseBodyWindowMatchesWindowMatchesWindowMatch) *QueryContentResponseBodyWindowMatchesWindowMatches {
	s.WindowMatch = v
	return s
}

func (s *QueryContentResponseBodyWindowMatchesWindowMatches) Validate() error {
	return dara.Validate(s)
}

type QueryContentResponseBodyWindowMatchesWindowMatchesWindowMatch struct {
	WindowMatch []*QueryContentResponseBodyWindowMatchesWindowMatchesWindowMatchWindowMatch `json:"windowMatch,omitempty" xml:"windowMatch,omitempty" type:"Repeated"`
}

func (s QueryContentResponseBodyWindowMatchesWindowMatchesWindowMatch) String() string {
	return dara.Prettify(s)
}

func (s QueryContentResponseBodyWindowMatchesWindowMatchesWindowMatch) GoString() string {
	return s.String()
}

func (s *QueryContentResponseBodyWindowMatchesWindowMatchesWindowMatch) GetWindowMatch() []*QueryContentResponseBodyWindowMatchesWindowMatchesWindowMatchWindowMatch {
	return s.WindowMatch
}

func (s *QueryContentResponseBodyWindowMatchesWindowMatchesWindowMatch) SetWindowMatch(v []*QueryContentResponseBodyWindowMatchesWindowMatchesWindowMatchWindowMatch) *QueryContentResponseBodyWindowMatchesWindowMatchesWindowMatch {
	s.WindowMatch = v
	return s
}

func (s *QueryContentResponseBodyWindowMatchesWindowMatchesWindowMatch) Validate() error {
	return dara.Validate(s)
}

type QueryContentResponseBodyWindowMatchesWindowMatchesWindowMatchWindowMatch struct {
	// Text content.
	//
	// example:
	//
	// AnalyticDB for PostgreSQL is a cloud-native data warehouse service that provides large-scale parallel processing (MPP) capabilities for massive online data analysis.
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// File name.
	//
	// example:
	//
	// my_doc.txt
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// Unique ID of the vector data.
	//
	// example:
	//
	// doca-2345
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// Metadata information when the document loader was loaded.
	//
	// example:
	//
	// {"page_pos": 2}
	LoaderMetadata *string `json:"LoaderMetadata,omitempty" xml:"LoaderMetadata,omitempty"`
	// Metadata map.
	Metadata map[string]*string `json:"Metadata,omitempty" xml:"Metadata,omitempty"`
}

func (s QueryContentResponseBodyWindowMatchesWindowMatchesWindowMatchWindowMatch) String() string {
	return dara.Prettify(s)
}

func (s QueryContentResponseBodyWindowMatchesWindowMatchesWindowMatchWindowMatch) GoString() string {
	return s.String()
}

func (s *QueryContentResponseBodyWindowMatchesWindowMatchesWindowMatchWindowMatch) GetContent() *string {
	return s.Content
}

func (s *QueryContentResponseBodyWindowMatchesWindowMatchesWindowMatchWindowMatch) GetFileName() *string {
	return s.FileName
}

func (s *QueryContentResponseBodyWindowMatchesWindowMatchesWindowMatchWindowMatch) GetId() *string {
	return s.Id
}

func (s *QueryContentResponseBodyWindowMatchesWindowMatchesWindowMatchWindowMatch) GetLoaderMetadata() *string {
	return s.LoaderMetadata
}

func (s *QueryContentResponseBodyWindowMatchesWindowMatchesWindowMatchWindowMatch) GetMetadata() map[string]*string {
	return s.Metadata
}

func (s *QueryContentResponseBodyWindowMatchesWindowMatchesWindowMatchWindowMatch) SetContent(v string) *QueryContentResponseBodyWindowMatchesWindowMatchesWindowMatchWindowMatch {
	s.Content = &v
	return s
}

func (s *QueryContentResponseBodyWindowMatchesWindowMatchesWindowMatchWindowMatch) SetFileName(v string) *QueryContentResponseBodyWindowMatchesWindowMatchesWindowMatchWindowMatch {
	s.FileName = &v
	return s
}

func (s *QueryContentResponseBodyWindowMatchesWindowMatchesWindowMatchWindowMatch) SetId(v string) *QueryContentResponseBodyWindowMatchesWindowMatchesWindowMatchWindowMatch {
	s.Id = &v
	return s
}

func (s *QueryContentResponseBodyWindowMatchesWindowMatchesWindowMatchWindowMatch) SetLoaderMetadata(v string) *QueryContentResponseBodyWindowMatchesWindowMatchesWindowMatchWindowMatch {
	s.LoaderMetadata = &v
	return s
}

func (s *QueryContentResponseBodyWindowMatchesWindowMatchesWindowMatchWindowMatch) SetMetadata(v map[string]*string) *QueryContentResponseBodyWindowMatchesWindowMatchesWindowMatchWindowMatch {
	s.Metadata = v
	return s
}

func (s *QueryContentResponseBodyWindowMatchesWindowMatchesWindowMatchWindowMatch) Validate() error {
	return dara.Validate(s)
}

type iQueryContentResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *QueryContentResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *QueryContentResponse
	GetStatusCode() *int32
	SetBody(v *QueryContentResponseBody) *QueryContentResponse
	GetBody() *QueryContentResponseBody
}

type QueryContentResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryContentResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryContentResponse) String() string {
	return dara.Prettify(s)
}

func (s QueryContentResponse) GoString() string {
	return s.String()
}

func (s *QueryContentResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *QueryContentResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *QueryContentResponse) GetBody() *QueryContentResponseBody {
	return s.Body
}

func (s *QueryContentResponse) SetHeaders(v map[string]*string) *QueryContentResponse {
	s.Headers = v
	return s
}

func (s *QueryContentResponse) SetStatusCode(v int32) *QueryContentResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryContentResponse) SetBody(v *QueryContentResponseBody) *QueryContentResponse {
	s.Body = v
	return s
}

func (s *QueryContentResponse) Validate() error {
	return dara.Validate(s)
}

type iRebalanceDBInstanceRequest interface {
	dara.Model
	String() string
	GoString() string
	SetClientToken(v string) *RebalanceDBInstanceRequest
	GetClientToken() *string
	SetDBInstanceId(v string) *RebalanceDBInstanceRequest
	GetDBInstanceId() *string
}

type RebalanceDBInstanceRequest struct {
	// The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must make sure that it is unique among different requests.
	//
	// The token can be up to 64 characters in length and can contain letters, digits, hyphens (-), and underscores (_).
	//
	// For more information, see [How to ensure idempotence](https://help.aliyun.com/document_detail/134212.html).
	//
	// example:
	//
	// 0c593ea1-3bea-11e9-b96b-88**********
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// The instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp***************
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
}

func (s RebalanceDBInstanceRequest) String() string {
	return dara.Prettify(s)
}

func (s RebalanceDBInstanceRequest) GoString() string {
	return s.String()
}

func (s *RebalanceDBInstanceRequest) GetClientToken() *string {
	return s.ClientToken
}

func (s *RebalanceDBInstanceRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *RebalanceDBInstanceRequest) SetClientToken(v string) *RebalanceDBInstanceRequest {
	s.ClientToken = &v
	return s
}

func (s *RebalanceDBInstanceRequest) SetDBInstanceId(v string) *RebalanceDBInstanceRequest {
	s.DBInstanceId = &v
	return s
}

func (s *RebalanceDBInstanceRequest) Validate() error {
	return dara.Validate(s)
}

type iRebalanceDBInstanceResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetRequestId(v string) *RebalanceDBInstanceResponseBody
	GetRequestId() *string
}

type RebalanceDBInstanceResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// 5414A4E5-4C36-4461-95FC-************
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RebalanceDBInstanceResponseBody) String() string {
	return dara.Prettify(s)
}

func (s RebalanceDBInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *RebalanceDBInstanceResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *RebalanceDBInstanceResponseBody) SetRequestId(v string) *RebalanceDBInstanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *RebalanceDBInstanceResponseBody) Validate() error {
	return dara.Validate(s)
}

type iRebalanceDBInstanceResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *RebalanceDBInstanceResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *RebalanceDBInstanceResponse
	GetStatusCode() *int32
	SetBody(v *RebalanceDBInstanceResponseBody) *RebalanceDBInstanceResponse
	GetBody() *RebalanceDBInstanceResponseBody
}

type RebalanceDBInstanceResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RebalanceDBInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RebalanceDBInstanceResponse) String() string {
	return dara.Prettify(s)
}

func (s RebalanceDBInstanceResponse) GoString() string {
	return s.String()
}

func (s *RebalanceDBInstanceResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *RebalanceDBInstanceResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *RebalanceDBInstanceResponse) GetBody() *RebalanceDBInstanceResponseBody {
	return s.Body
}

func (s *RebalanceDBInstanceResponse) SetHeaders(v map[string]*string) *RebalanceDBInstanceResponse {
	s.Headers = v
	return s
}

func (s *RebalanceDBInstanceResponse) SetStatusCode(v int32) *RebalanceDBInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *RebalanceDBInstanceResponse) SetBody(v *RebalanceDBInstanceResponseBody) *RebalanceDBInstanceResponse {
	s.Body = v
	return s
}

func (s *RebalanceDBInstanceResponse) Validate() error {
	return dara.Validate(s)
}

type iReleaseInstancePublicConnectionRequest interface {
	dara.Model
	String() string
	GoString() string
	SetAddressType(v string) *ReleaseInstancePublicConnectionRequest
	GetAddressType() *string
	SetCurrentConnectionString(v string) *ReleaseInstancePublicConnectionRequest
	GetCurrentConnectionString() *string
	SetDBInstanceId(v string) *ReleaseInstancePublicConnectionRequest
	GetDBInstanceId() *string
}

type ReleaseInstancePublicConnectionRequest struct {
	// The type of the endpoint. Default value: primary. Valid values:
	//
	// 	- **primary**: primary endpoint.
	//
	// 	- **cluster**: cluster endpoint. This type of endpoints can be created only for instances that have multiple coordinator nodes.
	//
	// example:
	//
	// Intranet
	AddressType *string `json:"AddressType,omitempty" xml:"AddressType,omitempty"`
	// The public endpoint of the instance.
	//
	// You can log on to the AnalyticDB for PostgreSQL console and go to the **Basic Information*	- page of the instance to view the **public endpoint*	- in the **Database Connection*	- section.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp12ga6v69h86****.gpdb.rds.aliyuncs.com
	CurrentConnectionString *string `json:"CurrentConnectionString,omitempty" xml:"CurrentConnectionString,omitempty"`
	// The ID of the instance.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the details of all AnalyticDB for PostgreSQL instances in a specific region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
}

func (s ReleaseInstancePublicConnectionRequest) String() string {
	return dara.Prettify(s)
}

func (s ReleaseInstancePublicConnectionRequest) GoString() string {
	return s.String()
}

func (s *ReleaseInstancePublicConnectionRequest) GetAddressType() *string {
	return s.AddressType
}

func (s *ReleaseInstancePublicConnectionRequest) GetCurrentConnectionString() *string {
	return s.CurrentConnectionString
}

func (s *ReleaseInstancePublicConnectionRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *ReleaseInstancePublicConnectionRequest) SetAddressType(v string) *ReleaseInstancePublicConnectionRequest {
	s.AddressType = &v
	return s
}

func (s *ReleaseInstancePublicConnectionRequest) SetCurrentConnectionString(v string) *ReleaseInstancePublicConnectionRequest {
	s.CurrentConnectionString = &v
	return s
}

func (s *ReleaseInstancePublicConnectionRequest) SetDBInstanceId(v string) *ReleaseInstancePublicConnectionRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ReleaseInstancePublicConnectionRequest) Validate() error {
	return dara.Validate(s)
}

type iReleaseInstancePublicConnectionResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetRequestId(v string) *ReleaseInstancePublicConnectionResponseBody
	GetRequestId() *string
}

type ReleaseInstancePublicConnectionResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// 9CEF7037-4158-4A65-BEC7-2A**********
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ReleaseInstancePublicConnectionResponseBody) String() string {
	return dara.Prettify(s)
}

func (s ReleaseInstancePublicConnectionResponseBody) GoString() string {
	return s.String()
}

func (s *ReleaseInstancePublicConnectionResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *ReleaseInstancePublicConnectionResponseBody) SetRequestId(v string) *ReleaseInstancePublicConnectionResponseBody {
	s.RequestId = &v
	return s
}

func (s *ReleaseInstancePublicConnectionResponseBody) Validate() error {
	return dara.Validate(s)
}

type iReleaseInstancePublicConnectionResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *ReleaseInstancePublicConnectionResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *ReleaseInstancePublicConnectionResponse
	GetStatusCode() *int32
	SetBody(v *ReleaseInstancePublicConnectionResponseBody) *ReleaseInstancePublicConnectionResponse
	GetBody() *ReleaseInstancePublicConnectionResponseBody
}

type ReleaseInstancePublicConnectionResponse struct {
	Headers    map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ReleaseInstancePublicConnectionResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ReleaseInstancePublicConnectionResponse) String() string {
	return dara.Prettify(s)
}

func (s ReleaseInstancePublicConnectionResponse) GoString() string {
	return s.String()
}

func (s *ReleaseInstancePublicConnectionResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *ReleaseInstancePublicConnectionResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *ReleaseInstancePublicConnectionResponse) GetBody() *ReleaseInstancePublicConnectionResponseBody {
	return s.Body
}

func (s *ReleaseInstancePublicConnectionResponse) SetHeaders(v map[string]*string) *ReleaseInstancePublicConnectionResponse {
	s.Headers = v
	return s
}

func (s *ReleaseInstancePublicConnectionResponse) SetStatusCode(v int32) *ReleaseInstancePublicConnectionResponse {
	s.StatusCode = &v
	return s
}

func (s *ReleaseInstancePublicConnectionResponse) SetBody(v *ReleaseInstancePublicConnectionResponseBody) *ReleaseInstancePublicConnectionResponse {
	s.Body = v
	return s
}

func (s *ReleaseInstancePublicConnectionResponse) Validate() error {
	return dara.Validate(s)
}

type iRerankRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *RerankRequest
	GetDBInstanceId() *string
	SetDocuments(v []*string) *RerankRequest
	GetDocuments() []*string
	SetMaxChunksPerDoc(v int32) *RerankRequest
	GetMaxChunksPerDoc() *int32
	SetModel(v string) *RerankRequest
	GetModel() *string
	SetOwnerId(v int64) *RerankRequest
	GetOwnerId() *int64
	SetQuery(v string) *RerankRequest
	GetQuery() *string
	SetRegionId(v string) *RerankRequest
	GetRegionId() *string
	SetReturnDocuments(v bool) *RerankRequest
	GetReturnDocuments() *bool
	SetTopK(v int32) *RerankRequest
	GetTopK() *int32
}

type RerankRequest struct {
	// Instance ID.
	//
	// > You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) API to view details of all AnalyticDB PostgreSQL instances in the target region, including the instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// List of documents to be re-ordered.
	Documents []*string `json:"Documents,omitempty" xml:"Documents,omitempty" type:"Repeated"`
	// Maximum number of chunks allowed when the text exceeds the model window:
	//
	// - bge-reranker-v2-m3: default value is 10.
	//
	// - bge-reranker-v2-minicpm-layerwise: default value is 5:
	//
	// > Example of splitting
	//
	// > - If using the bge-reranker-v2-minicpm-layerwise model, the maximum single inference window is 2048 tokens. If the query is 48 tokens and the content of a single document parameter is 9000 tokens, it will be divided as follows: 1-2000 for the first, 2001-4000 for the second, and so on. If the number of splits exceeds MaxChunksPerDoc, the remaining sentences will be discarded.
	//
	// example:
	//
	// 10
	MaxChunksPerDoc *int32 `json:"MaxChunksPerDoc,omitempty" xml:"MaxChunksPerDoc,omitempty"`
	// Rerank model, currently supports:
	//
	// - bge-reranker-v2-m3: (default), better performance, supports 8192 tokens per inference, if exceeded, it will be split, which may reduce the effect.
	//
	// - bge-reranker-v2-minicpm-layerwise: better performance than v2-m3, supports 2048 tokens per inference, if exceeded, it will be split, which may reduce the effect.
	//
	// example:
	//
	// bge-reranker-v2-m3
	Model   *string `json:"Model,omitempty" xml:"Model,omitempty"`
	OwnerId *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// Query statement for Rerank.
	//
	// example:
	//
	// What is ADBPG?
	Query *string `json:"Query,omitempty" xml:"Query,omitempty"`
	// Region ID where the instance is located.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// If set to false, does not return the Documents text, only returns the index of the document order and the rerank score.
	//
	// example:
	//
	// false
	ReturnDocuments *bool `json:"ReturnDocuments,omitempty" xml:"ReturnDocuments,omitempty"`
	// Number of most relevant documents to return.
	//
	// example:
	//
	// 3
	TopK *int32 `json:"TopK,omitempty" xml:"TopK,omitempty"`
}

func (s RerankRequest) String() string {
	return dara.Prettify(s)
}

func (s RerankRequest) GoString() string {
	return s.String()
}

func (s *RerankRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *RerankRequest) GetDocuments() []*string {
	return s.Documents
}

func (s *RerankRequest) GetMaxChunksPerDoc() *int32 {
	return s.MaxChunksPerDoc
}

func (s *RerankRequest) GetModel() *string {
	return s.Model
}

func (s *RerankRequest) GetOwnerId() *int64 {
	return s.OwnerId
}

func (s *RerankRequest) GetQuery() *string {
	return s.Query
}

func (s *RerankRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *RerankRequest) GetReturnDocuments() *bool {
	return s.ReturnDocuments
}

func (s *RerankRequest) GetTopK() *int32 {
	return s.TopK
}

func (s *RerankRequest) SetDBInstanceId(v string) *RerankRequest {
	s.DBInstanceId = &v
	return s
}

func (s *RerankRequest) SetDocuments(v []*string) *RerankRequest {
	s.Documents = v
	return s
}

func (s *RerankRequest) SetMaxChunksPerDoc(v int32) *RerankRequest {
	s.MaxChunksPerDoc = &v
	return s
}

func (s *RerankRequest) SetModel(v string) *RerankRequest {
	s.Model = &v
	return s
}

func (s *RerankRequest) SetOwnerId(v int64) *RerankRequest {
	s.OwnerId = &v
	return s
}

func (s *RerankRequest) SetQuery(v string) *RerankRequest {
	s.Query = &v
	return s
}

func (s *RerankRequest) SetRegionId(v string) *RerankRequest {
	s.RegionId = &v
	return s
}

func (s *RerankRequest) SetReturnDocuments(v bool) *RerankRequest {
	s.ReturnDocuments = &v
	return s
}

func (s *RerankRequest) SetTopK(v int32) *RerankRequest {
	s.TopK = &v
	return s
}

func (s *RerankRequest) Validate() error {
	return dara.Validate(s)
}

type iRerankShrinkRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *RerankShrinkRequest
	GetDBInstanceId() *string
	SetDocumentsShrink(v string) *RerankShrinkRequest
	GetDocumentsShrink() *string
	SetMaxChunksPerDoc(v int32) *RerankShrinkRequest
	GetMaxChunksPerDoc() *int32
	SetModel(v string) *RerankShrinkRequest
	GetModel() *string
	SetOwnerId(v int64) *RerankShrinkRequest
	GetOwnerId() *int64
	SetQuery(v string) *RerankShrinkRequest
	GetQuery() *string
	SetRegionId(v string) *RerankShrinkRequest
	GetRegionId() *string
	SetReturnDocuments(v bool) *RerankShrinkRequest
	GetReturnDocuments() *bool
	SetTopK(v int32) *RerankShrinkRequest
	GetTopK() *int32
}

type RerankShrinkRequest struct {
	// Instance ID.
	//
	// > You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) API to view details of all AnalyticDB PostgreSQL instances in the target region, including the instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// List of documents to be re-ordered.
	DocumentsShrink *string `json:"Documents,omitempty" xml:"Documents,omitempty"`
	// Maximum number of chunks allowed when the text exceeds the model window:
	//
	// - bge-reranker-v2-m3: default value is 10.
	//
	// - bge-reranker-v2-minicpm-layerwise: default value is 5:
	//
	// > Example of splitting
	//
	// > - If using the bge-reranker-v2-minicpm-layerwise model, the maximum single inference window is 2048 tokens. If the query is 48 tokens and the content of a single document parameter is 9000 tokens, it will be divided as follows: 1-2000 for the first, 2001-4000 for the second, and so on. If the number of splits exceeds MaxChunksPerDoc, the remaining sentences will be discarded.
	//
	// example:
	//
	// 10
	MaxChunksPerDoc *int32 `json:"MaxChunksPerDoc,omitempty" xml:"MaxChunksPerDoc,omitempty"`
	// Rerank model, currently supports:
	//
	// - bge-reranker-v2-m3: (default), better performance, supports 8192 tokens per inference, if exceeded, it will be split, which may reduce the effect.
	//
	// - bge-reranker-v2-minicpm-layerwise: better performance than v2-m3, supports 2048 tokens per inference, if exceeded, it will be split, which may reduce the effect.
	//
	// example:
	//
	// bge-reranker-v2-m3
	Model   *string `json:"Model,omitempty" xml:"Model,omitempty"`
	OwnerId *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// Query statement for Rerank.
	//
	// example:
	//
	// What is ADBPG?
	Query *string `json:"Query,omitempty" xml:"Query,omitempty"`
	// Region ID where the instance is located.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// If set to false, does not return the Documents text, only returns the index of the document order and the rerank score.
	//
	// example:
	//
	// false
	ReturnDocuments *bool `json:"ReturnDocuments,omitempty" xml:"ReturnDocuments,omitempty"`
	// Number of most relevant documents to return.
	//
	// example:
	//
	// 3
	TopK *int32 `json:"TopK,omitempty" xml:"TopK,omitempty"`
}

func (s RerankShrinkRequest) String() string {
	return dara.Prettify(s)
}

func (s RerankShrinkRequest) GoString() string {
	return s.String()
}

func (s *RerankShrinkRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *RerankShrinkRequest) GetDocumentsShrink() *string {
	return s.DocumentsShrink
}

func (s *RerankShrinkRequest) GetMaxChunksPerDoc() *int32 {
	return s.MaxChunksPerDoc
}

func (s *RerankShrinkRequest) GetModel() *string {
	return s.Model
}

func (s *RerankShrinkRequest) GetOwnerId() *int64 {
	return s.OwnerId
}

func (s *RerankShrinkRequest) GetQuery() *string {
	return s.Query
}

func (s *RerankShrinkRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *RerankShrinkRequest) GetReturnDocuments() *bool {
	return s.ReturnDocuments
}

func (s *RerankShrinkRequest) GetTopK() *int32 {
	return s.TopK
}

func (s *RerankShrinkRequest) SetDBInstanceId(v string) *RerankShrinkRequest {
	s.DBInstanceId = &v
	return s
}

func (s *RerankShrinkRequest) SetDocumentsShrink(v string) *RerankShrinkRequest {
	s.DocumentsShrink = &v
	return s
}

func (s *RerankShrinkRequest) SetMaxChunksPerDoc(v int32) *RerankShrinkRequest {
	s.MaxChunksPerDoc = &v
	return s
}

func (s *RerankShrinkRequest) SetModel(v string) *RerankShrinkRequest {
	s.Model = &v
	return s
}

func (s *RerankShrinkRequest) SetOwnerId(v int64) *RerankShrinkRequest {
	s.OwnerId = &v
	return s
}

func (s *RerankShrinkRequest) SetQuery(v string) *RerankShrinkRequest {
	s.Query = &v
	return s
}

func (s *RerankShrinkRequest) SetRegionId(v string) *RerankShrinkRequest {
	s.RegionId = &v
	return s
}

func (s *RerankShrinkRequest) SetReturnDocuments(v bool) *RerankShrinkRequest {
	s.ReturnDocuments = &v
	return s
}

func (s *RerankShrinkRequest) SetTopK(v int32) *RerankShrinkRequest {
	s.TopK = &v
	return s
}

func (s *RerankShrinkRequest) Validate() error {
	return dara.Validate(s)
}

type iRerankResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetMessage(v string) *RerankResponseBody
	GetMessage() *string
	SetRequestId(v string) *RerankResponseBody
	GetRequestId() *string
	SetResults(v *RerankResponseBodyResults) *RerankResponseBody
	GetResults() *RerankResponseBodyResults
	SetStatus(v string) *RerankResponseBody
	GetStatus() *string
	SetTokens(v int32) *RerankResponseBody
	GetTokens() *int32
}

type RerankResponseBody struct {
	// Detailed information returned by the interface.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Rerank results.
	Results *RerankResponseBodyResults `json:"Results,omitempty" xml:"Results,omitempty" type:"Struct"`
	// API execution status, value description:
	//
	// - **success**: Execution succeeded.
	//
	// - **fail**: Execution failed.
	//
	// example:
	//
	// success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// Number of consumed tokens.
	//
	// example:
	//
	// 100
	Tokens *int32 `json:"Tokens,omitempty" xml:"Tokens,omitempty"`
}

func (s RerankResponseBody) String() string {
	return dara.Prettify(s)
}

func (s RerankResponseBody) GoString() string {
	return s.String()
}

func (s *RerankResponseBody) GetMessage() *string {
	return s.Message
}

func (s *RerankResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *RerankResponseBody) GetResults() *RerankResponseBodyResults {
	return s.Results
}

func (s *RerankResponseBody) GetStatus() *string {
	return s.Status
}

func (s *RerankResponseBody) GetTokens() *int32 {
	return s.Tokens
}

func (s *RerankResponseBody) SetMessage(v string) *RerankResponseBody {
	s.Message = &v
	return s
}

func (s *RerankResponseBody) SetRequestId(v string) *RerankResponseBody {
	s.RequestId = &v
	return s
}

func (s *RerankResponseBody) SetResults(v *RerankResponseBodyResults) *RerankResponseBody {
	s.Results = v
	return s
}

func (s *RerankResponseBody) SetStatus(v string) *RerankResponseBody {
	s.Status = &v
	return s
}

func (s *RerankResponseBody) SetTokens(v int32) *RerankResponseBody {
	s.Tokens = &v
	return s
}

func (s *RerankResponseBody) Validate() error {
	return dara.Validate(s)
}

type RerankResponseBodyResults struct {
	Results []*RerankResponseBodyResultsResults `json:"Results,omitempty" xml:"Results,omitempty" type:"Repeated"`
}

func (s RerankResponseBodyResults) String() string {
	return dara.Prettify(s)
}

func (s RerankResponseBodyResults) GoString() string {
	return s.String()
}

func (s *RerankResponseBodyResults) GetResults() []*RerankResponseBodyResultsResults {
	return s.Results
}

func (s *RerankResponseBodyResults) SetResults(v []*RerankResponseBodyResultsResults) *RerankResponseBodyResults {
	s.Results = v
	return s
}

func (s *RerankResponseBodyResults) Validate() error {
	return dara.Validate(s)
}

type RerankResponseBodyResultsResults struct {
	// Re-ordered document information.
	//
	// example:
	//
	// ADBPG is the OLAP database of Alibaba Cloud.
	Document *string `json:"Document,omitempty" xml:"Document,omitempty"`
	// Index of this document in the request parameter Documents, starting from 0.
	//
	// example:
	//
	// 1
	Index *int32 `json:"Index,omitempty" xml:"Index,omitempty"`
	// Rerank similarity score.
	//
	// example:
	//
	// 2.31412
	RelevanceScore *float32 `json:"RelevanceScore,omitempty" xml:"RelevanceScore,omitempty"`
}

func (s RerankResponseBodyResultsResults) String() string {
	return dara.Prettify(s)
}

func (s RerankResponseBodyResultsResults) GoString() string {
	return s.String()
}

func (s *RerankResponseBodyResultsResults) GetDocument() *string {
	return s.Document
}

func (s *RerankResponseBodyResultsResults) GetIndex() *int32 {
	return s.Index
}

func (s *RerankResponseBodyResultsResults) GetRelevanceScore() *float32 {
	return s.RelevanceScore
}

func (s *RerankResponseBodyResultsResults) SetDocument(v string) *RerankResponseBodyResultsResults {
	s.Document = &v
	return s
}

func (s *RerankResponseBodyResultsResults) SetIndex(v int32) *RerankResponseBodyResultsResults {
	s.Index = &v
	return s
}

func (s *RerankResponseBodyResultsResults) SetRelevanceScore(v float32) *RerankResponseBodyResultsResults {
	s.RelevanceScore = &v
	return s
}

func (s *RerankResponseBodyResultsResults) Validate() error {
	return dara.Validate(s)
}

type iRerankResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *RerankResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *RerankResponse
	GetStatusCode() *int32
	SetBody(v *RerankResponseBody) *RerankResponse
	GetBody() *RerankResponseBody
}

type RerankResponse struct {
	Headers    map[string]*string  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RerankResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RerankResponse) String() string {
	return dara.Prettify(s)
}

func (s RerankResponse) GoString() string {
	return s.String()
}

func (s *RerankResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *RerankResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *RerankResponse) GetBody() *RerankResponseBody {
	return s.Body
}

func (s *RerankResponse) SetHeaders(v map[string]*string) *RerankResponse {
	s.Headers = v
	return s
}

func (s *RerankResponse) SetStatusCode(v int32) *RerankResponse {
	s.StatusCode = &v
	return s
}

func (s *RerankResponse) SetBody(v *RerankResponseBody) *RerankResponse {
	s.Body = v
	return s
}

func (s *RerankResponse) Validate() error {
	return dara.Validate(s)
}

type iResetAccountPasswordRequest interface {
	dara.Model
	String() string
	GoString() string
	SetAccountName(v string) *ResetAccountPasswordRequest
	GetAccountName() *string
	SetAccountPassword(v string) *ResetAccountPasswordRequest
	GetAccountPassword() *string
	SetDBInstanceId(v string) *ResetAccountPasswordRequest
	GetDBInstanceId() *string
}

type ResetAccountPasswordRequest struct {
	// The ID of the instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// testaccount_1
	AccountName *string `json:"AccountName,omitempty" xml:"AccountName,omitempty"`
	// The name of the account.
	//
	// This parameter is required.
	//
	// example:
	//
	// Testaccount_1
	AccountPassword *string `json:"AccountPassword,omitempty" xml:"AccountPassword,omitempty"`
	// Before you call this operation, make sure that the following requirements are met:
	//
	// 	- The instance is in the running state.
	//
	// 	- The instance is not locked.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-t4nf48vf15713****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
}

func (s ResetAccountPasswordRequest) String() string {
	return dara.Prettify(s)
}

func (s ResetAccountPasswordRequest) GoString() string {
	return s.String()
}

func (s *ResetAccountPasswordRequest) GetAccountName() *string {
	return s.AccountName
}

func (s *ResetAccountPasswordRequest) GetAccountPassword() *string {
	return s.AccountPassword
}

func (s *ResetAccountPasswordRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *ResetAccountPasswordRequest) SetAccountName(v string) *ResetAccountPasswordRequest {
	s.AccountName = &v
	return s
}

func (s *ResetAccountPasswordRequest) SetAccountPassword(v string) *ResetAccountPasswordRequest {
	s.AccountPassword = &v
	return s
}

func (s *ResetAccountPasswordRequest) SetDBInstanceId(v string) *ResetAccountPasswordRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ResetAccountPasswordRequest) Validate() error {
	return dara.Validate(s)
}

type iResetAccountPasswordResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetRequestId(v string) *ResetAccountPasswordResponseBody
	GetRequestId() *string
}

type ResetAccountPasswordResponseBody struct {
	// The new password for the account. The password must be 8 to 32 characters in length and contain at least three of the following character types: uppercase letters, lowercase letters, digits, and special characters. Special characters include `! @ # $ % ^ & 	- ( ) _ + - =`
	//
	// example:
	//
	// 187C80FC-75C4-477C-BBF2-A368A36D041C
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ResetAccountPasswordResponseBody) String() string {
	return dara.Prettify(s)
}

func (s ResetAccountPasswordResponseBody) GoString() string {
	return s.String()
}

func (s *ResetAccountPasswordResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *ResetAccountPasswordResponseBody) SetRequestId(v string) *ResetAccountPasswordResponseBody {
	s.RequestId = &v
	return s
}

func (s *ResetAccountPasswordResponseBody) Validate() error {
	return dara.Validate(s)
}

type iResetAccountPasswordResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *ResetAccountPasswordResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *ResetAccountPasswordResponse
	GetStatusCode() *int32
	SetBody(v *ResetAccountPasswordResponseBody) *ResetAccountPasswordResponse
	GetBody() *ResetAccountPasswordResponseBody
}

type ResetAccountPasswordResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ResetAccountPasswordResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ResetAccountPasswordResponse) String() string {
	return dara.Prettify(s)
}

func (s ResetAccountPasswordResponse) GoString() string {
	return s.String()
}

func (s *ResetAccountPasswordResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *ResetAccountPasswordResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *ResetAccountPasswordResponse) GetBody() *ResetAccountPasswordResponseBody {
	return s.Body
}

func (s *ResetAccountPasswordResponse) SetHeaders(v map[string]*string) *ResetAccountPasswordResponse {
	s.Headers = v
	return s
}

func (s *ResetAccountPasswordResponse) SetStatusCode(v int32) *ResetAccountPasswordResponse {
	s.StatusCode = &v
	return s
}

func (s *ResetAccountPasswordResponse) SetBody(v *ResetAccountPasswordResponseBody) *ResetAccountPasswordResponse {
	s.Body = v
	return s
}

func (s *ResetAccountPasswordResponse) Validate() error {
	return dara.Validate(s)
}

type iResetIMVMonitorDataRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *ResetIMVMonitorDataRequest
	GetDBInstanceId() *string
	SetDatabase(v string) *ResetIMVMonitorDataRequest
	GetDatabase() *string
}

type ResetIMVMonitorDataRequest struct {
	// The instance ID.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp152460513z****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The name of the database.
	//
	// This parameter is required.
	//
	// example:
	//
	// testdb
	Database *string `json:"Database,omitempty" xml:"Database,omitempty"`
}

func (s ResetIMVMonitorDataRequest) String() string {
	return dara.Prettify(s)
}

func (s ResetIMVMonitorDataRequest) GoString() string {
	return s.String()
}

func (s *ResetIMVMonitorDataRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *ResetIMVMonitorDataRequest) GetDatabase() *string {
	return s.Database
}

func (s *ResetIMVMonitorDataRequest) SetDBInstanceId(v string) *ResetIMVMonitorDataRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ResetIMVMonitorDataRequest) SetDatabase(v string) *ResetIMVMonitorDataRequest {
	s.Database = &v
	return s
}

func (s *ResetIMVMonitorDataRequest) Validate() error {
	return dara.Validate(s)
}

type iResetIMVMonitorDataResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetRequestId(v string) *ResetIMVMonitorDataResponseBody
	GetRequestId() *string
	SetStatus(v bool) *ResetIMVMonitorDataResponseBody
	GetStatus() *bool
}

type ResetIMVMonitorDataResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **false**
	//
	// 	- **true**
	//
	// example:
	//
	// true
	Status *bool `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ResetIMVMonitorDataResponseBody) String() string {
	return dara.Prettify(s)
}

func (s ResetIMVMonitorDataResponseBody) GoString() string {
	return s.String()
}

func (s *ResetIMVMonitorDataResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *ResetIMVMonitorDataResponseBody) GetStatus() *bool {
	return s.Status
}

func (s *ResetIMVMonitorDataResponseBody) SetRequestId(v string) *ResetIMVMonitorDataResponseBody {
	s.RequestId = &v
	return s
}

func (s *ResetIMVMonitorDataResponseBody) SetStatus(v bool) *ResetIMVMonitorDataResponseBody {
	s.Status = &v
	return s
}

func (s *ResetIMVMonitorDataResponseBody) Validate() error {
	return dara.Validate(s)
}

type iResetIMVMonitorDataResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *ResetIMVMonitorDataResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *ResetIMVMonitorDataResponse
	GetStatusCode() *int32
	SetBody(v *ResetIMVMonitorDataResponseBody) *ResetIMVMonitorDataResponse
	GetBody() *ResetIMVMonitorDataResponseBody
}

type ResetIMVMonitorDataResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ResetIMVMonitorDataResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ResetIMVMonitorDataResponse) String() string {
	return dara.Prettify(s)
}

func (s ResetIMVMonitorDataResponse) GoString() string {
	return s.String()
}

func (s *ResetIMVMonitorDataResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *ResetIMVMonitorDataResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *ResetIMVMonitorDataResponse) GetBody() *ResetIMVMonitorDataResponseBody {
	return s.Body
}

func (s *ResetIMVMonitorDataResponse) SetHeaders(v map[string]*string) *ResetIMVMonitorDataResponse {
	s.Headers = v
	return s
}

func (s *ResetIMVMonitorDataResponse) SetStatusCode(v int32) *ResetIMVMonitorDataResponse {
	s.StatusCode = &v
	return s
}

func (s *ResetIMVMonitorDataResponse) SetBody(v *ResetIMVMonitorDataResponseBody) *ResetIMVMonitorDataResponse {
	s.Body = v
	return s
}

func (s *ResetIMVMonitorDataResponse) Validate() error {
	return dara.Validate(s)
}

type iRestartDBInstanceRequest interface {
	dara.Model
	String() string
	GoString() string
	SetClientToken(v string) *RestartDBInstanceRequest
	GetClientToken() *string
	SetDBInstanceId(v string) *RestartDBInstanceRequest
	GetDBInstanceId() *string
}

type RestartDBInstanceRequest struct {
	// The client token that is used to ensure the idempotence of the request. For more information, see [How to ensure idempotence](https://help.aliyun.com/document_detail/327176.html).
	//
	// example:
	//
	// 0c593ea1-3bea-11e9-b96b-88**********
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// The ID of the instance.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the details of all AnalyticDB for PostgreSQL instances in a specific region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
}

func (s RestartDBInstanceRequest) String() string {
	return dara.Prettify(s)
}

func (s RestartDBInstanceRequest) GoString() string {
	return s.String()
}

func (s *RestartDBInstanceRequest) GetClientToken() *string {
	return s.ClientToken
}

func (s *RestartDBInstanceRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *RestartDBInstanceRequest) SetClientToken(v string) *RestartDBInstanceRequest {
	s.ClientToken = &v
	return s
}

func (s *RestartDBInstanceRequest) SetDBInstanceId(v string) *RestartDBInstanceRequest {
	s.DBInstanceId = &v
	return s
}

func (s *RestartDBInstanceRequest) Validate() error {
	return dara.Validate(s)
}

type iRestartDBInstanceResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetRequestId(v string) *RestartDBInstanceResponseBody
	GetRequestId() *string
}

type RestartDBInstanceResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// A7356493-7141-4393-8951-CDA8AB5D67EC
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RestartDBInstanceResponseBody) String() string {
	return dara.Prettify(s)
}

func (s RestartDBInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *RestartDBInstanceResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *RestartDBInstanceResponseBody) SetRequestId(v string) *RestartDBInstanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *RestartDBInstanceResponseBody) Validate() error {
	return dara.Validate(s)
}

type iRestartDBInstanceResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *RestartDBInstanceResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *RestartDBInstanceResponse
	GetStatusCode() *int32
	SetBody(v *RestartDBInstanceResponseBody) *RestartDBInstanceResponse
	GetBody() *RestartDBInstanceResponseBody
}

type RestartDBInstanceResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RestartDBInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RestartDBInstanceResponse) String() string {
	return dara.Prettify(s)
}

func (s RestartDBInstanceResponse) GoString() string {
	return s.String()
}

func (s *RestartDBInstanceResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *RestartDBInstanceResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *RestartDBInstanceResponse) GetBody() *RestartDBInstanceResponseBody {
	return s.Body
}

func (s *RestartDBInstanceResponse) SetHeaders(v map[string]*string) *RestartDBInstanceResponse {
	s.Headers = v
	return s
}

func (s *RestartDBInstanceResponse) SetStatusCode(v int32) *RestartDBInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *RestartDBInstanceResponse) SetBody(v *RestartDBInstanceResponseBody) *RestartDBInstanceResponse {
	s.Body = v
	return s
}

func (s *RestartDBInstanceResponse) Validate() error {
	return dara.Validate(s)
}

type iResumeDataRedistributeRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *ResumeDataRedistributeRequest
	GetDBInstanceId() *string
	SetOwnerId(v int64) *ResumeDataRedistributeRequest
	GetOwnerId() *int64
}

type ResumeDataRedistributeRequest struct {
	// The instance ID.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s ResumeDataRedistributeRequest) String() string {
	return dara.Prettify(s)
}

func (s ResumeDataRedistributeRequest) GoString() string {
	return s.String()
}

func (s *ResumeDataRedistributeRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *ResumeDataRedistributeRequest) GetOwnerId() *int64 {
	return s.OwnerId
}

func (s *ResumeDataRedistributeRequest) SetDBInstanceId(v string) *ResumeDataRedistributeRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ResumeDataRedistributeRequest) SetOwnerId(v int64) *ResumeDataRedistributeRequest {
	s.OwnerId = &v
	return s
}

func (s *ResumeDataRedistributeRequest) Validate() error {
	return dara.Validate(s)
}

type iResumeDataRedistributeResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetRequestId(v string) *ResumeDataRedistributeResponseBody
	GetRequestId() *string
}

type ResumeDataRedistributeResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ResumeDataRedistributeResponseBody) String() string {
	return dara.Prettify(s)
}

func (s ResumeDataRedistributeResponseBody) GoString() string {
	return s.String()
}

func (s *ResumeDataRedistributeResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *ResumeDataRedistributeResponseBody) SetRequestId(v string) *ResumeDataRedistributeResponseBody {
	s.RequestId = &v
	return s
}

func (s *ResumeDataRedistributeResponseBody) Validate() error {
	return dara.Validate(s)
}

type iResumeDataRedistributeResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *ResumeDataRedistributeResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *ResumeDataRedistributeResponse
	GetStatusCode() *int32
	SetBody(v *ResumeDataRedistributeResponseBody) *ResumeDataRedistributeResponse
	GetBody() *ResumeDataRedistributeResponseBody
}

type ResumeDataRedistributeResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ResumeDataRedistributeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ResumeDataRedistributeResponse) String() string {
	return dara.Prettify(s)
}

func (s ResumeDataRedistributeResponse) GoString() string {
	return s.String()
}

func (s *ResumeDataRedistributeResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *ResumeDataRedistributeResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *ResumeDataRedistributeResponse) GetBody() *ResumeDataRedistributeResponseBody {
	return s.Body
}

func (s *ResumeDataRedistributeResponse) SetHeaders(v map[string]*string) *ResumeDataRedistributeResponse {
	s.Headers = v
	return s
}

func (s *ResumeDataRedistributeResponse) SetStatusCode(v int32) *ResumeDataRedistributeResponse {
	s.StatusCode = &v
	return s
}

func (s *ResumeDataRedistributeResponse) SetBody(v *ResumeDataRedistributeResponseBody) *ResumeDataRedistributeResponse {
	s.Body = v
	return s
}

func (s *ResumeDataRedistributeResponse) Validate() error {
	return dara.Validate(s)
}

type iResumeInstanceRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *ResumeInstanceRequest
	GetDBInstanceId() *string
	SetOwnerId(v int64) *ResumeInstanceRequest
	GetOwnerId() *int64
}

type ResumeInstanceRequest struct {
	// The ID of the instance.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the details of all AnalyticDB for PostgreSQL instances in a specific region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s ResumeInstanceRequest) String() string {
	return dara.Prettify(s)
}

func (s ResumeInstanceRequest) GoString() string {
	return s.String()
}

func (s *ResumeInstanceRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *ResumeInstanceRequest) GetOwnerId() *int64 {
	return s.OwnerId
}

func (s *ResumeInstanceRequest) SetDBInstanceId(v string) *ResumeInstanceRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ResumeInstanceRequest) SetOwnerId(v int64) *ResumeInstanceRequest {
	s.OwnerId = &v
	return s
}

func (s *ResumeInstanceRequest) Validate() error {
	return dara.Validate(s)
}

type iResumeInstanceResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *ResumeInstanceResponseBody
	GetDBInstanceId() *string
	SetErrorMessage(v string) *ResumeInstanceResponseBody
	GetErrorMessage() *string
	SetRequestId(v string) *ResumeInstanceResponseBody
	GetRequestId() *string
	SetStatus(v bool) *ResumeInstanceResponseBody
	GetStatus() *bool
}

type ResumeInstanceResponseBody struct {
	// The ID of the instance.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The error message returned.
	//
	// This parameter is returned only if **false*	- is returned for the **Status*	- parameter.
	//
	// example:
	//
	// ******
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 34b32a0a-08ef-4a87-b6be-cdd9********
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **false**: The request failed.
	//
	// 	- **true**: The request was successful.
	//
	// example:
	//
	// true
	Status *bool `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ResumeInstanceResponseBody) String() string {
	return dara.Prettify(s)
}

func (s ResumeInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *ResumeInstanceResponseBody) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *ResumeInstanceResponseBody) GetErrorMessage() *string {
	return s.ErrorMessage
}

func (s *ResumeInstanceResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *ResumeInstanceResponseBody) GetStatus() *bool {
	return s.Status
}

func (s *ResumeInstanceResponseBody) SetDBInstanceId(v string) *ResumeInstanceResponseBody {
	s.DBInstanceId = &v
	return s
}

func (s *ResumeInstanceResponseBody) SetErrorMessage(v string) *ResumeInstanceResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *ResumeInstanceResponseBody) SetRequestId(v string) *ResumeInstanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *ResumeInstanceResponseBody) SetStatus(v bool) *ResumeInstanceResponseBody {
	s.Status = &v
	return s
}

func (s *ResumeInstanceResponseBody) Validate() error {
	return dara.Validate(s)
}

type iResumeInstanceResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *ResumeInstanceResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *ResumeInstanceResponse
	GetStatusCode() *int32
	SetBody(v *ResumeInstanceResponseBody) *ResumeInstanceResponse
	GetBody() *ResumeInstanceResponseBody
}

type ResumeInstanceResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ResumeInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ResumeInstanceResponse) String() string {
	return dara.Prettify(s)
}

func (s ResumeInstanceResponse) GoString() string {
	return s.String()
}

func (s *ResumeInstanceResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *ResumeInstanceResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *ResumeInstanceResponse) GetBody() *ResumeInstanceResponseBody {
	return s.Body
}

func (s *ResumeInstanceResponse) SetHeaders(v map[string]*string) *ResumeInstanceResponse {
	s.Headers = v
	return s
}

func (s *ResumeInstanceResponse) SetStatusCode(v int32) *ResumeInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *ResumeInstanceResponse) SetBody(v *ResumeInstanceResponseBody) *ResumeInstanceResponse {
	s.Body = v
	return s
}

func (s *ResumeInstanceResponse) Validate() error {
	return dara.Validate(s)
}

type iSetDBInstancePlanStatusRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *SetDBInstancePlanStatusRequest
	GetDBInstanceId() *string
	SetOwnerId(v int64) *SetDBInstancePlanStatusRequest
	GetOwnerId() *int64
	SetPlanId(v string) *SetDBInstancePlanStatusRequest
	GetPlanId() *string
	SetPlanStatus(v string) *SetDBInstancePlanStatusRequest
	GetPlanStatus() *string
}

type SetDBInstancePlanStatusRequest struct {
	// The ID of the instance.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the details of all AnalyticDB for PostgreSQL instances in a specific region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The ID of the plan.
	//
	// >  You can call the [DescribeDBInstancePlans](https://help.aliyun.com/document_detail/449398.html) operation to query the details of plans, including plan IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1234
	PlanId *string `json:"PlanId,omitempty" xml:"PlanId,omitempty"`
	// Specifies whether to enable or disable the plan. Valid values:
	//
	// 	- **disable**: disables the plan.
	//
	// 	- **enable**: enables the plan.
	//
	// This parameter is required.
	//
	// example:
	//
	// disable
	PlanStatus *string `json:"PlanStatus,omitempty" xml:"PlanStatus,omitempty"`
}

func (s SetDBInstancePlanStatusRequest) String() string {
	return dara.Prettify(s)
}

func (s SetDBInstancePlanStatusRequest) GoString() string {
	return s.String()
}

func (s *SetDBInstancePlanStatusRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *SetDBInstancePlanStatusRequest) GetOwnerId() *int64 {
	return s.OwnerId
}

func (s *SetDBInstancePlanStatusRequest) GetPlanId() *string {
	return s.PlanId
}

func (s *SetDBInstancePlanStatusRequest) GetPlanStatus() *string {
	return s.PlanStatus
}

func (s *SetDBInstancePlanStatusRequest) SetDBInstanceId(v string) *SetDBInstancePlanStatusRequest {
	s.DBInstanceId = &v
	return s
}

func (s *SetDBInstancePlanStatusRequest) SetOwnerId(v int64) *SetDBInstancePlanStatusRequest {
	s.OwnerId = &v
	return s
}

func (s *SetDBInstancePlanStatusRequest) SetPlanId(v string) *SetDBInstancePlanStatusRequest {
	s.PlanId = &v
	return s
}

func (s *SetDBInstancePlanStatusRequest) SetPlanStatus(v string) *SetDBInstancePlanStatusRequest {
	s.PlanStatus = &v
	return s
}

func (s *SetDBInstancePlanStatusRequest) Validate() error {
	return dara.Validate(s)
}

type iSetDBInstancePlanStatusResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetErrorMessage(v string) *SetDBInstancePlanStatusResponseBody
	GetErrorMessage() *string
	SetPlanId(v string) *SetDBInstancePlanStatusResponseBody
	GetPlanId() *string
	SetRequestId(v string) *SetDBInstancePlanStatusResponseBody
	GetRequestId() *string
	SetStatus(v string) *SetDBInstancePlanStatusResponseBody
	GetStatus() *string
}

type SetDBInstancePlanStatusResponseBody struct {
	// The error message returned.
	//
	// This parameter is returned only when the operation fails.
	//
	// example:
	//
	// ****
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// The ID of the plan.
	//
	// example:
	//
	// 1234
	PlanId *string `json:"PlanId,omitempty" xml:"PlanId,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 34b32a0a-08ef-4a87-b6be-cdd988888888
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The state of the operation.
	//
	// If the operation is successful, **success*	- is returned. If the operation fails, this parameter is not returned.
	//
	// example:
	//
	// success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s SetDBInstancePlanStatusResponseBody) String() string {
	return dara.Prettify(s)
}

func (s SetDBInstancePlanStatusResponseBody) GoString() string {
	return s.String()
}

func (s *SetDBInstancePlanStatusResponseBody) GetErrorMessage() *string {
	return s.ErrorMessage
}

func (s *SetDBInstancePlanStatusResponseBody) GetPlanId() *string {
	return s.PlanId
}

func (s *SetDBInstancePlanStatusResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *SetDBInstancePlanStatusResponseBody) GetStatus() *string {
	return s.Status
}

func (s *SetDBInstancePlanStatusResponseBody) SetErrorMessage(v string) *SetDBInstancePlanStatusResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *SetDBInstancePlanStatusResponseBody) SetPlanId(v string) *SetDBInstancePlanStatusResponseBody {
	s.PlanId = &v
	return s
}

func (s *SetDBInstancePlanStatusResponseBody) SetRequestId(v string) *SetDBInstancePlanStatusResponseBody {
	s.RequestId = &v
	return s
}

func (s *SetDBInstancePlanStatusResponseBody) SetStatus(v string) *SetDBInstancePlanStatusResponseBody {
	s.Status = &v
	return s
}

func (s *SetDBInstancePlanStatusResponseBody) Validate() error {
	return dara.Validate(s)
}

type iSetDBInstancePlanStatusResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *SetDBInstancePlanStatusResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *SetDBInstancePlanStatusResponse
	GetStatusCode() *int32
	SetBody(v *SetDBInstancePlanStatusResponseBody) *SetDBInstancePlanStatusResponse
	GetBody() *SetDBInstancePlanStatusResponseBody
}

type SetDBInstancePlanStatusResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SetDBInstancePlanStatusResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SetDBInstancePlanStatusResponse) String() string {
	return dara.Prettify(s)
}

func (s SetDBInstancePlanStatusResponse) GoString() string {
	return s.String()
}

func (s *SetDBInstancePlanStatusResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *SetDBInstancePlanStatusResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *SetDBInstancePlanStatusResponse) GetBody() *SetDBInstancePlanStatusResponseBody {
	return s.Body
}

func (s *SetDBInstancePlanStatusResponse) SetHeaders(v map[string]*string) *SetDBInstancePlanStatusResponse {
	s.Headers = v
	return s
}

func (s *SetDBInstancePlanStatusResponse) SetStatusCode(v int32) *SetDBInstancePlanStatusResponse {
	s.StatusCode = &v
	return s
}

func (s *SetDBInstancePlanStatusResponse) SetBody(v *SetDBInstancePlanStatusResponseBody) *SetDBInstancePlanStatusResponse {
	s.Body = v
	return s
}

func (s *SetDBInstancePlanStatusResponse) Validate() error {
	return dara.Validate(s)
}

type iSetDataShareInstanceRequest interface {
	dara.Model
	String() string
	GoString() string
	SetInstanceList(v []*string) *SetDataShareInstanceRequest
	GetInstanceList() []*string
	SetOperationType(v string) *SetDataShareInstanceRequest
	GetOperationType() *string
	SetOwnerId(v int64) *SetDataShareInstanceRequest
	GetOwnerId() *int64
	SetRegionId(v string) *SetDataShareInstanceRequest
	GetRegionId() *string
}

type SetDataShareInstanceRequest struct {
	// The ID of the AnalyticDB for PostgreSQL instance in Serverless mode.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the details of all AnalyticDB for PostgreSQL instances in a specific region, including instance IDs.
	//
	// This parameter is required.
	InstanceList []*string `json:"InstanceList,omitempty" xml:"InstanceList,omitempty" type:"Repeated"`
	// Specifies whether to enable or disable data sharing. Valid values:
	//
	// 	- **add**: enables data sharing.
	//
	// 	- **remove**: disables data sharing.
	//
	// This parameter is required.
	//
	// example:
	//
	// add
	OperationType *string `json:"OperationType,omitempty" xml:"OperationType,omitempty"`
	OwnerId       *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The ID of the region.
	//
	// >  You can call the [DescribeRegions](https://help.aliyun.com/document_detail/86912.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s SetDataShareInstanceRequest) String() string {
	return dara.Prettify(s)
}

func (s SetDataShareInstanceRequest) GoString() string {
	return s.String()
}

func (s *SetDataShareInstanceRequest) GetInstanceList() []*string {
	return s.InstanceList
}

func (s *SetDataShareInstanceRequest) GetOperationType() *string {
	return s.OperationType
}

func (s *SetDataShareInstanceRequest) GetOwnerId() *int64 {
	return s.OwnerId
}

func (s *SetDataShareInstanceRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *SetDataShareInstanceRequest) SetInstanceList(v []*string) *SetDataShareInstanceRequest {
	s.InstanceList = v
	return s
}

func (s *SetDataShareInstanceRequest) SetOperationType(v string) *SetDataShareInstanceRequest {
	s.OperationType = &v
	return s
}

func (s *SetDataShareInstanceRequest) SetOwnerId(v int64) *SetDataShareInstanceRequest {
	s.OwnerId = &v
	return s
}

func (s *SetDataShareInstanceRequest) SetRegionId(v string) *SetDataShareInstanceRequest {
	s.RegionId = &v
	return s
}

func (s *SetDataShareInstanceRequest) Validate() error {
	return dara.Validate(s)
}

type iSetDataShareInstanceShrinkRequest interface {
	dara.Model
	String() string
	GoString() string
	SetInstanceListShrink(v string) *SetDataShareInstanceShrinkRequest
	GetInstanceListShrink() *string
	SetOperationType(v string) *SetDataShareInstanceShrinkRequest
	GetOperationType() *string
	SetOwnerId(v int64) *SetDataShareInstanceShrinkRequest
	GetOwnerId() *int64
	SetRegionId(v string) *SetDataShareInstanceShrinkRequest
	GetRegionId() *string
}

type SetDataShareInstanceShrinkRequest struct {
	// The ID of the AnalyticDB for PostgreSQL instance in Serverless mode.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the details of all AnalyticDB for PostgreSQL instances in a specific region, including instance IDs.
	//
	// This parameter is required.
	InstanceListShrink *string `json:"InstanceList,omitempty" xml:"InstanceList,omitempty"`
	// Specifies whether to enable or disable data sharing. Valid values:
	//
	// 	- **add**: enables data sharing.
	//
	// 	- **remove**: disables data sharing.
	//
	// This parameter is required.
	//
	// example:
	//
	// add
	OperationType *string `json:"OperationType,omitempty" xml:"OperationType,omitempty"`
	OwnerId       *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The ID of the region.
	//
	// >  You can call the [DescribeRegions](https://help.aliyun.com/document_detail/86912.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s SetDataShareInstanceShrinkRequest) String() string {
	return dara.Prettify(s)
}

func (s SetDataShareInstanceShrinkRequest) GoString() string {
	return s.String()
}

func (s *SetDataShareInstanceShrinkRequest) GetInstanceListShrink() *string {
	return s.InstanceListShrink
}

func (s *SetDataShareInstanceShrinkRequest) GetOperationType() *string {
	return s.OperationType
}

func (s *SetDataShareInstanceShrinkRequest) GetOwnerId() *int64 {
	return s.OwnerId
}

func (s *SetDataShareInstanceShrinkRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *SetDataShareInstanceShrinkRequest) SetInstanceListShrink(v string) *SetDataShareInstanceShrinkRequest {
	s.InstanceListShrink = &v
	return s
}

func (s *SetDataShareInstanceShrinkRequest) SetOperationType(v string) *SetDataShareInstanceShrinkRequest {
	s.OperationType = &v
	return s
}

func (s *SetDataShareInstanceShrinkRequest) SetOwnerId(v int64) *SetDataShareInstanceShrinkRequest {
	s.OwnerId = &v
	return s
}

func (s *SetDataShareInstanceShrinkRequest) SetRegionId(v string) *SetDataShareInstanceShrinkRequest {
	s.RegionId = &v
	return s
}

func (s *SetDataShareInstanceShrinkRequest) Validate() error {
	return dara.Validate(s)
}

type iSetDataShareInstanceResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetErrMessage(v string) *SetDataShareInstanceResponseBody
	GetErrMessage() *string
	SetRequestId(v string) *SetDataShareInstanceResponseBody
	GetRequestId() *string
	SetStatus(v string) *SetDataShareInstanceResponseBody
	GetStatus() *string
}

type SetDataShareInstanceResponseBody struct {
	// The error message returned if the operation fails.
	//
	// example:
	//
	// error message
	ErrMessage *string `json:"ErrMessage,omitempty" xml:"ErrMessage,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// B4CAF581-2AC7-41AD-8940-D5**********
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The state of the operation. Valid values:
	//
	// 	- **success**: The operation is successful.
	//
	// 	- **failed**: The operation fails.
	//
	// example:
	//
	// success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s SetDataShareInstanceResponseBody) String() string {
	return dara.Prettify(s)
}

func (s SetDataShareInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *SetDataShareInstanceResponseBody) GetErrMessage() *string {
	return s.ErrMessage
}

func (s *SetDataShareInstanceResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *SetDataShareInstanceResponseBody) GetStatus() *string {
	return s.Status
}

func (s *SetDataShareInstanceResponseBody) SetErrMessage(v string) *SetDataShareInstanceResponseBody {
	s.ErrMessage = &v
	return s
}

func (s *SetDataShareInstanceResponseBody) SetRequestId(v string) *SetDataShareInstanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *SetDataShareInstanceResponseBody) SetStatus(v string) *SetDataShareInstanceResponseBody {
	s.Status = &v
	return s
}

func (s *SetDataShareInstanceResponseBody) Validate() error {
	return dara.Validate(s)
}

type iSetDataShareInstanceResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *SetDataShareInstanceResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *SetDataShareInstanceResponse
	GetStatusCode() *int32
	SetBody(v *SetDataShareInstanceResponseBody) *SetDataShareInstanceResponse
	GetBody() *SetDataShareInstanceResponseBody
}

type SetDataShareInstanceResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SetDataShareInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SetDataShareInstanceResponse) String() string {
	return dara.Prettify(s)
}

func (s SetDataShareInstanceResponse) GoString() string {
	return s.String()
}

func (s *SetDataShareInstanceResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *SetDataShareInstanceResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *SetDataShareInstanceResponse) GetBody() *SetDataShareInstanceResponseBody {
	return s.Body
}

func (s *SetDataShareInstanceResponse) SetHeaders(v map[string]*string) *SetDataShareInstanceResponse {
	s.Headers = v
	return s
}

func (s *SetDataShareInstanceResponse) SetStatusCode(v int32) *SetDataShareInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *SetDataShareInstanceResponse) SetBody(v *SetDataShareInstanceResponseBody) *SetDataShareInstanceResponse {
	s.Body = v
	return s
}

func (s *SetDataShareInstanceResponse) Validate() error {
	return dara.Validate(s)
}

type iSwitchDBInstanceNetTypeRequest interface {
	dara.Model
	String() string
	GoString() string
	SetConnectionStringPrefix(v string) *SwitchDBInstanceNetTypeRequest
	GetConnectionStringPrefix() *string
	SetDBInstanceId(v string) *SwitchDBInstanceNetTypeRequest
	GetDBInstanceId() *string
	SetPort(v string) *SwitchDBInstanceNetTypeRequest
	GetPort() *string
}

type SwitchDBInstanceNetTypeRequest struct {
	// The prefix of the custom endpoint.
	//
	// 	- The prefix can contain lowercase letters, digits, and hyphens (-) and must start with a lowercase letter.
	//
	// 	- The prefix can be up to 30 characters in length.
	//
	// This parameter is required.
	//
	// example:
	//
	// test1234
	ConnectionStringPrefix *string `json:"ConnectionStringPrefix,omitempty" xml:"ConnectionStringPrefix,omitempty"`
	// The instance ID.
	//
	// > You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/2361776.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// rm-uf6wjk5xxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The port number.
	//
	// This parameter is required.
	//
	// example:
	//
	// 3306
	Port *string `json:"Port,omitempty" xml:"Port,omitempty"`
}

func (s SwitchDBInstanceNetTypeRequest) String() string {
	return dara.Prettify(s)
}

func (s SwitchDBInstanceNetTypeRequest) GoString() string {
	return s.String()
}

func (s *SwitchDBInstanceNetTypeRequest) GetConnectionStringPrefix() *string {
	return s.ConnectionStringPrefix
}

func (s *SwitchDBInstanceNetTypeRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *SwitchDBInstanceNetTypeRequest) GetPort() *string {
	return s.Port
}

func (s *SwitchDBInstanceNetTypeRequest) SetConnectionStringPrefix(v string) *SwitchDBInstanceNetTypeRequest {
	s.ConnectionStringPrefix = &v
	return s
}

func (s *SwitchDBInstanceNetTypeRequest) SetDBInstanceId(v string) *SwitchDBInstanceNetTypeRequest {
	s.DBInstanceId = &v
	return s
}

func (s *SwitchDBInstanceNetTypeRequest) SetPort(v string) *SwitchDBInstanceNetTypeRequest {
	s.Port = &v
	return s
}

func (s *SwitchDBInstanceNetTypeRequest) Validate() error {
	return dara.Validate(s)
}

type iSwitchDBInstanceNetTypeResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetRequestId(v string) *SwitchDBInstanceNetTypeResponseBody
	GetRequestId() *string
}

type SwitchDBInstanceNetTypeResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// FA67B751-2A2D-470C-850B-D6B93699D35C
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SwitchDBInstanceNetTypeResponseBody) String() string {
	return dara.Prettify(s)
}

func (s SwitchDBInstanceNetTypeResponseBody) GoString() string {
	return s.String()
}

func (s *SwitchDBInstanceNetTypeResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *SwitchDBInstanceNetTypeResponseBody) SetRequestId(v string) *SwitchDBInstanceNetTypeResponseBody {
	s.RequestId = &v
	return s
}

func (s *SwitchDBInstanceNetTypeResponseBody) Validate() error {
	return dara.Validate(s)
}

type iSwitchDBInstanceNetTypeResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *SwitchDBInstanceNetTypeResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *SwitchDBInstanceNetTypeResponse
	GetStatusCode() *int32
	SetBody(v *SwitchDBInstanceNetTypeResponseBody) *SwitchDBInstanceNetTypeResponse
	GetBody() *SwitchDBInstanceNetTypeResponseBody
}

type SwitchDBInstanceNetTypeResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SwitchDBInstanceNetTypeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SwitchDBInstanceNetTypeResponse) String() string {
	return dara.Prettify(s)
}

func (s SwitchDBInstanceNetTypeResponse) GoString() string {
	return s.String()
}

func (s *SwitchDBInstanceNetTypeResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *SwitchDBInstanceNetTypeResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *SwitchDBInstanceNetTypeResponse) GetBody() *SwitchDBInstanceNetTypeResponseBody {
	return s.Body
}

func (s *SwitchDBInstanceNetTypeResponse) SetHeaders(v map[string]*string) *SwitchDBInstanceNetTypeResponse {
	s.Headers = v
	return s
}

func (s *SwitchDBInstanceNetTypeResponse) SetStatusCode(v int32) *SwitchDBInstanceNetTypeResponse {
	s.StatusCode = &v
	return s
}

func (s *SwitchDBInstanceNetTypeResponse) SetBody(v *SwitchDBInstanceNetTypeResponseBody) *SwitchDBInstanceNetTypeResponse {
	s.Body = v
	return s
}

func (s *SwitchDBInstanceNetTypeResponse) Validate() error {
	return dara.Validate(s)
}

type iTagResourcesRequest interface {
	dara.Model
	String() string
	GoString() string
	SetOwnerAccount(v string) *TagResourcesRequest
	GetOwnerAccount() *string
	SetOwnerId(v int64) *TagResourcesRequest
	GetOwnerId() *int64
	SetRegionId(v string) *TagResourcesRequest
	GetRegionId() *string
	SetResourceId(v []*string) *TagResourcesRequest
	GetResourceId() []*string
	SetResourceOwnerAccount(v string) *TagResourcesRequest
	GetResourceOwnerAccount() *string
	SetResourceOwnerId(v int64) *TagResourcesRequest
	GetResourceOwnerId() *int64
	SetResourceType(v string) *TagResourcesRequest
	GetResourceType() *string
	SetTag(v []*TagResourcesRequestTag) *TagResourcesRequest
	GetTag() []*TagResourcesRequestTag
}

type TagResourcesRequest struct {
	OwnerAccount *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The ID of the region. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/86912.html) operation to query region IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of an instance. Valid values of N: 1 to 50.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxxxxx
	ResourceId           []*string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty" type:"Repeated"`
	ResourceOwnerAccount *string   `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	// The mode of the instance. Valid values:
	//
	// 	- `instance`: reserved storage mode
	//
	// 	- `ALIYUN::GPDB::INSTANCE`: elastic storage mode
	//
	// This parameter is required.
	//
	// example:
	//
	// instance
	ResourceType *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	// The list of tags.
	//
	// This parameter is required.
	Tag []*TagResourcesRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s TagResourcesRequest) String() string {
	return dara.Prettify(s)
}

func (s TagResourcesRequest) GoString() string {
	return s.String()
}

func (s *TagResourcesRequest) GetOwnerAccount() *string {
	return s.OwnerAccount
}

func (s *TagResourcesRequest) GetOwnerId() *int64 {
	return s.OwnerId
}

func (s *TagResourcesRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *TagResourcesRequest) GetResourceId() []*string {
	return s.ResourceId
}

func (s *TagResourcesRequest) GetResourceOwnerAccount() *string {
	return s.ResourceOwnerAccount
}

func (s *TagResourcesRequest) GetResourceOwnerId() *int64 {
	return s.ResourceOwnerId
}

func (s *TagResourcesRequest) GetResourceType() *string {
	return s.ResourceType
}

func (s *TagResourcesRequest) GetTag() []*TagResourcesRequestTag {
	return s.Tag
}

func (s *TagResourcesRequest) SetOwnerAccount(v string) *TagResourcesRequest {
	s.OwnerAccount = &v
	return s
}

func (s *TagResourcesRequest) SetOwnerId(v int64) *TagResourcesRequest {
	s.OwnerId = &v
	return s
}

func (s *TagResourcesRequest) SetRegionId(v string) *TagResourcesRequest {
	s.RegionId = &v
	return s
}

func (s *TagResourcesRequest) SetResourceId(v []*string) *TagResourcesRequest {
	s.ResourceId = v
	return s
}

func (s *TagResourcesRequest) SetResourceOwnerAccount(v string) *TagResourcesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *TagResourcesRequest) SetResourceOwnerId(v int64) *TagResourcesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *TagResourcesRequest) SetResourceType(v string) *TagResourcesRequest {
	s.ResourceType = &v
	return s
}

func (s *TagResourcesRequest) SetTag(v []*TagResourcesRequestTag) *TagResourcesRequest {
	s.Tag = v
	return s
}

func (s *TagResourcesRequest) Validate() error {
	return dara.Validate(s)
}

type TagResourcesRequestTag struct {
	// The key of a tag. Valid values of N: 1 to 20. This parameter value cannot be an empty string. A tag key can contain a maximum of 128 characters. It cannot start with `aliyun` or`  acs: ` and cannot contain `http://` or`  https:// `.
	//
	// This parameter is required.
	//
	// example:
	//
	// TestKey
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The value of a tag. Valid values of N: 1 to 20. This parameter value can be an empty string. A tag value can contain a maximum of 128 characters. It cannot start with `acs:` and cannot contain `http://` or `https://`.
	//
	// This parameter is required.
	//
	// example:
	//
	// TestValue
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s TagResourcesRequestTag) String() string {
	return dara.Prettify(s)
}

func (s TagResourcesRequestTag) GoString() string {
	return s.String()
}

func (s *TagResourcesRequestTag) GetKey() *string {
	return s.Key
}

func (s *TagResourcesRequestTag) GetValue() *string {
	return s.Value
}

func (s *TagResourcesRequestTag) SetKey(v string) *TagResourcesRequestTag {
	s.Key = &v
	return s
}

func (s *TagResourcesRequestTag) SetValue(v string) *TagResourcesRequestTag {
	s.Value = &v
	return s
}

func (s *TagResourcesRequestTag) Validate() error {
	return dara.Validate(s)
}

type iTagResourcesResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetRequestId(v string) *TagResourcesResponseBody
	GetRequestId() *string
}

type TagResourcesResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// 5414A4E5-4C36-4461-95FC-23**********
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s TagResourcesResponseBody) String() string {
	return dara.Prettify(s)
}

func (s TagResourcesResponseBody) GoString() string {
	return s.String()
}

func (s *TagResourcesResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *TagResourcesResponseBody) SetRequestId(v string) *TagResourcesResponseBody {
	s.RequestId = &v
	return s
}

func (s *TagResourcesResponseBody) Validate() error {
	return dara.Validate(s)
}

type iTagResourcesResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *TagResourcesResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *TagResourcesResponse
	GetStatusCode() *int32
	SetBody(v *TagResourcesResponseBody) *TagResourcesResponse
	GetBody() *TagResourcesResponseBody
}

type TagResourcesResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *TagResourcesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s TagResourcesResponse) String() string {
	return dara.Prettify(s)
}

func (s TagResourcesResponse) GoString() string {
	return s.String()
}

func (s *TagResourcesResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *TagResourcesResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *TagResourcesResponse) GetBody() *TagResourcesResponseBody {
	return s.Body
}

func (s *TagResourcesResponse) SetHeaders(v map[string]*string) *TagResourcesResponse {
	s.Headers = v
	return s
}

func (s *TagResourcesResponse) SetStatusCode(v int32) *TagResourcesResponse {
	s.StatusCode = &v
	return s
}

func (s *TagResourcesResponse) SetBody(v *TagResourcesResponseBody) *TagResourcesResponse {
	s.Body = v
	return s
}

func (s *TagResourcesResponse) Validate() error {
	return dara.Validate(s)
}

type iTextEmbeddingRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *TextEmbeddingRequest
	GetDBInstanceId() *string
	SetInput(v []*string) *TextEmbeddingRequest
	GetInput() []*string
	SetModel(v string) *TextEmbeddingRequest
	GetModel() *string
	SetOwnerId(v int64) *TextEmbeddingRequest
	GetOwnerId() *int64
	SetRegionId(v string) *TextEmbeddingRequest
	GetRegionId() *string
}

type TextEmbeddingRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string   `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	Input        []*string `json:"Input,omitempty" xml:"Input,omitempty" type:"Repeated"`
	// example:
	//
	// text-embedding-v2
	Model   *string `json:"Model,omitempty" xml:"Model,omitempty"`
	OwnerId *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s TextEmbeddingRequest) String() string {
	return dara.Prettify(s)
}

func (s TextEmbeddingRequest) GoString() string {
	return s.String()
}

func (s *TextEmbeddingRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *TextEmbeddingRequest) GetInput() []*string {
	return s.Input
}

func (s *TextEmbeddingRequest) GetModel() *string {
	return s.Model
}

func (s *TextEmbeddingRequest) GetOwnerId() *int64 {
	return s.OwnerId
}

func (s *TextEmbeddingRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *TextEmbeddingRequest) SetDBInstanceId(v string) *TextEmbeddingRequest {
	s.DBInstanceId = &v
	return s
}

func (s *TextEmbeddingRequest) SetInput(v []*string) *TextEmbeddingRequest {
	s.Input = v
	return s
}

func (s *TextEmbeddingRequest) SetModel(v string) *TextEmbeddingRequest {
	s.Model = &v
	return s
}

func (s *TextEmbeddingRequest) SetOwnerId(v int64) *TextEmbeddingRequest {
	s.OwnerId = &v
	return s
}

func (s *TextEmbeddingRequest) SetRegionId(v string) *TextEmbeddingRequest {
	s.RegionId = &v
	return s
}

func (s *TextEmbeddingRequest) Validate() error {
	return dara.Validate(s)
}

type iTextEmbeddingShrinkRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *TextEmbeddingShrinkRequest
	GetDBInstanceId() *string
	SetInputShrink(v string) *TextEmbeddingShrinkRequest
	GetInputShrink() *string
	SetModel(v string) *TextEmbeddingShrinkRequest
	GetModel() *string
	SetOwnerId(v int64) *TextEmbeddingShrinkRequest
	GetOwnerId() *int64
	SetRegionId(v string) *TextEmbeddingShrinkRequest
	GetRegionId() *string
}

type TextEmbeddingShrinkRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	InputShrink  *string `json:"Input,omitempty" xml:"Input,omitempty"`
	// example:
	//
	// text-embedding-v2
	Model   *string `json:"Model,omitempty" xml:"Model,omitempty"`
	OwnerId *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s TextEmbeddingShrinkRequest) String() string {
	return dara.Prettify(s)
}

func (s TextEmbeddingShrinkRequest) GoString() string {
	return s.String()
}

func (s *TextEmbeddingShrinkRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *TextEmbeddingShrinkRequest) GetInputShrink() *string {
	return s.InputShrink
}

func (s *TextEmbeddingShrinkRequest) GetModel() *string {
	return s.Model
}

func (s *TextEmbeddingShrinkRequest) GetOwnerId() *int64 {
	return s.OwnerId
}

func (s *TextEmbeddingShrinkRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *TextEmbeddingShrinkRequest) SetDBInstanceId(v string) *TextEmbeddingShrinkRequest {
	s.DBInstanceId = &v
	return s
}

func (s *TextEmbeddingShrinkRequest) SetInputShrink(v string) *TextEmbeddingShrinkRequest {
	s.InputShrink = &v
	return s
}

func (s *TextEmbeddingShrinkRequest) SetModel(v string) *TextEmbeddingShrinkRequest {
	s.Model = &v
	return s
}

func (s *TextEmbeddingShrinkRequest) SetOwnerId(v int64) *TextEmbeddingShrinkRequest {
	s.OwnerId = &v
	return s
}

func (s *TextEmbeddingShrinkRequest) SetRegionId(v string) *TextEmbeddingShrinkRequest {
	s.RegionId = &v
	return s
}

func (s *TextEmbeddingShrinkRequest) Validate() error {
	return dara.Validate(s)
}

type iTextEmbeddingResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetMessage(v string) *TextEmbeddingResponseBody
	GetMessage() *string
	SetRequestId(v string) *TextEmbeddingResponseBody
	GetRequestId() *string
	SetResults(v *TextEmbeddingResponseBodyResults) *TextEmbeddingResponseBody
	GetResults() *TextEmbeddingResponseBodyResults
	SetStatus(v string) *TextEmbeddingResponseBody
	GetStatus() *string
	SetTextTokens(v int32) *TextEmbeddingResponseBody
	GetTextTokens() *int32
}

type TextEmbeddingResponseBody struct {
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Results   *TextEmbeddingResponseBodyResults `json:"Results,omitempty" xml:"Results,omitempty" type:"Struct"`
	// example:
	//
	// success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// example:
	//
	// 1000
	TextTokens *int32 `json:"TextTokens,omitempty" xml:"TextTokens,omitempty"`
}

func (s TextEmbeddingResponseBody) String() string {
	return dara.Prettify(s)
}

func (s TextEmbeddingResponseBody) GoString() string {
	return s.String()
}

func (s *TextEmbeddingResponseBody) GetMessage() *string {
	return s.Message
}

func (s *TextEmbeddingResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *TextEmbeddingResponseBody) GetResults() *TextEmbeddingResponseBodyResults {
	return s.Results
}

func (s *TextEmbeddingResponseBody) GetStatus() *string {
	return s.Status
}

func (s *TextEmbeddingResponseBody) GetTextTokens() *int32 {
	return s.TextTokens
}

func (s *TextEmbeddingResponseBody) SetMessage(v string) *TextEmbeddingResponseBody {
	s.Message = &v
	return s
}

func (s *TextEmbeddingResponseBody) SetRequestId(v string) *TextEmbeddingResponseBody {
	s.RequestId = &v
	return s
}

func (s *TextEmbeddingResponseBody) SetResults(v *TextEmbeddingResponseBodyResults) *TextEmbeddingResponseBody {
	s.Results = v
	return s
}

func (s *TextEmbeddingResponseBody) SetStatus(v string) *TextEmbeddingResponseBody {
	s.Status = &v
	return s
}

func (s *TextEmbeddingResponseBody) SetTextTokens(v int32) *TextEmbeddingResponseBody {
	s.TextTokens = &v
	return s
}

func (s *TextEmbeddingResponseBody) Validate() error {
	return dara.Validate(s)
}

type TextEmbeddingResponseBodyResults struct {
	Results []*TextEmbeddingResponseBodyResultsResults `json:"Results,omitempty" xml:"Results,omitempty" type:"Repeated"`
}

func (s TextEmbeddingResponseBodyResults) String() string {
	return dara.Prettify(s)
}

func (s TextEmbeddingResponseBodyResults) GoString() string {
	return s.String()
}

func (s *TextEmbeddingResponseBodyResults) GetResults() []*TextEmbeddingResponseBodyResultsResults {
	return s.Results
}

func (s *TextEmbeddingResponseBodyResults) SetResults(v []*TextEmbeddingResponseBodyResultsResults) *TextEmbeddingResponseBodyResults {
	s.Results = v
	return s
}

func (s *TextEmbeddingResponseBodyResults) Validate() error {
	return dara.Validate(s)
}

type TextEmbeddingResponseBodyResultsResults struct {
	Embedding *TextEmbeddingResponseBodyResultsResultsEmbedding `json:"Embedding,omitempty" xml:"Embedding,omitempty" type:"Struct"`
	// example:
	//
	// 0
	Index *int32 `json:"Index,omitempty" xml:"Index,omitempty"`
}

func (s TextEmbeddingResponseBodyResultsResults) String() string {
	return dara.Prettify(s)
}

func (s TextEmbeddingResponseBodyResultsResults) GoString() string {
	return s.String()
}

func (s *TextEmbeddingResponseBodyResultsResults) GetEmbedding() *TextEmbeddingResponseBodyResultsResultsEmbedding {
	return s.Embedding
}

func (s *TextEmbeddingResponseBodyResultsResults) GetIndex() *int32 {
	return s.Index
}

func (s *TextEmbeddingResponseBodyResultsResults) SetEmbedding(v *TextEmbeddingResponseBodyResultsResultsEmbedding) *TextEmbeddingResponseBodyResultsResults {
	s.Embedding = v
	return s
}

func (s *TextEmbeddingResponseBodyResultsResults) SetIndex(v int32) *TextEmbeddingResponseBodyResultsResults {
	s.Index = &v
	return s
}

func (s *TextEmbeddingResponseBodyResultsResults) Validate() error {
	return dara.Validate(s)
}

type TextEmbeddingResponseBodyResultsResultsEmbedding struct {
	Embedding []*float64 `json:"Embedding,omitempty" xml:"Embedding,omitempty" type:"Repeated"`
}

func (s TextEmbeddingResponseBodyResultsResultsEmbedding) String() string {
	return dara.Prettify(s)
}

func (s TextEmbeddingResponseBodyResultsResultsEmbedding) GoString() string {
	return s.String()
}

func (s *TextEmbeddingResponseBodyResultsResultsEmbedding) GetEmbedding() []*float64 {
	return s.Embedding
}

func (s *TextEmbeddingResponseBodyResultsResultsEmbedding) SetEmbedding(v []*float64) *TextEmbeddingResponseBodyResultsResultsEmbedding {
	s.Embedding = v
	return s
}

func (s *TextEmbeddingResponseBodyResultsResultsEmbedding) Validate() error {
	return dara.Validate(s)
}

type iTextEmbeddingResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *TextEmbeddingResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *TextEmbeddingResponse
	GetStatusCode() *int32
	SetBody(v *TextEmbeddingResponseBody) *TextEmbeddingResponse
	GetBody() *TextEmbeddingResponseBody
}

type TextEmbeddingResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *TextEmbeddingResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s TextEmbeddingResponse) String() string {
	return dara.Prettify(s)
}

func (s TextEmbeddingResponse) GoString() string {
	return s.String()
}

func (s *TextEmbeddingResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *TextEmbeddingResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *TextEmbeddingResponse) GetBody() *TextEmbeddingResponseBody {
	return s.Body
}

func (s *TextEmbeddingResponse) SetHeaders(v map[string]*string) *TextEmbeddingResponse {
	s.Headers = v
	return s
}

func (s *TextEmbeddingResponse) SetStatusCode(v int32) *TextEmbeddingResponse {
	s.StatusCode = &v
	return s
}

func (s *TextEmbeddingResponse) SetBody(v *TextEmbeddingResponseBody) *TextEmbeddingResponse {
	s.Body = v
	return s
}

func (s *TextEmbeddingResponse) Validate() error {
	return dara.Validate(s)
}

type iUnbindDBResourceGroupWithRoleRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *UnbindDBResourceGroupWithRoleRequest
	GetDBInstanceId() *string
	SetOwnerId(v int64) *UnbindDBResourceGroupWithRoleRequest
	GetOwnerId() *int64
	SetResourceGroupName(v string) *UnbindDBResourceGroupWithRoleRequest
	GetResourceGroupName() *string
	SetRoleList(v []*string) *UnbindDBResourceGroupWithRoleRequest
	GetRoleList() []*string
}

type UnbindDBResourceGroupWithRoleRequest struct {
	// The instance ID.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The name of the resource group.
	//
	// This parameter is required.
	//
	// example:
	//
	// testgroup
	ResourceGroupName *string `json:"ResourceGroupName,omitempty" xml:"ResourceGroupName,omitempty"`
	// The roles.
	//
	// This parameter is required.
	RoleList []*string `json:"RoleList,omitempty" xml:"RoleList,omitempty" type:"Repeated"`
}

func (s UnbindDBResourceGroupWithRoleRequest) String() string {
	return dara.Prettify(s)
}

func (s UnbindDBResourceGroupWithRoleRequest) GoString() string {
	return s.String()
}

func (s *UnbindDBResourceGroupWithRoleRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *UnbindDBResourceGroupWithRoleRequest) GetOwnerId() *int64 {
	return s.OwnerId
}

func (s *UnbindDBResourceGroupWithRoleRequest) GetResourceGroupName() *string {
	return s.ResourceGroupName
}

func (s *UnbindDBResourceGroupWithRoleRequest) GetRoleList() []*string {
	return s.RoleList
}

func (s *UnbindDBResourceGroupWithRoleRequest) SetDBInstanceId(v string) *UnbindDBResourceGroupWithRoleRequest {
	s.DBInstanceId = &v
	return s
}

func (s *UnbindDBResourceGroupWithRoleRequest) SetOwnerId(v int64) *UnbindDBResourceGroupWithRoleRequest {
	s.OwnerId = &v
	return s
}

func (s *UnbindDBResourceGroupWithRoleRequest) SetResourceGroupName(v string) *UnbindDBResourceGroupWithRoleRequest {
	s.ResourceGroupName = &v
	return s
}

func (s *UnbindDBResourceGroupWithRoleRequest) SetRoleList(v []*string) *UnbindDBResourceGroupWithRoleRequest {
	s.RoleList = v
	return s
}

func (s *UnbindDBResourceGroupWithRoleRequest) Validate() error {
	return dara.Validate(s)
}

type iUnbindDBResourceGroupWithRoleShrinkRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *UnbindDBResourceGroupWithRoleShrinkRequest
	GetDBInstanceId() *string
	SetOwnerId(v int64) *UnbindDBResourceGroupWithRoleShrinkRequest
	GetOwnerId() *int64
	SetResourceGroupName(v string) *UnbindDBResourceGroupWithRoleShrinkRequest
	GetResourceGroupName() *string
	SetRoleListShrink(v string) *UnbindDBResourceGroupWithRoleShrinkRequest
	GetRoleListShrink() *string
}

type UnbindDBResourceGroupWithRoleShrinkRequest struct {
	// The instance ID.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The name of the resource group.
	//
	// This parameter is required.
	//
	// example:
	//
	// testgroup
	ResourceGroupName *string `json:"ResourceGroupName,omitempty" xml:"ResourceGroupName,omitempty"`
	// The roles.
	//
	// This parameter is required.
	RoleListShrink *string `json:"RoleList,omitempty" xml:"RoleList,omitempty"`
}

func (s UnbindDBResourceGroupWithRoleShrinkRequest) String() string {
	return dara.Prettify(s)
}

func (s UnbindDBResourceGroupWithRoleShrinkRequest) GoString() string {
	return s.String()
}

func (s *UnbindDBResourceGroupWithRoleShrinkRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *UnbindDBResourceGroupWithRoleShrinkRequest) GetOwnerId() *int64 {
	return s.OwnerId
}

func (s *UnbindDBResourceGroupWithRoleShrinkRequest) GetResourceGroupName() *string {
	return s.ResourceGroupName
}

func (s *UnbindDBResourceGroupWithRoleShrinkRequest) GetRoleListShrink() *string {
	return s.RoleListShrink
}

func (s *UnbindDBResourceGroupWithRoleShrinkRequest) SetDBInstanceId(v string) *UnbindDBResourceGroupWithRoleShrinkRequest {
	s.DBInstanceId = &v
	return s
}

func (s *UnbindDBResourceGroupWithRoleShrinkRequest) SetOwnerId(v int64) *UnbindDBResourceGroupWithRoleShrinkRequest {
	s.OwnerId = &v
	return s
}

func (s *UnbindDBResourceGroupWithRoleShrinkRequest) SetResourceGroupName(v string) *UnbindDBResourceGroupWithRoleShrinkRequest {
	s.ResourceGroupName = &v
	return s
}

func (s *UnbindDBResourceGroupWithRoleShrinkRequest) SetRoleListShrink(v string) *UnbindDBResourceGroupWithRoleShrinkRequest {
	s.RoleListShrink = &v
	return s
}

func (s *UnbindDBResourceGroupWithRoleShrinkRequest) Validate() error {
	return dara.Validate(s)
}

type iUnbindDBResourceGroupWithRoleResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetRequestId(v string) *UnbindDBResourceGroupWithRoleResponseBody
	GetRequestId() *string
}

type UnbindDBResourceGroupWithRoleResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UnbindDBResourceGroupWithRoleResponseBody) String() string {
	return dara.Prettify(s)
}

func (s UnbindDBResourceGroupWithRoleResponseBody) GoString() string {
	return s.String()
}

func (s *UnbindDBResourceGroupWithRoleResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *UnbindDBResourceGroupWithRoleResponseBody) SetRequestId(v string) *UnbindDBResourceGroupWithRoleResponseBody {
	s.RequestId = &v
	return s
}

func (s *UnbindDBResourceGroupWithRoleResponseBody) Validate() error {
	return dara.Validate(s)
}

type iUnbindDBResourceGroupWithRoleResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *UnbindDBResourceGroupWithRoleResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *UnbindDBResourceGroupWithRoleResponse
	GetStatusCode() *int32
	SetBody(v *UnbindDBResourceGroupWithRoleResponseBody) *UnbindDBResourceGroupWithRoleResponse
	GetBody() *UnbindDBResourceGroupWithRoleResponseBody
}

type UnbindDBResourceGroupWithRoleResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UnbindDBResourceGroupWithRoleResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UnbindDBResourceGroupWithRoleResponse) String() string {
	return dara.Prettify(s)
}

func (s UnbindDBResourceGroupWithRoleResponse) GoString() string {
	return s.String()
}

func (s *UnbindDBResourceGroupWithRoleResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *UnbindDBResourceGroupWithRoleResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *UnbindDBResourceGroupWithRoleResponse) GetBody() *UnbindDBResourceGroupWithRoleResponseBody {
	return s.Body
}

func (s *UnbindDBResourceGroupWithRoleResponse) SetHeaders(v map[string]*string) *UnbindDBResourceGroupWithRoleResponse {
	s.Headers = v
	return s
}

func (s *UnbindDBResourceGroupWithRoleResponse) SetStatusCode(v int32) *UnbindDBResourceGroupWithRoleResponse {
	s.StatusCode = &v
	return s
}

func (s *UnbindDBResourceGroupWithRoleResponse) SetBody(v *UnbindDBResourceGroupWithRoleResponseBody) *UnbindDBResourceGroupWithRoleResponse {
	s.Body = v
	return s
}

func (s *UnbindDBResourceGroupWithRoleResponse) Validate() error {
	return dara.Validate(s)
}

type iUnloadSampleDataRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *UnloadSampleDataRequest
	GetDBInstanceId() *string
	SetOwnerId(v int64) *UnloadSampleDataRequest
	GetOwnerId() *int64
}

type UnloadSampleDataRequest struct {
	// The ID of the instance.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the IDs of all AnalyticDB for PostgreSQL instances in a specific region.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s UnloadSampleDataRequest) String() string {
	return dara.Prettify(s)
}

func (s UnloadSampleDataRequest) GoString() string {
	return s.String()
}

func (s *UnloadSampleDataRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *UnloadSampleDataRequest) GetOwnerId() *int64 {
	return s.OwnerId
}

func (s *UnloadSampleDataRequest) SetDBInstanceId(v string) *UnloadSampleDataRequest {
	s.DBInstanceId = &v
	return s
}

func (s *UnloadSampleDataRequest) SetOwnerId(v int64) *UnloadSampleDataRequest {
	s.OwnerId = &v
	return s
}

func (s *UnloadSampleDataRequest) Validate() error {
	return dara.Validate(s)
}

type iUnloadSampleDataResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *UnloadSampleDataResponseBody
	GetDBInstanceId() *string
	SetErrorMessage(v string) *UnloadSampleDataResponseBody
	GetErrorMessage() *string
	SetRequestId(v string) *UnloadSampleDataResponseBody
	GetRequestId() *string
	SetStatus(v bool) *UnloadSampleDataResponseBody
	GetStatus() *bool
}

type UnloadSampleDataResponseBody struct {
	// The ID of the instance.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The error message returned if an error occurs. This message does not affect the execution of the operation.
	//
	// example:
	//
	// ********
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 4E42ABC3-4DBD-5343-9BCA-66B7D091311F_6914
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The execution state of the operation. Valid values:
	//
	// 	- **false**: The operation fails.
	//
	// 	- **true**: The operation is successful.
	//
	// example:
	//
	// true
	Status *bool `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s UnloadSampleDataResponseBody) String() string {
	return dara.Prettify(s)
}

func (s UnloadSampleDataResponseBody) GoString() string {
	return s.String()
}

func (s *UnloadSampleDataResponseBody) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *UnloadSampleDataResponseBody) GetErrorMessage() *string {
	return s.ErrorMessage
}

func (s *UnloadSampleDataResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *UnloadSampleDataResponseBody) GetStatus() *bool {
	return s.Status
}

func (s *UnloadSampleDataResponseBody) SetDBInstanceId(v string) *UnloadSampleDataResponseBody {
	s.DBInstanceId = &v
	return s
}

func (s *UnloadSampleDataResponseBody) SetErrorMessage(v string) *UnloadSampleDataResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *UnloadSampleDataResponseBody) SetRequestId(v string) *UnloadSampleDataResponseBody {
	s.RequestId = &v
	return s
}

func (s *UnloadSampleDataResponseBody) SetStatus(v bool) *UnloadSampleDataResponseBody {
	s.Status = &v
	return s
}

func (s *UnloadSampleDataResponseBody) Validate() error {
	return dara.Validate(s)
}

type iUnloadSampleDataResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *UnloadSampleDataResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *UnloadSampleDataResponse
	GetStatusCode() *int32
	SetBody(v *UnloadSampleDataResponseBody) *UnloadSampleDataResponse
	GetBody() *UnloadSampleDataResponseBody
}

type UnloadSampleDataResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UnloadSampleDataResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UnloadSampleDataResponse) String() string {
	return dara.Prettify(s)
}

func (s UnloadSampleDataResponse) GoString() string {
	return s.String()
}

func (s *UnloadSampleDataResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *UnloadSampleDataResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *UnloadSampleDataResponse) GetBody() *UnloadSampleDataResponseBody {
	return s.Body
}

func (s *UnloadSampleDataResponse) SetHeaders(v map[string]*string) *UnloadSampleDataResponse {
	s.Headers = v
	return s
}

func (s *UnloadSampleDataResponse) SetStatusCode(v int32) *UnloadSampleDataResponse {
	s.StatusCode = &v
	return s
}

func (s *UnloadSampleDataResponse) SetBody(v *UnloadSampleDataResponseBody) *UnloadSampleDataResponse {
	s.Body = v
	return s
}

func (s *UnloadSampleDataResponse) Validate() error {
	return dara.Validate(s)
}

type iUntagResourcesRequest interface {
	dara.Model
	String() string
	GoString() string
	SetAll(v bool) *UntagResourcesRequest
	GetAll() *bool
	SetOwnerAccount(v string) *UntagResourcesRequest
	GetOwnerAccount() *string
	SetOwnerId(v int64) *UntagResourcesRequest
	GetOwnerId() *int64
	SetRegionId(v string) *UntagResourcesRequest
	GetRegionId() *string
	SetResourceId(v []*string) *UntagResourcesRequest
	GetResourceId() []*string
	SetResourceOwnerAccount(v string) *UntagResourcesRequest
	GetResourceOwnerAccount() *string
	SetResourceOwnerId(v int64) *UntagResourcesRequest
	GetResourceOwnerId() *int64
	SetResourceType(v string) *UntagResourcesRequest
	GetResourceType() *string
	SetTagKey(v []*string) *UntagResourcesRequest
	GetTagKey() []*string
}

type UntagResourcesRequest struct {
	// Whether to untag all tags on the instance. This parameter is only effective when TagKey.N is not set in the request. The value range is:
	//
	// - true
	//
	// - false
	//
	// Default value: false
	//
	// example:
	//
	// false
	All          *bool   `json:"All,omitempty" xml:"All,omitempty"`
	OwnerAccount *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// Region ID, you can view available region IDs through the [DescribeRegions](https://help.aliyun.com/document_detail/86912.html) interface.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// Instance ID. N\\"s value range: 1~50
	//
	// This parameter is required.
	ResourceId           []*string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty" type:"Repeated"`
	ResourceOwnerAccount *string   `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	// Resource type. The value range is:
	//
	// - `instance`: Reserved mode instance.
	//
	// - `ALIYUN::GPDB::INSTANCE`: Elastic mode instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// instance
	ResourceType *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	// Resource tag key. N\\"s value range: 1~20
	TagKey []*string `json:"TagKey,omitempty" xml:"TagKey,omitempty" type:"Repeated"`
}

func (s UntagResourcesRequest) String() string {
	return dara.Prettify(s)
}

func (s UntagResourcesRequest) GoString() string {
	return s.String()
}

func (s *UntagResourcesRequest) GetAll() *bool {
	return s.All
}

func (s *UntagResourcesRequest) GetOwnerAccount() *string {
	return s.OwnerAccount
}

func (s *UntagResourcesRequest) GetOwnerId() *int64 {
	return s.OwnerId
}

func (s *UntagResourcesRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *UntagResourcesRequest) GetResourceId() []*string {
	return s.ResourceId
}

func (s *UntagResourcesRequest) GetResourceOwnerAccount() *string {
	return s.ResourceOwnerAccount
}

func (s *UntagResourcesRequest) GetResourceOwnerId() *int64 {
	return s.ResourceOwnerId
}

func (s *UntagResourcesRequest) GetResourceType() *string {
	return s.ResourceType
}

func (s *UntagResourcesRequest) GetTagKey() []*string {
	return s.TagKey
}

func (s *UntagResourcesRequest) SetAll(v bool) *UntagResourcesRequest {
	s.All = &v
	return s
}

func (s *UntagResourcesRequest) SetOwnerAccount(v string) *UntagResourcesRequest {
	s.OwnerAccount = &v
	return s
}

func (s *UntagResourcesRequest) SetOwnerId(v int64) *UntagResourcesRequest {
	s.OwnerId = &v
	return s
}

func (s *UntagResourcesRequest) SetRegionId(v string) *UntagResourcesRequest {
	s.RegionId = &v
	return s
}

func (s *UntagResourcesRequest) SetResourceId(v []*string) *UntagResourcesRequest {
	s.ResourceId = v
	return s
}

func (s *UntagResourcesRequest) SetResourceOwnerAccount(v string) *UntagResourcesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *UntagResourcesRequest) SetResourceOwnerId(v int64) *UntagResourcesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *UntagResourcesRequest) SetResourceType(v string) *UntagResourcesRequest {
	s.ResourceType = &v
	return s
}

func (s *UntagResourcesRequest) SetTagKey(v []*string) *UntagResourcesRequest {
	s.TagKey = v
	return s
}

func (s *UntagResourcesRequest) Validate() error {
	return dara.Validate(s)
}

type iUntagResourcesResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetRequestId(v string) *UntagResourcesResponseBody
	GetRequestId() *string
}

type UntagResourcesResponseBody struct {
	// Request ID.
	//
	// example:
	//
	// 5414A4E5-4C36-4461-95FC-23757A20B5F8
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UntagResourcesResponseBody) String() string {
	return dara.Prettify(s)
}

func (s UntagResourcesResponseBody) GoString() string {
	return s.String()
}

func (s *UntagResourcesResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *UntagResourcesResponseBody) SetRequestId(v string) *UntagResourcesResponseBody {
	s.RequestId = &v
	return s
}

func (s *UntagResourcesResponseBody) Validate() error {
	return dara.Validate(s)
}

type iUntagResourcesResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *UntagResourcesResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *UntagResourcesResponse
	GetStatusCode() *int32
	SetBody(v *UntagResourcesResponseBody) *UntagResourcesResponse
	GetBody() *UntagResourcesResponseBody
}

type UntagResourcesResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UntagResourcesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UntagResourcesResponse) String() string {
	return dara.Prettify(s)
}

func (s UntagResourcesResponse) GoString() string {
	return s.String()
}

func (s *UntagResourcesResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *UntagResourcesResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *UntagResourcesResponse) GetBody() *UntagResourcesResponseBody {
	return s.Body
}

func (s *UntagResourcesResponse) SetHeaders(v map[string]*string) *UntagResourcesResponse {
	s.Headers = v
	return s
}

func (s *UntagResourcesResponse) SetStatusCode(v int32) *UntagResourcesResponse {
	s.StatusCode = &v
	return s
}

func (s *UntagResourcesResponse) SetBody(v *UntagResourcesResponseBody) *UntagResourcesResponse {
	s.Body = v
	return s
}

func (s *UntagResourcesResponse) Validate() error {
	return dara.Validate(s)
}

type iUpdateCollectionDataMetadataRequest interface {
	dara.Model
	String() string
	GoString() string
	SetCollection(v string) *UpdateCollectionDataMetadataRequest
	GetCollection() *string
	SetDBInstanceId(v string) *UpdateCollectionDataMetadataRequest
	GetDBInstanceId() *string
	SetFilter(v string) *UpdateCollectionDataMetadataRequest
	GetFilter() *string
	SetIds(v []*string) *UpdateCollectionDataMetadataRequest
	GetIds() []*string
	SetMetadata(v map[string]interface{}) *UpdateCollectionDataMetadataRequest
	GetMetadata() map[string]interface{}
	SetNamespace(v string) *UpdateCollectionDataMetadataRequest
	GetNamespace() *string
	SetNamespacePassword(v string) *UpdateCollectionDataMetadataRequest
	GetNamespacePassword() *string
	SetOwnerId(v int64) *UpdateCollectionDataMetadataRequest
	GetOwnerId() *int64
	SetRegionId(v string) *UpdateCollectionDataMetadataRequest
	GetRegionId() *string
	SetWorkspaceId(v string) *UpdateCollectionDataMetadataRequest
	GetWorkspaceId() *string
}

type UpdateCollectionDataMetadataRequest struct {
	// Collection name.
	//
	// > You can use the [ListCollections](https://help.aliyun.com/document_detail/2401503.html) API to view the list.
	//
	// This parameter is required.
	//
	// example:
	//
	// document
	Collection *string `json:"Collection,omitempty" xml:"Collection,omitempty"`
	// Instance ID.
	//
	// > You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) API to view details of all AnalyticDB for PostgreSQL instances in the target region, including the instance ID.
	//
	// example:
	//
	// gp-j788ghhjjxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// Filter condition for the data to be updated, in SQL WHERE format. This field cannot be empty at the same time as the Ids field.
	//
	// example:
	//
	// business_value = \\"chat_file_1\\"
	Filter *string `json:"Filter,omitempty" xml:"Filter,omitempty"`
	// ID list of the data to be updated, i.e., the Row.Id specified when uploading the data. This field cannot be empty at the same time as the Filter field.
	Ids []*string `json:"Ids,omitempty" xml:"Ids,omitempty" type:"Repeated"`
	// Data to be updated, in a JSON string of MAP format. The key is the field name, and the value is the new data value.
	//
	// This parameter is required.
	//
	// example:
	//
	// {
	//
	//       "title": "new title",
	//
	//       "content": "new content"
	//
	// }
	Metadata map[string]interface{} `json:"Metadata,omitempty" xml:"Metadata,omitempty"`
	// Namespace.
	//
	// > You can use the [ListNamespaces](https://help.aliyun.com/document_detail/2401502.html) API to view the list.
	//
	// example:
	//
	// mynamespace
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// Password corresponding to the namespace.
	//
	// This parameter is required.
	//
	// example:
	//
	// testpassword
	NamespacePassword *string `json:"NamespacePassword,omitempty" xml:"NamespacePassword,omitempty"`
	OwnerId           *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// Region ID where the instance is located.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// ID of the Workspace composed of multiple database instances. This parameter and the DBInstanceId parameter cannot both be empty. When both are specified, this parameter takes precedence.
	//
	// example:
	//
	// gp-ws-*****
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s UpdateCollectionDataMetadataRequest) String() string {
	return dara.Prettify(s)
}

func (s UpdateCollectionDataMetadataRequest) GoString() string {
	return s.String()
}

func (s *UpdateCollectionDataMetadataRequest) GetCollection() *string {
	return s.Collection
}

func (s *UpdateCollectionDataMetadataRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *UpdateCollectionDataMetadataRequest) GetFilter() *string {
	return s.Filter
}

func (s *UpdateCollectionDataMetadataRequest) GetIds() []*string {
	return s.Ids
}

func (s *UpdateCollectionDataMetadataRequest) GetMetadata() map[string]interface{} {
	return s.Metadata
}

func (s *UpdateCollectionDataMetadataRequest) GetNamespace() *string {
	return s.Namespace
}

func (s *UpdateCollectionDataMetadataRequest) GetNamespacePassword() *string {
	return s.NamespacePassword
}

func (s *UpdateCollectionDataMetadataRequest) GetOwnerId() *int64 {
	return s.OwnerId
}

func (s *UpdateCollectionDataMetadataRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *UpdateCollectionDataMetadataRequest) GetWorkspaceId() *string {
	return s.WorkspaceId
}

func (s *UpdateCollectionDataMetadataRequest) SetCollection(v string) *UpdateCollectionDataMetadataRequest {
	s.Collection = &v
	return s
}

func (s *UpdateCollectionDataMetadataRequest) SetDBInstanceId(v string) *UpdateCollectionDataMetadataRequest {
	s.DBInstanceId = &v
	return s
}

func (s *UpdateCollectionDataMetadataRequest) SetFilter(v string) *UpdateCollectionDataMetadataRequest {
	s.Filter = &v
	return s
}

func (s *UpdateCollectionDataMetadataRequest) SetIds(v []*string) *UpdateCollectionDataMetadataRequest {
	s.Ids = v
	return s
}

func (s *UpdateCollectionDataMetadataRequest) SetMetadata(v map[string]interface{}) *UpdateCollectionDataMetadataRequest {
	s.Metadata = v
	return s
}

func (s *UpdateCollectionDataMetadataRequest) SetNamespace(v string) *UpdateCollectionDataMetadataRequest {
	s.Namespace = &v
	return s
}

func (s *UpdateCollectionDataMetadataRequest) SetNamespacePassword(v string) *UpdateCollectionDataMetadataRequest {
	s.NamespacePassword = &v
	return s
}

func (s *UpdateCollectionDataMetadataRequest) SetOwnerId(v int64) *UpdateCollectionDataMetadataRequest {
	s.OwnerId = &v
	return s
}

func (s *UpdateCollectionDataMetadataRequest) SetRegionId(v string) *UpdateCollectionDataMetadataRequest {
	s.RegionId = &v
	return s
}

func (s *UpdateCollectionDataMetadataRequest) SetWorkspaceId(v string) *UpdateCollectionDataMetadataRequest {
	s.WorkspaceId = &v
	return s
}

func (s *UpdateCollectionDataMetadataRequest) Validate() error {
	return dara.Validate(s)
}

type iUpdateCollectionDataMetadataShrinkRequest interface {
	dara.Model
	String() string
	GoString() string
	SetCollection(v string) *UpdateCollectionDataMetadataShrinkRequest
	GetCollection() *string
	SetDBInstanceId(v string) *UpdateCollectionDataMetadataShrinkRequest
	GetDBInstanceId() *string
	SetFilter(v string) *UpdateCollectionDataMetadataShrinkRequest
	GetFilter() *string
	SetIdsShrink(v string) *UpdateCollectionDataMetadataShrinkRequest
	GetIdsShrink() *string
	SetMetadataShrink(v string) *UpdateCollectionDataMetadataShrinkRequest
	GetMetadataShrink() *string
	SetNamespace(v string) *UpdateCollectionDataMetadataShrinkRequest
	GetNamespace() *string
	SetNamespacePassword(v string) *UpdateCollectionDataMetadataShrinkRequest
	GetNamespacePassword() *string
	SetOwnerId(v int64) *UpdateCollectionDataMetadataShrinkRequest
	GetOwnerId() *int64
	SetRegionId(v string) *UpdateCollectionDataMetadataShrinkRequest
	GetRegionId() *string
	SetWorkspaceId(v string) *UpdateCollectionDataMetadataShrinkRequest
	GetWorkspaceId() *string
}

type UpdateCollectionDataMetadataShrinkRequest struct {
	// Collection name.
	//
	// > You can use the [ListCollections](https://help.aliyun.com/document_detail/2401503.html) API to view the list.
	//
	// This parameter is required.
	//
	// example:
	//
	// document
	Collection *string `json:"Collection,omitempty" xml:"Collection,omitempty"`
	// Instance ID.
	//
	// > You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) API to view details of all AnalyticDB for PostgreSQL instances in the target region, including the instance ID.
	//
	// example:
	//
	// gp-j788ghhjjxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// Filter condition for the data to be updated, in SQL WHERE format. This field cannot be empty at the same time as the Ids field.
	//
	// example:
	//
	// business_value = \\"chat_file_1\\"
	Filter *string `json:"Filter,omitempty" xml:"Filter,omitempty"`
	// ID list of the data to be updated, i.e., the Row.Id specified when uploading the data. This field cannot be empty at the same time as the Filter field.
	IdsShrink *string `json:"Ids,omitempty" xml:"Ids,omitempty"`
	// Data to be updated, in a JSON string of MAP format. The key is the field name, and the value is the new data value.
	//
	// This parameter is required.
	//
	// example:
	//
	// {
	//
	//       "title": "new title",
	//
	//       "content": "new content"
	//
	// }
	MetadataShrink *string `json:"Metadata,omitempty" xml:"Metadata,omitempty"`
	// Namespace.
	//
	// > You can use the [ListNamespaces](https://help.aliyun.com/document_detail/2401502.html) API to view the list.
	//
	// example:
	//
	// mynamespace
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// Password corresponding to the namespace.
	//
	// This parameter is required.
	//
	// example:
	//
	// testpassword
	NamespacePassword *string `json:"NamespacePassword,omitempty" xml:"NamespacePassword,omitempty"`
	OwnerId           *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// Region ID where the instance is located.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// ID of the Workspace composed of multiple database instances. This parameter and the DBInstanceId parameter cannot both be empty. When both are specified, this parameter takes precedence.
	//
	// example:
	//
	// gp-ws-*****
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s UpdateCollectionDataMetadataShrinkRequest) String() string {
	return dara.Prettify(s)
}

func (s UpdateCollectionDataMetadataShrinkRequest) GoString() string {
	return s.String()
}

func (s *UpdateCollectionDataMetadataShrinkRequest) GetCollection() *string {
	return s.Collection
}

func (s *UpdateCollectionDataMetadataShrinkRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *UpdateCollectionDataMetadataShrinkRequest) GetFilter() *string {
	return s.Filter
}

func (s *UpdateCollectionDataMetadataShrinkRequest) GetIdsShrink() *string {
	return s.IdsShrink
}

func (s *UpdateCollectionDataMetadataShrinkRequest) GetMetadataShrink() *string {
	return s.MetadataShrink
}

func (s *UpdateCollectionDataMetadataShrinkRequest) GetNamespace() *string {
	return s.Namespace
}

func (s *UpdateCollectionDataMetadataShrinkRequest) GetNamespacePassword() *string {
	return s.NamespacePassword
}

func (s *UpdateCollectionDataMetadataShrinkRequest) GetOwnerId() *int64 {
	return s.OwnerId
}

func (s *UpdateCollectionDataMetadataShrinkRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *UpdateCollectionDataMetadataShrinkRequest) GetWorkspaceId() *string {
	return s.WorkspaceId
}

func (s *UpdateCollectionDataMetadataShrinkRequest) SetCollection(v string) *UpdateCollectionDataMetadataShrinkRequest {
	s.Collection = &v
	return s
}

func (s *UpdateCollectionDataMetadataShrinkRequest) SetDBInstanceId(v string) *UpdateCollectionDataMetadataShrinkRequest {
	s.DBInstanceId = &v
	return s
}

func (s *UpdateCollectionDataMetadataShrinkRequest) SetFilter(v string) *UpdateCollectionDataMetadataShrinkRequest {
	s.Filter = &v
	return s
}

func (s *UpdateCollectionDataMetadataShrinkRequest) SetIdsShrink(v string) *UpdateCollectionDataMetadataShrinkRequest {
	s.IdsShrink = &v
	return s
}

func (s *UpdateCollectionDataMetadataShrinkRequest) SetMetadataShrink(v string) *UpdateCollectionDataMetadataShrinkRequest {
	s.MetadataShrink = &v
	return s
}

func (s *UpdateCollectionDataMetadataShrinkRequest) SetNamespace(v string) *UpdateCollectionDataMetadataShrinkRequest {
	s.Namespace = &v
	return s
}

func (s *UpdateCollectionDataMetadataShrinkRequest) SetNamespacePassword(v string) *UpdateCollectionDataMetadataShrinkRequest {
	s.NamespacePassword = &v
	return s
}

func (s *UpdateCollectionDataMetadataShrinkRequest) SetOwnerId(v int64) *UpdateCollectionDataMetadataShrinkRequest {
	s.OwnerId = &v
	return s
}

func (s *UpdateCollectionDataMetadataShrinkRequest) SetRegionId(v string) *UpdateCollectionDataMetadataShrinkRequest {
	s.RegionId = &v
	return s
}

func (s *UpdateCollectionDataMetadataShrinkRequest) SetWorkspaceId(v string) *UpdateCollectionDataMetadataShrinkRequest {
	s.WorkspaceId = &v
	return s
}

func (s *UpdateCollectionDataMetadataShrinkRequest) Validate() error {
	return dara.Validate(s)
}

type iUpdateCollectionDataMetadataResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetAppliedRows(v int64) *UpdateCollectionDataMetadataResponseBody
	GetAppliedRows() *int64
	SetMessage(v string) *UpdateCollectionDataMetadataResponseBody
	GetMessage() *string
	SetRequestId(v string) *UpdateCollectionDataMetadataResponseBody
	GetRequestId() *string
	SetStatus(v string) *UpdateCollectionDataMetadataResponseBody
	GetStatus() *string
}

type UpdateCollectionDataMetadataResponseBody struct {
	// Number of effective entries.
	//
	// example:
	//
	// 10
	AppliedRows *int64 `json:"AppliedRows,omitempty" xml:"AppliedRows,omitempty"`
	// Detailed information when the request fails.
	//
	// example:
	//
	// failed to connect database, detailMsg: getConnection fail::SQL State: 28P01, Error Code: 0, Error Message: FATAL: password
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Status, with the following values:
	//
	// - **success**: Success.
	//
	// - **fail**: Failure.
	//
	// example:
	//
	// success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s UpdateCollectionDataMetadataResponseBody) String() string {
	return dara.Prettify(s)
}

func (s UpdateCollectionDataMetadataResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateCollectionDataMetadataResponseBody) GetAppliedRows() *int64 {
	return s.AppliedRows
}

func (s *UpdateCollectionDataMetadataResponseBody) GetMessage() *string {
	return s.Message
}

func (s *UpdateCollectionDataMetadataResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *UpdateCollectionDataMetadataResponseBody) GetStatus() *string {
	return s.Status
}

func (s *UpdateCollectionDataMetadataResponseBody) SetAppliedRows(v int64) *UpdateCollectionDataMetadataResponseBody {
	s.AppliedRows = &v
	return s
}

func (s *UpdateCollectionDataMetadataResponseBody) SetMessage(v string) *UpdateCollectionDataMetadataResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateCollectionDataMetadataResponseBody) SetRequestId(v string) *UpdateCollectionDataMetadataResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateCollectionDataMetadataResponseBody) SetStatus(v string) *UpdateCollectionDataMetadataResponseBody {
	s.Status = &v
	return s
}

func (s *UpdateCollectionDataMetadataResponseBody) Validate() error {
	return dara.Validate(s)
}

type iUpdateCollectionDataMetadataResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *UpdateCollectionDataMetadataResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *UpdateCollectionDataMetadataResponse
	GetStatusCode() *int32
	SetBody(v *UpdateCollectionDataMetadataResponseBody) *UpdateCollectionDataMetadataResponse
	GetBody() *UpdateCollectionDataMetadataResponseBody
}

type UpdateCollectionDataMetadataResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateCollectionDataMetadataResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateCollectionDataMetadataResponse) String() string {
	return dara.Prettify(s)
}

func (s UpdateCollectionDataMetadataResponse) GoString() string {
	return s.String()
}

func (s *UpdateCollectionDataMetadataResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *UpdateCollectionDataMetadataResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *UpdateCollectionDataMetadataResponse) GetBody() *UpdateCollectionDataMetadataResponseBody {
	return s.Body
}

func (s *UpdateCollectionDataMetadataResponse) SetHeaders(v map[string]*string) *UpdateCollectionDataMetadataResponse {
	s.Headers = v
	return s
}

func (s *UpdateCollectionDataMetadataResponse) SetStatusCode(v int32) *UpdateCollectionDataMetadataResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateCollectionDataMetadataResponse) SetBody(v *UpdateCollectionDataMetadataResponseBody) *UpdateCollectionDataMetadataResponse {
	s.Body = v
	return s
}

func (s *UpdateCollectionDataMetadataResponse) Validate() error {
	return dara.Validate(s)
}

type iUpdateDBInstancePlanRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *UpdateDBInstancePlanRequest
	GetDBInstanceId() *string
	SetOwnerId(v int64) *UpdateDBInstancePlanRequest
	GetOwnerId() *int64
	SetPlanConfig(v string) *UpdateDBInstancePlanRequest
	GetPlanConfig() *string
	SetPlanDesc(v string) *UpdateDBInstancePlanRequest
	GetPlanDesc() *string
	SetPlanEndDate(v string) *UpdateDBInstancePlanRequest
	GetPlanEndDate() *string
	SetPlanId(v string) *UpdateDBInstancePlanRequest
	GetPlanId() *string
	SetPlanName(v string) *UpdateDBInstancePlanRequest
	GetPlanName() *string
	SetPlanStartDate(v string) *UpdateDBInstancePlanRequest
	GetPlanStartDate() *string
}

type UpdateDBInstancePlanRequest struct {
	// The ID of the instance.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the details of all AnalyticDB for PostgreSQL instances in a specific region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The execution information of the plan. Specify the parameter in the JSON format. The parameter value varies based on the values of **PlanType*	- and **PlanScheduleType**. The following section describes the PlanConfig parameter.
	//
	// example:
	//
	// {"pause":{"executeTime":"2022-08-30T16:00:00Z"}}
	PlanConfig *string `json:"PlanConfig,omitempty" xml:"PlanConfig,omitempty"`
	// The description of the plan.
	//
	// example:
	//
	// this is a test plan
	PlanDesc *string `json:"PlanDesc,omitempty" xml:"PlanDesc,omitempty"`
	// The end time of the plan. Specify the time in the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time must be in UTC. The end time must be later than the start time.
	//
	// >
	//
	// 	- This parameter must be specified only for **periodically executed*	- plans.
	//
	// 	- If you do not specify this parameter, the plan stops until the plan is deleted.
	//
	// example:
	//
	// 2023-04-17T23:00Z
	PlanEndDate *string `json:"PlanEndDate,omitempty" xml:"PlanEndDate,omitempty"`
	// The ID of the plan.
	//
	// >  You can call the [DescribeDBInstancePlans](https://help.aliyun.com/document_detail/449398.html) operation to query the details of plans, including plan IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1234
	PlanId *string `json:"PlanId,omitempty" xml:"PlanId,omitempty"`
	// The name of the plan.
	//
	// example:
	//
	// test-plan
	PlanName *string `json:"PlanName,omitempty" xml:"PlanName,omitempty"`
	// The start time of the plan. Specify the time in the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time must be in UTC.
	//
	// >
	//
	// 	- This parameter must be specified only for **periodically executed*	- plans.
	//
	// 	- If you do not specify this parameter, the current time is used.
	//
	// example:
	//
	// 2022-04-17T23:00Z
	PlanStartDate *string `json:"PlanStartDate,omitempty" xml:"PlanStartDate,omitempty"`
}

func (s UpdateDBInstancePlanRequest) String() string {
	return dara.Prettify(s)
}

func (s UpdateDBInstancePlanRequest) GoString() string {
	return s.String()
}

func (s *UpdateDBInstancePlanRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *UpdateDBInstancePlanRequest) GetOwnerId() *int64 {
	return s.OwnerId
}

func (s *UpdateDBInstancePlanRequest) GetPlanConfig() *string {
	return s.PlanConfig
}

func (s *UpdateDBInstancePlanRequest) GetPlanDesc() *string {
	return s.PlanDesc
}

func (s *UpdateDBInstancePlanRequest) GetPlanEndDate() *string {
	return s.PlanEndDate
}

func (s *UpdateDBInstancePlanRequest) GetPlanId() *string {
	return s.PlanId
}

func (s *UpdateDBInstancePlanRequest) GetPlanName() *string {
	return s.PlanName
}

func (s *UpdateDBInstancePlanRequest) GetPlanStartDate() *string {
	return s.PlanStartDate
}

func (s *UpdateDBInstancePlanRequest) SetDBInstanceId(v string) *UpdateDBInstancePlanRequest {
	s.DBInstanceId = &v
	return s
}

func (s *UpdateDBInstancePlanRequest) SetOwnerId(v int64) *UpdateDBInstancePlanRequest {
	s.OwnerId = &v
	return s
}

func (s *UpdateDBInstancePlanRequest) SetPlanConfig(v string) *UpdateDBInstancePlanRequest {
	s.PlanConfig = &v
	return s
}

func (s *UpdateDBInstancePlanRequest) SetPlanDesc(v string) *UpdateDBInstancePlanRequest {
	s.PlanDesc = &v
	return s
}

func (s *UpdateDBInstancePlanRequest) SetPlanEndDate(v string) *UpdateDBInstancePlanRequest {
	s.PlanEndDate = &v
	return s
}

func (s *UpdateDBInstancePlanRequest) SetPlanId(v string) *UpdateDBInstancePlanRequest {
	s.PlanId = &v
	return s
}

func (s *UpdateDBInstancePlanRequest) SetPlanName(v string) *UpdateDBInstancePlanRequest {
	s.PlanName = &v
	return s
}

func (s *UpdateDBInstancePlanRequest) SetPlanStartDate(v string) *UpdateDBInstancePlanRequest {
	s.PlanStartDate = &v
	return s
}

func (s *UpdateDBInstancePlanRequest) Validate() error {
	return dara.Validate(s)
}

type iUpdateDBInstancePlanResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *UpdateDBInstancePlanResponseBody
	GetDBInstanceId() *string
	SetErrorMessage(v string) *UpdateDBInstancePlanResponseBody
	GetErrorMessage() *string
	SetPlanId(v string) *UpdateDBInstancePlanResponseBody
	GetPlanId() *string
	SetRequestId(v string) *UpdateDBInstancePlanResponseBody
	GetRequestId() *string
	SetStatus(v string) *UpdateDBInstancePlanResponseBody
	GetStatus() *string
}

type UpdateDBInstancePlanResponseBody struct {
	// The ID of the instance.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The error message returned.
	//
	// This parameter is returned only when the operation fails.
	//
	// example:
	//
	// ****
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// The ID of the plan.
	//
	// example:
	//
	// 1234
	PlanId *string `json:"PlanId,omitempty" xml:"PlanId,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 34b32a0a-08ef-4a87-b6be-cdd9f56fc3ad
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The state of the operation.
	//
	// If the operation is successful, **success*	- is returned. If the operation fails, this parameter is not returned.
	//
	// example:
	//
	// success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s UpdateDBInstancePlanResponseBody) String() string {
	return dara.Prettify(s)
}

func (s UpdateDBInstancePlanResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateDBInstancePlanResponseBody) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *UpdateDBInstancePlanResponseBody) GetErrorMessage() *string {
	return s.ErrorMessage
}

func (s *UpdateDBInstancePlanResponseBody) GetPlanId() *string {
	return s.PlanId
}

func (s *UpdateDBInstancePlanResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *UpdateDBInstancePlanResponseBody) GetStatus() *string {
	return s.Status
}

func (s *UpdateDBInstancePlanResponseBody) SetDBInstanceId(v string) *UpdateDBInstancePlanResponseBody {
	s.DBInstanceId = &v
	return s
}

func (s *UpdateDBInstancePlanResponseBody) SetErrorMessage(v string) *UpdateDBInstancePlanResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *UpdateDBInstancePlanResponseBody) SetPlanId(v string) *UpdateDBInstancePlanResponseBody {
	s.PlanId = &v
	return s
}

func (s *UpdateDBInstancePlanResponseBody) SetRequestId(v string) *UpdateDBInstancePlanResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateDBInstancePlanResponseBody) SetStatus(v string) *UpdateDBInstancePlanResponseBody {
	s.Status = &v
	return s
}

func (s *UpdateDBInstancePlanResponseBody) Validate() error {
	return dara.Validate(s)
}

type iUpdateDBInstancePlanResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *UpdateDBInstancePlanResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *UpdateDBInstancePlanResponse
	GetStatusCode() *int32
	SetBody(v *UpdateDBInstancePlanResponseBody) *UpdateDBInstancePlanResponse
	GetBody() *UpdateDBInstancePlanResponseBody
}

type UpdateDBInstancePlanResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateDBInstancePlanResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateDBInstancePlanResponse) String() string {
	return dara.Prettify(s)
}

func (s UpdateDBInstancePlanResponse) GoString() string {
	return s.String()
}

func (s *UpdateDBInstancePlanResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *UpdateDBInstancePlanResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *UpdateDBInstancePlanResponse) GetBody() *UpdateDBInstancePlanResponseBody {
	return s.Body
}

func (s *UpdateDBInstancePlanResponse) SetHeaders(v map[string]*string) *UpdateDBInstancePlanResponse {
	s.Headers = v
	return s
}

func (s *UpdateDBInstancePlanResponse) SetStatusCode(v int32) *UpdateDBInstancePlanResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateDBInstancePlanResponse) SetBody(v *UpdateDBInstancePlanResponseBody) *UpdateDBInstancePlanResponse {
	s.Body = v
	return s
}

func (s *UpdateDBInstancePlanResponse) Validate() error {
	return dara.Validate(s)
}

type iUpgradeDBInstanceRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceClass(v string) *UpgradeDBInstanceRequest
	GetDBInstanceClass() *string
	SetDBInstanceGroupCount(v string) *UpgradeDBInstanceRequest
	GetDBInstanceGroupCount() *string
	SetDBInstanceId(v string) *UpgradeDBInstanceRequest
	GetDBInstanceId() *string
	SetInstanceSpec(v string) *UpgradeDBInstanceRequest
	GetInstanceSpec() *string
	SetMasterNodeNum(v string) *UpgradeDBInstanceRequest
	GetMasterNodeNum() *string
	SetOwnerId(v int64) *UpgradeDBInstanceRequest
	GetOwnerId() *int64
	SetPayType(v string) *UpgradeDBInstanceRequest
	GetPayType() *string
	SetRegionId(v string) *UpgradeDBInstanceRequest
	GetRegionId() *string
	SetResourceGroupId(v string) *UpgradeDBInstanceRequest
	GetResourceGroupId() *string
	SetSegDiskPerformanceLevel(v string) *UpgradeDBInstanceRequest
	GetSegDiskPerformanceLevel() *string
	SetSegNodeNum(v string) *UpgradeDBInstanceRequest
	GetSegNodeNum() *string
	SetSegStorageType(v string) *UpgradeDBInstanceRequest
	GetSegStorageType() *string
	SetStorageSize(v string) *UpgradeDBInstanceRequest
	GetStorageSize() *string
	SetUpgradeType(v int64) *UpgradeDBInstanceRequest
	GetUpgradeType() *int64
}

type UpgradeDBInstanceRequest struct {
	// This parameter is no longer used.
	//
	// example:
	//
	// null
	DBInstanceClass *string `json:"DBInstanceClass,omitempty" xml:"DBInstanceClass,omitempty"`
	// This parameter is no longer used.
	//
	// example:
	//
	// null
	DBInstanceGroupCount *string `json:"DBInstanceGroupCount,omitempty" xml:"DBInstanceGroupCount,omitempty"`
	// The instance ID.
	//
	// > You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the IDs of all AnalyticDB for PostgreSQL instances within a region.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-rj***************
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The specifications of each compute node. For information about the supported specifications, see [Instance specifications](https://help.aliyun.com/document_detail/35406.html).
	//
	// > This parameter is available only for instances in elastic storage mode.
	//
	// example:
	//
	// 4C16G
	InstanceSpec *string `json:"InstanceSpec,omitempty" xml:"InstanceSpec,omitempty"`
	// This parameter is no longer used.
	//
	// example:
	//
	// 2
	MasterNodeNum *string `json:"MasterNodeNum,omitempty" xml:"MasterNodeNum,omitempty"`
	OwnerId       *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// This parameter is no longer used.
	//
	// example:
	//
	// null
	PayType *string `json:"PayType,omitempty" xml:"PayType,omitempty"`
	// The region ID of the instance.
	//
	// > You can call the [DescribeRegions](https://help.aliyun.com/document_detail/86912.html) operation to query the most recent region list.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the resource group to which the instance belongs. For information about how to obtain the ID of a resource group, see [View basic information of a resource group](https://help.aliyun.com/document_detail/151181.html).
	//
	// example:
	//
	// rg-bp67acfmxazb4p****
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	// The performance level of Enterprise SSDs (ESSDs). Valid values:
	//
	// 	- **pl0**
	//
	// 	- **pl1**
	//
	// 	- **pl2**
	//
	// example:
	//
	// pl1
	SegDiskPerformanceLevel *string `json:"SegDiskPerformanceLevel,omitempty" xml:"SegDiskPerformanceLevel,omitempty"`
	// The number of compute nodes. The number of compute nodes varies based on the instance resource type and edition.
	//
	// 	- Valid values for High-availability Edition instances in elastic storage mode: 4 to 512, in 4 increments.
	//
	// 	- Valid values for High-performance Edition instances in elastic storage mode: 2 to 512, in 2 increments.
	//
	// 	- Valid values for instances in manual Serverless mode: 2 to 512, in 2 increments.
	//
	// example:
	//
	// 2
	SegNodeNum *string `json:"SegNodeNum,omitempty" xml:"SegNodeNum,omitempty"`
	// The disk storage type of the instance after the change. The disk storage type can be changed only to ESSD. Set the value to **cloud_essd**.
	//
	// example:
	//
	// cloud_essd
	SegStorageType *string `json:"SegStorageType,omitempty" xml:"SegStorageType,omitempty"`
	// The storage capacity of each compute node. Unit: GB. Valid values: 50 to 6000, in 50 increments.
	//
	// >  This parameter is available only for instances in elastic storage mode.
	//
	// example:
	//
	// 100
	StorageSize *string `json:"StorageSize,omitempty" xml:"StorageSize,omitempty"`
	// The type of the instance configuration change. Valid values:
	//
	// 	- **0*	- (default): changes the number of compute nodes.
	//
	// 	- **1**: changes the specifications and storage capacity of each compute node.
	//
	// 	- **2**: changes the number of coordinator nodes.
	//
	// 	- **3**: changes the disk storage type and ESSD performance level of the instance.
	//
	// >
	//
	// 	- The supported changes to compute node configurations vary based on the instance resource type. For more information, see the "Usage notes" section of the [Change compute node configurations](https://help.aliyun.com/document_detail/50956.html) topic.
	//
	// 	- After you specify a change type, only the corresponding parameters take effect. For example, if you set **UpgradeType*	- to 0, the parameter that is used to change the number of compute nodes takes effect, but the parameter that is used to change the number of coordinator nodes does not.
	//
	// 	- The number of coordinator nodes can be changed only on the China site (aliyun.com).
	//
	// 	- The disk storage type can be changed only from ultra disks to ESSDs.
	//
	// example:
	//
	// 0
	UpgradeType *int64 `json:"UpgradeType,omitempty" xml:"UpgradeType,omitempty"`
}

func (s UpgradeDBInstanceRequest) String() string {
	return dara.Prettify(s)
}

func (s UpgradeDBInstanceRequest) GoString() string {
	return s.String()
}

func (s *UpgradeDBInstanceRequest) GetDBInstanceClass() *string {
	return s.DBInstanceClass
}

func (s *UpgradeDBInstanceRequest) GetDBInstanceGroupCount() *string {
	return s.DBInstanceGroupCount
}

func (s *UpgradeDBInstanceRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *UpgradeDBInstanceRequest) GetInstanceSpec() *string {
	return s.InstanceSpec
}

func (s *UpgradeDBInstanceRequest) GetMasterNodeNum() *string {
	return s.MasterNodeNum
}

func (s *UpgradeDBInstanceRequest) GetOwnerId() *int64 {
	return s.OwnerId
}

func (s *UpgradeDBInstanceRequest) GetPayType() *string {
	return s.PayType
}

func (s *UpgradeDBInstanceRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *UpgradeDBInstanceRequest) GetResourceGroupId() *string {
	return s.ResourceGroupId
}

func (s *UpgradeDBInstanceRequest) GetSegDiskPerformanceLevel() *string {
	return s.SegDiskPerformanceLevel
}

func (s *UpgradeDBInstanceRequest) GetSegNodeNum() *string {
	return s.SegNodeNum
}

func (s *UpgradeDBInstanceRequest) GetSegStorageType() *string {
	return s.SegStorageType
}

func (s *UpgradeDBInstanceRequest) GetStorageSize() *string {
	return s.StorageSize
}

func (s *UpgradeDBInstanceRequest) GetUpgradeType() *int64 {
	return s.UpgradeType
}

func (s *UpgradeDBInstanceRequest) SetDBInstanceClass(v string) *UpgradeDBInstanceRequest {
	s.DBInstanceClass = &v
	return s
}

func (s *UpgradeDBInstanceRequest) SetDBInstanceGroupCount(v string) *UpgradeDBInstanceRequest {
	s.DBInstanceGroupCount = &v
	return s
}

func (s *UpgradeDBInstanceRequest) SetDBInstanceId(v string) *UpgradeDBInstanceRequest {
	s.DBInstanceId = &v
	return s
}

func (s *UpgradeDBInstanceRequest) SetInstanceSpec(v string) *UpgradeDBInstanceRequest {
	s.InstanceSpec = &v
	return s
}

func (s *UpgradeDBInstanceRequest) SetMasterNodeNum(v string) *UpgradeDBInstanceRequest {
	s.MasterNodeNum = &v
	return s
}

func (s *UpgradeDBInstanceRequest) SetOwnerId(v int64) *UpgradeDBInstanceRequest {
	s.OwnerId = &v
	return s
}

func (s *UpgradeDBInstanceRequest) SetPayType(v string) *UpgradeDBInstanceRequest {
	s.PayType = &v
	return s
}

func (s *UpgradeDBInstanceRequest) SetRegionId(v string) *UpgradeDBInstanceRequest {
	s.RegionId = &v
	return s
}

func (s *UpgradeDBInstanceRequest) SetResourceGroupId(v string) *UpgradeDBInstanceRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *UpgradeDBInstanceRequest) SetSegDiskPerformanceLevel(v string) *UpgradeDBInstanceRequest {
	s.SegDiskPerformanceLevel = &v
	return s
}

func (s *UpgradeDBInstanceRequest) SetSegNodeNum(v string) *UpgradeDBInstanceRequest {
	s.SegNodeNum = &v
	return s
}

func (s *UpgradeDBInstanceRequest) SetSegStorageType(v string) *UpgradeDBInstanceRequest {
	s.SegStorageType = &v
	return s
}

func (s *UpgradeDBInstanceRequest) SetStorageSize(v string) *UpgradeDBInstanceRequest {
	s.StorageSize = &v
	return s
}

func (s *UpgradeDBInstanceRequest) SetUpgradeType(v int64) *UpgradeDBInstanceRequest {
	s.UpgradeType = &v
	return s
}

func (s *UpgradeDBInstanceRequest) Validate() error {
	return dara.Validate(s)
}

type iUpgradeDBInstanceResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *UpgradeDBInstanceResponseBody
	GetDBInstanceId() *string
	SetOrderId(v string) *UpgradeDBInstanceResponseBody
	GetOrderId() *string
	SetRequestId(v string) *UpgradeDBInstanceResponseBody
	GetRequestId() *string
}

type UpgradeDBInstanceResponseBody struct {
	// The instance ID.
	//
	// example:
	//
	// gp-rj***************
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The order ID.
	//
	// example:
	//
	// *********
	OrderId *string `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 25C11EE5-B7E8-481A-A07C-BD**********
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpgradeDBInstanceResponseBody) String() string {
	return dara.Prettify(s)
}

func (s UpgradeDBInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *UpgradeDBInstanceResponseBody) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *UpgradeDBInstanceResponseBody) GetOrderId() *string {
	return s.OrderId
}

func (s *UpgradeDBInstanceResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *UpgradeDBInstanceResponseBody) SetDBInstanceId(v string) *UpgradeDBInstanceResponseBody {
	s.DBInstanceId = &v
	return s
}

func (s *UpgradeDBInstanceResponseBody) SetOrderId(v string) *UpgradeDBInstanceResponseBody {
	s.OrderId = &v
	return s
}

func (s *UpgradeDBInstanceResponseBody) SetRequestId(v string) *UpgradeDBInstanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpgradeDBInstanceResponseBody) Validate() error {
	return dara.Validate(s)
}

type iUpgradeDBInstanceResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *UpgradeDBInstanceResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *UpgradeDBInstanceResponse
	GetStatusCode() *int32
	SetBody(v *UpgradeDBInstanceResponseBody) *UpgradeDBInstanceResponse
	GetBody() *UpgradeDBInstanceResponseBody
}

type UpgradeDBInstanceResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpgradeDBInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpgradeDBInstanceResponse) String() string {
	return dara.Prettify(s)
}

func (s UpgradeDBInstanceResponse) GoString() string {
	return s.String()
}

func (s *UpgradeDBInstanceResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *UpgradeDBInstanceResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *UpgradeDBInstanceResponse) GetBody() *UpgradeDBInstanceResponseBody {
	return s.Body
}

func (s *UpgradeDBInstanceResponse) SetHeaders(v map[string]*string) *UpgradeDBInstanceResponse {
	s.Headers = v
	return s
}

func (s *UpgradeDBInstanceResponse) SetStatusCode(v int32) *UpgradeDBInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *UpgradeDBInstanceResponse) SetBody(v *UpgradeDBInstanceResponseBody) *UpgradeDBInstanceResponse {
	s.Body = v
	return s
}

func (s *UpgradeDBInstanceResponse) Validate() error {
	return dara.Validate(s)
}

type iUpgradeDBVersionRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *UpgradeDBVersionRequest
	GetDBInstanceId() *string
	SetMajorVersion(v string) *UpgradeDBVersionRequest
	GetMajorVersion() *string
	SetMinorVersion(v string) *UpgradeDBVersionRequest
	GetMinorVersion() *string
	SetOwnerId(v int64) *UpgradeDBVersionRequest
	GetOwnerId() *int64
	SetRegionId(v string) *UpgradeDBVersionRequest
	GetRegionId() *string
	SetSwitchTime(v string) *UpgradeDBVersionRequest
	GetSwitchTime() *string
	SetSwitchTimeMode(v string) *UpgradeDBVersionRequest
	GetSwitchTimeMode() *string
}

type UpgradeDBVersionRequest struct {
	// The ID of the instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-wz9kmr708m155j***
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// This parameter is no longer used and does not need to be specified.
	//
	// example:
	//
	// null
	MajorVersion *string `json:"MajorVersion,omitempty" xml:"MajorVersion,omitempty"`
	// The minor version of the instance.
	//
	// example:
	//
	// 6.3.6.1-202112012048
	MinorVersion *string `json:"MinorVersion,omitempty" xml:"MinorVersion,omitempty"`
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The region ID of the instance.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// This parameter is no longer used and does not need to be specified.
	//
	// example:
	//
	// null
	SwitchTime *string `json:"SwitchTime,omitempty" xml:"SwitchTime,omitempty"`
	// This parameter is no longer used and does not need to be specified.
	//
	// example:
	//
	// null
	SwitchTimeMode *string `json:"SwitchTimeMode,omitempty" xml:"SwitchTimeMode,omitempty"`
}

func (s UpgradeDBVersionRequest) String() string {
	return dara.Prettify(s)
}

func (s UpgradeDBVersionRequest) GoString() string {
	return s.String()
}

func (s *UpgradeDBVersionRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *UpgradeDBVersionRequest) GetMajorVersion() *string {
	return s.MajorVersion
}

func (s *UpgradeDBVersionRequest) GetMinorVersion() *string {
	return s.MinorVersion
}

func (s *UpgradeDBVersionRequest) GetOwnerId() *int64 {
	return s.OwnerId
}

func (s *UpgradeDBVersionRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *UpgradeDBVersionRequest) GetSwitchTime() *string {
	return s.SwitchTime
}

func (s *UpgradeDBVersionRequest) GetSwitchTimeMode() *string {
	return s.SwitchTimeMode
}

func (s *UpgradeDBVersionRequest) SetDBInstanceId(v string) *UpgradeDBVersionRequest {
	s.DBInstanceId = &v
	return s
}

func (s *UpgradeDBVersionRequest) SetMajorVersion(v string) *UpgradeDBVersionRequest {
	s.MajorVersion = &v
	return s
}

func (s *UpgradeDBVersionRequest) SetMinorVersion(v string) *UpgradeDBVersionRequest {
	s.MinorVersion = &v
	return s
}

func (s *UpgradeDBVersionRequest) SetOwnerId(v int64) *UpgradeDBVersionRequest {
	s.OwnerId = &v
	return s
}

func (s *UpgradeDBVersionRequest) SetRegionId(v string) *UpgradeDBVersionRequest {
	s.RegionId = &v
	return s
}

func (s *UpgradeDBVersionRequest) SetSwitchTime(v string) *UpgradeDBVersionRequest {
	s.SwitchTime = &v
	return s
}

func (s *UpgradeDBVersionRequest) SetSwitchTimeMode(v string) *UpgradeDBVersionRequest {
	s.SwitchTimeMode = &v
	return s
}

func (s *UpgradeDBVersionRequest) Validate() error {
	return dara.Validate(s)
}

type iUpgradeDBVersionResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *UpgradeDBVersionResponseBody
	GetDBInstanceId() *string
	SetDBInstanceName(v string) *UpgradeDBVersionResponseBody
	GetDBInstanceName() *string
	SetRequestId(v string) *UpgradeDBVersionResponseBody
	GetRequestId() *string
	SetTaskId(v string) *UpgradeDBVersionResponseBody
	GetTaskId() *string
}

type UpgradeDBVersionResponseBody struct {
	// This parameter is no longer returned.
	//
	// example:
	//
	// gp-wz9kmr708m155j***
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The name of the instance.
	//
	// example:
	//
	// gp-wz9kmr708m155j***
	DBInstanceName *string `json:"DBInstanceName,omitempty" xml:"DBInstanceName,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 25C11EE5-B7E8-481A-A07C-BD619971A570
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The ID of the task.
	//
	// example:
	//
	// 101450956
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s UpgradeDBVersionResponseBody) String() string {
	return dara.Prettify(s)
}

func (s UpgradeDBVersionResponseBody) GoString() string {
	return s.String()
}

func (s *UpgradeDBVersionResponseBody) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *UpgradeDBVersionResponseBody) GetDBInstanceName() *string {
	return s.DBInstanceName
}

func (s *UpgradeDBVersionResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *UpgradeDBVersionResponseBody) GetTaskId() *string {
	return s.TaskId
}

func (s *UpgradeDBVersionResponseBody) SetDBInstanceId(v string) *UpgradeDBVersionResponseBody {
	s.DBInstanceId = &v
	return s
}

func (s *UpgradeDBVersionResponseBody) SetDBInstanceName(v string) *UpgradeDBVersionResponseBody {
	s.DBInstanceName = &v
	return s
}

func (s *UpgradeDBVersionResponseBody) SetRequestId(v string) *UpgradeDBVersionResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpgradeDBVersionResponseBody) SetTaskId(v string) *UpgradeDBVersionResponseBody {
	s.TaskId = &v
	return s
}

func (s *UpgradeDBVersionResponseBody) Validate() error {
	return dara.Validate(s)
}

type iUpgradeDBVersionResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *UpgradeDBVersionResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *UpgradeDBVersionResponse
	GetStatusCode() *int32
	SetBody(v *UpgradeDBVersionResponseBody) *UpgradeDBVersionResponse
	GetBody() *UpgradeDBVersionResponseBody
}

type UpgradeDBVersionResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpgradeDBVersionResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpgradeDBVersionResponse) String() string {
	return dara.Prettify(s)
}

func (s UpgradeDBVersionResponse) GoString() string {
	return s.String()
}

func (s *UpgradeDBVersionResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *UpgradeDBVersionResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *UpgradeDBVersionResponse) GetBody() *UpgradeDBVersionResponseBody {
	return s.Body
}

func (s *UpgradeDBVersionResponse) SetHeaders(v map[string]*string) *UpgradeDBVersionResponse {
	s.Headers = v
	return s
}

func (s *UpgradeDBVersionResponse) SetStatusCode(v int32) *UpgradeDBVersionResponse {
	s.StatusCode = &v
	return s
}

func (s *UpgradeDBVersionResponse) SetBody(v *UpgradeDBVersionResponseBody) *UpgradeDBVersionResponse {
	s.Body = v
	return s
}

func (s *UpgradeDBVersionResponse) Validate() error {
	return dara.Validate(s)
}

type iUpgradeExtensionsRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDBInstanceId(v string) *UpgradeExtensionsRequest
	GetDBInstanceId() *string
	SetDatabaseName(v string) *UpgradeExtensionsRequest
	GetDatabaseName() *string
	SetExtensions(v string) *UpgradeExtensionsRequest
	GetExtensions() *string
	SetRegionId(v string) *UpgradeExtensionsRequest
	GetRegionId() *string
}

type UpgradeExtensionsRequest struct {
	// The instance ID.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// Database name.
	//
	// example:
	//
	// test01
	DatabaseName *string `json:"DatabaseName,omitempty" xml:"DatabaseName,omitempty"`
	// The extensions that you want to update. Separate multiple extensions with commas (,).
	//
	// This parameter is required.
	//
	// example:
	//
	// citext,dblink
	Extensions *string `json:"Extensions,omitempty" xml:"Extensions,omitempty"`
	// The region ID of the instance.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s UpgradeExtensionsRequest) String() string {
	return dara.Prettify(s)
}

func (s UpgradeExtensionsRequest) GoString() string {
	return s.String()
}

func (s *UpgradeExtensionsRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *UpgradeExtensionsRequest) GetDatabaseName() *string {
	return s.DatabaseName
}

func (s *UpgradeExtensionsRequest) GetExtensions() *string {
	return s.Extensions
}

func (s *UpgradeExtensionsRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *UpgradeExtensionsRequest) SetDBInstanceId(v string) *UpgradeExtensionsRequest {
	s.DBInstanceId = &v
	return s
}

func (s *UpgradeExtensionsRequest) SetDatabaseName(v string) *UpgradeExtensionsRequest {
	s.DatabaseName = &v
	return s
}

func (s *UpgradeExtensionsRequest) SetExtensions(v string) *UpgradeExtensionsRequest {
	s.Extensions = &v
	return s
}

func (s *UpgradeExtensionsRequest) SetRegionId(v string) *UpgradeExtensionsRequest {
	s.RegionId = &v
	return s
}

func (s *UpgradeExtensionsRequest) Validate() error {
	return dara.Validate(s)
}

type iUpgradeExtensionsResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetRequestId(v string) *UpgradeExtensionsResponseBody
	GetRequestId() *string
}

type UpgradeExtensionsResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpgradeExtensionsResponseBody) String() string {
	return dara.Prettify(s)
}

func (s UpgradeExtensionsResponseBody) GoString() string {
	return s.String()
}

func (s *UpgradeExtensionsResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *UpgradeExtensionsResponseBody) SetRequestId(v string) *UpgradeExtensionsResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpgradeExtensionsResponseBody) Validate() error {
	return dara.Validate(s)
}

type iUpgradeExtensionsResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *UpgradeExtensionsResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *UpgradeExtensionsResponse
	GetStatusCode() *int32
	SetBody(v *UpgradeExtensionsResponseBody) *UpgradeExtensionsResponse
	GetBody() *UpgradeExtensionsResponseBody
}

type UpgradeExtensionsResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpgradeExtensionsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpgradeExtensionsResponse) String() string {
	return dara.Prettify(s)
}

func (s UpgradeExtensionsResponse) GoString() string {
	return s.String()
}

func (s *UpgradeExtensionsResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *UpgradeExtensionsResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *UpgradeExtensionsResponse) GetBody() *UpgradeExtensionsResponseBody {
	return s.Body
}

func (s *UpgradeExtensionsResponse) SetHeaders(v map[string]*string) *UpgradeExtensionsResponse {
	s.Headers = v
	return s
}

func (s *UpgradeExtensionsResponse) SetStatusCode(v int32) *UpgradeExtensionsResponse {
	s.StatusCode = &v
	return s
}

func (s *UpgradeExtensionsResponse) SetBody(v *UpgradeExtensionsResponseBody) *UpgradeExtensionsResponse {
	s.Body = v
	return s
}

func (s *UpgradeExtensionsResponse) Validate() error {
	return dara.Validate(s)
}

type iUploadDocumentAsyncRequest interface {
	dara.Model
	String() string
	GoString() string
	SetChunkOverlap(v int32) *UploadDocumentAsyncRequest
	GetChunkOverlap() *int32
	SetChunkSize(v int32) *UploadDocumentAsyncRequest
	GetChunkSize() *int32
	SetCollection(v string) *UploadDocumentAsyncRequest
	GetCollection() *string
	SetDBInstanceId(v string) *UploadDocumentAsyncRequest
	GetDBInstanceId() *string
	SetDocumentLoaderName(v string) *UploadDocumentAsyncRequest
	GetDocumentLoaderName() *string
	SetDryRun(v bool) *UploadDocumentAsyncRequest
	GetDryRun() *bool
	SetFileName(v string) *UploadDocumentAsyncRequest
	GetFileName() *string
	SetFileUrl(v string) *UploadDocumentAsyncRequest
	GetFileUrl() *string
	SetMetadata(v map[string]interface{}) *UploadDocumentAsyncRequest
	GetMetadata() map[string]interface{}
	SetNamespace(v string) *UploadDocumentAsyncRequest
	GetNamespace() *string
	SetNamespacePassword(v string) *UploadDocumentAsyncRequest
	GetNamespacePassword() *string
	SetOwnerId(v int64) *UploadDocumentAsyncRequest
	GetOwnerId() *int64
	SetRegionId(v string) *UploadDocumentAsyncRequest
	GetRegionId() *string
	SetSeparators(v []*string) *UploadDocumentAsyncRequest
	GetSeparators() []*string
	SetTextSplitterName(v string) *UploadDocumentAsyncRequest
	GetTextSplitterName() *string
	SetZhTitleEnhance(v bool) *UploadDocumentAsyncRequest
	GetZhTitleEnhance() *bool
}

type UploadDocumentAsyncRequest struct {
	// The size of data that is overlapped between consecutive chunks. The maximum value of this parameter cannot be greater than the value of the ChunkSize parameter.
	//
	// >  This parameter is used to prevent context missing that may occur due to data truncation. For example, when you upload a long text, you can retain specific overlapped text content between consecutive chunks to better understand the context.
	//
	// example:
	//
	// 50
	ChunkOverlap *int32 `json:"ChunkOverlap,omitempty" xml:"ChunkOverlap,omitempty"`
	// Strategy for processing large data: the size of each chunk when the data is split into smaller parts. Maximum value is 2048.
	//
	// example:
	//
	// 250
	ChunkSize *int32 `json:"ChunkSize,omitempty" xml:"ChunkSize,omitempty"`
	// The name of the document library.
	//
	// > Created by the [CreateDocumentCollection](https://help.aliyun.com/document_detail/2618448.html) API. You can call the [ListDocumentCollections](https://help.aliyun.com/document_detail/2618452.html) API to view the document libraries that have already been created.
	//
	// This parameter is required.
	//
	// example:
	//
	// document
	Collection *string `json:"Collection,omitempty" xml:"Collection,omitempty"`
	// Instance ID with vector engine optimization acceleration enabled. You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) API to view details of all AnalyticDB PostgreSQL instances in the target region, including the instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The name of the document loader. You do not need to specify this parameter. A document loader is automatically specified based on the file extension. Valid values:
	//
	// 	- UnstructuredHTMLLoader: `.html`
	//
	// 	- UnstructuredMarkdownLoader: `.md`
	//
	// 	- PyMuPDFLoader: `.pdf`
	//
	// 	- PyPDFLoader: `.pdf`
	//
	// 	- RapidOCRPDFLoader: `.pdf`
	//
	// 	- PDFWithImageRefLoader: `.pdf` (with the text-image association feature)
	//
	// 	- JSONLoader: `.json`
	//
	// 	- CSVLoader: `.csv`
	//
	// 	- RapidOCRLoader: `.png`, `.jpg`, `.jpeg`, and `.bmp`
	//
	// 	- UnstructuredFileLoader: `.eml`, `.msg`, `.rst`, `.txt`, `.docx`, `.epub`, `.odt`, `.pptx`, and `.tsv`
	//
	// example:
	//
	// PyMuPDFLoader
	DocumentLoaderName *string `json:"DocumentLoaderName,omitempty" xml:"DocumentLoaderName,omitempty"`
	// Specifies whether to perform only document understanding and chunking, but not vectorization and storage. Default value: false.
	//
	// >  You can set this parameter to true, check the chunking effect, and then perform optimization if needed.
	//
	// example:
	//
	// false
	DryRun *bool `json:"DryRun,omitempty" xml:"DryRun,omitempty"`
	// The file name of the document.
	//
	// >
	//
	// 	- We recommend that you add an extension to the file name. Examples: `.json`, `.md`, and `.pdf`. If you do not add an extension, the default loader designed for unstructured data is used.
	//
	// 	- If an image file is involved, the file name must contain an extension. The following extensions are supported: `.bmp`, `.jpg`, `.jpeg`, `.png`, and `.tiff`.
	//
	// 	- You can use a compressed package to upload images. The package file name must contain an extension. Supported package file extensions: `.tar`, `.gz`, and `.zip`.
	//
	// This parameter is required.
	//
	// example:
	//
	// mydoc.txt
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// The URL of the publicly accessible document.
	//
	// >  > - It is recommended to call this interface using the SDK, which provides a method called UploadDocumentAsyncAdvance for directly uploading local files. > - If the URL points to an image archive, the number of images in the archive should not exceed 100.
	//
	// This parameter is required.
	//
	// example:
	//
	// https://xx/mydoc.txt
	FileUrl *string `json:"FileUrl,omitempty" xml:"FileUrl,omitempty"`
	// The metadata. The value of this parameter must be the same as the Metadata parameter that is specified when you call the CreateDocumentCollection operation.
	Metadata map[string]interface{} `json:"Metadata,omitempty" xml:"Metadata,omitempty"`
	// Namespace, default is public. You can create one through the CreateNamespace interface and view the list via the ListNamespaces interface.
	//
	// example:
	//
	// mynamespace
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// The password corresponding to the namespace.  > This value is specified by the CreateNamespace interface.
	//
	// This parameter is required.
	//
	// example:
	//
	// testpassword
	NamespacePassword *string `json:"NamespacePassword,omitempty" xml:"NamespacePassword,omitempty"`
	OwnerId           *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The region ID of the instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The separators that are used to split large amounts of data.
	//
	// >
	//
	// 	- This is an important parameter that determines the chunking effect. This parameter is related to the splitter that is specified by the TextSplitterName parameter.
	//
	// 	- In most cases, you do not need to specify this parameter. The server assigns separators based on the value of the TextSplitterName parameter.
	Separators []*string `json:"Separators,omitempty" xml:"Separators,omitempty" type:"Repeated"`
	// The name of the splitter. Valid values:
	//
	// 	- **ChineseRecursiveTextSplitter**: inherits from RecursiveCharacterTextSplitter, uses `["\\n\\n","\\n", "。|!|?", "\\.\\s|\\!\\s|\\?\\s", ";|;\\s", ",|,\\s"]` as separators by default, and uses regular expressions to match text.
	//
	// 	- **RecursiveCharacterTextSplitter**: uses `["\\n\\n", "\\n", " ", ""]` as separators by default. The splitter supports splitting code in languages such as `C++, Go, Java, JS, PHP, Proto, Python, RST, Ruby, Rust, Scala, Swift, Markdown, LaTeX, HTML, Sol, and C Sharp`.
	//
	// 	- **SpacyTextSplitter**: uses `\\n\\n` as separators by default and uses the en_core_web_sm model of spaCy. The splitter can obtain better splitting effect.
	//
	// 	- **MarkdownHeaderTextSplitter**: splits text in the `[("#", "head1"), ("##", "head2"), ("###", "head3"), ("####", "head4")]` format. The splitter is suitable for Markdown text.
	//
	// example:
	//
	// ChineseRecursiveTextSplitter
	TextSplitterName *string `json:"TextSplitterName,omitempty" xml:"TextSplitterName,omitempty"`
	// Specifies whether to enable title enhancement.
	//
	// >  You can determine the title text, mark the text in the metadata, and then combine the text with the upper-level title to implement text enhancement.
	//
	// example:
	//
	// false
	ZhTitleEnhance *bool `json:"ZhTitleEnhance,omitempty" xml:"ZhTitleEnhance,omitempty"`
}

func (s UploadDocumentAsyncRequest) String() string {
	return dara.Prettify(s)
}

func (s UploadDocumentAsyncRequest) GoString() string {
	return s.String()
}

func (s *UploadDocumentAsyncRequest) GetChunkOverlap() *int32 {
	return s.ChunkOverlap
}

func (s *UploadDocumentAsyncRequest) GetChunkSize() *int32 {
	return s.ChunkSize
}

func (s *UploadDocumentAsyncRequest) GetCollection() *string {
	return s.Collection
}

func (s *UploadDocumentAsyncRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *UploadDocumentAsyncRequest) GetDocumentLoaderName() *string {
	return s.DocumentLoaderName
}

func (s *UploadDocumentAsyncRequest) GetDryRun() *bool {
	return s.DryRun
}

func (s *UploadDocumentAsyncRequest) GetFileName() *string {
	return s.FileName
}

func (s *UploadDocumentAsyncRequest) GetFileUrl() *string {
	return s.FileUrl
}

func (s *UploadDocumentAsyncRequest) GetMetadata() map[string]interface{} {
	return s.Metadata
}

func (s *UploadDocumentAsyncRequest) GetNamespace() *string {
	return s.Namespace
}

func (s *UploadDocumentAsyncRequest) GetNamespacePassword() *string {
	return s.NamespacePassword
}

func (s *UploadDocumentAsyncRequest) GetOwnerId() *int64 {
	return s.OwnerId
}

func (s *UploadDocumentAsyncRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *UploadDocumentAsyncRequest) GetSeparators() []*string {
	return s.Separators
}

func (s *UploadDocumentAsyncRequest) GetTextSplitterName() *string {
	return s.TextSplitterName
}

func (s *UploadDocumentAsyncRequest) GetZhTitleEnhance() *bool {
	return s.ZhTitleEnhance
}

func (s *UploadDocumentAsyncRequest) SetChunkOverlap(v int32) *UploadDocumentAsyncRequest {
	s.ChunkOverlap = &v
	return s
}

func (s *UploadDocumentAsyncRequest) SetChunkSize(v int32) *UploadDocumentAsyncRequest {
	s.ChunkSize = &v
	return s
}

func (s *UploadDocumentAsyncRequest) SetCollection(v string) *UploadDocumentAsyncRequest {
	s.Collection = &v
	return s
}

func (s *UploadDocumentAsyncRequest) SetDBInstanceId(v string) *UploadDocumentAsyncRequest {
	s.DBInstanceId = &v
	return s
}

func (s *UploadDocumentAsyncRequest) SetDocumentLoaderName(v string) *UploadDocumentAsyncRequest {
	s.DocumentLoaderName = &v
	return s
}

func (s *UploadDocumentAsyncRequest) SetDryRun(v bool) *UploadDocumentAsyncRequest {
	s.DryRun = &v
	return s
}

func (s *UploadDocumentAsyncRequest) SetFileName(v string) *UploadDocumentAsyncRequest {
	s.FileName = &v
	return s
}

func (s *UploadDocumentAsyncRequest) SetFileUrl(v string) *UploadDocumentAsyncRequest {
	s.FileUrl = &v
	return s
}

func (s *UploadDocumentAsyncRequest) SetMetadata(v map[string]interface{}) *UploadDocumentAsyncRequest {
	s.Metadata = v
	return s
}

func (s *UploadDocumentAsyncRequest) SetNamespace(v string) *UploadDocumentAsyncRequest {
	s.Namespace = &v
	return s
}

func (s *UploadDocumentAsyncRequest) SetNamespacePassword(v string) *UploadDocumentAsyncRequest {
	s.NamespacePassword = &v
	return s
}

func (s *UploadDocumentAsyncRequest) SetOwnerId(v int64) *UploadDocumentAsyncRequest {
	s.OwnerId = &v
	return s
}

func (s *UploadDocumentAsyncRequest) SetRegionId(v string) *UploadDocumentAsyncRequest {
	s.RegionId = &v
	return s
}

func (s *UploadDocumentAsyncRequest) SetSeparators(v []*string) *UploadDocumentAsyncRequest {
	s.Separators = v
	return s
}

func (s *UploadDocumentAsyncRequest) SetTextSplitterName(v string) *UploadDocumentAsyncRequest {
	s.TextSplitterName = &v
	return s
}

func (s *UploadDocumentAsyncRequest) SetZhTitleEnhance(v bool) *UploadDocumentAsyncRequest {
	s.ZhTitleEnhance = &v
	return s
}

func (s *UploadDocumentAsyncRequest) Validate() error {
	return dara.Validate(s)
}

type iUploadDocumentAsyncAdvanceRequest interface {
	dara.Model
	String() string
	GoString() string
	SetChunkOverlap(v int32) *UploadDocumentAsyncAdvanceRequest
	GetChunkOverlap() *int32
	SetChunkSize(v int32) *UploadDocumentAsyncAdvanceRequest
	GetChunkSize() *int32
	SetCollection(v string) *UploadDocumentAsyncAdvanceRequest
	GetCollection() *string
	SetDBInstanceId(v string) *UploadDocumentAsyncAdvanceRequest
	GetDBInstanceId() *string
	SetDocumentLoaderName(v string) *UploadDocumentAsyncAdvanceRequest
	GetDocumentLoaderName() *string
	SetDryRun(v bool) *UploadDocumentAsyncAdvanceRequest
	GetDryRun() *bool
	SetFileName(v string) *UploadDocumentAsyncAdvanceRequest
	GetFileName() *string
	SetFileUrlObject(v io.Reader) *UploadDocumentAsyncAdvanceRequest
	GetFileUrlObject() io.Reader
	SetMetadata(v map[string]interface{}) *UploadDocumentAsyncAdvanceRequest
	GetMetadata() map[string]interface{}
	SetNamespace(v string) *UploadDocumentAsyncAdvanceRequest
	GetNamespace() *string
	SetNamespacePassword(v string) *UploadDocumentAsyncAdvanceRequest
	GetNamespacePassword() *string
	SetOwnerId(v int64) *UploadDocumentAsyncAdvanceRequest
	GetOwnerId() *int64
	SetRegionId(v string) *UploadDocumentAsyncAdvanceRequest
	GetRegionId() *string
	SetSeparators(v []*string) *UploadDocumentAsyncAdvanceRequest
	GetSeparators() []*string
	SetTextSplitterName(v string) *UploadDocumentAsyncAdvanceRequest
	GetTextSplitterName() *string
	SetZhTitleEnhance(v bool) *UploadDocumentAsyncAdvanceRequest
	GetZhTitleEnhance() *bool
}

type UploadDocumentAsyncAdvanceRequest struct {
	// The size of data that is overlapped between consecutive chunks. The maximum value of this parameter cannot be greater than the value of the ChunkSize parameter.
	//
	// >  This parameter is used to prevent context missing that may occur due to data truncation. For example, when you upload a long text, you can retain specific overlapped text content between consecutive chunks to better understand the context.
	//
	// example:
	//
	// 50
	ChunkOverlap *int32 `json:"ChunkOverlap,omitempty" xml:"ChunkOverlap,omitempty"`
	// Strategy for processing large data: the size of each chunk when the data is split into smaller parts. Maximum value is 2048.
	//
	// example:
	//
	// 250
	ChunkSize *int32 `json:"ChunkSize,omitempty" xml:"ChunkSize,omitempty"`
	// The name of the document library.
	//
	// > Created by the [CreateDocumentCollection](https://help.aliyun.com/document_detail/2618448.html) API. You can call the [ListDocumentCollections](https://help.aliyun.com/document_detail/2618452.html) API to view the document libraries that have already been created.
	//
	// This parameter is required.
	//
	// example:
	//
	// document
	Collection *string `json:"Collection,omitempty" xml:"Collection,omitempty"`
	// Instance ID with vector engine optimization acceleration enabled. You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) API to view details of all AnalyticDB PostgreSQL instances in the target region, including the instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The name of the document loader. You do not need to specify this parameter. A document loader is automatically specified based on the file extension. Valid values:
	//
	// 	- UnstructuredHTMLLoader: `.html`
	//
	// 	- UnstructuredMarkdownLoader: `.md`
	//
	// 	- PyMuPDFLoader: `.pdf`
	//
	// 	- PyPDFLoader: `.pdf`
	//
	// 	- RapidOCRPDFLoader: `.pdf`
	//
	// 	- PDFWithImageRefLoader: `.pdf` (with the text-image association feature)
	//
	// 	- JSONLoader: `.json`
	//
	// 	- CSVLoader: `.csv`
	//
	// 	- RapidOCRLoader: `.png`, `.jpg`, `.jpeg`, and `.bmp`
	//
	// 	- UnstructuredFileLoader: `.eml`, `.msg`, `.rst`, `.txt`, `.docx`, `.epub`, `.odt`, `.pptx`, and `.tsv`
	//
	// example:
	//
	// PyMuPDFLoader
	DocumentLoaderName *string `json:"DocumentLoaderName,omitempty" xml:"DocumentLoaderName,omitempty"`
	// Specifies whether to perform only document understanding and chunking, but not vectorization and storage. Default value: false.
	//
	// >  You can set this parameter to true, check the chunking effect, and then perform optimization if needed.
	//
	// example:
	//
	// false
	DryRun *bool `json:"DryRun,omitempty" xml:"DryRun,omitempty"`
	// The file name of the document.
	//
	// >
	//
	// 	- We recommend that you add an extension to the file name. Examples: `.json`, `.md`, and `.pdf`. If you do not add an extension, the default loader designed for unstructured data is used.
	//
	// 	- If an image file is involved, the file name must contain an extension. The following extensions are supported: `.bmp`, `.jpg`, `.jpeg`, `.png`, and `.tiff`.
	//
	// 	- You can use a compressed package to upload images. The package file name must contain an extension. Supported package file extensions: `.tar`, `.gz`, and `.zip`.
	//
	// This parameter is required.
	//
	// example:
	//
	// mydoc.txt
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// The URL of the publicly accessible document.
	//
	// >  > - It is recommended to call this interface using the SDK, which provides a method called UploadDocumentAsyncAdvance for directly uploading local files. > - If the URL points to an image archive, the number of images in the archive should not exceed 100.
	//
	// This parameter is required.
	//
	// example:
	//
	// https://xx/mydoc.txt
	FileUrlObject io.Reader `json:"FileUrl,omitempty" xml:"FileUrl,omitempty"`
	// The metadata. The value of this parameter must be the same as the Metadata parameter that is specified when you call the CreateDocumentCollection operation.
	Metadata map[string]interface{} `json:"Metadata,omitempty" xml:"Metadata,omitempty"`
	// Namespace, default is public. You can create one through the CreateNamespace interface and view the list via the ListNamespaces interface.
	//
	// example:
	//
	// mynamespace
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// The password corresponding to the namespace.  > This value is specified by the CreateNamespace interface.
	//
	// This parameter is required.
	//
	// example:
	//
	// testpassword
	NamespacePassword *string `json:"NamespacePassword,omitempty" xml:"NamespacePassword,omitempty"`
	OwnerId           *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The region ID of the instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The separators that are used to split large amounts of data.
	//
	// >
	//
	// 	- This is an important parameter that determines the chunking effect. This parameter is related to the splitter that is specified by the TextSplitterName parameter.
	//
	// 	- In most cases, you do not need to specify this parameter. The server assigns separators based on the value of the TextSplitterName parameter.
	Separators []*string `json:"Separators,omitempty" xml:"Separators,omitempty" type:"Repeated"`
	// The name of the splitter. Valid values:
	//
	// 	- **ChineseRecursiveTextSplitter**: inherits from RecursiveCharacterTextSplitter, uses `["\\n\\n","\\n", "。|!|?", "\\.\\s|\\!\\s|\\?\\s", ";|;\\s", ",|,\\s"]` as separators by default, and uses regular expressions to match text.
	//
	// 	- **RecursiveCharacterTextSplitter**: uses `["\\n\\n", "\\n", " ", ""]` as separators by default. The splitter supports splitting code in languages such as `C++, Go, Java, JS, PHP, Proto, Python, RST, Ruby, Rust, Scala, Swift, Markdown, LaTeX, HTML, Sol, and C Sharp`.
	//
	// 	- **SpacyTextSplitter**: uses `\\n\\n` as separators by default and uses the en_core_web_sm model of spaCy. The splitter can obtain better splitting effect.
	//
	// 	- **MarkdownHeaderTextSplitter**: splits text in the `[("#", "head1"), ("##", "head2"), ("###", "head3"), ("####", "head4")]` format. The splitter is suitable for Markdown text.
	//
	// example:
	//
	// ChineseRecursiveTextSplitter
	TextSplitterName *string `json:"TextSplitterName,omitempty" xml:"TextSplitterName,omitempty"`
	// Specifies whether to enable title enhancement.
	//
	// >  You can determine the title text, mark the text in the metadata, and then combine the text with the upper-level title to implement text enhancement.
	//
	// example:
	//
	// false
	ZhTitleEnhance *bool `json:"ZhTitleEnhance,omitempty" xml:"ZhTitleEnhance,omitempty"`
}

func (s UploadDocumentAsyncAdvanceRequest) String() string {
	return dara.Prettify(s)
}

func (s UploadDocumentAsyncAdvanceRequest) GoString() string {
	return s.String()
}

func (s *UploadDocumentAsyncAdvanceRequest) GetChunkOverlap() *int32 {
	return s.ChunkOverlap
}

func (s *UploadDocumentAsyncAdvanceRequest) GetChunkSize() *int32 {
	return s.ChunkSize
}

func (s *UploadDocumentAsyncAdvanceRequest) GetCollection() *string {
	return s.Collection
}

func (s *UploadDocumentAsyncAdvanceRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *UploadDocumentAsyncAdvanceRequest) GetDocumentLoaderName() *string {
	return s.DocumentLoaderName
}

func (s *UploadDocumentAsyncAdvanceRequest) GetDryRun() *bool {
	return s.DryRun
}

func (s *UploadDocumentAsyncAdvanceRequest) GetFileName() *string {
	return s.FileName
}

func (s *UploadDocumentAsyncAdvanceRequest) GetFileUrlObject() io.Reader {
	return s.FileUrlObject
}

func (s *UploadDocumentAsyncAdvanceRequest) GetMetadata() map[string]interface{} {
	return s.Metadata
}

func (s *UploadDocumentAsyncAdvanceRequest) GetNamespace() *string {
	return s.Namespace
}

func (s *UploadDocumentAsyncAdvanceRequest) GetNamespacePassword() *string {
	return s.NamespacePassword
}

func (s *UploadDocumentAsyncAdvanceRequest) GetOwnerId() *int64 {
	return s.OwnerId
}

func (s *UploadDocumentAsyncAdvanceRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *UploadDocumentAsyncAdvanceRequest) GetSeparators() []*string {
	return s.Separators
}

func (s *UploadDocumentAsyncAdvanceRequest) GetTextSplitterName() *string {
	return s.TextSplitterName
}

func (s *UploadDocumentAsyncAdvanceRequest) GetZhTitleEnhance() *bool {
	return s.ZhTitleEnhance
}

func (s *UploadDocumentAsyncAdvanceRequest) SetChunkOverlap(v int32) *UploadDocumentAsyncAdvanceRequest {
	s.ChunkOverlap = &v
	return s
}

func (s *UploadDocumentAsyncAdvanceRequest) SetChunkSize(v int32) *UploadDocumentAsyncAdvanceRequest {
	s.ChunkSize = &v
	return s
}

func (s *UploadDocumentAsyncAdvanceRequest) SetCollection(v string) *UploadDocumentAsyncAdvanceRequest {
	s.Collection = &v
	return s
}

func (s *UploadDocumentAsyncAdvanceRequest) SetDBInstanceId(v string) *UploadDocumentAsyncAdvanceRequest {
	s.DBInstanceId = &v
	return s
}

func (s *UploadDocumentAsyncAdvanceRequest) SetDocumentLoaderName(v string) *UploadDocumentAsyncAdvanceRequest {
	s.DocumentLoaderName = &v
	return s
}

func (s *UploadDocumentAsyncAdvanceRequest) SetDryRun(v bool) *UploadDocumentAsyncAdvanceRequest {
	s.DryRun = &v
	return s
}

func (s *UploadDocumentAsyncAdvanceRequest) SetFileName(v string) *UploadDocumentAsyncAdvanceRequest {
	s.FileName = &v
	return s
}

func (s *UploadDocumentAsyncAdvanceRequest) SetFileUrlObject(v io.Reader) *UploadDocumentAsyncAdvanceRequest {
	s.FileUrlObject = v
	return s
}

func (s *UploadDocumentAsyncAdvanceRequest) SetMetadata(v map[string]interface{}) *UploadDocumentAsyncAdvanceRequest {
	s.Metadata = v
	return s
}

func (s *UploadDocumentAsyncAdvanceRequest) SetNamespace(v string) *UploadDocumentAsyncAdvanceRequest {
	s.Namespace = &v
	return s
}

func (s *UploadDocumentAsyncAdvanceRequest) SetNamespacePassword(v string) *UploadDocumentAsyncAdvanceRequest {
	s.NamespacePassword = &v
	return s
}

func (s *UploadDocumentAsyncAdvanceRequest) SetOwnerId(v int64) *UploadDocumentAsyncAdvanceRequest {
	s.OwnerId = &v
	return s
}

func (s *UploadDocumentAsyncAdvanceRequest) SetRegionId(v string) *UploadDocumentAsyncAdvanceRequest {
	s.RegionId = &v
	return s
}

func (s *UploadDocumentAsyncAdvanceRequest) SetSeparators(v []*string) *UploadDocumentAsyncAdvanceRequest {
	s.Separators = v
	return s
}

func (s *UploadDocumentAsyncAdvanceRequest) SetTextSplitterName(v string) *UploadDocumentAsyncAdvanceRequest {
	s.TextSplitterName = &v
	return s
}

func (s *UploadDocumentAsyncAdvanceRequest) SetZhTitleEnhance(v bool) *UploadDocumentAsyncAdvanceRequest {
	s.ZhTitleEnhance = &v
	return s
}

func (s *UploadDocumentAsyncAdvanceRequest) Validate() error {
	return dara.Validate(s)
}

type iUploadDocumentAsyncShrinkRequest interface {
	dara.Model
	String() string
	GoString() string
	SetChunkOverlap(v int32) *UploadDocumentAsyncShrinkRequest
	GetChunkOverlap() *int32
	SetChunkSize(v int32) *UploadDocumentAsyncShrinkRequest
	GetChunkSize() *int32
	SetCollection(v string) *UploadDocumentAsyncShrinkRequest
	GetCollection() *string
	SetDBInstanceId(v string) *UploadDocumentAsyncShrinkRequest
	GetDBInstanceId() *string
	SetDocumentLoaderName(v string) *UploadDocumentAsyncShrinkRequest
	GetDocumentLoaderName() *string
	SetDryRun(v bool) *UploadDocumentAsyncShrinkRequest
	GetDryRun() *bool
	SetFileName(v string) *UploadDocumentAsyncShrinkRequest
	GetFileName() *string
	SetFileUrl(v string) *UploadDocumentAsyncShrinkRequest
	GetFileUrl() *string
	SetMetadataShrink(v string) *UploadDocumentAsyncShrinkRequest
	GetMetadataShrink() *string
	SetNamespace(v string) *UploadDocumentAsyncShrinkRequest
	GetNamespace() *string
	SetNamespacePassword(v string) *UploadDocumentAsyncShrinkRequest
	GetNamespacePassword() *string
	SetOwnerId(v int64) *UploadDocumentAsyncShrinkRequest
	GetOwnerId() *int64
	SetRegionId(v string) *UploadDocumentAsyncShrinkRequest
	GetRegionId() *string
	SetSeparatorsShrink(v string) *UploadDocumentAsyncShrinkRequest
	GetSeparatorsShrink() *string
	SetTextSplitterName(v string) *UploadDocumentAsyncShrinkRequest
	GetTextSplitterName() *string
	SetZhTitleEnhance(v bool) *UploadDocumentAsyncShrinkRequest
	GetZhTitleEnhance() *bool
}

type UploadDocumentAsyncShrinkRequest struct {
	// The size of data that is overlapped between consecutive chunks. The maximum value of this parameter cannot be greater than the value of the ChunkSize parameter.
	//
	// >  This parameter is used to prevent context missing that may occur due to data truncation. For example, when you upload a long text, you can retain specific overlapped text content between consecutive chunks to better understand the context.
	//
	// example:
	//
	// 50
	ChunkOverlap *int32 `json:"ChunkOverlap,omitempty" xml:"ChunkOverlap,omitempty"`
	// Strategy for processing large data: the size of each chunk when the data is split into smaller parts. Maximum value is 2048.
	//
	// example:
	//
	// 250
	ChunkSize *int32 `json:"ChunkSize,omitempty" xml:"ChunkSize,omitempty"`
	// The name of the document library.
	//
	// > Created by the [CreateDocumentCollection](https://help.aliyun.com/document_detail/2618448.html) API. You can call the [ListDocumentCollections](https://help.aliyun.com/document_detail/2618452.html) API to view the document libraries that have already been created.
	//
	// This parameter is required.
	//
	// example:
	//
	// document
	Collection *string `json:"Collection,omitempty" xml:"Collection,omitempty"`
	// Instance ID with vector engine optimization acceleration enabled. You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) API to view details of all AnalyticDB PostgreSQL instances in the target region, including the instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The name of the document loader. You do not need to specify this parameter. A document loader is automatically specified based on the file extension. Valid values:
	//
	// 	- UnstructuredHTMLLoader: `.html`
	//
	// 	- UnstructuredMarkdownLoader: `.md`
	//
	// 	- PyMuPDFLoader: `.pdf`
	//
	// 	- PyPDFLoader: `.pdf`
	//
	// 	- RapidOCRPDFLoader: `.pdf`
	//
	// 	- PDFWithImageRefLoader: `.pdf` (with the text-image association feature)
	//
	// 	- JSONLoader: `.json`
	//
	// 	- CSVLoader: `.csv`
	//
	// 	- RapidOCRLoader: `.png`, `.jpg`, `.jpeg`, and `.bmp`
	//
	// 	- UnstructuredFileLoader: `.eml`, `.msg`, `.rst`, `.txt`, `.docx`, `.epub`, `.odt`, `.pptx`, and `.tsv`
	//
	// example:
	//
	// PyMuPDFLoader
	DocumentLoaderName *string `json:"DocumentLoaderName,omitempty" xml:"DocumentLoaderName,omitempty"`
	// Specifies whether to perform only document understanding and chunking, but not vectorization and storage. Default value: false.
	//
	// >  You can set this parameter to true, check the chunking effect, and then perform optimization if needed.
	//
	// example:
	//
	// false
	DryRun *bool `json:"DryRun,omitempty" xml:"DryRun,omitempty"`
	// The file name of the document.
	//
	// >
	//
	// 	- We recommend that you add an extension to the file name. Examples: `.json`, `.md`, and `.pdf`. If you do not add an extension, the default loader designed for unstructured data is used.
	//
	// 	- If an image file is involved, the file name must contain an extension. The following extensions are supported: `.bmp`, `.jpg`, `.jpeg`, `.png`, and `.tiff`.
	//
	// 	- You can use a compressed package to upload images. The package file name must contain an extension. Supported package file extensions: `.tar`, `.gz`, and `.zip`.
	//
	// This parameter is required.
	//
	// example:
	//
	// mydoc.txt
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// The URL of the publicly accessible document.
	//
	// >  > - It is recommended to call this interface using the SDK, which provides a method called UploadDocumentAsyncAdvance for directly uploading local files. > - If the URL points to an image archive, the number of images in the archive should not exceed 100.
	//
	// This parameter is required.
	//
	// example:
	//
	// https://xx/mydoc.txt
	FileUrl *string `json:"FileUrl,omitempty" xml:"FileUrl,omitempty"`
	// The metadata. The value of this parameter must be the same as the Metadata parameter that is specified when you call the CreateDocumentCollection operation.
	MetadataShrink *string `json:"Metadata,omitempty" xml:"Metadata,omitempty"`
	// Namespace, default is public. You can create one through the CreateNamespace interface and view the list via the ListNamespaces interface.
	//
	// example:
	//
	// mynamespace
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// The password corresponding to the namespace.  > This value is specified by the CreateNamespace interface.
	//
	// This parameter is required.
	//
	// example:
	//
	// testpassword
	NamespacePassword *string `json:"NamespacePassword,omitempty" xml:"NamespacePassword,omitempty"`
	OwnerId           *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The region ID of the instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The separators that are used to split large amounts of data.
	//
	// >
	//
	// 	- This is an important parameter that determines the chunking effect. This parameter is related to the splitter that is specified by the TextSplitterName parameter.
	//
	// 	- In most cases, you do not need to specify this parameter. The server assigns separators based on the value of the TextSplitterName parameter.
	SeparatorsShrink *string `json:"Separators,omitempty" xml:"Separators,omitempty"`
	// The name of the splitter. Valid values:
	//
	// 	- **ChineseRecursiveTextSplitter**: inherits from RecursiveCharacterTextSplitter, uses `["\\n\\n","\\n", "。|!|?", "\\.\\s|\\!\\s|\\?\\s", ";|;\\s", ",|,\\s"]` as separators by default, and uses regular expressions to match text.
	//
	// 	- **RecursiveCharacterTextSplitter**: uses `["\\n\\n", "\\n", " ", ""]` as separators by default. The splitter supports splitting code in languages such as `C++, Go, Java, JS, PHP, Proto, Python, RST, Ruby, Rust, Scala, Swift, Markdown, LaTeX, HTML, Sol, and C Sharp`.
	//
	// 	- **SpacyTextSplitter**: uses `\\n\\n` as separators by default and uses the en_core_web_sm model of spaCy. The splitter can obtain better splitting effect.
	//
	// 	- **MarkdownHeaderTextSplitter**: splits text in the `[("#", "head1"), ("##", "head2"), ("###", "head3"), ("####", "head4")]` format. The splitter is suitable for Markdown text.
	//
	// example:
	//
	// ChineseRecursiveTextSplitter
	TextSplitterName *string `json:"TextSplitterName,omitempty" xml:"TextSplitterName,omitempty"`
	// Specifies whether to enable title enhancement.
	//
	// >  You can determine the title text, mark the text in the metadata, and then combine the text with the upper-level title to implement text enhancement.
	//
	// example:
	//
	// false
	ZhTitleEnhance *bool `json:"ZhTitleEnhance,omitempty" xml:"ZhTitleEnhance,omitempty"`
}

func (s UploadDocumentAsyncShrinkRequest) String() string {
	return dara.Prettify(s)
}

func (s UploadDocumentAsyncShrinkRequest) GoString() string {
	return s.String()
}

func (s *UploadDocumentAsyncShrinkRequest) GetChunkOverlap() *int32 {
	return s.ChunkOverlap
}

func (s *UploadDocumentAsyncShrinkRequest) GetChunkSize() *int32 {
	return s.ChunkSize
}

func (s *UploadDocumentAsyncShrinkRequest) GetCollection() *string {
	return s.Collection
}

func (s *UploadDocumentAsyncShrinkRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *UploadDocumentAsyncShrinkRequest) GetDocumentLoaderName() *string {
	return s.DocumentLoaderName
}

func (s *UploadDocumentAsyncShrinkRequest) GetDryRun() *bool {
	return s.DryRun
}

func (s *UploadDocumentAsyncShrinkRequest) GetFileName() *string {
	return s.FileName
}

func (s *UploadDocumentAsyncShrinkRequest) GetFileUrl() *string {
	return s.FileUrl
}

func (s *UploadDocumentAsyncShrinkRequest) GetMetadataShrink() *string {
	return s.MetadataShrink
}

func (s *UploadDocumentAsyncShrinkRequest) GetNamespace() *string {
	return s.Namespace
}

func (s *UploadDocumentAsyncShrinkRequest) GetNamespacePassword() *string {
	return s.NamespacePassword
}

func (s *UploadDocumentAsyncShrinkRequest) GetOwnerId() *int64 {
	return s.OwnerId
}

func (s *UploadDocumentAsyncShrinkRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *UploadDocumentAsyncShrinkRequest) GetSeparatorsShrink() *string {
	return s.SeparatorsShrink
}

func (s *UploadDocumentAsyncShrinkRequest) GetTextSplitterName() *string {
	return s.TextSplitterName
}

func (s *UploadDocumentAsyncShrinkRequest) GetZhTitleEnhance() *bool {
	return s.ZhTitleEnhance
}

func (s *UploadDocumentAsyncShrinkRequest) SetChunkOverlap(v int32) *UploadDocumentAsyncShrinkRequest {
	s.ChunkOverlap = &v
	return s
}

func (s *UploadDocumentAsyncShrinkRequest) SetChunkSize(v int32) *UploadDocumentAsyncShrinkRequest {
	s.ChunkSize = &v
	return s
}

func (s *UploadDocumentAsyncShrinkRequest) SetCollection(v string) *UploadDocumentAsyncShrinkRequest {
	s.Collection = &v
	return s
}

func (s *UploadDocumentAsyncShrinkRequest) SetDBInstanceId(v string) *UploadDocumentAsyncShrinkRequest {
	s.DBInstanceId = &v
	return s
}

func (s *UploadDocumentAsyncShrinkRequest) SetDocumentLoaderName(v string) *UploadDocumentAsyncShrinkRequest {
	s.DocumentLoaderName = &v
	return s
}

func (s *UploadDocumentAsyncShrinkRequest) SetDryRun(v bool) *UploadDocumentAsyncShrinkRequest {
	s.DryRun = &v
	return s
}

func (s *UploadDocumentAsyncShrinkRequest) SetFileName(v string) *UploadDocumentAsyncShrinkRequest {
	s.FileName = &v
	return s
}

func (s *UploadDocumentAsyncShrinkRequest) SetFileUrl(v string) *UploadDocumentAsyncShrinkRequest {
	s.FileUrl = &v
	return s
}

func (s *UploadDocumentAsyncShrinkRequest) SetMetadataShrink(v string) *UploadDocumentAsyncShrinkRequest {
	s.MetadataShrink = &v
	return s
}

func (s *UploadDocumentAsyncShrinkRequest) SetNamespace(v string) *UploadDocumentAsyncShrinkRequest {
	s.Namespace = &v
	return s
}

func (s *UploadDocumentAsyncShrinkRequest) SetNamespacePassword(v string) *UploadDocumentAsyncShrinkRequest {
	s.NamespacePassword = &v
	return s
}

func (s *UploadDocumentAsyncShrinkRequest) SetOwnerId(v int64) *UploadDocumentAsyncShrinkRequest {
	s.OwnerId = &v
	return s
}

func (s *UploadDocumentAsyncShrinkRequest) SetRegionId(v string) *UploadDocumentAsyncShrinkRequest {
	s.RegionId = &v
	return s
}

func (s *UploadDocumentAsyncShrinkRequest) SetSeparatorsShrink(v string) *UploadDocumentAsyncShrinkRequest {
	s.SeparatorsShrink = &v
	return s
}

func (s *UploadDocumentAsyncShrinkRequest) SetTextSplitterName(v string) *UploadDocumentAsyncShrinkRequest {
	s.TextSplitterName = &v
	return s
}

func (s *UploadDocumentAsyncShrinkRequest) SetZhTitleEnhance(v bool) *UploadDocumentAsyncShrinkRequest {
	s.ZhTitleEnhance = &v
	return s
}

func (s *UploadDocumentAsyncShrinkRequest) Validate() error {
	return dara.Validate(s)
}

type iUploadDocumentAsyncResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetJobId(v string) *UploadDocumentAsyncResponseBody
	GetJobId() *string
	SetMessage(v string) *UploadDocumentAsyncResponseBody
	GetMessage() *string
	SetRequestId(v string) *UploadDocumentAsyncResponseBody
	GetRequestId() *string
	SetStatus(v string) *UploadDocumentAsyncResponseBody
	GetStatus() *string
}

type UploadDocumentAsyncResponseBody struct {
	// The job ID.
	//
	// example:
	//
	// 231460f8-75dc-405e-a669-0c5204887e91
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// The returned message.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// API execution status, with the following values:
	//
	// - **success**: Execution succeeded.
	//
	// - **fail**: Execution failed.
	//
	// example:
	//
	// success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s UploadDocumentAsyncResponseBody) String() string {
	return dara.Prettify(s)
}

func (s UploadDocumentAsyncResponseBody) GoString() string {
	return s.String()
}

func (s *UploadDocumentAsyncResponseBody) GetJobId() *string {
	return s.JobId
}

func (s *UploadDocumentAsyncResponseBody) GetMessage() *string {
	return s.Message
}

func (s *UploadDocumentAsyncResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *UploadDocumentAsyncResponseBody) GetStatus() *string {
	return s.Status
}

func (s *UploadDocumentAsyncResponseBody) SetJobId(v string) *UploadDocumentAsyncResponseBody {
	s.JobId = &v
	return s
}

func (s *UploadDocumentAsyncResponseBody) SetMessage(v string) *UploadDocumentAsyncResponseBody {
	s.Message = &v
	return s
}

func (s *UploadDocumentAsyncResponseBody) SetRequestId(v string) *UploadDocumentAsyncResponseBody {
	s.RequestId = &v
	return s
}

func (s *UploadDocumentAsyncResponseBody) SetStatus(v string) *UploadDocumentAsyncResponseBody {
	s.Status = &v
	return s
}

func (s *UploadDocumentAsyncResponseBody) Validate() error {
	return dara.Validate(s)
}

type iUploadDocumentAsyncResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *UploadDocumentAsyncResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *UploadDocumentAsyncResponse
	GetStatusCode() *int32
	SetBody(v *UploadDocumentAsyncResponseBody) *UploadDocumentAsyncResponse
	GetBody() *UploadDocumentAsyncResponseBody
}

type UploadDocumentAsyncResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UploadDocumentAsyncResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UploadDocumentAsyncResponse) String() string {
	return dara.Prettify(s)
}

func (s UploadDocumentAsyncResponse) GoString() string {
	return s.String()
}

func (s *UploadDocumentAsyncResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *UploadDocumentAsyncResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *UploadDocumentAsyncResponse) GetBody() *UploadDocumentAsyncResponseBody {
	return s.Body
}

func (s *UploadDocumentAsyncResponse) SetHeaders(v map[string]*string) *UploadDocumentAsyncResponse {
	s.Headers = v
	return s
}

func (s *UploadDocumentAsyncResponse) SetStatusCode(v int32) *UploadDocumentAsyncResponse {
	s.StatusCode = &v
	return s
}

func (s *UploadDocumentAsyncResponse) SetBody(v *UploadDocumentAsyncResponseBody) *UploadDocumentAsyncResponse {
	s.Body = v
	return s
}

func (s *UploadDocumentAsyncResponse) Validate() error {
	return dara.Validate(s)
}

type iUpsertChunksRequest interface {
	dara.Model
	String() string
	GoString() string
	SetCollection(v string) *UpsertChunksRequest
	GetCollection() *string
	SetDBInstanceId(v string) *UpsertChunksRequest
	GetDBInstanceId() *string
	SetFileName(v string) *UpsertChunksRequest
	GetFileName() *string
	SetNamespace(v string) *UpsertChunksRequest
	GetNamespace() *string
	SetNamespacePassword(v string) *UpsertChunksRequest
	GetNamespacePassword() *string
	SetOwnerId(v int64) *UpsertChunksRequest
	GetOwnerId() *int64
	SetRegionId(v string) *UpsertChunksRequest
	GetRegionId() *string
	SetTextChunks(v []*UpsertChunksRequestTextChunks) *UpsertChunksRequest
	GetTextChunks() []*UpsertChunksRequestTextChunks
}

type UpsertChunksRequest struct {
	// Document collection name.
	//
	// > Created by the [CreateDocumentCollection](https://help.aliyun.com/document_detail/2618448.html) API. You can use the [ListDocumentCollections](https://help.aliyun.com/document_detail/2618452.html) API to view the already created document collections.
	//
	// This parameter is required.
	//
	// example:
	//
	// document
	Collection *string `json:"Collection,omitempty" xml:"Collection,omitempty"`
	// Instance ID.
	//
	// > You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) API to view details of all AnalyticDB PostgreSQL instances in the target region, including the instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// File name.
	//
	// > If a file name is specified and not empty, it will overwrite the data for this file name; if empty, the chunks data will be appended directly to the document collection.
	//
	// example:
	//
	// mydoc.txt
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// Namespace, default is public.
	//
	// > You can create it using the [CreateNamespace](https://help.aliyun.com/document_detail/2401495.html) API and view the list using the [ListNamespaces](https://help.aliyun.com/document_detail/2401502.html) API.
	//
	// example:
	//
	// mynamespace
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// Password corresponding to the namespace.
	//
	// > This value is specified by the [CreateNamespace](https://help.aliyun.com/document_detail/2401495.html) API.
	//
	// This parameter is required.
	//
	// example:
	//
	// testpassword
	NamespacePassword *string `json:"NamespacePassword,omitempty" xml:"NamespacePassword,omitempty"`
	OwnerId           *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// Region ID where the instance is located.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// List of split documents.
	TextChunks []*UpsertChunksRequestTextChunks `json:"TextChunks,omitempty" xml:"TextChunks,omitempty" type:"Repeated"`
}

func (s UpsertChunksRequest) String() string {
	return dara.Prettify(s)
}

func (s UpsertChunksRequest) GoString() string {
	return s.String()
}

func (s *UpsertChunksRequest) GetCollection() *string {
	return s.Collection
}

func (s *UpsertChunksRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *UpsertChunksRequest) GetFileName() *string {
	return s.FileName
}

func (s *UpsertChunksRequest) GetNamespace() *string {
	return s.Namespace
}

func (s *UpsertChunksRequest) GetNamespacePassword() *string {
	return s.NamespacePassword
}

func (s *UpsertChunksRequest) GetOwnerId() *int64 {
	return s.OwnerId
}

func (s *UpsertChunksRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *UpsertChunksRequest) GetTextChunks() []*UpsertChunksRequestTextChunks {
	return s.TextChunks
}

func (s *UpsertChunksRequest) SetCollection(v string) *UpsertChunksRequest {
	s.Collection = &v
	return s
}

func (s *UpsertChunksRequest) SetDBInstanceId(v string) *UpsertChunksRequest {
	s.DBInstanceId = &v
	return s
}

func (s *UpsertChunksRequest) SetFileName(v string) *UpsertChunksRequest {
	s.FileName = &v
	return s
}

func (s *UpsertChunksRequest) SetNamespace(v string) *UpsertChunksRequest {
	s.Namespace = &v
	return s
}

func (s *UpsertChunksRequest) SetNamespacePassword(v string) *UpsertChunksRequest {
	s.NamespacePassword = &v
	return s
}

func (s *UpsertChunksRequest) SetOwnerId(v int64) *UpsertChunksRequest {
	s.OwnerId = &v
	return s
}

func (s *UpsertChunksRequest) SetRegionId(v string) *UpsertChunksRequest {
	s.RegionId = &v
	return s
}

func (s *UpsertChunksRequest) SetTextChunks(v []*UpsertChunksRequestTextChunks) *UpsertChunksRequest {
	s.TextChunks = v
	return s
}

func (s *UpsertChunksRequest) Validate() error {
	return dara.Validate(s)
}

type UpsertChunksRequestTextChunks struct {
	// Document content.
	//
	// This parameter is required.
	//
	// example:
	//
	// Cloud-native data warehouse AnalyticDB PostgreSQL Edition provides a simple, fast, and cost-effective PB-level cloud data warehouse solution.
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// Metadata.
	//
	// example:
	//
	// {"title":"test"}
	Metadata map[string]interface{} `json:"Metadata,omitempty" xml:"Metadata,omitempty"`
}

func (s UpsertChunksRequestTextChunks) String() string {
	return dara.Prettify(s)
}

func (s UpsertChunksRequestTextChunks) GoString() string {
	return s.String()
}

func (s *UpsertChunksRequestTextChunks) GetContent() *string {
	return s.Content
}

func (s *UpsertChunksRequestTextChunks) GetMetadata() map[string]interface{} {
	return s.Metadata
}

func (s *UpsertChunksRequestTextChunks) SetContent(v string) *UpsertChunksRequestTextChunks {
	s.Content = &v
	return s
}

func (s *UpsertChunksRequestTextChunks) SetMetadata(v map[string]interface{}) *UpsertChunksRequestTextChunks {
	s.Metadata = v
	return s
}

func (s *UpsertChunksRequestTextChunks) Validate() error {
	return dara.Validate(s)
}

type iUpsertChunksShrinkRequest interface {
	dara.Model
	String() string
	GoString() string
	SetCollection(v string) *UpsertChunksShrinkRequest
	GetCollection() *string
	SetDBInstanceId(v string) *UpsertChunksShrinkRequest
	GetDBInstanceId() *string
	SetFileName(v string) *UpsertChunksShrinkRequest
	GetFileName() *string
	SetNamespace(v string) *UpsertChunksShrinkRequest
	GetNamespace() *string
	SetNamespacePassword(v string) *UpsertChunksShrinkRequest
	GetNamespacePassword() *string
	SetOwnerId(v int64) *UpsertChunksShrinkRequest
	GetOwnerId() *int64
	SetRegionId(v string) *UpsertChunksShrinkRequest
	GetRegionId() *string
	SetTextChunksShrink(v string) *UpsertChunksShrinkRequest
	GetTextChunksShrink() *string
}

type UpsertChunksShrinkRequest struct {
	// Document collection name.
	//
	// > Created by the [CreateDocumentCollection](https://help.aliyun.com/document_detail/2618448.html) API. You can use the [ListDocumentCollections](https://help.aliyun.com/document_detail/2618452.html) API to view the already created document collections.
	//
	// This parameter is required.
	//
	// example:
	//
	// document
	Collection *string `json:"Collection,omitempty" xml:"Collection,omitempty"`
	// Instance ID.
	//
	// > You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) API to view details of all AnalyticDB PostgreSQL instances in the target region, including the instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// File name.
	//
	// > If a file name is specified and not empty, it will overwrite the data for this file name; if empty, the chunks data will be appended directly to the document collection.
	//
	// example:
	//
	// mydoc.txt
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// Namespace, default is public.
	//
	// > You can create it using the [CreateNamespace](https://help.aliyun.com/document_detail/2401495.html) API and view the list using the [ListNamespaces](https://help.aliyun.com/document_detail/2401502.html) API.
	//
	// example:
	//
	// mynamespace
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// Password corresponding to the namespace.
	//
	// > This value is specified by the [CreateNamespace](https://help.aliyun.com/document_detail/2401495.html) API.
	//
	// This parameter is required.
	//
	// example:
	//
	// testpassword
	NamespacePassword *string `json:"NamespacePassword,omitempty" xml:"NamespacePassword,omitempty"`
	OwnerId           *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// Region ID where the instance is located.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// List of split documents.
	TextChunksShrink *string `json:"TextChunks,omitempty" xml:"TextChunks,omitempty"`
}

func (s UpsertChunksShrinkRequest) String() string {
	return dara.Prettify(s)
}

func (s UpsertChunksShrinkRequest) GoString() string {
	return s.String()
}

func (s *UpsertChunksShrinkRequest) GetCollection() *string {
	return s.Collection
}

func (s *UpsertChunksShrinkRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *UpsertChunksShrinkRequest) GetFileName() *string {
	return s.FileName
}

func (s *UpsertChunksShrinkRequest) GetNamespace() *string {
	return s.Namespace
}

func (s *UpsertChunksShrinkRequest) GetNamespacePassword() *string {
	return s.NamespacePassword
}

func (s *UpsertChunksShrinkRequest) GetOwnerId() *int64 {
	return s.OwnerId
}

func (s *UpsertChunksShrinkRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *UpsertChunksShrinkRequest) GetTextChunksShrink() *string {
	return s.TextChunksShrink
}

func (s *UpsertChunksShrinkRequest) SetCollection(v string) *UpsertChunksShrinkRequest {
	s.Collection = &v
	return s
}

func (s *UpsertChunksShrinkRequest) SetDBInstanceId(v string) *UpsertChunksShrinkRequest {
	s.DBInstanceId = &v
	return s
}

func (s *UpsertChunksShrinkRequest) SetFileName(v string) *UpsertChunksShrinkRequest {
	s.FileName = &v
	return s
}

func (s *UpsertChunksShrinkRequest) SetNamespace(v string) *UpsertChunksShrinkRequest {
	s.Namespace = &v
	return s
}

func (s *UpsertChunksShrinkRequest) SetNamespacePassword(v string) *UpsertChunksShrinkRequest {
	s.NamespacePassword = &v
	return s
}

func (s *UpsertChunksShrinkRequest) SetOwnerId(v int64) *UpsertChunksShrinkRequest {
	s.OwnerId = &v
	return s
}

func (s *UpsertChunksShrinkRequest) SetRegionId(v string) *UpsertChunksShrinkRequest {
	s.RegionId = &v
	return s
}

func (s *UpsertChunksShrinkRequest) SetTextChunksShrink(v string) *UpsertChunksShrinkRequest {
	s.TextChunksShrink = &v
	return s
}

func (s *UpsertChunksShrinkRequest) Validate() error {
	return dara.Validate(s)
}

type iUpsertChunksResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetEmbeddingTokens(v string) *UpsertChunksResponseBody
	GetEmbeddingTokens() *string
	SetMessage(v string) *UpsertChunksResponseBody
	GetMessage() *string
	SetRequestId(v string) *UpsertChunksResponseBody
	GetRequestId() *string
	SetStatus(v string) *UpsertChunksResponseBody
	GetStatus() *string
}

type UpsertChunksResponseBody struct {
	// Number of tokens used during vectorization.
	//
	// > A token refers to the smallest unit into which the input text is divided. A token can be a word, a phrase, a punctuation mark, a character, etc.
	//
	// example:
	//
	// 100
	EmbeddingTokens *string `json:"EmbeddingTokens,omitempty" xml:"EmbeddingTokens,omitempty"`
	// Return message.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// API execution status, with the following values:
	//
	// - **success**: Execution succeeded.
	//
	// - **fail**: Execution failed.
	//
	// example:
	//
	// success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s UpsertChunksResponseBody) String() string {
	return dara.Prettify(s)
}

func (s UpsertChunksResponseBody) GoString() string {
	return s.String()
}

func (s *UpsertChunksResponseBody) GetEmbeddingTokens() *string {
	return s.EmbeddingTokens
}

func (s *UpsertChunksResponseBody) GetMessage() *string {
	return s.Message
}

func (s *UpsertChunksResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *UpsertChunksResponseBody) GetStatus() *string {
	return s.Status
}

func (s *UpsertChunksResponseBody) SetEmbeddingTokens(v string) *UpsertChunksResponseBody {
	s.EmbeddingTokens = &v
	return s
}

func (s *UpsertChunksResponseBody) SetMessage(v string) *UpsertChunksResponseBody {
	s.Message = &v
	return s
}

func (s *UpsertChunksResponseBody) SetRequestId(v string) *UpsertChunksResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpsertChunksResponseBody) SetStatus(v string) *UpsertChunksResponseBody {
	s.Status = &v
	return s
}

func (s *UpsertChunksResponseBody) Validate() error {
	return dara.Validate(s)
}

type iUpsertChunksResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *UpsertChunksResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *UpsertChunksResponse
	GetStatusCode() *int32
	SetBody(v *UpsertChunksResponseBody) *UpsertChunksResponse
	GetBody() *UpsertChunksResponseBody
}

type UpsertChunksResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpsertChunksResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpsertChunksResponse) String() string {
	return dara.Prettify(s)
}

func (s UpsertChunksResponse) GoString() string {
	return s.String()
}

func (s *UpsertChunksResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *UpsertChunksResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *UpsertChunksResponse) GetBody() *UpsertChunksResponseBody {
	return s.Body
}

func (s *UpsertChunksResponse) SetHeaders(v map[string]*string) *UpsertChunksResponse {
	s.Headers = v
	return s
}

func (s *UpsertChunksResponse) SetStatusCode(v int32) *UpsertChunksResponse {
	s.StatusCode = &v
	return s
}

func (s *UpsertChunksResponse) SetBody(v *UpsertChunksResponseBody) *UpsertChunksResponse {
	s.Body = v
	return s
}

func (s *UpsertChunksResponse) Validate() error {
	return dara.Validate(s)
}

type iUpsertCollectionDataRequest interface {
	dara.Model
	String() string
	GoString() string
	SetCollection(v string) *UpsertCollectionDataRequest
	GetCollection() *string
	SetDBInstanceId(v string) *UpsertCollectionDataRequest
	GetDBInstanceId() *string
	SetNamespace(v string) *UpsertCollectionDataRequest
	GetNamespace() *string
	SetNamespacePassword(v string) *UpsertCollectionDataRequest
	GetNamespacePassword() *string
	SetOwnerId(v int64) *UpsertCollectionDataRequest
	GetOwnerId() *int64
	SetRegionId(v string) *UpsertCollectionDataRequest
	GetRegionId() *string
	SetRows(v []*UpsertCollectionDataRequestRows) *UpsertCollectionDataRequest
	GetRows() []*UpsertCollectionDataRequestRows
	SetWorkspaceId(v string) *UpsertCollectionDataRequest
	GetWorkspaceId() *string
}

type UpsertCollectionDataRequest struct {
	// The name of the collection.
	//
	// This parameter is required.
	//
	// example:
	//
	// document
	Collection *string `json:"Collection,omitempty" xml:"Collection,omitempty"`
	// The instance ID.
	//
	// > You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The name of the namespace. Default value: public.
	//
	// >  You can call the [CreateNamespace](https://help.aliyun.com/document_detail/2401495.html) operation to create a namespace and call the [ListNamespaces](https://help.aliyun.com/document_detail/2401502.html) operation to query a list of namespaces.
	//
	// example:
	//
	// mynamespace
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// The password of the namespace.
	//
	// This parameter is required.
	//
	// example:
	//
	// testpassword
	NamespacePassword *string `json:"NamespacePassword,omitempty" xml:"NamespacePassword,omitempty"`
	OwnerId           *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The region ID of the instance.
	//
	// >  You can call the [DescribeRegions](https://help.aliyun.com/document_detail/86912.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string                            `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Rows     []*UpsertCollectionDataRequestRows `json:"Rows,omitempty" xml:"Rows,omitempty" type:"Repeated"`
	// The ID of the workspace that consists of multiple AnalyticDB for PostgreSQL instances. You must specify one of the WorkspaceId and DBInstanceId parameters. If you specify both parameters, the WorkspaceId parameter takes effect.
	//
	// example:
	//
	// gp-ws-*****
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s UpsertCollectionDataRequest) String() string {
	return dara.Prettify(s)
}

func (s UpsertCollectionDataRequest) GoString() string {
	return s.String()
}

func (s *UpsertCollectionDataRequest) GetCollection() *string {
	return s.Collection
}

func (s *UpsertCollectionDataRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *UpsertCollectionDataRequest) GetNamespace() *string {
	return s.Namespace
}

func (s *UpsertCollectionDataRequest) GetNamespacePassword() *string {
	return s.NamespacePassword
}

func (s *UpsertCollectionDataRequest) GetOwnerId() *int64 {
	return s.OwnerId
}

func (s *UpsertCollectionDataRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *UpsertCollectionDataRequest) GetRows() []*UpsertCollectionDataRequestRows {
	return s.Rows
}

func (s *UpsertCollectionDataRequest) GetWorkspaceId() *string {
	return s.WorkspaceId
}

func (s *UpsertCollectionDataRequest) SetCollection(v string) *UpsertCollectionDataRequest {
	s.Collection = &v
	return s
}

func (s *UpsertCollectionDataRequest) SetDBInstanceId(v string) *UpsertCollectionDataRequest {
	s.DBInstanceId = &v
	return s
}

func (s *UpsertCollectionDataRequest) SetNamespace(v string) *UpsertCollectionDataRequest {
	s.Namespace = &v
	return s
}

func (s *UpsertCollectionDataRequest) SetNamespacePassword(v string) *UpsertCollectionDataRequest {
	s.NamespacePassword = &v
	return s
}

func (s *UpsertCollectionDataRequest) SetOwnerId(v int64) *UpsertCollectionDataRequest {
	s.OwnerId = &v
	return s
}

func (s *UpsertCollectionDataRequest) SetRegionId(v string) *UpsertCollectionDataRequest {
	s.RegionId = &v
	return s
}

func (s *UpsertCollectionDataRequest) SetRows(v []*UpsertCollectionDataRequestRows) *UpsertCollectionDataRequest {
	s.Rows = v
	return s
}

func (s *UpsertCollectionDataRequest) SetWorkspaceId(v string) *UpsertCollectionDataRequest {
	s.WorkspaceId = &v
	return s
}

func (s *UpsertCollectionDataRequest) Validate() error {
	return dara.Validate(s)
}

type UpsertCollectionDataRequestRows struct {
	Id           *string                                      `json:"Id,omitempty" xml:"Id,omitempty"`
	Metadata     map[string]*string                           `json:"Metadata,omitempty" xml:"Metadata,omitempty"`
	SparseVector *UpsertCollectionDataRequestRowsSparseVector `json:"SparseVector,omitempty" xml:"SparseVector,omitempty" type:"Struct"`
	// This parameter is required.
	Vector []*float64 `json:"Vector,omitempty" xml:"Vector,omitempty" type:"Repeated"`
}

func (s UpsertCollectionDataRequestRows) String() string {
	return dara.Prettify(s)
}

func (s UpsertCollectionDataRequestRows) GoString() string {
	return s.String()
}

func (s *UpsertCollectionDataRequestRows) GetId() *string {
	return s.Id
}

func (s *UpsertCollectionDataRequestRows) GetMetadata() map[string]*string {
	return s.Metadata
}

func (s *UpsertCollectionDataRequestRows) GetSparseVector() *UpsertCollectionDataRequestRowsSparseVector {
	return s.SparseVector
}

func (s *UpsertCollectionDataRequestRows) GetVector() []*float64 {
	return s.Vector
}

func (s *UpsertCollectionDataRequestRows) SetId(v string) *UpsertCollectionDataRequestRows {
	s.Id = &v
	return s
}

func (s *UpsertCollectionDataRequestRows) SetMetadata(v map[string]*string) *UpsertCollectionDataRequestRows {
	s.Metadata = v
	return s
}

func (s *UpsertCollectionDataRequestRows) SetSparseVector(v *UpsertCollectionDataRequestRowsSparseVector) *UpsertCollectionDataRequestRows {
	s.SparseVector = v
	return s
}

func (s *UpsertCollectionDataRequestRows) SetVector(v []*float64) *UpsertCollectionDataRequestRows {
	s.Vector = v
	return s
}

func (s *UpsertCollectionDataRequestRows) Validate() error {
	return dara.Validate(s)
}

type UpsertCollectionDataRequestRowsSparseVector struct {
	Indices []*int64   `json:"Indices,omitempty" xml:"Indices,omitempty" type:"Repeated"`
	Values  []*float64 `json:"Values,omitempty" xml:"Values,omitempty" type:"Repeated"`
}

func (s UpsertCollectionDataRequestRowsSparseVector) String() string {
	return dara.Prettify(s)
}

func (s UpsertCollectionDataRequestRowsSparseVector) GoString() string {
	return s.String()
}

func (s *UpsertCollectionDataRequestRowsSparseVector) GetIndices() []*int64 {
	return s.Indices
}

func (s *UpsertCollectionDataRequestRowsSparseVector) GetValues() []*float64 {
	return s.Values
}

func (s *UpsertCollectionDataRequestRowsSparseVector) SetIndices(v []*int64) *UpsertCollectionDataRequestRowsSparseVector {
	s.Indices = v
	return s
}

func (s *UpsertCollectionDataRequestRowsSparseVector) SetValues(v []*float64) *UpsertCollectionDataRequestRowsSparseVector {
	s.Values = v
	return s
}

func (s *UpsertCollectionDataRequestRowsSparseVector) Validate() error {
	return dara.Validate(s)
}

type iUpsertCollectionDataShrinkRequest interface {
	dara.Model
	String() string
	GoString() string
	SetCollection(v string) *UpsertCollectionDataShrinkRequest
	GetCollection() *string
	SetDBInstanceId(v string) *UpsertCollectionDataShrinkRequest
	GetDBInstanceId() *string
	SetNamespace(v string) *UpsertCollectionDataShrinkRequest
	GetNamespace() *string
	SetNamespacePassword(v string) *UpsertCollectionDataShrinkRequest
	GetNamespacePassword() *string
	SetOwnerId(v int64) *UpsertCollectionDataShrinkRequest
	GetOwnerId() *int64
	SetRegionId(v string) *UpsertCollectionDataShrinkRequest
	GetRegionId() *string
	SetRowsShrink(v string) *UpsertCollectionDataShrinkRequest
	GetRowsShrink() *string
	SetWorkspaceId(v string) *UpsertCollectionDataShrinkRequest
	GetWorkspaceId() *string
}

type UpsertCollectionDataShrinkRequest struct {
	// The name of the collection.
	//
	// This parameter is required.
	//
	// example:
	//
	// document
	Collection *string `json:"Collection,omitempty" xml:"Collection,omitempty"`
	// The instance ID.
	//
	// > You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The name of the namespace. Default value: public.
	//
	// >  You can call the [CreateNamespace](https://help.aliyun.com/document_detail/2401495.html) operation to create a namespace and call the [ListNamespaces](https://help.aliyun.com/document_detail/2401502.html) operation to query a list of namespaces.
	//
	// example:
	//
	// mynamespace
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// The password of the namespace.
	//
	// This parameter is required.
	//
	// example:
	//
	// testpassword
	NamespacePassword *string `json:"NamespacePassword,omitempty" xml:"NamespacePassword,omitempty"`
	OwnerId           *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The region ID of the instance.
	//
	// >  You can call the [DescribeRegions](https://help.aliyun.com/document_detail/86912.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId   *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	RowsShrink *string `json:"Rows,omitempty" xml:"Rows,omitempty"`
	// The ID of the workspace that consists of multiple AnalyticDB for PostgreSQL instances. You must specify one of the WorkspaceId and DBInstanceId parameters. If you specify both parameters, the WorkspaceId parameter takes effect.
	//
	// example:
	//
	// gp-ws-*****
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s UpsertCollectionDataShrinkRequest) String() string {
	return dara.Prettify(s)
}

func (s UpsertCollectionDataShrinkRequest) GoString() string {
	return s.String()
}

func (s *UpsertCollectionDataShrinkRequest) GetCollection() *string {
	return s.Collection
}

func (s *UpsertCollectionDataShrinkRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *UpsertCollectionDataShrinkRequest) GetNamespace() *string {
	return s.Namespace
}

func (s *UpsertCollectionDataShrinkRequest) GetNamespacePassword() *string {
	return s.NamespacePassword
}

func (s *UpsertCollectionDataShrinkRequest) GetOwnerId() *int64 {
	return s.OwnerId
}

func (s *UpsertCollectionDataShrinkRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *UpsertCollectionDataShrinkRequest) GetRowsShrink() *string {
	return s.RowsShrink
}

func (s *UpsertCollectionDataShrinkRequest) GetWorkspaceId() *string {
	return s.WorkspaceId
}

func (s *UpsertCollectionDataShrinkRequest) SetCollection(v string) *UpsertCollectionDataShrinkRequest {
	s.Collection = &v
	return s
}

func (s *UpsertCollectionDataShrinkRequest) SetDBInstanceId(v string) *UpsertCollectionDataShrinkRequest {
	s.DBInstanceId = &v
	return s
}

func (s *UpsertCollectionDataShrinkRequest) SetNamespace(v string) *UpsertCollectionDataShrinkRequest {
	s.Namespace = &v
	return s
}

func (s *UpsertCollectionDataShrinkRequest) SetNamespacePassword(v string) *UpsertCollectionDataShrinkRequest {
	s.NamespacePassword = &v
	return s
}

func (s *UpsertCollectionDataShrinkRequest) SetOwnerId(v int64) *UpsertCollectionDataShrinkRequest {
	s.OwnerId = &v
	return s
}

func (s *UpsertCollectionDataShrinkRequest) SetRegionId(v string) *UpsertCollectionDataShrinkRequest {
	s.RegionId = &v
	return s
}

func (s *UpsertCollectionDataShrinkRequest) SetRowsShrink(v string) *UpsertCollectionDataShrinkRequest {
	s.RowsShrink = &v
	return s
}

func (s *UpsertCollectionDataShrinkRequest) SetWorkspaceId(v string) *UpsertCollectionDataShrinkRequest {
	s.WorkspaceId = &v
	return s
}

func (s *UpsertCollectionDataShrinkRequest) Validate() error {
	return dara.Validate(s)
}

type iUpsertCollectionDataResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetMessage(v string) *UpsertCollectionDataResponseBody
	GetMessage() *string
	SetRequestId(v string) *UpsertCollectionDataResponseBody
	GetRequestId() *string
	SetStatus(v string) *UpsertCollectionDataResponseBody
	GetStatus() *string
}

type UpsertCollectionDataResponseBody struct {
	// The returned message.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **success**
	//
	// 	- **fail**
	//
	// example:
	//
	// success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s UpsertCollectionDataResponseBody) String() string {
	return dara.Prettify(s)
}

func (s UpsertCollectionDataResponseBody) GoString() string {
	return s.String()
}

func (s *UpsertCollectionDataResponseBody) GetMessage() *string {
	return s.Message
}

func (s *UpsertCollectionDataResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *UpsertCollectionDataResponseBody) GetStatus() *string {
	return s.Status
}

func (s *UpsertCollectionDataResponseBody) SetMessage(v string) *UpsertCollectionDataResponseBody {
	s.Message = &v
	return s
}

func (s *UpsertCollectionDataResponseBody) SetRequestId(v string) *UpsertCollectionDataResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpsertCollectionDataResponseBody) SetStatus(v string) *UpsertCollectionDataResponseBody {
	s.Status = &v
	return s
}

func (s *UpsertCollectionDataResponseBody) Validate() error {
	return dara.Validate(s)
}

type iUpsertCollectionDataResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *UpsertCollectionDataResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *UpsertCollectionDataResponse
	GetStatusCode() *int32
	SetBody(v *UpsertCollectionDataResponseBody) *UpsertCollectionDataResponse
	GetBody() *UpsertCollectionDataResponseBody
}

type UpsertCollectionDataResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpsertCollectionDataResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpsertCollectionDataResponse) String() string {
	return dara.Prettify(s)
}

func (s UpsertCollectionDataResponse) GoString() string {
	return s.String()
}

func (s *UpsertCollectionDataResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *UpsertCollectionDataResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *UpsertCollectionDataResponse) GetBody() *UpsertCollectionDataResponseBody {
	return s.Body
}

func (s *UpsertCollectionDataResponse) SetHeaders(v map[string]*string) *UpsertCollectionDataResponse {
	s.Headers = v
	return s
}

func (s *UpsertCollectionDataResponse) SetStatusCode(v int32) *UpsertCollectionDataResponse {
	s.StatusCode = &v
	return s
}

func (s *UpsertCollectionDataResponse) SetBody(v *UpsertCollectionDataResponseBody) *UpsertCollectionDataResponse {
	s.Body = v
	return s
}

func (s *UpsertCollectionDataResponse) Validate() error {
	return dara.Validate(s)
}

type iUpsertCollectionDataAsyncRequest interface {
	dara.Model
	String() string
	GoString() string
	SetCollection(v string) *UpsertCollectionDataAsyncRequest
	GetCollection() *string
	SetDBInstanceId(v string) *UpsertCollectionDataAsyncRequest
	GetDBInstanceId() *string
	SetFileUrl(v string) *UpsertCollectionDataAsyncRequest
	GetFileUrl() *string
	SetNamespace(v string) *UpsertCollectionDataAsyncRequest
	GetNamespace() *string
	SetNamespacePassword(v string) *UpsertCollectionDataAsyncRequest
	GetNamespacePassword() *string
	SetOwnerId(v int64) *UpsertCollectionDataAsyncRequest
	GetOwnerId() *int64
	SetRegionId(v string) *UpsertCollectionDataAsyncRequest
	GetRegionId() *string
	SetWorkspaceId(v string) *UpsertCollectionDataAsyncRequest
	GetWorkspaceId() *string
}

type UpsertCollectionDataAsyncRequest struct {
	// The name of the collection.
	//
	// >  You can call the [ListCollections](https://help.aliyun.com/document_detail/2401503.html) operation to query a list of collections.
	//
	// This parameter is required.
	//
	// example:
	//
	// document
	Collection *string `json:"Collection,omitempty" xml:"Collection,omitempty"`
	// The instance ID.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The Internet-accessible vector data file URL.
	//
	// >
	//
	// 	- The file content must be in the JSONL format. Each line consists of a list of JSON data, which specifies a set of vector data.
	//
	// 	- Data format of each line: `{String Id; Map<String, Object> Metadata; List<Double> Vector}`. Example: `{"Id":"myid", "Metadata": {"my_meta_key": "my_meta_value"}, "Vector": [1.234, -0.123]}`.
	//
	// 	- We recommend that you use SDKs to call this operation. SDKs encapsulate the UpsertCollectionDataAsyncAdvance method to upload on-premises files as data sources.
	//
	// This parameter is required.
	//
	// example:
	//
	// https://xx/vectors.jsonl
	FileUrl *string `json:"FileUrl,omitempty" xml:"FileUrl,omitempty"`
	// The name of the namespace. Default value: public.
	//
	// >  You can call the CreateNamespace operation to create a namespace and call the ListNamespaces operation to query a list of namespaces.
	//
	// example:
	//
	// mynamespace
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// The password of the namespace.
	//
	// >  The value of this parameter is specified when you call the CreateNamespace operation.
	//
	// This parameter is required.
	//
	// example:
	//
	// testpassword
	NamespacePassword *string `json:"NamespacePassword,omitempty" xml:"NamespacePassword,omitempty"`
	OwnerId           *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The region ID of the instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the Workspace composed of multiple database instances. This parameter and the DBInstanceId parameter cannot both be empty. When both are specified, this parameter takes precedence.
	//
	// example:
	//
	// gp-ws-*****
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s UpsertCollectionDataAsyncRequest) String() string {
	return dara.Prettify(s)
}

func (s UpsertCollectionDataAsyncRequest) GoString() string {
	return s.String()
}

func (s *UpsertCollectionDataAsyncRequest) GetCollection() *string {
	return s.Collection
}

func (s *UpsertCollectionDataAsyncRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *UpsertCollectionDataAsyncRequest) GetFileUrl() *string {
	return s.FileUrl
}

func (s *UpsertCollectionDataAsyncRequest) GetNamespace() *string {
	return s.Namespace
}

func (s *UpsertCollectionDataAsyncRequest) GetNamespacePassword() *string {
	return s.NamespacePassword
}

func (s *UpsertCollectionDataAsyncRequest) GetOwnerId() *int64 {
	return s.OwnerId
}

func (s *UpsertCollectionDataAsyncRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *UpsertCollectionDataAsyncRequest) GetWorkspaceId() *string {
	return s.WorkspaceId
}

func (s *UpsertCollectionDataAsyncRequest) SetCollection(v string) *UpsertCollectionDataAsyncRequest {
	s.Collection = &v
	return s
}

func (s *UpsertCollectionDataAsyncRequest) SetDBInstanceId(v string) *UpsertCollectionDataAsyncRequest {
	s.DBInstanceId = &v
	return s
}

func (s *UpsertCollectionDataAsyncRequest) SetFileUrl(v string) *UpsertCollectionDataAsyncRequest {
	s.FileUrl = &v
	return s
}

func (s *UpsertCollectionDataAsyncRequest) SetNamespace(v string) *UpsertCollectionDataAsyncRequest {
	s.Namespace = &v
	return s
}

func (s *UpsertCollectionDataAsyncRequest) SetNamespacePassword(v string) *UpsertCollectionDataAsyncRequest {
	s.NamespacePassword = &v
	return s
}

func (s *UpsertCollectionDataAsyncRequest) SetOwnerId(v int64) *UpsertCollectionDataAsyncRequest {
	s.OwnerId = &v
	return s
}

func (s *UpsertCollectionDataAsyncRequest) SetRegionId(v string) *UpsertCollectionDataAsyncRequest {
	s.RegionId = &v
	return s
}

func (s *UpsertCollectionDataAsyncRequest) SetWorkspaceId(v string) *UpsertCollectionDataAsyncRequest {
	s.WorkspaceId = &v
	return s
}

func (s *UpsertCollectionDataAsyncRequest) Validate() error {
	return dara.Validate(s)
}

type iUpsertCollectionDataAsyncAdvanceRequest interface {
	dara.Model
	String() string
	GoString() string
	SetCollection(v string) *UpsertCollectionDataAsyncAdvanceRequest
	GetCollection() *string
	SetDBInstanceId(v string) *UpsertCollectionDataAsyncAdvanceRequest
	GetDBInstanceId() *string
	SetFileUrlObject(v io.Reader) *UpsertCollectionDataAsyncAdvanceRequest
	GetFileUrlObject() io.Reader
	SetNamespace(v string) *UpsertCollectionDataAsyncAdvanceRequest
	GetNamespace() *string
	SetNamespacePassword(v string) *UpsertCollectionDataAsyncAdvanceRequest
	GetNamespacePassword() *string
	SetOwnerId(v int64) *UpsertCollectionDataAsyncAdvanceRequest
	GetOwnerId() *int64
	SetRegionId(v string) *UpsertCollectionDataAsyncAdvanceRequest
	GetRegionId() *string
	SetWorkspaceId(v string) *UpsertCollectionDataAsyncAdvanceRequest
	GetWorkspaceId() *string
}

type UpsertCollectionDataAsyncAdvanceRequest struct {
	// The name of the collection.
	//
	// >  You can call the [ListCollections](https://help.aliyun.com/document_detail/2401503.html) operation to query a list of collections.
	//
	// This parameter is required.
	//
	// example:
	//
	// document
	Collection *string `json:"Collection,omitempty" xml:"Collection,omitempty"`
	// The instance ID.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The Internet-accessible vector data file URL.
	//
	// >
	//
	// 	- The file content must be in the JSONL format. Each line consists of a list of JSON data, which specifies a set of vector data.
	//
	// 	- Data format of each line: `{String Id; Map<String, Object> Metadata; List<Double> Vector}`. Example: `{"Id":"myid", "Metadata": {"my_meta_key": "my_meta_value"}, "Vector": [1.234, -0.123]}`.
	//
	// 	- We recommend that you use SDKs to call this operation. SDKs encapsulate the UpsertCollectionDataAsyncAdvance method to upload on-premises files as data sources.
	//
	// This parameter is required.
	//
	// example:
	//
	// https://xx/vectors.jsonl
	FileUrlObject io.Reader `json:"FileUrl,omitempty" xml:"FileUrl,omitempty"`
	// The name of the namespace. Default value: public.
	//
	// >  You can call the CreateNamespace operation to create a namespace and call the ListNamespaces operation to query a list of namespaces.
	//
	// example:
	//
	// mynamespace
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// The password of the namespace.
	//
	// >  The value of this parameter is specified when you call the CreateNamespace operation.
	//
	// This parameter is required.
	//
	// example:
	//
	// testpassword
	NamespacePassword *string `json:"NamespacePassword,omitempty" xml:"NamespacePassword,omitempty"`
	OwnerId           *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The region ID of the instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the Workspace composed of multiple database instances. This parameter and the DBInstanceId parameter cannot both be empty. When both are specified, this parameter takes precedence.
	//
	// example:
	//
	// gp-ws-*****
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s UpsertCollectionDataAsyncAdvanceRequest) String() string {
	return dara.Prettify(s)
}

func (s UpsertCollectionDataAsyncAdvanceRequest) GoString() string {
	return s.String()
}

func (s *UpsertCollectionDataAsyncAdvanceRequest) GetCollection() *string {
	return s.Collection
}

func (s *UpsertCollectionDataAsyncAdvanceRequest) GetDBInstanceId() *string {
	return s.DBInstanceId
}

func (s *UpsertCollectionDataAsyncAdvanceRequest) GetFileUrlObject() io.Reader {
	return s.FileUrlObject
}

func (s *UpsertCollectionDataAsyncAdvanceRequest) GetNamespace() *string {
	return s.Namespace
}

func (s *UpsertCollectionDataAsyncAdvanceRequest) GetNamespacePassword() *string {
	return s.NamespacePassword
}

func (s *UpsertCollectionDataAsyncAdvanceRequest) GetOwnerId() *int64 {
	return s.OwnerId
}

func (s *UpsertCollectionDataAsyncAdvanceRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *UpsertCollectionDataAsyncAdvanceRequest) GetWorkspaceId() *string {
	return s.WorkspaceId
}

func (s *UpsertCollectionDataAsyncAdvanceRequest) SetCollection(v string) *UpsertCollectionDataAsyncAdvanceRequest {
	s.Collection = &v
	return s
}

func (s *UpsertCollectionDataAsyncAdvanceRequest) SetDBInstanceId(v string) *UpsertCollectionDataAsyncAdvanceRequest {
	s.DBInstanceId = &v
	return s
}

func (s *UpsertCollectionDataAsyncAdvanceRequest) SetFileUrlObject(v io.Reader) *UpsertCollectionDataAsyncAdvanceRequest {
	s.FileUrlObject = v
	return s
}

func (s *UpsertCollectionDataAsyncAdvanceRequest) SetNamespace(v string) *UpsertCollectionDataAsyncAdvanceRequest {
	s.Namespace = &v
	return s
}

func (s *UpsertCollectionDataAsyncAdvanceRequest) SetNamespacePassword(v string) *UpsertCollectionDataAsyncAdvanceRequest {
	s.NamespacePassword = &v
	return s
}

func (s *UpsertCollectionDataAsyncAdvanceRequest) SetOwnerId(v int64) *UpsertCollectionDataAsyncAdvanceRequest {
	s.OwnerId = &v
	return s
}

func (s *UpsertCollectionDataAsyncAdvanceRequest) SetRegionId(v string) *UpsertCollectionDataAsyncAdvanceRequest {
	s.RegionId = &v
	return s
}

func (s *UpsertCollectionDataAsyncAdvanceRequest) SetWorkspaceId(v string) *UpsertCollectionDataAsyncAdvanceRequest {
	s.WorkspaceId = &v
	return s
}

func (s *UpsertCollectionDataAsyncAdvanceRequest) Validate() error {
	return dara.Validate(s)
}

type iUpsertCollectionDataAsyncResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetJobId(v string) *UpsertCollectionDataAsyncResponseBody
	GetJobId() *string
	SetMessage(v string) *UpsertCollectionDataAsyncResponseBody
	GetMessage() *string
	SetRequestId(v string) *UpsertCollectionDataAsyncResponseBody
	GetRequestId() *string
	SetStatus(v string) *UpsertCollectionDataAsyncResponseBody
	GetStatus() *string
}

type UpsertCollectionDataAsyncResponseBody struct {
	// The job ID. It can be used to query the job status or cancel the job.
	//
	// example:
	//
	// 231460f8-75dc-405e-a669-0c5204887e91
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// The returned message.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The status of the operation. Valid values:
	//
	// 	- **success**
	//
	// 	- **fail**
	//
	// example:
	//
	// success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s UpsertCollectionDataAsyncResponseBody) String() string {
	return dara.Prettify(s)
}

func (s UpsertCollectionDataAsyncResponseBody) GoString() string {
	return s.String()
}

func (s *UpsertCollectionDataAsyncResponseBody) GetJobId() *string {
	return s.JobId
}

func (s *UpsertCollectionDataAsyncResponseBody) GetMessage() *string {
	return s.Message
}

func (s *UpsertCollectionDataAsyncResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *UpsertCollectionDataAsyncResponseBody) GetStatus() *string {
	return s.Status
}

func (s *UpsertCollectionDataAsyncResponseBody) SetJobId(v string) *UpsertCollectionDataAsyncResponseBody {
	s.JobId = &v
	return s
}

func (s *UpsertCollectionDataAsyncResponseBody) SetMessage(v string) *UpsertCollectionDataAsyncResponseBody {
	s.Message = &v
	return s
}

func (s *UpsertCollectionDataAsyncResponseBody) SetRequestId(v string) *UpsertCollectionDataAsyncResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpsertCollectionDataAsyncResponseBody) SetStatus(v string) *UpsertCollectionDataAsyncResponseBody {
	s.Status = &v
	return s
}

func (s *UpsertCollectionDataAsyncResponseBody) Validate() error {
	return dara.Validate(s)
}

type iUpsertCollectionDataAsyncResponse interface {
	dara.Model
	String() string
	GoString() string
	SetHeaders(v map[string]*string) *UpsertCollectionDataAsyncResponse
	GetHeaders() map[string]*string
	SetStatusCode(v int32) *UpsertCollectionDataAsyncResponse
	GetStatusCode() *int32
	SetBody(v *UpsertCollectionDataAsyncResponseBody) *UpsertCollectionDataAsyncResponse
	GetBody() *UpsertCollectionDataAsyncResponseBody
}

type UpsertCollectionDataAsyncResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpsertCollectionDataAsyncResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpsertCollectionDataAsyncResponse) String() string {
	return dara.Prettify(s)
}

func (s UpsertCollectionDataAsyncResponse) GoString() string {
	return s.String()
}

func (s *UpsertCollectionDataAsyncResponse) GetHeaders() map[string]*string {
	return s.Headers
}

func (s *UpsertCollectionDataAsyncResponse) GetStatusCode() *int32 {
	return s.StatusCode
}

func (s *UpsertCollectionDataAsyncResponse) GetBody() *UpsertCollectionDataAsyncResponseBody {
	return s.Body
}

func (s *UpsertCollectionDataAsyncResponse) SetHeaders(v map[string]*string) *UpsertCollectionDataAsyncResponse {
	s.Headers = v
	return s
}

func (s *UpsertCollectionDataAsyncResponse) SetStatusCode(v int32) *UpsertCollectionDataAsyncResponse {
	s.StatusCode = &v
	return s
}

func (s *UpsertCollectionDataAsyncResponse) SetBody(v *UpsertCollectionDataAsyncResponseBody) *UpsertCollectionDataAsyncResponse {
	s.Body = v
	return s
}

func (s *UpsertCollectionDataAsyncResponse) Validate() error {
	return dara.Validate(s)
}

type Client struct {
	openapi.Client
	DisableSDKError *bool
}

func NewClient(config *openapiutil.Config) (*Client, error) {
	client := new(Client)
	err := client.Init(config)
	return client, err
}

func (client *Client) Init(config *openapiutil.Config) (_err error) {
	_err = client.Client.Init(config)
	if _err != nil {
		return _err
	}
	client.EndpointRule = dara.String("regional")
	client.EndpointMap = map[string]*string{
		"cn-beijing":            dara.String("gpdb.aliyuncs.com"),
		"cn-hangzhou":           dara.String("gpdb.aliyuncs.com"),
		"cn-shanghai":           dara.String("gpdb.aliyuncs.com"),
		"cn-shenzhen":           dara.String("gpdb.aliyuncs.com"),
		"cn-hongkong":           dara.String("gpdb.aliyuncs.com"),
		"ap-southeast-1":        dara.String("gpdb.aliyuncs.com"),
		"us-west-1":             dara.String("gpdb.aliyuncs.com"),
		"us-east-1":             dara.String("gpdb.aliyuncs.com"),
		"cn-hangzhou-finance":   dara.String("gpdb.aliyuncs.com"),
		"cn-shanghai-finance-1": dara.String("gpdb.aliyuncs.com"),
		"cn-shenzhen-finance-1": dara.String("gpdb.aliyuncs.com"),
		"cn-qingdao":            dara.String("gpdb.aliyuncs.com"),
		"cn-north-2-gov-1":      dara.String("gpdb.aliyuncs.com"),
	}
	_err = client.CheckConfig(config)
	if _err != nil {
		return _err
	}
	client.Endpoint, _err = client.GetEndpoint(dara.String("gpdb"), client.RegionId, client.EndpointRule, client.Network, client.Suffix, client.EndpointMap, client.Endpoint)
	if _err != nil {
		return _err
	}

	return nil
}

func (client *Client) GetEndpoint(productId *string, regionId *string, endpointRule *string, network *string, suffix *string, endpointMap map[string]*string, endpoint *string) (_result *string, _err error) {
	if !dara.IsNil(endpoint) {
		_result = endpoint
		return _result, _err
	}

	if !dara.IsNil(endpointMap) && !dara.IsNil(endpointMap[dara.StringValue(regionId)]) {
		_result = endpointMap[dara.StringValue(regionId)]
		return _result, _err
	}

	_body, _err := openapiutil.GetEndpointRules(productId, regionId, endpointRule, network, suffix)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Allocates a public endpoint for an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// You can call this operation to apply for a public endpoint for an AnalyticDB for PostgreSQL instance. Both the primary and instance endpoints of an AnalyticDB for PostgreSQL instance can be public endpoints. For more information, see [Endpoints of an instance and its primary coordinator node](https://help.aliyun.com/document_detail/204879.html).
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - AllocateInstancePublicConnectionRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AllocateInstancePublicConnectionResponse
func (client *Client) AllocateInstancePublicConnectionWithOptions(request *AllocateInstancePublicConnectionRequest, runtime *dara.RuntimeOptions) (_result *AllocateInstancePublicConnectionResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AddressType) {
		query["AddressType"] = request.AddressType
	}

	if !dara.IsNil(request.ConnectionStringPrefix) {
		query["ConnectionStringPrefix"] = request.ConnectionStringPrefix
	}

	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.Port) {
		query["Port"] = request.Port
	}

	if !dara.IsNil(request.ResourceOwnerAccount) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !dara.IsNil(request.ResourceOwnerId) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("AllocateInstancePublicConnection"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Allocates a public endpoint for an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// You can call this operation to apply for a public endpoint for an AnalyticDB for PostgreSQL instance. Both the primary and instance endpoints of an AnalyticDB for PostgreSQL instance can be public endpoints. For more information, see [Endpoints of an instance and its primary coordinator node](https://help.aliyun.com/document_detail/204879.html).
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - AllocateInstancePublicConnectionRequest
//
// @return AllocateInstancePublicConnectionResponse
func (client *Client) AllocateInstancePublicConnection(request *AllocateInstancePublicConnectionRequest) (_result *AllocateInstancePublicConnectionResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.AllocateInstancePublicConnectionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Binds a resource group to a database role.
//
// @param tmpReq - BindDBResourceGroupWithRoleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return BindDBResourceGroupWithRoleResponse
func (client *Client) BindDBResourceGroupWithRoleWithOptions(tmpReq *BindDBResourceGroupWithRoleRequest, runtime *dara.RuntimeOptions) (_result *BindDBResourceGroupWithRoleResponse, _err error) {
	_err = tmpReq.Validate()
	if _err != nil {
		return _result, _err
	}
	request := &BindDBResourceGroupWithRoleShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !dara.IsNil(tmpReq.RoleList) {
		request.RoleListShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.RoleList, dara.String("RoleList"), dara.String("simple"))
	}

	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.ResourceGroupName) {
		query["ResourceGroupName"] = request.ResourceGroupName
	}

	if !dara.IsNil(request.RoleListShrink) {
		query["RoleList"] = request.RoleListShrink
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("BindDBResourceGroupWithRole"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Binds a resource group to a database role.
//
// @param request - BindDBResourceGroupWithRoleRequest
//
// @return BindDBResourceGroupWithRoleResponse
func (client *Client) BindDBResourceGroupWithRole(request *BindDBResourceGroupWithRoleRequest) (_result *BindDBResourceGroupWithRoleResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.BindDBResourceGroupWithRoleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 取消创建索引任务
//
// @param request - CancelCreateIndexJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CancelCreateIndexJobResponse
func (client *Client) CancelCreateIndexJobWithOptions(request *CancelCreateIndexJobRequest, runtime *dara.RuntimeOptions) (_result *CancelCreateIndexJobResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Collection) {
		query["Collection"] = request.Collection
	}

	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.JobId) {
		query["JobId"] = request.JobId
	}

	if !dara.IsNil(request.Namespace) {
		query["Namespace"] = request.Namespace
	}

	if !dara.IsNil(request.NamespacePassword) {
		query["NamespacePassword"] = request.NamespacePassword
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.WorkspaceId) {
		query["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CancelCreateIndexJob"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// 取消创建索引任务
//
// @param request - CancelCreateIndexJobRequest
//
// @return CancelCreateIndexJobResponse
func (client *Client) CancelCreateIndexJob(request *CancelCreateIndexJobRequest) (_result *CancelCreateIndexJobResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.CancelCreateIndexJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Cancels an asynchronous document upload job based on the job ID.
//
// Description:
//
// This operation is related to the UploadDocumentAsync operation. You can call this operation to cancel a document upload job.
//
// >  If the canceling operation is complete, failed, or is canceled, you cannot call the operation again. The canceling operation only interrupts the document upload job. To remove the uploaded data, you must manually remove it or call the DeleteCollectionData operation. You can also call the document upload operation to overwrite the data by using the same FileName parameter.
//
// @param request - CancelUploadDocumentJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CancelUploadDocumentJobResponse
func (client *Client) CancelUploadDocumentJobWithOptions(request *CancelUploadDocumentJobRequest, runtime *dara.RuntimeOptions) (_result *CancelUploadDocumentJobResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	body := map[string]interface{}{}
	if !dara.IsNil(request.Collection) {
		body["Collection"] = request.Collection
	}

	if !dara.IsNil(request.JobId) {
		body["JobId"] = request.JobId
	}

	if !dara.IsNil(request.Namespace) {
		body["Namespace"] = request.Namespace
	}

	if !dara.IsNil(request.NamespacePassword) {
		body["NamespacePassword"] = request.NamespacePassword
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CancelUploadDocumentJob"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Cancels an asynchronous document upload job based on the job ID.
//
// Description:
//
// This operation is related to the UploadDocumentAsync operation. You can call this operation to cancel a document upload job.
//
// >  If the canceling operation is complete, failed, or is canceled, you cannot call the operation again. The canceling operation only interrupts the document upload job. To remove the uploaded data, you must manually remove it or call the DeleteCollectionData operation. You can also call the document upload operation to overwrite the data by using the same FileName parameter.
//
// @param request - CancelUploadDocumentJobRequest
//
// @return CancelUploadDocumentJobResponse
func (client *Client) CancelUploadDocumentJob(request *CancelUploadDocumentJobRequest) (_result *CancelUploadDocumentJobResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.CancelUploadDocumentJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Cancels an asynchronous vector data upload job by using a job ID.
//
// Description:
//
// This operation is related to the `UpsertCollectionDataAsync` operation. You can call this operation to cancel an upload job.
//
// >  If the canceling operation is complete, failed, or is canceled, you cannot call the operation again. The canceling operation only interrupts the upload job. To remove the uploaded data, you must manually remove it or call the DeleteCollectionData operation.
//
// @param request - CancelUpsertCollectionDataJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CancelUpsertCollectionDataJobResponse
func (client *Client) CancelUpsertCollectionDataJobWithOptions(request *CancelUpsertCollectionDataJobRequest, runtime *dara.RuntimeOptions) (_result *CancelUpsertCollectionDataJobResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.WorkspaceId) {
		query["WorkspaceId"] = request.WorkspaceId
	}

	body := map[string]interface{}{}
	if !dara.IsNil(request.Collection) {
		body["Collection"] = request.Collection
	}

	if !dara.IsNil(request.JobId) {
		body["JobId"] = request.JobId
	}

	if !dara.IsNil(request.Namespace) {
		body["Namespace"] = request.Namespace
	}

	if !dara.IsNil(request.NamespacePassword) {
		body["NamespacePassword"] = request.NamespacePassword
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CancelUpsertCollectionDataJob"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Cancels an asynchronous vector data upload job by using a job ID.
//
// Description:
//
// This operation is related to the `UpsertCollectionDataAsync` operation. You can call this operation to cancel an upload job.
//
// >  If the canceling operation is complete, failed, or is canceled, you cannot call the operation again. The canceling operation only interrupts the upload job. To remove the uploaded data, you must manually remove it or call the DeleteCollectionData operation.
//
// @param request - CancelUpsertCollectionDataJobRequest
//
// @return CancelUpsertCollectionDataJobResponse
func (client *Client) CancelUpsertCollectionDataJob(request *CancelUpsertCollectionDataJobRequest) (_result *CancelUpsertCollectionDataJobResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.CancelUpsertCollectionDataJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Checks the configurations of a Hadoop data source.
//
// @param request - CheckHadoopDataSourceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CheckHadoopDataSourceResponse
func (client *Client) CheckHadoopDataSourceWithOptions(request *CheckHadoopDataSourceRequest, runtime *dara.RuntimeOptions) (_result *CheckHadoopDataSourceResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CheckDir) {
		query["CheckDir"] = request.CheckDir
	}

	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.DataSourceId) {
		query["DataSourceId"] = request.DataSourceId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CheckHadoopDataSource"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Checks the configurations of a Hadoop data source.
//
// @param request - CheckHadoopDataSourceRequest
//
// @return CheckHadoopDataSourceResponse
func (client *Client) CheckHadoopDataSource(request *CheckHadoopDataSourceRequest) (_result *CheckHadoopDataSourceResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.CheckHadoopDataSourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// # Check Hadoop Cluster Network Connectivity
//
// @param request - CheckHadoopNetConnectionRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CheckHadoopNetConnectionResponse
func (client *Client) CheckHadoopNetConnectionWithOptions(request *CheckHadoopNetConnectionRequest, runtime *dara.RuntimeOptions) (_result *CheckHadoopNetConnectionResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.DataSourceId) {
		query["DataSourceId"] = request.DataSourceId
	}

	if !dara.IsNil(request.EmrInstanceId) {
		query["EmrInstanceId"] = request.EmrInstanceId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CheckHadoopNetConnection"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// # Check Hadoop Cluster Network Connectivity
//
// @param request - CheckHadoopNetConnectionRequest
//
// @return CheckHadoopNetConnectionResponse
func (client *Client) CheckHadoopNetConnection(request *CheckHadoopNetConnectionRequest) (_result *CheckHadoopNetConnectionResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.CheckHadoopNetConnectionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// # Check the network connectivity of the JDBC connection string
//
// @param request - CheckJDBCSourceNetConnectionRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CheckJDBCSourceNetConnectionResponse
func (client *Client) CheckJDBCSourceNetConnectionWithOptions(request *CheckJDBCSourceNetConnectionRequest, runtime *dara.RuntimeOptions) (_result *CheckJDBCSourceNetConnectionResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.DataSourceId) {
		query["DataSourceId"] = request.DataSourceId
	}

	if !dara.IsNil(request.JdbcConnectionString) {
		query["JdbcConnectionString"] = request.JdbcConnectionString
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CheckJDBCSourceNetConnection"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// # Check the network connectivity of the JDBC connection string
//
// @param request - CheckJDBCSourceNetConnectionRequest
//
// @return CheckJDBCSourceNetConnectionResponse
func (client *Client) CheckJDBCSourceNetConnection(request *CheckJDBCSourceNetConnectionRequest) (_result *CheckJDBCSourceNetConnectionResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.CheckJDBCSourceNetConnectionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries whether a service-linked role is created.
//
// @param request - CheckServiceLinkedRoleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CheckServiceLinkedRoleResponse
func (client *Client) CheckServiceLinkedRoleWithOptions(request *CheckServiceLinkedRoleRequest, runtime *dara.RuntimeOptions) (_result *CheckServiceLinkedRoleResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CheckServiceLinkedRole"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries whether a service-linked role is created.
//
// @param request - CheckServiceLinkedRoleRequest
//
// @return CheckServiceLinkedRoleResponse
func (client *Client) CheckServiceLinkedRole(request *CheckServiceLinkedRoleRequest) (_result *CheckServiceLinkedRoleResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.CheckServiceLinkedRoleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 恢复数据至指定实例
//
// @param request - CloneDBInstanceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CloneDBInstanceResponse
func (client *Client) CloneDBInstanceWithOptions(request *CloneDBInstanceRequest, runtime *dara.RuntimeOptions) (_result *CloneDBInstanceResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.BackupId) {
		query["BackupId"] = request.BackupId
	}

	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.SrcDbInstanceName) {
		query["SrcDbInstanceName"] = request.SrcDbInstanceName
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CloneDBInstance"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// 恢复数据至指定实例
//
// @param request - CloneDBInstanceRequest
//
// @return CloneDBInstanceResponse
func (client *Client) CloneDBInstance(request *CloneDBInstanceRequest) (_result *CloneDBInstanceResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.CloneDBInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates an initial account for an AnalyticDB for PostgreSQL instance.
//
// Description:
//
//	  Before you can use an AnalyticDB for PostgreSQL instance, you must create an initial account for the instance.
//
//		- You can call this operation to create only initial accounts. For information about how to create other types of accounts, see [Create a database account](https://help.aliyun.com/document_detail/50206.html).
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - CreateAccountRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateAccountResponse
func (client *Client) CreateAccountWithOptions(request *CreateAccountRequest, runtime *dara.RuntimeOptions) (_result *CreateAccountResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AccountDescription) {
		query["AccountDescription"] = request.AccountDescription
	}

	if !dara.IsNil(request.AccountName) {
		query["AccountName"] = request.AccountName
	}

	if !dara.IsNil(request.AccountPassword) {
		query["AccountPassword"] = request.AccountPassword
	}

	if !dara.IsNil(request.AccountType) {
		query["AccountType"] = request.AccountType
	}

	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.DatabaseName) {
		query["DatabaseName"] = request.DatabaseName
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CreateAccount"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Creates an initial account for an AnalyticDB for PostgreSQL instance.
//
// Description:
//
//	  Before you can use an AnalyticDB for PostgreSQL instance, you must create an initial account for the instance.
//
//		- You can call this operation to create only initial accounts. For information about how to create other types of accounts, see [Create a database account](https://help.aliyun.com/document_detail/50206.html).
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - CreateAccountRequest
//
// @return CreateAccountResponse
func (client *Client) CreateAccount(request *CreateAccountRequest) (_result *CreateAccountResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.CreateAccountWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 创建备份
//
// @param request - CreateBackupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateBackupResponse
func (client *Client) CreateBackupWithOptions(request *CreateBackupRequest, runtime *dara.RuntimeOptions) (_result *CreateBackupResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CreateBackup"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// 创建备份
//
// @param request - CreateBackupRequest
//
// @return CreateBackupResponse
func (client *Client) CreateBackup(request *CreateBackupRequest) (_result *CreateBackupResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.CreateBackupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a vector collection.
//
// @param tmpReq - CreateCollectionRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateCollectionResponse
func (client *Client) CreateCollectionWithOptions(tmpReq *CreateCollectionRequest, runtime *dara.RuntimeOptions) (_result *CreateCollectionResponse, _err error) {
	_err = tmpReq.Validate()
	if _err != nil {
		return _result, _err
	}
	request := &CreateCollectionShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !dara.IsNil(tmpReq.SparseVectorIndexConfig) {
		request.SparseVectorIndexConfigShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.SparseVectorIndexConfig, dara.String("SparseVectorIndexConfig"), dara.String("json"))
	}

	query := map[string]interface{}{}
	if !dara.IsNil(request.Collection) {
		query["Collection"] = request.Collection
	}

	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.Dimension) {
		query["Dimension"] = request.Dimension
	}

	if !dara.IsNil(request.ExternalStorage) {
		query["ExternalStorage"] = request.ExternalStorage
	}

	if !dara.IsNil(request.FullTextRetrievalFields) {
		query["FullTextRetrievalFields"] = request.FullTextRetrievalFields
	}

	if !dara.IsNil(request.HnswEfConstruction) {
		query["HnswEfConstruction"] = request.HnswEfConstruction
	}

	if !dara.IsNil(request.HnswM) {
		query["HnswM"] = request.HnswM
	}

	if !dara.IsNil(request.ManagerAccount) {
		query["ManagerAccount"] = request.ManagerAccount
	}

	if !dara.IsNil(request.ManagerAccountPassword) {
		query["ManagerAccountPassword"] = request.ManagerAccountPassword
	}

	if !dara.IsNil(request.Metadata) {
		query["Metadata"] = request.Metadata
	}

	if !dara.IsNil(request.MetadataIndices) {
		query["MetadataIndices"] = request.MetadataIndices
	}

	if !dara.IsNil(request.Metrics) {
		query["Metrics"] = request.Metrics
	}

	if !dara.IsNil(request.Namespace) {
		query["Namespace"] = request.Namespace
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.Parser) {
		query["Parser"] = request.Parser
	}

	if !dara.IsNil(request.PqEnable) {
		query["PqEnable"] = request.PqEnable
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.SparseVectorIndexConfigShrink) {
		query["SparseVectorIndexConfig"] = request.SparseVectorIndexConfigShrink
	}

	if !dara.IsNil(request.SupportSparse) {
		query["SupportSparse"] = request.SupportSparse
	}

	if !dara.IsNil(request.WorkspaceId) {
		query["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CreateCollection"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Creates a vector collection.
//
// @param request - CreateCollectionRequest
//
// @return CreateCollectionResponse
func (client *Client) CreateCollection(request *CreateCollectionRequest) (_result *CreateCollectionResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.CreateCollectionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// # Create Instance
//
// Description:
//
// Before using this interface, please make sure you have fully understood the [billing method](https://help.aliyun.com/document_detail/35406.html) and <props="china">[pricing](https://www.aliyun.com/price/product#/gpdb/detail/GreenplumPost)<props="intl">[pricing](https://www.alibabacloud.com/zh/product/hybriddb-postgresql/pricing) of the AnalyticDB for PostgreSQL product.
//
// @param request - CreateDBInstanceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateDBInstanceResponse
func (client *Client) CreateDBInstanceWithOptions(request *CreateDBInstanceRequest, runtime *dara.RuntimeOptions) (_result *CreateDBInstanceResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AINodeSpecInfos) {
		query["AINodeSpecInfos"] = request.AINodeSpecInfos
	}

	if !dara.IsNil(request.BackupId) {
		query["BackupId"] = request.BackupId
	}

	if !dara.IsNil(request.ClientToken) {
		query["ClientToken"] = request.ClientToken
	}

	if !dara.IsNil(request.CreateSampleData) {
		query["CreateSampleData"] = request.CreateSampleData
	}

	if !dara.IsNil(request.DBInstanceCategory) {
		query["DBInstanceCategory"] = request.DBInstanceCategory
	}

	if !dara.IsNil(request.DBInstanceClass) {
		query["DBInstanceClass"] = request.DBInstanceClass
	}

	if !dara.IsNil(request.DBInstanceDescription) {
		query["DBInstanceDescription"] = request.DBInstanceDescription
	}

	if !dara.IsNil(request.DBInstanceGroupCount) {
		query["DBInstanceGroupCount"] = request.DBInstanceGroupCount
	}

	if !dara.IsNil(request.DBInstanceMode) {
		query["DBInstanceMode"] = request.DBInstanceMode
	}

	if !dara.IsNil(request.DeployMode) {
		query["DeployMode"] = request.DeployMode
	}

	if !dara.IsNil(request.EnableSSL) {
		query["EnableSSL"] = request.EnableSSL
	}

	if !dara.IsNil(request.EncryptionKey) {
		query["EncryptionKey"] = request.EncryptionKey
	}

	if !dara.IsNil(request.EncryptionType) {
		query["EncryptionType"] = request.EncryptionType
	}

	if !dara.IsNil(request.Engine) {
		query["Engine"] = request.Engine
	}

	if !dara.IsNil(request.EngineVersion) {
		query["EngineVersion"] = request.EngineVersion
	}

	if !dara.IsNil(request.IdleTime) {
		query["IdleTime"] = request.IdleTime
	}

	if !dara.IsNil(request.InstanceNetworkType) {
		query["InstanceNetworkType"] = request.InstanceNetworkType
	}

	if !dara.IsNil(request.InstanceSpec) {
		query["InstanceSpec"] = request.InstanceSpec
	}

	if !dara.IsNil(request.MasterAISpec) {
		query["MasterAISpec"] = request.MasterAISpec
	}

	if !dara.IsNil(request.MasterCU) {
		query["MasterCU"] = request.MasterCU
	}

	if !dara.IsNil(request.MasterNodeNum) {
		query["MasterNodeNum"] = request.MasterNodeNum
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.PayType) {
		query["PayType"] = request.PayType
	}

	if !dara.IsNil(request.Period) {
		query["Period"] = request.Period
	}

	if !dara.IsNil(request.PrivateIpAddress) {
		query["PrivateIpAddress"] = request.PrivateIpAddress
	}

	if !dara.IsNil(request.ProdType) {
		query["ProdType"] = request.ProdType
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.ResourceGroupId) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !dara.IsNil(request.SecurityIPList) {
		query["SecurityIPList"] = request.SecurityIPList
	}

	if !dara.IsNil(request.SegDiskPerformanceLevel) {
		query["SegDiskPerformanceLevel"] = request.SegDiskPerformanceLevel
	}

	if !dara.IsNil(request.SegNodeNum) {
		query["SegNodeNum"] = request.SegNodeNum
	}

	if !dara.IsNil(request.SegStorageType) {
		query["SegStorageType"] = request.SegStorageType
	}

	if !dara.IsNil(request.ServerlessMode) {
		query["ServerlessMode"] = request.ServerlessMode
	}

	if !dara.IsNil(request.ServerlessResource) {
		query["ServerlessResource"] = request.ServerlessResource
	}

	if !dara.IsNil(request.SrcDbInstanceName) {
		query["SrcDbInstanceName"] = request.SrcDbInstanceName
	}

	if !dara.IsNil(request.StandbyVSwitchId) {
		query["StandbyVSwitchId"] = request.StandbyVSwitchId
	}

	if !dara.IsNil(request.StandbyZoneId) {
		query["StandbyZoneId"] = request.StandbyZoneId
	}

	if !dara.IsNil(request.StorageSize) {
		query["StorageSize"] = request.StorageSize
	}

	if !dara.IsNil(request.StorageType) {
		query["StorageType"] = request.StorageType
	}

	if !dara.IsNil(request.Tag) {
		query["Tag"] = request.Tag
	}

	if !dara.IsNil(request.UsedTime) {
		query["UsedTime"] = request.UsedTime
	}

	if !dara.IsNil(request.VPCId) {
		query["VPCId"] = request.VPCId
	}

	if !dara.IsNil(request.VSwitchId) {
		query["VSwitchId"] = request.VSwitchId
	}

	if !dara.IsNil(request.VectorConfigurationStatus) {
		query["VectorConfigurationStatus"] = request.VectorConfigurationStatus
	}

	if !dara.IsNil(request.ZoneId) {
		query["ZoneId"] = request.ZoneId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CreateDBInstance"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// # Create Instance
//
// Description:
//
// Before using this interface, please make sure you have fully understood the [billing method](https://help.aliyun.com/document_detail/35406.html) and <props="china">[pricing](https://www.aliyun.com/price/product#/gpdb/detail/GreenplumPost)<props="intl">[pricing](https://www.alibabacloud.com/zh/product/hybriddb-postgresql/pricing) of the AnalyticDB for PostgreSQL product.
//
// @param request - CreateDBInstanceRequest
//
// @return CreateDBInstanceResponse
func (client *Client) CreateDBInstance(request *CreateDBInstanceRequest) (_result *CreateDBInstanceResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.CreateDBInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a plan for an AnalyticDB for PostgreSQL instance.
//
// Description:
//
//	  The plan management feature is supported only for pay-as-you-go instances.
//
//		- When you change the compute node specifications or change the number of compute nodes, transient connections may occur. We recommend that you perform these operations during off-peak hours.
//
// Before you call this operation, make sure that you are familiar with the billing of AnalyticDB for PostgreSQL. For more information, see [Billing methods](https://help.aliyun.com/document_detail/35406.html) and [AnalyticDB for PostgreSQL pricing](https://www.alibabacloud.com/zh/product/hybriddb-postgresql/pricing).
//
// @param request - CreateDBInstancePlanRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateDBInstancePlanResponse
func (client *Client) CreateDBInstancePlanWithOptions(request *CreateDBInstancePlanRequest, runtime *dara.RuntimeOptions) (_result *CreateDBInstancePlanResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.PlanConfig) {
		query["PlanConfig"] = request.PlanConfig
	}

	if !dara.IsNil(request.PlanDesc) {
		query["PlanDesc"] = request.PlanDesc
	}

	if !dara.IsNil(request.PlanEndDate) {
		query["PlanEndDate"] = request.PlanEndDate
	}

	if !dara.IsNil(request.PlanName) {
		query["PlanName"] = request.PlanName
	}

	if !dara.IsNil(request.PlanScheduleType) {
		query["PlanScheduleType"] = request.PlanScheduleType
	}

	if !dara.IsNil(request.PlanStartDate) {
		query["PlanStartDate"] = request.PlanStartDate
	}

	if !dara.IsNil(request.PlanType) {
		query["PlanType"] = request.PlanType
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CreateDBInstancePlan"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Creates a plan for an AnalyticDB for PostgreSQL instance.
//
// Description:
//
//	  The plan management feature is supported only for pay-as-you-go instances.
//
//		- When you change the compute node specifications or change the number of compute nodes, transient connections may occur. We recommend that you perform these operations during off-peak hours.
//
// Before you call this operation, make sure that you are familiar with the billing of AnalyticDB for PostgreSQL. For more information, see [Billing methods](https://help.aliyun.com/document_detail/35406.html) and [AnalyticDB for PostgreSQL pricing](https://www.alibabacloud.com/zh/product/hybriddb-postgresql/pricing).
//
// @param request - CreateDBInstancePlanRequest
//
// @return CreateDBInstancePlanResponse
func (client *Client) CreateDBInstancePlan(request *CreateDBInstancePlanRequest) (_result *CreateDBInstancePlanResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.CreateDBInstancePlanWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a resource group.
//
// @param request - CreateDBResourceGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateDBResourceGroupResponse
func (client *Client) CreateDBResourceGroupWithOptions(request *CreateDBResourceGroupRequest, runtime *dara.RuntimeOptions) (_result *CreateDBResourceGroupResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.ResourceGroupConfig) {
		query["ResourceGroupConfig"] = request.ResourceGroupConfig
	}

	if !dara.IsNil(request.ResourceGroupName) {
		query["ResourceGroupName"] = request.ResourceGroupName
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CreateDBResourceGroup"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Creates a resource group.
//
// @param request - CreateDBResourceGroupRequest
//
// @return CreateDBResourceGroupResponse
func (client *Client) CreateDBResourceGroup(request *CreateDBResourceGroupRequest) (_result *CreateDBResourceGroupResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.CreateDBResourceGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a document collection.
//
// @param request - CreateDocumentCollectionRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateDocumentCollectionResponse
func (client *Client) CreateDocumentCollectionWithOptions(request *CreateDocumentCollectionRequest, runtime *dara.RuntimeOptions) (_result *CreateDocumentCollectionResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Collection) {
		query["Collection"] = request.Collection
	}

	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.Dimension) {
		query["Dimension"] = request.Dimension
	}

	if !dara.IsNil(request.EmbeddingModel) {
		query["EmbeddingModel"] = request.EmbeddingModel
	}

	if !dara.IsNil(request.ExternalStorage) {
		query["ExternalStorage"] = request.ExternalStorage
	}

	if !dara.IsNil(request.FullTextRetrievalFields) {
		query["FullTextRetrievalFields"] = request.FullTextRetrievalFields
	}

	if !dara.IsNil(request.HnswEfConstruction) {
		query["HnswEfConstruction"] = request.HnswEfConstruction
	}

	if !dara.IsNil(request.HnswM) {
		query["HnswM"] = request.HnswM
	}

	if !dara.IsNil(request.ManagerAccount) {
		query["ManagerAccount"] = request.ManagerAccount
	}

	if !dara.IsNil(request.ManagerAccountPassword) {
		query["ManagerAccountPassword"] = request.ManagerAccountPassword
	}

	if !dara.IsNil(request.Metadata) {
		query["Metadata"] = request.Metadata
	}

	if !dara.IsNil(request.MetadataIndices) {
		query["MetadataIndices"] = request.MetadataIndices
	}

	if !dara.IsNil(request.Metrics) {
		query["Metrics"] = request.Metrics
	}

	if !dara.IsNil(request.Namespace) {
		query["Namespace"] = request.Namespace
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.Parser) {
		query["Parser"] = request.Parser
	}

	if !dara.IsNil(request.PqEnable) {
		query["PqEnable"] = request.PqEnable
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CreateDocumentCollection"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Creates a document collection.
//
// @param request - CreateDocumentCollectionRequest
//
// @return CreateDocumentCollectionResponse
func (client *Client) CreateDocumentCollection(request *CreateDocumentCollectionRequest) (_result *CreateDocumentCollectionResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.CreateDocumentCollectionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Install extensions.
//
// @param request - CreateExtensionsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateExtensionsResponse
func (client *Client) CreateExtensionsWithOptions(request *CreateExtensionsRequest, runtime *dara.RuntimeOptions) (_result *CreateExtensionsResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.DBNames) {
		query["DBNames"] = request.DBNames
	}

	if !dara.IsNil(request.Extensions) {
		query["Extensions"] = request.Extensions
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CreateExtensions"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Install extensions.
//
// @param request - CreateExtensionsRequest
//
// @return CreateExtensionsResponse
func (client *Client) CreateExtensions(request *CreateExtensionsRequest) (_result *CreateExtensionsResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.CreateExtensionsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// # Create External Data Service
//
// @param request - CreateExternalDataServiceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateExternalDataServiceResponse
func (client *Client) CreateExternalDataServiceWithOptions(request *CreateExternalDataServiceRequest, runtime *dara.RuntimeOptions) (_result *CreateExternalDataServiceResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.ServiceDescription) {
		query["ServiceDescription"] = request.ServiceDescription
	}

	if !dara.IsNil(request.ServiceName) {
		query["ServiceName"] = request.ServiceName
	}

	if !dara.IsNil(request.ServiceSpec) {
		query["ServiceSpec"] = request.ServiceSpec
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CreateExternalDataService"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// # Create External Data Service
//
// @param request - CreateExternalDataServiceRequest
//
// @return CreateExternalDataServiceResponse
func (client *Client) CreateExternalDataService(request *CreateExternalDataServiceRequest) (_result *CreateExternalDataServiceResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.CreateExternalDataServiceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// # Create Hadoop data source configuration
//
// @param request - CreateHadoopDataSourceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateHadoopDataSourceResponse
func (client *Client) CreateHadoopDataSourceWithOptions(request *CreateHadoopDataSourceRequest, runtime *dara.RuntimeOptions) (_result *CreateHadoopDataSourceResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.DataSourceDescription) {
		query["DataSourceDescription"] = request.DataSourceDescription
	}

	if !dara.IsNil(request.DataSourceName) {
		query["DataSourceName"] = request.DataSourceName
	}

	if !dara.IsNil(request.DataSourceType) {
		query["DataSourceType"] = request.DataSourceType
	}

	if !dara.IsNil(request.EmrInstanceId) {
		query["EmrInstanceId"] = request.EmrInstanceId
	}

	if !dara.IsNil(request.HDFSConf) {
		query["HDFSConf"] = request.HDFSConf
	}

	if !dara.IsNil(request.HadoopCoreConf) {
		query["HadoopCoreConf"] = request.HadoopCoreConf
	}

	if !dara.IsNil(request.HadoopCreateType) {
		query["HadoopCreateType"] = request.HadoopCreateType
	}

	if !dara.IsNil(request.HadoopHostsAddress) {
		query["HadoopHostsAddress"] = request.HadoopHostsAddress
	}

	if !dara.IsNil(request.HiveConf) {
		query["HiveConf"] = request.HiveConf
	}

	if !dara.IsNil(request.MapReduceConf) {
		query["MapReduceConf"] = request.MapReduceConf
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.YarnConf) {
		query["YarnConf"] = request.YarnConf
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CreateHadoopDataSource"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// # Create Hadoop data source configuration
//
// @param request - CreateHadoopDataSourceRequest
//
// @return CreateHadoopDataSourceResponse
func (client *Client) CreateHadoopDataSource(request *CreateHadoopDataSourceRequest) (_result *CreateHadoopDataSourceResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.CreateHadoopDataSourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 创建索引
//
// @param request - CreateIndexRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateIndexResponse
func (client *Client) CreateIndexWithOptions(request *CreateIndexRequest, runtime *dara.RuntimeOptions) (_result *CreateIndexResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Collection) {
		query["Collection"] = request.Collection
	}

	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.IndexConfig) {
		query["IndexConfig"] = request.IndexConfig
	}

	if !dara.IsNil(request.IndexField) {
		query["IndexField"] = request.IndexField
	}

	if !dara.IsNil(request.IndexName) {
		query["IndexName"] = request.IndexName
	}

	if !dara.IsNil(request.Namespace) {
		query["Namespace"] = request.Namespace
	}

	if !dara.IsNil(request.NamespacePassword) {
		query["NamespacePassword"] = request.NamespacePassword
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.WorkspaceId) {
		query["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CreateIndex"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// 创建索引
//
// @param request - CreateIndexRequest
//
// @return CreateIndexResponse
func (client *Client) CreateIndex(request *CreateIndexRequest) (_result *CreateIndexResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.CreateIndexWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a JDBC data source.
//
// @param request - CreateJDBCDataSourceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateJDBCDataSourceResponse
func (client *Client) CreateJDBCDataSourceWithOptions(request *CreateJDBCDataSourceRequest, runtime *dara.RuntimeOptions) (_result *CreateJDBCDataSourceResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.DataSourceDescription) {
		query["DataSourceDescription"] = request.DataSourceDescription
	}

	if !dara.IsNil(request.DataSourceName) {
		query["DataSourceName"] = request.DataSourceName
	}

	if !dara.IsNil(request.DataSourceType) {
		query["DataSourceType"] = request.DataSourceType
	}

	if !dara.IsNil(request.JDBCConnectionString) {
		query["JDBCConnectionString"] = request.JDBCConnectionString
	}

	if !dara.IsNil(request.JDBCPassword) {
		query["JDBCPassword"] = request.JDBCPassword
	}

	if !dara.IsNil(request.JDBCUserName) {
		query["JDBCUserName"] = request.JDBCUserName
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CreateJDBCDataSource"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Creates a JDBC data source.
//
// @param request - CreateJDBCDataSourceRequest
//
// @return CreateJDBCDataSourceResponse
func (client *Client) CreateJDBCDataSource(request *CreateJDBCDataSourceRequest) (_result *CreateJDBCDataSourceResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.CreateJDBCDataSourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a vector namespace.
//
// @param request - CreateNamespaceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateNamespaceResponse
func (client *Client) CreateNamespaceWithOptions(request *CreateNamespaceRequest, runtime *dara.RuntimeOptions) (_result *CreateNamespaceResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.ManagerAccount) {
		query["ManagerAccount"] = request.ManagerAccount
	}

	if !dara.IsNil(request.ManagerAccountPassword) {
		query["ManagerAccountPassword"] = request.ManagerAccountPassword
	}

	if !dara.IsNil(request.Namespace) {
		query["Namespace"] = request.Namespace
	}

	if !dara.IsNil(request.NamespacePassword) {
		query["NamespacePassword"] = request.NamespacePassword
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.WorkspaceId) {
		query["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CreateNamespace"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Creates a vector namespace.
//
// @param request - CreateNamespaceRequest
//
// @return CreateNamespaceResponse
func (client *Client) CreateNamespace(request *CreateNamespaceRequest) (_result *CreateNamespaceResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.CreateNamespaceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// # Create Homogeneous Data Source
//
// @param request - CreateRemoteADBDataSourceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateRemoteADBDataSourceResponse
func (client *Client) CreateRemoteADBDataSourceWithOptions(request *CreateRemoteADBDataSourceRequest, runtime *dara.RuntimeOptions) (_result *CreateRemoteADBDataSourceResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DataSourceName) {
		query["DataSourceName"] = request.DataSourceName
	}

	if !dara.IsNil(request.LocalDBInstanceId) {
		query["LocalDBInstanceId"] = request.LocalDBInstanceId
	}

	if !dara.IsNil(request.LocalDatabase) {
		query["LocalDatabase"] = request.LocalDatabase
	}

	if !dara.IsNil(request.ManagerUserName) {
		query["ManagerUserName"] = request.ManagerUserName
	}

	if !dara.IsNil(request.ManagerUserPassword) {
		query["ManagerUserPassword"] = request.ManagerUserPassword
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RemoteDBInstanceId) {
		query["RemoteDBInstanceId"] = request.RemoteDBInstanceId
	}

	if !dara.IsNil(request.RemoteDatabase) {
		query["RemoteDatabase"] = request.RemoteDatabase
	}

	if !dara.IsNil(request.UserName) {
		query["UserName"] = request.UserName
	}

	if !dara.IsNil(request.UserPassword) {
		query["UserPassword"] = request.UserPassword
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CreateRemoteADBDataSource"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// # Create Homogeneous Data Source
//
// @param request - CreateRemoteADBDataSourceRequest
//
// @return CreateRemoteADBDataSourceResponse
func (client *Client) CreateRemoteADBDataSource(request *CreateRemoteADBDataSourceRequest) (_result *CreateRemoteADBDataSourceResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.CreateRemoteADBDataSourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a sample dataset for an AnalyticDB for PostgreSQL instance.
//
// Description:
//
//	  You can call this operation to create a sample dataset for an AnalyticDB for PostgreSQL instance. Then, you can execute query statements on the sample dataset to experience or test your instance. For more information about query statements, see [Dataset information and query examples](https://help.aliyun.com/document_detail/452277.html).
//
//		- This operation is supported only for AnalyticDB for PostgreSQL V6.3.8.8 to 6.3.8.x, V6.3.10.3, and later.
//
//		- Versions from V6.3.9.0 to V6.3.10.2 are not supported.
//
// @param request - CreateSampleDataRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateSampleDataResponse
func (client *Client) CreateSampleDataWithOptions(request *CreateSampleDataRequest, runtime *dara.RuntimeOptions) (_result *CreateSampleDataResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CreateSampleData"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Creates a sample dataset for an AnalyticDB for PostgreSQL instance.
//
// Description:
//
//	  You can call this operation to create a sample dataset for an AnalyticDB for PostgreSQL instance. Then, you can execute query statements on the sample dataset to experience or test your instance. For more information about query statements, see [Dataset information and query examples](https://help.aliyun.com/document_detail/452277.html).
//
//		- This operation is supported only for AnalyticDB for PostgreSQL V6.3.8.8 to 6.3.8.x, V6.3.10.3, and later.
//
//		- Versions from V6.3.9.0 to V6.3.10.2 are not supported.
//
// @param request - CreateSampleDataRequest
//
// @return CreateSampleDataResponse
func (client *Client) CreateSampleData(request *CreateSampleDataRequest) (_result *CreateSampleDataResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.CreateSampleDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates an access credential for an AnalyticDB for PostgreSQL instance by using the name and password of a database account.
//
// @param request - CreateSecretRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateSecretResponse
func (client *Client) CreateSecretWithOptions(request *CreateSecretRequest, runtime *dara.RuntimeOptions) (_result *CreateSecretResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.Description) {
		query["Description"] = request.Description
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.Password) {
		query["Password"] = request.Password
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.SecretName) {
		query["SecretName"] = request.SecretName
	}

	if !dara.IsNil(request.TestConnection) {
		query["TestConnection"] = request.TestConnection
	}

	if !dara.IsNil(request.Username) {
		query["Username"] = request.Username
	}

	if !dara.IsNil(request.WorkspaceId) {
		query["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CreateSecret"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Creates an access credential for an AnalyticDB for PostgreSQL instance by using the name and password of a database account.
//
// @param request - CreateSecretRequest
//
// @return CreateSecretResponse
func (client *Client) CreateSecret(request *CreateSecretRequest) (_result *CreateSecretResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.CreateSecretWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a service-linked role.
//
// @param request - CreateServiceLinkedRoleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateServiceLinkedRoleResponse
func (client *Client) CreateServiceLinkedRoleWithOptions(request *CreateServiceLinkedRoleRequest, runtime *dara.RuntimeOptions) (_result *CreateServiceLinkedRoleResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CreateServiceLinkedRole"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Creates a service-linked role.
//
// @param request - CreateServiceLinkedRoleRequest
//
// @return CreateServiceLinkedRoleResponse
func (client *Client) CreateServiceLinkedRole(request *CreateServiceLinkedRoleRequest) (_result *CreateServiceLinkedRoleResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.CreateServiceLinkedRoleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// # Create External Data Source Configuration
//
// @param request - CreateStreamingDataServiceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateStreamingDataServiceResponse
func (client *Client) CreateStreamingDataServiceWithOptions(request *CreateStreamingDataServiceRequest, runtime *dara.RuntimeOptions) (_result *CreateStreamingDataServiceResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.ServiceDescription) {
		query["ServiceDescription"] = request.ServiceDescription
	}

	if !dara.IsNil(request.ServiceName) {
		query["ServiceName"] = request.ServiceName
	}

	if !dara.IsNil(request.ServiceSpec) {
		query["ServiceSpec"] = request.ServiceSpec
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CreateStreamingDataService"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// # Create External Data Source Configuration
//
// @param request - CreateStreamingDataServiceRequest
//
// @return CreateStreamingDataServiceResponse
func (client *Client) CreateStreamingDataService(request *CreateStreamingDataServiceRequest) (_result *CreateStreamingDataServiceResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.CreateStreamingDataServiceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// # Create External Data Source Configuration
//
// @param request - CreateStreamingDataSourceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateStreamingDataSourceResponse
func (client *Client) CreateStreamingDataSourceWithOptions(request *CreateStreamingDataSourceRequest, runtime *dara.RuntimeOptions) (_result *CreateStreamingDataSourceResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.DataSourceConfig) {
		query["DataSourceConfig"] = request.DataSourceConfig
	}

	if !dara.IsNil(request.DataSourceDescription) {
		query["DataSourceDescription"] = request.DataSourceDescription
	}

	if !dara.IsNil(request.DataSourceName) {
		query["DataSourceName"] = request.DataSourceName
	}

	if !dara.IsNil(request.DataSourceType) {
		query["DataSourceType"] = request.DataSourceType
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.ServiceId) {
		query["ServiceId"] = request.ServiceId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CreateStreamingDataSource"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// # Create External Data Source Configuration
//
// @param request - CreateStreamingDataSourceRequest
//
// @return CreateStreamingDataSourceResponse
func (client *Client) CreateStreamingDataSource(request *CreateStreamingDataSourceRequest) (_result *CreateStreamingDataSourceResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.CreateStreamingDataSourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// # Create External Data Source Configuration
//
// @param tmpReq - CreateStreamingJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateStreamingJobResponse
func (client *Client) CreateStreamingJobWithOptions(tmpReq *CreateStreamingJobRequest, runtime *dara.RuntimeOptions) (_result *CreateStreamingJobResponse, _err error) {
	_err = tmpReq.Validate()
	if _err != nil {
		return _result, _err
	}
	request := &CreateStreamingJobShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !dara.IsNil(tmpReq.DestColumns) {
		request.DestColumnsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.DestColumns, dara.String("DestColumns"), dara.String("json"))
	}

	if !dara.IsNil(tmpReq.MatchColumns) {
		request.MatchColumnsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.MatchColumns, dara.String("MatchColumns"), dara.String("json"))
	}

	if !dara.IsNil(tmpReq.SrcColumns) {
		request.SrcColumnsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.SrcColumns, dara.String("SrcColumns"), dara.String("json"))
	}

	if !dara.IsNil(tmpReq.UpdateColumns) {
		request.UpdateColumnsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.UpdateColumns, dara.String("UpdateColumns"), dara.String("json"))
	}

	query := map[string]interface{}{}
	if !dara.IsNil(request.Account) {
		query["Account"] = request.Account
	}

	if !dara.IsNil(request.Consistency) {
		query["Consistency"] = request.Consistency
	}

	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.DataSourceId) {
		query["DataSourceId"] = request.DataSourceId
	}

	if !dara.IsNil(request.DestColumnsShrink) {
		query["DestColumns"] = request.DestColumnsShrink
	}

	if !dara.IsNil(request.DestDatabase) {
		query["DestDatabase"] = request.DestDatabase
	}

	if !dara.IsNil(request.DestSchema) {
		query["DestSchema"] = request.DestSchema
	}

	if !dara.IsNil(request.DestTable) {
		query["DestTable"] = request.DestTable
	}

	if !dara.IsNil(request.ErrorLimitCount) {
		query["ErrorLimitCount"] = request.ErrorLimitCount
	}

	if !dara.IsNil(request.FallbackOffset) {
		query["FallbackOffset"] = request.FallbackOffset
	}

	if !dara.IsNil(request.GroupName) {
		query["GroupName"] = request.GroupName
	}

	if !dara.IsNil(request.JobConfig) {
		query["JobConfig"] = request.JobConfig
	}

	if !dara.IsNil(request.JobDescription) {
		query["JobDescription"] = request.JobDescription
	}

	if !dara.IsNil(request.JobName) {
		query["JobName"] = request.JobName
	}

	if !dara.IsNil(request.MatchColumnsShrink) {
		query["MatchColumns"] = request.MatchColumnsShrink
	}

	if !dara.IsNil(request.Mode) {
		query["Mode"] = request.Mode
	}

	if !dara.IsNil(request.Password) {
		query["Password"] = request.Password
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.SrcColumnsShrink) {
		query["SrcColumns"] = request.SrcColumnsShrink
	}

	if !dara.IsNil(request.TryRun) {
		query["TryRun"] = request.TryRun
	}

	if !dara.IsNil(request.UpdateColumnsShrink) {
		query["UpdateColumns"] = request.UpdateColumnsShrink
	}

	if !dara.IsNil(request.WriteMode) {
		query["WriteMode"] = request.WriteMode
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CreateStreamingJob"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// # Create External Data Source Configuration
//
// @param request - CreateStreamingJobRequest
//
// @return CreateStreamingJobResponse
func (client *Client) CreateStreamingJob(request *CreateStreamingJobRequest) (_result *CreateStreamingJobResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.CreateStreamingJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// # Create Vector Index
//
// @param request - CreateVectorIndexRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateVectorIndexResponse
func (client *Client) CreateVectorIndexWithOptions(request *CreateVectorIndexRequest, runtime *dara.RuntimeOptions) (_result *CreateVectorIndexResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Collection) {
		query["Collection"] = request.Collection
	}

	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.Dimension) {
		query["Dimension"] = request.Dimension
	}

	if !dara.IsNil(request.ExternalStorage) {
		query["ExternalStorage"] = request.ExternalStorage
	}

	if !dara.IsNil(request.HnswEfConstruction) {
		query["HnswEfConstruction"] = request.HnswEfConstruction
	}

	if !dara.IsNil(request.HnswM) {
		query["HnswM"] = request.HnswM
	}

	if !dara.IsNil(request.ManagerAccount) {
		query["ManagerAccount"] = request.ManagerAccount
	}

	if !dara.IsNil(request.ManagerAccountPassword) {
		query["ManagerAccountPassword"] = request.ManagerAccountPassword
	}

	if !dara.IsNil(request.Metrics) {
		query["Metrics"] = request.Metrics
	}

	if !dara.IsNil(request.Namespace) {
		query["Namespace"] = request.Namespace
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.PqEnable) {
		query["PqEnable"] = request.PqEnable
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.Type) {
		query["Type"] = request.Type
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CreateVectorIndex"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// # Create Vector Index
//
// @param request - CreateVectorIndexRequest
//
// @return CreateVectorIndexResponse
func (client *Client) CreateVectorIndex(request *CreateVectorIndexRequest) (_result *CreateVectorIndexResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.CreateVectorIndexWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 删除数据库账号
//
// @param request - DeleteAccountRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteAccountResponse
func (client *Client) DeleteAccountWithOptions(request *DeleteAccountRequest, runtime *dara.RuntimeOptions) (_result *DeleteAccountResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AccountName) {
		query["AccountName"] = request.AccountName
	}

	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteAccount"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// 删除数据库账号
//
// @param request - DeleteAccountRequest
//
// @return DeleteAccountResponse
func (client *Client) DeleteAccount(request *DeleteAccountRequest) (_result *DeleteAccountResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DeleteAccountWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 删除备份
//
// @param request - DeleteBackupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteBackupResponse
func (client *Client) DeleteBackupWithOptions(request *DeleteBackupRequest, runtime *dara.RuntimeOptions) (_result *DeleteBackupResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.BackupId) {
		query["BackupId"] = request.BackupId
	}

	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteBackup"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// 删除备份
//
// @param request - DeleteBackupRequest
//
// @return DeleteBackupResponse
func (client *Client) DeleteBackup(request *DeleteBackupRequest) (_result *DeleteBackupResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DeleteBackupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a vector collection.
//
// @param request - DeleteCollectionRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteCollectionResponse
func (client *Client) DeleteCollectionWithOptions(request *DeleteCollectionRequest, runtime *dara.RuntimeOptions) (_result *DeleteCollectionResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Collection) {
		query["Collection"] = request.Collection
	}

	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.Namespace) {
		query["Namespace"] = request.Namespace
	}

	if !dara.IsNil(request.NamespacePassword) {
		query["NamespacePassword"] = request.NamespacePassword
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.WorkspaceId) {
		query["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteCollection"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Deletes a vector collection.
//
// @param request - DeleteCollectionRequest
//
// @return DeleteCollectionResponse
func (client *Client) DeleteCollection(request *DeleteCollectionRequest) (_result *DeleteCollectionResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DeleteCollectionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes vector data.
//
// @param request - DeleteCollectionDataRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteCollectionDataResponse
func (client *Client) DeleteCollectionDataWithOptions(request *DeleteCollectionDataRequest, runtime *dara.RuntimeOptions) (_result *DeleteCollectionDataResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Collection) {
		query["Collection"] = request.Collection
	}

	if !dara.IsNil(request.CollectionData) {
		query["CollectionData"] = request.CollectionData
	}

	if !dara.IsNil(request.CollectionDataFilter) {
		query["CollectionDataFilter"] = request.CollectionDataFilter
	}

	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.Namespace) {
		query["Namespace"] = request.Namespace
	}

	if !dara.IsNil(request.NamespacePassword) {
		query["NamespacePassword"] = request.NamespacePassword
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.WorkspaceId) {
		query["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteCollectionData"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Deletes vector data.
//
// @param request - DeleteCollectionDataRequest
//
// @return DeleteCollectionDataResponse
func (client *Client) DeleteCollectionData(request *DeleteCollectionDataRequest) (_result *DeleteCollectionDataResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DeleteCollectionDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Releases a pay-as-you-go AnalyticDB for PostgreSQL instance.
//
// Description:
//
//	  Subscription instances cannot be manually released. They are automatically released when they expire.
//
//		- You can call this operation to release pay-as-you-go instances only when they are in the **Running*	- state.
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - DeleteDBInstanceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteDBInstanceResponse
func (client *Client) DeleteDBInstanceWithOptions(request *DeleteDBInstanceRequest, runtime *dara.RuntimeOptions) (_result *DeleteDBInstanceResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClientToken) {
		query["ClientToken"] = request.ClientToken
	}

	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.ResourceGroupId) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteDBInstance"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Releases a pay-as-you-go AnalyticDB for PostgreSQL instance.
//
// Description:
//
//	  Subscription instances cannot be manually released. They are automatically released when they expire.
//
//		- You can call this operation to release pay-as-you-go instances only when they are in the **Running*	- state.
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - DeleteDBInstanceRequest
//
// @return DeleteDBInstanceResponse
func (client *Client) DeleteDBInstance(request *DeleteDBInstanceRequest) (_result *DeleteDBInstanceResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DeleteDBInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a plan from an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// If you no longer need a plan, you can call this operation to delete the plan. The plan management feature is supported only for AnalyticDB for PostgreSQL instances in Serverless mode.
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - DeleteDBInstancePlanRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteDBInstancePlanResponse
func (client *Client) DeleteDBInstancePlanWithOptions(request *DeleteDBInstancePlanRequest, runtime *dara.RuntimeOptions) (_result *DeleteDBInstancePlanResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.PlanId) {
		query["PlanId"] = request.PlanId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteDBInstancePlan"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Deletes a plan from an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// If you no longer need a plan, you can call this operation to delete the plan. The plan management feature is supported only for AnalyticDB for PostgreSQL instances in Serverless mode.
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - DeleteDBInstancePlanRequest
//
// @return DeleteDBInstancePlanResponse
func (client *Client) DeleteDBInstancePlan(request *DeleteDBInstancePlanRequest) (_result *DeleteDBInstancePlanResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DeleteDBInstancePlanWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a resource group.
//
// @param request - DeleteDBResourceGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteDBResourceGroupResponse
func (client *Client) DeleteDBResourceGroupWithOptions(request *DeleteDBResourceGroupRequest, runtime *dara.RuntimeOptions) (_result *DeleteDBResourceGroupResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.ResourceGroupName) {
		query["ResourceGroupName"] = request.ResourceGroupName
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteDBResourceGroup"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Deletes a resource group.
//
// @param request - DeleteDBResourceGroupRequest
//
// @return DeleteDBResourceGroupResponse
func (client *Client) DeleteDBResourceGroup(request *DeleteDBResourceGroupRequest) (_result *DeleteDBResourceGroupResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DeleteDBResourceGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// # Delete Document
//
// @param request - DeleteDocumentRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteDocumentResponse
func (client *Client) DeleteDocumentWithOptions(request *DeleteDocumentRequest, runtime *dara.RuntimeOptions) (_result *DeleteDocumentResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Collection) {
		query["Collection"] = request.Collection
	}

	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.FileName) {
		query["FileName"] = request.FileName
	}

	if !dara.IsNil(request.Namespace) {
		query["Namespace"] = request.Namespace
	}

	if !dara.IsNil(request.NamespacePassword) {
		query["NamespacePassword"] = request.NamespacePassword
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteDocument"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// # Delete Document
//
// @param request - DeleteDocumentRequest
//
// @return DeleteDocumentResponse
func (client *Client) DeleteDocument(request *DeleteDocumentRequest) (_result *DeleteDocumentResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DeleteDocumentWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// # Delete Knowledge Base
//
// @param request - DeleteDocumentCollectionRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteDocumentCollectionResponse
func (client *Client) DeleteDocumentCollectionWithOptions(request *DeleteDocumentCollectionRequest, runtime *dara.RuntimeOptions) (_result *DeleteDocumentCollectionResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Collection) {
		query["Collection"] = request.Collection
	}

	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.Namespace) {
		query["Namespace"] = request.Namespace
	}

	if !dara.IsNil(request.NamespacePassword) {
		query["NamespacePassword"] = request.NamespacePassword
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteDocumentCollection"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// # Delete Knowledge Base
//
// @param request - DeleteDocumentCollectionRequest
//
// @return DeleteDocumentCollectionResponse
func (client *Client) DeleteDocumentCollection(request *DeleteDocumentCollectionRequest) (_result *DeleteDocumentCollectionResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DeleteDocumentCollectionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Uninstall an extension.
//
// @param request - DeleteExtensionRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteExtensionResponse
func (client *Client) DeleteExtensionWithOptions(request *DeleteExtensionRequest, runtime *dara.RuntimeOptions) (_result *DeleteExtensionResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.DBNames) {
		query["DBNames"] = request.DBNames
	}

	if !dara.IsNil(request.Extension) {
		query["Extension"] = request.Extension
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteExtension"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Uninstall an extension.
//
// @param request - DeleteExtensionRequest
//
// @return DeleteExtensionResponse
func (client *Client) DeleteExtension(request *DeleteExtensionRequest) (_result *DeleteExtensionResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DeleteExtensionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// # Delete External Data Service
//
// @param request - DeleteExternalDataServiceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteExternalDataServiceResponse
func (client *Client) DeleteExternalDataServiceWithOptions(request *DeleteExternalDataServiceRequest, runtime *dara.RuntimeOptions) (_result *DeleteExternalDataServiceResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.ServiceId) {
		query["ServiceId"] = request.ServiceId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteExternalDataService"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// # Delete External Data Service
//
// @param request - DeleteExternalDataServiceRequest
//
// @return DeleteExternalDataServiceResponse
func (client *Client) DeleteExternalDataService(request *DeleteExternalDataServiceRequest) (_result *DeleteExternalDataServiceResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DeleteExternalDataServiceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 删除hadoop数据源
//
// @param request - DeleteHadoopDataSourceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteHadoopDataSourceResponse
func (client *Client) DeleteHadoopDataSourceWithOptions(request *DeleteHadoopDataSourceRequest, runtime *dara.RuntimeOptions) (_result *DeleteHadoopDataSourceResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.DataSourceId) {
		query["DataSourceId"] = request.DataSourceId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteHadoopDataSource"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// 删除hadoop数据源
//
// @param request - DeleteHadoopDataSourceRequest
//
// @return DeleteHadoopDataSourceResponse
func (client *Client) DeleteHadoopDataSource(request *DeleteHadoopDataSourceRequest) (_result *DeleteHadoopDataSourceResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DeleteHadoopDataSourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 删除索引
//
// @param request - DeleteIndexRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteIndexResponse
func (client *Client) DeleteIndexWithOptions(request *DeleteIndexRequest, runtime *dara.RuntimeOptions) (_result *DeleteIndexResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Collection) {
		query["Collection"] = request.Collection
	}

	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.IndexName) {
		query["IndexName"] = request.IndexName
	}

	if !dara.IsNil(request.Namespace) {
		query["Namespace"] = request.Namespace
	}

	if !dara.IsNil(request.NamespacePassword) {
		query["NamespacePassword"] = request.NamespacePassword
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.WorkspaceId) {
		query["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteIndex"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// 删除索引
//
// @param request - DeleteIndexRequest
//
// @return DeleteIndexResponse
func (client *Client) DeleteIndex(request *DeleteIndexRequest) (_result *DeleteIndexResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DeleteIndexWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// # Delete JDBC data source
//
// @param request - DeleteJDBCDataSourceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteJDBCDataSourceResponse
func (client *Client) DeleteJDBCDataSourceWithOptions(request *DeleteJDBCDataSourceRequest, runtime *dara.RuntimeOptions) (_result *DeleteJDBCDataSourceResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.DataSourceId) {
		query["DataSourceId"] = request.DataSourceId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteJDBCDataSource"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// # Delete JDBC data source
//
// @param request - DeleteJDBCDataSourceRequest
//
// @return DeleteJDBCDataSourceResponse
func (client *Client) DeleteJDBCDataSource(request *DeleteJDBCDataSourceRequest) (_result *DeleteJDBCDataSourceResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DeleteJDBCDataSourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a namespace.
//
// @param request - DeleteNamespaceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteNamespaceResponse
func (client *Client) DeleteNamespaceWithOptions(request *DeleteNamespaceRequest, runtime *dara.RuntimeOptions) (_result *DeleteNamespaceResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.ManagerAccount) {
		query["ManagerAccount"] = request.ManagerAccount
	}

	if !dara.IsNil(request.ManagerAccountPassword) {
		query["ManagerAccountPassword"] = request.ManagerAccountPassword
	}

	if !dara.IsNil(request.Namespace) {
		query["Namespace"] = request.Namespace
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.WorkspaceId) {
		query["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteNamespace"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Deletes a namespace.
//
// @param request - DeleteNamespaceRequest
//
// @return DeleteNamespaceResponse
func (client *Client) DeleteNamespace(request *DeleteNamespaceRequest) (_result *DeleteNamespaceResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DeleteNamespaceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a remote AnalyticDB data source.
//
// @param request - DeleteRemoteADBDataSourceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteRemoteADBDataSourceResponse
func (client *Client) DeleteRemoteADBDataSourceWithOptions(request *DeleteRemoteADBDataSourceRequest, runtime *dara.RuntimeOptions) (_result *DeleteRemoteADBDataSourceResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DataSourceId) {
		query["DataSourceId"] = request.DataSourceId
	}

	if !dara.IsNil(request.LocalDBInstanceId) {
		query["LocalDBInstanceId"] = request.LocalDBInstanceId
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteRemoteADBDataSource"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Deletes a remote AnalyticDB data source.
//
// @param request - DeleteRemoteADBDataSourceRequest
//
// @return DeleteRemoteADBDataSourceResponse
func (client *Client) DeleteRemoteADBDataSource(request *DeleteRemoteADBDataSourceRequest) (_result *DeleteRemoteADBDataSourceResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DeleteRemoteADBDataSourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes the access credentials of an AnalyticDB for PostgreSQL instance.
//
// @param request - DeleteSecretRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteSecretResponse
func (client *Client) DeleteSecretWithOptions(request *DeleteSecretRequest, runtime *dara.RuntimeOptions) (_result *DeleteSecretResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.SecretArn) {
		query["SecretArn"] = request.SecretArn
	}

	if !dara.IsNil(request.SecretName) {
		query["SecretName"] = request.SecretName
	}

	if !dara.IsNil(request.WorkspaceId) {
		query["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteSecret"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Deletes the access credentials of an AnalyticDB for PostgreSQL instance.
//
// @param request - DeleteSecretRequest
//
// @return DeleteSecretResponse
func (client *Client) DeleteSecret(request *DeleteSecretRequest) (_result *DeleteSecretResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DeleteSecretWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a real-time data service.
//
// @param request - DeleteStreamingDataServiceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteStreamingDataServiceResponse
func (client *Client) DeleteStreamingDataServiceWithOptions(request *DeleteStreamingDataServiceRequest, runtime *dara.RuntimeOptions) (_result *DeleteStreamingDataServiceResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.ServiceId) {
		query["ServiceId"] = request.ServiceId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteStreamingDataService"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Deletes a real-time data service.
//
// @param request - DeleteStreamingDataServiceRequest
//
// @return DeleteStreamingDataServiceResponse
func (client *Client) DeleteStreamingDataService(request *DeleteStreamingDataServiceRequest) (_result *DeleteStreamingDataServiceResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DeleteStreamingDataServiceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a real-time data source.
//
// @param request - DeleteStreamingDataSourceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteStreamingDataSourceResponse
func (client *Client) DeleteStreamingDataSourceWithOptions(request *DeleteStreamingDataSourceRequest, runtime *dara.RuntimeOptions) (_result *DeleteStreamingDataSourceResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.DataSourceId) {
		query["DataSourceId"] = request.DataSourceId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteStreamingDataSource"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Deletes a real-time data source.
//
// @param request - DeleteStreamingDataSourceRequest
//
// @return DeleteStreamingDataSourceResponse
func (client *Client) DeleteStreamingDataSource(request *DeleteStreamingDataSourceRequest) (_result *DeleteStreamingDataSourceResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DeleteStreamingDataSourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a real-time data service job.
//
// @param request - DeleteStreamingJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteStreamingJobResponse
func (client *Client) DeleteStreamingJobWithOptions(request *DeleteStreamingJobRequest, runtime *dara.RuntimeOptions) (_result *DeleteStreamingJobResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.JobId) {
		query["JobId"] = request.JobId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteStreamingJob"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Deletes a real-time data service job.
//
// @param request - DeleteStreamingJobRequest
//
// @return DeleteStreamingJobResponse
func (client *Client) DeleteStreamingJob(request *DeleteStreamingJobRequest) (_result *DeleteStreamingJobResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DeleteStreamingJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a vector index.
//
// @param request - DeleteVectorIndexRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteVectorIndexResponse
func (client *Client) DeleteVectorIndexWithOptions(request *DeleteVectorIndexRequest, runtime *dara.RuntimeOptions) (_result *DeleteVectorIndexResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Collection) {
		query["Collection"] = request.Collection
	}

	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.ManagerAccount) {
		query["ManagerAccount"] = request.ManagerAccount
	}

	if !dara.IsNil(request.ManagerAccountPassword) {
		query["ManagerAccountPassword"] = request.ManagerAccountPassword
	}

	if !dara.IsNil(request.Namespace) {
		query["Namespace"] = request.Namespace
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.Type) {
		query["Type"] = request.Type
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteVectorIndex"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Deletes a vector index.
//
// @param request - DeleteVectorIndexRequest
//
// @return DeleteVectorIndexResponse
func (client *Client) DeleteVectorIndex(request *DeleteVectorIndexRequest) (_result *DeleteVectorIndexResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DeleteVectorIndexWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about database accounts for an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// This operation is called to query the information of the privileged account in an AnalyticDB for PostgreSQL instance, such as its state, description, and the instance.
//
// ## Limit
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered and may affect your business. We recommend that you take note of the limit when you call this operation.
//
// @param request - DescribeAccountsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeAccountsResponse
func (client *Client) DescribeAccountsWithOptions(request *DescribeAccountsRequest, runtime *dara.RuntimeOptions) (_result *DescribeAccountsResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AccountName) {
		query["AccountName"] = request.AccountName
	}

	if !dara.IsNil(request.AccountType) {
		query["AccountType"] = request.AccountType
	}

	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeAccounts"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the information about database accounts for an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// This operation is called to query the information of the privileged account in an AnalyticDB for PostgreSQL instance, such as its state, description, and the instance.
//
// ## Limit
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered and may affect your business. We recommend that you take note of the limit when you call this operation.
//
// @param request - DescribeAccountsRequest
//
// @return DescribeAccountsResponse
func (client *Client) DescribeAccounts(request *DescribeAccountsRequest) (_result *DescribeAccountsResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DescribeAccountsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries active SQL records.
//
// @param request - DescribeActiveSQLRecordsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeActiveSQLRecordsResponse
func (client *Client) DescribeActiveSQLRecordsWithOptions(request *DescribeActiveSQLRecordsRequest, runtime *dara.RuntimeOptions) (_result *DescribeActiveSQLRecordsResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.Database) {
		query["Database"] = request.Database
	}

	if !dara.IsNil(request.EndTime) {
		query["EndTime"] = request.EndTime
	}

	if !dara.IsNil(request.Keyword) {
		query["Keyword"] = request.Keyword
	}

	if !dara.IsNil(request.MaxDuration) {
		query["MaxDuration"] = request.MaxDuration
	}

	if !dara.IsNil(request.MinDuration) {
		query["MinDuration"] = request.MinDuration
	}

	if !dara.IsNil(request.Order) {
		query["Order"] = request.Order
	}

	if !dara.IsNil(request.StartTime) {
		query["StartTime"] = request.StartTime
	}

	if !dara.IsNil(request.User) {
		query["User"] = request.User
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeActiveSQLRecords"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries active SQL records.
//
// @param request - DescribeActiveSQLRecordsRequest
//
// @return DescribeActiveSQLRecordsResponse
func (client *Client) DescribeActiveSQLRecords(request *DescribeActiveSQLRecordsRequest) (_result *DescribeActiveSQLRecordsResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DescribeActiveSQLRecordsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about available resources of AnalyticDB for PostgreSQL.
//
// Description:
//
// When you create an AnalyticDB for PostgreSQL instance, you can call this operation to query the available resources within a zone.
//
// @param request - DescribeAvailableResourcesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeAvailableResourcesResponse
func (client *Client) DescribeAvailableResourcesWithOptions(request *DescribeAvailableResourcesRequest, runtime *dara.RuntimeOptions) (_result *DescribeAvailableResourcesResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ChargeType) {
		query["ChargeType"] = request.ChargeType
	}

	if !dara.IsNil(request.Region) {
		query["Region"] = request.Region
	}

	if !dara.IsNil(request.ZoneId) {
		query["ZoneId"] = request.ZoneId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeAvailableResources"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the information about available resources of AnalyticDB for PostgreSQL.
//
// Description:
//
// When you create an AnalyticDB for PostgreSQL instance, you can call this operation to query the available resources within a zone.
//
// @param request - DescribeAvailableResourcesRequest
//
// @return DescribeAvailableResourcesResponse
func (client *Client) DescribeAvailableResources(request *DescribeAvailableResourcesRequest) (_result *DescribeAvailableResourcesResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DescribeAvailableResourcesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取备份任务详情
//
// @param request - DescribeBackupJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeBackupJobResponse
func (client *Client) DescribeBackupJobWithOptions(request *DescribeBackupJobRequest, runtime *dara.RuntimeOptions) (_result *DescribeBackupJobResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.BackupJobId) {
		query["BackupJobId"] = request.BackupJobId
	}

	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeBackupJob"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// 获取备份任务详情
//
// @param request - DescribeBackupJobRequest
//
// @return DescribeBackupJobResponse
func (client *Client) DescribeBackupJob(request *DescribeBackupJobRequest) (_result *DescribeBackupJobResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DescribeBackupJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the backup policy of an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// You can call this operation to query the backup settings of an AnalyticDB for PostgreSQL instance in elastic storage mode. Periodically backing data can prevent data loss. For more information about how to modify backup policies, see [ModifyBackupPolicy](https://help.aliyun.com/document_detail/210095.html).
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - DescribeBackupPolicyRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeBackupPolicyResponse
func (client *Client) DescribeBackupPolicyWithOptions(request *DescribeBackupPolicyRequest, runtime *dara.RuntimeOptions) (_result *DescribeBackupPolicyResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeBackupPolicy"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the backup policy of an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// You can call this operation to query the backup settings of an AnalyticDB for PostgreSQL instance in elastic storage mode. Periodically backing data can prevent data loss. For more information about how to modify backup policies, see [ModifyBackupPolicy](https://help.aliyun.com/document_detail/210095.html).
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - DescribeBackupPolicyRequest
//
// @return DescribeBackupPolicyResponse
func (client *Client) DescribeBackupPolicy(request *DescribeBackupPolicyRequest) (_result *DescribeBackupPolicyResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DescribeBackupPolicyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about a vector collection.
//
// @param request - DescribeCollectionRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeCollectionResponse
func (client *Client) DescribeCollectionWithOptions(request *DescribeCollectionRequest, runtime *dara.RuntimeOptions) (_result *DescribeCollectionResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Collection) {
		query["Collection"] = request.Collection
	}

	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.Namespace) {
		query["Namespace"] = request.Namespace
	}

	if !dara.IsNil(request.NamespacePassword) {
		query["NamespacePassword"] = request.NamespacePassword
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.WorkspaceId) {
		query["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeCollection"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the information about a vector collection.
//
// @param request - DescribeCollectionRequest
//
// @return DescribeCollectionResponse
func (client *Client) DescribeCollection(request *DescribeCollectionRequest) (_result *DescribeCollectionResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DescribeCollectionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取创建索引任务
//
// @param request - DescribeCreateIndexJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeCreateIndexJobResponse
func (client *Client) DescribeCreateIndexJobWithOptions(request *DescribeCreateIndexJobRequest, runtime *dara.RuntimeOptions) (_result *DescribeCreateIndexJobResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Collection) {
		query["Collection"] = request.Collection
	}

	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.JobId) {
		query["JobId"] = request.JobId
	}

	if !dara.IsNil(request.Namespace) {
		query["Namespace"] = request.Namespace
	}

	if !dara.IsNil(request.NamespacePassword) {
		query["NamespacePassword"] = request.NamespacePassword
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.WorkspaceId) {
		query["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeCreateIndexJob"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// 获取创建索引任务
//
// @param request - DescribeCreateIndexJobRequest
//
// @return DescribeCreateIndexJobResponse
func (client *Client) DescribeCreateIndexJob(request *DescribeCreateIndexJobRequest) (_result *DescribeCreateIndexJobResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DescribeCreateIndexJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of nodes in an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// ##
//
// You can call this operation to query the information about coordinator and compute nodes in an AnalyticDB for PostgreSQL instance in elastic storage mode or Serverless mode.
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - DescribeDBClusterNodeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDBClusterNodeResponse
func (client *Client) DescribeDBClusterNodeWithOptions(request *DescribeDBClusterNodeRequest, runtime *dara.RuntimeOptions) (_result *DescribeDBClusterNodeResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.NodeType) {
		query["NodeType"] = request.NodeType
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeDBClusterNode"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries a list of nodes in an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// ##
//
// You can call this operation to query the information about coordinator and compute nodes in an AnalyticDB for PostgreSQL instance in elastic storage mode or Serverless mode.
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - DescribeDBClusterNodeRequest
//
// @return DescribeDBClusterNodeResponse
func (client *Client) DescribeDBClusterNode(request *DescribeDBClusterNodeRequest) (_result *DescribeDBClusterNodeResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DescribeDBClusterNodeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about performance metrics of an AnalyticDB for PostgreSQL instance within a time range.
//
// Description:
//
// You can query monitoring information only within the last 30 days.
//
// @param request - DescribeDBClusterPerformanceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDBClusterPerformanceResponse
func (client *Client) DescribeDBClusterPerformanceWithOptions(request *DescribeDBClusterPerformanceRequest, runtime *dara.RuntimeOptions) (_result *DescribeDBClusterPerformanceResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.EndTime) {
		query["EndTime"] = request.EndTime
	}

	if !dara.IsNil(request.Key) {
		query["Key"] = request.Key
	}

	if !dara.IsNil(request.NodeType) {
		query["NodeType"] = request.NodeType
	}

	if !dara.IsNil(request.Nodes) {
		query["Nodes"] = request.Nodes
	}

	if !dara.IsNil(request.ResourceGroupName) {
		query["ResourceGroupName"] = request.ResourceGroupName
	}

	if !dara.IsNil(request.StartTime) {
		query["StartTime"] = request.StartTime
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeDBClusterPerformance"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the information about performance metrics of an AnalyticDB for PostgreSQL instance within a time range.
//
// Description:
//
// You can query monitoring information only within the last 30 days.
//
// @param request - DescribeDBClusterPerformanceRequest
//
// @return DescribeDBClusterPerformanceResponse
func (client *Client) DescribeDBClusterPerformance(request *DescribeDBClusterPerformanceRequest) (_result *DescribeDBClusterPerformanceResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DescribeDBClusterPerformanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Query detailed information about the instance.
//
// Description:
//
// ## Usage Instructions
//
// This interface is generally used to view information such as the specifications, network type, and instance status of AnalyticDB for PostgreSQL instances.
//
// ## QPS Limitation
//
// The default single-user QPS limit for this interface is 1000 times/second. If the limit is exceeded, API calls will be throttled, which may affect your business. Please use it reasonably.
//
// <props="china">The QPS in this document is only a default reference value. For accurate information, please refer to the [API Rate Quota List](https://quotas.console.aliyun.com/flow-control-products/gpdb/quotas).
//
// @param request - DescribeDBInstanceAttributeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDBInstanceAttributeResponse
func (client *Client) DescribeDBInstanceAttributeWithOptions(request *DescribeDBInstanceAttributeRequest, runtime *dara.RuntimeOptions) (_result *DescribeDBInstanceAttributeResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.ResourceGroupId) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeDBInstanceAttribute"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Query detailed information about the instance.
//
// Description:
//
// ## Usage Instructions
//
// This interface is generally used to view information such as the specifications, network type, and instance status of AnalyticDB for PostgreSQL instances.
//
// ## QPS Limitation
//
// The default single-user QPS limit for this interface is 1000 times/second. If the limit is exceeded, API calls will be throttled, which may affect your business. Please use it reasonably.
//
// <props="china">The QPS in this document is only a default reference value. For accurate information, please refer to the [API Rate Quota List](https://quotas.console.aliyun.com/flow-control-products/gpdb/quotas).
//
// @param request - DescribeDBInstanceAttributeRequest
//
// @return DescribeDBInstanceAttributeResponse
func (client *Client) DescribeDBInstanceAttribute(request *DescribeDBInstanceAttributeRequest) (_result *DescribeDBInstanceAttributeResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DescribeDBInstanceAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about data bloat for an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// You can call this operation to query the details of data bloat on an AnalyticDB for PostgreSQL instance in elastic storage mode. The minor version of the instance must be V6.3.10.1 or later. For more information about how to view and update the minor version of an instance, see [View the minor engine version](https://help.aliyun.com/document_detail/277424.html) and [Update the minor engine version](https://help.aliyun.com/document_detail/139271.html).
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - DescribeDBInstanceDataBloatRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDBInstanceDataBloatResponse
func (client *Client) DescribeDBInstanceDataBloatWithOptions(request *DescribeDBInstanceDataBloatRequest, runtime *dara.RuntimeOptions) (_result *DescribeDBInstanceDataBloatResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.Database) {
		query["Database"] = request.Database
	}

	if !dara.IsNil(request.OrderBy) {
		query["OrderBy"] = request.OrderBy
	}

	if !dara.IsNil(request.PageNumber) {
		query["PageNumber"] = request.PageNumber
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeDBInstanceDataBloat"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the information about data bloat for an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// You can call this operation to query the details of data bloat on an AnalyticDB for PostgreSQL instance in elastic storage mode. The minor version of the instance must be V6.3.10.1 or later. For more information about how to view and update the minor version of an instance, see [View the minor engine version](https://help.aliyun.com/document_detail/277424.html) and [Update the minor engine version](https://help.aliyun.com/document_detail/139271.html).
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - DescribeDBInstanceDataBloatRequest
//
// @return DescribeDBInstanceDataBloatResponse
func (client *Client) DescribeDBInstanceDataBloat(request *DescribeDBInstanceDataBloatRequest) (_result *DescribeDBInstanceDataBloatResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DescribeDBInstanceDataBloatWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about data skew for an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// To prevent data skew from affecting your database service, you can call this operation to query the details about data skew on an AnalyticDB for PostgreSQL instance.
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - DescribeDBInstanceDataSkewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDBInstanceDataSkewResponse
func (client *Client) DescribeDBInstanceDataSkewWithOptions(request *DescribeDBInstanceDataSkewRequest, runtime *dara.RuntimeOptions) (_result *DescribeDBInstanceDataSkewResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.Database) {
		query["Database"] = request.Database
	}

	if !dara.IsNil(request.OrderBy) {
		query["OrderBy"] = request.OrderBy
	}

	if !dara.IsNil(request.PageNumber) {
		query["PageNumber"] = request.PageNumber
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeDBInstanceDataSkew"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the information about data skew for an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// To prevent data skew from affecting your database service, you can call this operation to query the details about data skew on an AnalyticDB for PostgreSQL instance.
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - DescribeDBInstanceDataSkewRequest
//
// @return DescribeDBInstanceDataSkewResponse
func (client *Client) DescribeDBInstanceDataSkew(request *DescribeDBInstanceDataSkewRequest) (_result *DescribeDBInstanceDataSkewResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DescribeDBInstanceDataSkewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about nodes in an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// You can call this operation to query the distribution and states of coordinator and compute nodes in an AnalyticDB for PostgreSQL instance.
//
// @param request - DescribeDBInstanceDiagnosisSummaryRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDBInstanceDiagnosisSummaryResponse
func (client *Client) DescribeDBInstanceDiagnosisSummaryWithOptions(request *DescribeDBInstanceDiagnosisSummaryRequest, runtime *dara.RuntimeOptions) (_result *DescribeDBInstanceDiagnosisSummaryResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.PageNumber) {
		query["PageNumber"] = request.PageNumber
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.RolePreferd) {
		query["RolePreferd"] = request.RolePreferd
	}

	if !dara.IsNil(request.StartStatus) {
		query["StartStatus"] = request.StartStatus
	}

	if !dara.IsNil(request.SyncMode) {
		query["SyncMode"] = request.SyncMode
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeDBInstanceDiagnosisSummary"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the information about nodes in an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// You can call this operation to query the distribution and states of coordinator and compute nodes in an AnalyticDB for PostgreSQL instance.
//
// @param request - DescribeDBInstanceDiagnosisSummaryRequest
//
// @return DescribeDBInstanceDiagnosisSummaryResponse
func (client *Client) DescribeDBInstanceDiagnosisSummary(request *DescribeDBInstanceDiagnosisSummaryRequest) (_result *DescribeDBInstanceDiagnosisSummaryResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DescribeDBInstanceDiagnosisSummaryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the error logs of an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// You can call this operation to query the error logs of an AnalyticDB for PostgreSQL instance.
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - DescribeDBInstanceErrorLogRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDBInstanceErrorLogResponse
func (client *Client) DescribeDBInstanceErrorLogWithOptions(request *DescribeDBInstanceErrorLogRequest, runtime *dara.RuntimeOptions) (_result *DescribeDBInstanceErrorLogResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.Database) {
		query["Database"] = request.Database
	}

	if !dara.IsNil(request.EndTime) {
		query["EndTime"] = request.EndTime
	}

	if !dara.IsNil(request.Host) {
		query["Host"] = request.Host
	}

	if !dara.IsNil(request.Keywords) {
		query["Keywords"] = request.Keywords
	}

	if !dara.IsNil(request.LogLevel) {
		query["LogLevel"] = request.LogLevel
	}

	if !dara.IsNil(request.PageNumber) {
		query["PageNumber"] = request.PageNumber
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.StartTime) {
		query["StartTime"] = request.StartTime
	}

	if !dara.IsNil(request.User) {
		query["User"] = request.User
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeDBInstanceErrorLog"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the error logs of an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// You can call this operation to query the error logs of an AnalyticDB for PostgreSQL instance.
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - DescribeDBInstanceErrorLogRequest
//
// @return DescribeDBInstanceErrorLogResponse
func (client *Client) DescribeDBInstanceErrorLog(request *DescribeDBInstanceErrorLogRequest) (_result *DescribeDBInstanceErrorLogResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DescribeDBInstanceErrorLogWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the whitelists of IP addresses that are allowed to access an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// You can call this operation to query the whitelists of IP addresses that are allowed to access an AnalyticDB for PostgreSQL instance.
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - DescribeDBInstanceIPArrayListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDBInstanceIPArrayListResponse
func (client *Client) DescribeDBInstanceIPArrayListWithOptions(request *DescribeDBInstanceIPArrayListRequest, runtime *dara.RuntimeOptions) (_result *DescribeDBInstanceIPArrayListResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceIPArrayName) {
		query["DBInstanceIPArrayName"] = request.DBInstanceIPArrayName
	}

	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.ResourceGroupId) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeDBInstanceIPArrayList"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the whitelists of IP addresses that are allowed to access an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// You can call this operation to query the whitelists of IP addresses that are allowed to access an AnalyticDB for PostgreSQL instance.
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - DescribeDBInstanceIPArrayListRequest
//
// @return DescribeDBInstanceIPArrayListResponse
func (client *Client) DescribeDBInstanceIPArrayList(request *DescribeDBInstanceIPArrayListRequest) (_result *DescribeDBInstanceIPArrayListResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DescribeDBInstanceIPArrayListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the index usage of an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// Appropriate indexes can accelerate database queries. You can call this operation to query the index usage of an AnalyticDB for PostgreSQL instance.
//
// This operation is available only for instances of V6.3.10.1 or later in elastic storage mode. For information about how to view and update the minor version of an instance, see [View the minor engine version](https://help.aliyun.com/document_detail/277424.html) and [Update the minor engine version](https://help.aliyun.com/document_detail/139271.html).
//
// @param request - DescribeDBInstanceIndexUsageRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDBInstanceIndexUsageResponse
func (client *Client) DescribeDBInstanceIndexUsageWithOptions(request *DescribeDBInstanceIndexUsageRequest, runtime *dara.RuntimeOptions) (_result *DescribeDBInstanceIndexUsageResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.Database) {
		query["Database"] = request.Database
	}

	if !dara.IsNil(request.OrderBy) {
		query["OrderBy"] = request.OrderBy
	}

	if !dara.IsNil(request.PageNumber) {
		query["PageNumber"] = request.PageNumber
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeDBInstanceIndexUsage"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the index usage of an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// Appropriate indexes can accelerate database queries. You can call this operation to query the index usage of an AnalyticDB for PostgreSQL instance.
//
// This operation is available only for instances of V6.3.10.1 or later in elastic storage mode. For information about how to view and update the minor version of an instance, see [View the minor engine version](https://help.aliyun.com/document_detail/277424.html) and [Update the minor engine version](https://help.aliyun.com/document_detail/139271.html).
//
// @param request - DescribeDBInstanceIndexUsageRequest
//
// @return DescribeDBInstanceIndexUsageResponse
func (client *Client) DescribeDBInstanceIndexUsage(request *DescribeDBInstanceIndexUsageRequest) (_result *DescribeDBInstanceIndexUsageResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DescribeDBInstanceIndexUsageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the connection information of an instance.
//
// @param request - DescribeDBInstanceNetInfoRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDBInstanceNetInfoResponse
func (client *Client) DescribeDBInstanceNetInfoWithOptions(request *DescribeDBInstanceNetInfoRequest, runtime *dara.RuntimeOptions) (_result *DescribeDBInstanceNetInfoResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ConnectionString) {
		query["ConnectionString"] = request.ConnectionString
	}

	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeDBInstanceNetInfo"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the connection information of an instance.
//
// @param request - DescribeDBInstanceNetInfoRequest
//
// @return DescribeDBInstanceNetInfoResponse
func (client *Client) DescribeDBInstanceNetInfo(request *DescribeDBInstanceNetInfoRequest) (_result *DescribeDBInstanceNetInfoResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DescribeDBInstanceNetInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about performance metrics of an AnalyticDB for PostgreSQL instance within a time range.
//
// @param request - DescribeDBInstancePerformanceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDBInstancePerformanceResponse
func (client *Client) DescribeDBInstancePerformanceWithOptions(request *DescribeDBInstancePerformanceRequest, runtime *dara.RuntimeOptions) (_result *DescribeDBInstancePerformanceResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.EndTime) {
		query["EndTime"] = request.EndTime
	}

	if !dara.IsNil(request.Key) {
		query["Key"] = request.Key
	}

	if !dara.IsNil(request.ResourceGroupId) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !dara.IsNil(request.StartTime) {
		query["StartTime"] = request.StartTime
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeDBInstancePerformance"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the information about performance metrics of an AnalyticDB for PostgreSQL instance within a time range.
//
// @param request - DescribeDBInstancePerformanceRequest
//
// @return DescribeDBInstancePerformanceResponse
func (client *Client) DescribeDBInstancePerformance(request *DescribeDBInstancePerformanceRequest) (_result *DescribeDBInstancePerformanceResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DescribeDBInstancePerformanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about plans for an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// You can call this operation to query the details of plans for an AnalyticDB for PostgreSQL instance in Serverless mode.
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - DescribeDBInstancePlansRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDBInstancePlansResponse
func (client *Client) DescribeDBInstancePlansWithOptions(request *DescribeDBInstancePlansRequest, runtime *dara.RuntimeOptions) (_result *DescribeDBInstancePlansResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.PlanCreateDate) {
		query["PlanCreateDate"] = request.PlanCreateDate
	}

	if !dara.IsNil(request.PlanDesc) {
		query["PlanDesc"] = request.PlanDesc
	}

	if !dara.IsNil(request.PlanId) {
		query["PlanId"] = request.PlanId
	}

	if !dara.IsNil(request.PlanScheduleType) {
		query["PlanScheduleType"] = request.PlanScheduleType
	}

	if !dara.IsNil(request.PlanType) {
		query["PlanType"] = request.PlanType
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeDBInstancePlans"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the information about plans for an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// You can call this operation to query the details of plans for an AnalyticDB for PostgreSQL instance in Serverless mode.
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - DescribeDBInstancePlansRequest
//
// @return DescribeDBInstancePlansResponse
func (client *Client) DescribeDBInstancePlans(request *DescribeDBInstancePlansRequest) (_result *DescribeDBInstancePlansResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DescribeDBInstancePlansWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the SSL information about an AnalyticDB for PostgreSQL instance.
//
// @param request - DescribeDBInstanceSSLRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDBInstanceSSLResponse
func (client *Client) DescribeDBInstanceSSLWithOptions(request *DescribeDBInstanceSSLRequest, runtime *dara.RuntimeOptions) (_result *DescribeDBInstanceSSLResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeDBInstanceSSL"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the SSL information about an AnalyticDB for PostgreSQL instance.
//
// @param request - DescribeDBInstanceSSLRequest
//
// @return DescribeDBInstanceSSLResponse
func (client *Client) DescribeDBInstanceSSL(request *DescribeDBInstanceSSLRequest) (_result *DescribeDBInstanceSSLResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DescribeDBInstanceSSLWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the maximum performance of an AnalyticDB for PostgreSQL instance.
//
// @param request - DescribeDBInstanceSupportMaxPerformanceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDBInstanceSupportMaxPerformanceResponse
func (client *Client) DescribeDBInstanceSupportMaxPerformanceWithOptions(request *DescribeDBInstanceSupportMaxPerformanceRequest, runtime *dara.RuntimeOptions) (_result *DescribeDBInstanceSupportMaxPerformanceResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeDBInstanceSupportMaxPerformance"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the maximum performance of an AnalyticDB for PostgreSQL instance.
//
// @param request - DescribeDBInstanceSupportMaxPerformanceRequest
//
// @return DescribeDBInstanceSupportMaxPerformanceResponse
func (client *Client) DescribeDBInstanceSupportMaxPerformance(request *DescribeDBInstanceSupportMaxPerformanceRequest) (_result *DescribeDBInstanceSupportMaxPerformanceResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DescribeDBInstanceSupportMaxPerformanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of AnalyticDB for PostgreSQL instances.
//
// Description:
//
// ##
//
// You can call this operation to query the instance types, network types, and states of AnalyticDB for PostgreSQL instances within a region.
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param tmpReq - DescribeDBInstancesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDBInstancesResponse
func (client *Client) DescribeDBInstancesWithOptions(tmpReq *DescribeDBInstancesRequest, runtime *dara.RuntimeOptions) (_result *DescribeDBInstancesResponse, _err error) {
	_err = tmpReq.Validate()
	if _err != nil {
		return _result, _err
	}
	request := &DescribeDBInstancesShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !dara.IsNil(tmpReq.DBInstanceCategories) {
		request.DBInstanceCategoriesShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.DBInstanceCategories, dara.String("DBInstanceCategories"), dara.String("simple"))
	}

	if !dara.IsNil(tmpReq.DBInstanceModes) {
		request.DBInstanceModesShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.DBInstanceModes, dara.String("DBInstanceModes"), dara.String("simple"))
	}

	if !dara.IsNil(tmpReq.DBInstanceStatuses) {
		request.DBInstanceStatusesShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.DBInstanceStatuses, dara.String("DBInstanceStatuses"), dara.String("simple"))
	}

	if !dara.IsNil(tmpReq.InstanceDeployTypes) {
		request.InstanceDeployTypesShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.InstanceDeployTypes, dara.String("InstanceDeployTypes"), dara.String("simple"))
	}

	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceCategoriesShrink) {
		query["DBInstanceCategories"] = request.DBInstanceCategoriesShrink
	}

	if !dara.IsNil(request.DBInstanceDescription) {
		query["DBInstanceDescription"] = request.DBInstanceDescription
	}

	if !dara.IsNil(request.DBInstanceIds) {
		query["DBInstanceIds"] = request.DBInstanceIds
	}

	if !dara.IsNil(request.DBInstanceModesShrink) {
		query["DBInstanceModes"] = request.DBInstanceModesShrink
	}

	if !dara.IsNil(request.DBInstanceStatusesShrink) {
		query["DBInstanceStatuses"] = request.DBInstanceStatusesShrink
	}

	if !dara.IsNil(request.InstanceDeployTypesShrink) {
		query["InstanceDeployTypes"] = request.InstanceDeployTypesShrink
	}

	if !dara.IsNil(request.InstanceNetworkType) {
		query["InstanceNetworkType"] = request.InstanceNetworkType
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.PageNumber) {
		query["PageNumber"] = request.PageNumber
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.ResourceGroupId) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !dara.IsNil(request.Tag) {
		query["Tag"] = request.Tag
	}

	if !dara.IsNil(request.VpcId) {
		query["VpcId"] = request.VpcId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeDBInstances"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries a list of AnalyticDB for PostgreSQL instances.
//
// Description:
//
// ##
//
// You can call this operation to query the instance types, network types, and states of AnalyticDB for PostgreSQL instances within a region.
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - DescribeDBInstancesRequest
//
// @return DescribeDBInstancesResponse
func (client *Client) DescribeDBInstances(request *DescribeDBInstancesRequest) (_result *DescribeDBInstancesResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DescribeDBInstancesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about resource groups.
//
// @param request - DescribeDBResourceGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDBResourceGroupResponse
func (client *Client) DescribeDBResourceGroupWithOptions(request *DescribeDBResourceGroupRequest, runtime *dara.RuntimeOptions) (_result *DescribeDBResourceGroupResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.ResourceGroupName) {
		query["ResourceGroupName"] = request.ResourceGroupName
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeDBResourceGroup"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the information about resource groups.
//
// @param request - DescribeDBResourceGroupRequest
//
// @return DescribeDBResourceGroupResponse
func (client *Client) DescribeDBResourceGroup(request *DescribeDBResourceGroupRequest) (_result *DescribeDBResourceGroupResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DescribeDBResourceGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the resource management mode of an AnalyticDB for PostgreSQL instance.
//
// @param request - DescribeDBResourceManagementModeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDBResourceManagementModeResponse
func (client *Client) DescribeDBResourceManagementModeWithOptions(request *DescribeDBResourceManagementModeRequest, runtime *dara.RuntimeOptions) (_result *DescribeDBResourceManagementModeResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeDBResourceManagementMode"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the resource management mode of an AnalyticDB for PostgreSQL instance.
//
// @param request - DescribeDBResourceManagementModeRequest
//
// @return DescribeDBResourceManagementModeResponse
func (client *Client) DescribeDBResourceManagementMode(request *DescribeDBResourceManagementModeRequest) (_result *DescribeDBResourceManagementModeResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DescribeDBResourceManagementModeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about minor versions of AnalyticDB for PostgreSQL instances.
//
// @param request - DescribeDBVersionInfosRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDBVersionInfosResponse
func (client *Client) DescribeDBVersionInfosWithOptions(request *DescribeDBVersionInfosRequest, runtime *dara.RuntimeOptions) (_result *DescribeDBVersionInfosResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceMode) {
		query["DBInstanceMode"] = request.DBInstanceMode
	}

	if !dara.IsNil(request.DBVersion) {
		query["DBVersion"] = request.DBVersion
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.ResourceGroupId) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeDBVersionInfos"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the information about minor versions of AnalyticDB for PostgreSQL instances.
//
// @param request - DescribeDBVersionInfosRequest
//
// @return DescribeDBVersionInfosResponse
func (client *Client) DescribeDBVersionInfos(request *DescribeDBVersionInfosRequest) (_result *DescribeDBVersionInfosResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DescribeDBVersionInfosWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of backup sets of full backup or point-in-time backup for an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// You can call this operation to query a list of backup sets and backup details only for instances in elastic storage mode.
//
// @param request - DescribeDataBackupsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDataBackupsResponse
func (client *Client) DescribeDataBackupsWithOptions(request *DescribeDataBackupsRequest, runtime *dara.RuntimeOptions) (_result *DescribeDataBackupsResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.BackupId) {
		query["BackupId"] = request.BackupId
	}

	if !dara.IsNil(request.BackupMode) {
		query["BackupMode"] = request.BackupMode
	}

	if !dara.IsNil(request.BackupStatus) {
		query["BackupStatus"] = request.BackupStatus
	}

	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.DataType) {
		query["DataType"] = request.DataType
	}

	if !dara.IsNil(request.EndTime) {
		query["EndTime"] = request.EndTime
	}

	if !dara.IsNil(request.PageNumber) {
		query["PageNumber"] = request.PageNumber
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.StartTime) {
		query["StartTime"] = request.StartTime
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeDataBackups"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries a list of backup sets of full backup or point-in-time backup for an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// You can call this operation to query a list of backup sets and backup details only for instances in elastic storage mode.
//
// @param request - DescribeDataBackupsRequest
//
// @return DescribeDataBackupsResponse
func (client *Client) DescribeDataBackups(request *DescribeDataBackupsRequest) (_result *DescribeDataBackupsResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DescribeDataBackupsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the data redistribution information about an AnalyticDB for PostgreSQL V6.0 instance in elastic storage mode.
//
// @param request - DescribeDataReDistributeInfoRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDataReDistributeInfoResponse
func (client *Client) DescribeDataReDistributeInfoWithOptions(request *DescribeDataReDistributeInfoRequest, runtime *dara.RuntimeOptions) (_result *DescribeDataReDistributeInfoResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeDataReDistributeInfo"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the data redistribution information about an AnalyticDB for PostgreSQL V6.0 instance in elastic storage mode.
//
// @param request - DescribeDataReDistributeInfoRequest
//
// @return DescribeDataReDistributeInfoResponse
func (client *Client) DescribeDataReDistributeInfo(request *DescribeDataReDistributeInfoRequest) (_result *DescribeDataReDistributeInfoResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DescribeDataReDistributeInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the state of data sharing for AnalyticDB for PostgreSQL instances.
//
// Description:
//
// Data sharing is supported only for instances in Serverless mode.
//
// @param request - DescribeDataShareInstancesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDataShareInstancesResponse
func (client *Client) DescribeDataShareInstancesWithOptions(request *DescribeDataShareInstancesRequest, runtime *dara.RuntimeOptions) (_result *DescribeDataShareInstancesResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.PageNumber) {
		query["PageNumber"] = request.PageNumber
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.ResourceGroupId) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !dara.IsNil(request.SearchValue) {
		query["SearchValue"] = request.SearchValue
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeDataShareInstances"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the state of data sharing for AnalyticDB for PostgreSQL instances.
//
// Description:
//
// Data sharing is supported only for instances in Serverless mode.
//
// @param request - DescribeDataShareInstancesRequest
//
// @return DescribeDataShareInstancesResponse
func (client *Client) DescribeDataShareInstances(request *DescribeDataShareInstancesRequest) (_result *DescribeDataShareInstancesResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DescribeDataShareInstancesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about data sharing performance metrics.
//
// Description:
//
// You can call this operation to query the details of data sharing performance metrics for an AnalyticDB for PostgreSQL instance in Serverless mode, such as the number of shared topics and the amount of data shared.
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - DescribeDataSharePerformanceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDataSharePerformanceResponse
func (client *Client) DescribeDataSharePerformanceWithOptions(request *DescribeDataSharePerformanceRequest, runtime *dara.RuntimeOptions) (_result *DescribeDataSharePerformanceResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.EndTime) {
		query["EndTime"] = request.EndTime
	}

	if !dara.IsNil(request.Key) {
		query["Key"] = request.Key
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.ResourceGroupId) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !dara.IsNil(request.StartTime) {
		query["StartTime"] = request.StartTime
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeDataSharePerformance"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the information about data sharing performance metrics.
//
// Description:
//
// You can call this operation to query the details of data sharing performance metrics for an AnalyticDB for PostgreSQL instance in Serverless mode, such as the number of shared topics and the amount of data shared.
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - DescribeDataSharePerformanceRequest
//
// @return DescribeDataSharePerformanceResponse
func (client *Client) DescribeDataSharePerformance(request *DescribeDataSharePerformanceRequest) (_result *DescribeDataSharePerformanceResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DescribeDataSharePerformanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries all databases and database accounts for an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// To facilitate management, you can call this operation to query all databases and database accounts on an AnalyticDB for PostgreSQL instance.
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - DescribeDiagnosisDimensionsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDiagnosisDimensionsResponse
func (client *Client) DescribeDiagnosisDimensionsWithOptions(request *DescribeDiagnosisDimensionsRequest, runtime *dara.RuntimeOptions) (_result *DescribeDiagnosisDimensionsResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeDiagnosisDimensions"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries all databases and database accounts for an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// To facilitate management, you can call this operation to query all databases and database accounts on an AnalyticDB for PostgreSQL instance.
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - DescribeDiagnosisDimensionsRequest
//
// @return DescribeDiagnosisDimensionsResponse
func (client *Client) DescribeDiagnosisDimensions(request *DescribeDiagnosisDimensionsRequest) (_result *DescribeDiagnosisDimensionsResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DescribeDiagnosisDimensionsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the details of query execution on an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// You can call this operation to query the details of query execution on an AnalyticDB for PostgreSQL instance in elastic storage mode within a specified time range.
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - DescribeDiagnosisMonitorPerformanceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDiagnosisMonitorPerformanceResponse
func (client *Client) DescribeDiagnosisMonitorPerformanceWithOptions(request *DescribeDiagnosisMonitorPerformanceRequest, runtime *dara.RuntimeOptions) (_result *DescribeDiagnosisMonitorPerformanceResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.Database) {
		query["Database"] = request.Database
	}

	if !dara.IsNil(request.EndTime) {
		query["EndTime"] = request.EndTime
	}

	if !dara.IsNil(request.QueryCondition) {
		query["QueryCondition"] = request.QueryCondition
	}

	if !dara.IsNil(request.StartTime) {
		query["StartTime"] = request.StartTime
	}

	if !dara.IsNil(request.User) {
		query["User"] = request.User
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeDiagnosisMonitorPerformance"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the details of query execution on an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// You can call this operation to query the details of query execution on an AnalyticDB for PostgreSQL instance in elastic storage mode within a specified time range.
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - DescribeDiagnosisMonitorPerformanceRequest
//
// @return DescribeDiagnosisMonitorPerformanceResponse
func (client *Client) DescribeDiagnosisMonitorPerformance(request *DescribeDiagnosisMonitorPerformanceRequest) (_result *DescribeDiagnosisMonitorPerformanceResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DescribeDiagnosisMonitorPerformanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about SQL queries for an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// You can call this operation to query the details of SQL queries on an AnalyticDB for PostgreSQL instance within a specified time range.
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - DescribeDiagnosisRecordsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDiagnosisRecordsResponse
func (client *Client) DescribeDiagnosisRecordsWithOptions(request *DescribeDiagnosisRecordsRequest, runtime *dara.RuntimeOptions) (_result *DescribeDiagnosisRecordsResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.Database) {
		query["Database"] = request.Database
	}

	if !dara.IsNil(request.EndTime) {
		query["EndTime"] = request.EndTime
	}

	if !dara.IsNil(request.Keyword) {
		query["Keyword"] = request.Keyword
	}

	if !dara.IsNil(request.Order) {
		query["Order"] = request.Order
	}

	if !dara.IsNil(request.PageNumber) {
		query["PageNumber"] = request.PageNumber
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.QueryCondition) {
		query["QueryCondition"] = request.QueryCondition
	}

	if !dara.IsNil(request.StartTime) {
		query["StartTime"] = request.StartTime
	}

	if !dara.IsNil(request.User) {
		query["User"] = request.User
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeDiagnosisRecords"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the information about SQL queries for an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// You can call this operation to query the details of SQL queries on an AnalyticDB for PostgreSQL instance within a specified time range.
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - DescribeDiagnosisRecordsRequest
//
// @return DescribeDiagnosisRecordsResponse
func (client *Client) DescribeDiagnosisRecords(request *DescribeDiagnosisRecordsRequest) (_result *DescribeDiagnosisRecordsResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DescribeDiagnosisRecordsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about a query for an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// You can call this operation to query the information about a query for an AnalyticDB for PostgreSQL instance, including the SQL statement, execution plan text, and execution plan tree.
//
// This operation is available only for instances of V6.3.10.1 or later in elastic storage mode. For information about how to view and update the minor version of an instance, see [View the minor engine version](https://help.aliyun.com/document_detail/277424.html) and [Update the minor engine version](https://help.aliyun.com/document_detail/139271.html).
//
// @param request - DescribeDiagnosisSQLInfoRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDiagnosisSQLInfoResponse
func (client *Client) DescribeDiagnosisSQLInfoWithOptions(request *DescribeDiagnosisSQLInfoRequest, runtime *dara.RuntimeOptions) (_result *DescribeDiagnosisSQLInfoResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.Database) {
		query["Database"] = request.Database
	}

	if !dara.IsNil(request.QueryID) {
		query["QueryID"] = request.QueryID
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeDiagnosisSQLInfo"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the information about a query for an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// You can call this operation to query the information about a query for an AnalyticDB for PostgreSQL instance, including the SQL statement, execution plan text, and execution plan tree.
//
// This operation is available only for instances of V6.3.10.1 or later in elastic storage mode. For information about how to view and update the minor version of an instance, see [View the minor engine version](https://help.aliyun.com/document_detail/277424.html) and [Update the minor engine version](https://help.aliyun.com/document_detail/139271.html).
//
// @param request - DescribeDiagnosisSQLInfoRequest
//
// @return DescribeDiagnosisSQLInfoResponse
func (client *Client) DescribeDiagnosisSQLInfo(request *DescribeDiagnosisSQLInfoRequest) (_result *DescribeDiagnosisSQLInfoResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DescribeDiagnosisSQLInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// # Get Document Details
//
// @param request - DescribeDocumentRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDocumentResponse
func (client *Client) DescribeDocumentWithOptions(request *DescribeDocumentRequest, runtime *dara.RuntimeOptions) (_result *DescribeDocumentResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Collection) {
		query["Collection"] = request.Collection
	}

	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.FileName) {
		query["FileName"] = request.FileName
	}

	if !dara.IsNil(request.Namespace) {
		query["Namespace"] = request.Namespace
	}

	if !dara.IsNil(request.NamespacePassword) {
		query["NamespacePassword"] = request.NamespacePassword
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeDocument"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// # Get Document Details
//
// @param request - DescribeDocumentRequest
//
// @return DescribeDocumentResponse
func (client *Client) DescribeDocument(request *DescribeDocumentRequest) (_result *DescribeDocumentResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DescribeDocumentWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the download records of query diagnostic information for an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// You must call the [DownloadDiagnosisRecords](https://help.aliyun.com/document_detail/447700.html) operation to download the query diagnostic information before you can call this operation to query the download records and download URLs.
//
// This operation is available only for instances of V6.3.10.1 or later in elastic storage mode. For information about how to view and update the minor version of an instance, see [View the minor engine version](https://help.aliyun.com/document_detail/277424.html) and [Update the minor engine version](https://help.aliyun.com/document_detail/139271.html).
//
// @param request - DescribeDownloadRecordsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDownloadRecordsResponse
func (client *Client) DescribeDownloadRecordsWithOptions(request *DescribeDownloadRecordsRequest, runtime *dara.RuntimeOptions) (_result *DescribeDownloadRecordsResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.DownloadTaskType) {
		query["DownloadTaskType"] = request.DownloadTaskType
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeDownloadRecords"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the download records of query diagnostic information for an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// You must call the [DownloadDiagnosisRecords](https://help.aliyun.com/document_detail/447700.html) operation to download the query diagnostic information before you can call this operation to query the download records and download URLs.
//
// This operation is available only for instances of V6.3.10.1 or later in elastic storage mode. For information about how to view and update the minor version of an instance, see [View the minor engine version](https://help.aliyun.com/document_detail/277424.html) and [Update the minor engine version](https://help.aliyun.com/document_detail/139271.html).
//
// @param request - DescribeDownloadRecordsRequest
//
// @return DescribeDownloadRecordsResponse
func (client *Client) DescribeDownloadRecords(request *DescribeDownloadRecordsRequest) (_result *DescribeDownloadRecordsResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DescribeDownloadRecordsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// # Get download records
//
// @param request - DescribeDownloadSQLLogsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDownloadSQLLogsResponse
func (client *Client) DescribeDownloadSQLLogsWithOptions(request *DescribeDownloadSQLLogsRequest, runtime *dara.RuntimeOptions) (_result *DescribeDownloadSQLLogsResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeDownloadSQLLogs"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// # Get download records
//
// @param request - DescribeDownloadSQLLogsRequest
//
// @return DescribeDownloadSQLLogsResponse
func (client *Client) DescribeDownloadSQLLogs(request *DescribeDownloadSQLLogsRequest) (_result *DescribeDownloadSQLLogsResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DescribeDownloadSQLLogsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about an external data service.
//
// @param request - DescribeExternalDataServiceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeExternalDataServiceResponse
func (client *Client) DescribeExternalDataServiceWithOptions(request *DescribeExternalDataServiceRequest, runtime *dara.RuntimeOptions) (_result *DescribeExternalDataServiceResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.ServiceId) {
		query["ServiceId"] = request.ServiceId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeExternalDataService"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the information about an external data service.
//
// @param request - DescribeExternalDataServiceRequest
//
// @return DescribeExternalDataServiceResponse
func (client *Client) DescribeExternalDataService(request *DescribeExternalDataServiceRequest) (_result *DescribeExternalDataServiceResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DescribeExternalDataServiceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries E-MapReduce (EMR) Hadoop clusters in a specific virtual private cloud (VPC).
//
// @param request - DescribeHadoopClustersInSameNetRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeHadoopClustersInSameNetResponse
func (client *Client) DescribeHadoopClustersInSameNetWithOptions(request *DescribeHadoopClustersInSameNetRequest, runtime *dara.RuntimeOptions) (_result *DescribeHadoopClustersInSameNetResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeHadoopClustersInSameNet"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries E-MapReduce (EMR) Hadoop clusters in a specific virtual private cloud (VPC).
//
// @param request - DescribeHadoopClustersInSameNetRequest
//
// @return DescribeHadoopClustersInSameNetResponse
func (client *Client) DescribeHadoopClustersInSameNet(request *DescribeHadoopClustersInSameNetRequest) (_result *DescribeHadoopClustersInSameNetResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DescribeHadoopClustersInSameNetWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the configuration information about a Hadoop cluster.
//
// @param request - DescribeHadoopConfigsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeHadoopConfigsResponse
func (client *Client) DescribeHadoopConfigsWithOptions(request *DescribeHadoopConfigsRequest, runtime *dara.RuntimeOptions) (_result *DescribeHadoopConfigsResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ConfigName) {
		query["ConfigName"] = request.ConfigName
	}

	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.EmrInstanceId) {
		query["EmrInstanceId"] = request.EmrInstanceId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeHadoopConfigs"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the configuration information about a Hadoop cluster.
//
// @param request - DescribeHadoopConfigsRequest
//
// @return DescribeHadoopConfigsResponse
func (client *Client) DescribeHadoopConfigs(request *DescribeHadoopConfigsRequest) (_result *DescribeHadoopConfigsResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DescribeHadoopConfigsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Obtains the configurations of a Hadoop data source.
//
// @param request - DescribeHadoopDataSourceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeHadoopDataSourceResponse
func (client *Client) DescribeHadoopDataSourceWithOptions(request *DescribeHadoopDataSourceRequest, runtime *dara.RuntimeOptions) (_result *DescribeHadoopDataSourceResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.DataSourceId) {
		query["DataSourceId"] = request.DataSourceId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeHadoopDataSource"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Obtains the configurations of a Hadoop data source.
//
// @param request - DescribeHadoopDataSourceRequest
//
// @return DescribeHadoopDataSourceResponse
func (client *Client) DescribeHadoopDataSource(request *DescribeHadoopDataSourceRequest) (_result *DescribeHadoopDataSourceResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DescribeHadoopDataSourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the health status of an AnalyticDB for PostgreSQL instance and its nodes.
//
// Description:
//
// This operation is called to query the health status of an AnalyticDB for PostgreSQL instance in elastic storage mode or Serverless mode and its coordinator and compute nodes.
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - DescribeHealthStatusRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeHealthStatusResponse
func (client *Client) DescribeHealthStatusWithOptions(request *DescribeHealthStatusRequest, runtime *dara.RuntimeOptions) (_result *DescribeHealthStatusResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.Key) {
		query["Key"] = request.Key
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeHealthStatus"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the health status of an AnalyticDB for PostgreSQL instance and its nodes.
//
// Description:
//
// This operation is called to query the health status of an AnalyticDB for PostgreSQL instance in elastic storage mode or Serverless mode and its coordinator and compute nodes.
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - DescribeHealthStatusRequest
//
// @return DescribeHealthStatusResponse
func (client *Client) DescribeHealthStatus(request *DescribeHealthStatusRequest) (_result *DescribeHealthStatusResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DescribeHealthStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about real-time materialized views of an AnalyticDB for PostgreSQL instance.
//
// @param request - DescribeIMVInfosRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeIMVInfosResponse
func (client *Client) DescribeIMVInfosWithOptions(request *DescribeIMVInfosRequest, runtime *dara.RuntimeOptions) (_result *DescribeIMVInfosResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.Database) {
		query["Database"] = request.Database
	}

	if !dara.IsNil(request.MVName) {
		query["MVName"] = request.MVName
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeIMVInfos"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the information about real-time materialized views of an AnalyticDB for PostgreSQL instance.
//
// @param request - DescribeIMVInfosRequest
//
// @return DescribeIMVInfosResponse
func (client *Client) DescribeIMVInfos(request *DescribeIMVInfosRequest) (_result *DescribeIMVInfosResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DescribeIMVInfosWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取索引详情
//
// @param request - DescribeIndexRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeIndexResponse
func (client *Client) DescribeIndexWithOptions(request *DescribeIndexRequest, runtime *dara.RuntimeOptions) (_result *DescribeIndexResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Collection) {
		query["Collection"] = request.Collection
	}

	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.IndexName) {
		query["IndexName"] = request.IndexName
	}

	if !dara.IsNil(request.Namespace) {
		query["Namespace"] = request.Namespace
	}

	if !dara.IsNil(request.NamespacePassword) {
		query["NamespacePassword"] = request.NamespacePassword
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.WorkspaceId) {
		query["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeIndex"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// 获取索引详情
//
// @param request - DescribeIndexRequest
//
// @return DescribeIndexResponse
func (client *Client) DescribeIndex(request *DescribeIndexRequest) (_result *DescribeIndexResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DescribeIndexWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the configurations of a Java Database Connectivity (JDBC) data source.
//
// @param request - DescribeJDBCDataSourceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeJDBCDataSourceResponse
func (client *Client) DescribeJDBCDataSourceWithOptions(request *DescribeJDBCDataSourceRequest, runtime *dara.RuntimeOptions) (_result *DescribeJDBCDataSourceResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.DataSourceId) {
		query["DataSourceId"] = request.DataSourceId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeJDBCDataSource"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the configurations of a Java Database Connectivity (JDBC) data source.
//
// @param request - DescribeJDBCDataSourceRequest
//
// @return DescribeJDBCDataSourceResponse
func (client *Client) DescribeJDBCDataSource(request *DescribeJDBCDataSourceRequest) (_result *DescribeJDBCDataSourceResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DescribeJDBCDataSourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of log backups.
//
// @param request - DescribeLogBackupsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLogBackupsResponse
func (client *Client) DescribeLogBackupsWithOptions(request *DescribeLogBackupsRequest, runtime *dara.RuntimeOptions) (_result *DescribeLogBackupsResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.EndTime) {
		query["EndTime"] = request.EndTime
	}

	if !dara.IsNil(request.PageNumber) {
		query["PageNumber"] = request.PageNumber
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.StartTime) {
		query["StartTime"] = request.StartTime
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeLogBackups"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries a list of log backups.
//
// @param request - DescribeLogBackupsRequest
//
// @return DescribeLogBackupsResponse
func (client *Client) DescribeLogBackups(request *DescribeLogBackupsRequest) (_result *DescribeLogBackupsResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DescribeLogBackupsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the parameter modification logs of an AnalyticDB for PostgreSQL instance.
//
// @param request - DescribeModifyParameterLogRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeModifyParameterLogResponse
func (client *Client) DescribeModifyParameterLogWithOptions(request *DescribeModifyParameterLogRequest, runtime *dara.RuntimeOptions) (_result *DescribeModifyParameterLogResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.EndTime) {
		query["EndTime"] = request.EndTime
	}

	if !dara.IsNil(request.StartTime) {
		query["StartTime"] = request.StartTime
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeModifyParameterLog"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the parameter modification logs of an AnalyticDB for PostgreSQL instance.
//
// @param request - DescribeModifyParameterLogRequest
//
// @return DescribeModifyParameterLogResponse
func (client *Client) DescribeModifyParameterLog(request *DescribeModifyParameterLogRequest) (_result *DescribeModifyParameterLogResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DescribeModifyParameterLogWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about a namespace.
//
// @param request - DescribeNamespaceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeNamespaceResponse
func (client *Client) DescribeNamespaceWithOptions(request *DescribeNamespaceRequest, runtime *dara.RuntimeOptions) (_result *DescribeNamespaceResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.ManagerAccount) {
		query["ManagerAccount"] = request.ManagerAccount
	}

	if !dara.IsNil(request.ManagerAccountPassword) {
		query["ManagerAccountPassword"] = request.ManagerAccountPassword
	}

	if !dara.IsNil(request.Namespace) {
		query["Namespace"] = request.Namespace
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.WorkspaceId) {
		query["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeNamespace"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the information about a namespace.
//
// @param request - DescribeNamespaceRequest
//
// @return DescribeNamespaceResponse
func (client *Client) DescribeNamespace(request *DescribeNamespaceRequest) (_result *DescribeNamespaceResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DescribeNamespaceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about configuration parameters for an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// This operation can be called to query the details of parameters in an AnalyticDB for PostgreSQL instance in elastic storage mode or Serverless mode.
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered and may affect your business. We recommend that you take note of the limit when you call this operation.
//
// @param request - DescribeParametersRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeParametersResponse
func (client *Client) DescribeParametersWithOptions(request *DescribeParametersRequest, runtime *dara.RuntimeOptions) (_result *DescribeParametersResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeParameters"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the information about configuration parameters for an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// This operation can be called to query the details of parameters in an AnalyticDB for PostgreSQL instance in elastic storage mode or Serverless mode.
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered and may affect your business. We recommend that you take note of the limit when you call this operation.
//
// @param request - DescribeParametersRequest
//
// @return DescribeParametersResponse
func (client *Client) DescribeParameters(request *DescribeParametersRequest) (_result *DescribeParametersResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DescribeParametersWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of vSwitches.
//
// Description:
//
// When you create AnalyticDB for PostgreSQL instances, you can call this operation to query the details of vSwitches within a specified region or zone.
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - DescribeRdsVSwitchsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeRdsVSwitchsResponse
func (client *Client) DescribeRdsVSwitchsWithOptions(request *DescribeRdsVSwitchsRequest, runtime *dara.RuntimeOptions) (_result *DescribeRdsVSwitchsResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.OwnerAccount) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.ResourceGroupId) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !dara.IsNil(request.ResourceOwnerAccount) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !dara.IsNil(request.ResourceOwnerId) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !dara.IsNil(request.SecurityToken) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !dara.IsNil(request.VpcId) {
		query["VpcId"] = request.VpcId
	}

	if !dara.IsNil(request.ZoneId) {
		query["ZoneId"] = request.ZoneId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeRdsVSwitchs"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries a list of vSwitches.
//
// Description:
//
// When you create AnalyticDB for PostgreSQL instances, you can call this operation to query the details of vSwitches within a specified region or zone.
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - DescribeRdsVSwitchsRequest
//
// @return DescribeRdsVSwitchsResponse
func (client *Client) DescribeRdsVSwitchs(request *DescribeRdsVSwitchsRequest) (_result *DescribeRdsVSwitchsResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DescribeRdsVSwitchsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of VPCs.
//
// Description:
//
// When you create an AnalyticDB for PostgreSQL instance, you can call this operation to query the available VPCs within a specified region or zone.
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - DescribeRdsVpcsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeRdsVpcsResponse
func (client *Client) DescribeRdsVpcsWithOptions(request *DescribeRdsVpcsRequest, runtime *dara.RuntimeOptions) (_result *DescribeRdsVpcsResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.OwnerAccount) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.ResourceGroupId) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !dara.IsNil(request.ResourceOwnerAccount) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !dara.IsNil(request.ResourceOwnerId) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !dara.IsNil(request.SecurityToken) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !dara.IsNil(request.ZoneId) {
		query["ZoneId"] = request.ZoneId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeRdsVpcs"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries a list of VPCs.
//
// Description:
//
// When you create an AnalyticDB for PostgreSQL instance, you can call this operation to query the available VPCs within a specified region or zone.
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - DescribeRdsVpcsRequest
//
// @return DescribeRdsVpcsResponse
func (client *Client) DescribeRdsVpcs(request *DescribeRdsVpcsRequest) (_result *DescribeRdsVpcsResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DescribeRdsVpcsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of regions and zones where AnalyticDB for PostgreSQL is available.
//
// Description:
//
// Before you create an AnalyticDB for PostgreSQL instance, you must call this operation to query available regions and zones.
//
// ## Limit
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered and may affect your business. We recommend that you take note of the limit when you call this operation.
//
// @param request - DescribeRegionsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeRegionsResponse
func (client *Client) DescribeRegionsWithOptions(request *DescribeRegionsRequest, runtime *dara.RuntimeOptions) (_result *DescribeRegionsResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Region) {
		query["Region"] = request.Region
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeRegions"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries a list of regions and zones where AnalyticDB for PostgreSQL is available.
//
// Description:
//
// Before you create an AnalyticDB for PostgreSQL instance, you must call this operation to query available regions and zones.
//
// ## Limit
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered and may affect your business. We recommend that you take note of the limit when you call this operation.
//
// @param request - DescribeRegionsRequest
//
// @return DescribeRegionsResponse
func (client *Client) DescribeRegions(request *DescribeRegionsRequest) (_result *DescribeRegionsResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DescribeRegionsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of roles.
//
// @param request - DescribeRolesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeRolesResponse
func (client *Client) DescribeRolesWithOptions(request *DescribeRolesRequest, runtime *dara.RuntimeOptions) (_result *DescribeRolesResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeRoles"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries a list of roles.
//
// @param request - DescribeRolesRequest
//
// @return DescribeRolesResponse
func (client *Client) DescribeRoles(request *DescribeRolesRequest) (_result *DescribeRolesResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DescribeRolesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the number of audit logs for an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// This operation is not available for instances in reserved storage mode.
//
// @param request - DescribeSQLLogCountRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeSQLLogCountResponse
func (client *Client) DescribeSQLLogCountWithOptions(request *DescribeSQLLogCountRequest, runtime *dara.RuntimeOptions) (_result *DescribeSQLLogCountResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.Database) {
		query["Database"] = request.Database
	}

	if !dara.IsNil(request.EndTime) {
		query["EndTime"] = request.EndTime
	}

	if !dara.IsNil(request.ExecuteCost) {
		query["ExecuteCost"] = request.ExecuteCost
	}

	if !dara.IsNil(request.ExecuteState) {
		query["ExecuteState"] = request.ExecuteState
	}

	if !dara.IsNil(request.MaxExecuteCost) {
		query["MaxExecuteCost"] = request.MaxExecuteCost
	}

	if !dara.IsNil(request.MinExecuteCost) {
		query["MinExecuteCost"] = request.MinExecuteCost
	}

	if !dara.IsNil(request.OperationClass) {
		query["OperationClass"] = request.OperationClass
	}

	if !dara.IsNil(request.OperationType) {
		query["OperationType"] = request.OperationType
	}

	if !dara.IsNil(request.QueryKeywords) {
		query["QueryKeywords"] = request.QueryKeywords
	}

	if !dara.IsNil(request.SourceIP) {
		query["SourceIP"] = request.SourceIP
	}

	if !dara.IsNil(request.StartTime) {
		query["StartTime"] = request.StartTime
	}

	if !dara.IsNil(request.User) {
		query["User"] = request.User
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeSQLLogCount"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the number of audit logs for an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// This operation is not available for instances in reserved storage mode.
//
// @param request - DescribeSQLLogCountRequest
//
// @return DescribeSQLLogCountResponse
func (client *Client) DescribeSQLLogCount(request *DescribeSQLLogCountRequest) (_result *DescribeSQLLogCountResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DescribeSQLLogCountWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the SQL execution logs of an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// > This operation is no longer used. To query SQL execution logs, call the [DescribeSQLLogsV2](https://help.aliyun.com/document_detail/453722.html) operation.
//
// @param request - DescribeSQLLogsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeSQLLogsResponse
func (client *Client) DescribeSQLLogsWithOptions(request *DescribeSQLLogsRequest, runtime *dara.RuntimeOptions) (_result *DescribeSQLLogsResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.Database) {
		query["Database"] = request.Database
	}

	if !dara.IsNil(request.EndTime) {
		query["EndTime"] = request.EndTime
	}

	if !dara.IsNil(request.ExecuteCost) {
		query["ExecuteCost"] = request.ExecuteCost
	}

	if !dara.IsNil(request.ExecuteState) {
		query["ExecuteState"] = request.ExecuteState
	}

	if !dara.IsNil(request.MaxExecuteCost) {
		query["MaxExecuteCost"] = request.MaxExecuteCost
	}

	if !dara.IsNil(request.MinExecuteCost) {
		query["MinExecuteCost"] = request.MinExecuteCost
	}

	if !dara.IsNil(request.OperationClass) {
		query["OperationClass"] = request.OperationClass
	}

	if !dara.IsNil(request.OperationType) {
		query["OperationType"] = request.OperationType
	}

	if !dara.IsNil(request.PageNumber) {
		query["PageNumber"] = request.PageNumber
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.QueryKeywords) {
		query["QueryKeywords"] = request.QueryKeywords
	}

	if !dara.IsNil(request.SourceIP) {
		query["SourceIP"] = request.SourceIP
	}

	if !dara.IsNil(request.StartTime) {
		query["StartTime"] = request.StartTime
	}

	if !dara.IsNil(request.User) {
		query["User"] = request.User
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeSQLLogs"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the SQL execution logs of an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// > This operation is no longer used. To query SQL execution logs, call the [DescribeSQLLogsV2](https://help.aliyun.com/document_detail/453722.html) operation.
//
// @param request - DescribeSQLLogsRequest
//
// @return DescribeSQLLogsResponse
func (client *Client) DescribeSQLLogs(request *DescribeSQLLogsRequest) (_result *DescribeSQLLogsResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DescribeSQLLogsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries SQL logs within a specific time range.
//
// Description:
//
// You can call this operation to query SQL logs of an AnalyticDB for PostgreSQL instance within a specific time range.
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - DescribeSQLLogsV2Request
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeSQLLogsV2Response
func (client *Client) DescribeSQLLogsV2WithOptions(request *DescribeSQLLogsV2Request, runtime *dara.RuntimeOptions) (_result *DescribeSQLLogsV2Response, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.Database) {
		query["Database"] = request.Database
	}

	if !dara.IsNil(request.EndTime) {
		query["EndTime"] = request.EndTime
	}

	if !dara.IsNil(request.ExecuteCost) {
		query["ExecuteCost"] = request.ExecuteCost
	}

	if !dara.IsNil(request.ExecuteState) {
		query["ExecuteState"] = request.ExecuteState
	}

	if !dara.IsNil(request.MaxExecuteCost) {
		query["MaxExecuteCost"] = request.MaxExecuteCost
	}

	if !dara.IsNil(request.MinExecuteCost) {
		query["MinExecuteCost"] = request.MinExecuteCost
	}

	if !dara.IsNil(request.OperationClass) {
		query["OperationClass"] = request.OperationClass
	}

	if !dara.IsNil(request.OperationType) {
		query["OperationType"] = request.OperationType
	}

	if !dara.IsNil(request.PageNumber) {
		query["PageNumber"] = request.PageNumber
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.QueryKeywords) {
		query["QueryKeywords"] = request.QueryKeywords
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.ResourceGroupId) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !dara.IsNil(request.SourceIP) {
		query["SourceIP"] = request.SourceIP
	}

	if !dara.IsNil(request.StartTime) {
		query["StartTime"] = request.StartTime
	}

	if !dara.IsNil(request.User) {
		query["User"] = request.User
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeSQLLogsV2"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries SQL logs within a specific time range.
//
// Description:
//
// You can call this operation to query SQL logs of an AnalyticDB for PostgreSQL instance within a specific time range.
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - DescribeSQLLogsV2Request
//
// @return DescribeSQLLogsV2Response
func (client *Client) DescribeSQLLogsV2(request *DescribeSQLLogsV2Request) (_result *DescribeSQLLogsV2Response, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DescribeSQLLogsV2WithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries whether a sample dataset is loaded to an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - DescribeSampleDataRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeSampleDataResponse
func (client *Client) DescribeSampleDataWithOptions(request *DescribeSampleDataRequest, runtime *dara.RuntimeOptions) (_result *DescribeSampleDataResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeSampleData"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries whether a sample dataset is loaded to an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - DescribeSampleDataRequest
//
// @return DescribeSampleDataResponse
func (client *Client) DescribeSampleData(request *DescribeSampleDataRequest) (_result *DescribeSampleDataResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DescribeSampleDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a real-time data service.
//
// @param request - DescribeStreamingDataServiceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeStreamingDataServiceResponse
func (client *Client) DescribeStreamingDataServiceWithOptions(request *DescribeStreamingDataServiceRequest, runtime *dara.RuntimeOptions) (_result *DescribeStreamingDataServiceResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.ServiceId) {
		query["ServiceId"] = request.ServiceId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeStreamingDataService"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries a real-time data service.
//
// @param request - DescribeStreamingDataServiceRequest
//
// @return DescribeStreamingDataServiceResponse
func (client *Client) DescribeStreamingDataService(request *DescribeStreamingDataServiceRequest) (_result *DescribeStreamingDataServiceResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DescribeStreamingDataServiceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// # Get external data source configuration information
//
// @param request - DescribeStreamingDataSourceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeStreamingDataSourceResponse
func (client *Client) DescribeStreamingDataSourceWithOptions(request *DescribeStreamingDataSourceRequest, runtime *dara.RuntimeOptions) (_result *DescribeStreamingDataSourceResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.DataSourceId) {
		query["DataSourceId"] = request.DataSourceId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeStreamingDataSource"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// # Get external data source configuration information
//
// @param request - DescribeStreamingDataSourceRequest
//
// @return DescribeStreamingDataSourceResponse
func (client *Client) DescribeStreamingDataSource(request *DescribeStreamingDataSourceRequest) (_result *DescribeStreamingDataSourceResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DescribeStreamingDataSourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// # Delete External Data Source Configuration
//
// @param request - DescribeStreamingJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeStreamingJobResponse
func (client *Client) DescribeStreamingJobWithOptions(request *DescribeStreamingJobRequest, runtime *dara.RuntimeOptions) (_result *DescribeStreamingJobResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.JobId) {
		query["JobId"] = request.JobId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeStreamingJob"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// # Delete External Data Source Configuration
//
// @param request - DescribeStreamingJobRequest
//
// @return DescribeStreamingJobResponse
func (client *Client) DescribeStreamingJob(request *DescribeStreamingJobRequest) (_result *DescribeStreamingJobResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DescribeStreamingJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the features that are supported by an AnalyticDB for PostgreSQL instance.
//
// @param request - DescribeSupportFeaturesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeSupportFeaturesResponse
func (client *Client) DescribeSupportFeaturesWithOptions(request *DescribeSupportFeaturesRequest, runtime *dara.RuntimeOptions) (_result *DescribeSupportFeaturesResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeSupportFeatures"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the features that are supported by an AnalyticDB for PostgreSQL instance.
//
// @param request - DescribeSupportFeaturesRequest
//
// @return DescribeSupportFeaturesResponse
func (client *Client) DescribeSupportFeatures(request *DescribeSupportFeaturesRequest) (_result *DescribeSupportFeaturesResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DescribeSupportFeaturesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about a table.
//
// @param request - DescribeTableRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeTableResponse
func (client *Client) DescribeTableWithOptions(request *DescribeTableRequest, runtime *dara.RuntimeOptions) (_result *DescribeTableResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.Database) {
		query["Database"] = request.Database
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.Schema) {
		query["Schema"] = request.Schema
	}

	if !dara.IsNil(request.SecretArn) {
		query["SecretArn"] = request.SecretArn
	}

	if !dara.IsNil(request.Table) {
		query["Table"] = request.Table
	}

	if !dara.IsNil(request.WorkspaceId) {
		query["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeTable"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the information about a table.
//
// @param request - DescribeTableRequest
//
// @return DescribeTableResponse
func (client *Client) DescribeTable(request *DescribeTableRequest) (_result *DescribeTableResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DescribeTableWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of tags for AnalyticDB for PostgreSQL instances.
//
// @param request - DescribeTagsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeTagsResponse
func (client *Client) DescribeTagsWithOptions(request *DescribeTagsRequest, runtime *dara.RuntimeOptions) (_result *DescribeTagsResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.OwnerAccount) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.ResourceGroupId) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !dara.IsNil(request.ResourceOwnerAccount) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !dara.IsNil(request.ResourceOwnerId) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !dara.IsNil(request.ResourceType) {
		query["ResourceType"] = request.ResourceType
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeTags"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries a list of tags for AnalyticDB for PostgreSQL instances.
//
// @param request - DescribeTagsRequest
//
// @return DescribeTagsResponse
func (client *Client) DescribeTags(request *DescribeTagsRequest) (_result *DescribeTagsResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DescribeTagsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of Key Management Service (KMS) keys.
//
// @param request - DescribeUserEncryptionKeyListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeUserEncryptionKeyListResponse
func (client *Client) DescribeUserEncryptionKeyListWithOptions(request *DescribeUserEncryptionKeyListRequest, runtime *dara.RuntimeOptions) (_result *DescribeUserEncryptionKeyListResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.PageNumber) {
		query["PageNumber"] = request.PageNumber
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeUserEncryptionKeyList"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries a list of Key Management Service (KMS) keys.
//
// @param request - DescribeUserEncryptionKeyListRequest
//
// @return DescribeUserEncryptionKeyListResponse
func (client *Client) DescribeUserEncryptionKeyList(request *DescribeUserEncryptionKeyListRequest) (_result *DescribeUserEncryptionKeyListResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DescribeUserEncryptionKeyListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about a lock-waiting query for an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// You can call this operation to query the details of a lock-waiting query only for an AnalyticDB for PostgreSQL V6.0 instance in elastic storage mode.
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - DescribeWaitingSQLInfoRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeWaitingSQLInfoResponse
func (client *Client) DescribeWaitingSQLInfoWithOptions(request *DescribeWaitingSQLInfoRequest, runtime *dara.RuntimeOptions) (_result *DescribeWaitingSQLInfoResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.Database) {
		query["Database"] = request.Database
	}

	if !dara.IsNil(request.PID) {
		query["PID"] = request.PID
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeWaitingSQLInfo"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the information about a lock-waiting query for an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// You can call this operation to query the details of a lock-waiting query only for an AnalyticDB for PostgreSQL V6.0 instance in elastic storage mode.
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - DescribeWaitingSQLInfoRequest
//
// @return DescribeWaitingSQLInfoResponse
func (client *Client) DescribeWaitingSQLInfo(request *DescribeWaitingSQLInfoRequest) (_result *DescribeWaitingSQLInfoResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DescribeWaitingSQLInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the lock diagnostic records of an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// You can call this operation to query the lock diagnostics records only for an AnalyticDB for PostgreSQL V6.0 instance in elastic storage mode.
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - DescribeWaitingSQLRecordsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeWaitingSQLRecordsResponse
func (client *Client) DescribeWaitingSQLRecordsWithOptions(request *DescribeWaitingSQLRecordsRequest, runtime *dara.RuntimeOptions) (_result *DescribeWaitingSQLRecordsResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.Database) {
		query["Database"] = request.Database
	}

	if !dara.IsNil(request.EndTime) {
		query["EndTime"] = request.EndTime
	}

	if !dara.IsNil(request.Keyword) {
		query["Keyword"] = request.Keyword
	}

	if !dara.IsNil(request.Order) {
		query["Order"] = request.Order
	}

	if !dara.IsNil(request.PageNumber) {
		query["PageNumber"] = request.PageNumber
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.QueryCondition) {
		query["QueryCondition"] = request.QueryCondition
	}

	if !dara.IsNil(request.StartTime) {
		query["StartTime"] = request.StartTime
	}

	if !dara.IsNil(request.User) {
		query["User"] = request.User
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeWaitingSQLRecords"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the lock diagnostic records of an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// You can call this operation to query the lock diagnostics records only for an AnalyticDB for PostgreSQL V6.0 instance in elastic storage mode.
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - DescribeWaitingSQLRecordsRequest
//
// @return DescribeWaitingSQLRecordsResponse
func (client *Client) DescribeWaitingSQLRecords(request *DescribeWaitingSQLRecordsRequest) (_result *DescribeWaitingSQLRecordsResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DescribeWaitingSQLRecordsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Disables resource group management for an AnalyticDB for PostgreSQL V6.0 instance in elastic storage mode. After you disable resource group management, the resource management method of the instance switches from resource group management to resource queue management.
//
// Description:
//
//	  You can call this operation only for AnalyticDB for PostgreSQL V6.0 instances in elastic storage mode whose minor version is V6.6.1.0 or later.
//
//		- You can call this operation to disable resource group management only for AnalyticDB for PostgreSQL instances that are in the **Running*	- state.
//
//		- **Note: When the resource management method is switched, your AnalyticDB for PostgreSQL instance restarts and becomes unavailable for approximately 5 minutes. To prevent your business from being affected, call this operation during off-peak hours.
//
// @param request - DisableDBResourceGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DisableDBResourceGroupResponse
func (client *Client) DisableDBResourceGroupWithOptions(request *DisableDBResourceGroupRequest, runtime *dara.RuntimeOptions) (_result *DisableDBResourceGroupResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DisableDBResourceGroup"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Disables resource group management for an AnalyticDB for PostgreSQL V6.0 instance in elastic storage mode. After you disable resource group management, the resource management method of the instance switches from resource group management to resource queue management.
//
// Description:
//
//	  You can call this operation only for AnalyticDB for PostgreSQL V6.0 instances in elastic storage mode whose minor version is V6.6.1.0 or later.
//
//		- You can call this operation to disable resource group management only for AnalyticDB for PostgreSQL instances that are in the **Running*	- state.
//
//		- **Note: When the resource management method is switched, your AnalyticDB for PostgreSQL instance restarts and becomes unavailable for approximately 5 minutes. To prevent your business from being affected, call this operation during off-peak hours.
//
// @param request - DisableDBResourceGroupRequest
//
// @return DisableDBResourceGroupResponse
func (client *Client) DisableDBResourceGroup(request *DisableDBResourceGroupRequest) (_result *DisableDBResourceGroupResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DisableDBResourceGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Downloads the query diagnostic information of an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// You can call this operation to download the query diagnostic information of an AnalyticDB for PostgreSQL instance. After the download is complete, you can call the [DescribeDownloadRecords](https://help.aliyun.com/document_detail/447712.html) operation to query download records and download URLs.
//
// This operation is available only for instances of V6.3.10.1 or later in elastic storage mode. For more information about how to view and update the minor engine version of an instance, see [View the minor engine version](https://help.aliyun.com/document_detail/277424.html) and [Update the minor engine version](https://help.aliyun.com/document_detail/139271.html).
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - DownloadDiagnosisRecordsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DownloadDiagnosisRecordsResponse
func (client *Client) DownloadDiagnosisRecordsWithOptions(request *DownloadDiagnosisRecordsRequest, runtime *dara.RuntimeOptions) (_result *DownloadDiagnosisRecordsResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.Database) {
		query["Database"] = request.Database
	}

	if !dara.IsNil(request.EndTime) {
		query["EndTime"] = request.EndTime
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.QueryCondition) {
		query["QueryCondition"] = request.QueryCondition
	}

	if !dara.IsNil(request.ResourceGroupId) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !dara.IsNil(request.StartTime) {
		query["StartTime"] = request.StartTime
	}

	if !dara.IsNil(request.User) {
		query["User"] = request.User
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DownloadDiagnosisRecords"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Downloads the query diagnostic information of an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// You can call this operation to download the query diagnostic information of an AnalyticDB for PostgreSQL instance. After the download is complete, you can call the [DescribeDownloadRecords](https://help.aliyun.com/document_detail/447712.html) operation to query download records and download URLs.
//
// This operation is available only for instances of V6.3.10.1 or later in elastic storage mode. For more information about how to view and update the minor engine version of an instance, see [View the minor engine version](https://help.aliyun.com/document_detail/277424.html) and [Update the minor engine version](https://help.aliyun.com/document_detail/139271.html).
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - DownloadDiagnosisRecordsRequest
//
// @return DownloadDiagnosisRecordsResponse
func (client *Client) DownloadDiagnosisRecords(request *DownloadDiagnosisRecordsRequest) (_result *DownloadDiagnosisRecordsResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DownloadDiagnosisRecordsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Download the slow query logs of an AnalyticDB for PostgreSQL instance.
//
// @param request - DownloadSQLLogsRecordsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DownloadSQLLogsRecordsResponse
func (client *Client) DownloadSQLLogsRecordsWithOptions(request *DownloadSQLLogsRecordsRequest, runtime *dara.RuntimeOptions) (_result *DownloadSQLLogsRecordsResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.Database) {
		query["Database"] = request.Database
	}

	if !dara.IsNil(request.EndTime) {
		query["EndTime"] = request.EndTime
	}

	if !dara.IsNil(request.ExecuteCost) {
		query["ExecuteCost"] = request.ExecuteCost
	}

	if !dara.IsNil(request.ExecuteState) {
		query["ExecuteState"] = request.ExecuteState
	}

	if !dara.IsNil(request.Lang) {
		query["Lang"] = request.Lang
	}

	if !dara.IsNil(request.MaxExecuteCost) {
		query["MaxExecuteCost"] = request.MaxExecuteCost
	}

	if !dara.IsNil(request.MinExecuteCost) {
		query["MinExecuteCost"] = request.MinExecuteCost
	}

	if !dara.IsNil(request.OperationClass) {
		query["OperationClass"] = request.OperationClass
	}

	if !dara.IsNil(request.OperationType) {
		query["OperationType"] = request.OperationType
	}

	if !dara.IsNil(request.PageNumber) {
		query["PageNumber"] = request.PageNumber
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.QueryKeywords) {
		query["QueryKeywords"] = request.QueryKeywords
	}

	if !dara.IsNil(request.SourceIP) {
		query["SourceIP"] = request.SourceIP
	}

	if !dara.IsNil(request.StartTime) {
		query["StartTime"] = request.StartTime
	}

	if !dara.IsNil(request.User) {
		query["User"] = request.User
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DownloadSQLLogsRecords"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Download the slow query logs of an AnalyticDB for PostgreSQL instance.
//
// @param request - DownloadSQLLogsRecordsRequest
//
// @return DownloadSQLLogsRecordsResponse
func (client *Client) DownloadSQLLogsRecords(request *DownloadSQLLogsRecordsRequest) (_result *DownloadSQLLogsRecordsResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.DownloadSQLLogsRecordsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Enables resource group management for an AnalyticDB for PostgreSQL V6.0 instance in elastic storage mode. After resource group management is enabled, the resource management mode of the instance is changed from resource queue to resource group.
//
// Description:
//
//	  You can call this operation only for AnalyticDB for PostgreSQL V6.0 instances in elastic storage mode whose minor version is V6.6.1.0 or later.
//
//		- You can call this operation to enable resource group management only for AnalyticDB for PostgreSQL instances that are in the **Running*	- state.
//
//		- **Note: When the resource management mode is changed, your AnalyticDB for PostgreSQL instance is restarted and remains unavailable within 5 minutes. To prevent your business from being affected, call this operation during off-peak hours.
//
// @param request - EnableDBResourceGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return EnableDBResourceGroupResponse
func (client *Client) EnableDBResourceGroupWithOptions(request *EnableDBResourceGroupRequest, runtime *dara.RuntimeOptions) (_result *EnableDBResourceGroupResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("EnableDBResourceGroup"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Enables resource group management for an AnalyticDB for PostgreSQL V6.0 instance in elastic storage mode. After resource group management is enabled, the resource management mode of the instance is changed from resource queue to resource group.
//
// Description:
//
//	  You can call this operation only for AnalyticDB for PostgreSQL V6.0 instances in elastic storage mode whose minor version is V6.6.1.0 or later.
//
//		- You can call this operation to enable resource group management only for AnalyticDB for PostgreSQL instances that are in the **Running*	- state.
//
//		- **Note: When the resource management mode is changed, your AnalyticDB for PostgreSQL instance is restarted and remains unavailable within 5 minutes. To prevent your business from being affected, call this operation during off-peak hours.
//
// @param request - EnableDBResourceGroupRequest
//
// @return EnableDBResourceGroupResponse
func (client *Client) EnableDBResourceGroup(request *EnableDBResourceGroupRequest) (_result *EnableDBResourceGroupResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.EnableDBResourceGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Executes SQL statements.
//
// @param tmpReq - ExecuteStatementRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ExecuteStatementResponse
func (client *Client) ExecuteStatementWithOptions(tmpReq *ExecuteStatementRequest, runtime *dara.RuntimeOptions) (_result *ExecuteStatementResponse, _err error) {
	_err = tmpReq.Validate()
	if _err != nil {
		return _result, _err
	}
	request := &ExecuteStatementShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !dara.IsNil(tmpReq.Parameters) {
		request.ParametersShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Parameters, dara.String("Parameters"), dara.String("json"))
	}

	if !dara.IsNil(tmpReq.RagWorkspaceCollection) {
		request.RagWorkspaceCollectionShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.RagWorkspaceCollection, dara.String("RagWorkspaceCollection"), dara.String("json"))
	}

	if !dara.IsNil(tmpReq.Sqls) {
		request.SqlsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Sqls, dara.String("Sqls"), dara.String("json"))
	}

	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.Database) {
		query["Database"] = request.Database
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RagWorkspaceCollectionShrink) {
		query["RagWorkspaceCollection"] = request.RagWorkspaceCollectionShrink
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.RunType) {
		query["RunType"] = request.RunType
	}

	if !dara.IsNil(request.SecretArn) {
		query["SecretArn"] = request.SecretArn
	}

	if !dara.IsNil(request.StatementName) {
		query["StatementName"] = request.StatementName
	}

	if !dara.IsNil(request.WorkspaceId) {
		query["WorkspaceId"] = request.WorkspaceId
	}

	body := map[string]interface{}{}
	if !dara.IsNil(request.ParametersShrink) {
		body["Parameters"] = request.ParametersShrink
	}

	if !dara.IsNil(request.Sql) {
		body["Sql"] = request.Sql
	}

	if !dara.IsNil(request.SqlsShrink) {
		body["Sqls"] = request.SqlsShrink
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ExecuteStatement"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Executes SQL statements.
//
// @param request - ExecuteStatementRequest
//
// @return ExecuteStatementResponse
func (client *Client) ExecuteStatement(request *ExecuteStatementRequest) (_result *ExecuteStatementResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.ExecuteStatementWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取特定的账号信息
//
// @param request - GetAccountRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetAccountResponse
func (client *Client) GetAccountWithOptions(request *GetAccountRequest, runtime *dara.RuntimeOptions) (_result *GetAccountResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AccountName) {
		query["AccountName"] = request.AccountName
	}

	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("GetAccount"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// 获取特定的账号信息
//
// @param request - GetAccountRequest
//
// @return GetAccountResponse
func (client *Client) GetAccount(request *GetAccountRequest) (_result *GetAccountResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.GetAccountWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about an access credential.
//
// @param request - GetSecretValueRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetSecretValueResponse
func (client *Client) GetSecretValueWithOptions(request *GetSecretValueRequest, runtime *dara.RuntimeOptions) (_result *GetSecretValueResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.SecretArn) {
		query["SecretArn"] = request.SecretArn
	}

	if !dara.IsNil(request.SecretName) {
		query["SecretName"] = request.SecretName
	}

	if !dara.IsNil(request.WorkspaceId) {
		query["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("GetSecretValue"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the information about an access credential.
//
// @param request - GetSecretValueRequest
//
// @return GetSecretValueResponse
func (client *Client) GetSecretValue(request *GetSecretValueRequest) (_result *GetSecretValueResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.GetSecretValueWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// # Get Asynchronous SQL Execution Result
//
// @param request - GetStatementResultRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetStatementResultResponse
func (client *Client) GetStatementResultWithOptions(request *GetStatementResultRequest, runtime *dara.RuntimeOptions) (_result *GetStatementResultResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.Database) {
		query["Database"] = request.Database
	}

	if !dara.IsNil(request.Id) {
		query["Id"] = request.Id
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.SecretArn) {
		query["SecretArn"] = request.SecretArn
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("GetStatementResult"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// # Get Asynchronous SQL Execution Result
//
// @param request - GetStatementResultRequest
//
// @return GetStatementResultResponse
func (client *Client) GetStatementResult(request *GetStatementResultRequest) (_result *GetStatementResultResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.GetStatementResultWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the progress and result of an asynchronous document upload job based on the job ID.
//
// Description:
//
// This operation is related to the UploadDocumentAsync operation. You can call the UploadDocumentAsync operation to create an upload job and obtain the job ID, and then call the GetUploadDocumentJob operation to query the execution information of the job.
//
// >  Suggestions:
//
//   - Determine whether the document upload job times out based on the document complexity and the number of tokens after chunking. In most cases, a job that lasts more than 2 hours is considered timeout.
//
// @param request - GetUploadDocumentJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetUploadDocumentJobResponse
func (client *Client) GetUploadDocumentJobWithOptions(request *GetUploadDocumentJobRequest, runtime *dara.RuntimeOptions) (_result *GetUploadDocumentJobResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	body := map[string]interface{}{}
	if !dara.IsNil(request.Collection) {
		body["Collection"] = request.Collection
	}

	if !dara.IsNil(request.JobId) {
		body["JobId"] = request.JobId
	}

	if !dara.IsNil(request.Namespace) {
		body["Namespace"] = request.Namespace
	}

	if !dara.IsNil(request.NamespacePassword) {
		body["NamespacePassword"] = request.NamespacePassword
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapiutil.Params{
		Action:      dara.String("GetUploadDocumentJob"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the progress and result of an asynchronous document upload job based on the job ID.
//
// Description:
//
// This operation is related to the UploadDocumentAsync operation. You can call the UploadDocumentAsync operation to create an upload job and obtain the job ID, and then call the GetUploadDocumentJob operation to query the execution information of the job.
//
// >  Suggestions:
//
//   - Determine whether the document upload job times out based on the document complexity and the number of tokens after chunking. In most cases, a job that lasts more than 2 hours is considered timeout.
//
// @param request - GetUploadDocumentJobRequest
//
// @return GetUploadDocumentJobResponse
func (client *Client) GetUploadDocumentJob(request *GetUploadDocumentJobRequest) (_result *GetUploadDocumentJobResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.GetUploadDocumentJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the progress and result of an asynchronous vector data upload job by using a job ID.
//
// Description:
//
// This operation is related to the `UpsertCollectionDataAsync` operation. You can call the `UpsertCollectionDataAsync` operation to create an upload job and obtain a job ID, and then call the GetUpsertCollectionDataJob operation to query the execution information of the job.
//
// >  We recommend that you evaluate the amount of time required for the upload job based on 1,000 data entries every second, and then query the job progress every 5 seconds. The timeout period can be set to 30 minutes after the evaluated amount of time.
//
// @param request - GetUpsertCollectionDataJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetUpsertCollectionDataJobResponse
func (client *Client) GetUpsertCollectionDataJobWithOptions(request *GetUpsertCollectionDataJobRequest, runtime *dara.RuntimeOptions) (_result *GetUpsertCollectionDataJobResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.WorkspaceId) {
		query["WorkspaceId"] = request.WorkspaceId
	}

	body := map[string]interface{}{}
	if !dara.IsNil(request.Collection) {
		body["Collection"] = request.Collection
	}

	if !dara.IsNil(request.JobId) {
		body["JobId"] = request.JobId
	}

	if !dara.IsNil(request.Namespace) {
		body["Namespace"] = request.Namespace
	}

	if !dara.IsNil(request.NamespacePassword) {
		body["NamespacePassword"] = request.NamespacePassword
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapiutil.Params{
		Action:      dara.String("GetUpsertCollectionDataJob"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the progress and result of an asynchronous vector data upload job by using a job ID.
//
// Description:
//
// This operation is related to the `UpsertCollectionDataAsync` operation. You can call the `UpsertCollectionDataAsync` operation to create an upload job and obtain a job ID, and then call the GetUpsertCollectionDataJob operation to query the execution information of the job.
//
// >  We recommend that you evaluate the amount of time required for the upload job based on 1,000 data entries every second, and then query the job progress every 5 seconds. The timeout period can be set to 30 minutes after the evaluated amount of time.
//
// @param request - GetUpsertCollectionDataJobRequest
//
// @return GetUpsertCollectionDataJobResponse
func (client *Client) GetUpsertCollectionDataJob(request *GetUpsertCollectionDataJobRequest) (_result *GetUpsertCollectionDataJobResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.GetUpsertCollectionDataJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Grants vector collection permissions to a namespace.
//
// @param request - GrantCollectionRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GrantCollectionResponse
func (client *Client) GrantCollectionWithOptions(request *GrantCollectionRequest, runtime *dara.RuntimeOptions) (_result *GrantCollectionResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Collection) {
		query["Collection"] = request.Collection
	}

	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.GrantToNamespace) {
		query["GrantToNamespace"] = request.GrantToNamespace
	}

	if !dara.IsNil(request.GrantType) {
		query["GrantType"] = request.GrantType
	}

	if !dara.IsNil(request.ManagerAccount) {
		query["ManagerAccount"] = request.ManagerAccount
	}

	if !dara.IsNil(request.ManagerAccountPassword) {
		query["ManagerAccountPassword"] = request.ManagerAccountPassword
	}

	if !dara.IsNil(request.Namespace) {
		query["Namespace"] = request.Namespace
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("GrantCollection"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Grants vector collection permissions to a namespace.
//
// @param request - GrantCollectionRequest
//
// @return GrantCollectionResponse
func (client *Client) GrantCollection(request *GrantCollectionRequest) (_result *GrantCollectionResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.GrantCollectionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Processes active queries.
//
// @param request - HandleActiveSQLRecordRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return HandleActiveSQLRecordResponse
func (client *Client) HandleActiveSQLRecordWithOptions(request *HandleActiveSQLRecordRequest, runtime *dara.RuntimeOptions) (_result *HandleActiveSQLRecordResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.OperateType) {
		query["OperateType"] = request.OperateType
	}

	if !dara.IsNil(request.Pids) {
		query["Pids"] = request.Pids
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("HandleActiveSQLRecord"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Processes active queries.
//
// @param request - HandleActiveSQLRecordRequest
//
// @return HandleActiveSQLRecordResponse
func (client *Client) HandleActiveSQLRecord(request *HandleActiveSQLRecordRequest) (_result *HandleActiveSQLRecordResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.HandleActiveSQLRecordWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Initializes vector databases.
//
// @param request - InitVectorDatabaseRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return InitVectorDatabaseResponse
func (client *Client) InitVectorDatabaseWithOptions(request *InitVectorDatabaseRequest, runtime *dara.RuntimeOptions) (_result *InitVectorDatabaseResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.ManagerAccount) {
		query["ManagerAccount"] = request.ManagerAccount
	}

	if !dara.IsNil(request.ManagerAccountPassword) {
		query["ManagerAccountPassword"] = request.ManagerAccountPassword
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.WorkspaceId) {
		query["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("InitVectorDatabase"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Initializes vector databases.
//
// @param request - InitVectorDatabaseRequest
//
// @return InitVectorDatabaseResponse
func (client *Client) InitVectorDatabase(request *InitVectorDatabaseRequest) (_result *InitVectorDatabaseResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.InitVectorDatabaseWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取备份任务列表
//
// @param request - ListBackupJobsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListBackupJobsResponse
func (client *Client) ListBackupJobsWithOptions(request *ListBackupJobsRequest, runtime *dara.RuntimeOptions) (_result *ListBackupJobsResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.BackupMode) {
		query["BackupMode"] = request.BackupMode
	}

	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListBackupJobs"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// 获取备份任务列表
//
// @param request - ListBackupJobsRequest
//
// @return ListBackupJobsResponse
func (client *Client) ListBackupJobs(request *ListBackupJobsRequest) (_result *ListBackupJobsResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.ListBackupJobsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of vector collections.
//
// @param request - ListCollectionsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListCollectionsResponse
func (client *Client) ListCollectionsWithOptions(request *ListCollectionsRequest, runtime *dara.RuntimeOptions) (_result *ListCollectionsResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.Namespace) {
		query["Namespace"] = request.Namespace
	}

	if !dara.IsNil(request.NamespacePassword) {
		query["NamespacePassword"] = request.NamespacePassword
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.WorkspaceId) {
		query["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListCollections"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries a list of vector collections.
//
// @param request - ListCollectionsRequest
//
// @return ListCollectionsResponse
func (client *Client) ListCollections(request *ListCollectionsRequest) (_result *ListCollectionsResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.ListCollectionsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of databases.
//
// @param request - ListDatabasesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListDatabasesResponse
func (client *Client) ListDatabasesWithOptions(request *ListDatabasesRequest, runtime *dara.RuntimeOptions) (_result *ListDatabasesResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.Database) {
		query["Database"] = request.Database
	}

	if !dara.IsNil(request.MaxResults) {
		query["MaxResults"] = request.MaxResults
	}

	if !dara.IsNil(request.NextToken) {
		query["NextToken"] = request.NextToken
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.SecretArn) {
		query["SecretArn"] = request.SecretArn
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListDatabases"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries a list of databases.
//
// @param request - ListDatabasesRequest
//
// @return ListDatabasesResponse
func (client *Client) ListDatabases(request *ListDatabasesRequest) (_result *ListDatabasesResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.ListDatabasesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of document collections.
//
// @param request - ListDocumentCollectionsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListDocumentCollectionsResponse
func (client *Client) ListDocumentCollectionsWithOptions(request *ListDocumentCollectionsRequest, runtime *dara.RuntimeOptions) (_result *ListDocumentCollectionsResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.Namespace) {
		query["Namespace"] = request.Namespace
	}

	if !dara.IsNil(request.NamespacePassword) {
		query["NamespacePassword"] = request.NamespacePassword
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListDocumentCollections"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries a list of document collections.
//
// @param request - ListDocumentCollectionsRequest
//
// @return ListDocumentCollectionsResponse
func (client *Client) ListDocumentCollections(request *ListDocumentCollectionsRequest) (_result *ListDocumentCollectionsResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.ListDocumentCollectionsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of documents in a collection.
//
// @param request - ListDocumentsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListDocumentsResponse
func (client *Client) ListDocumentsWithOptions(request *ListDocumentsRequest, runtime *dara.RuntimeOptions) (_result *ListDocumentsResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Collection) {
		query["Collection"] = request.Collection
	}

	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.MaxResults) {
		query["MaxResults"] = request.MaxResults
	}

	if !dara.IsNil(request.Namespace) {
		query["Namespace"] = request.Namespace
	}

	if !dara.IsNil(request.NamespacePassword) {
		query["NamespacePassword"] = request.NamespacePassword
	}

	if !dara.IsNil(request.NextToken) {
		query["NextToken"] = request.NextToken
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListDocuments"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries a list of documents in a collection.
//
// @param request - ListDocumentsRequest
//
// @return ListDocumentsResponse
func (client *Client) ListDocuments(request *ListDocumentsRequest) (_result *ListDocumentsResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.ListDocumentsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of external data services.
//
// @param request - ListExternalDataServicesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListExternalDataServicesResponse
func (client *Client) ListExternalDataServicesWithOptions(request *ListExternalDataServicesRequest, runtime *dara.RuntimeOptions) (_result *ListExternalDataServicesResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.PageNumber) {
		query["PageNumber"] = request.PageNumber
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListExternalDataServices"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries a list of external data services.
//
// @param request - ListExternalDataServicesRequest
//
// @return ListExternalDataServicesResponse
func (client *Client) ListExternalDataServices(request *ListExternalDataServicesRequest) (_result *ListExternalDataServicesResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.ListExternalDataServicesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取实例外表配置列表
//
// @param request - ListExternalDataSourcesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListExternalDataSourcesResponse
func (client *Client) ListExternalDataSourcesWithOptions(request *ListExternalDataSourcesRequest, runtime *dara.RuntimeOptions) (_result *ListExternalDataSourcesResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.PageNumber) {
		query["PageNumber"] = request.PageNumber
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListExternalDataSources"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// 获取实例外表配置列表
//
// @param request - ListExternalDataSourcesRequest
//
// @return ListExternalDataSourcesResponse
func (client *Client) ListExternalDataSources(request *ListExternalDataSourcesRequest) (_result *ListExternalDataSourcesResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.ListExternalDataSourcesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取索引列表
//
// @param request - ListIndicesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListIndicesResponse
func (client *Client) ListIndicesWithOptions(request *ListIndicesRequest, runtime *dara.RuntimeOptions) (_result *ListIndicesResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Collection) {
		query["Collection"] = request.Collection
	}

	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.Namespace) {
		query["Namespace"] = request.Namespace
	}

	if !dara.IsNil(request.NamespacePassword) {
		query["NamespacePassword"] = request.NamespacePassword
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.WorkspaceId) {
		query["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListIndices"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// 获取索引列表
//
// @param request - ListIndicesRequest
//
// @return ListIndicesResponse
func (client *Client) ListIndices(request *ListIndicesRequest) (_result *ListIndicesResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.ListIndicesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of extensions.
//
// @param request - ListInstanceExtensionsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListInstanceExtensionsResponse
func (client *Client) ListInstanceExtensionsWithOptions(request *ListInstanceExtensionsRequest, runtime *dara.RuntimeOptions) (_result *ListInstanceExtensionsResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.Extension) {
		query["Extension"] = request.Extension
	}

	if !dara.IsNil(request.InstallStatus) {
		query["InstallStatus"] = request.InstallStatus
	}

	if !dara.IsNil(request.PageNumber) {
		query["PageNumber"] = request.PageNumber
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListInstanceExtensions"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries a list of extensions.
//
// @param request - ListInstanceExtensionsRequest
//
// @return ListInstanceExtensionsResponse
func (client *Client) ListInstanceExtensions(request *ListInstanceExtensionsRequest) (_result *ListInstanceExtensionsResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.ListInstanceExtensionsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of namespaces.
//
// @param request - ListNamespacesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListNamespacesResponse
func (client *Client) ListNamespacesWithOptions(request *ListNamespacesRequest, runtime *dara.RuntimeOptions) (_result *ListNamespacesResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.ManagerAccount) {
		query["ManagerAccount"] = request.ManagerAccount
	}

	if !dara.IsNil(request.ManagerAccountPassword) {
		query["ManagerAccountPassword"] = request.ManagerAccountPassword
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.WorkspaceId) {
		query["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListNamespaces"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries a list of namespaces.
//
// @param request - ListNamespacesRequest
//
// @return ListNamespacesResponse
func (client *Client) ListNamespaces(request *ListNamespacesRequest) (_result *ListNamespacesResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.ListNamespacesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// # Get Homogeneous Data Source
//
// @param request - ListRemoteADBDataSourcesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListRemoteADBDataSourcesResponse
func (client *Client) ListRemoteADBDataSourcesWithOptions(request *ListRemoteADBDataSourcesRequest, runtime *dara.RuntimeOptions) (_result *ListRemoteADBDataSourcesResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.DataSourceId) {
		query["DataSourceId"] = request.DataSourceId
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListRemoteADBDataSources"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// # Get Homogeneous Data Source
//
// @param request - ListRemoteADBDataSourcesRequest
//
// @return ListRemoteADBDataSourcesResponse
func (client *Client) ListRemoteADBDataSources(request *ListRemoteADBDataSourcesRequest) (_result *ListRemoteADBDataSourcesResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.ListRemoteADBDataSourcesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of schemas.
//
// @param request - ListSchemasRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListSchemasResponse
func (client *Client) ListSchemasWithOptions(request *ListSchemasRequest, runtime *dara.RuntimeOptions) (_result *ListSchemasResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.Database) {
		query["Database"] = request.Database
	}

	if !dara.IsNil(request.MaxResults) {
		query["MaxResults"] = request.MaxResults
	}

	if !dara.IsNil(request.NextToken) {
		query["NextToken"] = request.NextToken
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.SchemaPattern) {
		query["SchemaPattern"] = request.SchemaPattern
	}

	if !dara.IsNil(request.SecretArn) {
		query["SecretArn"] = request.SecretArn
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListSchemas"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries a list of schemas.
//
// @param request - ListSchemasRequest
//
// @return ListSchemasResponse
func (client *Client) ListSchemas(request *ListSchemasRequest) (_result *ListSchemasResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.ListSchemasWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of access credentials.
//
// @param request - ListSecretsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListSecretsResponse
func (client *Client) ListSecretsWithOptions(request *ListSecretsRequest, runtime *dara.RuntimeOptions) (_result *ListSecretsResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.WorkspaceId) {
		query["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListSecrets"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries a list of access credentials.
//
// @param request - ListSecretsRequest
//
// @return ListSecretsResponse
func (client *Client) ListSecrets(request *ListSecretsRequest) (_result *ListSecretsResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.ListSecretsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// # Create External Data Source Configuration
//
// @param request - ListStreamingDataServicesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListStreamingDataServicesResponse
func (client *Client) ListStreamingDataServicesWithOptions(request *ListStreamingDataServicesRequest, runtime *dara.RuntimeOptions) (_result *ListStreamingDataServicesResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.PageNumber) {
		query["PageNumber"] = request.PageNumber
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListStreamingDataServices"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// # Create External Data Source Configuration
//
// @param request - ListStreamingDataServicesRequest
//
// @return ListStreamingDataServicesResponse
func (client *Client) ListStreamingDataServices(request *ListStreamingDataServicesRequest) (_result *ListStreamingDataServicesResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.ListStreamingDataServicesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries real-time service data sources.
//
// @param request - ListStreamingDataSourcesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListStreamingDataSourcesResponse
func (client *Client) ListStreamingDataSourcesWithOptions(request *ListStreamingDataSourcesRequest, runtime *dara.RuntimeOptions) (_result *ListStreamingDataSourcesResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.PageNumber) {
		query["PageNumber"] = request.PageNumber
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListStreamingDataSources"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries real-time service data sources.
//
// @param request - ListStreamingDataSourcesRequest
//
// @return ListStreamingDataSourcesResponse
func (client *Client) ListStreamingDataSources(request *ListStreamingDataSourcesRequest) (_result *ListStreamingDataSourcesResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.ListStreamingDataSourcesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries real-time data synchronization jobs.
//
// @param request - ListStreamingJobsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListStreamingJobsResponse
func (client *Client) ListStreamingJobsWithOptions(request *ListStreamingJobsRequest, runtime *dara.RuntimeOptions) (_result *ListStreamingJobsResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.PageNumber) {
		query["PageNumber"] = request.PageNumber
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListStreamingJobs"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries real-time data synchronization jobs.
//
// @param request - ListStreamingJobsRequest
//
// @return ListStreamingJobsResponse
func (client *Client) ListStreamingJobs(request *ListStreamingJobsRequest) (_result *ListStreamingJobsResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.ListStreamingJobsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of tables in a database.
//
// @param request - ListTablesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListTablesResponse
func (client *Client) ListTablesWithOptions(request *ListTablesRequest, runtime *dara.RuntimeOptions) (_result *ListTablesResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.Database) {
		query["Database"] = request.Database
	}

	if !dara.IsNil(request.MaxResults) {
		query["MaxResults"] = request.MaxResults
	}

	if !dara.IsNil(request.NextToken) {
		query["NextToken"] = request.NextToken
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.Schema) {
		query["Schema"] = request.Schema
	}

	if !dara.IsNil(request.SecretArn) {
		query["SecretArn"] = request.SecretArn
	}

	if !dara.IsNil(request.TablePattern) {
		query["TablePattern"] = request.TablePattern
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListTables"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries a list of tables in a database.
//
// @param request - ListTablesRequest
//
// @return ListTablesResponse
func (client *Client) ListTables(request *ListTablesRequest) (_result *ListTablesResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.ListTablesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of tags that are added to AnalyticDB for PostgreSQL instances.
//
// @param request - ListTagResourcesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListTagResourcesResponse
func (client *Client) ListTagResourcesWithOptions(request *ListTagResourcesRequest, runtime *dara.RuntimeOptions) (_result *ListTagResourcesResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.NextToken) {
		query["NextToken"] = request.NextToken
	}

	if !dara.IsNil(request.OwnerAccount) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.ResourceId) {
		query["ResourceId"] = request.ResourceId
	}

	if !dara.IsNil(request.ResourceOwnerAccount) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !dara.IsNil(request.ResourceOwnerId) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !dara.IsNil(request.ResourceType) {
		query["ResourceType"] = request.ResourceType
	}

	if !dara.IsNil(request.Tag) {
		query["Tag"] = request.Tag
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListTagResources"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries a list of tags that are added to AnalyticDB for PostgreSQL instances.
//
// @param request - ListTagResourcesRequest
//
// @return ListTagResourcesResponse
func (client *Client) ListTagResources(request *ListTagResourcesRequest) (_result *ListTagResourcesResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.ListTagResourcesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies the description of a database account for an AnalyticDB for PostgreSQL instance.
//
// @param request - ModifyAccountDescriptionRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyAccountDescriptionResponse
func (client *Client) ModifyAccountDescriptionWithOptions(request *ModifyAccountDescriptionRequest, runtime *dara.RuntimeOptions) (_result *ModifyAccountDescriptionResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AccountDescription) {
		query["AccountDescription"] = request.AccountDescription
	}

	if !dara.IsNil(request.AccountName) {
		query["AccountName"] = request.AccountName
	}

	if !dara.IsNil(request.ClientToken) {
		query["ClientToken"] = request.ClientToken
	}

	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifyAccountDescription"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Modifies the description of a database account for an AnalyticDB for PostgreSQL instance.
//
// @param request - ModifyAccountDescriptionRequest
//
// @return ModifyAccountDescriptionResponse
func (client *Client) ModifyAccountDescription(request *ModifyAccountDescriptionRequest) (_result *ModifyAccountDescriptionResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.ModifyAccountDescriptionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Configures the backup policy of an AnalyticDB for PostgreSQL instance.
//
// @param request - ModifyBackupPolicyRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyBackupPolicyResponse
func (client *Client) ModifyBackupPolicyWithOptions(request *ModifyBackupPolicyRequest, runtime *dara.RuntimeOptions) (_result *ModifyBackupPolicyResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.BackupRetentionPeriod) {
		query["BackupRetentionPeriod"] = request.BackupRetentionPeriod
	}

	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.EnableRecoveryPoint) {
		query["EnableRecoveryPoint"] = request.EnableRecoveryPoint
	}

	if !dara.IsNil(request.PreferredBackupPeriod) {
		query["PreferredBackupPeriod"] = request.PreferredBackupPeriod
	}

	if !dara.IsNil(request.PreferredBackupTime) {
		query["PreferredBackupTime"] = request.PreferredBackupTime
	}

	if !dara.IsNil(request.RecoveryPointPeriod) {
		query["RecoveryPointPeriod"] = request.RecoveryPointPeriod
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifyBackupPolicy"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Configures the backup policy of an AnalyticDB for PostgreSQL instance.
//
// @param request - ModifyBackupPolicyRequest
//
// @return ModifyBackupPolicyResponse
func (client *Client) ModifyBackupPolicy(request *ModifyBackupPolicyRequest) (_result *ModifyBackupPolicyResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.ModifyBackupPolicyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Changes the threshold of computing resources and the wait period of idle resources for an AnalyticDB for PostgreSQL instance in Serverless automatic scheduling mode.
//
// @param request - ModifyDBInstanceConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyDBInstanceConfigResponse
func (client *Client) ModifyDBInstanceConfigWithOptions(request *ModifyDBInstanceConfigRequest, runtime *dara.RuntimeOptions) (_result *ModifyDBInstanceConfigResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceDescription) {
		query["DBInstanceDescription"] = request.DBInstanceDescription
	}

	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.IdleTime) {
		query["IdleTime"] = request.IdleTime
	}

	if !dara.IsNil(request.ResourceGroupId) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !dara.IsNil(request.ServerlessResource) {
		query["ServerlessResource"] = request.ServerlessResource
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifyDBInstanceConfig"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Changes the threshold of computing resources and the wait period of idle resources for an AnalyticDB for PostgreSQL instance in Serverless automatic scheduling mode.
//
// @param request - ModifyDBInstanceConfigRequest
//
// @return ModifyDBInstanceConfigResponse
func (client *Client) ModifyDBInstanceConfig(request *ModifyDBInstanceConfigRequest) (_result *ModifyDBInstanceConfigResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.ModifyDBInstanceConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Changes the endpoint of an AnalyticDB for PostgreSQL instance.
//
// @param request - ModifyDBInstanceConnectionStringRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyDBInstanceConnectionStringResponse
func (client *Client) ModifyDBInstanceConnectionStringWithOptions(request *ModifyDBInstanceConnectionStringRequest, runtime *dara.RuntimeOptions) (_result *ModifyDBInstanceConnectionStringResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClientToken) {
		query["ClientToken"] = request.ClientToken
	}

	if !dara.IsNil(request.ConnectionStringPrefix) {
		query["ConnectionStringPrefix"] = request.ConnectionStringPrefix
	}

	if !dara.IsNil(request.CurrentConnectionString) {
		query["CurrentConnectionString"] = request.CurrentConnectionString
	}

	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.Port) {
		query["Port"] = request.Port
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifyDBInstanceConnectionString"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Changes the endpoint of an AnalyticDB for PostgreSQL instance.
//
// @param request - ModifyDBInstanceConnectionStringRequest
//
// @return ModifyDBInstanceConnectionStringResponse
func (client *Client) ModifyDBInstanceConnectionString(request *ModifyDBInstanceConnectionStringRequest) (_result *ModifyDBInstanceConnectionStringResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.ModifyDBInstanceConnectionStringWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 修改实例部署模式
//
// @param request - ModifyDBInstanceDeploymentModeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyDBInstanceDeploymentModeResponse
func (client *Client) ModifyDBInstanceDeploymentModeWithOptions(request *ModifyDBInstanceDeploymentModeRequest, runtime *dara.RuntimeOptions) (_result *ModifyDBInstanceDeploymentModeResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.DeployMode) {
		query["DeployMode"] = request.DeployMode
	}

	if !dara.IsNil(request.StandbyVSwitchId) {
		query["StandbyVSwitchId"] = request.StandbyVSwitchId
	}

	if !dara.IsNil(request.StandbyZoneId) {
		query["StandbyZoneId"] = request.StandbyZoneId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifyDBInstanceDeploymentMode"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// 修改实例部署模式
//
// @param request - ModifyDBInstanceDeploymentModeRequest
//
// @return ModifyDBInstanceDeploymentModeResponse
func (client *Client) ModifyDBInstanceDeploymentMode(request *ModifyDBInstanceDeploymentModeRequest) (_result *ModifyDBInstanceDeploymentModeResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.ModifyDBInstanceDeploymentModeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Changes the description of an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// To make it easy to identify AnalyticDB for PostgreSQL instances, you can call this operation to modify the description of instances.
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - ModifyDBInstanceDescriptionRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyDBInstanceDescriptionResponse
func (client *Client) ModifyDBInstanceDescriptionWithOptions(request *ModifyDBInstanceDescriptionRequest, runtime *dara.RuntimeOptions) (_result *ModifyDBInstanceDescriptionResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceDescription) {
		query["DBInstanceDescription"] = request.DBInstanceDescription
	}

	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.ResourceGroupId) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifyDBInstanceDescription"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Changes the description of an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// To make it easy to identify AnalyticDB for PostgreSQL instances, you can call this operation to modify the description of instances.
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - ModifyDBInstanceDescriptionRequest
//
// @return ModifyDBInstanceDescriptionResponse
func (client *Client) ModifyDBInstanceDescription(request *ModifyDBInstanceDescriptionRequest) (_result *ModifyDBInstanceDescriptionResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.ModifyDBInstanceDescriptionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies the maintenance window of an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// The system maintains AnalyticDB for PostgreSQL instances during the maintenance window that you specify. We recommend that you set the maintenance window to off-peak hours to minimize the impact on your business.
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - ModifyDBInstanceMaintainTimeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyDBInstanceMaintainTimeResponse
func (client *Client) ModifyDBInstanceMaintainTimeWithOptions(request *ModifyDBInstanceMaintainTimeRequest, runtime *dara.RuntimeOptions) (_result *ModifyDBInstanceMaintainTimeResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.EndTime) {
		query["EndTime"] = request.EndTime
	}

	if !dara.IsNil(request.ResourceGroupId) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !dara.IsNil(request.StartTime) {
		query["StartTime"] = request.StartTime
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifyDBInstanceMaintainTime"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Modifies the maintenance window of an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// The system maintains AnalyticDB for PostgreSQL instances during the maintenance window that you specify. We recommend that you set the maintenance window to off-peak hours to minimize the impact on your business.
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - ModifyDBInstanceMaintainTimeRequest
//
// @return ModifyDBInstanceMaintainTimeResponse
func (client *Client) ModifyDBInstanceMaintainTime(request *ModifyDBInstanceMaintainTimeRequest) (_result *ModifyDBInstanceMaintainTimeResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.ModifyDBInstanceMaintainTimeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Changes the network type of an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// ##
//
// This operation is available only for AnalyticDB for PostgreSQL instances in reserved storage mode.
//
// ## QPS limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - ModifyDBInstanceNetworkTypeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyDBInstanceNetworkTypeResponse
func (client *Client) ModifyDBInstanceNetworkTypeWithOptions(request *ModifyDBInstanceNetworkTypeRequest, runtime *dara.RuntimeOptions) (_result *ModifyDBInstanceNetworkTypeResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.InstanceNetworkType) {
		query["InstanceNetworkType"] = request.InstanceNetworkType
	}

	if !dara.IsNil(request.PrivateIpAddress) {
		query["PrivateIpAddress"] = request.PrivateIpAddress
	}

	if !dara.IsNil(request.VPCId) {
		query["VPCId"] = request.VPCId
	}

	if !dara.IsNil(request.VSwitchId) {
		query["VSwitchId"] = request.VSwitchId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifyDBInstanceNetworkType"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Changes the network type of an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// ##
//
// This operation is available only for AnalyticDB for PostgreSQL instances in reserved storage mode.
//
// ## QPS limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - ModifyDBInstanceNetworkTypeRequest
//
// @return ModifyDBInstanceNetworkTypeResponse
func (client *Client) ModifyDBInstanceNetworkType(request *ModifyDBInstanceNetworkTypeRequest) (_result *ModifyDBInstanceNetworkTypeResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.ModifyDBInstanceNetworkTypeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 包年包月/按量付费转换改造
//
// @param request - ModifyDBInstancePayTypeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyDBInstancePayTypeResponse
func (client *Client) ModifyDBInstancePayTypeWithOptions(request *ModifyDBInstancePayTypeRequest, runtime *dara.RuntimeOptions) (_result *ModifyDBInstancePayTypeResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.PayType) {
		query["PayType"] = request.PayType
	}

	if !dara.IsNil(request.Period) {
		query["Period"] = request.Period
	}

	if !dara.IsNil(request.UsedTime) {
		query["UsedTime"] = request.UsedTime
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifyDBInstancePayType"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// 包年包月/按量付费转换改造
//
// @param request - ModifyDBInstancePayTypeRequest
//
// @return ModifyDBInstancePayTypeResponse
func (client *Client) ModifyDBInstancePayType(request *ModifyDBInstancePayTypeRequest) (_result *ModifyDBInstancePayTypeResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.ModifyDBInstancePayTypeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Moves an AnalyticDB for PostgreSQL instance to a resource group.
//
// Description:
//
// Resource Management allows you to build an organizational structure for resources based on your business requirements. You can use resource directories, folders, accounts, and resource groups to hierarchically organize and manage resources. For more information, see [What is Resource Management?](https://help.aliyun.com/document_detail/94475.html)
//
// @param request - ModifyDBInstanceResourceGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyDBInstanceResourceGroupResponse
func (client *Client) ModifyDBInstanceResourceGroupWithOptions(request *ModifyDBInstanceResourceGroupRequest, runtime *dara.RuntimeOptions) (_result *ModifyDBInstanceResourceGroupResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.NewResourceGroupId) {
		query["NewResourceGroupId"] = request.NewResourceGroupId
	}

	if !dara.IsNil(request.OwnerAccount) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.ResourceGroupId) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !dara.IsNil(request.ResourceOwnerAccount) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !dara.IsNil(request.ResourceOwnerId) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifyDBInstanceResourceGroup"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Moves an AnalyticDB for PostgreSQL instance to a resource group.
//
// Description:
//
// Resource Management allows you to build an organizational structure for resources based on your business requirements. You can use resource directories, folders, accounts, and resource groups to hierarchically organize and manage resources. For more information, see [What is Resource Management?](https://help.aliyun.com/document_detail/94475.html)
//
// @param request - ModifyDBInstanceResourceGroupRequest
//
// @return ModifyDBInstanceResourceGroupResponse
func (client *Client) ModifyDBInstanceResourceGroup(request *ModifyDBInstanceResourceGroupRequest) (_result *ModifyDBInstanceResourceGroupResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.ModifyDBInstanceResourceGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Enables, disables, or updates SSL encryption for an AnalyticDB for PostgreSQL instance.
//
// @param request - ModifyDBInstanceSSLRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyDBInstanceSSLResponse
func (client *Client) ModifyDBInstanceSSLWithOptions(request *ModifyDBInstanceSSLRequest, runtime *dara.RuntimeOptions) (_result *ModifyDBInstanceSSLResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ConnectionString) {
		query["ConnectionString"] = request.ConnectionString
	}

	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.SSLEnabled) {
		query["SSLEnabled"] = request.SSLEnabled
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifyDBInstanceSSL"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Enables, disables, or updates SSL encryption for an AnalyticDB for PostgreSQL instance.
//
// @param request - ModifyDBInstanceSSLRequest
//
// @return ModifyDBInstanceSSLResponse
func (client *Client) ModifyDBInstanceSSL(request *ModifyDBInstanceSSLRequest) (_result *ModifyDBInstanceSSLResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.ModifyDBInstanceSSLWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies the configurations of a resource group.
//
// @param tmpReq - ModifyDBResourceGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyDBResourceGroupResponse
func (client *Client) ModifyDBResourceGroupWithOptions(tmpReq *ModifyDBResourceGroupRequest, runtime *dara.RuntimeOptions) (_result *ModifyDBResourceGroupResponse, _err error) {
	_err = tmpReq.Validate()
	if _err != nil {
		return _result, _err
	}
	request := &ModifyDBResourceGroupShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !dara.IsNil(tmpReq.ResourceGroupItems) {
		request.ResourceGroupItemsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.ResourceGroupItems, dara.String("ResourceGroupItems"), dara.String("json"))
	}

	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.ResourceGroupItemsShrink) {
		query["ResourceGroupItems"] = request.ResourceGroupItemsShrink
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifyDBResourceGroup"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Modifies the configurations of a resource group.
//
// @param request - ModifyDBResourceGroupRequest
//
// @return ModifyDBResourceGroupResponse
func (client *Client) ModifyDBResourceGroup(request *ModifyDBResourceGroupRequest) (_result *ModifyDBResourceGroupResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.ModifyDBResourceGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// # Modify External Data Service
//
// @param request - ModifyExternalDataServiceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyExternalDataServiceResponse
func (client *Client) ModifyExternalDataServiceWithOptions(request *ModifyExternalDataServiceRequest, runtime *dara.RuntimeOptions) (_result *ModifyExternalDataServiceResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.ServiceDescription) {
		query["ServiceDescription"] = request.ServiceDescription
	}

	if !dara.IsNil(request.ServiceId) {
		query["ServiceId"] = request.ServiceId
	}

	if !dara.IsNil(request.ServiceSpec) {
		query["ServiceSpec"] = request.ServiceSpec
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifyExternalDataService"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// # Modify External Data Service
//
// @param request - ModifyExternalDataServiceRequest
//
// @return ModifyExternalDataServiceResponse
func (client *Client) ModifyExternalDataService(request *ModifyExternalDataServiceRequest) (_result *ModifyExternalDataServiceResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.ModifyExternalDataServiceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies the configurations of a Hadoop data source.
//
// @param request - ModifyHadoopDataSourceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyHadoopDataSourceResponse
func (client *Client) ModifyHadoopDataSourceWithOptions(request *ModifyHadoopDataSourceRequest, runtime *dara.RuntimeOptions) (_result *ModifyHadoopDataSourceResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.DataSourceDescription) {
		query["DataSourceDescription"] = request.DataSourceDescription
	}

	if !dara.IsNil(request.DataSourceId) {
		query["DataSourceId"] = request.DataSourceId
	}

	if !dara.IsNil(request.DataSourceType) {
		query["DataSourceType"] = request.DataSourceType
	}

	if !dara.IsNil(request.EmrInstanceId) {
		query["EmrInstanceId"] = request.EmrInstanceId
	}

	if !dara.IsNil(request.HDFSConf) {
		query["HDFSConf"] = request.HDFSConf
	}

	if !dara.IsNil(request.HadoopCoreConf) {
		query["HadoopCoreConf"] = request.HadoopCoreConf
	}

	if !dara.IsNil(request.HadoopCreateType) {
		query["HadoopCreateType"] = request.HadoopCreateType
	}

	if !dara.IsNil(request.HadoopHostsAddress) {
		query["HadoopHostsAddress"] = request.HadoopHostsAddress
	}

	if !dara.IsNil(request.HiveConf) {
		query["HiveConf"] = request.HiveConf
	}

	if !dara.IsNil(request.MapReduceConf) {
		query["MapReduceConf"] = request.MapReduceConf
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.YarnConf) {
		query["YarnConf"] = request.YarnConf
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifyHadoopDataSource"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Modifies the configurations of a Hadoop data source.
//
// @param request - ModifyHadoopDataSourceRequest
//
// @return ModifyHadoopDataSourceResponse
func (client *Client) ModifyHadoopDataSource(request *ModifyHadoopDataSourceRequest) (_result *ModifyHadoopDataSourceResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.ModifyHadoopDataSourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies the configurations of a Java Database Connectivity (JDBC) data source.
//
// @param request - ModifyJDBCDataSourceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyJDBCDataSourceResponse
func (client *Client) ModifyJDBCDataSourceWithOptions(request *ModifyJDBCDataSourceRequest, runtime *dara.RuntimeOptions) (_result *ModifyJDBCDataSourceResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.DataSourceDescription) {
		query["DataSourceDescription"] = request.DataSourceDescription
	}

	if !dara.IsNil(request.DataSourceId) {
		query["DataSourceId"] = request.DataSourceId
	}

	if !dara.IsNil(request.DataSourceType) {
		query["DataSourceType"] = request.DataSourceType
	}

	if !dara.IsNil(request.JDBCConnectionString) {
		query["JDBCConnectionString"] = request.JDBCConnectionString
	}

	if !dara.IsNil(request.JDBCPassword) {
		query["JDBCPassword"] = request.JDBCPassword
	}

	if !dara.IsNil(request.JDBCUserName) {
		query["JDBCUserName"] = request.JDBCUserName
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifyJDBCDataSource"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Modifies the configurations of a Java Database Connectivity (JDBC) data source.
//
// @param request - ModifyJDBCDataSourceRequest
//
// @return ModifyJDBCDataSourceResponse
func (client *Client) ModifyJDBCDataSource(request *ModifyJDBCDataSourceRequest) (_result *ModifyJDBCDataSourceResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.ModifyJDBCDataSourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Changes the specifications of coordinator node resources for an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// This operation is not available for instances in reserved storage mode.
//
// Before you call this operation, make sure that you are familiar with the billing of AnalyticDB for PostgreSQL. For more information, see [Billing methods](https://help.aliyun.com/document_detail/35406.html) and [AnalyticDB for PostgreSQL pricing](https://www.alibabacloud.com/zh/product/hybriddb-postgresql/pricing).
//
// @param request - ModifyMasterSpecRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyMasterSpecResponse
func (client *Client) ModifyMasterSpecWithOptions(request *ModifyMasterSpecRequest, runtime *dara.RuntimeOptions) (_result *ModifyMasterSpecResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceDescription) {
		query["DBInstanceDescription"] = request.DBInstanceDescription
	}

	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.MasterAISpec) {
		query["MasterAISpec"] = request.MasterAISpec
	}

	if !dara.IsNil(request.MasterCU) {
		query["MasterCU"] = request.MasterCU
	}

	if !dara.IsNil(request.ResourceGroupId) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifyMasterSpec"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Changes the specifications of coordinator node resources for an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// This operation is not available for instances in reserved storage mode.
//
// Before you call this operation, make sure that you are familiar with the billing of AnalyticDB for PostgreSQL. For more information, see [Billing methods](https://help.aliyun.com/document_detail/35406.html) and [AnalyticDB for PostgreSQL pricing](https://www.alibabacloud.com/zh/product/hybriddb-postgresql/pricing).
//
// @param request - ModifyMasterSpecRequest
//
// @return ModifyMasterSpecResponse
func (client *Client) ModifyMasterSpec(request *ModifyMasterSpecRequest) (_result *ModifyMasterSpecResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.ModifyMasterSpecWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies the configuration parameters of an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// This operation can be called to modify parameters of an AnalyticDB for PostgreSQL instance in elastic storage mode or Serverless mode.
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered and may affect your business. We recommend that you take note of the limit when you call this operation.
//
// @param request - ModifyParametersRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyParametersResponse
func (client *Client) ModifyParametersWithOptions(request *ModifyParametersRequest, runtime *dara.RuntimeOptions) (_result *ModifyParametersResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.ForceRestartInstance) {
		query["ForceRestartInstance"] = request.ForceRestartInstance
	}

	if !dara.IsNil(request.Parameters) {
		query["Parameters"] = request.Parameters
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifyParameters"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Modifies the configuration parameters of an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// This operation can be called to modify parameters of an AnalyticDB for PostgreSQL instance in elastic storage mode or Serverless mode.
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered and may affect your business. We recommend that you take note of the limit when you call this operation.
//
// @param request - ModifyParametersRequest
//
// @return ModifyParametersResponse
func (client *Client) ModifyParameters(request *ModifyParametersRequest) (_result *ModifyParametersResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.ModifyParametersWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// # Modify Homogeneous Data Source
//
// @param request - ModifyRemoteADBDataSourceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyRemoteADBDataSourceResponse
func (client *Client) ModifyRemoteADBDataSourceWithOptions(request *ModifyRemoteADBDataSourceRequest, runtime *dara.RuntimeOptions) (_result *ModifyRemoteADBDataSourceResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DataSourceId) {
		query["DataSourceId"] = request.DataSourceId
	}

	if !dara.IsNil(request.DataSourceName) {
		query["DataSourceName"] = request.DataSourceName
	}

	if !dara.IsNil(request.LocalDBInstanceId) {
		query["LocalDBInstanceId"] = request.LocalDBInstanceId
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.UserName) {
		query["UserName"] = request.UserName
	}

	if !dara.IsNil(request.UserPassword) {
		query["UserPassword"] = request.UserPassword
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifyRemoteADBDataSource"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// # Modify Homogeneous Data Source
//
// @param request - ModifyRemoteADBDataSourceRequest
//
// @return ModifyRemoteADBDataSourceResponse
func (client *Client) ModifyRemoteADBDataSource(request *ModifyRemoteADBDataSourceRequest) (_result *ModifyRemoteADBDataSourceResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.ModifyRemoteADBDataSourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Enables or disables the SQL Explorer feature for an AnalyticDB for PostgreSQL instance.
//
// Description:
//
//	  You can call this operation only for AnalyticDB for PostgreSQL instances in reserved storage mode.
//
//		- You can call this operation only for AnalyticDB for PostgreSQL instances in Serverless automatic scheduling mode.
//
// @param request - ModifySQLCollectorPolicyRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifySQLCollectorPolicyResponse
func (client *Client) ModifySQLCollectorPolicyWithOptions(request *ModifySQLCollectorPolicyRequest, runtime *dara.RuntimeOptions) (_result *ModifySQLCollectorPolicyResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.SQLCollectorStatus) {
		query["SQLCollectorStatus"] = request.SQLCollectorStatus
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifySQLCollectorPolicy"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Enables or disables the SQL Explorer feature for an AnalyticDB for PostgreSQL instance.
//
// Description:
//
//	  You can call this operation only for AnalyticDB for PostgreSQL instances in reserved storage mode.
//
//		- You can call this operation only for AnalyticDB for PostgreSQL instances in Serverless automatic scheduling mode.
//
// @param request - ModifySQLCollectorPolicyRequest
//
// @return ModifySQLCollectorPolicyResponse
func (client *Client) ModifySQLCollectorPolicy(request *ModifySQLCollectorPolicyRequest) (_result *ModifySQLCollectorPolicyResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.ModifySQLCollectorPolicyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies the IP address whitelist of an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// To ensure the security and stability of AnalyticDB for PostgreSQL instances, the system denies all external IP addresses to access AnalyticDB for PostgreSQL instances by default. Before you can use an AnalyticDB for PostgreSQL instance, you must add the IP address or CIDR block of your client to the IP address whitelist of the instance.
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - ModifySecurityIpsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifySecurityIpsResponse
func (client *Client) ModifySecurityIpsWithOptions(request *ModifySecurityIpsRequest, runtime *dara.RuntimeOptions) (_result *ModifySecurityIpsResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceIPArrayAttribute) {
		query["DBInstanceIPArrayAttribute"] = request.DBInstanceIPArrayAttribute
	}

	if !dara.IsNil(request.DBInstanceIPArrayName) {
		query["DBInstanceIPArrayName"] = request.DBInstanceIPArrayName
	}

	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.ModifyMode) {
		query["ModifyMode"] = request.ModifyMode
	}

	if !dara.IsNil(request.ResourceGroupId) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !dara.IsNil(request.SecurityIPList) {
		query["SecurityIPList"] = request.SecurityIPList
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifySecurityIps"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Modifies the IP address whitelist of an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// To ensure the security and stability of AnalyticDB for PostgreSQL instances, the system denies all external IP addresses to access AnalyticDB for PostgreSQL instances by default. Before you can use an AnalyticDB for PostgreSQL instance, you must add the IP address or CIDR block of your client to the IP address whitelist of the instance.
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - ModifySecurityIpsRequest
//
// @return ModifySecurityIpsResponse
func (client *Client) ModifySecurityIps(request *ModifySecurityIpsRequest) (_result *ModifySecurityIpsResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.ModifySecurityIpsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies a real-time data service.
//
// @param request - ModifyStreamingDataServiceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyStreamingDataServiceResponse
func (client *Client) ModifyStreamingDataServiceWithOptions(request *ModifyStreamingDataServiceRequest, runtime *dara.RuntimeOptions) (_result *ModifyStreamingDataServiceResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.ServiceDescription) {
		query["ServiceDescription"] = request.ServiceDescription
	}

	if !dara.IsNil(request.ServiceId) {
		query["ServiceId"] = request.ServiceId
	}

	if !dara.IsNil(request.ServiceSpec) {
		query["ServiceSpec"] = request.ServiceSpec
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifyStreamingDataService"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Modifies a real-time data service.
//
// @param request - ModifyStreamingDataServiceRequest
//
// @return ModifyStreamingDataServiceResponse
func (client *Client) ModifyStreamingDataService(request *ModifyStreamingDataServiceRequest) (_result *ModifyStreamingDataServiceResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.ModifyStreamingDataServiceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies a real-time service data source.
//
// @param request - ModifyStreamingDataSourceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyStreamingDataSourceResponse
func (client *Client) ModifyStreamingDataSourceWithOptions(request *ModifyStreamingDataSourceRequest, runtime *dara.RuntimeOptions) (_result *ModifyStreamingDataSourceResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.DataSourceConfig) {
		query["DataSourceConfig"] = request.DataSourceConfig
	}

	if !dara.IsNil(request.DataSourceDescription) {
		query["DataSourceDescription"] = request.DataSourceDescription
	}

	if !dara.IsNil(request.DataSourceId) {
		query["DataSourceId"] = request.DataSourceId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifyStreamingDataSource"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Modifies a real-time service data source.
//
// @param request - ModifyStreamingDataSourceRequest
//
// @return ModifyStreamingDataSourceResponse
func (client *Client) ModifyStreamingDataSource(request *ModifyStreamingDataSourceRequest) (_result *ModifyStreamingDataSourceResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.ModifyStreamingDataSourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// # Create External Data Source Configuration
//
// @param tmpReq - ModifyStreamingJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyStreamingJobResponse
func (client *Client) ModifyStreamingJobWithOptions(tmpReq *ModifyStreamingJobRequest, runtime *dara.RuntimeOptions) (_result *ModifyStreamingJobResponse, _err error) {
	_err = tmpReq.Validate()
	if _err != nil {
		return _result, _err
	}
	request := &ModifyStreamingJobShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !dara.IsNil(tmpReq.DestColumns) {
		request.DestColumnsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.DestColumns, dara.String("DestColumns"), dara.String("json"))
	}

	if !dara.IsNil(tmpReq.MatchColumns) {
		request.MatchColumnsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.MatchColumns, dara.String("MatchColumns"), dara.String("json"))
	}

	if !dara.IsNil(tmpReq.SrcColumns) {
		request.SrcColumnsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.SrcColumns, dara.String("SrcColumns"), dara.String("json"))
	}

	if !dara.IsNil(tmpReq.UpdateColumns) {
		request.UpdateColumnsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.UpdateColumns, dara.String("UpdateColumns"), dara.String("json"))
	}

	query := map[string]interface{}{}
	if !dara.IsNil(request.Account) {
		query["Account"] = request.Account
	}

	if !dara.IsNil(request.Consistency) {
		query["Consistency"] = request.Consistency
	}

	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.DestColumnsShrink) {
		query["DestColumns"] = request.DestColumnsShrink
	}

	if !dara.IsNil(request.DestDatabase) {
		query["DestDatabase"] = request.DestDatabase
	}

	if !dara.IsNil(request.DestSchema) {
		query["DestSchema"] = request.DestSchema
	}

	if !dara.IsNil(request.DestTable) {
		query["DestTable"] = request.DestTable
	}

	if !dara.IsNil(request.ErrorLimitCount) {
		query["ErrorLimitCount"] = request.ErrorLimitCount
	}

	if !dara.IsNil(request.FallbackOffset) {
		query["FallbackOffset"] = request.FallbackOffset
	}

	if !dara.IsNil(request.GroupName) {
		query["GroupName"] = request.GroupName
	}

	if !dara.IsNil(request.JobConfig) {
		query["JobConfig"] = request.JobConfig
	}

	if !dara.IsNil(request.JobDescription) {
		query["JobDescription"] = request.JobDescription
	}

	if !dara.IsNil(request.JobId) {
		query["JobId"] = request.JobId
	}

	if !dara.IsNil(request.MatchColumnsShrink) {
		query["MatchColumns"] = request.MatchColumnsShrink
	}

	if !dara.IsNil(request.Password) {
		query["Password"] = request.Password
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.SrcColumnsShrink) {
		query["SrcColumns"] = request.SrcColumnsShrink
	}

	if !dara.IsNil(request.TryRun) {
		query["TryRun"] = request.TryRun
	}

	if !dara.IsNil(request.UpdateColumnsShrink) {
		query["UpdateColumns"] = request.UpdateColumnsShrink
	}

	if !dara.IsNil(request.WriteMode) {
		query["WriteMode"] = request.WriteMode
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifyStreamingJob"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// # Create External Data Source Configuration
//
// @param request - ModifyStreamingJobRequest
//
// @return ModifyStreamingJobResponse
func (client *Client) ModifyStreamingJob(request *ModifyStreamingJobRequest) (_result *ModifyStreamingJobResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.ModifyStreamingJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies the vector engine optimization configuration of an AnalyticDB for PostgreSQL instance.
//
// @param request - ModifyVectorConfigurationRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyVectorConfigurationResponse
func (client *Client) ModifyVectorConfigurationWithOptions(request *ModifyVectorConfigurationRequest, runtime *dara.RuntimeOptions) (_result *ModifyVectorConfigurationResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.VectorConfigurationStatus) {
		query["VectorConfigurationStatus"] = request.VectorConfigurationStatus
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifyVectorConfiguration"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Modifies the vector engine optimization configuration of an AnalyticDB for PostgreSQL instance.
//
// @param request - ModifyVectorConfigurationRequest
//
// @return ModifyVectorConfigurationResponse
func (client *Client) ModifyVectorConfiguration(request *ModifyVectorConfigurationRequest) (_result *ModifyVectorConfigurationResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.ModifyVectorConfigurationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Pauses data redistribution.
//
// @param request - PauseDataRedistributeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return PauseDataRedistributeResponse
func (client *Client) PauseDataRedistributeWithOptions(request *PauseDataRedistributeRequest, runtime *dara.RuntimeOptions) (_result *PauseDataRedistributeResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("PauseDataRedistribute"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Pauses data redistribution.
//
// @param request - PauseDataRedistributeRequest
//
// @return PauseDataRedistributeResponse
func (client *Client) PauseDataRedistribute(request *PauseDataRedistributeRequest) (_result *PauseDataRedistributeResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.PauseDataRedistributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Pauses an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// You can call this operation to pause an AnalyticDB for PostgreSQL instance that is in the **Running*	- state.
//
// This operation is available only for AnalyticDB for PostgreSQL instances in Serverless mode that run V1.0.2.1 or later. For more information about how to view and update the minor engine version of an instance, see [View the minor engine version](https://help.aliyun.com/document_detail/277424.html) and [Update the minor engine version](https://help.aliyun.com/document_detail/139271.html).
//
// >  Before you call this operation, make sure that you are familiar with the billing methods and pricing of AnalyticDB for PostgreSQL instances. For more information, see [Billing methods](https://help.aliyun.com/document_detail/35406.html) and [AnalyticDB for PostgreSQL pricing](https://www.alibabacloud.com/zh/product/hybriddb-postgresql/pricing).
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - PauseInstanceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return PauseInstanceResponse
func (client *Client) PauseInstanceWithOptions(request *PauseInstanceRequest, runtime *dara.RuntimeOptions) (_result *PauseInstanceResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("PauseInstance"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Pauses an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// You can call this operation to pause an AnalyticDB for PostgreSQL instance that is in the **Running*	- state.
//
// This operation is available only for AnalyticDB for PostgreSQL instances in Serverless mode that run V1.0.2.1 or later. For more information about how to view and update the minor engine version of an instance, see [View the minor engine version](https://help.aliyun.com/document_detail/277424.html) and [Update the minor engine version](https://help.aliyun.com/document_detail/139271.html).
//
// >  Before you call this operation, make sure that you are familiar with the billing methods and pricing of AnalyticDB for PostgreSQL instances. For more information, see [Billing methods](https://help.aliyun.com/document_detail/35406.html) and [AnalyticDB for PostgreSQL pricing](https://www.alibabacloud.com/zh/product/hybriddb-postgresql/pricing).
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - PauseInstanceRequest
//
// @return PauseInstanceResponse
func (client *Client) PauseInstance(request *PauseInstanceRequest) (_result *PauseInstanceResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.PauseInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// # Query Vector Data
//
// @param tmpReq - QueryCollectionDataRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryCollectionDataResponse
func (client *Client) QueryCollectionDataWithOptions(tmpReq *QueryCollectionDataRequest, runtime *dara.RuntimeOptions) (_result *QueryCollectionDataResponse, _err error) {
	_err = tmpReq.Validate()
	if _err != nil {
		return _result, _err
	}
	request := &QueryCollectionDataShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !dara.IsNil(tmpReq.HybridSearchArgs) {
		request.HybridSearchArgsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.HybridSearchArgs, dara.String("HybridSearchArgs"), dara.String("json"))
	}

	if !dara.IsNil(tmpReq.RelationalTableFilter) {
		request.RelationalTableFilterShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.RelationalTableFilter, dara.String("RelationalTableFilter"), dara.String("json"))
	}

	if !dara.IsNil(tmpReq.SparseVector) {
		request.SparseVectorShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.SparseVector, dara.String("SparseVector"), dara.String("json"))
	}

	if !dara.IsNil(tmpReq.Vector) {
		request.VectorShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Vector, dara.String("Vector"), dara.String("json"))
	}

	query := map[string]interface{}{}
	if !dara.IsNil(request.Collection) {
		query["Collection"] = request.Collection
	}

	if !dara.IsNil(request.Content) {
		query["Content"] = request.Content
	}

	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.Filter) {
		query["Filter"] = request.Filter
	}

	if !dara.IsNil(request.HybridSearch) {
		query["HybridSearch"] = request.HybridSearch
	}

	if !dara.IsNil(request.HybridSearchArgsShrink) {
		query["HybridSearchArgs"] = request.HybridSearchArgsShrink
	}

	if !dara.IsNil(request.IncludeMetadataFields) {
		query["IncludeMetadataFields"] = request.IncludeMetadataFields
	}

	if !dara.IsNil(request.IncludeValues) {
		query["IncludeValues"] = request.IncludeValues
	}

	if !dara.IsNil(request.Metrics) {
		query["Metrics"] = request.Metrics
	}

	if !dara.IsNil(request.Namespace) {
		query["Namespace"] = request.Namespace
	}

	if !dara.IsNil(request.NamespacePassword) {
		query["NamespacePassword"] = request.NamespacePassword
	}

	if !dara.IsNil(request.Offset) {
		query["Offset"] = request.Offset
	}

	if !dara.IsNil(request.OrderBy) {
		query["OrderBy"] = request.OrderBy
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.RelationalTableFilterShrink) {
		query["RelationalTableFilter"] = request.RelationalTableFilterShrink
	}

	if !dara.IsNil(request.SparseVectorShrink) {
		query["SparseVector"] = request.SparseVectorShrink
	}

	if !dara.IsNil(request.TopK) {
		query["TopK"] = request.TopK
	}

	if !dara.IsNil(request.VectorShrink) {
		query["Vector"] = request.VectorShrink
	}

	if !dara.IsNil(request.WorkspaceId) {
		query["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("QueryCollectionData"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// # Query Vector Data
//
// @param request - QueryCollectionDataRequest
//
// @return QueryCollectionDataResponse
func (client *Client) QueryCollectionData(request *QueryCollectionDataRequest) (_result *QueryCollectionDataResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.QueryCollectionDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// # Query
//
// @param tmpReq - QueryContentRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryContentResponse
func (client *Client) QueryContentWithOptions(tmpReq *QueryContentRequest, runtime *dara.RuntimeOptions) (_result *QueryContentResponse, _err error) {
	_err = tmpReq.Validate()
	if _err != nil {
		return _result, _err
	}
	request := &QueryContentShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !dara.IsNil(tmpReq.HybridSearchArgs) {
		request.HybridSearchArgsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.HybridSearchArgs, dara.String("HybridSearchArgs"), dara.String("json"))
	}

	if !dara.IsNil(tmpReq.RecallWindow) {
		request.RecallWindowShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.RecallWindow, dara.String("RecallWindow"), dara.String("json"))
	}

	query := map[string]interface{}{}
	if !dara.IsNil(request.Collection) {
		query["Collection"] = request.Collection
	}

	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.FileName) {
		query["FileName"] = request.FileName
	}

	if !dara.IsNil(request.FileUrl) {
		query["FileUrl"] = request.FileUrl
	}

	if !dara.IsNil(request.Filter) {
		query["Filter"] = request.Filter
	}

	if !dara.IsNil(request.HybridSearch) {
		query["HybridSearch"] = request.HybridSearch
	}

	if !dara.IsNil(request.HybridSearchArgsShrink) {
		query["HybridSearchArgs"] = request.HybridSearchArgsShrink
	}

	if !dara.IsNil(request.IncludeFileUrl) {
		query["IncludeFileUrl"] = request.IncludeFileUrl
	}

	if !dara.IsNil(request.IncludeMetadataFields) {
		query["IncludeMetadataFields"] = request.IncludeMetadataFields
	}

	if !dara.IsNil(request.IncludeVector) {
		query["IncludeVector"] = request.IncludeVector
	}

	if !dara.IsNil(request.Metrics) {
		query["Metrics"] = request.Metrics
	}

	if !dara.IsNil(request.Namespace) {
		query["Namespace"] = request.Namespace
	}

	if !dara.IsNil(request.NamespacePassword) {
		query["NamespacePassword"] = request.NamespacePassword
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RecallWindowShrink) {
		query["RecallWindow"] = request.RecallWindowShrink
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.RerankFactor) {
		query["RerankFactor"] = request.RerankFactor
	}

	if !dara.IsNil(request.TopK) {
		query["TopK"] = request.TopK
	}

	if !dara.IsNil(request.UseFullTextRetrieval) {
		query["UseFullTextRetrieval"] = request.UseFullTextRetrieval
	}

	body := map[string]interface{}{}
	if !dara.IsNil(request.Content) {
		body["Content"] = request.Content
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapiutil.Params{
		Action:      dara.String("QueryContent"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// # Query
//
// @param request - QueryContentRequest
//
// @return QueryContentResponse
func (client *Client) QueryContent(request *QueryContentRequest) (_result *QueryContentResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.QueryContentWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryContentAdvance(request *QueryContentAdvanceRequest, runtime *dara.RuntimeOptions) (_result *QueryContentResponse, _err error) {
	// Step 0: init client
	accessKeyIdTmp, _err := client.Credential.GetAccessKeyId()
	accessKeyId := dara.StringValue(accessKeyIdTmp)
	if _err != nil {
		return _result, _err
	}

	accessKeySecretTmp, _err := client.Credential.GetAccessKeySecret()
	accessKeySecret := dara.StringValue(accessKeySecretTmp)
	if _err != nil {
		return _result, _err
	}

	securityTokenTmp, _err := client.Credential.GetSecurityToken()
	securityToken := dara.StringValue(securityTokenTmp)
	if _err != nil {
		return _result, _err
	}

	credentialType := dara.StringValue(client.Credential.GetType())
	openPlatformEndpoint := dara.StringValue(client.OpenPlatformEndpoint)
	if dara.IsNil(dara.String(openPlatformEndpoint)) {
		openPlatformEndpoint = "openplatform.aliyuncs.com"
	}

	if dara.IsNil(dara.String(credentialType)) {
		credentialType = "access_key"
	}

	authConfig := &openapiutil.Config{
		AccessKeyId:     dara.String(accessKeyId),
		AccessKeySecret: dara.String(accessKeySecret),
		SecurityToken:   dara.String(securityToken),
		Type:            dara.String(credentialType),
		Endpoint:        dara.String(openPlatformEndpoint),
		Protocol:        client.Protocol,
		RegionId:        client.RegionId,
	}
	authClient, _err := openplatform.NewClient(authConfig)
	if _err != nil {
		return _result, _err
	}

	authRequest := &openplatform.AuthorizeFileUploadRequest{
		Product:  dara.String("gpdb"),
		RegionId: client.RegionId,
	}
	authResponse := &openplatform.AuthorizeFileUploadResponse{}
	ossConfig := &oss.Config{
		AccessKeyId:     dara.String(accessKeyId),
		AccessKeySecret: dara.String(accessKeySecret),
		Type:            dara.String("access_key"),
		Protocol:        client.Protocol,
		RegionId:        client.RegionId,
	}
	ossClient, _err := oss.NewClient(ossConfig)
	if _err != nil {
		return _result, _err
	}

	fileObj := &fileform.FileField{}
	ossHeader := &oss.PostObjectRequestHeader{}
	uploadRequest := &oss.PostObjectRequest{}
	ossRuntime := &ossutil.RuntimeOptions{}
	openapiutil.Convert(runtime, ossRuntime)
	queryContentReq := &QueryContentRequest{}
	openapiutil.Convert(request, queryContentReq)
	if !dara.IsNil(request.FileUrlObject) {
		authResponse, _err = authClient.AuthorizeFileUploadWithOptions(authRequest, runtime)
		if _err != nil {
			return _result, _err
		}

		ossConfig.AccessKeyId = authResponse.Body.AccessKeyId
		ossConfig.Endpoint = openapiutil.GetEndpoint(authResponse.Body.Endpoint, authResponse.Body.UseAccelerate, client.EndpointType)
		ossClient, _err = oss.NewClient(ossConfig)
		if _err != nil {
			return _result, _err
		}

		fileObj = &fileform.FileField{
			Filename:    authResponse.Body.ObjectKey,
			Content:     request.FileUrlObject,
			ContentType: dara.String(""),
		}
		ossHeader = &oss.PostObjectRequestHeader{
			AccessKeyId:         authResponse.Body.AccessKeyId,
			Policy:              authResponse.Body.EncodedPolicy,
			Signature:           authResponse.Body.Signature,
			Key:                 authResponse.Body.ObjectKey,
			File:                fileObj,
			SuccessActionStatus: dara.String("201"),
		}
		uploadRequest = &oss.PostObjectRequest{
			BucketName: authResponse.Body.Bucket,
			Header:     ossHeader,
		}
		_, _err = ossClient.PostObject(uploadRequest, ossRuntime)
		if _err != nil {
			return _result, _err
		}
		queryContentReq.FileUrl = dara.String("http://" + dara.StringValue(authResponse.Body.Bucket) + "." + dara.StringValue(authResponse.Body.Endpoint) + "/" + dara.StringValue(authResponse.Body.ObjectKey))
	}

	queryContentResp, _err := client.QueryContentWithOptions(queryContentReq, runtime)
	if _err != nil {
		return _result, _err
	}

	_result = queryContentResp
	return _result, _err
}

// Summary:
//
// Rebalances an AnalyticDB for PostgreSQL instance.
//
// @param request - RebalanceDBInstanceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RebalanceDBInstanceResponse
func (client *Client) RebalanceDBInstanceWithOptions(request *RebalanceDBInstanceRequest, runtime *dara.RuntimeOptions) (_result *RebalanceDBInstanceResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClientToken) {
		query["ClientToken"] = request.ClientToken
	}

	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("RebalanceDBInstance"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Rebalances an AnalyticDB for PostgreSQL instance.
//
// @param request - RebalanceDBInstanceRequest
//
// @return RebalanceDBInstanceResponse
func (client *Client) RebalanceDBInstance(request *RebalanceDBInstanceRequest) (_result *RebalanceDBInstanceResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.RebalanceDBInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Releases the public endpoint of an AnalyticDB for PostgreSQL instance.
//
// @param request - ReleaseInstancePublicConnectionRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ReleaseInstancePublicConnectionResponse
func (client *Client) ReleaseInstancePublicConnectionWithOptions(request *ReleaseInstancePublicConnectionRequest, runtime *dara.RuntimeOptions) (_result *ReleaseInstancePublicConnectionResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AddressType) {
		query["AddressType"] = request.AddressType
	}

	if !dara.IsNil(request.CurrentConnectionString) {
		query["CurrentConnectionString"] = request.CurrentConnectionString
	}

	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ReleaseInstancePublicConnection"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Releases the public endpoint of an AnalyticDB for PostgreSQL instance.
//
// @param request - ReleaseInstancePublicConnectionRequest
//
// @return ReleaseInstancePublicConnectionResponse
func (client *Client) ReleaseInstancePublicConnection(request *ReleaseInstancePublicConnectionRequest) (_result *ReleaseInstancePublicConnectionResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.ReleaseInstancePublicConnectionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// # Score and re-order documents using a model
//
// @param tmpReq - RerankRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RerankResponse
func (client *Client) RerankWithOptions(tmpReq *RerankRequest, runtime *dara.RuntimeOptions) (_result *RerankResponse, _err error) {
	_err = tmpReq.Validate()
	if _err != nil {
		return _result, _err
	}
	request := &RerankShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !dara.IsNil(tmpReq.Documents) {
		request.DocumentsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Documents, dara.String("Documents"), dara.String("json"))
	}

	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	body := map[string]interface{}{}
	if !dara.IsNil(request.DocumentsShrink) {
		body["Documents"] = request.DocumentsShrink
	}

	if !dara.IsNil(request.MaxChunksPerDoc) {
		body["MaxChunksPerDoc"] = request.MaxChunksPerDoc
	}

	if !dara.IsNil(request.Model) {
		body["Model"] = request.Model
	}

	if !dara.IsNil(request.Query) {
		body["Query"] = request.Query
	}

	if !dara.IsNil(request.ReturnDocuments) {
		body["ReturnDocuments"] = request.ReturnDocuments
	}

	if !dara.IsNil(request.TopK) {
		body["TopK"] = request.TopK
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapiutil.Params{
		Action:      dara.String("Rerank"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// # Score and re-order documents using a model
//
// @param request - RerankRequest
//
// @return RerankResponse
func (client *Client) Rerank(request *RerankRequest) (_result *RerankResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.RerankWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Resets the password of a database account for an AnalyticDB for PostgreSQL instance.
//
// @param request - ResetAccountPasswordRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ResetAccountPasswordResponse
func (client *Client) ResetAccountPasswordWithOptions(request *ResetAccountPasswordRequest, runtime *dara.RuntimeOptions) (_result *ResetAccountPasswordResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AccountName) {
		query["AccountName"] = request.AccountName
	}

	if !dara.IsNil(request.AccountPassword) {
		query["AccountPassword"] = request.AccountPassword
	}

	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ResetAccountPassword"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Resets the password of a database account for an AnalyticDB for PostgreSQL instance.
//
// @param request - ResetAccountPasswordRequest
//
// @return ResetAccountPasswordResponse
func (client *Client) ResetAccountPassword(request *ResetAccountPasswordRequest) (_result *ResetAccountPasswordResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.ResetAccountPasswordWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Resets the IMV statistics.
//
// @param request - ResetIMVMonitorDataRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ResetIMVMonitorDataResponse
func (client *Client) ResetIMVMonitorDataWithOptions(request *ResetIMVMonitorDataRequest, runtime *dara.RuntimeOptions) (_result *ResetIMVMonitorDataResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.Database) {
		query["Database"] = request.Database
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ResetIMVMonitorData"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Resets the IMV statistics.
//
// @param request - ResetIMVMonitorDataRequest
//
// @return ResetIMVMonitorDataResponse
func (client *Client) ResetIMVMonitorData(request *ResetIMVMonitorDataRequest) (_result *ResetIMVMonitorDataResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.ResetIMVMonitorDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Restarts an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// A restart takes about 3 to 30 minutes. During the restart, services are unavailable. We recommend that you restart the instance during off-peak hours. After the instance is restarted and enters the running state, you can access the instance.
//
// ## Limit
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered and may affect your business. We recommend that you take note of the limit when you call this operation.
//
// @param request - RestartDBInstanceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RestartDBInstanceResponse
func (client *Client) RestartDBInstanceWithOptions(request *RestartDBInstanceRequest, runtime *dara.RuntimeOptions) (_result *RestartDBInstanceResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClientToken) {
		query["ClientToken"] = request.ClientToken
	}

	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("RestartDBInstance"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Restarts an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// A restart takes about 3 to 30 minutes. During the restart, services are unavailable. We recommend that you restart the instance during off-peak hours. After the instance is restarted and enters the running state, you can access the instance.
//
// ## Limit
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered and may affect your business. We recommend that you take note of the limit when you call this operation.
//
// @param request - RestartDBInstanceRequest
//
// @return RestartDBInstanceResponse
func (client *Client) RestartDBInstance(request *RestartDBInstanceRequest) (_result *RestartDBInstanceResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.RestartDBInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Resumes data redistribution.
//
// @param request - ResumeDataRedistributeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ResumeDataRedistributeResponse
func (client *Client) ResumeDataRedistributeWithOptions(request *ResumeDataRedistributeRequest, runtime *dara.RuntimeOptions) (_result *ResumeDataRedistributeResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ResumeDataRedistribute"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Resumes data redistribution.
//
// @param request - ResumeDataRedistributeRequest
//
// @return ResumeDataRedistributeResponse
func (client *Client) ResumeDataRedistribute(request *ResumeDataRedistributeRequest) (_result *ResumeDataRedistributeResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.ResumeDataRedistributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Resumes an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// You can call this operation to resume an AnalyticDB for PostgreSQL instance that is in the **Paused*	- state.
//
// This operation is available only for AnalyticDB for PostgreSQL instances in Serverless mode that run V1.0.2.1 or later. For more information about how to view and update the minor engine version of an instance, see [View the minor engine version](https://help.aliyun.com/document_detail/277424.html) and [Update the minor engine version](https://help.aliyun.com/document_detail/139271.html).
//
// >  Before you call this operation, make sure that you are familiar with the billing methods and pricing of AnalyticDB for PostgreSQL instances. For more information, see [Billing methods](https://help.aliyun.com/document_detail/35406.html) and [AnalyticDB for PostgreSQL pricing](https://www.alibabacloud.com/zh/product/hybriddb-postgresql/pricing).
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - ResumeInstanceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ResumeInstanceResponse
func (client *Client) ResumeInstanceWithOptions(request *ResumeInstanceRequest, runtime *dara.RuntimeOptions) (_result *ResumeInstanceResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ResumeInstance"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Resumes an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// You can call this operation to resume an AnalyticDB for PostgreSQL instance that is in the **Paused*	- state.
//
// This operation is available only for AnalyticDB for PostgreSQL instances in Serverless mode that run V1.0.2.1 or later. For more information about how to view and update the minor engine version of an instance, see [View the minor engine version](https://help.aliyun.com/document_detail/277424.html) and [Update the minor engine version](https://help.aliyun.com/document_detail/139271.html).
//
// >  Before you call this operation, make sure that you are familiar with the billing methods and pricing of AnalyticDB for PostgreSQL instances. For more information, see [Billing methods](https://help.aliyun.com/document_detail/35406.html) and [AnalyticDB for PostgreSQL pricing](https://www.alibabacloud.com/zh/product/hybriddb-postgresql/pricing).
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - ResumeInstanceRequest
//
// @return ResumeInstanceResponse
func (client *Client) ResumeInstance(request *ResumeInstanceRequest) (_result *ResumeInstanceResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.ResumeInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Enables or disables a plan for an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// You can call this operation to enable or disable a specified plan. The plan management feature is supported only for AnalyticDB for PostgreSQL instances in Serverless mode.
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - SetDBInstancePlanStatusRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SetDBInstancePlanStatusResponse
func (client *Client) SetDBInstancePlanStatusWithOptions(request *SetDBInstancePlanStatusRequest, runtime *dara.RuntimeOptions) (_result *SetDBInstancePlanStatusResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.PlanId) {
		query["PlanId"] = request.PlanId
	}

	if !dara.IsNil(request.PlanStatus) {
		query["PlanStatus"] = request.PlanStatus
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("SetDBInstancePlanStatus"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Enables or disables a plan for an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// You can call this operation to enable or disable a specified plan. The plan management feature is supported only for AnalyticDB for PostgreSQL instances in Serverless mode.
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - SetDBInstancePlanStatusRequest
//
// @return SetDBInstancePlanStatusResponse
func (client *Client) SetDBInstancePlanStatus(request *SetDBInstancePlanStatusRequest) (_result *SetDBInstancePlanStatusResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.SetDBInstancePlanStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Enables or disables data sharing for an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// This operation is called to enable or disable data sharing for an AnalyticDB for PostgreSQL instance in Serverless mode.
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param tmpReq - SetDataShareInstanceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SetDataShareInstanceResponse
func (client *Client) SetDataShareInstanceWithOptions(tmpReq *SetDataShareInstanceRequest, runtime *dara.RuntimeOptions) (_result *SetDataShareInstanceResponse, _err error) {
	_err = tmpReq.Validate()
	if _err != nil {
		return _result, _err
	}
	request := &SetDataShareInstanceShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !dara.IsNil(tmpReq.InstanceList) {
		request.InstanceListShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.InstanceList, dara.String("InstanceList"), dara.String("json"))
	}

	query := map[string]interface{}{}
	if !dara.IsNil(request.InstanceListShrink) {
		query["InstanceList"] = request.InstanceListShrink
	}

	if !dara.IsNil(request.OperationType) {
		query["OperationType"] = request.OperationType
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("SetDataShareInstance"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Enables or disables data sharing for an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// This operation is called to enable or disable data sharing for an AnalyticDB for PostgreSQL instance in Serverless mode.
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - SetDataShareInstanceRequest
//
// @return SetDataShareInstanceResponse
func (client *Client) SetDataShareInstance(request *SetDataShareInstanceRequest) (_result *SetDataShareInstanceResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.SetDataShareInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Switches between the internal and public endpoints of an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// This operation is not supported for AnalyticDB for PostgreSQL instances in elastic storage mode or Serverless mode.
//
// @param request - SwitchDBInstanceNetTypeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SwitchDBInstanceNetTypeResponse
func (client *Client) SwitchDBInstanceNetTypeWithOptions(request *SwitchDBInstanceNetTypeRequest, runtime *dara.RuntimeOptions) (_result *SwitchDBInstanceNetTypeResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ConnectionStringPrefix) {
		query["ConnectionStringPrefix"] = request.ConnectionStringPrefix
	}

	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.Port) {
		query["Port"] = request.Port
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("SwitchDBInstanceNetType"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Switches between the internal and public endpoints of an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// This operation is not supported for AnalyticDB for PostgreSQL instances in elastic storage mode or Serverless mode.
//
// @param request - SwitchDBInstanceNetTypeRequest
//
// @return SwitchDBInstanceNetTypeResponse
func (client *Client) SwitchDBInstanceNetType(request *SwitchDBInstanceNetTypeRequest) (_result *SwitchDBInstanceNetTypeResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.SwitchDBInstanceNetTypeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates and adds tags to AnalyticDB for PostgreSQL instances.
//
// @param request - TagResourcesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return TagResourcesResponse
func (client *Client) TagResourcesWithOptions(request *TagResourcesRequest, runtime *dara.RuntimeOptions) (_result *TagResourcesResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.OwnerAccount) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.ResourceId) {
		query["ResourceId"] = request.ResourceId
	}

	if !dara.IsNil(request.ResourceOwnerAccount) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !dara.IsNil(request.ResourceOwnerId) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !dara.IsNil(request.ResourceType) {
		query["ResourceType"] = request.ResourceType
	}

	if !dara.IsNil(request.Tag) {
		query["Tag"] = request.Tag
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("TagResources"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Creates and adds tags to AnalyticDB for PostgreSQL instances.
//
// @param request - TagResourcesRequest
//
// @return TagResourcesResponse
func (client *Client) TagResources(request *TagResourcesRequest) (_result *TagResourcesResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.TagResourcesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 通过模型对文本文档进行向量化
//
// @param tmpReq - TextEmbeddingRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return TextEmbeddingResponse
func (client *Client) TextEmbeddingWithOptions(tmpReq *TextEmbeddingRequest, runtime *dara.RuntimeOptions) (_result *TextEmbeddingResponse, _err error) {
	_err = tmpReq.Validate()
	if _err != nil {
		return _result, _err
	}
	request := &TextEmbeddingShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !dara.IsNil(tmpReq.Input) {
		request.InputShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Input, dara.String("Input"), dara.String("json"))
	}

	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	body := map[string]interface{}{}
	if !dara.IsNil(request.InputShrink) {
		body["Input"] = request.InputShrink
	}

	if !dara.IsNil(request.Model) {
		body["Model"] = request.Model
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapiutil.Params{
		Action:      dara.String("TextEmbedding"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// 通过模型对文本文档进行向量化
//
// @param request - TextEmbeddingRequest
//
// @return TextEmbeddingResponse
func (client *Client) TextEmbedding(request *TextEmbeddingRequest) (_result *TextEmbeddingResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.TextEmbeddingWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Unbinds database roles from a resource group.
//
// @param tmpReq - UnbindDBResourceGroupWithRoleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UnbindDBResourceGroupWithRoleResponse
func (client *Client) UnbindDBResourceGroupWithRoleWithOptions(tmpReq *UnbindDBResourceGroupWithRoleRequest, runtime *dara.RuntimeOptions) (_result *UnbindDBResourceGroupWithRoleResponse, _err error) {
	_err = tmpReq.Validate()
	if _err != nil {
		return _result, _err
	}
	request := &UnbindDBResourceGroupWithRoleShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !dara.IsNil(tmpReq.RoleList) {
		request.RoleListShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.RoleList, dara.String("RoleList"), dara.String("simple"))
	}

	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.ResourceGroupName) {
		query["ResourceGroupName"] = request.ResourceGroupName
	}

	if !dara.IsNil(request.RoleListShrink) {
		query["RoleList"] = request.RoleListShrink
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("UnbindDBResourceGroupWithRole"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Unbinds database roles from a resource group.
//
// @param request - UnbindDBResourceGroupWithRoleRequest
//
// @return UnbindDBResourceGroupWithRoleResponse
func (client *Client) UnbindDBResourceGroupWithRole(request *UnbindDBResourceGroupWithRoleRequest) (_result *UnbindDBResourceGroupWithRoleResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.UnbindDBResourceGroupWithRoleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Releases a sample dataset from an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// You can call this operation to release a sample dataset from an AnalyticDB for PostgreSQL instance. You must have already loaded the sample dataset.
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - UnloadSampleDataRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UnloadSampleDataResponse
func (client *Client) UnloadSampleDataWithOptions(request *UnloadSampleDataRequest, runtime *dara.RuntimeOptions) (_result *UnloadSampleDataResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("UnloadSampleData"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Releases a sample dataset from an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// You can call this operation to release a sample dataset from an AnalyticDB for PostgreSQL instance. You must have already loaded the sample dataset.
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - UnloadSampleDataRequest
//
// @return UnloadSampleDataResponse
func (client *Client) UnloadSampleData(request *UnloadSampleDataRequest) (_result *UnloadSampleDataResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.UnloadSampleDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// # Remove resource tags
//
// @param request - UntagResourcesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UntagResourcesResponse
func (client *Client) UntagResourcesWithOptions(request *UntagResourcesRequest, runtime *dara.RuntimeOptions) (_result *UntagResourcesResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.All) {
		query["All"] = request.All
	}

	if !dara.IsNil(request.OwnerAccount) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.ResourceId) {
		query["ResourceId"] = request.ResourceId
	}

	if !dara.IsNil(request.ResourceOwnerAccount) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !dara.IsNil(request.ResourceOwnerId) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !dara.IsNil(request.ResourceType) {
		query["ResourceType"] = request.ResourceType
	}

	if !dara.IsNil(request.TagKey) {
		query["TagKey"] = request.TagKey
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("UntagResources"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// # Remove resource tags
//
// @param request - UntagResourcesRequest
//
// @return UntagResourcesResponse
func (client *Client) UntagResources(request *UntagResourcesRequest) (_result *UntagResourcesResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.UntagResourcesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// # Update Metadata of Collection Data
//
// @param tmpReq - UpdateCollectionDataMetadataRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateCollectionDataMetadataResponse
func (client *Client) UpdateCollectionDataMetadataWithOptions(tmpReq *UpdateCollectionDataMetadataRequest, runtime *dara.RuntimeOptions) (_result *UpdateCollectionDataMetadataResponse, _err error) {
	_err = tmpReq.Validate()
	if _err != nil {
		return _result, _err
	}
	request := &UpdateCollectionDataMetadataShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !dara.IsNil(tmpReq.Ids) {
		request.IdsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Ids, dara.String("Ids"), dara.String("json"))
	}

	if !dara.IsNil(tmpReq.Metadata) {
		request.MetadataShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Metadata, dara.String("Metadata"), dara.String("json"))
	}

	query := map[string]interface{}{}
	if !dara.IsNil(request.Collection) {
		query["Collection"] = request.Collection
	}

	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.Filter) {
		query["Filter"] = request.Filter
	}

	if !dara.IsNil(request.IdsShrink) {
		query["Ids"] = request.IdsShrink
	}

	if !dara.IsNil(request.MetadataShrink) {
		query["Metadata"] = request.MetadataShrink
	}

	if !dara.IsNil(request.Namespace) {
		query["Namespace"] = request.Namespace
	}

	if !dara.IsNil(request.NamespacePassword) {
		query["NamespacePassword"] = request.NamespacePassword
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.WorkspaceId) {
		query["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("UpdateCollectionDataMetadata"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// # Update Metadata of Collection Data
//
// @param request - UpdateCollectionDataMetadataRequest
//
// @return UpdateCollectionDataMetadataResponse
func (client *Client) UpdateCollectionDataMetadata(request *UpdateCollectionDataMetadataRequest) (_result *UpdateCollectionDataMetadataResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.UpdateCollectionDataMetadataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies a plan for an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// You can call this operation to modify a plan for an AnalyticDB for PostgreSQL instance in Serverless mode. For example, you can modify a plan for periodically pausing and resuming an instance or scaling an instance.
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - UpdateDBInstancePlanRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateDBInstancePlanResponse
func (client *Client) UpdateDBInstancePlanWithOptions(request *UpdateDBInstancePlanRequest, runtime *dara.RuntimeOptions) (_result *UpdateDBInstancePlanResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.PlanConfig) {
		query["PlanConfig"] = request.PlanConfig
	}

	if !dara.IsNil(request.PlanDesc) {
		query["PlanDesc"] = request.PlanDesc
	}

	if !dara.IsNil(request.PlanEndDate) {
		query["PlanEndDate"] = request.PlanEndDate
	}

	if !dara.IsNil(request.PlanId) {
		query["PlanId"] = request.PlanId
	}

	if !dara.IsNil(request.PlanName) {
		query["PlanName"] = request.PlanName
	}

	if !dara.IsNil(request.PlanStartDate) {
		query["PlanStartDate"] = request.PlanStartDate
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("UpdateDBInstancePlan"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Modifies a plan for an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// You can call this operation to modify a plan for an AnalyticDB for PostgreSQL instance in Serverless mode. For example, you can modify a plan for periodically pausing and resuming an instance or scaling an instance.
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - UpdateDBInstancePlanRequest
//
// @return UpdateDBInstancePlanResponse
func (client *Client) UpdateDBInstancePlan(request *UpdateDBInstancePlanRequest) (_result *UpdateDBInstancePlanResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.UpdateDBInstancePlanWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Changes the configurations of an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// This operation is not available for instances in reserved storage mode.
//
// Before you call this operation, make sure that you are familiar with the billing of AnalyticDB for PostgreSQL. For more information, see [Billing methods](https://help.aliyun.com/document_detail/35406.html) and [AnalyticDB for PostgreSQL pricing](https://www.alibabacloud.com/zh/product/hybriddb-postgresql/pricing).
//
// @param request - UpgradeDBInstanceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpgradeDBInstanceResponse
func (client *Client) UpgradeDBInstanceWithOptions(request *UpgradeDBInstanceRequest, runtime *dara.RuntimeOptions) (_result *UpgradeDBInstanceResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceClass) {
		query["DBInstanceClass"] = request.DBInstanceClass
	}

	if !dara.IsNil(request.DBInstanceGroupCount) {
		query["DBInstanceGroupCount"] = request.DBInstanceGroupCount
	}

	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.InstanceSpec) {
		query["InstanceSpec"] = request.InstanceSpec
	}

	if !dara.IsNil(request.MasterNodeNum) {
		query["MasterNodeNum"] = request.MasterNodeNum
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.PayType) {
		query["PayType"] = request.PayType
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.ResourceGroupId) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !dara.IsNil(request.SegDiskPerformanceLevel) {
		query["SegDiskPerformanceLevel"] = request.SegDiskPerformanceLevel
	}

	if !dara.IsNil(request.SegNodeNum) {
		query["SegNodeNum"] = request.SegNodeNum
	}

	if !dara.IsNil(request.SegStorageType) {
		query["SegStorageType"] = request.SegStorageType
	}

	if !dara.IsNil(request.StorageSize) {
		query["StorageSize"] = request.StorageSize
	}

	if !dara.IsNil(request.UpgradeType) {
		query["UpgradeType"] = request.UpgradeType
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("UpgradeDBInstance"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Changes the configurations of an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// This operation is not available for instances in reserved storage mode.
//
// Before you call this operation, make sure that you are familiar with the billing of AnalyticDB for PostgreSQL. For more information, see [Billing methods](https://help.aliyun.com/document_detail/35406.html) and [AnalyticDB for PostgreSQL pricing](https://www.alibabacloud.com/zh/product/hybriddb-postgresql/pricing).
//
// @param request - UpgradeDBInstanceRequest
//
// @return UpgradeDBInstanceResponse
func (client *Client) UpgradeDBInstance(request *UpgradeDBInstanceRequest) (_result *UpgradeDBInstanceResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.UpgradeDBInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Upgrades the minor version of an AnalyticDB for PostgreSQL instance.
//
// @param request - UpgradeDBVersionRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpgradeDBVersionResponse
func (client *Client) UpgradeDBVersionWithOptions(request *UpgradeDBVersionRequest, runtime *dara.RuntimeOptions) (_result *UpgradeDBVersionResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.MajorVersion) {
		query["MajorVersion"] = request.MajorVersion
	}

	if !dara.IsNil(request.MinorVersion) {
		query["MinorVersion"] = request.MinorVersion
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.SwitchTime) {
		query["SwitchTime"] = request.SwitchTime
	}

	if !dara.IsNil(request.SwitchTimeMode) {
		query["SwitchTimeMode"] = request.SwitchTimeMode
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("UpgradeDBVersion"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Upgrades the minor version of an AnalyticDB for PostgreSQL instance.
//
// @param request - UpgradeDBVersionRequest
//
// @return UpgradeDBVersionResponse
func (client *Client) UpgradeDBVersion(request *UpgradeDBVersionRequest) (_result *UpgradeDBVersionResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.UpgradeDBVersionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Updates extensions.
//
// @param request - UpgradeExtensionsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpgradeExtensionsResponse
func (client *Client) UpgradeExtensionsWithOptions(request *UpgradeExtensionsRequest, runtime *dara.RuntimeOptions) (_result *UpgradeExtensionsResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.DatabaseName) {
		query["DatabaseName"] = request.DatabaseName
	}

	if !dara.IsNil(request.Extensions) {
		query["Extensions"] = request.Extensions
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("UpgradeExtensions"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Updates extensions.
//
// @param request - UpgradeExtensionsRequest
//
// @return UpgradeExtensionsResponse
func (client *Client) UpgradeExtensions(request *UpgradeExtensionsRequest) (_result *UpgradeExtensionsResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.UpgradeExtensionsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// # Asynchronous Document Upload
//
// Description:
//
// The server loads and chunks a document based on the file extension, performs vectorization by using the embedding model that is specified when you call the CreateDocumentCollection operation, and then writes the document to the specified document collection. This operation supports multi-modal embedding for various formats of text and images.
//
// Related operations:
//
//   - You can call the GetUploadDocumentJob operation to query the progress and result of a document upload job.
//
//   - You can call the CancelUploadDocumentJob operation to cancel a document upload job.
//
// >
//
//   - After a document upload request is submitted, the request is queued for processing. Up to 20 documents in the Pending and Running states can be processed within a Resource Access Management (RAM) user or Alibaba Cloud account.
//
//   - A text document can be split into up to 100,000 chunks.
//
//   - If a document collection uses the OnePeace model, each RAM user or Alibaba Cloud account can upload and query up to 10,000 images.
//
// @param tmpReq - UploadDocumentAsyncRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UploadDocumentAsyncResponse
func (client *Client) UploadDocumentAsyncWithOptions(tmpReq *UploadDocumentAsyncRequest, runtime *dara.RuntimeOptions) (_result *UploadDocumentAsyncResponse, _err error) {
	_err = tmpReq.Validate()
	if _err != nil {
		return _result, _err
	}
	request := &UploadDocumentAsyncShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !dara.IsNil(tmpReq.Metadata) {
		request.MetadataShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Metadata, dara.String("Metadata"), dara.String("json"))
	}

	if !dara.IsNil(tmpReq.Separators) {
		request.SeparatorsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Separators, dara.String("Separators"), dara.String("json"))
	}

	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	body := map[string]interface{}{}
	if !dara.IsNil(request.ChunkOverlap) {
		body["ChunkOverlap"] = request.ChunkOverlap
	}

	if !dara.IsNil(request.ChunkSize) {
		body["ChunkSize"] = request.ChunkSize
	}

	if !dara.IsNil(request.Collection) {
		body["Collection"] = request.Collection
	}

	if !dara.IsNil(request.DocumentLoaderName) {
		body["DocumentLoaderName"] = request.DocumentLoaderName
	}

	if !dara.IsNil(request.DryRun) {
		body["DryRun"] = request.DryRun
	}

	if !dara.IsNil(request.FileName) {
		body["FileName"] = request.FileName
	}

	if !dara.IsNil(request.FileUrl) {
		body["FileUrl"] = request.FileUrl
	}

	if !dara.IsNil(request.MetadataShrink) {
		body["Metadata"] = request.MetadataShrink
	}

	if !dara.IsNil(request.Namespace) {
		body["Namespace"] = request.Namespace
	}

	if !dara.IsNil(request.NamespacePassword) {
		body["NamespacePassword"] = request.NamespacePassword
	}

	if !dara.IsNil(request.SeparatorsShrink) {
		body["Separators"] = request.SeparatorsShrink
	}

	if !dara.IsNil(request.TextSplitterName) {
		body["TextSplitterName"] = request.TextSplitterName
	}

	if !dara.IsNil(request.ZhTitleEnhance) {
		body["ZhTitleEnhance"] = request.ZhTitleEnhance
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapiutil.Params{
		Action:      dara.String("UploadDocumentAsync"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// # Asynchronous Document Upload
//
// Description:
//
// The server loads and chunks a document based on the file extension, performs vectorization by using the embedding model that is specified when you call the CreateDocumentCollection operation, and then writes the document to the specified document collection. This operation supports multi-modal embedding for various formats of text and images.
//
// Related operations:
//
//   - You can call the GetUploadDocumentJob operation to query the progress and result of a document upload job.
//
//   - You can call the CancelUploadDocumentJob operation to cancel a document upload job.
//
// >
//
//   - After a document upload request is submitted, the request is queued for processing. Up to 20 documents in the Pending and Running states can be processed within a Resource Access Management (RAM) user or Alibaba Cloud account.
//
//   - A text document can be split into up to 100,000 chunks.
//
//   - If a document collection uses the OnePeace model, each RAM user or Alibaba Cloud account can upload and query up to 10,000 images.
//
// @param request - UploadDocumentAsyncRequest
//
// @return UploadDocumentAsyncResponse
func (client *Client) UploadDocumentAsync(request *UploadDocumentAsyncRequest) (_result *UploadDocumentAsyncResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.UploadDocumentAsyncWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UploadDocumentAsyncAdvance(request *UploadDocumentAsyncAdvanceRequest, runtime *dara.RuntimeOptions) (_result *UploadDocumentAsyncResponse, _err error) {
	// Step 0: init client
	accessKeyIdTmp, _err := client.Credential.GetAccessKeyId()
	accessKeyId := dara.StringValue(accessKeyIdTmp)
	if _err != nil {
		return _result, _err
	}

	accessKeySecretTmp, _err := client.Credential.GetAccessKeySecret()
	accessKeySecret := dara.StringValue(accessKeySecretTmp)
	if _err != nil {
		return _result, _err
	}

	securityTokenTmp, _err := client.Credential.GetSecurityToken()
	securityToken := dara.StringValue(securityTokenTmp)
	if _err != nil {
		return _result, _err
	}

	credentialType := dara.StringValue(client.Credential.GetType())
	openPlatformEndpoint := dara.StringValue(client.OpenPlatformEndpoint)
	if dara.IsNil(dara.String(openPlatformEndpoint)) {
		openPlatformEndpoint = "openplatform.aliyuncs.com"
	}

	if dara.IsNil(dara.String(credentialType)) {
		credentialType = "access_key"
	}

	authConfig := &openapiutil.Config{
		AccessKeyId:     dara.String(accessKeyId),
		AccessKeySecret: dara.String(accessKeySecret),
		SecurityToken:   dara.String(securityToken),
		Type:            dara.String(credentialType),
		Endpoint:        dara.String(openPlatformEndpoint),
		Protocol:        client.Protocol,
		RegionId:        client.RegionId,
	}
	authClient, _err := openplatform.NewClient(authConfig)
	if _err != nil {
		return _result, _err
	}

	authRequest := &openplatform.AuthorizeFileUploadRequest{
		Product:  dara.String("gpdb"),
		RegionId: client.RegionId,
	}
	authResponse := &openplatform.AuthorizeFileUploadResponse{}
	ossConfig := &oss.Config{
		AccessKeyId:     dara.String(accessKeyId),
		AccessKeySecret: dara.String(accessKeySecret),
		Type:            dara.String("access_key"),
		Protocol:        client.Protocol,
		RegionId:        client.RegionId,
	}
	ossClient, _err := oss.NewClient(ossConfig)
	if _err != nil {
		return _result, _err
	}

	fileObj := &fileform.FileField{}
	ossHeader := &oss.PostObjectRequestHeader{}
	uploadRequest := &oss.PostObjectRequest{}
	ossRuntime := &ossutil.RuntimeOptions{}
	openapiutil.Convert(runtime, ossRuntime)
	uploadDocumentAsyncReq := &UploadDocumentAsyncRequest{}
	openapiutil.Convert(request, uploadDocumentAsyncReq)
	if !dara.IsNil(request.FileUrlObject) {
		authResponse, _err = authClient.AuthorizeFileUploadWithOptions(authRequest, runtime)
		if _err != nil {
			return _result, _err
		}

		ossConfig.AccessKeyId = authResponse.Body.AccessKeyId
		ossConfig.Endpoint = openapiutil.GetEndpoint(authResponse.Body.Endpoint, authResponse.Body.UseAccelerate, client.EndpointType)
		ossClient, _err = oss.NewClient(ossConfig)
		if _err != nil {
			return _result, _err
		}

		fileObj = &fileform.FileField{
			Filename:    authResponse.Body.ObjectKey,
			Content:     request.FileUrlObject,
			ContentType: dara.String(""),
		}
		ossHeader = &oss.PostObjectRequestHeader{
			AccessKeyId:         authResponse.Body.AccessKeyId,
			Policy:              authResponse.Body.EncodedPolicy,
			Signature:           authResponse.Body.Signature,
			Key:                 authResponse.Body.ObjectKey,
			File:                fileObj,
			SuccessActionStatus: dara.String("201"),
		}
		uploadRequest = &oss.PostObjectRequest{
			BucketName: authResponse.Body.Bucket,
			Header:     ossHeader,
		}
		_, _err = ossClient.PostObject(uploadRequest, ossRuntime)
		if _err != nil {
			return _result, _err
		}
		uploadDocumentAsyncReq.FileUrl = dara.String("http://" + dara.StringValue(authResponse.Body.Bucket) + "." + dara.StringValue(authResponse.Body.Endpoint) + "/" + dara.StringValue(authResponse.Body.ObjectKey))
	}

	uploadDocumentAsyncResp, _err := client.UploadDocumentAsyncWithOptions(uploadDocumentAsyncReq, runtime)
	if _err != nil {
		return _result, _err
	}

	_result = uploadDocumentAsyncResp
	return _result, _err
}

// Summary:
//
// # Upload split text
//
// Description:
//
// The vectorization algorithm for the document is specified by the CreateDocumentCollection API.
//
// @param tmpReq - UpsertChunksRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpsertChunksResponse
func (client *Client) UpsertChunksWithOptions(tmpReq *UpsertChunksRequest, runtime *dara.RuntimeOptions) (_result *UpsertChunksResponse, _err error) {
	_err = tmpReq.Validate()
	if _err != nil {
		return _result, _err
	}
	request := &UpsertChunksShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !dara.IsNil(tmpReq.TextChunks) {
		request.TextChunksShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TextChunks, dara.String("TextChunks"), dara.String("json"))
	}

	query := map[string]interface{}{}
	if !dara.IsNil(request.Collection) {
		query["Collection"] = request.Collection
	}

	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.FileName) {
		query["FileName"] = request.FileName
	}

	if !dara.IsNil(request.Namespace) {
		query["Namespace"] = request.Namespace
	}

	if !dara.IsNil(request.NamespacePassword) {
		query["NamespacePassword"] = request.NamespacePassword
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	body := map[string]interface{}{}
	if !dara.IsNil(request.TextChunksShrink) {
		body["TextChunks"] = request.TextChunksShrink
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapiutil.Params{
		Action:      dara.String("UpsertChunks"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// # Upload split text
//
// Description:
//
// The vectorization algorithm for the document is specified by the CreateDocumentCollection API.
//
// @param request - UpsertChunksRequest
//
// @return UpsertChunksResponse
func (client *Client) UpsertChunks(request *UpsertChunksRequest) (_result *UpsertChunksResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.UpsertChunksWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Uploads vector data to a vector collection.
//
// @param tmpReq - UpsertCollectionDataRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpsertCollectionDataResponse
func (client *Client) UpsertCollectionDataWithOptions(tmpReq *UpsertCollectionDataRequest, runtime *dara.RuntimeOptions) (_result *UpsertCollectionDataResponse, _err error) {
	_err = tmpReq.Validate()
	if _err != nil {
		return _result, _err
	}
	request := &UpsertCollectionDataShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !dara.IsNil(tmpReq.Rows) {
		request.RowsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Rows, dara.String("Rows"), dara.String("json"))
	}

	query := map[string]interface{}{}
	if !dara.IsNil(request.Collection) {
		query["Collection"] = request.Collection
	}

	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.Namespace) {
		query["Namespace"] = request.Namespace
	}

	if !dara.IsNil(request.NamespacePassword) {
		query["NamespacePassword"] = request.NamespacePassword
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.WorkspaceId) {
		query["WorkspaceId"] = request.WorkspaceId
	}

	body := map[string]interface{}{}
	if !dara.IsNil(request.RowsShrink) {
		body["Rows"] = request.RowsShrink
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapiutil.Params{
		Action:      dara.String("UpsertCollectionData"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Uploads vector data to a vector collection.
//
// @param request - UpsertCollectionDataRequest
//
// @return UpsertCollectionDataResponse
func (client *Client) UpsertCollectionData(request *UpsertCollectionDataRequest) (_result *UpsertCollectionDataResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.UpsertCollectionDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Uploads vector data in an asynchronous manner by using an on-premises file or a password-free Internet-accessible file URL. The vector data can be up to 200 MB in size.
//
// Description:
//
// This operation is the asynchronous operation of `UpsertCollectionData`. The `UpsertCollectionData` operation supports up to 10 MB of data, and this operation supports up to 200 MB of data.
//
// >  Related operations:
//
//   - You can call the GetUpsertCollectionDataJob operation to query the progress and result of an upload job.
//
//   - You can call the CancelUpsertCollectionDataJob operation to cancel an upload job.
//
// > You can upload data for the same collection only in a serial manner.
//
// @param request - UpsertCollectionDataAsyncRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpsertCollectionDataAsyncResponse
func (client *Client) UpsertCollectionDataAsyncWithOptions(request *UpsertCollectionDataAsyncRequest, runtime *dara.RuntimeOptions) (_result *UpsertCollectionDataAsyncResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DBInstanceId) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.WorkspaceId) {
		query["WorkspaceId"] = request.WorkspaceId
	}

	body := map[string]interface{}{}
	if !dara.IsNil(request.Collection) {
		body["Collection"] = request.Collection
	}

	if !dara.IsNil(request.FileUrl) {
		body["FileUrl"] = request.FileUrl
	}

	if !dara.IsNil(request.Namespace) {
		body["Namespace"] = request.Namespace
	}

	if !dara.IsNil(request.NamespacePassword) {
		body["NamespacePassword"] = request.NamespacePassword
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapiutil.Params{
		Action:      dara.String("UpsertCollectionDataAsync"),
		Version:     dara.String("2016-05-03"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	if dara.IsNil(client.SignatureVersion) || dara.StringValue(client.SignatureVersion) != "v4" {
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	} else {
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = dara.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Uploads vector data in an asynchronous manner by using an on-premises file or a password-free Internet-accessible file URL. The vector data can be up to 200 MB in size.
//
// Description:
//
// This operation is the asynchronous operation of `UpsertCollectionData`. The `UpsertCollectionData` operation supports up to 10 MB of data, and this operation supports up to 200 MB of data.
//
// >  Related operations:
//
//   - You can call the GetUpsertCollectionDataJob operation to query the progress and result of an upload job.
//
//   - You can call the CancelUpsertCollectionDataJob operation to cancel an upload job.
//
// > You can upload data for the same collection only in a serial manner.
//
// @param request - UpsertCollectionDataAsyncRequest
//
// @return UpsertCollectionDataAsyncResponse
func (client *Client) UpsertCollectionDataAsync(request *UpsertCollectionDataAsyncRequest) (_result *UpsertCollectionDataAsyncResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_body, _err := client.UpsertCollectionDataAsyncWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpsertCollectionDataAsyncAdvance(request *UpsertCollectionDataAsyncAdvanceRequest, runtime *dara.RuntimeOptions) (_result *UpsertCollectionDataAsyncResponse, _err error) {
	// Step 0: init client
	accessKeyIdTmp, _err := client.Credential.GetAccessKeyId()
	accessKeyId := dara.StringValue(accessKeyIdTmp)
	if _err != nil {
		return _result, _err
	}

	accessKeySecretTmp, _err := client.Credential.GetAccessKeySecret()
	accessKeySecret := dara.StringValue(accessKeySecretTmp)
	if _err != nil {
		return _result, _err
	}

	securityTokenTmp, _err := client.Credential.GetSecurityToken()
	securityToken := dara.StringValue(securityTokenTmp)
	if _err != nil {
		return _result, _err
	}

	credentialType := dara.StringValue(client.Credential.GetType())
	openPlatformEndpoint := dara.StringValue(client.OpenPlatformEndpoint)
	if dara.IsNil(dara.String(openPlatformEndpoint)) {
		openPlatformEndpoint = "openplatform.aliyuncs.com"
	}

	if dara.IsNil(dara.String(credentialType)) {
		credentialType = "access_key"
	}

	authConfig := &openapiutil.Config{
		AccessKeyId:     dara.String(accessKeyId),
		AccessKeySecret: dara.String(accessKeySecret),
		SecurityToken:   dara.String(securityToken),
		Type:            dara.String(credentialType),
		Endpoint:        dara.String(openPlatformEndpoint),
		Protocol:        client.Protocol,
		RegionId:        client.RegionId,
	}
	authClient, _err := openplatform.NewClient(authConfig)
	if _err != nil {
		return _result, _err
	}

	authRequest := &openplatform.AuthorizeFileUploadRequest{
		Product:  dara.String("gpdb"),
		RegionId: client.RegionId,
	}
	authResponse := &openplatform.AuthorizeFileUploadResponse{}
	ossConfig := &oss.Config{
		AccessKeyId:     dara.String(accessKeyId),
		AccessKeySecret: dara.String(accessKeySecret),
		Type:            dara.String("access_key"),
		Protocol:        client.Protocol,
		RegionId:        client.RegionId,
	}
	ossClient, _err := oss.NewClient(ossConfig)
	if _err != nil {
		return _result, _err
	}

	fileObj := &fileform.FileField{}
	ossHeader := &oss.PostObjectRequestHeader{}
	uploadRequest := &oss.PostObjectRequest{}
	ossRuntime := &ossutil.RuntimeOptions{}
	openapiutil.Convert(runtime, ossRuntime)
	upsertCollectionDataAsyncReq := &UpsertCollectionDataAsyncRequest{}
	openapiutil.Convert(request, upsertCollectionDataAsyncReq)
	if !dara.IsNil(request.FileUrlObject) {
		authResponse, _err = authClient.AuthorizeFileUploadWithOptions(authRequest, runtime)
		if _err != nil {
			return _result, _err
		}

		ossConfig.AccessKeyId = authResponse.Body.AccessKeyId
		ossConfig.Endpoint = openapiutil.GetEndpoint(authResponse.Body.Endpoint, authResponse.Body.UseAccelerate, client.EndpointType)
		ossClient, _err = oss.NewClient(ossConfig)
		if _err != nil {
			return _result, _err
		}

		fileObj = &fileform.FileField{
			Filename:    authResponse.Body.ObjectKey,
			Content:     request.FileUrlObject,
			ContentType: dara.String(""),
		}
		ossHeader = &oss.PostObjectRequestHeader{
			AccessKeyId:         authResponse.Body.AccessKeyId,
			Policy:              authResponse.Body.EncodedPolicy,
			Signature:           authResponse.Body.Signature,
			Key:                 authResponse.Body.ObjectKey,
			File:                fileObj,
			SuccessActionStatus: dara.String("201"),
		}
		uploadRequest = &oss.PostObjectRequest{
			BucketName: authResponse.Body.Bucket,
			Header:     ossHeader,
		}
		_, _err = ossClient.PostObject(uploadRequest, ossRuntime)
		if _err != nil {
			return _result, _err
		}
		upsertCollectionDataAsyncReq.FileUrl = dara.String("http://" + dara.StringValue(authResponse.Body.Bucket) + "." + dara.StringValue(authResponse.Body.Endpoint) + "/" + dara.StringValue(authResponse.Body.ObjectKey))
	}

	upsertCollectionDataAsyncResp, _err := client.UpsertCollectionDataAsyncWithOptions(upsertCollectionDataAsyncReq, runtime)
	if _err != nil {
		return _result, _err
	}

	_result = upsertCollectionDataAsyncResp
	return _result, _err
}
