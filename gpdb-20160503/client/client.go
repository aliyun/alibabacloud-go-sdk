// This file is auto-generated, don't edit it. Thanks.
package client

import (
	openapi "github.com/alibabacloud-go/darabonba-openapi/v2/client"
	endpointutil "github.com/alibabacloud-go/endpoint-util/service"
	openapiutil "github.com/alibabacloud-go/openapi-util/service"
	openplatform "github.com/alibabacloud-go/openplatform-20191219/v2/client"
	fileform "github.com/alibabacloud-go/tea-fileform/service"
	oss "github.com/alibabacloud-go/tea-oss-sdk/client"
	ossutil "github.com/alibabacloud-go/tea-oss-utils/service"
	util "github.com/alibabacloud-go/tea-utils/v2/service"
	"github.com/alibabacloud-go/tea/tea"
	"io"
)

type ColumnMetadata struct {
	ColumnDefault   *string `json:"ColumnDefault,omitempty" xml:"ColumnDefault,omitempty"`
	Comment         *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	DataType        *string `json:"DataType,omitempty" xml:"DataType,omitempty"`
	IsCaseSensitive *bool   `json:"IsCaseSensitive,omitempty" xml:"IsCaseSensitive,omitempty"`
	IsCurrency      *bool   `json:"IsCurrency,omitempty" xml:"IsCurrency,omitempty"`
	IsPrimaryKey    *bool   `json:"IsPrimaryKey,omitempty" xml:"IsPrimaryKey,omitempty"`
	IsSigned        *bool   `json:"IsSigned,omitempty" xml:"IsSigned,omitempty"`
	MaxLength       *int32  `json:"MaxLength,omitempty" xml:"MaxLength,omitempty"`
	Name            *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Nullable        *bool   `json:"Nullable,omitempty" xml:"Nullable,omitempty"`
	Precision       *int32  `json:"Precision,omitempty" xml:"Precision,omitempty"`
	Scale           *int32  `json:"Scale,omitempty" xml:"Scale,omitempty"`
	SchemaName      *string `json:"SchemaName,omitempty" xml:"SchemaName,omitempty"`
	TableName       *string `json:"TableName,omitempty" xml:"TableName,omitempty"`
	UdtName         *string `json:"UdtName,omitempty" xml:"UdtName,omitempty"`
}

func (s ColumnMetadata) String() string {
	return tea.Prettify(s)
}

func (s ColumnMetadata) GoString() string {
	return s.String()
}

func (s *ColumnMetadata) SetColumnDefault(v string) *ColumnMetadata {
	s.ColumnDefault = &v
	return s
}

func (s *ColumnMetadata) SetComment(v string) *ColumnMetadata {
	s.Comment = &v
	return s
}

func (s *ColumnMetadata) SetDataType(v string) *ColumnMetadata {
	s.DataType = &v
	return s
}

func (s *ColumnMetadata) SetIsCaseSensitive(v bool) *ColumnMetadata {
	s.IsCaseSensitive = &v
	return s
}

func (s *ColumnMetadata) SetIsCurrency(v bool) *ColumnMetadata {
	s.IsCurrency = &v
	return s
}

func (s *ColumnMetadata) SetIsPrimaryKey(v bool) *ColumnMetadata {
	s.IsPrimaryKey = &v
	return s
}

func (s *ColumnMetadata) SetIsSigned(v bool) *ColumnMetadata {
	s.IsSigned = &v
	return s
}

func (s *ColumnMetadata) SetMaxLength(v int32) *ColumnMetadata {
	s.MaxLength = &v
	return s
}

func (s *ColumnMetadata) SetName(v string) *ColumnMetadata {
	s.Name = &v
	return s
}

func (s *ColumnMetadata) SetNullable(v bool) *ColumnMetadata {
	s.Nullable = &v
	return s
}

func (s *ColumnMetadata) SetPrecision(v int32) *ColumnMetadata {
	s.Precision = &v
	return s
}

func (s *ColumnMetadata) SetScale(v int32) *ColumnMetadata {
	s.Scale = &v
	return s
}

func (s *ColumnMetadata) SetSchemaName(v string) *ColumnMetadata {
	s.SchemaName = &v
	return s
}

func (s *ColumnMetadata) SetTableName(v string) *ColumnMetadata {
	s.TableName = &v
	return s
}

func (s *ColumnMetadata) SetUdtName(v string) *ColumnMetadata {
	s.UdtName = &v
	return s
}

type Field struct {
	BlobValue    *string  `json:"BlobValue,omitempty" xml:"BlobValue,omitempty"`
	BooleanValue *bool    `json:"BooleanValue,omitempty" xml:"BooleanValue,omitempty"`
	DoubleValue  *float64 `json:"DoubleValue,omitempty" xml:"DoubleValue,omitempty"`
	IsNull       *bool    `json:"IsNull,omitempty" xml:"IsNull,omitempty"`
	LongValue    *int64   `json:"LongValue,omitempty" xml:"LongValue,omitempty"`
	StringValue  *string  `json:"StringValue,omitempty" xml:"StringValue,omitempty"`
}

func (s Field) String() string {
	return tea.Prettify(s)
}

func (s Field) GoString() string {
	return s.String()
}

func (s *Field) SetBlobValue(v string) *Field {
	s.BlobValue = &v
	return s
}

func (s *Field) SetBooleanValue(v bool) *Field {
	s.BooleanValue = &v
	return s
}

func (s *Field) SetDoubleValue(v float64) *Field {
	s.DoubleValue = &v
	return s
}

func (s *Field) SetIsNull(v bool) *Field {
	s.IsNull = &v
	return s
}

func (s *Field) SetLongValue(v int64) *Field {
	s.LongValue = &v
	return s
}

func (s *Field) SetStringValue(v string) *Field {
	s.StringValue = &v
	return s
}

type StatementData struct {
	CreatedAt  *string   `json:"CreatedAt,omitempty" xml:"CreatedAt,omitempty"`
	Database   *string   `json:"Database,omitempty" xml:"Database,omitempty"`
	Id         *string   `json:"Id,omitempty" xml:"Id,omitempty"`
	Parameters []*string `json:"Parameters,omitempty" xml:"Parameters,omitempty" type:"Repeated"`
	SecretArn  *string   `json:"SecretArn,omitempty" xml:"SecretArn,omitempty"`
	Sql        *string   `json:"Sql,omitempty" xml:"Sql,omitempty"`
	Sqls       []*string `json:"Sqls,omitempty" xml:"Sqls,omitempty" type:"Repeated"`
	Status     *string   `json:"Status,omitempty" xml:"Status,omitempty"`
	UpdatedAt  *string   `json:"UpdatedAt,omitempty" xml:"UpdatedAt,omitempty"`
}

func (s StatementData) String() string {
	return tea.Prettify(s)
}

func (s StatementData) GoString() string {
	return s.String()
}

func (s *StatementData) SetCreatedAt(v string) *StatementData {
	s.CreatedAt = &v
	return s
}

func (s *StatementData) SetDatabase(v string) *StatementData {
	s.Database = &v
	return s
}

func (s *StatementData) SetId(v string) *StatementData {
	s.Id = &v
	return s
}

func (s *StatementData) SetParameters(v []*string) *StatementData {
	s.Parameters = v
	return s
}

func (s *StatementData) SetSecretArn(v string) *StatementData {
	s.SecretArn = &v
	return s
}

func (s *StatementData) SetSql(v string) *StatementData {
	s.Sql = &v
	return s
}

func (s *StatementData) SetSqls(v []*string) *StatementData {
	s.Sqls = v
	return s
}

func (s *StatementData) SetStatus(v string) *StatementData {
	s.Status = &v
	return s
}

func (s *StatementData) SetUpdatedAt(v string) *StatementData {
	s.UpdatedAt = &v
	return s
}

type AllocateInstancePublicConnectionRequest struct {
	// The network type of the endpoint. Valid values:
	//
	// 	- **primary**: primary endpoint
	//
	// 	- **cluster**: instance endpoint. This value is supported only for an instance that contains multiple coordinator nodes.
	//
	// >  The default value is primary.
	//
	// example:
	//
	// primary
	AddressType *string `json:"AddressType,omitempty" xml:"AddressType,omitempty"`
	// The prefix of the endpoint.
	//
	// Specify a prefix for the endpoint. Example: `gp-bp12ga6v69h86****`. In this example, the endpoint is `gp-bp12ga6v69h86****.gpdb.rds.aliyuncs.com`.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	ConnectionStringPrefix *string `json:"ConnectionStringPrefix,omitempty" xml:"ConnectionStringPrefix,omitempty"`
	// The ID of the instance.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the details of all AnalyticDB for PostgreSQL instances in a specific region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The port number. Example: 5432.
	//
	// This parameter is required.
	//
	// example:
	//
	// 5432
	Port                 *string `json:"Port,omitempty" xml:"Port,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s AllocateInstancePublicConnectionRequest) String() string {
	return tea.Prettify(s)
}

func (s AllocateInstancePublicConnectionRequest) GoString() string {
	return s.String()
}

func (s *AllocateInstancePublicConnectionRequest) SetAddressType(v string) *AllocateInstancePublicConnectionRequest {
	s.AddressType = &v
	return s
}

func (s *AllocateInstancePublicConnectionRequest) SetConnectionStringPrefix(v string) *AllocateInstancePublicConnectionRequest {
	s.ConnectionStringPrefix = &v
	return s
}

func (s *AllocateInstancePublicConnectionRequest) SetDBInstanceId(v string) *AllocateInstancePublicConnectionRequest {
	s.DBInstanceId = &v
	return s
}

func (s *AllocateInstancePublicConnectionRequest) SetOwnerId(v int64) *AllocateInstancePublicConnectionRequest {
	s.OwnerId = &v
	return s
}

func (s *AllocateInstancePublicConnectionRequest) SetPort(v string) *AllocateInstancePublicConnectionRequest {
	s.Port = &v
	return s
}

func (s *AllocateInstancePublicConnectionRequest) SetResourceOwnerAccount(v string) *AllocateInstancePublicConnectionRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *AllocateInstancePublicConnectionRequest) SetResourceOwnerId(v int64) *AllocateInstancePublicConnectionRequest {
	s.ResourceOwnerId = &v
	return s
}

type AllocateInstancePublicConnectionResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// ADD6EA90-EECB-4C12-9F26-0B6DB587****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AllocateInstancePublicConnectionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AllocateInstancePublicConnectionResponseBody) GoString() string {
	return s.String()
}

func (s *AllocateInstancePublicConnectionResponseBody) SetRequestId(v string) *AllocateInstancePublicConnectionResponseBody {
	s.RequestId = &v
	return s
}

type AllocateInstancePublicConnectionResponse struct {
	Headers    map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AllocateInstancePublicConnectionResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AllocateInstancePublicConnectionResponse) String() string {
	return tea.Prettify(s)
}

func (s AllocateInstancePublicConnectionResponse) GoString() string {
	return s.String()
}

func (s *AllocateInstancePublicConnectionResponse) SetHeaders(v map[string]*string) *AllocateInstancePublicConnectionResponse {
	s.Headers = v
	return s
}

func (s *AllocateInstancePublicConnectionResponse) SetStatusCode(v int32) *AllocateInstancePublicConnectionResponse {
	s.StatusCode = &v
	return s
}

func (s *AllocateInstancePublicConnectionResponse) SetBody(v *AllocateInstancePublicConnectionResponseBody) *AllocateInstancePublicConnectionResponse {
	s.Body = v
	return s
}

type BindDBResourceGroupWithRoleRequest struct {
	// The instance ID.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The name of the resource group.
	//
	// This parameter is required.
	//
	// example:
	//
	// testgroup
	ResourceGroupName *string `json:"ResourceGroupName,omitempty" xml:"ResourceGroupName,omitempty"`
	// The roles.
	//
	// This parameter is required.
	RoleList []*string `json:"RoleList,omitempty" xml:"RoleList,omitempty" type:"Repeated"`
}

func (s BindDBResourceGroupWithRoleRequest) String() string {
	return tea.Prettify(s)
}

func (s BindDBResourceGroupWithRoleRequest) GoString() string {
	return s.String()
}

func (s *BindDBResourceGroupWithRoleRequest) SetDBInstanceId(v string) *BindDBResourceGroupWithRoleRequest {
	s.DBInstanceId = &v
	return s
}

func (s *BindDBResourceGroupWithRoleRequest) SetOwnerId(v int64) *BindDBResourceGroupWithRoleRequest {
	s.OwnerId = &v
	return s
}

func (s *BindDBResourceGroupWithRoleRequest) SetResourceGroupName(v string) *BindDBResourceGroupWithRoleRequest {
	s.ResourceGroupName = &v
	return s
}

func (s *BindDBResourceGroupWithRoleRequest) SetRoleList(v []*string) *BindDBResourceGroupWithRoleRequest {
	s.RoleList = v
	return s
}

type BindDBResourceGroupWithRoleShrinkRequest struct {
	// The instance ID.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The name of the resource group.
	//
	// This parameter is required.
	//
	// example:
	//
	// testgroup
	ResourceGroupName *string `json:"ResourceGroupName,omitempty" xml:"ResourceGroupName,omitempty"`
	// The roles.
	//
	// This parameter is required.
	RoleListShrink *string `json:"RoleList,omitempty" xml:"RoleList,omitempty"`
}

func (s BindDBResourceGroupWithRoleShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s BindDBResourceGroupWithRoleShrinkRequest) GoString() string {
	return s.String()
}

func (s *BindDBResourceGroupWithRoleShrinkRequest) SetDBInstanceId(v string) *BindDBResourceGroupWithRoleShrinkRequest {
	s.DBInstanceId = &v
	return s
}

func (s *BindDBResourceGroupWithRoleShrinkRequest) SetOwnerId(v int64) *BindDBResourceGroupWithRoleShrinkRequest {
	s.OwnerId = &v
	return s
}

func (s *BindDBResourceGroupWithRoleShrinkRequest) SetResourceGroupName(v string) *BindDBResourceGroupWithRoleShrinkRequest {
	s.ResourceGroupName = &v
	return s
}

func (s *BindDBResourceGroupWithRoleShrinkRequest) SetRoleListShrink(v string) *BindDBResourceGroupWithRoleShrinkRequest {
	s.RoleListShrink = &v
	return s
}

type BindDBResourceGroupWithRoleResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s BindDBResourceGroupWithRoleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s BindDBResourceGroupWithRoleResponseBody) GoString() string {
	return s.String()
}

func (s *BindDBResourceGroupWithRoleResponseBody) SetRequestId(v string) *BindDBResourceGroupWithRoleResponseBody {
	s.RequestId = &v
	return s
}

type BindDBResourceGroupWithRoleResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *BindDBResourceGroupWithRoleResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s BindDBResourceGroupWithRoleResponse) String() string {
	return tea.Prettify(s)
}

func (s BindDBResourceGroupWithRoleResponse) GoString() string {
	return s.String()
}

func (s *BindDBResourceGroupWithRoleResponse) SetHeaders(v map[string]*string) *BindDBResourceGroupWithRoleResponse {
	s.Headers = v
	return s
}

func (s *BindDBResourceGroupWithRoleResponse) SetStatusCode(v int32) *BindDBResourceGroupWithRoleResponse {
	s.StatusCode = &v
	return s
}

func (s *BindDBResourceGroupWithRoleResponse) SetBody(v *BindDBResourceGroupWithRoleResponseBody) *BindDBResourceGroupWithRoleResponse {
	s.Body = v
	return s
}

type CancelCreateIndexJobRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// testcollection
	Collection *string `json:"Collection,omitempty" xml:"Collection,omitempty"`
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 231460f8-75dc-405e-a669-0c5204887e91
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// mynamespace
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// testpassword
	NamespacePassword *string `json:"NamespacePassword,omitempty" xml:"NamespacePassword,omitempty"`
	OwnerId           *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// example:
	//
	// gp-ws-*****
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s CancelCreateIndexJobRequest) String() string {
	return tea.Prettify(s)
}

func (s CancelCreateIndexJobRequest) GoString() string {
	return s.String()
}

func (s *CancelCreateIndexJobRequest) SetCollection(v string) *CancelCreateIndexJobRequest {
	s.Collection = &v
	return s
}

func (s *CancelCreateIndexJobRequest) SetDBInstanceId(v string) *CancelCreateIndexJobRequest {
	s.DBInstanceId = &v
	return s
}

func (s *CancelCreateIndexJobRequest) SetJobId(v string) *CancelCreateIndexJobRequest {
	s.JobId = &v
	return s
}

func (s *CancelCreateIndexJobRequest) SetNamespace(v string) *CancelCreateIndexJobRequest {
	s.Namespace = &v
	return s
}

func (s *CancelCreateIndexJobRequest) SetNamespacePassword(v string) *CancelCreateIndexJobRequest {
	s.NamespacePassword = &v
	return s
}

func (s *CancelCreateIndexJobRequest) SetOwnerId(v int64) *CancelCreateIndexJobRequest {
	s.OwnerId = &v
	return s
}

func (s *CancelCreateIndexJobRequest) SetRegionId(v string) *CancelCreateIndexJobRequest {
	s.RegionId = &v
	return s
}

func (s *CancelCreateIndexJobRequest) SetWorkspaceId(v string) *CancelCreateIndexJobRequest {
	s.WorkspaceId = &v
	return s
}

type CancelCreateIndexJobResponseBody struct {
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s CancelCreateIndexJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CancelCreateIndexJobResponseBody) GoString() string {
	return s.String()
}

func (s *CancelCreateIndexJobResponseBody) SetMessage(v string) *CancelCreateIndexJobResponseBody {
	s.Message = &v
	return s
}

func (s *CancelCreateIndexJobResponseBody) SetRequestId(v string) *CancelCreateIndexJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *CancelCreateIndexJobResponseBody) SetStatus(v string) *CancelCreateIndexJobResponseBody {
	s.Status = &v
	return s
}

type CancelCreateIndexJobResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CancelCreateIndexJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CancelCreateIndexJobResponse) String() string {
	return tea.Prettify(s)
}

func (s CancelCreateIndexJobResponse) GoString() string {
	return s.String()
}

func (s *CancelCreateIndexJobResponse) SetHeaders(v map[string]*string) *CancelCreateIndexJobResponse {
	s.Headers = v
	return s
}

func (s *CancelCreateIndexJobResponse) SetStatusCode(v int32) *CancelCreateIndexJobResponse {
	s.StatusCode = &v
	return s
}

func (s *CancelCreateIndexJobResponse) SetBody(v *CancelCreateIndexJobResponseBody) *CancelCreateIndexJobResponse {
	s.Body = v
	return s
}

type CancelUploadDocumentJobRequest struct {
	// The name of the document collection.
	//
	// >  You can call the [CreateDocumentCollection](https://help.aliyun.com/document_detail/2618448.html) operation to create a document collection and call the [ListDocumentCollections](https://help.aliyun.com/document_detail/2618452.html) operation to query a list of document collections.
	//
	// This parameter is required.
	//
	// example:
	//
	// document
	Collection *string `json:"Collection,omitempty" xml:"Collection,omitempty"`
	// The ID of the instance for which vector engine optimization is enabled.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The ID of the document upload job. You can call the `UploadDocumentAsync` operation to query the job ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 231460f8-75dc-405e-a669-0c5204887e91
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// The name of the namespace. Default value: public.
	//
	// >  You can call the CreateNamespace operation to create a namespace and call the ListNamespaces operation to query a list of namespaces.
	//
	// example:
	//
	// mynamespace
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// The password of the namespace.
	//
	// >  The value of this parameter is specified when you call the CreateNamespace operation.
	//
	// This parameter is required.
	//
	// example:
	//
	// testpassword
	NamespacePassword *string `json:"NamespacePassword,omitempty" xml:"NamespacePassword,omitempty"`
	OwnerId           *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The region ID of the instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s CancelUploadDocumentJobRequest) String() string {
	return tea.Prettify(s)
}

func (s CancelUploadDocumentJobRequest) GoString() string {
	return s.String()
}

func (s *CancelUploadDocumentJobRequest) SetCollection(v string) *CancelUploadDocumentJobRequest {
	s.Collection = &v
	return s
}

func (s *CancelUploadDocumentJobRequest) SetDBInstanceId(v string) *CancelUploadDocumentJobRequest {
	s.DBInstanceId = &v
	return s
}

func (s *CancelUploadDocumentJobRequest) SetJobId(v string) *CancelUploadDocumentJobRequest {
	s.JobId = &v
	return s
}

func (s *CancelUploadDocumentJobRequest) SetNamespace(v string) *CancelUploadDocumentJobRequest {
	s.Namespace = &v
	return s
}

func (s *CancelUploadDocumentJobRequest) SetNamespacePassword(v string) *CancelUploadDocumentJobRequest {
	s.NamespacePassword = &v
	return s
}

func (s *CancelUploadDocumentJobRequest) SetOwnerId(v int64) *CancelUploadDocumentJobRequest {
	s.OwnerId = &v
	return s
}

func (s *CancelUploadDocumentJobRequest) SetRegionId(v string) *CancelUploadDocumentJobRequest {
	s.RegionId = &v
	return s
}

type CancelUploadDocumentJobResponseBody struct {
	// The returned message.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The status of the operation. Valid values:
	//
	// 	- **success**
	//
	// 	- **fail**
	//
	// example:
	//
	// success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s CancelUploadDocumentJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CancelUploadDocumentJobResponseBody) GoString() string {
	return s.String()
}

func (s *CancelUploadDocumentJobResponseBody) SetMessage(v string) *CancelUploadDocumentJobResponseBody {
	s.Message = &v
	return s
}

func (s *CancelUploadDocumentJobResponseBody) SetRequestId(v string) *CancelUploadDocumentJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *CancelUploadDocumentJobResponseBody) SetStatus(v string) *CancelUploadDocumentJobResponseBody {
	s.Status = &v
	return s
}

type CancelUploadDocumentJobResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CancelUploadDocumentJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CancelUploadDocumentJobResponse) String() string {
	return tea.Prettify(s)
}

func (s CancelUploadDocumentJobResponse) GoString() string {
	return s.String()
}

func (s *CancelUploadDocumentJobResponse) SetHeaders(v map[string]*string) *CancelUploadDocumentJobResponse {
	s.Headers = v
	return s
}

func (s *CancelUploadDocumentJobResponse) SetStatusCode(v int32) *CancelUploadDocumentJobResponse {
	s.StatusCode = &v
	return s
}

func (s *CancelUploadDocumentJobResponse) SetBody(v *CancelUploadDocumentJobResponseBody) *CancelUploadDocumentJobResponse {
	s.Body = v
	return s
}

type CancelUpsertCollectionDataJobRequest struct {
	// The name of the collection.
	//
	// >  You can call the [ListCollections](https://help.aliyun.com/document_detail/2401503.html) operation to query a list of collections.
	//
	// This parameter is required.
	//
	// example:
	//
	// document
	Collection *string `json:"Collection,omitempty" xml:"Collection,omitempty"`
	// The instance ID.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The ID of the vector data upload job. You can call the `UpsertCollectionDataAsync` operation to query the job ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// bf8f7bc4-9276-44f7-9c22-1d06edc8dfd1
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// The name of the namespace. Default value: public.
	//
	// >  You can call the CreateNamespace operation to create a namespace and call the ListNamespaces operation to query a list of namespaces.
	//
	// example:
	//
	// mynamespace
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// The password of the namespace.
	//
	// >  The value of this parameter is specified when you call the CreateNamespace operation.
	//
	// This parameter is required.
	//
	// example:
	//
	// testpassword
	NamespacePassword *string `json:"NamespacePassword,omitempty" xml:"NamespacePassword,omitempty"`
	OwnerId           *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The region ID of the instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the workspace that consists of multiple AnalyticDB for PostgreSQL instances. You must specify one of the WorkspaceId and DBInstanceId parameters. If you specify both parameters, the WorkspaceId parameter takes effect.
	//
	// example:
	//
	// gp-ws-*****
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s CancelUpsertCollectionDataJobRequest) String() string {
	return tea.Prettify(s)
}

func (s CancelUpsertCollectionDataJobRequest) GoString() string {
	return s.String()
}

func (s *CancelUpsertCollectionDataJobRequest) SetCollection(v string) *CancelUpsertCollectionDataJobRequest {
	s.Collection = &v
	return s
}

func (s *CancelUpsertCollectionDataJobRequest) SetDBInstanceId(v string) *CancelUpsertCollectionDataJobRequest {
	s.DBInstanceId = &v
	return s
}

func (s *CancelUpsertCollectionDataJobRequest) SetJobId(v string) *CancelUpsertCollectionDataJobRequest {
	s.JobId = &v
	return s
}

func (s *CancelUpsertCollectionDataJobRequest) SetNamespace(v string) *CancelUpsertCollectionDataJobRequest {
	s.Namespace = &v
	return s
}

func (s *CancelUpsertCollectionDataJobRequest) SetNamespacePassword(v string) *CancelUpsertCollectionDataJobRequest {
	s.NamespacePassword = &v
	return s
}

func (s *CancelUpsertCollectionDataJobRequest) SetOwnerId(v int64) *CancelUpsertCollectionDataJobRequest {
	s.OwnerId = &v
	return s
}

func (s *CancelUpsertCollectionDataJobRequest) SetRegionId(v string) *CancelUpsertCollectionDataJobRequest {
	s.RegionId = &v
	return s
}

func (s *CancelUpsertCollectionDataJobRequest) SetWorkspaceId(v string) *CancelUpsertCollectionDataJobRequest {
	s.WorkspaceId = &v
	return s
}

type CancelUpsertCollectionDataJobResponseBody struct {
	// The returned message.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The status of the operation. Valid values:
	//
	// 	- **success**
	//
	// 	- **fail**
	//
	// example:
	//
	// success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s CancelUpsertCollectionDataJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CancelUpsertCollectionDataJobResponseBody) GoString() string {
	return s.String()
}

func (s *CancelUpsertCollectionDataJobResponseBody) SetMessage(v string) *CancelUpsertCollectionDataJobResponseBody {
	s.Message = &v
	return s
}

func (s *CancelUpsertCollectionDataJobResponseBody) SetRequestId(v string) *CancelUpsertCollectionDataJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *CancelUpsertCollectionDataJobResponseBody) SetStatus(v string) *CancelUpsertCollectionDataJobResponseBody {
	s.Status = &v
	return s
}

type CancelUpsertCollectionDataJobResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CancelUpsertCollectionDataJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CancelUpsertCollectionDataJobResponse) String() string {
	return tea.Prettify(s)
}

func (s CancelUpsertCollectionDataJobResponse) GoString() string {
	return s.String()
}

func (s *CancelUpsertCollectionDataJobResponse) SetHeaders(v map[string]*string) *CancelUpsertCollectionDataJobResponse {
	s.Headers = v
	return s
}

func (s *CancelUpsertCollectionDataJobResponse) SetStatusCode(v int32) *CancelUpsertCollectionDataJobResponse {
	s.StatusCode = &v
	return s
}

func (s *CancelUpsertCollectionDataJobResponse) SetBody(v *CancelUpsertCollectionDataJobResponseBody) *CancelUpsertCollectionDataJobResponse {
	s.Body = v
	return s
}

type CheckHadoopDataSourceRequest struct {
	// The Hadoop path that you want to check.
	//
	// This parameter is required.
	//
	// example:
	//
	// tmp
	CheckDir *string `json:"CheckDir,omitempty" xml:"CheckDir,omitempty"`
	// The instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The data source ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 123
	DataSourceId *string `json:"DataSourceId,omitempty" xml:"DataSourceId,omitempty"`
	// The region ID.
	//
	// >  You can call the [DescribeRegions](https://help.aliyun.com/document_detail/86912.html) operation to query the most recent region list.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s CheckHadoopDataSourceRequest) String() string {
	return tea.Prettify(s)
}

func (s CheckHadoopDataSourceRequest) GoString() string {
	return s.String()
}

func (s *CheckHadoopDataSourceRequest) SetCheckDir(v string) *CheckHadoopDataSourceRequest {
	s.CheckDir = &v
	return s
}

func (s *CheckHadoopDataSourceRequest) SetDBInstanceId(v string) *CheckHadoopDataSourceRequest {
	s.DBInstanceId = &v
	return s
}

func (s *CheckHadoopDataSourceRequest) SetDataSourceId(v string) *CheckHadoopDataSourceRequest {
	s.DataSourceId = &v
	return s
}

func (s *CheckHadoopDataSourceRequest) SetRegionId(v string) *CheckHadoopDataSourceRequest {
	s.RegionId = &v
	return s
}

type CheckHadoopDataSourceResponseBody struct {
	// The returned message. If the service failed, an error message is returned. Otherwise, a pair of double quotation marks ("") is returned.
	//
	// example:
	//
	// serivce unavaliable
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// B4CAF581-2AC7-41AD-8940-D56DF7AADF5B
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The status of the service. Valid values:
	//
	// 	- Running
	//
	// 	- Failed
	//
	// example:
	//
	// Running
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s CheckHadoopDataSourceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CheckHadoopDataSourceResponseBody) GoString() string {
	return s.String()
}

func (s *CheckHadoopDataSourceResponseBody) SetMessage(v string) *CheckHadoopDataSourceResponseBody {
	s.Message = &v
	return s
}

func (s *CheckHadoopDataSourceResponseBody) SetRequestId(v string) *CheckHadoopDataSourceResponseBody {
	s.RequestId = &v
	return s
}

func (s *CheckHadoopDataSourceResponseBody) SetStatus(v string) *CheckHadoopDataSourceResponseBody {
	s.Status = &v
	return s
}

type CheckHadoopDataSourceResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CheckHadoopDataSourceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CheckHadoopDataSourceResponse) String() string {
	return tea.Prettify(s)
}

func (s CheckHadoopDataSourceResponse) GoString() string {
	return s.String()
}

func (s *CheckHadoopDataSourceResponse) SetHeaders(v map[string]*string) *CheckHadoopDataSourceResponse {
	s.Headers = v
	return s
}

func (s *CheckHadoopDataSourceResponse) SetStatusCode(v int32) *CheckHadoopDataSourceResponse {
	s.StatusCode = &v
	return s
}

func (s *CheckHadoopDataSourceResponse) SetBody(v *CheckHadoopDataSourceResponseBody) *CheckHadoopDataSourceResponse {
	s.Body = v
	return s
}

type CheckHadoopNetConnectionRequest struct {
	// Instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// 1. Either DataSourceId or EmrInstanceId must be specified as input, otherwise an error will occur.
	//
	// 2. If both of the above parameters are specified, EmrInstanceId will be used preferentially.
	//
	// 3. If the data source specified by DataSourceId is a self-built Hadoop cluster, an error will occur directly.
	//
	// example:
	//
	// 126
	DataSourceId *string `json:"DataSourceId,omitempty" xml:"DataSourceId,omitempty"`
	// EMR instance ID.
	//
	// example:
	//
	// c-xxx
	EmrInstanceId *string `json:"EmrInstanceId,omitempty" xml:"EmrInstanceId,omitempty"`
	// Region ID.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s CheckHadoopNetConnectionRequest) String() string {
	return tea.Prettify(s)
}

func (s CheckHadoopNetConnectionRequest) GoString() string {
	return s.String()
}

func (s *CheckHadoopNetConnectionRequest) SetDBInstanceId(v string) *CheckHadoopNetConnectionRequest {
	s.DBInstanceId = &v
	return s
}

func (s *CheckHadoopNetConnectionRequest) SetDataSourceId(v string) *CheckHadoopNetConnectionRequest {
	s.DataSourceId = &v
	return s
}

func (s *CheckHadoopNetConnectionRequest) SetEmrInstanceId(v string) *CheckHadoopNetConnectionRequest {
	s.EmrInstanceId = &v
	return s
}

func (s *CheckHadoopNetConnectionRequest) SetRegionId(v string) *CheckHadoopNetConnectionRequest {
	s.RegionId = &v
	return s
}

type CheckHadoopNetConnectionResponseBody struct {
	// Return message: Returns error information if the connection fails, otherwise returns an empty string ("").
	//
	// example:
	//
	// connection timeout
	ConnectionMessage *string `json:"ConnectionMessage,omitempty" xml:"ConnectionMessage,omitempty"`
	// Connection status:
	//
	// - Network connected: Success
	//
	// - Network not connected: Failed
	//
	// example:
	//
	// Success
	ConnectionStatus *string `json:"ConnectionStatus,omitempty" xml:"ConnectionStatus,omitempty"`
	// Request ID.
	//
	// example:
	//
	// B4CAF581-2AC7-41AD-8940-D56DF7AADF5B
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CheckHadoopNetConnectionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CheckHadoopNetConnectionResponseBody) GoString() string {
	return s.String()
}

func (s *CheckHadoopNetConnectionResponseBody) SetConnectionMessage(v string) *CheckHadoopNetConnectionResponseBody {
	s.ConnectionMessage = &v
	return s
}

func (s *CheckHadoopNetConnectionResponseBody) SetConnectionStatus(v string) *CheckHadoopNetConnectionResponseBody {
	s.ConnectionStatus = &v
	return s
}

func (s *CheckHadoopNetConnectionResponseBody) SetRequestId(v string) *CheckHadoopNetConnectionResponseBody {
	s.RequestId = &v
	return s
}

type CheckHadoopNetConnectionResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CheckHadoopNetConnectionResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CheckHadoopNetConnectionResponse) String() string {
	return tea.Prettify(s)
}

func (s CheckHadoopNetConnectionResponse) GoString() string {
	return s.String()
}

func (s *CheckHadoopNetConnectionResponse) SetHeaders(v map[string]*string) *CheckHadoopNetConnectionResponse {
	s.Headers = v
	return s
}

func (s *CheckHadoopNetConnectionResponse) SetStatusCode(v int32) *CheckHadoopNetConnectionResponse {
	s.StatusCode = &v
	return s
}

func (s *CheckHadoopNetConnectionResponse) SetBody(v *CheckHadoopNetConnectionResponseBody) *CheckHadoopNetConnectionResponse {
	s.Body = v
	return s
}

type CheckJDBCSourceNetConnectionRequest struct {
	// Instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// Either DataSourceId or JdbcConnectionString must be specified as input, otherwise an error will occur. If both parameters are specified, JdbcConnectionString will be used preferentially.
	//
	// example:
	//
	// 123
	DataSourceId *string `json:"DataSourceId,omitempty" xml:"DataSourceId,omitempty"`
	// JDBC connection string.
	//
	// example:
	//
	// jdbc:mysql://rm-xxx.mysql.rds.aliyuncs.com:3306/testadmin
	JdbcConnectionString *string `json:"JdbcConnectionString,omitempty" xml:"JdbcConnectionString,omitempty"`
	// The ID of the region where the instance is located.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s CheckJDBCSourceNetConnectionRequest) String() string {
	return tea.Prettify(s)
}

func (s CheckJDBCSourceNetConnectionRequest) GoString() string {
	return s.String()
}

func (s *CheckJDBCSourceNetConnectionRequest) SetDBInstanceId(v string) *CheckJDBCSourceNetConnectionRequest {
	s.DBInstanceId = &v
	return s
}

func (s *CheckJDBCSourceNetConnectionRequest) SetDataSourceId(v string) *CheckJDBCSourceNetConnectionRequest {
	s.DataSourceId = &v
	return s
}

func (s *CheckJDBCSourceNetConnectionRequest) SetJdbcConnectionString(v string) *CheckJDBCSourceNetConnectionRequest {
	s.JdbcConnectionString = &v
	return s
}

func (s *CheckJDBCSourceNetConnectionRequest) SetRegionId(v string) *CheckJDBCSourceNetConnectionRequest {
	s.RegionId = &v
	return s
}

type CheckJDBCSourceNetConnectionResponseBody struct {
	// Return message: Error message returned when the connection fails, otherwise returns an empty string ("").
	//
	// example:
	//
	// connection timeout
	ConnectionMessage *string `json:"ConnectionMessage,omitempty" xml:"ConnectionMessage,omitempty"`
	// Service status:
	//
	// - Network connected: Success
	//
	// - Network not connected: Failed
	//
	// example:
	//
	// Success
	ConnectionStatus *string `json:"ConnectionStatus,omitempty" xml:"ConnectionStatus,omitempty"`
	// Request ID.
	//
	// example:
	//
	// B4CAF581-2AC7-41AD-8940-D56DF7AADF5B
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CheckJDBCSourceNetConnectionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CheckJDBCSourceNetConnectionResponseBody) GoString() string {
	return s.String()
}

func (s *CheckJDBCSourceNetConnectionResponseBody) SetConnectionMessage(v string) *CheckJDBCSourceNetConnectionResponseBody {
	s.ConnectionMessage = &v
	return s
}

func (s *CheckJDBCSourceNetConnectionResponseBody) SetConnectionStatus(v string) *CheckJDBCSourceNetConnectionResponseBody {
	s.ConnectionStatus = &v
	return s
}

func (s *CheckJDBCSourceNetConnectionResponseBody) SetRequestId(v string) *CheckJDBCSourceNetConnectionResponseBody {
	s.RequestId = &v
	return s
}

type CheckJDBCSourceNetConnectionResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CheckJDBCSourceNetConnectionResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CheckJDBCSourceNetConnectionResponse) String() string {
	return tea.Prettify(s)
}

func (s CheckJDBCSourceNetConnectionResponse) GoString() string {
	return s.String()
}

func (s *CheckJDBCSourceNetConnectionResponse) SetHeaders(v map[string]*string) *CheckJDBCSourceNetConnectionResponse {
	s.Headers = v
	return s
}

func (s *CheckJDBCSourceNetConnectionResponse) SetStatusCode(v int32) *CheckJDBCSourceNetConnectionResponse {
	s.StatusCode = &v
	return s
}

func (s *CheckJDBCSourceNetConnectionResponse) SetBody(v *CheckJDBCSourceNetConnectionResponseBody) *CheckJDBCSourceNetConnectionResponse {
	s.Body = v
	return s
}

type CheckServiceLinkedRoleRequest struct {
	// The ID of the region. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/86912.html) operation to query the most recent region list.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s CheckServiceLinkedRoleRequest) String() string {
	return tea.Prettify(s)
}

func (s CheckServiceLinkedRoleRequest) GoString() string {
	return s.String()
}

func (s *CheckServiceLinkedRoleRequest) SetRegionId(v string) *CheckServiceLinkedRoleRequest {
	s.RegionId = &v
	return s
}

type CheckServiceLinkedRoleResponseBody struct {
	// Indicates whether an SLR is created.
	//
	// example:
	//
	// true
	HasServiceLinkedRole *string `json:"HasServiceLinkedRole,omitempty" xml:"HasServiceLinkedRole,omitempty"`
	// The ID of the region.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// B4CAF581-2AC7-41AD-8940-D56DF7AADF5B
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CheckServiceLinkedRoleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CheckServiceLinkedRoleResponseBody) GoString() string {
	return s.String()
}

func (s *CheckServiceLinkedRoleResponseBody) SetHasServiceLinkedRole(v string) *CheckServiceLinkedRoleResponseBody {
	s.HasServiceLinkedRole = &v
	return s
}

func (s *CheckServiceLinkedRoleResponseBody) SetRegionId(v string) *CheckServiceLinkedRoleResponseBody {
	s.RegionId = &v
	return s
}

func (s *CheckServiceLinkedRoleResponseBody) SetRequestId(v string) *CheckServiceLinkedRoleResponseBody {
	s.RequestId = &v
	return s
}

type CheckServiceLinkedRoleResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CheckServiceLinkedRoleResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CheckServiceLinkedRoleResponse) String() string {
	return tea.Prettify(s)
}

func (s CheckServiceLinkedRoleResponse) GoString() string {
	return s.String()
}

func (s *CheckServiceLinkedRoleResponse) SetHeaders(v map[string]*string) *CheckServiceLinkedRoleResponse {
	s.Headers = v
	return s
}

func (s *CheckServiceLinkedRoleResponse) SetStatusCode(v int32) *CheckServiceLinkedRoleResponse {
	s.StatusCode = &v
	return s
}

func (s *CheckServiceLinkedRoleResponse) SetBody(v *CheckServiceLinkedRoleResponseBody) *CheckServiceLinkedRoleResponse {
	s.Body = v
	return s
}

type CloneDBInstanceRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 1111111111
	BackupId *string `json:"BackupId,omitempty" xml:"BackupId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// gp-bp***************
	SrcDbInstanceName *string `json:"SrcDbInstanceName,omitempty" xml:"SrcDbInstanceName,omitempty"`
}

func (s CloneDBInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s CloneDBInstanceRequest) GoString() string {
	return s.String()
}

func (s *CloneDBInstanceRequest) SetBackupId(v string) *CloneDBInstanceRequest {
	s.BackupId = &v
	return s
}

func (s *CloneDBInstanceRequest) SetDBInstanceId(v string) *CloneDBInstanceRequest {
	s.DBInstanceId = &v
	return s
}

func (s *CloneDBInstanceRequest) SetSrcDbInstanceName(v string) *CloneDBInstanceRequest {
	s.SrcDbInstanceName = &v
	return s
}

type CloneDBInstanceResponseBody struct {
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CloneDBInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CloneDBInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *CloneDBInstanceResponseBody) SetRequestId(v string) *CloneDBInstanceResponseBody {
	s.RequestId = &v
	return s
}

type CloneDBInstanceResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CloneDBInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CloneDBInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s CloneDBInstanceResponse) GoString() string {
	return s.String()
}

func (s *CloneDBInstanceResponse) SetHeaders(v map[string]*string) *CloneDBInstanceResponse {
	s.Headers = v
	return s
}

func (s *CloneDBInstanceResponse) SetStatusCode(v int32) *CloneDBInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *CloneDBInstanceResponse) SetBody(v *CloneDBInstanceResponseBody) *CloneDBInstanceResponse {
	s.Body = v
	return s
}

type CreateAccountRequest struct {
	// The description of the initial account.
	//
	// example:
	//
	// testacc02
	AccountDescription *string `json:"AccountDescription,omitempty" xml:"AccountDescription,omitempty"`
	// The name of the initial account.
	//
	// 	- The name can contain lowercase letters, digits, and underscores (_).
	//
	// 	- The name must start with a lowercase letter and end with a lowercase letter or a digit.
	//
	// 	- The name cannot start with gp.
	//
	// 	- The name must be 2 to 16 characters in length.
	//
	// This parameter is required.
	//
	// example:
	//
	// testacc02
	AccountName *string `json:"AccountName,omitempty" xml:"AccountName,omitempty"`
	// The password of the initial account.
	//
	// 	- The password must contain at least three of the following character types: uppercase letters, lowercase letters, digits, and special characters.
	//
	// 	- Special characters include `! @ # $ % ^ & 	- ( ) _ + - =`
	//
	// 	- The password must be 8 to 32 characters in length.
	//
	// This parameter is required.
	//
	// example:
	//
	// Pw123456
	AccountPassword *string `json:"AccountPassword,omitempty" xml:"AccountPassword,omitempty"`
	// The type of the initial account. Default value: Super, which specifies a privileged account. To create a standard account, set the value to Normal.
	//
	// example:
	//
	// Super
	AccountType *string `json:"AccountType,omitempty" xml:"AccountType,omitempty"`
	// The ID of the instance.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the details of all AnalyticDB for PostgreSQL instances in a specific region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp***************
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The name of the database.
	//
	// example:
	//
	// test01
	DatabaseName *string `json:"DatabaseName,omitempty" xml:"DatabaseName,omitempty"`
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s CreateAccountRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateAccountRequest) GoString() string {
	return s.String()
}

func (s *CreateAccountRequest) SetAccountDescription(v string) *CreateAccountRequest {
	s.AccountDescription = &v
	return s
}

func (s *CreateAccountRequest) SetAccountName(v string) *CreateAccountRequest {
	s.AccountName = &v
	return s
}

func (s *CreateAccountRequest) SetAccountPassword(v string) *CreateAccountRequest {
	s.AccountPassword = &v
	return s
}

func (s *CreateAccountRequest) SetAccountType(v string) *CreateAccountRequest {
	s.AccountType = &v
	return s
}

func (s *CreateAccountRequest) SetDBInstanceId(v string) *CreateAccountRequest {
	s.DBInstanceId = &v
	return s
}

func (s *CreateAccountRequest) SetDatabaseName(v string) *CreateAccountRequest {
	s.DatabaseName = &v
	return s
}

func (s *CreateAccountRequest) SetOwnerId(v int64) *CreateAccountRequest {
	s.OwnerId = &v
	return s
}

type CreateAccountResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// D4D4BE8A-DD46-440A-BFCD-EE**********
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateAccountResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateAccountResponseBody) GoString() string {
	return s.String()
}

func (s *CreateAccountResponseBody) SetRequestId(v string) *CreateAccountResponseBody {
	s.RequestId = &v
	return s
}

type CreateAccountResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateAccountResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateAccountResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateAccountResponse) GoString() string {
	return s.String()
}

func (s *CreateAccountResponse) SetHeaders(v map[string]*string) *CreateAccountResponse {
	s.Headers = v
	return s
}

func (s *CreateAccountResponse) SetStatusCode(v int32) *CreateAccountResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateAccountResponse) SetBody(v *CreateAccountResponseBody) *CreateAccountResponse {
	s.Body = v
	return s
}

type CreateBackupRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
}

func (s CreateBackupRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateBackupRequest) GoString() string {
	return s.String()
}

func (s *CreateBackupRequest) SetDBInstanceId(v string) *CreateBackupRequest {
	s.DBInstanceId = &v
	return s
}

type CreateBackupResponseBody struct {
	// example:
	//
	// 123
	BackupJobId *int64 `json:"BackupJobId,omitempty" xml:"BackupJobId,omitempty"`
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateBackupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateBackupResponseBody) GoString() string {
	return s.String()
}

func (s *CreateBackupResponseBody) SetBackupJobId(v int64) *CreateBackupResponseBody {
	s.BackupJobId = &v
	return s
}

func (s *CreateBackupResponseBody) SetRequestId(v string) *CreateBackupResponseBody {
	s.RequestId = &v
	return s
}

type CreateBackupResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateBackupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateBackupResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateBackupResponse) GoString() string {
	return s.String()
}

func (s *CreateBackupResponse) SetHeaders(v map[string]*string) *CreateBackupResponse {
	s.Headers = v
	return s
}

func (s *CreateBackupResponse) SetStatusCode(v int32) *CreateBackupResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateBackupResponse) SetBody(v *CreateBackupResponseBody) *CreateBackupResponse {
	s.Body = v
	return s
}

type CreateCollectionRequest struct {
	// The name of the collection that you want to create.
	//
	// >  The name must comply with the naming conventions of PostgreSQL objects.
	//
	// This parameter is required.
	//
	// example:
	//
	// document
	Collection *string `json:"Collection,omitempty" xml:"Collection,omitempty"`
	// The instance ID.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the IDs of all AnalyticDB for PostgreSQL instances in a specific region.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The number of vector dimensions.
	//
	// >  If you specify this parameter, an index is created. When you call the [UpsertCollectionData](https://help.aliyun.com/document_detail/2401493.html) operation, make sure that the length of the Rows.Vector parameter is the same as the value of this parameter. If you do not specify this parameter, you can call the [CreateVectorIndex](https://help.aliyun.com/document_detail/2401499.html) operation to create an index.
	//
	// example:
	//
	// 1024
	Dimension *int64 `json:"Dimension,omitempty" xml:"Dimension,omitempty"`
	// Specifies whether to use the memory mapping technology to create HNSW indexes. Valid values: 0 and 1. Default value: 0. We recommend that you set the value to 1 in scenarios that require upload speed but not data deletion.
	//
	// >
	//
	// 	- 0: uses segmented paging storage to create indexes. This method uses the shared buffer of PostgreSQL for caching and supports the delete and update operations.
	//
	// 	- 1: uses the memory mapping technology to create indexes. This method does not support the delete or update operation.
	//
	// example:
	//
	// 0
	ExternalStorage *int32 `json:"ExternalStorage,omitempty" xml:"ExternalStorage,omitempty"`
	// The fields used for full-text search. Separate multiple fields with commas (,). These fields must be keys defined in Metadata.
	//
	// example:
	//
	// title,content
	FullTextRetrievalFields *string `json:"FullTextRetrievalFields,omitempty" xml:"FullTextRetrievalFields,omitempty"`
	HnswEfConstruction      *string `json:"HnswEfConstruction,omitempty" xml:"HnswEfConstruction,omitempty"`
	// The maximum number of neighbors for the Hierarchical Navigable Small World (HNSW) algorithm. Valid values: 1 to 1000. In most cases, this parameter is automatically configured based on the value of the Dimension parameter. You do not need to configure this parameter.
	//
	// >  We recommend that you configure this parameter based on the value of the Dimension parameter.
	//
	// *If you set Dimension to a value less than or equal to 384, set the value of HnswM to 16.
	//
	// *If you set Dimension to a value greater than 384 and less than or equal to 768, set the value of HnswM to 32.
	//
	// *If you set Dimension to a value greater than 768 and less than or equal to 1024, set the value of HnswM to 64.
	//
	// *If you set Dimension to a value greater than 1024, set the value of HnswM to 128.
	//
	// example:
	//
	// 64
	HnswM *int32 `json:"HnswM,omitempty" xml:"HnswM,omitempty"`
	// Name of the management account with rds_superuser permissions.
	//
	// > You can create an account through the console -> Account Management, or by using the [CreateAccount](https://help.aliyun.com/document_detail/2361789.html) API.
	//
	// This parameter is required.
	//
	// example:
	//
	// testaccount
	ManagerAccount *string `json:"ManagerAccount,omitempty" xml:"ManagerAccount,omitempty"`
	// The password of the manager account.
	//
	// This parameter is required.
	//
	// example:
	//
	// testpassword
	ManagerAccountPassword *string `json:"ManagerAccountPassword,omitempty" xml:"ManagerAccountPassword,omitempty"`
	// The metadata of the vector data, which is a JSON string in the MAP format. The key specifies the field name, and the value specifies the data type.
	//
	// >  Supported data types:
	//
	// 	- For information about the supported data types, see [Data types](https://www.alibabacloud.com/help/zh/analyticdb/analyticdb-for-postgresql/developer-reference/data-types-1/).
	//
	// 	- The money data type is not supported.
	//
	// **
	//
	// **Warning*	- Reserved fields such as id, vector, to_tsvector, and source cannot be used.
	//
	// This parameter is required.
	//
	// example:
	//
	// {"title":"text","content":"text","response":"int"}
	Metadata *string `json:"Metadata,omitempty" xml:"Metadata,omitempty"`
	// The scalar index fields. Separate multiple fields with commas (,). These fields must be keys defined in Metadata.
	//
	// example:
	//
	// title
	MetadataIndices *string `json:"MetadataIndices,omitempty" xml:"MetadataIndices,omitempty"`
	// The method that is used to create vector indexes. Valid values:
	//
	// 	- l2: Euclidean distance.
	//
	// 	- ip: inner product distance.
	//
	// 	- cosine: cosine similarity.
	//
	// example:
	//
	// cosine
	Metrics *string `json:"Metrics,omitempty" xml:"Metrics,omitempty"`
	// The name of the namespace.
	//
	// >  You can call the [CreateNamespace](https://help.aliyun.com/document_detail/2401495.html) operation to create a namespace and call the [ListNamespaces](https://help.aliyun.com/document_detail/2401502.html) operation to query a list of namespaces.
	//
	// example:
	//
	// mynamespace
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	OwnerId   *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The analyzer that is used for full-text search.
	//
	// example:
	//
	// zh_cn
	Parser *string `json:"Parser,omitempty" xml:"Parser,omitempty"`
	// Specifies whether to enable the product quantization (PQ) feature for index acceleration. We recommend that you enable this feature for more than 500,000 rows of data. Valid values:
	//
	// 	- 0: no.
	//
	// 	- 1 (default): yes.
	//
	// example:
	//
	// 0
	PqEnable *int32 `json:"PqEnable,omitempty" xml:"PqEnable,omitempty"`
	// The region ID of the instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId                *string                                         `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	SparseVectorIndexConfig *CreateCollectionRequestSparseVectorIndexConfig `json:"SparseVectorIndexConfig,omitempty" xml:"SparseVectorIndexConfig,omitempty" type:"Struct"`
	SupportSparse           *bool                                           `json:"SupportSparse,omitempty" xml:"SupportSparse,omitempty"`
	// The ID of the workspace that consists of multiple AnalyticDB for PostgreSQL instances. You must specify one of the WorkspaceId and DBInstanceId parameters. If you specify both parameters, the WorkspaceId parameter takes effect.
	//
	// example:
	//
	// gp-ws-*****
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s CreateCollectionRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateCollectionRequest) GoString() string {
	return s.String()
}

func (s *CreateCollectionRequest) SetCollection(v string) *CreateCollectionRequest {
	s.Collection = &v
	return s
}

func (s *CreateCollectionRequest) SetDBInstanceId(v string) *CreateCollectionRequest {
	s.DBInstanceId = &v
	return s
}

func (s *CreateCollectionRequest) SetDimension(v int64) *CreateCollectionRequest {
	s.Dimension = &v
	return s
}

func (s *CreateCollectionRequest) SetExternalStorage(v int32) *CreateCollectionRequest {
	s.ExternalStorage = &v
	return s
}

func (s *CreateCollectionRequest) SetFullTextRetrievalFields(v string) *CreateCollectionRequest {
	s.FullTextRetrievalFields = &v
	return s
}

func (s *CreateCollectionRequest) SetHnswEfConstruction(v string) *CreateCollectionRequest {
	s.HnswEfConstruction = &v
	return s
}

func (s *CreateCollectionRequest) SetHnswM(v int32) *CreateCollectionRequest {
	s.HnswM = &v
	return s
}

func (s *CreateCollectionRequest) SetManagerAccount(v string) *CreateCollectionRequest {
	s.ManagerAccount = &v
	return s
}

func (s *CreateCollectionRequest) SetManagerAccountPassword(v string) *CreateCollectionRequest {
	s.ManagerAccountPassword = &v
	return s
}

func (s *CreateCollectionRequest) SetMetadata(v string) *CreateCollectionRequest {
	s.Metadata = &v
	return s
}

func (s *CreateCollectionRequest) SetMetadataIndices(v string) *CreateCollectionRequest {
	s.MetadataIndices = &v
	return s
}

func (s *CreateCollectionRequest) SetMetrics(v string) *CreateCollectionRequest {
	s.Metrics = &v
	return s
}

func (s *CreateCollectionRequest) SetNamespace(v string) *CreateCollectionRequest {
	s.Namespace = &v
	return s
}

func (s *CreateCollectionRequest) SetOwnerId(v int64) *CreateCollectionRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateCollectionRequest) SetParser(v string) *CreateCollectionRequest {
	s.Parser = &v
	return s
}

func (s *CreateCollectionRequest) SetPqEnable(v int32) *CreateCollectionRequest {
	s.PqEnable = &v
	return s
}

func (s *CreateCollectionRequest) SetRegionId(v string) *CreateCollectionRequest {
	s.RegionId = &v
	return s
}

func (s *CreateCollectionRequest) SetSparseVectorIndexConfig(v *CreateCollectionRequestSparseVectorIndexConfig) *CreateCollectionRequest {
	s.SparseVectorIndexConfig = v
	return s
}

func (s *CreateCollectionRequest) SetSupportSparse(v bool) *CreateCollectionRequest {
	s.SupportSparse = &v
	return s
}

func (s *CreateCollectionRequest) SetWorkspaceId(v string) *CreateCollectionRequest {
	s.WorkspaceId = &v
	return s
}

type CreateCollectionRequestSparseVectorIndexConfig struct {
	HnswEfConstruction *int32 `json:"HnswEfConstruction,omitempty" xml:"HnswEfConstruction,omitempty"`
	HnswM              *int32 `json:"HnswM,omitempty" xml:"HnswM,omitempty"`
}

func (s CreateCollectionRequestSparseVectorIndexConfig) String() string {
	return tea.Prettify(s)
}

func (s CreateCollectionRequestSparseVectorIndexConfig) GoString() string {
	return s.String()
}

func (s *CreateCollectionRequestSparseVectorIndexConfig) SetHnswEfConstruction(v int32) *CreateCollectionRequestSparseVectorIndexConfig {
	s.HnswEfConstruction = &v
	return s
}

func (s *CreateCollectionRequestSparseVectorIndexConfig) SetHnswM(v int32) *CreateCollectionRequestSparseVectorIndexConfig {
	s.HnswM = &v
	return s
}

type CreateCollectionShrinkRequest struct {
	// The name of the collection that you want to create.
	//
	// >  The name must comply with the naming conventions of PostgreSQL objects.
	//
	// This parameter is required.
	//
	// example:
	//
	// document
	Collection *string `json:"Collection,omitempty" xml:"Collection,omitempty"`
	// The instance ID.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the IDs of all AnalyticDB for PostgreSQL instances in a specific region.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The number of vector dimensions.
	//
	// >  If you specify this parameter, an index is created. When you call the [UpsertCollectionData](https://help.aliyun.com/document_detail/2401493.html) operation, make sure that the length of the Rows.Vector parameter is the same as the value of this parameter. If you do not specify this parameter, you can call the [CreateVectorIndex](https://help.aliyun.com/document_detail/2401499.html) operation to create an index.
	//
	// example:
	//
	// 1024
	Dimension *int64 `json:"Dimension,omitempty" xml:"Dimension,omitempty"`
	// Specifies whether to use the memory mapping technology to create HNSW indexes. Valid values: 0 and 1. Default value: 0. We recommend that you set the value to 1 in scenarios that require upload speed but not data deletion.
	//
	// >
	//
	// 	- 0: uses segmented paging storage to create indexes. This method uses the shared buffer of PostgreSQL for caching and supports the delete and update operations.
	//
	// 	- 1: uses the memory mapping technology to create indexes. This method does not support the delete or update operation.
	//
	// example:
	//
	// 0
	ExternalStorage *int32 `json:"ExternalStorage,omitempty" xml:"ExternalStorage,omitempty"`
	// The fields used for full-text search. Separate multiple fields with commas (,). These fields must be keys defined in Metadata.
	//
	// example:
	//
	// title,content
	FullTextRetrievalFields *string `json:"FullTextRetrievalFields,omitempty" xml:"FullTextRetrievalFields,omitempty"`
	HnswEfConstruction      *string `json:"HnswEfConstruction,omitempty" xml:"HnswEfConstruction,omitempty"`
	// The maximum number of neighbors for the Hierarchical Navigable Small World (HNSW) algorithm. Valid values: 1 to 1000. In most cases, this parameter is automatically configured based on the value of the Dimension parameter. You do not need to configure this parameter.
	//
	// >  We recommend that you configure this parameter based on the value of the Dimension parameter.
	//
	// *If you set Dimension to a value less than or equal to 384, set the value of HnswM to 16.
	//
	// *If you set Dimension to a value greater than 384 and less than or equal to 768, set the value of HnswM to 32.
	//
	// *If you set Dimension to a value greater than 768 and less than or equal to 1024, set the value of HnswM to 64.
	//
	// *If you set Dimension to a value greater than 1024, set the value of HnswM to 128.
	//
	// example:
	//
	// 64
	HnswM *int32 `json:"HnswM,omitempty" xml:"HnswM,omitempty"`
	// Name of the management account with rds_superuser permissions.
	//
	// > You can create an account through the console -> Account Management, or by using the [CreateAccount](https://help.aliyun.com/document_detail/2361789.html) API.
	//
	// This parameter is required.
	//
	// example:
	//
	// testaccount
	ManagerAccount *string `json:"ManagerAccount,omitempty" xml:"ManagerAccount,omitempty"`
	// The password of the manager account.
	//
	// This parameter is required.
	//
	// example:
	//
	// testpassword
	ManagerAccountPassword *string `json:"ManagerAccountPassword,omitempty" xml:"ManagerAccountPassword,omitempty"`
	// The metadata of the vector data, which is a JSON string in the MAP format. The key specifies the field name, and the value specifies the data type.
	//
	// >  Supported data types:
	//
	// 	- For information about the supported data types, see [Data types](https://www.alibabacloud.com/help/zh/analyticdb/analyticdb-for-postgresql/developer-reference/data-types-1/).
	//
	// 	- The money data type is not supported.
	//
	// **
	//
	// **Warning*	- Reserved fields such as id, vector, to_tsvector, and source cannot be used.
	//
	// This parameter is required.
	//
	// example:
	//
	// {"title":"text","content":"text","response":"int"}
	Metadata *string `json:"Metadata,omitempty" xml:"Metadata,omitempty"`
	// The scalar index fields. Separate multiple fields with commas (,). These fields must be keys defined in Metadata.
	//
	// example:
	//
	// title
	MetadataIndices *string `json:"MetadataIndices,omitempty" xml:"MetadataIndices,omitempty"`
	// The method that is used to create vector indexes. Valid values:
	//
	// 	- l2: Euclidean distance.
	//
	// 	- ip: inner product distance.
	//
	// 	- cosine: cosine similarity.
	//
	// example:
	//
	// cosine
	Metrics *string `json:"Metrics,omitempty" xml:"Metrics,omitempty"`
	// The name of the namespace.
	//
	// >  You can call the [CreateNamespace](https://help.aliyun.com/document_detail/2401495.html) operation to create a namespace and call the [ListNamespaces](https://help.aliyun.com/document_detail/2401502.html) operation to query a list of namespaces.
	//
	// example:
	//
	// mynamespace
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	OwnerId   *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The analyzer that is used for full-text search.
	//
	// example:
	//
	// zh_cn
	Parser *string `json:"Parser,omitempty" xml:"Parser,omitempty"`
	// Specifies whether to enable the product quantization (PQ) feature for index acceleration. We recommend that you enable this feature for more than 500,000 rows of data. Valid values:
	//
	// 	- 0: no.
	//
	// 	- 1 (default): yes.
	//
	// example:
	//
	// 0
	PqEnable *int32 `json:"PqEnable,omitempty" xml:"PqEnable,omitempty"`
	// The region ID of the instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId                      *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	SparseVectorIndexConfigShrink *string `json:"SparseVectorIndexConfig,omitempty" xml:"SparseVectorIndexConfig,omitempty"`
	SupportSparse                 *bool   `json:"SupportSparse,omitempty" xml:"SupportSparse,omitempty"`
	// The ID of the workspace that consists of multiple AnalyticDB for PostgreSQL instances. You must specify one of the WorkspaceId and DBInstanceId parameters. If you specify both parameters, the WorkspaceId parameter takes effect.
	//
	// example:
	//
	// gp-ws-*****
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s CreateCollectionShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateCollectionShrinkRequest) GoString() string {
	return s.String()
}

func (s *CreateCollectionShrinkRequest) SetCollection(v string) *CreateCollectionShrinkRequest {
	s.Collection = &v
	return s
}

func (s *CreateCollectionShrinkRequest) SetDBInstanceId(v string) *CreateCollectionShrinkRequest {
	s.DBInstanceId = &v
	return s
}

func (s *CreateCollectionShrinkRequest) SetDimension(v int64) *CreateCollectionShrinkRequest {
	s.Dimension = &v
	return s
}

func (s *CreateCollectionShrinkRequest) SetExternalStorage(v int32) *CreateCollectionShrinkRequest {
	s.ExternalStorage = &v
	return s
}

func (s *CreateCollectionShrinkRequest) SetFullTextRetrievalFields(v string) *CreateCollectionShrinkRequest {
	s.FullTextRetrievalFields = &v
	return s
}

func (s *CreateCollectionShrinkRequest) SetHnswEfConstruction(v string) *CreateCollectionShrinkRequest {
	s.HnswEfConstruction = &v
	return s
}

func (s *CreateCollectionShrinkRequest) SetHnswM(v int32) *CreateCollectionShrinkRequest {
	s.HnswM = &v
	return s
}

func (s *CreateCollectionShrinkRequest) SetManagerAccount(v string) *CreateCollectionShrinkRequest {
	s.ManagerAccount = &v
	return s
}

func (s *CreateCollectionShrinkRequest) SetManagerAccountPassword(v string) *CreateCollectionShrinkRequest {
	s.ManagerAccountPassword = &v
	return s
}

func (s *CreateCollectionShrinkRequest) SetMetadata(v string) *CreateCollectionShrinkRequest {
	s.Metadata = &v
	return s
}

func (s *CreateCollectionShrinkRequest) SetMetadataIndices(v string) *CreateCollectionShrinkRequest {
	s.MetadataIndices = &v
	return s
}

func (s *CreateCollectionShrinkRequest) SetMetrics(v string) *CreateCollectionShrinkRequest {
	s.Metrics = &v
	return s
}

func (s *CreateCollectionShrinkRequest) SetNamespace(v string) *CreateCollectionShrinkRequest {
	s.Namespace = &v
	return s
}

func (s *CreateCollectionShrinkRequest) SetOwnerId(v int64) *CreateCollectionShrinkRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateCollectionShrinkRequest) SetParser(v string) *CreateCollectionShrinkRequest {
	s.Parser = &v
	return s
}

func (s *CreateCollectionShrinkRequest) SetPqEnable(v int32) *CreateCollectionShrinkRequest {
	s.PqEnable = &v
	return s
}

func (s *CreateCollectionShrinkRequest) SetRegionId(v string) *CreateCollectionShrinkRequest {
	s.RegionId = &v
	return s
}

func (s *CreateCollectionShrinkRequest) SetSparseVectorIndexConfigShrink(v string) *CreateCollectionShrinkRequest {
	s.SparseVectorIndexConfigShrink = &v
	return s
}

func (s *CreateCollectionShrinkRequest) SetSupportSparse(v bool) *CreateCollectionShrinkRequest {
	s.SupportSparse = &v
	return s
}

func (s *CreateCollectionShrinkRequest) SetWorkspaceId(v string) *CreateCollectionShrinkRequest {
	s.WorkspaceId = &v
	return s
}

type CreateCollectionResponseBody struct {
	// The returned message.
	//
	// example:
	//
	// create successfully
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The status of the operation. Valid values:
	//
	// 	- **success**
	//
	// 	- **fail**
	//
	// example:
	//
	// success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s CreateCollectionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateCollectionResponseBody) GoString() string {
	return s.String()
}

func (s *CreateCollectionResponseBody) SetMessage(v string) *CreateCollectionResponseBody {
	s.Message = &v
	return s
}

func (s *CreateCollectionResponseBody) SetRequestId(v string) *CreateCollectionResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateCollectionResponseBody) SetStatus(v string) *CreateCollectionResponseBody {
	s.Status = &v
	return s
}

type CreateCollectionResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateCollectionResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateCollectionResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateCollectionResponse) GoString() string {
	return s.String()
}

func (s *CreateCollectionResponse) SetHeaders(v map[string]*string) *CreateCollectionResponse {
	s.Headers = v
	return s
}

func (s *CreateCollectionResponse) SetStatusCode(v int32) *CreateCollectionResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateCollectionResponse) SetBody(v *CreateCollectionResponseBody) *CreateCollectionResponse {
	s.Body = v
	return s
}

type CreateDBInstanceRequest struct {
	AINodeSpecInfos []*CreateDBInstanceRequestAINodeSpecInfos `json:"AINodeSpecInfos,omitempty" xml:"AINodeSpecInfos,omitempty" type:"Repeated"`
	// Backup set ID.
	//
	// > You can call the [DescribeDataBackups](https://help.aliyun.com/document_detail/210093.html) interface to view the backup set IDs of all backup sets under the target instance.
	//
	// example:
	//
	// 1111111111
	BackupId *string `json:"BackupId,omitempty" xml:"BackupId,omitempty"`
	// Idempotence check. For more information, see [How to Ensure Idempotence](https://help.aliyun.com/document_detail/327176.html).
	//
	// example:
	//
	// 0c593ea1-3bea-11e9-b96b-88**********
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// Whether to load sample datasets after the instance is created. The values are as follows:
	//
	// - **true**: Load sample datasets.
	//
	// - **false**: Do not load sample datasets.
	//
	// > If this parameter is not specified, it defaults to not loading sample datasets.
	//
	// example:
	//
	// false
	CreateSampleData *bool `json:"CreateSampleData,omitempty" xml:"CreateSampleData,omitempty"`
	// Instance series. The value description is as follows:
	//
	// - **HighAvailability**: High availability version.
	//
	// - **Basic**: Basic version.
	//
	// > This parameter is required when creating an instance in the storage elastic mode.
	//
	// example:
	//
	// HighAvailability
	DBInstanceCategory *string `json:"DBInstanceCategory,omitempty" xml:"DBInstanceCategory,omitempty"`
	// Instance type. For more details, see the supplementary description of the DBInstanceClass parameter.
	//
	// > This parameter is required when creating a reserved storage mode instance.
	//
	// example:
	//
	// gpdb.group.segsdx1
	DBInstanceClass *string `json:"DBInstanceClass,omitempty" xml:"DBInstanceClass,omitempty"`
	// Instance description.
	//
	// example:
	//
	// test
	DBInstanceDescription *string `json:"DBInstanceDescription,omitempty" xml:"DBInstanceDescription,omitempty"`
	// Number of compute groups. The values are: 2, 4, 8, 12, 16, 24, 32, 64, 96, 128.
	//
	// > This parameter is required when creating a reserved storage mode instance.
	//
	// example:
	//
	// 2
	DBInstanceGroupCount *string `json:"DBInstanceGroupCount,omitempty" xml:"DBInstanceGroupCount,omitempty"`
	// Instance resource type. The value description is as follows:
	//
	// - **StorageElastic**: Storage elastic mode.
	//
	// - **Serverless**: Serverless mode.
	//
	// - **Classic**: Storage reserved mode.
	//
	// > This parameter is required.
	//
	// This parameter is required.
	//
	// example:
	//
	// StorageElastic
	DBInstanceMode *string `json:"DBInstanceMode,omitempty" xml:"DBInstanceMode,omitempty"`
	// Deployment mode. The values are as follows:
	//
	// - multiple: Multi-zone deployment.
	//
	// - single: Single-zone deployment.
	//
	// >
	//
	// > - If this parameter is not specified, the default value is single-zone deployment.
	//
	// > - Currently, only single-zone deployment is supported.
	//
	// example:
	//
	// single
	DeployMode *string `json:"DeployMode,omitempty" xml:"DeployMode,omitempty"`
	// Specifies whether to enable SSL encryption. Valid values:
	//
	// 	- **true**
	//
	// 	- **false*	- (default)
	//
	// example:
	//
	// false
	EnableSSL *bool `json:"EnableSSL,omitempty" xml:"EnableSSL,omitempty"`
	// Key ID.
	//
	// > If the value of the **EncryptionType*	- parameter is **CloudDisk**, you need to specify the encryption key ID within the same region through this parameter; otherwise, it should be empty.
	//
	// example:
	//
	// 0d2470df-da7b-4786-b981-88888888****
	EncryptionKey *string `json:"EncryptionKey,omitempty" xml:"EncryptionKey,omitempty"`
	// Encryption type. The value description is as follows:
	//
	// - **NULL**: No encryption (default).
	//
	// - **CloudDisk**: Enable cloud disk encryption and specify the key through the **EncryptionKey*	- parameter.
	//
	// > Once cloud disk encryption is enabled, it cannot be disabled.
	//
	// example:
	//
	// CloudDisk
	EncryptionType *string `json:"EncryptionType,omitempty" xml:"EncryptionType,omitempty"`
	// Database engine, with the value **gpdb**.
	//
	// This parameter is required.
	//
	// example:
	//
	// gpdb
	Engine *string `json:"Engine,omitempty" xml:"Engine,omitempty"`
	// Engine version. The values are as follows:
	//
	// - **6.0**: Version 6.0.
	//
	// - **7.0**: Version 7.0.
	//
	// This parameter is required.
	//
	// example:
	//
	// 6.0
	EngineVersion *string `json:"EngineVersion,omitempty" xml:"EngineVersion,omitempty"`
	// The idle release wait time. When the duration without business traffic reaches the specified time, the instance will enter the idle state. The unit is seconds, with a minimum value of 60, and the default value is 600.
	//
	// > This parameter is required only for Serverless auto-scheduling mode instances.
	//
	// example:
	//
	// 600
	IdleTime *int32 `json:"IdleTime,omitempty" xml:"IdleTime,omitempty"`
	// Instance network type, with the value **VPC**.
	//
	// > - Only VPC networks are supported in public cloud.
	//
	// > - If not specified, it defaults to VPC type.
	//
	// example:
	//
	// VPC
	InstanceNetworkType *string `json:"InstanceNetworkType,omitempty" xml:"InstanceNetworkType,omitempty"`
	// Compute node specifications.
	//
	// For high-availability versions of the elastic storage mode, the values are as follows:
	//
	// - **2C16G**
	//
	// - **4C32G**
	//
	// - **16C128G**
	//
	// For basic versions of the elastic storage mode, the values are as follows:
	//
	// - **2C8G**
	//
	// - **4C16G**
	//
	// - **8C32G**
	//
	// - **16C64G**
	//
	// For Serverless mode, the values are as follows:
	//
	// - **4C16G**
	//
	// - **8C32G**
	//
	// > This parameter is required when creating an elastic storage mode instance or a Serverless mode instance.
	//
	// example:
	//
	// 2C16G
	InstanceSpec *string `json:"InstanceSpec,omitempty" xml:"InstanceSpec,omitempty"`
	// This parameter must be specified if you want to change coordinator nodes to AI coordinator nodes.
	//
	// >-  You cannot specify the MasterAISpec and MasterCU parameters at the same time.
	//
	// >- You can change coordinator nodes to AI coordinator nodes only in specific regions and zones.
	//
	// >- Only AnalyticDB for PostgreSQL V7.0 instances of Basic Edition support AI coordinator nodes.
	//
	// >- You can view the valid values of this parameter on the configuration change page of coordinator nodes.
	//
	// example:
	//
	// ADB.AIMedium.2
	MasterAISpec *string `json:"MasterAISpec,omitempty" xml:"MasterAISpec,omitempty"`
	// Master resources, with the following values:
	//
	// - 2 CU
	//
	// - 4 CU
	//
	// - 8 CU
	//
	// - 16 CU
	//
	// - 32 CU
	//
	// > Master resources above 8 CU will incur charges.
	//
	// example:
	//
	// 8 CU
	MasterCU *int32 `json:"MasterCU,omitempty" xml:"MasterCU,omitempty"`
	// This parameter is deprecated and should not be passed.
	//
	// example:
	//
	// null
	MasterNodeNum *string `json:"MasterNodeNum,omitempty" xml:"MasterNodeNum,omitempty"`
	OwnerId       *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The billing method of the instance. Valid values:
	//
	// 	- **Postpaid**: pay-as-you-go.
	//
	// 	- **Prepaid**: subscription.
	//
	// >
	//
	// 	- If you do not specify this parameter, Postpaid is used.
	//
	// 	- You can obtain more cost savings if you create a subscription instance for one year or longer. We recommend that you select the billing method that best suits your needs.
	//
	// example:
	//
	// Prepaid
	PayType *string `json:"PayType,omitempty" xml:"PayType,omitempty"`
	// Unit of the duration for which resources are purchased. The values are as follows:
	//
	// - **Month**: Month
	//
	// - **Year**: Year
	//
	// > This parameter is required when creating a subscription-billed instance.
	//
	// example:
	//
	// Month
	Period *string `json:"Period,omitempty" xml:"Period,omitempty"`
	// This parameter is deprecated and should not be passed.
	//
	// example:
	//
	// null
	PrivateIpAddress *string `json:"PrivateIpAddress,omitempty" xml:"PrivateIpAddress,omitempty"`
	// Product type. The values are as follows:
	//
	// - **standard**: Standard Edition.
	//
	// - **cost-effective**: Cost-Effective Edition.
	//
	// > If this parameter is not specified, the default value is Standard Edition.
	//
	// example:
	//
	// standard
	ProdType *string `json:"ProdType,omitempty" xml:"ProdType,omitempty"`
	// Region ID.
	//
	// > You can call the [DescribeRegions](https://help.aliyun.com/document_detail/86912.html) interface to view available region IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the enterprise resource group where the instance is located.
	//
	// example:
	//
	// rg-bp67acfmxazb4p****
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	// The IP address whitelist of the instance.
	//
	// A value of 127.0.0.1 denies access from any external IP address. You can call the [ModifySecurityIps](https://help.aliyun.com/document_detail/86928.html) operation to modify the IP address whitelist after you create an instance.
	//
	// example:
	//
	// 127.0.0.1
	SecurityIPList *string `json:"SecurityIPList,omitempty" xml:"SecurityIPList,omitempty"`
	// The performance level of ESSDs. Valid values:
	//
	// 	- **pl0**
	//
	// 	- **pl1**
	//
	// 	- **pl2**
	//
	// >
	//
	// 	- This parameter takes effect only when SegStorageType is set to cloud_essd.
	//
	// 	- If you do not specify this parameter, pl1 is used.
	//
	// example:
	//
	// pl1
	SegDiskPerformanceLevel *string `json:"SegDiskPerformanceLevel,omitempty" xml:"SegDiskPerformanceLevel,omitempty"`
	// The number of compute nodes. The value description is as follows:
	//
	// - For the high-availability version of the storage elastic mode, the value range is 4 to 512, and the value must be a multiple of 4.
	//
	// - For the basic version of the storage elastic mode, the value range is 2 to 512, and the value must be a multiple of 2.
	//
	// - For the Serverless mode, the value range is 2 to 512, and the value must be a multiple of 2.
	//
	// > This parameter is required when creating instances in the storage elastic mode or Serverless mode.
	//
	// example:
	//
	// 4
	SegNodeNum *string `json:"SegNodeNum,omitempty" xml:"SegNodeNum,omitempty"`
	// Disk storage type, currently only ESSD cloud disks are supported, with the value **cloud_essd**.
	//
	// > This parameter is required when creating an elastic storage mode instance.
	//
	// example:
	//
	// cloud_essd
	SegStorageType *string `json:"SegStorageType,omitempty" xml:"SegStorageType,omitempty"`
	// The mode of the Serverless instance. The values are as follows:
	//
	// - **Manual**: Manual scheduling (default).
	//
	// - **Auto**: Auto scheduling.
	//
	// > This parameter is required only for Serverless mode instances.
	//
	// example:
	//
	// Auto
	ServerlessMode *string `json:"ServerlessMode,omitempty" xml:"ServerlessMode,omitempty"`
	// The threshold for computing resources. The value range is 8 to 32, with a step of 8, and the unit is ACU. The default value is 32.
	//
	// > This parameter is required only for Serverless auto-scheduling mode instances.
	//
	// example:
	//
	// 32
	ServerlessResource *int32 `json:"ServerlessResource,omitempty" xml:"ServerlessResource,omitempty"`
	// ID of the source instance to be cloned.
	//
	// > You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) interface to view details of all AnalyticDB for PostgreSQL instances in the target region, including the instance ID.
	//
	// example:
	//
	// gp-bp***************
	SrcDbInstanceName *string `json:"SrcDbInstanceName,omitempty" xml:"SrcDbInstanceName,omitempty"`
	// VSwitch ID of the standby zone.
	//
	// >
	//
	// > - This parameter is required for multi-zone deployment.
	//
	// > - The VSwitch ID of the standby zone must be in the same zone as the StandbyZoneId.
	//
	// example:
	//
	// vsw-bp1cpq8mr64paltkb****
	StandbyVSwitchId *string `json:"StandbyVSwitchId,omitempty" xml:"StandbyVSwitchId,omitempty"`
	// ID of the standby zone.
	//
	// >
	//
	// > - This parameter is required for multi-zone deployment.
	//
	// > - You can call the [DescribeRegions](https://help.aliyun.com/document_detail/86912.html) interface to view available zone IDs.
	//
	// > - The ID of the standby zone must be different from the ID of the primary zone.
	//
	// example:
	//
	// cn-hangzhou-j
	StandbyZoneId *string `json:"StandbyZoneId,omitempty" xml:"StandbyZoneId,omitempty"`
	// The size of the storage space, in GB, with a value range of <props="china">50~8000<props="intl">50~6000.
	//
	// > This parameter is required when creating an instance in the storage elastic mode.
	//
	// example:
	//
	// 200
	StorageSize *int64 `json:"StorageSize,omitempty" xml:"StorageSize,omitempty"`
	// This parameter is deprecated and should not be passed.
	//
	// example:
	//
	// null
	StorageType *string `json:"StorageType,omitempty" xml:"StorageType,omitempty"`
	// The Nth tag. The value of N ranges from 1 to 20.
	Tag []*CreateDBInstanceRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
	// Duration for which resources are purchased. The values are as follows:
	//
	// - When **Period*	- is **Month**, the value ranges from 1 to 9.
	//
	// - When **Period*	- is **Year**, the value ranges from 1 to 3.
	//
	// > This parameter is required when creating a subscription-billed instance.
	//
	// example:
	//
	// 1
	UsedTime *string `json:"UsedTime,omitempty" xml:"UsedTime,omitempty"`
	// VPC ID.
	//
	// > - **VPCId*	- is required.
	//
	// > - The region of the **VPC*	- must be consistent with **RegionId**.
	//
	// example:
	//
	// vpc-bp19ame5m1r3oejns****
	VPCId *string `json:"VPCId,omitempty" xml:"VPCId,omitempty"`
	// vSwitch ID.
	//
	// > - **vSwitchId*	- is required.
	//
	// > - The availability zone of the **vSwitch*	- must be consistent with **ZoneId**.
	//
	// example:
	//
	// vsw-bp1cpq8mr64paltkb****
	VSwitchId *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	// Whether to enable vector engine optimization. The value description is as follows:
	//
	// - **enabled**: Enable vector engine optimization.
	//
	// - **disabled*	- (default): Do not enable vector engine optimization.
	//
	// > - For mainstream analysis scenarios, data warehouse scenarios, and real-time data warehouse scenarios, it is recommended to **not enable*	- vector engine optimization.
	//
	// > - For users using the vector analysis engine for AIGC, vector retrieval, and other scenarios, it is recommended to **enable*	- vector engine optimization.
	//
	// example:
	//
	// enabled
	VectorConfigurationStatus *string `json:"VectorConfigurationStatus,omitempty" xml:"VectorConfigurationStatus,omitempty"`
	// Zone ID.
	//
	// > You can call the [DescribeRegions](https://help.aliyun.com/document_detail/86912.html) interface to view available zone IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou-i
	ZoneId *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s CreateDBInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDBInstanceRequest) GoString() string {
	return s.String()
}

func (s *CreateDBInstanceRequest) SetAINodeSpecInfos(v []*CreateDBInstanceRequestAINodeSpecInfos) *CreateDBInstanceRequest {
	s.AINodeSpecInfos = v
	return s
}

func (s *CreateDBInstanceRequest) SetBackupId(v string) *CreateDBInstanceRequest {
	s.BackupId = &v
	return s
}

func (s *CreateDBInstanceRequest) SetClientToken(v string) *CreateDBInstanceRequest {
	s.ClientToken = &v
	return s
}

func (s *CreateDBInstanceRequest) SetCreateSampleData(v bool) *CreateDBInstanceRequest {
	s.CreateSampleData = &v
	return s
}

func (s *CreateDBInstanceRequest) SetDBInstanceCategory(v string) *CreateDBInstanceRequest {
	s.DBInstanceCategory = &v
	return s
}

func (s *CreateDBInstanceRequest) SetDBInstanceClass(v string) *CreateDBInstanceRequest {
	s.DBInstanceClass = &v
	return s
}

func (s *CreateDBInstanceRequest) SetDBInstanceDescription(v string) *CreateDBInstanceRequest {
	s.DBInstanceDescription = &v
	return s
}

func (s *CreateDBInstanceRequest) SetDBInstanceGroupCount(v string) *CreateDBInstanceRequest {
	s.DBInstanceGroupCount = &v
	return s
}

func (s *CreateDBInstanceRequest) SetDBInstanceMode(v string) *CreateDBInstanceRequest {
	s.DBInstanceMode = &v
	return s
}

func (s *CreateDBInstanceRequest) SetDeployMode(v string) *CreateDBInstanceRequest {
	s.DeployMode = &v
	return s
}

func (s *CreateDBInstanceRequest) SetEnableSSL(v bool) *CreateDBInstanceRequest {
	s.EnableSSL = &v
	return s
}

func (s *CreateDBInstanceRequest) SetEncryptionKey(v string) *CreateDBInstanceRequest {
	s.EncryptionKey = &v
	return s
}

func (s *CreateDBInstanceRequest) SetEncryptionType(v string) *CreateDBInstanceRequest {
	s.EncryptionType = &v
	return s
}

func (s *CreateDBInstanceRequest) SetEngine(v string) *CreateDBInstanceRequest {
	s.Engine = &v
	return s
}

func (s *CreateDBInstanceRequest) SetEngineVersion(v string) *CreateDBInstanceRequest {
	s.EngineVersion = &v
	return s
}

func (s *CreateDBInstanceRequest) SetIdleTime(v int32) *CreateDBInstanceRequest {
	s.IdleTime = &v
	return s
}

func (s *CreateDBInstanceRequest) SetInstanceNetworkType(v string) *CreateDBInstanceRequest {
	s.InstanceNetworkType = &v
	return s
}

func (s *CreateDBInstanceRequest) SetInstanceSpec(v string) *CreateDBInstanceRequest {
	s.InstanceSpec = &v
	return s
}

func (s *CreateDBInstanceRequest) SetMasterAISpec(v string) *CreateDBInstanceRequest {
	s.MasterAISpec = &v
	return s
}

func (s *CreateDBInstanceRequest) SetMasterCU(v int32) *CreateDBInstanceRequest {
	s.MasterCU = &v
	return s
}

func (s *CreateDBInstanceRequest) SetMasterNodeNum(v string) *CreateDBInstanceRequest {
	s.MasterNodeNum = &v
	return s
}

func (s *CreateDBInstanceRequest) SetOwnerId(v int64) *CreateDBInstanceRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateDBInstanceRequest) SetPayType(v string) *CreateDBInstanceRequest {
	s.PayType = &v
	return s
}

func (s *CreateDBInstanceRequest) SetPeriod(v string) *CreateDBInstanceRequest {
	s.Period = &v
	return s
}

func (s *CreateDBInstanceRequest) SetPrivateIpAddress(v string) *CreateDBInstanceRequest {
	s.PrivateIpAddress = &v
	return s
}

func (s *CreateDBInstanceRequest) SetProdType(v string) *CreateDBInstanceRequest {
	s.ProdType = &v
	return s
}

func (s *CreateDBInstanceRequest) SetRegionId(v string) *CreateDBInstanceRequest {
	s.RegionId = &v
	return s
}

func (s *CreateDBInstanceRequest) SetResourceGroupId(v string) *CreateDBInstanceRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *CreateDBInstanceRequest) SetSecurityIPList(v string) *CreateDBInstanceRequest {
	s.SecurityIPList = &v
	return s
}

func (s *CreateDBInstanceRequest) SetSegDiskPerformanceLevel(v string) *CreateDBInstanceRequest {
	s.SegDiskPerformanceLevel = &v
	return s
}

func (s *CreateDBInstanceRequest) SetSegNodeNum(v string) *CreateDBInstanceRequest {
	s.SegNodeNum = &v
	return s
}

func (s *CreateDBInstanceRequest) SetSegStorageType(v string) *CreateDBInstanceRequest {
	s.SegStorageType = &v
	return s
}

func (s *CreateDBInstanceRequest) SetServerlessMode(v string) *CreateDBInstanceRequest {
	s.ServerlessMode = &v
	return s
}

func (s *CreateDBInstanceRequest) SetServerlessResource(v int32) *CreateDBInstanceRequest {
	s.ServerlessResource = &v
	return s
}

func (s *CreateDBInstanceRequest) SetSrcDbInstanceName(v string) *CreateDBInstanceRequest {
	s.SrcDbInstanceName = &v
	return s
}

func (s *CreateDBInstanceRequest) SetStandbyVSwitchId(v string) *CreateDBInstanceRequest {
	s.StandbyVSwitchId = &v
	return s
}

func (s *CreateDBInstanceRequest) SetStandbyZoneId(v string) *CreateDBInstanceRequest {
	s.StandbyZoneId = &v
	return s
}

func (s *CreateDBInstanceRequest) SetStorageSize(v int64) *CreateDBInstanceRequest {
	s.StorageSize = &v
	return s
}

func (s *CreateDBInstanceRequest) SetStorageType(v string) *CreateDBInstanceRequest {
	s.StorageType = &v
	return s
}

func (s *CreateDBInstanceRequest) SetTag(v []*CreateDBInstanceRequestTag) *CreateDBInstanceRequest {
	s.Tag = v
	return s
}

func (s *CreateDBInstanceRequest) SetUsedTime(v string) *CreateDBInstanceRequest {
	s.UsedTime = &v
	return s
}

func (s *CreateDBInstanceRequest) SetVPCId(v string) *CreateDBInstanceRequest {
	s.VPCId = &v
	return s
}

func (s *CreateDBInstanceRequest) SetVSwitchId(v string) *CreateDBInstanceRequest {
	s.VSwitchId = &v
	return s
}

func (s *CreateDBInstanceRequest) SetVectorConfigurationStatus(v string) *CreateDBInstanceRequest {
	s.VectorConfigurationStatus = &v
	return s
}

func (s *CreateDBInstanceRequest) SetZoneId(v string) *CreateDBInstanceRequest {
	s.ZoneId = &v
	return s
}

type CreateDBInstanceRequestAINodeSpecInfos struct {
	AINodeNum  *string `json:"AINodeNum,omitempty" xml:"AINodeNum,omitempty"`
	AINodeSpec *string `json:"AINodeSpec,omitempty" xml:"AINodeSpec,omitempty"`
}

func (s CreateDBInstanceRequestAINodeSpecInfos) String() string {
	return tea.Prettify(s)
}

func (s CreateDBInstanceRequestAINodeSpecInfos) GoString() string {
	return s.String()
}

func (s *CreateDBInstanceRequestAINodeSpecInfos) SetAINodeNum(v string) *CreateDBInstanceRequestAINodeSpecInfos {
	s.AINodeNum = &v
	return s
}

func (s *CreateDBInstanceRequestAINodeSpecInfos) SetAINodeSpec(v string) *CreateDBInstanceRequestAINodeSpecInfos {
	s.AINodeSpec = &v
	return s
}

type CreateDBInstanceRequestTag struct {
	// Tag key. The restrictions are as follows:
	//
	// - It cannot be an empty string.
	//
	// - It supports up to 128 characters.
	//
	// - It cannot start with `aliyun` or `acs:`, and it cannot contain `http://` or `https://`.
	//
	// example:
	//
	// TestKey
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// Tag value. The restrictions are as follows:
	//
	// - It can be an empty string.
	//
	// - It supports up to 128 characters.
	//
	// - It cannot start with `acs:`, and it cannot contain `http://` or `https://`.
	//
	// example:
	//
	// TestValue
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s CreateDBInstanceRequestTag) String() string {
	return tea.Prettify(s)
}

func (s CreateDBInstanceRequestTag) GoString() string {
	return s.String()
}

func (s *CreateDBInstanceRequestTag) SetKey(v string) *CreateDBInstanceRequestTag {
	s.Key = &v
	return s
}

func (s *CreateDBInstanceRequestTag) SetValue(v string) *CreateDBInstanceRequestTag {
	s.Value = &v
	return s
}

type CreateDBInstanceResponseBody struct {
	// This parameter is deprecated and will not return a value.
	//
	// You can use the [DescribeDBInstanceAttribute](https://help.aliyun.com/document_detail/86910.html) interface to view the connection address of the instance.
	//
	// example:
	//
	// gp-bp12ga6v69h86****.gpdb.rds.aliyuncs.com
	ConnectionString *string `json:"ConnectionString,omitempty" xml:"ConnectionString,omitempty"`
	// Instance ID.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// Order ID.
	//
	// example:
	//
	// 111111111111
	OrderId *string `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
	// This parameter is deprecated and will not return a value.
	//
	// You can use the [DescribeDBInstanceAttribute](https://help.aliyun.com/document_detail/86910.html) interface to view the port number of the instance.
	//
	// example:
	//
	// 3432
	Port *string `json:"Port,omitempty" xml:"Port,omitempty"`
	// Request ID.
	//
	// example:
	//
	// 5414A4E5-4C36-4461-95FC-************
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateDBInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateDBInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *CreateDBInstanceResponseBody) SetConnectionString(v string) *CreateDBInstanceResponseBody {
	s.ConnectionString = &v
	return s
}

func (s *CreateDBInstanceResponseBody) SetDBInstanceId(v string) *CreateDBInstanceResponseBody {
	s.DBInstanceId = &v
	return s
}

func (s *CreateDBInstanceResponseBody) SetOrderId(v string) *CreateDBInstanceResponseBody {
	s.OrderId = &v
	return s
}

func (s *CreateDBInstanceResponseBody) SetPort(v string) *CreateDBInstanceResponseBody {
	s.Port = &v
	return s
}

func (s *CreateDBInstanceResponseBody) SetRequestId(v string) *CreateDBInstanceResponseBody {
	s.RequestId = &v
	return s
}

type CreateDBInstanceResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateDBInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateDBInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDBInstanceResponse) GoString() string {
	return s.String()
}

func (s *CreateDBInstanceResponse) SetHeaders(v map[string]*string) *CreateDBInstanceResponse {
	s.Headers = v
	return s
}

func (s *CreateDBInstanceResponse) SetStatusCode(v int32) *CreateDBInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateDBInstanceResponse) SetBody(v *CreateDBInstanceResponseBody) *CreateDBInstanceResponse {
	s.Body = v
	return s
}

type CreateDBInstancePlanRequest struct {
	// The instance ID.
	//
	// > You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the IDs of all AnalyticDB for PostgreSQL instances within a region.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The execution information of the plan. Specify the parameter in the JSON format. The parameter value varies based on the values of **PlanType*	- and **PlanScheduleType**. The following section describes the PlanConfig parameter.
	//
	// This parameter is required.
	//
	// example:
	//
	// {"pause":{"planCronTime":"0 0 12 1/1 	- ? "},"resume":{"planCronTime":"0 0 0 1/1 	- ? "}}
	PlanConfig *string `json:"PlanConfig,omitempty" xml:"PlanConfig,omitempty"`
	// The description of the plan.
	//
	// example:
	//
	// this is a test plan
	PlanDesc *string `json:"PlanDesc,omitempty" xml:"PlanDesc,omitempty"`
	// The end time of the plan. Specify the time in the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time must be in UTC. The end time must be later than the start time.
	//
	// >
	//
	// 	- This parameter must be specified only when **PlanScheduleType*	- is set to **Regular**.
	//
	// 	- If you do not specify this parameter, the plan stops until the plan is deleted.
	//
	// example:
	//
	// 2023-04-17T23:00Z
	PlanEndDate *string `json:"PlanEndDate,omitempty" xml:"PlanEndDate,omitempty"`
	// The name of the plan.
	//
	// This parameter is required.
	//
	// example:
	//
	// test-plan
	PlanName *string `json:"PlanName,omitempty" xml:"PlanName,omitempty"`
	// The execution mode of the plan. Valid values:
	//
	// 	- **Postpone**: The plan is executed later.
	//
	// 	- **Regular**: The plan is executed periodically.
	//
	// This parameter is required.
	//
	// example:
	//
	// Regular
	PlanScheduleType *string `json:"PlanScheduleType,omitempty" xml:"PlanScheduleType,omitempty"`
	// The start time of the plan. Specify the time in the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time must be in UTC.
	//
	// >
	//
	// 	- This parameter must be specified only when **PlanScheduleType*	- is set to **Regular**.
	//
	// 	- If you do not specify this parameter, the current time is used.
	//
	// example:
	//
	// 2022-04-17T23:00Z
	PlanStartDate *string `json:"PlanStartDate,omitempty" xml:"PlanStartDate,omitempty"`
	// The type of the plan. Valid values:
	//
	// 	- **PauseResume**: pauses and resumes an instance.
	//
	// 	- **Resize**: changes the number of compute nodes.
	//
	// 	- **ModifySpec**: changes compute node specifications.
	//
	// > - You can specify the value to ModifySpec only for instances in elastic storage mode.
	//
	// >- You can specify the value to ModifySpec only for instances in elastic storage mode.
	//
	// This parameter is required.
	//
	// example:
	//
	// PauseResume
	PlanType *string `json:"PlanType,omitempty" xml:"PlanType,omitempty"`
}

func (s CreateDBInstancePlanRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDBInstancePlanRequest) GoString() string {
	return s.String()
}

func (s *CreateDBInstancePlanRequest) SetDBInstanceId(v string) *CreateDBInstancePlanRequest {
	s.DBInstanceId = &v
	return s
}

func (s *CreateDBInstancePlanRequest) SetOwnerId(v int64) *CreateDBInstancePlanRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateDBInstancePlanRequest) SetPlanConfig(v string) *CreateDBInstancePlanRequest {
	s.PlanConfig = &v
	return s
}

func (s *CreateDBInstancePlanRequest) SetPlanDesc(v string) *CreateDBInstancePlanRequest {
	s.PlanDesc = &v
	return s
}

func (s *CreateDBInstancePlanRequest) SetPlanEndDate(v string) *CreateDBInstancePlanRequest {
	s.PlanEndDate = &v
	return s
}

func (s *CreateDBInstancePlanRequest) SetPlanName(v string) *CreateDBInstancePlanRequest {
	s.PlanName = &v
	return s
}

func (s *CreateDBInstancePlanRequest) SetPlanScheduleType(v string) *CreateDBInstancePlanRequest {
	s.PlanScheduleType = &v
	return s
}

func (s *CreateDBInstancePlanRequest) SetPlanStartDate(v string) *CreateDBInstancePlanRequest {
	s.PlanStartDate = &v
	return s
}

func (s *CreateDBInstancePlanRequest) SetPlanType(v string) *CreateDBInstancePlanRequest {
	s.PlanType = &v
	return s
}

type CreateDBInstancePlanResponseBody struct {
	// The instance ID.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The error message.
	//
	// This parameter is returned only if the request fails.
	//
	// example:
	//
	// ****
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// The plan ID.
	//
	// example:
	//
	// 1234
	PlanId *string `json:"PlanId,omitempty" xml:"PlanId,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 34b32a0a-08ef-4a87-b6be-cdd9f56fc3ad
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful.
	//
	// If the request was successful, **success*	- is returned. If the request failed, this parameter is not returned.
	//
	// example:
	//
	// success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s CreateDBInstancePlanResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateDBInstancePlanResponseBody) GoString() string {
	return s.String()
}

func (s *CreateDBInstancePlanResponseBody) SetDBInstanceId(v string) *CreateDBInstancePlanResponseBody {
	s.DBInstanceId = &v
	return s
}

func (s *CreateDBInstancePlanResponseBody) SetErrorMessage(v string) *CreateDBInstancePlanResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *CreateDBInstancePlanResponseBody) SetPlanId(v string) *CreateDBInstancePlanResponseBody {
	s.PlanId = &v
	return s
}

func (s *CreateDBInstancePlanResponseBody) SetRequestId(v string) *CreateDBInstancePlanResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateDBInstancePlanResponseBody) SetStatus(v string) *CreateDBInstancePlanResponseBody {
	s.Status = &v
	return s
}

type CreateDBInstancePlanResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateDBInstancePlanResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateDBInstancePlanResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDBInstancePlanResponse) GoString() string {
	return s.String()
}

func (s *CreateDBInstancePlanResponse) SetHeaders(v map[string]*string) *CreateDBInstancePlanResponse {
	s.Headers = v
	return s
}

func (s *CreateDBInstancePlanResponse) SetStatusCode(v int32) *CreateDBInstancePlanResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateDBInstancePlanResponse) SetBody(v *CreateDBInstancePlanResponseBody) *CreateDBInstancePlanResponse {
	s.Body = v
	return s
}

type CreateDBResourceGroupRequest struct {
	// The instance ID.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The configurations of the resource group.
	//
	// >
	//
	// 	- CpuRateLimit: the percentage of CPU resources that are available for the resource group. Unit: %.
	//
	// 	- MemoryLimit: the percentage of memory resources that are available for the resource group. Unit: %.
	//
	// 	- MemorySharedQuota: the percentage of memory resources shared among transactions that are submitted to the resource group. Unit: %. Default value: 80.
	//
	// 	- MemorySpillRatio: the memory spill ratio for memory-intensive transactions. When the memory that is used by memory-intensive transactions reaches this value, data is spilled to disks. Unit: %. Default value: 0.
	//
	// 	- Concurrency: the maximum number of concurrent transactions or parallel queries that are allowed for a resource group. Default value: 20.
	//
	// This parameter is required.
	//
	// example:
	//
	// {"CpuRateLimit":"10","MemoryLimit":"12","MemorySharedQuota":"20","MemorySpillRatio":"75","Concurrency":"3"}
	ResourceGroupConfig *string `json:"ResourceGroupConfig,omitempty" xml:"ResourceGroupConfig,omitempty"`
	// The name of the resource group.
	//
	// This parameter is required.
	//
	// example:
	//
	// testgroup
	ResourceGroupName *string `json:"ResourceGroupName,omitempty" xml:"ResourceGroupName,omitempty"`
}

func (s CreateDBResourceGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDBResourceGroupRequest) GoString() string {
	return s.String()
}

func (s *CreateDBResourceGroupRequest) SetDBInstanceId(v string) *CreateDBResourceGroupRequest {
	s.DBInstanceId = &v
	return s
}

func (s *CreateDBResourceGroupRequest) SetOwnerId(v int64) *CreateDBResourceGroupRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateDBResourceGroupRequest) SetResourceGroupConfig(v string) *CreateDBResourceGroupRequest {
	s.ResourceGroupConfig = &v
	return s
}

func (s *CreateDBResourceGroupRequest) SetResourceGroupName(v string) *CreateDBResourceGroupRequest {
	s.ResourceGroupName = &v
	return s
}

type CreateDBResourceGroupResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateDBResourceGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateDBResourceGroupResponseBody) GoString() string {
	return s.String()
}

func (s *CreateDBResourceGroupResponseBody) SetRequestId(v string) *CreateDBResourceGroupResponseBody {
	s.RequestId = &v
	return s
}

type CreateDBResourceGroupResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateDBResourceGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateDBResourceGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDBResourceGroupResponse) GoString() string {
	return s.String()
}

func (s *CreateDBResourceGroupResponse) SetHeaders(v map[string]*string) *CreateDBResourceGroupResponse {
	s.Headers = v
	return s
}

func (s *CreateDBResourceGroupResponse) SetStatusCode(v int32) *CreateDBResourceGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateDBResourceGroupResponse) SetBody(v *CreateDBResourceGroupResponseBody) *CreateDBResourceGroupResponse {
	s.Body = v
	return s
}

type CreateDocumentCollectionRequest struct {
	// The name of the document collection that you want to create.
	//
	// > The name must comply with PostgreSQL object naming restrictions.
	//
	// This parameter is required.
	//
	// example:
	//
	// document
	Collection *string `json:"Collection,omitempty" xml:"Collection,omitempty"`
	// The instance ID.
	//
	// > You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) API to view details of all AnalyticDB for PostgreSQL instances in the target region, including the instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	Dimension    *int32  `json:"Dimension,omitempty" xml:"Dimension,omitempty"`
	// The vectorization algorithm.
	//
	// >  Supported algorithms:
	//
	// 	- text-embedding-v1: the algorithm that produces 1536-dimensional vectors.
	//
	// 	- text-embedding-v2: the algorithm that produces 1536-dimensional vectors.
	//
	// 	- text2vec: the algorithm that produces 1024-dimensional vectors.
	//
	// 	- m3e-base: the algorithm that produces 768-dimensional vectors.
	//
	// 	- m3e-small: the algorithm that produces 512-dimensional vectors.
	//
	// 	- clip-vit-b-32: the image vectorization algorithm that uses the Contrastive Language-Image Pre-Training (CLIP) ViT-B/32 model and produces 512-dimensional vectors.
	//
	// 	- clip-vit-b-16: the image vectorization algorithm that uses the CLIP ViT-B/16 model and produces 512-dimensional vectors.
	//
	// 	- clip-vit-l-14: the image vectorization algorithm that uses the CLIP ViT-L/14 model and produces 768-dimensional vectors.
	//
	// 	- clip-vit-l-14-336px: the image vectorization algorithm that uses the CLIP ViT-L/14@336px model and produces 768-dimensional vectors.
	//
	// 	- clip-rn50: the image vectorization algorithm that uses the CLIP RN50 model and produces 1024-dimensional vectors.
	//
	// 	- clip-rn101: the image vectorization algorithm that uses the CLIP RN101 model and produces 512-dimensional vectors.
	//
	// 	- clip-rn50x4: the image vectorization algorithm that uses the CLIP RN50x4 model and produces 640-dimensional vectors.
	//
	// 	- clip-rn50x16: the image vectorization algorithm that uses the CLIP RN50x16 model and produces 768-dimensional vectors.
	//
	// 	- clip-rn50x64: the image vectorization algorithm that uses the CLIP RN50x64 model and produces 1024-dimensional vectors.
	//
	// example:
	//
	// text-embedding-v1
	EmbeddingModel *string `json:"EmbeddingModel,omitempty" xml:"EmbeddingModel,omitempty"`
	// Specifies whether to use the memory mapping technology to create HNSW indexes. Valid values: 0 and 1. Default value: 0. We recommend that you set the value to 1 in scenarios that require upload speed but not data deletion.
	//
	// >
	//
	// 	- 0: uses segmented paging storage to create indexes. This method uses the shared buffer of PostgreSQL for caching and supports the delete and update operations.
	//
	// 	- 1: uses the memory mapping technology to create indexes. This method does not support the delete or update operation.
	//
	// example:
	//
	// 0
	ExternalStorage *int32 `json:"ExternalStorage,omitempty" xml:"ExternalStorage,omitempty"`
	// The fields used for full-text search. Separate multiple fields with commas (,). These fields must be keys defined in Metadata.
	//
	// example:
	//
	// title,page
	FullTextRetrievalFields *string `json:"FullTextRetrievalFields,omitempty" xml:"FullTextRetrievalFields,omitempty"`
	HnswEfConstruction      *string `json:"HnswEfConstruction,omitempty" xml:"HnswEfConstruction,omitempty"`
	// The maximum number of neighbors for the Hierarchical Navigable Small World (HNSW) algorithm. Valid values: 1 to 1000. In most cases, this parameter is automatically configured based on the value of the Dimension parameter. You do not need to configure this parameter.
	//
	// >  We recommend that you configure this parameter based on the value of the Dimension parameter.
	//
	// 	- If you set Dimension to a value less than or equal to 384, set the value of HnswM to 16.
	//
	// 	- If you set Dimension to a value greater than 384 and less than or equal to 768, set the value of HnswM to 32.
	//
	// 	- If you set Dimension to a value greater than 768 and less than or equal to 1024, set the value of HnswM to 64.
	//
	// 	- If you set Dimension to a value greater than 1024, set the value of HnswM to 128.
	//
	// example:
	//
	// 64
	HnswM *int32 `json:"HnswM,omitempty" xml:"HnswM,omitempty"`
	// The name of the manager account that has the rds_superuser permission.
	//
	// > You can create an account through the console -> Account Management, or by using the [CreateAccount](https://help.aliyun.com/document_detail/2361789.html) API.
	//
	// This parameter is required.
	//
	// example:
	//
	// testaccount
	ManagerAccount *string `json:"ManagerAccount,omitempty" xml:"ManagerAccount,omitempty"`
	// The password of the management account.
	//
	// This parameter is required.
	//
	// example:
	//
	// testpassword
	ManagerAccountPassword *string `json:"ManagerAccountPassword,omitempty" xml:"ManagerAccountPassword,omitempty"`
	// The metadata of the vector data, which is a JSON string in the MAP format. The key specifies the field name, and the value specifies the data type.
	//
	// > Supported data types:
	//
	// > - For information about data types, see: [Data Types](https://www.alibabacloud.com/help/en/analyticdb/analyticdb-for-postgresql/developer-reference/data-types-1/).
	//
	// > - The money type is not supported.
	//
	// 	Warning: The fields id, vector, doc_name, content, loader_metadata, source, and to_tsvector are reserved and should not be used.
	//
	// example:
	//
	// {"title":"text","page":"int"}
	Metadata *string `json:"Metadata,omitempty" xml:"Metadata,omitempty"`
	// example:
	//
	// title
	MetadataIndices *string `json:"MetadataIndices,omitempty" xml:"MetadataIndices,omitempty"`
	// The method that is used to create vector indexes.
	//
	// Valid values:
	//
	// 	- **l2**: Euclidean distance.
	//
	// 	- **ip**: inner product distance.
	//
	// 	- **cosine*	- (default): cosine similarity.
	//
	// example:
	//
	// cosine
	Metrics *string `json:"Metrics,omitempty" xml:"Metrics,omitempty"`
	// The name of the namespace. Default value: public.
	//
	// >  You can call the [CreateNamespace](https://help.aliyun.com/document_detail/2401495.html) operation to create a namespace and call the [ListNamespaces](https://help.aliyun.com/document_detail/2401502.html) operation to query a list of namespaces.
	//
	// example:
	//
	// mynamespace
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	OwnerId   *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The analyzer that is used for full-text search. Default value: zh_cn.
	//
	// example:
	//
	// zh_cn
	Parser *string `json:"Parser,omitempty" xml:"Parser,omitempty"`
	// Specifies whether to enable the product quantization (PQ) feature for index acceleration. We recommend that you enable this feature for more than 500,000 rows of data. Valid values:
	//
	// 	- 0: no.
	//
	// 	- 1 (default): yes.
	//
	// example:
	//
	// 1
	PqEnable *int32 `json:"PqEnable,omitempty" xml:"PqEnable,omitempty"`
	// The region ID of the instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s CreateDocumentCollectionRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDocumentCollectionRequest) GoString() string {
	return s.String()
}

func (s *CreateDocumentCollectionRequest) SetCollection(v string) *CreateDocumentCollectionRequest {
	s.Collection = &v
	return s
}

func (s *CreateDocumentCollectionRequest) SetDBInstanceId(v string) *CreateDocumentCollectionRequest {
	s.DBInstanceId = &v
	return s
}

func (s *CreateDocumentCollectionRequest) SetDimension(v int32) *CreateDocumentCollectionRequest {
	s.Dimension = &v
	return s
}

func (s *CreateDocumentCollectionRequest) SetEmbeddingModel(v string) *CreateDocumentCollectionRequest {
	s.EmbeddingModel = &v
	return s
}

func (s *CreateDocumentCollectionRequest) SetExternalStorage(v int32) *CreateDocumentCollectionRequest {
	s.ExternalStorage = &v
	return s
}

func (s *CreateDocumentCollectionRequest) SetFullTextRetrievalFields(v string) *CreateDocumentCollectionRequest {
	s.FullTextRetrievalFields = &v
	return s
}

func (s *CreateDocumentCollectionRequest) SetHnswEfConstruction(v string) *CreateDocumentCollectionRequest {
	s.HnswEfConstruction = &v
	return s
}

func (s *CreateDocumentCollectionRequest) SetHnswM(v int32) *CreateDocumentCollectionRequest {
	s.HnswM = &v
	return s
}

func (s *CreateDocumentCollectionRequest) SetManagerAccount(v string) *CreateDocumentCollectionRequest {
	s.ManagerAccount = &v
	return s
}

func (s *CreateDocumentCollectionRequest) SetManagerAccountPassword(v string) *CreateDocumentCollectionRequest {
	s.ManagerAccountPassword = &v
	return s
}

func (s *CreateDocumentCollectionRequest) SetMetadata(v string) *CreateDocumentCollectionRequest {
	s.Metadata = &v
	return s
}

func (s *CreateDocumentCollectionRequest) SetMetadataIndices(v string) *CreateDocumentCollectionRequest {
	s.MetadataIndices = &v
	return s
}

func (s *CreateDocumentCollectionRequest) SetMetrics(v string) *CreateDocumentCollectionRequest {
	s.Metrics = &v
	return s
}

func (s *CreateDocumentCollectionRequest) SetNamespace(v string) *CreateDocumentCollectionRequest {
	s.Namespace = &v
	return s
}

func (s *CreateDocumentCollectionRequest) SetOwnerId(v int64) *CreateDocumentCollectionRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateDocumentCollectionRequest) SetParser(v string) *CreateDocumentCollectionRequest {
	s.Parser = &v
	return s
}

func (s *CreateDocumentCollectionRequest) SetPqEnable(v int32) *CreateDocumentCollectionRequest {
	s.PqEnable = &v
	return s
}

func (s *CreateDocumentCollectionRequest) SetRegionId(v string) *CreateDocumentCollectionRequest {
	s.RegionId = &v
	return s
}

type CreateDocumentCollectionResponseBody struct {
	// The returned message.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The status of the operation. Valid values:
	//
	// - **success**
	//
	// - **fail**
	//
	// example:
	//
	// successs
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s CreateDocumentCollectionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateDocumentCollectionResponseBody) GoString() string {
	return s.String()
}

func (s *CreateDocumentCollectionResponseBody) SetMessage(v string) *CreateDocumentCollectionResponseBody {
	s.Message = &v
	return s
}

func (s *CreateDocumentCollectionResponseBody) SetRequestId(v string) *CreateDocumentCollectionResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateDocumentCollectionResponseBody) SetStatus(v string) *CreateDocumentCollectionResponseBody {
	s.Status = &v
	return s
}

type CreateDocumentCollectionResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateDocumentCollectionResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateDocumentCollectionResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDocumentCollectionResponse) GoString() string {
	return s.String()
}

func (s *CreateDocumentCollectionResponse) SetHeaders(v map[string]*string) *CreateDocumentCollectionResponse {
	s.Headers = v
	return s
}

func (s *CreateDocumentCollectionResponse) SetStatusCode(v int32) *CreateDocumentCollectionResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateDocumentCollectionResponse) SetBody(v *CreateDocumentCollectionResponseBody) *CreateDocumentCollectionResponse {
	s.Body = v
	return s
}

type CreateExtensionsRequest struct {
	// The instance ID.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the IDs of all AnalyticDB for PostgreSQL instances in a specific region.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The name of the database.
	//
	// This parameter is required.
	//
	// example:
	//
	// demo1
	DBNames *string `json:"DBNames,omitempty" xml:"DBNames,omitempty"`
	// The name of the extension that you want to install. Separate multiple extension names with commas (,).
	//
	// This parameter is required.
	//
	// example:
	//
	// citext, dblink
	Extensions *string `json:"Extensions,omitempty" xml:"Extensions,omitempty"`
	// The region ID.
	//
	// >  You can call the [DescribeRegions](https://help.aliyun.com/document_detail/86912.html) operation to query the most recent region list.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s CreateExtensionsRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateExtensionsRequest) GoString() string {
	return s.String()
}

func (s *CreateExtensionsRequest) SetDBInstanceId(v string) *CreateExtensionsRequest {
	s.DBInstanceId = &v
	return s
}

func (s *CreateExtensionsRequest) SetDBNames(v string) *CreateExtensionsRequest {
	s.DBNames = &v
	return s
}

func (s *CreateExtensionsRequest) SetExtensions(v string) *CreateExtensionsRequest {
	s.Extensions = &v
	return s
}

func (s *CreateExtensionsRequest) SetRegionId(v string) *CreateExtensionsRequest {
	s.RegionId = &v
	return s
}

type CreateExtensionsResponseBody struct {
	// The name of the extension that you want to install. Multiple extension names are separated with commas (,).
	//
	// example:
	//
	// citext, dblink
	Extensions *string `json:"Extensions,omitempty" xml:"Extensions,omitempty"`
	// The request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateExtensionsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateExtensionsResponseBody) GoString() string {
	return s.String()
}

func (s *CreateExtensionsResponseBody) SetExtensions(v string) *CreateExtensionsResponseBody {
	s.Extensions = &v
	return s
}

func (s *CreateExtensionsResponseBody) SetRequestId(v string) *CreateExtensionsResponseBody {
	s.RequestId = &v
	return s
}

type CreateExtensionsResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateExtensionsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateExtensionsResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateExtensionsResponse) GoString() string {
	return s.String()
}

func (s *CreateExtensionsResponse) SetHeaders(v map[string]*string) *CreateExtensionsResponse {
	s.Headers = v
	return s
}

func (s *CreateExtensionsResponse) SetStatusCode(v int32) *CreateExtensionsResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateExtensionsResponse) SetBody(v *CreateExtensionsResponseBody) *CreateExtensionsResponse {
	s.Body = v
	return s
}

type CreateExternalDataServiceRequest struct {
	// Instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp10g78o9807yv9h3
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// Region ID, you can view available region IDs through the [DescribeRegions](https://help.aliyun.com/document_detail/86912.html) interface.
	//
	// example:
	//
	// cn-beijing
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// Service description.
	//
	// example:
	//
	// pxf test
	ServiceDescription *string `json:"ServiceDescription,omitempty" xml:"ServiceDescription,omitempty"`
	// Service name.
	//
	// This parameter is required.
	//
	// example:
	//
	// test-adbpgss
	ServiceName *string `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
	// Service specification (in CU), value:
	//
	// - 8
	//
	// This parameter is required.
	//
	// example:
	//
	// 8
	ServiceSpec *string `json:"ServiceSpec,omitempty" xml:"ServiceSpec,omitempty"`
}

func (s CreateExternalDataServiceRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateExternalDataServiceRequest) GoString() string {
	return s.String()
}

func (s *CreateExternalDataServiceRequest) SetDBInstanceId(v string) *CreateExternalDataServiceRequest {
	s.DBInstanceId = &v
	return s
}

func (s *CreateExternalDataServiceRequest) SetRegionId(v string) *CreateExternalDataServiceRequest {
	s.RegionId = &v
	return s
}

func (s *CreateExternalDataServiceRequest) SetServiceDescription(v string) *CreateExternalDataServiceRequest {
	s.ServiceDescription = &v
	return s
}

func (s *CreateExternalDataServiceRequest) SetServiceName(v string) *CreateExternalDataServiceRequest {
	s.ServiceName = &v
	return s
}

func (s *CreateExternalDataServiceRequest) SetServiceSpec(v string) *CreateExternalDataServiceRequest {
	s.ServiceSpec = &v
	return s
}

type CreateExternalDataServiceResponseBody struct {
	// Request ID.
	//
	// example:
	//
	// B4CAF581-2AC7-41AD-8940-D56DF7AADF5B
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Service ID.
	//
	// example:
	//
	// 100
	ServiceId *int32 `json:"ServiceId,omitempty" xml:"ServiceId,omitempty"`
}

func (s CreateExternalDataServiceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateExternalDataServiceResponseBody) GoString() string {
	return s.String()
}

func (s *CreateExternalDataServiceResponseBody) SetRequestId(v string) *CreateExternalDataServiceResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateExternalDataServiceResponseBody) SetServiceId(v int32) *CreateExternalDataServiceResponseBody {
	s.ServiceId = &v
	return s
}

type CreateExternalDataServiceResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateExternalDataServiceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateExternalDataServiceResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateExternalDataServiceResponse) GoString() string {
	return s.String()
}

func (s *CreateExternalDataServiceResponse) SetHeaders(v map[string]*string) *CreateExternalDataServiceResponse {
	s.Headers = v
	return s
}

func (s *CreateExternalDataServiceResponse) SetStatusCode(v int32) *CreateExternalDataServiceResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateExternalDataServiceResponse) SetBody(v *CreateExternalDataServiceResponseBody) *CreateExternalDataServiceResponse {
	s.Body = v
	return s
}

type CreateHadoopDataSourceRequest struct {
	// Instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// Service description.
	//
	// example:
	//
	// pxf for hdfs data source
	DataSourceDescription *string `json:"DataSourceDescription,omitempty" xml:"DataSourceDescription,omitempty"`
	// Service name.
	//
	// example:
	//
	// hdfs_pxf
	DataSourceName *string `json:"DataSourceName,omitempty" xml:"DataSourceName,omitempty"`
	// Type of Hadoop external table to be enabled, with values:
	//
	// - HDFS
	//
	// - Hive
	//
	// example:
	//
	// HDFS
	DataSourceType *string `json:"DataSourceType,omitempty" xml:"DataSourceType,omitempty"`
	// When HadoopCreateType=Emr, this field should contain the EMR instance ID.
	//
	// example:
	//
	// c-1234567
	EmrInstanceId *string `json:"EmrInstanceId,omitempty" xml:"EmrInstanceId,omitempty"`
	// Content string of the Hadoop hdfs-site.xml file. This field is required when enabling an HDFS external table.
	//
	// example:
	//
	// <?xml version="1.0" ?>
	//
	// <!-- Created at 2023-08-15 13:52:43.945 -->
	//
	// <configuration>
	//
	//     <property>
	//
	//         <name>dfs.datanode.cache.revocation.timeout.ms</name>
	//
	//         <value>900000</value>
	//
	//     </property>
	//
	//     <property>
	//
	//         <name>dfs.namenode.resource.check.interval</name>
	//
	//         <value>5000</value>
	//
	//     </property>
	//
	// </configuration>
	HDFSConf *string `json:"HDFSConf,omitempty" xml:"HDFSConf,omitempty"`
	// Content string of the Hadoop core-site.xml file.
	//
	// example:
	//
	// <?xml version="1.0" ?>
	//
	// <!-- Created at 2023-08-15 13:52:39.527 -->
	//
	// <configuration>
	//
	//     <property>
	//
	//         <name>hadoop.http.authentication.kerberos.keytab</name>
	//
	//         <value>/etc/emr/hadoop-conf/http.keytab</value>
	//
	//     </property>
	//
	//     <property>
	//
	//         <name>fs.oss.idle.timeout.millisecond</name>
	//
	//         <value>30000</value>
	//
	//     </property>
	//
	//     <property>
	//
	//         <name>fs.oss.download.thread.concurrency</name>
	//
	//         <value>32</value>
	//
	//     </property>
	//
	// </configuration>
	HadoopCoreConf *string `json:"HadoopCoreConf,omitempty" xml:"HadoopCoreConf,omitempty"`
	// External service type:
	//
	// - emr
	//
	// - hadoop: Self-built Hadoop
	//
	// example:
	//
	// emr
	HadoopCreateType *string `json:"HadoopCreateType,omitempty" xml:"HadoopCreateType,omitempty"`
	// Address and hostname of the Hadoop cluster\\"s source node in the /etc/hosts file.
	//
	// example:
	//
	// 192.168.220.128 master-1-1.c-xxx.cn-shanghai.emr.aliyuncs.com
	//
	// 192.168.220.129 core-1-1.c-xxx.cn-shanghai.emr.aliyuncs.com
	//
	// 192.168.220.130 core-1-2.c-xxx.cn-shanghai.emr.aliyuncs.com
	HadoopHostsAddress *string `json:"HadoopHostsAddress,omitempty" xml:"HadoopHostsAddress,omitempty"`
	// Content string of the Hadoop hive-site.xml file. This field is required when enabling a HIVE external table.
	//
	// example:
	//
	// <?xml version="1.0" ?>
	//
	// <!-- Created at 2023-08-15 13:52:50.646 -->
	//
	// <configuration>
	//
	//     <property>
	//
	//         <name>hive.exec.reducers.bytes.per.reducer</name>
	//
	//         <value>256000000</value>
	//
	//     </property>
	//
	//     <property>
	//
	//         <name>hive.stats.column.autogather</name>
	//
	//         <value>false</value>
	//
	//     </property>
	//
	// </configuration>
	HiveConf *string `json:"HiveConf,omitempty" xml:"HiveConf,omitempty"`
	// Content string of the Hadoop mapred-site.xml file. This field is required when enabling an HDFS external table.
	//
	// example:
	//
	// xxxxxx
	MapReduceConf *string `json:"MapReduceConf,omitempty" xml:"MapReduceConf,omitempty"`
	// Region ID.
	//
	// > You can call the [DescribeRegions](https://help.aliyun.com/document_detail/86912.html) interface to view available region IDs.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// Content string of the Hadoop yarn-site.xml file. This field is required when enabling an HDFS external table.
	//
	// example:
	//
	// <?xml version="1.0" ?>
	//
	// <!-- Created at 2023-08-15 13:53:29.021 -->
	//
	// <configuration>
	//
	//     <property>
	//
	//         <name>yarn.nodemanager.linux-container-executor.nonsecure-mode.local-user</name>
	//
	//         <value>hadoop</value>
	//
	//     </property>
	//
	//     <property>
	//
	//         <name>yarn.scheduler.fair.dynamic.max.assign</name>
	//
	//         <value>true</value>
	//
	//     </property>
	//
	// </configuration>
	YarnConf *string `json:"YarnConf,omitempty" xml:"YarnConf,omitempty"`
}

func (s CreateHadoopDataSourceRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateHadoopDataSourceRequest) GoString() string {
	return s.String()
}

func (s *CreateHadoopDataSourceRequest) SetDBInstanceId(v string) *CreateHadoopDataSourceRequest {
	s.DBInstanceId = &v
	return s
}

func (s *CreateHadoopDataSourceRequest) SetDataSourceDescription(v string) *CreateHadoopDataSourceRequest {
	s.DataSourceDescription = &v
	return s
}

func (s *CreateHadoopDataSourceRequest) SetDataSourceName(v string) *CreateHadoopDataSourceRequest {
	s.DataSourceName = &v
	return s
}

func (s *CreateHadoopDataSourceRequest) SetDataSourceType(v string) *CreateHadoopDataSourceRequest {
	s.DataSourceType = &v
	return s
}

func (s *CreateHadoopDataSourceRequest) SetEmrInstanceId(v string) *CreateHadoopDataSourceRequest {
	s.EmrInstanceId = &v
	return s
}

func (s *CreateHadoopDataSourceRequest) SetHDFSConf(v string) *CreateHadoopDataSourceRequest {
	s.HDFSConf = &v
	return s
}

func (s *CreateHadoopDataSourceRequest) SetHadoopCoreConf(v string) *CreateHadoopDataSourceRequest {
	s.HadoopCoreConf = &v
	return s
}

func (s *CreateHadoopDataSourceRequest) SetHadoopCreateType(v string) *CreateHadoopDataSourceRequest {
	s.HadoopCreateType = &v
	return s
}

func (s *CreateHadoopDataSourceRequest) SetHadoopHostsAddress(v string) *CreateHadoopDataSourceRequest {
	s.HadoopHostsAddress = &v
	return s
}

func (s *CreateHadoopDataSourceRequest) SetHiveConf(v string) *CreateHadoopDataSourceRequest {
	s.HiveConf = &v
	return s
}

func (s *CreateHadoopDataSourceRequest) SetMapReduceConf(v string) *CreateHadoopDataSourceRequest {
	s.MapReduceConf = &v
	return s
}

func (s *CreateHadoopDataSourceRequest) SetRegionId(v string) *CreateHadoopDataSourceRequest {
	s.RegionId = &v
	return s
}

func (s *CreateHadoopDataSourceRequest) SetYarnConf(v string) *CreateHadoopDataSourceRequest {
	s.YarnConf = &v
	return s
}

type CreateHadoopDataSourceResponseBody struct {
	// Data source ID.
	//
	// example:
	//
	// 123
	DataSourceId *int32 `json:"DataSourceId,omitempty" xml:"DataSourceId,omitempty"`
	// Request ID.
	//
	// example:
	//
	// 2C125605-266F-41CA-8AC5-3A643D4F42C5
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateHadoopDataSourceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateHadoopDataSourceResponseBody) GoString() string {
	return s.String()
}

func (s *CreateHadoopDataSourceResponseBody) SetDataSourceId(v int32) *CreateHadoopDataSourceResponseBody {
	s.DataSourceId = &v
	return s
}

func (s *CreateHadoopDataSourceResponseBody) SetRequestId(v string) *CreateHadoopDataSourceResponseBody {
	s.RequestId = &v
	return s
}

type CreateHadoopDataSourceResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateHadoopDataSourceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateHadoopDataSourceResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateHadoopDataSourceResponse) GoString() string {
	return s.String()
}

func (s *CreateHadoopDataSourceResponse) SetHeaders(v map[string]*string) *CreateHadoopDataSourceResponse {
	s.Headers = v
	return s
}

func (s *CreateHadoopDataSourceResponse) SetStatusCode(v int32) *CreateHadoopDataSourceResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateHadoopDataSourceResponse) SetBody(v *CreateHadoopDataSourceResponseBody) *CreateHadoopDataSourceResponse {
	s.Body = v
	return s
}

type CreateIndexRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// testcollection
	Collection *string `json:"Collection,omitempty" xml:"Collection,omitempty"`
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	IndexConfig  *string `json:"IndexConfig,omitempty" xml:"IndexConfig,omitempty"`
	// example:
	//
	// title
	IndexField *string `json:"IndexField,omitempty" xml:"IndexField,omitempty"`
	// example:
	//
	// testindex
	IndexName *string `json:"IndexName,omitempty" xml:"IndexName,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// mynamespace
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// testpassword
	NamespacePassword *string `json:"NamespacePassword,omitempty" xml:"NamespacePassword,omitempty"`
	OwnerId           *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// example:
	//
	// gp-ws-*****
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s CreateIndexRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateIndexRequest) GoString() string {
	return s.String()
}

func (s *CreateIndexRequest) SetCollection(v string) *CreateIndexRequest {
	s.Collection = &v
	return s
}

func (s *CreateIndexRequest) SetDBInstanceId(v string) *CreateIndexRequest {
	s.DBInstanceId = &v
	return s
}

func (s *CreateIndexRequest) SetIndexConfig(v string) *CreateIndexRequest {
	s.IndexConfig = &v
	return s
}

func (s *CreateIndexRequest) SetIndexField(v string) *CreateIndexRequest {
	s.IndexField = &v
	return s
}

func (s *CreateIndexRequest) SetIndexName(v string) *CreateIndexRequest {
	s.IndexName = &v
	return s
}

func (s *CreateIndexRequest) SetNamespace(v string) *CreateIndexRequest {
	s.Namespace = &v
	return s
}

func (s *CreateIndexRequest) SetNamespacePassword(v string) *CreateIndexRequest {
	s.NamespacePassword = &v
	return s
}

func (s *CreateIndexRequest) SetOwnerId(v int64) *CreateIndexRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateIndexRequest) SetRegionId(v string) *CreateIndexRequest {
	s.RegionId = &v
	return s
}

func (s *CreateIndexRequest) SetWorkspaceId(v string) *CreateIndexRequest {
	s.WorkspaceId = &v
	return s
}

type CreateIndexResponseBody struct {
	// example:
	//
	// 231460f8-75dc-405e-a669-0c5204887e91
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// Successfully create job
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s CreateIndexResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateIndexResponseBody) GoString() string {
	return s.String()
}

func (s *CreateIndexResponseBody) SetJobId(v string) *CreateIndexResponseBody {
	s.JobId = &v
	return s
}

func (s *CreateIndexResponseBody) SetMessage(v string) *CreateIndexResponseBody {
	s.Message = &v
	return s
}

func (s *CreateIndexResponseBody) SetRequestId(v string) *CreateIndexResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateIndexResponseBody) SetStatus(v string) *CreateIndexResponseBody {
	s.Status = &v
	return s
}

type CreateIndexResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateIndexResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateIndexResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateIndexResponse) GoString() string {
	return s.String()
}

func (s *CreateIndexResponse) SetHeaders(v map[string]*string) *CreateIndexResponse {
	s.Headers = v
	return s
}

func (s *CreateIndexResponse) SetStatusCode(v int32) *CreateIndexResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateIndexResponse) SetBody(v *CreateIndexResponseBody) *CreateIndexResponse {
	s.Body = v
	return s
}

type CreateJDBCDataSourceRequest struct {
	// The instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// Data source description.
	//
	// example:
	//
	// test
	DataSourceDescription *string `json:"DataSourceDescription,omitempty" xml:"DataSourceDescription,omitempty"`
	// The name of data soruce
	//
	// example:
	//
	// jdbc_pxf
	DataSourceName *string `json:"DataSourceName,omitempty" xml:"DataSourceName,omitempty"`
	// The type of the data source.
	//
	// example:
	//
	// mysql
	DataSourceType *string `json:"DataSourceType,omitempty" xml:"DataSourceType,omitempty"`
	// The JDBC connection string.
	//
	// example:
	//
	// xxxxxx
	JDBCConnectionString *string `json:"JDBCConnectionString,omitempty" xml:"JDBCConnectionString,omitempty"`
	// The password of the database account.
	//
	// example:
	//
	// xxxxxx
	JDBCPassword *string `json:"JDBCPassword,omitempty" xml:"JDBCPassword,omitempty"`
	// The name of the database account.
	//
	// example:
	//
	// xxxxxx
	JDBCUserName *string `json:"JDBCUserName,omitempty" xml:"JDBCUserName,omitempty"`
	// The region ID of the instance.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s CreateJDBCDataSourceRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateJDBCDataSourceRequest) GoString() string {
	return s.String()
}

func (s *CreateJDBCDataSourceRequest) SetDBInstanceId(v string) *CreateJDBCDataSourceRequest {
	s.DBInstanceId = &v
	return s
}

func (s *CreateJDBCDataSourceRequest) SetDataSourceDescription(v string) *CreateJDBCDataSourceRequest {
	s.DataSourceDescription = &v
	return s
}

func (s *CreateJDBCDataSourceRequest) SetDataSourceName(v string) *CreateJDBCDataSourceRequest {
	s.DataSourceName = &v
	return s
}

func (s *CreateJDBCDataSourceRequest) SetDataSourceType(v string) *CreateJDBCDataSourceRequest {
	s.DataSourceType = &v
	return s
}

func (s *CreateJDBCDataSourceRequest) SetJDBCConnectionString(v string) *CreateJDBCDataSourceRequest {
	s.JDBCConnectionString = &v
	return s
}

func (s *CreateJDBCDataSourceRequest) SetJDBCPassword(v string) *CreateJDBCDataSourceRequest {
	s.JDBCPassword = &v
	return s
}

func (s *CreateJDBCDataSourceRequest) SetJDBCUserName(v string) *CreateJDBCDataSourceRequest {
	s.JDBCUserName = &v
	return s
}

func (s *CreateJDBCDataSourceRequest) SetRegionId(v string) *CreateJDBCDataSourceRequest {
	s.RegionId = &v
	return s
}

type CreateJDBCDataSourceResponseBody struct {
	// Data source ID.
	//
	// example:
	//
	// 123
	DataSourceId *string `json:"DataSourceId,omitempty" xml:"DataSourceId,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 2C125605-266F-41CA-8AC5-3A643D4F42C5
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateJDBCDataSourceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateJDBCDataSourceResponseBody) GoString() string {
	return s.String()
}

func (s *CreateJDBCDataSourceResponseBody) SetDataSourceId(v string) *CreateJDBCDataSourceResponseBody {
	s.DataSourceId = &v
	return s
}

func (s *CreateJDBCDataSourceResponseBody) SetRequestId(v string) *CreateJDBCDataSourceResponseBody {
	s.RequestId = &v
	return s
}

type CreateJDBCDataSourceResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateJDBCDataSourceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateJDBCDataSourceResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateJDBCDataSourceResponse) GoString() string {
	return s.String()
}

func (s *CreateJDBCDataSourceResponse) SetHeaders(v map[string]*string) *CreateJDBCDataSourceResponse {
	s.Headers = v
	return s
}

func (s *CreateJDBCDataSourceResponse) SetStatusCode(v int32) *CreateJDBCDataSourceResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateJDBCDataSourceResponse) SetBody(v *CreateJDBCDataSourceResponseBody) *CreateJDBCDataSourceResponse {
	s.Body = v
	return s
}

type CreateNamespaceRequest struct {
	// The instance ID.
	//
	// > You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/196830.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The name of the manager account that has the rds_superuser permission.
	//
	// >  You can create an account on the Account Management page of the AnalyticDB for PostgreSQL console or by calling the [CreateAccount](https://help.aliyun.com/document_detail/2361789.html) operation.
	//
	// This parameter is required.
	//
	// example:
	//
	// testaccount
	ManagerAccount *string `json:"ManagerAccount,omitempty" xml:"ManagerAccount,omitempty"`
	// The password of the manager account.
	//
	// This parameter is required.
	//
	// example:
	//
	// testpassword
	ManagerAccountPassword *string `json:"ManagerAccountPassword,omitempty" xml:"ManagerAccountPassword,omitempty"`
	// The name of the namespace. After the namespace is created, the system automatically creates an account that has the same name.
	//
	// >  The name must comply with the naming conventions of PostgreSQL objects.
	//
	// example:
	//
	// mynamespace
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// The password of the namespace.
	//
	// This parameter is required.
	//
	// example:
	//
	// testpassword2
	NamespacePassword *string `json:"NamespacePassword,omitempty" xml:"NamespacePassword,omitempty"`
	OwnerId           *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The region ID of the instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the workspace that consists of multiple AnalyticDB for PostgreSQL instances. You must specify one of the WorkspaceId and DBInstanceId parameters. If you specify both parameters, the WorkspaceId parameter takes effect.
	//
	// example:
	//
	// gp-ws-*****
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s CreateNamespaceRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateNamespaceRequest) GoString() string {
	return s.String()
}

func (s *CreateNamespaceRequest) SetDBInstanceId(v string) *CreateNamespaceRequest {
	s.DBInstanceId = &v
	return s
}

func (s *CreateNamespaceRequest) SetManagerAccount(v string) *CreateNamespaceRequest {
	s.ManagerAccount = &v
	return s
}

func (s *CreateNamespaceRequest) SetManagerAccountPassword(v string) *CreateNamespaceRequest {
	s.ManagerAccountPassword = &v
	return s
}

func (s *CreateNamespaceRequest) SetNamespace(v string) *CreateNamespaceRequest {
	s.Namespace = &v
	return s
}

func (s *CreateNamespaceRequest) SetNamespacePassword(v string) *CreateNamespaceRequest {
	s.NamespacePassword = &v
	return s
}

func (s *CreateNamespaceRequest) SetOwnerId(v int64) *CreateNamespaceRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateNamespaceRequest) SetRegionId(v string) *CreateNamespaceRequest {
	s.RegionId = &v
	return s
}

func (s *CreateNamespaceRequest) SetWorkspaceId(v string) *CreateNamespaceRequest {
	s.WorkspaceId = &v
	return s
}

type CreateNamespaceResponseBody struct {
	// The returned message.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **success**
	//
	// 	- **fail**
	//
	// example:
	//
	// success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s CreateNamespaceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateNamespaceResponseBody) GoString() string {
	return s.String()
}

func (s *CreateNamespaceResponseBody) SetMessage(v string) *CreateNamespaceResponseBody {
	s.Message = &v
	return s
}

func (s *CreateNamespaceResponseBody) SetRequestId(v string) *CreateNamespaceResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateNamespaceResponseBody) SetStatus(v string) *CreateNamespaceResponseBody {
	s.Status = &v
	return s
}

type CreateNamespaceResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateNamespaceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateNamespaceResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateNamespaceResponse) GoString() string {
	return s.String()
}

func (s *CreateNamespaceResponse) SetHeaders(v map[string]*string) *CreateNamespaceResponse {
	s.Headers = v
	return s
}

func (s *CreateNamespaceResponse) SetStatusCode(v int32) *CreateNamespaceResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateNamespaceResponse) SetBody(v *CreateNamespaceResponseBody) *CreateNamespaceResponse {
	s.Body = v
	return s
}

type CreateRemoteADBDataSourceRequest struct {
	// Customer-specified DataSourceName.
	//
	// example:
	//
	// test
	DataSourceName *string `json:"DataSourceName,omitempty" xml:"DataSourceName,omitempty"`
	// Instance ID of the data being used (required).
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-test1
	LocalDBInstanceId *string `json:"LocalDBInstanceId,omitempty" xml:"LocalDBInstanceId,omitempty"`
	// Database name of the data being used (required)
	//
	// This parameter is required.
	//
	// example:
	//
	// db1
	LocalDatabase *string `json:"LocalDatabase,omitempty" xml:"LocalDatabase,omitempty"`
	// Management account of the data-using instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// managerAccount
	ManagerUserName *string `json:"ManagerUserName,omitempty" xml:"ManagerUserName,omitempty"`
	// Password of the management account of the data-using instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// password2
	ManagerUserPassword *string `json:"ManagerUserPassword,omitempty" xml:"ManagerUserPassword,omitempty"`
	OwnerId             *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// Instance ID providing the data (required).
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-test2
	RemoteDBInstanceId *string `json:"RemoteDBInstanceId,omitempty" xml:"RemoteDBInstanceId,omitempty"`
	// Database name providing the data (required).
	//
	// This parameter is required.
	//
	// example:
	//
	// db2
	RemoteDatabase *string `json:"RemoteDatabase,omitempty" xml:"RemoteDatabase,omitempty"`
	// Account name of the data-providing instance used for user mapping (required).
	//
	// This parameter is required.
	//
	// example:
	//
	// account1
	UserName *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
	// Password of the data-providing instance account used for user mapping.
	//
	// This parameter is required.
	//
	// example:
	//
	// password1
	UserPassword *string `json:"UserPassword,omitempty" xml:"UserPassword,omitempty"`
}

func (s CreateRemoteADBDataSourceRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateRemoteADBDataSourceRequest) GoString() string {
	return s.String()
}

func (s *CreateRemoteADBDataSourceRequest) SetDataSourceName(v string) *CreateRemoteADBDataSourceRequest {
	s.DataSourceName = &v
	return s
}

func (s *CreateRemoteADBDataSourceRequest) SetLocalDBInstanceId(v string) *CreateRemoteADBDataSourceRequest {
	s.LocalDBInstanceId = &v
	return s
}

func (s *CreateRemoteADBDataSourceRequest) SetLocalDatabase(v string) *CreateRemoteADBDataSourceRequest {
	s.LocalDatabase = &v
	return s
}

func (s *CreateRemoteADBDataSourceRequest) SetManagerUserName(v string) *CreateRemoteADBDataSourceRequest {
	s.ManagerUserName = &v
	return s
}

func (s *CreateRemoteADBDataSourceRequest) SetManagerUserPassword(v string) *CreateRemoteADBDataSourceRequest {
	s.ManagerUserPassword = &v
	return s
}

func (s *CreateRemoteADBDataSourceRequest) SetOwnerId(v int64) *CreateRemoteADBDataSourceRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateRemoteADBDataSourceRequest) SetRemoteDBInstanceId(v string) *CreateRemoteADBDataSourceRequest {
	s.RemoteDBInstanceId = &v
	return s
}

func (s *CreateRemoteADBDataSourceRequest) SetRemoteDatabase(v string) *CreateRemoteADBDataSourceRequest {
	s.RemoteDatabase = &v
	return s
}

func (s *CreateRemoteADBDataSourceRequest) SetUserName(v string) *CreateRemoteADBDataSourceRequest {
	s.UserName = &v
	return s
}

func (s *CreateRemoteADBDataSourceRequest) SetUserPassword(v string) *CreateRemoteADBDataSourceRequest {
	s.UserPassword = &v
	return s
}

type CreateRemoteADBDataSourceResponseBody struct {
	// Returns the successfully added data sharing service data.
	DataSourceItem *CreateRemoteADBDataSourceResponseBodyDataSourceItem `json:"DataSourceItem,omitempty" xml:"DataSourceItem,omitempty" type:"Struct"`
	// Request ID.
	//
	// example:
	//
	// e9d60eb1-e90d-4bc6-a470-c8b767460858
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Workflow task ID.
	//
	// example:
	//
	// 90000
	TaskId *int32 `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s CreateRemoteADBDataSourceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateRemoteADBDataSourceResponseBody) GoString() string {
	return s.String()
}

func (s *CreateRemoteADBDataSourceResponseBody) SetDataSourceItem(v *CreateRemoteADBDataSourceResponseBodyDataSourceItem) *CreateRemoteADBDataSourceResponseBody {
	s.DataSourceItem = v
	return s
}

func (s *CreateRemoteADBDataSourceResponseBody) SetRequestId(v string) *CreateRemoteADBDataSourceResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateRemoteADBDataSourceResponseBody) SetTaskId(v int32) *CreateRemoteADBDataSourceResponseBody {
	s.TaskId = &v
	return s
}

type CreateRemoteADBDataSourceResponseBodyDataSourceItem struct {
	// Data source name.
	//
	// example:
	//
	// db1_gptest1_to_db2_gp-test2
	DataSourceName *string `json:"DataSourceName,omitempty" xml:"DataSourceName,omitempty"`
	// Description information.
	//
	// example:
	//
	// userName
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// ID
	//
	// example:
	//
	// 1
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// Local database name
	//
	// example:
	//
	// db1
	LocalDatabase *string `json:"LocalDatabase,omitempty" xml:"LocalDatabase,omitempty"`
	// Local instance name
	//
	// example:
	//
	// gp-test1
	LocalInstanceName *string `json:"LocalInstanceName,omitempty" xml:"LocalInstanceName,omitempty"`
	// Management account user name
	//
	// example:
	//
	// manager_user
	ManagerUserName *string `json:"ManagerUserName,omitempty" xml:"ManagerUserName,omitempty"`
	// Region ID.
	//
	// > You can call the [DescribeRegions](https://help.aliyun.com/document_detail/86912.html) API to view available region IDs.
	//
	// example:
	//
	// cn-beijing
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// Remote database name
	//
	// example:
	//
	// db2
	RemoteDatabase *string `json:"RemoteDatabase,omitempty" xml:"RemoteDatabase,omitempty"`
	// Remote instance name
	//
	// example:
	//
	// gp-test2
	RemoteInstanceName *string `json:"RemoteInstanceName,omitempty" xml:"RemoteInstanceName,omitempty"`
	// Synchronization status
	//
	// example:
	//
	// creating
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// User name
	//
	// example:
	//
	// user1
	UserName *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
}

func (s CreateRemoteADBDataSourceResponseBodyDataSourceItem) String() string {
	return tea.Prettify(s)
}

func (s CreateRemoteADBDataSourceResponseBodyDataSourceItem) GoString() string {
	return s.String()
}

func (s *CreateRemoteADBDataSourceResponseBodyDataSourceItem) SetDataSourceName(v string) *CreateRemoteADBDataSourceResponseBodyDataSourceItem {
	s.DataSourceName = &v
	return s
}

func (s *CreateRemoteADBDataSourceResponseBodyDataSourceItem) SetDescription(v string) *CreateRemoteADBDataSourceResponseBodyDataSourceItem {
	s.Description = &v
	return s
}

func (s *CreateRemoteADBDataSourceResponseBodyDataSourceItem) SetId(v int64) *CreateRemoteADBDataSourceResponseBodyDataSourceItem {
	s.Id = &v
	return s
}

func (s *CreateRemoteADBDataSourceResponseBodyDataSourceItem) SetLocalDatabase(v string) *CreateRemoteADBDataSourceResponseBodyDataSourceItem {
	s.LocalDatabase = &v
	return s
}

func (s *CreateRemoteADBDataSourceResponseBodyDataSourceItem) SetLocalInstanceName(v string) *CreateRemoteADBDataSourceResponseBodyDataSourceItem {
	s.LocalInstanceName = &v
	return s
}

func (s *CreateRemoteADBDataSourceResponseBodyDataSourceItem) SetManagerUserName(v string) *CreateRemoteADBDataSourceResponseBodyDataSourceItem {
	s.ManagerUserName = &v
	return s
}

func (s *CreateRemoteADBDataSourceResponseBodyDataSourceItem) SetRegionId(v string) *CreateRemoteADBDataSourceResponseBodyDataSourceItem {
	s.RegionId = &v
	return s
}

func (s *CreateRemoteADBDataSourceResponseBodyDataSourceItem) SetRemoteDatabase(v string) *CreateRemoteADBDataSourceResponseBodyDataSourceItem {
	s.RemoteDatabase = &v
	return s
}

func (s *CreateRemoteADBDataSourceResponseBodyDataSourceItem) SetRemoteInstanceName(v string) *CreateRemoteADBDataSourceResponseBodyDataSourceItem {
	s.RemoteInstanceName = &v
	return s
}

func (s *CreateRemoteADBDataSourceResponseBodyDataSourceItem) SetStatus(v string) *CreateRemoteADBDataSourceResponseBodyDataSourceItem {
	s.Status = &v
	return s
}

func (s *CreateRemoteADBDataSourceResponseBodyDataSourceItem) SetUserName(v string) *CreateRemoteADBDataSourceResponseBodyDataSourceItem {
	s.UserName = &v
	return s
}

type CreateRemoteADBDataSourceResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateRemoteADBDataSourceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateRemoteADBDataSourceResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateRemoteADBDataSourceResponse) GoString() string {
	return s.String()
}

func (s *CreateRemoteADBDataSourceResponse) SetHeaders(v map[string]*string) *CreateRemoteADBDataSourceResponse {
	s.Headers = v
	return s
}

func (s *CreateRemoteADBDataSourceResponse) SetStatusCode(v int32) *CreateRemoteADBDataSourceResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateRemoteADBDataSourceResponse) SetBody(v *CreateRemoteADBDataSourceResponseBody) *CreateRemoteADBDataSourceResponse {
	s.Body = v
	return s
}

type CreateSampleDataRequest struct {
	// The ID of the instance.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/2361776.html) operation to query the IDs of all AnalyticDB for PostgreSQL instances in a specific region.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s CreateSampleDataRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSampleDataRequest) GoString() string {
	return s.String()
}

func (s *CreateSampleDataRequest) SetDBInstanceId(v string) *CreateSampleDataRequest {
	s.DBInstanceId = &v
	return s
}

func (s *CreateSampleDataRequest) SetOwnerId(v int64) *CreateSampleDataRequest {
	s.OwnerId = &v
	return s
}

type CreateSampleDataResponseBody struct {
	// The ID of the instance.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The error message returned if an error occurs. This message does not affect the execution of the operation.
	//
	// example:
	//
	// *********
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 15A6881F-AAAB-5E4D-9B3F-6DCC1BDF4F2E_99
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The execution state of the operation. Valid values:
	//
	// 	- **false**: The operation fails.
	//
	// 	- **true**: The operation is successful.
	//
	// example:
	//
	// true
	Status *bool `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s CreateSampleDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateSampleDataResponseBody) GoString() string {
	return s.String()
}

func (s *CreateSampleDataResponseBody) SetDBInstanceId(v string) *CreateSampleDataResponseBody {
	s.DBInstanceId = &v
	return s
}

func (s *CreateSampleDataResponseBody) SetErrorMessage(v string) *CreateSampleDataResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *CreateSampleDataResponseBody) SetRequestId(v string) *CreateSampleDataResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateSampleDataResponseBody) SetStatus(v bool) *CreateSampleDataResponseBody {
	s.Status = &v
	return s
}

type CreateSampleDataResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateSampleDataResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateSampleDataResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateSampleDataResponse) GoString() string {
	return s.String()
}

func (s *CreateSampleDataResponse) SetHeaders(v map[string]*string) *CreateSampleDataResponse {
	s.Headers = v
	return s
}

func (s *CreateSampleDataResponse) SetStatusCode(v int32) *CreateSampleDataResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateSampleDataResponse) SetBody(v *CreateSampleDataResponseBody) *CreateSampleDataResponse {
	s.Body = v
	return s
}

type CreateSecretRequest struct {
	// The instance ID.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The description of the access credential.
	//
	// example:
	//
	// test
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	OwnerId     *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The password of the database account that is used to access the instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// pwd123
	Password *string `json:"Password,omitempty" xml:"Password,omitempty"`
	// The region ID of the instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-beijing
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The name of the access credential. The name must be 1 to 16 characters in length and can contain letters, digits, and underscores (_). If you leave this parameter empty, the value of the Username parameter is used.
	//
	// example:
	//
	// testsecret
	SecretName *string `json:"SecretName,omitempty" xml:"SecretName,omitempty"`
	// Specifies whether to check the connectivity to the instance by using the name and password of the database account.
	//
	// example:
	//
	// true
	TestConnection *bool `json:"TestConnection,omitempty" xml:"TestConnection,omitempty"`
	// The name of the database account that is used to access the instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// testacc
	Username    *string `json:"Username,omitempty" xml:"Username,omitempty"`
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s CreateSecretRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSecretRequest) GoString() string {
	return s.String()
}

func (s *CreateSecretRequest) SetDBInstanceId(v string) *CreateSecretRequest {
	s.DBInstanceId = &v
	return s
}

func (s *CreateSecretRequest) SetDescription(v string) *CreateSecretRequest {
	s.Description = &v
	return s
}

func (s *CreateSecretRequest) SetOwnerId(v int64) *CreateSecretRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateSecretRequest) SetPassword(v string) *CreateSecretRequest {
	s.Password = &v
	return s
}

func (s *CreateSecretRequest) SetRegionId(v string) *CreateSecretRequest {
	s.RegionId = &v
	return s
}

func (s *CreateSecretRequest) SetSecretName(v string) *CreateSecretRequest {
	s.SecretName = &v
	return s
}

func (s *CreateSecretRequest) SetTestConnection(v bool) *CreateSecretRequest {
	s.TestConnection = &v
	return s
}

func (s *CreateSecretRequest) SetUsername(v string) *CreateSecretRequest {
	s.Username = &v
	return s
}

func (s *CreateSecretRequest) SetWorkspaceId(v string) *CreateSecretRequest {
	s.WorkspaceId = &v
	return s
}

type CreateSecretResponseBody struct {
	// The returned message.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The Alibaba Cloud Resource Name (ARN) of the access credential for the created Data API account. Format: `acs:gpdb:{{region}}:{{accountId}}:secret/{{secretName}}-{{32 digits random string}`.
	//
	// example:
	//
	// acs:gpdb:cn-beijing:1033**:secret/testsecret-eG2AQGRIwQ0zFp4VA7mYL3uiCXTfDQbQ
	SecretArn *string `json:"SecretArn,omitempty" xml:"SecretArn,omitempty"`
	// The name of the access credential.
	//
	// example:
	//
	// testsecret
	SecretName *string `json:"SecretName,omitempty" xml:"SecretName,omitempty"`
	// The status of the operation. Valid values:
	//
	// 	- **success**
	//
	// 	- **fail**
	//
	// example:
	//
	// success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s CreateSecretResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateSecretResponseBody) GoString() string {
	return s.String()
}

func (s *CreateSecretResponseBody) SetMessage(v string) *CreateSecretResponseBody {
	s.Message = &v
	return s
}

func (s *CreateSecretResponseBody) SetRequestId(v string) *CreateSecretResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateSecretResponseBody) SetSecretArn(v string) *CreateSecretResponseBody {
	s.SecretArn = &v
	return s
}

func (s *CreateSecretResponseBody) SetSecretName(v string) *CreateSecretResponseBody {
	s.SecretName = &v
	return s
}

func (s *CreateSecretResponseBody) SetStatus(v string) *CreateSecretResponseBody {
	s.Status = &v
	return s
}

type CreateSecretResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateSecretResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateSecretResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateSecretResponse) GoString() string {
	return s.String()
}

func (s *CreateSecretResponse) SetHeaders(v map[string]*string) *CreateSecretResponse {
	s.Headers = v
	return s
}

func (s *CreateSecretResponse) SetStatusCode(v int32) *CreateSecretResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateSecretResponse) SetBody(v *CreateSecretResponseBody) *CreateSecretResponse {
	s.Body = v
	return s
}

type CreateServiceLinkedRoleRequest struct {
	OwnerId *int64 `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The ID of the region.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s CreateServiceLinkedRoleRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateServiceLinkedRoleRequest) GoString() string {
	return s.String()
}

func (s *CreateServiceLinkedRoleRequest) SetOwnerId(v int64) *CreateServiceLinkedRoleRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateServiceLinkedRoleRequest) SetRegionId(v string) *CreateServiceLinkedRoleRequest {
	s.RegionId = &v
	return s
}

type CreateServiceLinkedRoleResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// B4CAF581-2AC7-41AD-8940-D56DF7AADF5B
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateServiceLinkedRoleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateServiceLinkedRoleResponseBody) GoString() string {
	return s.String()
}

func (s *CreateServiceLinkedRoleResponseBody) SetRequestId(v string) *CreateServiceLinkedRoleResponseBody {
	s.RequestId = &v
	return s
}

type CreateServiceLinkedRoleResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateServiceLinkedRoleResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateServiceLinkedRoleResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateServiceLinkedRoleResponse) GoString() string {
	return s.String()
}

func (s *CreateServiceLinkedRoleResponse) SetHeaders(v map[string]*string) *CreateServiceLinkedRoleResponse {
	s.Headers = v
	return s
}

func (s *CreateServiceLinkedRoleResponse) SetStatusCode(v int32) *CreateServiceLinkedRoleResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateServiceLinkedRoleResponse) SetBody(v *CreateServiceLinkedRoleResponseBody) *CreateServiceLinkedRoleResponse {
	s.Body = v
	return s
}

type CreateStreamingDataServiceRequest struct {
	// The instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp10g78o9807yv9h3
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The region ID.
	//
	// > You can call the [DescribeRegions](https://help.aliyun.com/document_detail/86912.html) operation to query the most recent list of regions.
	//
	// example:
	//
	// cn-beijing
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The description of the service.
	//
	// example:
	//
	// test-adbpgss
	ServiceDescription *string `json:"ServiceDescription,omitempty" xml:"ServiceDescription,omitempty"`
	// The name of the service.
	//
	// This parameter is required.
	//
	// example:
	//
	// test-adbpgss
	ServiceName *string `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
	// The specifications of the service.
	//
	// This parameter is required.
	//
	// example:
	//
	// 2
	ServiceSpec *string `json:"ServiceSpec,omitempty" xml:"ServiceSpec,omitempty"`
}

func (s CreateStreamingDataServiceRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateStreamingDataServiceRequest) GoString() string {
	return s.String()
}

func (s *CreateStreamingDataServiceRequest) SetDBInstanceId(v string) *CreateStreamingDataServiceRequest {
	s.DBInstanceId = &v
	return s
}

func (s *CreateStreamingDataServiceRequest) SetRegionId(v string) *CreateStreamingDataServiceRequest {
	s.RegionId = &v
	return s
}

func (s *CreateStreamingDataServiceRequest) SetServiceDescription(v string) *CreateStreamingDataServiceRequest {
	s.ServiceDescription = &v
	return s
}

func (s *CreateStreamingDataServiceRequest) SetServiceName(v string) *CreateStreamingDataServiceRequest {
	s.ServiceName = &v
	return s
}

func (s *CreateStreamingDataServiceRequest) SetServiceSpec(v string) *CreateStreamingDataServiceRequest {
	s.ServiceSpec = &v
	return s
}

type CreateStreamingDataServiceResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// B4CAF581-2AC7-41AD-8940-D56DF7AADF5B
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The real-time data service ID.
	//
	// example:
	//
	// 1
	ServiceId *int32 `json:"ServiceId,omitempty" xml:"ServiceId,omitempty"`
}

func (s CreateStreamingDataServiceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateStreamingDataServiceResponseBody) GoString() string {
	return s.String()
}

func (s *CreateStreamingDataServiceResponseBody) SetRequestId(v string) *CreateStreamingDataServiceResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateStreamingDataServiceResponseBody) SetServiceId(v int32) *CreateStreamingDataServiceResponseBody {
	s.ServiceId = &v
	return s
}

type CreateStreamingDataServiceResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateStreamingDataServiceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateStreamingDataServiceResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateStreamingDataServiceResponse) GoString() string {
	return s.String()
}

func (s *CreateStreamingDataServiceResponse) SetHeaders(v map[string]*string) *CreateStreamingDataServiceResponse {
	s.Headers = v
	return s
}

func (s *CreateStreamingDataServiceResponse) SetStatusCode(v int32) *CreateStreamingDataServiceResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateStreamingDataServiceResponse) SetBody(v *CreateStreamingDataServiceResponseBody) *CreateStreamingDataServiceResponse {
	s.Body = v
	return s
}

type CreateStreamingDataSourceRequest struct {
	// Instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// CreateExternalDataSource
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// Data source configuration information.
	//
	// This parameter is required.
	//
	// example:
	//
	// {"broker_list":"broker0:9091,broker1:9091","topic":"topic"}
	DataSourceConfig *string `json:"DataSourceConfig,omitempty" xml:"DataSourceConfig,omitempty"`
	// Data source description.
	//
	// example:
	//
	// test-kafka
	DataSourceDescription *string `json:"DataSourceDescription,omitempty" xml:"DataSourceDescription,omitempty"`
	// Data source name.
	//
	// This parameter is required.
	//
	// example:
	//
	// test-kafka
	DataSourceName *string `json:"DataSourceName,omitempty" xml:"DataSourceName,omitempty"`
	// Data source type. Values:
	//
	//  -  kafka
	//
	// This parameter is required.
	//
	// example:
	//
	// kafka
	DataSourceType *string `json:"DataSourceType,omitempty" xml:"DataSourceType,omitempty"`
	// Region ID.
	//
	// > You can view available region IDs through the [DescribeRegions](https://help.aliyun.com/document_detail/86912.html) interface.
	//
	// example:
	//
	// cn-beijing
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// Real-time data service ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	ServiceId *int32 `json:"ServiceId,omitempty" xml:"ServiceId,omitempty"`
}

func (s CreateStreamingDataSourceRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateStreamingDataSourceRequest) GoString() string {
	return s.String()
}

func (s *CreateStreamingDataSourceRequest) SetDBInstanceId(v string) *CreateStreamingDataSourceRequest {
	s.DBInstanceId = &v
	return s
}

func (s *CreateStreamingDataSourceRequest) SetDataSourceConfig(v string) *CreateStreamingDataSourceRequest {
	s.DataSourceConfig = &v
	return s
}

func (s *CreateStreamingDataSourceRequest) SetDataSourceDescription(v string) *CreateStreamingDataSourceRequest {
	s.DataSourceDescription = &v
	return s
}

func (s *CreateStreamingDataSourceRequest) SetDataSourceName(v string) *CreateStreamingDataSourceRequest {
	s.DataSourceName = &v
	return s
}

func (s *CreateStreamingDataSourceRequest) SetDataSourceType(v string) *CreateStreamingDataSourceRequest {
	s.DataSourceType = &v
	return s
}

func (s *CreateStreamingDataSourceRequest) SetRegionId(v string) *CreateStreamingDataSourceRequest {
	s.RegionId = &v
	return s
}

func (s *CreateStreamingDataSourceRequest) SetServiceId(v int32) *CreateStreamingDataSourceRequest {
	s.ServiceId = &v
	return s
}

type CreateStreamingDataSourceResponseBody struct {
	// Data source ID.
	//
	// example:
	//
	// 1
	DataSourceId *int32 `json:"DataSourceId,omitempty" xml:"DataSourceId,omitempty"`
	// Request ID.
	//
	// example:
	//
	// B4CAF581-2AC7-41AD-8940-D56DF7AADF5B
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateStreamingDataSourceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateStreamingDataSourceResponseBody) GoString() string {
	return s.String()
}

func (s *CreateStreamingDataSourceResponseBody) SetDataSourceId(v int32) *CreateStreamingDataSourceResponseBody {
	s.DataSourceId = &v
	return s
}

func (s *CreateStreamingDataSourceResponseBody) SetRequestId(v string) *CreateStreamingDataSourceResponseBody {
	s.RequestId = &v
	return s
}

type CreateStreamingDataSourceResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateStreamingDataSourceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateStreamingDataSourceResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateStreamingDataSourceResponse) GoString() string {
	return s.String()
}

func (s *CreateStreamingDataSourceResponse) SetHeaders(v map[string]*string) *CreateStreamingDataSourceResponse {
	s.Headers = v
	return s
}

func (s *CreateStreamingDataSourceResponse) SetStatusCode(v int32) *CreateStreamingDataSourceResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateStreamingDataSourceResponse) SetBody(v *CreateStreamingDataSourceResponseBody) *CreateStreamingDataSourceResponse {
	s.Body = v
	return s
}

type CreateStreamingJobRequest struct {
	// Target database account.
	//
	// example:
	//
	// test-account
	Account *string `json:"Account,omitempty" xml:"Account,omitempty"`
	// Delivery guarantee.
	//
	// example:
	//
	// ATLEAST / EXACTLY
	Consistency *string `json:"Consistency,omitempty" xml:"Consistency,omitempty"`
	// Instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp10g78o9807yv9h3
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// Data source ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	DataSourceId *string `json:"DataSourceId,omitempty" xml:"DataSourceId,omitempty"`
	// Target data table mapping field list.
	DestColumns []*string `json:"DestColumns,omitempty" xml:"DestColumns,omitempty" type:"Repeated"`
	// Target database name.
	//
	// example:
	//
	// dest-db
	DestDatabase *string `json:"DestDatabase,omitempty" xml:"DestDatabase,omitempty"`
	// Target namespace.
	//
	// example:
	//
	// dest-schema
	DestSchema *string `json:"DestSchema,omitempty" xml:"DestSchema,omitempty"`
	// Target table name.
	//
	// example:
	//
	// dest-table
	DestTable *string `json:"DestTable,omitempty" xml:"DestTable,omitempty"`
	// When data in Kafka does not match the ADBPG target table, it will cause a write failure. This value is the number of error rows allowed; exceeding this will cause the task to fail.
	//
	// example:
	//
	// 5
	ErrorLimitCount *int64 `json:"ErrorLimitCount,omitempty" xml:"ErrorLimitCount,omitempty"`
	// FallbackOffset, fallback offset
	//
	// - The FallbackOffset parameter defines the behavior when the consumer does not request a specific offset or the requested offset exceeds the current Kafka cluster\\"s recorded offset information. You can choose to start consuming from the earliest (newest) or latest (oldest) offset.
	//
	// example:
	//
	// EARLIEST /  LATEST
	FallbackOffset *string `json:"FallbackOffset,omitempty" xml:"FallbackOffset,omitempty"`
	// Kafka group name
	//
	// example:
	//
	// group_name.
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	// Job configuration file, required for professional mode.
	//
	// example:
	//
	// DATABASE: adbpgss_test
	//
	// USER: adbpgss_test
	//
	// PASSWORD: adbpgssTest
	//
	// HOST: gp-xxx-master.gpdb.rds-aliyun-pre.rds.aliyuncs.com
	//
	// PORT: 5432
	//
	// KAFKA:
	//
	//   INPUT:
	//
	//     SOURCE:
	//
	//       BROKERS: broker1:9092,broker2:9092,broker3:9092
	//
	//       TOPIC: testtopic
	//
	//       FALLBACK_OFFSET: earliest
	//
	//     KEY:
	//
	//       COLUMNS:
	//
	//       - NAME: customer_id
	//
	//         TYPE: int
	//
	//       FORMAT: delimited
	//
	//       DELIMITED_OPTION:
	//
	//         DELIMITER: \\"|\\"
	//
	//     VALUE:
	//
	//       COLUMNS:
	//
	//       - TYPE: integer
	//
	//         NAME: l_orderkey
	//
	//       - TYPE: integer
	//
	//         NAME: l_partkey
	//
	//       - TYPE: integer
	//
	//         NAME: l_suppkey
	//
	//       - TYPE: integer
	//
	//         NAME: l_linenumber
	//
	//       - TYPE: decimal
	//
	//         NAME: l_quantity
	//
	//       - TYPE: decimal
	//
	//         NAME: l_extendedprice
	//
	//       - TYPE: decimal
	//
	//         NAME: l_discount
	//
	//       - TYPE: decimal
	//
	//         NAME: l_tax
	//
	//       - TYPE: char
	//
	//         NAME: l_returnflag
	//
	//       - TYPE: char
	//
	//         NAME: l_linestatus
	//
	//       - TYPE: date
	//
	//         NAME: l_shipdate
	//
	//       - TYPE: date
	//
	//         NAME: l_commitdate
	//
	//       - TYPE: date
	//
	//         NAME: l_receiptdate
	//
	//       - TYPE: text
	//
	//         NAME: l_shipinstruct
	//
	//       - TYPE: text
	//
	//         NAME: l_shipmode
	//
	//       - TYPE: text
	//
	//         NAME: l_comment
	//
	//       FORMAT: delimited
	//
	//       DELIMITED_OPTION:
	//
	//         DELIMITER: \\"|\\"
	//
	//     ERROR_LIMIT: 10
	//
	//   OUTPUT:
	//
	//     SCHEMA: adbpgss_test
	//
	//     TABLE: write_with_insert_plaintext
	//
	//     MODE: MERGE
	//
	//     MATCH_COLUMNS:
	//
	//     - l_orderkey
	//
	//     - l_partkey
	//
	//     - l_suppkey
	//
	//     UPDATE_COLUMNS:
	//
	//     - l_linenumber
	//
	//     - l_quantity
	//
	//     - l_extendedprice
	//
	//     - l_discount
	//
	//     - l_tax
	//
	//     - l_returnflag
	//
	//     - l_linestatus
	//
	//     - l_shipdate
	//
	//     - l_commitdate
	//
	//     - l_receiptdate
	//
	//     - l_shipinstruct
	//
	//     - l_shipmode
	//
	//     - l_comment
	//
	//     MAPPING:
	//
	//     - EXPRESSION: l_orderkey
	//
	//       NAME: l_orderkey
	//
	//     - EXPRESSION: l_partkey
	//
	//       NAME: l_partkey
	//
	//     - EXPRESSION: l_suppkey
	//
	//       NAME: l_suppkey
	//
	//     - EXPRESSION: l_linenumber
	//
	//       NAME: l_linenumber
	//
	//     - EXPRESSION: l_quantity
	//
	//       NAME: l_quantity
	//
	//     - EXPRESSION: l_extendedprice
	//
	//       NAME: l_extendedprice
	//
	//     - EXPRESSION: l_discount
	//
	//       NAME: l_discount
	//
	//     - EXPRESSION: l_tax
	//
	//       NAME: l_tax
	//
	//     - EXPRESSION: l_returnflag
	//
	//       NAME: l_returnflag
	//
	//     - EXPRESSION: l_linestatus
	//
	//       NAME: l_linestatus
	//
	//     - EXPRESSION: l_shipdate
	//
	//       NAME: l_shipdate
	//
	//     - EXPRESSION: l_commitdate
	//
	//       NAME: l_commitdate
	//
	//     - EXPRESSION: l_receiptdate
	//
	//       NAME: l_receiptdate
	//
	//     - EXPRESSION: l_shipinstruct
	//
	//       NAME: l_shipinstruct
	//
	//     - EXPRESSION: l_shipmode
	//
	//       NAME: l_shipmode
	//
	//     - EXPRESSION: l_comment
	//
	//       NAME: l_comment
	//
	//   COMMIT:
	//
	//     MAX_ROW: 1000
	//
	//     MINIMAL_INTERVAL: 1000
	//
	//     CONSISTENCY: ATLEAST
	//
	//   POLL:
	//
	//     BATCHSIZE: 1000
	//
	//     TIMEOUT: 1000
	//
	//   PROPERTIES:
	//
	//     group.id: testgroup
	JobConfig *string `json:"JobConfig,omitempty" xml:"JobConfig,omitempty"`
	// Job description.
	//
	// example:
	//
	// test-job
	JobDescription *string `json:"JobDescription,omitempty" xml:"JobDescription,omitempty"`
	// Job name.
	//
	// This parameter is required.
	//
	// example:
	//
	// test-job
	JobName *string `json:"JobName,omitempty" xml:"JobName,omitempty"`
	// Match columns, usually all primary key columns of the target table. If all column values in this configuration are the same, the two rows of data are considered duplicates.
	MatchColumns []*string `json:"MatchColumns,omitempty" xml:"MatchColumns,omitempty" type:"Repeated"`
	// Configuration mode
	//
	// 1. Basic mode requires specifying some configuration fields
	//
	// 1. Professional mode supports submitting a YAML file
	//
	// example:
	//
	// basic / professional
	Mode *string `json:"Mode,omitempty" xml:"Mode,omitempty"`
	// Target database password.
	//
	// example:
	//
	// pwd123
	Password *string `json:"Password,omitempty" xml:"Password,omitempty"`
	// Region ID.
	//
	// > You can call the [DescribeRegions](https://help.aliyun.com/document_detail/86912.html) API to view available region IDs.
	//
	// example:
	//
	// cn-beijing
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// Source data field list.
	SrcColumns []*string `json:"SrcColumns,omitempty" xml:"SrcColumns,omitempty" type:"Repeated"`
	// Whether to test the real-time task, values:
	//
	// - true
	//
	// - false
	//
	// Default value: false.
	//
	// example:
	//
	// true
	TryRun *bool `json:"TryRun,omitempty" xml:"TryRun,omitempty"`
	// Update columns, usually all non-primary key columns of the target table. When data is determined to be duplicate through MatchColumns, updating the UpdateColumns column values will result in new data overwriting old data.
	UpdateColumns []*string `json:"UpdateColumns,omitempty" xml:"UpdateColumns,omitempty" type:"Repeated"`
	// Write mode.
	//
	// example:
	//
	// INSERT/UPDATE/MERGE
	WriteMode *string `json:"WriteMode,omitempty" xml:"WriteMode,omitempty"`
}

func (s CreateStreamingJobRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateStreamingJobRequest) GoString() string {
	return s.String()
}

func (s *CreateStreamingJobRequest) SetAccount(v string) *CreateStreamingJobRequest {
	s.Account = &v
	return s
}

func (s *CreateStreamingJobRequest) SetConsistency(v string) *CreateStreamingJobRequest {
	s.Consistency = &v
	return s
}

func (s *CreateStreamingJobRequest) SetDBInstanceId(v string) *CreateStreamingJobRequest {
	s.DBInstanceId = &v
	return s
}

func (s *CreateStreamingJobRequest) SetDataSourceId(v string) *CreateStreamingJobRequest {
	s.DataSourceId = &v
	return s
}

func (s *CreateStreamingJobRequest) SetDestColumns(v []*string) *CreateStreamingJobRequest {
	s.DestColumns = v
	return s
}

func (s *CreateStreamingJobRequest) SetDestDatabase(v string) *CreateStreamingJobRequest {
	s.DestDatabase = &v
	return s
}

func (s *CreateStreamingJobRequest) SetDestSchema(v string) *CreateStreamingJobRequest {
	s.DestSchema = &v
	return s
}

func (s *CreateStreamingJobRequest) SetDestTable(v string) *CreateStreamingJobRequest {
	s.DestTable = &v
	return s
}

func (s *CreateStreamingJobRequest) SetErrorLimitCount(v int64) *CreateStreamingJobRequest {
	s.ErrorLimitCount = &v
	return s
}

func (s *CreateStreamingJobRequest) SetFallbackOffset(v string) *CreateStreamingJobRequest {
	s.FallbackOffset = &v
	return s
}

func (s *CreateStreamingJobRequest) SetGroupName(v string) *CreateStreamingJobRequest {
	s.GroupName = &v
	return s
}

func (s *CreateStreamingJobRequest) SetJobConfig(v string) *CreateStreamingJobRequest {
	s.JobConfig = &v
	return s
}

func (s *CreateStreamingJobRequest) SetJobDescription(v string) *CreateStreamingJobRequest {
	s.JobDescription = &v
	return s
}

func (s *CreateStreamingJobRequest) SetJobName(v string) *CreateStreamingJobRequest {
	s.JobName = &v
	return s
}

func (s *CreateStreamingJobRequest) SetMatchColumns(v []*string) *CreateStreamingJobRequest {
	s.MatchColumns = v
	return s
}

func (s *CreateStreamingJobRequest) SetMode(v string) *CreateStreamingJobRequest {
	s.Mode = &v
	return s
}

func (s *CreateStreamingJobRequest) SetPassword(v string) *CreateStreamingJobRequest {
	s.Password = &v
	return s
}

func (s *CreateStreamingJobRequest) SetRegionId(v string) *CreateStreamingJobRequest {
	s.RegionId = &v
	return s
}

func (s *CreateStreamingJobRequest) SetSrcColumns(v []*string) *CreateStreamingJobRequest {
	s.SrcColumns = v
	return s
}

func (s *CreateStreamingJobRequest) SetTryRun(v bool) *CreateStreamingJobRequest {
	s.TryRun = &v
	return s
}

func (s *CreateStreamingJobRequest) SetUpdateColumns(v []*string) *CreateStreamingJobRequest {
	s.UpdateColumns = v
	return s
}

func (s *CreateStreamingJobRequest) SetWriteMode(v string) *CreateStreamingJobRequest {
	s.WriteMode = &v
	return s
}

type CreateStreamingJobShrinkRequest struct {
	// Target database account.
	//
	// example:
	//
	// test-account
	Account *string `json:"Account,omitempty" xml:"Account,omitempty"`
	// Delivery guarantee.
	//
	// example:
	//
	// ATLEAST / EXACTLY
	Consistency *string `json:"Consistency,omitempty" xml:"Consistency,omitempty"`
	// Instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp10g78o9807yv9h3
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// Data source ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	DataSourceId *string `json:"DataSourceId,omitempty" xml:"DataSourceId,omitempty"`
	// Target data table mapping field list.
	DestColumnsShrink *string `json:"DestColumns,omitempty" xml:"DestColumns,omitempty"`
	// Target database name.
	//
	// example:
	//
	// dest-db
	DestDatabase *string `json:"DestDatabase,omitempty" xml:"DestDatabase,omitempty"`
	// Target namespace.
	//
	// example:
	//
	// dest-schema
	DestSchema *string `json:"DestSchema,omitempty" xml:"DestSchema,omitempty"`
	// Target table name.
	//
	// example:
	//
	// dest-table
	DestTable *string `json:"DestTable,omitempty" xml:"DestTable,omitempty"`
	// When data in Kafka does not match the ADBPG target table, it will cause a write failure. This value is the number of error rows allowed; exceeding this will cause the task to fail.
	//
	// example:
	//
	// 5
	ErrorLimitCount *int64 `json:"ErrorLimitCount,omitempty" xml:"ErrorLimitCount,omitempty"`
	// FallbackOffset, fallback offset
	//
	// - The FallbackOffset parameter defines the behavior when the consumer does not request a specific offset or the requested offset exceeds the current Kafka cluster\\"s recorded offset information. You can choose to start consuming from the earliest (newest) or latest (oldest) offset.
	//
	// example:
	//
	// EARLIEST /  LATEST
	FallbackOffset *string `json:"FallbackOffset,omitempty" xml:"FallbackOffset,omitempty"`
	// Kafka group name
	//
	// example:
	//
	// group_name.
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	// Job configuration file, required for professional mode.
	//
	// example:
	//
	// DATABASE: adbpgss_test
	//
	// USER: adbpgss_test
	//
	// PASSWORD: adbpgssTest
	//
	// HOST: gp-xxx-master.gpdb.rds-aliyun-pre.rds.aliyuncs.com
	//
	// PORT: 5432
	//
	// KAFKA:
	//
	//   INPUT:
	//
	//     SOURCE:
	//
	//       BROKERS: broker1:9092,broker2:9092,broker3:9092
	//
	//       TOPIC: testtopic
	//
	//       FALLBACK_OFFSET: earliest
	//
	//     KEY:
	//
	//       COLUMNS:
	//
	//       - NAME: customer_id
	//
	//         TYPE: int
	//
	//       FORMAT: delimited
	//
	//       DELIMITED_OPTION:
	//
	//         DELIMITER: \\"|\\"
	//
	//     VALUE:
	//
	//       COLUMNS:
	//
	//       - TYPE: integer
	//
	//         NAME: l_orderkey
	//
	//       - TYPE: integer
	//
	//         NAME: l_partkey
	//
	//       - TYPE: integer
	//
	//         NAME: l_suppkey
	//
	//       - TYPE: integer
	//
	//         NAME: l_linenumber
	//
	//       - TYPE: decimal
	//
	//         NAME: l_quantity
	//
	//       - TYPE: decimal
	//
	//         NAME: l_extendedprice
	//
	//       - TYPE: decimal
	//
	//         NAME: l_discount
	//
	//       - TYPE: decimal
	//
	//         NAME: l_tax
	//
	//       - TYPE: char
	//
	//         NAME: l_returnflag
	//
	//       - TYPE: char
	//
	//         NAME: l_linestatus
	//
	//       - TYPE: date
	//
	//         NAME: l_shipdate
	//
	//       - TYPE: date
	//
	//         NAME: l_commitdate
	//
	//       - TYPE: date
	//
	//         NAME: l_receiptdate
	//
	//       - TYPE: text
	//
	//         NAME: l_shipinstruct
	//
	//       - TYPE: text
	//
	//         NAME: l_shipmode
	//
	//       - TYPE: text
	//
	//         NAME: l_comment
	//
	//       FORMAT: delimited
	//
	//       DELIMITED_OPTION:
	//
	//         DELIMITER: \\"|\\"
	//
	//     ERROR_LIMIT: 10
	//
	//   OUTPUT:
	//
	//     SCHEMA: adbpgss_test
	//
	//     TABLE: write_with_insert_plaintext
	//
	//     MODE: MERGE
	//
	//     MATCH_COLUMNS:
	//
	//     - l_orderkey
	//
	//     - l_partkey
	//
	//     - l_suppkey
	//
	//     UPDATE_COLUMNS:
	//
	//     - l_linenumber
	//
	//     - l_quantity
	//
	//     - l_extendedprice
	//
	//     - l_discount
	//
	//     - l_tax
	//
	//     - l_returnflag
	//
	//     - l_linestatus
	//
	//     - l_shipdate
	//
	//     - l_commitdate
	//
	//     - l_receiptdate
	//
	//     - l_shipinstruct
	//
	//     - l_shipmode
	//
	//     - l_comment
	//
	//     MAPPING:
	//
	//     - EXPRESSION: l_orderkey
	//
	//       NAME: l_orderkey
	//
	//     - EXPRESSION: l_partkey
	//
	//       NAME: l_partkey
	//
	//     - EXPRESSION: l_suppkey
	//
	//       NAME: l_suppkey
	//
	//     - EXPRESSION: l_linenumber
	//
	//       NAME: l_linenumber
	//
	//     - EXPRESSION: l_quantity
	//
	//       NAME: l_quantity
	//
	//     - EXPRESSION: l_extendedprice
	//
	//       NAME: l_extendedprice
	//
	//     - EXPRESSION: l_discount
	//
	//       NAME: l_discount
	//
	//     - EXPRESSION: l_tax
	//
	//       NAME: l_tax
	//
	//     - EXPRESSION: l_returnflag
	//
	//       NAME: l_returnflag
	//
	//     - EXPRESSION: l_linestatus
	//
	//       NAME: l_linestatus
	//
	//     - EXPRESSION: l_shipdate
	//
	//       NAME: l_shipdate
	//
	//     - EXPRESSION: l_commitdate
	//
	//       NAME: l_commitdate
	//
	//     - EXPRESSION: l_receiptdate
	//
	//       NAME: l_receiptdate
	//
	//     - EXPRESSION: l_shipinstruct
	//
	//       NAME: l_shipinstruct
	//
	//     - EXPRESSION: l_shipmode
	//
	//       NAME: l_shipmode
	//
	//     - EXPRESSION: l_comment
	//
	//       NAME: l_comment
	//
	//   COMMIT:
	//
	//     MAX_ROW: 1000
	//
	//     MINIMAL_INTERVAL: 1000
	//
	//     CONSISTENCY: ATLEAST
	//
	//   POLL:
	//
	//     BATCHSIZE: 1000
	//
	//     TIMEOUT: 1000
	//
	//   PROPERTIES:
	//
	//     group.id: testgroup
	JobConfig *string `json:"JobConfig,omitempty" xml:"JobConfig,omitempty"`
	// Job description.
	//
	// example:
	//
	// test-job
	JobDescription *string `json:"JobDescription,omitempty" xml:"JobDescription,omitempty"`
	// Job name.
	//
	// This parameter is required.
	//
	// example:
	//
	// test-job
	JobName *string `json:"JobName,omitempty" xml:"JobName,omitempty"`
	// Match columns, usually all primary key columns of the target table. If all column values in this configuration are the same, the two rows of data are considered duplicates.
	MatchColumnsShrink *string `json:"MatchColumns,omitempty" xml:"MatchColumns,omitempty"`
	// Configuration mode
	//
	// 1. Basic mode requires specifying some configuration fields
	//
	// 1. Professional mode supports submitting a YAML file
	//
	// example:
	//
	// basic / professional
	Mode *string `json:"Mode,omitempty" xml:"Mode,omitempty"`
	// Target database password.
	//
	// example:
	//
	// pwd123
	Password *string `json:"Password,omitempty" xml:"Password,omitempty"`
	// Region ID.
	//
	// > You can call the [DescribeRegions](https://help.aliyun.com/document_detail/86912.html) API to view available region IDs.
	//
	// example:
	//
	// cn-beijing
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// Source data field list.
	SrcColumnsShrink *string `json:"SrcColumns,omitempty" xml:"SrcColumns,omitempty"`
	// Whether to test the real-time task, values:
	//
	// - true
	//
	// - false
	//
	// Default value: false.
	//
	// example:
	//
	// true
	TryRun *bool `json:"TryRun,omitempty" xml:"TryRun,omitempty"`
	// Update columns, usually all non-primary key columns of the target table. When data is determined to be duplicate through MatchColumns, updating the UpdateColumns column values will result in new data overwriting old data.
	UpdateColumnsShrink *string `json:"UpdateColumns,omitempty" xml:"UpdateColumns,omitempty"`
	// Write mode.
	//
	// example:
	//
	// INSERT/UPDATE/MERGE
	WriteMode *string `json:"WriteMode,omitempty" xml:"WriteMode,omitempty"`
}

func (s CreateStreamingJobShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateStreamingJobShrinkRequest) GoString() string {
	return s.String()
}

func (s *CreateStreamingJobShrinkRequest) SetAccount(v string) *CreateStreamingJobShrinkRequest {
	s.Account = &v
	return s
}

func (s *CreateStreamingJobShrinkRequest) SetConsistency(v string) *CreateStreamingJobShrinkRequest {
	s.Consistency = &v
	return s
}

func (s *CreateStreamingJobShrinkRequest) SetDBInstanceId(v string) *CreateStreamingJobShrinkRequest {
	s.DBInstanceId = &v
	return s
}

func (s *CreateStreamingJobShrinkRequest) SetDataSourceId(v string) *CreateStreamingJobShrinkRequest {
	s.DataSourceId = &v
	return s
}

func (s *CreateStreamingJobShrinkRequest) SetDestColumnsShrink(v string) *CreateStreamingJobShrinkRequest {
	s.DestColumnsShrink = &v
	return s
}

func (s *CreateStreamingJobShrinkRequest) SetDestDatabase(v string) *CreateStreamingJobShrinkRequest {
	s.DestDatabase = &v
	return s
}

func (s *CreateStreamingJobShrinkRequest) SetDestSchema(v string) *CreateStreamingJobShrinkRequest {
	s.DestSchema = &v
	return s
}

func (s *CreateStreamingJobShrinkRequest) SetDestTable(v string) *CreateStreamingJobShrinkRequest {
	s.DestTable = &v
	return s
}

func (s *CreateStreamingJobShrinkRequest) SetErrorLimitCount(v int64) *CreateStreamingJobShrinkRequest {
	s.ErrorLimitCount = &v
	return s
}

func (s *CreateStreamingJobShrinkRequest) SetFallbackOffset(v string) *CreateStreamingJobShrinkRequest {
	s.FallbackOffset = &v
	return s
}

func (s *CreateStreamingJobShrinkRequest) SetGroupName(v string) *CreateStreamingJobShrinkRequest {
	s.GroupName = &v
	return s
}

func (s *CreateStreamingJobShrinkRequest) SetJobConfig(v string) *CreateStreamingJobShrinkRequest {
	s.JobConfig = &v
	return s
}

func (s *CreateStreamingJobShrinkRequest) SetJobDescription(v string) *CreateStreamingJobShrinkRequest {
	s.JobDescription = &v
	return s
}

func (s *CreateStreamingJobShrinkRequest) SetJobName(v string) *CreateStreamingJobShrinkRequest {
	s.JobName = &v
	return s
}

func (s *CreateStreamingJobShrinkRequest) SetMatchColumnsShrink(v string) *CreateStreamingJobShrinkRequest {
	s.MatchColumnsShrink = &v
	return s
}

func (s *CreateStreamingJobShrinkRequest) SetMode(v string) *CreateStreamingJobShrinkRequest {
	s.Mode = &v
	return s
}

func (s *CreateStreamingJobShrinkRequest) SetPassword(v string) *CreateStreamingJobShrinkRequest {
	s.Password = &v
	return s
}

func (s *CreateStreamingJobShrinkRequest) SetRegionId(v string) *CreateStreamingJobShrinkRequest {
	s.RegionId = &v
	return s
}

func (s *CreateStreamingJobShrinkRequest) SetSrcColumnsShrink(v string) *CreateStreamingJobShrinkRequest {
	s.SrcColumnsShrink = &v
	return s
}

func (s *CreateStreamingJobShrinkRequest) SetTryRun(v bool) *CreateStreamingJobShrinkRequest {
	s.TryRun = &v
	return s
}

func (s *CreateStreamingJobShrinkRequest) SetUpdateColumnsShrink(v string) *CreateStreamingJobShrinkRequest {
	s.UpdateColumnsShrink = &v
	return s
}

func (s *CreateStreamingJobShrinkRequest) SetWriteMode(v string) *CreateStreamingJobShrinkRequest {
	s.WriteMode = &v
	return s
}

type CreateStreamingJobResponseBody struct {
	// Job ID.
	//
	// example:
	//
	// 1
	JobId *int32 `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// Request ID.
	//
	// example:
	//
	// B4CAF581-2AC7-41AD-8940-D56DF7AADF5B
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateStreamingJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateStreamingJobResponseBody) GoString() string {
	return s.String()
}

func (s *CreateStreamingJobResponseBody) SetJobId(v int32) *CreateStreamingJobResponseBody {
	s.JobId = &v
	return s
}

func (s *CreateStreamingJobResponseBody) SetRequestId(v string) *CreateStreamingJobResponseBody {
	s.RequestId = &v
	return s
}

type CreateStreamingJobResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateStreamingJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateStreamingJobResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateStreamingJobResponse) GoString() string {
	return s.String()
}

func (s *CreateStreamingJobResponse) SetHeaders(v map[string]*string) *CreateStreamingJobResponse {
	s.Headers = v
	return s
}

func (s *CreateStreamingJobResponse) SetStatusCode(v int32) *CreateStreamingJobResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateStreamingJobResponse) SetBody(v *CreateStreamingJobResponseBody) *CreateStreamingJobResponse {
	s.Body = v
	return s
}

type CreateVectorIndexRequest struct {
	// Collection name.
	//
	// > You can use the [ListCollections](https://help.aliyun.com/document_detail/2401503.html) API to view the list.
	//
	// This parameter is required.
	//
	// example:
	//
	// document
	Collection *string `json:"Collection,omitempty" xml:"Collection,omitempty"`
	// Instance ID.
	//
	// > You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) API to view details of all AnalyticDB PostgreSQL instances in the target region, including the instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// Vector dimension.
	//
	// > This value must be consistent with the length of the vector data (Rows. Vector) uploaded via the [UpsertCollectionData](https://help.aliyun.com/document_detail/2401493.html) API.
	//
	// example:
	//
	// 1024
	Dimension *int32 `json:"Dimension,omitempty" xml:"Dimension,omitempty"`
	// Whether to use mmap to build the HNSW index, default is 0. If the data does not need to be deleted and there are performance requirements for uploading data, it is recommended to set this to 1.
	//
	// >
	//
	// > - When set to 0, the segment-page storage mode is used to build the index, which can use the shared_buffer in PostgreSQL for caching and supports deletion and update operations.
	//
	// > - When set to 1, the index is built using mmap, which does not support deletion and update operations.
	//
	// example:
	//
	// 0
	ExternalStorage    *int32 `json:"ExternalStorage,omitempty" xml:"ExternalStorage,omitempty"`
	HnswEfConstruction *int32 `json:"HnswEfConstruction,omitempty" xml:"HnswEfConstruction,omitempty"`
	// The maximum number of neighbors in the HNSW algorithm, ranging from 1 to 1000. The API will automatically set this value based on the vector dimension, and it generally does not need to be manually set.
	//
	// > It is suggested to set this based on the vector dimension as follows:
	//
	// > - Less than or equal to 384: 16
	//
	// > - Greater than 384 and less than or equal to 768: 32
	//
	// > - Greater than 768 and less than or equal to 1024: 64
	//
	// > - Greater than 1024: 128
	//
	// example:
	//
	// 64
	HnswM *int32 `json:"HnswM,omitempty" xml:"HnswM,omitempty"`
	// Name of the management account with rds_superuser permissions.
	//
	// > You can create an account through the console -> Account Management, or by using the [CreateAccount](https://help.aliyun.com/document_detail/2361789.html) API.
	//
	// This parameter is required.
	//
	// example:
	//
	// testaccount
	ManagerAccount *string `json:"ManagerAccount,omitempty" xml:"ManagerAccount,omitempty"`
	// Management account password.
	//
	// This parameter is required.
	//
	// example:
	//
	// testpassword
	ManagerAccountPassword *string `json:"ManagerAccountPassword,omitempty" xml:"ManagerAccountPassword,omitempty"`
	// Method used for building the vector index. Value description:
	//
	// - l2: Euclidean distance.
	//
	// - ip: Inner product (dot product) distance.
	//
	// - cosine: Cosine similarity.
	//
	// example:
	//
	// cosine
	Metrics *string `json:"Metrics,omitempty" xml:"Metrics,omitempty"`
	// Namespace, default is public.
	//
	// > You can use the [ListNamespaces](https://help.aliyun.com/document_detail/2401502.html) API to view the list.
	//
	// example:
	//
	// mynamespace
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	OwnerId   *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// Whether to enable PQ (Product Quantization) algorithm acceleration for the index. It is recommended to enable this when the data volume exceeds 500,000. Value description:
	//
	// - 0: Disabled.
	//
	// - 1: Enabled (default).
	//
	// example:
	//
	// 1
	PqEnable *int32 `json:"PqEnable,omitempty" xml:"PqEnable,omitempty"`
	// Region ID where the instance is located.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Type     *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s CreateVectorIndexRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateVectorIndexRequest) GoString() string {
	return s.String()
}

func (s *CreateVectorIndexRequest) SetCollection(v string) *CreateVectorIndexRequest {
	s.Collection = &v
	return s
}

func (s *CreateVectorIndexRequest) SetDBInstanceId(v string) *CreateVectorIndexRequest {
	s.DBInstanceId = &v
	return s
}

func (s *CreateVectorIndexRequest) SetDimension(v int32) *CreateVectorIndexRequest {
	s.Dimension = &v
	return s
}

func (s *CreateVectorIndexRequest) SetExternalStorage(v int32) *CreateVectorIndexRequest {
	s.ExternalStorage = &v
	return s
}

func (s *CreateVectorIndexRequest) SetHnswEfConstruction(v int32) *CreateVectorIndexRequest {
	s.HnswEfConstruction = &v
	return s
}

func (s *CreateVectorIndexRequest) SetHnswM(v int32) *CreateVectorIndexRequest {
	s.HnswM = &v
	return s
}

func (s *CreateVectorIndexRequest) SetManagerAccount(v string) *CreateVectorIndexRequest {
	s.ManagerAccount = &v
	return s
}

func (s *CreateVectorIndexRequest) SetManagerAccountPassword(v string) *CreateVectorIndexRequest {
	s.ManagerAccountPassword = &v
	return s
}

func (s *CreateVectorIndexRequest) SetMetrics(v string) *CreateVectorIndexRequest {
	s.Metrics = &v
	return s
}

func (s *CreateVectorIndexRequest) SetNamespace(v string) *CreateVectorIndexRequest {
	s.Namespace = &v
	return s
}

func (s *CreateVectorIndexRequest) SetOwnerId(v int64) *CreateVectorIndexRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateVectorIndexRequest) SetPqEnable(v int32) *CreateVectorIndexRequest {
	s.PqEnable = &v
	return s
}

func (s *CreateVectorIndexRequest) SetRegionId(v string) *CreateVectorIndexRequest {
	s.RegionId = &v
	return s
}

func (s *CreateVectorIndexRequest) SetType(v string) *CreateVectorIndexRequest {
	s.Type = &v
	return s
}

type CreateVectorIndexResponseBody struct {
	// Detailed information returned by the API.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// API execution status. Value description:
	//
	// - **success**: Execution succeeded.
	//
	// - **fail**: Execution failed.
	//
	// example:
	//
	// success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s CreateVectorIndexResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateVectorIndexResponseBody) GoString() string {
	return s.String()
}

func (s *CreateVectorIndexResponseBody) SetMessage(v string) *CreateVectorIndexResponseBody {
	s.Message = &v
	return s
}

func (s *CreateVectorIndexResponseBody) SetRequestId(v string) *CreateVectorIndexResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateVectorIndexResponseBody) SetStatus(v string) *CreateVectorIndexResponseBody {
	s.Status = &v
	return s
}

type CreateVectorIndexResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateVectorIndexResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateVectorIndexResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateVectorIndexResponse) GoString() string {
	return s.String()
}

func (s *CreateVectorIndexResponse) SetHeaders(v map[string]*string) *CreateVectorIndexResponse {
	s.Headers = v
	return s
}

func (s *CreateVectorIndexResponse) SetStatusCode(v int32) *CreateVectorIndexResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateVectorIndexResponse) SetBody(v *CreateVectorIndexResponseBody) *CreateVectorIndexResponse {
	s.Body = v
	return s
}

type DeleteAccountRequest struct {
	// The name of the database account. The privileged account cannot be deleted.
	//
	// This parameter is required.
	//
	// example:
	//
	// testuser
	AccountName *string `json:"AccountName,omitempty" xml:"AccountName,omitempty"`
	// The instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp***************
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
}

func (s DeleteAccountRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteAccountRequest) GoString() string {
	return s.String()
}

func (s *DeleteAccountRequest) SetAccountName(v string) *DeleteAccountRequest {
	s.AccountName = &v
	return s
}

func (s *DeleteAccountRequest) SetDBInstanceId(v string) *DeleteAccountRequest {
	s.DBInstanceId = &v
	return s
}

type DeleteAccountResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 7565770E-7C45-462D-BA4A-8A5396****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteAccountResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteAccountResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteAccountResponseBody) SetRequestId(v string) *DeleteAccountResponseBody {
	s.RequestId = &v
	return s
}

type DeleteAccountResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteAccountResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteAccountResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteAccountResponse) GoString() string {
	return s.String()
}

func (s *DeleteAccountResponse) SetHeaders(v map[string]*string) *DeleteAccountResponse {
	s.Headers = v
	return s
}

func (s *DeleteAccountResponse) SetStatusCode(v int32) *DeleteAccountResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteAccountResponse) SetBody(v *DeleteAccountResponseBody) *DeleteAccountResponse {
	s.Body = v
	return s
}

type DeleteBackupRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 1111111111
	BackupId *string `json:"BackupId,omitempty" xml:"BackupId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
}

func (s DeleteBackupRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteBackupRequest) GoString() string {
	return s.String()
}

func (s *DeleteBackupRequest) SetBackupId(v string) *DeleteBackupRequest {
	s.BackupId = &v
	return s
}

func (s *DeleteBackupRequest) SetDBInstanceId(v string) *DeleteBackupRequest {
	s.DBInstanceId = &v
	return s
}

type DeleteBackupResponseBody struct {
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteBackupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteBackupResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteBackupResponseBody) SetRequestId(v string) *DeleteBackupResponseBody {
	s.RequestId = &v
	return s
}

type DeleteBackupResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteBackupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteBackupResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteBackupResponse) GoString() string {
	return s.String()
}

func (s *DeleteBackupResponse) SetHeaders(v map[string]*string) *DeleteBackupResponse {
	s.Headers = v
	return s
}

func (s *DeleteBackupResponse) SetStatusCode(v int32) *DeleteBackupResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteBackupResponse) SetBody(v *DeleteBackupResponseBody) *DeleteBackupResponse {
	s.Body = v
	return s
}

type DeleteCollectionRequest struct {
	// The name of the collection.
	//
	// This parameter is required.
	//
	// example:
	//
	// document
	Collection *string `json:"Collection,omitempty" xml:"Collection,omitempty"`
	// The instance ID.
	//
	// > You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The name of the namespace.
	//
	// >  You can call the [ListNamespaces](https://help.aliyun.com/document_detail/2401502.html) operation to query a list of namespaces.
	//
	// example:
	//
	// mynamespace
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// The password of the namespace.
	//
	// This parameter is required.
	//
	// example:
	//
	// testpassword
	NamespacePassword *string `json:"NamespacePassword,omitempty" xml:"NamespacePassword,omitempty"`
	OwnerId           *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The region ID of the instance.
	//
	// >  You can call the [DescribeRegions](https://help.aliyun.com/document_detail/86912.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the workspace that consists of multiple AnalyticDB for PostgreSQL instances. You must specify one of the WorkspaceId and DBInstanceId parameters. If you specify both parameters, the WorkspaceId parameter takes effect.
	//
	// example:
	//
	// gp-ws-*****
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s DeleteCollectionRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteCollectionRequest) GoString() string {
	return s.String()
}

func (s *DeleteCollectionRequest) SetCollection(v string) *DeleteCollectionRequest {
	s.Collection = &v
	return s
}

func (s *DeleteCollectionRequest) SetDBInstanceId(v string) *DeleteCollectionRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DeleteCollectionRequest) SetNamespace(v string) *DeleteCollectionRequest {
	s.Namespace = &v
	return s
}

func (s *DeleteCollectionRequest) SetNamespacePassword(v string) *DeleteCollectionRequest {
	s.NamespacePassword = &v
	return s
}

func (s *DeleteCollectionRequest) SetOwnerId(v int64) *DeleteCollectionRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteCollectionRequest) SetRegionId(v string) *DeleteCollectionRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteCollectionRequest) SetWorkspaceId(v string) *DeleteCollectionRequest {
	s.WorkspaceId = &v
	return s
}

type DeleteCollectionResponseBody struct {
	// The returned message.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **success**
	//
	// 	- **fail**
	//
	// example:
	//
	// success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DeleteCollectionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteCollectionResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteCollectionResponseBody) SetMessage(v string) *DeleteCollectionResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteCollectionResponseBody) SetRequestId(v string) *DeleteCollectionResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteCollectionResponseBody) SetStatus(v string) *DeleteCollectionResponseBody {
	s.Status = &v
	return s
}

type DeleteCollectionResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteCollectionResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteCollectionResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteCollectionResponse) GoString() string {
	return s.String()
}

func (s *DeleteCollectionResponse) SetHeaders(v map[string]*string) *DeleteCollectionResponse {
	s.Headers = v
	return s
}

func (s *DeleteCollectionResponse) SetStatusCode(v int32) *DeleteCollectionResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteCollectionResponse) SetBody(v *DeleteCollectionResponseBody) *DeleteCollectionResponse {
	s.Body = v
	return s
}

type DeleteCollectionDataRequest struct {
	// The name of the collection.
	//
	// This parameter is required.
	//
	// example:
	//
	// document
	Collection *string `json:"Collection,omitempty" xml:"Collection,omitempty"`
	// The data that you want to delete.
	//
	// example:
	//
	// {"title":["a","b"]}
	CollectionData *string `json:"CollectionData,omitempty" xml:"CollectionData,omitempty"`
	// The filter conditions for the data to be deleted.
	//
	// example:
	//
	// a < 10
	CollectionDataFilter *string `json:"CollectionDataFilter,omitempty" xml:"CollectionDataFilter,omitempty"`
	// The instance ID.
	//
	// > You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the IDs of all AnalyticDB for PostgreSQL instances within a region.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The name of the namespace. Default value: public.
	//
	// >  You can call the [ListNamespaces](https://help.aliyun.com/document_detail/2401502.html) operation to query a list of namespaces.
	//
	// example:
	//
	// mynamespace
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// The password of the namespace.
	//
	// This parameter is required.
	//
	// example:
	//
	// testpassword
	NamespacePassword *string `json:"NamespacePassword,omitempty" xml:"NamespacePassword,omitempty"`
	OwnerId           *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The region ID of the instance.
	//
	// >  You can call the [DescribeRegions](https://help.aliyun.com/document_detail/86912.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the workspace that consists of multiple AnalyticDB for PostgreSQL instances. You must specify one of the WorkspaceId and DBInstanceId parameters. If you specify both parameters, the WorkspaceId parameter takes effect.
	//
	// example:
	//
	// gp-ws-*****
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s DeleteCollectionDataRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteCollectionDataRequest) GoString() string {
	return s.String()
}

func (s *DeleteCollectionDataRequest) SetCollection(v string) *DeleteCollectionDataRequest {
	s.Collection = &v
	return s
}

func (s *DeleteCollectionDataRequest) SetCollectionData(v string) *DeleteCollectionDataRequest {
	s.CollectionData = &v
	return s
}

func (s *DeleteCollectionDataRequest) SetCollectionDataFilter(v string) *DeleteCollectionDataRequest {
	s.CollectionDataFilter = &v
	return s
}

func (s *DeleteCollectionDataRequest) SetDBInstanceId(v string) *DeleteCollectionDataRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DeleteCollectionDataRequest) SetNamespace(v string) *DeleteCollectionDataRequest {
	s.Namespace = &v
	return s
}

func (s *DeleteCollectionDataRequest) SetNamespacePassword(v string) *DeleteCollectionDataRequest {
	s.NamespacePassword = &v
	return s
}

func (s *DeleteCollectionDataRequest) SetOwnerId(v int64) *DeleteCollectionDataRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteCollectionDataRequest) SetRegionId(v string) *DeleteCollectionDataRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteCollectionDataRequest) SetWorkspaceId(v string) *DeleteCollectionDataRequest {
	s.WorkspaceId = &v
	return s
}

type DeleteCollectionDataResponseBody struct {
	// The number of rows that are affected by the request.
	//
	// example:
	//
	// 10
	AppliedRows *int64 `json:"AppliedRows,omitempty" xml:"AppliedRows,omitempty"`
	// The returned message.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **success**
	//
	// 	- **fail**
	//
	// example:
	//
	// success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DeleteCollectionDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteCollectionDataResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteCollectionDataResponseBody) SetAppliedRows(v int64) *DeleteCollectionDataResponseBody {
	s.AppliedRows = &v
	return s
}

func (s *DeleteCollectionDataResponseBody) SetMessage(v string) *DeleteCollectionDataResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteCollectionDataResponseBody) SetRequestId(v string) *DeleteCollectionDataResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteCollectionDataResponseBody) SetStatus(v string) *DeleteCollectionDataResponseBody {
	s.Status = &v
	return s
}

type DeleteCollectionDataResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteCollectionDataResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteCollectionDataResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteCollectionDataResponse) GoString() string {
	return s.String()
}

func (s *DeleteCollectionDataResponse) SetHeaders(v map[string]*string) *DeleteCollectionDataResponse {
	s.Headers = v
	return s
}

func (s *DeleteCollectionDataResponse) SetStatusCode(v int32) *DeleteCollectionDataResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteCollectionDataResponse) SetBody(v *DeleteCollectionDataResponseBody) *DeleteCollectionDataResponse {
	s.Body = v
	return s
}

type DeleteDBInstanceRequest struct {
	// The client token that is used to ensure the idempotence of the request. For more information, see [How to ensure idempotence](https://help.aliyun.com/document_detail/327176.html).
	//
	// example:
	//
	// 0c593ea1-3bea-11e9-b96b-88**********
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// The ID of the instance.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the details of all AnalyticDB for PostgreSQL instances in a specific region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp***************
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// This parameter is no longer used.
	//
	// example:
	//
	// rg-bp67acfmxazb4p****
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
}

func (s DeleteDBInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteDBInstanceRequest) GoString() string {
	return s.String()
}

func (s *DeleteDBInstanceRequest) SetClientToken(v string) *DeleteDBInstanceRequest {
	s.ClientToken = &v
	return s
}

func (s *DeleteDBInstanceRequest) SetDBInstanceId(v string) *DeleteDBInstanceRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DeleteDBInstanceRequest) SetOwnerId(v int64) *DeleteDBInstanceRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteDBInstanceRequest) SetResourceGroupId(v string) *DeleteDBInstanceRequest {
	s.ResourceGroupId = &v
	return s
}

type DeleteDBInstanceResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// 65BDA532-28AF-4122-AA39-B3**********
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteDBInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteDBInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteDBInstanceResponseBody) SetRequestId(v string) *DeleteDBInstanceResponseBody {
	s.RequestId = &v
	return s
}

type DeleteDBInstanceResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteDBInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteDBInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteDBInstanceResponse) GoString() string {
	return s.String()
}

func (s *DeleteDBInstanceResponse) SetHeaders(v map[string]*string) *DeleteDBInstanceResponse {
	s.Headers = v
	return s
}

func (s *DeleteDBInstanceResponse) SetStatusCode(v int32) *DeleteDBInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteDBInstanceResponse) SetBody(v *DeleteDBInstanceResponseBody) *DeleteDBInstanceResponse {
	s.Body = v
	return s
}

type DeleteDBInstancePlanRequest struct {
	// The ID of the instance.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the details of all AnalyticDB for PostgreSQL instances in a specific region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The ID of the plan.
	//
	// >  You can call the [DescribeDBInstancePlans](https://help.aliyun.com/document_detail/449398.html) operation to query the details of plans, including plan IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1234
	PlanId *string `json:"PlanId,omitempty" xml:"PlanId,omitempty"`
}

func (s DeleteDBInstancePlanRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteDBInstancePlanRequest) GoString() string {
	return s.String()
}

func (s *DeleteDBInstancePlanRequest) SetDBInstanceId(v string) *DeleteDBInstancePlanRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DeleteDBInstancePlanRequest) SetOwnerId(v int64) *DeleteDBInstancePlanRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteDBInstancePlanRequest) SetPlanId(v string) *DeleteDBInstancePlanRequest {
	s.PlanId = &v
	return s
}

type DeleteDBInstancePlanResponseBody struct {
	// The ID of the instance.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The error message returned.
	//
	// This parameter is returned only when the operation fails.
	//
	// example:
	//
	// ****
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// The ID of the plan.
	//
	// example:
	//
	// 1234
	PlanId *string `json:"PlanId,omitempty" xml:"PlanId,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 34b32a0a-08ef-4a87-b6be-cdd988888888
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The state of the operation.
	//
	// If the operation is successful, **success*	- is returned. If the operation fails, this parameter is not returned.
	//
	// example:
	//
	// success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DeleteDBInstancePlanResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteDBInstancePlanResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteDBInstancePlanResponseBody) SetDBInstanceId(v string) *DeleteDBInstancePlanResponseBody {
	s.DBInstanceId = &v
	return s
}

func (s *DeleteDBInstancePlanResponseBody) SetErrorMessage(v string) *DeleteDBInstancePlanResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *DeleteDBInstancePlanResponseBody) SetPlanId(v string) *DeleteDBInstancePlanResponseBody {
	s.PlanId = &v
	return s
}

func (s *DeleteDBInstancePlanResponseBody) SetRequestId(v string) *DeleteDBInstancePlanResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteDBInstancePlanResponseBody) SetStatus(v string) *DeleteDBInstancePlanResponseBody {
	s.Status = &v
	return s
}

type DeleteDBInstancePlanResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteDBInstancePlanResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteDBInstancePlanResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteDBInstancePlanResponse) GoString() string {
	return s.String()
}

func (s *DeleteDBInstancePlanResponse) SetHeaders(v map[string]*string) *DeleteDBInstancePlanResponse {
	s.Headers = v
	return s
}

func (s *DeleteDBInstancePlanResponse) SetStatusCode(v int32) *DeleteDBInstancePlanResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteDBInstancePlanResponse) SetBody(v *DeleteDBInstancePlanResponseBody) *DeleteDBInstancePlanResponse {
	s.Body = v
	return s
}

type DeleteDBResourceGroupRequest struct {
	// The instance ID.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/196830.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The name of the resource group.
	//
	// This parameter is required.
	//
	// example:
	//
	// testgroup
	ResourceGroupName *string `json:"ResourceGroupName,omitempty" xml:"ResourceGroupName,omitempty"`
}

func (s DeleteDBResourceGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteDBResourceGroupRequest) GoString() string {
	return s.String()
}

func (s *DeleteDBResourceGroupRequest) SetDBInstanceId(v string) *DeleteDBResourceGroupRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DeleteDBResourceGroupRequest) SetOwnerId(v int64) *DeleteDBResourceGroupRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteDBResourceGroupRequest) SetResourceGroupName(v string) *DeleteDBResourceGroupRequest {
	s.ResourceGroupName = &v
	return s
}

type DeleteDBResourceGroupResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteDBResourceGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteDBResourceGroupResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteDBResourceGroupResponseBody) SetRequestId(v string) *DeleteDBResourceGroupResponseBody {
	s.RequestId = &v
	return s
}

type DeleteDBResourceGroupResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteDBResourceGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteDBResourceGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteDBResourceGroupResponse) GoString() string {
	return s.String()
}

func (s *DeleteDBResourceGroupResponse) SetHeaders(v map[string]*string) *DeleteDBResourceGroupResponse {
	s.Headers = v
	return s
}

func (s *DeleteDBResourceGroupResponse) SetStatusCode(v int32) *DeleteDBResourceGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteDBResourceGroupResponse) SetBody(v *DeleteDBResourceGroupResponseBody) *DeleteDBResourceGroupResponse {
	s.Body = v
	return s
}

type DeleteDocumentRequest struct {
	// Document collection name.
	//
	//
	// > Created by the [CreateDocumentCollection](https://help.aliyun.com/document_detail/2618448.html) API. You can use the [ListDocumentCollections](https://help.aliyun.com/document_detail/2618452.html) API to view the list of created document collections.
	//
	// This parameter is required.
	//
	// example:
	//
	// document
	Collection *string `json:"Collection,omitempty" xml:"Collection,omitempty"`
	// Instance ID.
	//
	// > You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) API to view details of all AnalyticDB PostgreSQL instances in the target region, including the instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// File name.
	//
	// > The name of an uploaded file. You can query the list of files using the [ListDocuments](https://help.aliyun.com/document_detail/2618453.html) API.
	//
	// This parameter is required.
	//
	// example:
	//
	// music.txt
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// Namespace, default is public.
	//
	// > You can create a namespace using the [CreateNamespace](https://help.aliyun.com/document_detail/2401495.html) API and view the list of namespaces using the [ListNamespaces](https://help.aliyun.com/document_detail/2401502.html) API.
	//
	// example:
	//
	// mynamespace
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// Password for the namespace.
	//
	// > This value is specified in the [CreateNamespace](https://help.aliyun.com/document_detail/2401495.html) API.
	//
	// This parameter is required.
	//
	// example:
	//
	// testpassword
	NamespacePassword *string `json:"NamespacePassword,omitempty" xml:"NamespacePassword,omitempty"`
	OwnerId           *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// Region ID where the instance is located.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DeleteDocumentRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteDocumentRequest) GoString() string {
	return s.String()
}

func (s *DeleteDocumentRequest) SetCollection(v string) *DeleteDocumentRequest {
	s.Collection = &v
	return s
}

func (s *DeleteDocumentRequest) SetDBInstanceId(v string) *DeleteDocumentRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DeleteDocumentRequest) SetFileName(v string) *DeleteDocumentRequest {
	s.FileName = &v
	return s
}

func (s *DeleteDocumentRequest) SetNamespace(v string) *DeleteDocumentRequest {
	s.Namespace = &v
	return s
}

func (s *DeleteDocumentRequest) SetNamespacePassword(v string) *DeleteDocumentRequest {
	s.NamespacePassword = &v
	return s
}

func (s *DeleteDocumentRequest) SetOwnerId(v int64) *DeleteDocumentRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteDocumentRequest) SetRegionId(v string) *DeleteDocumentRequest {
	s.RegionId = &v
	return s
}

type DeleteDocumentResponseBody struct {
	// Detailed information returned by the API.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Creation status, value description: - **success**: Success - **fail**: Fail
	//
	// example:
	//
	// success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DeleteDocumentResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteDocumentResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteDocumentResponseBody) SetMessage(v string) *DeleteDocumentResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteDocumentResponseBody) SetRequestId(v string) *DeleteDocumentResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteDocumentResponseBody) SetStatus(v string) *DeleteDocumentResponseBody {
	s.Status = &v
	return s
}

type DeleteDocumentResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteDocumentResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteDocumentResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteDocumentResponse) GoString() string {
	return s.String()
}

func (s *DeleteDocumentResponse) SetHeaders(v map[string]*string) *DeleteDocumentResponse {
	s.Headers = v
	return s
}

func (s *DeleteDocumentResponse) SetStatusCode(v int32) *DeleteDocumentResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteDocumentResponse) SetBody(v *DeleteDocumentResponseBody) *DeleteDocumentResponse {
	s.Body = v
	return s
}

type DeleteDocumentCollectionRequest struct {
	// The name of the document collection to be deleted.
	//
	// This parameter is required.
	//
	// example:
	//
	// document
	Collection *string `json:"Collection,omitempty" xml:"Collection,omitempty"`
	// Instance ID.
	//
	// > You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) API to view details of all AnalyticDB PostgreSQL instances in the target region, including the instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// Namespace, default is public.
	//
	// > You can create a namespace using the [CreateNamespace](https://help.aliyun.com/document_detail/2401495.html) API and view the list of namespaces using the [ListNamespaces](https://help.aliyun.com/document_detail/2401502.html) API.
	//
	// example:
	//
	// mynamespace
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// Password for the namespace.
	//
	// > This value is specified by the [CreateNamespace](https://help.aliyun.com/document_detail/2401495.html) API.
	//
	// This parameter is required.
	//
	// example:
	//
	// testpassword
	NamespacePassword *string `json:"NamespacePassword,omitempty" xml:"NamespacePassword,omitempty"`
	OwnerId           *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The ID of the region where the instance is located.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DeleteDocumentCollectionRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteDocumentCollectionRequest) GoString() string {
	return s.String()
}

func (s *DeleteDocumentCollectionRequest) SetCollection(v string) *DeleteDocumentCollectionRequest {
	s.Collection = &v
	return s
}

func (s *DeleteDocumentCollectionRequest) SetDBInstanceId(v string) *DeleteDocumentCollectionRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DeleteDocumentCollectionRequest) SetNamespace(v string) *DeleteDocumentCollectionRequest {
	s.Namespace = &v
	return s
}

func (s *DeleteDocumentCollectionRequest) SetNamespacePassword(v string) *DeleteDocumentCollectionRequest {
	s.NamespacePassword = &v
	return s
}

func (s *DeleteDocumentCollectionRequest) SetOwnerId(v int64) *DeleteDocumentCollectionRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteDocumentCollectionRequest) SetRegionId(v string) *DeleteDocumentCollectionRequest {
	s.RegionId = &v
	return s
}

type DeleteDocumentCollectionResponseBody struct {
	// Return message.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Status, with the following possible values:
	//
	// - **success**: Success.
	//
	// - **fail**: Failure.
	//
	// example:
	//
	// success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DeleteDocumentCollectionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteDocumentCollectionResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteDocumentCollectionResponseBody) SetMessage(v string) *DeleteDocumentCollectionResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteDocumentCollectionResponseBody) SetRequestId(v string) *DeleteDocumentCollectionResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteDocumentCollectionResponseBody) SetStatus(v string) *DeleteDocumentCollectionResponseBody {
	s.Status = &v
	return s
}

type DeleteDocumentCollectionResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteDocumentCollectionResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteDocumentCollectionResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteDocumentCollectionResponse) GoString() string {
	return s.String()
}

func (s *DeleteDocumentCollectionResponse) SetHeaders(v map[string]*string) *DeleteDocumentCollectionResponse {
	s.Headers = v
	return s
}

func (s *DeleteDocumentCollectionResponse) SetStatusCode(v int32) *DeleteDocumentCollectionResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteDocumentCollectionResponse) SetBody(v *DeleteDocumentCollectionResponseBody) *DeleteDocumentCollectionResponse {
	s.Body = v
	return s
}

type DeleteExtensionRequest struct {
	// The instance ID.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the IDs of all AnalyticDB for PostgreSQL instances in a specific region.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The name of the database.
	//
	// This parameter is required.
	//
	// example:
	//
	// demo1
	DBNames *string `json:"DBNames,omitempty" xml:"DBNames,omitempty"`
	// The name of the extension.
	//
	// This parameter is required.
	//
	// example:
	//
	// citext
	Extension *string `json:"Extension,omitempty" xml:"Extension,omitempty"`
	// The region ID of the instance.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DeleteExtensionRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteExtensionRequest) GoString() string {
	return s.String()
}

func (s *DeleteExtensionRequest) SetDBInstanceId(v string) *DeleteExtensionRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DeleteExtensionRequest) SetDBNames(v string) *DeleteExtensionRequest {
	s.DBNames = &v
	return s
}

func (s *DeleteExtensionRequest) SetExtension(v string) *DeleteExtensionRequest {
	s.Extension = &v
	return s
}

func (s *DeleteExtensionRequest) SetRegionId(v string) *DeleteExtensionRequest {
	s.RegionId = &v
	return s
}

type DeleteExtensionResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteExtensionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteExtensionResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteExtensionResponseBody) SetRequestId(v string) *DeleteExtensionResponseBody {
	s.RequestId = &v
	return s
}

type DeleteExtensionResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteExtensionResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteExtensionResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteExtensionResponse) GoString() string {
	return s.String()
}

func (s *DeleteExtensionResponse) SetHeaders(v map[string]*string) *DeleteExtensionResponse {
	s.Headers = v
	return s
}

func (s *DeleteExtensionResponse) SetStatusCode(v int32) *DeleteExtensionResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteExtensionResponse) SetBody(v *DeleteExtensionResponseBody) *DeleteExtensionResponse {
	s.Body = v
	return s
}

type DeleteExternalDataServiceRequest struct {
	// Instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// Region ID.
	//
	// > You can call the [DescribeRegions](https://help.aliyun.com/document_detail/86912.html) API to view available region IDs.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// Service ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	ServiceId *string `json:"ServiceId,omitempty" xml:"ServiceId,omitempty"`
}

func (s DeleteExternalDataServiceRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteExternalDataServiceRequest) GoString() string {
	return s.String()
}

func (s *DeleteExternalDataServiceRequest) SetDBInstanceId(v string) *DeleteExternalDataServiceRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DeleteExternalDataServiceRequest) SetRegionId(v string) *DeleteExternalDataServiceRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteExternalDataServiceRequest) SetServiceId(v string) *DeleteExternalDataServiceRequest {
	s.ServiceId = &v
	return s
}

type DeleteExternalDataServiceResponseBody struct {
	// Request ID.
	//
	// example:
	//
	// B4CAF581-2AC7-41AD-8940-D56DF7AADF5B
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteExternalDataServiceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteExternalDataServiceResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteExternalDataServiceResponseBody) SetRequestId(v string) *DeleteExternalDataServiceResponseBody {
	s.RequestId = &v
	return s
}

type DeleteExternalDataServiceResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteExternalDataServiceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteExternalDataServiceResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteExternalDataServiceResponse) GoString() string {
	return s.String()
}

func (s *DeleteExternalDataServiceResponse) SetHeaders(v map[string]*string) *DeleteExternalDataServiceResponse {
	s.Headers = v
	return s
}

func (s *DeleteExternalDataServiceResponse) SetStatusCode(v int32) *DeleteExternalDataServiceResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteExternalDataServiceResponse) SetBody(v *DeleteExternalDataServiceResponseBody) *DeleteExternalDataServiceResponse {
	s.Body = v
	return s
}

type DeleteHadoopDataSourceRequest struct {
	// The instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The service ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 123
	DataSourceId *string `json:"DataSourceId,omitempty" xml:"DataSourceId,omitempty"`
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DeleteHadoopDataSourceRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteHadoopDataSourceRequest) GoString() string {
	return s.String()
}

func (s *DeleteHadoopDataSourceRequest) SetDBInstanceId(v string) *DeleteHadoopDataSourceRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DeleteHadoopDataSourceRequest) SetDataSourceId(v string) *DeleteHadoopDataSourceRequest {
	s.DataSourceId = &v
	return s
}

func (s *DeleteHadoopDataSourceRequest) SetRegionId(v string) *DeleteHadoopDataSourceRequest {
	s.RegionId = &v
	return s
}

type DeleteHadoopDataSourceResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// B4CAF581-2AC7-41AD-8940-D56DF7AADF5B
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteHadoopDataSourceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteHadoopDataSourceResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteHadoopDataSourceResponseBody) SetRequestId(v string) *DeleteHadoopDataSourceResponseBody {
	s.RequestId = &v
	return s
}

type DeleteHadoopDataSourceResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteHadoopDataSourceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteHadoopDataSourceResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteHadoopDataSourceResponse) GoString() string {
	return s.String()
}

func (s *DeleteHadoopDataSourceResponse) SetHeaders(v map[string]*string) *DeleteHadoopDataSourceResponse {
	s.Headers = v
	return s
}

func (s *DeleteHadoopDataSourceResponse) SetStatusCode(v int32) *DeleteHadoopDataSourceResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteHadoopDataSourceResponse) SetBody(v *DeleteHadoopDataSourceResponseBody) *DeleteHadoopDataSourceResponse {
	s.Body = v
	return s
}

type DeleteIndexRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// testcollection
	Collection *string `json:"Collection,omitempty" xml:"Collection,omitempty"`
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// testindex
	IndexName *string `json:"IndexName,omitempty" xml:"IndexName,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// mynamespace
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// testpassword
	NamespacePassword *string `json:"NamespacePassword,omitempty" xml:"NamespacePassword,omitempty"`
	OwnerId           *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// example:
	//
	// gp-ws-*****
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s DeleteIndexRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteIndexRequest) GoString() string {
	return s.String()
}

func (s *DeleteIndexRequest) SetCollection(v string) *DeleteIndexRequest {
	s.Collection = &v
	return s
}

func (s *DeleteIndexRequest) SetDBInstanceId(v string) *DeleteIndexRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DeleteIndexRequest) SetIndexName(v string) *DeleteIndexRequest {
	s.IndexName = &v
	return s
}

func (s *DeleteIndexRequest) SetNamespace(v string) *DeleteIndexRequest {
	s.Namespace = &v
	return s
}

func (s *DeleteIndexRequest) SetNamespacePassword(v string) *DeleteIndexRequest {
	s.NamespacePassword = &v
	return s
}

func (s *DeleteIndexRequest) SetOwnerId(v int64) *DeleteIndexRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteIndexRequest) SetRegionId(v string) *DeleteIndexRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteIndexRequest) SetWorkspaceId(v string) *DeleteIndexRequest {
	s.WorkspaceId = &v
	return s
}

type DeleteIndexResponseBody struct {
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DeleteIndexResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteIndexResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteIndexResponseBody) SetMessage(v string) *DeleteIndexResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteIndexResponseBody) SetRequestId(v string) *DeleteIndexResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteIndexResponseBody) SetStatus(v string) *DeleteIndexResponseBody {
	s.Status = &v
	return s
}

type DeleteIndexResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteIndexResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteIndexResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteIndexResponse) GoString() string {
	return s.String()
}

func (s *DeleteIndexResponse) SetHeaders(v map[string]*string) *DeleteIndexResponse {
	s.Headers = v
	return s
}

func (s *DeleteIndexResponse) SetStatusCode(v int32) *DeleteIndexResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteIndexResponse) SetBody(v *DeleteIndexResponseBody) *DeleteIndexResponse {
	s.Body = v
	return s
}

type DeleteJDBCDataSourceRequest struct {
	// Instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// Data source ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 123
	DataSourceId *string `json:"DataSourceId,omitempty" xml:"DataSourceId,omitempty"`
	// Region ID.
	//
	// > You can call the [DescribeRegions](https://help.aliyun.com/document_detail/86912.html) interface to view available region IDs.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DeleteJDBCDataSourceRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteJDBCDataSourceRequest) GoString() string {
	return s.String()
}

func (s *DeleteJDBCDataSourceRequest) SetDBInstanceId(v string) *DeleteJDBCDataSourceRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DeleteJDBCDataSourceRequest) SetDataSourceId(v string) *DeleteJDBCDataSourceRequest {
	s.DataSourceId = &v
	return s
}

func (s *DeleteJDBCDataSourceRequest) SetRegionId(v string) *DeleteJDBCDataSourceRequest {
	s.RegionId = &v
	return s
}

type DeleteJDBCDataSourceResponseBody struct {
	// Request ID.
	//
	// example:
	//
	// B4CAF581-2AC7-41AD-8940-D56DF7AADF5B
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteJDBCDataSourceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteJDBCDataSourceResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteJDBCDataSourceResponseBody) SetRequestId(v string) *DeleteJDBCDataSourceResponseBody {
	s.RequestId = &v
	return s
}

type DeleteJDBCDataSourceResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteJDBCDataSourceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteJDBCDataSourceResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteJDBCDataSourceResponse) GoString() string {
	return s.String()
}

func (s *DeleteJDBCDataSourceResponse) SetHeaders(v map[string]*string) *DeleteJDBCDataSourceResponse {
	s.Headers = v
	return s
}

func (s *DeleteJDBCDataSourceResponse) SetStatusCode(v int32) *DeleteJDBCDataSourceResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteJDBCDataSourceResponse) SetBody(v *DeleteJDBCDataSourceResponseBody) *DeleteJDBCDataSourceResponse {
	s.Body = v
	return s
}

type DeleteNamespaceRequest struct {
	// The instance ID.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The name of the manager account that has the rds_superuser permission.
	//
	// >  You can create an account on the Account Management page of the AnalyticDB for PostgreSQL console or by calling the [CreateAccount](https://help.aliyun.com/document_detail/2361789.html) operation.
	//
	// This parameter is required.
	//
	// example:
	//
	// testaccount
	ManagerAccount *string `json:"ManagerAccount,omitempty" xml:"ManagerAccount,omitempty"`
	// The password of the manager account.
	//
	// This parameter is required.
	//
	// example:
	//
	// testpassword
	ManagerAccountPassword *string `json:"ManagerAccountPassword,omitempty" xml:"ManagerAccountPassword,omitempty"`
	// The name of the namespace.
	//
	// >  You can call the [ListNamespaces](https://help.aliyun.com/document_detail/2401502.html) operation to query a list of namespaces.
	//
	// This parameter is required.
	//
	// example:
	//
	// mynamespace
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	OwnerId   *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The region ID of the instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the workspace that consists of multiple AnalyticDB for PostgreSQL instances. You must specify one of the WorkspaceId and DBInstanceId parameters. If you specify both parameters, the WorkspaceId parameter takes effect.
	//
	// example:
	//
	// gp-ws-*****
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s DeleteNamespaceRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteNamespaceRequest) GoString() string {
	return s.String()
}

func (s *DeleteNamespaceRequest) SetDBInstanceId(v string) *DeleteNamespaceRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DeleteNamespaceRequest) SetManagerAccount(v string) *DeleteNamespaceRequest {
	s.ManagerAccount = &v
	return s
}

func (s *DeleteNamespaceRequest) SetManagerAccountPassword(v string) *DeleteNamespaceRequest {
	s.ManagerAccountPassword = &v
	return s
}

func (s *DeleteNamespaceRequest) SetNamespace(v string) *DeleteNamespaceRequest {
	s.Namespace = &v
	return s
}

func (s *DeleteNamespaceRequest) SetOwnerId(v int64) *DeleteNamespaceRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteNamespaceRequest) SetRegionId(v string) *DeleteNamespaceRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteNamespaceRequest) SetWorkspaceId(v string) *DeleteNamespaceRequest {
	s.WorkspaceId = &v
	return s
}

type DeleteNamespaceResponseBody struct {
	// The returned message.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **success**
	//
	// 	- **fail**
	//
	// example:
	//
	// success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DeleteNamespaceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteNamespaceResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteNamespaceResponseBody) SetMessage(v string) *DeleteNamespaceResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteNamespaceResponseBody) SetRequestId(v string) *DeleteNamespaceResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteNamespaceResponseBody) SetStatus(v string) *DeleteNamespaceResponseBody {
	s.Status = &v
	return s
}

type DeleteNamespaceResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteNamespaceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteNamespaceResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteNamespaceResponse) GoString() string {
	return s.String()
}

func (s *DeleteNamespaceResponse) SetHeaders(v map[string]*string) *DeleteNamespaceResponse {
	s.Headers = v
	return s
}

func (s *DeleteNamespaceResponse) SetStatusCode(v int32) *DeleteNamespaceResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteNamespaceResponse) SetBody(v *DeleteNamespaceResponseBody) *DeleteNamespaceResponse {
	s.Body = v
	return s
}

type DeleteRemoteADBDataSourceRequest struct {
	// The service ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	DataSourceId *string `json:"DataSourceId,omitempty" xml:"DataSourceId,omitempty"`
	// The ID of the instance that uses the data provided by another instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-test
	LocalDBInstanceId *string `json:"LocalDBInstanceId,omitempty" xml:"LocalDBInstanceId,omitempty"`
	OwnerId           *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s DeleteRemoteADBDataSourceRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteRemoteADBDataSourceRequest) GoString() string {
	return s.String()
}

func (s *DeleteRemoteADBDataSourceRequest) SetDataSourceId(v string) *DeleteRemoteADBDataSourceRequest {
	s.DataSourceId = &v
	return s
}

func (s *DeleteRemoteADBDataSourceRequest) SetLocalDBInstanceId(v string) *DeleteRemoteADBDataSourceRequest {
	s.LocalDBInstanceId = &v
	return s
}

func (s *DeleteRemoteADBDataSourceRequest) SetOwnerId(v int64) *DeleteRemoteADBDataSourceRequest {
	s.OwnerId = &v
	return s
}

type DeleteRemoteADBDataSourceResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// e9d60eb1-e90d-4bc6-a470-c8b767460858
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The job ID.
	//
	// example:
	//
	// 90000
	TaskId *int32 `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s DeleteRemoteADBDataSourceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteRemoteADBDataSourceResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteRemoteADBDataSourceResponseBody) SetRequestId(v string) *DeleteRemoteADBDataSourceResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteRemoteADBDataSourceResponseBody) SetTaskId(v int32) *DeleteRemoteADBDataSourceResponseBody {
	s.TaskId = &v
	return s
}

type DeleteRemoteADBDataSourceResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteRemoteADBDataSourceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteRemoteADBDataSourceResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteRemoteADBDataSourceResponse) GoString() string {
	return s.String()
}

func (s *DeleteRemoteADBDataSourceResponse) SetHeaders(v map[string]*string) *DeleteRemoteADBDataSourceResponse {
	s.Headers = v
	return s
}

func (s *DeleteRemoteADBDataSourceResponse) SetStatusCode(v int32) *DeleteRemoteADBDataSourceResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteRemoteADBDataSourceResponse) SetBody(v *DeleteRemoteADBDataSourceResponseBody) *DeleteRemoteADBDataSourceResponse {
	s.Body = v
	return s
}

type DeleteSecretRequest struct {
	// The instance ID. You can call the DescribeDBInstances operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// >
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The region ID of the instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-beijing
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The Alibaba Cloud Resource Name (ARN) of the access credential for the created Data API account. Format: `acs:gpdb:{{region}}:{{accountId}}:secret/{{secretName}}-{{32 digits random string}`.
	//
	// >  You must specify one of the SecretArn and SecretName parameters.
	//
	// example:
	//
	// acs:gpdb:cn-beijing:1033**:secret/testsecret-eG2AQGRIwQ0zFp4VA7mYL3uiCXTfDQbQ
	SecretArn *string `json:"SecretArn,omitempty" xml:"SecretArn,omitempty"`
	// The name of the access credential.
	//
	// >  You must specify one of the SecretArn and SecretName parameters.
	//
	// example:
	//
	// testsecret
	SecretName  *string `json:"SecretName,omitempty" xml:"SecretName,omitempty"`
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s DeleteSecretRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteSecretRequest) GoString() string {
	return s.String()
}

func (s *DeleteSecretRequest) SetDBInstanceId(v string) *DeleteSecretRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DeleteSecretRequest) SetOwnerId(v int64) *DeleteSecretRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteSecretRequest) SetRegionId(v string) *DeleteSecretRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteSecretRequest) SetSecretArn(v string) *DeleteSecretRequest {
	s.SecretArn = &v
	return s
}

func (s *DeleteSecretRequest) SetSecretName(v string) *DeleteSecretRequest {
	s.SecretName = &v
	return s
}

func (s *DeleteSecretRequest) SetWorkspaceId(v string) *DeleteSecretRequest {
	s.WorkspaceId = &v
	return s
}

type DeleteSecretResponseBody struct {
	// The returned message.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The ARN of the access credential for the created Data API account. Format: `acs:gpdb:{{region}}:{{accountId}}:secret/{{secretName}}-{{32 digits random string}`.
	//
	// example:
	//
	// acs:gpdb:cn-beijing:1033**:secret/testsecret-eG2AQGRIwQ0zFp4VA7mYL3uiCXTfDQbQ
	SecretArn *string `json:"SecretArn,omitempty" xml:"SecretArn,omitempty"`
	// The status of the operation. Valid values:
	//
	// 	- **fail**
	//
	// 	- **success**
	//
	// example:
	//
	// success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DeleteSecretResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteSecretResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteSecretResponseBody) SetMessage(v string) *DeleteSecretResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteSecretResponseBody) SetRequestId(v string) *DeleteSecretResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteSecretResponseBody) SetSecretArn(v string) *DeleteSecretResponseBody {
	s.SecretArn = &v
	return s
}

func (s *DeleteSecretResponseBody) SetStatus(v string) *DeleteSecretResponseBody {
	s.Status = &v
	return s
}

type DeleteSecretResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteSecretResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteSecretResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteSecretResponse) GoString() string {
	return s.String()
}

func (s *DeleteSecretResponse) SetHeaders(v map[string]*string) *DeleteSecretResponse {
	s.Headers = v
	return s
}

func (s *DeleteSecretResponse) SetStatusCode(v int32) *DeleteSecretResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteSecretResponse) SetBody(v *DeleteSecretResponseBody) *DeleteSecretResponse {
	s.Body = v
	return s
}

type DeleteStreamingDataServiceRequest struct {
	// The instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp10g78o9807yv9h3
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// example:
	//
	// cn-beijing
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The service ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	ServiceId *string `json:"ServiceId,omitempty" xml:"ServiceId,omitempty"`
}

func (s DeleteStreamingDataServiceRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteStreamingDataServiceRequest) GoString() string {
	return s.String()
}

func (s *DeleteStreamingDataServiceRequest) SetDBInstanceId(v string) *DeleteStreamingDataServiceRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DeleteStreamingDataServiceRequest) SetRegionId(v string) *DeleteStreamingDataServiceRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteStreamingDataServiceRequest) SetServiceId(v string) *DeleteStreamingDataServiceRequest {
	s.ServiceId = &v
	return s
}

type DeleteStreamingDataServiceResponseBody struct {
	// The error message returned if the operation fails.
	//
	// This parameter is returned only when the return value of **Status*	- is **false**.
	//
	// example:
	//
	// This external service cannot be deleted because it is still used by other data source.
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// The request ID.
	//
	// example:
	//
	// B4CAF581-2AC7-41AD-8940-D56DF7AADF5B
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The status of the operation. Valid values:
	//
	// 	- **false**: The operation fails.
	//
	// 	- **true**: The operation is successful.
	//
	// example:
	//
	// true
	Status *bool `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DeleteStreamingDataServiceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteStreamingDataServiceResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteStreamingDataServiceResponseBody) SetErrorMessage(v string) *DeleteStreamingDataServiceResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *DeleteStreamingDataServiceResponseBody) SetRequestId(v string) *DeleteStreamingDataServiceResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteStreamingDataServiceResponseBody) SetStatus(v bool) *DeleteStreamingDataServiceResponseBody {
	s.Status = &v
	return s
}

type DeleteStreamingDataServiceResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteStreamingDataServiceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteStreamingDataServiceResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteStreamingDataServiceResponse) GoString() string {
	return s.String()
}

func (s *DeleteStreamingDataServiceResponse) SetHeaders(v map[string]*string) *DeleteStreamingDataServiceResponse {
	s.Headers = v
	return s
}

func (s *DeleteStreamingDataServiceResponse) SetStatusCode(v int32) *DeleteStreamingDataServiceResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteStreamingDataServiceResponse) SetBody(v *DeleteStreamingDataServiceResponseBody) *DeleteStreamingDataServiceResponse {
	s.Body = v
	return s
}

type DeleteStreamingDataSourceRequest struct {
	// The instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp10g78o9807yv9h3
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The data source ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	DataSourceId *int32 `json:"DataSourceId,omitempty" xml:"DataSourceId,omitempty"`
	// example:
	//
	// cn-beijing
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DeleteStreamingDataSourceRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteStreamingDataSourceRequest) GoString() string {
	return s.String()
}

func (s *DeleteStreamingDataSourceRequest) SetDBInstanceId(v string) *DeleteStreamingDataSourceRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DeleteStreamingDataSourceRequest) SetDataSourceId(v int32) *DeleteStreamingDataSourceRequest {
	s.DataSourceId = &v
	return s
}

func (s *DeleteStreamingDataSourceRequest) SetRegionId(v string) *DeleteStreamingDataSourceRequest {
	s.RegionId = &v
	return s
}

type DeleteStreamingDataSourceResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// B4CAF581-2AC7-41AD-8940-D56DF7AADF5B
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteStreamingDataSourceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteStreamingDataSourceResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteStreamingDataSourceResponseBody) SetRequestId(v string) *DeleteStreamingDataSourceResponseBody {
	s.RequestId = &v
	return s
}

type DeleteStreamingDataSourceResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteStreamingDataSourceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteStreamingDataSourceResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteStreamingDataSourceResponse) GoString() string {
	return s.String()
}

func (s *DeleteStreamingDataSourceResponse) SetHeaders(v map[string]*string) *DeleteStreamingDataSourceResponse {
	s.Headers = v
	return s
}

func (s *DeleteStreamingDataSourceResponse) SetStatusCode(v int32) *DeleteStreamingDataSourceResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteStreamingDataSourceResponse) SetBody(v *DeleteStreamingDataSourceResponseBody) *DeleteStreamingDataSourceResponse {
	s.Body = v
	return s
}

type DeleteStreamingJobRequest struct {
	// The instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp10g78o9807yv9h3
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The job ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	JobId *int32 `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// cn-beijing
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DeleteStreamingJobRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteStreamingJobRequest) GoString() string {
	return s.String()
}

func (s *DeleteStreamingJobRequest) SetDBInstanceId(v string) *DeleteStreamingJobRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DeleteStreamingJobRequest) SetJobId(v int32) *DeleteStreamingJobRequest {
	s.JobId = &v
	return s
}

func (s *DeleteStreamingJobRequest) SetRegionId(v string) *DeleteStreamingJobRequest {
	s.RegionId = &v
	return s
}

type DeleteStreamingJobResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// B4CAF581-2AC7-41AD-8940-D56DF7AADF5B
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteStreamingJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteStreamingJobResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteStreamingJobResponseBody) SetRequestId(v string) *DeleteStreamingJobResponseBody {
	s.RequestId = &v
	return s
}

type DeleteStreamingJobResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteStreamingJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteStreamingJobResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteStreamingJobResponse) GoString() string {
	return s.String()
}

func (s *DeleteStreamingJobResponse) SetHeaders(v map[string]*string) *DeleteStreamingJobResponse {
	s.Headers = v
	return s
}

func (s *DeleteStreamingJobResponse) SetStatusCode(v int32) *DeleteStreamingJobResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteStreamingJobResponse) SetBody(v *DeleteStreamingJobResponseBody) *DeleteStreamingJobResponse {
	s.Body = v
	return s
}

type DeleteVectorIndexRequest struct {
	// The name of the collection.
	//
	// >  You can call the [ListCollections](https://help.aliyun.com/document_detail/2401503.html) operation to query a list of collections.
	//
	// This parameter is required.
	//
	// example:
	//
	// document
	Collection *string `json:"Collection,omitempty" xml:"Collection,omitempty"`
	// The instance ID.
	//
	// > You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The name of the manager account that has the rds_superuser permission.
	//
	// >  You can create an account on the **Account Management*	- page of the AnalyticDB for PostgreSQL console or by calling the [CreateAccount](https://help.aliyun.com/document_detail/2361789.html) operation.
	//
	// This parameter is required.
	//
	// example:
	//
	// testaccount
	ManagerAccount *string `json:"ManagerAccount,omitempty" xml:"ManagerAccount,omitempty"`
	// The password of the manager account.
	//
	// This parameter is required.
	//
	// example:
	//
	// testpassword
	ManagerAccountPassword *string `json:"ManagerAccountPassword,omitempty" xml:"ManagerAccountPassword,omitempty"`
	// The name of the namespace. Default value: public.
	//
	// >  You can call the [ListNamespaces](https://help.aliyun.com/document_detail/2401502.html) operation to query a list of namespaces.
	//
	// example:
	//
	// mynamespace
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	OwnerId   *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The region ID of the instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Type     *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DeleteVectorIndexRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteVectorIndexRequest) GoString() string {
	return s.String()
}

func (s *DeleteVectorIndexRequest) SetCollection(v string) *DeleteVectorIndexRequest {
	s.Collection = &v
	return s
}

func (s *DeleteVectorIndexRequest) SetDBInstanceId(v string) *DeleteVectorIndexRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DeleteVectorIndexRequest) SetManagerAccount(v string) *DeleteVectorIndexRequest {
	s.ManagerAccount = &v
	return s
}

func (s *DeleteVectorIndexRequest) SetManagerAccountPassword(v string) *DeleteVectorIndexRequest {
	s.ManagerAccountPassword = &v
	return s
}

func (s *DeleteVectorIndexRequest) SetNamespace(v string) *DeleteVectorIndexRequest {
	s.Namespace = &v
	return s
}

func (s *DeleteVectorIndexRequest) SetOwnerId(v int64) *DeleteVectorIndexRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteVectorIndexRequest) SetRegionId(v string) *DeleteVectorIndexRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteVectorIndexRequest) SetType(v string) *DeleteVectorIndexRequest {
	s.Type = &v
	return s
}

type DeleteVectorIndexResponseBody struct {
	// The returned message.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **success**
	//
	// 	- **fail**
	//
	// example:
	//
	// success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DeleteVectorIndexResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteVectorIndexResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteVectorIndexResponseBody) SetMessage(v string) *DeleteVectorIndexResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteVectorIndexResponseBody) SetRequestId(v string) *DeleteVectorIndexResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteVectorIndexResponseBody) SetStatus(v string) *DeleteVectorIndexResponseBody {
	s.Status = &v
	return s
}

type DeleteVectorIndexResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteVectorIndexResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteVectorIndexResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteVectorIndexResponse) GoString() string {
	return s.String()
}

func (s *DeleteVectorIndexResponse) SetHeaders(v map[string]*string) *DeleteVectorIndexResponse {
	s.Headers = v
	return s
}

func (s *DeleteVectorIndexResponse) SetStatusCode(v int32) *DeleteVectorIndexResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteVectorIndexResponse) SetBody(v *DeleteVectorIndexResponseBody) *DeleteVectorIndexResponse {
	s.Body = v
	return s
}

type DescribeAccountsRequest struct {
	// The name of the database account.
	//
	// example:
	//
	// testuser
	AccountName *string `json:"AccountName,omitempty" xml:"AccountName,omitempty"`
	// The type of the database account that you want to query. Valid values: Super, Normal, and All. Default value: Super. If you set this parameter to Super, the information about the privileged account is returned. If you set this parameter to Normal, the information about all standard accounts is returned. If you set this parameter to All, the information about all database accounts is returned.
	//
	// example:
	//
	// Super
	AccountType *string `json:"AccountType,omitempty" xml:"AccountType,omitempty"`
	// The instance ID.
	//
	// > You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp***************
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
}

func (s DescribeAccountsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAccountsRequest) GoString() string {
	return s.String()
}

func (s *DescribeAccountsRequest) SetAccountName(v string) *DescribeAccountsRequest {
	s.AccountName = &v
	return s
}

func (s *DescribeAccountsRequest) SetAccountType(v string) *DescribeAccountsRequest {
	s.AccountType = &v
	return s
}

func (s *DescribeAccountsRequest) SetDBInstanceId(v string) *DescribeAccountsRequest {
	s.DBInstanceId = &v
	return s
}

type DescribeAccountsResponseBody struct {
	// The queried database accounts.
	Accounts *DescribeAccountsResponseBodyAccounts `json:"Accounts,omitempty" xml:"Accounts,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// 7565770E-7C45-462D-BA4A-8A5396F2CAD1
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeAccountsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAccountsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAccountsResponseBody) SetAccounts(v *DescribeAccountsResponseBodyAccounts) *DescribeAccountsResponseBody {
	s.Accounts = v
	return s
}

func (s *DescribeAccountsResponseBody) SetRequestId(v string) *DescribeAccountsResponseBody {
	s.RequestId = &v
	return s
}

type DescribeAccountsResponseBodyAccounts struct {
	DBInstanceAccount []*DescribeAccountsResponseBodyAccountsDBInstanceAccount `json:"DBInstanceAccount,omitempty" xml:"DBInstanceAccount,omitempty" type:"Repeated"`
}

func (s DescribeAccountsResponseBodyAccounts) String() string {
	return tea.Prettify(s)
}

func (s DescribeAccountsResponseBodyAccounts) GoString() string {
	return s.String()
}

func (s *DescribeAccountsResponseBodyAccounts) SetDBInstanceAccount(v []*DescribeAccountsResponseBodyAccountsDBInstanceAccount) *DescribeAccountsResponseBodyAccounts {
	s.DBInstanceAccount = v
	return s
}

type DescribeAccountsResponseBodyAccountsDBInstanceAccount struct {
	// The description of the account.
	//
	// example:
	//
	// testuser
	AccountDescription *string `json:"AccountDescription,omitempty" xml:"AccountDescription,omitempty"`
	// The name of the account.
	//
	// example:
	//
	// testuser
	AccountName *string `json:"AccountName,omitempty" xml:"AccountName,omitempty"`
	// The state of the account.
	//
	// 	- **0**: The account is being created.
	//
	// 	- **1**: The account is in use.
	//
	// 	- **3**: The account is being deleted.
	//
	// example:
	//
	// 1
	AccountStatus *string `json:"AccountStatus,omitempty" xml:"AccountStatus,omitempty"`
	// The type of the database account. Valid values: Super and Normal. Super indicates a privileged account and Normal indicates a standard account.
	//
	// example:
	//
	// Super
	AccountType *string `json:"AccountType,omitempty" xml:"AccountType,omitempty"`
	// The ID of the instance.
	//
	// example:
	//
	// gp-bp***************
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
}

func (s DescribeAccountsResponseBodyAccountsDBInstanceAccount) String() string {
	return tea.Prettify(s)
}

func (s DescribeAccountsResponseBodyAccountsDBInstanceAccount) GoString() string {
	return s.String()
}

func (s *DescribeAccountsResponseBodyAccountsDBInstanceAccount) SetAccountDescription(v string) *DescribeAccountsResponseBodyAccountsDBInstanceAccount {
	s.AccountDescription = &v
	return s
}

func (s *DescribeAccountsResponseBodyAccountsDBInstanceAccount) SetAccountName(v string) *DescribeAccountsResponseBodyAccountsDBInstanceAccount {
	s.AccountName = &v
	return s
}

func (s *DescribeAccountsResponseBodyAccountsDBInstanceAccount) SetAccountStatus(v string) *DescribeAccountsResponseBodyAccountsDBInstanceAccount {
	s.AccountStatus = &v
	return s
}

func (s *DescribeAccountsResponseBodyAccountsDBInstanceAccount) SetAccountType(v string) *DescribeAccountsResponseBodyAccountsDBInstanceAccount {
	s.AccountType = &v
	return s
}

func (s *DescribeAccountsResponseBodyAccountsDBInstanceAccount) SetDBInstanceId(v string) *DescribeAccountsResponseBodyAccountsDBInstanceAccount {
	s.DBInstanceId = &v
	return s
}

type DescribeAccountsResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAccountsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAccountsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAccountsResponse) GoString() string {
	return s.String()
}

func (s *DescribeAccountsResponse) SetHeaders(v map[string]*string) *DescribeAccountsResponse {
	s.Headers = v
	return s
}

func (s *DescribeAccountsResponse) SetStatusCode(v int32) *DescribeAccountsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAccountsResponse) SetBody(v *DescribeAccountsResponseBody) *DescribeAccountsResponse {
	s.Body = v
	return s
}

type DescribeActiveSQLRecordsRequest struct {
	// The instance ID.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The name of the database.
	//
	// example:
	//
	// testdb
	Database *string `json:"Database,omitempty" xml:"Database,omitempty"`
	// The end of the time range to query. Specify the time in the yyyy-MM-ddTHH:mm:ssZ format. The end time must be later than the start time.
	//
	// example:
	//
	// 2022-05-07T07:59Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The keyword used to filter queries.
	//
	// example:
	//
	// SELECT
	Keyword *string `json:"Keyword,omitempty" xml:"Keyword,omitempty"`
	// The maxmum amount of time consumed by traces. Unit: milliseconds.
	//
	// example:
	//
	// 600
	MaxDuration *string `json:"MaxDuration,omitempty" xml:"MaxDuration,omitempty"`
	// The minimum amount of time consumed by traces. Unit: milliseconds.
	//
	// example:
	//
	// 300
	MinDuration *string `json:"MinDuration,omitempty" xml:"MinDuration,omitempty"`
	// The field used to sort lock diagnostics records and the sorting order.
	//
	// Default value: `{"Field":"StartTime","Type":"Desc"}`, which indicates that lock diagnostics records are sorted by the start time in descending order. No other values are supported.
	//
	// example:
	//
	// {"Field":"StartTime","Type":"Desc"}
	Order *string `json:"Order,omitempty" xml:"Order,omitempty"`
	// The beginning of the time range to query. Specify the time in the yyyy-MM-ddTHH:mmZ format. The time must be in UTC.
	//
	// example:
	//
	// 2021-08-03T09:30Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The name of the database account.
	//
	// example:
	//
	// testuser
	User *string `json:"User,omitempty" xml:"User,omitempty"`
}

func (s DescribeActiveSQLRecordsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeActiveSQLRecordsRequest) GoString() string {
	return s.String()
}

func (s *DescribeActiveSQLRecordsRequest) SetDBInstanceId(v string) *DescribeActiveSQLRecordsRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeActiveSQLRecordsRequest) SetDatabase(v string) *DescribeActiveSQLRecordsRequest {
	s.Database = &v
	return s
}

func (s *DescribeActiveSQLRecordsRequest) SetEndTime(v string) *DescribeActiveSQLRecordsRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeActiveSQLRecordsRequest) SetKeyword(v string) *DescribeActiveSQLRecordsRequest {
	s.Keyword = &v
	return s
}

func (s *DescribeActiveSQLRecordsRequest) SetMaxDuration(v string) *DescribeActiveSQLRecordsRequest {
	s.MaxDuration = &v
	return s
}

func (s *DescribeActiveSQLRecordsRequest) SetMinDuration(v string) *DescribeActiveSQLRecordsRequest {
	s.MinDuration = &v
	return s
}

func (s *DescribeActiveSQLRecordsRequest) SetOrder(v string) *DescribeActiveSQLRecordsRequest {
	s.Order = &v
	return s
}

func (s *DescribeActiveSQLRecordsRequest) SetStartTime(v string) *DescribeActiveSQLRecordsRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeActiveSQLRecordsRequest) SetUser(v string) *DescribeActiveSQLRecordsRequest {
	s.User = &v
	return s
}

type DescribeActiveSQLRecordsResponseBody struct {
	// The instance ID.
	//
	// example:
	//
	// gp-bp***************
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The queried SQL records.
	Queries []*DescribeActiveSQLRecordsResponseBodyQueries `json:"Queries,omitempty" xml:"Queries,omitempty" type:"Repeated"`
	// The request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeActiveSQLRecordsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeActiveSQLRecordsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeActiveSQLRecordsResponseBody) SetDBInstanceId(v string) *DescribeActiveSQLRecordsResponseBody {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeActiveSQLRecordsResponseBody) SetQueries(v []*DescribeActiveSQLRecordsResponseBodyQueries) *DescribeActiveSQLRecordsResponseBody {
	s.Queries = v
	return s
}

func (s *DescribeActiveSQLRecordsResponseBody) SetRequestId(v string) *DescribeActiveSQLRecordsResponseBody {
	s.RequestId = &v
	return s
}

type DescribeActiveSQLRecordsResponseBodyQueries struct {
	// The IP address of the client.
	//
	// example:
	//
	// 0.0.0.0
	ClientAddr *string `json:"ClientAddr,omitempty" xml:"ClientAddr,omitempty"`
	// The name of the database.
	//
	// example:
	//
	// xg_analyse
	Database *string `json:"Database,omitempty" xml:"Database,omitempty"`
	// The progress ID.
	//
	// example:
	//
	// 6164
	PID *string `json:"PID,omitempty" xml:"PID,omitempty"`
	// The SQL statement of the query.
	//
	// example:
	//
	// Select 	- from t1,t2 where t1.id=t2.id;
	Query *string `json:"Query,omitempty" xml:"Query,omitempty"`
	// The execution duration of the query. Unit: seconds.
	//
	// example:
	//
	// 60s
	QueryDuration *string `json:"QueryDuration,omitempty" xml:"QueryDuration,omitempty"`
	// The start time of the query.
	//
	// example:
	//
	// 2022-05-07T06:59Z
	QueryStart *string `json:"QueryStart,omitempty" xml:"QueryStart,omitempty"`
	// The session ID.
	//
	// example:
	//
	// 6612
	SessionID *string `json:"SessionID,omitempty" xml:"SessionID,omitempty"`
	// Indicates whether the SQL statement is truncated. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// false
	SqlTruncated *string `json:"SqlTruncated,omitempty" xml:"SqlTruncated,omitempty"`
	// The threshold that is used to truncate the SQL statement.
	//
	// example:
	//
	// 1024
	SqlTruncatedThreshold *string `json:"SqlTruncatedThreshold,omitempty" xml:"SqlTruncatedThreshold,omitempty"`
	// The status of the asynchronous request. Valid values:
	//
	// 	- **running**
	//
	// 	- **block**
	//
	// example:
	//
	// running
	State *string `json:"State,omitempty" xml:"State,omitempty"`
	// The name of the database account.
	//
	// example:
	//
	// testuser
	User *string `json:"User,omitempty" xml:"User,omitempty"`
}

func (s DescribeActiveSQLRecordsResponseBodyQueries) String() string {
	return tea.Prettify(s)
}

func (s DescribeActiveSQLRecordsResponseBodyQueries) GoString() string {
	return s.String()
}

func (s *DescribeActiveSQLRecordsResponseBodyQueries) SetClientAddr(v string) *DescribeActiveSQLRecordsResponseBodyQueries {
	s.ClientAddr = &v
	return s
}

func (s *DescribeActiveSQLRecordsResponseBodyQueries) SetDatabase(v string) *DescribeActiveSQLRecordsResponseBodyQueries {
	s.Database = &v
	return s
}

func (s *DescribeActiveSQLRecordsResponseBodyQueries) SetPID(v string) *DescribeActiveSQLRecordsResponseBodyQueries {
	s.PID = &v
	return s
}

func (s *DescribeActiveSQLRecordsResponseBodyQueries) SetQuery(v string) *DescribeActiveSQLRecordsResponseBodyQueries {
	s.Query = &v
	return s
}

func (s *DescribeActiveSQLRecordsResponseBodyQueries) SetQueryDuration(v string) *DescribeActiveSQLRecordsResponseBodyQueries {
	s.QueryDuration = &v
	return s
}

func (s *DescribeActiveSQLRecordsResponseBodyQueries) SetQueryStart(v string) *DescribeActiveSQLRecordsResponseBodyQueries {
	s.QueryStart = &v
	return s
}

func (s *DescribeActiveSQLRecordsResponseBodyQueries) SetSessionID(v string) *DescribeActiveSQLRecordsResponseBodyQueries {
	s.SessionID = &v
	return s
}

func (s *DescribeActiveSQLRecordsResponseBodyQueries) SetSqlTruncated(v string) *DescribeActiveSQLRecordsResponseBodyQueries {
	s.SqlTruncated = &v
	return s
}

func (s *DescribeActiveSQLRecordsResponseBodyQueries) SetSqlTruncatedThreshold(v string) *DescribeActiveSQLRecordsResponseBodyQueries {
	s.SqlTruncatedThreshold = &v
	return s
}

func (s *DescribeActiveSQLRecordsResponseBodyQueries) SetState(v string) *DescribeActiveSQLRecordsResponseBodyQueries {
	s.State = &v
	return s
}

func (s *DescribeActiveSQLRecordsResponseBodyQueries) SetUser(v string) *DescribeActiveSQLRecordsResponseBodyQueries {
	s.User = &v
	return s
}

type DescribeActiveSQLRecordsResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeActiveSQLRecordsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeActiveSQLRecordsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeActiveSQLRecordsResponse) GoString() string {
	return s.String()
}

func (s *DescribeActiveSQLRecordsResponse) SetHeaders(v map[string]*string) *DescribeActiveSQLRecordsResponse {
	s.Headers = v
	return s
}

func (s *DescribeActiveSQLRecordsResponse) SetStatusCode(v int32) *DescribeActiveSQLRecordsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeActiveSQLRecordsResponse) SetBody(v *DescribeActiveSQLRecordsResponseBody) *DescribeActiveSQLRecordsResponse {
	s.Body = v
	return s
}

type DescribeAvailableResourcesRequest struct {
	// The billing method. Valid values:
	//
	// 	- **Postpaid**: pay-as-you-go.
	//
	// 	- **Prepaid**: subscription.
	//
	// example:
	//
	// PostPaid
	ChargeType *string `json:"ChargeType,omitempty" xml:"ChargeType,omitempty"`
	// The region ID.
	//
	// > You can call the [DescribeRegions](https://help.aliyun.com/document_detail/86912.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// The zone ID.
	//
	// > You can call the [DescribeRegions](https://help.aliyun.com/document_detail/86912.html) operation to query the most recent zone list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou-h
	ZoneId *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s DescribeAvailableResourcesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableResourcesRequest) GoString() string {
	return s.String()
}

func (s *DescribeAvailableResourcesRequest) SetChargeType(v string) *DescribeAvailableResourcesRequest {
	s.ChargeType = &v
	return s
}

func (s *DescribeAvailableResourcesRequest) SetRegion(v string) *DescribeAvailableResourcesRequest {
	s.Region = &v
	return s
}

func (s *DescribeAvailableResourcesRequest) SetZoneId(v string) *DescribeAvailableResourcesRequest {
	s.ZoneId = &v
	return s
}

type DescribeAvailableResourcesResponseBody struct {
	// The region ID.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 61DC563C-F8E4-593A-8D27-CE**********
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The zone ID.
	Resources []*DescribeAvailableResourcesResponseBodyResources `json:"Resources,omitempty" xml:"Resources,omitempty" type:"Repeated"`
}

func (s DescribeAvailableResourcesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableResourcesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAvailableResourcesResponseBody) SetRegionId(v string) *DescribeAvailableResourcesResponseBody {
	s.RegionId = &v
	return s
}

func (s *DescribeAvailableResourcesResponseBody) SetRequestId(v string) *DescribeAvailableResourcesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAvailableResourcesResponseBody) SetResources(v []*DescribeAvailableResourcesResponseBodyResources) *DescribeAvailableResourcesResponseBody {
	s.Resources = v
	return s
}

type DescribeAvailableResourcesResponseBodyResources struct {
	// The available engine version and specifications.
	SupportedEngines []*DescribeAvailableResourcesResponseBodyResourcesSupportedEngines `json:"SupportedEngines,omitempty" xml:"SupportedEngines,omitempty" type:"Repeated"`
	// The ID of the zone.
	//
	// example:
	//
	// cn-hangzhou-h
	ZoneId *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s DescribeAvailableResourcesResponseBodyResources) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableResourcesResponseBodyResources) GoString() string {
	return s.String()
}

func (s *DescribeAvailableResourcesResponseBodyResources) SetSupportedEngines(v []*DescribeAvailableResourcesResponseBodyResourcesSupportedEngines) *DescribeAvailableResourcesResponseBodyResources {
	s.SupportedEngines = v
	return s
}

func (s *DescribeAvailableResourcesResponseBodyResources) SetZoneId(v string) *DescribeAvailableResourcesResponseBodyResources {
	s.ZoneId = &v
	return s
}

type DescribeAvailableResourcesResponseBodyResourcesSupportedEngines struct {
	// The instance resource type. Valid values:
	//
	// 	- **ecs**: elastic storage mode
	//
	// 	- **serverless**: Serverless mode
	//
	// example:
	//
	// ecs
	Mode *string `json:"Mode,omitempty" xml:"Mode,omitempty"`
	// The available engine version.
	//
	// example:
	//
	// 6.0
	SupportedEngineVersion *string `json:"SupportedEngineVersion,omitempty" xml:"SupportedEngineVersion,omitempty"`
	// The available specifications.
	SupportedInstanceClasses []*DescribeAvailableResourcesResponseBodyResourcesSupportedEnginesSupportedInstanceClasses `json:"SupportedInstanceClasses,omitempty" xml:"SupportedInstanceClasses,omitempty" type:"Repeated"`
}

func (s DescribeAvailableResourcesResponseBodyResourcesSupportedEngines) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableResourcesResponseBodyResourcesSupportedEngines) GoString() string {
	return s.String()
}

func (s *DescribeAvailableResourcesResponseBodyResourcesSupportedEngines) SetMode(v string) *DescribeAvailableResourcesResponseBodyResourcesSupportedEngines {
	s.Mode = &v
	return s
}

func (s *DescribeAvailableResourcesResponseBodyResourcesSupportedEngines) SetSupportedEngineVersion(v string) *DescribeAvailableResourcesResponseBodyResourcesSupportedEngines {
	s.SupportedEngineVersion = &v
	return s
}

func (s *DescribeAvailableResourcesResponseBodyResourcesSupportedEngines) SetSupportedInstanceClasses(v []*DescribeAvailableResourcesResponseBodyResourcesSupportedEnginesSupportedInstanceClasses) *DescribeAvailableResourcesResponseBodyResourcesSupportedEngines {
	s.SupportedInstanceClasses = v
	return s
}

type DescribeAvailableResourcesResponseBodyResourcesSupportedEnginesSupportedInstanceClasses struct {
	// The instance edition. Valid values:
	//
	// 	- **HighAvailability**: High-availability Edition
	//
	// 	- **Basic**: Basic Edition
	//
	// example:
	//
	// HighAvailability
	Category *string `json:"Category,omitempty" xml:"Category,omitempty"`
	// The description of compute node specifications.
	//
	// example:
	//
	// 2C16G
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The specifications of each compute node.
	//
	// example:
	//
	// 2C16G
	DisplayClass *string `json:"DisplayClass,omitempty" xml:"DisplayClass,omitempty"`
	// The specifications of each compute node.
	//
	// example:
	//
	// 2C16G
	InstanceClass *string `json:"InstanceClass,omitempty" xml:"InstanceClass,omitempty"`
	// Details about the compute nodes.
	NodeCount *DescribeAvailableResourcesResponseBodyResourcesSupportedEnginesSupportedInstanceClassesNodeCount `json:"NodeCount,omitempty" xml:"NodeCount,omitempty" type:"Struct"`
	// Details about the storage capacity of compute nodes.
	StorageSize *DescribeAvailableResourcesResponseBodyResourcesSupportedEnginesSupportedInstanceClassesStorageSize `json:"StorageSize,omitempty" xml:"StorageSize,omitempty" type:"Struct"`
	// The storage type. Valid values:
	//
	// 	- **cloud_essd**: enhanced SSD (ESSD)
	//
	// 	- **cloud_efficiency**: ultra disk
	//
	// 	- **oss**: Object Storage Service (OSS)
	//
	// example:
	//
	// cloud_essd
	StorageType *string `json:"StorageType,omitempty" xml:"StorageType,omitempty"`
}

func (s DescribeAvailableResourcesResponseBodyResourcesSupportedEnginesSupportedInstanceClasses) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableResourcesResponseBodyResourcesSupportedEnginesSupportedInstanceClasses) GoString() string {
	return s.String()
}

func (s *DescribeAvailableResourcesResponseBodyResourcesSupportedEnginesSupportedInstanceClasses) SetCategory(v string) *DescribeAvailableResourcesResponseBodyResourcesSupportedEnginesSupportedInstanceClasses {
	s.Category = &v
	return s
}

func (s *DescribeAvailableResourcesResponseBodyResourcesSupportedEnginesSupportedInstanceClasses) SetDescription(v string) *DescribeAvailableResourcesResponseBodyResourcesSupportedEnginesSupportedInstanceClasses {
	s.Description = &v
	return s
}

func (s *DescribeAvailableResourcesResponseBodyResourcesSupportedEnginesSupportedInstanceClasses) SetDisplayClass(v string) *DescribeAvailableResourcesResponseBodyResourcesSupportedEnginesSupportedInstanceClasses {
	s.DisplayClass = &v
	return s
}

func (s *DescribeAvailableResourcesResponseBodyResourcesSupportedEnginesSupportedInstanceClasses) SetInstanceClass(v string) *DescribeAvailableResourcesResponseBodyResourcesSupportedEnginesSupportedInstanceClasses {
	s.InstanceClass = &v
	return s
}

func (s *DescribeAvailableResourcesResponseBodyResourcesSupportedEnginesSupportedInstanceClasses) SetNodeCount(v *DescribeAvailableResourcesResponseBodyResourcesSupportedEnginesSupportedInstanceClassesNodeCount) *DescribeAvailableResourcesResponseBodyResourcesSupportedEnginesSupportedInstanceClasses {
	s.NodeCount = v
	return s
}

func (s *DescribeAvailableResourcesResponseBodyResourcesSupportedEnginesSupportedInstanceClasses) SetStorageSize(v *DescribeAvailableResourcesResponseBodyResourcesSupportedEnginesSupportedInstanceClassesStorageSize) *DescribeAvailableResourcesResponseBodyResourcesSupportedEnginesSupportedInstanceClasses {
	s.StorageSize = v
	return s
}

func (s *DescribeAvailableResourcesResponseBodyResourcesSupportedEnginesSupportedInstanceClasses) SetStorageType(v string) *DescribeAvailableResourcesResponseBodyResourcesSupportedEnginesSupportedInstanceClasses {
	s.StorageType = &v
	return s
}

type DescribeAvailableResourcesResponseBodyResourcesSupportedEnginesSupportedInstanceClassesNodeCount struct {
	// The maximum number of compute nodes.
	//
	// example:
	//
	// 256
	MaxCount *string `json:"MaxCount,omitempty" xml:"MaxCount,omitempty"`
	// The minimum number of compute nodes.
	//
	// example:
	//
	// 4
	MinCount *string `json:"MinCount,omitempty" xml:"MinCount,omitempty"`
	// The step size for adding compute nodes.
	//
	// For example, if the value of this parameter is 4, compute nodes must be added by multiples of 4.
	//
	// example:
	//
	// 4
	Step *string `json:"Step,omitempty" xml:"Step,omitempty"`
}

func (s DescribeAvailableResourcesResponseBodyResourcesSupportedEnginesSupportedInstanceClassesNodeCount) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableResourcesResponseBodyResourcesSupportedEnginesSupportedInstanceClassesNodeCount) GoString() string {
	return s.String()
}

func (s *DescribeAvailableResourcesResponseBodyResourcesSupportedEnginesSupportedInstanceClassesNodeCount) SetMaxCount(v string) *DescribeAvailableResourcesResponseBodyResourcesSupportedEnginesSupportedInstanceClassesNodeCount {
	s.MaxCount = &v
	return s
}

func (s *DescribeAvailableResourcesResponseBodyResourcesSupportedEnginesSupportedInstanceClassesNodeCount) SetMinCount(v string) *DescribeAvailableResourcesResponseBodyResourcesSupportedEnginesSupportedInstanceClassesNodeCount {
	s.MinCount = &v
	return s
}

func (s *DescribeAvailableResourcesResponseBodyResourcesSupportedEnginesSupportedInstanceClassesNodeCount) SetStep(v string) *DescribeAvailableResourcesResponseBodyResourcesSupportedEnginesSupportedInstanceClassesNodeCount {
	s.Step = &v
	return s
}

type DescribeAvailableResourcesResponseBodyResourcesSupportedEnginesSupportedInstanceClassesStorageSize struct {
	// The maximum storage capacity of each compute node.
	//
	// example:
	//
	// 1000
	MaxCount *string `json:"MaxCount,omitempty" xml:"MaxCount,omitempty"`
	// The minimum storage capacity of each compute node.
	//
	// example:
	//
	// 50
	MinCount *string `json:"MinCount,omitempty" xml:"MinCount,omitempty"`
	// The step size for adding storage capacity for compute nodes.
	//
	// example:
	//
	// 50
	Step *string `json:"Step,omitempty" xml:"Step,omitempty"`
}

func (s DescribeAvailableResourcesResponseBodyResourcesSupportedEnginesSupportedInstanceClassesStorageSize) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableResourcesResponseBodyResourcesSupportedEnginesSupportedInstanceClassesStorageSize) GoString() string {
	return s.String()
}

func (s *DescribeAvailableResourcesResponseBodyResourcesSupportedEnginesSupportedInstanceClassesStorageSize) SetMaxCount(v string) *DescribeAvailableResourcesResponseBodyResourcesSupportedEnginesSupportedInstanceClassesStorageSize {
	s.MaxCount = &v
	return s
}

func (s *DescribeAvailableResourcesResponseBodyResourcesSupportedEnginesSupportedInstanceClassesStorageSize) SetMinCount(v string) *DescribeAvailableResourcesResponseBodyResourcesSupportedEnginesSupportedInstanceClassesStorageSize {
	s.MinCount = &v
	return s
}

func (s *DescribeAvailableResourcesResponseBodyResourcesSupportedEnginesSupportedInstanceClassesStorageSize) SetStep(v string) *DescribeAvailableResourcesResponseBodyResourcesSupportedEnginesSupportedInstanceClassesStorageSize {
	s.Step = &v
	return s
}

type DescribeAvailableResourcesResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAvailableResourcesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAvailableResourcesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableResourcesResponse) GoString() string {
	return s.String()
}

func (s *DescribeAvailableResourcesResponse) SetHeaders(v map[string]*string) *DescribeAvailableResourcesResponse {
	s.Headers = v
	return s
}

func (s *DescribeAvailableResourcesResponse) SetStatusCode(v int32) *DescribeAvailableResourcesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAvailableResourcesResponse) SetBody(v *DescribeAvailableResourcesResponseBody) *DescribeAvailableResourcesResponse {
	s.Body = v
	return s
}

type DescribeBackupJobRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 123
	BackupJobId *int64 `json:"BackupJobId,omitempty" xml:"BackupJobId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
}

func (s DescribeBackupJobRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeBackupJobRequest) GoString() string {
	return s.String()
}

func (s *DescribeBackupJobRequest) SetBackupJobId(v int64) *DescribeBackupJobRequest {
	s.BackupJobId = &v
	return s
}

func (s *DescribeBackupJobRequest) SetDBInstanceId(v string) *DescribeBackupJobRequest {
	s.DBInstanceId = &v
	return s
}

type DescribeBackupJobResponseBody struct {
	// example:
	//
	// 1111111111
	BackupId *string `json:"BackupId,omitempty" xml:"BackupId,omitempty"`
	// example:
	//
	// 123
	BackupJobId *string `json:"BackupJobId,omitempty" xml:"BackupJobId,omitempty"`
	// example:
	//
	// Automated
	BackupMode *string `json:"BackupMode,omitempty" xml:"BackupMode,omitempty"`
	// example:
	//
	// backup
	BackupStatus *string `json:"BackupStatus,omitempty" xml:"BackupStatus,omitempty"`
	// example:
	//
	// 50%
	Process *string `json:"Process,omitempty" xml:"Process,omitempty"`
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// 2023-01-03T16:00:00Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeBackupJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeBackupJobResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeBackupJobResponseBody) SetBackupId(v string) *DescribeBackupJobResponseBody {
	s.BackupId = &v
	return s
}

func (s *DescribeBackupJobResponseBody) SetBackupJobId(v string) *DescribeBackupJobResponseBody {
	s.BackupJobId = &v
	return s
}

func (s *DescribeBackupJobResponseBody) SetBackupMode(v string) *DescribeBackupJobResponseBody {
	s.BackupMode = &v
	return s
}

func (s *DescribeBackupJobResponseBody) SetBackupStatus(v string) *DescribeBackupJobResponseBody {
	s.BackupStatus = &v
	return s
}

func (s *DescribeBackupJobResponseBody) SetProcess(v string) *DescribeBackupJobResponseBody {
	s.Process = &v
	return s
}

func (s *DescribeBackupJobResponseBody) SetRequestId(v string) *DescribeBackupJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeBackupJobResponseBody) SetStartTime(v string) *DescribeBackupJobResponseBody {
	s.StartTime = &v
	return s
}

type DescribeBackupJobResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeBackupJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeBackupJobResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeBackupJobResponse) GoString() string {
	return s.String()
}

func (s *DescribeBackupJobResponse) SetHeaders(v map[string]*string) *DescribeBackupJobResponse {
	s.Headers = v
	return s
}

func (s *DescribeBackupJobResponse) SetStatusCode(v int32) *DescribeBackupJobResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeBackupJobResponse) SetBody(v *DescribeBackupJobResponseBody) *DescribeBackupJobResponse {
	s.Body = v
	return s
}

type DescribeBackupPolicyRequest struct {
	// The ID of the instance.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the details of all AnalyticDB for PostgreSQL instances in a specific region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp***************
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
}

func (s DescribeBackupPolicyRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeBackupPolicyRequest) GoString() string {
	return s.String()
}

func (s *DescribeBackupPolicyRequest) SetDBInstanceId(v string) *DescribeBackupPolicyRequest {
	s.DBInstanceId = &v
	return s
}

type DescribeBackupPolicyResponseBody struct {
	// The number of days for which data backup files are retained.
	//
	// example:
	//
	// 7
	BackupRetentionPeriod *int32 `json:"BackupRetentionPeriod,omitempty" xml:"BackupRetentionPeriod,omitempty"`
	// Indicates whether automatic point-in-time backup is enabled. Valid values:
	//
	// 	- **true**: Automatic point-in-time backup is enabled.
	//
	// 	- **false**: Automatic point-in-time backup is disabled.
	//
	// example:
	//
	// true
	EnableRecoveryPoint *bool `json:"EnableRecoveryPoint,omitempty" xml:"EnableRecoveryPoint,omitempty"`
	// The cycle based on which backups are performed. If more than one day of the week is specified, the days of the week are separated by commas (,). Valid values:
	//
	// 	- **Monday**
	//
	// 	- **Tuesday**
	//
	// 	- **Wednesday**
	//
	// 	- **Thursday**
	//
	// 	- **Friday**
	//
	// 	- **Saturday**
	//
	// 	- **Sunday**
	//
	// example:
	//
	// Wednesday,Friday
	PreferredBackupPeriod *string `json:"PreferredBackupPeriod,omitempty" xml:"PreferredBackupPeriod,omitempty"`
	// The backup time. The time is in the HH:mmZ-HH:mmZ format. The time is displayed in UTC.
	//
	// example:
	//
	// 12:00Z-13:00Z
	PreferredBackupTime *string `json:"PreferredBackupTime,omitempty" xml:"PreferredBackupTime,omitempty"`
	// The frequency of the point-in-time backup. Valid values:
	//
	// 	- **1**: per hour
	//
	// 	- **2**: per 2 hours
	//
	// 	- **4**: per 4 hours
	//
	// 	- **8**: per 8 hours
	//
	// example:
	//
	// 1
	RecoveryPointPeriod *string `json:"RecoveryPointPeriod,omitempty" xml:"RecoveryPointPeriod,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 9E6B3287-A3E2-5A87-B8D8-E9**********
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeBackupPolicyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeBackupPolicyResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeBackupPolicyResponseBody) SetBackupRetentionPeriod(v int32) *DescribeBackupPolicyResponseBody {
	s.BackupRetentionPeriod = &v
	return s
}

func (s *DescribeBackupPolicyResponseBody) SetEnableRecoveryPoint(v bool) *DescribeBackupPolicyResponseBody {
	s.EnableRecoveryPoint = &v
	return s
}

func (s *DescribeBackupPolicyResponseBody) SetPreferredBackupPeriod(v string) *DescribeBackupPolicyResponseBody {
	s.PreferredBackupPeriod = &v
	return s
}

func (s *DescribeBackupPolicyResponseBody) SetPreferredBackupTime(v string) *DescribeBackupPolicyResponseBody {
	s.PreferredBackupTime = &v
	return s
}

func (s *DescribeBackupPolicyResponseBody) SetRecoveryPointPeriod(v string) *DescribeBackupPolicyResponseBody {
	s.RecoveryPointPeriod = &v
	return s
}

func (s *DescribeBackupPolicyResponseBody) SetRequestId(v string) *DescribeBackupPolicyResponseBody {
	s.RequestId = &v
	return s
}

type DescribeBackupPolicyResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeBackupPolicyResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeBackupPolicyResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeBackupPolicyResponse) GoString() string {
	return s.String()
}

func (s *DescribeBackupPolicyResponse) SetHeaders(v map[string]*string) *DescribeBackupPolicyResponse {
	s.Headers = v
	return s
}

func (s *DescribeBackupPolicyResponse) SetStatusCode(v int32) *DescribeBackupPolicyResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeBackupPolicyResponse) SetBody(v *DescribeBackupPolicyResponseBody) *DescribeBackupPolicyResponse {
	s.Body = v
	return s
}

type DescribeCollectionRequest struct {
	// The name of the collection.
	//
	// >  You can call the [ListCollections](https://help.aliyun.com/document_detail/2401503.html) operation to query a list of collections.
	//
	// This parameter is required.
	//
	// example:
	//
	// document
	Collection *string `json:"Collection,omitempty" xml:"Collection,omitempty"`
	// The instance ID.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The name of the namespace.
	//
	// >  You can call the [ListNamespaces](https://help.aliyun.com/document_detail/2401502.html) operation to query a list of namespaces.
	//
	// example:
	//
	// mynamespace
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// The password of the namespace.
	//
	// This parameter is required.
	//
	// example:
	//
	// testpassword
	NamespacePassword *string `json:"NamespacePassword,omitempty" xml:"NamespacePassword,omitempty"`
	OwnerId           *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The region ID of the instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the workspace that consists of multiple AnalyticDB for PostgreSQL instances. You must specify one of the WorkspaceId and DBInstanceId parameters. If you specify both parameters, the WorkspaceId parameter takes effect.
	//
	// example:
	//
	// gp-ws-*****
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s DescribeCollectionRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeCollectionRequest) GoString() string {
	return s.String()
}

func (s *DescribeCollectionRequest) SetCollection(v string) *DescribeCollectionRequest {
	s.Collection = &v
	return s
}

func (s *DescribeCollectionRequest) SetDBInstanceId(v string) *DescribeCollectionRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeCollectionRequest) SetNamespace(v string) *DescribeCollectionRequest {
	s.Namespace = &v
	return s
}

func (s *DescribeCollectionRequest) SetNamespacePassword(v string) *DescribeCollectionRequest {
	s.NamespacePassword = &v
	return s
}

func (s *DescribeCollectionRequest) SetOwnerId(v int64) *DescribeCollectionRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeCollectionRequest) SetRegionId(v string) *DescribeCollectionRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeCollectionRequest) SetWorkspaceId(v string) *DescribeCollectionRequest {
	s.WorkspaceId = &v
	return s
}

type DescribeCollectionResponseBody struct {
	// The instance ID.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The number of vector dimensions.
	//
	// example:
	//
	// 1024
	Dimension *int32 `json:"Dimension,omitempty" xml:"Dimension,omitempty"`
	// The fields that are used for full-text search. Multiple fields are separated by commas (,).
	//
	// example:
	//
	// title,content
	FullTextRetrievalFields *string `json:"FullTextRetrievalFields,omitempty" xml:"FullTextRetrievalFields,omitempty"`
	// The returned message.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The metadata of vector data, which is a JSON string in the MAP format. The key specifies the field name, and the value specifies the data type.
	//
	// **
	//
	// **Warning*	- Reserved fields such as id, vector, and to_tsvector cannot be used.
	Metadata map[string]*string `json:"Metadata,omitempty" xml:"Metadata,omitempty"`
	// The distance metrics.
	//
	// example:
	//
	// cosine
	Metrics *string `json:"Metrics,omitempty" xml:"Metrics,omitempty"`
	// The name of the namespace.
	//
	// example:
	//
	// mynamespace
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// The analyzer that is used for full-text search.
	//
	// example:
	//
	// zh_cn
	Parser *string `json:"Parser,omitempty" xml:"Parser,omitempty"`
	// The region ID of the instance.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId           *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	SparseVectorMetrics *string `json:"SparseVectorMetrics,omitempty" xml:"SparseVectorMetrics,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **success**
	//
	// 	- **fail**
	//
	// example:
	//
	// success
	Status        *string `json:"Status,omitempty" xml:"Status,omitempty"`
	SupportSparse *bool   `json:"SupportSparse,omitempty" xml:"SupportSparse,omitempty"`
}

func (s DescribeCollectionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeCollectionResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeCollectionResponseBody) SetDBInstanceId(v string) *DescribeCollectionResponseBody {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeCollectionResponseBody) SetDimension(v int32) *DescribeCollectionResponseBody {
	s.Dimension = &v
	return s
}

func (s *DescribeCollectionResponseBody) SetFullTextRetrievalFields(v string) *DescribeCollectionResponseBody {
	s.FullTextRetrievalFields = &v
	return s
}

func (s *DescribeCollectionResponseBody) SetMessage(v string) *DescribeCollectionResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeCollectionResponseBody) SetMetadata(v map[string]*string) *DescribeCollectionResponseBody {
	s.Metadata = v
	return s
}

func (s *DescribeCollectionResponseBody) SetMetrics(v string) *DescribeCollectionResponseBody {
	s.Metrics = &v
	return s
}

func (s *DescribeCollectionResponseBody) SetNamespace(v string) *DescribeCollectionResponseBody {
	s.Namespace = &v
	return s
}

func (s *DescribeCollectionResponseBody) SetParser(v string) *DescribeCollectionResponseBody {
	s.Parser = &v
	return s
}

func (s *DescribeCollectionResponseBody) SetRegionId(v string) *DescribeCollectionResponseBody {
	s.RegionId = &v
	return s
}

func (s *DescribeCollectionResponseBody) SetRequestId(v string) *DescribeCollectionResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeCollectionResponseBody) SetSparseVectorMetrics(v string) *DescribeCollectionResponseBody {
	s.SparseVectorMetrics = &v
	return s
}

func (s *DescribeCollectionResponseBody) SetStatus(v string) *DescribeCollectionResponseBody {
	s.Status = &v
	return s
}

func (s *DescribeCollectionResponseBody) SetSupportSparse(v bool) *DescribeCollectionResponseBody {
	s.SupportSparse = &v
	return s
}

type DescribeCollectionResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeCollectionResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeCollectionResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeCollectionResponse) GoString() string {
	return s.String()
}

func (s *DescribeCollectionResponse) SetHeaders(v map[string]*string) *DescribeCollectionResponse {
	s.Headers = v
	return s
}

func (s *DescribeCollectionResponse) SetStatusCode(v int32) *DescribeCollectionResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeCollectionResponse) SetBody(v *DescribeCollectionResponseBody) *DescribeCollectionResponse {
	s.Body = v
	return s
}

type DescribeCreateIndexJobRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// testcollection
	Collection *string `json:"Collection,omitempty" xml:"Collection,omitempty"`
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 231460f8-75dc-405e-a669-0c5204887e91
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// mynamespace
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// testpassword
	NamespacePassword *string `json:"NamespacePassword,omitempty" xml:"NamespacePassword,omitempty"`
	OwnerId           *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// example:
	//
	// gp-ws-*****
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s DescribeCreateIndexJobRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeCreateIndexJobRequest) GoString() string {
	return s.String()
}

func (s *DescribeCreateIndexJobRequest) SetCollection(v string) *DescribeCreateIndexJobRequest {
	s.Collection = &v
	return s
}

func (s *DescribeCreateIndexJobRequest) SetDBInstanceId(v string) *DescribeCreateIndexJobRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeCreateIndexJobRequest) SetJobId(v string) *DescribeCreateIndexJobRequest {
	s.JobId = &v
	return s
}

func (s *DescribeCreateIndexJobRequest) SetNamespace(v string) *DescribeCreateIndexJobRequest {
	s.Namespace = &v
	return s
}

func (s *DescribeCreateIndexJobRequest) SetNamespacePassword(v string) *DescribeCreateIndexJobRequest {
	s.NamespacePassword = &v
	return s
}

func (s *DescribeCreateIndexJobRequest) SetOwnerId(v int64) *DescribeCreateIndexJobRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeCreateIndexJobRequest) SetRegionId(v string) *DescribeCreateIndexJobRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeCreateIndexJobRequest) SetWorkspaceId(v string) *DescribeCreateIndexJobRequest {
	s.WorkspaceId = &v
	return s
}

type DescribeCreateIndexJobResponseBody struct {
	Job *DescribeCreateIndexJobResponseBodyJob `json:"Job,omitempty" xml:"Job,omitempty" type:"Struct"`
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeCreateIndexJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeCreateIndexJobResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeCreateIndexJobResponseBody) SetJob(v *DescribeCreateIndexJobResponseBodyJob) *DescribeCreateIndexJobResponseBody {
	s.Job = v
	return s
}

func (s *DescribeCreateIndexJobResponseBody) SetMessage(v string) *DescribeCreateIndexJobResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeCreateIndexJobResponseBody) SetRequestId(v string) *DescribeCreateIndexJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeCreateIndexJobResponseBody) SetStatus(v string) *DescribeCreateIndexJobResponseBody {
	s.Status = &v
	return s
}

type DescribeCreateIndexJobResponseBodyJob struct {
	// example:
	//
	// false
	Completed *bool `json:"Completed,omitempty" xml:"Completed,omitempty"`
	// example:
	//
	// 2024-01-08 16:52:04.864664
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// Failed to connect database.
	Error *string `json:"Error,omitempty" xml:"Error,omitempty"`
	// Job ID。
	//
	// example:
	//
	// 231460f8-75dc-405e-a669-0c5204887e91
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// 20
	Progress *int32 `json:"Progress,omitempty" xml:"Progress,omitempty"`
	// example:
	//
	// Running
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// example:
	//
	// 2024-01-08 16:53:04.864664
	UpdateTime *string `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
}

func (s DescribeCreateIndexJobResponseBodyJob) String() string {
	return tea.Prettify(s)
}

func (s DescribeCreateIndexJobResponseBodyJob) GoString() string {
	return s.String()
}

func (s *DescribeCreateIndexJobResponseBodyJob) SetCompleted(v bool) *DescribeCreateIndexJobResponseBodyJob {
	s.Completed = &v
	return s
}

func (s *DescribeCreateIndexJobResponseBodyJob) SetCreateTime(v string) *DescribeCreateIndexJobResponseBodyJob {
	s.CreateTime = &v
	return s
}

func (s *DescribeCreateIndexJobResponseBodyJob) SetError(v string) *DescribeCreateIndexJobResponseBodyJob {
	s.Error = &v
	return s
}

func (s *DescribeCreateIndexJobResponseBodyJob) SetId(v string) *DescribeCreateIndexJobResponseBodyJob {
	s.Id = &v
	return s
}

func (s *DescribeCreateIndexJobResponseBodyJob) SetProgress(v int32) *DescribeCreateIndexJobResponseBodyJob {
	s.Progress = &v
	return s
}

func (s *DescribeCreateIndexJobResponseBodyJob) SetStatus(v string) *DescribeCreateIndexJobResponseBodyJob {
	s.Status = &v
	return s
}

func (s *DescribeCreateIndexJobResponseBodyJob) SetUpdateTime(v string) *DescribeCreateIndexJobResponseBodyJob {
	s.UpdateTime = &v
	return s
}

type DescribeCreateIndexJobResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeCreateIndexJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeCreateIndexJobResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeCreateIndexJobResponse) GoString() string {
	return s.String()
}

func (s *DescribeCreateIndexJobResponse) SetHeaders(v map[string]*string) *DescribeCreateIndexJobResponse {
	s.Headers = v
	return s
}

func (s *DescribeCreateIndexJobResponse) SetStatusCode(v int32) *DescribeCreateIndexJobResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeCreateIndexJobResponse) SetBody(v *DescribeCreateIndexJobResponseBody) *DescribeCreateIndexJobResponse {
	s.Body = v
	return s
}

type DescribeDBClusterNodeRequest struct {
	// The instance ID.
	//
	// > You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query details about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp***************
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The node type. Valid values:
	//
	// 	- **master**: coordinator node.
	//
	// 	- **segment**: compute node.
	//
	// > If you do not specify this parameter, the information about all nodes is returned.
	//
	// example:
	//
	// master
	NodeType *string `json:"NodeType,omitempty" xml:"NodeType,omitempty"`
}

func (s DescribeDBClusterNodeRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBClusterNodeRequest) GoString() string {
	return s.String()
}

func (s *DescribeDBClusterNodeRequest) SetDBInstanceId(v string) *DescribeDBClusterNodeRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDBClusterNodeRequest) SetNodeType(v string) *DescribeDBClusterNodeRequest {
	s.NodeType = &v
	return s
}

type DescribeDBClusterNodeResponseBody struct {
	// The instance ID.
	//
	// example:
	//
	// gp-bp***************
	DBClusterId *string `json:"DBClusterId,omitempty" xml:"DBClusterId,omitempty"`
	// The name of the node.
	Nodes []*DescribeDBClusterNodeResponseBodyNodes `json:"Nodes,omitempty" xml:"Nodes,omitempty" type:"Repeated"`
	// The request ID.
	//
	// example:
	//
	// 87E44B48-B306-4AD3-A63B-C8**********
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeDBClusterNodeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBClusterNodeResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDBClusterNodeResponseBody) SetDBClusterId(v string) *DescribeDBClusterNodeResponseBody {
	s.DBClusterId = &v
	return s
}

func (s *DescribeDBClusterNodeResponseBody) SetNodes(v []*DescribeDBClusterNodeResponseBodyNodes) *DescribeDBClusterNodeResponseBody {
	s.Nodes = v
	return s
}

func (s *DescribeDBClusterNodeResponseBody) SetRequestId(v string) *DescribeDBClusterNodeResponseBody {
	s.RequestId = &v
	return s
}

type DescribeDBClusterNodeResponseBodyNodes struct {
	// The name of the node.
	//
	// example:
	//
	// master-10*******
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s DescribeDBClusterNodeResponseBodyNodes) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBClusterNodeResponseBodyNodes) GoString() string {
	return s.String()
}

func (s *DescribeDBClusterNodeResponseBodyNodes) SetName(v string) *DescribeDBClusterNodeResponseBodyNodes {
	s.Name = &v
	return s
}

type DescribeDBClusterNodeResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeDBClusterNodeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeDBClusterNodeResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBClusterNodeResponse) GoString() string {
	return s.String()
}

func (s *DescribeDBClusterNodeResponse) SetHeaders(v map[string]*string) *DescribeDBClusterNodeResponse {
	s.Headers = v
	return s
}

func (s *DescribeDBClusterNodeResponse) SetStatusCode(v int32) *DescribeDBClusterNodeResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDBClusterNodeResponse) SetBody(v *DescribeDBClusterNodeResponseBody) *DescribeDBClusterNodeResponse {
	s.Body = v
	return s
}

type DescribeDBClusterPerformanceRequest struct {
	// The instance ID.
	//
	// > You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query details about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The end of the time range to query. Specify the time in the ISO 8601 standard in the `YYYY-MM-DDTHH:mmZ` format.
	//
	// > The end time must be later than the start time. The maximum time range that can be specified is seven days.
	//
	// This parameter is required.
	//
	// example:
	//
	// 2021-11-03T15:10Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The performance metric that you want to query. Separate multiple values with commas (,). For more information, see [Performance parameters](https://help.aliyun.com/document_detail/86943.html).
	//
	// This parameter is required.
	//
	// example:
	//
	// adbpg_conn_count
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The node type. Valid values:
	//
	// 	- **master**: coordinator node.
	//
	// 	- **segment**: compute node.
	//
	// > If you do not specify this parameter, the performance metrics of all nodes are returned.
	//
	// example:
	//
	// master
	NodeType *string `json:"NodeType,omitempty" xml:"NodeType,omitempty"`
	// The nodes for which you want to query performance metrics. Separate multiple values with commas (,). Example: `master-10******1,master-10******2`. You can call the [DescribeDBClusterNode](https://help.aliyun.com/document_detail/390136.html) operation to query the names of nodes.
	//
	// You can also filter the nodes based on their metric values. Valid values:
	//
	// 	- **top10**: the 10 nodes that have the highest metric values.
	//
	// 	- **top20**: the 20 nodes that have the highest metric values.
	//
	// 	- **bottom10**: the 10 nodes that have the lowest metric values.
	//
	// 	- **bottom20**: the 20 nodes that have the lowest metric values.
	//
	// example:
	//
	// top10
	Nodes *string `json:"Nodes,omitempty" xml:"Nodes,omitempty"`
	// The name of the resource group.
	//
	// example:
	//
	// testgroup
	ResourceGroupName *string `json:"ResourceGroupName,omitempty" xml:"ResourceGroupName,omitempty"`
	// The beginning of the time range to query. Specify the time in the ISO 8601 standard in the `YYYY-MM-DDTHH:mmZ` format.
	//
	// > You can query monitoring information only within the last 30 days.
	//
	// This parameter is required.
	//
	// example:
	//
	// 2021-11-03T15:00Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeDBClusterPerformanceRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBClusterPerformanceRequest) GoString() string {
	return s.String()
}

func (s *DescribeDBClusterPerformanceRequest) SetDBInstanceId(v string) *DescribeDBClusterPerformanceRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDBClusterPerformanceRequest) SetEndTime(v string) *DescribeDBClusterPerformanceRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeDBClusterPerformanceRequest) SetKey(v string) *DescribeDBClusterPerformanceRequest {
	s.Key = &v
	return s
}

func (s *DescribeDBClusterPerformanceRequest) SetNodeType(v string) *DescribeDBClusterPerformanceRequest {
	s.NodeType = &v
	return s
}

func (s *DescribeDBClusterPerformanceRequest) SetNodes(v string) *DescribeDBClusterPerformanceRequest {
	s.Nodes = &v
	return s
}

func (s *DescribeDBClusterPerformanceRequest) SetResourceGroupName(v string) *DescribeDBClusterPerformanceRequest {
	s.ResourceGroupName = &v
	return s
}

func (s *DescribeDBClusterPerformanceRequest) SetStartTime(v string) *DescribeDBClusterPerformanceRequest {
	s.StartTime = &v
	return s
}

type DescribeDBClusterPerformanceResponseBody struct {
	// The instance ID.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBClusterId *string `json:"DBClusterId,omitempty" xml:"DBClusterId,omitempty"`
	// The end time of the query. The time follows the ISO 8601 standard in the `YYYY-MM-DDTHH:mmZ` format. The time is displayed in UTC.
	//
	// example:
	//
	// 2021-11-03T15:10Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The name of the performance metric. For more information, see [Performance parameters](https://help.aliyun.com/document_detail/86943.html).
	PerformanceKeys []*DescribeDBClusterPerformanceResponseBodyPerformanceKeys `json:"PerformanceKeys,omitempty" xml:"PerformanceKeys,omitempty" type:"Repeated"`
	// The request ID.
	//
	// example:
	//
	// 8E8990F0-C81E-4C94-8F51-5F**********
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The start time of the query. The time follows the ISO 8601 standard in the `YYYY-MM-DDTHH:mmZ` format. The time is displayed in UTC.
	//
	// example:
	//
	// 2021-11-03T15:00Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeDBClusterPerformanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBClusterPerformanceResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDBClusterPerformanceResponseBody) SetDBClusterId(v string) *DescribeDBClusterPerformanceResponseBody {
	s.DBClusterId = &v
	return s
}

func (s *DescribeDBClusterPerformanceResponseBody) SetEndTime(v string) *DescribeDBClusterPerformanceResponseBody {
	s.EndTime = &v
	return s
}

func (s *DescribeDBClusterPerformanceResponseBody) SetPerformanceKeys(v []*DescribeDBClusterPerformanceResponseBodyPerformanceKeys) *DescribeDBClusterPerformanceResponseBody {
	s.PerformanceKeys = v
	return s
}

func (s *DescribeDBClusterPerformanceResponseBody) SetRequestId(v string) *DescribeDBClusterPerformanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDBClusterPerformanceResponseBody) SetStartTime(v string) *DescribeDBClusterPerformanceResponseBody {
	s.StartTime = &v
	return s
}

type DescribeDBClusterPerformanceResponseBodyPerformanceKeys struct {
	// The name of the performance metric. For more information, see [Performance parameters](https://help.aliyun.com/document_detail/86943.html).
	//
	// example:
	//
	// adbpg_group_cpu_used_percent
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// Details of the performance metric of a node.
	Series []*DescribeDBClusterPerformanceResponseBodyPerformanceKeysSeries `json:"Series,omitempty" xml:"Series,omitempty" type:"Repeated"`
	// The unit of the performance metric.
	//
	// example:
	//
	// %
	Unit *string `json:"Unit,omitempty" xml:"Unit,omitempty"`
}

func (s DescribeDBClusterPerformanceResponseBodyPerformanceKeys) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBClusterPerformanceResponseBodyPerformanceKeys) GoString() string {
	return s.String()
}

func (s *DescribeDBClusterPerformanceResponseBodyPerformanceKeys) SetName(v string) *DescribeDBClusterPerformanceResponseBodyPerformanceKeys {
	s.Name = &v
	return s
}

func (s *DescribeDBClusterPerformanceResponseBodyPerformanceKeys) SetSeries(v []*DescribeDBClusterPerformanceResponseBodyPerformanceKeysSeries) *DescribeDBClusterPerformanceResponseBodyPerformanceKeys {
	s.Series = v
	return s
}

func (s *DescribeDBClusterPerformanceResponseBodyPerformanceKeys) SetUnit(v string) *DescribeDBClusterPerformanceResponseBodyPerformanceKeys {
	s.Unit = &v
	return s
}

type DescribeDBClusterPerformanceResponseBodyPerformanceKeysSeries struct {
	// The name of the compute node or compute group.
	//
	// example:
	//
	// standby-********-cpu
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The role of the node. Valid values:
	//
	// 	- **master**: primary coordinator node
	//
	// 	- **standby**: standby coordinator node
	//
	// 	- **segment**: compute node
	//
	// example:
	//
	// standby
	Role *string `json:"Role,omitempty" xml:"Role,omitempty"`
	// The value of the performance metric collected at a point in time.
	Values []*DescribeDBClusterPerformanceResponseBodyPerformanceKeysSeriesValues `json:"Values,omitempty" xml:"Values,omitempty" type:"Repeated"`
}

func (s DescribeDBClusterPerformanceResponseBodyPerformanceKeysSeries) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBClusterPerformanceResponseBodyPerformanceKeysSeries) GoString() string {
	return s.String()
}

func (s *DescribeDBClusterPerformanceResponseBodyPerformanceKeysSeries) SetName(v string) *DescribeDBClusterPerformanceResponseBodyPerformanceKeysSeries {
	s.Name = &v
	return s
}

func (s *DescribeDBClusterPerformanceResponseBodyPerformanceKeysSeries) SetRole(v string) *DescribeDBClusterPerformanceResponseBodyPerformanceKeysSeries {
	s.Role = &v
	return s
}

func (s *DescribeDBClusterPerformanceResponseBodyPerformanceKeysSeries) SetValues(v []*DescribeDBClusterPerformanceResponseBodyPerformanceKeysSeriesValues) *DescribeDBClusterPerformanceResponseBodyPerformanceKeysSeries {
	s.Values = v
	return s
}

type DescribeDBClusterPerformanceResponseBodyPerformanceKeysSeriesValues struct {
	// The value of the performance metric and the time when the metric value was collected.
	Point []*string `json:"Point,omitempty" xml:"Point,omitempty" type:"Repeated"`
}

func (s DescribeDBClusterPerformanceResponseBodyPerformanceKeysSeriesValues) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBClusterPerformanceResponseBodyPerformanceKeysSeriesValues) GoString() string {
	return s.String()
}

func (s *DescribeDBClusterPerformanceResponseBodyPerformanceKeysSeriesValues) SetPoint(v []*string) *DescribeDBClusterPerformanceResponseBodyPerformanceKeysSeriesValues {
	s.Point = v
	return s
}

type DescribeDBClusterPerformanceResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeDBClusterPerformanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeDBClusterPerformanceResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBClusterPerformanceResponse) GoString() string {
	return s.String()
}

func (s *DescribeDBClusterPerformanceResponse) SetHeaders(v map[string]*string) *DescribeDBClusterPerformanceResponse {
	s.Headers = v
	return s
}

func (s *DescribeDBClusterPerformanceResponse) SetStatusCode(v int32) *DescribeDBClusterPerformanceResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDBClusterPerformanceResponse) SetBody(v *DescribeDBClusterPerformanceResponseBody) *DescribeDBClusterPerformanceResponse {
	s.Body = v
	return s
}

type DescribeDBInstanceAttributeRequest struct {
	// Instance ID.
	//
	// > You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) interface to view the instance IDs of all AnalyticDB for PostgreSQL instances in the target region.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp13ue79qk8y1****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// This parameter is deprecated and should not be passed.
	//
	// example:
	//
	// null
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
}

func (s DescribeDBInstanceAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceAttributeRequest) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceAttributeRequest) SetDBInstanceId(v string) *DescribeDBInstanceAttributeRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDBInstanceAttributeRequest) SetOwnerId(v int64) *DescribeDBInstanceAttributeRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeDBInstanceAttributeRequest) SetResourceGroupId(v string) *DescribeDBInstanceAttributeRequest {
	s.ResourceGroupId = &v
	return s
}

type DescribeDBInstanceAttributeResponseBody struct {
	// The queried instance.
	Items *DescribeDBInstanceAttributeResponseBodyItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Struct"`
	// Request ID.
	//
	// example:
	//
	// 5E6EDEB8-D73E-5F2D-B948-86C8AEB05A68
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeDBInstanceAttributeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceAttributeResponseBody) SetItems(v *DescribeDBInstanceAttributeResponseBodyItems) *DescribeDBInstanceAttributeResponseBody {
	s.Items = v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBody) SetRequestId(v string) *DescribeDBInstanceAttributeResponseBody {
	s.RequestId = &v
	return s
}

type DescribeDBInstanceAttributeResponseBodyItems struct {
	DBInstanceAttribute []*DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute `json:"DBInstanceAttribute,omitempty" xml:"DBInstanceAttribute,omitempty" type:"Repeated"`
}

func (s DescribeDBInstanceAttributeResponseBodyItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceAttributeResponseBodyItems) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceAttributeResponseBodyItems) SetDBInstanceAttribute(v []*DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) *DescribeDBInstanceAttributeResponseBodyItems {
	s.DBInstanceAttribute = v
	return s
}

type DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute struct {
	// Queries the current instance availability status, in percentage (%).
	//
	// > This parameter is only applicable to instances in the storage reserved mode.
	//
	// example:
	//
	// 100.0%
	AvailabilityValue *string `json:"AvailabilityValue,omitempty" xml:"AvailabilityValue,omitempty"`
	// Access mode, with the following values:
	//
	// - **Performance**: Standard access mode.
	//
	// - **Safty**: High-security access mode.
	//
	// - **LVS**: LVS link mode.
	//
	// example:
	//
	// LVS
	ConnectionMode *string `json:"ConnectionMode,omitempty" xml:"ConnectionMode,omitempty"`
	// Instance connection address.
	//
	// example:
	//
	// gp-bp13ue79qk8y1****-master.gpdb.rds.aliyuncs.com
	ConnectionString *string `json:"ConnectionString,omitempty" xml:"ConnectionString,omitempty"`
	// Minor version number of the kernel.
	//
	// example:
	//
	// mm.v6.3.10.1-202207141918
	CoreVersion *string `json:"CoreVersion,omitempty" xml:"CoreVersion,omitempty"`
	// Number of CPU cores for the compute node, unit: Core.
	//
	// example:
	//
	// 2
	CpuCores *int32 `json:"CpuCores,omitempty" xml:"CpuCores,omitempty"`
	// Number of CPU cores per node.
	//
	// > This parameter is only applicable to instances in the storage reserved mode.
	//
	// example:
	//
	// 0
	CpuCoresPerNode *int32 `json:"CpuCoresPerNode,omitempty" xml:"CpuCoresPerNode,omitempty"`
	// Instance creation time.
	//
	// example:
	//
	// 2022-08-11T09:16:26Z
	CreationTime *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	// Instance series, with the following values:
	//
	// - **Basic**: Basic Edition.
	//
	// - **HighAvailability**: High Availability Edition.
	//
	// example:
	//
	// HighAvailability
	DBInstanceCategory *string `json:"DBInstanceCategory,omitempty" xml:"DBInstanceCategory,omitempty"`
	// Instance specification.
	//
	// > This parameter is only applicable to reserved storage mode instances.
	//
	// example:
	//
	// gpdb.group.segsdx1
	DBInstanceClass *string `json:"DBInstanceClass,omitempty" xml:"DBInstanceClass,omitempty"`
	// Instance family, with the following values:
	//
	// - **s**: Shared type.
	//
	// - **x**: General type.
	//
	// - **d**: Dedicated package.
	//
	// - **h**: Dedicated physical machine.
	//
	// example:
	//
	// x
	DBInstanceClassType *string `json:"DBInstanceClassType,omitempty" xml:"DBInstanceClassType,omitempty"`
	// Number of CPU cores.
	//
	// example:
	//
	// 2
	DBInstanceCpuCores *int32 `json:"DBInstanceCpuCores,omitempty" xml:"DBInstanceCpuCores,omitempty"`
	// Instance description.
	//
	// example:
	//
	// gp-bp13ue79qk8y1****
	DBInstanceDescription *string `json:"DBInstanceDescription,omitempty" xml:"DBInstanceDescription,omitempty"`
	// Maximum BPS (disk throughput) of the compute group, in Mbps.
	//
	// > This parameter is only applicable to reserved storage mode instances.
	//
	// example:
	//
	// 0
	DBInstanceDiskMBPS *int64 `json:"DBInstanceDiskMBPS,omitempty" xml:"DBInstanceDiskMBPS,omitempty"`
	// Number of compute groups.
	//
	// > This parameter is only applicable to reserved storage mode instances.
	//
	// example:
	//
	// 0
	DBInstanceGroupCount *string `json:"DBInstanceGroupCount,omitempty" xml:"DBInstanceGroupCount,omitempty"`
	// Instance ID.
	//
	// example:
	//
	// gp-bp13ue79qk8y1****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// Memory of the compute node.
	//
	// > The unit for storage-reserved mode is MB; for Serverless and storage-elastic modes, it is GB.
	//
	// example:
	//
	// 16
	DBInstanceMemory *int64 `json:"DBInstanceMemory,omitempty" xml:"DBInstanceMemory,omitempty"`
	// Instance resource type, with the following values:
	//
	// - **Serverless**: Serverless mode.
	//
	// - **StorageElastic**: Storage elastic mode.
	//
	// - **Classic**: Storage reserved mode.
	//
	// example:
	//
	// StorageElastic
	DBInstanceMode *string `json:"DBInstanceMode,omitempty" xml:"DBInstanceMode,omitempty"`
	// This parameter is deprecated and will not return any value.
	//
	// example:
	//
	// null
	DBInstanceNetType *string `json:"DBInstanceNetType,omitempty" xml:"DBInstanceNetType,omitempty"`
	// Instance status. For more details, see the supplementary explanation of the DBInstanceStatus parameter.
	//
	// example:
	//
	// Running
	DBInstanceStatus *string `json:"DBInstanceStatus,omitempty" xml:"DBInstanceStatus,omitempty"`
	// Maximum storage space of a single replica, in GB.
	//
	// example:
	//
	// 50
	DBInstanceStorage *int64 `json:"DBInstanceStorage,omitempty" xml:"DBInstanceStorage,omitempty"`
	// The deployment mode.
	//
	// example:
	//
	// single
	DeployMode *string `json:"DeployMode,omitempty" xml:"DeployMode,omitempty"`
	// Encryption key.
	//
	// > This parameter is returned only for instances with disk encryption enabled.
	//
	// example:
	//
	// 0d2470df-da7b-4786-b981-************
	EncryptionKey *string `json:"EncryptionKey,omitempty" xml:"EncryptionKey,omitempty"`
	// Encryption type, with the following value:
	//
	// - **CloudDisk**: Cloud disk encryption.
	//
	// > This parameter is returned only for instances with cloud disk encryption.
	//
	// example:
	//
	// CloudDisk
	EncryptionType *string `json:"EncryptionType,omitempty" xml:"EncryptionType,omitempty"`
	// Database engine.
	//
	// example:
	//
	// gpdb
	Engine *string `json:"Engine,omitempty" xml:"Engine,omitempty"`
	// Database version.
	//
	// example:
	//
	// 6.0
	EngineVersion *string `json:"EngineVersion,omitempty" xml:"EngineVersion,omitempty"`
	// Instance expiration time (in UTC).
	//
	// > The expiration time for pay-as-you-go instances is `2999-09-08T16:00:00Z`.
	//
	// example:
	//
	// 2999-09-08T16:00:00Z
	ExpireTime *string `json:"ExpireTime,omitempty" xml:"ExpireTime,omitempty"`
	// Compute group machine type, with the following values:
	//
	// - **0**: SSD
	//
	// - **1**: HDD
	//
	// > This parameter applies only to storage-reserved mode instances.
	//
	// example:
	//
	// 0
	HostType *string `json:"HostType,omitempty" xml:"HostType,omitempty"`
	// Idle release waiting time. Unit: seconds.
	//
	// > This parameter is returned only for instances in the Serverless automatic scheduling mode.
	//
	// example:
	//
	// 600
	IdleTime *int32 `json:"IdleTime,omitempty" xml:"IdleTime,omitempty"`
	// Instance network type, with the following values:
	//
	// - **Classic**: Classic network.
	//
	// - **VPC**: VPC network.
	//
	// example:
	//
	// VPC
	InstanceNetworkType *string `json:"InstanceNetworkType,omitempty" xml:"InstanceNetworkType,omitempty"`
	// Lock mode, with the following values:
	//
	// - **Unlock**: Normal.
	//
	// - **ManualLock**: Manually triggered lock.
	//
	// - **LockByExpiration**: Automatically locked when the instance expires.
	//
	// - **LockByRestoration**: Automatically locked before the instance rolls back.
	//
	// - **LockByDiskQuota**: Automatically locked when the instance space is full.
	//
	// example:
	//
	// Unlock
	LockMode *string `json:"LockMode,omitempty" xml:"LockMode,omitempty"`
	// This parameter is deprecated and will not return any value.
	//
	// example:
	//
	// null
	LockReason *string `json:"LockReason,omitempty" xml:"LockReason,omitempty"`
	// Maintenance end time.
	//
	// example:
	//
	// 22:00Z
	MaintainEndTime *string `json:"MaintainEndTime,omitempty" xml:"MaintainEndTime,omitempty"`
	// Maintenance start time.
	//
	// example:
	//
	// 18:00Z
	MaintainStartTime *string `json:"MaintainStartTime,omitempty" xml:"MaintainStartTime,omitempty"`
	// The specifications of AI coordinator node resources of the instance. If the coordinator nodes of the instance are not AI nodes, null is returned.
	//
	// example:
	//
	// ADB.AIMedium.2
	MasterAISpec *string `json:"MasterAISpec,omitempty" xml:"MasterAISpec,omitempty"`
	// Master resources.
	//
	// example:
	//
	// 4
	MasterCU *int32 `json:"MasterCU,omitempty" xml:"MasterCU,omitempty"`
	// Number of Master nodes.
	//
	// example:
	//
	// 1
	MasterNodeNum *int32 `json:"MasterNodeNum,omitempty" xml:"MasterNodeNum,omitempty"`
	// Maximum number of concurrent connections for the instance.
	//
	// > This parameter is only applicable to reserved storage mode instances.
	//
	// example:
	//
	// 500
	MaxConnections *int32 `json:"MaxConnections,omitempty" xml:"MaxConnections,omitempty"`
	// Memory size per replica, see the **MemoryUnit*	- parameter for the unit.
	//
	// > This parameter is only applicable to instances in the storage reserved mode.
	//
	// example:
	//
	// 0
	MemoryPerNode *int32 `json:"MemoryPerNode,omitempty" xml:"MemoryPerNode,omitempty"`
	// Memory size of the compute node.
	//
	// > The unit is MB for the storage reserved mode; GB for Serverless and storage elastic modes.
	//
	// example:
	//
	// 16
	MemorySize *int64 `json:"MemorySize,omitempty" xml:"MemorySize,omitempty"`
	// Memory unit.
	//
	// > This parameter is only applicable to reserved storage mode instances.
	//
	// example:
	//
	// GB
	MemoryUnit *string `json:"MemoryUnit,omitempty" xml:"MemoryUnit,omitempty"`
	// Minor version of the kernel.
	//
	// example:
	//
	// 6.3.10.1-202207141918
	MinorVersion *string `json:"MinorVersion,omitempty" xml:"MinorVersion,omitempty"`
	// Billing type, with the following values:
	//
	// - **Postpaid**: Pay-as-you-go.
	//
	// - **Prepaid**: Subscription.
	//
	// example:
	//
	// Postpaid
	PayType *string `json:"PayType,omitempty" xml:"PayType,omitempty"`
	// Instance port number.
	//
	// example:
	//
	// 5432
	Port *string `json:"Port,omitempty" xml:"Port,omitempty"`
	// The service type.
	//
	// example:
	//
	// standard
	ProdType *string `json:"ProdType,omitempty" xml:"ProdType,omitempty"`
	// This parameter has been deprecated and will not return a value.
	//
	// example:
	//
	// null
	ReadDelayTime *string `json:"ReadDelayTime,omitempty" xml:"ReadDelayTime,omitempty"`
	// Region ID.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// ID of the resource group where the instance is located.
	//
	// example:
	//
	// rg-bp67acfmxazb4p****
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	// Instance running time.
	//
	// example:
	//
	// 4 days 22:58:55
	RunningTime *string `json:"RunningTime,omitempty" xml:"RunningTime,omitempty"`
	// This parameter is deprecated and will not return any value.
	//
	// example:
	//
	// null
	SecurityIPList *string `json:"SecurityIPList,omitempty" xml:"SecurityIPList,omitempty"`
	// Performance Level (PL), currently only **PL1*	- is supported.
	//
	// example:
	//
	// PL1
	SegDiskPerformanceLevel *string `json:"SegDiskPerformanceLevel,omitempty" xml:"SegDiskPerformanceLevel,omitempty"`
	// Number of Segment nodes.
	//
	// > This parameter applies only to instances in the storage elastic mode and Serverless manual scheduling mode.
	//
	// example:
	//
	// 4
	SegNodeNum *int32 `json:"SegNodeNum,omitempty" xml:"SegNodeNum,omitempty"`
	// The specifications of AI compute node resources of the instance. If the compute nodes of the instance are not AI nodes, null is returned.
	//
	// example:
	//
	// ADB.AIMedium.2
	SegmentAISpec *string `json:"SegmentAISpec,omitempty" xml:"SegmentAISpec,omitempty"`
	// Number of compute groups.
	//
	// > This parameter applies only to storage-reserved mode instances.
	//
	// example:
	//
	// 0
	SegmentCounts *int32 `json:"SegmentCounts,omitempty" xml:"SegmentCounts,omitempty"`
	// The mode of the Serverless instance, with the following values:
	//
	// - **Manual**: Manual scheduling.
	//
	// - **Auto**: Automatic scheduling.
	//
	// > This parameter is returned only for Serverless mode instances.
	//
	// example:
	//
	// Auto
	ServerlessMode *string `json:"ServerlessMode,omitempty" xml:"ServerlessMode,omitempty"`
	// Compute resource threshold. Unit: ACU.
	//
	// > This parameter is returned only for instances in the Serverless automatic scheduling mode.
	//
	// example:
	//
	// 32
	ServerlessResource *int32 `json:"ServerlessResource,omitempty" xml:"ServerlessResource,omitempty"`
	// The secondary zone ID.
	//
	// example:
	//
	// cn-hangzhou-i
	StandbyZoneId *string `json:"StandbyZoneId,omitempty" xml:"StandbyZoneId,omitempty"`
	// The time when the instance started running.
	//
	// example:
	//
	// 2022-08-11T09:26:43Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// Storage size per replica, see the **StorageUnit*	- parameter for units.
	//
	// > This parameter applies only to storage-reserved mode instances.
	//
	// example:
	//
	// 0
	StoragePerNode *int32 `json:"StoragePerNode,omitempty" xml:"StoragePerNode,omitempty"`
	// Storage space size, unit: GB.
	//
	// example:
	//
	// 50
	StorageSize *int64 `json:"StorageSize,omitempty" xml:"StorageSize,omitempty"`
	// Storage type, with the following values:
	//
	// - **cloud_essd**: ESSD cloud disk.
	//
	// - **cloud_efficiency**: Efficient cloud disk.
	//
	// > This parameter is only applicable to instances in the storage elastic mode.
	//
	// example:
	//
	// cloud_essd
	StorageType *string `json:"StorageType,omitempty" xml:"StorageType,omitempty"`
	// Storage unit, with the following values:
	//
	// - **GB SSD**
	//
	// - **TB SSD**
	//
	// - **GB HDD**
	//
	// > This parameter is only applicable to instances in the storage reserved mode.
	//
	// example:
	//
	// GB SSD
	StorageUnit *string `json:"StorageUnit,omitempty" xml:"StorageUnit,omitempty"`
	// Indicates whether backup recovery is supported, with the following values:
	//
	// - **true**: Backup recovery is supported.
	//
	// - **false**: Backup recovery is not supported.
	//
	// example:
	//
	// true
	SupportRestore *bool `json:"SupportRestore,omitempty" xml:"SupportRestore,omitempty"`
	// Tag key-value pairs.
	Tags *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttributeTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Struct"`
	// vSwitch ID.
	//
	// example:
	//
	// vsw-bp1cpq8mr64paltkb****
	VSwitchId *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	// Indicates whether vector engine optimization is enabled. The values are as follows:
	//
	// - **enabled**: Indicates that vector engine optimization is enabled.
	//
	// - **disabled**: Indicates that vector engine optimization is disabled.
	//
	// example:
	//
	// enabled
	VectorConfigurationStatus *string `json:"VectorConfigurationStatus,omitempty" xml:"VectorConfigurationStatus,omitempty"`
	// VPC ID.
	//
	// example:
	//
	// vpc-bp19ame5m1r3oejns****
	VpcId *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	// Zone ID.
	//
	// example:
	//
	// cn-hangzhou-j
	ZoneId *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetAvailabilityValue(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.AvailabilityValue = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetConnectionMode(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.ConnectionMode = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetConnectionString(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.ConnectionString = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetCoreVersion(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.CoreVersion = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetCpuCores(v int32) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.CpuCores = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetCpuCoresPerNode(v int32) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.CpuCoresPerNode = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetCreationTime(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.CreationTime = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetDBInstanceCategory(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.DBInstanceCategory = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetDBInstanceClass(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.DBInstanceClass = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetDBInstanceClassType(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.DBInstanceClassType = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetDBInstanceCpuCores(v int32) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.DBInstanceCpuCores = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetDBInstanceDescription(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.DBInstanceDescription = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetDBInstanceDiskMBPS(v int64) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.DBInstanceDiskMBPS = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetDBInstanceGroupCount(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.DBInstanceGroupCount = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetDBInstanceId(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetDBInstanceMemory(v int64) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.DBInstanceMemory = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetDBInstanceMode(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.DBInstanceMode = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetDBInstanceNetType(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.DBInstanceNetType = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetDBInstanceStatus(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.DBInstanceStatus = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetDBInstanceStorage(v int64) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.DBInstanceStorage = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetDeployMode(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.DeployMode = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetEncryptionKey(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.EncryptionKey = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetEncryptionType(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.EncryptionType = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetEngine(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.Engine = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetEngineVersion(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.EngineVersion = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetExpireTime(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.ExpireTime = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetHostType(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.HostType = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetIdleTime(v int32) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.IdleTime = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetInstanceNetworkType(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.InstanceNetworkType = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetLockMode(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.LockMode = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetLockReason(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.LockReason = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetMaintainEndTime(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.MaintainEndTime = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetMaintainStartTime(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.MaintainStartTime = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetMasterAISpec(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.MasterAISpec = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetMasterCU(v int32) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.MasterCU = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetMasterNodeNum(v int32) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.MasterNodeNum = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetMaxConnections(v int32) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.MaxConnections = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetMemoryPerNode(v int32) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.MemoryPerNode = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetMemorySize(v int64) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.MemorySize = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetMemoryUnit(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.MemoryUnit = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetMinorVersion(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.MinorVersion = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetPayType(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.PayType = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetPort(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.Port = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetProdType(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.ProdType = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetReadDelayTime(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.ReadDelayTime = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetRegionId(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.RegionId = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetResourceGroupId(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetRunningTime(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.RunningTime = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetSecurityIPList(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.SecurityIPList = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetSegDiskPerformanceLevel(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.SegDiskPerformanceLevel = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetSegNodeNum(v int32) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.SegNodeNum = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetSegmentAISpec(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.SegmentAISpec = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetSegmentCounts(v int32) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.SegmentCounts = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetServerlessMode(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.ServerlessMode = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetServerlessResource(v int32) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.ServerlessResource = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetStandbyZoneId(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.StandbyZoneId = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetStartTime(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.StartTime = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetStoragePerNode(v int32) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.StoragePerNode = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetStorageSize(v int64) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.StorageSize = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetStorageType(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.StorageType = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetStorageUnit(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.StorageUnit = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetSupportRestore(v bool) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.SupportRestore = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetTags(v *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttributeTags) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.Tags = v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetVSwitchId(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.VSwitchId = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetVectorConfigurationStatus(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.VectorConfigurationStatus = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetVpcId(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.VpcId = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetZoneId(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.ZoneId = &v
	return s
}

type DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttributeTags struct {
	Tag []*DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttributeTagsTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttributeTags) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttributeTags) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttributeTags) SetTag(v []*DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttributeTagsTag) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttributeTags {
	s.Tag = v
	return s
}

type DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttributeTagsTag struct {
	// Tag key.
	//
	// example:
	//
	// test-key
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// Tag value.
	//
	// example:
	//
	// test-value
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttributeTagsTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttributeTagsTag) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttributeTagsTag) SetKey(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttributeTagsTag {
	s.Key = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttributeTagsTag) SetValue(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttributeTagsTag {
	s.Value = &v
	return s
}

type DescribeDBInstanceAttributeResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeDBInstanceAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeDBInstanceAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceAttributeResponse) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceAttributeResponse) SetHeaders(v map[string]*string) *DescribeDBInstanceAttributeResponse {
	s.Headers = v
	return s
}

func (s *DescribeDBInstanceAttributeResponse) SetStatusCode(v int32) *DescribeDBInstanceAttributeResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponse) SetBody(v *DescribeDBInstanceAttributeResponseBody) *DescribeDBInstanceAttributeResponse {
	s.Body = v
	return s
}

type DescribeDBInstanceDataBloatRequest struct {
	// The ID of the instance.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the details of all AnalyticDB for PostgreSQL instances in a specific region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The name of the database.
	//
	// example:
	//
	// test
	Database *string `json:"Database,omitempty" xml:"Database,omitempty"`
	// The sorting order.
	//
	// example:
	//
	// {Field: TableName, Type: Desc}
	OrderBy *string `json:"OrderBy,omitempty" xml:"OrderBy,omitempty"`
	// The number of the page to return. The value must be an integer that is greater than 0. Default value: **1**.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries to return on each page. Valid values:
	//
	// 	- **30**
	//
	// 	- **50**
	//
	// 	- **100**
	//
	// Default value: **30**.
	//
	// example:
	//
	// 30
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s DescribeDBInstanceDataBloatRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceDataBloatRequest) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceDataBloatRequest) SetDBInstanceId(v string) *DescribeDBInstanceDataBloatRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDBInstanceDataBloatRequest) SetDatabase(v string) *DescribeDBInstanceDataBloatRequest {
	s.Database = &v
	return s
}

func (s *DescribeDBInstanceDataBloatRequest) SetOrderBy(v string) *DescribeDBInstanceDataBloatRequest {
	s.OrderBy = &v
	return s
}

func (s *DescribeDBInstanceDataBloatRequest) SetPageNumber(v int32) *DescribeDBInstanceDataBloatRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeDBInstanceDataBloatRequest) SetPageSize(v int32) *DescribeDBInstanceDataBloatRequest {
	s.PageSize = &v
	return s
}

type DescribeDBInstanceDataBloatResponseBody struct {
	// The queried data bloat.
	Items []*DescribeDBInstanceDataBloatResponseBodyItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Repeated"`
	// The page number of the returned page.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// B4CAF581-2AC7-41AD-8940-D56DF7AADF5B
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of entries.
	//
	// example:
	//
	// 1
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeDBInstanceDataBloatResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceDataBloatResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceDataBloatResponseBody) SetItems(v []*DescribeDBInstanceDataBloatResponseBodyItems) *DescribeDBInstanceDataBloatResponseBody {
	s.Items = v
	return s
}

func (s *DescribeDBInstanceDataBloatResponseBody) SetPageNumber(v int32) *DescribeDBInstanceDataBloatResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeDBInstanceDataBloatResponseBody) SetRequestId(v string) *DescribeDBInstanceDataBloatResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDBInstanceDataBloatResponseBody) SetTotalCount(v int32) *DescribeDBInstanceDataBloatResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeDBInstanceDataBloatResponseBodyItems struct {
	// The coefficient of data bloat. It is calculated by using the following formula:
	//
	// Bloat coefficient = Number of dead rows/Number of active rows.
	//
	// example:
	//
	// 1.03
	BloatCeoff *string `json:"BloatCeoff,omitempty" xml:"BloatCeoff,omitempty"`
	// The bloat size of the table. It indicates the amount of space that can be released.
	//
	// example:
	//
	// 0.2MB
	BloatSize *string `json:"BloatSize,omitempty" xml:"BloatSize,omitempty"`
	// The name of the database.
	//
	// example:
	//
	// adbtest
	DatabaseName *string `json:"DatabaseName,omitempty" xml:"DatabaseName,omitempty"`
	// The expected size of the table.
	//
	// It indicates the size of the table that has no data bloat.
	//
	// example:
	//
	// 1MB
	ExpectTableSize *string `json:"ExpectTableSize,omitempty" xml:"ExpectTableSize,omitempty"`
	// The actual size of the table.
	//
	// example:
	//
	// 1.2MB
	RealTableSize *string `json:"RealTableSize,omitempty" xml:"RealTableSize,omitempty"`
	// The name of the schema.
	//
	// example:
	//
	// schema1
	SchemaName *string `json:"SchemaName,omitempty" xml:"SchemaName,omitempty"`
	// The sequence number.
	//
	// example:
	//
	// 1
	Sequence *int32 `json:"Sequence,omitempty" xml:"Sequence,omitempty"`
	// The storage type of the table. Valid values:
	//
	// 	- **Heap Table**
	//
	// 	- **Append-Only Heap Table**
	//
	// 	- **Append-Only Columnar Table**
	//
	// example:
	//
	// Heap Table
	StorageType *string `json:"StorageType,omitempty" xml:"StorageType,omitempty"`
	// This parameter is not returned.
	//
	// example:
	//
	// null
	SuggestedAction *string `json:"SuggestedAction,omitempty" xml:"SuggestedAction,omitempty"`
	// The name of the table.
	//
	// example:
	//
	// tab1
	TableName *string `json:"TableName,omitempty" xml:"TableName,omitempty"`
	// The time when the table was last deleted, inserted, or updated.
	//
	// example:
	//
	// 2022-08-08T20:00:00Z
	TimeLastUpdated *string `json:"TimeLastUpdated,omitempty" xml:"TimeLastUpdated,omitempty"`
	// The time when the table was last vacuumed. The time is displayed in UTC.
	//
	// example:
	//
	// 2022-08-08T16:00:00Z
	TimeLastVacuumed *string `json:"TimeLastVacuumed,omitempty" xml:"TimeLastVacuumed,omitempty"`
}

func (s DescribeDBInstanceDataBloatResponseBodyItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceDataBloatResponseBodyItems) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceDataBloatResponseBodyItems) SetBloatCeoff(v string) *DescribeDBInstanceDataBloatResponseBodyItems {
	s.BloatCeoff = &v
	return s
}

func (s *DescribeDBInstanceDataBloatResponseBodyItems) SetBloatSize(v string) *DescribeDBInstanceDataBloatResponseBodyItems {
	s.BloatSize = &v
	return s
}

func (s *DescribeDBInstanceDataBloatResponseBodyItems) SetDatabaseName(v string) *DescribeDBInstanceDataBloatResponseBodyItems {
	s.DatabaseName = &v
	return s
}

func (s *DescribeDBInstanceDataBloatResponseBodyItems) SetExpectTableSize(v string) *DescribeDBInstanceDataBloatResponseBodyItems {
	s.ExpectTableSize = &v
	return s
}

func (s *DescribeDBInstanceDataBloatResponseBodyItems) SetRealTableSize(v string) *DescribeDBInstanceDataBloatResponseBodyItems {
	s.RealTableSize = &v
	return s
}

func (s *DescribeDBInstanceDataBloatResponseBodyItems) SetSchemaName(v string) *DescribeDBInstanceDataBloatResponseBodyItems {
	s.SchemaName = &v
	return s
}

func (s *DescribeDBInstanceDataBloatResponseBodyItems) SetSequence(v int32) *DescribeDBInstanceDataBloatResponseBodyItems {
	s.Sequence = &v
	return s
}

func (s *DescribeDBInstanceDataBloatResponseBodyItems) SetStorageType(v string) *DescribeDBInstanceDataBloatResponseBodyItems {
	s.StorageType = &v
	return s
}

func (s *DescribeDBInstanceDataBloatResponseBodyItems) SetSuggestedAction(v string) *DescribeDBInstanceDataBloatResponseBodyItems {
	s.SuggestedAction = &v
	return s
}

func (s *DescribeDBInstanceDataBloatResponseBodyItems) SetTableName(v string) *DescribeDBInstanceDataBloatResponseBodyItems {
	s.TableName = &v
	return s
}

func (s *DescribeDBInstanceDataBloatResponseBodyItems) SetTimeLastUpdated(v string) *DescribeDBInstanceDataBloatResponseBodyItems {
	s.TimeLastUpdated = &v
	return s
}

func (s *DescribeDBInstanceDataBloatResponseBodyItems) SetTimeLastVacuumed(v string) *DescribeDBInstanceDataBloatResponseBodyItems {
	s.TimeLastVacuumed = &v
	return s
}

type DescribeDBInstanceDataBloatResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeDBInstanceDataBloatResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeDBInstanceDataBloatResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceDataBloatResponse) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceDataBloatResponse) SetHeaders(v map[string]*string) *DescribeDBInstanceDataBloatResponse {
	s.Headers = v
	return s
}

func (s *DescribeDBInstanceDataBloatResponse) SetStatusCode(v int32) *DescribeDBInstanceDataBloatResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDBInstanceDataBloatResponse) SetBody(v *DescribeDBInstanceDataBloatResponseBody) *DescribeDBInstanceDataBloatResponse {
	s.Body = v
	return s
}

type DescribeDBInstanceDataSkewRequest struct {
	// The ID of the instance.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the details of all AnalyticDB for PostgreSQL instances in a specific region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The name of the database.
	//
	// example:
	//
	// test
	Database *string `json:"Database,omitempty" xml:"Database,omitempty"`
	// order by condition
	//
	// example:
	//
	// {Field: TableSkew, Type: Desc}
	OrderBy *string `json:"OrderBy,omitempty" xml:"OrderBy,omitempty"`
	// The number of the page to return. The value must be an integer that is greater than 0. Default value: **1**.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. Valid values:
	//
	// 	- **30**
	//
	// 	- **50**
	//
	// 	- **100**
	//
	// Default value: **30**.
	//
	// example:
	//
	// 20
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s DescribeDBInstanceDataSkewRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceDataSkewRequest) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceDataSkewRequest) SetDBInstanceId(v string) *DescribeDBInstanceDataSkewRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDBInstanceDataSkewRequest) SetDatabase(v string) *DescribeDBInstanceDataSkewRequest {
	s.Database = &v
	return s
}

func (s *DescribeDBInstanceDataSkewRequest) SetOrderBy(v string) *DescribeDBInstanceDataSkewRequest {
	s.OrderBy = &v
	return s
}

func (s *DescribeDBInstanceDataSkewRequest) SetPageNumber(v int32) *DescribeDBInstanceDataSkewRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeDBInstanceDataSkewRequest) SetPageSize(v int32) *DescribeDBInstanceDataSkewRequest {
	s.PageSize = &v
	return s
}

type DescribeDBInstanceDataSkewResponseBody struct {
	// Details about data skew.
	Items []*DescribeDBInstanceDataSkewResponseBodyItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Repeated"`
	// The page number of the returned page.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// B4CAF581-2AC7-41AD-8940-D56DF7AADF5B
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 100
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeDBInstanceDataSkewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceDataSkewResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceDataSkewResponseBody) SetItems(v []*DescribeDBInstanceDataSkewResponseBodyItems) *DescribeDBInstanceDataSkewResponseBody {
	s.Items = v
	return s
}

func (s *DescribeDBInstanceDataSkewResponseBody) SetPageNumber(v int32) *DescribeDBInstanceDataSkewResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeDBInstanceDataSkewResponseBody) SetRequestId(v string) *DescribeDBInstanceDataSkewResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDBInstanceDataSkewResponseBody) SetTotalCount(v int32) *DescribeDBInstanceDataSkewResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeDBInstanceDataSkewResponseBodyItems struct {
	// The name of the database.
	//
	// example:
	//
	// adbtest
	DatabaseName *string `json:"DatabaseName,omitempty" xml:"DatabaseName,omitempty"`
	// The distribution key of the table.
	//
	// example:
	//
	// ItemId
	DistributeKey *string `json:"DistributeKey,omitempty" xml:"DistributeKey,omitempty"`
	// The owner of the table.
	//
	// example:
	//
	// adbpguser
	Owner *string `json:"Owner,omitempty" xml:"Owner,omitempty"`
	// The name of the schema.
	//
	// example:
	//
	// schema1
	SchemaName *string `json:"SchemaName,omitempty" xml:"SchemaName,omitempty"`
	// The sequence number of the data skew case. All data skew cases are sorted by severity in descending order.
	//
	// example:
	//
	// 1
	Sequence *int32 `json:"Sequence,omitempty" xml:"Sequence,omitempty"`
	// The name of the table.
	//
	// example:
	//
	// tab1
	TableName *string `json:"TableName,omitempty" xml:"TableName,omitempty"`
	// The total number of rows in the table.
	//
	// example:
	//
	// 100000
	TableSize *string `json:"TableSize,omitempty" xml:"TableSize,omitempty"`
	// The skew ratio of the table. Valid values: 0 to 100. Unit: %. A greater value indicates that the table is more severely skewed. A smaller value indicates less impact on query performance. A value of 0 indicates no data skew.
	//
	// example:
	//
	// 10.23
	TableSkew *string `json:"TableSkew,omitempty" xml:"TableSkew,omitempty"`
	// The time when the table was last deleted, inserted, or updated.
	//
	// example:
	//
	// 2020-09-08T20:00:00Z
	TimeLastUpdated *string `json:"TimeLastUpdated,omitempty" xml:"TimeLastUpdated,omitempty"`
}

func (s DescribeDBInstanceDataSkewResponseBodyItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceDataSkewResponseBodyItems) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceDataSkewResponseBodyItems) SetDatabaseName(v string) *DescribeDBInstanceDataSkewResponseBodyItems {
	s.DatabaseName = &v
	return s
}

func (s *DescribeDBInstanceDataSkewResponseBodyItems) SetDistributeKey(v string) *DescribeDBInstanceDataSkewResponseBodyItems {
	s.DistributeKey = &v
	return s
}

func (s *DescribeDBInstanceDataSkewResponseBodyItems) SetOwner(v string) *DescribeDBInstanceDataSkewResponseBodyItems {
	s.Owner = &v
	return s
}

func (s *DescribeDBInstanceDataSkewResponseBodyItems) SetSchemaName(v string) *DescribeDBInstanceDataSkewResponseBodyItems {
	s.SchemaName = &v
	return s
}

func (s *DescribeDBInstanceDataSkewResponseBodyItems) SetSequence(v int32) *DescribeDBInstanceDataSkewResponseBodyItems {
	s.Sequence = &v
	return s
}

func (s *DescribeDBInstanceDataSkewResponseBodyItems) SetTableName(v string) *DescribeDBInstanceDataSkewResponseBodyItems {
	s.TableName = &v
	return s
}

func (s *DescribeDBInstanceDataSkewResponseBodyItems) SetTableSize(v string) *DescribeDBInstanceDataSkewResponseBodyItems {
	s.TableSize = &v
	return s
}

func (s *DescribeDBInstanceDataSkewResponseBodyItems) SetTableSkew(v string) *DescribeDBInstanceDataSkewResponseBodyItems {
	s.TableSkew = &v
	return s
}

func (s *DescribeDBInstanceDataSkewResponseBodyItems) SetTimeLastUpdated(v string) *DescribeDBInstanceDataSkewResponseBodyItems {
	s.TimeLastUpdated = &v
	return s
}

type DescribeDBInstanceDataSkewResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeDBInstanceDataSkewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeDBInstanceDataSkewResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceDataSkewResponse) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceDataSkewResponse) SetHeaders(v map[string]*string) *DescribeDBInstanceDataSkewResponse {
	s.Headers = v
	return s
}

func (s *DescribeDBInstanceDataSkewResponse) SetStatusCode(v int32) *DescribeDBInstanceDataSkewResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDBInstanceDataSkewResponse) SetBody(v *DescribeDBInstanceDataSkewResponseBody) *DescribeDBInstanceDataSkewResponse {
	s.Body = v
	return s
}

type DescribeDBInstanceDiagnosisSummaryRequest struct {
	// The instance ID.
	//
	// > You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query details about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The page number. Pages start from page 1. Default value: **1**.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. Valid values:
	//
	// 	- **20**
	//
	// 	- **50**
	//
	// 	- **100**
	//
	// Default value: **20**.
	//
	// example:
	//
	// 20
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The role state of the node. It specifies whether a primary/secondary switchover occurs. Valid values:
	//
	// 	- **normal**: The node role is normal. No primary/secondary switchover occurs.
	//
	// 	- **reverse**: The node role is reversed. A primary/secondary switchover occurs.
	//
	// example:
	//
	// normal
	RolePreferd *string `json:"RolePreferd,omitempty" xml:"RolePreferd,omitempty"`
	// The running state of the node. Valid values:
	//
	// 	- **UP**: The node is running.
	//
	// 	- **DOWN**: The node is faulty.
	//
	// If you do not specify this parameter, the information about nodes in all running states is returned.
	//
	// example:
	//
	// UP
	StartStatus *string `json:"StartStatus,omitempty" xml:"StartStatus,omitempty"`
	// The data synchronization state of the node. Valid values:
	//
	// 	- **synced**: The node data is synchronized.
	//
	// 	- **notSyncing**: The node data is not synchronized.
	//
	// If you do not specify this parameter, the information about nodes in all synchronization states is returned.
	//
	// example:
	//
	// synced
	SyncMode *string `json:"SyncMode,omitempty" xml:"SyncMode,omitempty"`
}

func (s DescribeDBInstanceDiagnosisSummaryRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceDiagnosisSummaryRequest) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceDiagnosisSummaryRequest) SetDBInstanceId(v string) *DescribeDBInstanceDiagnosisSummaryRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDBInstanceDiagnosisSummaryRequest) SetPageNumber(v int32) *DescribeDBInstanceDiagnosisSummaryRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeDBInstanceDiagnosisSummaryRequest) SetPageSize(v int32) *DescribeDBInstanceDiagnosisSummaryRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeDBInstanceDiagnosisSummaryRequest) SetRolePreferd(v string) *DescribeDBInstanceDiagnosisSummaryRequest {
	s.RolePreferd = &v
	return s
}

func (s *DescribeDBInstanceDiagnosisSummaryRequest) SetStartStatus(v string) *DescribeDBInstanceDiagnosisSummaryRequest {
	s.StartStatus = &v
	return s
}

func (s *DescribeDBInstanceDiagnosisSummaryRequest) SetSyncMode(v string) *DescribeDBInstanceDiagnosisSummaryRequest {
	s.SyncMode = &v
	return s
}

type DescribeDBInstanceDiagnosisSummaryResponseBody struct {
	// The group ID.
	Items []*DescribeDBInstanceDiagnosisSummaryResponseBodyItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Repeated"`
	// The state information about the coordinator node.
	MasterStatusInfo *DescribeDBInstanceDiagnosisSummaryResponseBodyMasterStatusInfo `json:"MasterStatusInfo,omitempty" xml:"MasterStatusInfo,omitempty" type:"Struct"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *string `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 070534EC-78D5-5519-83CC-E7B1A9213483
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The state information about compute nodes.
	SegmentStatusInfo *DescribeDBInstanceDiagnosisSummaryResponseBodySegmentStatusInfo `json:"SegmentStatusInfo,omitempty" xml:"SegmentStatusInfo,omitempty" type:"Struct"`
	// The total number of entries returned.
	//
	// example:
	//
	// 6
	TotalCount *string `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeDBInstanceDiagnosisSummaryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceDiagnosisSummaryResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceDiagnosisSummaryResponseBody) SetItems(v []*DescribeDBInstanceDiagnosisSummaryResponseBodyItems) *DescribeDBInstanceDiagnosisSummaryResponseBody {
	s.Items = v
	return s
}

func (s *DescribeDBInstanceDiagnosisSummaryResponseBody) SetMasterStatusInfo(v *DescribeDBInstanceDiagnosisSummaryResponseBodyMasterStatusInfo) *DescribeDBInstanceDiagnosisSummaryResponseBody {
	s.MasterStatusInfo = v
	return s
}

func (s *DescribeDBInstanceDiagnosisSummaryResponseBody) SetPageNumber(v string) *DescribeDBInstanceDiagnosisSummaryResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeDBInstanceDiagnosisSummaryResponseBody) SetRequestId(v string) *DescribeDBInstanceDiagnosisSummaryResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDBInstanceDiagnosisSummaryResponseBody) SetSegmentStatusInfo(v *DescribeDBInstanceDiagnosisSummaryResponseBodySegmentStatusInfo) *DescribeDBInstanceDiagnosisSummaryResponseBody {
	s.SegmentStatusInfo = v
	return s
}

func (s *DescribeDBInstanceDiagnosisSummaryResponseBody) SetTotalCount(v string) *DescribeDBInstanceDiagnosisSummaryResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeDBInstanceDiagnosisSummaryResponseBodyItems struct {
	// The name of the node.
	//
	// example:
	//
	// gp-t4np568qe9710****-master-100984919
	Hostname *string `json:"Hostname,omitempty" xml:"Hostname,omitempty"`
	// The IP address of the node.
	//
	// example:
	//
	// 192.168.XX.XX
	NodeAddress *string `json:"NodeAddress,omitempty" xml:"NodeAddress,omitempty"`
	// The node group ID.
	//
	// example:
	//
	// -1
	NodeCID *string `json:"NodeCID,omitempty" xml:"NodeCID,omitempty"`
	// The node ID.
	//
	// example:
	//
	// 1
	NodeID *string `json:"NodeID,omitempty" xml:"NodeID,omitempty"`
	// The name of the host where the node resides.
	//
	// example:
	//
	// ap-southeast-1.i-t4n4c4ryr0yr441d****
	NodeName *string `json:"NodeName,omitempty" xml:"NodeName,omitempty"`
	// The port number of the node.
	//
	// example:
	//
	// 3000
	NodePort *string `json:"NodePort,omitempty" xml:"NodePort,omitempty"`
	// The initial role of the node. Valid values:
	//
	// 	- **primary**: primary node.
	//
	// 	- **mirror**: secondary node.
	//
	// If the value of this parameter is the same as that of **NodeRole**, no primary/secondary switchover occurs. If the value of this parameter is different from that of **NodeRole**, a primary/secondary switchover occurs.
	//
	// example:
	//
	// primary
	NodePreferredRole *string `json:"NodePreferredRole,omitempty" xml:"NodePreferredRole,omitempty"`
	// The data synchronization state of the node. Valid values:
	//
	// 	- **Synced**: The node data is synchronized.
	//
	// 	- **Not Syncing**: The node data is not synchronized.
	//
	// 	- **No sync required**: Data synchronization is not required. This value may be returned only for the coordinator node.
	//
	// example:
	//
	// Synced
	NodeReplicationMode *string `json:"NodeReplicationMode,omitempty" xml:"NodeReplicationMode,omitempty"`
	// The current role of the node. Valid values:
	//
	// 	- **primary**: primary node.
	//
	// 	- **mirror**: secondary node.
	//
	// example:
	//
	// primary
	NodeRole *string `json:"NodeRole,omitempty" xml:"NodeRole,omitempty"`
	// The running state of the node. Valid values:
	//
	// 	- **UP**: The node is running.
	//
	// 	- **DOWN**: The node is faulty.
	//
	// example:
	//
	// UP
	NodeStatus *string `json:"NodeStatus,omitempty" xml:"NodeStatus,omitempty"`
	// The type of the node. Valid values:
	//
	// 	- **master**: primary coordinator node.
	//
	// 	- **slave**: standby coordinator node.
	//
	// 	- **segment**: compute node.
	//
	// example:
	//
	// master
	NodeType *string `json:"NodeType,omitempty" xml:"NodeType,omitempty"`
}

func (s DescribeDBInstanceDiagnosisSummaryResponseBodyItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceDiagnosisSummaryResponseBodyItems) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceDiagnosisSummaryResponseBodyItems) SetHostname(v string) *DescribeDBInstanceDiagnosisSummaryResponseBodyItems {
	s.Hostname = &v
	return s
}

func (s *DescribeDBInstanceDiagnosisSummaryResponseBodyItems) SetNodeAddress(v string) *DescribeDBInstanceDiagnosisSummaryResponseBodyItems {
	s.NodeAddress = &v
	return s
}

func (s *DescribeDBInstanceDiagnosisSummaryResponseBodyItems) SetNodeCID(v string) *DescribeDBInstanceDiagnosisSummaryResponseBodyItems {
	s.NodeCID = &v
	return s
}

func (s *DescribeDBInstanceDiagnosisSummaryResponseBodyItems) SetNodeID(v string) *DescribeDBInstanceDiagnosisSummaryResponseBodyItems {
	s.NodeID = &v
	return s
}

func (s *DescribeDBInstanceDiagnosisSummaryResponseBodyItems) SetNodeName(v string) *DescribeDBInstanceDiagnosisSummaryResponseBodyItems {
	s.NodeName = &v
	return s
}

func (s *DescribeDBInstanceDiagnosisSummaryResponseBodyItems) SetNodePort(v string) *DescribeDBInstanceDiagnosisSummaryResponseBodyItems {
	s.NodePort = &v
	return s
}

func (s *DescribeDBInstanceDiagnosisSummaryResponseBodyItems) SetNodePreferredRole(v string) *DescribeDBInstanceDiagnosisSummaryResponseBodyItems {
	s.NodePreferredRole = &v
	return s
}

func (s *DescribeDBInstanceDiagnosisSummaryResponseBodyItems) SetNodeReplicationMode(v string) *DescribeDBInstanceDiagnosisSummaryResponseBodyItems {
	s.NodeReplicationMode = &v
	return s
}

func (s *DescribeDBInstanceDiagnosisSummaryResponseBodyItems) SetNodeRole(v string) *DescribeDBInstanceDiagnosisSummaryResponseBodyItems {
	s.NodeRole = &v
	return s
}

func (s *DescribeDBInstanceDiagnosisSummaryResponseBodyItems) SetNodeStatus(v string) *DescribeDBInstanceDiagnosisSummaryResponseBodyItems {
	s.NodeStatus = &v
	return s
}

func (s *DescribeDBInstanceDiagnosisSummaryResponseBodyItems) SetNodeType(v string) *DescribeDBInstanceDiagnosisSummaryResponseBodyItems {
	s.NodeType = &v
	return s
}

type DescribeDBInstanceDiagnosisSummaryResponseBodyMasterStatusInfo struct {
	// The number of abnormal nodes.
	//
	// example:
	//
	// 0
	ExceptionNodeNum *int32 `json:"ExceptionNodeNum,omitempty" xml:"ExceptionNodeNum,omitempty"`
	// The number of normal nodes.
	//
	// example:
	//
	// 2
	NormalNodeNum *int32 `json:"NormalNodeNum,omitempty" xml:"NormalNodeNum,omitempty"`
	// The number of nodes whose roles are reversed.
	//
	// example:
	//
	// 0
	NotPreferredNodeNum *int32 `json:"NotPreferredNodeNum,omitempty" xml:"NotPreferredNodeNum,omitempty"`
	// The number of unsynchronized nodes.
	//
	// example:
	//
	// 0
	NotSyncingNodeNum *int32 `json:"NotSyncingNodeNum,omitempty" xml:"NotSyncingNodeNum,omitempty"`
	// The number of nodes whose roles are normal.
	//
	// example:
	//
	// 2
	PreferredNodeNum *int32 `json:"PreferredNodeNum,omitempty" xml:"PreferredNodeNum,omitempty"`
	// The number of synchronized nodes.
	//
	// example:
	//
	// 1
	SyncedNodeNum *int32 `json:"SyncedNodeNum,omitempty" xml:"SyncedNodeNum,omitempty"`
}

func (s DescribeDBInstanceDiagnosisSummaryResponseBodyMasterStatusInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceDiagnosisSummaryResponseBodyMasterStatusInfo) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceDiagnosisSummaryResponseBodyMasterStatusInfo) SetExceptionNodeNum(v int32) *DescribeDBInstanceDiagnosisSummaryResponseBodyMasterStatusInfo {
	s.ExceptionNodeNum = &v
	return s
}

func (s *DescribeDBInstanceDiagnosisSummaryResponseBodyMasterStatusInfo) SetNormalNodeNum(v int32) *DescribeDBInstanceDiagnosisSummaryResponseBodyMasterStatusInfo {
	s.NormalNodeNum = &v
	return s
}

func (s *DescribeDBInstanceDiagnosisSummaryResponseBodyMasterStatusInfo) SetNotPreferredNodeNum(v int32) *DescribeDBInstanceDiagnosisSummaryResponseBodyMasterStatusInfo {
	s.NotPreferredNodeNum = &v
	return s
}

func (s *DescribeDBInstanceDiagnosisSummaryResponseBodyMasterStatusInfo) SetNotSyncingNodeNum(v int32) *DescribeDBInstanceDiagnosisSummaryResponseBodyMasterStatusInfo {
	s.NotSyncingNodeNum = &v
	return s
}

func (s *DescribeDBInstanceDiagnosisSummaryResponseBodyMasterStatusInfo) SetPreferredNodeNum(v int32) *DescribeDBInstanceDiagnosisSummaryResponseBodyMasterStatusInfo {
	s.PreferredNodeNum = &v
	return s
}

func (s *DescribeDBInstanceDiagnosisSummaryResponseBodyMasterStatusInfo) SetSyncedNodeNum(v int32) *DescribeDBInstanceDiagnosisSummaryResponseBodyMasterStatusInfo {
	s.SyncedNodeNum = &v
	return s
}

type DescribeDBInstanceDiagnosisSummaryResponseBodySegmentStatusInfo struct {
	// The number of abnormal nodes.
	//
	// example:
	//
	// 0
	ExceptionNodeNum *int32 `json:"ExceptionNodeNum,omitempty" xml:"ExceptionNodeNum,omitempty"`
	// The number of normal nodes.
	//
	// example:
	//
	// 4
	NormalNodeNum *int32 `json:"NormalNodeNum,omitempty" xml:"NormalNodeNum,omitempty"`
	// The number of nodes whose roles are reversed.
	//
	// example:
	//
	// 0
	NotPreferredNodeNum *int32 `json:"NotPreferredNodeNum,omitempty" xml:"NotPreferredNodeNum,omitempty"`
	// The number of unsynchronized nodes.
	//
	// example:
	//
	// 4
	NotSyncingNodeNum *int32 `json:"NotSyncingNodeNum,omitempty" xml:"NotSyncingNodeNum,omitempty"`
	// The number of nodes whose roles are normal.
	//
	// example:
	//
	// 4
	PreferredNodeNum *int32 `json:"PreferredNodeNum,omitempty" xml:"PreferredNodeNum,omitempty"`
	// The number of synchronized nodes.
	//
	// example:
	//
	// 0
	SyncedNodeNum *int32 `json:"SyncedNodeNum,omitempty" xml:"SyncedNodeNum,omitempty"`
}

func (s DescribeDBInstanceDiagnosisSummaryResponseBodySegmentStatusInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceDiagnosisSummaryResponseBodySegmentStatusInfo) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceDiagnosisSummaryResponseBodySegmentStatusInfo) SetExceptionNodeNum(v int32) *DescribeDBInstanceDiagnosisSummaryResponseBodySegmentStatusInfo {
	s.ExceptionNodeNum = &v
	return s
}

func (s *DescribeDBInstanceDiagnosisSummaryResponseBodySegmentStatusInfo) SetNormalNodeNum(v int32) *DescribeDBInstanceDiagnosisSummaryResponseBodySegmentStatusInfo {
	s.NormalNodeNum = &v
	return s
}

func (s *DescribeDBInstanceDiagnosisSummaryResponseBodySegmentStatusInfo) SetNotPreferredNodeNum(v int32) *DescribeDBInstanceDiagnosisSummaryResponseBodySegmentStatusInfo {
	s.NotPreferredNodeNum = &v
	return s
}

func (s *DescribeDBInstanceDiagnosisSummaryResponseBodySegmentStatusInfo) SetNotSyncingNodeNum(v int32) *DescribeDBInstanceDiagnosisSummaryResponseBodySegmentStatusInfo {
	s.NotSyncingNodeNum = &v
	return s
}

func (s *DescribeDBInstanceDiagnosisSummaryResponseBodySegmentStatusInfo) SetPreferredNodeNum(v int32) *DescribeDBInstanceDiagnosisSummaryResponseBodySegmentStatusInfo {
	s.PreferredNodeNum = &v
	return s
}

func (s *DescribeDBInstanceDiagnosisSummaryResponseBodySegmentStatusInfo) SetSyncedNodeNum(v int32) *DescribeDBInstanceDiagnosisSummaryResponseBodySegmentStatusInfo {
	s.SyncedNodeNum = &v
	return s
}

type DescribeDBInstanceDiagnosisSummaryResponse struct {
	Headers    map[string]*string                              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeDBInstanceDiagnosisSummaryResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeDBInstanceDiagnosisSummaryResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceDiagnosisSummaryResponse) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceDiagnosisSummaryResponse) SetHeaders(v map[string]*string) *DescribeDBInstanceDiagnosisSummaryResponse {
	s.Headers = v
	return s
}

func (s *DescribeDBInstanceDiagnosisSummaryResponse) SetStatusCode(v int32) *DescribeDBInstanceDiagnosisSummaryResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDBInstanceDiagnosisSummaryResponse) SetBody(v *DescribeDBInstanceDiagnosisSummaryResponseBody) *DescribeDBInstanceDiagnosisSummaryResponse {
	s.Body = v
	return s
}

type DescribeDBInstanceErrorLogRequest struct {
	// The instance ID.
	//
	// > You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The name of the database.
	//
	// example:
	//
	// adbtest
	Database *string `json:"Database,omitempty" xml:"Database,omitempty"`
	// The end of the time range to query. Specify the time in the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm*Z format. The time must be in UTC. The end time must be later than the start time.
	//
	// example:
	//
	// 2022-04-25T06:59Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// This parameter is not supported in Alibaba Cloud public cloud.
	//
	// example:
	//
	// null
	Host *string `json:"Host,omitempty" xml:"Host,omitempty"`
	// One or more keywords that are used to query error logs.
	//
	// example:
	//
	// error
	Keywords *string `json:"Keywords,omitempty" xml:"Keywords,omitempty"`
	// The level of the logs to query. Valid values:
	//
	// 	- **ALL**: queries all error logs.
	//
	// 	- **PANIC**: queries only abnormal logs.
	//
	// 	- **FATAL**: queries only critical logs.
	//
	// 	- **ERROR**: queries only error logs.
	//
	// example:
	//
	// ALL
	LogLevel *string `json:"LogLevel,omitempty" xml:"LogLevel,omitempty"`
	// The page number. Pages start from page 1. Default value: **1**.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. Valid values:
	//
	// 	- **20**
	//
	// 	- **50**
	//
	// 	- **100**
	//
	// Default value: **20**.
	//
	// example:
	//
	// 20
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The beginning of the time range to query. Specify the time in the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm*Z format. The time must be in UTC.
	//
	// example:
	//
	// 2022-04-24T06:59Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The username.
	//
	// example:
	//
	// adbpguser
	User *string `json:"User,omitempty" xml:"User,omitempty"`
}

func (s DescribeDBInstanceErrorLogRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceErrorLogRequest) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceErrorLogRequest) SetDBInstanceId(v string) *DescribeDBInstanceErrorLogRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDBInstanceErrorLogRequest) SetDatabase(v string) *DescribeDBInstanceErrorLogRequest {
	s.Database = &v
	return s
}

func (s *DescribeDBInstanceErrorLogRequest) SetEndTime(v string) *DescribeDBInstanceErrorLogRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeDBInstanceErrorLogRequest) SetHost(v string) *DescribeDBInstanceErrorLogRequest {
	s.Host = &v
	return s
}

func (s *DescribeDBInstanceErrorLogRequest) SetKeywords(v string) *DescribeDBInstanceErrorLogRequest {
	s.Keywords = &v
	return s
}

func (s *DescribeDBInstanceErrorLogRequest) SetLogLevel(v string) *DescribeDBInstanceErrorLogRequest {
	s.LogLevel = &v
	return s
}

func (s *DescribeDBInstanceErrorLogRequest) SetPageNumber(v int32) *DescribeDBInstanceErrorLogRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeDBInstanceErrorLogRequest) SetPageSize(v int32) *DescribeDBInstanceErrorLogRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeDBInstanceErrorLogRequest) SetStartTime(v string) *DescribeDBInstanceErrorLogRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeDBInstanceErrorLogRequest) SetUser(v string) *DescribeDBInstanceErrorLogRequest {
	s.User = &v
	return s
}

type DescribeDBInstanceErrorLogResponseBody struct {
	// The content of the error log.
	Items []*DescribeDBInstanceErrorLogResponseBodyItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Repeated"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The request ID.
	//
	// example:
	//
	// B4CAF581-2AC7-41AD-8940-D56DF7AADF5B
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 1
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeDBInstanceErrorLogResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceErrorLogResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceErrorLogResponseBody) SetItems(v []*DescribeDBInstanceErrorLogResponseBodyItems) *DescribeDBInstanceErrorLogResponseBody {
	s.Items = v
	return s
}

func (s *DescribeDBInstanceErrorLogResponseBody) SetPageNumber(v int32) *DescribeDBInstanceErrorLogResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeDBInstanceErrorLogResponseBody) SetRequestId(v string) *DescribeDBInstanceErrorLogResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDBInstanceErrorLogResponseBody) SetTotalCount(v int32) *DescribeDBInstanceErrorLogResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeDBInstanceErrorLogResponseBodyItems struct {
	// The name of the database.
	//
	// example:
	//
	// adbtest
	Database *string `json:"Database,omitempty" xml:"Database,omitempty"`
	// This parameter is not supported.
	//
	// example:
	//
	// null
	Host *string `json:"Host,omitempty" xml:"Host,omitempty"`
	// The content of the error log.
	//
	// example:
	//
	// unsupported frontend protocol 2689.28208: server supports 1.0 to 3.0
	LogContext *string `json:"LogContext,omitempty" xml:"LogContext,omitempty"`
	// The level of the queried log.
	//
	// example:
	//
	// FATAL
	LogLevel *string `json:"LogLevel,omitempty" xml:"LogLevel,omitempty"`
	// The time when the log was generated. The time is displayed in UTC.
	//
	// example:
	//
	// 2022-04-24 11:28:14
	Time *int64 `json:"Time,omitempty" xml:"Time,omitempty"`
	// The name of the database account.
	//
	// example:
	//
	// adbpguser
	User *string `json:"User,omitempty" xml:"User,omitempty"`
}

func (s DescribeDBInstanceErrorLogResponseBodyItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceErrorLogResponseBodyItems) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceErrorLogResponseBodyItems) SetDatabase(v string) *DescribeDBInstanceErrorLogResponseBodyItems {
	s.Database = &v
	return s
}

func (s *DescribeDBInstanceErrorLogResponseBodyItems) SetHost(v string) *DescribeDBInstanceErrorLogResponseBodyItems {
	s.Host = &v
	return s
}

func (s *DescribeDBInstanceErrorLogResponseBodyItems) SetLogContext(v string) *DescribeDBInstanceErrorLogResponseBodyItems {
	s.LogContext = &v
	return s
}

func (s *DescribeDBInstanceErrorLogResponseBodyItems) SetLogLevel(v string) *DescribeDBInstanceErrorLogResponseBodyItems {
	s.LogLevel = &v
	return s
}

func (s *DescribeDBInstanceErrorLogResponseBodyItems) SetTime(v int64) *DescribeDBInstanceErrorLogResponseBodyItems {
	s.Time = &v
	return s
}

func (s *DescribeDBInstanceErrorLogResponseBodyItems) SetUser(v string) *DescribeDBInstanceErrorLogResponseBodyItems {
	s.User = &v
	return s
}

type DescribeDBInstanceErrorLogResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeDBInstanceErrorLogResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeDBInstanceErrorLogResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceErrorLogResponse) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceErrorLogResponse) SetHeaders(v map[string]*string) *DescribeDBInstanceErrorLogResponse {
	s.Headers = v
	return s
}

func (s *DescribeDBInstanceErrorLogResponse) SetStatusCode(v int32) *DescribeDBInstanceErrorLogResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDBInstanceErrorLogResponse) SetBody(v *DescribeDBInstanceErrorLogResponseBody) *DescribeDBInstanceErrorLogResponse {
	s.Body = v
	return s
}

type DescribeDBInstanceIPArrayListRequest struct {
	// The name of the IP address whitelist. If you do not specify this parameter, the default whitelist is queried.
	//
	// >  Each instance supports up to 50 IP address whitelists.
	//
	// example:
	//
	// Default
	DBInstanceIPArrayName *string `json:"DBInstanceIPArrayName,omitempty" xml:"DBInstanceIPArrayName,omitempty"`
	// The instance ID.
	//
	// > You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query details about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp***************
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The ID of the resource group to which the instance belongs. For information about how to obtain the ID of a resource group, see [View basic information of a resource group](https://help.aliyun.com/document_detail/151181.html).
	//
	// example:
	//
	// rg-bp67acfmxazb4p****
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
}

func (s DescribeDBInstanceIPArrayListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceIPArrayListRequest) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceIPArrayListRequest) SetDBInstanceIPArrayName(v string) *DescribeDBInstanceIPArrayListRequest {
	s.DBInstanceIPArrayName = &v
	return s
}

func (s *DescribeDBInstanceIPArrayListRequest) SetDBInstanceId(v string) *DescribeDBInstanceIPArrayListRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDBInstanceIPArrayListRequest) SetResourceGroupId(v string) *DescribeDBInstanceIPArrayListRequest {
	s.ResourceGroupId = &v
	return s
}

type DescribeDBInstanceIPArrayListResponseBody struct {
	// The queried IP address whitelists.
	Items *DescribeDBInstanceIPArrayListResponseBodyItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// CB7AA0BF-BE41-480E-A3DC-C97BF85A391B
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeDBInstanceIPArrayListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceIPArrayListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceIPArrayListResponseBody) SetItems(v *DescribeDBInstanceIPArrayListResponseBodyItems) *DescribeDBInstanceIPArrayListResponseBody {
	s.Items = v
	return s
}

func (s *DescribeDBInstanceIPArrayListResponseBody) SetRequestId(v string) *DescribeDBInstanceIPArrayListResponseBody {
	s.RequestId = &v
	return s
}

type DescribeDBInstanceIPArrayListResponseBodyItems struct {
	DBInstanceIPArray []*DescribeDBInstanceIPArrayListResponseBodyItemsDBInstanceIPArray `json:"DBInstanceIPArray,omitempty" xml:"DBInstanceIPArray,omitempty" type:"Repeated"`
}

func (s DescribeDBInstanceIPArrayListResponseBodyItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceIPArrayListResponseBodyItems) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceIPArrayListResponseBodyItems) SetDBInstanceIPArray(v []*DescribeDBInstanceIPArrayListResponseBodyItemsDBInstanceIPArray) *DescribeDBInstanceIPArrayListResponseBodyItems {
	s.DBInstanceIPArray = v
	return s
}

type DescribeDBInstanceIPArrayListResponseBodyItemsDBInstanceIPArray struct {
	// The attribute of the IP address whitelist. By default, this parameter is empty. A whitelist with the `hidden` attribute is not displayed in the console.
	//
	// example:
	//
	// hidden
	DBInstanceIPArrayAttribute *string `json:"DBInstanceIPArrayAttribute,omitempty" xml:"DBInstanceIPArrayAttribute,omitempty"`
	// The name of the IP address whitelist.
	//
	// example:
	//
	// default
	DBInstanceIPArrayName *string `json:"DBInstanceIPArrayName,omitempty" xml:"DBInstanceIPArrayName,omitempty"`
	// The IP addresses listed in the whitelist. Up to 1,000 IP addresses are contained in a whitelist and separated by commas (,). The IP addresses must use one of the following formats:
	//
	// 	- 0.0.0.0/0
	//
	// 	- 10.23.12.24. This is a standard IP address.
	//
	// 	- 10.23.12.24/24. This is a CIDR block. The value `/24` indicates that the prefix of the CIDR block is 24-bit long. You can replace 24 with a value in the range of `1 to 32`.
	//
	// example:
	//
	// 127.0.0.1
	SecurityIPList *string `json:"SecurityIPList,omitempty" xml:"SecurityIPList,omitempty"`
}

func (s DescribeDBInstanceIPArrayListResponseBodyItemsDBInstanceIPArray) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceIPArrayListResponseBodyItemsDBInstanceIPArray) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceIPArrayListResponseBodyItemsDBInstanceIPArray) SetDBInstanceIPArrayAttribute(v string) *DescribeDBInstanceIPArrayListResponseBodyItemsDBInstanceIPArray {
	s.DBInstanceIPArrayAttribute = &v
	return s
}

func (s *DescribeDBInstanceIPArrayListResponseBodyItemsDBInstanceIPArray) SetDBInstanceIPArrayName(v string) *DescribeDBInstanceIPArrayListResponseBodyItemsDBInstanceIPArray {
	s.DBInstanceIPArrayName = &v
	return s
}

func (s *DescribeDBInstanceIPArrayListResponseBodyItemsDBInstanceIPArray) SetSecurityIPList(v string) *DescribeDBInstanceIPArrayListResponseBodyItemsDBInstanceIPArray {
	s.SecurityIPList = &v
	return s
}

type DescribeDBInstanceIPArrayListResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeDBInstanceIPArrayListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeDBInstanceIPArrayListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceIPArrayListResponse) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceIPArrayListResponse) SetHeaders(v map[string]*string) *DescribeDBInstanceIPArrayListResponse {
	s.Headers = v
	return s
}

func (s *DescribeDBInstanceIPArrayListResponse) SetStatusCode(v int32) *DescribeDBInstanceIPArrayListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDBInstanceIPArrayListResponse) SetBody(v *DescribeDBInstanceIPArrayListResponseBody) *DescribeDBInstanceIPArrayListResponse {
	s.Body = v
	return s
}

type DescribeDBInstanceIndexUsageRequest struct {
	// The instance ID.
	//
	// > You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The name of the database.
	//
	// example:
	//
	// test
	Database *string `json:"Database,omitempty" xml:"Database,omitempty"`
	// order by search condition
	//
	// example:
	//
	// {Field: TableName, Type: Desc}
	OrderBy *string `json:"OrderBy,omitempty" xml:"OrderBy,omitempty"`
	// The page number. Pages start from page 1. Default value: **1**.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. Valid values:
	//
	// 	- **30**
	//
	// 	- **50**
	//
	// 	- **100**
	//
	// Default value: **30**.
	//
	// example:
	//
	// 20
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s DescribeDBInstanceIndexUsageRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceIndexUsageRequest) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceIndexUsageRequest) SetDBInstanceId(v string) *DescribeDBInstanceIndexUsageRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDBInstanceIndexUsageRequest) SetDatabase(v string) *DescribeDBInstanceIndexUsageRequest {
	s.Database = &v
	return s
}

func (s *DescribeDBInstanceIndexUsageRequest) SetOrderBy(v string) *DescribeDBInstanceIndexUsageRequest {
	s.OrderBy = &v
	return s
}

func (s *DescribeDBInstanceIndexUsageRequest) SetPageNumber(v int32) *DescribeDBInstanceIndexUsageRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeDBInstanceIndexUsageRequest) SetPageSize(v int32) *DescribeDBInstanceIndexUsageRequest {
	s.PageSize = &v
	return s
}

type DescribeDBInstanceIndexUsageResponseBody struct {
	// The queried index usage.
	Items []*DescribeDBInstanceIndexUsageResponseBodyItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Repeated"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The request ID.
	//
	// example:
	//
	// B4CAF581-2AC7-41AD-8940-D56DF7AADF5B
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 1
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeDBInstanceIndexUsageResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceIndexUsageResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceIndexUsageResponseBody) SetItems(v []*DescribeDBInstanceIndexUsageResponseBodyItems) *DescribeDBInstanceIndexUsageResponseBody {
	s.Items = v
	return s
}

func (s *DescribeDBInstanceIndexUsageResponseBody) SetPageNumber(v int32) *DescribeDBInstanceIndexUsageResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeDBInstanceIndexUsageResponseBody) SetRequestId(v string) *DescribeDBInstanceIndexUsageResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDBInstanceIndexUsageResponseBody) SetTotalCount(v int32) *DescribeDBInstanceIndexUsageResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeDBInstanceIndexUsageResponseBodyItems struct {
	// The name of the database.
	//
	// example:
	//
	// adbtest
	DatabaseName *string `json:"DatabaseName,omitempty" xml:"DatabaseName,omitempty"`
	// The definition of the index.
	//
	// example:
	//
	// CREATE INDEX idx1 ON schema1.tab1_ptr_2010
	IndexDef *string `json:"IndexDef,omitempty" xml:"IndexDef,omitempty"`
	// The name of the index.
	//
	// example:
	//
	// idx1
	IndexName *string `json:"IndexName,omitempty" xml:"IndexName,omitempty"`
	// The number of index scans.
	//
	// example:
	//
	// 50000
	IndexScanTimes *int64 `json:"IndexScanTimes,omitempty" xml:"IndexScanTimes,omitempty"`
	// The size of the index. Unit: bytes.
	//
	// example:
	//
	// 10000
	IndexSize *string `json:"IndexSize,omitempty" xml:"IndexSize,omitempty"`
	// Indicates whether the table is a partitioned table. Valid values:
	//
	// 	- **true**: The table is a partitioned table.
	//
	// 	- **false**: The table is not a partitioned table.
	//
	// example:
	//
	// true
	IsPartitionTable *bool `json:"IsPartitionTable,omitempty" xml:"IsPartitionTable,omitempty"`
	// The name of the parent table.
	//
	// example:
	//
	// tab1
	ParentTableName *string `json:"ParentTableName,omitempty" xml:"ParentTableName,omitempty"`
	// The name of the schema.
	//
	// example:
	//
	// schema1
	SchemaName *string `json:"SchemaName,omitempty" xml:"SchemaName,omitempty"`
	// The name of the table.
	//
	// example:
	//
	// tab1_ptr_2010
	TableName *string `json:"TableName,omitempty" xml:"TableName,omitempty"`
	// The time when the table was last deleted, inserted, or updated.
	//
	// example:
	//
	// 2022-08-08T20:00:00Z
	TimeLastUpdated *string `json:"TimeLastUpdated,omitempty" xml:"TimeLastUpdated,omitempty"`
}

func (s DescribeDBInstanceIndexUsageResponseBodyItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceIndexUsageResponseBodyItems) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceIndexUsageResponseBodyItems) SetDatabaseName(v string) *DescribeDBInstanceIndexUsageResponseBodyItems {
	s.DatabaseName = &v
	return s
}

func (s *DescribeDBInstanceIndexUsageResponseBodyItems) SetIndexDef(v string) *DescribeDBInstanceIndexUsageResponseBodyItems {
	s.IndexDef = &v
	return s
}

func (s *DescribeDBInstanceIndexUsageResponseBodyItems) SetIndexName(v string) *DescribeDBInstanceIndexUsageResponseBodyItems {
	s.IndexName = &v
	return s
}

func (s *DescribeDBInstanceIndexUsageResponseBodyItems) SetIndexScanTimes(v int64) *DescribeDBInstanceIndexUsageResponseBodyItems {
	s.IndexScanTimes = &v
	return s
}

func (s *DescribeDBInstanceIndexUsageResponseBodyItems) SetIndexSize(v string) *DescribeDBInstanceIndexUsageResponseBodyItems {
	s.IndexSize = &v
	return s
}

func (s *DescribeDBInstanceIndexUsageResponseBodyItems) SetIsPartitionTable(v bool) *DescribeDBInstanceIndexUsageResponseBodyItems {
	s.IsPartitionTable = &v
	return s
}

func (s *DescribeDBInstanceIndexUsageResponseBodyItems) SetParentTableName(v string) *DescribeDBInstanceIndexUsageResponseBodyItems {
	s.ParentTableName = &v
	return s
}

func (s *DescribeDBInstanceIndexUsageResponseBodyItems) SetSchemaName(v string) *DescribeDBInstanceIndexUsageResponseBodyItems {
	s.SchemaName = &v
	return s
}

func (s *DescribeDBInstanceIndexUsageResponseBodyItems) SetTableName(v string) *DescribeDBInstanceIndexUsageResponseBodyItems {
	s.TableName = &v
	return s
}

func (s *DescribeDBInstanceIndexUsageResponseBodyItems) SetTimeLastUpdated(v string) *DescribeDBInstanceIndexUsageResponseBodyItems {
	s.TimeLastUpdated = &v
	return s
}

type DescribeDBInstanceIndexUsageResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeDBInstanceIndexUsageResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeDBInstanceIndexUsageResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceIndexUsageResponse) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceIndexUsageResponse) SetHeaders(v map[string]*string) *DescribeDBInstanceIndexUsageResponse {
	s.Headers = v
	return s
}

func (s *DescribeDBInstanceIndexUsageResponse) SetStatusCode(v int32) *DescribeDBInstanceIndexUsageResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDBInstanceIndexUsageResponse) SetBody(v *DescribeDBInstanceIndexUsageResponseBody) *DescribeDBInstanceIndexUsageResponse {
	s.Body = v
	return s
}

type DescribeDBInstanceNetInfoRequest struct {
	// The endpoint that is used to connect to the instance.
	//
	// >  If you do not specify this parameter, the information about all endpoints of the instance is returned.
	//
	// example:
	//
	// gp-0xin9q82c33xc****-master.gpdb.rds.aliyuncs.com
	ConnectionString *string `json:"ConnectionString,omitempty" xml:"ConnectionString,omitempty"`
	// The instance ID.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
}

func (s DescribeDBInstanceNetInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceNetInfoRequest) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceNetInfoRequest) SetConnectionString(v string) *DescribeDBInstanceNetInfoRequest {
	s.ConnectionString = &v
	return s
}

func (s *DescribeDBInstanceNetInfoRequest) SetDBInstanceId(v string) *DescribeDBInstanceNetInfoRequest {
	s.DBInstanceId = &v
	return s
}

type DescribeDBInstanceNetInfoResponseBody struct {
	// The connection information of the instance.
	DBInstanceNetInfos *DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfos `json:"DBInstanceNetInfos,omitempty" xml:"DBInstanceNetInfos,omitempty" type:"Struct"`
	// The network type of the instance. Valid values:
	//
	// 	- Classic: classic network.
	//
	// 	- VPC: VPC.
	//
	// example:
	//
	// Classic
	InstanceNetworkType *string `json:"InstanceNetworkType,omitempty" xml:"InstanceNetworkType,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 7565770E-7C45-462D-BA4A-8A5396F2CAD1
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeDBInstanceNetInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceNetInfoResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceNetInfoResponseBody) SetDBInstanceNetInfos(v *DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfos) *DescribeDBInstanceNetInfoResponseBody {
	s.DBInstanceNetInfos = v
	return s
}

func (s *DescribeDBInstanceNetInfoResponseBody) SetInstanceNetworkType(v string) *DescribeDBInstanceNetInfoResponseBody {
	s.InstanceNetworkType = &v
	return s
}

func (s *DescribeDBInstanceNetInfoResponseBody) SetRequestId(v string) *DescribeDBInstanceNetInfoResponseBody {
	s.RequestId = &v
	return s
}

type DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfos struct {
	DBInstanceNetInfo []*DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfo `json:"DBInstanceNetInfo,omitempty" xml:"DBInstanceNetInfo,omitempty" type:"Repeated"`
}

func (s DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfos) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfos) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfos) SetDBInstanceNetInfo(v []*DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfo) *DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfos {
	s.DBInstanceNetInfo = v
	return s
}

type DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfo struct {
	// The type of the endpoint.
	//
	// example:
	//
	// Intranet
	AddressType *string `json:"AddressType,omitempty" xml:"AddressType,omitempty"`
	// The endpoint that is used to connect to the instance.
	//
	// example:
	//
	// gp-xxxxxxx.gpdb.rds.aliyuncs.com
	ConnectionString *string `json:"ConnectionString,omitempty" xml:"ConnectionString,omitempty"`
	// The IP address.
	//
	// example:
	//
	// 127.0.0.1
	IPAddress *string `json:"IPAddress,omitempty" xml:"IPAddress,omitempty"`
	// The type of the IP address.
	//
	// 	- Valid values for instances in the classic network: Inner and Public.
	//
	// 	- Valid values for instances in a virtual private cloud (VPC): Private and Public.
	//
	// example:
	//
	// Inner
	IPType *string `json:"IPType,omitempty" xml:"IPType,omitempty"`
	// The port number.
	//
	// example:
	//
	// 3432
	Port *string `json:"Port,omitempty" xml:"Port,omitempty"`
	// The VPC ID of the instance.
	//
	// example:
	//
	// vpc-xxxxxxx
	VPCId *string `json:"VPCId,omitempty" xml:"VPCId,omitempty"`
	// The vSwitch ID. Multiple IDs are separated by commas (,).
	//
	// example:
	//
	// vsw-xxxxxxxx
	VSwitchId *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	// The ID of the instance that is deployed in a VPC.
	//
	// example:
	//
	// vpc-xxxxxxx
	VpcInstanceId *string `json:"VpcInstanceId,omitempty" xml:"VpcInstanceId,omitempty"`
}

func (s DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfo) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfo) SetAddressType(v string) *DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfo {
	s.AddressType = &v
	return s
}

func (s *DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfo) SetConnectionString(v string) *DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfo {
	s.ConnectionString = &v
	return s
}

func (s *DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfo) SetIPAddress(v string) *DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfo {
	s.IPAddress = &v
	return s
}

func (s *DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfo) SetIPType(v string) *DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfo {
	s.IPType = &v
	return s
}

func (s *DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfo) SetPort(v string) *DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfo {
	s.Port = &v
	return s
}

func (s *DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfo) SetVPCId(v string) *DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfo {
	s.VPCId = &v
	return s
}

func (s *DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfo) SetVSwitchId(v string) *DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfo {
	s.VSwitchId = &v
	return s
}

func (s *DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfo) SetVpcInstanceId(v string) *DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfo {
	s.VpcInstanceId = &v
	return s
}

type DescribeDBInstanceNetInfoResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeDBInstanceNetInfoResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeDBInstanceNetInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceNetInfoResponse) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceNetInfoResponse) SetHeaders(v map[string]*string) *DescribeDBInstanceNetInfoResponse {
	s.Headers = v
	return s
}

func (s *DescribeDBInstanceNetInfoResponse) SetStatusCode(v int32) *DescribeDBInstanceNetInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDBInstanceNetInfoResponse) SetBody(v *DescribeDBInstanceNetInfoResponseBody) *DescribeDBInstanceNetInfoResponse {
	s.Body = v
	return s
}

type DescribeDBInstancePerformanceRequest struct {
	// The instance ID.
	//
	// > You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the IDs of all AnalyticDB for PostgreSQL instances within a region.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The end of the time range to query. Specify the time in the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm*Z format. The time must be in UTC. The end time must be later than the start time.
	//
	// This parameter is required.
	//
	// example:
	//
	// 2022-07-09T03:47Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The performance metric. Separate multiple values with commas (,). For more information, see [Performance parameters](https://help.aliyun.com/document_detail/86943.html).
	//
	// This parameter is required.
	//
	// example:
	//
	// CpuUsage,MemoryUsage,Gpdb_SpaceUsage,Gpdb_IOPS,Gpdb_session
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// This parameter is no longer used.
	//
	// example:
	//
	// rg-bp67acfmxazb4p****
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	// The beginning of the time range to query. Specify the time in the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm*Z format. The time must be in UTC.
	//
	// This parameter is required.
	//
	// example:
	//
	// 2022-07-08T03:47Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeDBInstancePerformanceRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstancePerformanceRequest) GoString() string {
	return s.String()
}

func (s *DescribeDBInstancePerformanceRequest) SetDBInstanceId(v string) *DescribeDBInstancePerformanceRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDBInstancePerformanceRequest) SetEndTime(v string) *DescribeDBInstancePerformanceRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeDBInstancePerformanceRequest) SetKey(v string) *DescribeDBInstancePerformanceRequest {
	s.Key = &v
	return s
}

func (s *DescribeDBInstancePerformanceRequest) SetResourceGroupId(v string) *DescribeDBInstancePerformanceRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeDBInstancePerformanceRequest) SetStartTime(v string) *DescribeDBInstancePerformanceRequest {
	s.StartTime = &v
	return s
}

type DescribeDBInstancePerformanceResponseBody struct {
	// The instance ID.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The end time of the query.
	//
	// example:
	//
	// 2022-07-09T03:47Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The database engine of the instance.
	//
	// example:
	//
	// gpdb
	Engine *string `json:"Engine,omitempty" xml:"Engine,omitempty"`
	// The queried performance metrics.
	PerformanceKeys []*string `json:"PerformanceKeys,omitempty" xml:"PerformanceKeys,omitempty" type:"Repeated"`
	// The request ID.
	//
	// example:
	//
	// 5E85244A-AB47-46A3-A3AD-5F307DCB407E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The start time of the query.
	//
	// example:
	//
	// 2022-07-08T03:47Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeDBInstancePerformanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstancePerformanceResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDBInstancePerformanceResponseBody) SetDBInstanceId(v string) *DescribeDBInstancePerformanceResponseBody {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDBInstancePerformanceResponseBody) SetEndTime(v string) *DescribeDBInstancePerformanceResponseBody {
	s.EndTime = &v
	return s
}

func (s *DescribeDBInstancePerformanceResponseBody) SetEngine(v string) *DescribeDBInstancePerformanceResponseBody {
	s.Engine = &v
	return s
}

func (s *DescribeDBInstancePerformanceResponseBody) SetPerformanceKeys(v []*string) *DescribeDBInstancePerformanceResponseBody {
	s.PerformanceKeys = v
	return s
}

func (s *DescribeDBInstancePerformanceResponseBody) SetRequestId(v string) *DescribeDBInstancePerformanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDBInstancePerformanceResponseBody) SetStartTime(v string) *DescribeDBInstancePerformanceResponseBody {
	s.StartTime = &v
	return s
}

type DescribeDBInstancePerformanceResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeDBInstancePerformanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeDBInstancePerformanceResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstancePerformanceResponse) GoString() string {
	return s.String()
}

func (s *DescribeDBInstancePerformanceResponse) SetHeaders(v map[string]*string) *DescribeDBInstancePerformanceResponse {
	s.Headers = v
	return s
}

func (s *DescribeDBInstancePerformanceResponse) SetStatusCode(v int32) *DescribeDBInstancePerformanceResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDBInstancePerformanceResponse) SetBody(v *DescribeDBInstancePerformanceResponseBody) *DescribeDBInstancePerformanceResponse {
	s.Body = v
	return s
}

type DescribeDBInstancePlansRequest struct {
	// The instance ID.
	//
	// > You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The time that is used to filter plans. If you specify the time in the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format, the plans that are created before this time are returned. The time must be in UTC. If you do not specify this parameter, all plans are returned.
	//
	// example:
	//
	// 2022-04-17T23:00Z
	PlanCreateDate *string `json:"PlanCreateDate,omitempty" xml:"PlanCreateDate,omitempty"`
	// The description of the plan.
	//
	// example:
	//
	// this is a test plan
	PlanDesc *string `json:"PlanDesc,omitempty" xml:"PlanDesc,omitempty"`
	// The plan ID.
	//
	// > You can call the [DescribeDBInstancePlans](https://help.aliyun.com/document_detail/449398.html) operation to query the information about plans, including plan IDs.
	//
	// example:
	//
	// 1234
	PlanId *string `json:"PlanId,omitempty" xml:"PlanId,omitempty"`
	// The execution mode of the plan. Valid values:
	//
	// 	- **Postpone**: The plan is executed later.
	//
	// 	- **Regular**: The plan is executed periodically.
	//
	// example:
	//
	// Regular
	PlanScheduleType *string `json:"PlanScheduleType,omitempty" xml:"PlanScheduleType,omitempty"`
	// The type of the plan. Valid values:
	//
	// 	- **PauseResume**: pauses and resumes an instance.
	//
	// 	- **Resize**: scales an instance.
	//
	// 	- **ModifySpec**: changes compute node specifications.
	//
	// example:
	//
	// PauseResume
	PlanType *string `json:"PlanType,omitempty" xml:"PlanType,omitempty"`
}

func (s DescribeDBInstancePlansRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstancePlansRequest) GoString() string {
	return s.String()
}

func (s *DescribeDBInstancePlansRequest) SetDBInstanceId(v string) *DescribeDBInstancePlansRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDBInstancePlansRequest) SetOwnerId(v int64) *DescribeDBInstancePlansRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeDBInstancePlansRequest) SetPlanCreateDate(v string) *DescribeDBInstancePlansRequest {
	s.PlanCreateDate = &v
	return s
}

func (s *DescribeDBInstancePlansRequest) SetPlanDesc(v string) *DescribeDBInstancePlansRequest {
	s.PlanDesc = &v
	return s
}

func (s *DescribeDBInstancePlansRequest) SetPlanId(v string) *DescribeDBInstancePlansRequest {
	s.PlanId = &v
	return s
}

func (s *DescribeDBInstancePlansRequest) SetPlanScheduleType(v string) *DescribeDBInstancePlansRequest {
	s.PlanScheduleType = &v
	return s
}

func (s *DescribeDBInstancePlansRequest) SetPlanType(v string) *DescribeDBInstancePlansRequest {
	s.PlanType = &v
	return s
}

type DescribeDBInstancePlansResponseBody struct {
	// The error message.
	//
	// This parameter is returned only if the request fails.
	//
	// example:
	//
	// ****
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// The queried plans.
	Items *DescribeDBInstancePlansResponseBodyItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Struct"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 1
	PageRecordCount *int32 `json:"PageRecordCount,omitempty" xml:"PageRecordCount,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 34b32a0a-08ef-4a87-b6be-cdd988888888
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful.
	//
	// If the request was successful, **success*	- is returned. If the request failed, this parameter is not returned.
	//
	// example:
	//
	// success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 1
	TotalRecordCount *int32 `json:"TotalRecordCount,omitempty" xml:"TotalRecordCount,omitempty"`
}

func (s DescribeDBInstancePlansResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstancePlansResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDBInstancePlansResponseBody) SetErrorMessage(v string) *DescribeDBInstancePlansResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *DescribeDBInstancePlansResponseBody) SetItems(v *DescribeDBInstancePlansResponseBodyItems) *DescribeDBInstancePlansResponseBody {
	s.Items = v
	return s
}

func (s *DescribeDBInstancePlansResponseBody) SetPageNumber(v int32) *DescribeDBInstancePlansResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeDBInstancePlansResponseBody) SetPageRecordCount(v int32) *DescribeDBInstancePlansResponseBody {
	s.PageRecordCount = &v
	return s
}

func (s *DescribeDBInstancePlansResponseBody) SetRequestId(v string) *DescribeDBInstancePlansResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDBInstancePlansResponseBody) SetStatus(v string) *DescribeDBInstancePlansResponseBody {
	s.Status = &v
	return s
}

func (s *DescribeDBInstancePlansResponseBody) SetTotalRecordCount(v int32) *DescribeDBInstancePlansResponseBody {
	s.TotalRecordCount = &v
	return s
}

type DescribeDBInstancePlansResponseBodyItems struct {
	PlanList []*DescribeDBInstancePlansResponseBodyItemsPlanList `json:"PlanList,omitempty" xml:"PlanList,omitempty" type:"Repeated"`
}

func (s DescribeDBInstancePlansResponseBodyItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstancePlansResponseBodyItems) GoString() string {
	return s.String()
}

func (s *DescribeDBInstancePlansResponseBodyItems) SetPlanList(v []*DescribeDBInstancePlansResponseBodyItemsPlanList) *DescribeDBInstancePlansResponseBodyItems {
	s.PlanList = v
	return s
}

type DescribeDBInstancePlansResponseBodyItemsPlanList struct {
	// The instance ID.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The execution information of the plan.
	//
	// example:
	//
	// {"pause":{"planCronTime":"0 22 	- 	- 5"},"resume":{"planCronTime":"0 23 	- 	- 5"}}
	PlanConfig *string `json:"PlanConfig,omitempty" xml:"PlanConfig,omitempty"`
	// The description of the plan.
	//
	// example:
	//
	// this is a test plan
	PlanDesc *string `json:"PlanDesc,omitempty" xml:"PlanDesc,omitempty"`
	// The end time of the plan. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.
	//
	// >
	//
	// 	- This parameter is returned only for the plans that are periodically executed.
	//
	// 	- If you did not specify the end time when you created the plan, this parameter is not returned.
	//
	// example:
	//
	// 2023-04-17T23:00Z
	PlanEndDate *string `json:"PlanEndDate,omitempty" xml:"PlanEndDate,omitempty"`
	// The plan ID.
	//
	// example:
	//
	// 1234
	PlanId *string `json:"PlanId,omitempty" xml:"PlanId,omitempty"`
	// The name of the plan.
	//
	// example:
	//
	// test-plan
	PlanName *string `json:"PlanName,omitempty" xml:"PlanName,omitempty"`
	// The execution mode of the plan. Valid values:
	//
	// 	- **Postpone**: The plan is executed later.
	//
	// 	- **Regular**: The plan is executed periodically.
	//
	// example:
	//
	// Regular
	PlanScheduleType *string `json:"PlanScheduleType,omitempty" xml:"PlanScheduleType,omitempty"`
	// The start time of the plan. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.
	//
	// >
	//
	// 	- This parameter is returned only for the plans that are periodically executed.
	//
	// 	- If you did not specify the start time when you created the plan, the current time is returned.
	//
	// example:
	//
	// 2022-04-17T23:00Z
	PlanStartDate *string `json:"PlanStartDate,omitempty" xml:"PlanStartDate,omitempty"`
	// The status of the plan. Valid values:
	//
	// 	- **active**
	//
	// 	- **cancel**
	//
	// 	- **deleted**
	//
	// 	- **finished**
	//
	// example:
	//
	// active
	PlanStatus *string `json:"PlanStatus,omitempty" xml:"PlanStatus,omitempty"`
	// The type of the plan. Valid values:
	//
	// 	- **PauseResume**: pauses and resumes an instance.
	//
	// 	- **Resize**: scales an instance.
	//
	// example:
	//
	// PauseResume
	PlanType *string `json:"PlanType,omitempty" xml:"PlanType,omitempty"`
}

func (s DescribeDBInstancePlansResponseBodyItemsPlanList) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstancePlansResponseBodyItemsPlanList) GoString() string {
	return s.String()
}

func (s *DescribeDBInstancePlansResponseBodyItemsPlanList) SetDBInstanceId(v string) *DescribeDBInstancePlansResponseBodyItemsPlanList {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDBInstancePlansResponseBodyItemsPlanList) SetPlanConfig(v string) *DescribeDBInstancePlansResponseBodyItemsPlanList {
	s.PlanConfig = &v
	return s
}

func (s *DescribeDBInstancePlansResponseBodyItemsPlanList) SetPlanDesc(v string) *DescribeDBInstancePlansResponseBodyItemsPlanList {
	s.PlanDesc = &v
	return s
}

func (s *DescribeDBInstancePlansResponseBodyItemsPlanList) SetPlanEndDate(v string) *DescribeDBInstancePlansResponseBodyItemsPlanList {
	s.PlanEndDate = &v
	return s
}

func (s *DescribeDBInstancePlansResponseBodyItemsPlanList) SetPlanId(v string) *DescribeDBInstancePlansResponseBodyItemsPlanList {
	s.PlanId = &v
	return s
}

func (s *DescribeDBInstancePlansResponseBodyItemsPlanList) SetPlanName(v string) *DescribeDBInstancePlansResponseBodyItemsPlanList {
	s.PlanName = &v
	return s
}

func (s *DescribeDBInstancePlansResponseBodyItemsPlanList) SetPlanScheduleType(v string) *DescribeDBInstancePlansResponseBodyItemsPlanList {
	s.PlanScheduleType = &v
	return s
}

func (s *DescribeDBInstancePlansResponseBodyItemsPlanList) SetPlanStartDate(v string) *DescribeDBInstancePlansResponseBodyItemsPlanList {
	s.PlanStartDate = &v
	return s
}

func (s *DescribeDBInstancePlansResponseBodyItemsPlanList) SetPlanStatus(v string) *DescribeDBInstancePlansResponseBodyItemsPlanList {
	s.PlanStatus = &v
	return s
}

func (s *DescribeDBInstancePlansResponseBodyItemsPlanList) SetPlanType(v string) *DescribeDBInstancePlansResponseBodyItemsPlanList {
	s.PlanType = &v
	return s
}

type DescribeDBInstancePlansResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeDBInstancePlansResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeDBInstancePlansResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstancePlansResponse) GoString() string {
	return s.String()
}

func (s *DescribeDBInstancePlansResponse) SetHeaders(v map[string]*string) *DescribeDBInstancePlansResponse {
	s.Headers = v
	return s
}

func (s *DescribeDBInstancePlansResponse) SetStatusCode(v int32) *DescribeDBInstancePlansResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDBInstancePlansResponse) SetBody(v *DescribeDBInstancePlansResponseBody) *DescribeDBInstancePlansResponse {
	s.Body = v
	return s
}

type DescribeDBInstanceSSLRequest struct {
	// The ID of the instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
}

func (s DescribeDBInstanceSSLRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceSSLRequest) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceSSLRequest) SetDBInstanceId(v string) *DescribeDBInstanceSSLRequest {
	s.DBInstanceId = &v
	return s
}

type DescribeDBInstanceSSLResponseBody struct {
	// The name of the SSL certificate.
	//
	// example:
	//
	// *.gpdbmaster.xxx.rds.aliyuncs.com
	CertCommonName *string `json:"CertCommonName,omitempty" xml:"CertCommonName,omitempty"`
	// The ID of the instance.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The name of the instance.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceName *string `json:"DBInstanceName,omitempty" xml:"DBInstanceName,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// D5FF8636-37F6-4CE0-8002-F8734C62C686
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether SSL encryption is enabled.
	//
	// example:
	//
	// true
	SSLEnabled *bool `json:"SSLEnabled,omitempty" xml:"SSLEnabled,omitempty"`
	// The expiration time of the SSL certificate.
	//
	// example:
	//
	// 2023-08-05T09:05:53Z
	SSLExpiredTime *string `json:"SSLExpiredTime,omitempty" xml:"SSLExpiredTime,omitempty"`
}

func (s DescribeDBInstanceSSLResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceSSLResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceSSLResponseBody) SetCertCommonName(v string) *DescribeDBInstanceSSLResponseBody {
	s.CertCommonName = &v
	return s
}

func (s *DescribeDBInstanceSSLResponseBody) SetDBInstanceId(v string) *DescribeDBInstanceSSLResponseBody {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDBInstanceSSLResponseBody) SetDBInstanceName(v string) *DescribeDBInstanceSSLResponseBody {
	s.DBInstanceName = &v
	return s
}

func (s *DescribeDBInstanceSSLResponseBody) SetRequestId(v string) *DescribeDBInstanceSSLResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDBInstanceSSLResponseBody) SetSSLEnabled(v bool) *DescribeDBInstanceSSLResponseBody {
	s.SSLEnabled = &v
	return s
}

func (s *DescribeDBInstanceSSLResponseBody) SetSSLExpiredTime(v string) *DescribeDBInstanceSSLResponseBody {
	s.SSLExpiredTime = &v
	return s
}

type DescribeDBInstanceSSLResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeDBInstanceSSLResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeDBInstanceSSLResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceSSLResponse) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceSSLResponse) SetHeaders(v map[string]*string) *DescribeDBInstanceSSLResponse {
	s.Headers = v
	return s
}

func (s *DescribeDBInstanceSSLResponse) SetStatusCode(v int32) *DescribeDBInstanceSSLResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDBInstanceSSLResponse) SetBody(v *DescribeDBInstanceSSLResponseBody) *DescribeDBInstanceSSLResponse {
	s.Body = v
	return s
}

type DescribeDBInstanceSupportMaxPerformanceRequest struct {
	// The instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp***************
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s DescribeDBInstanceSupportMaxPerformanceRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceSupportMaxPerformanceRequest) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceSupportMaxPerformanceRequest) SetDBInstanceId(v string) *DescribeDBInstanceSupportMaxPerformanceRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDBInstanceSupportMaxPerformanceRequest) SetOwnerId(v int64) *DescribeDBInstanceSupportMaxPerformanceRequest {
	s.OwnerId = &v
	return s
}

type DescribeDBInstanceSupportMaxPerformanceResponseBody struct {
	// The instance ID.
	//
	// example:
	//
	// gp-bp***************
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The queried performance metric.
	Performances *DescribeDBInstanceSupportMaxPerformanceResponseBodyPerformances `json:"Performances,omitempty" xml:"Performances,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeDBInstanceSupportMaxPerformanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceSupportMaxPerformanceResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceSupportMaxPerformanceResponseBody) SetDBInstanceId(v string) *DescribeDBInstanceSupportMaxPerformanceResponseBody {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDBInstanceSupportMaxPerformanceResponseBody) SetPerformances(v *DescribeDBInstanceSupportMaxPerformanceResponseBodyPerformances) *DescribeDBInstanceSupportMaxPerformanceResponseBody {
	s.Performances = v
	return s
}

func (s *DescribeDBInstanceSupportMaxPerformanceResponseBody) SetRequestId(v string) *DescribeDBInstanceSupportMaxPerformanceResponseBody {
	s.RequestId = &v
	return s
}

type DescribeDBInstanceSupportMaxPerformanceResponseBodyPerformances struct {
	Performance []*DescribeDBInstanceSupportMaxPerformanceResponseBodyPerformancesPerformance `json:"Performance,omitempty" xml:"Performance,omitempty" type:"Repeated"`
}

func (s DescribeDBInstanceSupportMaxPerformanceResponseBodyPerformances) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceSupportMaxPerformanceResponseBodyPerformances) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceSupportMaxPerformanceResponseBodyPerformances) SetPerformance(v []*DescribeDBInstanceSupportMaxPerformanceResponseBodyPerformancesPerformance) *DescribeDBInstanceSupportMaxPerformanceResponseBodyPerformances {
	s.Performance = v
	return s
}

type DescribeDBInstanceSupportMaxPerformanceResponseBodyPerformancesPerformance struct {
	// The performance bottleneck type.
	//
	// example:
	//
	// ecs or disk
	Bottleneck *string `json:"Bottleneck,omitempty" xml:"Bottleneck,omitempty"`
	// The name of the performance metric.
	//
	// example:
	//
	// adbpg_status,adbpg_disk_status,adbpg_connection_status,adbgp_segment_disk_usage_percent_max,adbpg_master_disk_usage_percent_max,adbpg_disk_usage_percent
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The unit of the performance metric.
	//
	// example:
	//
	// %
	Unit *string `json:"Unit,omitempty" xml:"Unit,omitempty"`
	// The value of the performance metric.
	//
	// example:
	//
	// 90
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeDBInstanceSupportMaxPerformanceResponseBodyPerformancesPerformance) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceSupportMaxPerformanceResponseBodyPerformancesPerformance) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceSupportMaxPerformanceResponseBodyPerformancesPerformance) SetBottleneck(v string) *DescribeDBInstanceSupportMaxPerformanceResponseBodyPerformancesPerformance {
	s.Bottleneck = &v
	return s
}

func (s *DescribeDBInstanceSupportMaxPerformanceResponseBodyPerformancesPerformance) SetKey(v string) *DescribeDBInstanceSupportMaxPerformanceResponseBodyPerformancesPerformance {
	s.Key = &v
	return s
}

func (s *DescribeDBInstanceSupportMaxPerformanceResponseBodyPerformancesPerformance) SetUnit(v string) *DescribeDBInstanceSupportMaxPerformanceResponseBodyPerformancesPerformance {
	s.Unit = &v
	return s
}

func (s *DescribeDBInstanceSupportMaxPerformanceResponseBodyPerformancesPerformance) SetValue(v string) *DescribeDBInstanceSupportMaxPerformanceResponseBodyPerformancesPerformance {
	s.Value = &v
	return s
}

type DescribeDBInstanceSupportMaxPerformanceResponse struct {
	Headers    map[string]*string                                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeDBInstanceSupportMaxPerformanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeDBInstanceSupportMaxPerformanceResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceSupportMaxPerformanceResponse) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceSupportMaxPerformanceResponse) SetHeaders(v map[string]*string) *DescribeDBInstanceSupportMaxPerformanceResponse {
	s.Headers = v
	return s
}

func (s *DescribeDBInstanceSupportMaxPerformanceResponse) SetStatusCode(v int32) *DescribeDBInstanceSupportMaxPerformanceResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDBInstanceSupportMaxPerformanceResponse) SetBody(v *DescribeDBInstanceSupportMaxPerformanceResponseBody) *DescribeDBInstanceSupportMaxPerformanceResponse {
	s.Body = v
	return s
}

type DescribeDBInstancesRequest struct {
	// The edition of the instance. Separate multiple values with commas (,).
	DBInstanceCategories []*string `json:"DBInstanceCategories,omitempty" xml:"DBInstanceCategories,omitempty" type:"Repeated"`
	// The description of the instance.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceDescription *string `json:"DBInstanceDescription,omitempty" xml:"DBInstanceDescription,omitempty"`
	// The instance ID. Separate multiple values with commas (,).
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceIds *string `json:"DBInstanceIds,omitempty" xml:"DBInstanceIds,omitempty"`
	// The resource type of the instance. Separate multiple values with commas (,).
	DBInstanceModes []*string `json:"DBInstanceModes,omitempty" xml:"DBInstanceModes,omitempty" type:"Repeated"`
	// The state of the instance.
	DBInstanceStatuses []*string `json:"DBInstanceStatuses,omitempty" xml:"DBInstanceStatuses,omitempty" type:"Repeated"`
	// This parameter is no longer used.
	InstanceDeployTypes []*string `json:"InstanceDeployTypes,omitempty" xml:"InstanceDeployTypes,omitempty" type:"Repeated"`
	// The network type of the instance. Valid values:
	//
	// 	- **VPC**: virtual private cloud (VPC).
	//
	// 	- **Classic**: classic network.
	//
	// > If you do not specify this parameter, instances of all network types are returned.
	//
	// example:
	//
	// VPC
	InstanceNetworkType *string `json:"InstanceNetworkType,omitempty" xml:"InstanceNetworkType,omitempty"`
	OwnerId             *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The page number. Pages start from page 1. Default value: **1**.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. Valid values:
	//
	// 	- **30**
	//
	// 	- **50**
	//
	// 	- **100**
	//
	// Default value: **30**.
	//
	// example:
	//
	// 50
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The region ID.
	//
	// > You can call the [DescribeRegions](https://help.aliyun.com/document_detail/86912.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the resource group to which the instance belongs.
	//
	// example:
	//
	// rg-bp67acfmxazb4p****
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	// The tags.
	Tag []*DescribeDBInstancesRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
	// The VPC ID. You can use this parameter to filter instances that reside in the specified VPC.
	//
	// example:
	//
	// vpc-t4nqyp3tc5mx7vy6****
	VpcId *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
}

func (s DescribeDBInstancesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstancesRequest) GoString() string {
	return s.String()
}

func (s *DescribeDBInstancesRequest) SetDBInstanceCategories(v []*string) *DescribeDBInstancesRequest {
	s.DBInstanceCategories = v
	return s
}

func (s *DescribeDBInstancesRequest) SetDBInstanceDescription(v string) *DescribeDBInstancesRequest {
	s.DBInstanceDescription = &v
	return s
}

func (s *DescribeDBInstancesRequest) SetDBInstanceIds(v string) *DescribeDBInstancesRequest {
	s.DBInstanceIds = &v
	return s
}

func (s *DescribeDBInstancesRequest) SetDBInstanceModes(v []*string) *DescribeDBInstancesRequest {
	s.DBInstanceModes = v
	return s
}

func (s *DescribeDBInstancesRequest) SetDBInstanceStatuses(v []*string) *DescribeDBInstancesRequest {
	s.DBInstanceStatuses = v
	return s
}

func (s *DescribeDBInstancesRequest) SetInstanceDeployTypes(v []*string) *DescribeDBInstancesRequest {
	s.InstanceDeployTypes = v
	return s
}

func (s *DescribeDBInstancesRequest) SetInstanceNetworkType(v string) *DescribeDBInstancesRequest {
	s.InstanceNetworkType = &v
	return s
}

func (s *DescribeDBInstancesRequest) SetOwnerId(v int64) *DescribeDBInstancesRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeDBInstancesRequest) SetPageNumber(v int32) *DescribeDBInstancesRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeDBInstancesRequest) SetPageSize(v int32) *DescribeDBInstancesRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeDBInstancesRequest) SetRegionId(v string) *DescribeDBInstancesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeDBInstancesRequest) SetResourceGroupId(v string) *DescribeDBInstancesRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeDBInstancesRequest) SetTag(v []*DescribeDBInstancesRequestTag) *DescribeDBInstancesRequest {
	s.Tag = v
	return s
}

func (s *DescribeDBInstancesRequest) SetVpcId(v string) *DescribeDBInstancesRequest {
	s.VpcId = &v
	return s
}

type DescribeDBInstancesRequestTag struct {
	// The key of tag N.
	//
	// example:
	//
	// test-key
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The value of tag N.
	//
	// example:
	//
	// test-value
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeDBInstancesRequestTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstancesRequestTag) GoString() string {
	return s.String()
}

func (s *DescribeDBInstancesRequestTag) SetKey(v string) *DescribeDBInstancesRequestTag {
	s.Key = &v
	return s
}

func (s *DescribeDBInstancesRequestTag) SetValue(v string) *DescribeDBInstancesRequestTag {
	s.Value = &v
	return s
}

type DescribeDBInstancesShrinkRequest struct {
	// The edition of the instance. Separate multiple values with commas (,).
	DBInstanceCategoriesShrink *string `json:"DBInstanceCategories,omitempty" xml:"DBInstanceCategories,omitempty"`
	// The description of the instance.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceDescription *string `json:"DBInstanceDescription,omitempty" xml:"DBInstanceDescription,omitempty"`
	// The instance ID. Separate multiple values with commas (,).
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceIds *string `json:"DBInstanceIds,omitempty" xml:"DBInstanceIds,omitempty"`
	// The resource type of the instance. Separate multiple values with commas (,).
	DBInstanceModesShrink *string `json:"DBInstanceModes,omitempty" xml:"DBInstanceModes,omitempty"`
	// The state of the instance.
	DBInstanceStatusesShrink *string `json:"DBInstanceStatuses,omitempty" xml:"DBInstanceStatuses,omitempty"`
	// This parameter is no longer used.
	InstanceDeployTypesShrink *string `json:"InstanceDeployTypes,omitempty" xml:"InstanceDeployTypes,omitempty"`
	// The network type of the instance. Valid values:
	//
	// 	- **VPC**: virtual private cloud (VPC).
	//
	// 	- **Classic**: classic network.
	//
	// > If you do not specify this parameter, instances of all network types are returned.
	//
	// example:
	//
	// VPC
	InstanceNetworkType *string `json:"InstanceNetworkType,omitempty" xml:"InstanceNetworkType,omitempty"`
	OwnerId             *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The page number. Pages start from page 1. Default value: **1**.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. Valid values:
	//
	// 	- **30**
	//
	// 	- **50**
	//
	// 	- **100**
	//
	// Default value: **30**.
	//
	// example:
	//
	// 50
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The region ID.
	//
	// > You can call the [DescribeRegions](https://help.aliyun.com/document_detail/86912.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the resource group to which the instance belongs.
	//
	// example:
	//
	// rg-bp67acfmxazb4p****
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	// The tags.
	Tag []*DescribeDBInstancesShrinkRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
	// The VPC ID. You can use this parameter to filter instances that reside in the specified VPC.
	//
	// example:
	//
	// vpc-t4nqyp3tc5mx7vy6****
	VpcId *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
}

func (s DescribeDBInstancesShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstancesShrinkRequest) GoString() string {
	return s.String()
}

func (s *DescribeDBInstancesShrinkRequest) SetDBInstanceCategoriesShrink(v string) *DescribeDBInstancesShrinkRequest {
	s.DBInstanceCategoriesShrink = &v
	return s
}

func (s *DescribeDBInstancesShrinkRequest) SetDBInstanceDescription(v string) *DescribeDBInstancesShrinkRequest {
	s.DBInstanceDescription = &v
	return s
}

func (s *DescribeDBInstancesShrinkRequest) SetDBInstanceIds(v string) *DescribeDBInstancesShrinkRequest {
	s.DBInstanceIds = &v
	return s
}

func (s *DescribeDBInstancesShrinkRequest) SetDBInstanceModesShrink(v string) *DescribeDBInstancesShrinkRequest {
	s.DBInstanceModesShrink = &v
	return s
}

func (s *DescribeDBInstancesShrinkRequest) SetDBInstanceStatusesShrink(v string) *DescribeDBInstancesShrinkRequest {
	s.DBInstanceStatusesShrink = &v
	return s
}

func (s *DescribeDBInstancesShrinkRequest) SetInstanceDeployTypesShrink(v string) *DescribeDBInstancesShrinkRequest {
	s.InstanceDeployTypesShrink = &v
	return s
}

func (s *DescribeDBInstancesShrinkRequest) SetInstanceNetworkType(v string) *DescribeDBInstancesShrinkRequest {
	s.InstanceNetworkType = &v
	return s
}

func (s *DescribeDBInstancesShrinkRequest) SetOwnerId(v int64) *DescribeDBInstancesShrinkRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeDBInstancesShrinkRequest) SetPageNumber(v int32) *DescribeDBInstancesShrinkRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeDBInstancesShrinkRequest) SetPageSize(v int32) *DescribeDBInstancesShrinkRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeDBInstancesShrinkRequest) SetRegionId(v string) *DescribeDBInstancesShrinkRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeDBInstancesShrinkRequest) SetResourceGroupId(v string) *DescribeDBInstancesShrinkRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeDBInstancesShrinkRequest) SetTag(v []*DescribeDBInstancesShrinkRequestTag) *DescribeDBInstancesShrinkRequest {
	s.Tag = v
	return s
}

func (s *DescribeDBInstancesShrinkRequest) SetVpcId(v string) *DescribeDBInstancesShrinkRequest {
	s.VpcId = &v
	return s
}

type DescribeDBInstancesShrinkRequestTag struct {
	// The key of tag N.
	//
	// example:
	//
	// test-key
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The value of tag N.
	//
	// example:
	//
	// test-value
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeDBInstancesShrinkRequestTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstancesShrinkRequestTag) GoString() string {
	return s.String()
}

func (s *DescribeDBInstancesShrinkRequestTag) SetKey(v string) *DescribeDBInstancesShrinkRequestTag {
	s.Key = &v
	return s
}

func (s *DescribeDBInstancesShrinkRequestTag) SetValue(v string) *DescribeDBInstancesShrinkRequestTag {
	s.Value = &v
	return s
}

type DescribeDBInstancesResponseBody struct {
	// The queried instances.
	Items *DescribeDBInstancesResponseBodyItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Struct"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 1
	PageRecordCount *int32 `json:"PageRecordCount,omitempty" xml:"PageRecordCount,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 53EA07B7-FC2A-521B-AB7C-27**********
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 1
	TotalRecordCount *int32 `json:"TotalRecordCount,omitempty" xml:"TotalRecordCount,omitempty"`
}

func (s DescribeDBInstancesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstancesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDBInstancesResponseBody) SetItems(v *DescribeDBInstancesResponseBodyItems) *DescribeDBInstancesResponseBody {
	s.Items = v
	return s
}

func (s *DescribeDBInstancesResponseBody) SetPageNumber(v int32) *DescribeDBInstancesResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeDBInstancesResponseBody) SetPageRecordCount(v int32) *DescribeDBInstancesResponseBody {
	s.PageRecordCount = &v
	return s
}

func (s *DescribeDBInstancesResponseBody) SetRequestId(v string) *DescribeDBInstancesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDBInstancesResponseBody) SetTotalRecordCount(v int32) *DescribeDBInstancesResponseBody {
	s.TotalRecordCount = &v
	return s
}

type DescribeDBInstancesResponseBodyItems struct {
	DBInstance []*DescribeDBInstancesResponseBodyItemsDBInstance `json:"DBInstance,omitempty" xml:"DBInstance,omitempty" type:"Repeated"`
}

func (s DescribeDBInstancesResponseBodyItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstancesResponseBodyItems) GoString() string {
	return s.String()
}

func (s *DescribeDBInstancesResponseBodyItems) SetDBInstance(v []*DescribeDBInstancesResponseBodyItemsDBInstance) *DescribeDBInstancesResponseBodyItems {
	s.DBInstance = v
	return s
}

type DescribeDBInstancesResponseBodyItemsDBInstance struct {
	// An invalid parameter. It is no longer returned when you call this operation.
	//
	// You can call the [DescribeDBInstanceAttribute](https://help.aliyun.com/document_detail/86910.html) operation to query the access mode of an instance.
	//
	// example:
	//
	// null
	ConnectionMode *string `json:"ConnectionMode,omitempty" xml:"ConnectionMode,omitempty"`
	// The time when the instance was created. The time is displayed in UTC.
	//
	// example:
	//
	// 2021-10-09T04:54:08Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The edition of the instance. Valid values:
	//
	// 	- **Basic**: Basic Edition.
	//
	// 	- **HighAvailability**: High-availability Edition.
	//
	// 	- **Finance**: Enterprise Edition.
	//
	// example:
	//
	// HighAvailability
	DBInstanceCategory *string `json:"DBInstanceCategory,omitempty" xml:"DBInstanceCategory,omitempty"`
	// The description of the instance.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceDescription *string `json:"DBInstanceDescription,omitempty" xml:"DBInstanceDescription,omitempty"`
	// The instance ID.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The resource type of the instance. Valid values:
	//
	// 	- **Serverless**: Serverless mode.
	//
	// 	- **StorageElastic**: elastic storage mode.
	//
	// 	- **Classic**: reserved storage mode.
	//
	// example:
	//
	// StorageElastic
	DBInstanceMode *string `json:"DBInstanceMode,omitempty" xml:"DBInstanceMode,omitempty"`
	// The type of the network interface card (NIC) that is used by the instance. Valid values:
	//
	// 	- **0**: Internet.
	//
	// 	- **1**: internal network.
	//
	// 	- **2**: VPC.
	//
	// example:
	//
	// 2
	DBInstanceNetType *string `json:"DBInstanceNetType,omitempty" xml:"DBInstanceNetType,omitempty"`
	// The status of the instance. For more information, see [Instance statuses](https://help.aliyun.com/document_detail/86944.html).
	//
	// example:
	//
	// Running
	DBInstanceStatus *string `json:"DBInstanceStatus,omitempty" xml:"DBInstanceStatus,omitempty"`
	// The database engine of the instance.
	//
	// example:
	//
	// gpdb
	Engine *string `json:"Engine,omitempty" xml:"Engine,omitempty"`
	// The database engine version of the instance.
	//
	// example:
	//
	// 6.0
	EngineVersion *string `json:"EngineVersion,omitempty" xml:"EngineVersion,omitempty"`
	// The expiration time of the instance. The time is displayed in UTC.
	//
	// >  The expiration time of a pay-as-you-go instance is `2999-09-08T16:00:00Z`.
	//
	// example:
	//
	// 2999-09-08T16:00:00Z
	ExpireTime *string `json:"ExpireTime,omitempty" xml:"ExpireTime,omitempty"`
	// The resource type of the instance. Valid values:
	//
	// 	- **cluster**: Serverless mode or elastic storage mode.
	//
	// 	- **replicaSet**: reserved storage mode.
	//
	// example:
	//
	// cluster
	InstanceDeployType *string `json:"InstanceDeployType,omitempty" xml:"InstanceDeployType,omitempty"`
	// The network type of the instance. Valid values:
	//
	// 	- **Classic**: classic network.
	//
	// 	- **VPC**: VPC.
	//
	// example:
	//
	// VPC
	InstanceNetworkType *string `json:"InstanceNetworkType,omitempty" xml:"InstanceNetworkType,omitempty"`
	// The lock mode of the instance. Valid values:
	//
	// 	- **Unlock**: The instance is not locked.
	//
	// 	- **ManualLock**: The instance is manually locked.
	//
	// 	- **LockByExpiration**: The instance is automatically locked due to instance expiration.
	//
	// 	- **LockByRestoration**: The instance is automatically locked due to instance restoration.
	//
	// 	- **LockByDiskQuota**: The instance is automatically locked due to exhausted storage.
	//
	// 	- **LockReadInstanceByDiskQuota**: The instance is a read-only instance and is automatically locked when the disk space is full.
	//
	// example:
	//
	// Unlock
	LockMode *string `json:"LockMode,omitempty" xml:"LockMode,omitempty"`
	// The reason why the instance is locked. Valid values:
	//
	// 	- **0**: The instance is not locked.
	//
	// 	- **1**: The instance is manually locked.
	//
	// 	- **2**: The instance is automatically locked due to instance expiration.
	//
	// 	- **3**: The instance is automatically locked due to instance restoration.
	//
	// 	- **4**: The instance is automatically locked due to exhausted storage.
	//
	// >  If the instance is in reserved storage mode and is not locked, null is returned.
	//
	// example:
	//
	// 0
	LockReason *string `json:"LockReason,omitempty" xml:"LockReason,omitempty"`
	// The number of coordinator nodes.
	//
	// example:
	//
	// 1
	MasterNodeNum *int32 `json:"MasterNodeNum,omitempty" xml:"MasterNodeNum,omitempty"`
	// The billing method of the instance. Valid values:
	//
	// 	- **Postpaid**: pay-as-you-go.
	//
	// 	- **Prepaid**: subscription.
	//
	// example:
	//
	// Postpaid
	PayType *string `json:"PayType,omitempty" xml:"PayType,omitempty"`
	// product type
	//
	// example:
	//
	// standard
	ProdType *string `json:"ProdType,omitempty" xml:"ProdType,omitempty"`
	// The region ID.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the resource group to which the instance belongs.
	//
	// example:
	//
	// rg-bp67acfmxazb4p****
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	// The number of compute nodes.
	//
	// example:
	//
	// 4
	SegNodeNum *string `json:"SegNodeNum,omitempty" xml:"SegNodeNum,omitempty"`
	// The type of the Serverless mode. Valid values:
	//
	// 	- **Manual**: manual scheduling.
	//
	// 	- **Auto**: automatic scheduling.
	//
	// >  This parameter is returned only for instances in Serverless mode.
	//
	// example:
	//
	// Manual
	ServerlessMode *string `json:"ServerlessMode,omitempty" xml:"ServerlessMode,omitempty"`
	// The storage capacity of the instance. Unit: GB.
	//
	// example:
	//
	// 50
	StorageSize *string `json:"StorageSize,omitempty" xml:"StorageSize,omitempty"`
	// The storage type of the instance. Valid values:
	//
	// 	- **cloud_essd**: enhanced SSD (ESSD).
	//
	// 	- **cloud_efficiency**: ultra disk.
	//
	// example:
	//
	// cloud_essd
	StorageType *string `json:"StorageType,omitempty" xml:"StorageType,omitempty"`
	// The tags that are added to the instance.
	Tags *DescribeDBInstancesResponseBodyItemsDBInstanceTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Struct"`
	// The vSwitch ID.
	//
	// example:
	//
	// vsw-bp1cpq8mr64paltkb****
	VSwitchId *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	// The VPC ID of the instance.
	//
	// example:
	//
	// vpc-bp19ame5m1r3oejns****
	VpcId *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	// The zone ID.
	//
	// example:
	//
	// cn-hangzhou-h
	ZoneId *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s DescribeDBInstancesResponseBodyItemsDBInstance) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstancesResponseBodyItemsDBInstance) GoString() string {
	return s.String()
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) SetConnectionMode(v string) *DescribeDBInstancesResponseBodyItemsDBInstance {
	s.ConnectionMode = &v
	return s
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) SetCreateTime(v string) *DescribeDBInstancesResponseBodyItemsDBInstance {
	s.CreateTime = &v
	return s
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) SetDBInstanceCategory(v string) *DescribeDBInstancesResponseBodyItemsDBInstance {
	s.DBInstanceCategory = &v
	return s
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) SetDBInstanceDescription(v string) *DescribeDBInstancesResponseBodyItemsDBInstance {
	s.DBInstanceDescription = &v
	return s
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) SetDBInstanceId(v string) *DescribeDBInstancesResponseBodyItemsDBInstance {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) SetDBInstanceMode(v string) *DescribeDBInstancesResponseBodyItemsDBInstance {
	s.DBInstanceMode = &v
	return s
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) SetDBInstanceNetType(v string) *DescribeDBInstancesResponseBodyItemsDBInstance {
	s.DBInstanceNetType = &v
	return s
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) SetDBInstanceStatus(v string) *DescribeDBInstancesResponseBodyItemsDBInstance {
	s.DBInstanceStatus = &v
	return s
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) SetEngine(v string) *DescribeDBInstancesResponseBodyItemsDBInstance {
	s.Engine = &v
	return s
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) SetEngineVersion(v string) *DescribeDBInstancesResponseBodyItemsDBInstance {
	s.EngineVersion = &v
	return s
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) SetExpireTime(v string) *DescribeDBInstancesResponseBodyItemsDBInstance {
	s.ExpireTime = &v
	return s
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) SetInstanceDeployType(v string) *DescribeDBInstancesResponseBodyItemsDBInstance {
	s.InstanceDeployType = &v
	return s
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) SetInstanceNetworkType(v string) *DescribeDBInstancesResponseBodyItemsDBInstance {
	s.InstanceNetworkType = &v
	return s
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) SetLockMode(v string) *DescribeDBInstancesResponseBodyItemsDBInstance {
	s.LockMode = &v
	return s
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) SetLockReason(v string) *DescribeDBInstancesResponseBodyItemsDBInstance {
	s.LockReason = &v
	return s
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) SetMasterNodeNum(v int32) *DescribeDBInstancesResponseBodyItemsDBInstance {
	s.MasterNodeNum = &v
	return s
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) SetPayType(v string) *DescribeDBInstancesResponseBodyItemsDBInstance {
	s.PayType = &v
	return s
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) SetProdType(v string) *DescribeDBInstancesResponseBodyItemsDBInstance {
	s.ProdType = &v
	return s
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) SetRegionId(v string) *DescribeDBInstancesResponseBodyItemsDBInstance {
	s.RegionId = &v
	return s
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) SetResourceGroupId(v string) *DescribeDBInstancesResponseBodyItemsDBInstance {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) SetSegNodeNum(v string) *DescribeDBInstancesResponseBodyItemsDBInstance {
	s.SegNodeNum = &v
	return s
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) SetServerlessMode(v string) *DescribeDBInstancesResponseBodyItemsDBInstance {
	s.ServerlessMode = &v
	return s
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) SetStorageSize(v string) *DescribeDBInstancesResponseBodyItemsDBInstance {
	s.StorageSize = &v
	return s
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) SetStorageType(v string) *DescribeDBInstancesResponseBodyItemsDBInstance {
	s.StorageType = &v
	return s
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) SetTags(v *DescribeDBInstancesResponseBodyItemsDBInstanceTags) *DescribeDBInstancesResponseBodyItemsDBInstance {
	s.Tags = v
	return s
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) SetVSwitchId(v string) *DescribeDBInstancesResponseBodyItemsDBInstance {
	s.VSwitchId = &v
	return s
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) SetVpcId(v string) *DescribeDBInstancesResponseBodyItemsDBInstance {
	s.VpcId = &v
	return s
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) SetZoneId(v string) *DescribeDBInstancesResponseBodyItemsDBInstance {
	s.ZoneId = &v
	return s
}

type DescribeDBInstancesResponseBodyItemsDBInstanceTags struct {
	Tag []*DescribeDBInstancesResponseBodyItemsDBInstanceTagsTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s DescribeDBInstancesResponseBodyItemsDBInstanceTags) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstancesResponseBodyItemsDBInstanceTags) GoString() string {
	return s.String()
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstanceTags) SetTag(v []*DescribeDBInstancesResponseBodyItemsDBInstanceTagsTag) *DescribeDBInstancesResponseBodyItemsDBInstanceTags {
	s.Tag = v
	return s
}

type DescribeDBInstancesResponseBodyItemsDBInstanceTagsTag struct {
	// The key of tag N.
	//
	// example:
	//
	// test-key
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The value of tag N.
	//
	// example:
	//
	// test-value
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeDBInstancesResponseBodyItemsDBInstanceTagsTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstancesResponseBodyItemsDBInstanceTagsTag) GoString() string {
	return s.String()
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstanceTagsTag) SetKey(v string) *DescribeDBInstancesResponseBodyItemsDBInstanceTagsTag {
	s.Key = &v
	return s
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstanceTagsTag) SetValue(v string) *DescribeDBInstancesResponseBodyItemsDBInstanceTagsTag {
	s.Value = &v
	return s
}

type DescribeDBInstancesResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeDBInstancesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeDBInstancesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstancesResponse) GoString() string {
	return s.String()
}

func (s *DescribeDBInstancesResponse) SetHeaders(v map[string]*string) *DescribeDBInstancesResponse {
	s.Headers = v
	return s
}

func (s *DescribeDBInstancesResponse) SetStatusCode(v int32) *DescribeDBInstancesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDBInstancesResponse) SetBody(v *DescribeDBInstancesResponseBody) *DescribeDBInstancesResponse {
	s.Body = v
	return s
}

type DescribeDBResourceGroupRequest struct {
	// The instance ID.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The name of the resource group.
	//
	// >  If you specify this parameter, the information about the specified resource group is returned. If you do not specify this parameter, the information about all resource groups is returned.
	//
	// example:
	//
	// testgroup
	ResourceGroupName *string `json:"ResourceGroupName,omitempty" xml:"ResourceGroupName,omitempty"`
}

func (s DescribeDBResourceGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBResourceGroupRequest) GoString() string {
	return s.String()
}

func (s *DescribeDBResourceGroupRequest) SetDBInstanceId(v string) *DescribeDBResourceGroupRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDBResourceGroupRequest) SetOwnerId(v int64) *DescribeDBResourceGroupRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeDBResourceGroupRequest) SetResourceGroupName(v string) *DescribeDBResourceGroupRequest {
	s.ResourceGroupName = &v
	return s
}

type DescribeDBResourceGroupResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The queried resource group information.
	ResourceGroupItems *DescribeDBResourceGroupResponseBodyResourceGroupItems `json:"ResourceGroupItems,omitempty" xml:"ResourceGroupItems,omitempty" type:"Struct"`
}

func (s DescribeDBResourceGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBResourceGroupResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDBResourceGroupResponseBody) SetRequestId(v string) *DescribeDBResourceGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDBResourceGroupResponseBody) SetResourceGroupItems(v *DescribeDBResourceGroupResponseBodyResourceGroupItems) *DescribeDBResourceGroupResponseBody {
	s.ResourceGroupItems = v
	return s
}

type DescribeDBResourceGroupResponseBodyResourceGroupItems struct {
	ResourceGroupItem []*DescribeDBResourceGroupResponseBodyResourceGroupItemsResourceGroupItem `json:"ResourceGroupItem,omitempty" xml:"ResourceGroupItem,omitempty" type:"Repeated"`
}

func (s DescribeDBResourceGroupResponseBodyResourceGroupItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBResourceGroupResponseBodyResourceGroupItems) GoString() string {
	return s.String()
}

func (s *DescribeDBResourceGroupResponseBodyResourceGroupItems) SetResourceGroupItem(v []*DescribeDBResourceGroupResponseBodyResourceGroupItemsResourceGroupItem) *DescribeDBResourceGroupResponseBodyResourceGroupItems {
	s.ResourceGroupItem = v
	return s
}

type DescribeDBResourceGroupResponseBodyResourceGroupItemsResourceGroupItem struct {
	// The configurations of the resource group.
	//
	// >
	//
	// 	- CpuRateLimit: the percentage of CPU resources that are available for the resource group. Unit: %.
	//
	// 	- MemoryLimit: the percentage of memory resources that are available for the resource group. Unit: %.
	//
	// 	- MemorySharedQuota: the percentage of memory resources shared among transactions that are submitted to the resource group. Unit: %. Default value: 80.
	//
	// 	- MemorySpillRatio: the memory spill ratio for memory-intensive transactions. When the memory that is used by memory-intensive transactions reaches this value, data is spilled to disks. Unit: %. Default value: 0.
	//
	// 	- Concurrency: the maximum number of concurrent transactions or parallel queries that are allowed for a resource group. Default value: 20.
	//
	// example:
	//
	// {"CpuRateLimit":"10","MemoryLimit":"12","MemorySharedQuota":"20","MemorySpillRatio":"75","Concurrency":"3"}
	ResourceGroupConfig *string `json:"ResourceGroupConfig,omitempty" xml:"ResourceGroupConfig,omitempty"`
	// The name of the resource group.
	//
	// example:
	//
	// testgroup
	ResourceGroupName *string `json:"ResourceGroupName,omitempty" xml:"ResourceGroupName,omitempty"`
	// The roles.
	RoleList *DescribeDBResourceGroupResponseBodyResourceGroupItemsResourceGroupItemRoleList `json:"RoleList,omitempty" xml:"RoleList,omitempty" type:"Struct"`
}

func (s DescribeDBResourceGroupResponseBodyResourceGroupItemsResourceGroupItem) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBResourceGroupResponseBodyResourceGroupItemsResourceGroupItem) GoString() string {
	return s.String()
}

func (s *DescribeDBResourceGroupResponseBodyResourceGroupItemsResourceGroupItem) SetResourceGroupConfig(v string) *DescribeDBResourceGroupResponseBodyResourceGroupItemsResourceGroupItem {
	s.ResourceGroupConfig = &v
	return s
}

func (s *DescribeDBResourceGroupResponseBodyResourceGroupItemsResourceGroupItem) SetResourceGroupName(v string) *DescribeDBResourceGroupResponseBodyResourceGroupItemsResourceGroupItem {
	s.ResourceGroupName = &v
	return s
}

func (s *DescribeDBResourceGroupResponseBodyResourceGroupItemsResourceGroupItem) SetRoleList(v *DescribeDBResourceGroupResponseBodyResourceGroupItemsResourceGroupItemRoleList) *DescribeDBResourceGroupResponseBodyResourceGroupItemsResourceGroupItem {
	s.RoleList = v
	return s
}

type DescribeDBResourceGroupResponseBodyResourceGroupItemsResourceGroupItemRoleList struct {
	Role []*string `json:"Role,omitempty" xml:"Role,omitempty" type:"Repeated"`
}

func (s DescribeDBResourceGroupResponseBodyResourceGroupItemsResourceGroupItemRoleList) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBResourceGroupResponseBodyResourceGroupItemsResourceGroupItemRoleList) GoString() string {
	return s.String()
}

func (s *DescribeDBResourceGroupResponseBodyResourceGroupItemsResourceGroupItemRoleList) SetRole(v []*string) *DescribeDBResourceGroupResponseBodyResourceGroupItemsResourceGroupItemRoleList {
	s.Role = v
	return s
}

type DescribeDBResourceGroupResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeDBResourceGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeDBResourceGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBResourceGroupResponse) GoString() string {
	return s.String()
}

func (s *DescribeDBResourceGroupResponse) SetHeaders(v map[string]*string) *DescribeDBResourceGroupResponse {
	s.Headers = v
	return s
}

func (s *DescribeDBResourceGroupResponse) SetStatusCode(v int32) *DescribeDBResourceGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDBResourceGroupResponse) SetBody(v *DescribeDBResourceGroupResponseBody) *DescribeDBResourceGroupResponse {
	s.Body = v
	return s
}

type DescribeDBResourceManagementModeRequest struct {
	// The instance ID.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s DescribeDBResourceManagementModeRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBResourceManagementModeRequest) GoString() string {
	return s.String()
}

func (s *DescribeDBResourceManagementModeRequest) SetDBInstanceId(v string) *DescribeDBResourceManagementModeRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDBResourceManagementModeRequest) SetOwnerId(v int64) *DescribeDBResourceManagementModeRequest {
	s.OwnerId = &v
	return s
}

type DescribeDBResourceManagementModeResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The resource management mode. Valid values:
	//
	// 	- resourceGroup: resource group management.
	//
	// 	- resourceQueue: resource queue management.
	//
	// example:
	//
	// resourceGroup
	ResourceManagementMode *string `json:"ResourceManagementMode,omitempty" xml:"ResourceManagementMode,omitempty"`
}

func (s DescribeDBResourceManagementModeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBResourceManagementModeResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDBResourceManagementModeResponseBody) SetRequestId(v string) *DescribeDBResourceManagementModeResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDBResourceManagementModeResponseBody) SetResourceManagementMode(v string) *DescribeDBResourceManagementModeResponseBody {
	s.ResourceManagementMode = &v
	return s
}

type DescribeDBResourceManagementModeResponse struct {
	Headers    map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeDBResourceManagementModeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeDBResourceManagementModeResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBResourceManagementModeResponse) GoString() string {
	return s.String()
}

func (s *DescribeDBResourceManagementModeResponse) SetHeaders(v map[string]*string) *DescribeDBResourceManagementModeResponse {
	s.Headers = v
	return s
}

func (s *DescribeDBResourceManagementModeResponse) SetStatusCode(v int32) *DescribeDBResourceManagementModeResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDBResourceManagementModeResponse) SetBody(v *DescribeDBResourceManagementModeResponseBody) *DescribeDBResourceManagementModeResponse {
	s.Body = v
	return s
}

type DescribeDBVersionInfosRequest struct {
	// The resource type of the instance. Valid values:
	//
	// 	- **StorageElastic**: elastic storage mode.
	//
	// 	- **Serverless**: Serverless mode.
	//
	// example:
	//
	// StorageElastic
	DBInstanceMode *string `json:"DBInstanceMode,omitempty" xml:"DBInstanceMode,omitempty"`
	// The minor version number that does not include the prefix.
	//
	// example:
	//
	// 6.3.10.20
	DBVersion *string `json:"DBVersion,omitempty" xml:"DBVersion,omitempty"`
	OwnerId   *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The region ID of the instance.
	//
	// >  You can call the [DescribeRegions](https://help.aliyun.com/document_detail/86912.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the resource group to which the instance belongs. For information about how to obtain the ID of a resource group, see [View basic information of a resource group](https://help.aliyun.com/document_detail/151181.html).
	//
	// example:
	//
	// rg-bp67acfmxazb4p****
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
}

func (s DescribeDBVersionInfosRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBVersionInfosRequest) GoString() string {
	return s.String()
}

func (s *DescribeDBVersionInfosRequest) SetDBInstanceMode(v string) *DescribeDBVersionInfosRequest {
	s.DBInstanceMode = &v
	return s
}

func (s *DescribeDBVersionInfosRequest) SetDBVersion(v string) *DescribeDBVersionInfosRequest {
	s.DBVersion = &v
	return s
}

func (s *DescribeDBVersionInfosRequest) SetOwnerId(v int64) *DescribeDBVersionInfosRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeDBVersionInfosRequest) SetRegionId(v string) *DescribeDBVersionInfosRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeDBVersionInfosRequest) SetResourceGroupId(v string) *DescribeDBVersionInfosRequest {
	s.ResourceGroupId = &v
	return s
}

type DescribeDBVersionInfosResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The queried minor versions.
	VersionDetails *DescribeDBVersionInfosResponseBodyVersionDetails `json:"VersionDetails,omitempty" xml:"VersionDetails,omitempty" type:"Struct"`
}

func (s DescribeDBVersionInfosResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBVersionInfosResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDBVersionInfosResponseBody) SetRequestId(v string) *DescribeDBVersionInfosResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDBVersionInfosResponseBody) SetVersionDetails(v *DescribeDBVersionInfosResponseBodyVersionDetails) *DescribeDBVersionInfosResponseBody {
	s.VersionDetails = v
	return s
}

type DescribeDBVersionInfosResponseBodyVersionDetails struct {
	// The queried minor version information about the instance in Serverless mode.
	//
	// example:
	//
	// "Serverless": [
	//
	//                 {
	//
	//                     "engineVersion": "6.0",
	//
	//                     "versionInfos": [
	//
	//                         {
	//
	//                             "kernelVersion": "v2.0.0.5",
	//
	//                             "releaseDate": "2023-05-28T07:48Z",
	//
	//                             "expirationDate": "2026-05-28T07:48Z"
	//
	//                         },
	//
	//                         {
	//
	//                             "kernelVersion": "v2.0.0.1",
	//
	//                             "releaseDate": "2023-03-27T12:44Z",
	//
	//                             "expirationDate": "2026-03-27T12:44Z"
	//
	//                         },
	//
	//                         {
	//
	//                             "kernelVersion": "v1.0.5.1",
	//
	//                             "releaseDate": "2023-02-22T11:39Z",
	//
	//                             "expirationDate": "2026-02-22T11:39Z"
	//
	//                         }
	//
	//                     ]
	//
	//                 }
	//
	// ]
	Serverless interface{} `json:"Serverless,omitempty" xml:"Serverless,omitempty"`
	// The queried minor version information about the instance in elastic storage mode.
	//
	// example:
	//
	// "StorageElasic": [
	//
	//                 {
	//
	//                     "engineVersion": "6.0",
	//
	//                     "versionInfos": [
	//
	//                         {
	//
	//                             "kernelVersion": "v6.3.11.2",
	//
	//                             "releaseDate": "2023-08-17T09:14Z",
	//
	//                             "expirationDate": "2026-08-17T09:14Z"
	//
	//                         }
	//
	//           },
	//
	//                 {
	//
	//                     "engineVersion": "7.0",
	//
	//                     "versionInfos": [
	//
	//                         {
	//
	//                             "kernelVersion": "v7.0.2.0",
	//
	//                             "releaseDate": "2023-08-09T06:47Z",
	//
	//                             "expirationDate": "2026-08-09T06:47Z"
	//
	//                         },
	//
	//                         {
	//
	//                             "kernelVersion": "v7.0.1.8",
	//
	//                             "releaseDate": "2023-05-25T06:56Z",
	//
	//                             "expirationDate": "2026-05-25T06:56Z"
	//
	//                         }
	//
	//                     ]
	//
	//                 }
	//
	// ]
	StorageElastic interface{} `json:"StorageElastic,omitempty" xml:"StorageElastic,omitempty"`
}

func (s DescribeDBVersionInfosResponseBodyVersionDetails) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBVersionInfosResponseBodyVersionDetails) GoString() string {
	return s.String()
}

func (s *DescribeDBVersionInfosResponseBodyVersionDetails) SetServerless(v interface{}) *DescribeDBVersionInfosResponseBodyVersionDetails {
	s.Serverless = v
	return s
}

func (s *DescribeDBVersionInfosResponseBodyVersionDetails) SetStorageElastic(v interface{}) *DescribeDBVersionInfosResponseBodyVersionDetails {
	s.StorageElastic = v
	return s
}

type DescribeDBVersionInfosResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeDBVersionInfosResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeDBVersionInfosResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBVersionInfosResponse) GoString() string {
	return s.String()
}

func (s *DescribeDBVersionInfosResponse) SetHeaders(v map[string]*string) *DescribeDBVersionInfosResponse {
	s.Headers = v
	return s
}

func (s *DescribeDBVersionInfosResponse) SetStatusCode(v int32) *DescribeDBVersionInfosResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDBVersionInfosResponse) SetBody(v *DescribeDBVersionInfosResponseBody) *DescribeDBVersionInfosResponse {
	s.Body = v
	return s
}

type DescribeDataBackupsRequest struct {
	// The ID of the backup set. If you specify BackupId, the details of the backup set are returned.
	//
	// > You can call the [DescribeDataBackups](https://help.aliyun.com/document_detail/210093.html) operation to query the information about all backup sets of an instance, including backup set IDs.
	//
	// example:
	//
	// 327329803
	BackupId *string `json:"BackupId,omitempty" xml:"BackupId,omitempty"`
	// The backup mode. Valid values:
	//
	// 	- Automated
	//
	// 	- Manual
	//
	// If you do not specify this parameter, all backup sets are returned.
	//
	// example:
	//
	// Automated
	BackupMode *string `json:"BackupMode,omitempty" xml:"BackupMode,omitempty"`
	// The state of the backup set. Valid values:
	//
	// 	- Success
	//
	// 	- Failed
	//
	// If you do not specify this parameter, all backup sets are returned.
	//
	// example:
	//
	// Success
	BackupStatus *string `json:"BackupStatus,omitempty" xml:"BackupStatus,omitempty"`
	// The instance ID.
	//
	// > You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp***************
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The backup type. Valid values:
	//
	// 	- **DATA**: full backup.
	//
	// 	- **RESTOREPOI**: point-in-time recovery backup.
	//
	// If you do not specify this parameter, the backup sets of full backup are returned.
	//
	// example:
	//
	// DATA
	DataType *string `json:"DataType,omitempty" xml:"DataType,omitempty"`
	// The end of the time range to query. The end time must be later than the start time. Specify the time in the yyyy-MM-ddTHH:mmZ format. The time must be in UTC.
	//
	// example:
	//
	// 2011-06-01T16:00Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The page number. Pages start from page 1. Default value: 1
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. Valid values:
	//
	// 	- 30
	//
	// 	- 50
	//
	// 	- 100
	//
	// Default value: 30.
	//
	// example:
	//
	// 30
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The beginning of the time range to query. Specify the time in the yyyy-MM-ddTHH:mmZ format. The time must be in UTC.
	//
	// example:
	//
	// 2011-06-01T15:00Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeDataBackupsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDataBackupsRequest) GoString() string {
	return s.String()
}

func (s *DescribeDataBackupsRequest) SetBackupId(v string) *DescribeDataBackupsRequest {
	s.BackupId = &v
	return s
}

func (s *DescribeDataBackupsRequest) SetBackupMode(v string) *DescribeDataBackupsRequest {
	s.BackupMode = &v
	return s
}

func (s *DescribeDataBackupsRequest) SetBackupStatus(v string) *DescribeDataBackupsRequest {
	s.BackupStatus = &v
	return s
}

func (s *DescribeDataBackupsRequest) SetDBInstanceId(v string) *DescribeDataBackupsRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDataBackupsRequest) SetDataType(v string) *DescribeDataBackupsRequest {
	s.DataType = &v
	return s
}

func (s *DescribeDataBackupsRequest) SetEndTime(v string) *DescribeDataBackupsRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeDataBackupsRequest) SetPageNumber(v int32) *DescribeDataBackupsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeDataBackupsRequest) SetPageSize(v int32) *DescribeDataBackupsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeDataBackupsRequest) SetStartTime(v string) *DescribeDataBackupsRequest {
	s.StartTime = &v
	return s
}

type DescribeDataBackupsResponseBody struct {
	// The instance ID.
	Items []*DescribeDataBackupsResponseBodyItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Repeated"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 1
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 3E387971-33A5-5019-AD7F-DC**********
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total backup set size. Unit: Byte.
	//
	// example:
	//
	// 1111111111
	TotalBackupSize *int64 `json:"TotalBackupSize,omitempty" xml:"TotalBackupSize,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 1
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeDataBackupsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDataBackupsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDataBackupsResponseBody) SetItems(v []*DescribeDataBackupsResponseBodyItems) *DescribeDataBackupsResponseBody {
	s.Items = v
	return s
}

func (s *DescribeDataBackupsResponseBody) SetPageNumber(v int32) *DescribeDataBackupsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeDataBackupsResponseBody) SetPageSize(v int32) *DescribeDataBackupsResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeDataBackupsResponseBody) SetRequestId(v string) *DescribeDataBackupsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDataBackupsResponseBody) SetTotalBackupSize(v int64) *DescribeDataBackupsResponseBody {
	s.TotalBackupSize = &v
	return s
}

func (s *DescribeDataBackupsResponseBody) SetTotalCount(v int32) *DescribeDataBackupsResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeDataBackupsResponseBodyItems struct {
	// The UTC time when the backup ended. The time is in the yyyy-MM-ddTHH:mmZ format. The time is displayed in UTC.
	//
	// example:
	//
	// 2021-12-22T12:01:43Z
	BackupEndTime *string `json:"BackupEndTime,omitempty" xml:"BackupEndTime,omitempty"`
	// The local time when the backup ended. The time is in the yyyy-MM-dd HH:mm:ss format. The time is your local time.
	//
	// example:
	//
	// 2021-12-22 20:00:25
	BackupEndTimeLocal *string `json:"BackupEndTimeLocal,omitempty" xml:"BackupEndTimeLocal,omitempty"`
	// The method that is used to generate the backup set. Valid values:
	//
	// 	- **Logical**: logical backup
	//
	// 	- **Physical**: physical backup
	//
	// 	- **Snapshot**: snapshot backup
	//
	// example:
	//
	// Physical
	BackupMethod *string `json:"BackupMethod,omitempty" xml:"BackupMethod,omitempty"`
	// The backup mode.
	//
	// Valid values for full backup:
	//
	// 	- Automated: automatic backup
	//
	// 	- Manual: manual backup
	//
	// Valid values for point-in-time backup:
	//
	// 	- Automated: point-in-time backup after full backup
	//
	// 	- Manual: manual point-in-time backup
	//
	// 	- Period: point-in-time backup that is triggered by a backup policy
	//
	// example:
	//
	// Automated
	BackupMode *string `json:"BackupMode,omitempty" xml:"BackupMode,omitempty"`
	// The ID of the backup set.
	//
	// example:
	//
	// 1111111111
	BackupSetId *string `json:"BackupSetId,omitempty" xml:"BackupSetId,omitempty"`
	// The size of the backup file. Unit: bytes.
	//
	// example:
	//
	// 2167808
	BackupSize *int64 `json:"BackupSize,omitempty" xml:"BackupSize,omitempty"`
	// The UTC time when the backup started. The time is in the yyyy-MM-ddTHH:mmZ format. The time is displayed in UTC.
	//
	// example:
	//
	// 2021-12-22T12:00:25Z
	BackupStartTime *string `json:"BackupStartTime,omitempty" xml:"BackupStartTime,omitempty"`
	// The local time when the backup started. The time is in the yyyy-MM-dd HH:mm:ss format. The time is your local time.
	//
	// example:
	//
	// 2011-05-30 03:29:00
	BackupStartTimeLocal *string `json:"BackupStartTimeLocal,omitempty" xml:"BackupStartTimeLocal,omitempty"`
	// The status of the backup set. Valid values:
	//
	// 	- Success
	//
	// 	- Failure
	//
	// example:
	//
	// Success
	BackupStatus *string `json:"BackupStatus,omitempty" xml:"BackupStatus,omitempty"`
	// The name of a point-in-time backup set or the full backup set.
	//
	// example:
	//
	// adbpgbackup_555*****_20211222200019
	BaksetName *string `json:"BaksetName,omitempty" xml:"BaksetName,omitempty"`
	// 	- For full backup, this parameter indicates the point in time at which the data in the data backup file is consistent.
	//
	// 	- For point-in-time backup, this parameter indicates that the returned point in time is a timestamp.
	//
	// example:
	//
	// 1576506856
	ConsistentTime *int64 `json:"ConsistentTime,omitempty" xml:"ConsistentTime,omitempty"`
	// The ID of the instance.
	//
	// example:
	//
	// gp-bp**************-master
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The type of the backup. Valid values:
	//
	// 	- DATA: full backup
	//
	// 	- RESTOREPOI: point-in-time backup
	//
	// example:
	//
	// DATA
	DataType *string `json:"DataType,omitempty" xml:"DataType,omitempty"`
}

func (s DescribeDataBackupsResponseBodyItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeDataBackupsResponseBodyItems) GoString() string {
	return s.String()
}

func (s *DescribeDataBackupsResponseBodyItems) SetBackupEndTime(v string) *DescribeDataBackupsResponseBodyItems {
	s.BackupEndTime = &v
	return s
}

func (s *DescribeDataBackupsResponseBodyItems) SetBackupEndTimeLocal(v string) *DescribeDataBackupsResponseBodyItems {
	s.BackupEndTimeLocal = &v
	return s
}

func (s *DescribeDataBackupsResponseBodyItems) SetBackupMethod(v string) *DescribeDataBackupsResponseBodyItems {
	s.BackupMethod = &v
	return s
}

func (s *DescribeDataBackupsResponseBodyItems) SetBackupMode(v string) *DescribeDataBackupsResponseBodyItems {
	s.BackupMode = &v
	return s
}

func (s *DescribeDataBackupsResponseBodyItems) SetBackupSetId(v string) *DescribeDataBackupsResponseBodyItems {
	s.BackupSetId = &v
	return s
}

func (s *DescribeDataBackupsResponseBodyItems) SetBackupSize(v int64) *DescribeDataBackupsResponseBodyItems {
	s.BackupSize = &v
	return s
}

func (s *DescribeDataBackupsResponseBodyItems) SetBackupStartTime(v string) *DescribeDataBackupsResponseBodyItems {
	s.BackupStartTime = &v
	return s
}

func (s *DescribeDataBackupsResponseBodyItems) SetBackupStartTimeLocal(v string) *DescribeDataBackupsResponseBodyItems {
	s.BackupStartTimeLocal = &v
	return s
}

func (s *DescribeDataBackupsResponseBodyItems) SetBackupStatus(v string) *DescribeDataBackupsResponseBodyItems {
	s.BackupStatus = &v
	return s
}

func (s *DescribeDataBackupsResponseBodyItems) SetBaksetName(v string) *DescribeDataBackupsResponseBodyItems {
	s.BaksetName = &v
	return s
}

func (s *DescribeDataBackupsResponseBodyItems) SetConsistentTime(v int64) *DescribeDataBackupsResponseBodyItems {
	s.ConsistentTime = &v
	return s
}

func (s *DescribeDataBackupsResponseBodyItems) SetDBInstanceId(v string) *DescribeDataBackupsResponseBodyItems {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDataBackupsResponseBodyItems) SetDataType(v string) *DescribeDataBackupsResponseBodyItems {
	s.DataType = &v
	return s
}

type DescribeDataBackupsResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeDataBackupsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeDataBackupsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDataBackupsResponse) GoString() string {
	return s.String()
}

func (s *DescribeDataBackupsResponse) SetHeaders(v map[string]*string) *DescribeDataBackupsResponse {
	s.Headers = v
	return s
}

func (s *DescribeDataBackupsResponse) SetStatusCode(v int32) *DescribeDataBackupsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDataBackupsResponse) SetBody(v *DescribeDataBackupsResponseBody) *DescribeDataBackupsResponse {
	s.Body = v
	return s
}

type DescribeDataReDistributeInfoRequest struct {
	// The instance ID.
	//
	// > You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the IDs of all AnalyticDB for PostgreSQL instances within a region.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s DescribeDataReDistributeInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDataReDistributeInfoRequest) GoString() string {
	return s.String()
}

func (s *DescribeDataReDistributeInfoRequest) SetDBInstanceId(v string) *DescribeDataReDistributeInfoRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDataReDistributeInfoRequest) SetOwnerId(v int64) *DescribeDataReDistributeInfoRequest {
	s.OwnerId = &v
	return s
}

type DescribeDataReDistributeInfoResponseBody struct {
	// The data redistribution information.
	DataReDistributeInfo *DescribeDataReDistributeInfoResponseBodyDataReDistributeInfo `json:"DataReDistributeInfo,omitempty" xml:"DataReDistributeInfo,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// 04836A02-ADC9-1AA7-AC36-DE5E048BF505
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeDataReDistributeInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDataReDistributeInfoResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDataReDistributeInfoResponseBody) SetDataReDistributeInfo(v *DescribeDataReDistributeInfoResponseBodyDataReDistributeInfo) *DescribeDataReDistributeInfoResponseBody {
	s.DataReDistributeInfo = v
	return s
}

func (s *DescribeDataReDistributeInfoResponseBody) SetRequestId(v string) *DescribeDataReDistributeInfoResponseBody {
	s.RequestId = &v
	return s
}

type DescribeDataReDistributeInfoResponseBodyDataReDistributeInfo struct {
	// The execution information. If an error occurs, the error message is returned.
	//
	// example:
	//
	// redistributing
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The progress of data redistribution. Unit: %.
	//
	// example:
	//
	// 33
	Progress *int64 `json:"Progress,omitempty" xml:"Progress,omitempty"`
	// The estimated remaining time for data redistribution.
	//
	// example:
	//
	// 00:01:28
	RemainTime *string `json:"RemainTime,omitempty" xml:"RemainTime,omitempty"`
	// This parameter is not supported.
	//
	// example:
	//
	// null
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The status of data redistribution.
	//
	// example:
	//
	// RUNNING
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The execution type. The value **immediate*	- is returned, indicating immediate execution.
	//
	// example:
	//
	// immediate
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeDataReDistributeInfoResponseBodyDataReDistributeInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeDataReDistributeInfoResponseBodyDataReDistributeInfo) GoString() string {
	return s.String()
}

func (s *DescribeDataReDistributeInfoResponseBodyDataReDistributeInfo) SetMessage(v string) *DescribeDataReDistributeInfoResponseBodyDataReDistributeInfo {
	s.Message = &v
	return s
}

func (s *DescribeDataReDistributeInfoResponseBodyDataReDistributeInfo) SetProgress(v int64) *DescribeDataReDistributeInfoResponseBodyDataReDistributeInfo {
	s.Progress = &v
	return s
}

func (s *DescribeDataReDistributeInfoResponseBodyDataReDistributeInfo) SetRemainTime(v string) *DescribeDataReDistributeInfoResponseBodyDataReDistributeInfo {
	s.RemainTime = &v
	return s
}

func (s *DescribeDataReDistributeInfoResponseBodyDataReDistributeInfo) SetStartTime(v string) *DescribeDataReDistributeInfoResponseBodyDataReDistributeInfo {
	s.StartTime = &v
	return s
}

func (s *DescribeDataReDistributeInfoResponseBodyDataReDistributeInfo) SetStatus(v string) *DescribeDataReDistributeInfoResponseBodyDataReDistributeInfo {
	s.Status = &v
	return s
}

func (s *DescribeDataReDistributeInfoResponseBodyDataReDistributeInfo) SetType(v string) *DescribeDataReDistributeInfoResponseBodyDataReDistributeInfo {
	s.Type = &v
	return s
}

type DescribeDataReDistributeInfoResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeDataReDistributeInfoResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeDataReDistributeInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDataReDistributeInfoResponse) GoString() string {
	return s.String()
}

func (s *DescribeDataReDistributeInfoResponse) SetHeaders(v map[string]*string) *DescribeDataReDistributeInfoResponse {
	s.Headers = v
	return s
}

func (s *DescribeDataReDistributeInfoResponse) SetStatusCode(v int32) *DescribeDataReDistributeInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDataReDistributeInfoResponse) SetBody(v *DescribeDataReDistributeInfoResponseBody) *DescribeDataReDistributeInfoResponse {
	s.Body = v
	return s
}

type DescribeDataShareInstancesRequest struct {
	OwnerId *int64 `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The page number. Pages start from page 1. Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. Valid values:
	//
	// 	- **30**
	//
	// 	- **50**
	//
	// 	- **100**
	//
	// Default value: 30.
	//
	// example:
	//
	// 30
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The region ID of the instance.
	//
	// > You can call the [DescribeRegions](https://help.aliyun.com/document_detail/86912.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the resource group to which the instance belongs. For information about how to obtain the ID of a resource group, see [View basic information of a resource group](https://help.aliyun.com/document_detail/151181.html).
	//
	// example:
	//
	// rg-bp67acfmxazb4p****
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	// The keyword used to filter instances, which can be an instance ID or instance description.
	//
	// > You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs and instance descriptions.
	//
	// example:
	//
	// gp-bp***************
	SearchValue *string `json:"SearchValue,omitempty" xml:"SearchValue,omitempty"`
}

func (s DescribeDataShareInstancesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDataShareInstancesRequest) GoString() string {
	return s.String()
}

func (s *DescribeDataShareInstancesRequest) SetOwnerId(v int64) *DescribeDataShareInstancesRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeDataShareInstancesRequest) SetPageNumber(v int32) *DescribeDataShareInstancesRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeDataShareInstancesRequest) SetPageSize(v int32) *DescribeDataShareInstancesRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeDataShareInstancesRequest) SetRegionId(v string) *DescribeDataShareInstancesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeDataShareInstancesRequest) SetResourceGroupId(v string) *DescribeDataShareInstancesRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeDataShareInstancesRequest) SetSearchValue(v string) *DescribeDataShareInstancesRequest {
	s.SearchValue = &v
	return s
}

type DescribeDataShareInstancesResponseBody struct {
	// The state of data sharing. Valid values:
	//
	// 	- **opening**
	//
	// 	- **opened**
	//
	// 	- **closing**
	//
	// 	- **closed**
	Items *DescribeDataShareInstancesResponseBodyItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Struct"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 1
	PageRecordCount *int32 `json:"PageRecordCount,omitempty" xml:"PageRecordCount,omitempty"`
	// The request ID.
	//
	// example:
	//
	// B4CAF581-2AC7-41AD-8940-D5**********
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 1
	TotalRecordCount *int32 `json:"TotalRecordCount,omitempty" xml:"TotalRecordCount,omitempty"`
}

func (s DescribeDataShareInstancesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDataShareInstancesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDataShareInstancesResponseBody) SetItems(v *DescribeDataShareInstancesResponseBodyItems) *DescribeDataShareInstancesResponseBody {
	s.Items = v
	return s
}

func (s *DescribeDataShareInstancesResponseBody) SetPageNumber(v int32) *DescribeDataShareInstancesResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeDataShareInstancesResponseBody) SetPageRecordCount(v int32) *DescribeDataShareInstancesResponseBody {
	s.PageRecordCount = &v
	return s
}

func (s *DescribeDataShareInstancesResponseBody) SetRequestId(v string) *DescribeDataShareInstancesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDataShareInstancesResponseBody) SetTotalRecordCount(v int32) *DescribeDataShareInstancesResponseBody {
	s.TotalRecordCount = &v
	return s
}

type DescribeDataShareInstancesResponseBodyItems struct {
	DBInstance []*DescribeDataShareInstancesResponseBodyItemsDBInstance `json:"DBInstance,omitempty" xml:"DBInstance,omitempty" type:"Repeated"`
}

func (s DescribeDataShareInstancesResponseBodyItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeDataShareInstancesResponseBodyItems) GoString() string {
	return s.String()
}

func (s *DescribeDataShareInstancesResponseBodyItems) SetDBInstance(v []*DescribeDataShareInstancesResponseBodyItemsDBInstance) *DescribeDataShareInstancesResponseBodyItems {
	s.DBInstance = v
	return s
}

type DescribeDataShareInstancesResponseBodyItemsDBInstance struct {
	// The ID of the instance.
	//
	// example:
	//
	// gp-bp***************
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The resource type of the instance. Valid values:
	//
	// 	- **Serverless**: Serverless mode
	//
	// 	- **StorageElasic**: elastic storage mode
	//
	// 	- **Classic**: reserved storage mode
	//
	// example:
	//
	// Serverless
	DBInstanceMode *string `json:"DBInstanceMode,omitempty" xml:"DBInstanceMode,omitempty"`
	// The state of data sharing. Valid values:
	//
	// 	- **opening**: Data sharing is being enabled.
	//
	// 	- **opened**: Data sharing is enabled.
	//
	// 	- **closing**: Data sharing is being disabled.
	//
	// 	- **closed**: Data sharing is disabled.
	//
	// example:
	//
	// opened
	DataShareStatus *string `json:"DataShareStatus,omitempty" xml:"DataShareStatus,omitempty"`
	// The description of the instance.
	//
	// example:
	//
	// gp-bp***************
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The region ID of the instance.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The zone ID of the instance.
	//
	// example:
	//
	// cn-hangzhou-j
	ZoneId *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s DescribeDataShareInstancesResponseBodyItemsDBInstance) String() string {
	return tea.Prettify(s)
}

func (s DescribeDataShareInstancesResponseBodyItemsDBInstance) GoString() string {
	return s.String()
}

func (s *DescribeDataShareInstancesResponseBodyItemsDBInstance) SetDBInstanceId(v string) *DescribeDataShareInstancesResponseBodyItemsDBInstance {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDataShareInstancesResponseBodyItemsDBInstance) SetDBInstanceMode(v string) *DescribeDataShareInstancesResponseBodyItemsDBInstance {
	s.DBInstanceMode = &v
	return s
}

func (s *DescribeDataShareInstancesResponseBodyItemsDBInstance) SetDataShareStatus(v string) *DescribeDataShareInstancesResponseBodyItemsDBInstance {
	s.DataShareStatus = &v
	return s
}

func (s *DescribeDataShareInstancesResponseBodyItemsDBInstance) SetDescription(v string) *DescribeDataShareInstancesResponseBodyItemsDBInstance {
	s.Description = &v
	return s
}

func (s *DescribeDataShareInstancesResponseBodyItemsDBInstance) SetRegionId(v string) *DescribeDataShareInstancesResponseBodyItemsDBInstance {
	s.RegionId = &v
	return s
}

func (s *DescribeDataShareInstancesResponseBodyItemsDBInstance) SetZoneId(v string) *DescribeDataShareInstancesResponseBodyItemsDBInstance {
	s.ZoneId = &v
	return s
}

type DescribeDataShareInstancesResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeDataShareInstancesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeDataShareInstancesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDataShareInstancesResponse) GoString() string {
	return s.String()
}

func (s *DescribeDataShareInstancesResponse) SetHeaders(v map[string]*string) *DescribeDataShareInstancesResponse {
	s.Headers = v
	return s
}

func (s *DescribeDataShareInstancesResponse) SetStatusCode(v int32) *DescribeDataShareInstancesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDataShareInstancesResponse) SetBody(v *DescribeDataShareInstancesResponseBody) *DescribeDataShareInstancesResponse {
	s.Body = v
	return s
}

type DescribeDataSharePerformanceRequest struct {
	// The end of the time range to query. Specify the time in the *yyyy-MM-dd*T*HH:mm*Z format. The time must be in UTC.
	//
	// example:
	//
	// 2022-08-03T15:10Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The name of the performance metric. Separate multiple values with commas (,). Valid values:
	//
	// 	- **adbpg_datashare_topic_count**: the number of shared topics.
	//
	// 	- **adbpg_datashare_data_size_mb**: the amount of data shared.
	//
	// This parameter is required.
	//
	// example:
	//
	// adbpg_datashare_topic_count
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The region ID of the instance.
	//
	// >  You can call the [DescribeRegions](https://help.aliyun.com/document_detail/86912.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// This parameter is no longer used.
	//
	// example:
	//
	// rg-bp67acfmxazb4p****
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	// The beginning of the time range to query. Specify the time in the *yyyy-MM-dd*T*HH:mm*Z format. The time must be in UTC.
	//
	// example:
	//
	// 2022-08-03T15:00Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeDataSharePerformanceRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDataSharePerformanceRequest) GoString() string {
	return s.String()
}

func (s *DescribeDataSharePerformanceRequest) SetEndTime(v string) *DescribeDataSharePerformanceRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeDataSharePerformanceRequest) SetKey(v string) *DescribeDataSharePerformanceRequest {
	s.Key = &v
	return s
}

func (s *DescribeDataSharePerformanceRequest) SetRegionId(v string) *DescribeDataSharePerformanceRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeDataSharePerformanceRequest) SetResourceGroupId(v string) *DescribeDataSharePerformanceRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeDataSharePerformanceRequest) SetStartTime(v string) *DescribeDataSharePerformanceRequest {
	s.StartTime = &v
	return s
}

type DescribeDataSharePerformanceResponseBody struct {
	// The ID of the instance.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBClusterId *string `json:"DBClusterId,omitempty" xml:"DBClusterId,omitempty"`
	// The end time of the query.
	//
	// example:
	//
	// 2022-08-03T15:10Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// Details of data sharing performance metrics.
	PerformanceKeys []*DescribeDataSharePerformanceResponseBodyPerformanceKeys `json:"PerformanceKeys,omitempty" xml:"PerformanceKeys,omitempty" type:"Repeated"`
	// The ID of the request.
	//
	// example:
	//
	// BBE00C04-A3E8-4114-881D-0480A72CB92E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The start time of the query.
	//
	// example:
	//
	// 2022-08-03T15:00Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeDataSharePerformanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDataSharePerformanceResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDataSharePerformanceResponseBody) SetDBClusterId(v string) *DescribeDataSharePerformanceResponseBody {
	s.DBClusterId = &v
	return s
}

func (s *DescribeDataSharePerformanceResponseBody) SetEndTime(v string) *DescribeDataSharePerformanceResponseBody {
	s.EndTime = &v
	return s
}

func (s *DescribeDataSharePerformanceResponseBody) SetPerformanceKeys(v []*DescribeDataSharePerformanceResponseBodyPerformanceKeys) *DescribeDataSharePerformanceResponseBody {
	s.PerformanceKeys = v
	return s
}

func (s *DescribeDataSharePerformanceResponseBody) SetRequestId(v string) *DescribeDataSharePerformanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDataSharePerformanceResponseBody) SetStartTime(v string) *DescribeDataSharePerformanceResponseBody {
	s.StartTime = &v
	return s
}

type DescribeDataSharePerformanceResponseBodyPerformanceKeys struct {
	// The name of the performance metric.
	//
	// example:
	//
	// adbpg_datashare_topic_count
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// Details of the performance metric.
	Series []*DescribeDataSharePerformanceResponseBodyPerformanceKeysSeries `json:"Series,omitempty" xml:"Series,omitempty" type:"Repeated"`
	// The unit of the performance metric.
	//
	// example:
	//
	// int
	Unit *string `json:"Unit,omitempty" xml:"Unit,omitempty"`
}

func (s DescribeDataSharePerformanceResponseBodyPerformanceKeys) String() string {
	return tea.Prettify(s)
}

func (s DescribeDataSharePerformanceResponseBodyPerformanceKeys) GoString() string {
	return s.String()
}

func (s *DescribeDataSharePerformanceResponseBodyPerformanceKeys) SetName(v string) *DescribeDataSharePerformanceResponseBodyPerformanceKeys {
	s.Name = &v
	return s
}

func (s *DescribeDataSharePerformanceResponseBodyPerformanceKeys) SetSeries(v []*DescribeDataSharePerformanceResponseBodyPerformanceKeysSeries) *DescribeDataSharePerformanceResponseBodyPerformanceKeys {
	s.Series = v
	return s
}

func (s *DescribeDataSharePerformanceResponseBodyPerformanceKeys) SetUnit(v string) *DescribeDataSharePerformanceResponseBodyPerformanceKeys {
	s.Unit = &v
	return s
}

type DescribeDataSharePerformanceResponseBodyPerformanceKeysSeries struct {
	// The name of the performance metric.
	//
	// example:
	//
	// adbpg_datashare_topic_count
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// One or more values of the performance metric.
	Values []*DescribeDataSharePerformanceResponseBodyPerformanceKeysSeriesValues `json:"Values,omitempty" xml:"Values,omitempty" type:"Repeated"`
}

func (s DescribeDataSharePerformanceResponseBodyPerformanceKeysSeries) String() string {
	return tea.Prettify(s)
}

func (s DescribeDataSharePerformanceResponseBodyPerformanceKeysSeries) GoString() string {
	return s.String()
}

func (s *DescribeDataSharePerformanceResponseBodyPerformanceKeysSeries) SetName(v string) *DescribeDataSharePerformanceResponseBodyPerformanceKeysSeries {
	s.Name = &v
	return s
}

func (s *DescribeDataSharePerformanceResponseBodyPerformanceKeysSeries) SetValues(v []*DescribeDataSharePerformanceResponseBodyPerformanceKeysSeriesValues) *DescribeDataSharePerformanceResponseBodyPerformanceKeysSeries {
	s.Values = v
	return s
}

type DescribeDataSharePerformanceResponseBodyPerformanceKeysSeriesValues struct {
	// The value of the performance metric at a point in time.
	Point []*string `json:"Point,omitempty" xml:"Point,omitempty" type:"Repeated"`
}

func (s DescribeDataSharePerformanceResponseBodyPerformanceKeysSeriesValues) String() string {
	return tea.Prettify(s)
}

func (s DescribeDataSharePerformanceResponseBodyPerformanceKeysSeriesValues) GoString() string {
	return s.String()
}

func (s *DescribeDataSharePerformanceResponseBodyPerformanceKeysSeriesValues) SetPoint(v []*string) *DescribeDataSharePerformanceResponseBodyPerformanceKeysSeriesValues {
	s.Point = v
	return s
}

type DescribeDataSharePerformanceResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeDataSharePerformanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeDataSharePerformanceResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDataSharePerformanceResponse) GoString() string {
	return s.String()
}

func (s *DescribeDataSharePerformanceResponse) SetHeaders(v map[string]*string) *DescribeDataSharePerformanceResponse {
	s.Headers = v
	return s
}

func (s *DescribeDataSharePerformanceResponse) SetStatusCode(v int32) *DescribeDataSharePerformanceResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDataSharePerformanceResponse) SetBody(v *DescribeDataSharePerformanceResponseBody) *DescribeDataSharePerformanceResponse {
	s.Body = v
	return s
}

type DescribeDiagnosisDimensionsRequest struct {
	// The instance ID.
	//
	// > You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
}

func (s DescribeDiagnosisDimensionsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDiagnosisDimensionsRequest) GoString() string {
	return s.String()
}

func (s *DescribeDiagnosisDimensionsRequest) SetDBInstanceId(v string) *DescribeDiagnosisDimensionsRequest {
	s.DBInstanceId = &v
	return s
}

type DescribeDiagnosisDimensionsResponseBody struct {
	// The names of the databases.
	Databases []*string `json:"Databases,omitempty" xml:"Databases,omitempty" type:"Repeated"`
	// The request ID.
	//
	// example:
	//
	// 9ADCAACA-E0E8-5319-AE3B-E260E957BDF9
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The names of the database accounts.
	UserNames []*string `json:"UserNames,omitempty" xml:"UserNames,omitempty" type:"Repeated"`
}

func (s DescribeDiagnosisDimensionsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDiagnosisDimensionsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDiagnosisDimensionsResponseBody) SetDatabases(v []*string) *DescribeDiagnosisDimensionsResponseBody {
	s.Databases = v
	return s
}

func (s *DescribeDiagnosisDimensionsResponseBody) SetRequestId(v string) *DescribeDiagnosisDimensionsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDiagnosisDimensionsResponseBody) SetUserNames(v []*string) *DescribeDiagnosisDimensionsResponseBody {
	s.UserNames = v
	return s
}

type DescribeDiagnosisDimensionsResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeDiagnosisDimensionsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeDiagnosisDimensionsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDiagnosisDimensionsResponse) GoString() string {
	return s.String()
}

func (s *DescribeDiagnosisDimensionsResponse) SetHeaders(v map[string]*string) *DescribeDiagnosisDimensionsResponse {
	s.Headers = v
	return s
}

func (s *DescribeDiagnosisDimensionsResponse) SetStatusCode(v int32) *DescribeDiagnosisDimensionsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDiagnosisDimensionsResponse) SetBody(v *DescribeDiagnosisDimensionsResponseBody) *DescribeDiagnosisDimensionsResponse {
	s.Body = v
	return s
}

type DescribeDiagnosisMonitorPerformanceRequest struct {
	// The ID of the instance.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the details of all AnalyticDB for PostgreSQL instances in a specific region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The name of the database.
	//
	// This parameter is required.
	//
	// example:
	//
	// adbtest
	Database *string `json:"Database,omitempty" xml:"Database,omitempty"`
	// The end of the time range to query. Specify the time in the *yyyy-MM-dd*T*HH:mm*Z format. The time must be in UTC. The end time must be later than the start time.
	//
	// example:
	//
	// 2022-05-07T07:59Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The filter condition on queries. Specify the value in the JSON format. Valid values:
	//
	// 	- `{"Type":"maxCost", "Value":"100"}`: filters the top 100 queries that are the most time-consuming.
	//
	// 	- `{"Type":"status","Value":"finished"}`: filters completed queries.
	//
	// 	- `{"Type":"status","Value":"running"}`: filters running queries.
	//
	// 	- `{"Type":"cost","Min":"30","Max":"50"}`: filters the queries that consume 30 milliseconds or more and less than 50 milliseconds. You can customize a filter condition by setting **Min*	- and **Max**.
	//
	//     	- If only **Min*	- is specified, the queries that consume a period of time that is greater than or equal to the Min value are filtered.
	//
	//     	- If only **Max*	- is specified, the queries that consume a period of time that is less than the Max value are filtered.
	//
	//     	- If both **Min*	- and **Max*	- are specified, the queries that consume a period of time that is greater than or equal to the **Min*	- value and less than the **Max*	- value are filtered.
	//
	// example:
	//
	// {"Type":"maxCost", "Value":"100"}
	QueryCondition *string `json:"QueryCondition,omitempty" xml:"QueryCondition,omitempty"`
	// The beginning of the time range to query. Specify the time in the *yyyy-MM-dd*T*HH:mm*Z format. The time must be in UTC.
	//
	// example:
	//
	// 2022-05-07T06:59Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The name of the database account.
	//
	// example:
	//
	// adbpguser
	User *string `json:"User,omitempty" xml:"User,omitempty"`
}

func (s DescribeDiagnosisMonitorPerformanceRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDiagnosisMonitorPerformanceRequest) GoString() string {
	return s.String()
}

func (s *DescribeDiagnosisMonitorPerformanceRequest) SetDBInstanceId(v string) *DescribeDiagnosisMonitorPerformanceRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDiagnosisMonitorPerformanceRequest) SetDatabase(v string) *DescribeDiagnosisMonitorPerformanceRequest {
	s.Database = &v
	return s
}

func (s *DescribeDiagnosisMonitorPerformanceRequest) SetEndTime(v string) *DescribeDiagnosisMonitorPerformanceRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeDiagnosisMonitorPerformanceRequest) SetQueryCondition(v string) *DescribeDiagnosisMonitorPerformanceRequest {
	s.QueryCondition = &v
	return s
}

func (s *DescribeDiagnosisMonitorPerformanceRequest) SetStartTime(v string) *DescribeDiagnosisMonitorPerformanceRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeDiagnosisMonitorPerformanceRequest) SetUser(v string) *DescribeDiagnosisMonitorPerformanceRequest {
	s.User = &v
	return s
}

type DescribeDiagnosisMonitorPerformanceResponseBody struct {
	// Details of query execution.
	Performances []*DescribeDiagnosisMonitorPerformanceResponseBodyPerformances `json:"Performances,omitempty" xml:"Performances,omitempty" type:"Repeated"`
	// The threshold for the number of queries.
	//
	// example:
	//
	// 10000
	PerformancesThreshold *int32 `json:"PerformancesThreshold,omitempty" xml:"PerformancesThreshold,omitempty"`
	// Indicates whether the queries are truncated when the number of queries exceeds the threshold. Valid values:
	//
	// 	- **true**: The queries are truncated.
	//
	// 	- **false**: The queries are not truncated.
	//
	// example:
	//
	// false
	PerformancesTruncated *bool `json:"PerformancesTruncated,omitempty" xml:"PerformancesTruncated,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// B4CAF581-2AC7-41AD-8940-D56DF7AADF5B
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeDiagnosisMonitorPerformanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDiagnosisMonitorPerformanceResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDiagnosisMonitorPerformanceResponseBody) SetPerformances(v []*DescribeDiagnosisMonitorPerformanceResponseBodyPerformances) *DescribeDiagnosisMonitorPerformanceResponseBody {
	s.Performances = v
	return s
}

func (s *DescribeDiagnosisMonitorPerformanceResponseBody) SetPerformancesThreshold(v int32) *DescribeDiagnosisMonitorPerformanceResponseBody {
	s.PerformancesThreshold = &v
	return s
}

func (s *DescribeDiagnosisMonitorPerformanceResponseBody) SetPerformancesTruncated(v bool) *DescribeDiagnosisMonitorPerformanceResponseBody {
	s.PerformancesTruncated = &v
	return s
}

func (s *DescribeDiagnosisMonitorPerformanceResponseBody) SetRequestId(v string) *DescribeDiagnosisMonitorPerformanceResponseBody {
	s.RequestId = &v
	return s
}

type DescribeDiagnosisMonitorPerformanceResponseBodyPerformances struct {
	// The execution duration of the query. Unit: milliseconds.
	//
	// example:
	//
	// 1
	Cost *int32 `json:"Cost,omitempty" xml:"Cost,omitempty"`
	// The name of the database.
	//
	// example:
	//
	// adbtest
	Database *string `json:"Database,omitempty" xml:"Database,omitempty"`
	// The ID of the query. It is a unique identifier of the query.
	//
	// example:
	//
	// 2022042612465401000000012903151998970
	QueryID *string `json:"QueryID,omitempty" xml:"QueryID,omitempty"`
	// The start time of the query. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.
	//
	// example:
	//
	// 1651877940000
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The execution state of the query. Valid values:
	//
	// 	- **running**: The query is being executed.
	//
	// 	- **finished**: The query is complete.
	//
	// example:
	//
	// finished
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The name of the database account.
	//
	// example:
	//
	// adbpguser
	User *string `json:"User,omitempty" xml:"User,omitempty"`
}

func (s DescribeDiagnosisMonitorPerformanceResponseBodyPerformances) String() string {
	return tea.Prettify(s)
}

func (s DescribeDiagnosisMonitorPerformanceResponseBodyPerformances) GoString() string {
	return s.String()
}

func (s *DescribeDiagnosisMonitorPerformanceResponseBodyPerformances) SetCost(v int32) *DescribeDiagnosisMonitorPerformanceResponseBodyPerformances {
	s.Cost = &v
	return s
}

func (s *DescribeDiagnosisMonitorPerformanceResponseBodyPerformances) SetDatabase(v string) *DescribeDiagnosisMonitorPerformanceResponseBodyPerformances {
	s.Database = &v
	return s
}

func (s *DescribeDiagnosisMonitorPerformanceResponseBodyPerformances) SetQueryID(v string) *DescribeDiagnosisMonitorPerformanceResponseBodyPerformances {
	s.QueryID = &v
	return s
}

func (s *DescribeDiagnosisMonitorPerformanceResponseBodyPerformances) SetStartTime(v int64) *DescribeDiagnosisMonitorPerformanceResponseBodyPerformances {
	s.StartTime = &v
	return s
}

func (s *DescribeDiagnosisMonitorPerformanceResponseBodyPerformances) SetStatus(v string) *DescribeDiagnosisMonitorPerformanceResponseBodyPerformances {
	s.Status = &v
	return s
}

func (s *DescribeDiagnosisMonitorPerformanceResponseBodyPerformances) SetUser(v string) *DescribeDiagnosisMonitorPerformanceResponseBodyPerformances {
	s.User = &v
	return s
}

type DescribeDiagnosisMonitorPerformanceResponse struct {
	Headers    map[string]*string                               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeDiagnosisMonitorPerformanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeDiagnosisMonitorPerformanceResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDiagnosisMonitorPerformanceResponse) GoString() string {
	return s.String()
}

func (s *DescribeDiagnosisMonitorPerformanceResponse) SetHeaders(v map[string]*string) *DescribeDiagnosisMonitorPerformanceResponse {
	s.Headers = v
	return s
}

func (s *DescribeDiagnosisMonitorPerformanceResponse) SetStatusCode(v int32) *DescribeDiagnosisMonitorPerformanceResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDiagnosisMonitorPerformanceResponse) SetBody(v *DescribeDiagnosisMonitorPerformanceResponseBody) *DescribeDiagnosisMonitorPerformanceResponse {
	s.Body = v
	return s
}

type DescribeDiagnosisRecordsRequest struct {
	// The instance ID.
	//
	// > You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The name of the database.
	//
	// This parameter is required.
	//
	// example:
	//
	// adbtest
	Database *string `json:"Database,omitempty" xml:"Database,omitempty"`
	// The end of the time range to query. Specify the time in the *yyyy-MM-dd*T*HH:mm*Z format. The time must be in UTC. The end time must be later than the start time.
	//
	// example:
	//
	// 2022-05-07T07:59Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The keyword of the SQL statement.
	//
	// example:
	//
	// SELECT
	Keyword *string `json:"Keyword,omitempty" xml:"Keyword,omitempty"`
	// The order of fields in the console. You do not need to specify this parameter.
	//
	// example:
	//
	// null
	Order *string `json:"Order,omitempty" xml:"Order,omitempty"`
	// The page number. Pages start from page 1. Default value: **1**.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. Valid values:
	//
	// 	- **30**
	//
	// 	- **50**
	//
	// 	- **100**
	//
	// Default value: **30**.
	//
	// example:
	//
	// 30
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The filter condition on queries. Specify the value in the JSON format. Valid values:
	//
	// 	- `{"Type":"maxCost", "Value":"100"}`: filters the top 100 queries that are the most time-consuming.
	//
	// 	- `{"Type":"status","Value":"finished"}`: filters completed queries.
	//
	// 	- `{"Type":"status","Value":"running"}`: filters running queries.
	//
	// 	- `{"Type":"cost","Min":"30","Max":"50"}`: filters the queries that consume a period of 30 milliseconds to less than 50 milliseconds. You can customize a filter condition by setting **Min*	- and **Max**.
	//
	//     	- If only **Min*	- is specified, the queries that consume a period of time that is greater than the Min value are filtered.
	//
	//     	- If only **Max*	- is specified, the queries that consume a period of time that is less than the Max value are filtered.
	//
	//     	- If both **Min*	- and **Max*	- are specified, the queries that consume a period of time that is greater than or equal to the **Min*	- value and less than or equal to the **Max*	- value are filtered.
	//
	// example:
	//
	// { "Type":"maxCost", "Value":"100" }
	QueryCondition *string `json:"QueryCondition,omitempty" xml:"QueryCondition,omitempty"`
	// The beginning of the time range to query. Specify the time in the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm*Z format. The time must be in UTC.
	//
	// example:
	//
	// 2022-05-07T06:59Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The name of the database account.
	//
	// example:
	//
	// adbpguser
	User *string `json:"User,omitempty" xml:"User,omitempty"`
}

func (s DescribeDiagnosisRecordsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDiagnosisRecordsRequest) GoString() string {
	return s.String()
}

func (s *DescribeDiagnosisRecordsRequest) SetDBInstanceId(v string) *DescribeDiagnosisRecordsRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDiagnosisRecordsRequest) SetDatabase(v string) *DescribeDiagnosisRecordsRequest {
	s.Database = &v
	return s
}

func (s *DescribeDiagnosisRecordsRequest) SetEndTime(v string) *DescribeDiagnosisRecordsRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeDiagnosisRecordsRequest) SetKeyword(v string) *DescribeDiagnosisRecordsRequest {
	s.Keyword = &v
	return s
}

func (s *DescribeDiagnosisRecordsRequest) SetOrder(v string) *DescribeDiagnosisRecordsRequest {
	s.Order = &v
	return s
}

func (s *DescribeDiagnosisRecordsRequest) SetPageNumber(v int32) *DescribeDiagnosisRecordsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeDiagnosisRecordsRequest) SetPageSize(v int32) *DescribeDiagnosisRecordsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeDiagnosisRecordsRequest) SetQueryCondition(v string) *DescribeDiagnosisRecordsRequest {
	s.QueryCondition = &v
	return s
}

func (s *DescribeDiagnosisRecordsRequest) SetStartTime(v string) *DescribeDiagnosisRecordsRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeDiagnosisRecordsRequest) SetUser(v string) *DescribeDiagnosisRecordsRequest {
	s.User = &v
	return s
}

type DescribeDiagnosisRecordsResponseBody struct {
	// The threshold that determines whether the SQL statement must be truncated. The value is the number of characters.
	Items []*DescribeDiagnosisRecordsResponseBodyItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Repeated"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The request ID.
	//
	// example:
	//
	// B4CAF581-2AC7-41AD-8940-D56DF7AADF5B
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 100
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeDiagnosisRecordsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDiagnosisRecordsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDiagnosisRecordsResponseBody) SetItems(v []*DescribeDiagnosisRecordsResponseBodyItems) *DescribeDiagnosisRecordsResponseBody {
	s.Items = v
	return s
}

func (s *DescribeDiagnosisRecordsResponseBody) SetPageNumber(v int32) *DescribeDiagnosisRecordsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeDiagnosisRecordsResponseBody) SetRequestId(v string) *DescribeDiagnosisRecordsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDiagnosisRecordsResponseBody) SetTotalCount(v int32) *DescribeDiagnosisRecordsResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeDiagnosisRecordsResponseBodyItems struct {
	// The name of the database.
	//
	// example:
	//
	// adbtest
	Database *string `json:"Database,omitempty" xml:"Database,omitempty"`
	// The execution duration of the query. Unit: seconds.
	//
	// example:
	//
	// 1
	Duration *int32 `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// The ID of the query. It is a unique identifier of the query.
	//
	// example:
	//
	// 2022042612465401000000012903151998970
	QueryID *string `json:"QueryID,omitempty" xml:"QueryID,omitempty"`
	// The SQL statement.
	//
	// example:
	//
	// SELECT 	- FROM t1,t2 WHERE t1.id=t2.id;
	SQLStmt *string `json:"SQLStmt,omitempty" xml:"SQLStmt,omitempty"`
	// Indicates whether the SQL statement needs to be truncated. Valid values:
	//
	// 	- **true**: The SQL statement needs to be truncated.
	//
	// 	- **false**: The SQL statement does not need to be truncated.
	//
	// example:
	//
	// false
	SQLTruncated *bool `json:"SQLTruncated,omitempty" xml:"SQLTruncated,omitempty"`
	// The threshold used to determine whether an SQL statement must be truncated. The value is the number of characters.
	//
	// example:
	//
	// 5120
	SQLTruncatedThreshold *int32 `json:"SQLTruncatedThreshold,omitempty" xml:"SQLTruncatedThreshold,omitempty"`
	// The ID of the session that contains the query.
	//
	// example:
	//
	// 50
	SessionID *string `json:"SessionID,omitempty" xml:"SessionID,omitempty"`
	// The start time of the query. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.
	//
	// example:
	//
	// 1651877940000
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The execution state of the query. Valid values:
	//
	// 	- **running**: The query is being executed.
	//
	// 	- **finished**: The query is complete.
	//
	// example:
	//
	// finished
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The name of the database account.
	//
	// example:
	//
	// adbpguser
	User *string `json:"User,omitempty" xml:"User,omitempty"`
}

func (s DescribeDiagnosisRecordsResponseBodyItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeDiagnosisRecordsResponseBodyItems) GoString() string {
	return s.String()
}

func (s *DescribeDiagnosisRecordsResponseBodyItems) SetDatabase(v string) *DescribeDiagnosisRecordsResponseBodyItems {
	s.Database = &v
	return s
}

func (s *DescribeDiagnosisRecordsResponseBodyItems) SetDuration(v int32) *DescribeDiagnosisRecordsResponseBodyItems {
	s.Duration = &v
	return s
}

func (s *DescribeDiagnosisRecordsResponseBodyItems) SetQueryID(v string) *DescribeDiagnosisRecordsResponseBodyItems {
	s.QueryID = &v
	return s
}

func (s *DescribeDiagnosisRecordsResponseBodyItems) SetSQLStmt(v string) *DescribeDiagnosisRecordsResponseBodyItems {
	s.SQLStmt = &v
	return s
}

func (s *DescribeDiagnosisRecordsResponseBodyItems) SetSQLTruncated(v bool) *DescribeDiagnosisRecordsResponseBodyItems {
	s.SQLTruncated = &v
	return s
}

func (s *DescribeDiagnosisRecordsResponseBodyItems) SetSQLTruncatedThreshold(v int32) *DescribeDiagnosisRecordsResponseBodyItems {
	s.SQLTruncatedThreshold = &v
	return s
}

func (s *DescribeDiagnosisRecordsResponseBodyItems) SetSessionID(v string) *DescribeDiagnosisRecordsResponseBodyItems {
	s.SessionID = &v
	return s
}

func (s *DescribeDiagnosisRecordsResponseBodyItems) SetStartTime(v int64) *DescribeDiagnosisRecordsResponseBodyItems {
	s.StartTime = &v
	return s
}

func (s *DescribeDiagnosisRecordsResponseBodyItems) SetStatus(v string) *DescribeDiagnosisRecordsResponseBodyItems {
	s.Status = &v
	return s
}

func (s *DescribeDiagnosisRecordsResponseBodyItems) SetUser(v string) *DescribeDiagnosisRecordsResponseBodyItems {
	s.User = &v
	return s
}

type DescribeDiagnosisRecordsResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeDiagnosisRecordsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeDiagnosisRecordsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDiagnosisRecordsResponse) GoString() string {
	return s.String()
}

func (s *DescribeDiagnosisRecordsResponse) SetHeaders(v map[string]*string) *DescribeDiagnosisRecordsResponse {
	s.Headers = v
	return s
}

func (s *DescribeDiagnosisRecordsResponse) SetStatusCode(v int32) *DescribeDiagnosisRecordsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDiagnosisRecordsResponse) SetBody(v *DescribeDiagnosisRecordsResponseBody) *DescribeDiagnosisRecordsResponse {
	s.Body = v
	return s
}

type DescribeDiagnosisSQLInfoRequest struct {
	// The instance ID.
	//
	// > You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query details about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The name of the database.
	//
	// This parameter is required.
	//
	// example:
	//
	// adbtest
	Database *string `json:"Database,omitempty" xml:"Database,omitempty"`
	// The query ID. It is a unique identifier of the query.
	//
	// > You can call the [DescribeDiagnosisRecords](https://help.aliyun.com/document_detail/450511.html) operation to obtain query IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// 71403480878****
	QueryID *string `json:"QueryID,omitempty" xml:"QueryID,omitempty"`
}

func (s DescribeDiagnosisSQLInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDiagnosisSQLInfoRequest) GoString() string {
	return s.String()
}

func (s *DescribeDiagnosisSQLInfoRequest) SetDBInstanceId(v string) *DescribeDiagnosisSQLInfoRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDiagnosisSQLInfoRequest) SetDatabase(v string) *DescribeDiagnosisSQLInfoRequest {
	s.Database = &v
	return s
}

func (s *DescribeDiagnosisSQLInfoRequest) SetQueryID(v string) *DescribeDiagnosisSQLInfoRequest {
	s.QueryID = &v
	return s
}

type DescribeDiagnosisSQLInfoResponseBody struct {
	// The name of the database.
	//
	// example:
	//
	// adbtest
	Database *string `json:"Database,omitempty" xml:"Database,omitempty"`
	// The execution duration of the query. Unit: seconds.
	//
	// example:
	//
	// 16
	Duration *int32 `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// The maximum number of output rows.
	//
	// example:
	//
	// 10
	MaxOutputRows *string `json:"MaxOutputRows,omitempty" xml:"MaxOutputRows,omitempty"`
	// The query ID.
	//
	// example:
	//
	// 71403480878****
	QueryID *string `json:"QueryID,omitempty" xml:"QueryID,omitempty"`
	// The information about the operator.
	//
	// example:
	//
	// {\\"children\\":********\\"startTime\\":1660719602199}
	QueryPlan *string `json:"QueryPlan,omitempty" xml:"QueryPlan,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 425AAA6A-63E0-1929-A1CE-3D9036CBC463
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The SQL statement.
	//
	// example:
	//
	// select n_live_tup, n_live_tup + n_dead_tup, pg_relation_size(table_name), last_vacuum from pg_stat_user_tables where relid = table_name::regclass
	SQLStmt *string `json:"SQLStmt,omitempty" xml:"SQLStmt,omitempty"`
	// The ID of the session that contains the query.
	//
	// example:
	//
	// 658****
	SessionID *string `json:"SessionID,omitempty" xml:"SessionID,omitempty"`
	// The sequence of metrics.
	//
	// example:
	//
	// {\\"costSort\\":******:\\"Seq Scan-9\\",\\"value\\":0.0}]}
	SortedMetrics *string `json:"SortedMetrics,omitempty" xml:"SortedMetrics,omitempty"`
	// The start time of the query. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// example:
	//
	// 1660719602199
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The execution state of the query. Valid values:
	//
	// 	- **running**
	//
	// 	- **finished**
	//
	// example:
	//
	// finished
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The information about the execution plan.
	//
	// example:
	//
	// ******
	TextPlan *string `json:"TextPlan,omitempty" xml:"TextPlan,omitempty"`
	// The username.
	//
	// example:
	//
	// adbpguser
	User *string `json:"User,omitempty" xml:"User,omitempty"`
}

func (s DescribeDiagnosisSQLInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDiagnosisSQLInfoResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDiagnosisSQLInfoResponseBody) SetDatabase(v string) *DescribeDiagnosisSQLInfoResponseBody {
	s.Database = &v
	return s
}

func (s *DescribeDiagnosisSQLInfoResponseBody) SetDuration(v int32) *DescribeDiagnosisSQLInfoResponseBody {
	s.Duration = &v
	return s
}

func (s *DescribeDiagnosisSQLInfoResponseBody) SetMaxOutputRows(v string) *DescribeDiagnosisSQLInfoResponseBody {
	s.MaxOutputRows = &v
	return s
}

func (s *DescribeDiagnosisSQLInfoResponseBody) SetQueryID(v string) *DescribeDiagnosisSQLInfoResponseBody {
	s.QueryID = &v
	return s
}

func (s *DescribeDiagnosisSQLInfoResponseBody) SetQueryPlan(v string) *DescribeDiagnosisSQLInfoResponseBody {
	s.QueryPlan = &v
	return s
}

func (s *DescribeDiagnosisSQLInfoResponseBody) SetRequestId(v string) *DescribeDiagnosisSQLInfoResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDiagnosisSQLInfoResponseBody) SetSQLStmt(v string) *DescribeDiagnosisSQLInfoResponseBody {
	s.SQLStmt = &v
	return s
}

func (s *DescribeDiagnosisSQLInfoResponseBody) SetSessionID(v string) *DescribeDiagnosisSQLInfoResponseBody {
	s.SessionID = &v
	return s
}

func (s *DescribeDiagnosisSQLInfoResponseBody) SetSortedMetrics(v string) *DescribeDiagnosisSQLInfoResponseBody {
	s.SortedMetrics = &v
	return s
}

func (s *DescribeDiagnosisSQLInfoResponseBody) SetStartTime(v int64) *DescribeDiagnosisSQLInfoResponseBody {
	s.StartTime = &v
	return s
}

func (s *DescribeDiagnosisSQLInfoResponseBody) SetStatus(v string) *DescribeDiagnosisSQLInfoResponseBody {
	s.Status = &v
	return s
}

func (s *DescribeDiagnosisSQLInfoResponseBody) SetTextPlan(v string) *DescribeDiagnosisSQLInfoResponseBody {
	s.TextPlan = &v
	return s
}

func (s *DescribeDiagnosisSQLInfoResponseBody) SetUser(v string) *DescribeDiagnosisSQLInfoResponseBody {
	s.User = &v
	return s
}

type DescribeDiagnosisSQLInfoResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeDiagnosisSQLInfoResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeDiagnosisSQLInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDiagnosisSQLInfoResponse) GoString() string {
	return s.String()
}

func (s *DescribeDiagnosisSQLInfoResponse) SetHeaders(v map[string]*string) *DescribeDiagnosisSQLInfoResponse {
	s.Headers = v
	return s
}

func (s *DescribeDiagnosisSQLInfoResponse) SetStatusCode(v int32) *DescribeDiagnosisSQLInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDiagnosisSQLInfoResponse) SetBody(v *DescribeDiagnosisSQLInfoResponseBody) *DescribeDiagnosisSQLInfoResponse {
	s.Body = v
	return s
}

type DescribeDocumentRequest struct {
	// Document collection name.
	//
	// > Created by the [CreateDocumentCollection](https://help.aliyun.com/document_detail/2618448.html) API. You can use the [ListDocumentCollections](https://help.aliyun.com/document_detail/2618452.html) API to view the already created document collections.
	//
	// This parameter is required.
	//
	// example:
	//
	// document
	Collection *string `json:"Collection,omitempty" xml:"Collection,omitempty"`
	// Instance ID.
	//
	// > You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) API to view details of all AnalyticDB PostgreSQL instances in the target region, including the instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// Document name.
	//
	// > You can view the list of documents using the [ListDocuments](https://help.aliyun.com/document_detail/2618453.html) API.
	//
	// This parameter is required.
	//
	// example:
	//
	// music.txt
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// Namespace, default is public.
	//
	// > You can create it via the [CreateNamespace](https://help.aliyun.com/document_detail/2401495.html) API and view the list through the [ListNamespaces](https://help.aliyun.com/document_detail/2401502.html) API.
	//
	// example:
	//
	// mynamespace
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// Password for the namespace.
	//
	// > This value is specified by the [CreateNamespace](https://help.aliyun.com/document_detail/2401495.html) API.
	//
	// This parameter is required.
	//
	// example:
	//
	// testpassword
	NamespacePassword *string `json:"NamespacePassword,omitempty" xml:"NamespacePassword,omitempty"`
	OwnerId           *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// Region ID where the instance is located.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeDocumentRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDocumentRequest) GoString() string {
	return s.String()
}

func (s *DescribeDocumentRequest) SetCollection(v string) *DescribeDocumentRequest {
	s.Collection = &v
	return s
}

func (s *DescribeDocumentRequest) SetDBInstanceId(v string) *DescribeDocumentRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDocumentRequest) SetFileName(v string) *DescribeDocumentRequest {
	s.FileName = &v
	return s
}

func (s *DescribeDocumentRequest) SetNamespace(v string) *DescribeDocumentRequest {
	s.Namespace = &v
	return s
}

func (s *DescribeDocumentRequest) SetNamespacePassword(v string) *DescribeDocumentRequest {
	s.NamespacePassword = &v
	return s
}

func (s *DescribeDocumentRequest) SetOwnerId(v int64) *DescribeDocumentRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeDocumentRequest) SetRegionId(v string) *DescribeDocumentRequest {
	s.RegionId = &v
	return s
}

type DescribeDocumentResponseBody struct {
	// URL of the split file, valid for 2 hours. The file format is JSONL, with each line formatted as `{"page_content":"*****", "metadata": {"**":"***","**":"***"}`.
	//
	// example:
	//
	// http://oss.xxx/music_chunk.jsonl
	ChunkFileUrl *string `json:"ChunkFileUrl,omitempty" xml:"ChunkFileUrl,omitempty"`
	// Number of documents after splitting.
	//
	// example:
	//
	// 100
	DocsCount *int32 `json:"DocsCount,omitempty" xml:"DocsCount,omitempty"`
	// Name of the document loader.
	//
	// example:
	//
	// RapidOCRPDFLoader
	DocumentLoader *string `json:"DocumentLoader,omitempty" xml:"DocumentLoader,omitempty"`
	// File extension.
	//
	// example:
	//
	// txt
	FileExt *string `json:"FileExt,omitempty" xml:"FileExt,omitempty"`
	// MD5 value of the file.
	//
	// example:
	//
	// b8078c9591413550f8963e37e24abcea
	FileMd5 *string `json:"FileMd5,omitempty" xml:"FileMd5,omitempty"`
	// The last modified time of the document.
	//
	// example:
	//
	// 2023-11-01 10:01:01.123456
	FileMtime *string `json:"FileMtime,omitempty" xml:"FileMtime,omitempty"`
	// File name.
	//
	// example:
	//
	// music.txt
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// File size, in bytes.
	//
	// example:
	//
	// 10000
	FileSize *int64 `json:"FileSize,omitempty" xml:"FileSize,omitempty"`
	// Download URL of the document, valid for 2 hours.
	//
	// example:
	//
	// http://oss.xxx/music.txt
	FileUrl *string `json:"FileUrl,omitempty" xml:"FileUrl,omitempty"`
	// Document version. This value increments by 1 each time the same document is updated and uploaded.
	//
	// example:
	//
	// 1
	FileVersion *int32 `json:"FileVersion,omitempty" xml:"FileVersion,omitempty"`
	// Detailed information returned by the API.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Download URL for the plain text (without metadata) after splitting, each line is a chunk, valid for 2 hours.
	//
	// example:
	//
	// http://oss.xxx/music_plain_chunk.txt
	PlainChunkFileUrl *string `json:"PlainChunkFileUrl,omitempty" xml:"PlainChunkFileUrl,omitempty"`
	// Request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Source of the document.
	//
	// example:
	//
	// OSS
	Source *string `json:"Source,omitempty" xml:"Source,omitempty"`
	// API execution status, with values as follows:
	//
	// - **success**: Execution succeeded.
	//
	// - **fail**: Execution failed.
	//
	// example:
	//
	// success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// Name of the text splitter.
	//
	// example:
	//
	// ChineseRecursiveTextSplitter
	TextSplitter *string `json:"TextSplitter,omitempty" xml:"TextSplitter,omitempty"`
}

func (s DescribeDocumentResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDocumentResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDocumentResponseBody) SetChunkFileUrl(v string) *DescribeDocumentResponseBody {
	s.ChunkFileUrl = &v
	return s
}

func (s *DescribeDocumentResponseBody) SetDocsCount(v int32) *DescribeDocumentResponseBody {
	s.DocsCount = &v
	return s
}

func (s *DescribeDocumentResponseBody) SetDocumentLoader(v string) *DescribeDocumentResponseBody {
	s.DocumentLoader = &v
	return s
}

func (s *DescribeDocumentResponseBody) SetFileExt(v string) *DescribeDocumentResponseBody {
	s.FileExt = &v
	return s
}

func (s *DescribeDocumentResponseBody) SetFileMd5(v string) *DescribeDocumentResponseBody {
	s.FileMd5 = &v
	return s
}

func (s *DescribeDocumentResponseBody) SetFileMtime(v string) *DescribeDocumentResponseBody {
	s.FileMtime = &v
	return s
}

func (s *DescribeDocumentResponseBody) SetFileName(v string) *DescribeDocumentResponseBody {
	s.FileName = &v
	return s
}

func (s *DescribeDocumentResponseBody) SetFileSize(v int64) *DescribeDocumentResponseBody {
	s.FileSize = &v
	return s
}

func (s *DescribeDocumentResponseBody) SetFileUrl(v string) *DescribeDocumentResponseBody {
	s.FileUrl = &v
	return s
}

func (s *DescribeDocumentResponseBody) SetFileVersion(v int32) *DescribeDocumentResponseBody {
	s.FileVersion = &v
	return s
}

func (s *DescribeDocumentResponseBody) SetMessage(v string) *DescribeDocumentResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeDocumentResponseBody) SetPlainChunkFileUrl(v string) *DescribeDocumentResponseBody {
	s.PlainChunkFileUrl = &v
	return s
}

func (s *DescribeDocumentResponseBody) SetRequestId(v string) *DescribeDocumentResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDocumentResponseBody) SetSource(v string) *DescribeDocumentResponseBody {
	s.Source = &v
	return s
}

func (s *DescribeDocumentResponseBody) SetStatus(v string) *DescribeDocumentResponseBody {
	s.Status = &v
	return s
}

func (s *DescribeDocumentResponseBody) SetTextSplitter(v string) *DescribeDocumentResponseBody {
	s.TextSplitter = &v
	return s
}

type DescribeDocumentResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeDocumentResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeDocumentResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDocumentResponse) GoString() string {
	return s.String()
}

func (s *DescribeDocumentResponse) SetHeaders(v map[string]*string) *DescribeDocumentResponse {
	s.Headers = v
	return s
}

func (s *DescribeDocumentResponse) SetStatusCode(v int32) *DescribeDocumentResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDocumentResponse) SetBody(v *DescribeDocumentResponseBody) *DescribeDocumentResponse {
	s.Body = v
	return s
}

type DescribeDownloadRecordsRequest struct {
	// The instance ID.
	//
	// > You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId     *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	DownloadTaskType *string `json:"DownloadTaskType,omitempty" xml:"DownloadTaskType,omitempty"`
}

func (s DescribeDownloadRecordsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDownloadRecordsRequest) GoString() string {
	return s.String()
}

func (s *DescribeDownloadRecordsRequest) SetDBInstanceId(v string) *DescribeDownloadRecordsRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDownloadRecordsRequest) SetDownloadTaskType(v string) *DescribeDownloadRecordsRequest {
	s.DownloadTaskType = &v
	return s
}

type DescribeDownloadRecordsResponseBody struct {
	// The URL that is used to download the file.
	Records []*DescribeDownloadRecordsResponseBodyRecords `json:"Records,omitempty" xml:"Records,omitempty" type:"Repeated"`
	// The request ID.
	//
	// example:
	//
	// B4CAF581-2AC7-41AD-8940-D56DF7AADF5B
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeDownloadRecordsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDownloadRecordsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDownloadRecordsResponseBody) SetRecords(v []*DescribeDownloadRecordsResponseBodyRecords) *DescribeDownloadRecordsResponseBody {
	s.Records = v
	return s
}

func (s *DescribeDownloadRecordsResponseBody) SetRequestId(v string) *DescribeDownloadRecordsResponseBody {
	s.RequestId = &v
	return s
}

type DescribeDownloadRecordsResponseBodyRecords struct {
	// The ID of the download record.
	//
	// example:
	//
	// 1150
	DownloadId *int64 `json:"DownloadId,omitempty" xml:"DownloadId,omitempty"`
	// The URL that can be used to download the file.
	//
	// example:
	//
	// https://perth-download-task.oss-cn-beijing.aliyuncs.com/*****
	DownloadUrl *string `json:"DownloadUrl,omitempty" xml:"DownloadUrl,omitempty"`
	// The error message returned.
	//
	// example:
	//
	// Error message
	ExceptionMsg *string `json:"ExceptionMsg,omitempty" xml:"ExceptionMsg,omitempty"`
	// The name of the file.
	//
	// example:
	//
	// 20220509113448-20220509173448.csv
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// The state of the upload task. After you call the DownloadDiagnosisRecords operation, query diagnostic information is first uploaded to Object Storage Service (OSS). After the upload task is complete, the query diagnostic information can be downloaded. Valid values:
	//
	// 	- **running**: uploading
	//
	// 	- **finished**: uploaded
	//
	// 	- **failed**: failed
	//
	// example:
	//
	// finished
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeDownloadRecordsResponseBodyRecords) String() string {
	return tea.Prettify(s)
}

func (s DescribeDownloadRecordsResponseBodyRecords) GoString() string {
	return s.String()
}

func (s *DescribeDownloadRecordsResponseBodyRecords) SetDownloadId(v int64) *DescribeDownloadRecordsResponseBodyRecords {
	s.DownloadId = &v
	return s
}

func (s *DescribeDownloadRecordsResponseBodyRecords) SetDownloadUrl(v string) *DescribeDownloadRecordsResponseBodyRecords {
	s.DownloadUrl = &v
	return s
}

func (s *DescribeDownloadRecordsResponseBodyRecords) SetExceptionMsg(v string) *DescribeDownloadRecordsResponseBodyRecords {
	s.ExceptionMsg = &v
	return s
}

func (s *DescribeDownloadRecordsResponseBodyRecords) SetFileName(v string) *DescribeDownloadRecordsResponseBodyRecords {
	s.FileName = &v
	return s
}

func (s *DescribeDownloadRecordsResponseBodyRecords) SetStatus(v string) *DescribeDownloadRecordsResponseBodyRecords {
	s.Status = &v
	return s
}

type DescribeDownloadRecordsResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeDownloadRecordsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeDownloadRecordsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDownloadRecordsResponse) GoString() string {
	return s.String()
}

func (s *DescribeDownloadRecordsResponse) SetHeaders(v map[string]*string) *DescribeDownloadRecordsResponse {
	s.Headers = v
	return s
}

func (s *DescribeDownloadRecordsResponse) SetStatusCode(v int32) *DescribeDownloadRecordsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDownloadRecordsResponse) SetBody(v *DescribeDownloadRecordsResponseBody) *DescribeDownloadRecordsResponse {
	s.Body = v
	return s
}

type DescribeDownloadSQLLogsRequest struct {
	// Instance ID.
	//
	// > You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) API to view details of all AnalyticDB for PostgreSQL instances in the target region, including the instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
}

func (s DescribeDownloadSQLLogsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDownloadSQLLogsRequest) GoString() string {
	return s.String()
}

func (s *DescribeDownloadSQLLogsRequest) SetDBInstanceId(v string) *DescribeDownloadSQLLogsRequest {
	s.DBInstanceId = &v
	return s
}

type DescribeDownloadSQLLogsResponseBody struct {
	// List of download records.
	Records []*DescribeDownloadSQLLogsResponseBodyRecords `json:"Records,omitempty" xml:"Records,omitempty" type:"Repeated"`
	// Request ID.
	//
	// example:
	//
	// FDE9942A-D919-527B-B559-5D0F6F20CCEC
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeDownloadSQLLogsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDownloadSQLLogsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDownloadSQLLogsResponseBody) SetRecords(v []*DescribeDownloadSQLLogsResponseBodyRecords) *DescribeDownloadSQLLogsResponseBody {
	s.Records = v
	return s
}

func (s *DescribeDownloadSQLLogsResponseBody) SetRequestId(v string) *DescribeDownloadSQLLogsResponseBody {
	s.RequestId = &v
	return s
}

type DescribeDownloadSQLLogsResponseBodyRecords struct {
	// Download record ID.
	//
	// example:
	//
	// 1150
	DownloadId *int64 `json:"DownloadId,omitempty" xml:"DownloadId,omitempty"`
	// Download link.
	//
	// example:
	//
	// https://perth-download-task.oss-cn-beijing.aliyuncs.com/*****
	DownloadUrl *string `json:"DownloadUrl,omitempty" xml:"DownloadUrl,omitempty"`
	// Error message.
	//
	// example:
	//
	// Error message
	ExceptionMsg *string `json:"ExceptionMsg,omitempty" xml:"ExceptionMsg,omitempty"`
	// File name.
	//
	// example:
	//
	// 20220509113448-20220509173448.csv
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// Task status, with possible values being:
	//
	// - **running**: Downloading.
	//
	// - **finished**: Completed.
	//
	// - **failed**: Download failed.
	//
	// example:
	//
	// finished
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeDownloadSQLLogsResponseBodyRecords) String() string {
	return tea.Prettify(s)
}

func (s DescribeDownloadSQLLogsResponseBodyRecords) GoString() string {
	return s.String()
}

func (s *DescribeDownloadSQLLogsResponseBodyRecords) SetDownloadId(v int64) *DescribeDownloadSQLLogsResponseBodyRecords {
	s.DownloadId = &v
	return s
}

func (s *DescribeDownloadSQLLogsResponseBodyRecords) SetDownloadUrl(v string) *DescribeDownloadSQLLogsResponseBodyRecords {
	s.DownloadUrl = &v
	return s
}

func (s *DescribeDownloadSQLLogsResponseBodyRecords) SetExceptionMsg(v string) *DescribeDownloadSQLLogsResponseBodyRecords {
	s.ExceptionMsg = &v
	return s
}

func (s *DescribeDownloadSQLLogsResponseBodyRecords) SetFileName(v string) *DescribeDownloadSQLLogsResponseBodyRecords {
	s.FileName = &v
	return s
}

func (s *DescribeDownloadSQLLogsResponseBodyRecords) SetStatus(v string) *DescribeDownloadSQLLogsResponseBodyRecords {
	s.Status = &v
	return s
}

type DescribeDownloadSQLLogsResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeDownloadSQLLogsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeDownloadSQLLogsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDownloadSQLLogsResponse) GoString() string {
	return s.String()
}

func (s *DescribeDownloadSQLLogsResponse) SetHeaders(v map[string]*string) *DescribeDownloadSQLLogsResponse {
	s.Headers = v
	return s
}

func (s *DescribeDownloadSQLLogsResponse) SetStatusCode(v int32) *DescribeDownloadSQLLogsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDownloadSQLLogsResponse) SetBody(v *DescribeDownloadSQLLogsResponseBody) *DescribeDownloadSQLLogsResponse {
	s.Body = v
	return s
}

type DescribeExternalDataServiceRequest struct {
	// The instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp10g78o9807yv9h3
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The region ID.
	//
	// >  You can call the [DescribeRegions](https://help.aliyun.com/document_detail/86912.html) operation to query the most recent region list.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The service ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	ServiceId *string `json:"ServiceId,omitempty" xml:"ServiceId,omitempty"`
}

func (s DescribeExternalDataServiceRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeExternalDataServiceRequest) GoString() string {
	return s.String()
}

func (s *DescribeExternalDataServiceRequest) SetDBInstanceId(v string) *DescribeExternalDataServiceRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeExternalDataServiceRequest) SetRegionId(v string) *DescribeExternalDataServiceRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeExternalDataServiceRequest) SetServiceId(v string) *DescribeExternalDataServiceRequest {
	s.ServiceId = &v
	return s
}

type DescribeExternalDataServiceResponseBody struct {
	// The time when the service was created.
	//
	// example:
	//
	// 2019-09-08T16:00:00Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The time when the service was last modified.
	//
	// example:
	//
	// 2019-09-08T17:00:00Z
	ModifyTime *string `json:"ModifyTime,omitempty" xml:"ModifyTime,omitempty"`
	// The request ID.
	//
	// example:
	//
	// B4CAF581-2AC7-41AD-8940-D56DF7AADF5B
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The description of the service.
	//
	// example:
	//
	// test-adbpgss
	ServiceDescription *string `json:"ServiceDescription,omitempty" xml:"ServiceDescription,omitempty"`
	// The service ID.
	//
	// example:
	//
	// 1
	ServiceId *string `json:"ServiceId,omitempty" xml:"ServiceId,omitempty"`
	// The name of the service.
	//
	// example:
	//
	// test-adbpgss
	ServiceName *string `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
	// The specifications of the service. Unit: compute units (CUs).
	//
	// example:
	//
	// 2
	ServiceSpec *string `json:"ServiceSpec,omitempty" xml:"ServiceSpec,omitempty"`
	// The status of the operation.
	//
	// example:
	//
	// Running
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeExternalDataServiceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeExternalDataServiceResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeExternalDataServiceResponseBody) SetCreateTime(v string) *DescribeExternalDataServiceResponseBody {
	s.CreateTime = &v
	return s
}

func (s *DescribeExternalDataServiceResponseBody) SetModifyTime(v string) *DescribeExternalDataServiceResponseBody {
	s.ModifyTime = &v
	return s
}

func (s *DescribeExternalDataServiceResponseBody) SetRequestId(v string) *DescribeExternalDataServiceResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeExternalDataServiceResponseBody) SetServiceDescription(v string) *DescribeExternalDataServiceResponseBody {
	s.ServiceDescription = &v
	return s
}

func (s *DescribeExternalDataServiceResponseBody) SetServiceId(v string) *DescribeExternalDataServiceResponseBody {
	s.ServiceId = &v
	return s
}

func (s *DescribeExternalDataServiceResponseBody) SetServiceName(v string) *DescribeExternalDataServiceResponseBody {
	s.ServiceName = &v
	return s
}

func (s *DescribeExternalDataServiceResponseBody) SetServiceSpec(v string) *DescribeExternalDataServiceResponseBody {
	s.ServiceSpec = &v
	return s
}

func (s *DescribeExternalDataServiceResponseBody) SetStatus(v string) *DescribeExternalDataServiceResponseBody {
	s.Status = &v
	return s
}

type DescribeExternalDataServiceResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeExternalDataServiceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeExternalDataServiceResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeExternalDataServiceResponse) GoString() string {
	return s.String()
}

func (s *DescribeExternalDataServiceResponse) SetHeaders(v map[string]*string) *DescribeExternalDataServiceResponse {
	s.Headers = v
	return s
}

func (s *DescribeExternalDataServiceResponse) SetStatusCode(v int32) *DescribeExternalDataServiceResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeExternalDataServiceResponse) SetBody(v *DescribeExternalDataServiceResponseBody) *DescribeExternalDataServiceResponse {
	s.Body = v
	return s
}

type DescribeHadoopClustersInSameNetRequest struct {
	// The instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The region ID.
	//
	// example:
	//
	// cn-beijing
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeHadoopClustersInSameNetRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeHadoopClustersInSameNetRequest) GoString() string {
	return s.String()
}

func (s *DescribeHadoopClustersInSameNetRequest) SetDBInstanceId(v string) *DescribeHadoopClustersInSameNetRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeHadoopClustersInSameNetRequest) SetRegionId(v string) *DescribeHadoopClustersInSameNetRequest {
	s.RegionId = &v
	return s
}

type DescribeHadoopClustersInSameNetResponseBody struct {
	Clusters []*string `json:"Clusters,omitempty" xml:"Clusters,omitempty" type:"Repeated"`
	// The request ID.
	//
	// example:
	//
	// B4CAF581-2AC7-41AD-8940-D56DF7AADF5B
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeHadoopClustersInSameNetResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeHadoopClustersInSameNetResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeHadoopClustersInSameNetResponseBody) SetClusters(v []*string) *DescribeHadoopClustersInSameNetResponseBody {
	s.Clusters = v
	return s
}

func (s *DescribeHadoopClustersInSameNetResponseBody) SetRequestId(v string) *DescribeHadoopClustersInSameNetResponseBody {
	s.RequestId = &v
	return s
}

type DescribeHadoopClustersInSameNetResponse struct {
	Headers    map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeHadoopClustersInSameNetResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeHadoopClustersInSameNetResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeHadoopClustersInSameNetResponse) GoString() string {
	return s.String()
}

func (s *DescribeHadoopClustersInSameNetResponse) SetHeaders(v map[string]*string) *DescribeHadoopClustersInSameNetResponse {
	s.Headers = v
	return s
}

func (s *DescribeHadoopClustersInSameNetResponse) SetStatusCode(v int32) *DescribeHadoopClustersInSameNetResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeHadoopClustersInSameNetResponse) SetBody(v *DescribeHadoopClustersInSameNetResponseBody) *DescribeHadoopClustersInSameNetResponse {
	s.Body = v
	return s
}

type DescribeHadoopConfigsRequest struct {
	// The name of the configuration file. Valid values:
	//
	// 	- hdfs-site
	//
	// 	- core-site
	//
	// 	- yarn-site
	//
	// 	- mapred-site
	//
	// 	- hive-site
	//
	// This parameter is required.
	//
	// example:
	//
	// hdfs-site
	ConfigName *string `json:"ConfigName,omitempty" xml:"ConfigName,omitempty"`
	// The instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The E-MapReduce (EMR) Hadoop cluster ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// c-xxx
	EmrInstanceId *string `json:"EmrInstanceId,omitempty" xml:"EmrInstanceId,omitempty"`
	// The region ID of the instance.
	//
	// >  You can call the [DescribeRegions](https://help.aliyun.com/document_detail/86912.html) operation to query the most recent region list.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeHadoopConfigsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeHadoopConfigsRequest) GoString() string {
	return s.String()
}

func (s *DescribeHadoopConfigsRequest) SetConfigName(v string) *DescribeHadoopConfigsRequest {
	s.ConfigName = &v
	return s
}

func (s *DescribeHadoopConfigsRequest) SetDBInstanceId(v string) *DescribeHadoopConfigsRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeHadoopConfigsRequest) SetEmrInstanceId(v string) *DescribeHadoopConfigsRequest {
	s.EmrInstanceId = &v
	return s
}

func (s *DescribeHadoopConfigsRequest) SetRegionId(v string) *DescribeHadoopConfigsRequest {
	s.RegionId = &v
	return s
}

type DescribeHadoopConfigsResponseBody struct {
	// The name of the configuration file. Valid values:
	//
	// 	- hdfs-site
	//
	// 	- core-site
	//
	// 	- yarn-site
	//
	// 	- mapred-site
	//
	// 	- hive-site
	//
	// example:
	//
	// hdfs-site
	ConfigName *string `json:"ConfigName,omitempty" xml:"ConfigName,omitempty"`
	// The configuration value.
	//
	// example:
	//
	// <?xml version="1.0"?>
	//
	// <configuration>
	//
	//     <property>
	ConfigValue *string `json:"ConfigValue,omitempty" xml:"ConfigValue,omitempty"`
	// The request ID.
	//
	// example:
	//
	// B4CAF581-2AC7-41AD-8940-D56DF7AADF5B
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeHadoopConfigsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeHadoopConfigsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeHadoopConfigsResponseBody) SetConfigName(v string) *DescribeHadoopConfigsResponseBody {
	s.ConfigName = &v
	return s
}

func (s *DescribeHadoopConfigsResponseBody) SetConfigValue(v string) *DescribeHadoopConfigsResponseBody {
	s.ConfigValue = &v
	return s
}

func (s *DescribeHadoopConfigsResponseBody) SetRequestId(v string) *DescribeHadoopConfigsResponseBody {
	s.RequestId = &v
	return s
}

type DescribeHadoopConfigsResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeHadoopConfigsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeHadoopConfigsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeHadoopConfigsResponse) GoString() string {
	return s.String()
}

func (s *DescribeHadoopConfigsResponse) SetHeaders(v map[string]*string) *DescribeHadoopConfigsResponse {
	s.Headers = v
	return s
}

func (s *DescribeHadoopConfigsResponse) SetStatusCode(v int32) *DescribeHadoopConfigsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeHadoopConfigsResponse) SetBody(v *DescribeHadoopConfigsResponseBody) *DescribeHadoopConfigsResponse {
	s.Body = v
	return s
}

type DescribeHadoopDataSourceRequest struct {
	// The instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The data source ID.
	//
	// example:
	//
	// 123
	DataSourceId *string `json:"DataSourceId,omitempty" xml:"DataSourceId,omitempty"`
	// The region ID of the instance.
	//
	// >  You can call the [DescribeRegions](https://help.aliyun.com/document_detail/2361846.html) operation to query the most recent region list.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeHadoopDataSourceRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeHadoopDataSourceRequest) GoString() string {
	return s.String()
}

func (s *DescribeHadoopDataSourceRequest) SetDBInstanceId(v string) *DescribeHadoopDataSourceRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeHadoopDataSourceRequest) SetDataSourceId(v string) *DescribeHadoopDataSourceRequest {
	s.DataSourceId = &v
	return s
}

func (s *DescribeHadoopDataSourceRequest) SetRegionId(v string) *DescribeHadoopDataSourceRequest {
	s.RegionId = &v
	return s
}

type DescribeHadoopDataSourceResponseBody struct {
	// The time when the service was created.
	//
	// example:
	//
	// 2019-09-08T16:00:00Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The description of the service. The description can be up to 256 characters in length.
	//
	// example:
	//
	// pxf for hdfs data source
	DataSourceDescription *string `json:"DataSourceDescription,omitempty" xml:"DataSourceDescription,omitempty"`
	// The service directory in which Hadoop-related configuration files are stored.
	//
	// example:
	//
	// HadoopDir
	DataSourceDir *string `json:"DataSourceDir,omitempty" xml:"DataSourceDir,omitempty"`
	// The data source ID.
	//
	// example:
	//
	// 123
	DataSourceId *string `json:"DataSourceId,omitempty" xml:"DataSourceId,omitempty"`
	// The name of the service.
	//
	// example:
	//
	// hdfs_pxf
	DataSourceName *string `json:"DataSourceName,omitempty" xml:"DataSourceName,omitempty"`
	// The status of the service. Valid values:
	//
	// 	- Init
	//
	// 	- Running
	//
	// 	- Exception
	//
	// example:
	//
	// Running
	DataSourceStatus *string `json:"DataSourceStatus,omitempty" xml:"DataSourceStatus,omitempty"`
	// The type of the data source.
	//
	// example:
	//
	// hive
	DataSourceType *string `json:"DataSourceType,omitempty" xml:"DataSourceType,omitempty"`
	// The E-MapReduce (EMR) Hadoop cluster ID.
	//
	// example:
	//
	// c-1234567
	EmrInstanceId *string `json:"EmrInstanceId,omitempty" xml:"EmrInstanceId,omitempty"`
	// The ID of the external data service.
	//
	// example:
	//
	// 2988
	ExternalDataServiceId *string `json:"ExternalDataServiceId,omitempty" xml:"ExternalDataServiceId,omitempty"`
	// The content of the Hadoop hdfs-site.xml file.
	//
	// example:
	//
	// xxxxxx
	HDFSConf *string `json:"HDFSConf,omitempty" xml:"HDFSConf,omitempty"`
	// The content of the Hadoop core-site.xml file.
	//
	// example:
	//
	// xxxxxx
	HadoopCoreConf *string `json:"HadoopCoreConf,omitempty" xml:"HadoopCoreConf,omitempty"`
	// The type of the external service. Valid values:
	//
	// 	- emr
	//
	// 	- selfCreate
	//
	// example:
	//
	// HDFS
	HadoopCreateType *string `json:"HadoopCreateType,omitempty" xml:"HadoopCreateType,omitempty"`
	// The IP address and hostname of the Hadoop cluster (data source) in the /etc/hosts file.
	//
	// example:
	//
	// 127.0.0.1 localhost
	HadoopHostsAddress *string `json:"HadoopHostsAddress,omitempty" xml:"HadoopHostsAddress,omitempty"`
	// The content of the Hadoop hive-site.xml file.
	//
	// example:
	//
	// xxxxxx
	HiveConf *string `json:"HiveConf,omitempty" xml:"HiveConf,omitempty"`
	// The content of the Hadoop mapred-site.xml file.
	//
	// example:
	//
	// xxxxxx
	MapReduceConf *string `json:"MapReduceConf,omitempty" xml:"MapReduceConf,omitempty"`
	// The time when the data source was last modified.
	//
	// example:
	//
	// 2024-08-23T02:11:47Z
	ModifyTime *string `json:"ModifyTime,omitempty" xml:"ModifyTime,omitempty"`
	// The request ID.
	//
	// example:
	//
	// B4CAF581-2AC7-41AD-8940-D56DF7AADF5B
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The information about the service status. For example, if the service is in the exception state, the cause of the exception is displayed. If the service is in the running state, this parameter is left empty.
	//
	// example:
	//
	// ""
	StatusMessage *string `json:"StatusMessage,omitempty" xml:"StatusMessage,omitempty"`
	// The content of the Hadoop yarn-site.xml file.
	//
	// example:
	//
	// xxxxxx
	YarnConf *string `json:"YarnConf,omitempty" xml:"YarnConf,omitempty"`
}

func (s DescribeHadoopDataSourceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeHadoopDataSourceResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeHadoopDataSourceResponseBody) SetCreateTime(v string) *DescribeHadoopDataSourceResponseBody {
	s.CreateTime = &v
	return s
}

func (s *DescribeHadoopDataSourceResponseBody) SetDataSourceDescription(v string) *DescribeHadoopDataSourceResponseBody {
	s.DataSourceDescription = &v
	return s
}

func (s *DescribeHadoopDataSourceResponseBody) SetDataSourceDir(v string) *DescribeHadoopDataSourceResponseBody {
	s.DataSourceDir = &v
	return s
}

func (s *DescribeHadoopDataSourceResponseBody) SetDataSourceId(v string) *DescribeHadoopDataSourceResponseBody {
	s.DataSourceId = &v
	return s
}

func (s *DescribeHadoopDataSourceResponseBody) SetDataSourceName(v string) *DescribeHadoopDataSourceResponseBody {
	s.DataSourceName = &v
	return s
}

func (s *DescribeHadoopDataSourceResponseBody) SetDataSourceStatus(v string) *DescribeHadoopDataSourceResponseBody {
	s.DataSourceStatus = &v
	return s
}

func (s *DescribeHadoopDataSourceResponseBody) SetDataSourceType(v string) *DescribeHadoopDataSourceResponseBody {
	s.DataSourceType = &v
	return s
}

func (s *DescribeHadoopDataSourceResponseBody) SetEmrInstanceId(v string) *DescribeHadoopDataSourceResponseBody {
	s.EmrInstanceId = &v
	return s
}

func (s *DescribeHadoopDataSourceResponseBody) SetExternalDataServiceId(v string) *DescribeHadoopDataSourceResponseBody {
	s.ExternalDataServiceId = &v
	return s
}

func (s *DescribeHadoopDataSourceResponseBody) SetHDFSConf(v string) *DescribeHadoopDataSourceResponseBody {
	s.HDFSConf = &v
	return s
}

func (s *DescribeHadoopDataSourceResponseBody) SetHadoopCoreConf(v string) *DescribeHadoopDataSourceResponseBody {
	s.HadoopCoreConf = &v
	return s
}

func (s *DescribeHadoopDataSourceResponseBody) SetHadoopCreateType(v string) *DescribeHadoopDataSourceResponseBody {
	s.HadoopCreateType = &v
	return s
}

func (s *DescribeHadoopDataSourceResponseBody) SetHadoopHostsAddress(v string) *DescribeHadoopDataSourceResponseBody {
	s.HadoopHostsAddress = &v
	return s
}

func (s *DescribeHadoopDataSourceResponseBody) SetHiveConf(v string) *DescribeHadoopDataSourceResponseBody {
	s.HiveConf = &v
	return s
}

func (s *DescribeHadoopDataSourceResponseBody) SetMapReduceConf(v string) *DescribeHadoopDataSourceResponseBody {
	s.MapReduceConf = &v
	return s
}

func (s *DescribeHadoopDataSourceResponseBody) SetModifyTime(v string) *DescribeHadoopDataSourceResponseBody {
	s.ModifyTime = &v
	return s
}

func (s *DescribeHadoopDataSourceResponseBody) SetRequestId(v string) *DescribeHadoopDataSourceResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeHadoopDataSourceResponseBody) SetStatusMessage(v string) *DescribeHadoopDataSourceResponseBody {
	s.StatusMessage = &v
	return s
}

func (s *DescribeHadoopDataSourceResponseBody) SetYarnConf(v string) *DescribeHadoopDataSourceResponseBody {
	s.YarnConf = &v
	return s
}

type DescribeHadoopDataSourceResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeHadoopDataSourceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeHadoopDataSourceResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeHadoopDataSourceResponse) GoString() string {
	return s.String()
}

func (s *DescribeHadoopDataSourceResponse) SetHeaders(v map[string]*string) *DescribeHadoopDataSourceResponse {
	s.Headers = v
	return s
}

func (s *DescribeHadoopDataSourceResponse) SetStatusCode(v int32) *DescribeHadoopDataSourceResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeHadoopDataSourceResponse) SetBody(v *DescribeHadoopDataSourceResponseBody) *DescribeHadoopDataSourceResponse {
	s.Body = v
	return s
}

type DescribeHealthStatusRequest struct {
	// The ID of the instance.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the details of all AnalyticDB for PostgreSQL instances in a specific region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The performance metric that you want to query. Separate multiple values with commas (,). For more information, see [Performance parameters](https://help.aliyun.com/document_detail/86943.html).
	//
	// This parameter is required.
	//
	// example:
	//
	// node_master_status,node_master_connection_status,node_segment_connection_status,node_segment_disk_status
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
}

func (s DescribeHealthStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeHealthStatusRequest) GoString() string {
	return s.String()
}

func (s *DescribeHealthStatusRequest) SetDBInstanceId(v string) *DescribeHealthStatusRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeHealthStatusRequest) SetKey(v string) *DescribeHealthStatusRequest {
	s.Key = &v
	return s
}

type DescribeHealthStatusResponseBody struct {
	// The ID of instance.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBClusterId *string `json:"DBClusterId,omitempty" xml:"DBClusterId,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// D97B4191-104D-10CE-8BC5-53**********
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The queried performance metrics. Each performance metric consists of the parameter name, status, and metric value. The metric information is returned only for the performance parameters specified by **Key**. For example, if you set **Key*	- to **adbpg_status**, only the metric information of **adbpg_status*	- is returned.
	//
	// For more information about performance parameters, see [Performance parameters](https://help.aliyun.com/document_detail/86943.html).
	//
	// example:
	//
	// {"node_master_connection_status":{"Status":"healthy","Value":1.6}}
	Status *DescribeHealthStatusResponseBodyStatus `json:"Status,omitempty" xml:"Status,omitempty" type:"Struct"`
}

func (s DescribeHealthStatusResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeHealthStatusResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeHealthStatusResponseBody) SetDBClusterId(v string) *DescribeHealthStatusResponseBody {
	s.DBClusterId = &v
	return s
}

func (s *DescribeHealthStatusResponseBody) SetRequestId(v string) *DescribeHealthStatusResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeHealthStatusResponseBody) SetStatus(v *DescribeHealthStatusResponseBodyStatus) *DescribeHealthStatusResponseBody {
	s.Status = v
	return s
}

type DescribeHealthStatusResponseBodyStatus struct {
	// The information of maximum compute node storage usage.
	//
	// >  This parameter value is returned only for instances in elastic storage mode.
	AdbgpSegmentDiskUsagePercentMax *DescribeHealthStatusResponseBodyStatusAdbgpSegmentDiskUsagePercentMax `json:"adbgp_segment_disk_usage_percent_max,omitempty" xml:"adbgp_segment_disk_usage_percent_max,omitempty" type:"Struct"`
	// The information of instance connection health status.
	AdbpgConnectionStatus *DescribeHealthStatusResponseBodyStatusAdbpgConnectionStatus `json:"adbpg_connection_status,omitempty" xml:"adbpg_connection_status,omitempty" type:"Struct"`
	// The information of instance storage status.
	//
	// >  This parameter value is returned only for instances in elastic storage mode.
	AdbpgDiskStatus *DescribeHealthStatusResponseBodyStatusAdbpgDiskStatus `json:"adbpg_disk_status,omitempty" xml:"adbpg_disk_status,omitempty" type:"Struct"`
	// The information of instance storage usage.
	//
	// >  This parameter value is returned only for instances in elastic storage mode.
	AdbpgDiskUsagePercent *DescribeHealthStatusResponseBodyStatusAdbpgDiskUsagePercent `json:"adbpg_disk_usage_percent,omitempty" xml:"adbpg_disk_usage_percent,omitempty" type:"Struct"`
	// The total amount of cold data storage.
	AdbpgInstanceColdDataGb *DescribeHealthStatusResponseBodyStatusAdbpgInstanceColdDataGb `json:"adbpg_instance_cold_data_gb,omitempty" xml:"adbpg_instance_cold_data_gb,omitempty" type:"Struct"`
	// The total amount of hot data storage.
	AdbpgInstanceHotDataGb *DescribeHealthStatusResponseBodyStatusAdbpgInstanceHotDataGb `json:"adbpg_instance_hot_data_gb,omitempty" xml:"adbpg_instance_hot_data_gb,omitempty" type:"Struct"`
	// The total amount of data storage of the instance.
	AdbpgInstanceTotalDataGb *DescribeHealthStatusResponseBodyStatusAdbpgInstanceTotalDataGb `json:"adbpg_instance_total_data_gb,omitempty" xml:"adbpg_instance_total_data_gb,omitempty" type:"Struct"`
	// The information of maximum coordinator node storage usage.
	//
	// >  This parameter value is returned only for instances in elastic storage mode.
	AdbpgMasterDiskUsagePercentMax *DescribeHealthStatusResponseBodyStatusAdbpgMasterDiskUsagePercentMax `json:"adbpg_master_disk_usage_percent_max,omitempty" xml:"adbpg_master_disk_usage_percent_max,omitempty" type:"Struct"`
	// The information of coordinator node availability status.
	AdbpgMasterStatus *DescribeHealthStatusResponseBodyStatusAdbpgMasterStatus `json:"adbpg_master_status,omitempty" xml:"adbpg_master_status,omitempty" type:"Struct"`
	// The information of compute node availability status.
	AdbpgSegmentStatus *DescribeHealthStatusResponseBodyStatusAdbpgSegmentStatus `json:"adbpg_segment_status,omitempty" xml:"adbpg_segment_status,omitempty" type:"Struct"`
	// The information of instance health status.
	AdbpgStatus *DescribeHealthStatusResponseBodyStatusAdbpgStatus `json:"adbpg_status,omitempty" xml:"adbpg_status,omitempty" type:"Struct"`
	// The information of coordinator node connection health status.
	NodeMasterConnectionStatus *DescribeHealthStatusResponseBodyStatusNodeMasterConnectionStatus `json:"node_master_connection_status,omitempty" xml:"node_master_connection_status,omitempty" type:"Struct"`
	// The information of coordinator node health status.
	NodeMasterStatus *DescribeHealthStatusResponseBodyStatusNodeMasterStatus `json:"node_master_status,omitempty" xml:"node_master_status,omitempty" type:"Struct"`
	// The information of compute node connection health status.
	NodeSegmentConnectionStatus *DescribeHealthStatusResponseBodyStatusNodeSegmentConnectionStatus `json:"node_segment_connection_status,omitempty" xml:"node_segment_connection_status,omitempty" type:"Struct"`
	// The information of compute node storage status.
	//
	// >  This parameter value is returned only for instances in elastic storage mode.
	NodeSegmentDiskStatus *DescribeHealthStatusResponseBodyStatusNodeSegmentDiskStatus `json:"node_segment_disk_status,omitempty" xml:"node_segment_disk_status,omitempty" type:"Struct"`
}

func (s DescribeHealthStatusResponseBodyStatus) String() string {
	return tea.Prettify(s)
}

func (s DescribeHealthStatusResponseBodyStatus) GoString() string {
	return s.String()
}

func (s *DescribeHealthStatusResponseBodyStatus) SetAdbgpSegmentDiskUsagePercentMax(v *DescribeHealthStatusResponseBodyStatusAdbgpSegmentDiskUsagePercentMax) *DescribeHealthStatusResponseBodyStatus {
	s.AdbgpSegmentDiskUsagePercentMax = v
	return s
}

func (s *DescribeHealthStatusResponseBodyStatus) SetAdbpgConnectionStatus(v *DescribeHealthStatusResponseBodyStatusAdbpgConnectionStatus) *DescribeHealthStatusResponseBodyStatus {
	s.AdbpgConnectionStatus = v
	return s
}

func (s *DescribeHealthStatusResponseBodyStatus) SetAdbpgDiskStatus(v *DescribeHealthStatusResponseBodyStatusAdbpgDiskStatus) *DescribeHealthStatusResponseBodyStatus {
	s.AdbpgDiskStatus = v
	return s
}

func (s *DescribeHealthStatusResponseBodyStatus) SetAdbpgDiskUsagePercent(v *DescribeHealthStatusResponseBodyStatusAdbpgDiskUsagePercent) *DescribeHealthStatusResponseBodyStatus {
	s.AdbpgDiskUsagePercent = v
	return s
}

func (s *DescribeHealthStatusResponseBodyStatus) SetAdbpgInstanceColdDataGb(v *DescribeHealthStatusResponseBodyStatusAdbpgInstanceColdDataGb) *DescribeHealthStatusResponseBodyStatus {
	s.AdbpgInstanceColdDataGb = v
	return s
}

func (s *DescribeHealthStatusResponseBodyStatus) SetAdbpgInstanceHotDataGb(v *DescribeHealthStatusResponseBodyStatusAdbpgInstanceHotDataGb) *DescribeHealthStatusResponseBodyStatus {
	s.AdbpgInstanceHotDataGb = v
	return s
}

func (s *DescribeHealthStatusResponseBodyStatus) SetAdbpgInstanceTotalDataGb(v *DescribeHealthStatusResponseBodyStatusAdbpgInstanceTotalDataGb) *DescribeHealthStatusResponseBodyStatus {
	s.AdbpgInstanceTotalDataGb = v
	return s
}

func (s *DescribeHealthStatusResponseBodyStatus) SetAdbpgMasterDiskUsagePercentMax(v *DescribeHealthStatusResponseBodyStatusAdbpgMasterDiskUsagePercentMax) *DescribeHealthStatusResponseBodyStatus {
	s.AdbpgMasterDiskUsagePercentMax = v
	return s
}

func (s *DescribeHealthStatusResponseBodyStatus) SetAdbpgMasterStatus(v *DescribeHealthStatusResponseBodyStatusAdbpgMasterStatus) *DescribeHealthStatusResponseBodyStatus {
	s.AdbpgMasterStatus = v
	return s
}

func (s *DescribeHealthStatusResponseBodyStatus) SetAdbpgSegmentStatus(v *DescribeHealthStatusResponseBodyStatusAdbpgSegmentStatus) *DescribeHealthStatusResponseBodyStatus {
	s.AdbpgSegmentStatus = v
	return s
}

func (s *DescribeHealthStatusResponseBodyStatus) SetAdbpgStatus(v *DescribeHealthStatusResponseBodyStatusAdbpgStatus) *DescribeHealthStatusResponseBodyStatus {
	s.AdbpgStatus = v
	return s
}

func (s *DescribeHealthStatusResponseBodyStatus) SetNodeMasterConnectionStatus(v *DescribeHealthStatusResponseBodyStatusNodeMasterConnectionStatus) *DescribeHealthStatusResponseBodyStatus {
	s.NodeMasterConnectionStatus = v
	return s
}

func (s *DescribeHealthStatusResponseBodyStatus) SetNodeMasterStatus(v *DescribeHealthStatusResponseBodyStatusNodeMasterStatus) *DescribeHealthStatusResponseBodyStatus {
	s.NodeMasterStatus = v
	return s
}

func (s *DescribeHealthStatusResponseBodyStatus) SetNodeSegmentConnectionStatus(v *DescribeHealthStatusResponseBodyStatusNodeSegmentConnectionStatus) *DescribeHealthStatusResponseBodyStatus {
	s.NodeSegmentConnectionStatus = v
	return s
}

func (s *DescribeHealthStatusResponseBodyStatus) SetNodeSegmentDiskStatus(v *DescribeHealthStatusResponseBodyStatusNodeSegmentDiskStatus) *DescribeHealthStatusResponseBodyStatus {
	s.NodeSegmentDiskStatus = v
	return s
}

type DescribeHealthStatusResponseBodyStatusAdbgpSegmentDiskUsagePercentMax struct {
	// The status corresponding to the maximum storage usage among all compute nodes. Valid values:
	//
	// 	- **critical**: The compute node storage usage is greater than or equal to 90%. In this case, the instance is locked.
	//
	// 	- **warning**: The compute node storage usage is greater than or equal to 80% and less than 90%.
	//
	// 	- **healthy**: The compute node storage usage is less than 80%.
	//
	// example:
	//
	// healthy
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The metric value of maximum compute node storage usage.
	//
	// Unit: %.
	//
	// example:
	//
	// 1.52
	Value *float32 `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeHealthStatusResponseBodyStatusAdbgpSegmentDiskUsagePercentMax) String() string {
	return tea.Prettify(s)
}

func (s DescribeHealthStatusResponseBodyStatusAdbgpSegmentDiskUsagePercentMax) GoString() string {
	return s.String()
}

func (s *DescribeHealthStatusResponseBodyStatusAdbgpSegmentDiskUsagePercentMax) SetStatus(v string) *DescribeHealthStatusResponseBodyStatusAdbgpSegmentDiskUsagePercentMax {
	s.Status = &v
	return s
}

func (s *DescribeHealthStatusResponseBodyStatusAdbgpSegmentDiskUsagePercentMax) SetValue(v float32) *DescribeHealthStatusResponseBodyStatusAdbgpSegmentDiskUsagePercentMax {
	s.Value = &v
	return s
}

type DescribeHealthStatusResponseBodyStatusAdbpgConnectionStatus struct {
	// The connection health status of the instance. Valid values:
	//
	// 	- **critical**: The instance connection usage is greater than 95%. In this case, this metric is marked in red in the console.
	//
	// 	- **warning**: The instance connection usage is greater than 90% and less than or equal to 95%. In this case, this metric is marked in yellow in the console.
	//
	// 	- **healthy**: The instance connection usage is less than or equal to 90%. In this case, this metric is marked in green in the console.
	//
	// >  The instance connection usage is the maximum connection usage among all the coordinator and compute nodes.
	//
	// example:
	//
	// healthy
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The metric value of instance connection usage.
	//
	// Unit: %.
	//
	// example:
	//
	// 1.71
	Value *float32 `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeHealthStatusResponseBodyStatusAdbpgConnectionStatus) String() string {
	return tea.Prettify(s)
}

func (s DescribeHealthStatusResponseBodyStatusAdbpgConnectionStatus) GoString() string {
	return s.String()
}

func (s *DescribeHealthStatusResponseBodyStatusAdbpgConnectionStatus) SetStatus(v string) *DescribeHealthStatusResponseBodyStatusAdbpgConnectionStatus {
	s.Status = &v
	return s
}

func (s *DescribeHealthStatusResponseBodyStatusAdbpgConnectionStatus) SetValue(v float32) *DescribeHealthStatusResponseBodyStatusAdbpgConnectionStatus {
	s.Value = &v
	return s
}

type DescribeHealthStatusResponseBodyStatusAdbpgDiskStatus struct {
	// The storage status of the instance. Valid values:
	//
	// 	- **critical**: The instance storage usage is greater than or equal to 90%. In this case, this metric is marked in red in the console and the instance is locked.
	//
	// 	- **warning**: The instance storage usage is greater than or equal to 70% and less than 90%. In this case, this metric is marked in yellow in the console.
	//
	// 	- **healthy**: The instance storage usage is less than 70%. In this case, this metric is marked in green in the console.
	//
	// >  The instance storage usage is the average storage usage of all compute nodes.
	//
	// example:
	//
	// healthy
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The metric value of instance storage usage.
	//
	// Unit: %.
	//
	// example:
	//
	// 1.52
	Value *float32 `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeHealthStatusResponseBodyStatusAdbpgDiskStatus) String() string {
	return tea.Prettify(s)
}

func (s DescribeHealthStatusResponseBodyStatusAdbpgDiskStatus) GoString() string {
	return s.String()
}

func (s *DescribeHealthStatusResponseBodyStatusAdbpgDiskStatus) SetStatus(v string) *DescribeHealthStatusResponseBodyStatusAdbpgDiskStatus {
	s.Status = &v
	return s
}

func (s *DescribeHealthStatusResponseBodyStatusAdbpgDiskStatus) SetValue(v float32) *DescribeHealthStatusResponseBodyStatusAdbpgDiskStatus {
	s.Value = &v
	return s
}

type DescribeHealthStatusResponseBodyStatusAdbpgDiskUsagePercent struct {
	// The status corresponding to the storage usage of the instance. Valid values:
	//
	// 	- **critical**: The instance storage usage is greater than or equal to 90%. In this case, the instance is locked.
	//
	// 	- **warning**: The instance storage usage is greater than or equal to 70% and less than 90%.
	//
	// 	- **healthy**: The instance storage usage is less than 70%.
	//
	// >  The instance storage usage is the average storage usage of all compute nodes.
	//
	// example:
	//
	// healthy
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The metric value of instance storage usage.
	//
	// Unit: %.
	//
	// example:
	//
	// 1.52
	Value *float32 `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeHealthStatusResponseBodyStatusAdbpgDiskUsagePercent) String() string {
	return tea.Prettify(s)
}

func (s DescribeHealthStatusResponseBodyStatusAdbpgDiskUsagePercent) GoString() string {
	return s.String()
}

func (s *DescribeHealthStatusResponseBodyStatusAdbpgDiskUsagePercent) SetStatus(v string) *DescribeHealthStatusResponseBodyStatusAdbpgDiskUsagePercent {
	s.Status = &v
	return s
}

func (s *DescribeHealthStatusResponseBodyStatusAdbpgDiskUsagePercent) SetValue(v float32) *DescribeHealthStatusResponseBodyStatusAdbpgDiskUsagePercent {
	s.Value = &v
	return s
}

type DescribeHealthStatusResponseBodyStatusAdbpgInstanceColdDataGb struct {
	// The total amount of cold data storage. Unit: GB.
	//
	// example:
	//
	// 0
	Value *float32 `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeHealthStatusResponseBodyStatusAdbpgInstanceColdDataGb) String() string {
	return tea.Prettify(s)
}

func (s DescribeHealthStatusResponseBodyStatusAdbpgInstanceColdDataGb) GoString() string {
	return s.String()
}

func (s *DescribeHealthStatusResponseBodyStatusAdbpgInstanceColdDataGb) SetValue(v float32) *DescribeHealthStatusResponseBodyStatusAdbpgInstanceColdDataGb {
	s.Value = &v
	return s
}

type DescribeHealthStatusResponseBodyStatusAdbpgInstanceHotDataGb struct {
	// The total amount of hot data storage. Unit: GB.
	//
	// example:
	//
	// 4.1
	Value *float32 `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeHealthStatusResponseBodyStatusAdbpgInstanceHotDataGb) String() string {
	return tea.Prettify(s)
}

func (s DescribeHealthStatusResponseBodyStatusAdbpgInstanceHotDataGb) GoString() string {
	return s.String()
}

func (s *DescribeHealthStatusResponseBodyStatusAdbpgInstanceHotDataGb) SetValue(v float32) *DescribeHealthStatusResponseBodyStatusAdbpgInstanceHotDataGb {
	s.Value = &v
	return s
}

type DescribeHealthStatusResponseBodyStatusAdbpgInstanceTotalDataGb struct {
	// The total amount of data storage of the instance. Unit: GB.
	//
	// example:
	//
	// 4.1
	Value *float32 `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeHealthStatusResponseBodyStatusAdbpgInstanceTotalDataGb) String() string {
	return tea.Prettify(s)
}

func (s DescribeHealthStatusResponseBodyStatusAdbpgInstanceTotalDataGb) GoString() string {
	return s.String()
}

func (s *DescribeHealthStatusResponseBodyStatusAdbpgInstanceTotalDataGb) SetValue(v float32) *DescribeHealthStatusResponseBodyStatusAdbpgInstanceTotalDataGb {
	s.Value = &v
	return s
}

type DescribeHealthStatusResponseBodyStatusAdbpgMasterDiskUsagePercentMax struct {
	// The status corresponding to the maximum storage usage of the coordinator node. Valid values:
	//
	// 	- **critical**: The coordinator node storage usage is greater than or equal to 90%. In this case, the instance is locked.
	//
	// 	- **warning**: The coordinator node storage usage is greater than or equal to 70% and less than 90%.
	//
	// 	- **healthy**: The coordinator node storage usage is less than 70%.
	//
	// example:
	//
	// healthy
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The metric value of maximum coordinator node storage usage.
	//
	// Unit: %.
	//
	// example:
	//
	// 1.34
	Value *float32 `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeHealthStatusResponseBodyStatusAdbpgMasterDiskUsagePercentMax) String() string {
	return tea.Prettify(s)
}

func (s DescribeHealthStatusResponseBodyStatusAdbpgMasterDiskUsagePercentMax) GoString() string {
	return s.String()
}

func (s *DescribeHealthStatusResponseBodyStatusAdbpgMasterDiskUsagePercentMax) SetStatus(v string) *DescribeHealthStatusResponseBodyStatusAdbpgMasterDiskUsagePercentMax {
	s.Status = &v
	return s
}

func (s *DescribeHealthStatusResponseBodyStatusAdbpgMasterDiskUsagePercentMax) SetValue(v float32) *DescribeHealthStatusResponseBodyStatusAdbpgMasterDiskUsagePercentMax {
	s.Value = &v
	return s
}

type DescribeHealthStatusResponseBodyStatusAdbpgMasterStatus struct {
	// The availability status of the coordinator node. Valid values:
	//
	// 	- **critical**: Both the primary and standby coordinator nodes are unavailable. In this case, this metric is marked in red in the console.
	//
	// 	- **warning**: The primary or standby coordinator node is unavailable. In this case, this metric is marked in yellow in the console.
	//
	// 	- **healthy**: Both the primary and standby coordinator nodes are available. In this case, this metric is marked in green in the console.
	//
	// example:
	//
	// healthy
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The metric value of coordinator node availability status. Valid values:
	//
	// example:
	//
	// 1
	Value *float32 `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeHealthStatusResponseBodyStatusAdbpgMasterStatus) String() string {
	return tea.Prettify(s)
}

func (s DescribeHealthStatusResponseBodyStatusAdbpgMasterStatus) GoString() string {
	return s.String()
}

func (s *DescribeHealthStatusResponseBodyStatusAdbpgMasterStatus) SetStatus(v string) *DescribeHealthStatusResponseBodyStatusAdbpgMasterStatus {
	s.Status = &v
	return s
}

func (s *DescribeHealthStatusResponseBodyStatusAdbpgMasterStatus) SetValue(v float32) *DescribeHealthStatusResponseBodyStatusAdbpgMasterStatus {
	s.Value = &v
	return s
}

type DescribeHealthStatusResponseBodyStatusAdbpgSegmentStatus struct {
	// The availability status of compute nodes. Valid values:
	//
	// 	- **critical**: All the primary and secondary compute nodes are unavailable. In this case, this metric is marked in red in the console.
	//
	// 	- **warning**: Fifty percent or more than fifty percent of compute nodes are unavailable. In this case, this metric is marked in yellow in the console.
	//
	// 	- **healthy**: All compute nodes are available. In this case, this metric is marked in green in the console.
	//
	// example:
	//
	// healthy
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The metric value of compute node availability status.
	//
	// example:
	//
	// 1
	Value *float32 `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeHealthStatusResponseBodyStatusAdbpgSegmentStatus) String() string {
	return tea.Prettify(s)
}

func (s DescribeHealthStatusResponseBodyStatusAdbpgSegmentStatus) GoString() string {
	return s.String()
}

func (s *DescribeHealthStatusResponseBodyStatusAdbpgSegmentStatus) SetStatus(v string) *DescribeHealthStatusResponseBodyStatusAdbpgSegmentStatus {
	s.Status = &v
	return s
}

func (s *DescribeHealthStatusResponseBodyStatusAdbpgSegmentStatus) SetValue(v float32) *DescribeHealthStatusResponseBodyStatusAdbpgSegmentStatus {
	s.Value = &v
	return s
}

type DescribeHealthStatusResponseBodyStatusAdbpgStatus struct {
	// The health status of the instance. Valid values:
	//
	// 	- **critical**: The coordinator node or a compute node is unavailable. In this case, this metric is marked in red in the console.
	//
	// 	- **healthy**: All nodes are available. In this case, this metric is marked in green in the console.
	//
	// example:
	//
	// healthy
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The metric value of instance health status. Valid values:
	//
	// 	- **1**: healthy
	//
	// 	- **0**: critical
	//
	// example:
	//
	// 1
	Value *float32 `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeHealthStatusResponseBodyStatusAdbpgStatus) String() string {
	return tea.Prettify(s)
}

func (s DescribeHealthStatusResponseBodyStatusAdbpgStatus) GoString() string {
	return s.String()
}

func (s *DescribeHealthStatusResponseBodyStatusAdbpgStatus) SetStatus(v string) *DescribeHealthStatusResponseBodyStatusAdbpgStatus {
	s.Status = &v
	return s
}

func (s *DescribeHealthStatusResponseBodyStatusAdbpgStatus) SetValue(v float32) *DescribeHealthStatusResponseBodyStatusAdbpgStatus {
	s.Value = &v
	return s
}

type DescribeHealthStatusResponseBodyStatusNodeMasterConnectionStatus struct {
	// The connection health status of the coordinator node. Valid values:
	//
	// 	- **critical**: The coordinator node connection usage is greater than 95%. In this case, this metric is marked in red in the console.
	//
	// 	- **warning**: The coordinator node connection usage is greater than or equal to 90% and less than 95%. In this case, this metric is marked in yellow in the console.
	//
	// 	- **healthy**: The coordinator node connection usage is less than 90%. In this case, this metric is marked in green in the console.
	//
	// >  The coordinator node connection usage is the maximum connection usage of the coordinator node.
	//
	// example:
	//
	// healthy
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The metric value of coordinator node connection usage.
	//
	// Unit: %.
	//
	// example:
	//
	// 1.71
	Value *float32 `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeHealthStatusResponseBodyStatusNodeMasterConnectionStatus) String() string {
	return tea.Prettify(s)
}

func (s DescribeHealthStatusResponseBodyStatusNodeMasterConnectionStatus) GoString() string {
	return s.String()
}

func (s *DescribeHealthStatusResponseBodyStatusNodeMasterConnectionStatus) SetStatus(v string) *DescribeHealthStatusResponseBodyStatusNodeMasterConnectionStatus {
	s.Status = &v
	return s
}

func (s *DescribeHealthStatusResponseBodyStatusNodeMasterConnectionStatus) SetValue(v float32) *DescribeHealthStatusResponseBodyStatusNodeMasterConnectionStatus {
	s.Value = &v
	return s
}

type DescribeHealthStatusResponseBodyStatusNodeMasterStatus struct {
	// The health status of the coordinator node. Valid values:
	//
	// 	- **critical**: The primary or standby coordinator node is unavailable. In this case, this metric is marked in red in the console.
	//
	// 	- **healthy**: Both the primary and standby coordinator nodes are available. In this case, this metric is marked in green in the console.
	//
	// example:
	//
	// healthy
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The metric value of coordinator node health status. Valid values:
	//
	// 	- **1**: healthy
	//
	// 	- **0**: critical
	//
	// example:
	//
	// 1
	Value *float32 `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeHealthStatusResponseBodyStatusNodeMasterStatus) String() string {
	return tea.Prettify(s)
}

func (s DescribeHealthStatusResponseBodyStatusNodeMasterStatus) GoString() string {
	return s.String()
}

func (s *DescribeHealthStatusResponseBodyStatusNodeMasterStatus) SetStatus(v string) *DescribeHealthStatusResponseBodyStatusNodeMasterStatus {
	s.Status = &v
	return s
}

func (s *DescribeHealthStatusResponseBodyStatusNodeMasterStatus) SetValue(v float32) *DescribeHealthStatusResponseBodyStatusNodeMasterStatus {
	s.Value = &v
	return s
}

type DescribeHealthStatusResponseBodyStatusNodeSegmentConnectionStatus struct {
	// The connection health status of compute nodes. Valid values:
	//
	// 	- **critical**: The compute node connection usage is greater than or equal to 95%. In this case, this metric is marked in red in the console.
	//
	// 	- **warning**: The compute node connection usage is greater than or equal to 90% and less than 95%. In this case, this metric is marked in yellow in the console.
	//
	// 	- **healthy**: The compute node connection usage is less than 90%. In this case, this metric is marked in green in the console.
	//
	// >  The compute node connection usage is the maximum connection usage among all compute nodes.
	//
	// example:
	//
	// healthy
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The metric value of maximum compute node connection usage.
	//
	// Unit: %.
	//
	// example:
	//
	// 0.48
	Value *float32 `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeHealthStatusResponseBodyStatusNodeSegmentConnectionStatus) String() string {
	return tea.Prettify(s)
}

func (s DescribeHealthStatusResponseBodyStatusNodeSegmentConnectionStatus) GoString() string {
	return s.String()
}

func (s *DescribeHealthStatusResponseBodyStatusNodeSegmentConnectionStatus) SetStatus(v string) *DescribeHealthStatusResponseBodyStatusNodeSegmentConnectionStatus {
	s.Status = &v
	return s
}

func (s *DescribeHealthStatusResponseBodyStatusNodeSegmentConnectionStatus) SetValue(v float32) *DescribeHealthStatusResponseBodyStatusNodeSegmentConnectionStatus {
	s.Value = &v
	return s
}

type DescribeHealthStatusResponseBodyStatusNodeSegmentDiskStatus struct {
	// The storage status of compute nodes. Valid values:
	//
	// 	- **critical**: The compute node storage usage is greater than or equal to 90%. In this case, this metric is marked in red in the console and the instance is locked.
	//
	// 	- **warning**: The compute node storage usage is greater than or equal to 80% and less than 90%. In this case, this metric is marked in yellow in the console.
	//
	// 	- **healthy**: The compute node storage usage is less than 80%. In this case, this metric is marked in green in the console.
	//
	// >  The compute node storage usage is the maximum storage usage among all compute nodes.
	//
	// example:
	//
	// healthy
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The metric value of maximum compute node storage usage.
	//
	// Unit: %.
	//
	// example:
	//
	// 1.52
	Value *float32 `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeHealthStatusResponseBodyStatusNodeSegmentDiskStatus) String() string {
	return tea.Prettify(s)
}

func (s DescribeHealthStatusResponseBodyStatusNodeSegmentDiskStatus) GoString() string {
	return s.String()
}

func (s *DescribeHealthStatusResponseBodyStatusNodeSegmentDiskStatus) SetStatus(v string) *DescribeHealthStatusResponseBodyStatusNodeSegmentDiskStatus {
	s.Status = &v
	return s
}

func (s *DescribeHealthStatusResponseBodyStatusNodeSegmentDiskStatus) SetValue(v float32) *DescribeHealthStatusResponseBodyStatusNodeSegmentDiskStatus {
	s.Value = &v
	return s
}

type DescribeHealthStatusResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeHealthStatusResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeHealthStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeHealthStatusResponse) GoString() string {
	return s.String()
}

func (s *DescribeHealthStatusResponse) SetHeaders(v map[string]*string) *DescribeHealthStatusResponse {
	s.Headers = v
	return s
}

func (s *DescribeHealthStatusResponse) SetStatusCode(v int32) *DescribeHealthStatusResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeHealthStatusResponse) SetBody(v *DescribeHealthStatusResponseBody) *DescribeHealthStatusResponse {
	s.Body = v
	return s
}

type DescribeIMVInfosRequest struct {
	// The instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The name of the database.
	//
	// This parameter is required.
	//
	// example:
	//
	// testdb
	Database *string `json:"Database,omitempty" xml:"Database,omitempty"`
	// The name of MV
	//
	// example:
	//
	// public."mv1"
	MVName *string `json:"MVName,omitempty" xml:"MVName,omitempty"`
}

func (s DescribeIMVInfosRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeIMVInfosRequest) GoString() string {
	return s.String()
}

func (s *DescribeIMVInfosRequest) SetDBInstanceId(v string) *DescribeIMVInfosRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeIMVInfosRequest) SetDatabase(v string) *DescribeIMVInfosRequest {
	s.Database = &v
	return s
}

func (s *DescribeIMVInfosRequest) SetMVName(v string) *DescribeIMVInfosRequest {
	s.MVName = &v
	return s
}

type DescribeIMVInfosResponseBody struct {
	// The ID of the instance.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the details of all AnalyticDB for PostgreSQL instances in a specific region, including instance IDs.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The queried materialized views.
	ImvInfos []*DescribeIMVInfosResponseBodyImvInfos `json:"ImvInfos,omitempty" xml:"ImvInfos,omitempty" type:"Repeated"`
	// The request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeIMVInfosResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeIMVInfosResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeIMVInfosResponseBody) SetDBInstanceId(v string) *DescribeIMVInfosResponseBody {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeIMVInfosResponseBody) SetImvInfos(v []*DescribeIMVInfosResponseBodyImvInfos) *DescribeIMVInfosResponseBody {
	s.ImvInfos = v
	return s
}

func (s *DescribeIMVInfosResponseBody) SetRequestId(v string) *DescribeIMVInfosResponseBody {
	s.RequestId = &v
	return s
}

type DescribeIMVInfosResponseBodyImvInfos struct {
	// The name of the table based on which the materialized view is created.
	//
	// example:
	//
	// "public."t2"
	Base *string `json:"Base,omitempty" xml:"Base,omitempty"`
	// The dependency between the materialized view and the base table and all metric values, which can be used to build a lineage graph.
	//
	// example:
	//
	// {\\"maintenance_calls\\" : 1, \\"avg_apply_time\\" : 2, \\"avg_calc_rows\\" : 1, \\"avg_calc_time\\" : 11, \\"avg_delta_rows\\" : 1, \\"avg_maintenance_total_time\\" : 14, \\"avg_maintenance_total_time_total\\" : 14, \\"max_apply_time\\" : 2, \\"max_calc_rows\\" : 1, \\"max_calc_time\\" : 11, \\"max_delta_rows\\" : 1, \\"max_maintenance_total_time\\" : 14, \\"max_maintenance_total_time_total\\" : 14, \\"min_apply_time\\" : 2, \\"min_calc_rows\\" : 1, \\"min_calc_time\\" : 11, \\"min_delta_rows\\" : 1, \\"min_maintenance_total_time\\" : 14, \\"min_maintenance_total_time_total\\" : 14, \\"max_outerjoin_apply_time\\" : null, \\"max_outerjoin_calc_rows\\" : null, \\"max_outerjoin_calc_time\\" : null, \\"max_outerjoin_delta_rows\\" : null, \\"avg_outerjoin_apply_time\\" : null, \\"avg_outerjoin_calc_rows\\" : null, \\"avg_outerjoin_calc_time\\" : null, \\"avg_outerjoin_delta_rows\\" : null, \\"min_outerjoin_apply_time\\" : null, \\"min_outerjoin_calc_rows\\" : null, \\"min_outerjoin_calc_time\\" : null, \\"min_outerjoin_delta_rows\\" : null, \\"create_rows\\" : null, \\"create_time\\" : null, \\"direct_visited\\" : null, \\"indirect_visited\\" : null, \\"max_refresh_rows\\" : null, \\"max_refresh_time\\" : null, \\"avg_refresh_rows\\" : null, \\"avg_refresh_time\\" : null, \\"min_refresh_rows\\" : null, \\"min_refresh_time\\" : null, \\"refresh_calls\\" : null, \\"avg_wait_lock_time\\" : null, \\"max_wait_lock_time\\" : null, \\"min_wait_lock_time\\" : null, \\"latest_maintenance_time\\" : \\"2023-08-09T07:39:14.753252+00:00\\"}
	DetailInfo *string `json:"DetailInfo,omitempty" xml:"DetailInfo,omitempty"`
	// The name of the materialized view.
	//
	// example:
	//
	// public."mv1"
	MV *string `json:"MV,omitempty" xml:"MV,omitempty"`
}

func (s DescribeIMVInfosResponseBodyImvInfos) String() string {
	return tea.Prettify(s)
}

func (s DescribeIMVInfosResponseBodyImvInfos) GoString() string {
	return s.String()
}

func (s *DescribeIMVInfosResponseBodyImvInfos) SetBase(v string) *DescribeIMVInfosResponseBodyImvInfos {
	s.Base = &v
	return s
}

func (s *DescribeIMVInfosResponseBodyImvInfos) SetDetailInfo(v string) *DescribeIMVInfosResponseBodyImvInfos {
	s.DetailInfo = &v
	return s
}

func (s *DescribeIMVInfosResponseBodyImvInfos) SetMV(v string) *DescribeIMVInfosResponseBodyImvInfos {
	s.MV = &v
	return s
}

type DescribeIMVInfosResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeIMVInfosResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeIMVInfosResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeIMVInfosResponse) GoString() string {
	return s.String()
}

func (s *DescribeIMVInfosResponse) SetHeaders(v map[string]*string) *DescribeIMVInfosResponse {
	s.Headers = v
	return s
}

func (s *DescribeIMVInfosResponse) SetStatusCode(v int32) *DescribeIMVInfosResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeIMVInfosResponse) SetBody(v *DescribeIMVInfosResponseBody) *DescribeIMVInfosResponse {
	s.Body = v
	return s
}

type DescribeIndexRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// testcollection
	Collection *string `json:"Collection,omitempty" xml:"Collection,omitempty"`
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// testindex
	IndexName *string `json:"IndexName,omitempty" xml:"IndexName,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// mynamespace
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// testpassword
	NamespacePassword *string `json:"NamespacePassword,omitempty" xml:"NamespacePassword,omitempty"`
	OwnerId           *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// example:
	//
	// gp-ws-*****
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s DescribeIndexRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeIndexRequest) GoString() string {
	return s.String()
}

func (s *DescribeIndexRequest) SetCollection(v string) *DescribeIndexRequest {
	s.Collection = &v
	return s
}

func (s *DescribeIndexRequest) SetDBInstanceId(v string) *DescribeIndexRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeIndexRequest) SetIndexName(v string) *DescribeIndexRequest {
	s.IndexName = &v
	return s
}

func (s *DescribeIndexRequest) SetNamespace(v string) *DescribeIndexRequest {
	s.Namespace = &v
	return s
}

func (s *DescribeIndexRequest) SetNamespacePassword(v string) *DescribeIndexRequest {
	s.NamespacePassword = &v
	return s
}

func (s *DescribeIndexRequest) SetOwnerId(v int64) *DescribeIndexRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeIndexRequest) SetRegionId(v string) *DescribeIndexRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeIndexRequest) SetWorkspaceId(v string) *DescribeIndexRequest {
	s.WorkspaceId = &v
	return s
}

type DescribeIndexResponseBody struct {
	// example:
	//
	// testcollection
	Collection *string `json:"Collection,omitempty" xml:"Collection,omitempty"`
	// example:
	//
	// CREATE INDEX testindex ON mynamespace. testcollection
	IndexDef *string `json:"IndexDef,omitempty" xml:"IndexDef,omitempty"`
	// example:
	//
	// testindex
	IndexName *string `json:"IndexName,omitempty" xml:"IndexName,omitempty"`
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// mynamespace
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeIndexResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeIndexResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeIndexResponseBody) SetCollection(v string) *DescribeIndexResponseBody {
	s.Collection = &v
	return s
}

func (s *DescribeIndexResponseBody) SetIndexDef(v string) *DescribeIndexResponseBody {
	s.IndexDef = &v
	return s
}

func (s *DescribeIndexResponseBody) SetIndexName(v string) *DescribeIndexResponseBody {
	s.IndexName = &v
	return s
}

func (s *DescribeIndexResponseBody) SetMessage(v string) *DescribeIndexResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeIndexResponseBody) SetNamespace(v string) *DescribeIndexResponseBody {
	s.Namespace = &v
	return s
}

func (s *DescribeIndexResponseBody) SetRequestId(v string) *DescribeIndexResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeIndexResponseBody) SetStatus(v string) *DescribeIndexResponseBody {
	s.Status = &v
	return s
}

type DescribeIndexResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeIndexResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeIndexResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeIndexResponse) GoString() string {
	return s.String()
}

func (s *DescribeIndexResponse) SetHeaders(v map[string]*string) *DescribeIndexResponse {
	s.Headers = v
	return s
}

func (s *DescribeIndexResponse) SetStatusCode(v int32) *DescribeIndexResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeIndexResponse) SetBody(v *DescribeIndexResponseBody) *DescribeIndexResponse {
	s.Body = v
	return s
}

type DescribeJDBCDataSourceRequest struct {
	// The instance ID.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The data source ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 123
	DataSourceId *string `json:"DataSourceId,omitempty" xml:"DataSourceId,omitempty"`
}

func (s DescribeJDBCDataSourceRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeJDBCDataSourceRequest) GoString() string {
	return s.String()
}

func (s *DescribeJDBCDataSourceRequest) SetDBInstanceId(v string) *DescribeJDBCDataSourceRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeJDBCDataSourceRequest) SetDataSourceId(v string) *DescribeJDBCDataSourceRequest {
	s.DataSourceId = &v
	return s
}

type DescribeJDBCDataSourceResponseBody struct {
	// The time when the service was created.
	//
	// example:
	//
	// 2019-09-08T16:00:00Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The description of the service. The description can be up to 256 characters in length.
	//
	// example:
	//
	// mysql data source config
	DataSourceDescription *string `json:"DataSourceDescription,omitempty" xml:"DataSourceDescription,omitempty"`
	// The data source ID.
	//
	// example:
	//
	// 123
	DataSourceId *string `json:"DataSourceId,omitempty" xml:"DataSourceId,omitempty"`
	// The name of data soruce
	//
	// example:
	//
	// hdfs_pxf
	DataSourceName *string `json:"DataSourceName,omitempty" xml:"DataSourceName,omitempty"`
	// The status of the service. Valid values:
	//
	// 	- Init
	//
	// 	- Running
	//
	// 	- Exception
	//
	// example:
	//
	// Running
	DataSourceStatus *string `json:"DataSourceStatus,omitempty" xml:"DataSourceStatus,omitempty"`
	// The type of the data source.
	//
	// example:
	//
	// MySQL
	DataSourceType *string `json:"DataSourceType,omitempty" xml:"DataSourceType,omitempty"`
	// The id of the external data service
	//
	// example:
	//
	// 2989
	ExternalDataServiceId *string `json:"ExternalDataServiceId,omitempty" xml:"ExternalDataServiceId,omitempty"`
	// The JDBC connection string.
	//
	// example:
	//
	// xxxxxx
	JDBCConnectionString *string `json:"JDBCConnectionString,omitempty" xml:"JDBCConnectionString,omitempty"`
	// The password of the database account.
	//
	// example:
	//
	// xxxxxx
	JDBCPassword *string `json:"JDBCPassword,omitempty" xml:"JDBCPassword,omitempty"`
	// The name of the database account.
	//
	// example:
	//
	// xxxxxx
	JDBCUserName *string `json:"JDBCUserName,omitempty" xml:"JDBCUserName,omitempty"`
	// The time when the data source was last modified.
	//
	// example:
	//
	// 2024-08-27T02:01:10Z
	ModifyTime *string `json:"ModifyTime,omitempty" xml:"ModifyTime,omitempty"`
	// The request ID.
	//
	// example:
	//
	// B4CAF581-2AC7-41AD-8940-D56DF7AADF5B
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The message of the status
	//
	// example:
	//
	// ""
	StatusMessage *string `json:"StatusMessage,omitempty" xml:"StatusMessage,omitempty"`
}

func (s DescribeJDBCDataSourceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeJDBCDataSourceResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeJDBCDataSourceResponseBody) SetCreateTime(v string) *DescribeJDBCDataSourceResponseBody {
	s.CreateTime = &v
	return s
}

func (s *DescribeJDBCDataSourceResponseBody) SetDataSourceDescription(v string) *DescribeJDBCDataSourceResponseBody {
	s.DataSourceDescription = &v
	return s
}

func (s *DescribeJDBCDataSourceResponseBody) SetDataSourceId(v string) *DescribeJDBCDataSourceResponseBody {
	s.DataSourceId = &v
	return s
}

func (s *DescribeJDBCDataSourceResponseBody) SetDataSourceName(v string) *DescribeJDBCDataSourceResponseBody {
	s.DataSourceName = &v
	return s
}

func (s *DescribeJDBCDataSourceResponseBody) SetDataSourceStatus(v string) *DescribeJDBCDataSourceResponseBody {
	s.DataSourceStatus = &v
	return s
}

func (s *DescribeJDBCDataSourceResponseBody) SetDataSourceType(v string) *DescribeJDBCDataSourceResponseBody {
	s.DataSourceType = &v
	return s
}

func (s *DescribeJDBCDataSourceResponseBody) SetExternalDataServiceId(v string) *DescribeJDBCDataSourceResponseBody {
	s.ExternalDataServiceId = &v
	return s
}

func (s *DescribeJDBCDataSourceResponseBody) SetJDBCConnectionString(v string) *DescribeJDBCDataSourceResponseBody {
	s.JDBCConnectionString = &v
	return s
}

func (s *DescribeJDBCDataSourceResponseBody) SetJDBCPassword(v string) *DescribeJDBCDataSourceResponseBody {
	s.JDBCPassword = &v
	return s
}

func (s *DescribeJDBCDataSourceResponseBody) SetJDBCUserName(v string) *DescribeJDBCDataSourceResponseBody {
	s.JDBCUserName = &v
	return s
}

func (s *DescribeJDBCDataSourceResponseBody) SetModifyTime(v string) *DescribeJDBCDataSourceResponseBody {
	s.ModifyTime = &v
	return s
}

func (s *DescribeJDBCDataSourceResponseBody) SetRequestId(v string) *DescribeJDBCDataSourceResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeJDBCDataSourceResponseBody) SetStatusMessage(v string) *DescribeJDBCDataSourceResponseBody {
	s.StatusMessage = &v
	return s
}

type DescribeJDBCDataSourceResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeJDBCDataSourceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeJDBCDataSourceResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeJDBCDataSourceResponse) GoString() string {
	return s.String()
}

func (s *DescribeJDBCDataSourceResponse) SetHeaders(v map[string]*string) *DescribeJDBCDataSourceResponse {
	s.Headers = v
	return s
}

func (s *DescribeJDBCDataSourceResponse) SetStatusCode(v int32) *DescribeJDBCDataSourceResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeJDBCDataSourceResponse) SetBody(v *DescribeJDBCDataSourceResponseBody) *DescribeJDBCDataSourceResponse {
	s.Body = v
	return s
}

type DescribeLogBackupsRequest struct {
	// The ID of the instance.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the IDs of all AnalyticDB for PostgreSQL instances in a specific region.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The end of the time range to query. The end time must be later than the start time. Specify the time in the yyyy-MM-ddTHH:mmZ format. The time must be in UTC.
	//
	// This parameter is required.
	//
	// example:
	//
	// 2022-12-12T03:00Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The number of the page to return. The value must be an integer that is greater than 0. Default value: **1**.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries to return on each page. Valid values:
	//
	// 	- **30**
	//
	// 	- **50**
	//
	// 	- **100**
	//
	// Default value: **30**.
	//
	// example:
	//
	// 30
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The beginning of the time range to query. Specify the time in the yyyy-MM-ddTHH:mmZ format. The time must be in UTC.
	//
	// This parameter is required.
	//
	// example:
	//
	// 2022-12-12T02:00Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeLogBackupsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLogBackupsRequest) GoString() string {
	return s.String()
}

func (s *DescribeLogBackupsRequest) SetDBInstanceId(v string) *DescribeLogBackupsRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeLogBackupsRequest) SetEndTime(v string) *DescribeLogBackupsRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeLogBackupsRequest) SetPageNumber(v int32) *DescribeLogBackupsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeLogBackupsRequest) SetPageSize(v int32) *DescribeLogBackupsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeLogBackupsRequest) SetStartTime(v string) *DescribeLogBackupsRequest {
	s.StartTime = &v
	return s
}

type DescribeLogBackupsResponseBody struct {
	// Details of the backup sets.
	Items []*DescribeLogBackupsResponseBodyItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Repeated"`
	// The page number of the returned page.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of backup sets on the current page.
	//
	// example:
	//
	// 30
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 24B9FCAF-2CBC-51C3-B563-F1C70D750187
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of entries.
	//
	// example:
	//
	// 5
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	// The total size of logs in the time range. Unit: bytes.
	//
	// example:
	//
	// 386748
	TotalLogSize *int64 `json:"TotalLogSize,omitempty" xml:"TotalLogSize,omitempty"`
}

func (s DescribeLogBackupsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLogBackupsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLogBackupsResponseBody) SetItems(v []*DescribeLogBackupsResponseBodyItems) *DescribeLogBackupsResponseBody {
	s.Items = v
	return s
}

func (s *DescribeLogBackupsResponseBody) SetPageNumber(v int32) *DescribeLogBackupsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeLogBackupsResponseBody) SetPageSize(v int32) *DescribeLogBackupsResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeLogBackupsResponseBody) SetRequestId(v string) *DescribeLogBackupsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLogBackupsResponseBody) SetTotalCount(v int32) *DescribeLogBackupsResponseBody {
	s.TotalCount = &v
	return s
}

func (s *DescribeLogBackupsResponseBody) SetTotalLogSize(v int64) *DescribeLogBackupsResponseBody {
	s.TotalLogSize = &v
	return s
}

type DescribeLogBackupsResponseBodyItems struct {
	// The ID of the backup set.
	//
	// example:
	//
	// 12413721782
	BackupId *string `json:"BackupId,omitempty" xml:"BackupId,omitempty"`
	// The ID of the coordinator node.
	//
	// example:
	//
	// gp-bp12ga6v69h86****-master
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The name of the log backup set that is stored in Object Storage Service (OSS).
	//
	// example:
	//
	// 000000010000000400000012
	LogFileName *string `json:"LogFileName,omitempty" xml:"LogFileName,omitempty"`
	// The size of the log backup set. Unit: bytes.
	//
	// example:
	//
	// 77350
	LogFileSize *int64 `json:"LogFileSize,omitempty" xml:"LogFileSize,omitempty"`
	// The timestamp of the log.
	//
	// example:
	//
	// 2022-12-12T02:14:26Z
	LogTime *string `json:"LogTime,omitempty" xml:"LogTime,omitempty"`
	// The name of the compute node.
	//
	// example:
	//
	// segment-0
	SegmentName *string `json:"SegmentName,omitempty" xml:"SegmentName,omitempty"`
}

func (s DescribeLogBackupsResponseBodyItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeLogBackupsResponseBodyItems) GoString() string {
	return s.String()
}

func (s *DescribeLogBackupsResponseBodyItems) SetBackupId(v string) *DescribeLogBackupsResponseBodyItems {
	s.BackupId = &v
	return s
}

func (s *DescribeLogBackupsResponseBodyItems) SetDBInstanceId(v string) *DescribeLogBackupsResponseBodyItems {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeLogBackupsResponseBodyItems) SetLogFileName(v string) *DescribeLogBackupsResponseBodyItems {
	s.LogFileName = &v
	return s
}

func (s *DescribeLogBackupsResponseBodyItems) SetLogFileSize(v int64) *DescribeLogBackupsResponseBodyItems {
	s.LogFileSize = &v
	return s
}

func (s *DescribeLogBackupsResponseBodyItems) SetLogTime(v string) *DescribeLogBackupsResponseBodyItems {
	s.LogTime = &v
	return s
}

func (s *DescribeLogBackupsResponseBodyItems) SetSegmentName(v string) *DescribeLogBackupsResponseBodyItems {
	s.SegmentName = &v
	return s
}

type DescribeLogBackupsResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeLogBackupsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeLogBackupsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLogBackupsResponse) GoString() string {
	return s.String()
}

func (s *DescribeLogBackupsResponse) SetHeaders(v map[string]*string) *DescribeLogBackupsResponse {
	s.Headers = v
	return s
}

func (s *DescribeLogBackupsResponse) SetStatusCode(v int32) *DescribeLogBackupsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeLogBackupsResponse) SetBody(v *DescribeLogBackupsResponseBody) *DescribeLogBackupsResponse {
	s.Body = v
	return s
}

type DescribeModifyParameterLogRequest struct {
	// The instance ID.
	//
	// > You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/196830.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The end of the time range to query. Specify the time in the ISO 8601 standard in the *yyyy-MM-ddTHH:mmZ	- format. The time must be in UTC. The end time must be later than the start time.
	//
	// example:
	//
	// 2020-05-05T11:22:22Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The beginning of the time range to query. Specify the time in the ISO 8601 standard in the *yyyy-MM-ddTHH:mmZ	- format. The time must be in UTC.
	//
	// example:
	//
	// 2020-02-02T11:22:22Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeModifyParameterLogRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeModifyParameterLogRequest) GoString() string {
	return s.String()
}

func (s *DescribeModifyParameterLogRequest) SetDBInstanceId(v string) *DescribeModifyParameterLogRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeModifyParameterLogRequest) SetEndTime(v string) *DescribeModifyParameterLogRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeModifyParameterLogRequest) SetStartTime(v string) *DescribeModifyParameterLogRequest {
	s.StartTime = &v
	return s
}

type DescribeModifyParameterLogResponseBody struct {
	// The queried parameter modification logs.
	Changelogs []*DescribeModifyParameterLogResponseBodyChangelogs `json:"Changelogs,omitempty" xml:"Changelogs,omitempty" type:"Repeated"`
	// The request ID.
	//
	// example:
	//
	// 7565770E-7C45-462D-BA4A-8A5396F2CAD1
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeModifyParameterLogResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeModifyParameterLogResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeModifyParameterLogResponseBody) SetChangelogs(v []*DescribeModifyParameterLogResponseBodyChangelogs) *DescribeModifyParameterLogResponseBody {
	s.Changelogs = v
	return s
}

func (s *DescribeModifyParameterLogResponseBody) SetRequestId(v string) *DescribeModifyParameterLogResponseBody {
	s.RequestId = &v
	return s
}

type DescribeModifyParameterLogResponseBodyChangelogs struct {
	// The effective time.
	//
	// example:
	//
	// 2020-05-05T11:22:22Z
	EffectTime *string `json:"EffectTime,omitempty" xml:"EffectTime,omitempty"`
	// The name of the parameter.
	//
	// example:
	//
	// testkey
	ParameterName *string `json:"ParameterName,omitempty" xml:"ParameterName,omitempty"`
	// Indicates whether the modification takes effect.
	//
	// example:
	//
	// true
	ParameterValid *string `json:"ParameterValid,omitempty" xml:"ParameterValid,omitempty"`
	// The original value of the parameter.
	//
	// example:
	//
	// 100
	ParameterValueAfter *string `json:"ParameterValueAfter,omitempty" xml:"ParameterValueAfter,omitempty"`
	// The new value of the parameter.
	//
	// example:
	//
	// 200
	ParameterValueBefore *string `json:"ParameterValueBefore,omitempty" xml:"ParameterValueBefore,omitempty"`
}

func (s DescribeModifyParameterLogResponseBodyChangelogs) String() string {
	return tea.Prettify(s)
}

func (s DescribeModifyParameterLogResponseBodyChangelogs) GoString() string {
	return s.String()
}

func (s *DescribeModifyParameterLogResponseBodyChangelogs) SetEffectTime(v string) *DescribeModifyParameterLogResponseBodyChangelogs {
	s.EffectTime = &v
	return s
}

func (s *DescribeModifyParameterLogResponseBodyChangelogs) SetParameterName(v string) *DescribeModifyParameterLogResponseBodyChangelogs {
	s.ParameterName = &v
	return s
}

func (s *DescribeModifyParameterLogResponseBodyChangelogs) SetParameterValid(v string) *DescribeModifyParameterLogResponseBodyChangelogs {
	s.ParameterValid = &v
	return s
}

func (s *DescribeModifyParameterLogResponseBodyChangelogs) SetParameterValueAfter(v string) *DescribeModifyParameterLogResponseBodyChangelogs {
	s.ParameterValueAfter = &v
	return s
}

func (s *DescribeModifyParameterLogResponseBodyChangelogs) SetParameterValueBefore(v string) *DescribeModifyParameterLogResponseBodyChangelogs {
	s.ParameterValueBefore = &v
	return s
}

type DescribeModifyParameterLogResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeModifyParameterLogResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeModifyParameterLogResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeModifyParameterLogResponse) GoString() string {
	return s.String()
}

func (s *DescribeModifyParameterLogResponse) SetHeaders(v map[string]*string) *DescribeModifyParameterLogResponse {
	s.Headers = v
	return s
}

func (s *DescribeModifyParameterLogResponse) SetStatusCode(v int32) *DescribeModifyParameterLogResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeModifyParameterLogResponse) SetBody(v *DescribeModifyParameterLogResponseBody) *DescribeModifyParameterLogResponse {
	s.Body = v
	return s
}

type DescribeNamespaceRequest struct {
	// The instance ID.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The name of the manager account that has the rds_superuser permission.
	//
	// >  You can create an account on the Account Management page of the AnalyticDB for PostgreSQL console or by calling the [CreateAccount](https://help.aliyun.com/document_detail/2361789.html) operation.
	//
	// This parameter is required.
	//
	// example:
	//
	// testaccount
	ManagerAccount *string `json:"ManagerAccount,omitempty" xml:"ManagerAccount,omitempty"`
	// The password of the manager account.
	//
	// This parameter is required.
	//
	// example:
	//
	// testpassword
	ManagerAccountPassword *string `json:"ManagerAccountPassword,omitempty" xml:"ManagerAccountPassword,omitempty"`
	// The name of the namespace. Default value: public.
	//
	// >  You can call the [ListNamespaces](https://help.aliyun.com/document_detail/2401502.html) operation to query a list of namespaces.
	//
	// This parameter is required.
	//
	// example:
	//
	// mynamespace
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	OwnerId   *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The region ID of the instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the workspace that consists of multiple AnalyticDB for PostgreSQL instances. You must specify one of the WorkspaceId and DBInstanceId parameters. If you specify both parameters, the WorkspaceId parameter takes effect.
	//
	// example:
	//
	// gp-ws-*****
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s DescribeNamespaceRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeNamespaceRequest) GoString() string {
	return s.String()
}

func (s *DescribeNamespaceRequest) SetDBInstanceId(v string) *DescribeNamespaceRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeNamespaceRequest) SetManagerAccount(v string) *DescribeNamespaceRequest {
	s.ManagerAccount = &v
	return s
}

func (s *DescribeNamespaceRequest) SetManagerAccountPassword(v string) *DescribeNamespaceRequest {
	s.ManagerAccountPassword = &v
	return s
}

func (s *DescribeNamespaceRequest) SetNamespace(v string) *DescribeNamespaceRequest {
	s.Namespace = &v
	return s
}

func (s *DescribeNamespaceRequest) SetOwnerId(v int64) *DescribeNamespaceRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeNamespaceRequest) SetRegionId(v string) *DescribeNamespaceRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeNamespaceRequest) SetWorkspaceId(v string) *DescribeNamespaceRequest {
	s.WorkspaceId = &v
	return s
}

type DescribeNamespaceResponseBody struct {
	// The instance ID.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The returned message.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The name of the namespace.
	//
	// example:
	//
	// mynamespace
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// The queried namespace.
	NamespaceInfo map[string]*string `json:"NamespaceInfo,omitempty" xml:"NamespaceInfo,omitempty"`
	// The region ID of the instance.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **success**
	//
	// 	- **fail**
	//
	// example:
	//
	// success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeNamespaceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeNamespaceResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeNamespaceResponseBody) SetDBInstanceId(v string) *DescribeNamespaceResponseBody {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeNamespaceResponseBody) SetMessage(v string) *DescribeNamespaceResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeNamespaceResponseBody) SetNamespace(v string) *DescribeNamespaceResponseBody {
	s.Namespace = &v
	return s
}

func (s *DescribeNamespaceResponseBody) SetNamespaceInfo(v map[string]*string) *DescribeNamespaceResponseBody {
	s.NamespaceInfo = v
	return s
}

func (s *DescribeNamespaceResponseBody) SetRegionId(v string) *DescribeNamespaceResponseBody {
	s.RegionId = &v
	return s
}

func (s *DescribeNamespaceResponseBody) SetRequestId(v string) *DescribeNamespaceResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeNamespaceResponseBody) SetStatus(v string) *DescribeNamespaceResponseBody {
	s.Status = &v
	return s
}

type DescribeNamespaceResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeNamespaceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeNamespaceResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeNamespaceResponse) GoString() string {
	return s.String()
}

func (s *DescribeNamespaceResponse) SetHeaders(v map[string]*string) *DescribeNamespaceResponse {
	s.Headers = v
	return s
}

func (s *DescribeNamespaceResponse) SetStatusCode(v int32) *DescribeNamespaceResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeNamespaceResponse) SetBody(v *DescribeNamespaceResponseBody) *DescribeNamespaceResponse {
	s.Body = v
	return s
}

type DescribeParametersRequest struct {
	// The ID of the instance.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the details of all AnalyticDB for PostgreSQL instances in a specific region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp***************
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
}

func (s DescribeParametersRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeParametersRequest) GoString() string {
	return s.String()
}

func (s *DescribeParametersRequest) SetDBInstanceId(v string) *DescribeParametersRequest {
	s.DBInstanceId = &v
	return s
}

type DescribeParametersResponseBody struct {
	// The queried configuration parameters.
	Parameters []*DescribeParametersResponseBodyParameters `json:"Parameters,omitempty" xml:"Parameters,omitempty" type:"Repeated"`
	// The ID of the request.
	//
	// example:
	//
	// 62506167-D284-562A-B7C2-0A**********
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeParametersResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeParametersResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeParametersResponseBody) SetParameters(v []*DescribeParametersResponseBodyParameters) *DescribeParametersResponseBody {
	s.Parameters = v
	return s
}

func (s *DescribeParametersResponseBody) SetRequestId(v string) *DescribeParametersResponseBody {
	s.RequestId = &v
	return s
}

type DescribeParametersResponseBodyParameters struct {
	// The current value of the configuration parameter.
	//
	// example:
	//
	// 10800000
	CurrentValue *string `json:"CurrentValue,omitempty" xml:"CurrentValue,omitempty"`
	// Indicates whether a restart is required for parameter modifications to take effect. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// false
	ForceRestartInstance *string `json:"ForceRestartInstance,omitempty" xml:"ForceRestartInstance,omitempty"`
	// Indicates whether the configuration parameter can be modified. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	IsChangeableConfig *string `json:"IsChangeableConfig,omitempty" xml:"IsChangeableConfig,omitempty"`
	// The valid values of the configuration parameter.
	//
	// example:
	//
	// [0-2147483647]
	OptionalRange *string `json:"OptionalRange,omitempty" xml:"OptionalRange,omitempty"`
	// The description of the configuration parameter.
	//
	// example:
	//
	// Sets the maximum allowed duration of any statement, A value of 0 turns off the timeout.
	ParameterDescription *string `json:"ParameterDescription,omitempty" xml:"ParameterDescription,omitempty"`
	// The name of the configuration parameter.
	//
	// example:
	//
	// statement_timeout
	ParameterName *string `json:"ParameterName,omitempty" xml:"ParameterName,omitempty"`
	// The default value of the configuration parameter.
	//
	// example:
	//
	// 10800000
	ParameterValue *string `json:"ParameterValue,omitempty" xml:"ParameterValue,omitempty"`
}

func (s DescribeParametersResponseBodyParameters) String() string {
	return tea.Prettify(s)
}

func (s DescribeParametersResponseBodyParameters) GoString() string {
	return s.String()
}

func (s *DescribeParametersResponseBodyParameters) SetCurrentValue(v string) *DescribeParametersResponseBodyParameters {
	s.CurrentValue = &v
	return s
}

func (s *DescribeParametersResponseBodyParameters) SetForceRestartInstance(v string) *DescribeParametersResponseBodyParameters {
	s.ForceRestartInstance = &v
	return s
}

func (s *DescribeParametersResponseBodyParameters) SetIsChangeableConfig(v string) *DescribeParametersResponseBodyParameters {
	s.IsChangeableConfig = &v
	return s
}

func (s *DescribeParametersResponseBodyParameters) SetOptionalRange(v string) *DescribeParametersResponseBodyParameters {
	s.OptionalRange = &v
	return s
}

func (s *DescribeParametersResponseBodyParameters) SetParameterDescription(v string) *DescribeParametersResponseBodyParameters {
	s.ParameterDescription = &v
	return s
}

func (s *DescribeParametersResponseBodyParameters) SetParameterName(v string) *DescribeParametersResponseBodyParameters {
	s.ParameterName = &v
	return s
}

func (s *DescribeParametersResponseBodyParameters) SetParameterValue(v string) *DescribeParametersResponseBodyParameters {
	s.ParameterValue = &v
	return s
}

type DescribeParametersResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeParametersResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeParametersResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeParametersResponse) GoString() string {
	return s.String()
}

func (s *DescribeParametersResponse) SetHeaders(v map[string]*string) *DescribeParametersResponse {
	s.Headers = v
	return s
}

func (s *DescribeParametersResponse) SetStatusCode(v int32) *DescribeParametersResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeParametersResponse) SetBody(v *DescribeParametersResponseBody) *DescribeParametersResponse {
	s.Body = v
	return s
}

type DescribeRdsVSwitchsRequest struct {
	OwnerAccount *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The ID of the region.
	//
	// >  You can call the [DescribeRegions](https://help.aliyun.com/document_detail/86912.html) operation to query the most recent region list and zone list.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// This parameter is no longer used.
	//
	// example:
	//
	// rg-bp67acfmxazb4p****
	ResourceGroupId      *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SecurityToken        *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The virtual private cloud (VPC) ID of the instance.
	//
	// >
	//
	// 	- You can call the [DescribeRdsVpcs](https://help.aliyun.com/document_detail/208327.html) operation to query the available VPC IDs.
	//
	// 	- This parameter must be specified.
	//
	// example:
	//
	// vpc-bp*******************
	VpcId *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	// The ID of the zone.
	//
	// >  You can call the [DescribeRegions](https://help.aliyun.com/document_detail/86912.html) operation to query the most recent region list and zone list.
	//
	// example:
	//
	// cn-hangzhou-h
	ZoneId *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s DescribeRdsVSwitchsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeRdsVSwitchsRequest) GoString() string {
	return s.String()
}

func (s *DescribeRdsVSwitchsRequest) SetOwnerAccount(v string) *DescribeRdsVSwitchsRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeRdsVSwitchsRequest) SetOwnerId(v int64) *DescribeRdsVSwitchsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeRdsVSwitchsRequest) SetRegionId(v string) *DescribeRdsVSwitchsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeRdsVSwitchsRequest) SetResourceGroupId(v string) *DescribeRdsVSwitchsRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeRdsVSwitchsRequest) SetResourceOwnerAccount(v string) *DescribeRdsVSwitchsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeRdsVSwitchsRequest) SetResourceOwnerId(v int64) *DescribeRdsVSwitchsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeRdsVSwitchsRequest) SetSecurityToken(v string) *DescribeRdsVSwitchsRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribeRdsVSwitchsRequest) SetVpcId(v string) *DescribeRdsVSwitchsRequest {
	s.VpcId = &v
	return s
}

func (s *DescribeRdsVSwitchsRequest) SetZoneId(v string) *DescribeRdsVSwitchsRequest {
	s.ZoneId = &v
	return s
}

type DescribeRdsVSwitchsResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// B0BA251D-6854-5A99-A964-3C**********
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Details of the vSwitches.
	VSwitches *DescribeRdsVSwitchsResponseBodyVSwitches `json:"VSwitches,omitempty" xml:"VSwitches,omitempty" type:"Struct"`
}

func (s DescribeRdsVSwitchsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeRdsVSwitchsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeRdsVSwitchsResponseBody) SetRequestId(v string) *DescribeRdsVSwitchsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeRdsVSwitchsResponseBody) SetVSwitches(v *DescribeRdsVSwitchsResponseBodyVSwitches) *DescribeRdsVSwitchsResponseBody {
	s.VSwitches = v
	return s
}

type DescribeRdsVSwitchsResponseBodyVSwitches struct {
	// Details of the vSwitch.
	VSwitch []*DescribeRdsVSwitchsResponseBodyVSwitchesVSwitch `json:"VSwitch,omitempty" xml:"VSwitch,omitempty" type:"Repeated"`
}

func (s DescribeRdsVSwitchsResponseBodyVSwitches) String() string {
	return tea.Prettify(s)
}

func (s DescribeRdsVSwitchsResponseBodyVSwitches) GoString() string {
	return s.String()
}

func (s *DescribeRdsVSwitchsResponseBodyVSwitches) SetVSwitch(v []*DescribeRdsVSwitchsResponseBodyVSwitchesVSwitch) *DescribeRdsVSwitchsResponseBodyVSwitches {
	s.VSwitch = v
	return s
}

type DescribeRdsVSwitchsResponseBodyVSwitchesVSwitch struct {
	// An invalid parameter. It is no longer returned when you call this operation.
	//
	// example:
	//
	// null
	AliUid *string `json:"AliUid,omitempty" xml:"AliUid,omitempty"`
	// An invalid parameter. It is no longer returned when you call this operation.
	//
	// example:
	//
	// null
	Bid *string `json:"Bid,omitempty" xml:"Bid,omitempty"`
	// The CIDR block of the vSwitch.
	//
	// example:
	//
	// 192.**.**.0/24
	CidrBlock *string `json:"CidrBlock,omitempty" xml:"CidrBlock,omitempty"`
	// An invalid parameter. It is no longer returned when you call this operation.
	//
	// example:
	//
	// null
	GmtCreate *string `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	// An invalid parameter. It is no longer returned when you call this operation.
	//
	// example:
	//
	// null
	GmtModified *string `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	// Indicates whether the vSwitch is the default vSwitch. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// false
	IsDefault *bool `json:"IsDefault,omitempty" xml:"IsDefault,omitempty"`
	// The ID of the zone.
	//
	// example:
	//
	// cn-hangzhou-h
	IzNo *string `json:"IzNo,omitempty" xml:"IzNo,omitempty"`
	// An invalid parameter. It is no longer returned when you call this operation.
	//
	// example:
	//
	// null
	RegionNo *string `json:"RegionNo,omitempty" xml:"RegionNo,omitempty"`
	// The state of the vSwitch. If **Available*	- is returned, the vSwitch is available.
	//
	// example:
	//
	// Available
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The ID of the vSwitch.
	//
	// example:
	//
	// vsw-bp*******************
	VSwitchId *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	// The name of the vSwitch.
	//
	// example:
	//
	// vsw-name
	VSwitchName *string `json:"VSwitchName,omitempty" xml:"VSwitchName,omitempty"`
}

func (s DescribeRdsVSwitchsResponseBodyVSwitchesVSwitch) String() string {
	return tea.Prettify(s)
}

func (s DescribeRdsVSwitchsResponseBodyVSwitchesVSwitch) GoString() string {
	return s.String()
}

func (s *DescribeRdsVSwitchsResponseBodyVSwitchesVSwitch) SetAliUid(v string) *DescribeRdsVSwitchsResponseBodyVSwitchesVSwitch {
	s.AliUid = &v
	return s
}

func (s *DescribeRdsVSwitchsResponseBodyVSwitchesVSwitch) SetBid(v string) *DescribeRdsVSwitchsResponseBodyVSwitchesVSwitch {
	s.Bid = &v
	return s
}

func (s *DescribeRdsVSwitchsResponseBodyVSwitchesVSwitch) SetCidrBlock(v string) *DescribeRdsVSwitchsResponseBodyVSwitchesVSwitch {
	s.CidrBlock = &v
	return s
}

func (s *DescribeRdsVSwitchsResponseBodyVSwitchesVSwitch) SetGmtCreate(v string) *DescribeRdsVSwitchsResponseBodyVSwitchesVSwitch {
	s.GmtCreate = &v
	return s
}

func (s *DescribeRdsVSwitchsResponseBodyVSwitchesVSwitch) SetGmtModified(v string) *DescribeRdsVSwitchsResponseBodyVSwitchesVSwitch {
	s.GmtModified = &v
	return s
}

func (s *DescribeRdsVSwitchsResponseBodyVSwitchesVSwitch) SetIsDefault(v bool) *DescribeRdsVSwitchsResponseBodyVSwitchesVSwitch {
	s.IsDefault = &v
	return s
}

func (s *DescribeRdsVSwitchsResponseBodyVSwitchesVSwitch) SetIzNo(v string) *DescribeRdsVSwitchsResponseBodyVSwitchesVSwitch {
	s.IzNo = &v
	return s
}

func (s *DescribeRdsVSwitchsResponseBodyVSwitchesVSwitch) SetRegionNo(v string) *DescribeRdsVSwitchsResponseBodyVSwitchesVSwitch {
	s.RegionNo = &v
	return s
}

func (s *DescribeRdsVSwitchsResponseBodyVSwitchesVSwitch) SetStatus(v string) *DescribeRdsVSwitchsResponseBodyVSwitchesVSwitch {
	s.Status = &v
	return s
}

func (s *DescribeRdsVSwitchsResponseBodyVSwitchesVSwitch) SetVSwitchId(v string) *DescribeRdsVSwitchsResponseBodyVSwitchesVSwitch {
	s.VSwitchId = &v
	return s
}

func (s *DescribeRdsVSwitchsResponseBodyVSwitchesVSwitch) SetVSwitchName(v string) *DescribeRdsVSwitchsResponseBodyVSwitchesVSwitch {
	s.VSwitchName = &v
	return s
}

type DescribeRdsVSwitchsResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeRdsVSwitchsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeRdsVSwitchsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeRdsVSwitchsResponse) GoString() string {
	return s.String()
}

func (s *DescribeRdsVSwitchsResponse) SetHeaders(v map[string]*string) *DescribeRdsVSwitchsResponse {
	s.Headers = v
	return s
}

func (s *DescribeRdsVSwitchsResponse) SetStatusCode(v int32) *DescribeRdsVSwitchsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeRdsVSwitchsResponse) SetBody(v *DescribeRdsVSwitchsResponseBody) *DescribeRdsVSwitchsResponse {
	s.Body = v
	return s
}

type DescribeRdsVpcsRequest struct {
	OwnerAccount *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The ID of the region.
	//
	// >  You can call the [DescribeRegions](https://help.aliyun.com/document_detail/86912.html) operation to query the most recent region list.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// This parameter is no longer used.
	//
	// example:
	//
	// rg-bp67acfmxazb4p****
	ResourceGroupId      *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SecurityToken        *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The ID of the zone.
	//
	// example:
	//
	// cn-hangzhou-h
	ZoneId *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s DescribeRdsVpcsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeRdsVpcsRequest) GoString() string {
	return s.String()
}

func (s *DescribeRdsVpcsRequest) SetOwnerAccount(v string) *DescribeRdsVpcsRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeRdsVpcsRequest) SetOwnerId(v int64) *DescribeRdsVpcsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeRdsVpcsRequest) SetRegionId(v string) *DescribeRdsVpcsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeRdsVpcsRequest) SetResourceGroupId(v string) *DescribeRdsVpcsRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeRdsVpcsRequest) SetResourceOwnerAccount(v string) *DescribeRdsVpcsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeRdsVpcsRequest) SetResourceOwnerId(v int64) *DescribeRdsVpcsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeRdsVpcsRequest) SetSecurityToken(v string) *DescribeRdsVpcsRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribeRdsVpcsRequest) SetZoneId(v string) *DescribeRdsVpcsRequest {
	s.ZoneId = &v
	return s
}

type DescribeRdsVpcsResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// 53924AF0-1628-5AA2-9C95-D4**********
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The queried VPCs.
	Vpcs *DescribeRdsVpcsResponseBodyVpcs `json:"Vpcs,omitempty" xml:"Vpcs,omitempty" type:"Struct"`
}

func (s DescribeRdsVpcsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeRdsVpcsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeRdsVpcsResponseBody) SetRequestId(v string) *DescribeRdsVpcsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeRdsVpcsResponseBody) SetVpcs(v *DescribeRdsVpcsResponseBodyVpcs) *DescribeRdsVpcsResponseBody {
	s.Vpcs = v
	return s
}

type DescribeRdsVpcsResponseBodyVpcs struct {
	// The queried VPC.
	Vpc []*DescribeRdsVpcsResponseBodyVpcsVpc `json:"Vpc,omitempty" xml:"Vpc,omitempty" type:"Repeated"`
}

func (s DescribeRdsVpcsResponseBodyVpcs) String() string {
	return tea.Prettify(s)
}

func (s DescribeRdsVpcsResponseBodyVpcs) GoString() string {
	return s.String()
}

func (s *DescribeRdsVpcsResponseBodyVpcs) SetVpc(v []*DescribeRdsVpcsResponseBodyVpcsVpc) *DescribeRdsVpcsResponseBodyVpcs {
	s.Vpc = v
	return s
}

type DescribeRdsVpcsResponseBodyVpcsVpc struct {
	// An invalid parameter. It is no longer returned when you call this operation.
	//
	// example:
	//
	// null
	AliUid *string `json:"AliUid,omitempty" xml:"AliUid,omitempty"`
	// An invalid parameter. It is no longer returned when you call this operation.
	//
	// example:
	//
	// null
	Bid *string `json:"Bid,omitempty" xml:"Bid,omitempty"`
	// The CIDR block of the VPC.
	//
	// example:
	//
	// 10.**.**.0/8
	CidrBlock *string `json:"CidrBlock,omitempty" xml:"CidrBlock,omitempty"`
	// An invalid parameter. It is no longer returned when you call this operation.
	//
	// example:
	//
	// null
	GmtCreate *string `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	// An invalid parameter. It is no longer returned when you call this operation.
	//
	// example:
	//
	// null
	GmtModified *string `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	// Indicates whether the VPC is the default VPC. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	IsDefault *bool `json:"IsDefault,omitempty" xml:"IsDefault,omitempty"`
	// The region ID of the instance.
	//
	// example:
	//
	// cn-hangzhou
	RegionNo *string `json:"RegionNo,omitempty" xml:"RegionNo,omitempty"`
	// The state of the VPC. If **Available*	- is returned, the VPC is available.
	//
	// example:
	//
	// Available
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The queried vSwitches.
	VSwitchs []*DescribeRdsVpcsResponseBodyVpcsVpcVSwitchs `json:"VSwitchs,omitempty" xml:"VSwitchs,omitempty" type:"Repeated"`
	// The VPC ID.
	//
	// example:
	//
	// vpc-bp*******************
	VpcId *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	// The name of the VPC.
	//
	// example:
	//
	// vpc-name
	VpcName *string `json:"VpcName,omitempty" xml:"VpcName,omitempty"`
}

func (s DescribeRdsVpcsResponseBodyVpcsVpc) String() string {
	return tea.Prettify(s)
}

func (s DescribeRdsVpcsResponseBodyVpcsVpc) GoString() string {
	return s.String()
}

func (s *DescribeRdsVpcsResponseBodyVpcsVpc) SetAliUid(v string) *DescribeRdsVpcsResponseBodyVpcsVpc {
	s.AliUid = &v
	return s
}

func (s *DescribeRdsVpcsResponseBodyVpcsVpc) SetBid(v string) *DescribeRdsVpcsResponseBodyVpcsVpc {
	s.Bid = &v
	return s
}

func (s *DescribeRdsVpcsResponseBodyVpcsVpc) SetCidrBlock(v string) *DescribeRdsVpcsResponseBodyVpcsVpc {
	s.CidrBlock = &v
	return s
}

func (s *DescribeRdsVpcsResponseBodyVpcsVpc) SetGmtCreate(v string) *DescribeRdsVpcsResponseBodyVpcsVpc {
	s.GmtCreate = &v
	return s
}

func (s *DescribeRdsVpcsResponseBodyVpcsVpc) SetGmtModified(v string) *DescribeRdsVpcsResponseBodyVpcsVpc {
	s.GmtModified = &v
	return s
}

func (s *DescribeRdsVpcsResponseBodyVpcsVpc) SetIsDefault(v bool) *DescribeRdsVpcsResponseBodyVpcsVpc {
	s.IsDefault = &v
	return s
}

func (s *DescribeRdsVpcsResponseBodyVpcsVpc) SetRegionNo(v string) *DescribeRdsVpcsResponseBodyVpcsVpc {
	s.RegionNo = &v
	return s
}

func (s *DescribeRdsVpcsResponseBodyVpcsVpc) SetStatus(v string) *DescribeRdsVpcsResponseBodyVpcsVpc {
	s.Status = &v
	return s
}

func (s *DescribeRdsVpcsResponseBodyVpcsVpc) SetVSwitchs(v []*DescribeRdsVpcsResponseBodyVpcsVpcVSwitchs) *DescribeRdsVpcsResponseBodyVpcsVpc {
	s.VSwitchs = v
	return s
}

func (s *DescribeRdsVpcsResponseBodyVpcsVpc) SetVpcId(v string) *DescribeRdsVpcsResponseBodyVpcsVpc {
	s.VpcId = &v
	return s
}

func (s *DescribeRdsVpcsResponseBodyVpcsVpc) SetVpcName(v string) *DescribeRdsVpcsResponseBodyVpcsVpc {
	s.VpcName = &v
	return s
}

type DescribeRdsVpcsResponseBodyVpcsVpcVSwitchs struct {
	// The CIDR block of the vSwitch.
	//
	// example:
	//
	// 10.**.**.0/24
	CidrBlock *string `json:"CidrBlock,omitempty" xml:"CidrBlock,omitempty"`
	// An invalid parameter. It is no longer returned when you call this operation.
	//
	// example:
	//
	// null
	GmtCreate *string `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	// An invalid parameter. It is no longer returned when you call this operation.
	//
	// example:
	//
	// null
	GmtModified *string `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	// Indicates whether the vSwitch is the default vSwitch. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	IsDefault *bool `json:"IsDefault,omitempty" xml:"IsDefault,omitempty"`
	// The ID of the zone to which the vSwitch belongs.
	//
	// example:
	//
	// cn-hangzhou-i
	IzNo *string `json:"IzNo,omitempty" xml:"IzNo,omitempty"`
	// The state of the vSwitch. If **Available*	- is returned, the vSwitch is available.
	//
	// example:
	//
	// Available
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The vSwitch ID.
	//
	// example:
	//
	// vsw-bp*******************
	VSwitchId *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	// The name of the vSwitch.
	//
	// example:
	//
	// vsw-name
	VSwitchName *string `json:"VSwitchName,omitempty" xml:"VSwitchName,omitempty"`
}

func (s DescribeRdsVpcsResponseBodyVpcsVpcVSwitchs) String() string {
	return tea.Prettify(s)
}

func (s DescribeRdsVpcsResponseBodyVpcsVpcVSwitchs) GoString() string {
	return s.String()
}

func (s *DescribeRdsVpcsResponseBodyVpcsVpcVSwitchs) SetCidrBlock(v string) *DescribeRdsVpcsResponseBodyVpcsVpcVSwitchs {
	s.CidrBlock = &v
	return s
}

func (s *DescribeRdsVpcsResponseBodyVpcsVpcVSwitchs) SetGmtCreate(v string) *DescribeRdsVpcsResponseBodyVpcsVpcVSwitchs {
	s.GmtCreate = &v
	return s
}

func (s *DescribeRdsVpcsResponseBodyVpcsVpcVSwitchs) SetGmtModified(v string) *DescribeRdsVpcsResponseBodyVpcsVpcVSwitchs {
	s.GmtModified = &v
	return s
}

func (s *DescribeRdsVpcsResponseBodyVpcsVpcVSwitchs) SetIsDefault(v bool) *DescribeRdsVpcsResponseBodyVpcsVpcVSwitchs {
	s.IsDefault = &v
	return s
}

func (s *DescribeRdsVpcsResponseBodyVpcsVpcVSwitchs) SetIzNo(v string) *DescribeRdsVpcsResponseBodyVpcsVpcVSwitchs {
	s.IzNo = &v
	return s
}

func (s *DescribeRdsVpcsResponseBodyVpcsVpcVSwitchs) SetStatus(v string) *DescribeRdsVpcsResponseBodyVpcsVpcVSwitchs {
	s.Status = &v
	return s
}

func (s *DescribeRdsVpcsResponseBodyVpcsVpcVSwitchs) SetVSwitchId(v string) *DescribeRdsVpcsResponseBodyVpcsVpcVSwitchs {
	s.VSwitchId = &v
	return s
}

func (s *DescribeRdsVpcsResponseBodyVpcsVpcVSwitchs) SetVSwitchName(v string) *DescribeRdsVpcsResponseBodyVpcsVpcVSwitchs {
	s.VSwitchName = &v
	return s
}

type DescribeRdsVpcsResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeRdsVpcsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeRdsVpcsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeRdsVpcsResponse) GoString() string {
	return s.String()
}

func (s *DescribeRdsVpcsResponse) SetHeaders(v map[string]*string) *DescribeRdsVpcsResponse {
	s.Headers = v
	return s
}

func (s *DescribeRdsVpcsResponse) SetStatusCode(v int32) *DescribeRdsVpcsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeRdsVpcsResponse) SetBody(v *DescribeRdsVpcsResponseBody) *DescribeRdsVpcsResponse {
	s.Body = v
	return s
}

type DescribeRegionsRequest struct {
	// The ID of the region.
	//
	// >  You can call the [DescribeRegions](https://help.aliyun.com/document_detail/86912.html) operation to query the most recent region list.
	//
	// example:
	//
	// cn-hangzhou
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
}

func (s DescribeRegionsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeRegionsRequest) GoString() string {
	return s.String()
}

func (s *DescribeRegionsRequest) SetRegion(v string) *DescribeRegionsRequest {
	s.Region = &v
	return s
}

type DescribeRegionsResponseBody struct {
	// Details of the regions.
	Regions *DescribeRegionsResponseBodyRegions `json:"Regions,omitempty" xml:"Regions,omitempty" type:"Struct"`
	// The ID of the request.
	//
	// example:
	//
	// FF8EB261-5447-4B1B-9F14-294CEA008A9F
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeRegionsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeRegionsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeRegionsResponseBody) SetRegions(v *DescribeRegionsResponseBodyRegions) *DescribeRegionsResponseBody {
	s.Regions = v
	return s
}

func (s *DescribeRegionsResponseBody) SetRequestId(v string) *DescribeRegionsResponseBody {
	s.RequestId = &v
	return s
}

type DescribeRegionsResponseBodyRegions struct {
	Region []*DescribeRegionsResponseBodyRegionsRegion `json:"Region,omitempty" xml:"Region,omitempty" type:"Repeated"`
}

func (s DescribeRegionsResponseBodyRegions) String() string {
	return tea.Prettify(s)
}

func (s DescribeRegionsResponseBodyRegions) GoString() string {
	return s.String()
}

func (s *DescribeRegionsResponseBodyRegions) SetRegion(v []*DescribeRegionsResponseBodyRegionsRegion) *DescribeRegionsResponseBodyRegions {
	s.Region = v
	return s
}

type DescribeRegionsResponseBodyRegionsRegion struct {
	// The ID of the region.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// Details of the zones.
	Zones *DescribeRegionsResponseBodyRegionsRegionZones `json:"Zones,omitempty" xml:"Zones,omitempty" type:"Struct"`
}

func (s DescribeRegionsResponseBodyRegionsRegion) String() string {
	return tea.Prettify(s)
}

func (s DescribeRegionsResponseBodyRegionsRegion) GoString() string {
	return s.String()
}

func (s *DescribeRegionsResponseBodyRegionsRegion) SetRegionId(v string) *DescribeRegionsResponseBodyRegionsRegion {
	s.RegionId = &v
	return s
}

func (s *DescribeRegionsResponseBodyRegionsRegion) SetZones(v *DescribeRegionsResponseBodyRegionsRegionZones) *DescribeRegionsResponseBodyRegionsRegion {
	s.Zones = v
	return s
}

type DescribeRegionsResponseBodyRegionsRegionZones struct {
	Zone []*DescribeRegionsResponseBodyRegionsRegionZonesZone `json:"Zone,omitempty" xml:"Zone,omitempty" type:"Repeated"`
}

func (s DescribeRegionsResponseBodyRegionsRegionZones) String() string {
	return tea.Prettify(s)
}

func (s DescribeRegionsResponseBodyRegionsRegionZones) GoString() string {
	return s.String()
}

func (s *DescribeRegionsResponseBodyRegionsRegionZones) SetZone(v []*DescribeRegionsResponseBodyRegionsRegionZonesZone) *DescribeRegionsResponseBodyRegionsRegionZones {
	s.Zone = v
	return s
}

type DescribeRegionsResponseBodyRegionsRegionZonesZone struct {
	// Indicates whether Virtual Private Cloud (VPC) is available.
	//
	// 	- **true**: VPC is available.
	//
	// 	- **false**: VPC is unavailable.
	//
	// example:
	//
	// true
	VpcEnabled *bool `json:"VpcEnabled,omitempty" xml:"VpcEnabled,omitempty"`
	// The ID of the zone.
	//
	// example:
	//
	// cn-hangzhou-c
	ZoneId *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s DescribeRegionsResponseBodyRegionsRegionZonesZone) String() string {
	return tea.Prettify(s)
}

func (s DescribeRegionsResponseBodyRegionsRegionZonesZone) GoString() string {
	return s.String()
}

func (s *DescribeRegionsResponseBodyRegionsRegionZonesZone) SetVpcEnabled(v bool) *DescribeRegionsResponseBodyRegionsRegionZonesZone {
	s.VpcEnabled = &v
	return s
}

func (s *DescribeRegionsResponseBodyRegionsRegionZonesZone) SetZoneId(v string) *DescribeRegionsResponseBodyRegionsRegionZonesZone {
	s.ZoneId = &v
	return s
}

type DescribeRegionsResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeRegionsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeRegionsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeRegionsResponse) GoString() string {
	return s.String()
}

func (s *DescribeRegionsResponse) SetHeaders(v map[string]*string) *DescribeRegionsResponse {
	s.Headers = v
	return s
}

func (s *DescribeRegionsResponse) SetStatusCode(v int32) *DescribeRegionsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeRegionsResponse) SetBody(v *DescribeRegionsResponseBody) *DescribeRegionsResponse {
	s.Body = v
	return s
}

type DescribeRolesRequest struct {
	// The instance ID.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s DescribeRolesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeRolesRequest) GoString() string {
	return s.String()
}

func (s *DescribeRolesRequest) SetDBInstanceId(v string) *DescribeRolesRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeRolesRequest) SetOwnerId(v int64) *DescribeRolesRequest {
	s.OwnerId = &v
	return s
}

type DescribeRolesResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The roles.
	RoleList *DescribeRolesResponseBodyRoleList `json:"RoleList,omitempty" xml:"RoleList,omitempty" type:"Struct"`
}

func (s DescribeRolesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeRolesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeRolesResponseBody) SetRequestId(v string) *DescribeRolesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeRolesResponseBody) SetRoleList(v *DescribeRolesResponseBodyRoleList) *DescribeRolesResponseBody {
	s.RoleList = v
	return s
}

type DescribeRolesResponseBodyRoleList struct {
	Role []*string `json:"Role,omitempty" xml:"Role,omitempty" type:"Repeated"`
}

func (s DescribeRolesResponseBodyRoleList) String() string {
	return tea.Prettify(s)
}

func (s DescribeRolesResponseBodyRoleList) GoString() string {
	return s.String()
}

func (s *DescribeRolesResponseBodyRoleList) SetRole(v []*string) *DescribeRolesResponseBodyRoleList {
	s.Role = v
	return s
}

type DescribeRolesResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeRolesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeRolesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeRolesResponse) GoString() string {
	return s.String()
}

func (s *DescribeRolesResponse) SetHeaders(v map[string]*string) *DescribeRolesResponse {
	s.Headers = v
	return s
}

func (s *DescribeRolesResponse) SetStatusCode(v int32) *DescribeRolesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeRolesResponse) SetBody(v *DescribeRolesResponseBody) *DescribeRolesResponse {
	s.Body = v
	return s
}

type DescribeSQLLogCountRequest struct {
	// The instance ID.
	//
	// > You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The name of the database.
	//
	// example:
	//
	// testdb
	Database *string `json:"Database,omitempty" xml:"Database,omitempty"`
	// The end of the time range to query. Specify the time in the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm*Z format. The time must be in UTC.
	//
	// > The end time must be later than the start time. The maximum time range that can be specified is seven days.
	//
	// This parameter is required.
	//
	// example:
	//
	// 2020-12-14T11:22Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The execution duration of the SQL statement. Unit: seconds.
	//
	// example:
	//
	// 100
	ExecuteCost *string `json:"ExecuteCost,omitempty" xml:"ExecuteCost,omitempty"`
	// The execution status of the query. Valid values:
	//
	// 	- 1: successful.
	//
	// 	- 0: failed.
	//
	// 	- 0,1 or 1,0: all.
	//
	// example:
	//
	// success
	ExecuteState *string `json:"ExecuteState,omitempty" xml:"ExecuteState,omitempty"`
	// The maximum amount of time consumed by a slow query. Unit: seconds. Minimum value: 0.
	//
	// example:
	//
	// 1000
	MaxExecuteCost *string `json:"MaxExecuteCost,omitempty" xml:"MaxExecuteCost,omitempty"`
	// The minimum amount of time consumed by a slow query. Unit: seconds. Minimum value: 0.
	//
	// example:
	//
	// 10
	MinExecuteCost *string `json:"MinExecuteCost,omitempty" xml:"MinExecuteCost,omitempty"`
	// The type of the query language. Valid values:
	//
	// 	- **DQL**
	//
	// 	- **DML**
	//
	// 	- **DDL**
	//
	// 	- **DCL**
	//
	// 	- **TCL**
	//
	// example:
	//
	// DQL
	OperationClass *string `json:"OperationClass,omitempty" xml:"OperationClass,omitempty"`
	// The type of the SQL statement.
	//
	// >
	//
	// 	- If you specify **OperationClass**, the value of **OperationType*	- must be of the corresponding query language. For example, if you set **OperationClass*	- to **DQL**, the value of **OperationType*	- must be a **DQL*	- statement such as **SELECT**.
	//
	// 	- If you leave **OperationClass*	- empty, the value of **OperationType*	- can be an SQL statement of any query language.
	//
	// 	- If you leave **OperationClass*	- and **OperationType*	- empty, all types of SQL statements are returned.
	//
	// example:
	//
	// SELECT
	OperationType *string `json:"OperationType,omitempty" xml:"OperationType,omitempty"`
	// The keywords that are used to query audit logs.
	//
	// example:
	//
	// test
	QueryKeywords *string `json:"QueryKeywords,omitempty" xml:"QueryKeywords,omitempty"`
	// The source IP address.
	//
	// example:
	//
	// 10.**.**.13
	SourceIP *string `json:"SourceIP,omitempty" xml:"SourceIP,omitempty"`
	// The beginning of the time range to query. Specify the time in the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm*Z format. The time must be in UTC.
	//
	// This parameter is required.
	//
	// example:
	//
	// 2020-12-12T11:22Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The name of the database account that is used to connect to the database.
	//
	// example:
	//
	// adbpgadmin
	User *string `json:"User,omitempty" xml:"User,omitempty"`
}

func (s DescribeSQLLogCountRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSQLLogCountRequest) GoString() string {
	return s.String()
}

func (s *DescribeSQLLogCountRequest) SetDBInstanceId(v string) *DescribeSQLLogCountRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeSQLLogCountRequest) SetDatabase(v string) *DescribeSQLLogCountRequest {
	s.Database = &v
	return s
}

func (s *DescribeSQLLogCountRequest) SetEndTime(v string) *DescribeSQLLogCountRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeSQLLogCountRequest) SetExecuteCost(v string) *DescribeSQLLogCountRequest {
	s.ExecuteCost = &v
	return s
}

func (s *DescribeSQLLogCountRequest) SetExecuteState(v string) *DescribeSQLLogCountRequest {
	s.ExecuteState = &v
	return s
}

func (s *DescribeSQLLogCountRequest) SetMaxExecuteCost(v string) *DescribeSQLLogCountRequest {
	s.MaxExecuteCost = &v
	return s
}

func (s *DescribeSQLLogCountRequest) SetMinExecuteCost(v string) *DescribeSQLLogCountRequest {
	s.MinExecuteCost = &v
	return s
}

func (s *DescribeSQLLogCountRequest) SetOperationClass(v string) *DescribeSQLLogCountRequest {
	s.OperationClass = &v
	return s
}

func (s *DescribeSQLLogCountRequest) SetOperationType(v string) *DescribeSQLLogCountRequest {
	s.OperationType = &v
	return s
}

func (s *DescribeSQLLogCountRequest) SetQueryKeywords(v string) *DescribeSQLLogCountRequest {
	s.QueryKeywords = &v
	return s
}

func (s *DescribeSQLLogCountRequest) SetSourceIP(v string) *DescribeSQLLogCountRequest {
	s.SourceIP = &v
	return s
}

func (s *DescribeSQLLogCountRequest) SetStartTime(v string) *DescribeSQLLogCountRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeSQLLogCountRequest) SetUser(v string) *DescribeSQLLogCountRequest {
	s.User = &v
	return s
}

type DescribeSQLLogCountResponseBody struct {
	// The instance ID.
	//
	// example:
	//
	// gp-xxxxxxxx
	DBClusterId *string `json:"DBClusterId,omitempty" xml:"DBClusterId,omitempty"`
	// The end time of the query.
	//
	// example:
	//
	// 2020-12-14T11:22Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The name of the instance.
	Items []*DescribeSQLLogCountResponseBodyItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Repeated"`
	// The request ID.
	//
	// example:
	//
	// 7565770E-7C45-462D-BA4A-8A**********
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The start time of the query.
	//
	// example:
	//
	// 2020-12-12T11:22Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeSQLLogCountResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSQLLogCountResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSQLLogCountResponseBody) SetDBClusterId(v string) *DescribeSQLLogCountResponseBody {
	s.DBClusterId = &v
	return s
}

func (s *DescribeSQLLogCountResponseBody) SetEndTime(v string) *DescribeSQLLogCountResponseBody {
	s.EndTime = &v
	return s
}

func (s *DescribeSQLLogCountResponseBody) SetItems(v []*DescribeSQLLogCountResponseBodyItems) *DescribeSQLLogCountResponseBody {
	s.Items = v
	return s
}

func (s *DescribeSQLLogCountResponseBody) SetRequestId(v string) *DescribeSQLLogCountResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSQLLogCountResponseBody) SetStartTime(v string) *DescribeSQLLogCountResponseBody {
	s.StartTime = &v
	return s
}

type DescribeSQLLogCountResponseBodyItems struct {
	// The name of the table.
	//
	// example:
	//
	// gp-xxxxxxxx
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// Details of the audit logs.
	Series []*DescribeSQLLogCountResponseBodyItemsSeries `json:"Series,omitempty" xml:"Series,omitempty" type:"Repeated"`
}

func (s DescribeSQLLogCountResponseBodyItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeSQLLogCountResponseBodyItems) GoString() string {
	return s.String()
}

func (s *DescribeSQLLogCountResponseBodyItems) SetName(v string) *DescribeSQLLogCountResponseBodyItems {
	s.Name = &v
	return s
}

func (s *DescribeSQLLogCountResponseBodyItems) SetSeries(v []*DescribeSQLLogCountResponseBodyItemsSeries) *DescribeSQLLogCountResponseBodyItems {
	s.Series = v
	return s
}

type DescribeSQLLogCountResponseBodyItemsSeries struct {
	// Details of the audit logs.
	Values []*DescribeSQLLogCountResponseBodyItemsSeriesValues `json:"Values,omitempty" xml:"Values,omitempty" type:"Repeated"`
}

func (s DescribeSQLLogCountResponseBodyItemsSeries) String() string {
	return tea.Prettify(s)
}

func (s DescribeSQLLogCountResponseBodyItemsSeries) GoString() string {
	return s.String()
}

func (s *DescribeSQLLogCountResponseBodyItemsSeries) SetValues(v []*DescribeSQLLogCountResponseBodyItemsSeriesValues) *DescribeSQLLogCountResponseBodyItemsSeries {
	s.Values = v
	return s
}

type DescribeSQLLogCountResponseBodyItemsSeriesValues struct {
	// The time when the audit logs were generated and the number of the audit logs.
	Point []*string `json:"Point,omitempty" xml:"Point,omitempty" type:"Repeated"`
}

func (s DescribeSQLLogCountResponseBodyItemsSeriesValues) String() string {
	return tea.Prettify(s)
}

func (s DescribeSQLLogCountResponseBodyItemsSeriesValues) GoString() string {
	return s.String()
}

func (s *DescribeSQLLogCountResponseBodyItemsSeriesValues) SetPoint(v []*string) *DescribeSQLLogCountResponseBodyItemsSeriesValues {
	s.Point = v
	return s
}

type DescribeSQLLogCountResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeSQLLogCountResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeSQLLogCountResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSQLLogCountResponse) GoString() string {
	return s.String()
}

func (s *DescribeSQLLogCountResponse) SetHeaders(v map[string]*string) *DescribeSQLLogCountResponse {
	s.Headers = v
	return s
}

func (s *DescribeSQLLogCountResponse) SetStatusCode(v int32) *DescribeSQLLogCountResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSQLLogCountResponse) SetBody(v *DescribeSQLLogCountResponseBody) *DescribeSQLLogCountResponse {
	s.Body = v
	return s
}

type DescribeSQLLogsRequest struct {
	// The instance ID.
	//
	// > You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the IDs of all AnalyticDB for PostgreSQL instances within a region.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The name of the database.
	//
	// example:
	//
	// adbpgadmin
	Database *string `json:"Database,omitempty" xml:"Database,omitempty"`
	// The end of the time range to query. Specify the time in the ISO 8601 standard in the *yyyy-MM-ddTHH:mmZ	- format. The time must be in UTC.
	//
	// > The end time must be later than the start time. The maximum time range that can be specified is seven days.
	//
	// This parameter is required.
	//
	// example:
	//
	// 2021-03-17T06:30Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The execution duration of the SQL statement. Unit: seconds.
	//
	// example:
	//
	// 1
	ExecuteCost *string `json:"ExecuteCost,omitempty" xml:"ExecuteCost,omitempty"`
	// The execution status of the SQL statement. Valid values:
	//
	// 	- **1**: successful.
	//
	// 	- **0**: failed.
	//
	// example:
	//
	// success
	ExecuteState *string `json:"ExecuteState,omitempty" xml:"ExecuteState,omitempty"`
	// The maximum amount of time consumed by a slow query. Unit: seconds. Minimum value: 0.
	//
	// example:
	//
	// 1000
	MaxExecuteCost *string `json:"MaxExecuteCost,omitempty" xml:"MaxExecuteCost,omitempty"`
	// The minimum amount of time consumed by a slow query. Unit: seconds. Minimum value: 0.
	//
	// example:
	//
	// 1
	MinExecuteCost *string `json:"MinExecuteCost,omitempty" xml:"MinExecuteCost,omitempty"`
	// The type of the query language. Valid values:
	//
	// 	- **DQL**
	//
	// 	- **DML**
	//
	// 	- **DDL**
	//
	// 	- **DCL**
	//
	// 	- **TCL**
	//
	// example:
	//
	// DQL
	OperationClass *string `json:"OperationClass,omitempty" xml:"OperationClass,omitempty"`
	// The type of the SQL statement.
	//
	// >
	//
	// 	- If **OperationClass*	- is specified, the value of **OperationType*	- must belong to the corresponding query language. For example, if **OperationClass*	- is set to **DQL**, the value of **OperationType*	- must be a **DQL*	- statement such as **SELECT**.
	//
	// 	- If **OperationClass*	- is not specified, the value of **OperationType*	- can be an SQL statement of any query language.
	//
	// 	- If **OperationClass*	- and **OperationType*	- are not specified, all types of SQL statements are returned.
	//
	// example:
	//
	// SELECT
	OperationType *string `json:"OperationType,omitempty" xml:"OperationType,omitempty"`
	// The page number. Pages start from page 1. Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. Valid values:
	//
	// 	- **30**
	//
	// 	- **50**
	//
	// 	- **100**
	//
	// Default value: **30**.
	//
	// example:
	//
	// 30
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The keywords of the SQL statement.
	//
	// example:
	//
	// select 1
	QueryKeywords *string `json:"QueryKeywords,omitempty" xml:"QueryKeywords,omitempty"`
	// The source IP address.
	//
	// example:
	//
	// 100.**.**.90
	SourceIP *string `json:"SourceIP,omitempty" xml:"SourceIP,omitempty"`
	// The beginning of the time range to query. Specify the time in the ISO 8601 standard in the *yyyy-MM-ddTHH:mmZ	- format. The time must be in UTC.
	//
	// This parameter is required.
	//
	// example:
	//
	// 2021-03-10T06:30Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The name of the database account.
	//
	// example:
	//
	// testadmin
	User *string `json:"User,omitempty" xml:"User,omitempty"`
}

func (s DescribeSQLLogsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSQLLogsRequest) GoString() string {
	return s.String()
}

func (s *DescribeSQLLogsRequest) SetDBInstanceId(v string) *DescribeSQLLogsRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeSQLLogsRequest) SetDatabase(v string) *DescribeSQLLogsRequest {
	s.Database = &v
	return s
}

func (s *DescribeSQLLogsRequest) SetEndTime(v string) *DescribeSQLLogsRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeSQLLogsRequest) SetExecuteCost(v string) *DescribeSQLLogsRequest {
	s.ExecuteCost = &v
	return s
}

func (s *DescribeSQLLogsRequest) SetExecuteState(v string) *DescribeSQLLogsRequest {
	s.ExecuteState = &v
	return s
}

func (s *DescribeSQLLogsRequest) SetMaxExecuteCost(v string) *DescribeSQLLogsRequest {
	s.MaxExecuteCost = &v
	return s
}

func (s *DescribeSQLLogsRequest) SetMinExecuteCost(v string) *DescribeSQLLogsRequest {
	s.MinExecuteCost = &v
	return s
}

func (s *DescribeSQLLogsRequest) SetOperationClass(v string) *DescribeSQLLogsRequest {
	s.OperationClass = &v
	return s
}

func (s *DescribeSQLLogsRequest) SetOperationType(v string) *DescribeSQLLogsRequest {
	s.OperationType = &v
	return s
}

func (s *DescribeSQLLogsRequest) SetPageNumber(v int32) *DescribeSQLLogsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeSQLLogsRequest) SetPageSize(v int32) *DescribeSQLLogsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeSQLLogsRequest) SetQueryKeywords(v string) *DescribeSQLLogsRequest {
	s.QueryKeywords = &v
	return s
}

func (s *DescribeSQLLogsRequest) SetSourceIP(v string) *DescribeSQLLogsRequest {
	s.SourceIP = &v
	return s
}

func (s *DescribeSQLLogsRequest) SetStartTime(v string) *DescribeSQLLogsRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeSQLLogsRequest) SetUser(v string) *DescribeSQLLogsRequest {
	s.User = &v
	return s
}

type DescribeSQLLogsResponseBody struct {
	// The queried SQL execution logs.
	Items []*DescribeSQLLogsResponseBodyItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Repeated"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 1
	PageRecordCount *int32 `json:"PageRecordCount,omitempty" xml:"PageRecordCount,omitempty"`
	// The request ID.
	//
	// example:
	//
	// A7941C94-B92F-46A0-BD3E-2D**********
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeSQLLogsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSQLLogsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSQLLogsResponseBody) SetItems(v []*DescribeSQLLogsResponseBodyItems) *DescribeSQLLogsResponseBody {
	s.Items = v
	return s
}

func (s *DescribeSQLLogsResponseBody) SetPageNumber(v int32) *DescribeSQLLogsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeSQLLogsResponseBody) SetPageRecordCount(v int32) *DescribeSQLLogsResponseBody {
	s.PageRecordCount = &v
	return s
}

func (s *DescribeSQLLogsResponseBody) SetRequestId(v string) *DescribeSQLLogsResponseBody {
	s.RequestId = &v
	return s
}

type DescribeSQLLogsResponseBodyItems struct {
	// The database account that executes the SQL statement.
	//
	// example:
	//
	// testadmin
	AccountName *string `json:"AccountName,omitempty" xml:"AccountName,omitempty"`
	// The name of the database.
	//
	// example:
	//
	// adbpgadmin
	DBName *string `json:"DBName,omitempty" xml:"DBName,omitempty"`
	// The role of the database.
	//
	// example:
	//
	// master
	DBRole *string `json:"DBRole,omitempty" xml:"DBRole,omitempty"`
	// The execution duration of the SQL statement.
	//
	// example:
	//
	// 2
	ExecuteCost *float32 `json:"ExecuteCost,omitempty" xml:"ExecuteCost,omitempty"`
	// The execution status of the SQL statement. Valid values:
	//
	// 	- **success**
	//
	// 	- **fail**
	//
	// example:
	//
	// success
	ExecuteState *string `json:"ExecuteState,omitempty" xml:"ExecuteState,omitempty"`
	// The type of the query language.
	//
	// example:
	//
	// DQL
	OperationClass *string `json:"OperationClass,omitempty" xml:"OperationClass,omitempty"`
	// The time when the SQL statement was executed.
	//
	// example:
	//
	// 2021-03-15T17:02:32Z
	OperationExecuteTime *string `json:"OperationExecuteTime,omitempty" xml:"OperationExecuteTime,omitempty"`
	// The type of the SQL statement.
	//
	// example:
	//
	// SELECT
	OperationType *string `json:"OperationType,omitempty" xml:"OperationType,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 1
	ReturnRowCounts *int64 `json:"ReturnRowCounts,omitempty" xml:"ReturnRowCounts,omitempty"`
	// The SQL execution plan.
	//
	// example:
	//
	// ""
	SQLPlan *string `json:"SQLPlan,omitempty" xml:"SQLPlan,omitempty"`
	// The SQL statement.
	//
	// example:
	//
	// select 1
	SQLText *string `json:"SQLText,omitempty" xml:"SQLText,omitempty"`
	// The number of entries scanned.
	//
	// example:
	//
	// 1
	ScanRowCounts *int64 `json:"ScanRowCounts,omitempty" xml:"ScanRowCounts,omitempty"`
	// The source IP address.
	//
	// example:
	//
	// 100.**.**.90
	SourceIP *string `json:"SourceIP,omitempty" xml:"SourceIP,omitempty"`
	// The number of the source port.
	//
	// example:
	//
	// 50514
	SourcePort *int32 `json:"SourcePort,omitempty" xml:"SourcePort,omitempty"`
}

func (s DescribeSQLLogsResponseBodyItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeSQLLogsResponseBodyItems) GoString() string {
	return s.String()
}

func (s *DescribeSQLLogsResponseBodyItems) SetAccountName(v string) *DescribeSQLLogsResponseBodyItems {
	s.AccountName = &v
	return s
}

func (s *DescribeSQLLogsResponseBodyItems) SetDBName(v string) *DescribeSQLLogsResponseBodyItems {
	s.DBName = &v
	return s
}

func (s *DescribeSQLLogsResponseBodyItems) SetDBRole(v string) *DescribeSQLLogsResponseBodyItems {
	s.DBRole = &v
	return s
}

func (s *DescribeSQLLogsResponseBodyItems) SetExecuteCost(v float32) *DescribeSQLLogsResponseBodyItems {
	s.ExecuteCost = &v
	return s
}

func (s *DescribeSQLLogsResponseBodyItems) SetExecuteState(v string) *DescribeSQLLogsResponseBodyItems {
	s.ExecuteState = &v
	return s
}

func (s *DescribeSQLLogsResponseBodyItems) SetOperationClass(v string) *DescribeSQLLogsResponseBodyItems {
	s.OperationClass = &v
	return s
}

func (s *DescribeSQLLogsResponseBodyItems) SetOperationExecuteTime(v string) *DescribeSQLLogsResponseBodyItems {
	s.OperationExecuteTime = &v
	return s
}

func (s *DescribeSQLLogsResponseBodyItems) SetOperationType(v string) *DescribeSQLLogsResponseBodyItems {
	s.OperationType = &v
	return s
}

func (s *DescribeSQLLogsResponseBodyItems) SetReturnRowCounts(v int64) *DescribeSQLLogsResponseBodyItems {
	s.ReturnRowCounts = &v
	return s
}

func (s *DescribeSQLLogsResponseBodyItems) SetSQLPlan(v string) *DescribeSQLLogsResponseBodyItems {
	s.SQLPlan = &v
	return s
}

func (s *DescribeSQLLogsResponseBodyItems) SetSQLText(v string) *DescribeSQLLogsResponseBodyItems {
	s.SQLText = &v
	return s
}

func (s *DescribeSQLLogsResponseBodyItems) SetScanRowCounts(v int64) *DescribeSQLLogsResponseBodyItems {
	s.ScanRowCounts = &v
	return s
}

func (s *DescribeSQLLogsResponseBodyItems) SetSourceIP(v string) *DescribeSQLLogsResponseBodyItems {
	s.SourceIP = &v
	return s
}

func (s *DescribeSQLLogsResponseBodyItems) SetSourcePort(v int32) *DescribeSQLLogsResponseBodyItems {
	s.SourcePort = &v
	return s
}

type DescribeSQLLogsResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeSQLLogsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeSQLLogsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSQLLogsResponse) GoString() string {
	return s.String()
}

func (s *DescribeSQLLogsResponse) SetHeaders(v map[string]*string) *DescribeSQLLogsResponse {
	s.Headers = v
	return s
}

func (s *DescribeSQLLogsResponse) SetStatusCode(v int32) *DescribeSQLLogsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSQLLogsResponse) SetBody(v *DescribeSQLLogsResponseBody) *DescribeSQLLogsResponse {
	s.Body = v
	return s
}

type DescribeSQLLogsV2Request struct {
	// The ID of instance.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query details of all AnalyticDB for PostgreSQL instances in a specific region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The name of the database.
	//
	// example:
	//
	// adbpgadmin
	Database *string `json:"Database,omitempty" xml:"Database,omitempty"`
	// The end of the time range to query. Specify the time in the ISO 8601 standard in the *yyyy-MM-ddTHH:mmZ	- format. The time must be in UTC.
	//
	// >  The end time must be later than the start time. The interval cannot be more than 24 hours.
	//
	// example:
	//
	// 2022-03-17T06:30Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The execution duration of the SQL statement. Unit: seconds.
	//
	// example:
	//
	// 1
	ExecuteCost *string `json:"ExecuteCost,omitempty" xml:"ExecuteCost,omitempty"`
	// The execution status of the SQL statement. Valid values:
	//
	// 	- **1**: successful.
	//
	// 	- **0**: failed.
	//
	// example:
	//
	// success
	ExecuteState *string `json:"ExecuteState,omitempty" xml:"ExecuteState,omitempty"`
	// The maximum amount of time consumed by a slow query. Minimum value: 0. Unit: seconds.
	//
	// example:
	//
	// 1000
	MaxExecuteCost *string `json:"MaxExecuteCost,omitempty" xml:"MaxExecuteCost,omitempty"`
	// The minimum amount of time consumed by a slow query. Minimum value: 0. Unit: seconds.
	//
	// example:
	//
	// 1
	MinExecuteCost *string `json:"MinExecuteCost,omitempty" xml:"MinExecuteCost,omitempty"`
	// The type of the query language. Valid values:
	//
	// 	- **DQL**
	//
	// 	- **DML**
	//
	// 	- **DDL**
	//
	// 	- **DCL**
	//
	// 	- **TCL**
	//
	// example:
	//
	// DQL
	OperationClass *string `json:"OperationClass,omitempty" xml:"OperationClass,omitempty"`
	// The type of the SQL statement.
	//
	// > 	- If the **OperationClass*	- parameter is specified, the **OperationType*	- value must belong to the corresponding query language. For example, if the **OperationClass*	- value is **DQL**, the **OperationType*	- value must be a **DQL*	- SQL statement such as **SELECT**.
	//
	// >	- If the **OperationClass*	- parameter is not specified, the **OperationType*	- value can be an SQL statement of all query languages.
	//
	// >	- If neither of the **OperationClass*	- and **OperationType*	- parameters is specified, all types of SQL statements are returned.
	//
	// example:
	//
	// SELECT
	OperationType *string `json:"OperationType,omitempty" xml:"OperationType,omitempty"`
	// The number of entries to return on each page.
	//
	// example:
	//
	// 10
	PageNumber *string `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of the page to return. The maximum value is 200.
	//
	// example:
	//
	// 1
	PageSize *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The keywords of the SQL statement.
	//
	// example:
	//
	// select 1
	QueryKeywords *string `json:"QueryKeywords,omitempty" xml:"QueryKeywords,omitempty"`
	// The region ID of the instance.
	//
	// > You can call the [DescribeRegions](https://help.aliyun.com/document_detail/86912.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the resource group to which the instance belongs.
	//
	// example:
	//
	// rg-bp67acfmxazb4p****
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	// The source IP address.
	//
	// example:
	//
	// 100.XX.XX.90
	SourceIP *string `json:"SourceIP,omitempty" xml:"SourceIP,omitempty"`
	// The beginning of the time range. Specify the time in the ISO 8601 standard in the *yyyy-MM-ddTHH:mmZ	- format. The time must be in UTC.
	//
	// example:
	//
	// 2022-03-10T06:30Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The name of the database account.
	//
	// example:
	//
	// testadmin
	User *string `json:"User,omitempty" xml:"User,omitempty"`
}

func (s DescribeSQLLogsV2Request) String() string {
	return tea.Prettify(s)
}

func (s DescribeSQLLogsV2Request) GoString() string {
	return s.String()
}

func (s *DescribeSQLLogsV2Request) SetDBInstanceId(v string) *DescribeSQLLogsV2Request {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeSQLLogsV2Request) SetDatabase(v string) *DescribeSQLLogsV2Request {
	s.Database = &v
	return s
}

func (s *DescribeSQLLogsV2Request) SetEndTime(v string) *DescribeSQLLogsV2Request {
	s.EndTime = &v
	return s
}

func (s *DescribeSQLLogsV2Request) SetExecuteCost(v string) *DescribeSQLLogsV2Request {
	s.ExecuteCost = &v
	return s
}

func (s *DescribeSQLLogsV2Request) SetExecuteState(v string) *DescribeSQLLogsV2Request {
	s.ExecuteState = &v
	return s
}

func (s *DescribeSQLLogsV2Request) SetMaxExecuteCost(v string) *DescribeSQLLogsV2Request {
	s.MaxExecuteCost = &v
	return s
}

func (s *DescribeSQLLogsV2Request) SetMinExecuteCost(v string) *DescribeSQLLogsV2Request {
	s.MinExecuteCost = &v
	return s
}

func (s *DescribeSQLLogsV2Request) SetOperationClass(v string) *DescribeSQLLogsV2Request {
	s.OperationClass = &v
	return s
}

func (s *DescribeSQLLogsV2Request) SetOperationType(v string) *DescribeSQLLogsV2Request {
	s.OperationType = &v
	return s
}

func (s *DescribeSQLLogsV2Request) SetPageNumber(v string) *DescribeSQLLogsV2Request {
	s.PageNumber = &v
	return s
}

func (s *DescribeSQLLogsV2Request) SetPageSize(v string) *DescribeSQLLogsV2Request {
	s.PageSize = &v
	return s
}

func (s *DescribeSQLLogsV2Request) SetQueryKeywords(v string) *DescribeSQLLogsV2Request {
	s.QueryKeywords = &v
	return s
}

func (s *DescribeSQLLogsV2Request) SetRegionId(v string) *DescribeSQLLogsV2Request {
	s.RegionId = &v
	return s
}

func (s *DescribeSQLLogsV2Request) SetResourceGroupId(v string) *DescribeSQLLogsV2Request {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeSQLLogsV2Request) SetSourceIP(v string) *DescribeSQLLogsV2Request {
	s.SourceIP = &v
	return s
}

func (s *DescribeSQLLogsV2Request) SetStartTime(v string) *DescribeSQLLogsV2Request {
	s.StartTime = &v
	return s
}

func (s *DescribeSQLLogsV2Request) SetUser(v string) *DescribeSQLLogsV2Request {
	s.User = &v
	return s
}

type DescribeSQLLogsV2ResponseBody struct {
	// The details about the access denial.
	//
	// example:
	//
	// account name invalid
	AccessDeniedDetail *string `json:"AccessDeniedDetail,omitempty" xml:"AccessDeniedDetail,omitempty"`
	// The queried SQL execution logs.
	Items []*DescribeSQLLogsV2ResponseBodyItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Repeated"`
	// The page number of the returned page.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries returned per page.
	//
	// example:
	//
	// 1
	PageRecordCount *int32 `json:"PageRecordCount,omitempty" xml:"PageRecordCount,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// A7941C94-B92F-46A0-BD3E-2D**********
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeSQLLogsV2ResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSQLLogsV2ResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSQLLogsV2ResponseBody) SetAccessDeniedDetail(v string) *DescribeSQLLogsV2ResponseBody {
	s.AccessDeniedDetail = &v
	return s
}

func (s *DescribeSQLLogsV2ResponseBody) SetItems(v []*DescribeSQLLogsV2ResponseBodyItems) *DescribeSQLLogsV2ResponseBody {
	s.Items = v
	return s
}

func (s *DescribeSQLLogsV2ResponseBody) SetPageNumber(v int32) *DescribeSQLLogsV2ResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeSQLLogsV2ResponseBody) SetPageRecordCount(v int32) *DescribeSQLLogsV2ResponseBody {
	s.PageRecordCount = &v
	return s
}

func (s *DescribeSQLLogsV2ResponseBody) SetRequestId(v string) *DescribeSQLLogsV2ResponseBody {
	s.RequestId = &v
	return s
}

type DescribeSQLLogsV2ResponseBodyItems struct {
	// The database account that executes the SQL statement.
	//
	// example:
	//
	// testadmin
	AccountName *string `json:"AccountName,omitempty" xml:"AccountName,omitempty"`
	// The name of the database.
	//
	// example:
	//
	// adbpgadmin
	DBName *string `json:"DBName,omitempty" xml:"DBName,omitempty"`
	// The role of the database.
	//
	// example:
	//
	// master
	DBRole *string `json:"DBRole,omitempty" xml:"DBRole,omitempty"`
	// The error code.
	//
	// example:
	//
	// InternalError
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// The error message.
	//
	// example:
	//
	// User not authorized to operate on the specified resource.
	ErrorMsg *string `json:"ErrorMsg,omitempty" xml:"ErrorMsg,omitempty"`
	// The execution duration of the SQL statement.
	//
	// example:
	//
	// 2
	ExecuteCost *float32 `json:"ExecuteCost,omitempty" xml:"ExecuteCost,omitempty"`
	// The execution status of the SQL statement. Valid values:
	//
	// 	- **success**
	//
	// 	- **fail**
	//
	// example:
	//
	// success
	ExecuteState *string `json:"ExecuteState,omitempty" xml:"ExecuteState,omitempty"`
	// The type of the query language.
	//
	// example:
	//
	// DQL
	OperationClass *string `json:"OperationClass,omitempty" xml:"OperationClass,omitempty"`
	// The time when the SQL statement was executed.
	//
	// example:
	//
	// 2021-03-15T17:02:32Z
	OperationExecuteTime *string `json:"OperationExecuteTime,omitempty" xml:"OperationExecuteTime,omitempty"`
	// The type of the SQL statement.
	//
	// example:
	//
	// SELECT
	OperationType *string `json:"OperationType,omitempty" xml:"OperationType,omitempty"`
	// The query ID.
	//
	// example:
	//
	// 2548026401648157601713924318883
	QueryId *string `json:"QueryId,omitempty" xml:"QueryId,omitempty"`
	// The number of entries returned.
	//
	// example:
	//
	// 1
	ReturnRowCounts *int64 `json:"ReturnRowCounts,omitempty" xml:"ReturnRowCounts,omitempty"`
	// The SQL statement.
	//
	// example:
	//
	// select 1
	SQLText *string `json:"SQLText,omitempty" xml:"SQLText,omitempty"`
	// The number of entries scanned.
	//
	// example:
	//
	// 1
	ScanRowCounts *int64 `json:"ScanRowCounts,omitempty" xml:"ScanRowCounts,omitempty"`
	// The ID of the session.
	//
	// example:
	//
	// efc33bd7-f1dc-4b24-b4fb-ab0d5329b7bb
	SessionId *string `json:"SessionId,omitempty" xml:"SessionId,omitempty"`
	// The source IP address.
	//
	// example:
	//
	// 100.**.**.90
	SourceIP *string `json:"SourceIP,omitempty" xml:"SourceIP,omitempty"`
	// The number of the source port.
	//
	// example:
	//
	// 50514
	SourcePort *int32 `json:"SourcePort,omitempty" xml:"SourcePort,omitempty"`
}

func (s DescribeSQLLogsV2ResponseBodyItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeSQLLogsV2ResponseBodyItems) GoString() string {
	return s.String()
}

func (s *DescribeSQLLogsV2ResponseBodyItems) SetAccountName(v string) *DescribeSQLLogsV2ResponseBodyItems {
	s.AccountName = &v
	return s
}

func (s *DescribeSQLLogsV2ResponseBodyItems) SetDBName(v string) *DescribeSQLLogsV2ResponseBodyItems {
	s.DBName = &v
	return s
}

func (s *DescribeSQLLogsV2ResponseBodyItems) SetDBRole(v string) *DescribeSQLLogsV2ResponseBodyItems {
	s.DBRole = &v
	return s
}

func (s *DescribeSQLLogsV2ResponseBodyItems) SetErrorCode(v string) *DescribeSQLLogsV2ResponseBodyItems {
	s.ErrorCode = &v
	return s
}

func (s *DescribeSQLLogsV2ResponseBodyItems) SetErrorMsg(v string) *DescribeSQLLogsV2ResponseBodyItems {
	s.ErrorMsg = &v
	return s
}

func (s *DescribeSQLLogsV2ResponseBodyItems) SetExecuteCost(v float32) *DescribeSQLLogsV2ResponseBodyItems {
	s.ExecuteCost = &v
	return s
}

func (s *DescribeSQLLogsV2ResponseBodyItems) SetExecuteState(v string) *DescribeSQLLogsV2ResponseBodyItems {
	s.ExecuteState = &v
	return s
}

func (s *DescribeSQLLogsV2ResponseBodyItems) SetOperationClass(v string) *DescribeSQLLogsV2ResponseBodyItems {
	s.OperationClass = &v
	return s
}

func (s *DescribeSQLLogsV2ResponseBodyItems) SetOperationExecuteTime(v string) *DescribeSQLLogsV2ResponseBodyItems {
	s.OperationExecuteTime = &v
	return s
}

func (s *DescribeSQLLogsV2ResponseBodyItems) SetOperationType(v string) *DescribeSQLLogsV2ResponseBodyItems {
	s.OperationType = &v
	return s
}

func (s *DescribeSQLLogsV2ResponseBodyItems) SetQueryId(v string) *DescribeSQLLogsV2ResponseBodyItems {
	s.QueryId = &v
	return s
}

func (s *DescribeSQLLogsV2ResponseBodyItems) SetReturnRowCounts(v int64) *DescribeSQLLogsV2ResponseBodyItems {
	s.ReturnRowCounts = &v
	return s
}

func (s *DescribeSQLLogsV2ResponseBodyItems) SetSQLText(v string) *DescribeSQLLogsV2ResponseBodyItems {
	s.SQLText = &v
	return s
}

func (s *DescribeSQLLogsV2ResponseBodyItems) SetScanRowCounts(v int64) *DescribeSQLLogsV2ResponseBodyItems {
	s.ScanRowCounts = &v
	return s
}

func (s *DescribeSQLLogsV2ResponseBodyItems) SetSessionId(v string) *DescribeSQLLogsV2ResponseBodyItems {
	s.SessionId = &v
	return s
}

func (s *DescribeSQLLogsV2ResponseBodyItems) SetSourceIP(v string) *DescribeSQLLogsV2ResponseBodyItems {
	s.SourceIP = &v
	return s
}

func (s *DescribeSQLLogsV2ResponseBodyItems) SetSourcePort(v int32) *DescribeSQLLogsV2ResponseBodyItems {
	s.SourcePort = &v
	return s
}

type DescribeSQLLogsV2Response struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeSQLLogsV2ResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeSQLLogsV2Response) String() string {
	return tea.Prettify(s)
}

func (s DescribeSQLLogsV2Response) GoString() string {
	return s.String()
}

func (s *DescribeSQLLogsV2Response) SetHeaders(v map[string]*string) *DescribeSQLLogsV2Response {
	s.Headers = v
	return s
}

func (s *DescribeSQLLogsV2Response) SetStatusCode(v int32) *DescribeSQLLogsV2Response {
	s.StatusCode = &v
	return s
}

func (s *DescribeSQLLogsV2Response) SetBody(v *DescribeSQLLogsV2ResponseBody) *DescribeSQLLogsV2Response {
	s.Body = v
	return s
}

type DescribeSampleDataRequest struct {
	// The ID of the instance.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the IDs of all AnalyticDB for PostgreSQL instances in a specific region.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s DescribeSampleDataRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSampleDataRequest) GoString() string {
	return s.String()
}

func (s *DescribeSampleDataRequest) SetDBInstanceId(v string) *DescribeSampleDataRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeSampleDataRequest) SetOwnerId(v int64) *DescribeSampleDataRequest {
	s.OwnerId = &v
	return s
}

type DescribeSampleDataResponseBody struct {
	// The ID of the instance.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The error message returned if an error occurs. This message does not affect the execution of the operation.
	//
	// example:
	//
	// ******
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// Indicates whether a sample dataset is loaded to the instance. Valid values:
	//
	// 	- **true**: A sample dataset is loaded.
	//
	// 	- **false**: No sample dataset is loaded.
	//
	// example:
	//
	// true
	HasSampleData *bool `json:"HasSampleData,omitempty" xml:"HasSampleData,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 84CD7CAF-FA7B-5178-B19F-D8CDE307D5FA_8111
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The loading status of the sample dataset. Valid values:
	//
	// 	- **loaded**
	//
	// 	- **loading**
	//
	// 	- **unload**
	//
	// example:
	//
	// loaded
	SampleDataStatus *string `json:"SampleDataStatus,omitempty" xml:"SampleDataStatus,omitempty"`
}

func (s DescribeSampleDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSampleDataResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSampleDataResponseBody) SetDBInstanceId(v string) *DescribeSampleDataResponseBody {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeSampleDataResponseBody) SetErrorMessage(v string) *DescribeSampleDataResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *DescribeSampleDataResponseBody) SetHasSampleData(v bool) *DescribeSampleDataResponseBody {
	s.HasSampleData = &v
	return s
}

func (s *DescribeSampleDataResponseBody) SetRequestId(v string) *DescribeSampleDataResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSampleDataResponseBody) SetSampleDataStatus(v string) *DescribeSampleDataResponseBody {
	s.SampleDataStatus = &v
	return s
}

type DescribeSampleDataResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeSampleDataResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeSampleDataResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSampleDataResponse) GoString() string {
	return s.String()
}

func (s *DescribeSampleDataResponse) SetHeaders(v map[string]*string) *DescribeSampleDataResponse {
	s.Headers = v
	return s
}

func (s *DescribeSampleDataResponse) SetStatusCode(v int32) *DescribeSampleDataResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSampleDataResponse) SetBody(v *DescribeSampleDataResponseBody) *DescribeSampleDataResponse {
	s.Body = v
	return s
}

type DescribeStreamingDataServiceRequest struct {
	// The instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp10g78o9807yv9h3
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The region ID.
	//
	// >  You can call the [DescribeRegions](https://help.aliyun.com/document_detail/86912.html) operation to query the most recent region list.
	//
	// example:
	//
	// cn-beijing
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The service ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	ServiceId *string `json:"ServiceId,omitempty" xml:"ServiceId,omitempty"`
}

func (s DescribeStreamingDataServiceRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeStreamingDataServiceRequest) GoString() string {
	return s.String()
}

func (s *DescribeStreamingDataServiceRequest) SetDBInstanceId(v string) *DescribeStreamingDataServiceRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeStreamingDataServiceRequest) SetRegionId(v string) *DescribeStreamingDataServiceRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeStreamingDataServiceRequest) SetServiceId(v string) *DescribeStreamingDataServiceRequest {
	s.ServiceId = &v
	return s
}

type DescribeStreamingDataServiceResponseBody struct {
	// The time when the service was created.
	//
	// example:
	//
	// 2019-09-08T16:00:00Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The time when the service was last modified.
	//
	// example:
	//
	// 2019-09-08T17:00:00Z
	ModifyTime *string `json:"ModifyTime,omitempty" xml:"ModifyTime,omitempty"`
	// The request ID.
	//
	// example:
	//
	// B4CAF581-2AC7-41AD-8940-D56DF7AADF5B
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The description of the service.
	//
	// example:
	//
	// test-adbpgss
	ServiceDescription *string `json:"ServiceDescription,omitempty" xml:"ServiceDescription,omitempty"`
	// The service ID.
	//
	// example:
	//
	// 1
	ServiceId *string `json:"ServiceId,omitempty" xml:"ServiceId,omitempty"`
	// The IP address of the service.
	//
	// example:
	//
	// 192.168.0.1
	ServiceIp *string `json:"ServiceIp,omitempty" xml:"ServiceIp,omitempty"`
	// The service is managed by other aliyun product or not.
	//
	// example:
	//
	// False
	ServiceManaged *bool `json:"ServiceManaged,omitempty" xml:"ServiceManaged,omitempty"`
	// The name of the service.
	//
	// example:
	//
	// test-adbpgss
	ServiceName *string `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
	// The service account uid of the aliyun product
	//
	// example:
	//
	// 123456
	ServiceOwnerId *string `json:"ServiceOwnerId,omitempty" xml:"ServiceOwnerId,omitempty"`
	// The port number of the service.
	//
	// example:
	//
	// 5432
	ServicePort *int32 `json:"ServicePort,omitempty" xml:"ServicePort,omitempty"`
	// The specifications of the service.
	//
	// example:
	//
	// 2
	ServiceSpec *string `json:"ServiceSpec,omitempty" xml:"ServiceSpec,omitempty"`
	// The status of the service. Valid values:
	//
	// 	- Init
	//
	// 	- Running
	//
	// 	- Exception
	//
	// 	- Paused
	//
	// example:
	//
	// Running
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeStreamingDataServiceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeStreamingDataServiceResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeStreamingDataServiceResponseBody) SetCreateTime(v string) *DescribeStreamingDataServiceResponseBody {
	s.CreateTime = &v
	return s
}

func (s *DescribeStreamingDataServiceResponseBody) SetModifyTime(v string) *DescribeStreamingDataServiceResponseBody {
	s.ModifyTime = &v
	return s
}

func (s *DescribeStreamingDataServiceResponseBody) SetRequestId(v string) *DescribeStreamingDataServiceResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeStreamingDataServiceResponseBody) SetServiceDescription(v string) *DescribeStreamingDataServiceResponseBody {
	s.ServiceDescription = &v
	return s
}

func (s *DescribeStreamingDataServiceResponseBody) SetServiceId(v string) *DescribeStreamingDataServiceResponseBody {
	s.ServiceId = &v
	return s
}

func (s *DescribeStreamingDataServiceResponseBody) SetServiceIp(v string) *DescribeStreamingDataServiceResponseBody {
	s.ServiceIp = &v
	return s
}

func (s *DescribeStreamingDataServiceResponseBody) SetServiceManaged(v bool) *DescribeStreamingDataServiceResponseBody {
	s.ServiceManaged = &v
	return s
}

func (s *DescribeStreamingDataServiceResponseBody) SetServiceName(v string) *DescribeStreamingDataServiceResponseBody {
	s.ServiceName = &v
	return s
}

func (s *DescribeStreamingDataServiceResponseBody) SetServiceOwnerId(v string) *DescribeStreamingDataServiceResponseBody {
	s.ServiceOwnerId = &v
	return s
}

func (s *DescribeStreamingDataServiceResponseBody) SetServicePort(v int32) *DescribeStreamingDataServiceResponseBody {
	s.ServicePort = &v
	return s
}

func (s *DescribeStreamingDataServiceResponseBody) SetServiceSpec(v string) *DescribeStreamingDataServiceResponseBody {
	s.ServiceSpec = &v
	return s
}

func (s *DescribeStreamingDataServiceResponseBody) SetStatus(v string) *DescribeStreamingDataServiceResponseBody {
	s.Status = &v
	return s
}

type DescribeStreamingDataServiceResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeStreamingDataServiceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeStreamingDataServiceResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeStreamingDataServiceResponse) GoString() string {
	return s.String()
}

func (s *DescribeStreamingDataServiceResponse) SetHeaders(v map[string]*string) *DescribeStreamingDataServiceResponse {
	s.Headers = v
	return s
}

func (s *DescribeStreamingDataServiceResponse) SetStatusCode(v int32) *DescribeStreamingDataServiceResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeStreamingDataServiceResponse) SetBody(v *DescribeStreamingDataServiceResponseBody) *DescribeStreamingDataServiceResponse {
	s.Body = v
	return s
}

type DescribeStreamingDataSourceRequest struct {
	// Instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp10g78o9807yv9h3
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// Data source ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	DataSourceId *int32 `json:"DataSourceId,omitempty" xml:"DataSourceId,omitempty"`
	// Region ID.
	//
	// > You can call the [DescribeRegions](https://help.aliyun.com/document_detail/86912.html) API to view available region IDs.
	//
	// example:
	//
	// cn-beijing
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeStreamingDataSourceRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeStreamingDataSourceRequest) GoString() string {
	return s.String()
}

func (s *DescribeStreamingDataSourceRequest) SetDBInstanceId(v string) *DescribeStreamingDataSourceRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeStreamingDataSourceRequest) SetDataSourceId(v int32) *DescribeStreamingDataSourceRequest {
	s.DataSourceId = &v
	return s
}

func (s *DescribeStreamingDataSourceRequest) SetRegionId(v string) *DescribeStreamingDataSourceRequest {
	s.RegionId = &v
	return s
}

type DescribeStreamingDataSourceResponseBody struct {
	// Creation time.
	//
	// example:
	//
	// 2019-09-08T16:00:00Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// Data source configuration information.
	//
	// example:
	//
	// {"brokers":"broker0:9091,broker1:9091","topic":"topic"}
	DataSourceConfig *string `json:"DataSourceConfig,omitempty" xml:"DataSourceConfig,omitempty"`
	// Data source description.
	//
	// example:
	//
	// test-kafka
	DataSourceDescription *string `json:"DataSourceDescription,omitempty" xml:"DataSourceDescription,omitempty"`
	// Data source ID.
	//
	// example:
	//
	// 1
	DataSourceId *string `json:"DataSourceId,omitempty" xml:"DataSourceId,omitempty"`
	// Data source name.
	//
	// example:
	//
	// test-kafka
	DataSourceName *string `json:"DataSourceName,omitempty" xml:"DataSourceName,omitempty"`
	// Data source type, values include:
	//
	//  -  kafka
	//
	// example:
	//
	// kafka
	DataSourceType *string `json:"DataSourceType,omitempty" xml:"DataSourceType,omitempty"`
	// Service status message, for example, in case of an exception, it will show the reason for the exception. In normal Running state, this value is empty.
	//
	// example:
	//
	// ""
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// Request ID.
	//
	// example:
	//
	// B4CAF581-2AC7-41AD-8940-D56DF7AADF5B
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// External data service ID.
	//
	// example:
	//
	// 1
	ServiceId *int32 `json:"ServiceId,omitempty" xml:"ServiceId,omitempty"`
	// Service status:
	//
	// - Initializing init
	//
	// - Running running
	//
	// - Exception exception
	//
	// example:
	//
	// running
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeStreamingDataSourceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeStreamingDataSourceResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeStreamingDataSourceResponseBody) SetCreateTime(v string) *DescribeStreamingDataSourceResponseBody {
	s.CreateTime = &v
	return s
}

func (s *DescribeStreamingDataSourceResponseBody) SetDataSourceConfig(v string) *DescribeStreamingDataSourceResponseBody {
	s.DataSourceConfig = &v
	return s
}

func (s *DescribeStreamingDataSourceResponseBody) SetDataSourceDescription(v string) *DescribeStreamingDataSourceResponseBody {
	s.DataSourceDescription = &v
	return s
}

func (s *DescribeStreamingDataSourceResponseBody) SetDataSourceId(v string) *DescribeStreamingDataSourceResponseBody {
	s.DataSourceId = &v
	return s
}

func (s *DescribeStreamingDataSourceResponseBody) SetDataSourceName(v string) *DescribeStreamingDataSourceResponseBody {
	s.DataSourceName = &v
	return s
}

func (s *DescribeStreamingDataSourceResponseBody) SetDataSourceType(v string) *DescribeStreamingDataSourceResponseBody {
	s.DataSourceType = &v
	return s
}

func (s *DescribeStreamingDataSourceResponseBody) SetErrorMessage(v string) *DescribeStreamingDataSourceResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *DescribeStreamingDataSourceResponseBody) SetRequestId(v string) *DescribeStreamingDataSourceResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeStreamingDataSourceResponseBody) SetServiceId(v int32) *DescribeStreamingDataSourceResponseBody {
	s.ServiceId = &v
	return s
}

func (s *DescribeStreamingDataSourceResponseBody) SetStatus(v string) *DescribeStreamingDataSourceResponseBody {
	s.Status = &v
	return s
}

type DescribeStreamingDataSourceResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeStreamingDataSourceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeStreamingDataSourceResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeStreamingDataSourceResponse) GoString() string {
	return s.String()
}

func (s *DescribeStreamingDataSourceResponse) SetHeaders(v map[string]*string) *DescribeStreamingDataSourceResponse {
	s.Headers = v
	return s
}

func (s *DescribeStreamingDataSourceResponse) SetStatusCode(v int32) *DescribeStreamingDataSourceResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeStreamingDataSourceResponse) SetBody(v *DescribeStreamingDataSourceResponseBody) *DescribeStreamingDataSourceResponse {
	s.Body = v
	return s
}

type DescribeStreamingJobRequest struct {
	// Instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp10g78o9807yv9h3
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// Job ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	JobId *int32 `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// Region ID.
	//
	// > You can call the [DescribeRegions](https://help.aliyun.com/document_detail/86912.html) interface to view available region IDs.
	//
	// example:
	//
	// cn-beijing
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeStreamingJobRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeStreamingJobRequest) GoString() string {
	return s.String()
}

func (s *DescribeStreamingJobRequest) SetDBInstanceId(v string) *DescribeStreamingJobRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeStreamingJobRequest) SetJobId(v int32) *DescribeStreamingJobRequest {
	s.JobId = &v
	return s
}

func (s *DescribeStreamingJobRequest) SetRegionId(v string) *DescribeStreamingJobRequest {
	s.RegionId = &v
	return s
}

type DescribeStreamingJobResponseBody struct {
	// Target database account.
	//
	// example:
	//
	// test-account
	Account *string `json:"Account,omitempty" xml:"Account,omitempty"`
	// Delivery guarantee.
	//
	// example:
	//
	// ATLEAST / EXACTLY
	Consistency *string `json:"Consistency,omitempty" xml:"Consistency,omitempty"`
	// Creation time.
	//
	// Use the UTC time format: yyyy-MM-ddTHH:mm:ssZ
	//
	// example:
	//
	// 2019-09-08T16:00:00Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// Data source ID.
	//
	// example:
	//
	// 2
	DataSourceId *string `json:"DataSourceId,omitempty" xml:"DataSourceId,omitempty"`
	// Data source name.
	//
	// example:
	//
	// test_kafka
	DataSourceName *string `json:"DataSourceName,omitempty" xml:"DataSourceName,omitempty"`
	// Target data table mapping field list.
	DestColumns []*string `json:"DestColumns,omitempty" xml:"DestColumns,omitempty" type:"Repeated"`
	// Target database name.
	//
	// example:
	//
	// dest-db
	DestDatabase *string `json:"DestDatabase,omitempty" xml:"DestDatabase,omitempty"`
	// Target namespace.
	//
	// example:
	//
	// dest-schema
	DestSchema *string `json:"DestSchema,omitempty" xml:"DestSchema,omitempty"`
	// Target table name.
	//
	// example:
	//
	// dest-table
	DestTable *string `json:"DestTable,omitempty" xml:"DestTable,omitempty"`
	// When data in Kafka does not match the ADBPG target table, it can cause write failures. This value represents the number of error rows allowed; if exceeded, the task will fail.
	//
	// example:
	//
	// 5
	ErrorLimitCount *int32 `json:"ErrorLimitCount,omitempty" xml:"ErrorLimitCount,omitempty"`
	// Service status information, such as the reason for an exception. It is empty in the normal Running state.
	//
	// example:
	//
	// ""
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// Fallback offset, which is the fallback position
	//
	// - The FallbackOffset parameter defines the behavior when the consumer has not requested a specific offset to consume or the requested offset exceeds the current record\\"s offset information in the Kafka cluster. You can choose to start consuming from the earliest (newest) or latest (oldest) offset.
	//
	// example:
	//
	// EARLIEST /  LATEST
	FallbackOffset *string `json:"FallbackOffset,omitempty" xml:"FallbackOffset,omitempty"`
	// Kafka group name
	//
	// example:
	//
	// test_group
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	// Job configuration file.
	//
	// example:
	//
	// DATABASE: adbpgss_test
	//
	// USER: adbpgss_test
	//
	// PASSWORD: adbpgssTest
	//
	// HOST: gp-xxx-master.gpdb.rds-aliyun-pre.rds.aliyuncs.com
	//
	// PORT: 5432
	//
	// KAFKA:
	//
	//   INPUT:
	//
	//     SOURCE:
	//
	//       BROKERS: broker1:9092,broker2:9092,broker3:9092
	//
	//       TOPIC: testtopic
	//
	//       FALLBACK_OFFSET: earliest
	//
	//     KEY:
	//
	//       COLUMNS:
	//
	//       - NAME: customer_id
	//
	//         TYPE: int
	//
	//       FORMAT: delimited
	//
	//       DELIMITED_OPTION:
	//
	//         DELIMITER: \\"|\\"
	//
	//     VALUE:
	//
	//       COLUMNS:
	//
	//       - TYPE: integer
	//
	//         NAME: l_orderkey
	//
	//       - TYPE: integer
	//
	//         NAME: l_partkey
	//
	//       - TYPE: integer
	//
	//         NAME: l_suppkey
	//
	//       - TYPE: integer
	//
	//         NAME: l_linenumber
	//
	//       - TYPE: decimal
	//
	//         NAME: l_quantity
	//
	//       - TYPE: decimal
	//
	//         NAME: l_extendedprice
	//
	//       - TYPE: decimal
	//
	//         NAME: l_discount
	//
	//       - TYPE: decimal
	//
	//         NAME: l_tax
	//
	//       - TYPE: char
	//
	//         NAME: l_returnflag
	//
	//       - TYPE: char
	//
	//         NAME: l_linestatus
	//
	//       - TYPE: date
	//
	//         NAME: l_shipdate
	//
	//       - TYPE: date
	//
	//         NAME: l_commitdate
	//
	//       - TYPE: date
	//
	//         NAME: l_receiptdate
	//
	//       - TYPE: text
	//
	//         NAME: l_shipinstruct
	//
	//       - TYPE: text
	//
	//         NAME: l_shipmode
	//
	//       - TYPE: text
	//
	//         NAME: l_comment
	//
	//       FORMAT: delimited
	//
	//       DELIMITED_OPTION:
	//
	//         DELIMITER: \\"|\\"
	//
	//     ERROR_LIMIT: 10
	//
	//   OUTPUT:
	//
	//     SCHEMA: adbpgss_test
	//
	//     TABLE: write_with_insert_plaintext
	//
	//     MODE: MERGE
	//
	//     MATCH_COLUMNS:
	//
	//     - l_orderkey
	//
	//     - l_partkey
	//
	//     - l_suppkey
	//
	//     UPDATE_COLUMNS:
	//
	//     - l_linenumber
	//
	//     - l_quantity
	//
	//     - l_extendedprice
	//
	//     - l_discount
	//
	//     - l_tax
	//
	//     - l_returnflag
	//
	//     - l_linestatus
	//
	//     - l_shipdate
	//
	//     - l_commitdate
	//
	//     - l_receiptdate
	//
	//     - l_shipinstruct
	//
	//     - l_shipmode
	//
	//     - l_comment
	//
	//     MAPPING:
	//
	//     - EXPRESSION: l_orderkey
	//
	//       NAME: l_orderkey
	//
	//     - EXPRESSION: l_partkey
	//
	//       NAME: l_partkey
	//
	//     - EXPRESSION: l_suppkey
	//
	//       NAME: l_suppkey
	//
	//     - EXPRESSION: l_linenumber
	//
	//       NAME: l_linenumber
	//
	//     - EXPRESSION: l_quantity
	//
	//       NAME: l_quantity
	//
	//     - EXPRESSION: l_extendedprice
	//
	//       NAME: l_extendedprice
	//
	//     - EXPRESSION: l_discount
	//
	//       NAME: l_discount
	//
	//     - EXPRESSION: l_tax
	//
	//       NAME: l_tax
	//
	//     - EXPRESSION: l_returnflag
	//
	//       NAME: l_returnflag
	//
	//     - EXPRESSION: l_linestatus
	//
	//       NAME: l_linestatus
	//
	//     - EXPRESSION: l_shipdate
	//
	//       NAME: l_shipdate
	//
	//     - EXPRESSION: l_commitdate
	//
	//       NAME: l_commitdate
	//
	//     - EXPRESSION: l_receiptdate
	//
	//       NAME: l_receiptdate
	//
	//     - EXPRESSION: l_shipinstruct
	//
	//       NAME: l_shipinstruct
	//
	//     - EXPRESSION: l_shipmode
	//
	//       NAME: l_shipmode
	//
	//     - EXPRESSION: l_comment
	//
	//       NAME: l_comment
	//
	//   COMMIT:
	//
	//     MAX_ROW: 1000
	//
	//     MINIMAL_INTERVAL: 1000
	//
	//     CONSISTENCY: ATLEAST
	//
	//   POLL:
	//
	//     BATCHSIZE: 1000
	//
	//     TIMEOUT: 1000
	//
	//   PROPERTIES:
	//
	//     group.id: testgroup
	JobConfig *string `json:"JobConfig,omitempty" xml:"JobConfig,omitempty"`
	// Job description.
	//
	// example:
	//
	// test_job
	JobDescription *string `json:"JobDescription,omitempty" xml:"JobDescription,omitempty"`
	// Job ID.
	//
	// example:
	//
	// 1
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// Job name.
	//
	// example:
	//
	// test-job
	JobName *string `json:"JobName,omitempty" xml:"JobName,omitempty"`
	// Match columns, usually all primary key columns of the target table. If all column values in this configuration are the same, the two rows of data are considered duplicates.
	MatchColumns []*string `json:"MatchColumns,omitempty" xml:"MatchColumns,omitempty" type:"Repeated"`
	// Configuration mode
	//
	// 1. Basic mode requires specifying some configuration fields
	//
	// 1. Professional mode supports submitting YAML files
	//
	// example:
	//
	// basic/professional
	Mode *string `json:"Mode,omitempty" xml:"Mode,omitempty"`
	// Last modified time.
	//
	// Use the UTC time format: yyyy-MM-ddTHH:mm:ssZ
	//
	// example:
	//
	// 2019-09-08T17:00:00Z
	ModifyTime *string `json:"ModifyTime,omitempty" xml:"ModifyTime,omitempty"`
	// Target database password.
	//
	// example:
	//
	// pwd123
	Password *string `json:"Password,omitempty" xml:"Password,omitempty"`
	// Request ID.
	//
	// example:
	//
	// B4CAF581-2AC7-41AD-8940-D56DF7AADF5B
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Source field list.
	SrcColumns []*string `json:"SrcColumns,omitempty" xml:"SrcColumns,omitempty" type:"Repeated"`
	// Service status, with possible values:
	//
	// - Init: Initializing
	//
	// - Running: Running
	//
	// - Exception: Exception
	//
	// - Paused: Paused
	//
	// example:
	//
	// Running
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// Update columns, usually all non-primary key columns of the target table. When data duplication is determined through MatchColumns, updating the UpdateColumns column values will result in new data overwriting old data.
	UpdateColumns []*string `json:"UpdateColumns,omitempty" xml:"UpdateColumns,omitempty" type:"Repeated"`
	// Write mode.
	//
	// example:
	//
	// INSERT/UPDATE/MERGE
	WriteMode *string `json:"WriteMode,omitempty" xml:"WriteMode,omitempty"`
}

func (s DescribeStreamingJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeStreamingJobResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeStreamingJobResponseBody) SetAccount(v string) *DescribeStreamingJobResponseBody {
	s.Account = &v
	return s
}

func (s *DescribeStreamingJobResponseBody) SetConsistency(v string) *DescribeStreamingJobResponseBody {
	s.Consistency = &v
	return s
}

func (s *DescribeStreamingJobResponseBody) SetCreateTime(v string) *DescribeStreamingJobResponseBody {
	s.CreateTime = &v
	return s
}

func (s *DescribeStreamingJobResponseBody) SetDataSourceId(v string) *DescribeStreamingJobResponseBody {
	s.DataSourceId = &v
	return s
}

func (s *DescribeStreamingJobResponseBody) SetDataSourceName(v string) *DescribeStreamingJobResponseBody {
	s.DataSourceName = &v
	return s
}

func (s *DescribeStreamingJobResponseBody) SetDestColumns(v []*string) *DescribeStreamingJobResponseBody {
	s.DestColumns = v
	return s
}

func (s *DescribeStreamingJobResponseBody) SetDestDatabase(v string) *DescribeStreamingJobResponseBody {
	s.DestDatabase = &v
	return s
}

func (s *DescribeStreamingJobResponseBody) SetDestSchema(v string) *DescribeStreamingJobResponseBody {
	s.DestSchema = &v
	return s
}

func (s *DescribeStreamingJobResponseBody) SetDestTable(v string) *DescribeStreamingJobResponseBody {
	s.DestTable = &v
	return s
}

func (s *DescribeStreamingJobResponseBody) SetErrorLimitCount(v int32) *DescribeStreamingJobResponseBody {
	s.ErrorLimitCount = &v
	return s
}

func (s *DescribeStreamingJobResponseBody) SetErrorMessage(v string) *DescribeStreamingJobResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *DescribeStreamingJobResponseBody) SetFallbackOffset(v string) *DescribeStreamingJobResponseBody {
	s.FallbackOffset = &v
	return s
}

func (s *DescribeStreamingJobResponseBody) SetGroupName(v string) *DescribeStreamingJobResponseBody {
	s.GroupName = &v
	return s
}

func (s *DescribeStreamingJobResponseBody) SetJobConfig(v string) *DescribeStreamingJobResponseBody {
	s.JobConfig = &v
	return s
}

func (s *DescribeStreamingJobResponseBody) SetJobDescription(v string) *DescribeStreamingJobResponseBody {
	s.JobDescription = &v
	return s
}

func (s *DescribeStreamingJobResponseBody) SetJobId(v string) *DescribeStreamingJobResponseBody {
	s.JobId = &v
	return s
}

func (s *DescribeStreamingJobResponseBody) SetJobName(v string) *DescribeStreamingJobResponseBody {
	s.JobName = &v
	return s
}

func (s *DescribeStreamingJobResponseBody) SetMatchColumns(v []*string) *DescribeStreamingJobResponseBody {
	s.MatchColumns = v
	return s
}

func (s *DescribeStreamingJobResponseBody) SetMode(v string) *DescribeStreamingJobResponseBody {
	s.Mode = &v
	return s
}

func (s *DescribeStreamingJobResponseBody) SetModifyTime(v string) *DescribeStreamingJobResponseBody {
	s.ModifyTime = &v
	return s
}

func (s *DescribeStreamingJobResponseBody) SetPassword(v string) *DescribeStreamingJobResponseBody {
	s.Password = &v
	return s
}

func (s *DescribeStreamingJobResponseBody) SetRequestId(v string) *DescribeStreamingJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeStreamingJobResponseBody) SetSrcColumns(v []*string) *DescribeStreamingJobResponseBody {
	s.SrcColumns = v
	return s
}

func (s *DescribeStreamingJobResponseBody) SetStatus(v string) *DescribeStreamingJobResponseBody {
	s.Status = &v
	return s
}

func (s *DescribeStreamingJobResponseBody) SetUpdateColumns(v []*string) *DescribeStreamingJobResponseBody {
	s.UpdateColumns = v
	return s
}

func (s *DescribeStreamingJobResponseBody) SetWriteMode(v string) *DescribeStreamingJobResponseBody {
	s.WriteMode = &v
	return s
}

type DescribeStreamingJobResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeStreamingJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeStreamingJobResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeStreamingJobResponse) GoString() string {
	return s.String()
}

func (s *DescribeStreamingJobResponse) SetHeaders(v map[string]*string) *DescribeStreamingJobResponse {
	s.Headers = v
	return s
}

func (s *DescribeStreamingJobResponse) SetStatusCode(v int32) *DescribeStreamingJobResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeStreamingJobResponse) SetBody(v *DescribeStreamingJobResponseBody) *DescribeStreamingJobResponse {
	s.Body = v
	return s
}

type DescribeSupportFeaturesRequest struct {
	// The ID of the instance.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the instance IDs of all AnalyticDB for PostgreSQL instances in a specific region.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s DescribeSupportFeaturesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSupportFeaturesRequest) GoString() string {
	return s.String()
}

func (s *DescribeSupportFeaturesRequest) SetDBInstanceId(v string) *DescribeSupportFeaturesRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeSupportFeaturesRequest) SetOwnerId(v int64) *DescribeSupportFeaturesRequest {
	s.OwnerId = &v
	return s
}

type DescribeSupportFeaturesResponseBody struct {
	// The ID of the instance.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 63E5BE60-91FF-57F1-B873-7F1EB734B93D_2724
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The features supported by the instance. Valid values:
	//
	// 	- sample_data: sample dataset. For more information, see [Sample dataset](https://help.aliyun.com/document_detail/452278.html).
	//
	// 	- diagnose_and_optimize: diagnostics and optimization. For more information, see [Diagnostics and optimization](https://help.aliyun.com/document_detail/323453.html).
	//
	// example:
	//
	// [ "sample_data", "diagnose_and_optimize" ]
	SupportFeatureList *string `json:"SupportFeatureList,omitempty" xml:"SupportFeatureList,omitempty"`
}

func (s DescribeSupportFeaturesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSupportFeaturesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSupportFeaturesResponseBody) SetDBInstanceId(v string) *DescribeSupportFeaturesResponseBody {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeSupportFeaturesResponseBody) SetRequestId(v string) *DescribeSupportFeaturesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSupportFeaturesResponseBody) SetSupportFeatureList(v string) *DescribeSupportFeaturesResponseBody {
	s.SupportFeatureList = &v
	return s
}

type DescribeSupportFeaturesResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeSupportFeaturesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeSupportFeaturesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSupportFeaturesResponse) GoString() string {
	return s.String()
}

func (s *DescribeSupportFeaturesResponse) SetHeaders(v map[string]*string) *DescribeSupportFeaturesResponse {
	s.Headers = v
	return s
}

func (s *DescribeSupportFeaturesResponse) SetStatusCode(v int32) *DescribeSupportFeaturesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSupportFeaturesResponse) SetBody(v *DescribeSupportFeaturesResponseBody) *DescribeSupportFeaturesResponse {
	s.Body = v
	return s
}

type DescribeTableRequest struct {
	// The instance ID.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The name of the database.
	//
	// This parameter is required.
	//
	// example:
	//
	// adbtest
	Database *string `json:"Database,omitempty" xml:"Database,omitempty"`
	OwnerId  *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The region ID of the instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-beijing
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The name of the schema to which the table belongs.
	//
	// This parameter is required.
	//
	// example:
	//
	// public
	Schema *string `json:"Schema,omitempty" xml:"Schema,omitempty"`
	// The Alibaba Cloud Resource Name (ARN) of the access credential for the created Data API account. You can call the CreateSecret operation to create an access credential.
	//
	// >  To call the DescribeTable operation as a Resource Access Management (RAM) user, the RAM user must have the permissions to call the UseSecret or GetSecretValue operation on the ARN of the access credential.
	//
	// This parameter is required.
	//
	// example:
	//
	// acs:gpdb:cn-beijing:1033**:secret/testsecret-eG2AQGRIwQ0zFp4VA7mYL3uiCXTfDQbQ
	SecretArn *string `json:"SecretArn,omitempty" xml:"SecretArn,omitempty"`
	// The name of the table.
	//
	// This parameter is required.
	//
	// example:
	//
	// mytable
	Table       *string `json:"Table,omitempty" xml:"Table,omitempty"`
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s DescribeTableRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeTableRequest) GoString() string {
	return s.String()
}

func (s *DescribeTableRequest) SetDBInstanceId(v string) *DescribeTableRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeTableRequest) SetDatabase(v string) *DescribeTableRequest {
	s.Database = &v
	return s
}

func (s *DescribeTableRequest) SetOwnerId(v int64) *DescribeTableRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeTableRequest) SetRegionId(v string) *DescribeTableRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeTableRequest) SetSchema(v string) *DescribeTableRequest {
	s.Schema = &v
	return s
}

func (s *DescribeTableRequest) SetSecretArn(v string) *DescribeTableRequest {
	s.SecretArn = &v
	return s
}

func (s *DescribeTableRequest) SetTable(v string) *DescribeTableRequest {
	s.Table = &v
	return s
}

func (s *DescribeTableRequest) SetWorkspaceId(v string) *DescribeTableRequest {
	s.WorkspaceId = &v
	return s
}

type DescribeTableResponseBody struct {
	// The columns of the table.
	ColumnList *DescribeTableResponseBodyColumnList `json:"ColumnList,omitempty" xml:"ColumnList,omitempty" type:"Struct"`
	// The returned message.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The status of the operation. Valid values:
	//
	// 	- **success**
	//
	// 	- **fail**
	//
	// example:
	//
	// success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeTableResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeTableResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeTableResponseBody) SetColumnList(v *DescribeTableResponseBodyColumnList) *DescribeTableResponseBody {
	s.ColumnList = v
	return s
}

func (s *DescribeTableResponseBody) SetMessage(v string) *DescribeTableResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeTableResponseBody) SetRequestId(v string) *DescribeTableResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeTableResponseBody) SetStatus(v string) *DescribeTableResponseBody {
	s.Status = &v
	return s
}

type DescribeTableResponseBodyColumnList struct {
	ColumnList []*ColumnMetadata `json:"ColumnList,omitempty" xml:"ColumnList,omitempty" type:"Repeated"`
}

func (s DescribeTableResponseBodyColumnList) String() string {
	return tea.Prettify(s)
}

func (s DescribeTableResponseBodyColumnList) GoString() string {
	return s.String()
}

func (s *DescribeTableResponseBodyColumnList) SetColumnList(v []*ColumnMetadata) *DescribeTableResponseBodyColumnList {
	s.ColumnList = v
	return s
}

type DescribeTableResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeTableResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeTableResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeTableResponse) GoString() string {
	return s.String()
}

func (s *DescribeTableResponse) SetHeaders(v map[string]*string) *DescribeTableResponse {
	s.Headers = v
	return s
}

func (s *DescribeTableResponse) SetStatusCode(v int32) *DescribeTableResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeTableResponse) SetBody(v *DescribeTableResponseBody) *DescribeTableResponse {
	s.Body = v
	return s
}

type DescribeTagsRequest struct {
	OwnerAccount *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The ID of the region.
	//
	// >  You can call the [DescribeRegions](https://help.aliyun.com/document_detail/86912.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// This parameter is no longer used.
	//
	// example:
	//
	// rg-bp67acfmxazb4p****
	ResourceGroupId      *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	// The type of the resource. Set the value to **instance**.
	//
	// This parameter is required.
	//
	// example:
	//
	// instance
	ResourceType *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
}

func (s DescribeTagsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeTagsRequest) GoString() string {
	return s.String()
}

func (s *DescribeTagsRequest) SetOwnerAccount(v string) *DescribeTagsRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeTagsRequest) SetOwnerId(v int64) *DescribeTagsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeTagsRequest) SetRegionId(v string) *DescribeTagsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeTagsRequest) SetResourceGroupId(v string) *DescribeTagsRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeTagsRequest) SetResourceOwnerAccount(v string) *DescribeTagsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeTagsRequest) SetResourceOwnerId(v int64) *DescribeTagsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeTagsRequest) SetResourceType(v string) *DescribeTagsRequest {
	s.ResourceType = &v
	return s
}

type DescribeTagsResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// A29EC547-B392-4340-AA4F-7C0A7B626E74
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The queried tags.
	Tags []*DescribeTagsResponseBodyTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
}

func (s DescribeTagsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeTagsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeTagsResponseBody) SetRequestId(v string) *DescribeTagsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeTagsResponseBody) SetTags(v []*DescribeTagsResponseBodyTags) *DescribeTagsResponseBody {
	s.Tags = v
	return s
}

type DescribeTagsResponseBodyTags struct {
	// The tag key.
	//
	// example:
	//
	// user
	TagKey *string `json:"TagKey,omitempty" xml:"TagKey,omitempty"`
	// The tag value.
	//
	// example:
	//
	// test
	TagValue *string `json:"TagValue,omitempty" xml:"TagValue,omitempty"`
}

func (s DescribeTagsResponseBodyTags) String() string {
	return tea.Prettify(s)
}

func (s DescribeTagsResponseBodyTags) GoString() string {
	return s.String()
}

func (s *DescribeTagsResponseBodyTags) SetTagKey(v string) *DescribeTagsResponseBodyTags {
	s.TagKey = &v
	return s
}

func (s *DescribeTagsResponseBodyTags) SetTagValue(v string) *DescribeTagsResponseBodyTags {
	s.TagValue = &v
	return s
}

type DescribeTagsResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeTagsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeTagsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeTagsResponse) GoString() string {
	return s.String()
}

func (s *DescribeTagsResponse) SetHeaders(v map[string]*string) *DescribeTagsResponse {
	s.Headers = v
	return s
}

func (s *DescribeTagsResponse) SetStatusCode(v int32) *DescribeTagsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeTagsResponse) SetBody(v *DescribeTagsResponseBody) *DescribeTagsResponse {
	s.Body = v
	return s
}

type DescribeUserEncryptionKeyListRequest struct {
	// The number of the page to return. Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *string `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of KMS keys to return on each page. Default value: 10.
	//
	// example:
	//
	// 10
	PageSize *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the region.
	//
	// This parameter is required.
	//
	// example:
	//
	// ap-southeast-1
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeUserEncryptionKeyListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeUserEncryptionKeyListRequest) GoString() string {
	return s.String()
}

func (s *DescribeUserEncryptionKeyListRequest) SetPageNumber(v string) *DescribeUserEncryptionKeyListRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeUserEncryptionKeyListRequest) SetPageSize(v string) *DescribeUserEncryptionKeyListRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeUserEncryptionKeyListRequest) SetRegionId(v string) *DescribeUserEncryptionKeyListRequest {
	s.RegionId = &v
	return s
}

type DescribeUserEncryptionKeyListResponseBody struct {
	// Details about the KMS keys.
	KmsKeys []*DescribeUserEncryptionKeyListResponseBodyKmsKeys `json:"KmsKeys,omitempty" xml:"KmsKeys,omitempty" type:"Repeated"`
	// The ID of the request.
	//
	// example:
	//
	// B4CAF581-2AC7-41AD-8940-D56DF7AADF5B
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeUserEncryptionKeyListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeUserEncryptionKeyListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeUserEncryptionKeyListResponseBody) SetKmsKeys(v []*DescribeUserEncryptionKeyListResponseBodyKmsKeys) *DescribeUserEncryptionKeyListResponseBody {
	s.KmsKeys = v
	return s
}

func (s *DescribeUserEncryptionKeyListResponseBody) SetRequestId(v string) *DescribeUserEncryptionKeyListResponseBody {
	s.RequestId = &v
	return s
}

type DescribeUserEncryptionKeyListResponseBodyKmsKeys struct {
	// The ID of the KMS key.
	//
	// example:
	//
	// 0b8b1825-fd99-418f-875e-e4dec1dd8715
	KeyId *string `json:"KeyId,omitempty" xml:"KeyId,omitempty"`
}

func (s DescribeUserEncryptionKeyListResponseBodyKmsKeys) String() string {
	return tea.Prettify(s)
}

func (s DescribeUserEncryptionKeyListResponseBodyKmsKeys) GoString() string {
	return s.String()
}

func (s *DescribeUserEncryptionKeyListResponseBodyKmsKeys) SetKeyId(v string) *DescribeUserEncryptionKeyListResponseBodyKmsKeys {
	s.KeyId = &v
	return s
}

type DescribeUserEncryptionKeyListResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeUserEncryptionKeyListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeUserEncryptionKeyListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeUserEncryptionKeyListResponse) GoString() string {
	return s.String()
}

func (s *DescribeUserEncryptionKeyListResponse) SetHeaders(v map[string]*string) *DescribeUserEncryptionKeyListResponse {
	s.Headers = v
	return s
}

func (s *DescribeUserEncryptionKeyListResponse) SetStatusCode(v int32) *DescribeUserEncryptionKeyListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeUserEncryptionKeyListResponse) SetBody(v *DescribeUserEncryptionKeyListResponseBody) *DescribeUserEncryptionKeyListResponse {
	s.Body = v
	return s
}

type DescribeWaitingSQLInfoRequest struct {
	// The ID of the instance.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the instance IDs of all AnalyticDB for PostgreSQL instances in a specific region.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The name of the database.
	//
	// This parameter is required.
	//
	// example:
	//
	// test
	Database *string `json:"Database,omitempty" xml:"Database,omitempty"`
	// The ID of the process that uniquely identifies the query.
	//
	// >  You can call the [DescribeWaitingSQLRecords](https://help.aliyun.com/document_detail/461735.html) operation to obtain the process IDs of lock-waiting queries.
	//
	// This parameter is required.
	//
	// example:
	//
	// 100
	PID *string `json:"PID,omitempty" xml:"PID,omitempty"`
}

func (s DescribeWaitingSQLInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeWaitingSQLInfoRequest) GoString() string {
	return s.String()
}

func (s *DescribeWaitingSQLInfoRequest) SetDBInstanceId(v string) *DescribeWaitingSQLInfoRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeWaitingSQLInfoRequest) SetDatabase(v string) *DescribeWaitingSQLInfoRequest {
	s.Database = &v
	return s
}

func (s *DescribeWaitingSQLInfoRequest) SetPID(v string) *DescribeWaitingSQLInfoRequest {
	s.PID = &v
	return s
}

type DescribeWaitingSQLInfoResponseBody struct {
	// The name of the database.
	//
	// example:
	//
	// test
	Database *string `json:"Database,omitempty" xml:"Database,omitempty"`
	// The queried lock-waiting query.
	Items []*DescribeWaitingSQLInfoResponseBodyItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Repeated"`
	// The ID of the request.
	//
	// example:
	//
	// B4CAF581-2AC7-41AD-8940-D56DF7AADF5B
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeWaitingSQLInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeWaitingSQLInfoResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeWaitingSQLInfoResponseBody) SetDatabase(v string) *DescribeWaitingSQLInfoResponseBody {
	s.Database = &v
	return s
}

func (s *DescribeWaitingSQLInfoResponseBody) SetItems(v []*DescribeWaitingSQLInfoResponseBodyItems) *DescribeWaitingSQLInfoResponseBody {
	s.Items = v
	return s
}

func (s *DescribeWaitingSQLInfoResponseBody) SetRequestId(v string) *DescribeWaitingSQLInfoResponseBody {
	s.RequestId = &v
	return s
}

type DescribeWaitingSQLInfoResponseBodyItems struct {
	// The application that sent the query.
	//
	// example:
	//
	// DataGrip 2022.1.5
	Application *string `json:"Application,omitempty" xml:"Application,omitempty"`
	// The application that sent the blocking query.
	//
	// example:
	//
	// DataGrip 2022.1.5
	BlockedByApplication *string `json:"BlockedByApplication,omitempty" xml:"BlockedByApplication,omitempty"`
	// The process ID of the blocking query.
	//
	// example:
	//
	// 110
	BlockedByPID *string `json:"BlockedByPID,omitempty" xml:"BlockedByPID,omitempty"`
	// The SQL statement of the blocking query.
	//
	// example:
	//
	// Select 	- from t1;
	BlockedBySQLStmt *string `json:"BlockedBySQLStmt,omitempty" xml:"BlockedBySQLStmt,omitempty"`
	// The database account that is used to perform the blocking query.
	//
	// example:
	//
	// testUser1
	BlockedByUser *string `json:"BlockedByUser,omitempty" xml:"BlockedByUser,omitempty"`
	// The authorized locks.
	//
	// example:
	//
	// ShareLock,AccessExclusiveLock
	GrantLocks *string `json:"GrantLocks,omitempty" xml:"GrantLocks,omitempty"`
	// The unauthorized locks.
	//
	// example:
	//
	// AccessShareLock
	NotGrantLocks *string `json:"NotGrantLocks,omitempty" xml:"NotGrantLocks,omitempty"`
	// The ID of the process that uniquely identifies the query.
	//
	// example:
	//
	// 100
	PID *string `json:"PID,omitempty" xml:"PID,omitempty"`
	// The SQL statement of the query.
	//
	// example:
	//
	// Select 	- from t1,t2 where t1.id=t2.id;
	SQLStmt *string `json:"SQLStmt,omitempty" xml:"SQLStmt,omitempty"`
	// The database account that is used to perform the query.
	//
	// example:
	//
	// testUser
	User *string `json:"User,omitempty" xml:"User,omitempty"`
}

func (s DescribeWaitingSQLInfoResponseBodyItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeWaitingSQLInfoResponseBodyItems) GoString() string {
	return s.String()
}

func (s *DescribeWaitingSQLInfoResponseBodyItems) SetApplication(v string) *DescribeWaitingSQLInfoResponseBodyItems {
	s.Application = &v
	return s
}

func (s *DescribeWaitingSQLInfoResponseBodyItems) SetBlockedByApplication(v string) *DescribeWaitingSQLInfoResponseBodyItems {
	s.BlockedByApplication = &v
	return s
}

func (s *DescribeWaitingSQLInfoResponseBodyItems) SetBlockedByPID(v string) *DescribeWaitingSQLInfoResponseBodyItems {
	s.BlockedByPID = &v
	return s
}

func (s *DescribeWaitingSQLInfoResponseBodyItems) SetBlockedBySQLStmt(v string) *DescribeWaitingSQLInfoResponseBodyItems {
	s.BlockedBySQLStmt = &v
	return s
}

func (s *DescribeWaitingSQLInfoResponseBodyItems) SetBlockedByUser(v string) *DescribeWaitingSQLInfoResponseBodyItems {
	s.BlockedByUser = &v
	return s
}

func (s *DescribeWaitingSQLInfoResponseBodyItems) SetGrantLocks(v string) *DescribeWaitingSQLInfoResponseBodyItems {
	s.GrantLocks = &v
	return s
}

func (s *DescribeWaitingSQLInfoResponseBodyItems) SetNotGrantLocks(v string) *DescribeWaitingSQLInfoResponseBodyItems {
	s.NotGrantLocks = &v
	return s
}

func (s *DescribeWaitingSQLInfoResponseBodyItems) SetPID(v string) *DescribeWaitingSQLInfoResponseBodyItems {
	s.PID = &v
	return s
}

func (s *DescribeWaitingSQLInfoResponseBodyItems) SetSQLStmt(v string) *DescribeWaitingSQLInfoResponseBodyItems {
	s.SQLStmt = &v
	return s
}

func (s *DescribeWaitingSQLInfoResponseBodyItems) SetUser(v string) *DescribeWaitingSQLInfoResponseBodyItems {
	s.User = &v
	return s
}

type DescribeWaitingSQLInfoResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeWaitingSQLInfoResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeWaitingSQLInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeWaitingSQLInfoResponse) GoString() string {
	return s.String()
}

func (s *DescribeWaitingSQLInfoResponse) SetHeaders(v map[string]*string) *DescribeWaitingSQLInfoResponse {
	s.Headers = v
	return s
}

func (s *DescribeWaitingSQLInfoResponse) SetStatusCode(v int32) *DescribeWaitingSQLInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeWaitingSQLInfoResponse) SetBody(v *DescribeWaitingSQLInfoResponseBody) *DescribeWaitingSQLInfoResponse {
	s.Body = v
	return s
}

type DescribeWaitingSQLRecordsRequest struct {
	// The ID of the instance.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the instance IDs of all AnalyticDB for PostgreSQL instances in a specific region.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The name of the database.
	//
	// This parameter is required.
	//
	// example:
	//
	// test
	Database *string `json:"Database,omitempty" xml:"Database,omitempty"`
	// The end of the time range to query. Specify the time in the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm*Z format. The time must be in UTC. The end time must be later than the start time.
	//
	// If this parameter is not specified, all lock diagnostics records that are generated after the query start time are returned. If the query start time is not specified either, all lock diagnostics records are returned.
	//
	// example:
	//
	// 2022-08-20T07:59Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The keyword used to filter queries.
	//
	// example:
	//
	// table
	Keyword *string `json:"Keyword,omitempty" xml:"Keyword,omitempty"`
	// The field used to sort lock diagnostics records and the sorting order.
	//
	// Default value: `{"Field":"StartTime","Type":"Desc"}`, which indicates that lock diagnostics records are sorted by the start time in descending order. No other values are supported.
	//
	// example:
	//
	// {"Field":"StartTime","Type":"Desc"}
	Order *string `json:"Order,omitempty" xml:"Order,omitempty"`
	// The number of the page to return. The value must be an integer that is greater than 0. Default value: **1**.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries to return on each page. Valid values:
	//
	// 	- **30**
	//
	// 	- **50**
	//
	// 	- **100**
	//
	// Default value: **30**.
	//
	// example:
	//
	// 30
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The filter condition on queries. Valid values:
	//
	// 	- `{"Type":"maxCost","Value":"10"}`: filters the top 10 longest-waiting queries.
	//
	// 	- `{"Type":"status","Value":"LockWaiting"}`: filters lock-waiting queries.
	//
	// 	- `{"Type":"status","Value":"ResourceWaiting"}`: filters resource-waiting queries.
	//
	// This parameter is required.
	//
	// example:
	//
	// {"Type":"maxCost","Value":"10"}
	QueryCondition *string `json:"QueryCondition,omitempty" xml:"QueryCondition,omitempty"`
	// The beginning of the time range to query. Specify the time in the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm*Z format. The time must be in UTC.
	//
	// If this parameter is not specified, all lock diagnostics records that are generated before the query end time are returned. If the query end time is not specified either, all lock diagnostics records are returned.
	//
	// example:
	//
	// 2022-08-15T06:59Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The name of the database account. If this parameter is not specified, the lock diagnostics records of all database accounts are queried.
	//
	// example:
	//
	// testUser
	User *string `json:"User,omitempty" xml:"User,omitempty"`
}

func (s DescribeWaitingSQLRecordsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeWaitingSQLRecordsRequest) GoString() string {
	return s.String()
}

func (s *DescribeWaitingSQLRecordsRequest) SetDBInstanceId(v string) *DescribeWaitingSQLRecordsRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeWaitingSQLRecordsRequest) SetDatabase(v string) *DescribeWaitingSQLRecordsRequest {
	s.Database = &v
	return s
}

func (s *DescribeWaitingSQLRecordsRequest) SetEndTime(v string) *DescribeWaitingSQLRecordsRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeWaitingSQLRecordsRequest) SetKeyword(v string) *DescribeWaitingSQLRecordsRequest {
	s.Keyword = &v
	return s
}

func (s *DescribeWaitingSQLRecordsRequest) SetOrder(v string) *DescribeWaitingSQLRecordsRequest {
	s.Order = &v
	return s
}

func (s *DescribeWaitingSQLRecordsRequest) SetPageNumber(v int32) *DescribeWaitingSQLRecordsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeWaitingSQLRecordsRequest) SetPageSize(v int32) *DescribeWaitingSQLRecordsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeWaitingSQLRecordsRequest) SetQueryCondition(v string) *DescribeWaitingSQLRecordsRequest {
	s.QueryCondition = &v
	return s
}

func (s *DescribeWaitingSQLRecordsRequest) SetStartTime(v string) *DescribeWaitingSQLRecordsRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeWaitingSQLRecordsRequest) SetUser(v string) *DescribeWaitingSQLRecordsRequest {
	s.User = &v
	return s
}

type DescribeWaitingSQLRecordsResponseBody struct {
	// The list of lock diagnostics records.
	Items []*DescribeWaitingSQLRecordsResponseBodyItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Repeated"`
	// The page number of the returned page.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// B4CAF581-2AC7-41AD-8940-D56DF7AADF5B
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 1
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeWaitingSQLRecordsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeWaitingSQLRecordsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeWaitingSQLRecordsResponseBody) SetItems(v []*DescribeWaitingSQLRecordsResponseBodyItems) *DescribeWaitingSQLRecordsResponseBody {
	s.Items = v
	return s
}

func (s *DescribeWaitingSQLRecordsResponseBody) SetPageNumber(v int32) *DescribeWaitingSQLRecordsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeWaitingSQLRecordsResponseBody) SetRequestId(v string) *DescribeWaitingSQLRecordsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeWaitingSQLRecordsResponseBody) SetTotalCount(v int32) *DescribeWaitingSQLRecordsResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeWaitingSQLRecordsResponseBodyItems struct {
	// The name of the database.
	//
	// example:
	//
	// test
	Database *string `json:"Database,omitempty" xml:"Database,omitempty"`
	// The ID of the process that uniquely identifies the query.
	//
	// example:
	//
	// 100
	PID *string `json:"PID,omitempty" xml:"PID,omitempty"`
	// The SQL statement of the query.
	//
	// example:
	//
	// Select 	- from t1,t2 where t1.id=t2.id;
	SQLStmt *string `json:"SQLStmt,omitempty" xml:"SQLStmt,omitempty"`
	// The ID of the session that contains the query.
	//
	// example:
	//
	// 50
	SessionID *string `json:"SessionID,omitempty" xml:"SessionID,omitempty"`
	// The start time of the query. This value is in the timestamp format. Unit: milliseconds.
	//
	// example:
	//
	// 1660902033374
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The waiting state of the query. Valid values:
	//
	// 	- **LockWaiting**
	//
	// 	- **ResourceWaiting**
	//
	// example:
	//
	// LockWaiting
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The database account that is used to perform the query.
	//
	// example:
	//
	// testUser
	User *string `json:"User,omitempty" xml:"User,omitempty"`
	// The waiting period of the query. Unit: milliseconds.
	//
	// example:
	//
	// 26911000
	WaitingTime *int64 `json:"WaitingTime,omitempty" xml:"WaitingTime,omitempty"`
}

func (s DescribeWaitingSQLRecordsResponseBodyItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeWaitingSQLRecordsResponseBodyItems) GoString() string {
	return s.String()
}

func (s *DescribeWaitingSQLRecordsResponseBodyItems) SetDatabase(v string) *DescribeWaitingSQLRecordsResponseBodyItems {
	s.Database = &v
	return s
}

func (s *DescribeWaitingSQLRecordsResponseBodyItems) SetPID(v string) *DescribeWaitingSQLRecordsResponseBodyItems {
	s.PID = &v
	return s
}

func (s *DescribeWaitingSQLRecordsResponseBodyItems) SetSQLStmt(v string) *DescribeWaitingSQLRecordsResponseBodyItems {
	s.SQLStmt = &v
	return s
}

func (s *DescribeWaitingSQLRecordsResponseBodyItems) SetSessionID(v string) *DescribeWaitingSQLRecordsResponseBodyItems {
	s.SessionID = &v
	return s
}

func (s *DescribeWaitingSQLRecordsResponseBodyItems) SetStartTime(v int64) *DescribeWaitingSQLRecordsResponseBodyItems {
	s.StartTime = &v
	return s
}

func (s *DescribeWaitingSQLRecordsResponseBodyItems) SetStatus(v string) *DescribeWaitingSQLRecordsResponseBodyItems {
	s.Status = &v
	return s
}

func (s *DescribeWaitingSQLRecordsResponseBodyItems) SetUser(v string) *DescribeWaitingSQLRecordsResponseBodyItems {
	s.User = &v
	return s
}

func (s *DescribeWaitingSQLRecordsResponseBodyItems) SetWaitingTime(v int64) *DescribeWaitingSQLRecordsResponseBodyItems {
	s.WaitingTime = &v
	return s
}

type DescribeWaitingSQLRecordsResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeWaitingSQLRecordsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeWaitingSQLRecordsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeWaitingSQLRecordsResponse) GoString() string {
	return s.String()
}

func (s *DescribeWaitingSQLRecordsResponse) SetHeaders(v map[string]*string) *DescribeWaitingSQLRecordsResponse {
	s.Headers = v
	return s
}

func (s *DescribeWaitingSQLRecordsResponse) SetStatusCode(v int32) *DescribeWaitingSQLRecordsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeWaitingSQLRecordsResponse) SetBody(v *DescribeWaitingSQLRecordsResponseBody) *DescribeWaitingSQLRecordsResponse {
	s.Body = v
	return s
}

type DisableDBResourceGroupRequest struct {
	// The instance ID.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s DisableDBResourceGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s DisableDBResourceGroupRequest) GoString() string {
	return s.String()
}

func (s *DisableDBResourceGroupRequest) SetDBInstanceId(v string) *DisableDBResourceGroupRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DisableDBResourceGroupRequest) SetOwnerId(v int64) *DisableDBResourceGroupRequest {
	s.OwnerId = &v
	return s
}

type DisableDBResourceGroupResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 53EA07B7-FC2A-521B-AB7C-27**********
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DisableDBResourceGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DisableDBResourceGroupResponseBody) GoString() string {
	return s.String()
}

func (s *DisableDBResourceGroupResponseBody) SetRequestId(v string) *DisableDBResourceGroupResponseBody {
	s.RequestId = &v
	return s
}

type DisableDBResourceGroupResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DisableDBResourceGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DisableDBResourceGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s DisableDBResourceGroupResponse) GoString() string {
	return s.String()
}

func (s *DisableDBResourceGroupResponse) SetHeaders(v map[string]*string) *DisableDBResourceGroupResponse {
	s.Headers = v
	return s
}

func (s *DisableDBResourceGroupResponse) SetStatusCode(v int32) *DisableDBResourceGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *DisableDBResourceGroupResponse) SetBody(v *DisableDBResourceGroupResponseBody) *DisableDBResourceGroupResponse {
	s.Body = v
	return s
}

type DownloadDiagnosisRecordsRequest struct {
	// The ID of the instance.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the details of all AnalyticDB for PostgreSQL instances in a specific region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The name of the database.
	//
	// This parameter is required.
	//
	// example:
	//
	// adbtest
	Database *string `json:"Database,omitempty" xml:"Database,omitempty"`
	// The end of the time range to query. Specify the time in the *yyyy-MM-dd*T*HH:mm*Z format. The time must be in UTC.
	//
	// example:
	//
	// 2022-05-07T07:59Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The language of the file that contains the query diagnostic information. Valid values:
	//
	// 	- **zh**: simplified Chinese
	//
	// 	- **en**: English
	//
	// 	- **ja**: Japanese
	//
	// 	- **zh-tw**: traditional Chinese
	//
	// example:
	//
	// zh
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// The filter condition on queries. The value is in the JSON format. Valid values:
	//
	// 	- `{"Type":"maxCost", "Value":"100"}`: filters the top 100 queries that are the most time-consuming.
	//
	// 	- `{"Type":"status","Value":"finished"}`: filters completed queries.
	//
	// 	- `{"Type":"status","Value":"running"}`: filters running queries.
	//
	// 	- `{"Type":"cost","Max":"200"}`: filters the queries that consume less than 200 milliseconds.
	//
	// 	- `{"Type":"cost","Min":"200","Max":"60000"}`: filters the queries that consume 200 milliseconds or more and less than 1 minute.
	//
	// 	- `{"Type":"cost","Min":"60000"}`: filters the queries that consume 1 minute or more.
	//
	// 	- `{"Type":"cost","Min":"30","Max":"50"}`: filters the queries that consume 30 milliseconds or more and less than 50 milliseconds. You can customize a filter condition by setting **Min*	- and **Max**.
	//
	// example:
	//
	// { "Type":"maxCost", "Value":"100" }
	QueryCondition *string `json:"QueryCondition,omitempty" xml:"QueryCondition,omitempty"`
	// The ID of the resource group to which the instance belongs. For more information about how to obtain the ID of a resource group, see [View basic information of a resource group](https://help.aliyun.com/document_detail/151181.html).
	//
	// example:
	//
	// rg-bp67acfmxazb4p****
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	// The beginning of the time range to query. Specify the time in the *yyyy-MM-dd*T*HH:mm*Z format. The time must be in UTC.
	//
	// example:
	//
	// 2022-05-07T06:59Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The name of the database account.
	//
	// example:
	//
	// adbpguser
	User *string `json:"User,omitempty" xml:"User,omitempty"`
}

func (s DownloadDiagnosisRecordsRequest) String() string {
	return tea.Prettify(s)
}

func (s DownloadDiagnosisRecordsRequest) GoString() string {
	return s.String()
}

func (s *DownloadDiagnosisRecordsRequest) SetDBInstanceId(v string) *DownloadDiagnosisRecordsRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DownloadDiagnosisRecordsRequest) SetDatabase(v string) *DownloadDiagnosisRecordsRequest {
	s.Database = &v
	return s
}

func (s *DownloadDiagnosisRecordsRequest) SetEndTime(v string) *DownloadDiagnosisRecordsRequest {
	s.EndTime = &v
	return s
}

func (s *DownloadDiagnosisRecordsRequest) SetLang(v string) *DownloadDiagnosisRecordsRequest {
	s.Lang = &v
	return s
}

func (s *DownloadDiagnosisRecordsRequest) SetQueryCondition(v string) *DownloadDiagnosisRecordsRequest {
	s.QueryCondition = &v
	return s
}

func (s *DownloadDiagnosisRecordsRequest) SetResourceGroupId(v string) *DownloadDiagnosisRecordsRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *DownloadDiagnosisRecordsRequest) SetStartTime(v string) *DownloadDiagnosisRecordsRequest {
	s.StartTime = &v
	return s
}

func (s *DownloadDiagnosisRecordsRequest) SetUser(v string) *DownloadDiagnosisRecordsRequest {
	s.User = &v
	return s
}

type DownloadDiagnosisRecordsResponseBody struct {
	// The ID of the instance.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The ID of the download task.
	//
	// example:
	//
	// 11
	DownloadId *string `json:"DownloadId,omitempty" xml:"DownloadId,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// B4CAF581-2AC7-41AD-8940-D56DF7AADF5B
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DownloadDiagnosisRecordsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DownloadDiagnosisRecordsResponseBody) GoString() string {
	return s.String()
}

func (s *DownloadDiagnosisRecordsResponseBody) SetDBInstanceId(v string) *DownloadDiagnosisRecordsResponseBody {
	s.DBInstanceId = &v
	return s
}

func (s *DownloadDiagnosisRecordsResponseBody) SetDownloadId(v string) *DownloadDiagnosisRecordsResponseBody {
	s.DownloadId = &v
	return s
}

func (s *DownloadDiagnosisRecordsResponseBody) SetRequestId(v string) *DownloadDiagnosisRecordsResponseBody {
	s.RequestId = &v
	return s
}

type DownloadDiagnosisRecordsResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DownloadDiagnosisRecordsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DownloadDiagnosisRecordsResponse) String() string {
	return tea.Prettify(s)
}

func (s DownloadDiagnosisRecordsResponse) GoString() string {
	return s.String()
}

func (s *DownloadDiagnosisRecordsResponse) SetHeaders(v map[string]*string) *DownloadDiagnosisRecordsResponse {
	s.Headers = v
	return s
}

func (s *DownloadDiagnosisRecordsResponse) SetStatusCode(v int32) *DownloadDiagnosisRecordsResponse {
	s.StatusCode = &v
	return s
}

func (s *DownloadDiagnosisRecordsResponse) SetBody(v *DownloadDiagnosisRecordsResponseBody) *DownloadDiagnosisRecordsResponse {
	s.Body = v
	return s
}

type DownloadSQLLogsRecordsRequest struct {
	// The instance ID.
	//
	// > You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The name of the database.
	//
	// example:
	//
	// testdb
	Database *string `json:"Database,omitempty" xml:"Database,omitempty"`
	// The end of the time range to query. Specify the time in the yyyy-MM-ddTHH:mm:ssZ format. The end time must be later than the start time.
	//
	// This parameter is required.
	//
	// example:
	//
	// 2023-05-08T06:59Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The execution duration of the SQL statement. Unit: seconds.
	//
	// example:
	//
	// 1
	ExecuteCost *string `json:"ExecuteCost,omitempty" xml:"ExecuteCost,omitempty"`
	// The execution status of the SQL statement.
	//
	// 	- **1**: successful.
	//
	// 	- **0**: failed.
	//
	// example:
	//
	// 1
	ExecuteState *string `json:"ExecuteState,omitempty" xml:"ExecuteState,omitempty"`
	// The language of the file that contains the query diagnostic information. Valid values:
	//
	// 	- **zh**: simplified Chinese.
	//
	// 	- **en**: English.
	//
	// 	- **ja**: Japanese.
	//
	// 	- **zh-tw**: traditional Chinese.
	//
	// example:
	//
	// zh
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// The maximum amount of time consumed by a slow query. Unit: seconds. Minimum value: 0.
	//
	// example:
	//
	// 999
	MaxExecuteCost *string `json:"MaxExecuteCost,omitempty" xml:"MaxExecuteCost,omitempty"`
	// The minimum amount of time consumed by a slow query. Unit: seconds. Minimum value: 0.
	//
	// example:
	//
	// 1
	MinExecuteCost *string `json:"MinExecuteCost,omitempty" xml:"MinExecuteCost,omitempty"`
	// The type of the query language. Example: DQL, DML, or DDL.
	//
	// example:
	//
	// DQL
	OperationClass *string `json:"OperationClass,omitempty" xml:"OperationClass,omitempty"`
	// The type of the SQL statement. Example: SELECT.
	//
	// example:
	//
	// SELECT
	OperationType *string `json:"OperationType,omitempty" xml:"OperationType,omitempty"`
	// The page number. Pages start from page 1. Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. Valid values:
	//
	// 	- **30**
	//
	// 	- **50**
	//
	// 	- **100**
	//
	// Default value: **30**.
	//
	// example:
	//
	// 30
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The keywords that are used for query.
	//
	// example:
	//
	// select 1
	QueryKeywords *string `json:"QueryKeywords,omitempty" xml:"QueryKeywords,omitempty"`
	// The source IP address.
	//
	// example:
	//
	// 100.XX.XX.90
	SourceIP *string `json:"SourceIP,omitempty" xml:"SourceIP,omitempty"`
	// The beginning of the time range to query. Specify the time in the yyyy-MM-ddTHH:mmZ format. The time must be in UTC.
	//
	// This parameter is required.
	//
	// example:
	//
	// 2023-05-07T06:59Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The name of the database account.
	//
	// example:
	//
	// testuser
	User *string `json:"User,omitempty" xml:"User,omitempty"`
}

func (s DownloadSQLLogsRecordsRequest) String() string {
	return tea.Prettify(s)
}

func (s DownloadSQLLogsRecordsRequest) GoString() string {
	return s.String()
}

func (s *DownloadSQLLogsRecordsRequest) SetDBInstanceId(v string) *DownloadSQLLogsRecordsRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DownloadSQLLogsRecordsRequest) SetDatabase(v string) *DownloadSQLLogsRecordsRequest {
	s.Database = &v
	return s
}

func (s *DownloadSQLLogsRecordsRequest) SetEndTime(v string) *DownloadSQLLogsRecordsRequest {
	s.EndTime = &v
	return s
}

func (s *DownloadSQLLogsRecordsRequest) SetExecuteCost(v string) *DownloadSQLLogsRecordsRequest {
	s.ExecuteCost = &v
	return s
}

func (s *DownloadSQLLogsRecordsRequest) SetExecuteState(v string) *DownloadSQLLogsRecordsRequest {
	s.ExecuteState = &v
	return s
}

func (s *DownloadSQLLogsRecordsRequest) SetLang(v string) *DownloadSQLLogsRecordsRequest {
	s.Lang = &v
	return s
}

func (s *DownloadSQLLogsRecordsRequest) SetMaxExecuteCost(v string) *DownloadSQLLogsRecordsRequest {
	s.MaxExecuteCost = &v
	return s
}

func (s *DownloadSQLLogsRecordsRequest) SetMinExecuteCost(v string) *DownloadSQLLogsRecordsRequest {
	s.MinExecuteCost = &v
	return s
}

func (s *DownloadSQLLogsRecordsRequest) SetOperationClass(v string) *DownloadSQLLogsRecordsRequest {
	s.OperationClass = &v
	return s
}

func (s *DownloadSQLLogsRecordsRequest) SetOperationType(v string) *DownloadSQLLogsRecordsRequest {
	s.OperationType = &v
	return s
}

func (s *DownloadSQLLogsRecordsRequest) SetPageNumber(v int32) *DownloadSQLLogsRecordsRequest {
	s.PageNumber = &v
	return s
}

func (s *DownloadSQLLogsRecordsRequest) SetPageSize(v int32) *DownloadSQLLogsRecordsRequest {
	s.PageSize = &v
	return s
}

func (s *DownloadSQLLogsRecordsRequest) SetQueryKeywords(v string) *DownloadSQLLogsRecordsRequest {
	s.QueryKeywords = &v
	return s
}

func (s *DownloadSQLLogsRecordsRequest) SetSourceIP(v string) *DownloadSQLLogsRecordsRequest {
	s.SourceIP = &v
	return s
}

func (s *DownloadSQLLogsRecordsRequest) SetStartTime(v string) *DownloadSQLLogsRecordsRequest {
	s.StartTime = &v
	return s
}

func (s *DownloadSQLLogsRecordsRequest) SetUser(v string) *DownloadSQLLogsRecordsRequest {
	s.User = &v
	return s
}

type DownloadSQLLogsRecordsResponseBody struct {
	// The ID of the download task.
	//
	// example:
	//
	// 11
	DownloadId *int64 `json:"DownloadId,omitempty" xml:"DownloadId,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 7565770E-7C45-462D-BA4A-8A5396F2CAD1
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DownloadSQLLogsRecordsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DownloadSQLLogsRecordsResponseBody) GoString() string {
	return s.String()
}

func (s *DownloadSQLLogsRecordsResponseBody) SetDownloadId(v int64) *DownloadSQLLogsRecordsResponseBody {
	s.DownloadId = &v
	return s
}

func (s *DownloadSQLLogsRecordsResponseBody) SetRequestId(v string) *DownloadSQLLogsRecordsResponseBody {
	s.RequestId = &v
	return s
}

type DownloadSQLLogsRecordsResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DownloadSQLLogsRecordsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DownloadSQLLogsRecordsResponse) String() string {
	return tea.Prettify(s)
}

func (s DownloadSQLLogsRecordsResponse) GoString() string {
	return s.String()
}

func (s *DownloadSQLLogsRecordsResponse) SetHeaders(v map[string]*string) *DownloadSQLLogsRecordsResponse {
	s.Headers = v
	return s
}

func (s *DownloadSQLLogsRecordsResponse) SetStatusCode(v int32) *DownloadSQLLogsRecordsResponse {
	s.StatusCode = &v
	return s
}

func (s *DownloadSQLLogsRecordsResponse) SetBody(v *DownloadSQLLogsRecordsResponseBody) *DownloadSQLLogsRecordsResponse {
	s.Body = v
	return s
}

type EnableDBResourceGroupRequest struct {
	// The instance ID.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s EnableDBResourceGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s EnableDBResourceGroupRequest) GoString() string {
	return s.String()
}

func (s *EnableDBResourceGroupRequest) SetDBInstanceId(v string) *EnableDBResourceGroupRequest {
	s.DBInstanceId = &v
	return s
}

func (s *EnableDBResourceGroupRequest) SetOwnerId(v int64) *EnableDBResourceGroupRequest {
	s.OwnerId = &v
	return s
}

type EnableDBResourceGroupResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 5850BF81-1A2B-5ACE-AF41-57**********
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s EnableDBResourceGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s EnableDBResourceGroupResponseBody) GoString() string {
	return s.String()
}

func (s *EnableDBResourceGroupResponseBody) SetRequestId(v string) *EnableDBResourceGroupResponseBody {
	s.RequestId = &v
	return s
}

type EnableDBResourceGroupResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *EnableDBResourceGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s EnableDBResourceGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s EnableDBResourceGroupResponse) GoString() string {
	return s.String()
}

func (s *EnableDBResourceGroupResponse) SetHeaders(v map[string]*string) *EnableDBResourceGroupResponse {
	s.Headers = v
	return s
}

func (s *EnableDBResourceGroupResponse) SetStatusCode(v int32) *EnableDBResourceGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *EnableDBResourceGroupResponse) SetBody(v *EnableDBResourceGroupResponseBody) *EnableDBResourceGroupResponse {
	s.Body = v
	return s
}

type ExecuteStatementRequest struct {
	// The instance ID.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The name of the database.
	//
	// This parameter is required.
	//
	// example:
	//
	// adbtest
	Database *string `json:"Database,omitempty" xml:"Database,omitempty"`
	OwnerId  *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The configuration parameters.
	Parameters             []interface{}                                  `json:"Parameters,omitempty" xml:"Parameters,omitempty" type:"Repeated"`
	RagWorkspaceCollection *ExecuteStatementRequestRagWorkspaceCollection `json:"RagWorkspaceCollection,omitempty" xml:"RagWorkspaceCollection,omitempty" type:"Struct"`
	// The region ID of the instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-beijing
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The execution type. Valid values:
	//
	// 	- synchronous
	//
	// 	- asynchronous (not supported)
	//
	// example:
	//
	// synchronous
	RunType *string `json:"RunType,omitempty" xml:"RunType,omitempty"`
	// The Alibaba Cloud Resource Name (ARN) of the access credential for the created Data API account. You can call the CreateSecret operation to create an access credential.
	//
	// >  To call the ExecuteStatement operation as a Resource Access Management (RAM) user, the RAM user must have the permissions to call the UseSecret or GetSecretValue operation on the ARN of the access credential.
	//
	// This parameter is required.
	//
	// example:
	//
	// acs:gpdb:cn-beijing:1033**:secret/testsecret-eG2AQGRIwQ0zFp4VA7mYL3uiCXTfDQbQ
	SecretArn *string `json:"SecretArn,omitempty" xml:"SecretArn,omitempty"`
	// The SQL statements that you want to execute.
	//
	// example:
	//
	// select 	- from table1
	Sql *string `json:"Sql,omitempty" xml:"Sql,omitempty"`
	// The SQL statements.
	Sqls []*string `json:"Sqls,omitempty" xml:"Sqls,omitempty" type:"Repeated"`
	// The name of the set of SQL statements that you want to execute. This parameter takes effect when the RunType parameter is set to asynchronous.
	//
	// example:
	//
	// test
	StatementName *string `json:"StatementName,omitempty" xml:"StatementName,omitempty"`
	WorkspaceId   *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s ExecuteStatementRequest) String() string {
	return tea.Prettify(s)
}

func (s ExecuteStatementRequest) GoString() string {
	return s.String()
}

func (s *ExecuteStatementRequest) SetDBInstanceId(v string) *ExecuteStatementRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ExecuteStatementRequest) SetDatabase(v string) *ExecuteStatementRequest {
	s.Database = &v
	return s
}

func (s *ExecuteStatementRequest) SetOwnerId(v int64) *ExecuteStatementRequest {
	s.OwnerId = &v
	return s
}

func (s *ExecuteStatementRequest) SetParameters(v []interface{}) *ExecuteStatementRequest {
	s.Parameters = v
	return s
}

func (s *ExecuteStatementRequest) SetRagWorkspaceCollection(v *ExecuteStatementRequestRagWorkspaceCollection) *ExecuteStatementRequest {
	s.RagWorkspaceCollection = v
	return s
}

func (s *ExecuteStatementRequest) SetRegionId(v string) *ExecuteStatementRequest {
	s.RegionId = &v
	return s
}

func (s *ExecuteStatementRequest) SetRunType(v string) *ExecuteStatementRequest {
	s.RunType = &v
	return s
}

func (s *ExecuteStatementRequest) SetSecretArn(v string) *ExecuteStatementRequest {
	s.SecretArn = &v
	return s
}

func (s *ExecuteStatementRequest) SetSql(v string) *ExecuteStatementRequest {
	s.Sql = &v
	return s
}

func (s *ExecuteStatementRequest) SetSqls(v []*string) *ExecuteStatementRequest {
	s.Sqls = v
	return s
}

func (s *ExecuteStatementRequest) SetStatementName(v string) *ExecuteStatementRequest {
	s.StatementName = &v
	return s
}

func (s *ExecuteStatementRequest) SetWorkspaceId(v string) *ExecuteStatementRequest {
	s.WorkspaceId = &v
	return s
}

type ExecuteStatementRequestRagWorkspaceCollection struct {
	Collection *string `json:"Collection,omitempty" xml:"Collection,omitempty"`
	Namespace  *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
}

func (s ExecuteStatementRequestRagWorkspaceCollection) String() string {
	return tea.Prettify(s)
}

func (s ExecuteStatementRequestRagWorkspaceCollection) GoString() string {
	return s.String()
}

func (s *ExecuteStatementRequestRagWorkspaceCollection) SetCollection(v string) *ExecuteStatementRequestRagWorkspaceCollection {
	s.Collection = &v
	return s
}

func (s *ExecuteStatementRequestRagWorkspaceCollection) SetNamespace(v string) *ExecuteStatementRequestRagWorkspaceCollection {
	s.Namespace = &v
	return s
}

type ExecuteStatementShrinkRequest struct {
	// The instance ID.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The name of the database.
	//
	// This parameter is required.
	//
	// example:
	//
	// adbtest
	Database *string `json:"Database,omitempty" xml:"Database,omitempty"`
	OwnerId  *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The configuration parameters.
	ParametersShrink             *string `json:"Parameters,omitempty" xml:"Parameters,omitempty"`
	RagWorkspaceCollectionShrink *string `json:"RagWorkspaceCollection,omitempty" xml:"RagWorkspaceCollection,omitempty"`
	// The region ID of the instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-beijing
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The execution type. Valid values:
	//
	// 	- synchronous
	//
	// 	- asynchronous (not supported)
	//
	// example:
	//
	// synchronous
	RunType *string `json:"RunType,omitempty" xml:"RunType,omitempty"`
	// The Alibaba Cloud Resource Name (ARN) of the access credential for the created Data API account. You can call the CreateSecret operation to create an access credential.
	//
	// >  To call the ExecuteStatement operation as a Resource Access Management (RAM) user, the RAM user must have the permissions to call the UseSecret or GetSecretValue operation on the ARN of the access credential.
	//
	// This parameter is required.
	//
	// example:
	//
	// acs:gpdb:cn-beijing:1033**:secret/testsecret-eG2AQGRIwQ0zFp4VA7mYL3uiCXTfDQbQ
	SecretArn *string `json:"SecretArn,omitempty" xml:"SecretArn,omitempty"`
	// The SQL statements that you want to execute.
	//
	// example:
	//
	// select 	- from table1
	Sql *string `json:"Sql,omitempty" xml:"Sql,omitempty"`
	// The SQL statements.
	SqlsShrink *string `json:"Sqls,omitempty" xml:"Sqls,omitempty"`
	// The name of the set of SQL statements that you want to execute. This parameter takes effect when the RunType parameter is set to asynchronous.
	//
	// example:
	//
	// test
	StatementName *string `json:"StatementName,omitempty" xml:"StatementName,omitempty"`
	WorkspaceId   *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s ExecuteStatementShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s ExecuteStatementShrinkRequest) GoString() string {
	return s.String()
}

func (s *ExecuteStatementShrinkRequest) SetDBInstanceId(v string) *ExecuteStatementShrinkRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ExecuteStatementShrinkRequest) SetDatabase(v string) *ExecuteStatementShrinkRequest {
	s.Database = &v
	return s
}

func (s *ExecuteStatementShrinkRequest) SetOwnerId(v int64) *ExecuteStatementShrinkRequest {
	s.OwnerId = &v
	return s
}

func (s *ExecuteStatementShrinkRequest) SetParametersShrink(v string) *ExecuteStatementShrinkRequest {
	s.ParametersShrink = &v
	return s
}

func (s *ExecuteStatementShrinkRequest) SetRagWorkspaceCollectionShrink(v string) *ExecuteStatementShrinkRequest {
	s.RagWorkspaceCollectionShrink = &v
	return s
}

func (s *ExecuteStatementShrinkRequest) SetRegionId(v string) *ExecuteStatementShrinkRequest {
	s.RegionId = &v
	return s
}

func (s *ExecuteStatementShrinkRequest) SetRunType(v string) *ExecuteStatementShrinkRequest {
	s.RunType = &v
	return s
}

func (s *ExecuteStatementShrinkRequest) SetSecretArn(v string) *ExecuteStatementShrinkRequest {
	s.SecretArn = &v
	return s
}

func (s *ExecuteStatementShrinkRequest) SetSql(v string) *ExecuteStatementShrinkRequest {
	s.Sql = &v
	return s
}

func (s *ExecuteStatementShrinkRequest) SetSqlsShrink(v string) *ExecuteStatementShrinkRequest {
	s.SqlsShrink = &v
	return s
}

func (s *ExecuteStatementShrinkRequest) SetStatementName(v string) *ExecuteStatementShrinkRequest {
	s.StatementName = &v
	return s
}

func (s *ExecuteStatementShrinkRequest) SetWorkspaceId(v string) *ExecuteStatementShrinkRequest {
	s.WorkspaceId = &v
	return s
}

type ExecuteStatementResponseBody struct {
	// The time when the SQL statements were created.
	//
	// example:
	//
	// 2023-12-04T10:08:47+0800
	CreatedAt *string `json:"CreatedAt,omitempty" xml:"CreatedAt,omitempty"`
	// The instance ID.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The returned results of the synchronous call.
	Data *ExecuteStatementResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The name of the database.
	//
	// example:
	//
	// adbtest
	Database *string `json:"Database,omitempty" xml:"Database,omitempty"`
	// The ID of the job for asynchronously executing the SQL statements.
	//
	// example:
	//
	// ABB39CC3
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// The returned message.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The ARN of the access credential for the created Data API account.
	//
	// example:
	//
	// acs:gpdb:cn-beijing:1033**:secret/testsecret-eG2AQGRIwQ0zFp4VA7mYL3uiCXTfDQbQ
	SecretArn *string `json:"SecretArn,omitempty" xml:"SecretArn,omitempty"`
	// The status of the operation. Valid values:
	//
	// 	- **success**
	//
	// 	- **fail**
	//
	// example:
	//
	// success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ExecuteStatementResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ExecuteStatementResponseBody) GoString() string {
	return s.String()
}

func (s *ExecuteStatementResponseBody) SetCreatedAt(v string) *ExecuteStatementResponseBody {
	s.CreatedAt = &v
	return s
}

func (s *ExecuteStatementResponseBody) SetDBInstanceId(v string) *ExecuteStatementResponseBody {
	s.DBInstanceId = &v
	return s
}

func (s *ExecuteStatementResponseBody) SetData(v *ExecuteStatementResponseBodyData) *ExecuteStatementResponseBody {
	s.Data = v
	return s
}

func (s *ExecuteStatementResponseBody) SetDatabase(v string) *ExecuteStatementResponseBody {
	s.Database = &v
	return s
}

func (s *ExecuteStatementResponseBody) SetId(v string) *ExecuteStatementResponseBody {
	s.Id = &v
	return s
}

func (s *ExecuteStatementResponseBody) SetMessage(v string) *ExecuteStatementResponseBody {
	s.Message = &v
	return s
}

func (s *ExecuteStatementResponseBody) SetRequestId(v string) *ExecuteStatementResponseBody {
	s.RequestId = &v
	return s
}

func (s *ExecuteStatementResponseBody) SetSecretArn(v string) *ExecuteStatementResponseBody {
	s.SecretArn = &v
	return s
}

func (s *ExecuteStatementResponseBody) SetStatus(v string) *ExecuteStatementResponseBody {
	s.Status = &v
	return s
}

type ExecuteStatementResponseBodyData struct {
	// The metadata of the columns.
	ColumnMetadata *ExecuteStatementResponseBodyDataColumnMetadata `json:"ColumnMetadata,omitempty" xml:"ColumnMetadata,omitempty" type:"Struct"`
	// The rows of data.
	Records *ExecuteStatementResponseBodyDataRecords `json:"Records,omitempty" xml:"Records,omitempty" type:"Struct"`
	// The total number of entries returned.
	//
	// example:
	//
	// 10
	TotalNumRows *int64 `json:"TotalNumRows,omitempty" xml:"TotalNumRows,omitempty"`
}

func (s ExecuteStatementResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ExecuteStatementResponseBodyData) GoString() string {
	return s.String()
}

func (s *ExecuteStatementResponseBodyData) SetColumnMetadata(v *ExecuteStatementResponseBodyDataColumnMetadata) *ExecuteStatementResponseBodyData {
	s.ColumnMetadata = v
	return s
}

func (s *ExecuteStatementResponseBodyData) SetRecords(v *ExecuteStatementResponseBodyDataRecords) *ExecuteStatementResponseBodyData {
	s.Records = v
	return s
}

func (s *ExecuteStatementResponseBodyData) SetTotalNumRows(v int64) *ExecuteStatementResponseBodyData {
	s.TotalNumRows = &v
	return s
}

type ExecuteStatementResponseBodyDataColumnMetadata struct {
	ColumnMetadata []*ColumnMetadata `json:"ColumnMetadata,omitempty" xml:"ColumnMetadata,omitempty" type:"Repeated"`
}

func (s ExecuteStatementResponseBodyDataColumnMetadata) String() string {
	return tea.Prettify(s)
}

func (s ExecuteStatementResponseBodyDataColumnMetadata) GoString() string {
	return s.String()
}

func (s *ExecuteStatementResponseBodyDataColumnMetadata) SetColumnMetadata(v []*ColumnMetadata) *ExecuteStatementResponseBodyDataColumnMetadata {
	s.ColumnMetadata = v
	return s
}

type ExecuteStatementResponseBodyDataRecords struct {
	Records []*ExecuteStatementResponseBodyDataRecordsRecords `json:"Records,omitempty" xml:"Records,omitempty" type:"Repeated"`
}

func (s ExecuteStatementResponseBodyDataRecords) String() string {
	return tea.Prettify(s)
}

func (s ExecuteStatementResponseBodyDataRecords) GoString() string {
	return s.String()
}

func (s *ExecuteStatementResponseBodyDataRecords) SetRecords(v []*ExecuteStatementResponseBodyDataRecordsRecords) *ExecuteStatementResponseBodyDataRecords {
	s.Records = v
	return s
}

type ExecuteStatementResponseBodyDataRecordsRecords struct {
	Record []*Field `json:"Record,omitempty" xml:"Record,omitempty" type:"Repeated"`
}

func (s ExecuteStatementResponseBodyDataRecordsRecords) String() string {
	return tea.Prettify(s)
}

func (s ExecuteStatementResponseBodyDataRecordsRecords) GoString() string {
	return s.String()
}

func (s *ExecuteStatementResponseBodyDataRecordsRecords) SetRecord(v []*Field) *ExecuteStatementResponseBodyDataRecordsRecords {
	s.Record = v
	return s
}

type ExecuteStatementResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ExecuteStatementResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ExecuteStatementResponse) String() string {
	return tea.Prettify(s)
}

func (s ExecuteStatementResponse) GoString() string {
	return s.String()
}

func (s *ExecuteStatementResponse) SetHeaders(v map[string]*string) *ExecuteStatementResponse {
	s.Headers = v
	return s
}

func (s *ExecuteStatementResponse) SetStatusCode(v int32) *ExecuteStatementResponse {
	s.StatusCode = &v
	return s
}

func (s *ExecuteStatementResponse) SetBody(v *ExecuteStatementResponseBody) *ExecuteStatementResponse {
	s.Body = v
	return s
}

type GetAccountRequest struct {
	// The name of the database account.
	//
	// This parameter is required.
	//
	// example:
	//
	// testuser
	AccountName *string `json:"AccountName,omitempty" xml:"AccountName,omitempty"`
	// The instance ID.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the IDs of all AnalyticDB for PostgreSQL instances in a specific region.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
}

func (s GetAccountRequest) String() string {
	return tea.Prettify(s)
}

func (s GetAccountRequest) GoString() string {
	return s.String()
}

func (s *GetAccountRequest) SetAccountName(v string) *GetAccountRequest {
	s.AccountName = &v
	return s
}

func (s *GetAccountRequest) SetDBInstanceId(v string) *GetAccountRequest {
	s.DBInstanceId = &v
	return s
}

type GetAccountResponseBody struct {
	// The new description of the database account.
	//
	// 	- The description must start with a letter.
	//
	// 	- The description cannot start with `http://` or `https://`.
	//
	// 	- The description can contain letters, underscores (_), hyphens (-), and digits.
	//
	// 	- The description must be 2 to 256 characters in length.
	//
	// example:
	//
	// The instance used by this account to log in is DBInstanceId. The name used to log in is AccountName.
	AccountDescription *string `json:"AccountDescription,omitempty" xml:"AccountDescription,omitempty"`
	// The name of the initial account.
	//
	// 	- The name can contain lowercase letters, digits, and underscores (_).
	//
	// 	- The name must start with a lowercase letter and end with a lowercase letter or a digit.
	//
	// 	- The name cannot start with gp.
	//
	// 	- The name must be 2 to 16 characters in length.
	//
	// example:
	//
	// testaccount
	AccountName *string `json:"AccountName,omitempty" xml:"AccountName,omitempty"`
	// The status of the member that you want to query.
	//
	// 	- **enabled**: managed.
	//
	// 	- **disabled**: not managed.
	//
	// 	- **disabling**: being deleted.
	//
	// example:
	//
	// 1
	AccountStatus *string `json:"AccountStatus,omitempty" xml:"AccountStatus,omitempty"`
	// 	- Normal: standard account
	//
	// 	- Super: privileged account
	//
	// example:
	//
	// Normal
	AccountType *string `json:"AccountType,omitempty" xml:"AccountType,omitempty"`
	// The instance ID.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// Id of the request
	//
	// example:
	//
	// CA7E4276-E2D5-5F8D-AF06-9EAB3F6C****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetAccountResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetAccountResponseBody) GoString() string {
	return s.String()
}

func (s *GetAccountResponseBody) SetAccountDescription(v string) *GetAccountResponseBody {
	s.AccountDescription = &v
	return s
}

func (s *GetAccountResponseBody) SetAccountName(v string) *GetAccountResponseBody {
	s.AccountName = &v
	return s
}

func (s *GetAccountResponseBody) SetAccountStatus(v string) *GetAccountResponseBody {
	s.AccountStatus = &v
	return s
}

func (s *GetAccountResponseBody) SetAccountType(v string) *GetAccountResponseBody {
	s.AccountType = &v
	return s
}

func (s *GetAccountResponseBody) SetDBInstanceId(v string) *GetAccountResponseBody {
	s.DBInstanceId = &v
	return s
}

func (s *GetAccountResponseBody) SetRequestId(v string) *GetAccountResponseBody {
	s.RequestId = &v
	return s
}

type GetAccountResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetAccountResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetAccountResponse) String() string {
	return tea.Prettify(s)
}

func (s GetAccountResponse) GoString() string {
	return s.String()
}

func (s *GetAccountResponse) SetHeaders(v map[string]*string) *GetAccountResponse {
	s.Headers = v
	return s
}

func (s *GetAccountResponse) SetStatusCode(v int32) *GetAccountResponse {
	s.StatusCode = &v
	return s
}

func (s *GetAccountResponse) SetBody(v *GetAccountResponseBody) *GetAccountResponse {
	s.Body = v
	return s
}

type GetSecretValueRequest struct {
	// The instance ID.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The region ID of the instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-beijing
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The Alibaba Cloud Resource Name (ARN) of the access credential for the created Data API account. Format: `acs:gpdb:{{region}}:{{accountId}}:secret/{{secretName}}-{{32 digits random string}`.
	//
	// >  You must specify one of the SecretArn and SecretName parameters.
	//
	// example:
	//
	// acs:gpdb:cn-beijing:1033**:secret/testsecret-eG2AQGRIwQ0zFp4VA7mYL3uiCXTfDQbQ
	SecretArn *string `json:"SecretArn,omitempty" xml:"SecretArn,omitempty"`
	// The name of the access credential.
	//
	// >  You must specify one of the SecretArn and SecretName parameters.
	//
	// example:
	//
	// testsecret
	SecretName  *string `json:"SecretName,omitempty" xml:"SecretName,omitempty"`
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s GetSecretValueRequest) String() string {
	return tea.Prettify(s)
}

func (s GetSecretValueRequest) GoString() string {
	return s.String()
}

func (s *GetSecretValueRequest) SetDBInstanceId(v string) *GetSecretValueRequest {
	s.DBInstanceId = &v
	return s
}

func (s *GetSecretValueRequest) SetOwnerId(v int64) *GetSecretValueRequest {
	s.OwnerId = &v
	return s
}

func (s *GetSecretValueRequest) SetRegionId(v string) *GetSecretValueRequest {
	s.RegionId = &v
	return s
}

func (s *GetSecretValueRequest) SetSecretArn(v string) *GetSecretValueRequest {
	s.SecretArn = &v
	return s
}

func (s *GetSecretValueRequest) SetSecretName(v string) *GetSecretValueRequest {
	s.SecretName = &v
	return s
}

func (s *GetSecretValueRequest) SetWorkspaceId(v string) *GetSecretValueRequest {
	s.WorkspaceId = &v
	return s
}

type GetSecretValueResponseBody struct {
	// The error code.
	//
	// example:
	//
	// Secret.NotFound
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The instance ID.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The description of the access credential.
	//
	// example:
	//
	// test secret
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The returned message.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The password of the database account.
	//
	// example:
	//
	// pwd123
	Password *string `json:"Password,omitempty" xml:"Password,omitempty"`
	// The request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The ARN of the access credential for the created Data API account. Format: `acs:gpdb:{{region}}:{{accountId}}:secret/{{secretName}}-{{32 digits random string}`.
	//
	// example:
	//
	// acs:gpdb:cn-beijing:1033**:secret/testsecret-eG2AQGRIwQ0zFp4VA7mYL3uiCXTfDQbQ
	SecretArn *string `json:"SecretArn,omitempty" xml:"SecretArn,omitempty"`
	// The name of the access credential.
	//
	// example:
	//
	// testsecret
	SecretName *string `json:"SecretName,omitempty" xml:"SecretName,omitempty"`
	// The status of the operation. Valid values:
	//
	// 	- **success**
	//
	// 	- **fail**
	//
	// example:
	//
	// success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The name of the database account.
	//
	// example:
	//
	// testacc
	Username *string `json:"Username,omitempty" xml:"Username,omitempty"`
}

func (s GetSecretValueResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetSecretValueResponseBody) GoString() string {
	return s.String()
}

func (s *GetSecretValueResponseBody) SetCode(v string) *GetSecretValueResponseBody {
	s.Code = &v
	return s
}

func (s *GetSecretValueResponseBody) SetDBInstanceId(v string) *GetSecretValueResponseBody {
	s.DBInstanceId = &v
	return s
}

func (s *GetSecretValueResponseBody) SetDescription(v string) *GetSecretValueResponseBody {
	s.Description = &v
	return s
}

func (s *GetSecretValueResponseBody) SetMessage(v string) *GetSecretValueResponseBody {
	s.Message = &v
	return s
}

func (s *GetSecretValueResponseBody) SetPassword(v string) *GetSecretValueResponseBody {
	s.Password = &v
	return s
}

func (s *GetSecretValueResponseBody) SetRequestId(v string) *GetSecretValueResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetSecretValueResponseBody) SetSecretArn(v string) *GetSecretValueResponseBody {
	s.SecretArn = &v
	return s
}

func (s *GetSecretValueResponseBody) SetSecretName(v string) *GetSecretValueResponseBody {
	s.SecretName = &v
	return s
}

func (s *GetSecretValueResponseBody) SetStatus(v string) *GetSecretValueResponseBody {
	s.Status = &v
	return s
}

func (s *GetSecretValueResponseBody) SetUsername(v string) *GetSecretValueResponseBody {
	s.Username = &v
	return s
}

type GetSecretValueResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetSecretValueResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetSecretValueResponse) String() string {
	return tea.Prettify(s)
}

func (s GetSecretValueResponse) GoString() string {
	return s.String()
}

func (s *GetSecretValueResponse) SetHeaders(v map[string]*string) *GetSecretValueResponse {
	s.Headers = v
	return s
}

func (s *GetSecretValueResponse) SetStatusCode(v int32) *GetSecretValueResponse {
	s.StatusCode = &v
	return s
}

func (s *GetSecretValueResponse) SetBody(v *GetSecretValueResponseBody) *GetSecretValueResponse {
	s.Body = v
	return s
}

type GetStatementResultRequest struct {
	// Instance ID. Can be obtained by calling DescribeDBInstances.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// Database name.
	//
	// example:
	//
	// test
	Database *string `json:"Database,omitempty" xml:"Database,omitempty"`
	// Task ID for asynchronous SQL execution.
	//
	// This parameter is required.
	//
	// example:
	//
	// 9A920F47-416A-4044-817C-7C2A72AD16D3
	Id      *string `json:"Id,omitempty" xml:"Id,omitempty"`
	OwnerId *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// Region ID where the instance is located.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-beijing
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// Access credential. Created through the CreateSecret interface.
	//
	// > When accessing this interface with a sub-account, the sub-account must have the UseSecret or GetSecretValue permission for this SecretArn.
	//
	// This parameter is required.
	//
	// example:
	//
	// acs:gpdb:cn-beijing:1033**:secret/testsecret-eG2AQGRIwQ0zFp4VA7mYL3uiCXTfDQbQ
	SecretArn *string `json:"SecretArn,omitempty" xml:"SecretArn,omitempty"`
}

func (s GetStatementResultRequest) String() string {
	return tea.Prettify(s)
}

func (s GetStatementResultRequest) GoString() string {
	return s.String()
}

func (s *GetStatementResultRequest) SetDBInstanceId(v string) *GetStatementResultRequest {
	s.DBInstanceId = &v
	return s
}

func (s *GetStatementResultRequest) SetDatabase(v string) *GetStatementResultRequest {
	s.Database = &v
	return s
}

func (s *GetStatementResultRequest) SetId(v string) *GetStatementResultRequest {
	s.Id = &v
	return s
}

func (s *GetStatementResultRequest) SetOwnerId(v int64) *GetStatementResultRequest {
	s.OwnerId = &v
	return s
}

func (s *GetStatementResultRequest) SetRegionId(v string) *GetStatementResultRequest {
	s.RegionId = &v
	return s
}

func (s *GetStatementResultRequest) SetSecretArn(v string) *GetStatementResultRequest {
	s.SecretArn = &v
	return s
}

type GetStatementResultResponseBody struct {
	// The result of the asynchronous call.
	Data *GetStatementResultResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// Return message.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// API execution status, with values as follows:
	//
	// - **false**: Execution failed.
	//
	// - **true**: Execution succeeded.
	//
	// example:
	//
	// success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetStatementResultResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetStatementResultResponseBody) GoString() string {
	return s.String()
}

func (s *GetStatementResultResponseBody) SetData(v *GetStatementResultResponseBodyData) *GetStatementResultResponseBody {
	s.Data = v
	return s
}

func (s *GetStatementResultResponseBody) SetMessage(v string) *GetStatementResultResponseBody {
	s.Message = &v
	return s
}

func (s *GetStatementResultResponseBody) SetRequestId(v string) *GetStatementResultResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetStatementResultResponseBody) SetStatus(v string) *GetStatementResultResponseBody {
	s.Status = &v
	return s
}

type GetStatementResultResponseBodyData struct {
	// List of column metadata.
	ColumnMetadata *GetStatementResultResponseBodyDataColumnMetadata `json:"ColumnMetadata,omitempty" xml:"ColumnMetadata,omitempty" type:"Struct"`
	// Multiple rows of data.
	Records *GetStatementResultResponseBodyDataRecords `json:"Records,omitempty" xml:"Records,omitempty" type:"Struct"`
	// Total number of entries.
	//
	// example:
	//
	// 10
	TotalNumRows *int64 `json:"TotalNumRows,omitempty" xml:"TotalNumRows,omitempty"`
}

func (s GetStatementResultResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetStatementResultResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetStatementResultResponseBodyData) SetColumnMetadata(v *GetStatementResultResponseBodyDataColumnMetadata) *GetStatementResultResponseBodyData {
	s.ColumnMetadata = v
	return s
}

func (s *GetStatementResultResponseBodyData) SetRecords(v *GetStatementResultResponseBodyDataRecords) *GetStatementResultResponseBodyData {
	s.Records = v
	return s
}

func (s *GetStatementResultResponseBodyData) SetTotalNumRows(v int64) *GetStatementResultResponseBodyData {
	s.TotalNumRows = &v
	return s
}

type GetStatementResultResponseBodyDataColumnMetadata struct {
	ColumnMetadata []*ColumnMetadata `json:"ColumnMetadata,omitempty" xml:"ColumnMetadata,omitempty" type:"Repeated"`
}

func (s GetStatementResultResponseBodyDataColumnMetadata) String() string {
	return tea.Prettify(s)
}

func (s GetStatementResultResponseBodyDataColumnMetadata) GoString() string {
	return s.String()
}

func (s *GetStatementResultResponseBodyDataColumnMetadata) SetColumnMetadata(v []*ColumnMetadata) *GetStatementResultResponseBodyDataColumnMetadata {
	s.ColumnMetadata = v
	return s
}

type GetStatementResultResponseBodyDataRecords struct {
	Records []*GetStatementResultResponseBodyDataRecordsRecords `json:"Records,omitempty" xml:"Records,omitempty" type:"Repeated"`
}

func (s GetStatementResultResponseBodyDataRecords) String() string {
	return tea.Prettify(s)
}

func (s GetStatementResultResponseBodyDataRecords) GoString() string {
	return s.String()
}

func (s *GetStatementResultResponseBodyDataRecords) SetRecords(v []*GetStatementResultResponseBodyDataRecordsRecords) *GetStatementResultResponseBodyDataRecords {
	s.Records = v
	return s
}

type GetStatementResultResponseBodyDataRecordsRecords struct {
	Record []*Field `json:"Record,omitempty" xml:"Record,omitempty" type:"Repeated"`
}

func (s GetStatementResultResponseBodyDataRecordsRecords) String() string {
	return tea.Prettify(s)
}

func (s GetStatementResultResponseBodyDataRecordsRecords) GoString() string {
	return s.String()
}

func (s *GetStatementResultResponseBodyDataRecordsRecords) SetRecord(v []*Field) *GetStatementResultResponseBodyDataRecordsRecords {
	s.Record = v
	return s
}

type GetStatementResultResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetStatementResultResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetStatementResultResponse) String() string {
	return tea.Prettify(s)
}

func (s GetStatementResultResponse) GoString() string {
	return s.String()
}

func (s *GetStatementResultResponse) SetHeaders(v map[string]*string) *GetStatementResultResponse {
	s.Headers = v
	return s
}

func (s *GetStatementResultResponse) SetStatusCode(v int32) *GetStatementResultResponse {
	s.StatusCode = &v
	return s
}

func (s *GetStatementResultResponse) SetBody(v *GetStatementResultResponseBody) *GetStatementResultResponse {
	s.Body = v
	return s
}

type GetUploadDocumentJobRequest struct {
	// The name of the document collection.
	//
	// >  You can call the [CreateDocumentCollection](https://help.aliyun.com/document_detail/2618448.html) operation to create a document collection and call the [ListDocumentCollections](https://help.aliyun.com/document_detail/2618452.html) operation to query a list of document collections.
	//
	// This parameter is required.
	//
	// example:
	//
	// document
	Collection *string `json:"Collection,omitempty" xml:"Collection,omitempty"`
	// The ID of the instance for which vector engine optimization is enabled.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The ID of the document upload job. You can call the `UploadDocumentAsync` operation to query the job ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// bf8f7bc4-9276-44f7-9c22-1d06edc8dfd1
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// The name of the namespace. Default value: public.
	//
	// >  You can call the [CreateNamespace](https://help.aliyun.com/document_detail/2401495.html) operation to create a namespace and call the [ListNamespaces](https://help.aliyun.com/document_detail/2401502.html) operation to query a list of namespaces.
	//
	// example:
	//
	// mynamespace
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// The password of the namespace.
	//
	// >  The value of this parameter is specified when you call the CreateNamespace operation.
	//
	// This parameter is required.
	//
	// example:
	//
	// testpassword
	NamespacePassword *string `json:"NamespacePassword,omitempty" xml:"NamespacePassword,omitempty"`
	OwnerId           *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The region ID of the instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s GetUploadDocumentJobRequest) String() string {
	return tea.Prettify(s)
}

func (s GetUploadDocumentJobRequest) GoString() string {
	return s.String()
}

func (s *GetUploadDocumentJobRequest) SetCollection(v string) *GetUploadDocumentJobRequest {
	s.Collection = &v
	return s
}

func (s *GetUploadDocumentJobRequest) SetDBInstanceId(v string) *GetUploadDocumentJobRequest {
	s.DBInstanceId = &v
	return s
}

func (s *GetUploadDocumentJobRequest) SetJobId(v string) *GetUploadDocumentJobRequest {
	s.JobId = &v
	return s
}

func (s *GetUploadDocumentJobRequest) SetNamespace(v string) *GetUploadDocumentJobRequest {
	s.Namespace = &v
	return s
}

func (s *GetUploadDocumentJobRequest) SetNamespacePassword(v string) *GetUploadDocumentJobRequest {
	s.NamespacePassword = &v
	return s
}

func (s *GetUploadDocumentJobRequest) SetOwnerId(v int64) *GetUploadDocumentJobRequest {
	s.OwnerId = &v
	return s
}

func (s *GetUploadDocumentJobRequest) SetRegionId(v string) *GetUploadDocumentJobRequest {
	s.RegionId = &v
	return s
}

type GetUploadDocumentJobResponseBody struct {
	// The chunking result.
	ChunkResult *GetUploadDocumentJobResponseBodyChunkResult `json:"ChunkResult,omitempty" xml:"ChunkResult,omitempty" type:"Struct"`
	// The information about the document upload job.
	Job *GetUploadDocumentJobResponseBodyJob `json:"Job,omitempty" xml:"Job,omitempty" type:"Struct"`
	// The returned message.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The status of the operation. Valid values:
	//
	// 	- **success**
	//
	// 	- **fail**
	//
	// example:
	//
	// success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The number of tokens that are used for document understanding or embedding.
	Usage *GetUploadDocumentJobResponseBodyUsage `json:"Usage,omitempty" xml:"Usage,omitempty" type:"Struct"`
}

func (s GetUploadDocumentJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetUploadDocumentJobResponseBody) GoString() string {
	return s.String()
}

func (s *GetUploadDocumentJobResponseBody) SetChunkResult(v *GetUploadDocumentJobResponseBodyChunkResult) *GetUploadDocumentJobResponseBody {
	s.ChunkResult = v
	return s
}

func (s *GetUploadDocumentJobResponseBody) SetJob(v *GetUploadDocumentJobResponseBodyJob) *GetUploadDocumentJobResponseBody {
	s.Job = v
	return s
}

func (s *GetUploadDocumentJobResponseBody) SetMessage(v string) *GetUploadDocumentJobResponseBody {
	s.Message = &v
	return s
}

func (s *GetUploadDocumentJobResponseBody) SetRequestId(v string) *GetUploadDocumentJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetUploadDocumentJobResponseBody) SetStatus(v string) *GetUploadDocumentJobResponseBody {
	s.Status = &v
	return s
}

func (s *GetUploadDocumentJobResponseBody) SetUsage(v *GetUploadDocumentJobResponseBodyUsage) *GetUploadDocumentJobResponseBody {
	s.Usage = v
	return s
}

type GetUploadDocumentJobResponseBodyChunkResult struct {
	// The URL of the file after chunking. The validity period of the URL is 2 hours. The file is in the JSONL format. Each line is in the `{"page_content":"*****", "metadata": {"**":"***","**":"***"}` format.
	//
	// example:
	//
	// http://xxx/test.jsonl
	ChunkFileUrl *string `json:"ChunkFileUrl,omitempty" xml:"ChunkFileUrl,omitempty"`
	// The URL of the file that does not contain metadata after chunking. The validity period of the URL is 2 hours. The file is in the TXT format. Each line is a chunk. The file can be easily used for embedding.
	//
	// example:
	//
	// http://xxx/test.txt
	PlainChunkFileUrl *string `json:"PlainChunkFileUrl,omitempty" xml:"PlainChunkFileUrl,omitempty"`
}

func (s GetUploadDocumentJobResponseBodyChunkResult) String() string {
	return tea.Prettify(s)
}

func (s GetUploadDocumentJobResponseBodyChunkResult) GoString() string {
	return s.String()
}

func (s *GetUploadDocumentJobResponseBodyChunkResult) SetChunkFileUrl(v string) *GetUploadDocumentJobResponseBodyChunkResult {
	s.ChunkFileUrl = &v
	return s
}

func (s *GetUploadDocumentJobResponseBodyChunkResult) SetPlainChunkFileUrl(v string) *GetUploadDocumentJobResponseBodyChunkResult {
	s.PlainChunkFileUrl = &v
	return s
}

type GetUploadDocumentJobResponseBodyJob struct {
	// Indicates whether the operation is complete.
	//
	// example:
	//
	// false
	Completed *bool `json:"Completed,omitempty" xml:"Completed,omitempty"`
	// The time when the job was created.
	//
	// example:
	//
	// 2024-01-08 16:52:04.864664
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The error message.
	//
	// example:
	//
	// Failed to connect database.
	Error *string `json:"Error,omitempty" xml:"Error,omitempty"`
	// The error code.
	//
	// example:
	//
	// InternalError
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// The job ID.
	//
	// example:
	//
	// 231460f8-75dc-405e-a669-0c5204887e91
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// The progress of the document upload job. Unit: %. A value of 100 indicates that the job is complete.
	//
	// example:
	//
	// 20
	Progress *int32 `json:"Progress,omitempty" xml:"Progress,omitempty"`
	// The status of the job. Valid values: Valid values:
	//
	// 	- Success
	//
	// 	- Failed (See the Error parameter for failure reasons.)
	//
	// 	- Cancelling
	//
	// 	- Cancelled
	//
	// 	- Start
	//
	// 	- Running
	//
	// 	- Pending
	//
	// example:
	//
	// Running
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The time when the job was updated.
	//
	// example:
	//
	// 2024-01-08 16:53:04.864664
	UpdateTime *string `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
}

func (s GetUploadDocumentJobResponseBodyJob) String() string {
	return tea.Prettify(s)
}

func (s GetUploadDocumentJobResponseBodyJob) GoString() string {
	return s.String()
}

func (s *GetUploadDocumentJobResponseBodyJob) SetCompleted(v bool) *GetUploadDocumentJobResponseBodyJob {
	s.Completed = &v
	return s
}

func (s *GetUploadDocumentJobResponseBodyJob) SetCreateTime(v string) *GetUploadDocumentJobResponseBodyJob {
	s.CreateTime = &v
	return s
}

func (s *GetUploadDocumentJobResponseBodyJob) SetError(v string) *GetUploadDocumentJobResponseBodyJob {
	s.Error = &v
	return s
}

func (s *GetUploadDocumentJobResponseBodyJob) SetErrorCode(v string) *GetUploadDocumentJobResponseBodyJob {
	s.ErrorCode = &v
	return s
}

func (s *GetUploadDocumentJobResponseBodyJob) SetId(v string) *GetUploadDocumentJobResponseBodyJob {
	s.Id = &v
	return s
}

func (s *GetUploadDocumentJobResponseBodyJob) SetProgress(v int32) *GetUploadDocumentJobResponseBodyJob {
	s.Progress = &v
	return s
}

func (s *GetUploadDocumentJobResponseBodyJob) SetStatus(v string) *GetUploadDocumentJobResponseBodyJob {
	s.Status = &v
	return s
}

func (s *GetUploadDocumentJobResponseBodyJob) SetUpdateTime(v string) *GetUploadDocumentJobResponseBodyJob {
	s.UpdateTime = &v
	return s
}

type GetUploadDocumentJobResponseBodyUsage struct {
	// The count of embedding entries.
	//
	// example:
	//
	// 10
	EmbeddingEntries *int32 `json:"EmbeddingEntries,omitempty" xml:"EmbeddingEntries,omitempty"`
	// The number of tokens that are used for vectorization.
	//
	// >  A token is the minimum unit for splitting text. A token can be a word, phrase, punctuation, or character.
	//
	// example:
	//
	// 475
	EmbeddingTokens *int32 `json:"EmbeddingTokens,omitempty" xml:"EmbeddingTokens,omitempty"`
}

func (s GetUploadDocumentJobResponseBodyUsage) String() string {
	return tea.Prettify(s)
}

func (s GetUploadDocumentJobResponseBodyUsage) GoString() string {
	return s.String()
}

func (s *GetUploadDocumentJobResponseBodyUsage) SetEmbeddingEntries(v int32) *GetUploadDocumentJobResponseBodyUsage {
	s.EmbeddingEntries = &v
	return s
}

func (s *GetUploadDocumentJobResponseBodyUsage) SetEmbeddingTokens(v int32) *GetUploadDocumentJobResponseBodyUsage {
	s.EmbeddingTokens = &v
	return s
}

type GetUploadDocumentJobResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetUploadDocumentJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetUploadDocumentJobResponse) String() string {
	return tea.Prettify(s)
}

func (s GetUploadDocumentJobResponse) GoString() string {
	return s.String()
}

func (s *GetUploadDocumentJobResponse) SetHeaders(v map[string]*string) *GetUploadDocumentJobResponse {
	s.Headers = v
	return s
}

func (s *GetUploadDocumentJobResponse) SetStatusCode(v int32) *GetUploadDocumentJobResponse {
	s.StatusCode = &v
	return s
}

func (s *GetUploadDocumentJobResponse) SetBody(v *GetUploadDocumentJobResponseBody) *GetUploadDocumentJobResponse {
	s.Body = v
	return s
}

type GetUpsertCollectionDataJobRequest struct {
	// The name of the collection.
	//
	// >  You can call the [ListCollections](https://help.aliyun.com/document_detail/2401503.html) operation to query a list of collections.
	//
	// This parameter is required.
	//
	// example:
	//
	// document
	Collection *string `json:"Collection,omitempty" xml:"Collection,omitempty"`
	// The instance ID.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The ID of the vector data upload job. You can call the `UpsertCollectionDataAsync` operation to query the job ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 231460f8-75dc-405e-a669-0c5204887e91
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// The name of the namespace. Default value: public.
	//
	// >  You can call the CreateNamespace operation to create a namespace and call the ListNamespaces operation to query a list of namespaces.
	//
	// example:
	//
	// mynamespace
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// The password of the namespace.
	//
	// >  The value of this parameter is specified when you call the CreateNamespace operation.
	//
	// This parameter is required.
	//
	// example:
	//
	// testpassword
	NamespacePassword *string `json:"NamespacePassword,omitempty" xml:"NamespacePassword,omitempty"`
	OwnerId           *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The region ID of the instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the workspace that consists of multiple AnalyticDB for PostgreSQL instances. You must specify one of the WorkspaceId and DBInstanceId parameters. If you specify both parameters, the WorkspaceId parameter takes effect.
	//
	// example:
	//
	// gp-ws-*****
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s GetUpsertCollectionDataJobRequest) String() string {
	return tea.Prettify(s)
}

func (s GetUpsertCollectionDataJobRequest) GoString() string {
	return s.String()
}

func (s *GetUpsertCollectionDataJobRequest) SetCollection(v string) *GetUpsertCollectionDataJobRequest {
	s.Collection = &v
	return s
}

func (s *GetUpsertCollectionDataJobRequest) SetDBInstanceId(v string) *GetUpsertCollectionDataJobRequest {
	s.DBInstanceId = &v
	return s
}

func (s *GetUpsertCollectionDataJobRequest) SetJobId(v string) *GetUpsertCollectionDataJobRequest {
	s.JobId = &v
	return s
}

func (s *GetUpsertCollectionDataJobRequest) SetNamespace(v string) *GetUpsertCollectionDataJobRequest {
	s.Namespace = &v
	return s
}

func (s *GetUpsertCollectionDataJobRequest) SetNamespacePassword(v string) *GetUpsertCollectionDataJobRequest {
	s.NamespacePassword = &v
	return s
}

func (s *GetUpsertCollectionDataJobRequest) SetOwnerId(v int64) *GetUpsertCollectionDataJobRequest {
	s.OwnerId = &v
	return s
}

func (s *GetUpsertCollectionDataJobRequest) SetRegionId(v string) *GetUpsertCollectionDataJobRequest {
	s.RegionId = &v
	return s
}

func (s *GetUpsertCollectionDataJobRequest) SetWorkspaceId(v string) *GetUpsertCollectionDataJobRequest {
	s.WorkspaceId = &v
	return s
}

type GetUpsertCollectionDataJobResponseBody struct {
	// The information about the vector data upload job.
	Job *GetUpsertCollectionDataJobResponseBodyJob `json:"Job,omitempty" xml:"Job,omitempty" type:"Struct"`
	// The returned message.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The status of the operation. Valid values:
	//
	// 	- **success**
	//
	// 	- **fail**
	//
	// example:
	//
	// success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetUpsertCollectionDataJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetUpsertCollectionDataJobResponseBody) GoString() string {
	return s.String()
}

func (s *GetUpsertCollectionDataJobResponseBody) SetJob(v *GetUpsertCollectionDataJobResponseBodyJob) *GetUpsertCollectionDataJobResponseBody {
	s.Job = v
	return s
}

func (s *GetUpsertCollectionDataJobResponseBody) SetMessage(v string) *GetUpsertCollectionDataJobResponseBody {
	s.Message = &v
	return s
}

func (s *GetUpsertCollectionDataJobResponseBody) SetRequestId(v string) *GetUpsertCollectionDataJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetUpsertCollectionDataJobResponseBody) SetStatus(v string) *GetUpsertCollectionDataJobResponseBody {
	s.Status = &v
	return s
}

type GetUpsertCollectionDataJobResponseBodyJob struct {
	// Indicates whether the operation is complete.
	//
	// example:
	//
	// false
	Completed *bool `json:"Completed,omitempty" xml:"Completed,omitempty"`
	// The time when the job was created.
	//
	// example:
	//
	// 2024-01-08 16:52:04.864664
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The error message.
	//
	// example:
	//
	// Failed to connect database.
	Error *string `json:"Error,omitempty" xml:"Error,omitempty"`
	// The job ID.
	//
	// example:
	//
	// 231460f8-75dc-405e-a669-0c5204887e91
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// The progress of the vector data upload job. The value of this parameter indicates the number of data entries that have been uploaded.
	//
	// example:
	//
	// 1600
	Progress *int32 `json:"Progress,omitempty" xml:"Progress,omitempty"`
	// The status of the job.
	//
	// >  Valid values:
	//
	// 	- Success
	//
	// 	- Failed (See the Error parameter for failure reasons.)
	//
	// 	- Cancelling
	//
	// 	- Cancelled
	//
	// 	- Start
	//
	// 	- Running
	//
	// example:
	//
	// Success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The time when the job was updated.
	//
	// example:
	//
	// 2024-01-08 16:53:04.864664
	UpdateTime *string `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
}

func (s GetUpsertCollectionDataJobResponseBodyJob) String() string {
	return tea.Prettify(s)
}

func (s GetUpsertCollectionDataJobResponseBodyJob) GoString() string {
	return s.String()
}

func (s *GetUpsertCollectionDataJobResponseBodyJob) SetCompleted(v bool) *GetUpsertCollectionDataJobResponseBodyJob {
	s.Completed = &v
	return s
}

func (s *GetUpsertCollectionDataJobResponseBodyJob) SetCreateTime(v string) *GetUpsertCollectionDataJobResponseBodyJob {
	s.CreateTime = &v
	return s
}

func (s *GetUpsertCollectionDataJobResponseBodyJob) SetError(v string) *GetUpsertCollectionDataJobResponseBodyJob {
	s.Error = &v
	return s
}

func (s *GetUpsertCollectionDataJobResponseBodyJob) SetId(v string) *GetUpsertCollectionDataJobResponseBodyJob {
	s.Id = &v
	return s
}

func (s *GetUpsertCollectionDataJobResponseBodyJob) SetProgress(v int32) *GetUpsertCollectionDataJobResponseBodyJob {
	s.Progress = &v
	return s
}

func (s *GetUpsertCollectionDataJobResponseBodyJob) SetStatus(v string) *GetUpsertCollectionDataJobResponseBodyJob {
	s.Status = &v
	return s
}

func (s *GetUpsertCollectionDataJobResponseBodyJob) SetUpdateTime(v string) *GetUpsertCollectionDataJobResponseBodyJob {
	s.UpdateTime = &v
	return s
}

type GetUpsertCollectionDataJobResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetUpsertCollectionDataJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetUpsertCollectionDataJobResponse) String() string {
	return tea.Prettify(s)
}

func (s GetUpsertCollectionDataJobResponse) GoString() string {
	return s.String()
}

func (s *GetUpsertCollectionDataJobResponse) SetHeaders(v map[string]*string) *GetUpsertCollectionDataJobResponse {
	s.Headers = v
	return s
}

func (s *GetUpsertCollectionDataJobResponse) SetStatusCode(v int32) *GetUpsertCollectionDataJobResponse {
	s.StatusCode = &v
	return s
}

func (s *GetUpsertCollectionDataJobResponse) SetBody(v *GetUpsertCollectionDataJobResponseBody) *GetUpsertCollectionDataJobResponse {
	s.Body = v
	return s
}

type GrantCollectionRequest struct {
	// The name of the collection.
	//
	// >  You can call the [CreateCollection](https://help.aliyun.com/document_detail/2401497.html) operation to create a vector collection and call the [ListCollections](https://help.aliyun.com/document_detail/2401503.html) operation to query a list of vector collections.
	//
	// This parameter is required.
	//
	// example:
	//
	// document
	Collection *string `json:"Collection,omitempty" xml:"Collection,omitempty"`
	// The ID of the instance in reserved storage mode.
	//
	// > You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The name of the namespace to which you want to grant the vector collection permissions.
	//
	// This parameter is required.
	//
	// example:
	//
	// othernamespace
	GrantToNamespace *string `json:"GrantToNamespace,omitempty" xml:"GrantToNamespace,omitempty"`
	// The type of the permissions that you want to grant. Valid values:
	//
	// 	- rw: the read and write permissions.
	//
	// 	- ro: the read-only permission.
	//
	// 	- none: the delete permission.
	//
	// This parameter is required.
	//
	// example:
	//
	// rw
	GrantType *string `json:"GrantType,omitempty" xml:"GrantType,omitempty"`
	// The name of the manager account that has the rds_superuser permission.
	//
	// >  You can create an account on the Account Management page of the AnalyticDB for PostgreSQL console or by calling the [CreateAccount](https://help.aliyun.com/document_detail/2361789.html) operation.
	//
	// This parameter is required.
	//
	// example:
	//
	// testaccount
	ManagerAccount *string `json:"ManagerAccount,omitempty" xml:"ManagerAccount,omitempty"`
	// The password of the manager account.
	//
	// This parameter is required.
	//
	// example:
	//
	// testpassword
	ManagerAccountPassword *string `json:"ManagerAccountPassword,omitempty" xml:"ManagerAccountPassword,omitempty"`
	// The name of the namespace.
	//
	// >  You can call the [ListNamespaces](https://help.aliyun.com/document_detail/2401502.html) operation to query a list of namespaces.
	//
	// example:
	//
	// mynamespace
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	OwnerId   *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The region ID of the instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s GrantCollectionRequest) String() string {
	return tea.Prettify(s)
}

func (s GrantCollectionRequest) GoString() string {
	return s.String()
}

func (s *GrantCollectionRequest) SetCollection(v string) *GrantCollectionRequest {
	s.Collection = &v
	return s
}

func (s *GrantCollectionRequest) SetDBInstanceId(v string) *GrantCollectionRequest {
	s.DBInstanceId = &v
	return s
}

func (s *GrantCollectionRequest) SetGrantToNamespace(v string) *GrantCollectionRequest {
	s.GrantToNamespace = &v
	return s
}

func (s *GrantCollectionRequest) SetGrantType(v string) *GrantCollectionRequest {
	s.GrantType = &v
	return s
}

func (s *GrantCollectionRequest) SetManagerAccount(v string) *GrantCollectionRequest {
	s.ManagerAccount = &v
	return s
}

func (s *GrantCollectionRequest) SetManagerAccountPassword(v string) *GrantCollectionRequest {
	s.ManagerAccountPassword = &v
	return s
}

func (s *GrantCollectionRequest) SetNamespace(v string) *GrantCollectionRequest {
	s.Namespace = &v
	return s
}

func (s *GrantCollectionRequest) SetOwnerId(v int64) *GrantCollectionRequest {
	s.OwnerId = &v
	return s
}

func (s *GrantCollectionRequest) SetRegionId(v string) *GrantCollectionRequest {
	s.RegionId = &v
	return s
}

type GrantCollectionResponseBody struct {
	// The returned message.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **success**
	//
	// 	- **fail**
	//
	// example:
	//
	// success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GrantCollectionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GrantCollectionResponseBody) GoString() string {
	return s.String()
}

func (s *GrantCollectionResponseBody) SetMessage(v string) *GrantCollectionResponseBody {
	s.Message = &v
	return s
}

func (s *GrantCollectionResponseBody) SetRequestId(v string) *GrantCollectionResponseBody {
	s.RequestId = &v
	return s
}

func (s *GrantCollectionResponseBody) SetStatus(v string) *GrantCollectionResponseBody {
	s.Status = &v
	return s
}

type GrantCollectionResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GrantCollectionResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GrantCollectionResponse) String() string {
	return tea.Prettify(s)
}

func (s GrantCollectionResponse) GoString() string {
	return s.String()
}

func (s *GrantCollectionResponse) SetHeaders(v map[string]*string) *GrantCollectionResponse {
	s.Headers = v
	return s
}

func (s *GrantCollectionResponse) SetStatusCode(v int32) *GrantCollectionResponse {
	s.StatusCode = &v
	return s
}

func (s *GrantCollectionResponse) SetBody(v *GrantCollectionResponseBody) *GrantCollectionResponse {
	s.Body = v
	return s
}

type HandleActiveSQLRecordRequest struct {
	// The instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp***************
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The type of the operation on the process ID. Valid values:
	//
	// 	- **0**: cancel.
	//
	// 	- **1**: terminate.
	//
	// 	- **2**: forcefully terminate.
	//
	// example:
	//
	// 0
	OperateType *int32 `json:"OperateType,omitempty" xml:"OperateType,omitempty"`
	// The process IDs. A process ID is a unique identifier of a query.
	//
	// This parameter is required.
	//
	// example:
	//
	// "3003925,3003928"
	Pids *string `json:"Pids,omitempty" xml:"Pids,omitempty"`
}

func (s HandleActiveSQLRecordRequest) String() string {
	return tea.Prettify(s)
}

func (s HandleActiveSQLRecordRequest) GoString() string {
	return s.String()
}

func (s *HandleActiveSQLRecordRequest) SetDBInstanceId(v string) *HandleActiveSQLRecordRequest {
	s.DBInstanceId = &v
	return s
}

func (s *HandleActiveSQLRecordRequest) SetOperateType(v int32) *HandleActiveSQLRecordRequest {
	s.OperateType = &v
	return s
}

func (s *HandleActiveSQLRecordRequest) SetPids(v string) *HandleActiveSQLRecordRequest {
	s.Pids = &v
	return s
}

type HandleActiveSQLRecordResponseBody struct {
	// The instance ID.
	//
	// example:
	//
	// gp-bp***************
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The processing result of the active query.
	Results []*HandleActiveSQLRecordResponseBodyResults `json:"Results,omitempty" xml:"Results,omitempty" type:"Repeated"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **false**
	//
	// 	- **true**
	//
	// example:
	//
	// true
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s HandleActiveSQLRecordResponseBody) String() string {
	return tea.Prettify(s)
}

func (s HandleActiveSQLRecordResponseBody) GoString() string {
	return s.String()
}

func (s *HandleActiveSQLRecordResponseBody) SetDBInstanceId(v string) *HandleActiveSQLRecordResponseBody {
	s.DBInstanceId = &v
	return s
}

func (s *HandleActiveSQLRecordResponseBody) SetRequestId(v string) *HandleActiveSQLRecordResponseBody {
	s.RequestId = &v
	return s
}

func (s *HandleActiveSQLRecordResponseBody) SetResults(v []*HandleActiveSQLRecordResponseBodyResults) *HandleActiveSQLRecordResponseBody {
	s.Results = v
	return s
}

func (s *HandleActiveSQLRecordResponseBody) SetStatus(v string) *HandleActiveSQLRecordResponseBody {
	s.Status = &v
	return s
}

type HandleActiveSQLRecordResponseBodyResults struct {
	// The process ID, which is a unique identifier of the query.
	//
	// example:
	//
	// 3003925
	Pid *string `json:"Pid,omitempty" xml:"Pid,omitempty"`
	// Indicates whether the processing was successful. Valid values:
	//
	// 	- **false**
	//
	// 	- **true**
	//
	// example:
	//
	// true
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s HandleActiveSQLRecordResponseBodyResults) String() string {
	return tea.Prettify(s)
}

func (s HandleActiveSQLRecordResponseBodyResults) GoString() string {
	return s.String()
}

func (s *HandleActiveSQLRecordResponseBodyResults) SetPid(v string) *HandleActiveSQLRecordResponseBodyResults {
	s.Pid = &v
	return s
}

func (s *HandleActiveSQLRecordResponseBodyResults) SetStatus(v string) *HandleActiveSQLRecordResponseBodyResults {
	s.Status = &v
	return s
}

type HandleActiveSQLRecordResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *HandleActiveSQLRecordResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s HandleActiveSQLRecordResponse) String() string {
	return tea.Prettify(s)
}

func (s HandleActiveSQLRecordResponse) GoString() string {
	return s.String()
}

func (s *HandleActiveSQLRecordResponse) SetHeaders(v map[string]*string) *HandleActiveSQLRecordResponse {
	s.Headers = v
	return s
}

func (s *HandleActiveSQLRecordResponse) SetStatusCode(v int32) *HandleActiveSQLRecordResponse {
	s.StatusCode = &v
	return s
}

func (s *HandleActiveSQLRecordResponse) SetBody(v *HandleActiveSQLRecordResponseBody) *HandleActiveSQLRecordResponse {
	s.Body = v
	return s
}

type InitVectorDatabaseRequest struct {
	// The instance ID.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The name of the manager account that has the rds_superuser permission.
	//
	// >  You can create an account on the Account Management page of the AnalyticDB for PostgreSQL console or by calling the [CreateAccount](https://help.aliyun.com/document_detail/2361789.html) operation.
	//
	// This parameter is required.
	//
	// example:
	//
	// testaccount
	ManagerAccount *string `json:"ManagerAccount,omitempty" xml:"ManagerAccount,omitempty"`
	// The password of the database account.
	//
	// This parameter is required.
	//
	// example:
	//
	// testpassword
	ManagerAccountPassword *string `json:"ManagerAccountPassword,omitempty" xml:"ManagerAccountPassword,omitempty"`
	OwnerId                *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The region ID of the instance.
	//
	// >  You can call the [DescribeRegions](https://help.aliyun.com/document_detail/86912.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the workspace that consists of multiple AnalyticDB for PostgreSQL instances. You must specify one of the WorkspaceId and DBInstanceId parameters. If you specify both parameters, the WorkspaceId parameter takes effect.
	//
	// example:
	//
	// gp-ws-*****
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s InitVectorDatabaseRequest) String() string {
	return tea.Prettify(s)
}

func (s InitVectorDatabaseRequest) GoString() string {
	return s.String()
}

func (s *InitVectorDatabaseRequest) SetDBInstanceId(v string) *InitVectorDatabaseRequest {
	s.DBInstanceId = &v
	return s
}

func (s *InitVectorDatabaseRequest) SetManagerAccount(v string) *InitVectorDatabaseRequest {
	s.ManagerAccount = &v
	return s
}

func (s *InitVectorDatabaseRequest) SetManagerAccountPassword(v string) *InitVectorDatabaseRequest {
	s.ManagerAccountPassword = &v
	return s
}

func (s *InitVectorDatabaseRequest) SetOwnerId(v int64) *InitVectorDatabaseRequest {
	s.OwnerId = &v
	return s
}

func (s *InitVectorDatabaseRequest) SetRegionId(v string) *InitVectorDatabaseRequest {
	s.RegionId = &v
	return s
}

func (s *InitVectorDatabaseRequest) SetWorkspaceId(v string) *InitVectorDatabaseRequest {
	s.WorkspaceId = &v
	return s
}

type InitVectorDatabaseResponseBody struct {
	// The error message returned if the request fails.
	//
	// example:
	//
	// failed to connect database, detailMsg: getConnection fail::SQL State: 28P01, Error Code: 0, Error Message: FATAL: password
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **Success**
	//
	// 	- **fail**
	//
	// example:
	//
	// success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s InitVectorDatabaseResponseBody) String() string {
	return tea.Prettify(s)
}

func (s InitVectorDatabaseResponseBody) GoString() string {
	return s.String()
}

func (s *InitVectorDatabaseResponseBody) SetMessage(v string) *InitVectorDatabaseResponseBody {
	s.Message = &v
	return s
}

func (s *InitVectorDatabaseResponseBody) SetRequestId(v string) *InitVectorDatabaseResponseBody {
	s.RequestId = &v
	return s
}

func (s *InitVectorDatabaseResponseBody) SetStatus(v string) *InitVectorDatabaseResponseBody {
	s.Status = &v
	return s
}

type InitVectorDatabaseResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *InitVectorDatabaseResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s InitVectorDatabaseResponse) String() string {
	return tea.Prettify(s)
}

func (s InitVectorDatabaseResponse) GoString() string {
	return s.String()
}

func (s *InitVectorDatabaseResponse) SetHeaders(v map[string]*string) *InitVectorDatabaseResponse {
	s.Headers = v
	return s
}

func (s *InitVectorDatabaseResponse) SetStatusCode(v int32) *InitVectorDatabaseResponse {
	s.StatusCode = &v
	return s
}

func (s *InitVectorDatabaseResponse) SetBody(v *InitVectorDatabaseResponseBody) *InitVectorDatabaseResponse {
	s.Body = v
	return s
}

type ListBackupJobsRequest struct {
	// example:
	//
	// Automated
	BackupMode *string `json:"BackupMode,omitempty" xml:"BackupMode,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
}

func (s ListBackupJobsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListBackupJobsRequest) GoString() string {
	return s.String()
}

func (s *ListBackupJobsRequest) SetBackupMode(v string) *ListBackupJobsRequest {
	s.BackupMode = &v
	return s
}

func (s *ListBackupJobsRequest) SetDBInstanceId(v string) *ListBackupJobsRequest {
	s.DBInstanceId = &v
	return s
}

type ListBackupJobsResponseBody struct {
	Items *ListBackupJobsResponseBodyItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Struct"`
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListBackupJobsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListBackupJobsResponseBody) GoString() string {
	return s.String()
}

func (s *ListBackupJobsResponseBody) SetItems(v *ListBackupJobsResponseBodyItems) *ListBackupJobsResponseBody {
	s.Items = v
	return s
}

func (s *ListBackupJobsResponseBody) SetRequestId(v string) *ListBackupJobsResponseBody {
	s.RequestId = &v
	return s
}

type ListBackupJobsResponseBodyItems struct {
	BackupJob []*ListBackupJobsResponseBodyItemsBackupJob `json:"BackupJob,omitempty" xml:"BackupJob,omitempty" type:"Repeated"`
}

func (s ListBackupJobsResponseBodyItems) String() string {
	return tea.Prettify(s)
}

func (s ListBackupJobsResponseBodyItems) GoString() string {
	return s.String()
}

func (s *ListBackupJobsResponseBodyItems) SetBackupJob(v []*ListBackupJobsResponseBodyItemsBackupJob) *ListBackupJobsResponseBodyItems {
	s.BackupJob = v
	return s
}

type ListBackupJobsResponseBodyItemsBackupJob struct {
	// example:
	//
	// 123
	BackupJobId *string `json:"BackupJobId,omitempty" xml:"BackupJobId,omitempty"`
	// example:
	//
	// Automated
	BackupMode *string `json:"BackupMode,omitempty" xml:"BackupMode,omitempty"`
	// example:
	//
	// Success
	BackupStatus *string `json:"BackupStatus,omitempty" xml:"BackupStatus,omitempty"`
	// example:
	//
	// 50%
	Process *string `json:"Process,omitempty" xml:"Process,omitempty"`
	// example:
	//
	// 2022-08-11T09:26:43Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s ListBackupJobsResponseBodyItemsBackupJob) String() string {
	return tea.Prettify(s)
}

func (s ListBackupJobsResponseBodyItemsBackupJob) GoString() string {
	return s.String()
}

func (s *ListBackupJobsResponseBodyItemsBackupJob) SetBackupJobId(v string) *ListBackupJobsResponseBodyItemsBackupJob {
	s.BackupJobId = &v
	return s
}

func (s *ListBackupJobsResponseBodyItemsBackupJob) SetBackupMode(v string) *ListBackupJobsResponseBodyItemsBackupJob {
	s.BackupMode = &v
	return s
}

func (s *ListBackupJobsResponseBodyItemsBackupJob) SetBackupStatus(v string) *ListBackupJobsResponseBodyItemsBackupJob {
	s.BackupStatus = &v
	return s
}

func (s *ListBackupJobsResponseBodyItemsBackupJob) SetProcess(v string) *ListBackupJobsResponseBodyItemsBackupJob {
	s.Process = &v
	return s
}

func (s *ListBackupJobsResponseBodyItemsBackupJob) SetStartTime(v string) *ListBackupJobsResponseBodyItemsBackupJob {
	s.StartTime = &v
	return s
}

type ListBackupJobsResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListBackupJobsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListBackupJobsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListBackupJobsResponse) GoString() string {
	return s.String()
}

func (s *ListBackupJobsResponse) SetHeaders(v map[string]*string) *ListBackupJobsResponse {
	s.Headers = v
	return s
}

func (s *ListBackupJobsResponse) SetStatusCode(v int32) *ListBackupJobsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListBackupJobsResponse) SetBody(v *ListBackupJobsResponseBody) *ListBackupJobsResponse {
	s.Body = v
	return s
}

type ListCollectionsRequest struct {
	// The instance ID.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The name of the namespace.
	//
	// example:
	//
	// mynamespace
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// The password of the namespace.
	//
	// This parameter is required.
	//
	// example:
	//
	// testpassword
	NamespacePassword *string `json:"NamespacePassword,omitempty" xml:"NamespacePassword,omitempty"`
	OwnerId           *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The region ID of the instance.
	//
	// >  You can call the [DescribeRegions](https://help.aliyun.com/document_detail/86912.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the workspace that consists of multiple AnalyticDB for PostgreSQL instances. You must specify one of the WorkspaceId and DBInstanceId parameters. If you specify both parameters, the WorkspaceId parameter takes effect.
	//
	// example:
	//
	// gp-ws-*****
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s ListCollectionsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListCollectionsRequest) GoString() string {
	return s.String()
}

func (s *ListCollectionsRequest) SetDBInstanceId(v string) *ListCollectionsRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ListCollectionsRequest) SetNamespace(v string) *ListCollectionsRequest {
	s.Namespace = &v
	return s
}

func (s *ListCollectionsRequest) SetNamespacePassword(v string) *ListCollectionsRequest {
	s.NamespacePassword = &v
	return s
}

func (s *ListCollectionsRequest) SetOwnerId(v int64) *ListCollectionsRequest {
	s.OwnerId = &v
	return s
}

func (s *ListCollectionsRequest) SetRegionId(v string) *ListCollectionsRequest {
	s.RegionId = &v
	return s
}

func (s *ListCollectionsRequest) SetWorkspaceId(v string) *ListCollectionsRequest {
	s.WorkspaceId = &v
	return s
}

type ListCollectionsResponseBody struct {
	// The queried vector collections.
	Collections *ListCollectionsResponseBodyCollections `json:"Collections,omitempty" xml:"Collections,omitempty" type:"Struct"`
	// The total number of entries returned.
	//
	// example:
	//
	// 1
	Count *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	// The instance ID.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The returned message.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The name of the namespace.
	//
	// example:
	//
	// mynamespace
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// The region ID of the instance.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **success**
	//
	// 	- **fail**
	//
	// example:
	//
	// success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListCollectionsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListCollectionsResponseBody) GoString() string {
	return s.String()
}

func (s *ListCollectionsResponseBody) SetCollections(v *ListCollectionsResponseBodyCollections) *ListCollectionsResponseBody {
	s.Collections = v
	return s
}

func (s *ListCollectionsResponseBody) SetCount(v int32) *ListCollectionsResponseBody {
	s.Count = &v
	return s
}

func (s *ListCollectionsResponseBody) SetDBInstanceId(v string) *ListCollectionsResponseBody {
	s.DBInstanceId = &v
	return s
}

func (s *ListCollectionsResponseBody) SetMessage(v string) *ListCollectionsResponseBody {
	s.Message = &v
	return s
}

func (s *ListCollectionsResponseBody) SetNamespace(v string) *ListCollectionsResponseBody {
	s.Namespace = &v
	return s
}

func (s *ListCollectionsResponseBody) SetRegionId(v string) *ListCollectionsResponseBody {
	s.RegionId = &v
	return s
}

func (s *ListCollectionsResponseBody) SetRequestId(v string) *ListCollectionsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListCollectionsResponseBody) SetStatus(v string) *ListCollectionsResponseBody {
	s.Status = &v
	return s
}

type ListCollectionsResponseBodyCollections struct {
	Collection []*string `json:"Collection,omitempty" xml:"Collection,omitempty" type:"Repeated"`
}

func (s ListCollectionsResponseBodyCollections) String() string {
	return tea.Prettify(s)
}

func (s ListCollectionsResponseBodyCollections) GoString() string {
	return s.String()
}

func (s *ListCollectionsResponseBodyCollections) SetCollection(v []*string) *ListCollectionsResponseBodyCollections {
	s.Collection = v
	return s
}

type ListCollectionsResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListCollectionsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListCollectionsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListCollectionsResponse) GoString() string {
	return s.String()
}

func (s *ListCollectionsResponse) SetHeaders(v map[string]*string) *ListCollectionsResponse {
	s.Headers = v
	return s
}

func (s *ListCollectionsResponse) SetStatusCode(v int32) *ListCollectionsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListCollectionsResponse) SetBody(v *ListCollectionsResponseBody) *ListCollectionsResponse {
	s.Body = v
	return s
}

type ListDatabasesRequest struct {
	// The instance ID.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The name of the database.
	//
	// This parameter is required.
	//
	// example:
	//
	// testdb
	Database *string `json:"Database,omitempty" xml:"Database,omitempty"`
	// The maximum number of entries per page. Valid values: 1 to 100.
	//
	// example:
	//
	// 50
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// The pagination token that is used in the next request to retrieve a new page of results. You do not need to specify this parameter for the first request. You must specify the token that is obtained from the previous query as the value of NextToken.
	//
	// example:
	//
	// caeba0bbb2be03f84eb48b699f0a4883
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	OwnerId   *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The region ID of the instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-beijing
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The Alibaba Cloud Resource Name (ARN) of the access credential for the created Data API account. You can call the CreateSecret operation to create an access credential.
	//
	// >  To call the DescribeTable operation as a Resource Access Management (RAM) user, the RAM user must have the permissions to call the UseSecret or GetSecretValue operation on the ARN of the access credential.
	//
	// This parameter is required.
	//
	// example:
	//
	// acs:gpdb:cn-beijing:1033**:secret/testsecret-eG2AQGRIwQ0zFp4VA7mYL3uiCXTfDQbQ
	SecretArn *string `json:"SecretArn,omitempty" xml:"SecretArn,omitempty"`
}

func (s ListDatabasesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListDatabasesRequest) GoString() string {
	return s.String()
}

func (s *ListDatabasesRequest) SetDBInstanceId(v string) *ListDatabasesRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ListDatabasesRequest) SetDatabase(v string) *ListDatabasesRequest {
	s.Database = &v
	return s
}

func (s *ListDatabasesRequest) SetMaxResults(v int32) *ListDatabasesRequest {
	s.MaxResults = &v
	return s
}

func (s *ListDatabasesRequest) SetNextToken(v string) *ListDatabasesRequest {
	s.NextToken = &v
	return s
}

func (s *ListDatabasesRequest) SetOwnerId(v int64) *ListDatabasesRequest {
	s.OwnerId = &v
	return s
}

func (s *ListDatabasesRequest) SetRegionId(v string) *ListDatabasesRequest {
	s.RegionId = &v
	return s
}

func (s *ListDatabasesRequest) SetSecretArn(v string) *ListDatabasesRequest {
	s.SecretArn = &v
	return s
}

type ListDatabasesResponseBody struct {
	// The queried databases.
	Databases *ListDatabasesResponseBodyDatabases `json:"Databases,omitempty" xml:"Databases,omitempty" type:"Struct"`
	// The returned message.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// A pagination token. It can be used in the next request to retrieve a new page of results. If NextToken is empty, no next page exists.
	//
	// example:
	//
	// caeba0bbb2be03f84eb48b699f0a4883
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The status of the operation. Valid values:
	//
	// 	- **success**
	//
	// 	- **fail**
	//
	// example:
	//
	// success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListDatabasesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListDatabasesResponseBody) GoString() string {
	return s.String()
}

func (s *ListDatabasesResponseBody) SetDatabases(v *ListDatabasesResponseBodyDatabases) *ListDatabasesResponseBody {
	s.Databases = v
	return s
}

func (s *ListDatabasesResponseBody) SetMessage(v string) *ListDatabasesResponseBody {
	s.Message = &v
	return s
}

func (s *ListDatabasesResponseBody) SetNextToken(v string) *ListDatabasesResponseBody {
	s.NextToken = &v
	return s
}

func (s *ListDatabasesResponseBody) SetRequestId(v string) *ListDatabasesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListDatabasesResponseBody) SetStatus(v string) *ListDatabasesResponseBody {
	s.Status = &v
	return s
}

type ListDatabasesResponseBodyDatabases struct {
	Databases []*string `json:"Databases,omitempty" xml:"Databases,omitempty" type:"Repeated"`
}

func (s ListDatabasesResponseBodyDatabases) String() string {
	return tea.Prettify(s)
}

func (s ListDatabasesResponseBodyDatabases) GoString() string {
	return s.String()
}

func (s *ListDatabasesResponseBodyDatabases) SetDatabases(v []*string) *ListDatabasesResponseBodyDatabases {
	s.Databases = v
	return s
}

type ListDatabasesResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListDatabasesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListDatabasesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListDatabasesResponse) GoString() string {
	return s.String()
}

func (s *ListDatabasesResponse) SetHeaders(v map[string]*string) *ListDatabasesResponse {
	s.Headers = v
	return s
}

func (s *ListDatabasesResponse) SetStatusCode(v int32) *ListDatabasesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListDatabasesResponse) SetBody(v *ListDatabasesResponseBody) *ListDatabasesResponse {
	s.Body = v
	return s
}

type ListDocumentCollectionsRequest struct {
	// The instance ID.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The name of the namespace. Default value: public.
	//
	// >  You can call the CreateNamespace operation to create a namespace and call the ListNamespaces operation to query a list of namespaces.
	//
	// example:
	//
	// mynamespace
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// The password of the namespace.
	//
	// >  This value is specified when you call the CreateNamespace operation.
	//
	// This parameter is required.
	//
	// example:
	//
	// testpassword
	NamespacePassword *string `json:"NamespacePassword,omitempty" xml:"NamespacePassword,omitempty"`
	OwnerId           *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The region ID of the instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ListDocumentCollectionsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListDocumentCollectionsRequest) GoString() string {
	return s.String()
}

func (s *ListDocumentCollectionsRequest) SetDBInstanceId(v string) *ListDocumentCollectionsRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ListDocumentCollectionsRequest) SetNamespace(v string) *ListDocumentCollectionsRequest {
	s.Namespace = &v
	return s
}

func (s *ListDocumentCollectionsRequest) SetNamespacePassword(v string) *ListDocumentCollectionsRequest {
	s.NamespacePassword = &v
	return s
}

func (s *ListDocumentCollectionsRequest) SetOwnerId(v int64) *ListDocumentCollectionsRequest {
	s.OwnerId = &v
	return s
}

func (s *ListDocumentCollectionsRequest) SetRegionId(v string) *ListDocumentCollectionsRequest {
	s.RegionId = &v
	return s
}

type ListDocumentCollectionsResponseBody struct {
	// The total number of entries returned.
	//
	// example:
	//
	// 10
	Count *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	// The queried document collections.
	Items *ListDocumentCollectionsResponseBodyItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Struct"`
	// The returned message.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **success**
	//
	// 	- **fail**
	//
	// example:
	//
	// success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListDocumentCollectionsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListDocumentCollectionsResponseBody) GoString() string {
	return s.String()
}

func (s *ListDocumentCollectionsResponseBody) SetCount(v int32) *ListDocumentCollectionsResponseBody {
	s.Count = &v
	return s
}

func (s *ListDocumentCollectionsResponseBody) SetItems(v *ListDocumentCollectionsResponseBodyItems) *ListDocumentCollectionsResponseBody {
	s.Items = v
	return s
}

func (s *ListDocumentCollectionsResponseBody) SetMessage(v string) *ListDocumentCollectionsResponseBody {
	s.Message = &v
	return s
}

func (s *ListDocumentCollectionsResponseBody) SetRequestId(v string) *ListDocumentCollectionsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListDocumentCollectionsResponseBody) SetStatus(v string) *ListDocumentCollectionsResponseBody {
	s.Status = &v
	return s
}

type ListDocumentCollectionsResponseBodyItems struct {
	CollectionList []*ListDocumentCollectionsResponseBodyItemsCollectionList `json:"CollectionList,omitempty" xml:"CollectionList,omitempty" type:"Repeated"`
}

func (s ListDocumentCollectionsResponseBodyItems) String() string {
	return tea.Prettify(s)
}

func (s ListDocumentCollectionsResponseBodyItems) GoString() string {
	return s.String()
}

func (s *ListDocumentCollectionsResponseBodyItems) SetCollectionList(v []*ListDocumentCollectionsResponseBodyItemsCollectionList) *ListDocumentCollectionsResponseBodyItems {
	s.CollectionList = v
	return s
}

type ListDocumentCollectionsResponseBodyItemsCollectionList struct {
	// The name of the document collection.
	//
	// example:
	//
	// document
	CollectionName *string `json:"CollectionName,omitempty" xml:"CollectionName,omitempty"`
	// The number of vector dimensions.
	//
	// example:
	//
	// 1536
	Dimension *int32 `json:"Dimension,omitempty" xml:"Dimension,omitempty"`
	// The name of the vector algorithm.
	//
	// example:
	//
	// text-embeddding-v1
	EmbeddingModel *string `json:"EmbeddingModel,omitempty" xml:"EmbeddingModel,omitempty"`
	// The fields that are used for full-text search. Multiple fields are separated by commas (,).
	//
	// example:
	//
	// title
	FullTextRetrievalFields *string `json:"FullTextRetrievalFields,omitempty" xml:"FullTextRetrievalFields,omitempty"`
	// The metadata.
	//
	// example:
	//
	// {\\"page\\": \\"int\\", \\"title\\": \\"text\\"}
	Metadata *string `json:"Metadata,omitempty" xml:"Metadata,omitempty"`
	// The vector similarity algorithm.
	//
	// example:
	//
	// cosine
	Metrics *string `json:"Metrics,omitempty" xml:"Metrics,omitempty"`
	// The analyzer that is used for full-text search.
	//
	// example:
	//
	// zh_cn
	Parser *string `json:"Parser,omitempty" xml:"Parser,omitempty"`
}

func (s ListDocumentCollectionsResponseBodyItemsCollectionList) String() string {
	return tea.Prettify(s)
}

func (s ListDocumentCollectionsResponseBodyItemsCollectionList) GoString() string {
	return s.String()
}

func (s *ListDocumentCollectionsResponseBodyItemsCollectionList) SetCollectionName(v string) *ListDocumentCollectionsResponseBodyItemsCollectionList {
	s.CollectionName = &v
	return s
}

func (s *ListDocumentCollectionsResponseBodyItemsCollectionList) SetDimension(v int32) *ListDocumentCollectionsResponseBodyItemsCollectionList {
	s.Dimension = &v
	return s
}

func (s *ListDocumentCollectionsResponseBodyItemsCollectionList) SetEmbeddingModel(v string) *ListDocumentCollectionsResponseBodyItemsCollectionList {
	s.EmbeddingModel = &v
	return s
}

func (s *ListDocumentCollectionsResponseBodyItemsCollectionList) SetFullTextRetrievalFields(v string) *ListDocumentCollectionsResponseBodyItemsCollectionList {
	s.FullTextRetrievalFields = &v
	return s
}

func (s *ListDocumentCollectionsResponseBodyItemsCollectionList) SetMetadata(v string) *ListDocumentCollectionsResponseBodyItemsCollectionList {
	s.Metadata = &v
	return s
}

func (s *ListDocumentCollectionsResponseBodyItemsCollectionList) SetMetrics(v string) *ListDocumentCollectionsResponseBodyItemsCollectionList {
	s.Metrics = &v
	return s
}

func (s *ListDocumentCollectionsResponseBodyItemsCollectionList) SetParser(v string) *ListDocumentCollectionsResponseBodyItemsCollectionList {
	s.Parser = &v
	return s
}

type ListDocumentCollectionsResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListDocumentCollectionsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListDocumentCollectionsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListDocumentCollectionsResponse) GoString() string {
	return s.String()
}

func (s *ListDocumentCollectionsResponse) SetHeaders(v map[string]*string) *ListDocumentCollectionsResponse {
	s.Headers = v
	return s
}

func (s *ListDocumentCollectionsResponse) SetStatusCode(v int32) *ListDocumentCollectionsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListDocumentCollectionsResponse) SetBody(v *ListDocumentCollectionsResponseBody) *ListDocumentCollectionsResponse {
	s.Body = v
	return s
}

type ListDocumentsRequest struct {
	// The name of the document collection.
	//
	// >  You can call the [CreateDocumentCollection](https://help.aliyun.com/document_detail/2618448.html) operation to create a document collection and call the [ListDocumentCollections](https://help.aliyun.com/document_detail/2618452.html) operation to query a list of document collections.
	//
	// This parameter is required.
	//
	// example:
	//
	// document
	Collection *string `json:"Collection,omitempty" xml:"Collection,omitempty"`
	// The instance ID.
	//
	// > You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query details about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The maximum number of entries per page. Valid values: 1 to 100.
	//
	// example:
	//
	// 100
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// The name of the namespace. Default value: public.
	//
	// >  You can call the [CreateNamespace](https://help.aliyun.com/document_detail/2401495.html) operation to create a namespace and call the [ListNamespaces](https://help.aliyun.com/document_detail/2401502.html) operation to query a list of namespaces.
	//
	// example:
	//
	// mynamespace
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// The password of the namespace.
	//
	// >  This value is specified when you call the [CreateNamespace](https://help.aliyun.com/document_detail/2401495.html) operation.
	//
	// This parameter is required.
	//
	// example:
	//
	// testpassword
	NamespacePassword *string `json:"NamespacePassword,omitempty" xml:"NamespacePassword,omitempty"`
	// The pagination token that is used in the next request to retrieve a new page of results. You do not need to specify this parameter for the first request. You must specify the token that is obtained from the previous query as the value of NextToken.
	//
	// example:
	//
	// caeba0bbb2be03f84eb48b699f0a4883
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	OwnerId   *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The region ID of the instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ListDocumentsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListDocumentsRequest) GoString() string {
	return s.String()
}

func (s *ListDocumentsRequest) SetCollection(v string) *ListDocumentsRequest {
	s.Collection = &v
	return s
}

func (s *ListDocumentsRequest) SetDBInstanceId(v string) *ListDocumentsRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ListDocumentsRequest) SetMaxResults(v int32) *ListDocumentsRequest {
	s.MaxResults = &v
	return s
}

func (s *ListDocumentsRequest) SetNamespace(v string) *ListDocumentsRequest {
	s.Namespace = &v
	return s
}

func (s *ListDocumentsRequest) SetNamespacePassword(v string) *ListDocumentsRequest {
	s.NamespacePassword = &v
	return s
}

func (s *ListDocumentsRequest) SetNextToken(v string) *ListDocumentsRequest {
	s.NextToken = &v
	return s
}

func (s *ListDocumentsRequest) SetOwnerId(v int64) *ListDocumentsRequest {
	s.OwnerId = &v
	return s
}

func (s *ListDocumentsRequest) SetRegionId(v string) *ListDocumentsRequest {
	s.RegionId = &v
	return s
}

type ListDocumentsResponseBody struct {
	// The total number of entries returned.
	//
	// example:
	//
	// 3
	Count *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	// The queried documents.
	Items *ListDocumentsResponseBodyItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Struct"`
	// The returned message.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// A pagination token. It can be used in the next request to retrieve a new page of results. If NextToken is empty, no next page exists.
	//
	// example:
	//
	// caeba0bbb2be03f84eb48b699f0a4883
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **success**
	//
	// 	- **fail**
	//
	// example:
	//
	// success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListDocumentsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListDocumentsResponseBody) GoString() string {
	return s.String()
}

func (s *ListDocumentsResponseBody) SetCount(v int32) *ListDocumentsResponseBody {
	s.Count = &v
	return s
}

func (s *ListDocumentsResponseBody) SetItems(v *ListDocumentsResponseBodyItems) *ListDocumentsResponseBody {
	s.Items = v
	return s
}

func (s *ListDocumentsResponseBody) SetMessage(v string) *ListDocumentsResponseBody {
	s.Message = &v
	return s
}

func (s *ListDocumentsResponseBody) SetNextToken(v string) *ListDocumentsResponseBody {
	s.NextToken = &v
	return s
}

func (s *ListDocumentsResponseBody) SetRequestId(v string) *ListDocumentsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListDocumentsResponseBody) SetStatus(v string) *ListDocumentsResponseBody {
	s.Status = &v
	return s
}

type ListDocumentsResponseBodyItems struct {
	DocumentList []*ListDocumentsResponseBodyItemsDocumentList `json:"DocumentList,omitempty" xml:"DocumentList,omitempty" type:"Repeated"`
}

func (s ListDocumentsResponseBodyItems) String() string {
	return tea.Prettify(s)
}

func (s ListDocumentsResponseBodyItems) GoString() string {
	return s.String()
}

func (s *ListDocumentsResponseBodyItems) SetDocumentList(v []*ListDocumentsResponseBodyItemsDocumentList) *ListDocumentsResponseBodyItems {
	s.DocumentList = v
	return s
}

type ListDocumentsResponseBodyItemsDocumentList struct {
	// The name of the document.
	//
	// example:
	//
	// music.txt
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// The source of the document.
	//
	// example:
	//
	// http://oss.xxx/music.txt
	Source *string `json:"Source,omitempty" xml:"Source,omitempty"`
}

func (s ListDocumentsResponseBodyItemsDocumentList) String() string {
	return tea.Prettify(s)
}

func (s ListDocumentsResponseBodyItemsDocumentList) GoString() string {
	return s.String()
}

func (s *ListDocumentsResponseBodyItemsDocumentList) SetFileName(v string) *ListDocumentsResponseBodyItemsDocumentList {
	s.FileName = &v
	return s
}

func (s *ListDocumentsResponseBodyItemsDocumentList) SetSource(v string) *ListDocumentsResponseBodyItemsDocumentList {
	s.Source = &v
	return s
}

type ListDocumentsResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListDocumentsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListDocumentsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListDocumentsResponse) GoString() string {
	return s.String()
}

func (s *ListDocumentsResponse) SetHeaders(v map[string]*string) *ListDocumentsResponse {
	s.Headers = v
	return s
}

func (s *ListDocumentsResponse) SetStatusCode(v int32) *ListDocumentsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListDocumentsResponse) SetBody(v *ListDocumentsResponseBody) *ListDocumentsResponse {
	s.Body = v
	return s
}

type ListExternalDataServicesRequest struct {
	// The instance ID.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp10g78o9807yv9h3
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 50
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/86912.html) operation to query the most recent region list.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ListExternalDataServicesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListExternalDataServicesRequest) GoString() string {
	return s.String()
}

func (s *ListExternalDataServicesRequest) SetDBInstanceId(v string) *ListExternalDataServicesRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ListExternalDataServicesRequest) SetPageNumber(v int32) *ListExternalDataServicesRequest {
	s.PageNumber = &v
	return s
}

func (s *ListExternalDataServicesRequest) SetPageSize(v int32) *ListExternalDataServicesRequest {
	s.PageSize = &v
	return s
}

func (s *ListExternalDataServicesRequest) SetRegionId(v string) *ListExternalDataServicesRequest {
	s.RegionId = &v
	return s
}

type ListExternalDataServicesResponseBody struct {
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The request ID.
	//
	// example:
	//
	// B4CAF581-2AC7-41AD-8940-D56DF7AADF5B
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The queried services.
	ServiceItems []*ListExternalDataServicesResponseBodyServiceItems `json:"ServiceItems,omitempty" xml:"ServiceItems,omitempty" type:"Repeated"`
	// The total number of entries returned.
	//
	// example:
	//
	// 2
	TotalRecordCount *int32 `json:"TotalRecordCount,omitempty" xml:"TotalRecordCount,omitempty"`
}

func (s ListExternalDataServicesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListExternalDataServicesResponseBody) GoString() string {
	return s.String()
}

func (s *ListExternalDataServicesResponseBody) SetPageNumber(v int32) *ListExternalDataServicesResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListExternalDataServicesResponseBody) SetRequestId(v string) *ListExternalDataServicesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListExternalDataServicesResponseBody) SetServiceItems(v []*ListExternalDataServicesResponseBodyServiceItems) *ListExternalDataServicesResponseBody {
	s.ServiceItems = v
	return s
}

func (s *ListExternalDataServicesResponseBody) SetTotalRecordCount(v int32) *ListExternalDataServicesResponseBody {
	s.TotalRecordCount = &v
	return s
}

type ListExternalDataServicesResponseBodyServiceItems struct {
	// The time when the service was created.
	//
	// example:
	//
	// 2019-09-08T16:00:00Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The time when the service was last modified.
	//
	// example:
	//
	// 2019-09-08T17:00:00Z
	ModifyTime *string `json:"ModifyTime,omitempty" xml:"ModifyTime,omitempty"`
	// The description of the service.
	//
	// example:
	//
	// test-adbpgss
	ServiceDescription *string `json:"ServiceDescription,omitempty" xml:"ServiceDescription,omitempty"`
	// The service ID.
	//
	// example:
	//
	// 1
	ServiceId *string `json:"ServiceId,omitempty" xml:"ServiceId,omitempty"`
	// The name of the service.
	//
	// example:
	//
	// test-adbpgss
	ServiceName *string `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
	// The specifications of the service. Unit: compute units (CUs).
	//
	// example:
	//
	// 2
	ServiceSpec *string `json:"ServiceSpec,omitempty" xml:"ServiceSpec,omitempty"`
	// The type of the service. Valid values:
	//
	// 	- pxf
	//
	// example:
	//
	// pxf
	ServiceType *string `json:"ServiceType,omitempty" xml:"ServiceType,omitempty"`
	// The status of the service. Valid values:
	//
	// 	- Init
	//
	// 	- Running
	//
	// 	- Exception
	//
	// 	- Paused
	//
	// example:
	//
	// Running
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListExternalDataServicesResponseBodyServiceItems) String() string {
	return tea.Prettify(s)
}

func (s ListExternalDataServicesResponseBodyServiceItems) GoString() string {
	return s.String()
}

func (s *ListExternalDataServicesResponseBodyServiceItems) SetCreateTime(v string) *ListExternalDataServicesResponseBodyServiceItems {
	s.CreateTime = &v
	return s
}

func (s *ListExternalDataServicesResponseBodyServiceItems) SetModifyTime(v string) *ListExternalDataServicesResponseBodyServiceItems {
	s.ModifyTime = &v
	return s
}

func (s *ListExternalDataServicesResponseBodyServiceItems) SetServiceDescription(v string) *ListExternalDataServicesResponseBodyServiceItems {
	s.ServiceDescription = &v
	return s
}

func (s *ListExternalDataServicesResponseBodyServiceItems) SetServiceId(v string) *ListExternalDataServicesResponseBodyServiceItems {
	s.ServiceId = &v
	return s
}

func (s *ListExternalDataServicesResponseBodyServiceItems) SetServiceName(v string) *ListExternalDataServicesResponseBodyServiceItems {
	s.ServiceName = &v
	return s
}

func (s *ListExternalDataServicesResponseBodyServiceItems) SetServiceSpec(v string) *ListExternalDataServicesResponseBodyServiceItems {
	s.ServiceSpec = &v
	return s
}

func (s *ListExternalDataServicesResponseBodyServiceItems) SetServiceType(v string) *ListExternalDataServicesResponseBodyServiceItems {
	s.ServiceType = &v
	return s
}

func (s *ListExternalDataServicesResponseBodyServiceItems) SetStatus(v string) *ListExternalDataServicesResponseBodyServiceItems {
	s.Status = &v
	return s
}

type ListExternalDataServicesResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListExternalDataServicesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListExternalDataServicesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListExternalDataServicesResponse) GoString() string {
	return s.String()
}

func (s *ListExternalDataServicesResponse) SetHeaders(v map[string]*string) *ListExternalDataServicesResponse {
	s.Headers = v
	return s
}

func (s *ListExternalDataServicesResponse) SetStatusCode(v int32) *ListExternalDataServicesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListExternalDataServicesResponse) SetBody(v *ListExternalDataServicesResponseBody) *ListExternalDataServicesResponse {
	s.Body = v
	return s
}

type ListExternalDataSourcesRequest struct {
	// The instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The page number. Pages start from page 1. Default value: **1**.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. Valid values:
	//
	// 	- **30**
	//
	// 	- **50**
	//
	// 	- **100**
	//
	// Default value: 30.
	//
	// example:
	//
	// 50
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The region ID of the instance.
	//
	// example:
	//
	// cn-shanghai
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ListExternalDataSourcesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListExternalDataSourcesRequest) GoString() string {
	return s.String()
}

func (s *ListExternalDataSourcesRequest) SetDBInstanceId(v string) *ListExternalDataSourcesRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ListExternalDataSourcesRequest) SetPageNumber(v int32) *ListExternalDataSourcesRequest {
	s.PageNumber = &v
	return s
}

func (s *ListExternalDataSourcesRequest) SetPageSize(v int32) *ListExternalDataSourcesRequest {
	s.PageSize = &v
	return s
}

func (s *ListExternalDataSourcesRequest) SetRegionId(v string) *ListExternalDataSourcesRequest {
	s.RegionId = &v
	return s
}

type ListExternalDataSourcesResponseBody struct {
	// The Hadoop external table services.
	Items []*ListExternalDataSourcesResponseBodyItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Repeated"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The request ID.
	//
	// example:
	//
	// BBE00C04-A3E8-4114-881D-0480A72CB92E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 2
	TotalRecordCount *int32 `json:"TotalRecordCount,omitempty" xml:"TotalRecordCount,omitempty"`
}

func (s ListExternalDataSourcesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListExternalDataSourcesResponseBody) GoString() string {
	return s.String()
}

func (s *ListExternalDataSourcesResponseBody) SetItems(v []*ListExternalDataSourcesResponseBodyItems) *ListExternalDataSourcesResponseBody {
	s.Items = v
	return s
}

func (s *ListExternalDataSourcesResponseBody) SetPageNumber(v int32) *ListExternalDataSourcesResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListExternalDataSourcesResponseBody) SetRequestId(v string) *ListExternalDataSourcesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListExternalDataSourcesResponseBody) SetTotalRecordCount(v int32) *ListExternalDataSourcesResponseBody {
	s.TotalRecordCount = &v
	return s
}

type ListExternalDataSourcesResponseBodyItems struct {
	// The time when the service was created.
	//
	// example:
	//
	// 2019-09-08T16:00:00Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The description of the data source.
	//
	// example:
	//
	// test
	DataSourceDescription *string `json:"DataSourceDescription,omitempty" xml:"DataSourceDescription,omitempty"`
	// The service directory in which Hadoop-related configuration files are stored.
	//
	// example:
	//
	// HadoopDir
	DataSourceDir *string `json:"DataSourceDir,omitempty" xml:"DataSourceDir,omitempty"`
	// The service ID.
	//
	// example:
	//
	// 123
	DataSourceId *int32 `json:"DataSourceId,omitempty" xml:"DataSourceId,omitempty"`
	// The name of the service.
	//
	// example:
	//
	// hdfs_pxf
	DataSourceName *string `json:"DataSourceName,omitempty" xml:"DataSourceName,omitempty"`
	// The status of the service. Valid values:
	//
	// 	- init
	//
	// 	- running
	//
	// 	- exception
	//
	// example:
	//
	// Running
	DataSourceStatus *string `json:"DataSourceStatus,omitempty" xml:"DataSourceStatus,omitempty"`
	// The type of the data source.
	//
	// example:
	//
	// HDFS
	DataSourceType *string `json:"DataSourceType,omitempty" xml:"DataSourceType,omitempty"`
	// The Id of external data service
	//
	// example:
	//
	// 123
	ExternalDataServiceId *int32 `json:"ExternalDataServiceId,omitempty" xml:"ExternalDataServiceId,omitempty"`
	// The time when the service was last modified.
	//
	// example:
	//
	// 2019-10-08T16:00:00Z
	ModifyTime *string `json:"ModifyTime,omitempty" xml:"ModifyTime,omitempty"`
	// The information about the service status. For example, if the service is in the exception state, the cause of the exception is displayed. If the service is in the running state, this parameter is left empty.
	//
	// example:
	//
	// ""
	StatusMessage *string `json:"StatusMessage,omitempty" xml:"StatusMessage,omitempty"`
}

func (s ListExternalDataSourcesResponseBodyItems) String() string {
	return tea.Prettify(s)
}

func (s ListExternalDataSourcesResponseBodyItems) GoString() string {
	return s.String()
}

func (s *ListExternalDataSourcesResponseBodyItems) SetCreateTime(v string) *ListExternalDataSourcesResponseBodyItems {
	s.CreateTime = &v
	return s
}

func (s *ListExternalDataSourcesResponseBodyItems) SetDataSourceDescription(v string) *ListExternalDataSourcesResponseBodyItems {
	s.DataSourceDescription = &v
	return s
}

func (s *ListExternalDataSourcesResponseBodyItems) SetDataSourceDir(v string) *ListExternalDataSourcesResponseBodyItems {
	s.DataSourceDir = &v
	return s
}

func (s *ListExternalDataSourcesResponseBodyItems) SetDataSourceId(v int32) *ListExternalDataSourcesResponseBodyItems {
	s.DataSourceId = &v
	return s
}

func (s *ListExternalDataSourcesResponseBodyItems) SetDataSourceName(v string) *ListExternalDataSourcesResponseBodyItems {
	s.DataSourceName = &v
	return s
}

func (s *ListExternalDataSourcesResponseBodyItems) SetDataSourceStatus(v string) *ListExternalDataSourcesResponseBodyItems {
	s.DataSourceStatus = &v
	return s
}

func (s *ListExternalDataSourcesResponseBodyItems) SetDataSourceType(v string) *ListExternalDataSourcesResponseBodyItems {
	s.DataSourceType = &v
	return s
}

func (s *ListExternalDataSourcesResponseBodyItems) SetExternalDataServiceId(v int32) *ListExternalDataSourcesResponseBodyItems {
	s.ExternalDataServiceId = &v
	return s
}

func (s *ListExternalDataSourcesResponseBodyItems) SetModifyTime(v string) *ListExternalDataSourcesResponseBodyItems {
	s.ModifyTime = &v
	return s
}

func (s *ListExternalDataSourcesResponseBodyItems) SetStatusMessage(v string) *ListExternalDataSourcesResponseBodyItems {
	s.StatusMessage = &v
	return s
}

type ListExternalDataSourcesResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListExternalDataSourcesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListExternalDataSourcesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListExternalDataSourcesResponse) GoString() string {
	return s.String()
}

func (s *ListExternalDataSourcesResponse) SetHeaders(v map[string]*string) *ListExternalDataSourcesResponse {
	s.Headers = v
	return s
}

func (s *ListExternalDataSourcesResponse) SetStatusCode(v int32) *ListExternalDataSourcesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListExternalDataSourcesResponse) SetBody(v *ListExternalDataSourcesResponseBody) *ListExternalDataSourcesResponse {
	s.Body = v
	return s
}

type ListIndicesRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// testcollection
	Collection *string `json:"Collection,omitempty" xml:"Collection,omitempty"`
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// mynamespace
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// testpassword
	NamespacePassword *string `json:"NamespacePassword,omitempty" xml:"NamespacePassword,omitempty"`
	OwnerId           *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// example:
	//
	// gp-ws-*****
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s ListIndicesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListIndicesRequest) GoString() string {
	return s.String()
}

func (s *ListIndicesRequest) SetCollection(v string) *ListIndicesRequest {
	s.Collection = &v
	return s
}

func (s *ListIndicesRequest) SetDBInstanceId(v string) *ListIndicesRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ListIndicesRequest) SetNamespace(v string) *ListIndicesRequest {
	s.Namespace = &v
	return s
}

func (s *ListIndicesRequest) SetNamespacePassword(v string) *ListIndicesRequest {
	s.NamespacePassword = &v
	return s
}

func (s *ListIndicesRequest) SetOwnerId(v int64) *ListIndicesRequest {
	s.OwnerId = &v
	return s
}

func (s *ListIndicesRequest) SetRegionId(v string) *ListIndicesRequest {
	s.RegionId = &v
	return s
}

func (s *ListIndicesRequest) SetWorkspaceId(v string) *ListIndicesRequest {
	s.WorkspaceId = &v
	return s
}

type ListIndicesResponseBody struct {
	Indices *ListIndicesResponseBodyIndices `json:"Indices,omitempty" xml:"Indices,omitempty" type:"Struct"`
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListIndicesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListIndicesResponseBody) GoString() string {
	return s.String()
}

func (s *ListIndicesResponseBody) SetIndices(v *ListIndicesResponseBodyIndices) *ListIndicesResponseBody {
	s.Indices = v
	return s
}

func (s *ListIndicesResponseBody) SetMessage(v string) *ListIndicesResponseBody {
	s.Message = &v
	return s
}

func (s *ListIndicesResponseBody) SetRequestId(v string) *ListIndicesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListIndicesResponseBody) SetStatus(v string) *ListIndicesResponseBody {
	s.Status = &v
	return s
}

type ListIndicesResponseBodyIndices struct {
	Indices []*ListIndicesResponseBodyIndicesIndices `json:"Indices,omitempty" xml:"Indices,omitempty" type:"Repeated"`
}

func (s ListIndicesResponseBodyIndices) String() string {
	return tea.Prettify(s)
}

func (s ListIndicesResponseBodyIndices) GoString() string {
	return s.String()
}

func (s *ListIndicesResponseBodyIndices) SetIndices(v []*ListIndicesResponseBodyIndicesIndices) *ListIndicesResponseBodyIndices {
	s.Indices = v
	return s
}

type ListIndicesResponseBodyIndicesIndices struct {
	// example:
	//
	// testcollection
	Collection *string `json:"Collection,omitempty" xml:"Collection,omitempty"`
	// example:
	//
	// CREATE INDEX testindex ON mynamespace. testcollection
	IndexDef *string `json:"IndexDef,omitempty" xml:"IndexDef,omitempty"`
	// example:
	//
	// testindex
	IndexName *string `json:"IndexName,omitempty" xml:"IndexName,omitempty"`
	// example:
	//
	// mynamespace
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
}

func (s ListIndicesResponseBodyIndicesIndices) String() string {
	return tea.Prettify(s)
}

func (s ListIndicesResponseBodyIndicesIndices) GoString() string {
	return s.String()
}

func (s *ListIndicesResponseBodyIndicesIndices) SetCollection(v string) *ListIndicesResponseBodyIndicesIndices {
	s.Collection = &v
	return s
}

func (s *ListIndicesResponseBodyIndicesIndices) SetIndexDef(v string) *ListIndicesResponseBodyIndicesIndices {
	s.IndexDef = &v
	return s
}

func (s *ListIndicesResponseBodyIndicesIndices) SetIndexName(v string) *ListIndicesResponseBodyIndicesIndices {
	s.IndexName = &v
	return s
}

func (s *ListIndicesResponseBodyIndicesIndices) SetNamespace(v string) *ListIndicesResponseBodyIndicesIndices {
	s.Namespace = &v
	return s
}

type ListIndicesResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListIndicesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListIndicesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListIndicesResponse) GoString() string {
	return s.String()
}

func (s *ListIndicesResponse) SetHeaders(v map[string]*string) *ListIndicesResponse {
	s.Headers = v
	return s
}

func (s *ListIndicesResponse) SetStatusCode(v int32) *ListIndicesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListIndicesResponse) SetBody(v *ListIndicesResponseBody) *ListIndicesResponse {
	s.Body = v
	return s
}

type ListInstanceExtensionsRequest struct {
	// The instance ID.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The name of the extension.
	//
	// example:
	//
	// citext
	Extension *string `json:"Extension,omitempty" xml:"Extension,omitempty"`
	// The installation status of the extension. Valid values:
	//
	// 	- installed
	//
	// 	- installing
	//
	// 	- uninstalled
	//
	// example:
	//
	// installed
	InstallStatus *string `json:"InstallStatus,omitempty" xml:"InstallStatus,omitempty"`
	// The page number. Pages start from page 1. Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. Valid values:
	//
	// 	- **30**
	//
	// 	- **50**
	//
	// 	- **100**
	//
	// Default value: **30**.
	//
	// example:
	//
	// 30
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The region ID of the instance.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ListInstanceExtensionsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListInstanceExtensionsRequest) GoString() string {
	return s.String()
}

func (s *ListInstanceExtensionsRequest) SetDBInstanceId(v string) *ListInstanceExtensionsRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ListInstanceExtensionsRequest) SetExtension(v string) *ListInstanceExtensionsRequest {
	s.Extension = &v
	return s
}

func (s *ListInstanceExtensionsRequest) SetInstallStatus(v string) *ListInstanceExtensionsRequest {
	s.InstallStatus = &v
	return s
}

func (s *ListInstanceExtensionsRequest) SetPageNumber(v int32) *ListInstanceExtensionsRequest {
	s.PageNumber = &v
	return s
}

func (s *ListInstanceExtensionsRequest) SetPageSize(v int32) *ListInstanceExtensionsRequest {
	s.PageSize = &v
	return s
}

func (s *ListInstanceExtensionsRequest) SetRegionId(v string) *ListInstanceExtensionsRequest {
	s.RegionId = &v
	return s
}

type ListInstanceExtensionsResponseBody struct {
	// The queried extensions.
	Items []*ListInstanceExtensionsResponseBodyItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Repeated"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 20
	PageRecordCount *int32 `json:"PageRecordCount,omitempty" xml:"PageRecordCount,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 7565770E-7C45-462D-BA4A-8A5396F2CAD1
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 1
	TotalRecordCount *int32 `json:"TotalRecordCount,omitempty" xml:"TotalRecordCount,omitempty"`
}

func (s ListInstanceExtensionsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListInstanceExtensionsResponseBody) GoString() string {
	return s.String()
}

func (s *ListInstanceExtensionsResponseBody) SetItems(v []*ListInstanceExtensionsResponseBodyItems) *ListInstanceExtensionsResponseBody {
	s.Items = v
	return s
}

func (s *ListInstanceExtensionsResponseBody) SetPageNumber(v int32) *ListInstanceExtensionsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListInstanceExtensionsResponseBody) SetPageRecordCount(v int32) *ListInstanceExtensionsResponseBody {
	s.PageRecordCount = &v
	return s
}

func (s *ListInstanceExtensionsResponseBody) SetRequestId(v string) *ListInstanceExtensionsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListInstanceExtensionsResponseBody) SetTotalRecordCount(v int32) *ListInstanceExtensionsResponseBody {
	s.TotalRecordCount = &v
	return s
}

type ListInstanceExtensionsResponseBodyItems struct {
	// The current version.
	//
	// example:
	//
	// 1.0
	CurrentVersion *string `json:"CurrentVersion,omitempty" xml:"CurrentVersion,omitempty"`
	// The description of the extension.
	//
	// example:
	//
	// citext usage
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The extension ID.
	//
	// example:
	//
	// 1
	ExtensionId *string `json:"ExtensionId,omitempty" xml:"ExtensionId,omitempty"`
	// The names of the databases in which the extension is installed.
	//
	// example:
	//
	// test
	InstalledDatabases *string `json:"InstalledDatabases,omitempty" xml:"InstalledDatabases,omitempty"`
	// Indicates whether an instance restart is required after you install the extension for the extension to take effect.
	//
	// example:
	//
	// false
	IsInstallNeedRestart *bool `json:"IsInstallNeedRestart,omitempty" xml:"IsInstallNeedRestart,omitempty"`
	// The latest version.
	//
	// example:
	//
	// 1.1
	LatestVersion *string `json:"LatestVersion,omitempty" xml:"LatestVersion,omitempty"`
	// The name of the extension.
	//
	// example:
	//
	// citext
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The status of the extension.
	//
	// example:
	//
	// installed
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListInstanceExtensionsResponseBodyItems) String() string {
	return tea.Prettify(s)
}

func (s ListInstanceExtensionsResponseBodyItems) GoString() string {
	return s.String()
}

func (s *ListInstanceExtensionsResponseBodyItems) SetCurrentVersion(v string) *ListInstanceExtensionsResponseBodyItems {
	s.CurrentVersion = &v
	return s
}

func (s *ListInstanceExtensionsResponseBodyItems) SetDescription(v string) *ListInstanceExtensionsResponseBodyItems {
	s.Description = &v
	return s
}

func (s *ListInstanceExtensionsResponseBodyItems) SetExtensionId(v string) *ListInstanceExtensionsResponseBodyItems {
	s.ExtensionId = &v
	return s
}

func (s *ListInstanceExtensionsResponseBodyItems) SetInstalledDatabases(v string) *ListInstanceExtensionsResponseBodyItems {
	s.InstalledDatabases = &v
	return s
}

func (s *ListInstanceExtensionsResponseBodyItems) SetIsInstallNeedRestart(v bool) *ListInstanceExtensionsResponseBodyItems {
	s.IsInstallNeedRestart = &v
	return s
}

func (s *ListInstanceExtensionsResponseBodyItems) SetLatestVersion(v string) *ListInstanceExtensionsResponseBodyItems {
	s.LatestVersion = &v
	return s
}

func (s *ListInstanceExtensionsResponseBodyItems) SetName(v string) *ListInstanceExtensionsResponseBodyItems {
	s.Name = &v
	return s
}

func (s *ListInstanceExtensionsResponseBodyItems) SetStatus(v string) *ListInstanceExtensionsResponseBodyItems {
	s.Status = &v
	return s
}

type ListInstanceExtensionsResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListInstanceExtensionsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListInstanceExtensionsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListInstanceExtensionsResponse) GoString() string {
	return s.String()
}

func (s *ListInstanceExtensionsResponse) SetHeaders(v map[string]*string) *ListInstanceExtensionsResponse {
	s.Headers = v
	return s
}

func (s *ListInstanceExtensionsResponse) SetStatusCode(v int32) *ListInstanceExtensionsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListInstanceExtensionsResponse) SetBody(v *ListInstanceExtensionsResponseBody) *ListInstanceExtensionsResponse {
	s.Body = v
	return s
}

type ListNamespacesRequest struct {
	// The instance ID.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The name of the manager account that has the rds_superuser permission.
	//
	// >  You can create an account on the Account Management page of the AnalyticDB for PostgreSQL console or by calling the [CreateAccount](https://help.aliyun.com/document_detail/2361789.html) operation.
	//
	// This parameter is required.
	//
	// example:
	//
	// testaccount
	ManagerAccount *string `json:"ManagerAccount,omitempty" xml:"ManagerAccount,omitempty"`
	// The password of the manager account.
	//
	// This parameter is required.
	//
	// example:
	//
	// testpassword
	ManagerAccountPassword *string `json:"ManagerAccountPassword,omitempty" xml:"ManagerAccountPassword,omitempty"`
	OwnerId                *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The region ID of the instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the workspace that consists of multiple AnalyticDB for PostgreSQL instances. You must specify one of the WorkspaceId and DBInstanceId parameters. If you specify both parameters, the WorkspaceId parameter takes effect.
	//
	// example:
	//
	// gp-ws-*****
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s ListNamespacesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListNamespacesRequest) GoString() string {
	return s.String()
}

func (s *ListNamespacesRequest) SetDBInstanceId(v string) *ListNamespacesRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ListNamespacesRequest) SetManagerAccount(v string) *ListNamespacesRequest {
	s.ManagerAccount = &v
	return s
}

func (s *ListNamespacesRequest) SetManagerAccountPassword(v string) *ListNamespacesRequest {
	s.ManagerAccountPassword = &v
	return s
}

func (s *ListNamespacesRequest) SetOwnerId(v int64) *ListNamespacesRequest {
	s.OwnerId = &v
	return s
}

func (s *ListNamespacesRequest) SetRegionId(v string) *ListNamespacesRequest {
	s.RegionId = &v
	return s
}

func (s *ListNamespacesRequest) SetWorkspaceId(v string) *ListNamespacesRequest {
	s.WorkspaceId = &v
	return s
}

type ListNamespacesResponseBody struct {
	// The total number of entries returned.
	//
	// example:
	//
	// 1
	Count *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	// The instance ID.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The returned message.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The queried namespaces.
	Namespaces *ListNamespacesResponseBodyNamespaces `json:"Namespaces,omitempty" xml:"Namespaces,omitempty" type:"Struct"`
	// The region ID of the instance.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **success**
	//
	// 	- **fail**
	//
	// example:
	//
	// success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListNamespacesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListNamespacesResponseBody) GoString() string {
	return s.String()
}

func (s *ListNamespacesResponseBody) SetCount(v int32) *ListNamespacesResponseBody {
	s.Count = &v
	return s
}

func (s *ListNamespacesResponseBody) SetDBInstanceId(v string) *ListNamespacesResponseBody {
	s.DBInstanceId = &v
	return s
}

func (s *ListNamespacesResponseBody) SetMessage(v string) *ListNamespacesResponseBody {
	s.Message = &v
	return s
}

func (s *ListNamespacesResponseBody) SetNamespaces(v *ListNamespacesResponseBodyNamespaces) *ListNamespacesResponseBody {
	s.Namespaces = v
	return s
}

func (s *ListNamespacesResponseBody) SetRegionId(v string) *ListNamespacesResponseBody {
	s.RegionId = &v
	return s
}

func (s *ListNamespacesResponseBody) SetRequestId(v string) *ListNamespacesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListNamespacesResponseBody) SetStatus(v string) *ListNamespacesResponseBody {
	s.Status = &v
	return s
}

type ListNamespacesResponseBodyNamespaces struct {
	Namespace []*string `json:"Namespace,omitempty" xml:"Namespace,omitempty" type:"Repeated"`
}

func (s ListNamespacesResponseBodyNamespaces) String() string {
	return tea.Prettify(s)
}

func (s ListNamespacesResponseBodyNamespaces) GoString() string {
	return s.String()
}

func (s *ListNamespacesResponseBodyNamespaces) SetNamespace(v []*string) *ListNamespacesResponseBodyNamespaces {
	s.Namespace = v
	return s
}

type ListNamespacesResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListNamespacesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListNamespacesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListNamespacesResponse) GoString() string {
	return s.String()
}

func (s *ListNamespacesResponse) SetHeaders(v map[string]*string) *ListNamespacesResponse {
	s.Headers = v
	return s
}

func (s *ListNamespacesResponse) SetStatusCode(v int32) *ListNamespacesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListNamespacesResponse) SetBody(v *ListNamespacesResponseBody) *ListNamespacesResponse {
	s.Body = v
	return s
}

type ListRemoteADBDataSourcesRequest struct {
	// Instance name.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// Data source ID.
	//
	// example:
	//
	// 119
	DataSourceId *string `json:"DataSourceId,omitempty" xml:"DataSourceId,omitempty"`
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s ListRemoteADBDataSourcesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListRemoteADBDataSourcesRequest) GoString() string {
	return s.String()
}

func (s *ListRemoteADBDataSourcesRequest) SetDBInstanceId(v string) *ListRemoteADBDataSourcesRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ListRemoteADBDataSourcesRequest) SetDataSourceId(v string) *ListRemoteADBDataSourcesRequest {
	s.DataSourceId = &v
	return s
}

func (s *ListRemoteADBDataSourcesRequest) SetOwnerId(v int64) *ListRemoteADBDataSourcesRequest {
	s.OwnerId = &v
	return s
}

type ListRemoteADBDataSourcesResponseBody struct {
	// Returns the successfully added data sharing service data.
	DataSourceItems *ListRemoteADBDataSourcesResponseBodyDataSourceItems `json:"DataSourceItems,omitempty" xml:"DataSourceItems,omitempty" type:"Struct"`
	// Request ID.
	//
	// example:
	//
	// e9d60eb1-e90d-4bc6-a470-c8b767460858
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Task ID.
	//
	// example:
	//
	// 90000
	TaskId *int32 `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s ListRemoteADBDataSourcesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListRemoteADBDataSourcesResponseBody) GoString() string {
	return s.String()
}

func (s *ListRemoteADBDataSourcesResponseBody) SetDataSourceItems(v *ListRemoteADBDataSourcesResponseBodyDataSourceItems) *ListRemoteADBDataSourcesResponseBody {
	s.DataSourceItems = v
	return s
}

func (s *ListRemoteADBDataSourcesResponseBody) SetRequestId(v string) *ListRemoteADBDataSourcesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListRemoteADBDataSourcesResponseBody) SetTaskId(v int32) *ListRemoteADBDataSourcesResponseBody {
	s.TaskId = &v
	return s
}

type ListRemoteADBDataSourcesResponseBodyDataSourceItems struct {
	RemoteDataSources []*ListRemoteADBDataSourcesResponseBodyDataSourceItemsRemoteDataSources `json:"RemoteDataSources,omitempty" xml:"RemoteDataSources,omitempty" type:"Repeated"`
}

func (s ListRemoteADBDataSourcesResponseBodyDataSourceItems) String() string {
	return tea.Prettify(s)
}

func (s ListRemoteADBDataSourcesResponseBodyDataSourceItems) GoString() string {
	return s.String()
}

func (s *ListRemoteADBDataSourcesResponseBodyDataSourceItems) SetRemoteDataSources(v []*ListRemoteADBDataSourcesResponseBodyDataSourceItemsRemoteDataSources) *ListRemoteADBDataSourcesResponseBodyDataSourceItems {
	s.RemoteDataSources = v
	return s
}

type ListRemoteADBDataSourcesResponseBodyDataSourceItemsRemoteDataSources struct {
	// Data source name
	//
	// example:
	//
	// db1_gptest1_to_db2_gp-test2
	DataSourceName *string `json:"DataSourceName,omitempty" xml:"DataSourceName,omitempty"`
	// Description.
	//
	// example:
	//
	// test
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// ID.
	//
	// example:
	//
	// 1
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// Local database name
	//
	// example:
	//
	// db1
	LocalDatabase *string `json:"LocalDatabase,omitempty" xml:"LocalDatabase,omitempty"`
	// Local instance name
	//
	// example:
	//
	// gp-test1
	LocalInstanceName *string `json:"LocalInstanceName,omitempty" xml:"LocalInstanceName,omitempty"`
	// Manager user name
	//
	// example:
	//
	// admin
	ManagerUserName *string `json:"ManagerUserName,omitempty" xml:"ManagerUserName,omitempty"`
	// Region ID.
	//
	// > You can call the [DescribeRegions](https://help.aliyun.com/document_detail/86912.html) API to view available region IDs.
	//
	// example:
	//
	// cn-beijing
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// Remote database name
	//
	// example:
	//
	// db2
	RemoteDatabase *string `json:"RemoteDatabase,omitempty" xml:"RemoteDatabase,omitempty"`
	// Remote instance name
	//
	// example:
	//
	// gp-test2
	RemoteInstanceName *string `json:"RemoteInstanceName,omitempty" xml:"RemoteInstanceName,omitempty"`
	// Data source status
	//
	// example:
	//
	// creating
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// User name
	//
	// example:
	//
	// user1
	UserName *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
}

func (s ListRemoteADBDataSourcesResponseBodyDataSourceItemsRemoteDataSources) String() string {
	return tea.Prettify(s)
}

func (s ListRemoteADBDataSourcesResponseBodyDataSourceItemsRemoteDataSources) GoString() string {
	return s.String()
}

func (s *ListRemoteADBDataSourcesResponseBodyDataSourceItemsRemoteDataSources) SetDataSourceName(v string) *ListRemoteADBDataSourcesResponseBodyDataSourceItemsRemoteDataSources {
	s.DataSourceName = &v
	return s
}

func (s *ListRemoteADBDataSourcesResponseBodyDataSourceItemsRemoteDataSources) SetDescription(v string) *ListRemoteADBDataSourcesResponseBodyDataSourceItemsRemoteDataSources {
	s.Description = &v
	return s
}

func (s *ListRemoteADBDataSourcesResponseBodyDataSourceItemsRemoteDataSources) SetId(v int64) *ListRemoteADBDataSourcesResponseBodyDataSourceItemsRemoteDataSources {
	s.Id = &v
	return s
}

func (s *ListRemoteADBDataSourcesResponseBodyDataSourceItemsRemoteDataSources) SetLocalDatabase(v string) *ListRemoteADBDataSourcesResponseBodyDataSourceItemsRemoteDataSources {
	s.LocalDatabase = &v
	return s
}

func (s *ListRemoteADBDataSourcesResponseBodyDataSourceItemsRemoteDataSources) SetLocalInstanceName(v string) *ListRemoteADBDataSourcesResponseBodyDataSourceItemsRemoteDataSources {
	s.LocalInstanceName = &v
	return s
}

func (s *ListRemoteADBDataSourcesResponseBodyDataSourceItemsRemoteDataSources) SetManagerUserName(v string) *ListRemoteADBDataSourcesResponseBodyDataSourceItemsRemoteDataSources {
	s.ManagerUserName = &v
	return s
}

func (s *ListRemoteADBDataSourcesResponseBodyDataSourceItemsRemoteDataSources) SetRegionId(v string) *ListRemoteADBDataSourcesResponseBodyDataSourceItemsRemoteDataSources {
	s.RegionId = &v
	return s
}

func (s *ListRemoteADBDataSourcesResponseBodyDataSourceItemsRemoteDataSources) SetRemoteDatabase(v string) *ListRemoteADBDataSourcesResponseBodyDataSourceItemsRemoteDataSources {
	s.RemoteDatabase = &v
	return s
}

func (s *ListRemoteADBDataSourcesResponseBodyDataSourceItemsRemoteDataSources) SetRemoteInstanceName(v string) *ListRemoteADBDataSourcesResponseBodyDataSourceItemsRemoteDataSources {
	s.RemoteInstanceName = &v
	return s
}

func (s *ListRemoteADBDataSourcesResponseBodyDataSourceItemsRemoteDataSources) SetStatus(v string) *ListRemoteADBDataSourcesResponseBodyDataSourceItemsRemoteDataSources {
	s.Status = &v
	return s
}

func (s *ListRemoteADBDataSourcesResponseBodyDataSourceItemsRemoteDataSources) SetUserName(v string) *ListRemoteADBDataSourcesResponseBodyDataSourceItemsRemoteDataSources {
	s.UserName = &v
	return s
}

type ListRemoteADBDataSourcesResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListRemoteADBDataSourcesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListRemoteADBDataSourcesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListRemoteADBDataSourcesResponse) GoString() string {
	return s.String()
}

func (s *ListRemoteADBDataSourcesResponse) SetHeaders(v map[string]*string) *ListRemoteADBDataSourcesResponse {
	s.Headers = v
	return s
}

func (s *ListRemoteADBDataSourcesResponse) SetStatusCode(v int32) *ListRemoteADBDataSourcesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListRemoteADBDataSourcesResponse) SetBody(v *ListRemoteADBDataSourcesResponseBody) *ListRemoteADBDataSourcesResponse {
	s.Body = v
	return s
}

type ListSchemasRequest struct {
	// The instance ID.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The name of the database.
	//
	// This parameter is required.
	//
	// example:
	//
	// adbtest
	Database *string `json:"Database,omitempty" xml:"Database,omitempty"`
	// The maximum number of entries per page. Valid values: 1 to 100.
	//
	// example:
	//
	// 20
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// The pagination token that is used in the next request to retrieve a new page of results. You do not need to specify this parameter for the first request. You must specify the token that is obtained from the previous query as the value of NextToken.
	//
	// example:
	//
	// caeba0bbb2be03f84eb48b699f0a4883
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	OwnerId   *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The region ID of the instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-beijing
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The schema name pattern for matching. For example, `ab%` specifies to match schema names that start with ab.
	//
	// example:
	//
	// aaa%
	SchemaPattern *string `json:"SchemaPattern,omitempty" xml:"SchemaPattern,omitempty"`
	// The Alibaba Cloud Resource Name (ARN) of the access credential for the created Data API account. You can call the CreateSecret operation to create an access credential.
	//
	// >  To call the ListSchemas operation as a Resource Access Management (RAM) user, the RAM user must have the permissions to call the UseSecret or GetSecretValue operation on the ARN of the access credential.
	//
	// This parameter is required.
	//
	// example:
	//
	// acs:gpdb:cn-beijing:1033**:secret/testsecret-eG2AQGRIwQ0zFp4VA7mYL3uiCXTfDQbQ
	SecretArn *string `json:"SecretArn,omitempty" xml:"SecretArn,omitempty"`
}

func (s ListSchemasRequest) String() string {
	return tea.Prettify(s)
}

func (s ListSchemasRequest) GoString() string {
	return s.String()
}

func (s *ListSchemasRequest) SetDBInstanceId(v string) *ListSchemasRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ListSchemasRequest) SetDatabase(v string) *ListSchemasRequest {
	s.Database = &v
	return s
}

func (s *ListSchemasRequest) SetMaxResults(v int32) *ListSchemasRequest {
	s.MaxResults = &v
	return s
}

func (s *ListSchemasRequest) SetNextToken(v string) *ListSchemasRequest {
	s.NextToken = &v
	return s
}

func (s *ListSchemasRequest) SetOwnerId(v int64) *ListSchemasRequest {
	s.OwnerId = &v
	return s
}

func (s *ListSchemasRequest) SetRegionId(v string) *ListSchemasRequest {
	s.RegionId = &v
	return s
}

func (s *ListSchemasRequest) SetSchemaPattern(v string) *ListSchemasRequest {
	s.SchemaPattern = &v
	return s
}

func (s *ListSchemasRequest) SetSecretArn(v string) *ListSchemasRequest {
	s.SecretArn = &v
	return s
}

type ListSchemasResponseBody struct {
	// The returned message.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// A pagination token. It can be used in the next request to retrieve a new page of results. If NextToken is empty, no next page exists.
	//
	// example:
	//
	// caeba0bbb2be03f84eb48b699f0a4883
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The queried schemas.
	Schemas *ListSchemasResponseBodySchemas `json:"Schemas,omitempty" xml:"Schemas,omitempty" type:"Struct"`
	// The status of the operation. Valid values:
	//
	// 	- **success**
	//
	// 	- **fail**
	//
	// example:
	//
	// success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListSchemasResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListSchemasResponseBody) GoString() string {
	return s.String()
}

func (s *ListSchemasResponseBody) SetMessage(v string) *ListSchemasResponseBody {
	s.Message = &v
	return s
}

func (s *ListSchemasResponseBody) SetNextToken(v string) *ListSchemasResponseBody {
	s.NextToken = &v
	return s
}

func (s *ListSchemasResponseBody) SetRequestId(v string) *ListSchemasResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListSchemasResponseBody) SetSchemas(v *ListSchemasResponseBodySchemas) *ListSchemasResponseBody {
	s.Schemas = v
	return s
}

func (s *ListSchemasResponseBody) SetStatus(v string) *ListSchemasResponseBody {
	s.Status = &v
	return s
}

type ListSchemasResponseBodySchemas struct {
	Schemas []*string `json:"Schemas,omitempty" xml:"Schemas,omitempty" type:"Repeated"`
}

func (s ListSchemasResponseBodySchemas) String() string {
	return tea.Prettify(s)
}

func (s ListSchemasResponseBodySchemas) GoString() string {
	return s.String()
}

func (s *ListSchemasResponseBodySchemas) SetSchemas(v []*string) *ListSchemasResponseBodySchemas {
	s.Schemas = v
	return s
}

type ListSchemasResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListSchemasResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListSchemasResponse) String() string {
	return tea.Prettify(s)
}

func (s ListSchemasResponse) GoString() string {
	return s.String()
}

func (s *ListSchemasResponse) SetHeaders(v map[string]*string) *ListSchemasResponse {
	s.Headers = v
	return s
}

func (s *ListSchemasResponse) SetStatusCode(v int32) *ListSchemasResponse {
	s.StatusCode = &v
	return s
}

func (s *ListSchemasResponse) SetBody(v *ListSchemasResponseBody) *ListSchemasResponse {
	s.Body = v
	return s
}

type ListSecretsRequest struct {
	// The instance ID.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The region ID of the instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-beijing
	RegionId    *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s ListSecretsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListSecretsRequest) GoString() string {
	return s.String()
}

func (s *ListSecretsRequest) SetDBInstanceId(v string) *ListSecretsRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ListSecretsRequest) SetOwnerId(v int64) *ListSecretsRequest {
	s.OwnerId = &v
	return s
}

func (s *ListSecretsRequest) SetRegionId(v string) *ListSecretsRequest {
	s.RegionId = &v
	return s
}

func (s *ListSecretsRequest) SetWorkspaceId(v string) *ListSecretsRequest {
	s.WorkspaceId = &v
	return s
}

type ListSecretsResponseBody struct {
	// The number of access credentials.
	//
	// example:
	//
	// 4
	Count *int64 `json:"Count,omitempty" xml:"Count,omitempty"`
	// The returned message.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The queried access credentials.
	Secrets *ListSecretsResponseBodySecrets `json:"Secrets,omitempty" xml:"Secrets,omitempty" type:"Struct"`
	// The status of the operation. Valid values:
	//
	// 	- **success**
	//
	// 	- **fail**
	//
	// example:
	//
	// success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListSecretsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListSecretsResponseBody) GoString() string {
	return s.String()
}

func (s *ListSecretsResponseBody) SetCount(v int64) *ListSecretsResponseBody {
	s.Count = &v
	return s
}

func (s *ListSecretsResponseBody) SetMessage(v string) *ListSecretsResponseBody {
	s.Message = &v
	return s
}

func (s *ListSecretsResponseBody) SetRequestId(v string) *ListSecretsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListSecretsResponseBody) SetSecrets(v *ListSecretsResponseBodySecrets) *ListSecretsResponseBody {
	s.Secrets = v
	return s
}

func (s *ListSecretsResponseBody) SetStatus(v string) *ListSecretsResponseBody {
	s.Status = &v
	return s
}

type ListSecretsResponseBodySecrets struct {
	Secrets []*ListSecretsResponseBodySecretsSecrets `json:"Secrets,omitempty" xml:"Secrets,omitempty" type:"Repeated"`
}

func (s ListSecretsResponseBodySecrets) String() string {
	return tea.Prettify(s)
}

func (s ListSecretsResponseBodySecrets) GoString() string {
	return s.String()
}

func (s *ListSecretsResponseBodySecrets) SetSecrets(v []*ListSecretsResponseBodySecretsSecrets) *ListSecretsResponseBodySecrets {
	s.Secrets = v
	return s
}

type ListSecretsResponseBodySecretsSecrets struct {
	// The ID of the Alibaba Cloud account.
	//
	// example:
	//
	// 1033***
	AccountId *string `json:"AccountId,omitempty" xml:"AccountId,omitempty"`
	// The instance ID.
	//
	// example:
	//
	// gp-bp14****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The description of the access credential.
	//
	// example:
	//
	// test description
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The region ID of the instance.
	//
	// example:
	//
	// cn-beijing
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The Alibaba Cloud Resource Name (ARN) of the access credential for the created Data API account. Format: `acs:gpdb:{{region}}:{{accountId}}:secret/{{secretName}}-{{32 digits random string}`.
	//
	// example:
	//
	// acs:gpdb:cn-beijing:1033**:secret/testsecret-eG2AQGRIwQ0zFp4VA7mYL3uiCXTfDQbQ
	SecretArn *string `json:"SecretArn,omitempty" xml:"SecretArn,omitempty"`
	// The name of the access credential.
	//
	// example:
	//
	// testsecret
	SecretName *string `json:"SecretName,omitempty" xml:"SecretName,omitempty"`
	// The name of the database account.
	//
	// example:
	//
	// testacc
	Username *string `json:"Username,omitempty" xml:"Username,omitempty"`
}

func (s ListSecretsResponseBodySecretsSecrets) String() string {
	return tea.Prettify(s)
}

func (s ListSecretsResponseBodySecretsSecrets) GoString() string {
	return s.String()
}

func (s *ListSecretsResponseBodySecretsSecrets) SetAccountId(v string) *ListSecretsResponseBodySecretsSecrets {
	s.AccountId = &v
	return s
}

func (s *ListSecretsResponseBodySecretsSecrets) SetDBInstanceId(v string) *ListSecretsResponseBodySecretsSecrets {
	s.DBInstanceId = &v
	return s
}

func (s *ListSecretsResponseBodySecretsSecrets) SetDescription(v string) *ListSecretsResponseBodySecretsSecrets {
	s.Description = &v
	return s
}

func (s *ListSecretsResponseBodySecretsSecrets) SetRegionId(v string) *ListSecretsResponseBodySecretsSecrets {
	s.RegionId = &v
	return s
}

func (s *ListSecretsResponseBodySecretsSecrets) SetSecretArn(v string) *ListSecretsResponseBodySecretsSecrets {
	s.SecretArn = &v
	return s
}

func (s *ListSecretsResponseBodySecretsSecrets) SetSecretName(v string) *ListSecretsResponseBodySecretsSecrets {
	s.SecretName = &v
	return s
}

func (s *ListSecretsResponseBodySecretsSecrets) SetUsername(v string) *ListSecretsResponseBodySecretsSecrets {
	s.Username = &v
	return s
}

type ListSecretsResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListSecretsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListSecretsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListSecretsResponse) GoString() string {
	return s.String()
}

func (s *ListSecretsResponse) SetHeaders(v map[string]*string) *ListSecretsResponse {
	s.Headers = v
	return s
}

func (s *ListSecretsResponse) SetStatusCode(v int32) *ListSecretsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListSecretsResponse) SetBody(v *ListSecretsResponseBody) *ListSecretsResponse {
	s.Body = v
	return s
}

type ListStreamingDataServicesRequest struct {
	// Instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp10g78o9807yv9h3
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// Page number, greater than 0 and not exceeding the maximum value of Integer, default value: **1**.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// Number of records per page, with the following values:
	//
	// - 30 (default)
	//
	// - 50
	//
	// - 100
	//
	// example:
	//
	// 50
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// Region ID
	//
	// example:
	//
	// cn-beijing
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ListStreamingDataServicesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListStreamingDataServicesRequest) GoString() string {
	return s.String()
}

func (s *ListStreamingDataServicesRequest) SetDBInstanceId(v string) *ListStreamingDataServicesRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ListStreamingDataServicesRequest) SetPageNumber(v int32) *ListStreamingDataServicesRequest {
	s.PageNumber = &v
	return s
}

func (s *ListStreamingDataServicesRequest) SetPageSize(v int32) *ListStreamingDataServicesRequest {
	s.PageSize = &v
	return s
}

func (s *ListStreamingDataServicesRequest) SetRegionId(v string) *ListStreamingDataServicesRequest {
	s.RegionId = &v
	return s
}

type ListStreamingDataServicesResponseBody struct {
	// Request ID.
	//
	// example:
	//
	// B4CAF581-2AC7-41AD-8940-D56DF7AADF5B
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Returns real-time data service items
	ServiceItems []*ListStreamingDataServicesResponseBodyServiceItems `json:"ServiceItems,omitempty" xml:"ServiceItems,omitempty" type:"Repeated"`
	// Total record count.
	//
	// example:
	//
	// 1
	TotalRecordCount *int32 `json:"TotalRecordCount,omitempty" xml:"TotalRecordCount,omitempty"`
}

func (s ListStreamingDataServicesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListStreamingDataServicesResponseBody) GoString() string {
	return s.String()
}

func (s *ListStreamingDataServicesResponseBody) SetRequestId(v string) *ListStreamingDataServicesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListStreamingDataServicesResponseBody) SetServiceItems(v []*ListStreamingDataServicesResponseBodyServiceItems) *ListStreamingDataServicesResponseBody {
	s.ServiceItems = v
	return s
}

func (s *ListStreamingDataServicesResponseBody) SetTotalRecordCount(v int32) *ListStreamingDataServicesResponseBody {
	s.TotalRecordCount = &v
	return s
}

type ListStreamingDataServicesResponseBodyServiceItems struct {
	// Creation time.
	//
	// example:
	//
	// 2019-09-08T16:00:00Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// Last modified time
	//
	// example:
	//
	// 2019-09-08T17:00:00Z
	ModifyTime *string `json:"ModifyTime,omitempty" xml:"ModifyTime,omitempty"`
	// Service description.
	//
	// example:
	//
	// test-adbpgss
	ServiceDescription *string `json:"ServiceDescription,omitempty" xml:"ServiceDescription,omitempty"`
	// Service ID.
	//
	// example:
	//
	// 1
	ServiceId *string `json:"ServiceId,omitempty" xml:"ServiceId,omitempty"`
	// Service IP.
	//
	// example:
	//
	// 192.168.0.1
	ServiceIp *string `json:"ServiceIp,omitempty" xml:"ServiceIp,omitempty"`
	// Whether it is a managed service.
	//
	// example:
	//
	// true
	ServiceManaged *bool `json:"ServiceManaged,omitempty" xml:"ServiceManaged,omitempty"`
	// Service name.
	//
	// example:
	//
	// test-adbpgss
	ServiceName *string `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
	// Service owner ID.
	//
	// example:
	//
	// 123
	ServiceOwnerId *string `json:"ServiceOwnerId,omitempty" xml:"ServiceOwnerId,omitempty"`
	// Service port.
	//
	// example:
	//
	// 5432
	ServicePort *string `json:"ServicePort,omitempty" xml:"ServicePort,omitempty"`
	// Service specification (in CU).
	//
	// example:
	//
	// 8
	ServiceSpec *string `json:"ServiceSpec,omitempty" xml:"ServiceSpec,omitempty"`
	// Service type, with the following value:
	//
	// - **adbpgss**
	//
	// example:
	//
	// adbpgss
	ServiceType *string `json:"ServiceType,omitempty" xml:"ServiceType,omitempty"`
	// Service status, with the following values:
	//
	// - Init: Initializing
	//
	// - Running: In operation
	//
	// - Exception: Abnormal
	//
	// - Paused: Suspended
	//
	// example:
	//
	// Running
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListStreamingDataServicesResponseBodyServiceItems) String() string {
	return tea.Prettify(s)
}

func (s ListStreamingDataServicesResponseBodyServiceItems) GoString() string {
	return s.String()
}

func (s *ListStreamingDataServicesResponseBodyServiceItems) SetCreateTime(v string) *ListStreamingDataServicesResponseBodyServiceItems {
	s.CreateTime = &v
	return s
}

func (s *ListStreamingDataServicesResponseBodyServiceItems) SetModifyTime(v string) *ListStreamingDataServicesResponseBodyServiceItems {
	s.ModifyTime = &v
	return s
}

func (s *ListStreamingDataServicesResponseBodyServiceItems) SetServiceDescription(v string) *ListStreamingDataServicesResponseBodyServiceItems {
	s.ServiceDescription = &v
	return s
}

func (s *ListStreamingDataServicesResponseBodyServiceItems) SetServiceId(v string) *ListStreamingDataServicesResponseBodyServiceItems {
	s.ServiceId = &v
	return s
}

func (s *ListStreamingDataServicesResponseBodyServiceItems) SetServiceIp(v string) *ListStreamingDataServicesResponseBodyServiceItems {
	s.ServiceIp = &v
	return s
}

func (s *ListStreamingDataServicesResponseBodyServiceItems) SetServiceManaged(v bool) *ListStreamingDataServicesResponseBodyServiceItems {
	s.ServiceManaged = &v
	return s
}

func (s *ListStreamingDataServicesResponseBodyServiceItems) SetServiceName(v string) *ListStreamingDataServicesResponseBodyServiceItems {
	s.ServiceName = &v
	return s
}

func (s *ListStreamingDataServicesResponseBodyServiceItems) SetServiceOwnerId(v string) *ListStreamingDataServicesResponseBodyServiceItems {
	s.ServiceOwnerId = &v
	return s
}

func (s *ListStreamingDataServicesResponseBodyServiceItems) SetServicePort(v string) *ListStreamingDataServicesResponseBodyServiceItems {
	s.ServicePort = &v
	return s
}

func (s *ListStreamingDataServicesResponseBodyServiceItems) SetServiceSpec(v string) *ListStreamingDataServicesResponseBodyServiceItems {
	s.ServiceSpec = &v
	return s
}

func (s *ListStreamingDataServicesResponseBodyServiceItems) SetServiceType(v string) *ListStreamingDataServicesResponseBodyServiceItems {
	s.ServiceType = &v
	return s
}

func (s *ListStreamingDataServicesResponseBodyServiceItems) SetStatus(v string) *ListStreamingDataServicesResponseBodyServiceItems {
	s.Status = &v
	return s
}

type ListStreamingDataServicesResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListStreamingDataServicesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListStreamingDataServicesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListStreamingDataServicesResponse) GoString() string {
	return s.String()
}

func (s *ListStreamingDataServicesResponse) SetHeaders(v map[string]*string) *ListStreamingDataServicesResponse {
	s.Headers = v
	return s
}

func (s *ListStreamingDataServicesResponse) SetStatusCode(v int32) *ListStreamingDataServicesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListStreamingDataServicesResponse) SetBody(v *ListStreamingDataServicesResponseBody) *ListStreamingDataServicesResponse {
	s.Body = v
	return s
}

type ListStreamingDataSourcesRequest struct {
	// The instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp10g78o9807yv9h3
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The page number. Pages start from page 1. Default value: **1**.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. Valid values:
	//
	// 	- **30**
	//
	// 	- **50**
	//
	// 	- **100**
	//
	// Default value: **30**.
	//
	// example:
	//
	// 30
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The region ID.
	//
	// >  You can call the [DescribeRegions](https://help.aliyun.com/document_detail/86912.html) operation to query the most recent region list.
	//
	// example:
	//
	// cn-beijing
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ListStreamingDataSourcesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListStreamingDataSourcesRequest) GoString() string {
	return s.String()
}

func (s *ListStreamingDataSourcesRequest) SetDBInstanceId(v string) *ListStreamingDataSourcesRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ListStreamingDataSourcesRequest) SetPageNumber(v int32) *ListStreamingDataSourcesRequest {
	s.PageNumber = &v
	return s
}

func (s *ListStreamingDataSourcesRequest) SetPageSize(v int32) *ListStreamingDataSourcesRequest {
	s.PageSize = &v
	return s
}

func (s *ListStreamingDataSourcesRequest) SetRegionId(v string) *ListStreamingDataSourcesRequest {
	s.RegionId = &v
	return s
}

type ListStreamingDataSourcesResponseBody struct {
	// The queried data sources.
	DataSourceItems []*ListStreamingDataSourcesResponseBodyDataSourceItems `json:"DataSourceItems,omitempty" xml:"DataSourceItems,omitempty" type:"Repeated"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The request ID.
	//
	// example:
	//
	// B4CAF581-2AC7-41AD-8940-D56DF7AADF5B
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 2
	TotalRecordCount *int32 `json:"TotalRecordCount,omitempty" xml:"TotalRecordCount,omitempty"`
}

func (s ListStreamingDataSourcesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListStreamingDataSourcesResponseBody) GoString() string {
	return s.String()
}

func (s *ListStreamingDataSourcesResponseBody) SetDataSourceItems(v []*ListStreamingDataSourcesResponseBodyDataSourceItems) *ListStreamingDataSourcesResponseBody {
	s.DataSourceItems = v
	return s
}

func (s *ListStreamingDataSourcesResponseBody) SetPageNumber(v int32) *ListStreamingDataSourcesResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListStreamingDataSourcesResponseBody) SetRequestId(v string) *ListStreamingDataSourcesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListStreamingDataSourcesResponseBody) SetTotalRecordCount(v int32) *ListStreamingDataSourcesResponseBody {
	s.TotalRecordCount = &v
	return s
}

type ListStreamingDataSourcesResponseBodyDataSourceItems struct {
	// The time when the data source was created.
	//
	// example:
	//
	// 2019-09-08T16:00:00Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The configurations of the data source.
	//
	// example:
	//
	// {"brokers":"broker0:9091,broker1:9091","topic":"topic"}
	DataSourceConfig *string `json:"DataSourceConfig,omitempty" xml:"DataSourceConfig,omitempty"`
	// The description of the data source.
	//
	// example:
	//
	// test-kafka
	DataSourceDescription *string `json:"DataSourceDescription,omitempty" xml:"DataSourceDescription,omitempty"`
	// The data source ID.
	//
	// example:
	//
	// 1
	DataSourceId *int32 `json:"DataSourceId,omitempty" xml:"DataSourceId,omitempty"`
	// The name of the data source.
	//
	// example:
	//
	// test-kafka
	DataSourceName *string `json:"DataSourceName,omitempty" xml:"DataSourceName,omitempty"`
	// The type of the data source. Valid values:
	//
	// 	- kafka
	//
	// example:
	//
	// kafka
	DataSourceType *string `json:"DataSourceType,omitempty" xml:"DataSourceType,omitempty"`
	// The information about the service status. For example, if the service is in the exception state, the cause of the exception is displayed. If the service is in the running state, this parameter is left empty.
	//
	// example:
	//
	// ""
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// The time when the data source was last modified.
	//
	// example:
	//
	// 2019-09-08T17:00:00Z
	ModifyTime *string `json:"ModifyTime,omitempty" xml:"ModifyTime,omitempty"`
	// The service ID.
	//
	// example:
	//
	// 1
	ServiceId *int32 `json:"ServiceId,omitempty" xml:"ServiceId,omitempty"`
	// The status of the service. Valid values:
	//
	// 	- init
	//
	// 	- running
	//
	// 	- exception
	//
	// example:
	//
	// running
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListStreamingDataSourcesResponseBodyDataSourceItems) String() string {
	return tea.Prettify(s)
}

func (s ListStreamingDataSourcesResponseBodyDataSourceItems) GoString() string {
	return s.String()
}

func (s *ListStreamingDataSourcesResponseBodyDataSourceItems) SetCreateTime(v string) *ListStreamingDataSourcesResponseBodyDataSourceItems {
	s.CreateTime = &v
	return s
}

func (s *ListStreamingDataSourcesResponseBodyDataSourceItems) SetDataSourceConfig(v string) *ListStreamingDataSourcesResponseBodyDataSourceItems {
	s.DataSourceConfig = &v
	return s
}

func (s *ListStreamingDataSourcesResponseBodyDataSourceItems) SetDataSourceDescription(v string) *ListStreamingDataSourcesResponseBodyDataSourceItems {
	s.DataSourceDescription = &v
	return s
}

func (s *ListStreamingDataSourcesResponseBodyDataSourceItems) SetDataSourceId(v int32) *ListStreamingDataSourcesResponseBodyDataSourceItems {
	s.DataSourceId = &v
	return s
}

func (s *ListStreamingDataSourcesResponseBodyDataSourceItems) SetDataSourceName(v string) *ListStreamingDataSourcesResponseBodyDataSourceItems {
	s.DataSourceName = &v
	return s
}

func (s *ListStreamingDataSourcesResponseBodyDataSourceItems) SetDataSourceType(v string) *ListStreamingDataSourcesResponseBodyDataSourceItems {
	s.DataSourceType = &v
	return s
}

func (s *ListStreamingDataSourcesResponseBodyDataSourceItems) SetErrorMessage(v string) *ListStreamingDataSourcesResponseBodyDataSourceItems {
	s.ErrorMessage = &v
	return s
}

func (s *ListStreamingDataSourcesResponseBodyDataSourceItems) SetModifyTime(v string) *ListStreamingDataSourcesResponseBodyDataSourceItems {
	s.ModifyTime = &v
	return s
}

func (s *ListStreamingDataSourcesResponseBodyDataSourceItems) SetServiceId(v int32) *ListStreamingDataSourcesResponseBodyDataSourceItems {
	s.ServiceId = &v
	return s
}

func (s *ListStreamingDataSourcesResponseBodyDataSourceItems) SetStatus(v string) *ListStreamingDataSourcesResponseBodyDataSourceItems {
	s.Status = &v
	return s
}

type ListStreamingDataSourcesResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListStreamingDataSourcesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListStreamingDataSourcesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListStreamingDataSourcesResponse) GoString() string {
	return s.String()
}

func (s *ListStreamingDataSourcesResponse) SetHeaders(v map[string]*string) *ListStreamingDataSourcesResponse {
	s.Headers = v
	return s
}

func (s *ListStreamingDataSourcesResponse) SetStatusCode(v int32) *ListStreamingDataSourcesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListStreamingDataSourcesResponse) SetBody(v *ListStreamingDataSourcesResponseBody) *ListStreamingDataSourcesResponse {
	s.Body = v
	return s
}

type ListStreamingJobsRequest struct {
	// Instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp10g78o9807yv9h3
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// Page number, greater than 0 and not exceeding the maximum value of Integer. Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// Number of records per page, with the following options:
	//
	// - **30*	- - **50*	- - **100**
	//
	// Default value: 30.
	//
	// example:
	//
	// kafka
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The region ID.
	//
	// >  You can call the [DescribeRegions](https://help.aliyun.com/document_detail/86912.html) operation to query the most recent region list.
	//
	// example:
	//
	// cn-beijing
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ListStreamingJobsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListStreamingJobsRequest) GoString() string {
	return s.String()
}

func (s *ListStreamingJobsRequest) SetDBInstanceId(v string) *ListStreamingJobsRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ListStreamingJobsRequest) SetPageNumber(v int32) *ListStreamingJobsRequest {
	s.PageNumber = &v
	return s
}

func (s *ListStreamingJobsRequest) SetPageSize(v int32) *ListStreamingJobsRequest {
	s.PageSize = &v
	return s
}

func (s *ListStreamingJobsRequest) SetRegionId(v string) *ListStreamingJobsRequest {
	s.RegionId = &v
	return s
}

type ListStreamingJobsResponseBody struct {
	// The queried jobs.
	JobItems []*ListStreamingJobsResponseBodyJobItems `json:"JobItems,omitempty" xml:"JobItems,omitempty" type:"Repeated"`
	// Current page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// Number of records per page.
	//
	// example:
	//
	// 2
	PageRecordCount *int32 `json:"PageRecordCount,omitempty" xml:"PageRecordCount,omitempty"`
	// Request ID.
	//
	// example:
	//
	// B4CAF581-2AC7-41AD-8940-D56DF7AADF5B
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Total number of records.
	//
	// example:
	//
	// 2
	TotalRecordCount *int32 `json:"TotalRecordCount,omitempty" xml:"TotalRecordCount,omitempty"`
}

func (s ListStreamingJobsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListStreamingJobsResponseBody) GoString() string {
	return s.String()
}

func (s *ListStreamingJobsResponseBody) SetJobItems(v []*ListStreamingJobsResponseBodyJobItems) *ListStreamingJobsResponseBody {
	s.JobItems = v
	return s
}

func (s *ListStreamingJobsResponseBody) SetPageNumber(v int32) *ListStreamingJobsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListStreamingJobsResponseBody) SetPageRecordCount(v int32) *ListStreamingJobsResponseBody {
	s.PageRecordCount = &v
	return s
}

func (s *ListStreamingJobsResponseBody) SetRequestId(v string) *ListStreamingJobsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListStreamingJobsResponseBody) SetTotalRecordCount(v int32) *ListStreamingJobsResponseBody {
	s.TotalRecordCount = &v
	return s
}

type ListStreamingJobsResponseBodyJobItems struct {
	// The name of the database account.
	//
	// example:
	//
	// test-account
	Account *string `json:"Account,omitempty" xml:"Account,omitempty"`
	// The delivery guarantee setting.
	//
	// example:
	//
	// ATLEAST / EXACTLY
	Consistency *string `json:"Consistency,omitempty" xml:"Consistency,omitempty"`
	// The time when the job was created.
	//
	// example:
	//
	// 2019-09-08T16:00:00Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The data source ID.
	//
	// example:
	//
	// 58
	DataSourceId *string `json:"DataSourceId,omitempty" xml:"DataSourceId,omitempty"`
	// The name of the data source.
	//
	// example:
	//
	// test-kafka
	DataSourceName *string `json:"DataSourceName,omitempty" xml:"DataSourceName,omitempty"`
	// The mapped fields in the destination table.
	DestColumns []*string `json:"DestColumns,omitempty" xml:"DestColumns,omitempty" type:"Repeated"`
	// The name of the destination database.
	//
	// example:
	//
	// dest-db
	DestDatabase *string `json:"DestDatabase,omitempty" xml:"DestDatabase,omitempty"`
	// The name of the destination namespace.
	//
	// example:
	//
	// dest-schema
	DestSchema *string `json:"DestSchema,omitempty" xml:"DestSchema,omitempty"`
	// The name of the destination table.
	//
	// example:
	//
	// dest-table
	DestTable *string `json:"DestTable,omitempty" xml:"DestTable,omitempty"`
	// The error message returned.
	//
	// This parameter is returned only when the return value of **Status*	- is **false**.
	//
	// example:
	//
	// ""
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// The fallback offset for data consumption.
	//
	// 	- This parameter indicates the starting offset from which data consumption resumes when a consumer does not request a consumption offset or requests a consumption offset that is beyond the range of the offset information recorded in the current Kafka cluster. Valid values: EARLIEST and LATEST.
	//
	// example:
	//
	// EARLIEST /  LATEST
	FallbackOffset *string `json:"FallbackOffset,omitempty" xml:"FallbackOffset,omitempty"`
	// The description of the job.
	//
	// example:
	//
	// test job
	JobDescription *string `json:"JobDescription,omitempty" xml:"JobDescription,omitempty"`
	// The job ID.
	//
	// example:
	//
	// 1
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// The name of the job.
	//
	// example:
	//
	// test-job
	JobName *string `json:"JobName,omitempty" xml:"JobName,omitempty"`
	// The update condition columns that are used to join the source data and the destination table. Typically, the columns are all the primary key columns of the destination table. If the values of all columns specified by this parameter in different rows are the same, the rows are considered duplicates.
	MatchColumns []*string `json:"MatchColumns,omitempty" xml:"MatchColumns,omitempty" type:"Repeated"`
	// The configuration mode. Valid values:
	//
	// 1.  basic: In basic mode, you must configure the configuration parameters.
	//
	// 2.  professional: In professional mode, you can submit a YAML configuration file.
	//
	// example:
	//
	// Basic / Professional
	Mode *string `json:"Mode,omitempty" xml:"Mode,omitempty"`
	// The time when the job was last modified.
	//
	// example:
	//
	// 2019-09-08T17:00:00Z
	ModifyTime *string `json:"ModifyTime,omitempty" xml:"ModifyTime,omitempty"`
	// The password of the database account.
	//
	// example:
	//
	// pwd123
	Password *string `json:"Password,omitempty" xml:"Password,omitempty"`
	// The source fields.
	SrcColumns []*string `json:"SrcColumns,omitempty" xml:"SrcColumns,omitempty" type:"Repeated"`
	// The status of the job. Valid values:
	//
	// 	- Init
	//
	// 	- Running
	//
	// 	- Exception
	//
	// 	- Paused
	//
	// example:
	//
	// Running
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The columns to be updated if a row of data meets the update condition. Typically, the columns are all non-primary key columns of the destination table. When the columns specified by the MatchColumns parameter are used as conditions to join the source data and the destination table, data in columns of the UpdateColumns type is updated if data is matched.
	UpdateColumns []*string `json:"UpdateColumns,omitempty" xml:"UpdateColumns,omitempty" type:"Repeated"`
	// The write mode.
	//
	// example:
	//
	// INSERT/UPDATE/MERGE
	WriteMode *string `json:"WriteMode,omitempty" xml:"WriteMode,omitempty"`
}

func (s ListStreamingJobsResponseBodyJobItems) String() string {
	return tea.Prettify(s)
}

func (s ListStreamingJobsResponseBodyJobItems) GoString() string {
	return s.String()
}

func (s *ListStreamingJobsResponseBodyJobItems) SetAccount(v string) *ListStreamingJobsResponseBodyJobItems {
	s.Account = &v
	return s
}

func (s *ListStreamingJobsResponseBodyJobItems) SetConsistency(v string) *ListStreamingJobsResponseBodyJobItems {
	s.Consistency = &v
	return s
}

func (s *ListStreamingJobsResponseBodyJobItems) SetCreateTime(v string) *ListStreamingJobsResponseBodyJobItems {
	s.CreateTime = &v
	return s
}

func (s *ListStreamingJobsResponseBodyJobItems) SetDataSourceId(v string) *ListStreamingJobsResponseBodyJobItems {
	s.DataSourceId = &v
	return s
}

func (s *ListStreamingJobsResponseBodyJobItems) SetDataSourceName(v string) *ListStreamingJobsResponseBodyJobItems {
	s.DataSourceName = &v
	return s
}

func (s *ListStreamingJobsResponseBodyJobItems) SetDestColumns(v []*string) *ListStreamingJobsResponseBodyJobItems {
	s.DestColumns = v
	return s
}

func (s *ListStreamingJobsResponseBodyJobItems) SetDestDatabase(v string) *ListStreamingJobsResponseBodyJobItems {
	s.DestDatabase = &v
	return s
}

func (s *ListStreamingJobsResponseBodyJobItems) SetDestSchema(v string) *ListStreamingJobsResponseBodyJobItems {
	s.DestSchema = &v
	return s
}

func (s *ListStreamingJobsResponseBodyJobItems) SetDestTable(v string) *ListStreamingJobsResponseBodyJobItems {
	s.DestTable = &v
	return s
}

func (s *ListStreamingJobsResponseBodyJobItems) SetErrorMessage(v string) *ListStreamingJobsResponseBodyJobItems {
	s.ErrorMessage = &v
	return s
}

func (s *ListStreamingJobsResponseBodyJobItems) SetFallbackOffset(v string) *ListStreamingJobsResponseBodyJobItems {
	s.FallbackOffset = &v
	return s
}

func (s *ListStreamingJobsResponseBodyJobItems) SetJobDescription(v string) *ListStreamingJobsResponseBodyJobItems {
	s.JobDescription = &v
	return s
}

func (s *ListStreamingJobsResponseBodyJobItems) SetJobId(v string) *ListStreamingJobsResponseBodyJobItems {
	s.JobId = &v
	return s
}

func (s *ListStreamingJobsResponseBodyJobItems) SetJobName(v string) *ListStreamingJobsResponseBodyJobItems {
	s.JobName = &v
	return s
}

func (s *ListStreamingJobsResponseBodyJobItems) SetMatchColumns(v []*string) *ListStreamingJobsResponseBodyJobItems {
	s.MatchColumns = v
	return s
}

func (s *ListStreamingJobsResponseBodyJobItems) SetMode(v string) *ListStreamingJobsResponseBodyJobItems {
	s.Mode = &v
	return s
}

func (s *ListStreamingJobsResponseBodyJobItems) SetModifyTime(v string) *ListStreamingJobsResponseBodyJobItems {
	s.ModifyTime = &v
	return s
}

func (s *ListStreamingJobsResponseBodyJobItems) SetPassword(v string) *ListStreamingJobsResponseBodyJobItems {
	s.Password = &v
	return s
}

func (s *ListStreamingJobsResponseBodyJobItems) SetSrcColumns(v []*string) *ListStreamingJobsResponseBodyJobItems {
	s.SrcColumns = v
	return s
}

func (s *ListStreamingJobsResponseBodyJobItems) SetStatus(v string) *ListStreamingJobsResponseBodyJobItems {
	s.Status = &v
	return s
}

func (s *ListStreamingJobsResponseBodyJobItems) SetUpdateColumns(v []*string) *ListStreamingJobsResponseBodyJobItems {
	s.UpdateColumns = v
	return s
}

func (s *ListStreamingJobsResponseBodyJobItems) SetWriteMode(v string) *ListStreamingJobsResponseBodyJobItems {
	s.WriteMode = &v
	return s
}

type ListStreamingJobsResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListStreamingJobsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListStreamingJobsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListStreamingJobsResponse) GoString() string {
	return s.String()
}

func (s *ListStreamingJobsResponse) SetHeaders(v map[string]*string) *ListStreamingJobsResponse {
	s.Headers = v
	return s
}

func (s *ListStreamingJobsResponse) SetStatusCode(v int32) *ListStreamingJobsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListStreamingJobsResponse) SetBody(v *ListStreamingJobsResponseBody) *ListStreamingJobsResponse {
	s.Body = v
	return s
}

type ListTablesRequest struct {
	// The instance ID.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/196830.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The name of the database.
	//
	// This parameter is required.
	//
	// example:
	//
	// adbtest
	Database *string `json:"Database,omitempty" xml:"Database,omitempty"`
	// The maximum number of entries per page. Valid values: 1 to 100.
	//
	// example:
	//
	// 100
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// The pagination token that is used in the next request to retrieve a new page of results. You do not need to specify this parameter for the first request. You must specify the token that is obtained from the previous query as the value of NextToken.
	//
	// example:
	//
	// caeba0bbb2be03f84eb48b699f0a4883
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	OwnerId   *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The region ID of the instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-beijing
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The name of the schema to which the table belongs.
	//
	// This parameter is required.
	//
	// example:
	//
	// public
	Schema *string `json:"Schema,omitempty" xml:"Schema,omitempty"`
	// The Alibaba Cloud Resource Name (ARN) of the access credential for the created Data API account. You can call the CreateSecret operation to create an access credential.
	//
	// >  To call the ListTables operation as a Resource Access Management (RAM) user, the RAM user must have the permissions to call the UseSecret or GetSecretValue operation on the ARN of the access credential.
	//
	// This parameter is required.
	//
	// example:
	//
	// acs:gpdb:cn-beijing:1033**:secret/testsecret-eG2AQGRIwQ0zFp4VA7mYL3uiCXTfDQbQ
	SecretArn *string `json:"SecretArn,omitempty" xml:"SecretArn,omitempty"`
	// The table name pattern for matching. For example, `ab%` specifies to match table names that start with ab.
	//
	// example:
	//
	// ab%
	TablePattern *string `json:"TablePattern,omitempty" xml:"TablePattern,omitempty"`
}

func (s ListTablesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListTablesRequest) GoString() string {
	return s.String()
}

func (s *ListTablesRequest) SetDBInstanceId(v string) *ListTablesRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ListTablesRequest) SetDatabase(v string) *ListTablesRequest {
	s.Database = &v
	return s
}

func (s *ListTablesRequest) SetMaxResults(v int32) *ListTablesRequest {
	s.MaxResults = &v
	return s
}

func (s *ListTablesRequest) SetNextToken(v string) *ListTablesRequest {
	s.NextToken = &v
	return s
}

func (s *ListTablesRequest) SetOwnerId(v int64) *ListTablesRequest {
	s.OwnerId = &v
	return s
}

func (s *ListTablesRequest) SetRegionId(v string) *ListTablesRequest {
	s.RegionId = &v
	return s
}

func (s *ListTablesRequest) SetSchema(v string) *ListTablesRequest {
	s.Schema = &v
	return s
}

func (s *ListTablesRequest) SetSecretArn(v string) *ListTablesRequest {
	s.SecretArn = &v
	return s
}

func (s *ListTablesRequest) SetTablePattern(v string) *ListTablesRequest {
	s.TablePattern = &v
	return s
}

type ListTablesResponseBody struct {
	// The returned message.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// A pagination token. It can be used in the next request to retrieve a new page of results. If NextToken is empty, no next page exists.
	//
	// example:
	//
	// caeba0bbb2be03f84eb48b699f0a4883
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The status of the operation. Valid values:
	//
	// 	- **success**
	//
	// 	- **fail**
	//
	// example:
	//
	// success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The queried tables.
	Tables *ListTablesResponseBodyTables `json:"Tables,omitempty" xml:"Tables,omitempty" type:"Struct"`
}

func (s ListTablesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListTablesResponseBody) GoString() string {
	return s.String()
}

func (s *ListTablesResponseBody) SetMessage(v string) *ListTablesResponseBody {
	s.Message = &v
	return s
}

func (s *ListTablesResponseBody) SetNextToken(v string) *ListTablesResponseBody {
	s.NextToken = &v
	return s
}

func (s *ListTablesResponseBody) SetRequestId(v string) *ListTablesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListTablesResponseBody) SetStatus(v string) *ListTablesResponseBody {
	s.Status = &v
	return s
}

func (s *ListTablesResponseBody) SetTables(v *ListTablesResponseBodyTables) *ListTablesResponseBody {
	s.Tables = v
	return s
}

type ListTablesResponseBodyTables struct {
	Tables []*string `json:"Tables,omitempty" xml:"Tables,omitempty" type:"Repeated"`
}

func (s ListTablesResponseBodyTables) String() string {
	return tea.Prettify(s)
}

func (s ListTablesResponseBodyTables) GoString() string {
	return s.String()
}

func (s *ListTablesResponseBodyTables) SetTables(v []*string) *ListTablesResponseBodyTables {
	s.Tables = v
	return s
}

type ListTablesResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListTablesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListTablesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListTablesResponse) GoString() string {
	return s.String()
}

func (s *ListTablesResponse) SetHeaders(v map[string]*string) *ListTablesResponse {
	s.Headers = v
	return s
}

func (s *ListTablesResponse) SetStatusCode(v int32) *ListTablesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListTablesResponse) SetBody(v *ListTablesResponseBody) *ListTablesResponse {
	s.Body = v
	return s
}

type ListTagResourcesRequest struct {
	// The token used to perform the next query.
	//
	// example:
	//
	// caeba0bbb2be03f84eb48b699f0a4883
	NextToken    *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	OwnerAccount *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The region ID of the instance. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/86912.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of instance N. Valid values of N: 1 to 50.
	//
	// example:
	//
	// gp-xxxxxxxxxx
	ResourceId           []*string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty" type:"Repeated"`
	ResourceOwnerAccount *string   `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	// The resource type. Set the value to instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// instance
	ResourceType *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	// The tags that are added to instances.
	//
	// >  You must specify at least one of the ResourceId and Tag parameters.
	Tag []*ListTagResourcesRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s ListTagResourcesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListTagResourcesRequest) GoString() string {
	return s.String()
}

func (s *ListTagResourcesRequest) SetNextToken(v string) *ListTagResourcesRequest {
	s.NextToken = &v
	return s
}

func (s *ListTagResourcesRequest) SetOwnerAccount(v string) *ListTagResourcesRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ListTagResourcesRequest) SetOwnerId(v int64) *ListTagResourcesRequest {
	s.OwnerId = &v
	return s
}

func (s *ListTagResourcesRequest) SetRegionId(v string) *ListTagResourcesRequest {
	s.RegionId = &v
	return s
}

func (s *ListTagResourcesRequest) SetResourceId(v []*string) *ListTagResourcesRequest {
	s.ResourceId = v
	return s
}

func (s *ListTagResourcesRequest) SetResourceOwnerAccount(v string) *ListTagResourcesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ListTagResourcesRequest) SetResourceOwnerId(v int64) *ListTagResourcesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ListTagResourcesRequest) SetResourceType(v string) *ListTagResourcesRequest {
	s.ResourceType = &v
	return s
}

func (s *ListTagResourcesRequest) SetTag(v []*ListTagResourcesRequestTag) *ListTagResourcesRequest {
	s.Tag = v
	return s
}

type ListTagResourcesRequestTag struct {
	// The key of tag N. The key must be 1 to 64 characters in length.
	//
	// You can use `Tag.N` to query AnalyticDB for PostgreSQL instances that have specific tags added. Tag.N consists of Tag.N.Key and Tag.N.Value.
	//
	// Valid values of N: 1 to 20.
	//
	// 	- If you specify only `Tag.N.Key`, all instances that have the tag key added are returned.
	//
	// 	- If you specify only `Tag.N.Value`, the `InvalidParameter.TagValue` error message is returned.
	//
	// 	- If you specify multiple tag key-value pairs at a time, the instances that match all the specified tag key-value pairs are returned.
	//
	// example:
	//
	// TestKey
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The value of tag N. The value must be 1 to 128 characters in length.
	//
	// Valid values of N: 1 to 20.
	//
	// example:
	//
	// TestValue
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s ListTagResourcesRequestTag) String() string {
	return tea.Prettify(s)
}

func (s ListTagResourcesRequestTag) GoString() string {
	return s.String()
}

func (s *ListTagResourcesRequestTag) SetKey(v string) *ListTagResourcesRequestTag {
	s.Key = &v
	return s
}

func (s *ListTagResourcesRequestTag) SetValue(v string) *ListTagResourcesRequestTag {
	s.Value = &v
	return s
}

type ListTagResourcesResponseBody struct {
	// The token used to perform the next query.
	//
	// example:
	//
	// caeba0bbb2be03f84eb48b699f0a4883
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 5414A4E5-4C36-4461-95FC-23757A20B5F8
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Details about the instances and tags, including the instance IDs, instance modes, and tag key-value pairs.
	TagResources *ListTagResourcesResponseBodyTagResources `json:"TagResources,omitempty" xml:"TagResources,omitempty" type:"Struct"`
}

func (s ListTagResourcesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListTagResourcesResponseBody) GoString() string {
	return s.String()
}

func (s *ListTagResourcesResponseBody) SetNextToken(v string) *ListTagResourcesResponseBody {
	s.NextToken = &v
	return s
}

func (s *ListTagResourcesResponseBody) SetRequestId(v string) *ListTagResourcesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListTagResourcesResponseBody) SetTagResources(v *ListTagResourcesResponseBodyTagResources) *ListTagResourcesResponseBody {
	s.TagResources = v
	return s
}

type ListTagResourcesResponseBodyTagResources struct {
	TagResource []*ListTagResourcesResponseBodyTagResourcesTagResource `json:"TagResource,omitempty" xml:"TagResource,omitempty" type:"Repeated"`
}

func (s ListTagResourcesResponseBodyTagResources) String() string {
	return tea.Prettify(s)
}

func (s ListTagResourcesResponseBodyTagResources) GoString() string {
	return s.String()
}

func (s *ListTagResourcesResponseBodyTagResources) SetTagResource(v []*ListTagResourcesResponseBodyTagResourcesTagResource) *ListTagResourcesResponseBodyTagResources {
	s.TagResource = v
	return s
}

type ListTagResourcesResponseBodyTagResourcesTagResource struct {
	// The ID of the instance.
	//
	// example:
	//
	// gp-xxxxxxxxxx
	ResourceId *string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty"`
	// The storage mode of the instance.
	//
	// example:
	//
	// instance
	ResourceType *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	// The tag key.
	//
	// example:
	//
	// TestKey
	TagKey *string `json:"TagKey,omitempty" xml:"TagKey,omitempty"`
	// The tag value.
	//
	// example:
	//
	// TestValue
	TagValue *string `json:"TagValue,omitempty" xml:"TagValue,omitempty"`
}

func (s ListTagResourcesResponseBodyTagResourcesTagResource) String() string {
	return tea.Prettify(s)
}

func (s ListTagResourcesResponseBodyTagResourcesTagResource) GoString() string {
	return s.String()
}

func (s *ListTagResourcesResponseBodyTagResourcesTagResource) SetResourceId(v string) *ListTagResourcesResponseBodyTagResourcesTagResource {
	s.ResourceId = &v
	return s
}

func (s *ListTagResourcesResponseBodyTagResourcesTagResource) SetResourceType(v string) *ListTagResourcesResponseBodyTagResourcesTagResource {
	s.ResourceType = &v
	return s
}

func (s *ListTagResourcesResponseBodyTagResourcesTagResource) SetTagKey(v string) *ListTagResourcesResponseBodyTagResourcesTagResource {
	s.TagKey = &v
	return s
}

func (s *ListTagResourcesResponseBodyTagResourcesTagResource) SetTagValue(v string) *ListTagResourcesResponseBodyTagResourcesTagResource {
	s.TagValue = &v
	return s
}

type ListTagResourcesResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListTagResourcesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListTagResourcesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListTagResourcesResponse) GoString() string {
	return s.String()
}

func (s *ListTagResourcesResponse) SetHeaders(v map[string]*string) *ListTagResourcesResponse {
	s.Headers = v
	return s
}

func (s *ListTagResourcesResponse) SetStatusCode(v int32) *ListTagResourcesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListTagResourcesResponse) SetBody(v *ListTagResourcesResponseBody) *ListTagResourcesResponse {
	s.Body = v
	return s
}

type ModifyAccountDescriptionRequest struct {
	// The new description of the database account.
	//
	// 	- The description must start with a letter.
	//
	// 	- The description cannot start with `http://` or `https://`.
	//
	// 	- The description can contain letters, underscores (_), hyphens (-), and digits.
	//
	// 	- The description must be 2 to 256 characters in length.
	//
	// example:
	//
	// testAccoutdescribe
	AccountDescription *string `json:"AccountDescription,omitempty" xml:"AccountDescription,omitempty"`
	// The name of the database account.
	//
	// This parameter is required.
	//
	// example:
	//
	// testAccout
	AccountName *string `json:"AccountName,omitempty" xml:"AccountName,omitempty"`
	// Idempotence check. For more information, see [How to Ensure Idempotence](https://help.aliyun.com/document_detail/327176.html).
	//
	// example:
	//
	// 0c593ea1-3bea-11e9-b96b-88**********
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// The instance ID.
	//
	// > You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the IDs of all AnalyticDB for PostgreSQL instances within a region.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
}

func (s ModifyAccountDescriptionRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyAccountDescriptionRequest) GoString() string {
	return s.String()
}

func (s *ModifyAccountDescriptionRequest) SetAccountDescription(v string) *ModifyAccountDescriptionRequest {
	s.AccountDescription = &v
	return s
}

func (s *ModifyAccountDescriptionRequest) SetAccountName(v string) *ModifyAccountDescriptionRequest {
	s.AccountName = &v
	return s
}

func (s *ModifyAccountDescriptionRequest) SetClientToken(v string) *ModifyAccountDescriptionRequest {
	s.ClientToken = &v
	return s
}

func (s *ModifyAccountDescriptionRequest) SetDBInstanceId(v string) *ModifyAccountDescriptionRequest {
	s.DBInstanceId = &v
	return s
}

type ModifyAccountDescriptionResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 99BBBD5E-B5D8-4FC8-B8BF-FB1A0A38BBA2
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyAccountDescriptionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyAccountDescriptionResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyAccountDescriptionResponseBody) SetRequestId(v string) *ModifyAccountDescriptionResponseBody {
	s.RequestId = &v
	return s
}

type ModifyAccountDescriptionResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyAccountDescriptionResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyAccountDescriptionResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyAccountDescriptionResponse) GoString() string {
	return s.String()
}

func (s *ModifyAccountDescriptionResponse) SetHeaders(v map[string]*string) *ModifyAccountDescriptionResponse {
	s.Headers = v
	return s
}

func (s *ModifyAccountDescriptionResponse) SetStatusCode(v int32) *ModifyAccountDescriptionResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyAccountDescriptionResponse) SetBody(v *ModifyAccountDescriptionResponseBody) *ModifyAccountDescriptionResponse {
	s.Body = v
	return s
}

type ModifyBackupPolicyRequest struct {
	// The number of days for which data backup files are retained. Default value: 7. Maximum value: 7. Valid values: 1 to 7.
	//
	// example:
	//
	// 7
	BackupRetentionPeriod *int32 `json:"BackupRetentionPeriod,omitempty" xml:"BackupRetentionPeriod,omitempty"`
	// The ID of the instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp***************
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// Specifies whether to enable automatic point-in-time backup.
	//
	// 	- true
	//
	// 	- false
	//
	// Default value: true.
	//
	// example:
	//
	// true
	EnableRecoveryPoint *bool `json:"EnableRecoveryPoint,omitempty" xml:"EnableRecoveryPoint,omitempty"`
	// The cycle based on which backups are performed. If more than one day of the week is specified, the days of the week are separated by commas (,). Valid values:
	//
	// 	- Monday
	//
	// 	- Tuesday
	//
	// 	- Wednesday
	//
	// 	- Thursday
	//
	// 	- Friday
	//
	// 	- Saturday
	//
	// 	- Sunday
	//
	// This parameter is required.
	//
	// example:
	//
	// Tuesday, Thursday, Saturday
	PreferredBackupPeriod *string `json:"PreferredBackupPeriod,omitempty" xml:"PreferredBackupPeriod,omitempty"`
	// The backup window. Specify the backup window in the HH:mmZ-HH:mmZ format. The backup window must be in UTC. Default value: 00:00-01:00.
	//
	// This parameter is required.
	//
	// example:
	//
	// 15:00Z-16:00Z
	PreferredBackupTime *string `json:"PreferredBackupTime,omitempty" xml:"PreferredBackupTime,omitempty"`
	// The frequency of point-in-time backup.
	//
	// 	- 1: per hour
	//
	// 	- 2: per 2 hours
	//
	// 	- 4: per 4 hours
	//
	// 	- 8: per 8 hours
	//
	// Default value: 8.
	//
	// example:
	//
	// 8
	RecoveryPointPeriod *string `json:"RecoveryPointPeriod,omitempty" xml:"RecoveryPointPeriod,omitempty"`
}

func (s ModifyBackupPolicyRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyBackupPolicyRequest) GoString() string {
	return s.String()
}

func (s *ModifyBackupPolicyRequest) SetBackupRetentionPeriod(v int32) *ModifyBackupPolicyRequest {
	s.BackupRetentionPeriod = &v
	return s
}

func (s *ModifyBackupPolicyRequest) SetDBInstanceId(v string) *ModifyBackupPolicyRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ModifyBackupPolicyRequest) SetEnableRecoveryPoint(v bool) *ModifyBackupPolicyRequest {
	s.EnableRecoveryPoint = &v
	return s
}

func (s *ModifyBackupPolicyRequest) SetPreferredBackupPeriod(v string) *ModifyBackupPolicyRequest {
	s.PreferredBackupPeriod = &v
	return s
}

func (s *ModifyBackupPolicyRequest) SetPreferredBackupTime(v string) *ModifyBackupPolicyRequest {
	s.PreferredBackupTime = &v
	return s
}

func (s *ModifyBackupPolicyRequest) SetRecoveryPointPeriod(v string) *ModifyBackupPolicyRequest {
	s.RecoveryPointPeriod = &v
	return s
}

type ModifyBackupPolicyResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// DA147739-AEAD-4417-9089-65**********
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyBackupPolicyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyBackupPolicyResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyBackupPolicyResponseBody) SetRequestId(v string) *ModifyBackupPolicyResponseBody {
	s.RequestId = &v
	return s
}

type ModifyBackupPolicyResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyBackupPolicyResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyBackupPolicyResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyBackupPolicyResponse) GoString() string {
	return s.String()
}

func (s *ModifyBackupPolicyResponse) SetHeaders(v map[string]*string) *ModifyBackupPolicyResponse {
	s.Headers = v
	return s
}

func (s *ModifyBackupPolicyResponse) SetStatusCode(v int32) *ModifyBackupPolicyResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyBackupPolicyResponse) SetBody(v *ModifyBackupPolicyResponseBody) *ModifyBackupPolicyResponse {
	s.Body = v
	return s
}

type ModifyDBInstanceConfigRequest struct {
	// The description of the instance.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceDescription *string `json:"DBInstanceDescription,omitempty" xml:"DBInstanceDescription,omitempty"`
	// The ID of the instance.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the instance IDs of all AnalyticDB for PostgreSQL instances in a specific region.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The wait period for the instance that has no traffic to become idle. Minimum value: 60. Default value: 600. Unit: seconds.
	//
	// example:
	//
	// 600
	IdleTime *int32 `json:"IdleTime,omitempty" xml:"IdleTime,omitempty"`
	// The ID of the resource group to which the instance belongs. For more information about how to obtain the ID of a resource group, see [View basic information of a resource group](https://help.aliyun.com/document_detail/151181.html).
	//
	// example:
	//
	// rg-bp67acfmxazb4p****
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	// The threshold of computing resources. Valid values: 8 to 32. Unit: AnalyticDB Compute Units (ACUs).
	//
	// example:
	//
	// 32
	ServerlessResource *int32 `json:"ServerlessResource,omitempty" xml:"ServerlessResource,omitempty"`
}

func (s ModifyDBInstanceConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBInstanceConfigRequest) GoString() string {
	return s.String()
}

func (s *ModifyDBInstanceConfigRequest) SetDBInstanceDescription(v string) *ModifyDBInstanceConfigRequest {
	s.DBInstanceDescription = &v
	return s
}

func (s *ModifyDBInstanceConfigRequest) SetDBInstanceId(v string) *ModifyDBInstanceConfigRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ModifyDBInstanceConfigRequest) SetIdleTime(v int32) *ModifyDBInstanceConfigRequest {
	s.IdleTime = &v
	return s
}

func (s *ModifyDBInstanceConfigRequest) SetResourceGroupId(v string) *ModifyDBInstanceConfigRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *ModifyDBInstanceConfigRequest) SetServerlessResource(v int32) *ModifyDBInstanceConfigRequest {
	s.ServerlessResource = &v
	return s
}

type ModifyDBInstanceConfigResponseBody struct {
	// The ID of the instance.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DbInstanceId *string `json:"DbInstanceId,omitempty" xml:"DbInstanceId,omitempty"`
	// The error message returned if the operation fails.
	//
	// example:
	//
	// \\"error message\\"
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 34B32A0A-08EF-4A87-B6BE-CDD9F56FC3AD
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The state of the operation. Valid values:
	//
	// 	- **0**: The operation failed.
	//
	// 	- **1**: The operation is successful.
	//
	// example:
	//
	// 1
	Status *bool `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ModifyDBInstanceConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBInstanceConfigResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyDBInstanceConfigResponseBody) SetDbInstanceId(v string) *ModifyDBInstanceConfigResponseBody {
	s.DbInstanceId = &v
	return s
}

func (s *ModifyDBInstanceConfigResponseBody) SetErrorMessage(v string) *ModifyDBInstanceConfigResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *ModifyDBInstanceConfigResponseBody) SetRequestId(v string) *ModifyDBInstanceConfigResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyDBInstanceConfigResponseBody) SetStatus(v bool) *ModifyDBInstanceConfigResponseBody {
	s.Status = &v
	return s
}

type ModifyDBInstanceConfigResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyDBInstanceConfigResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyDBInstanceConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBInstanceConfigResponse) GoString() string {
	return s.String()
}

func (s *ModifyDBInstanceConfigResponse) SetHeaders(v map[string]*string) *ModifyDBInstanceConfigResponse {
	s.Headers = v
	return s
}

func (s *ModifyDBInstanceConfigResponse) SetStatusCode(v int32) *ModifyDBInstanceConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyDBInstanceConfigResponse) SetBody(v *ModifyDBInstanceConfigResponseBody) *ModifyDBInstanceConfigResponse {
	s.Body = v
	return s
}

type ModifyDBInstanceConnectionStringRequest struct {
	// Idempotence check. For more information, see [How to Ensure Idempotence](https://help.aliyun.com/document_detail/327176.html).
	//
	// example:
	//
	// 0c593ea1-3bea-11e9-b96b-88**********
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// The endpoint prefix of the instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-test
	ConnectionStringPrefix *string `json:"ConnectionStringPrefix,omitempty" xml:"ConnectionStringPrefix,omitempty"`
	// The current endpoint of the instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-t4n2qg19bnn98****-master.gpdb.rds.aliyuncs.com
	CurrentConnectionString *string `json:"CurrentConnectionString,omitempty" xml:"CurrentConnectionString,omitempty"`
	// The instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-t4n2qg19bnn98****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The port number. Example: 5432.
	//
	// This parameter is required.
	//
	// example:
	//
	// 5432
	Port *string `json:"Port,omitempty" xml:"Port,omitempty"`
}

func (s ModifyDBInstanceConnectionStringRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBInstanceConnectionStringRequest) GoString() string {
	return s.String()
}

func (s *ModifyDBInstanceConnectionStringRequest) SetClientToken(v string) *ModifyDBInstanceConnectionStringRequest {
	s.ClientToken = &v
	return s
}

func (s *ModifyDBInstanceConnectionStringRequest) SetConnectionStringPrefix(v string) *ModifyDBInstanceConnectionStringRequest {
	s.ConnectionStringPrefix = &v
	return s
}

func (s *ModifyDBInstanceConnectionStringRequest) SetCurrentConnectionString(v string) *ModifyDBInstanceConnectionStringRequest {
	s.CurrentConnectionString = &v
	return s
}

func (s *ModifyDBInstanceConnectionStringRequest) SetDBInstanceId(v string) *ModifyDBInstanceConnectionStringRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ModifyDBInstanceConnectionStringRequest) SetPort(v string) *ModifyDBInstanceConnectionStringRequest {
	s.Port = &v
	return s
}

type ModifyDBInstanceConnectionStringResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 29B0BF34-D069-4495-92C7-FA6D94528A9E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyDBInstanceConnectionStringResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBInstanceConnectionStringResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyDBInstanceConnectionStringResponseBody) SetRequestId(v string) *ModifyDBInstanceConnectionStringResponseBody {
	s.RequestId = &v
	return s
}

type ModifyDBInstanceConnectionStringResponse struct {
	Headers    map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyDBInstanceConnectionStringResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyDBInstanceConnectionStringResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBInstanceConnectionStringResponse) GoString() string {
	return s.String()
}

func (s *ModifyDBInstanceConnectionStringResponse) SetHeaders(v map[string]*string) *ModifyDBInstanceConnectionStringResponse {
	s.Headers = v
	return s
}

func (s *ModifyDBInstanceConnectionStringResponse) SetStatusCode(v int32) *ModifyDBInstanceConnectionStringResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyDBInstanceConnectionStringResponse) SetBody(v *ModifyDBInstanceConnectionStringResponseBody) *ModifyDBInstanceConnectionStringResponse {
	s.Body = v
	return s
}

type ModifyDBInstanceDeploymentModeRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// multiple
	DeployMode *string `json:"DeployMode,omitempty" xml:"DeployMode,omitempty"`
	// example:
	//
	// vsw-bp1cpq8mr64paltkb****
	StandbyVSwitchId *string `json:"StandbyVSwitchId,omitempty" xml:"StandbyVSwitchId,omitempty"`
	// example:
	//
	// cn-hangzhou-j
	StandbyZoneId *string `json:"StandbyZoneId,omitempty" xml:"StandbyZoneId,omitempty"`
}

func (s ModifyDBInstanceDeploymentModeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBInstanceDeploymentModeRequest) GoString() string {
	return s.String()
}

func (s *ModifyDBInstanceDeploymentModeRequest) SetDBInstanceId(v string) *ModifyDBInstanceDeploymentModeRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ModifyDBInstanceDeploymentModeRequest) SetDeployMode(v string) *ModifyDBInstanceDeploymentModeRequest {
	s.DeployMode = &v
	return s
}

func (s *ModifyDBInstanceDeploymentModeRequest) SetStandbyVSwitchId(v string) *ModifyDBInstanceDeploymentModeRequest {
	s.StandbyVSwitchId = &v
	return s
}

func (s *ModifyDBInstanceDeploymentModeRequest) SetStandbyZoneId(v string) *ModifyDBInstanceDeploymentModeRequest {
	s.StandbyZoneId = &v
	return s
}

type ModifyDBInstanceDeploymentModeResponseBody struct {
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyDBInstanceDeploymentModeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBInstanceDeploymentModeResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyDBInstanceDeploymentModeResponseBody) SetRequestId(v string) *ModifyDBInstanceDeploymentModeResponseBody {
	s.RequestId = &v
	return s
}

type ModifyDBInstanceDeploymentModeResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyDBInstanceDeploymentModeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyDBInstanceDeploymentModeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBInstanceDeploymentModeResponse) GoString() string {
	return s.String()
}

func (s *ModifyDBInstanceDeploymentModeResponse) SetHeaders(v map[string]*string) *ModifyDBInstanceDeploymentModeResponse {
	s.Headers = v
	return s
}

func (s *ModifyDBInstanceDeploymentModeResponse) SetStatusCode(v int32) *ModifyDBInstanceDeploymentModeResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyDBInstanceDeploymentModeResponse) SetBody(v *ModifyDBInstanceDeploymentModeResponseBody) *ModifyDBInstanceDeploymentModeResponse {
	s.Body = v
	return s
}

type ModifyDBInstanceDescriptionRequest struct {
	// The description of the instance.
	//
	// The description must be 2 to 256 characters in length. It cannot start with http:// or https://.
	//
	// This parameter is required.
	//
	// example:
	//
	// test
	DBInstanceDescription *string `json:"DBInstanceDescription,omitempty" xml:"DBInstanceDescription,omitempty"`
	// The ID of the instance.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the instance IDs of all AnalyticDB for PostgreSQL instances in a specific region.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// This parameter is no longer used.
	//
	// example:
	//
	// rg-bp67acfmxazb4p****
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
}

func (s ModifyDBInstanceDescriptionRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBInstanceDescriptionRequest) GoString() string {
	return s.String()
}

func (s *ModifyDBInstanceDescriptionRequest) SetDBInstanceDescription(v string) *ModifyDBInstanceDescriptionRequest {
	s.DBInstanceDescription = &v
	return s
}

func (s *ModifyDBInstanceDescriptionRequest) SetDBInstanceId(v string) *ModifyDBInstanceDescriptionRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ModifyDBInstanceDescriptionRequest) SetResourceGroupId(v string) *ModifyDBInstanceDescriptionRequest {
	s.ResourceGroupId = &v
	return s
}

type ModifyDBInstanceDescriptionResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// 107BE202-D1A2-479E-98E0-A8**********
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyDBInstanceDescriptionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBInstanceDescriptionResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyDBInstanceDescriptionResponseBody) SetRequestId(v string) *ModifyDBInstanceDescriptionResponseBody {
	s.RequestId = &v
	return s
}

type ModifyDBInstanceDescriptionResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyDBInstanceDescriptionResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyDBInstanceDescriptionResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBInstanceDescriptionResponse) GoString() string {
	return s.String()
}

func (s *ModifyDBInstanceDescriptionResponse) SetHeaders(v map[string]*string) *ModifyDBInstanceDescriptionResponse {
	s.Headers = v
	return s
}

func (s *ModifyDBInstanceDescriptionResponse) SetStatusCode(v int32) *ModifyDBInstanceDescriptionResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyDBInstanceDescriptionResponse) SetBody(v *ModifyDBInstanceDescriptionResponseBody) *ModifyDBInstanceDescriptionResponse {
	s.Body = v
	return s
}

type ModifyDBInstanceMaintainTimeRequest struct {
	// The ID of the instance.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the details of all AnalyticDB for PostgreSQL instances in a specific region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp***************
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The end time of the maintenance window. The end time must be later than the start time. Specify the time in the HH:mmZ format. The time must be in UTC.
	//
	// This parameter is required.
	//
	// example:
	//
	// 03:00Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// This parameter is no longer used.
	//
	// example:
	//
	// rg-bp67acfmxazb4p****
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	// The start time of the maintenance window. Specify the time in the HH:mmZ format. The time must be in UTC.
	//
	// This parameter is required.
	//
	// example:
	//
	// 02:00Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s ModifyDBInstanceMaintainTimeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBInstanceMaintainTimeRequest) GoString() string {
	return s.String()
}

func (s *ModifyDBInstanceMaintainTimeRequest) SetDBInstanceId(v string) *ModifyDBInstanceMaintainTimeRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ModifyDBInstanceMaintainTimeRequest) SetEndTime(v string) *ModifyDBInstanceMaintainTimeRequest {
	s.EndTime = &v
	return s
}

func (s *ModifyDBInstanceMaintainTimeRequest) SetResourceGroupId(v string) *ModifyDBInstanceMaintainTimeRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *ModifyDBInstanceMaintainTimeRequest) SetStartTime(v string) *ModifyDBInstanceMaintainTimeRequest {
	s.StartTime = &v
	return s
}

type ModifyDBInstanceMaintainTimeResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// CA9A34C8-AC95-413B-AC6A-CE**********
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyDBInstanceMaintainTimeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBInstanceMaintainTimeResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyDBInstanceMaintainTimeResponseBody) SetRequestId(v string) *ModifyDBInstanceMaintainTimeResponseBody {
	s.RequestId = &v
	return s
}

type ModifyDBInstanceMaintainTimeResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyDBInstanceMaintainTimeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyDBInstanceMaintainTimeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBInstanceMaintainTimeResponse) GoString() string {
	return s.String()
}

func (s *ModifyDBInstanceMaintainTimeResponse) SetHeaders(v map[string]*string) *ModifyDBInstanceMaintainTimeResponse {
	s.Headers = v
	return s
}

func (s *ModifyDBInstanceMaintainTimeResponse) SetStatusCode(v int32) *ModifyDBInstanceMaintainTimeResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyDBInstanceMaintainTimeResponse) SetBody(v *ModifyDBInstanceMaintainTimeResponseBody) *ModifyDBInstanceMaintainTimeResponse {
	s.Body = v
	return s
}

type ModifyDBInstanceNetworkTypeRequest struct {
	// The instance ID.
	//
	// > You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The new network type of the instance. Valid values:
	//
	// 	- VPC
	//
	// 	- Classic
	//
	// This parameter is required.
	//
	// example:
	//
	// VPC
	InstanceNetworkType *string `json:"InstanceNetworkType,omitempty" xml:"InstanceNetworkType,omitempty"`
	// The internal IP address of the instance.
	//
	// example:
	//
	// 10.10.XX.XX
	PrivateIpAddress *string `json:"PrivateIpAddress,omitempty" xml:"PrivateIpAddress,omitempty"`
	// The virtual private cloud (VPC) ID of the instance.
	//
	// example:
	//
	// vpc-bp19ame5m1r3oejns****
	VPCId *string `json:"VPCId,omitempty" xml:"VPCId,omitempty"`
	// The vSwitch ID of the instance. This parameter must be specified when VPCId is specified.
	//
	// example:
	//
	// vsw-bp1cpq8mr64paltkb****
	VSwitchId *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
}

func (s ModifyDBInstanceNetworkTypeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBInstanceNetworkTypeRequest) GoString() string {
	return s.String()
}

func (s *ModifyDBInstanceNetworkTypeRequest) SetDBInstanceId(v string) *ModifyDBInstanceNetworkTypeRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ModifyDBInstanceNetworkTypeRequest) SetInstanceNetworkType(v string) *ModifyDBInstanceNetworkTypeRequest {
	s.InstanceNetworkType = &v
	return s
}

func (s *ModifyDBInstanceNetworkTypeRequest) SetPrivateIpAddress(v string) *ModifyDBInstanceNetworkTypeRequest {
	s.PrivateIpAddress = &v
	return s
}

func (s *ModifyDBInstanceNetworkTypeRequest) SetVPCId(v string) *ModifyDBInstanceNetworkTypeRequest {
	s.VPCId = &v
	return s
}

func (s *ModifyDBInstanceNetworkTypeRequest) SetVSwitchId(v string) *ModifyDBInstanceNetworkTypeRequest {
	s.VSwitchId = &v
	return s
}

type ModifyDBInstanceNetworkTypeResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 2d0c35a9-f5da-44ba-852d-741e27b7eb0b
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyDBInstanceNetworkTypeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBInstanceNetworkTypeResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyDBInstanceNetworkTypeResponseBody) SetRequestId(v string) *ModifyDBInstanceNetworkTypeResponseBody {
	s.RequestId = &v
	return s
}

type ModifyDBInstanceNetworkTypeResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyDBInstanceNetworkTypeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyDBInstanceNetworkTypeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBInstanceNetworkTypeResponse) GoString() string {
	return s.String()
}

func (s *ModifyDBInstanceNetworkTypeResponse) SetHeaders(v map[string]*string) *ModifyDBInstanceNetworkTypeResponse {
	s.Headers = v
	return s
}

func (s *ModifyDBInstanceNetworkTypeResponse) SetStatusCode(v int32) *ModifyDBInstanceNetworkTypeResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyDBInstanceNetworkTypeResponse) SetBody(v *ModifyDBInstanceNetworkTypeResponseBody) *ModifyDBInstanceNetworkTypeResponse {
	s.Body = v
	return s
}

type ModifyDBInstancePayTypeRequest struct {
	// The instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp***************
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The billing method of the instance. Valid values:
	//
	// 	- Postpaid: pay-as-you-go.
	//
	// 	- Prepaid: subscription.
	//
	// This parameter is required.
	//
	// example:
	//
	// Postpaid
	PayType *string `json:"PayType,omitempty" xml:"PayType,omitempty"`
	// The unit of the subscription duration. Valid values:
	//
	// 	- Month
	//
	// 	- Year
	//
	// This parameter must be specified only when PayType is set to Prepaid.
	//
	// example:
	//
	// Month
	Period *string `json:"Period,omitempty" xml:"Period,omitempty"`
	// The subscription duration.
	//
	// 	- Valid values when Period is set to Month: 1 to 9.
	//
	// 	- Valid values when Period is set to Year: 1 to 3.
	//
	// This parameter must be specified only when PayType is set to Prepaid.
	//
	// example:
	//
	// 1
	UsedTime *int32 `json:"UsedTime,omitempty" xml:"UsedTime,omitempty"`
}

func (s ModifyDBInstancePayTypeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBInstancePayTypeRequest) GoString() string {
	return s.String()
}

func (s *ModifyDBInstancePayTypeRequest) SetDBInstanceId(v string) *ModifyDBInstancePayTypeRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ModifyDBInstancePayTypeRequest) SetPayType(v string) *ModifyDBInstancePayTypeRequest {
	s.PayType = &v
	return s
}

func (s *ModifyDBInstancePayTypeRequest) SetPeriod(v string) *ModifyDBInstancePayTypeRequest {
	s.Period = &v
	return s
}

func (s *ModifyDBInstancePayTypeRequest) SetUsedTime(v int32) *ModifyDBInstancePayTypeRequest {
	s.UsedTime = &v
	return s
}

type ModifyDBInstancePayTypeResponseBody struct {
	// The instance ID.
	//
	// example:
	//
	// gp-bp***************
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The order ID.
	//
	// example:
	//
	// 50578361067****
	OrderId *string `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
	// Id of the request
	//
	// example:
	//
	// 7565770E-7C45-462D-BA4A-8A5396F2****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyDBInstancePayTypeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBInstancePayTypeResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyDBInstancePayTypeResponseBody) SetDBInstanceId(v string) *ModifyDBInstancePayTypeResponseBody {
	s.DBInstanceId = &v
	return s
}

func (s *ModifyDBInstancePayTypeResponseBody) SetOrderId(v string) *ModifyDBInstancePayTypeResponseBody {
	s.OrderId = &v
	return s
}

func (s *ModifyDBInstancePayTypeResponseBody) SetRequestId(v string) *ModifyDBInstancePayTypeResponseBody {
	s.RequestId = &v
	return s
}

type ModifyDBInstancePayTypeResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyDBInstancePayTypeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyDBInstancePayTypeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBInstancePayTypeResponse) GoString() string {
	return s.String()
}

func (s *ModifyDBInstancePayTypeResponse) SetHeaders(v map[string]*string) *ModifyDBInstancePayTypeResponse {
	s.Headers = v
	return s
}

func (s *ModifyDBInstancePayTypeResponse) SetStatusCode(v int32) *ModifyDBInstancePayTypeResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyDBInstancePayTypeResponse) SetBody(v *ModifyDBInstancePayTypeResponseBody) *ModifyDBInstancePayTypeResponse {
	s.Body = v
	return s
}

type ModifyDBInstanceResourceGroupRequest struct {
	// The ID of the instance.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the instance IDs of all AnalyticDB for PostgreSQL instances in a specific region.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The ID of the resource group to which you want to move the instance. For more information about how to obtain the ID of a resource group, see [View basic information of a resource group](https://help.aliyun.com/document_detail/151181.html).
	//
	// This parameter is required.
	//
	// example:
	//
	// rg-bp67acfmxazb4b****
	NewResourceGroupId *string `json:"NewResourceGroupId,omitempty" xml:"NewResourceGroupId,omitempty"`
	OwnerAccount       *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId            *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The ID of the resource group to which the instance belongs. For more information about how to obtain the ID of a resource group, see [View basic information of a resource group](https://help.aliyun.com/document_detail/151181.html).
	//
	// example:
	//
	// rg-bp67acfmxazb4p****
	ResourceGroupId      *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s ModifyDBInstanceResourceGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBInstanceResourceGroupRequest) GoString() string {
	return s.String()
}

func (s *ModifyDBInstanceResourceGroupRequest) SetDBInstanceId(v string) *ModifyDBInstanceResourceGroupRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ModifyDBInstanceResourceGroupRequest) SetNewResourceGroupId(v string) *ModifyDBInstanceResourceGroupRequest {
	s.NewResourceGroupId = &v
	return s
}

func (s *ModifyDBInstanceResourceGroupRequest) SetOwnerAccount(v string) *ModifyDBInstanceResourceGroupRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifyDBInstanceResourceGroupRequest) SetOwnerId(v int64) *ModifyDBInstanceResourceGroupRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyDBInstanceResourceGroupRequest) SetResourceGroupId(v string) *ModifyDBInstanceResourceGroupRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *ModifyDBInstanceResourceGroupRequest) SetResourceOwnerAccount(v string) *ModifyDBInstanceResourceGroupRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyDBInstanceResourceGroupRequest) SetResourceOwnerId(v int64) *ModifyDBInstanceResourceGroupRequest {
	s.ResourceOwnerId = &v
	return s
}

type ModifyDBInstanceResourceGroupResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// 65BDA532-28AF-4122-AA39-B382721EEE64
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyDBInstanceResourceGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBInstanceResourceGroupResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyDBInstanceResourceGroupResponseBody) SetRequestId(v string) *ModifyDBInstanceResourceGroupResponseBody {
	s.RequestId = &v
	return s
}

type ModifyDBInstanceResourceGroupResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyDBInstanceResourceGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyDBInstanceResourceGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBInstanceResourceGroupResponse) GoString() string {
	return s.String()
}

func (s *ModifyDBInstanceResourceGroupResponse) SetHeaders(v map[string]*string) *ModifyDBInstanceResourceGroupResponse {
	s.Headers = v
	return s
}

func (s *ModifyDBInstanceResourceGroupResponse) SetStatusCode(v int32) *ModifyDBInstanceResourceGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyDBInstanceResourceGroupResponse) SetBody(v *ModifyDBInstanceResourceGroupResponseBody) *ModifyDBInstanceResourceGroupResponse {
	s.Body = v
	return s
}

type ModifyDBInstanceSSLRequest struct {
	// The encrypted endpoint. By default, the wildcards are used for instances that are hosted on ECS instances. This way, the endpoints that can be resolved to the same IP address are encrypted.
	//
	// example:
	//
	// gp-xxxxxxxxxxx-master.gpdbmaster.singapore.rds.aliyuncs.com
	ConnectionString *string `json:"ConnectionString,omitempty" xml:"ConnectionString,omitempty"`
	// The ID of the instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The status of SSL encryption. Valid values:
	//
	// 	- 0: disables SSL encryption.
	//
	// 	- 1: enables SSL encryption.
	//
	// 	- 2: updates SSL encryption.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	SSLEnabled *int32 `json:"SSLEnabled,omitempty" xml:"SSLEnabled,omitempty"`
}

func (s ModifyDBInstanceSSLRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBInstanceSSLRequest) GoString() string {
	return s.String()
}

func (s *ModifyDBInstanceSSLRequest) SetConnectionString(v string) *ModifyDBInstanceSSLRequest {
	s.ConnectionString = &v
	return s
}

func (s *ModifyDBInstanceSSLRequest) SetDBInstanceId(v string) *ModifyDBInstanceSSLRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ModifyDBInstanceSSLRequest) SetSSLEnabled(v int32) *ModifyDBInstanceSSLRequest {
	s.SSLEnabled = &v
	return s
}

type ModifyDBInstanceSSLResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// ADD6EA90-EECB-4C12-9F26-0B6DB58710EF
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyDBInstanceSSLResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBInstanceSSLResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyDBInstanceSSLResponseBody) SetRequestId(v string) *ModifyDBInstanceSSLResponseBody {
	s.RequestId = &v
	return s
}

type ModifyDBInstanceSSLResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyDBInstanceSSLResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyDBInstanceSSLResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBInstanceSSLResponse) GoString() string {
	return s.String()
}

func (s *ModifyDBInstanceSSLResponse) SetHeaders(v map[string]*string) *ModifyDBInstanceSSLResponse {
	s.Headers = v
	return s
}

func (s *ModifyDBInstanceSSLResponse) SetStatusCode(v int32) *ModifyDBInstanceSSLResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyDBInstanceSSLResponse) SetBody(v *ModifyDBInstanceSSLResponseBody) *ModifyDBInstanceSSLResponse {
	s.Body = v
	return s
}

type ModifyDBResourceGroupRequest struct {
	// The instance ID.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The information about the resource group.
	//
	// This parameter is required.
	ResourceGroupItems []*ModifyDBResourceGroupRequestResourceGroupItems `json:"ResourceGroupItems,omitempty" xml:"ResourceGroupItems,omitempty" type:"Repeated"`
}

func (s ModifyDBResourceGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBResourceGroupRequest) GoString() string {
	return s.String()
}

func (s *ModifyDBResourceGroupRequest) SetDBInstanceId(v string) *ModifyDBResourceGroupRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ModifyDBResourceGroupRequest) SetOwnerId(v int64) *ModifyDBResourceGroupRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyDBResourceGroupRequest) SetResourceGroupItems(v []*ModifyDBResourceGroupRequestResourceGroupItems) *ModifyDBResourceGroupRequest {
	s.ResourceGroupItems = v
	return s
}

type ModifyDBResourceGroupRequestResourceGroupItems struct {
	// The configurations of the resource group to which you want to modify.
	//
	// >
	//
	// 	- CpuRateLimit: the percentage of CPU resources that are available for the resource group. Unit: %.
	//
	// 	- MemoryLimit: the percentage of memory resources that are available for the resource group. Unit: %.
	//
	// 	- MemorySharedQuota: the percentage of memory resources shared among transactions that are submitted to the resource group. Unit: %. Default value: 80.
	//
	// 	- MemorySpillRatio: the memory spill ratio for memory-intensive transactions. When the memory that is used by memory-intensive transactions reaches this value, data is spilled to disks. Unit: %. Default value: 0.
	//
	// 	- Concurrency: the maximum number of concurrent transactions or parallel queries that are allowed for a resource group. Default value: 20.
	//
	// This parameter is required.
	//
	// example:
	//
	// {"CpuRateLimit":"10","MemoryLimit":"12","MemorySharedQuota":"20","MemorySpillRatio":"75","Concurrency":"3"}
	ResourceGroupConfig *string `json:"ResourceGroupConfig,omitempty" xml:"ResourceGroupConfig,omitempty"`
	// The name of the resource group.
	//
	// This parameter is required.
	//
	// example:
	//
	// testgroup
	ResourceGroupName *string `json:"ResourceGroupName,omitempty" xml:"ResourceGroupName,omitempty"`
}

func (s ModifyDBResourceGroupRequestResourceGroupItems) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBResourceGroupRequestResourceGroupItems) GoString() string {
	return s.String()
}

func (s *ModifyDBResourceGroupRequestResourceGroupItems) SetResourceGroupConfig(v string) *ModifyDBResourceGroupRequestResourceGroupItems {
	s.ResourceGroupConfig = &v
	return s
}

func (s *ModifyDBResourceGroupRequestResourceGroupItems) SetResourceGroupName(v string) *ModifyDBResourceGroupRequestResourceGroupItems {
	s.ResourceGroupName = &v
	return s
}

type ModifyDBResourceGroupShrinkRequest struct {
	// The instance ID.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The information about the resource group.
	//
	// This parameter is required.
	ResourceGroupItemsShrink *string `json:"ResourceGroupItems,omitempty" xml:"ResourceGroupItems,omitempty"`
}

func (s ModifyDBResourceGroupShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBResourceGroupShrinkRequest) GoString() string {
	return s.String()
}

func (s *ModifyDBResourceGroupShrinkRequest) SetDBInstanceId(v string) *ModifyDBResourceGroupShrinkRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ModifyDBResourceGroupShrinkRequest) SetOwnerId(v int64) *ModifyDBResourceGroupShrinkRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyDBResourceGroupShrinkRequest) SetResourceGroupItemsShrink(v string) *ModifyDBResourceGroupShrinkRequest {
	s.ResourceGroupItemsShrink = &v
	return s
}

type ModifyDBResourceGroupResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyDBResourceGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBResourceGroupResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyDBResourceGroupResponseBody) SetRequestId(v string) *ModifyDBResourceGroupResponseBody {
	s.RequestId = &v
	return s
}

type ModifyDBResourceGroupResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyDBResourceGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyDBResourceGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBResourceGroupResponse) GoString() string {
	return s.String()
}

func (s *ModifyDBResourceGroupResponse) SetHeaders(v map[string]*string) *ModifyDBResourceGroupResponse {
	s.Headers = v
	return s
}

func (s *ModifyDBResourceGroupResponse) SetStatusCode(v int32) *ModifyDBResourceGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyDBResourceGroupResponse) SetBody(v *ModifyDBResourceGroupResponseBody) *ModifyDBResourceGroupResponse {
	s.Body = v
	return s
}

type ModifyExternalDataServiceRequest struct {
	// Instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp10g78o9807yv9h3
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// Region ID.
	//
	// > You can call the [DescribeRegions](https://help.aliyun.com/document_detail/86912.html) API to view available region IDs.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// Service description.
	//
	// example:
	//
	// pxf test
	ServiceDescription *string `json:"ServiceDescription,omitempty" xml:"ServiceDescription,omitempty"`
	// Service ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	ServiceId *string `json:"ServiceId,omitempty" xml:"ServiceId,omitempty"`
	// Service specification (in CU), value:
	//
	// - 8
	//
	// This parameter is required.
	//
	// example:
	//
	// 8
	ServiceSpec *string `json:"ServiceSpec,omitempty" xml:"ServiceSpec,omitempty"`
}

func (s ModifyExternalDataServiceRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyExternalDataServiceRequest) GoString() string {
	return s.String()
}

func (s *ModifyExternalDataServiceRequest) SetDBInstanceId(v string) *ModifyExternalDataServiceRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ModifyExternalDataServiceRequest) SetRegionId(v string) *ModifyExternalDataServiceRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyExternalDataServiceRequest) SetServiceDescription(v string) *ModifyExternalDataServiceRequest {
	s.ServiceDescription = &v
	return s
}

func (s *ModifyExternalDataServiceRequest) SetServiceId(v string) *ModifyExternalDataServiceRequest {
	s.ServiceId = &v
	return s
}

func (s *ModifyExternalDataServiceRequest) SetServiceSpec(v string) *ModifyExternalDataServiceRequest {
	s.ServiceSpec = &v
	return s
}

type ModifyExternalDataServiceResponseBody struct {
	// Request ID.
	//
	// example:
	//
	// B4CAF581-2AC7-41AD-8940-D56DF7AADF5B
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyExternalDataServiceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyExternalDataServiceResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyExternalDataServiceResponseBody) SetRequestId(v string) *ModifyExternalDataServiceResponseBody {
	s.RequestId = &v
	return s
}

type ModifyExternalDataServiceResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyExternalDataServiceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyExternalDataServiceResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyExternalDataServiceResponse) GoString() string {
	return s.String()
}

func (s *ModifyExternalDataServiceResponse) SetHeaders(v map[string]*string) *ModifyExternalDataServiceResponse {
	s.Headers = v
	return s
}

func (s *ModifyExternalDataServiceResponse) SetStatusCode(v int32) *ModifyExternalDataServiceResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyExternalDataServiceResponse) SetBody(v *ModifyExternalDataServiceResponseBody) *ModifyExternalDataServiceResponse {
	s.Body = v
	return s
}

type ModifyHadoopDataSourceRequest struct {
	// Instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// Service description, with a maximum length of 256 characters.
	//
	// example:
	//
	// pxf for hdfs data source
	DataSourceDescription *string `json:"DataSourceDescription,omitempty" xml:"DataSourceDescription,omitempty"`
	// The data source ID.
	//
	// example:
	//
	// 123
	DataSourceId *string `json:"DataSourceId,omitempty" xml:"DataSourceId,omitempty"`
	// The type of the data source. Valid values:
	//
	// 	- mysql
	//
	// - postgresql
	//
	// 	- hdfs
	//
	// - hive
	//
	// example:
	//
	// mysql
	DataSourceType *string `json:"DataSourceType,omitempty" xml:"DataSourceType,omitempty"`
	// When HadoopCreateType is Emr, the value of this field is the EMR instance ID.
	//
	// example:
	//
	// c-1234567
	EmrInstanceId *string `json:"EmrInstanceId,omitempty" xml:"EmrInstanceId,omitempty"`
	// The content of the Hadoop hdfs-site.xml file. This parameter must be specified when DataSourceType is set to HDFS.
	//
	// example:
	//
	// xxxxxx
	HDFSConf *string `json:"HDFSConf,omitempty" xml:"HDFSConf,omitempty"`
	// The content of the Hadoop core-site.xml file.
	//
	// example:
	//
	// xxxxxx
	HadoopCoreConf *string `json:"HadoopCoreConf,omitempty" xml:"HadoopCoreConf,omitempty"`
	// The type of the external service. Valid values:
	//
	// 	- emr: E-MapReduce (EMR) Hadoop cluster.
	//
	// 	- selfCreate: self-managed Hadoop cluster.
	//
	// example:
	//
	// emr
	HadoopCreateType *string `json:"HadoopCreateType,omitempty" xml:"HadoopCreateType,omitempty"`
	// The IP address and hostname of the Hadoop cluster (data source) in the /etc/hosts file.
	//
	// example:
	//
	// 127.0.0.1 localhost
	HadoopHostsAddress *string `json:"HadoopHostsAddress,omitempty" xml:"HadoopHostsAddress,omitempty"`
	// The content of the Hadoop hive-site.xml file. This parameter must be specified when DataSourceType is set to Hive.
	//
	// example:
	//
	// xxxxxx
	HiveConf *string `json:"HiveConf,omitempty" xml:"HiveConf,omitempty"`
	// The content of the Hadoop mapred-site.xml file. This parameter must be specified when DataSourceType is set to HDFS.
	//
	// example:
	//
	// <?xml version="1.0" ?>
	//
	// <!-- Created at 2023-08-15 13:53:28.962 -->
	//
	// <configuration>
	//
	//     <property>
	//
	//         <name>mapreduce.map.speculative</name>
	//
	//         <value>true</value>
	//
	//     </property>
	//
	//     <property>
	//
	//         <name>mapreduce.jobhistory.keytab</name>
	//
	//         <value></value>
	//
	//     </property>
	//
	// </configuration>
	MapReduceConf *string `json:"MapReduceConf,omitempty" xml:"MapReduceConf,omitempty"`
	// The region ID.
	//
	// >  You can call the [DescribeRegions](https://help.aliyun.com/document_detail/86912.html) operation to query the most recent region list.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The content of the Hadoop yarn-site.xml file. This parameter must be specified when DataSourceType is set to HDFS.
	//
	// example:
	//
	// xxxxxx
	YarnConf *string `json:"YarnConf,omitempty" xml:"YarnConf,omitempty"`
}

func (s ModifyHadoopDataSourceRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyHadoopDataSourceRequest) GoString() string {
	return s.String()
}

func (s *ModifyHadoopDataSourceRequest) SetDBInstanceId(v string) *ModifyHadoopDataSourceRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ModifyHadoopDataSourceRequest) SetDataSourceDescription(v string) *ModifyHadoopDataSourceRequest {
	s.DataSourceDescription = &v
	return s
}

func (s *ModifyHadoopDataSourceRequest) SetDataSourceId(v string) *ModifyHadoopDataSourceRequest {
	s.DataSourceId = &v
	return s
}

func (s *ModifyHadoopDataSourceRequest) SetDataSourceType(v string) *ModifyHadoopDataSourceRequest {
	s.DataSourceType = &v
	return s
}

func (s *ModifyHadoopDataSourceRequest) SetEmrInstanceId(v string) *ModifyHadoopDataSourceRequest {
	s.EmrInstanceId = &v
	return s
}

func (s *ModifyHadoopDataSourceRequest) SetHDFSConf(v string) *ModifyHadoopDataSourceRequest {
	s.HDFSConf = &v
	return s
}

func (s *ModifyHadoopDataSourceRequest) SetHadoopCoreConf(v string) *ModifyHadoopDataSourceRequest {
	s.HadoopCoreConf = &v
	return s
}

func (s *ModifyHadoopDataSourceRequest) SetHadoopCreateType(v string) *ModifyHadoopDataSourceRequest {
	s.HadoopCreateType = &v
	return s
}

func (s *ModifyHadoopDataSourceRequest) SetHadoopHostsAddress(v string) *ModifyHadoopDataSourceRequest {
	s.HadoopHostsAddress = &v
	return s
}

func (s *ModifyHadoopDataSourceRequest) SetHiveConf(v string) *ModifyHadoopDataSourceRequest {
	s.HiveConf = &v
	return s
}

func (s *ModifyHadoopDataSourceRequest) SetMapReduceConf(v string) *ModifyHadoopDataSourceRequest {
	s.MapReduceConf = &v
	return s
}

func (s *ModifyHadoopDataSourceRequest) SetRegionId(v string) *ModifyHadoopDataSourceRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyHadoopDataSourceRequest) SetYarnConf(v string) *ModifyHadoopDataSourceRequest {
	s.YarnConf = &v
	return s
}

type ModifyHadoopDataSourceResponseBody struct {
	// Request ID.
	//
	// example:
	//
	// 2C125605-266F-41CA-8AC5-3A643D4F42C5
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyHadoopDataSourceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyHadoopDataSourceResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyHadoopDataSourceResponseBody) SetRequestId(v string) *ModifyHadoopDataSourceResponseBody {
	s.RequestId = &v
	return s
}

type ModifyHadoopDataSourceResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyHadoopDataSourceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyHadoopDataSourceResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyHadoopDataSourceResponse) GoString() string {
	return s.String()
}

func (s *ModifyHadoopDataSourceResponse) SetHeaders(v map[string]*string) *ModifyHadoopDataSourceResponse {
	s.Headers = v
	return s
}

func (s *ModifyHadoopDataSourceResponse) SetStatusCode(v int32) *ModifyHadoopDataSourceResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyHadoopDataSourceResponse) SetBody(v *ModifyHadoopDataSourceResponseBody) *ModifyHadoopDataSourceResponse {
	s.Body = v
	return s
}

type ModifyJDBCDataSourceRequest struct {
	// Instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// Data source description.
	//
	// example:
	//
	// test
	DataSourceDescription *string `json:"DataSourceDescription,omitempty" xml:"DataSourceDescription,omitempty"`
	// Data source ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 123
	DataSourceId *string `json:"DataSourceId,omitempty" xml:"DataSourceId,omitempty"`
	// Database type: - mysql - postgresql - sqlserver
	//
	// example:
	//
	// mysql
	DataSourceType *string `json:"DataSourceType,omitempty" xml:"DataSourceType,omitempty"`
	// The JDBC connection string.
	//
	// example:
	//
	// xxxxxx
	JDBCConnectionString *string `json:"JDBCConnectionString,omitempty" xml:"JDBCConnectionString,omitempty"`
	// The password of the database account.
	//
	// example:
	//
	// xxxxxx
	JDBCPassword *string `json:"JDBCPassword,omitempty" xml:"JDBCPassword,omitempty"`
	// The name of the database account.
	//
	// example:
	//
	// xxxxxx
	JDBCUserName *string `json:"JDBCUserName,omitempty" xml:"JDBCUserName,omitempty"`
	// The region ID of the instance.
	//
	// example:
	//
	// cn-shanghai
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ModifyJDBCDataSourceRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyJDBCDataSourceRequest) GoString() string {
	return s.String()
}

func (s *ModifyJDBCDataSourceRequest) SetDBInstanceId(v string) *ModifyJDBCDataSourceRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ModifyJDBCDataSourceRequest) SetDataSourceDescription(v string) *ModifyJDBCDataSourceRequest {
	s.DataSourceDescription = &v
	return s
}

func (s *ModifyJDBCDataSourceRequest) SetDataSourceId(v string) *ModifyJDBCDataSourceRequest {
	s.DataSourceId = &v
	return s
}

func (s *ModifyJDBCDataSourceRequest) SetDataSourceType(v string) *ModifyJDBCDataSourceRequest {
	s.DataSourceType = &v
	return s
}

func (s *ModifyJDBCDataSourceRequest) SetJDBCConnectionString(v string) *ModifyJDBCDataSourceRequest {
	s.JDBCConnectionString = &v
	return s
}

func (s *ModifyJDBCDataSourceRequest) SetJDBCPassword(v string) *ModifyJDBCDataSourceRequest {
	s.JDBCPassword = &v
	return s
}

func (s *ModifyJDBCDataSourceRequest) SetJDBCUserName(v string) *ModifyJDBCDataSourceRequest {
	s.JDBCUserName = &v
	return s
}

func (s *ModifyJDBCDataSourceRequest) SetRegionId(v string) *ModifyJDBCDataSourceRequest {
	s.RegionId = &v
	return s
}

type ModifyJDBCDataSourceResponseBody struct {
	// Request ID.
	//
	// example:
	//
	// 2C125605-266F-41CA-8AC5-3A643D4F42C5
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyJDBCDataSourceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyJDBCDataSourceResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyJDBCDataSourceResponseBody) SetRequestId(v string) *ModifyJDBCDataSourceResponseBody {
	s.RequestId = &v
	return s
}

type ModifyJDBCDataSourceResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyJDBCDataSourceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyJDBCDataSourceResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyJDBCDataSourceResponse) GoString() string {
	return s.String()
}

func (s *ModifyJDBCDataSourceResponse) SetHeaders(v map[string]*string) *ModifyJDBCDataSourceResponse {
	s.Headers = v
	return s
}

func (s *ModifyJDBCDataSourceResponse) SetStatusCode(v int32) *ModifyJDBCDataSourceResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyJDBCDataSourceResponse) SetBody(v *ModifyJDBCDataSourceResponseBody) *ModifyJDBCDataSourceResponse {
	s.Body = v
	return s
}

type ModifyMasterSpecRequest struct {
	// The description of the instance.
	//
	// example:
	//
	// test
	DBInstanceDescription *string `json:"DBInstanceDescription,omitempty" xml:"DBInstanceDescription,omitempty"`
	// The instance ID.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the IDs of all AnalyticDB for PostgreSQL instances in a region.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// This parameter must be specified if you want to change coordinator nodes to AI coordinator nodes.
	//
	// >-  You cannot specify the MasterAISpec and MasterCU parameters at the same time.
	//
	// >- You can change coordinator nodes to AI coordinator nodes only in specific regions and zones.
	//
	// >- Only AnalyticDB for PostgreSQL V7.0 instances of Basic Edition support AI coordinator nodes.
	//
	// >- You can view the valid values of this parameter on the configuration change page of coordinator nodes.
	//
	// example:
	//
	// ADB.AIMedium.2
	MasterAISpec *string `json:"MasterAISpec,omitempty" xml:"MasterAISpec,omitempty"`
	// The specifications of coordinator node resources. Valid values:
	//
	// 	- 2 CU
	//
	// 	- 4 CU
	//
	// 	- 8 CU
	//
	// 	- 16 CU
	//
	// 	- 32 CU
	//
	// >  You are charged for coordinator node resources of more than 8 compute units (CUs).
	//
	// example:
	//
	// 8 CU
	MasterCU *int32 `json:"MasterCU,omitempty" xml:"MasterCU,omitempty"`
	// The ID of the resource group to which the instance belongs. For information about how to obtain the ID of a resource group, see [View basic information of a resource group](https://help.aliyun.com/document_detail/151181.html).
	//
	// example:
	//
	// rg-bp67acfmxazb4p****
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
}

func (s ModifyMasterSpecRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyMasterSpecRequest) GoString() string {
	return s.String()
}

func (s *ModifyMasterSpecRequest) SetDBInstanceDescription(v string) *ModifyMasterSpecRequest {
	s.DBInstanceDescription = &v
	return s
}

func (s *ModifyMasterSpecRequest) SetDBInstanceId(v string) *ModifyMasterSpecRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ModifyMasterSpecRequest) SetMasterAISpec(v string) *ModifyMasterSpecRequest {
	s.MasterAISpec = &v
	return s
}

func (s *ModifyMasterSpecRequest) SetMasterCU(v int32) *ModifyMasterSpecRequest {
	s.MasterCU = &v
	return s
}

func (s *ModifyMasterSpecRequest) SetResourceGroupId(v string) *ModifyMasterSpecRequest {
	s.ResourceGroupId = &v
	return s
}

type ModifyMasterSpecResponseBody struct {
	// The instance ID.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DbInstanceId *string `json:"DbInstanceId,omitempty" xml:"DbInstanceId,omitempty"`
	// The returned message.
	//
	// This parameter is returned only if the request fails.
	//
	// example:
	//
	// ******
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// The request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **false**
	//
	// 	- **true**
	//
	// example:
	//
	// true
	Status *bool `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ModifyMasterSpecResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyMasterSpecResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyMasterSpecResponseBody) SetDbInstanceId(v string) *ModifyMasterSpecResponseBody {
	s.DbInstanceId = &v
	return s
}

func (s *ModifyMasterSpecResponseBody) SetErrorMessage(v string) *ModifyMasterSpecResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *ModifyMasterSpecResponseBody) SetRequestId(v string) *ModifyMasterSpecResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyMasterSpecResponseBody) SetStatus(v bool) *ModifyMasterSpecResponseBody {
	s.Status = &v
	return s
}

type ModifyMasterSpecResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyMasterSpecResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyMasterSpecResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyMasterSpecResponse) GoString() string {
	return s.String()
}

func (s *ModifyMasterSpecResponse) SetHeaders(v map[string]*string) *ModifyMasterSpecResponse {
	s.Headers = v
	return s
}

func (s *ModifyMasterSpecResponse) SetStatusCode(v int32) *ModifyMasterSpecResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyMasterSpecResponse) SetBody(v *ModifyMasterSpecResponseBody) *ModifyMasterSpecResponse {
	s.Body = v
	return s
}

type ModifyParametersRequest struct {
	// The ID of the instance.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the details of all AnalyticDB for PostgreSQL instances in a specific region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp***************
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// Specifies whether to forcibly restart the instance. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// false
	ForceRestartInstance *bool `json:"ForceRestartInstance,omitempty" xml:"ForceRestartInstance,omitempty"`
	// The name and value of the parameter to be modified. Specify the parameter in the `<Parameter name>:<Parameter value>` format.
	//
	// You can call the [DescribeParameters](https://help.aliyun.com/document_detail/208310.html) operation to query the parameters that can be modified.
	//
	// This parameter is required.
	//
	// example:
	//
	// {"statement_timeout":"11800010"}
	Parameters *string `json:"Parameters,omitempty" xml:"Parameters,omitempty"`
}

func (s ModifyParametersRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyParametersRequest) GoString() string {
	return s.String()
}

func (s *ModifyParametersRequest) SetDBInstanceId(v string) *ModifyParametersRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ModifyParametersRequest) SetForceRestartInstance(v bool) *ModifyParametersRequest {
	s.ForceRestartInstance = &v
	return s
}

func (s *ModifyParametersRequest) SetParameters(v string) *ModifyParametersRequest {
	s.Parameters = &v
	return s
}

type ModifyParametersResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// 3FE698B6-6579-547C-A403-07**********
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyParametersResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyParametersResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyParametersResponseBody) SetRequestId(v string) *ModifyParametersResponseBody {
	s.RequestId = &v
	return s
}

type ModifyParametersResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyParametersResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyParametersResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyParametersResponse) GoString() string {
	return s.String()
}

func (s *ModifyParametersResponse) SetHeaders(v map[string]*string) *ModifyParametersResponse {
	s.Headers = v
	return s
}

func (s *ModifyParametersResponse) SetStatusCode(v int32) *ModifyParametersResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyParametersResponse) SetBody(v *ModifyParametersResponseBody) *ModifyParametersResponse {
	s.Body = v
	return s
}

type ModifyRemoteADBDataSourceRequest struct {
	// Service ID
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	DataSourceId *string `json:"DataSourceId,omitempty" xml:"DataSourceId,omitempty"`
	// Specified dataSourceName.
	//
	// example:
	//
	// test
	DataSourceName *string `json:"DataSourceName,omitempty" xml:"DataSourceName,omitempty"`
	// The ID of the local data instance being used.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-test
	LocalDBInstanceId *string `json:"LocalDBInstanceId,omitempty" xml:"LocalDBInstanceId,omitempty"`
	OwnerId           *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// New user name.
	//
	// This parameter is required.
	//
	// example:
	//
	// newUserName
	UserName *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
	// New user password, which must be transmitted in encrypted form.
	//
	// This parameter is required.
	//
	// example:
	//
	// newUserPassword
	UserPassword *string `json:"UserPassword,omitempty" xml:"UserPassword,omitempty"`
}

func (s ModifyRemoteADBDataSourceRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyRemoteADBDataSourceRequest) GoString() string {
	return s.String()
}

func (s *ModifyRemoteADBDataSourceRequest) SetDataSourceId(v string) *ModifyRemoteADBDataSourceRequest {
	s.DataSourceId = &v
	return s
}

func (s *ModifyRemoteADBDataSourceRequest) SetDataSourceName(v string) *ModifyRemoteADBDataSourceRequest {
	s.DataSourceName = &v
	return s
}

func (s *ModifyRemoteADBDataSourceRequest) SetLocalDBInstanceId(v string) *ModifyRemoteADBDataSourceRequest {
	s.LocalDBInstanceId = &v
	return s
}

func (s *ModifyRemoteADBDataSourceRequest) SetOwnerId(v int64) *ModifyRemoteADBDataSourceRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyRemoteADBDataSourceRequest) SetUserName(v string) *ModifyRemoteADBDataSourceRequest {
	s.UserName = &v
	return s
}

func (s *ModifyRemoteADBDataSourceRequest) SetUserPassword(v string) *ModifyRemoteADBDataSourceRequest {
	s.UserPassword = &v
	return s
}

type ModifyRemoteADBDataSourceResponseBody struct {
	// Returns the successfully modified data sharing service data.
	DataSourceItem *ModifyRemoteADBDataSourceResponseBodyDataSourceItem `json:"DataSourceItem,omitempty" xml:"DataSourceItem,omitempty" type:"Struct"`
	// Request ID.
	//
	// example:
	//
	// e9d60eb1-e90d-4bc6-a470-c8b767460858
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Task ID.
	//
	// example:
	//
	// 90000
	TaskId *int32 `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s ModifyRemoteADBDataSourceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyRemoteADBDataSourceResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyRemoteADBDataSourceResponseBody) SetDataSourceItem(v *ModifyRemoteADBDataSourceResponseBodyDataSourceItem) *ModifyRemoteADBDataSourceResponseBody {
	s.DataSourceItem = v
	return s
}

func (s *ModifyRemoteADBDataSourceResponseBody) SetRequestId(v string) *ModifyRemoteADBDataSourceResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyRemoteADBDataSourceResponseBody) SetTaskId(v int32) *ModifyRemoteADBDataSourceResponseBody {
	s.TaskId = &v
	return s
}

type ModifyRemoteADBDataSourceResponseBodyDataSourceItem struct {
	// Data source name.
	//
	// example:
	//
	// db1_gptest1_to_db2_gp-test2
	DataSourceName *string `json:"DataSourceName,omitempty" xml:"DataSourceName,omitempty"`
	// Description information.
	//
	// example:
	//
	// test
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// ID
	//
	// example:
	//
	// 1
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// Local database name
	//
	// example:
	//
	// db1
	LocalDatabase *string `json:"LocalDatabase,omitempty" xml:"LocalDatabase,omitempty"`
	// Local instance name
	//
	// example:
	//
	// gp-test1
	LocalInstanceName *string `json:"LocalInstanceName,omitempty" xml:"LocalInstanceName,omitempty"`
	// Manager user name
	//
	// example:
	//
	// test
	ManagerUserName *string `json:"ManagerUserName,omitempty" xml:"ManagerUserName,omitempty"`
	// Region ID where the instance is located.
	//
	// example:
	//
	// cn-beijing
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// Remote database name
	//
	// example:
	//
	// db2
	RemoteDatabase *string `json:"RemoteDatabase,omitempty" xml:"RemoteDatabase,omitempty"`
	// Remote instance name
	//
	// example:
	//
	// gp-test2
	RemoteInstanceName *string `json:"RemoteInstanceName,omitempty" xml:"RemoteInstanceName,omitempty"`
	// Data source status
	//
	// example:
	//
	// creating
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// User name
	//
	// example:
	//
	// user1
	UserName *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
}

func (s ModifyRemoteADBDataSourceResponseBodyDataSourceItem) String() string {
	return tea.Prettify(s)
}

func (s ModifyRemoteADBDataSourceResponseBodyDataSourceItem) GoString() string {
	return s.String()
}

func (s *ModifyRemoteADBDataSourceResponseBodyDataSourceItem) SetDataSourceName(v string) *ModifyRemoteADBDataSourceResponseBodyDataSourceItem {
	s.DataSourceName = &v
	return s
}

func (s *ModifyRemoteADBDataSourceResponseBodyDataSourceItem) SetDescription(v string) *ModifyRemoteADBDataSourceResponseBodyDataSourceItem {
	s.Description = &v
	return s
}

func (s *ModifyRemoteADBDataSourceResponseBodyDataSourceItem) SetId(v int64) *ModifyRemoteADBDataSourceResponseBodyDataSourceItem {
	s.Id = &v
	return s
}

func (s *ModifyRemoteADBDataSourceResponseBodyDataSourceItem) SetLocalDatabase(v string) *ModifyRemoteADBDataSourceResponseBodyDataSourceItem {
	s.LocalDatabase = &v
	return s
}

func (s *ModifyRemoteADBDataSourceResponseBodyDataSourceItem) SetLocalInstanceName(v string) *ModifyRemoteADBDataSourceResponseBodyDataSourceItem {
	s.LocalInstanceName = &v
	return s
}

func (s *ModifyRemoteADBDataSourceResponseBodyDataSourceItem) SetManagerUserName(v string) *ModifyRemoteADBDataSourceResponseBodyDataSourceItem {
	s.ManagerUserName = &v
	return s
}

func (s *ModifyRemoteADBDataSourceResponseBodyDataSourceItem) SetRegionId(v string) *ModifyRemoteADBDataSourceResponseBodyDataSourceItem {
	s.RegionId = &v
	return s
}

func (s *ModifyRemoteADBDataSourceResponseBodyDataSourceItem) SetRemoteDatabase(v string) *ModifyRemoteADBDataSourceResponseBodyDataSourceItem {
	s.RemoteDatabase = &v
	return s
}

func (s *ModifyRemoteADBDataSourceResponseBodyDataSourceItem) SetRemoteInstanceName(v string) *ModifyRemoteADBDataSourceResponseBodyDataSourceItem {
	s.RemoteInstanceName = &v
	return s
}

func (s *ModifyRemoteADBDataSourceResponseBodyDataSourceItem) SetStatus(v string) *ModifyRemoteADBDataSourceResponseBodyDataSourceItem {
	s.Status = &v
	return s
}

func (s *ModifyRemoteADBDataSourceResponseBodyDataSourceItem) SetUserName(v string) *ModifyRemoteADBDataSourceResponseBodyDataSourceItem {
	s.UserName = &v
	return s
}

type ModifyRemoteADBDataSourceResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyRemoteADBDataSourceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyRemoteADBDataSourceResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyRemoteADBDataSourceResponse) GoString() string {
	return s.String()
}

func (s *ModifyRemoteADBDataSourceResponse) SetHeaders(v map[string]*string) *ModifyRemoteADBDataSourceResponse {
	s.Headers = v
	return s
}

func (s *ModifyRemoteADBDataSourceResponse) SetStatusCode(v int32) *ModifyRemoteADBDataSourceResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyRemoteADBDataSourceResponse) SetBody(v *ModifyRemoteADBDataSourceResponseBody) *ModifyRemoteADBDataSourceResponse {
	s.Body = v
	return s
}

type ModifySQLCollectorPolicyRequest struct {
	// The ID of the instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// Specifies whether to enable or disable SQL collection.
	//
	// 	- Enable: enables SQL collection.
	//
	// 	- Disabled: disables SQL collection.
	//
	// This parameter is required.
	//
	// example:
	//
	// Enable
	SQLCollectorStatus *string `json:"SQLCollectorStatus,omitempty" xml:"SQLCollectorStatus,omitempty"`
}

func (s ModifySQLCollectorPolicyRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifySQLCollectorPolicyRequest) GoString() string {
	return s.String()
}

func (s *ModifySQLCollectorPolicyRequest) SetDBInstanceId(v string) *ModifySQLCollectorPolicyRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ModifySQLCollectorPolicyRequest) SetSQLCollectorStatus(v string) *ModifySQLCollectorPolicyRequest {
	s.SQLCollectorStatus = &v
	return s
}

type ModifySQLCollectorPolicyResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// 4FA1F1D1-50A6-4F60-9A78-5752F2076A53
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifySQLCollectorPolicyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifySQLCollectorPolicyResponseBody) GoString() string {
	return s.String()
}

func (s *ModifySQLCollectorPolicyResponseBody) SetRequestId(v string) *ModifySQLCollectorPolicyResponseBody {
	s.RequestId = &v
	return s
}

type ModifySQLCollectorPolicyResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifySQLCollectorPolicyResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifySQLCollectorPolicyResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifySQLCollectorPolicyResponse) GoString() string {
	return s.String()
}

func (s *ModifySQLCollectorPolicyResponse) SetHeaders(v map[string]*string) *ModifySQLCollectorPolicyResponse {
	s.Headers = v
	return s
}

func (s *ModifySQLCollectorPolicyResponse) SetStatusCode(v int32) *ModifySQLCollectorPolicyResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifySQLCollectorPolicyResponse) SetBody(v *ModifySQLCollectorPolicyResponseBody) *ModifySQLCollectorPolicyResponse {
	s.Body = v
	return s
}

type ModifySecurityIpsRequest struct {
	// The attribute of the IP address whitelist. By default, this parameter is empty. A whitelist with the `hidden` attribute does not appear in the console.
	//
	// example:
	//
	// hidden
	DBInstanceIPArrayAttribute *string `json:"DBInstanceIPArrayAttribute,omitempty" xml:"DBInstanceIPArrayAttribute,omitempty"`
	// The name of the whitelist. If you do not enter a name, IP addresses are added to the default whitelist.
	//
	// >  You can create up to 50 whitelists for an instance.
	//
	// example:
	//
	// default
	DBInstanceIPArrayName *string `json:"DBInstanceIPArrayName,omitempty" xml:"DBInstanceIPArrayName,omitempty"`
	// The ID of the instance.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the instance IDs of all AnalyticDB for PostgreSQL instances in a specific region.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The method of modification. Valid values:
	//
	// 	- **Cover**: overwrites the whitelist.
	//
	// 	- **Append**: appends data to the whitelist.
	//
	// 	- **Delete**: deletes the whitelist.
	//
	// example:
	//
	// 0
	ModifyMode *string `json:"ModifyMode,omitempty" xml:"ModifyMode,omitempty"`
	// The ID of the resource group to which the instance belongs. For more information about how to obtain the ID of a resource group, see [View basic information of a resource group](https://help.aliyun.com/document_detail/151181.html).
	//
	// example:
	//
	// rg-bp67acfmxazb4p****
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	// The IP addresses listed in the whitelist. You can add up to 1,000 IP addresses to the whitelist. Separate multiple IP addresses with commas (,). The IP addresses must use one of the following formats:
	//
	// 	- 0.0.0.0/0
	//
	// 	- 10.23.12.24. This is a standard IP address.
	//
	// 	- 10.23.12.24/24. This is a CIDR block. The value `/24` indicates that the prefix of the CIDR block is 24-bit long. You can replace 24 with a value in the range of `1 to 32`.
	//
	// This parameter is required.
	//
	// example:
	//
	// ``10.10.**.**``
	SecurityIPList *string `json:"SecurityIPList,omitempty" xml:"SecurityIPList,omitempty"`
}

func (s ModifySecurityIpsRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifySecurityIpsRequest) GoString() string {
	return s.String()
}

func (s *ModifySecurityIpsRequest) SetDBInstanceIPArrayAttribute(v string) *ModifySecurityIpsRequest {
	s.DBInstanceIPArrayAttribute = &v
	return s
}

func (s *ModifySecurityIpsRequest) SetDBInstanceIPArrayName(v string) *ModifySecurityIpsRequest {
	s.DBInstanceIPArrayName = &v
	return s
}

func (s *ModifySecurityIpsRequest) SetDBInstanceId(v string) *ModifySecurityIpsRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ModifySecurityIpsRequest) SetModifyMode(v string) *ModifySecurityIpsRequest {
	s.ModifyMode = &v
	return s
}

func (s *ModifySecurityIpsRequest) SetResourceGroupId(v string) *ModifySecurityIpsRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *ModifySecurityIpsRequest) SetSecurityIPList(v string) *ModifySecurityIpsRequest {
	s.SecurityIPList = &v
	return s
}

type ModifySecurityIpsResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// 871C698F-B43D-4D1D-ACD6-DF56B0F89978
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifySecurityIpsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifySecurityIpsResponseBody) GoString() string {
	return s.String()
}

func (s *ModifySecurityIpsResponseBody) SetRequestId(v string) *ModifySecurityIpsResponseBody {
	s.RequestId = &v
	return s
}

type ModifySecurityIpsResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifySecurityIpsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifySecurityIpsResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifySecurityIpsResponse) GoString() string {
	return s.String()
}

func (s *ModifySecurityIpsResponse) SetHeaders(v map[string]*string) *ModifySecurityIpsResponse {
	s.Headers = v
	return s
}

func (s *ModifySecurityIpsResponse) SetStatusCode(v int32) *ModifySecurityIpsResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifySecurityIpsResponse) SetBody(v *ModifySecurityIpsResponseBody) *ModifySecurityIpsResponse {
	s.Body = v
	return s
}

type ModifyStreamingDataServiceRequest struct {
	// The instance ID.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/196830.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp10g78o9807yv9h3
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// example:
	//
	// cn-beijing
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The description of the service.
	//
	// example:
	//
	// test-adbpgss
	ServiceDescription *string `json:"ServiceDescription,omitempty" xml:"ServiceDescription,omitempty"`
	// The service ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	ServiceId *string `json:"ServiceId,omitempty" xml:"ServiceId,omitempty"`
	// The specifications of the service. Unit: capacity units (CUs). Valid values:
	//
	// 	- 2
	//
	// 	- 4
	//
	// 	- 8
	//
	// 	- 16
	//
	// This parameter is required.
	//
	// example:
	//
	// 2
	ServiceSpec *string `json:"ServiceSpec,omitempty" xml:"ServiceSpec,omitempty"`
}

func (s ModifyStreamingDataServiceRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyStreamingDataServiceRequest) GoString() string {
	return s.String()
}

func (s *ModifyStreamingDataServiceRequest) SetDBInstanceId(v string) *ModifyStreamingDataServiceRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ModifyStreamingDataServiceRequest) SetRegionId(v string) *ModifyStreamingDataServiceRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyStreamingDataServiceRequest) SetServiceDescription(v string) *ModifyStreamingDataServiceRequest {
	s.ServiceDescription = &v
	return s
}

func (s *ModifyStreamingDataServiceRequest) SetServiceId(v string) *ModifyStreamingDataServiceRequest {
	s.ServiceId = &v
	return s
}

func (s *ModifyStreamingDataServiceRequest) SetServiceSpec(v string) *ModifyStreamingDataServiceRequest {
	s.ServiceSpec = &v
	return s
}

type ModifyStreamingDataServiceResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// B4CAF581-2AC7-41AD-8940-D56DF7AADF5B
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyStreamingDataServiceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyStreamingDataServiceResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyStreamingDataServiceResponseBody) SetRequestId(v string) *ModifyStreamingDataServiceResponseBody {
	s.RequestId = &v
	return s
}

type ModifyStreamingDataServiceResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyStreamingDataServiceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyStreamingDataServiceResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyStreamingDataServiceResponse) GoString() string {
	return s.String()
}

func (s *ModifyStreamingDataServiceResponse) SetHeaders(v map[string]*string) *ModifyStreamingDataServiceResponse {
	s.Headers = v
	return s
}

func (s *ModifyStreamingDataServiceResponse) SetStatusCode(v int32) *ModifyStreamingDataServiceResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyStreamingDataServiceResponse) SetBody(v *ModifyStreamingDataServiceResponseBody) *ModifyStreamingDataServiceResponse {
	s.Body = v
	return s
}

type ModifyStreamingDataSourceRequest struct {
	// The instance ID.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/196830.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-k2j36a3172b102593
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The configurations of the data source.
	//
	// example:
	//
	// {"brokers":"broker0:9091,broker1:9091","topic":"topic"}
	DataSourceConfig *string `json:"DataSourceConfig,omitempty" xml:"DataSourceConfig,omitempty"`
	// The description of the data source.
	//
	// example:
	//
	// test-kafka
	DataSourceDescription *string `json:"DataSourceDescription,omitempty" xml:"DataSourceDescription,omitempty"`
	// The data source ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 57
	DataSourceId *string `json:"DataSourceId,omitempty" xml:"DataSourceId,omitempty"`
	// The region ID.
	//
	// >  You can call the [DescribeRegions](https://help.aliyun.com/document_detail/86912.html) operation to query the most recent region list.
	//
	// example:
	//
	// cn-beijing
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ModifyStreamingDataSourceRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyStreamingDataSourceRequest) GoString() string {
	return s.String()
}

func (s *ModifyStreamingDataSourceRequest) SetDBInstanceId(v string) *ModifyStreamingDataSourceRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ModifyStreamingDataSourceRequest) SetDataSourceConfig(v string) *ModifyStreamingDataSourceRequest {
	s.DataSourceConfig = &v
	return s
}

func (s *ModifyStreamingDataSourceRequest) SetDataSourceDescription(v string) *ModifyStreamingDataSourceRequest {
	s.DataSourceDescription = &v
	return s
}

func (s *ModifyStreamingDataSourceRequest) SetDataSourceId(v string) *ModifyStreamingDataSourceRequest {
	s.DataSourceId = &v
	return s
}

func (s *ModifyStreamingDataSourceRequest) SetRegionId(v string) *ModifyStreamingDataSourceRequest {
	s.RegionId = &v
	return s
}

type ModifyStreamingDataSourceResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyStreamingDataSourceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyStreamingDataSourceResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyStreamingDataSourceResponseBody) SetRequestId(v string) *ModifyStreamingDataSourceResponseBody {
	s.RequestId = &v
	return s
}

type ModifyStreamingDataSourceResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyStreamingDataSourceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyStreamingDataSourceResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyStreamingDataSourceResponse) GoString() string {
	return s.String()
}

func (s *ModifyStreamingDataSourceResponse) SetHeaders(v map[string]*string) *ModifyStreamingDataSourceResponse {
	s.Headers = v
	return s
}

func (s *ModifyStreamingDataSourceResponse) SetStatusCode(v int32) *ModifyStreamingDataSourceResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyStreamingDataSourceResponse) SetBody(v *ModifyStreamingDataSourceResponseBody) *ModifyStreamingDataSourceResponse {
	s.Body = v
	return s
}

type ModifyStreamingJobRequest struct {
	// Account name.
	//
	// example:
	//
	// test-account
	Account *string `json:"Account,omitempty" xml:"Account,omitempty"`
	// Delivery guarantee.
	//
	// example:
	//
	// ATLEAST / EXACTLY
	Consistency *string `json:"Consistency,omitempty" xml:"Consistency,omitempty"`
	// Instance ID
	//
	// This parameter is required.
	//
	// example:
	//
	// ModifyStreamingJob
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// Target data table mapping field list.
	DestColumns []*string `json:"DestColumns,omitempty" xml:"DestColumns,omitempty" type:"Repeated"`
	// Target database name.
	//
	// example:
	//
	// dest-db
	DestDatabase *string `json:"DestDatabase,omitempty" xml:"DestDatabase,omitempty"`
	// Target schema.
	//
	// example:
	//
	// dest-schema
	DestSchema *string `json:"DestSchema,omitempty" xml:"DestSchema,omitempty"`
	// Target table name.
	//
	// example:
	//
	// dest-table
	DestTable *string `json:"DestTable,omitempty" xml:"DestTable,omitempty"`
	// When the data in Kafka does not match the ADBPG target table, it will cause a write failure. This value is the number of error rows allowed; exceeding this will cause the task to fail.
	//
	// example:
	//
	// 5
	ErrorLimitCount *int64 `json:"ErrorLimitCount,omitempty" xml:"ErrorLimitCount,omitempty"`
	// FallbackOffset rollback position, offset rollback
	//
	// - The FallbackOffset parameter defines the behavior when the consumer does not request a specific consumption point or the requested consumption point exceeds the current Kafka cluster\\"s recorded points. You can choose to start consuming from the earliest (newest) or latest (oldest) point.
	//
	// example:
	//
	// EARLIEST /  LATEST
	FallbackOffset *string `json:"FallbackOffset,omitempty" xml:"FallbackOffset,omitempty"`
	// Kafka group name
	//
	// example:
	//
	// group_name
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	// Job configuration file, required for professional mode.
	//
	// example:
	//
	// DATABASE: adbpgss_test
	//
	// USER: adbpgss_test
	//
	// PASSWORD: adbpgssTest
	//
	// HOST: gp-xxx-master.gpdb.rds-aliyun-pre.rds.aliyuncs.com
	//
	// PORT: 5432
	//
	// KAFKA:
	//
	//   INPUT:
	//
	//     SOURCE:
	//
	//       BROKERS: broker1:9092,broker2:9092,broker3:9092
	//
	//       TOPIC: testtopic
	//
	//       FALLBACK_OFFSET: earliest
	//
	//     KEY:
	//
	//       COLUMNS:
	//
	//       - NAME: customer_id
	//
	//         TYPE: int
	//
	//       FORMAT: delimited
	//
	//       DELIMITED_OPTION:
	//
	//         DELIMITER: \\"|\\"
	//
	//     VALUE:
	//
	//       COLUMNS:
	//
	//       - TYPE: integer
	//
	//         NAME: l_orderkey
	//
	//       - TYPE: integer
	//
	//         NAME: l_partkey
	//
	//       - TYPE: integer
	//
	//         NAME: l_suppkey
	//
	//       - TYPE: integer
	//
	//         NAME: l_linenumber
	//
	//       - TYPE: decimal
	//
	//         NAME: l_quantity
	//
	//       - TYPE: decimal
	//
	//         NAME: l_extendedprice
	//
	//       - TYPE: decimal
	//
	//         NAME: l_discount
	//
	//       - TYPE: decimal
	//
	//         NAME: l_tax
	//
	//       - TYPE: char
	//
	//         NAME: l_returnflag
	//
	//       - TYPE: char
	//
	//         NAME: l_linestatus
	//
	//       - TYPE: date
	//
	//         NAME: l_shipdate
	//
	//       - TYPE: date
	//
	//         NAME: l_commitdate
	//
	//       - TYPE: date
	//
	//         NAME: l_receiptdate
	//
	//       - TYPE: text
	//
	//         NAME: l_shipinstruct
	//
	//       - TYPE: text
	//
	//         NAME: l_shipmode
	//
	//       - TYPE: text
	//
	//         NAME: l_comment
	//
	//       FORMAT: delimited
	//
	//       DELIMITED_OPTION:
	//
	//         DELIMITER: \\"|\\"
	//
	//     ERROR_LIMIT: 10
	//
	//   OUTPUT:
	//
	//     SCHEMA: adbpgss_test
	//
	//     TABLE: write_with_insert_plaintext
	//
	//     MODE: MERGE
	//
	//     MATCH_COLUMNS:
	//
	//     - l_orderkey
	//
	//     - l_partkey
	//
	//     - l_suppkey
	//
	//     UPDATE_COLUMNS:
	//
	//     - l_linenumber
	//
	//     - l_quantity
	//
	//     - l_extendedprice
	//
	//     - l_discount
	//
	//     - l_tax
	//
	//     - l_returnflag
	//
	//     - l_linestatus
	//
	//     - l_shipdate
	//
	//     - l_commitdate
	//
	//     - l_receiptdate
	//
	//     - l_shipinstruct
	//
	//     - l_shipmode
	//
	//     - l_comment
	//
	//     MAPPING:
	//
	//     - EXPRESSION: l_orderkey
	//
	//       NAME: l_orderkey
	//
	//     - EXPRESSION: l_partkey
	//
	//       NAME: l_partkey
	//
	//     - EXPRESSION: l_suppkey
	//
	//       NAME: l_suppkey
	//
	//     - EXPRESSION: l_linenumber
	//
	//       NAME: l_linenumber
	//
	//     - EXPRESSION: l_quantity
	//
	//       NAME: l_quantity
	//
	//     - EXPRESSION: l_extendedprice
	//
	//       NAME: l_extendedprice
	//
	//     - EXPRESSION: l_discount
	//
	//       NAME: l_discount
	//
	//     - EXPRESSION: l_tax
	//
	//       NAME: l_tax
	//
	//     - EXPRESSION: l_returnflag
	//
	//       NAME: l_returnflag
	//
	//     - EXPRESSION: l_linestatus
	//
	//       NAME: l_linestatus
	//
	//     - EXPRESSION: l_shipdate
	//
	//       NAME: l_shipdate
	//
	//     - EXPRESSION: l_commitdate
	//
	//       NAME: l_commitdate
	//
	//     - EXPRESSION: l_receiptdate
	//
	//       NAME: l_receiptdate
	//
	//     - EXPRESSION: l_shipinstruct
	//
	//       NAME: l_shipinstruct
	//
	//     - EXPRESSION: l_shipmode
	//
	//       NAME: l_shipmode
	//
	//     - EXPRESSION: l_comment
	//
	//       NAME: l_comment
	//
	//   COMMIT:
	//
	//     MAX_ROW: 1000
	//
	//     MINIMAL_INTERVAL: 1000
	//
	//     CONSISTENCY: ATLEAST
	//
	//   POLL:
	//
	//     BATCHSIZE: 1000
	//
	//     TIMEOUT: 1000
	//
	//   PROPERTIES:
	//
	//     group.id: testgroup
	JobConfig *string `json:"JobConfig,omitempty" xml:"JobConfig,omitempty"`
	// Job description.
	//
	// example:
	//
	// test-job
	JobDescription *string `json:"JobDescription,omitempty" xml:"JobDescription,omitempty"`
	// Job ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	JobId *int64 `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// Match columns, usually all primary key columns of the target table. If all column values in this configuration are the same, the two rows of data are considered duplicates.
	MatchColumns []*string `json:"MatchColumns,omitempty" xml:"MatchColumns,omitempty" type:"Repeated"`
	// Password.
	//
	// example:
	//
	// pwd123
	Password *string `json:"Password,omitempty" xml:"Password,omitempty"`
	// Region ID.
	//
	// > You can call the [DescribeRegions](https://help.aliyun.com/document_detail/86912.html) API to view available region IDs.
	//
	// example:
	//
	// cn-beijing
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// Source data field list.
	SrcColumns []*string `json:"SrcColumns,omitempty" xml:"SrcColumns,omitempty" type:"Repeated"`
	// Whether to test the real-time task, values:
	//
	// -  true
	//
	// - false
	//
	// Default value: false.
	//
	// example:
	//
	// true
	TryRun *bool `json:"TryRun,omitempty" xml:"TryRun,omitempty"`
	// Update columns, usually all non-primary key columns of the target table. When data duplication is determined through MatchColumns, updating the UpdateColumns column values will result in new data overwriting old data.
	UpdateColumns []*string `json:"UpdateColumns,omitempty" xml:"UpdateColumns,omitempty" type:"Repeated"`
	// Write mode.
	//
	// example:
	//
	// INSERT/UPDATE/MERGE
	WriteMode *string `json:"WriteMode,omitempty" xml:"WriteMode,omitempty"`
}

func (s ModifyStreamingJobRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyStreamingJobRequest) GoString() string {
	return s.String()
}

func (s *ModifyStreamingJobRequest) SetAccount(v string) *ModifyStreamingJobRequest {
	s.Account = &v
	return s
}

func (s *ModifyStreamingJobRequest) SetConsistency(v string) *ModifyStreamingJobRequest {
	s.Consistency = &v
	return s
}

func (s *ModifyStreamingJobRequest) SetDBInstanceId(v string) *ModifyStreamingJobRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ModifyStreamingJobRequest) SetDestColumns(v []*string) *ModifyStreamingJobRequest {
	s.DestColumns = v
	return s
}

func (s *ModifyStreamingJobRequest) SetDestDatabase(v string) *ModifyStreamingJobRequest {
	s.DestDatabase = &v
	return s
}

func (s *ModifyStreamingJobRequest) SetDestSchema(v string) *ModifyStreamingJobRequest {
	s.DestSchema = &v
	return s
}

func (s *ModifyStreamingJobRequest) SetDestTable(v string) *ModifyStreamingJobRequest {
	s.DestTable = &v
	return s
}

func (s *ModifyStreamingJobRequest) SetErrorLimitCount(v int64) *ModifyStreamingJobRequest {
	s.ErrorLimitCount = &v
	return s
}

func (s *ModifyStreamingJobRequest) SetFallbackOffset(v string) *ModifyStreamingJobRequest {
	s.FallbackOffset = &v
	return s
}

func (s *ModifyStreamingJobRequest) SetGroupName(v string) *ModifyStreamingJobRequest {
	s.GroupName = &v
	return s
}

func (s *ModifyStreamingJobRequest) SetJobConfig(v string) *ModifyStreamingJobRequest {
	s.JobConfig = &v
	return s
}

func (s *ModifyStreamingJobRequest) SetJobDescription(v string) *ModifyStreamingJobRequest {
	s.JobDescription = &v
	return s
}

func (s *ModifyStreamingJobRequest) SetJobId(v int64) *ModifyStreamingJobRequest {
	s.JobId = &v
	return s
}

func (s *ModifyStreamingJobRequest) SetMatchColumns(v []*string) *ModifyStreamingJobRequest {
	s.MatchColumns = v
	return s
}

func (s *ModifyStreamingJobRequest) SetPassword(v string) *ModifyStreamingJobRequest {
	s.Password = &v
	return s
}

func (s *ModifyStreamingJobRequest) SetRegionId(v string) *ModifyStreamingJobRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyStreamingJobRequest) SetSrcColumns(v []*string) *ModifyStreamingJobRequest {
	s.SrcColumns = v
	return s
}

func (s *ModifyStreamingJobRequest) SetTryRun(v bool) *ModifyStreamingJobRequest {
	s.TryRun = &v
	return s
}

func (s *ModifyStreamingJobRequest) SetUpdateColumns(v []*string) *ModifyStreamingJobRequest {
	s.UpdateColumns = v
	return s
}

func (s *ModifyStreamingJobRequest) SetWriteMode(v string) *ModifyStreamingJobRequest {
	s.WriteMode = &v
	return s
}

type ModifyStreamingJobShrinkRequest struct {
	// Account name.
	//
	// example:
	//
	// test-account
	Account *string `json:"Account,omitempty" xml:"Account,omitempty"`
	// Delivery guarantee.
	//
	// example:
	//
	// ATLEAST / EXACTLY
	Consistency *string `json:"Consistency,omitempty" xml:"Consistency,omitempty"`
	// Instance ID
	//
	// This parameter is required.
	//
	// example:
	//
	// ModifyStreamingJob
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// Target data table mapping field list.
	DestColumnsShrink *string `json:"DestColumns,omitempty" xml:"DestColumns,omitempty"`
	// Target database name.
	//
	// example:
	//
	// dest-db
	DestDatabase *string `json:"DestDatabase,omitempty" xml:"DestDatabase,omitempty"`
	// Target schema.
	//
	// example:
	//
	// dest-schema
	DestSchema *string `json:"DestSchema,omitempty" xml:"DestSchema,omitempty"`
	// Target table name.
	//
	// example:
	//
	// dest-table
	DestTable *string `json:"DestTable,omitempty" xml:"DestTable,omitempty"`
	// When the data in Kafka does not match the ADBPG target table, it will cause a write failure. This value is the number of error rows allowed; exceeding this will cause the task to fail.
	//
	// example:
	//
	// 5
	ErrorLimitCount *int64 `json:"ErrorLimitCount,omitempty" xml:"ErrorLimitCount,omitempty"`
	// FallbackOffset rollback position, offset rollback
	//
	// - The FallbackOffset parameter defines the behavior when the consumer does not request a specific consumption point or the requested consumption point exceeds the current Kafka cluster\\"s recorded points. You can choose to start consuming from the earliest (newest) or latest (oldest) point.
	//
	// example:
	//
	// EARLIEST /  LATEST
	FallbackOffset *string `json:"FallbackOffset,omitempty" xml:"FallbackOffset,omitempty"`
	// Kafka group name
	//
	// example:
	//
	// group_name
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	// Job configuration file, required for professional mode.
	//
	// example:
	//
	// DATABASE: adbpgss_test
	//
	// USER: adbpgss_test
	//
	// PASSWORD: adbpgssTest
	//
	// HOST: gp-xxx-master.gpdb.rds-aliyun-pre.rds.aliyuncs.com
	//
	// PORT: 5432
	//
	// KAFKA:
	//
	//   INPUT:
	//
	//     SOURCE:
	//
	//       BROKERS: broker1:9092,broker2:9092,broker3:9092
	//
	//       TOPIC: testtopic
	//
	//       FALLBACK_OFFSET: earliest
	//
	//     KEY:
	//
	//       COLUMNS:
	//
	//       - NAME: customer_id
	//
	//         TYPE: int
	//
	//       FORMAT: delimited
	//
	//       DELIMITED_OPTION:
	//
	//         DELIMITER: \\"|\\"
	//
	//     VALUE:
	//
	//       COLUMNS:
	//
	//       - TYPE: integer
	//
	//         NAME: l_orderkey
	//
	//       - TYPE: integer
	//
	//         NAME: l_partkey
	//
	//       - TYPE: integer
	//
	//         NAME: l_suppkey
	//
	//       - TYPE: integer
	//
	//         NAME: l_linenumber
	//
	//       - TYPE: decimal
	//
	//         NAME: l_quantity
	//
	//       - TYPE: decimal
	//
	//         NAME: l_extendedprice
	//
	//       - TYPE: decimal
	//
	//         NAME: l_discount
	//
	//       - TYPE: decimal
	//
	//         NAME: l_tax
	//
	//       - TYPE: char
	//
	//         NAME: l_returnflag
	//
	//       - TYPE: char
	//
	//         NAME: l_linestatus
	//
	//       - TYPE: date
	//
	//         NAME: l_shipdate
	//
	//       - TYPE: date
	//
	//         NAME: l_commitdate
	//
	//       - TYPE: date
	//
	//         NAME: l_receiptdate
	//
	//       - TYPE: text
	//
	//         NAME: l_shipinstruct
	//
	//       - TYPE: text
	//
	//         NAME: l_shipmode
	//
	//       - TYPE: text
	//
	//         NAME: l_comment
	//
	//       FORMAT: delimited
	//
	//       DELIMITED_OPTION:
	//
	//         DELIMITER: \\"|\\"
	//
	//     ERROR_LIMIT: 10
	//
	//   OUTPUT:
	//
	//     SCHEMA: adbpgss_test
	//
	//     TABLE: write_with_insert_plaintext
	//
	//     MODE: MERGE
	//
	//     MATCH_COLUMNS:
	//
	//     - l_orderkey
	//
	//     - l_partkey
	//
	//     - l_suppkey
	//
	//     UPDATE_COLUMNS:
	//
	//     - l_linenumber
	//
	//     - l_quantity
	//
	//     - l_extendedprice
	//
	//     - l_discount
	//
	//     - l_tax
	//
	//     - l_returnflag
	//
	//     - l_linestatus
	//
	//     - l_shipdate
	//
	//     - l_commitdate
	//
	//     - l_receiptdate
	//
	//     - l_shipinstruct
	//
	//     - l_shipmode
	//
	//     - l_comment
	//
	//     MAPPING:
	//
	//     - EXPRESSION: l_orderkey
	//
	//       NAME: l_orderkey
	//
	//     - EXPRESSION: l_partkey
	//
	//       NAME: l_partkey
	//
	//     - EXPRESSION: l_suppkey
	//
	//       NAME: l_suppkey
	//
	//     - EXPRESSION: l_linenumber
	//
	//       NAME: l_linenumber
	//
	//     - EXPRESSION: l_quantity
	//
	//       NAME: l_quantity
	//
	//     - EXPRESSION: l_extendedprice
	//
	//       NAME: l_extendedprice
	//
	//     - EXPRESSION: l_discount
	//
	//       NAME: l_discount
	//
	//     - EXPRESSION: l_tax
	//
	//       NAME: l_tax
	//
	//     - EXPRESSION: l_returnflag
	//
	//       NAME: l_returnflag
	//
	//     - EXPRESSION: l_linestatus
	//
	//       NAME: l_linestatus
	//
	//     - EXPRESSION: l_shipdate
	//
	//       NAME: l_shipdate
	//
	//     - EXPRESSION: l_commitdate
	//
	//       NAME: l_commitdate
	//
	//     - EXPRESSION: l_receiptdate
	//
	//       NAME: l_receiptdate
	//
	//     - EXPRESSION: l_shipinstruct
	//
	//       NAME: l_shipinstruct
	//
	//     - EXPRESSION: l_shipmode
	//
	//       NAME: l_shipmode
	//
	//     - EXPRESSION: l_comment
	//
	//       NAME: l_comment
	//
	//   COMMIT:
	//
	//     MAX_ROW: 1000
	//
	//     MINIMAL_INTERVAL: 1000
	//
	//     CONSISTENCY: ATLEAST
	//
	//   POLL:
	//
	//     BATCHSIZE: 1000
	//
	//     TIMEOUT: 1000
	//
	//   PROPERTIES:
	//
	//     group.id: testgroup
	JobConfig *string `json:"JobConfig,omitempty" xml:"JobConfig,omitempty"`
	// Job description.
	//
	// example:
	//
	// test-job
	JobDescription *string `json:"JobDescription,omitempty" xml:"JobDescription,omitempty"`
	// Job ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	JobId *int64 `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// Match columns, usually all primary key columns of the target table. If all column values in this configuration are the same, the two rows of data are considered duplicates.
	MatchColumnsShrink *string `json:"MatchColumns,omitempty" xml:"MatchColumns,omitempty"`
	// Password.
	//
	// example:
	//
	// pwd123
	Password *string `json:"Password,omitempty" xml:"Password,omitempty"`
	// Region ID.
	//
	// > You can call the [DescribeRegions](https://help.aliyun.com/document_detail/86912.html) API to view available region IDs.
	//
	// example:
	//
	// cn-beijing
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// Source data field list.
	SrcColumnsShrink *string `json:"SrcColumns,omitempty" xml:"SrcColumns,omitempty"`
	// Whether to test the real-time task, values:
	//
	// -  true
	//
	// - false
	//
	// Default value: false.
	//
	// example:
	//
	// true
	TryRun *bool `json:"TryRun,omitempty" xml:"TryRun,omitempty"`
	// Update columns, usually all non-primary key columns of the target table. When data duplication is determined through MatchColumns, updating the UpdateColumns column values will result in new data overwriting old data.
	UpdateColumnsShrink *string `json:"UpdateColumns,omitempty" xml:"UpdateColumns,omitempty"`
	// Write mode.
	//
	// example:
	//
	// INSERT/UPDATE/MERGE
	WriteMode *string `json:"WriteMode,omitempty" xml:"WriteMode,omitempty"`
}

func (s ModifyStreamingJobShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyStreamingJobShrinkRequest) GoString() string {
	return s.String()
}

func (s *ModifyStreamingJobShrinkRequest) SetAccount(v string) *ModifyStreamingJobShrinkRequest {
	s.Account = &v
	return s
}

func (s *ModifyStreamingJobShrinkRequest) SetConsistency(v string) *ModifyStreamingJobShrinkRequest {
	s.Consistency = &v
	return s
}

func (s *ModifyStreamingJobShrinkRequest) SetDBInstanceId(v string) *ModifyStreamingJobShrinkRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ModifyStreamingJobShrinkRequest) SetDestColumnsShrink(v string) *ModifyStreamingJobShrinkRequest {
	s.DestColumnsShrink = &v
	return s
}

func (s *ModifyStreamingJobShrinkRequest) SetDestDatabase(v string) *ModifyStreamingJobShrinkRequest {
	s.DestDatabase = &v
	return s
}

func (s *ModifyStreamingJobShrinkRequest) SetDestSchema(v string) *ModifyStreamingJobShrinkRequest {
	s.DestSchema = &v
	return s
}

func (s *ModifyStreamingJobShrinkRequest) SetDestTable(v string) *ModifyStreamingJobShrinkRequest {
	s.DestTable = &v
	return s
}

func (s *ModifyStreamingJobShrinkRequest) SetErrorLimitCount(v int64) *ModifyStreamingJobShrinkRequest {
	s.ErrorLimitCount = &v
	return s
}

func (s *ModifyStreamingJobShrinkRequest) SetFallbackOffset(v string) *ModifyStreamingJobShrinkRequest {
	s.FallbackOffset = &v
	return s
}

func (s *ModifyStreamingJobShrinkRequest) SetGroupName(v string) *ModifyStreamingJobShrinkRequest {
	s.GroupName = &v
	return s
}

func (s *ModifyStreamingJobShrinkRequest) SetJobConfig(v string) *ModifyStreamingJobShrinkRequest {
	s.JobConfig = &v
	return s
}

func (s *ModifyStreamingJobShrinkRequest) SetJobDescription(v string) *ModifyStreamingJobShrinkRequest {
	s.JobDescription = &v
	return s
}

func (s *ModifyStreamingJobShrinkRequest) SetJobId(v int64) *ModifyStreamingJobShrinkRequest {
	s.JobId = &v
	return s
}

func (s *ModifyStreamingJobShrinkRequest) SetMatchColumnsShrink(v string) *ModifyStreamingJobShrinkRequest {
	s.MatchColumnsShrink = &v
	return s
}

func (s *ModifyStreamingJobShrinkRequest) SetPassword(v string) *ModifyStreamingJobShrinkRequest {
	s.Password = &v
	return s
}

func (s *ModifyStreamingJobShrinkRequest) SetRegionId(v string) *ModifyStreamingJobShrinkRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyStreamingJobShrinkRequest) SetSrcColumnsShrink(v string) *ModifyStreamingJobShrinkRequest {
	s.SrcColumnsShrink = &v
	return s
}

func (s *ModifyStreamingJobShrinkRequest) SetTryRun(v bool) *ModifyStreamingJobShrinkRequest {
	s.TryRun = &v
	return s
}

func (s *ModifyStreamingJobShrinkRequest) SetUpdateColumnsShrink(v string) *ModifyStreamingJobShrinkRequest {
	s.UpdateColumnsShrink = &v
	return s
}

func (s *ModifyStreamingJobShrinkRequest) SetWriteMode(v string) *ModifyStreamingJobShrinkRequest {
	s.WriteMode = &v
	return s
}

type ModifyStreamingJobResponseBody struct {
	// Request ID.
	//
	// example:
	//
	// B4CAF581-2AC7-41AD-8940-D56DF7AADF5B
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyStreamingJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyStreamingJobResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyStreamingJobResponseBody) SetRequestId(v string) *ModifyStreamingJobResponseBody {
	s.RequestId = &v
	return s
}

type ModifyStreamingJobResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyStreamingJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyStreamingJobResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyStreamingJobResponse) GoString() string {
	return s.String()
}

func (s *ModifyStreamingJobResponse) SetHeaders(v map[string]*string) *ModifyStreamingJobResponse {
	s.Headers = v
	return s
}

func (s *ModifyStreamingJobResponse) SetStatusCode(v int32) *ModifyStreamingJobResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyStreamingJobResponse) SetBody(v *ModifyStreamingJobResponseBody) *ModifyStreamingJobResponse {
	s.Body = v
	return s
}

type ModifyVectorConfigurationRequest struct {
	// The instance ID.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the IDs of all AnalyticDB for PostgreSQL instances in a region.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// Specifies whether to enable vector engine optimization. Valid values:
	//
	// 	- **enabled**
	//
	// 	- **disabled**
	//
	// > 	- We recommend that you **do not enable*	- vector engine optimization in mainstream analysis and real-time data warehousing scenarios.
	//
	// > 	- We recommend that you **enable*	- vector engine optimization in AI Generated Content (AIGC) and vector retrieval scenarios that require the vector analysis engine.
	//
	// example:
	//
	// enabled
	VectorConfigurationStatus *string `json:"VectorConfigurationStatus,omitempty" xml:"VectorConfigurationStatus,omitempty"`
}

func (s ModifyVectorConfigurationRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyVectorConfigurationRequest) GoString() string {
	return s.String()
}

func (s *ModifyVectorConfigurationRequest) SetDBInstanceId(v string) *ModifyVectorConfigurationRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ModifyVectorConfigurationRequest) SetOwnerId(v int64) *ModifyVectorConfigurationRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyVectorConfigurationRequest) SetVectorConfigurationStatus(v string) *ModifyVectorConfigurationRequest {
	s.VectorConfigurationStatus = &v
	return s
}

type ModifyVectorConfigurationResponseBody struct {
	// The instance ID.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The error message that is returned.
	//
	// This parameter is returned only if the request fails.
	//
	// example:
	//
	// Failed to modify vector configuration.
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 107BE202-D1A2-479E-98E0-A8**********
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	Status *bool `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ModifyVectorConfigurationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyVectorConfigurationResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyVectorConfigurationResponseBody) SetDBInstanceId(v string) *ModifyVectorConfigurationResponseBody {
	s.DBInstanceId = &v
	return s
}

func (s *ModifyVectorConfigurationResponseBody) SetErrorMessage(v string) *ModifyVectorConfigurationResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *ModifyVectorConfigurationResponseBody) SetRequestId(v string) *ModifyVectorConfigurationResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyVectorConfigurationResponseBody) SetStatus(v bool) *ModifyVectorConfigurationResponseBody {
	s.Status = &v
	return s
}

type ModifyVectorConfigurationResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyVectorConfigurationResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyVectorConfigurationResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyVectorConfigurationResponse) GoString() string {
	return s.String()
}

func (s *ModifyVectorConfigurationResponse) SetHeaders(v map[string]*string) *ModifyVectorConfigurationResponse {
	s.Headers = v
	return s
}

func (s *ModifyVectorConfigurationResponse) SetStatusCode(v int32) *ModifyVectorConfigurationResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyVectorConfigurationResponse) SetBody(v *ModifyVectorConfigurationResponseBody) *ModifyVectorConfigurationResponse {
	s.Body = v
	return s
}

type PauseDataRedistributeRequest struct {
	// The cluster ID.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s PauseDataRedistributeRequest) String() string {
	return tea.Prettify(s)
}

func (s PauseDataRedistributeRequest) GoString() string {
	return s.String()
}

func (s *PauseDataRedistributeRequest) SetDBInstanceId(v string) *PauseDataRedistributeRequest {
	s.DBInstanceId = &v
	return s
}

func (s *PauseDataRedistributeRequest) SetOwnerId(v int64) *PauseDataRedistributeRequest {
	s.OwnerId = &v
	return s
}

type PauseDataRedistributeResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s PauseDataRedistributeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s PauseDataRedistributeResponseBody) GoString() string {
	return s.String()
}

func (s *PauseDataRedistributeResponseBody) SetRequestId(v string) *PauseDataRedistributeResponseBody {
	s.RequestId = &v
	return s
}

type PauseDataRedistributeResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *PauseDataRedistributeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s PauseDataRedistributeResponse) String() string {
	return tea.Prettify(s)
}

func (s PauseDataRedistributeResponse) GoString() string {
	return s.String()
}

func (s *PauseDataRedistributeResponse) SetHeaders(v map[string]*string) *PauseDataRedistributeResponse {
	s.Headers = v
	return s
}

func (s *PauseDataRedistributeResponse) SetStatusCode(v int32) *PauseDataRedistributeResponse {
	s.StatusCode = &v
	return s
}

func (s *PauseDataRedistributeResponse) SetBody(v *PauseDataRedistributeResponseBody) *PauseDataRedistributeResponse {
	s.Body = v
	return s
}

type PauseInstanceRequest struct {
	// The ID of the instance.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the details of all AnalyticDB for PostgreSQL instances in a specific region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s PauseInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s PauseInstanceRequest) GoString() string {
	return s.String()
}

func (s *PauseInstanceRequest) SetDBInstanceId(v string) *PauseInstanceRequest {
	s.DBInstanceId = &v
	return s
}

func (s *PauseInstanceRequest) SetOwnerId(v int64) *PauseInstanceRequest {
	s.OwnerId = &v
	return s
}

type PauseInstanceResponseBody struct {
	// The ID of the instance.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The error message returned.
	//
	// This parameter is returned only if **false*	- is returned for the **Status*	- parameter.
	//
	// example:
	//
	// *******
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 34b32a0a-08ef-4a87-b6be-cdd9********
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **false**: The request failed.
	//
	// 	- **true**: The request was successful.
	//
	// example:
	//
	// true
	Status *bool `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s PauseInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s PauseInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *PauseInstanceResponseBody) SetDBInstanceId(v string) *PauseInstanceResponseBody {
	s.DBInstanceId = &v
	return s
}

func (s *PauseInstanceResponseBody) SetErrorMessage(v string) *PauseInstanceResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *PauseInstanceResponseBody) SetRequestId(v string) *PauseInstanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *PauseInstanceResponseBody) SetStatus(v bool) *PauseInstanceResponseBody {
	s.Status = &v
	return s
}

type PauseInstanceResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *PauseInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s PauseInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s PauseInstanceResponse) GoString() string {
	return s.String()
}

func (s *PauseInstanceResponse) SetHeaders(v map[string]*string) *PauseInstanceResponse {
	s.Headers = v
	return s
}

func (s *PauseInstanceResponse) SetStatusCode(v int32) *PauseInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *PauseInstanceResponse) SetBody(v *PauseInstanceResponseBody) *PauseInstanceResponse {
	s.Body = v
	return s
}

type QueryCollectionDataRequest struct {
	// Collection name.
	//
	// > You can use the [ListCollections](https://help.aliyun.com/document_detail/2401503.html) API to view the list.
	//
	// This parameter is required.
	//
	// example:
	//
	// document
	Collection *string `json:"Collection,omitempty" xml:"Collection,omitempty"`
	// Content for full-text search. When this value is empty, only vector search is used; when it is not empty, both vector and full-text search are used.
	//
	// > The Vector parameter cannot be empty at the same time.
	//
	// example:
	//
	// hello_world
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// Instance ID.
	//
	// > You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) API to view details of all AnalyticDB PostgreSQL instances in the target region, including the instance ID.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// Filter conditions for the data to be queried, in SQL WHERE format. It is an expression that returns a boolean value (true or false). Conditions can be simple comparison operators such as equal (=), not equal (<> or !=), greater than (>), less than (<), greater than or equal to (>=), less than or equal to (<=), or more complex expressions combined with logical operators (AND, OR, NOT), as well as conditions using keywords like IN, BETWEEN, and LIKE.
	//
	// >
	//
	// > - For detailed syntax, refer to: https://www.postgresqltutorial.com/postgresql-tutorial/postgresql-where/
	//
	// example:
	//
	// response > 200
	Filter *string `json:"Filter,omitempty" xml:"Filter,omitempty"`
	// Dual-path recall algorithm, default is empty (i.e., directly compare and sort the scores of vectors and full-text).
	//
	// Available values:
	//
	// - RRF: Reciprocal rank fusion, with a parameter k controlling the fusion effect. See HybridSearchArgs configuration for details;
	//
	// - Weight: Weighted sorting, using a parameter alpha to control the score ratio of vectors and full-text, then sorting. See HybridSearchArgs configuration for details;
	//
	// - Cascaded: Perform full-text search first, then vector search based on the full-text results;
	//
	// example:
	//
	// RRF
	HybridSearch *string `json:"HybridSearch,omitempty" xml:"HybridSearch,omitempty"`
	// The parameters of the two-way retrieval algorithm. The following parameters are supported:
	//
	// 	- When HybridSearch is set to RRF, the scores are calculated by using the `1/(k+rank_i)` formula. The constant k is a positive integer that is greater than 1.
	//
	// <!---->
	//
	//     {
	//
	//        "RRF": {
	//
	//         "k": 60
	//
	//        }
	//
	//     }
	//
	// 	- When HybridSearch is set to Weight, the scores are calculated by using the `alpha 	- vector_score + (1-alpha) 	- text_score` formula. The alpha parameter specifies the proportion of the vector search score and the full-text search score and ranges from 0 to 1. A value of 0 specifies full-text search and a value of 1 specifies vector search.
	//
	// <!---->
	//
	//     {
	//
	//        "Weight": {
	//
	//         "alpha": 0.5
	//
	//        }
	//
	//     }
	HybridSearchArgs map[string]map[string]interface{} `json:"HybridSearchArgs,omitempty" xml:"HybridSearchArgs,omitempty"`
	// Defaults to empty, indicating the metadata fields to return. Multiple fields should be separated by commas.
	//
	// example:
	//
	// title,content
	IncludeMetadataFields *string `json:"IncludeMetadataFields,omitempty" xml:"IncludeMetadataFields,omitempty"`
	// Whether to return vector data. Value descriptions:
	//
	// - **true**: Return vector data.
	//
	// - **false**: Do not return vector data, used for full-text search scenarios.
	//
	// example:
	//
	// true
	IncludeValues *bool `json:"IncludeValues,omitempty" xml:"IncludeValues,omitempty"`
	// Similarity algorithm used during retrieval. Value descriptions:
	//
	// - **l2**: Euclidean distance.
	//
	// - **ip**: Inner product (dot product) distance.
	//
	// - **cosine**: Cosine similarity.
	//
	// > If this value is empty, the algorithm specified during index creation is used.
	//
	// example:
	//
	// cosine
	Metrics *string `json:"Metrics,omitempty" xml:"Metrics,omitempty"`
	// Namespace.
	//
	// > You can use the [ListNamespaces](https://help.aliyun.com/document_detail/2401502.html) API to view the list.
	//
	// example:
	//
	// mynamespace
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// Password for the namespace.
	//
	// This parameter is required.
	//
	// example:
	//
	// testpassword
	NamespacePassword *string `json:"NamespacePassword,omitempty" xml:"NamespacePassword,omitempty"`
	// Defaults to empty, indicating the starting point for pagination queries. Does not support hybrid search scenarios.
	//
	// The value must be >= 0. When this value is not empty, it will return `Total`, which indicates the total number of hits. This parameter works with `TopK`. For example, to paginate 20 and retrieve chunks with `chunk_id` from 0 to 44, you need to make three requests:
	//
	// - `Offset=0, TopK=20` returns `chunk_id` 0~19
	//
	// - `Offset=20, TopK=20` returns `chunk_id` 20~39
	//
	// - `Offset=30, TopK=20` returns `chunk_id` 40~44
	//
	// example:
	//
	// 0
	Offset *int32 `json:"Offset,omitempty" xml:"Offset,omitempty"`
	// Defaults to empty, indicating the field for sorting. Does not support hybrid search scenarios.
	//
	// The field must belong to metadata or be a default field in the table, such as `id`. The supported formats are:
	//
	// - A single field, e.g., `chunk_id`;
	//
	// - Multiple fields, separated by commas, e.g., `block_id, chunk_id`;
	//
	// - Supports reverse order, e.g., `block_id DESC, chunk_id DESC`;
	//
	// example:
	//
	// chunk_id
	OrderBy *string `json:"OrderBy,omitempty" xml:"OrderBy,omitempty"`
	OwnerId *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// Region ID where the instance is located.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// Uses another relational table to filter vector data (similar to a Join function).
	//
	// > Data from the relational table can be returned by setting the `IncludeMetadataFields` parameter. For example, `rds_table_name.id` indicates returning the `id` field from the relational table.
	RelationalTableFilter *QueryCollectionDataRequestRelationalTableFilter `json:"RelationalTableFilter,omitempty" xml:"RelationalTableFilter,omitempty" type:"Struct"`
	SparseVector          *QueryCollectionDataRequestSparseVector          `json:"SparseVector,omitempty" xml:"SparseVector,omitempty" type:"Struct"`
	// Set the number of top results to return.
	//
	// This parameter is required.
	//
	// example:
	//
	// 10
	TopK *int64 `json:"TopK,omitempty" xml:"TopK,omitempty"`
	// Vector data, with the same dimension as specified in the [CreateCollection](https://help.aliyun.com/document_detail/2401497.html) API.
	//
	// > When the vector is empty, only full-text search results are returned.
	Vector []*float64 `json:"Vector,omitempty" xml:"Vector,omitempty" type:"Repeated"`
	// The ID of the Workspace composed of multiple database instances. This parameter and `DBInstanceId` cannot both be empty. If both are specified, this parameter takes precedence.
	//
	// example:
	//
	// gp-ws-*****
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s QueryCollectionDataRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryCollectionDataRequest) GoString() string {
	return s.String()
}

func (s *QueryCollectionDataRequest) SetCollection(v string) *QueryCollectionDataRequest {
	s.Collection = &v
	return s
}

func (s *QueryCollectionDataRequest) SetContent(v string) *QueryCollectionDataRequest {
	s.Content = &v
	return s
}

func (s *QueryCollectionDataRequest) SetDBInstanceId(v string) *QueryCollectionDataRequest {
	s.DBInstanceId = &v
	return s
}

func (s *QueryCollectionDataRequest) SetFilter(v string) *QueryCollectionDataRequest {
	s.Filter = &v
	return s
}

func (s *QueryCollectionDataRequest) SetHybridSearch(v string) *QueryCollectionDataRequest {
	s.HybridSearch = &v
	return s
}

func (s *QueryCollectionDataRequest) SetHybridSearchArgs(v map[string]map[string]interface{}) *QueryCollectionDataRequest {
	s.HybridSearchArgs = v
	return s
}

func (s *QueryCollectionDataRequest) SetIncludeMetadataFields(v string) *QueryCollectionDataRequest {
	s.IncludeMetadataFields = &v
	return s
}

func (s *QueryCollectionDataRequest) SetIncludeValues(v bool) *QueryCollectionDataRequest {
	s.IncludeValues = &v
	return s
}

func (s *QueryCollectionDataRequest) SetMetrics(v string) *QueryCollectionDataRequest {
	s.Metrics = &v
	return s
}

func (s *QueryCollectionDataRequest) SetNamespace(v string) *QueryCollectionDataRequest {
	s.Namespace = &v
	return s
}

func (s *QueryCollectionDataRequest) SetNamespacePassword(v string) *QueryCollectionDataRequest {
	s.NamespacePassword = &v
	return s
}

func (s *QueryCollectionDataRequest) SetOffset(v int32) *QueryCollectionDataRequest {
	s.Offset = &v
	return s
}

func (s *QueryCollectionDataRequest) SetOrderBy(v string) *QueryCollectionDataRequest {
	s.OrderBy = &v
	return s
}

func (s *QueryCollectionDataRequest) SetOwnerId(v int64) *QueryCollectionDataRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryCollectionDataRequest) SetRegionId(v string) *QueryCollectionDataRequest {
	s.RegionId = &v
	return s
}

func (s *QueryCollectionDataRequest) SetRelationalTableFilter(v *QueryCollectionDataRequestRelationalTableFilter) *QueryCollectionDataRequest {
	s.RelationalTableFilter = v
	return s
}

func (s *QueryCollectionDataRequest) SetSparseVector(v *QueryCollectionDataRequestSparseVector) *QueryCollectionDataRequest {
	s.SparseVector = v
	return s
}

func (s *QueryCollectionDataRequest) SetTopK(v int64) *QueryCollectionDataRequest {
	s.TopK = &v
	return s
}

func (s *QueryCollectionDataRequest) SetVector(v []*float64) *QueryCollectionDataRequest {
	s.Vector = v
	return s
}

func (s *QueryCollectionDataRequest) SetWorkspaceId(v string) *QueryCollectionDataRequest {
	s.WorkspaceId = &v
	return s
}

type QueryCollectionDataRequestRelationalTableFilter struct {
	// The Metadata field of the vector collection, used to associate with the fields in the vector table.
	//
	// example:
	//
	// doc_id
	CollectionMetadataField *string `json:"CollectionMetadataField,omitempty" xml:"CollectionMetadataField,omitempty"`
	// The filtering condition for the relational table.
	//
	// example:
	//
	// tags @> ARRAY[\\"art\\"]
	Condition *string `json:"Condition,omitempty" xml:"Condition,omitempty"`
	// The field in the relational table, used to associate with the Metadata field of the vector collection.
	//
	// example:
	//
	// id
	TableField *string `json:"TableField,omitempty" xml:"TableField,omitempty"`
	// The name of the relational table.
	//
	// example:
	//
	// my_rds_table
	TableName *string `json:"TableName,omitempty" xml:"TableName,omitempty"`
}

func (s QueryCollectionDataRequestRelationalTableFilter) String() string {
	return tea.Prettify(s)
}

func (s QueryCollectionDataRequestRelationalTableFilter) GoString() string {
	return s.String()
}

func (s *QueryCollectionDataRequestRelationalTableFilter) SetCollectionMetadataField(v string) *QueryCollectionDataRequestRelationalTableFilter {
	s.CollectionMetadataField = &v
	return s
}

func (s *QueryCollectionDataRequestRelationalTableFilter) SetCondition(v string) *QueryCollectionDataRequestRelationalTableFilter {
	s.Condition = &v
	return s
}

func (s *QueryCollectionDataRequestRelationalTableFilter) SetTableField(v string) *QueryCollectionDataRequestRelationalTableFilter {
	s.TableField = &v
	return s
}

func (s *QueryCollectionDataRequestRelationalTableFilter) SetTableName(v string) *QueryCollectionDataRequestRelationalTableFilter {
	s.TableName = &v
	return s
}

type QueryCollectionDataRequestSparseVector struct {
	Indices []*int64   `json:"Indices,omitempty" xml:"Indices,omitempty" type:"Repeated"`
	Values  []*float64 `json:"Values,omitempty" xml:"Values,omitempty" type:"Repeated"`
}

func (s QueryCollectionDataRequestSparseVector) String() string {
	return tea.Prettify(s)
}

func (s QueryCollectionDataRequestSparseVector) GoString() string {
	return s.String()
}

func (s *QueryCollectionDataRequestSparseVector) SetIndices(v []*int64) *QueryCollectionDataRequestSparseVector {
	s.Indices = v
	return s
}

func (s *QueryCollectionDataRequestSparseVector) SetValues(v []*float64) *QueryCollectionDataRequestSparseVector {
	s.Values = v
	return s
}

type QueryCollectionDataShrinkRequest struct {
	// Collection name.
	//
	// > You can use the [ListCollections](https://help.aliyun.com/document_detail/2401503.html) API to view the list.
	//
	// This parameter is required.
	//
	// example:
	//
	// document
	Collection *string `json:"Collection,omitempty" xml:"Collection,omitempty"`
	// Content for full-text search. When this value is empty, only vector search is used; when it is not empty, both vector and full-text search are used.
	//
	// > The Vector parameter cannot be empty at the same time.
	//
	// example:
	//
	// hello_world
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// Instance ID.
	//
	// > You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) API to view details of all AnalyticDB PostgreSQL instances in the target region, including the instance ID.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// Filter conditions for the data to be queried, in SQL WHERE format. It is an expression that returns a boolean value (true or false). Conditions can be simple comparison operators such as equal (=), not equal (<> or !=), greater than (>), less than (<), greater than or equal to (>=), less than or equal to (<=), or more complex expressions combined with logical operators (AND, OR, NOT), as well as conditions using keywords like IN, BETWEEN, and LIKE.
	//
	// >
	//
	// > - For detailed syntax, refer to: https://www.postgresqltutorial.com/postgresql-tutorial/postgresql-where/
	//
	// example:
	//
	// response > 200
	Filter *string `json:"Filter,omitempty" xml:"Filter,omitempty"`
	// Dual-path recall algorithm, default is empty (i.e., directly compare and sort the scores of vectors and full-text).
	//
	// Available values:
	//
	// - RRF: Reciprocal rank fusion, with a parameter k controlling the fusion effect. See HybridSearchArgs configuration for details;
	//
	// - Weight: Weighted sorting, using a parameter alpha to control the score ratio of vectors and full-text, then sorting. See HybridSearchArgs configuration for details;
	//
	// - Cascaded: Perform full-text search first, then vector search based on the full-text results;
	//
	// example:
	//
	// RRF
	HybridSearch *string `json:"HybridSearch,omitempty" xml:"HybridSearch,omitempty"`
	// The parameters of the two-way retrieval algorithm. The following parameters are supported:
	//
	// 	- When HybridSearch is set to RRF, the scores are calculated by using the `1/(k+rank_i)` formula. The constant k is a positive integer that is greater than 1.
	//
	// <!---->
	//
	//     {
	//
	//        "RRF": {
	//
	//         "k": 60
	//
	//        }
	//
	//     }
	//
	// 	- When HybridSearch is set to Weight, the scores are calculated by using the `alpha 	- vector_score + (1-alpha) 	- text_score` formula. The alpha parameter specifies the proportion of the vector search score and the full-text search score and ranges from 0 to 1. A value of 0 specifies full-text search and a value of 1 specifies vector search.
	//
	// <!---->
	//
	//     {
	//
	//        "Weight": {
	//
	//         "alpha": 0.5
	//
	//        }
	//
	//     }
	HybridSearchArgsShrink *string `json:"HybridSearchArgs,omitempty" xml:"HybridSearchArgs,omitempty"`
	// Defaults to empty, indicating the metadata fields to return. Multiple fields should be separated by commas.
	//
	// example:
	//
	// title,content
	IncludeMetadataFields *string `json:"IncludeMetadataFields,omitempty" xml:"IncludeMetadataFields,omitempty"`
	// Whether to return vector data. Value descriptions:
	//
	// - **true**: Return vector data.
	//
	// - **false**: Do not return vector data, used for full-text search scenarios.
	//
	// example:
	//
	// true
	IncludeValues *bool `json:"IncludeValues,omitempty" xml:"IncludeValues,omitempty"`
	// Similarity algorithm used during retrieval. Value descriptions:
	//
	// - **l2**: Euclidean distance.
	//
	// - **ip**: Inner product (dot product) distance.
	//
	// - **cosine**: Cosine similarity.
	//
	// > If this value is empty, the algorithm specified during index creation is used.
	//
	// example:
	//
	// cosine
	Metrics *string `json:"Metrics,omitempty" xml:"Metrics,omitempty"`
	// Namespace.
	//
	// > You can use the [ListNamespaces](https://help.aliyun.com/document_detail/2401502.html) API to view the list.
	//
	// example:
	//
	// mynamespace
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// Password for the namespace.
	//
	// This parameter is required.
	//
	// example:
	//
	// testpassword
	NamespacePassword *string `json:"NamespacePassword,omitempty" xml:"NamespacePassword,omitempty"`
	// Defaults to empty, indicating the starting point for pagination queries. Does not support hybrid search scenarios.
	//
	// The value must be >= 0. When this value is not empty, it will return `Total`, which indicates the total number of hits. This parameter works with `TopK`. For example, to paginate 20 and retrieve chunks with `chunk_id` from 0 to 44, you need to make three requests:
	//
	// - `Offset=0, TopK=20` returns `chunk_id` 0~19
	//
	// - `Offset=20, TopK=20` returns `chunk_id` 20~39
	//
	// - `Offset=30, TopK=20` returns `chunk_id` 40~44
	//
	// example:
	//
	// 0
	Offset *int32 `json:"Offset,omitempty" xml:"Offset,omitempty"`
	// Defaults to empty, indicating the field for sorting. Does not support hybrid search scenarios.
	//
	// The field must belong to metadata or be a default field in the table, such as `id`. The supported formats are:
	//
	// - A single field, e.g., `chunk_id`;
	//
	// - Multiple fields, separated by commas, e.g., `block_id, chunk_id`;
	//
	// - Supports reverse order, e.g., `block_id DESC, chunk_id DESC`;
	//
	// example:
	//
	// chunk_id
	OrderBy *string `json:"OrderBy,omitempty" xml:"OrderBy,omitempty"`
	OwnerId *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// Region ID where the instance is located.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// Uses another relational table to filter vector data (similar to a Join function).
	//
	// > Data from the relational table can be returned by setting the `IncludeMetadataFields` parameter. For example, `rds_table_name.id` indicates returning the `id` field from the relational table.
	RelationalTableFilterShrink *string `json:"RelationalTableFilter,omitempty" xml:"RelationalTableFilter,omitempty"`
	SparseVectorShrink          *string `json:"SparseVector,omitempty" xml:"SparseVector,omitempty"`
	// Set the number of top results to return.
	//
	// This parameter is required.
	//
	// example:
	//
	// 10
	TopK *int64 `json:"TopK,omitempty" xml:"TopK,omitempty"`
	// Vector data, with the same dimension as specified in the [CreateCollection](https://help.aliyun.com/document_detail/2401497.html) API.
	//
	// > When the vector is empty, only full-text search results are returned.
	VectorShrink *string `json:"Vector,omitempty" xml:"Vector,omitempty"`
	// The ID of the Workspace composed of multiple database instances. This parameter and `DBInstanceId` cannot both be empty. If both are specified, this parameter takes precedence.
	//
	// example:
	//
	// gp-ws-*****
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s QueryCollectionDataShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryCollectionDataShrinkRequest) GoString() string {
	return s.String()
}

func (s *QueryCollectionDataShrinkRequest) SetCollection(v string) *QueryCollectionDataShrinkRequest {
	s.Collection = &v
	return s
}

func (s *QueryCollectionDataShrinkRequest) SetContent(v string) *QueryCollectionDataShrinkRequest {
	s.Content = &v
	return s
}

func (s *QueryCollectionDataShrinkRequest) SetDBInstanceId(v string) *QueryCollectionDataShrinkRequest {
	s.DBInstanceId = &v
	return s
}

func (s *QueryCollectionDataShrinkRequest) SetFilter(v string) *QueryCollectionDataShrinkRequest {
	s.Filter = &v
	return s
}

func (s *QueryCollectionDataShrinkRequest) SetHybridSearch(v string) *QueryCollectionDataShrinkRequest {
	s.HybridSearch = &v
	return s
}

func (s *QueryCollectionDataShrinkRequest) SetHybridSearchArgsShrink(v string) *QueryCollectionDataShrinkRequest {
	s.HybridSearchArgsShrink = &v
	return s
}

func (s *QueryCollectionDataShrinkRequest) SetIncludeMetadataFields(v string) *QueryCollectionDataShrinkRequest {
	s.IncludeMetadataFields = &v
	return s
}

func (s *QueryCollectionDataShrinkRequest) SetIncludeValues(v bool) *QueryCollectionDataShrinkRequest {
	s.IncludeValues = &v
	return s
}

func (s *QueryCollectionDataShrinkRequest) SetMetrics(v string) *QueryCollectionDataShrinkRequest {
	s.Metrics = &v
	return s
}

func (s *QueryCollectionDataShrinkRequest) SetNamespace(v string) *QueryCollectionDataShrinkRequest {
	s.Namespace = &v
	return s
}

func (s *QueryCollectionDataShrinkRequest) SetNamespacePassword(v string) *QueryCollectionDataShrinkRequest {
	s.NamespacePassword = &v
	return s
}

func (s *QueryCollectionDataShrinkRequest) SetOffset(v int32) *QueryCollectionDataShrinkRequest {
	s.Offset = &v
	return s
}

func (s *QueryCollectionDataShrinkRequest) SetOrderBy(v string) *QueryCollectionDataShrinkRequest {
	s.OrderBy = &v
	return s
}

func (s *QueryCollectionDataShrinkRequest) SetOwnerId(v int64) *QueryCollectionDataShrinkRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryCollectionDataShrinkRequest) SetRegionId(v string) *QueryCollectionDataShrinkRequest {
	s.RegionId = &v
	return s
}

func (s *QueryCollectionDataShrinkRequest) SetRelationalTableFilterShrink(v string) *QueryCollectionDataShrinkRequest {
	s.RelationalTableFilterShrink = &v
	return s
}

func (s *QueryCollectionDataShrinkRequest) SetSparseVectorShrink(v string) *QueryCollectionDataShrinkRequest {
	s.SparseVectorShrink = &v
	return s
}

func (s *QueryCollectionDataShrinkRequest) SetTopK(v int64) *QueryCollectionDataShrinkRequest {
	s.TopK = &v
	return s
}

func (s *QueryCollectionDataShrinkRequest) SetVectorShrink(v string) *QueryCollectionDataShrinkRequest {
	s.VectorShrink = &v
	return s
}

func (s *QueryCollectionDataShrinkRequest) SetWorkspaceId(v string) *QueryCollectionDataShrinkRequest {
	s.WorkspaceId = &v
	return s
}

type QueryCollectionDataResponseBody struct {
	// Data list.
	Matches *QueryCollectionDataResponseBodyMatches `json:"Matches,omitempty" xml:"Matches,omitempty" type:"Struct"`
	// Detailed information when the request fails.
	//
	// example:
	//
	// 0.1234
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Status, with the following values:
	//
	// - **success**: Success.
	//
	// - **fail**: Failure.
	//
	// example:
	//
	// success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// Only returned when the Offset is not 0, this value represents the total number of hits for the search criteria.
	//
	// example:
	//
	// 100
	Total *int32 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s QueryCollectionDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryCollectionDataResponseBody) GoString() string {
	return s.String()
}

func (s *QueryCollectionDataResponseBody) SetMatches(v *QueryCollectionDataResponseBodyMatches) *QueryCollectionDataResponseBody {
	s.Matches = v
	return s
}

func (s *QueryCollectionDataResponseBody) SetMessage(v string) *QueryCollectionDataResponseBody {
	s.Message = &v
	return s
}

func (s *QueryCollectionDataResponseBody) SetRequestId(v string) *QueryCollectionDataResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryCollectionDataResponseBody) SetStatus(v string) *QueryCollectionDataResponseBody {
	s.Status = &v
	return s
}

func (s *QueryCollectionDataResponseBody) SetTotal(v int32) *QueryCollectionDataResponseBody {
	s.Total = &v
	return s
}

type QueryCollectionDataResponseBodyMatches struct {
	Match []*QueryCollectionDataResponseBodyMatchesMatch `json:"match,omitempty" xml:"match,omitempty" type:"Repeated"`
}

func (s QueryCollectionDataResponseBodyMatches) String() string {
	return tea.Prettify(s)
}

func (s QueryCollectionDataResponseBodyMatches) GoString() string {
	return s.String()
}

func (s *QueryCollectionDataResponseBodyMatches) SetMatch(v []*QueryCollectionDataResponseBodyMatchesMatch) *QueryCollectionDataResponseBodyMatches {
	s.Match = v
	return s
}

type QueryCollectionDataResponseBodyMatchesMatch struct {
	// The unique ID of the vector data.
	//
	// example:
	//
	// doca-1234
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// Metadata.
	Metadata map[string]*string `json:"Metadata,omitempty" xml:"Metadata,omitempty"`
	// The similarity score of this data, which is related to the algorithm `(l2/ip/cosine)` specified when creating the index.
	//
	// example:
	//
	// 0.12345
	Score *float64 `json:"Score,omitempty" xml:"Score,omitempty"`
	// List of vector data.
	Values *QueryCollectionDataResponseBodyMatchesMatchValues `json:"Values,omitempty" xml:"Values,omitempty" type:"Struct"`
}

func (s QueryCollectionDataResponseBodyMatchesMatch) String() string {
	return tea.Prettify(s)
}

func (s QueryCollectionDataResponseBodyMatchesMatch) GoString() string {
	return s.String()
}

func (s *QueryCollectionDataResponseBodyMatchesMatch) SetId(v string) *QueryCollectionDataResponseBodyMatchesMatch {
	s.Id = &v
	return s
}

func (s *QueryCollectionDataResponseBodyMatchesMatch) SetMetadata(v map[string]*string) *QueryCollectionDataResponseBodyMatchesMatch {
	s.Metadata = v
	return s
}

func (s *QueryCollectionDataResponseBodyMatchesMatch) SetScore(v float64) *QueryCollectionDataResponseBodyMatchesMatch {
	s.Score = &v
	return s
}

func (s *QueryCollectionDataResponseBodyMatchesMatch) SetValues(v *QueryCollectionDataResponseBodyMatchesMatchValues) *QueryCollectionDataResponseBodyMatchesMatch {
	s.Values = v
	return s
}

type QueryCollectionDataResponseBodyMatchesMatchValues struct {
	Value []*float64 `json:"value,omitempty" xml:"value,omitempty" type:"Repeated"`
}

func (s QueryCollectionDataResponseBodyMatchesMatchValues) String() string {
	return tea.Prettify(s)
}

func (s QueryCollectionDataResponseBodyMatchesMatchValues) GoString() string {
	return s.String()
}

func (s *QueryCollectionDataResponseBodyMatchesMatchValues) SetValue(v []*float64) *QueryCollectionDataResponseBodyMatchesMatchValues {
	s.Value = v
	return s
}

type QueryCollectionDataResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryCollectionDataResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryCollectionDataResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryCollectionDataResponse) GoString() string {
	return s.String()
}

func (s *QueryCollectionDataResponse) SetHeaders(v map[string]*string) *QueryCollectionDataResponse {
	s.Headers = v
	return s
}

func (s *QueryCollectionDataResponse) SetStatusCode(v int32) *QueryCollectionDataResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryCollectionDataResponse) SetBody(v *QueryCollectionDataResponseBody) *QueryCollectionDataResponse {
	s.Body = v
	return s
}

type QueryContentRequest struct {
	// Document collection name.
	//
	// > Created by the [CreateDocumentCollection](https://help.aliyun.com/document_detail/2618448.html) API. You can use the [ListDocumentCollections](https://help.aliyun.com/document_detail/2618452.html) API to view the list of created document collections.
	//
	// This parameter is required.
	//
	// example:
	//
	// document
	Collection *string `json:"Collection,omitempty" xml:"Collection,omitempty"`
	// Text content for retrieval.
	//
	// example:
	//
	// What is ADBPG?
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// Instance ID.
	//
	// > You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) API to view details of all AnalyticDB for PostgreSQL instances in the target region, including the instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// In image search scenarios, the source file name of the image to be searched.
	//
	// > The image file must have a file extension. Currently supported image extensions: bmp, jpg, jpeg, png, tiff.
	//
	// example:
	//
	// test.jpg
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// In image search scenarios, the publicly accessible URL of the image file.
	//
	// > The image file must have a file extension. Currently supported image extensions: bmp, jpg, jpeg, png, tiff.
	//
	// example:
	//
	// https://xx/myImage.jpg
	FileUrl *string `json:"FileUrl,omitempty" xml:"FileUrl,omitempty"`
	// Filter condition for the data to be queried, in SQL WHERE format. It is an expression that returns a boolean value (true or false). The conditions can be simple comparison operators such as equal (=), not equal (<> or !=), greater than (>), less than (<), greater than or equal to (>=), less than or equal to (<=), or more complex expressions combined with logical operators (AND, OR, NOT), and conditions using keywords like IN, BETWEEN, LIKE, etc.
	//
	// >
	//
	// > - For detailed syntax, refer to: https://www.postgresqltutorial.com/postgresql-tutorial/postgresql-where/
	//
	// example:
	//
	// title = \\"test\\" AND name like \\"test%\\"
	Filter *string `json:"Filter,omitempty" xml:"Filter,omitempty"`
	// Dual recall algorithm, default is empty (i.e., directly compare and sort the scores of vectors and full text).
	//
	// Available values:
	//
	// - RRF: Reciprocal rank fusion, with a parameter k controlling the fusion effect. See HybridSearchArgs configuration for details;
	//
	// - Weight: Weighted ranking, using a parameter alpha to control the weight of vector and full-text scores, then sorting. See HybridSearchArgs configuration for details;
	//
	// - Cascaded: Perform full-text retrieval first, then vector retrieval on top of it;
	//
	// example:
	//
	// RRF
	HybridSearch *string `json:"HybridSearch,omitempty" xml:"HybridSearch,omitempty"`
	// The parameters of the two-way retrieval algorithm. The following parameters are supported:
	//
	// 	- When HybridSearch is set to RRF, the scores are calculated by using the `1/(k+rank_i)` formula. The constant k is a positive integer that is greater than 1.
	//
	// <!---->
	//
	//     {
	//
	//        "RRF": {
	//
	//         "k": 60
	//
	//        }
	//
	//     }
	//
	// 	- When HybridSearch is set to Weight, the scores are calculated by using the `alpha 	- vector_score + (1-alpha) 	- text_score` formula. The alpha parameter specifies the proportion of the vector search score and the full-text search score and ranges from 0 to 1. A value of 0 specifies full-text search and a value of 1 specifies vector search.
	//
	// <!---->
	//
	//     {
	//
	//        "Weight": {
	//
	//         "alpha": 0.5
	//
	//        }
	//
	//     }
	HybridSearchArgs map[string]map[string]interface{} `json:"HybridSearchArgs,omitempty" xml:"HybridSearchArgs,omitempty"`
	// Specifies whether to return the URL of the document. Default value: false.
	//
	// example:
	//
	// false
	IncludeFileUrl *bool `json:"IncludeFileUrl,omitempty" xml:"IncludeFileUrl,omitempty"`
	// The metadata fields to be returned. Separate multiple fields with commas (,). This parameter is empty by default.
	//
	// example:
	//
	// title,page
	IncludeMetadataFields *string `json:"IncludeMetadataFields,omitempty" xml:"IncludeMetadataFields,omitempty"`
	// Whether to return vectors. Default is false.
	//
	// > - **false**: Do not return vectors.
	//
	// > - **true**: Return vectors.
	//
	// example:
	//
	// true
	IncludeVector *bool `json:"IncludeVector,omitempty" xml:"IncludeVector,omitempty"`
	// Similarity algorithm used during retrieval. If this value is empty, the algorithm specified at the time of knowledge base creation is used. It is recommended not to set this unless there is a specific need.
	//
	// > Value description:
	//
	// > - **l2**: Euclidean distance.
	//
	// > - **ip**: Inner product (dot product) distance.
	//
	// > - **cosine**: Cosine similarity.
	//
	// example:
	//
	// cosine
	Metrics *string `json:"Metrics,omitempty" xml:"Metrics,omitempty"`
	// Namespace, default is public.
	//
	// > You can create a namespace using the [CreateNamespace](https://help.aliyun.com/document_detail/2401495.html) API and view the list of namespaces using the [ListNamespaces](https://help.aliyun.com/document_detail/2401502.html) API.
	//
	// example:
	//
	// mynamespace
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// Password for the namespace.
	//
	// > This value is specified in the [CreateNamespace](https://help.aliyun.com/document_detail/2401495.html) API.
	//
	// This parameter is required.
	//
	// example:
	//
	// testpassword
	NamespacePassword *string `json:"NamespacePassword,omitempty" xml:"NamespacePassword,omitempty"`
	OwnerId           *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// Recall window. When this value is not empty, it adds context to the returned search results. The format is an array of 2 elements: List<A, B>, where -10 <= A <= 0 and 0 <= B <= 10.
	//
	// > - Recommended when documents are fragmented and retrieval may lose contextual information.
	//
	// > - Re-ranking takes precedence over windowing, i.e., re-rank first, then apply windowing.
	RecallWindow []*int32 `json:"RecallWindow,omitempty" xml:"RecallWindow,omitempty" type:"Repeated"`
	// The region ID where the instance is located.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// Re-ranking factor. When this value is not empty, it will re-rank the vector search results. The value range is 1 < RerankFactor <= 5.
	//
	// > - Re-ranking is slower when documents are sparsely split.
	//
	// > - It is recommended that the re-ranked count (TopK 	- Factor, rounded up) does not exceed 50.
	//
	// example:
	//
	// 2
	RerankFactor *float64 `json:"RerankFactor,omitempty" xml:"RerankFactor,omitempty"`
	// Set the number of top results to return.
	//
	// example:
	//
	// 10
	TopK *int32 `json:"TopK,omitempty" xml:"TopK,omitempty"`
	// Whether to use full-text retrieval (dual recall). Default is false, which means only vector retrieval is used.
	//
	// example:
	//
	// true
	UseFullTextRetrieval *bool `json:"UseFullTextRetrieval,omitempty" xml:"UseFullTextRetrieval,omitempty"`
}

func (s QueryContentRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryContentRequest) GoString() string {
	return s.String()
}

func (s *QueryContentRequest) SetCollection(v string) *QueryContentRequest {
	s.Collection = &v
	return s
}

func (s *QueryContentRequest) SetContent(v string) *QueryContentRequest {
	s.Content = &v
	return s
}

func (s *QueryContentRequest) SetDBInstanceId(v string) *QueryContentRequest {
	s.DBInstanceId = &v
	return s
}

func (s *QueryContentRequest) SetFileName(v string) *QueryContentRequest {
	s.FileName = &v
	return s
}

func (s *QueryContentRequest) SetFileUrl(v string) *QueryContentRequest {
	s.FileUrl = &v
	return s
}

func (s *QueryContentRequest) SetFilter(v string) *QueryContentRequest {
	s.Filter = &v
	return s
}

func (s *QueryContentRequest) SetHybridSearch(v string) *QueryContentRequest {
	s.HybridSearch = &v
	return s
}

func (s *QueryContentRequest) SetHybridSearchArgs(v map[string]map[string]interface{}) *QueryContentRequest {
	s.HybridSearchArgs = v
	return s
}

func (s *QueryContentRequest) SetIncludeFileUrl(v bool) *QueryContentRequest {
	s.IncludeFileUrl = &v
	return s
}

func (s *QueryContentRequest) SetIncludeMetadataFields(v string) *QueryContentRequest {
	s.IncludeMetadataFields = &v
	return s
}

func (s *QueryContentRequest) SetIncludeVector(v bool) *QueryContentRequest {
	s.IncludeVector = &v
	return s
}

func (s *QueryContentRequest) SetMetrics(v string) *QueryContentRequest {
	s.Metrics = &v
	return s
}

func (s *QueryContentRequest) SetNamespace(v string) *QueryContentRequest {
	s.Namespace = &v
	return s
}

func (s *QueryContentRequest) SetNamespacePassword(v string) *QueryContentRequest {
	s.NamespacePassword = &v
	return s
}

func (s *QueryContentRequest) SetOwnerId(v int64) *QueryContentRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryContentRequest) SetRecallWindow(v []*int32) *QueryContentRequest {
	s.RecallWindow = v
	return s
}

func (s *QueryContentRequest) SetRegionId(v string) *QueryContentRequest {
	s.RegionId = &v
	return s
}

func (s *QueryContentRequest) SetRerankFactor(v float64) *QueryContentRequest {
	s.RerankFactor = &v
	return s
}

func (s *QueryContentRequest) SetTopK(v int32) *QueryContentRequest {
	s.TopK = &v
	return s
}

func (s *QueryContentRequest) SetUseFullTextRetrieval(v bool) *QueryContentRequest {
	s.UseFullTextRetrieval = &v
	return s
}

type QueryContentAdvanceRequest struct {
	// Document collection name.
	//
	// > Created by the [CreateDocumentCollection](https://help.aliyun.com/document_detail/2618448.html) API. You can use the [ListDocumentCollections](https://help.aliyun.com/document_detail/2618452.html) API to view the list of created document collections.
	//
	// This parameter is required.
	//
	// example:
	//
	// document
	Collection *string `json:"Collection,omitempty" xml:"Collection,omitempty"`
	// Text content for retrieval.
	//
	// example:
	//
	// What is ADBPG?
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// Instance ID.
	//
	// > You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) API to view details of all AnalyticDB for PostgreSQL instances in the target region, including the instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// In image search scenarios, the source file name of the image to be searched.
	//
	// > The image file must have a file extension. Currently supported image extensions: bmp, jpg, jpeg, png, tiff.
	//
	// example:
	//
	// test.jpg
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// In image search scenarios, the publicly accessible URL of the image file.
	//
	// > The image file must have a file extension. Currently supported image extensions: bmp, jpg, jpeg, png, tiff.
	//
	// example:
	//
	// https://xx/myImage.jpg
	FileUrlObject io.Reader `json:"FileUrl,omitempty" xml:"FileUrl,omitempty"`
	// Filter condition for the data to be queried, in SQL WHERE format. It is an expression that returns a boolean value (true or false). The conditions can be simple comparison operators such as equal (=), not equal (<> or !=), greater than (>), less than (<), greater than or equal to (>=), less than or equal to (<=), or more complex expressions combined with logical operators (AND, OR, NOT), and conditions using keywords like IN, BETWEEN, LIKE, etc.
	//
	// >
	//
	// > - For detailed syntax, refer to: https://www.postgresqltutorial.com/postgresql-tutorial/postgresql-where/
	//
	// example:
	//
	// title = \\"test\\" AND name like \\"test%\\"
	Filter *string `json:"Filter,omitempty" xml:"Filter,omitempty"`
	// Dual recall algorithm, default is empty (i.e., directly compare and sort the scores of vectors and full text).
	//
	// Available values:
	//
	// - RRF: Reciprocal rank fusion, with a parameter k controlling the fusion effect. See HybridSearchArgs configuration for details;
	//
	// - Weight: Weighted ranking, using a parameter alpha to control the weight of vector and full-text scores, then sorting. See HybridSearchArgs configuration for details;
	//
	// - Cascaded: Perform full-text retrieval first, then vector retrieval on top of it;
	//
	// example:
	//
	// RRF
	HybridSearch *string `json:"HybridSearch,omitempty" xml:"HybridSearch,omitempty"`
	// The parameters of the two-way retrieval algorithm. The following parameters are supported:
	//
	// 	- When HybridSearch is set to RRF, the scores are calculated by using the `1/(k+rank_i)` formula. The constant k is a positive integer that is greater than 1.
	//
	// <!---->
	//
	//     {
	//
	//        "RRF": {
	//
	//         "k": 60
	//
	//        }
	//
	//     }
	//
	// 	- When HybridSearch is set to Weight, the scores are calculated by using the `alpha 	- vector_score + (1-alpha) 	- text_score` formula. The alpha parameter specifies the proportion of the vector search score and the full-text search score and ranges from 0 to 1. A value of 0 specifies full-text search and a value of 1 specifies vector search.
	//
	// <!---->
	//
	//     {
	//
	//        "Weight": {
	//
	//         "alpha": 0.5
	//
	//        }
	//
	//     }
	HybridSearchArgs map[string]map[string]interface{} `json:"HybridSearchArgs,omitempty" xml:"HybridSearchArgs,omitempty"`
	// Specifies whether to return the URL of the document. Default value: false.
	//
	// example:
	//
	// false
	IncludeFileUrl *bool `json:"IncludeFileUrl,omitempty" xml:"IncludeFileUrl,omitempty"`
	// The metadata fields to be returned. Separate multiple fields with commas (,). This parameter is empty by default.
	//
	// example:
	//
	// title,page
	IncludeMetadataFields *string `json:"IncludeMetadataFields,omitempty" xml:"IncludeMetadataFields,omitempty"`
	// Whether to return vectors. Default is false.
	//
	// > - **false**: Do not return vectors.
	//
	// > - **true**: Return vectors.
	//
	// example:
	//
	// true
	IncludeVector *bool `json:"IncludeVector,omitempty" xml:"IncludeVector,omitempty"`
	// Similarity algorithm used during retrieval. If this value is empty, the algorithm specified at the time of knowledge base creation is used. It is recommended not to set this unless there is a specific need.
	//
	// > Value description:
	//
	// > - **l2**: Euclidean distance.
	//
	// > - **ip**: Inner product (dot product) distance.
	//
	// > - **cosine**: Cosine similarity.
	//
	// example:
	//
	// cosine
	Metrics *string `json:"Metrics,omitempty" xml:"Metrics,omitempty"`
	// Namespace, default is public.
	//
	// > You can create a namespace using the [CreateNamespace](https://help.aliyun.com/document_detail/2401495.html) API and view the list of namespaces using the [ListNamespaces](https://help.aliyun.com/document_detail/2401502.html) API.
	//
	// example:
	//
	// mynamespace
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// Password for the namespace.
	//
	// > This value is specified in the [CreateNamespace](https://help.aliyun.com/document_detail/2401495.html) API.
	//
	// This parameter is required.
	//
	// example:
	//
	// testpassword
	NamespacePassword *string `json:"NamespacePassword,omitempty" xml:"NamespacePassword,omitempty"`
	OwnerId           *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// Recall window. When this value is not empty, it adds context to the returned search results. The format is an array of 2 elements: List<A, B>, where -10 <= A <= 0 and 0 <= B <= 10.
	//
	// > - Recommended when documents are fragmented and retrieval may lose contextual information.
	//
	// > - Re-ranking takes precedence over windowing, i.e., re-rank first, then apply windowing.
	RecallWindow []*int32 `json:"RecallWindow,omitempty" xml:"RecallWindow,omitempty" type:"Repeated"`
	// The region ID where the instance is located.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// Re-ranking factor. When this value is not empty, it will re-rank the vector search results. The value range is 1 < RerankFactor <= 5.
	//
	// > - Re-ranking is slower when documents are sparsely split.
	//
	// > - It is recommended that the re-ranked count (TopK 	- Factor, rounded up) does not exceed 50.
	//
	// example:
	//
	// 2
	RerankFactor *float64 `json:"RerankFactor,omitempty" xml:"RerankFactor,omitempty"`
	// Set the number of top results to return.
	//
	// example:
	//
	// 10
	TopK *int32 `json:"TopK,omitempty" xml:"TopK,omitempty"`
	// Whether to use full-text retrieval (dual recall). Default is false, which means only vector retrieval is used.
	//
	// example:
	//
	// true
	UseFullTextRetrieval *bool `json:"UseFullTextRetrieval,omitempty" xml:"UseFullTextRetrieval,omitempty"`
}

func (s QueryContentAdvanceRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryContentAdvanceRequest) GoString() string {
	return s.String()
}

func (s *QueryContentAdvanceRequest) SetCollection(v string) *QueryContentAdvanceRequest {
	s.Collection = &v
	return s
}

func (s *QueryContentAdvanceRequest) SetContent(v string) *QueryContentAdvanceRequest {
	s.Content = &v
	return s
}

func (s *QueryContentAdvanceRequest) SetDBInstanceId(v string) *QueryContentAdvanceRequest {
	s.DBInstanceId = &v
	return s
}

func (s *QueryContentAdvanceRequest) SetFileName(v string) *QueryContentAdvanceRequest {
	s.FileName = &v
	return s
}

func (s *QueryContentAdvanceRequest) SetFileUrlObject(v io.Reader) *QueryContentAdvanceRequest {
	s.FileUrlObject = v
	return s
}

func (s *QueryContentAdvanceRequest) SetFilter(v string) *QueryContentAdvanceRequest {
	s.Filter = &v
	return s
}

func (s *QueryContentAdvanceRequest) SetHybridSearch(v string) *QueryContentAdvanceRequest {
	s.HybridSearch = &v
	return s
}

func (s *QueryContentAdvanceRequest) SetHybridSearchArgs(v map[string]map[string]interface{}) *QueryContentAdvanceRequest {
	s.HybridSearchArgs = v
	return s
}

func (s *QueryContentAdvanceRequest) SetIncludeFileUrl(v bool) *QueryContentAdvanceRequest {
	s.IncludeFileUrl = &v
	return s
}

func (s *QueryContentAdvanceRequest) SetIncludeMetadataFields(v string) *QueryContentAdvanceRequest {
	s.IncludeMetadataFields = &v
	return s
}

func (s *QueryContentAdvanceRequest) SetIncludeVector(v bool) *QueryContentAdvanceRequest {
	s.IncludeVector = &v
	return s
}

func (s *QueryContentAdvanceRequest) SetMetrics(v string) *QueryContentAdvanceRequest {
	s.Metrics = &v
	return s
}

func (s *QueryContentAdvanceRequest) SetNamespace(v string) *QueryContentAdvanceRequest {
	s.Namespace = &v
	return s
}

func (s *QueryContentAdvanceRequest) SetNamespacePassword(v string) *QueryContentAdvanceRequest {
	s.NamespacePassword = &v
	return s
}

func (s *QueryContentAdvanceRequest) SetOwnerId(v int64) *QueryContentAdvanceRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryContentAdvanceRequest) SetRecallWindow(v []*int32) *QueryContentAdvanceRequest {
	s.RecallWindow = v
	return s
}

func (s *QueryContentAdvanceRequest) SetRegionId(v string) *QueryContentAdvanceRequest {
	s.RegionId = &v
	return s
}

func (s *QueryContentAdvanceRequest) SetRerankFactor(v float64) *QueryContentAdvanceRequest {
	s.RerankFactor = &v
	return s
}

func (s *QueryContentAdvanceRequest) SetTopK(v int32) *QueryContentAdvanceRequest {
	s.TopK = &v
	return s
}

func (s *QueryContentAdvanceRequest) SetUseFullTextRetrieval(v bool) *QueryContentAdvanceRequest {
	s.UseFullTextRetrieval = &v
	return s
}

type QueryContentShrinkRequest struct {
	// Document collection name.
	//
	// > Created by the [CreateDocumentCollection](https://help.aliyun.com/document_detail/2618448.html) API. You can use the [ListDocumentCollections](https://help.aliyun.com/document_detail/2618452.html) API to view the list of created document collections.
	//
	// This parameter is required.
	//
	// example:
	//
	// document
	Collection *string `json:"Collection,omitempty" xml:"Collection,omitempty"`
	// Text content for retrieval.
	//
	// example:
	//
	// What is ADBPG?
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// Instance ID.
	//
	// > You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) API to view details of all AnalyticDB for PostgreSQL instances in the target region, including the instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// In image search scenarios, the source file name of the image to be searched.
	//
	// > The image file must have a file extension. Currently supported image extensions: bmp, jpg, jpeg, png, tiff.
	//
	// example:
	//
	// test.jpg
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// In image search scenarios, the publicly accessible URL of the image file.
	//
	// > The image file must have a file extension. Currently supported image extensions: bmp, jpg, jpeg, png, tiff.
	//
	// example:
	//
	// https://xx/myImage.jpg
	FileUrl *string `json:"FileUrl,omitempty" xml:"FileUrl,omitempty"`
	// Filter condition for the data to be queried, in SQL WHERE format. It is an expression that returns a boolean value (true or false). The conditions can be simple comparison operators such as equal (=), not equal (<> or !=), greater than (>), less than (<), greater than or equal to (>=), less than or equal to (<=), or more complex expressions combined with logical operators (AND, OR, NOT), and conditions using keywords like IN, BETWEEN, LIKE, etc.
	//
	// >
	//
	// > - For detailed syntax, refer to: https://www.postgresqltutorial.com/postgresql-tutorial/postgresql-where/
	//
	// example:
	//
	// title = \\"test\\" AND name like \\"test%\\"
	Filter *string `json:"Filter,omitempty" xml:"Filter,omitempty"`
	// Dual recall algorithm, default is empty (i.e., directly compare and sort the scores of vectors and full text).
	//
	// Available values:
	//
	// - RRF: Reciprocal rank fusion, with a parameter k controlling the fusion effect. See HybridSearchArgs configuration for details;
	//
	// - Weight: Weighted ranking, using a parameter alpha to control the weight of vector and full-text scores, then sorting. See HybridSearchArgs configuration for details;
	//
	// - Cascaded: Perform full-text retrieval first, then vector retrieval on top of it;
	//
	// example:
	//
	// RRF
	HybridSearch *string `json:"HybridSearch,omitempty" xml:"HybridSearch,omitempty"`
	// The parameters of the two-way retrieval algorithm. The following parameters are supported:
	//
	// 	- When HybridSearch is set to RRF, the scores are calculated by using the `1/(k+rank_i)` formula. The constant k is a positive integer that is greater than 1.
	//
	// <!---->
	//
	//     {
	//
	//        "RRF": {
	//
	//         "k": 60
	//
	//        }
	//
	//     }
	//
	// 	- When HybridSearch is set to Weight, the scores are calculated by using the `alpha 	- vector_score + (1-alpha) 	- text_score` formula. The alpha parameter specifies the proportion of the vector search score and the full-text search score and ranges from 0 to 1. A value of 0 specifies full-text search and a value of 1 specifies vector search.
	//
	// <!---->
	//
	//     {
	//
	//        "Weight": {
	//
	//         "alpha": 0.5
	//
	//        }
	//
	//     }
	HybridSearchArgsShrink *string `json:"HybridSearchArgs,omitempty" xml:"HybridSearchArgs,omitempty"`
	// Specifies whether to return the URL of the document. Default value: false.
	//
	// example:
	//
	// false
	IncludeFileUrl *bool `json:"IncludeFileUrl,omitempty" xml:"IncludeFileUrl,omitempty"`
	// The metadata fields to be returned. Separate multiple fields with commas (,). This parameter is empty by default.
	//
	// example:
	//
	// title,page
	IncludeMetadataFields *string `json:"IncludeMetadataFields,omitempty" xml:"IncludeMetadataFields,omitempty"`
	// Whether to return vectors. Default is false.
	//
	// > - **false**: Do not return vectors.
	//
	// > - **true**: Return vectors.
	//
	// example:
	//
	// true
	IncludeVector *bool `json:"IncludeVector,omitempty" xml:"IncludeVector,omitempty"`
	// Similarity algorithm used during retrieval. If this value is empty, the algorithm specified at the time of knowledge base creation is used. It is recommended not to set this unless there is a specific need.
	//
	// > Value description:
	//
	// > - **l2**: Euclidean distance.
	//
	// > - **ip**: Inner product (dot product) distance.
	//
	// > - **cosine**: Cosine similarity.
	//
	// example:
	//
	// cosine
	Metrics *string `json:"Metrics,omitempty" xml:"Metrics,omitempty"`
	// Namespace, default is public.
	//
	// > You can create a namespace using the [CreateNamespace](https://help.aliyun.com/document_detail/2401495.html) API and view the list of namespaces using the [ListNamespaces](https://help.aliyun.com/document_detail/2401502.html) API.
	//
	// example:
	//
	// mynamespace
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// Password for the namespace.
	//
	// > This value is specified in the [CreateNamespace](https://help.aliyun.com/document_detail/2401495.html) API.
	//
	// This parameter is required.
	//
	// example:
	//
	// testpassword
	NamespacePassword *string `json:"NamespacePassword,omitempty" xml:"NamespacePassword,omitempty"`
	OwnerId           *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// Recall window. When this value is not empty, it adds context to the returned search results. The format is an array of 2 elements: List<A, B>, where -10 <= A <= 0 and 0 <= B <= 10.
	//
	// > - Recommended when documents are fragmented and retrieval may lose contextual information.
	//
	// > - Re-ranking takes precedence over windowing, i.e., re-rank first, then apply windowing.
	RecallWindowShrink *string `json:"RecallWindow,omitempty" xml:"RecallWindow,omitempty"`
	// The region ID where the instance is located.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// Re-ranking factor. When this value is not empty, it will re-rank the vector search results. The value range is 1 < RerankFactor <= 5.
	//
	// > - Re-ranking is slower when documents are sparsely split.
	//
	// > - It is recommended that the re-ranked count (TopK 	- Factor, rounded up) does not exceed 50.
	//
	// example:
	//
	// 2
	RerankFactor *float64 `json:"RerankFactor,omitempty" xml:"RerankFactor,omitempty"`
	// Set the number of top results to return.
	//
	// example:
	//
	// 10
	TopK *int32 `json:"TopK,omitempty" xml:"TopK,omitempty"`
	// Whether to use full-text retrieval (dual recall). Default is false, which means only vector retrieval is used.
	//
	// example:
	//
	// true
	UseFullTextRetrieval *bool `json:"UseFullTextRetrieval,omitempty" xml:"UseFullTextRetrieval,omitempty"`
}

func (s QueryContentShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryContentShrinkRequest) GoString() string {
	return s.String()
}

func (s *QueryContentShrinkRequest) SetCollection(v string) *QueryContentShrinkRequest {
	s.Collection = &v
	return s
}

func (s *QueryContentShrinkRequest) SetContent(v string) *QueryContentShrinkRequest {
	s.Content = &v
	return s
}

func (s *QueryContentShrinkRequest) SetDBInstanceId(v string) *QueryContentShrinkRequest {
	s.DBInstanceId = &v
	return s
}

func (s *QueryContentShrinkRequest) SetFileName(v string) *QueryContentShrinkRequest {
	s.FileName = &v
	return s
}

func (s *QueryContentShrinkRequest) SetFileUrl(v string) *QueryContentShrinkRequest {
	s.FileUrl = &v
	return s
}

func (s *QueryContentShrinkRequest) SetFilter(v string) *QueryContentShrinkRequest {
	s.Filter = &v
	return s
}

func (s *QueryContentShrinkRequest) SetHybridSearch(v string) *QueryContentShrinkRequest {
	s.HybridSearch = &v
	return s
}

func (s *QueryContentShrinkRequest) SetHybridSearchArgsShrink(v string) *QueryContentShrinkRequest {
	s.HybridSearchArgsShrink = &v
	return s
}

func (s *QueryContentShrinkRequest) SetIncludeFileUrl(v bool) *QueryContentShrinkRequest {
	s.IncludeFileUrl = &v
	return s
}

func (s *QueryContentShrinkRequest) SetIncludeMetadataFields(v string) *QueryContentShrinkRequest {
	s.IncludeMetadataFields = &v
	return s
}

func (s *QueryContentShrinkRequest) SetIncludeVector(v bool) *QueryContentShrinkRequest {
	s.IncludeVector = &v
	return s
}

func (s *QueryContentShrinkRequest) SetMetrics(v string) *QueryContentShrinkRequest {
	s.Metrics = &v
	return s
}

func (s *QueryContentShrinkRequest) SetNamespace(v string) *QueryContentShrinkRequest {
	s.Namespace = &v
	return s
}

func (s *QueryContentShrinkRequest) SetNamespacePassword(v string) *QueryContentShrinkRequest {
	s.NamespacePassword = &v
	return s
}

func (s *QueryContentShrinkRequest) SetOwnerId(v int64) *QueryContentShrinkRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryContentShrinkRequest) SetRecallWindowShrink(v string) *QueryContentShrinkRequest {
	s.RecallWindowShrink = &v
	return s
}

func (s *QueryContentShrinkRequest) SetRegionId(v string) *QueryContentShrinkRequest {
	s.RegionId = &v
	return s
}

func (s *QueryContentShrinkRequest) SetRerankFactor(v float64) *QueryContentShrinkRequest {
	s.RerankFactor = &v
	return s
}

func (s *QueryContentShrinkRequest) SetTopK(v int32) *QueryContentShrinkRequest {
	s.TopK = &v
	return s
}

func (s *QueryContentShrinkRequest) SetUseFullTextRetrieval(v bool) *QueryContentShrinkRequest {
	s.UseFullTextRetrieval = &v
	return s
}

type QueryContentResponseBody struct {
	// Number of tokens used for vectorization.
	//
	// > A token refers to the smallest unit into which the input text is divided; a token can be a word, a phrase, a punctuation mark, or a character, etc.
	//
	// example:
	//
	// 100
	EmbeddingTokens *string `json:"EmbeddingTokens,omitempty" xml:"EmbeddingTokens,omitempty"`
	// The retrieved data.
	Matches *QueryContentResponseBodyMatches `json:"Matches,omitempty" xml:"Matches,omitempty" type:"Struct"`
	// Return message.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The execution state of the operation. Valid values:
	//
	// 	- **false**: The operation fails.
	//
	// 	- **true**: The operation is successful.
	//
	// example:
	//
	// success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// Resource usage for this query.
	Usage *QueryContentResponseBodyUsage `json:"Usage,omitempty" xml:"Usage,omitempty" type:"Struct"`
	// List of windowed matches.
	WindowMatches *QueryContentResponseBodyWindowMatches `json:"WindowMatches,omitempty" xml:"WindowMatches,omitempty" type:"Struct"`
}

func (s QueryContentResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryContentResponseBody) GoString() string {
	return s.String()
}

func (s *QueryContentResponseBody) SetEmbeddingTokens(v string) *QueryContentResponseBody {
	s.EmbeddingTokens = &v
	return s
}

func (s *QueryContentResponseBody) SetMatches(v *QueryContentResponseBodyMatches) *QueryContentResponseBody {
	s.Matches = v
	return s
}

func (s *QueryContentResponseBody) SetMessage(v string) *QueryContentResponseBody {
	s.Message = &v
	return s
}

func (s *QueryContentResponseBody) SetRequestId(v string) *QueryContentResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryContentResponseBody) SetStatus(v string) *QueryContentResponseBody {
	s.Status = &v
	return s
}

func (s *QueryContentResponseBody) SetUsage(v *QueryContentResponseBodyUsage) *QueryContentResponseBody {
	s.Usage = v
	return s
}

func (s *QueryContentResponseBody) SetWindowMatches(v *QueryContentResponseBodyWindowMatches) *QueryContentResponseBody {
	s.WindowMatches = v
	return s
}

type QueryContentResponseBodyMatches struct {
	MatchList []*QueryContentResponseBodyMatchesMatchList `json:"MatchList,omitempty" xml:"MatchList,omitempty" type:"Repeated"`
}

func (s QueryContentResponseBodyMatches) String() string {
	return tea.Prettify(s)
}

func (s QueryContentResponseBodyMatches) GoString() string {
	return s.String()
}

func (s *QueryContentResponseBodyMatches) SetMatchList(v []*QueryContentResponseBodyMatchesMatchList) *QueryContentResponseBodyMatches {
	s.MatchList = v
	return s
}

type QueryContentResponseBodyMatchesMatchList struct {
	// The content that is used for full-text search. If you leave this parameter empty, only vector search is used. If you do not leave this parameter empty, two-way retrieval based on vector search and full-text search is used.
	//
	// >  You must specify at least one of the Content and Vector parameters.
	//
	// example:
	//
	// Cloud-native data warehouse AnalyticDB PostgreSQL Edition provides a simple, fast, and cost-effective PB-level cloud data warehouse solution.
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// The name of the document.
	//
	// >  You can call the [ListDocuments](https://help.aliyun.com/document_detail/2618453.html) operation to query a list of documents.
	//
	// example:
	//
	// my_doc.txt
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// The public URL of the query result image, valid for 2 hours
	//
	// example:
	//
	// https://xxx-cn-beijing.aliyuncs.com/image/test.png
	FileURL *string `json:"FileURL,omitempty" xml:"FileURL,omitempty"`
	// The unique ID of the vector data.
	//
	// example:
	//
	// doca-1234
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// Metadata during document loader loading.
	//
	// example:
	//
	// {"page_pos": 1}
	LoaderMetadata *string `json:"LoaderMetadata,omitempty" xml:"LoaderMetadata,omitempty"`
	// The metadata.
	Metadata map[string]*string `json:"Metadata,omitempty" xml:"Metadata,omitempty"`
	// Re-ranking score.
	//
	// example:
	//
	// 6.2345
	RerankScore *float64 `json:"RerankScore,omitempty" xml:"RerankScore,omitempty"`
	// Source of the retrieval results:
	//
	// - 1 indicates vector retrieval
	//
	// - 2 indicates full-text retrieval
	//
	// - 3 indicates dual-path recall
	//
	// example:
	//
	// 1
	RetrievalSource *int32 `json:"RetrievalSource,omitempty" xml:"RetrievalSource,omitempty"`
	// The similarity score of the data. It is related to the `l2, ip, or cosine` algorithm that is specified when you create an index.
	//
	// example:
	//
	// 0.12345
	Score *float64 `json:"Score,omitempty" xml:"Score,omitempty"`
	// The vector data. The length of the value must be the same as that of the Dimension parameter in the [CreateCollection](https://help.aliyun.com/document_detail/2401497.html) operation.
	//
	// >  If you leave this parameter empty, only full-text search results are returned.
	Vector *QueryContentResponseBodyMatchesMatchListVector `json:"Vector,omitempty" xml:"Vector,omitempty" type:"Struct"`
}

func (s QueryContentResponseBodyMatchesMatchList) String() string {
	return tea.Prettify(s)
}

func (s QueryContentResponseBodyMatchesMatchList) GoString() string {
	return s.String()
}

func (s *QueryContentResponseBodyMatchesMatchList) SetContent(v string) *QueryContentResponseBodyMatchesMatchList {
	s.Content = &v
	return s
}

func (s *QueryContentResponseBodyMatchesMatchList) SetFileName(v string) *QueryContentResponseBodyMatchesMatchList {
	s.FileName = &v
	return s
}

func (s *QueryContentResponseBodyMatchesMatchList) SetFileURL(v string) *QueryContentResponseBodyMatchesMatchList {
	s.FileURL = &v
	return s
}

func (s *QueryContentResponseBodyMatchesMatchList) SetId(v string) *QueryContentResponseBodyMatchesMatchList {
	s.Id = &v
	return s
}

func (s *QueryContentResponseBodyMatchesMatchList) SetLoaderMetadata(v string) *QueryContentResponseBodyMatchesMatchList {
	s.LoaderMetadata = &v
	return s
}

func (s *QueryContentResponseBodyMatchesMatchList) SetMetadata(v map[string]*string) *QueryContentResponseBodyMatchesMatchList {
	s.Metadata = v
	return s
}

func (s *QueryContentResponseBodyMatchesMatchList) SetRerankScore(v float64) *QueryContentResponseBodyMatchesMatchList {
	s.RerankScore = &v
	return s
}

func (s *QueryContentResponseBodyMatchesMatchList) SetRetrievalSource(v int32) *QueryContentResponseBodyMatchesMatchList {
	s.RetrievalSource = &v
	return s
}

func (s *QueryContentResponseBodyMatchesMatchList) SetScore(v float64) *QueryContentResponseBodyMatchesMatchList {
	s.Score = &v
	return s
}

func (s *QueryContentResponseBodyMatchesMatchList) SetVector(v *QueryContentResponseBodyMatchesMatchListVector) *QueryContentResponseBodyMatchesMatchList {
	s.Vector = v
	return s
}

type QueryContentResponseBodyMatchesMatchListVector struct {
	VectorList []*float64 `json:"VectorList,omitempty" xml:"VectorList,omitempty" type:"Repeated"`
}

func (s QueryContentResponseBodyMatchesMatchListVector) String() string {
	return tea.Prettify(s)
}

func (s QueryContentResponseBodyMatchesMatchListVector) GoString() string {
	return s.String()
}

func (s *QueryContentResponseBodyMatchesMatchListVector) SetVectorList(v []*float64) *QueryContentResponseBodyMatchesMatchListVector {
	s.VectorList = v
	return s
}

type QueryContentResponseBodyUsage struct {
	// The number of entries used for vectorization.
	//
	// > An entry refers to the number of processing items when performing vectorization on text or images. For example, processing one piece of text counts as 1 entry, while processing one image counts as 2 entries.
	//
	// example:
	//
	// 10
	EmbeddingEntries *string `json:"EmbeddingEntries,omitempty" xml:"EmbeddingEntries,omitempty"`
	// Number of tokens used for vectorization.
	//
	// > A token refers to the smallest unit into which the input text is divided; a token can be a word, a phrase, a punctuation mark, or a character, etc.
	//
	// example:
	//
	// 100
	EmbeddingTokens *string `json:"EmbeddingTokens,omitempty" xml:"EmbeddingTokens,omitempty"`
}

func (s QueryContentResponseBodyUsage) String() string {
	return tea.Prettify(s)
}

func (s QueryContentResponseBodyUsage) GoString() string {
	return s.String()
}

func (s *QueryContentResponseBodyUsage) SetEmbeddingEntries(v string) *QueryContentResponseBodyUsage {
	s.EmbeddingEntries = &v
	return s
}

func (s *QueryContentResponseBodyUsage) SetEmbeddingTokens(v string) *QueryContentResponseBodyUsage {
	s.EmbeddingTokens = &v
	return s
}

type QueryContentResponseBodyWindowMatches struct {
	WindowMatches []*QueryContentResponseBodyWindowMatchesWindowMatches `json:"windowMatches,omitempty" xml:"windowMatches,omitempty" type:"Repeated"`
}

func (s QueryContentResponseBodyWindowMatches) String() string {
	return tea.Prettify(s)
}

func (s QueryContentResponseBodyWindowMatches) GoString() string {
	return s.String()
}

func (s *QueryContentResponseBodyWindowMatches) SetWindowMatches(v []*QueryContentResponseBodyWindowMatchesWindowMatches) *QueryContentResponseBodyWindowMatches {
	s.WindowMatches = v
	return s
}

type QueryContentResponseBodyWindowMatchesWindowMatches struct {
	// List of individual top windowed matches.
	WindowMatch *QueryContentResponseBodyWindowMatchesWindowMatchesWindowMatch `json:"WindowMatch,omitempty" xml:"WindowMatch,omitempty" type:"Struct"`
}

func (s QueryContentResponseBodyWindowMatchesWindowMatches) String() string {
	return tea.Prettify(s)
}

func (s QueryContentResponseBodyWindowMatchesWindowMatches) GoString() string {
	return s.String()
}

func (s *QueryContentResponseBodyWindowMatchesWindowMatches) SetWindowMatch(v *QueryContentResponseBodyWindowMatchesWindowMatchesWindowMatch) *QueryContentResponseBodyWindowMatchesWindowMatches {
	s.WindowMatch = v
	return s
}

type QueryContentResponseBodyWindowMatchesWindowMatchesWindowMatch struct {
	WindowMatch []*QueryContentResponseBodyWindowMatchesWindowMatchesWindowMatchWindowMatch `json:"windowMatch,omitempty" xml:"windowMatch,omitempty" type:"Repeated"`
}

func (s QueryContentResponseBodyWindowMatchesWindowMatchesWindowMatch) String() string {
	return tea.Prettify(s)
}

func (s QueryContentResponseBodyWindowMatchesWindowMatchesWindowMatch) GoString() string {
	return s.String()
}

func (s *QueryContentResponseBodyWindowMatchesWindowMatchesWindowMatch) SetWindowMatch(v []*QueryContentResponseBodyWindowMatchesWindowMatchesWindowMatchWindowMatch) *QueryContentResponseBodyWindowMatchesWindowMatchesWindowMatch {
	s.WindowMatch = v
	return s
}

type QueryContentResponseBodyWindowMatchesWindowMatchesWindowMatchWindowMatch struct {
	// Text content.
	//
	// example:
	//
	// AnalyticDB for PostgreSQL is a cloud-native data warehouse service that provides large-scale parallel processing (MPP) capabilities for massive online data analysis.
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// File name.
	//
	// example:
	//
	// my_doc.txt
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// Unique ID of the vector data.
	//
	// example:
	//
	// doca-2345
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// Metadata information when the document loader was loaded.
	//
	// example:
	//
	// {"page_pos": 2}
	LoaderMetadata *string `json:"LoaderMetadata,omitempty" xml:"LoaderMetadata,omitempty"`
	// Metadata map.
	Metadata map[string]*string `json:"Metadata,omitempty" xml:"Metadata,omitempty"`
}

func (s QueryContentResponseBodyWindowMatchesWindowMatchesWindowMatchWindowMatch) String() string {
	return tea.Prettify(s)
}

func (s QueryContentResponseBodyWindowMatchesWindowMatchesWindowMatchWindowMatch) GoString() string {
	return s.String()
}

func (s *QueryContentResponseBodyWindowMatchesWindowMatchesWindowMatchWindowMatch) SetContent(v string) *QueryContentResponseBodyWindowMatchesWindowMatchesWindowMatchWindowMatch {
	s.Content = &v
	return s
}

func (s *QueryContentResponseBodyWindowMatchesWindowMatchesWindowMatchWindowMatch) SetFileName(v string) *QueryContentResponseBodyWindowMatchesWindowMatchesWindowMatchWindowMatch {
	s.FileName = &v
	return s
}

func (s *QueryContentResponseBodyWindowMatchesWindowMatchesWindowMatchWindowMatch) SetId(v string) *QueryContentResponseBodyWindowMatchesWindowMatchesWindowMatchWindowMatch {
	s.Id = &v
	return s
}

func (s *QueryContentResponseBodyWindowMatchesWindowMatchesWindowMatchWindowMatch) SetLoaderMetadata(v string) *QueryContentResponseBodyWindowMatchesWindowMatchesWindowMatchWindowMatch {
	s.LoaderMetadata = &v
	return s
}

func (s *QueryContentResponseBodyWindowMatchesWindowMatchesWindowMatchWindowMatch) SetMetadata(v map[string]*string) *QueryContentResponseBodyWindowMatchesWindowMatchesWindowMatchWindowMatch {
	s.Metadata = v
	return s
}

type QueryContentResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryContentResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryContentResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryContentResponse) GoString() string {
	return s.String()
}

func (s *QueryContentResponse) SetHeaders(v map[string]*string) *QueryContentResponse {
	s.Headers = v
	return s
}

func (s *QueryContentResponse) SetStatusCode(v int32) *QueryContentResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryContentResponse) SetBody(v *QueryContentResponseBody) *QueryContentResponse {
	s.Body = v
	return s
}

type RebalanceDBInstanceRequest struct {
	// The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must make sure that it is unique among different requests.
	//
	// The token can be up to 64 characters in length and can contain letters, digits, hyphens (-), and underscores (_).
	//
	// For more information, see [How to ensure idempotence](https://help.aliyun.com/document_detail/134212.html).
	//
	// example:
	//
	// 0c593ea1-3bea-11e9-b96b-88**********
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// The instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp***************
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
}

func (s RebalanceDBInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s RebalanceDBInstanceRequest) GoString() string {
	return s.String()
}

func (s *RebalanceDBInstanceRequest) SetClientToken(v string) *RebalanceDBInstanceRequest {
	s.ClientToken = &v
	return s
}

func (s *RebalanceDBInstanceRequest) SetDBInstanceId(v string) *RebalanceDBInstanceRequest {
	s.DBInstanceId = &v
	return s
}

type RebalanceDBInstanceResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// 5414A4E5-4C36-4461-95FC-************
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RebalanceDBInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RebalanceDBInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *RebalanceDBInstanceResponseBody) SetRequestId(v string) *RebalanceDBInstanceResponseBody {
	s.RequestId = &v
	return s
}

type RebalanceDBInstanceResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RebalanceDBInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RebalanceDBInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s RebalanceDBInstanceResponse) GoString() string {
	return s.String()
}

func (s *RebalanceDBInstanceResponse) SetHeaders(v map[string]*string) *RebalanceDBInstanceResponse {
	s.Headers = v
	return s
}

func (s *RebalanceDBInstanceResponse) SetStatusCode(v int32) *RebalanceDBInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *RebalanceDBInstanceResponse) SetBody(v *RebalanceDBInstanceResponseBody) *RebalanceDBInstanceResponse {
	s.Body = v
	return s
}

type ReleaseInstancePublicConnectionRequest struct {
	// The type of the endpoint. Default value: primary. Valid values:
	//
	// 	- **primary**: primary endpoint.
	//
	// 	- **cluster**: cluster endpoint. This type of endpoints can be created only for instances that have multiple coordinator nodes.
	//
	// example:
	//
	// Intranet
	AddressType *string `json:"AddressType,omitempty" xml:"AddressType,omitempty"`
	// The public endpoint of the instance.
	//
	// You can log on to the AnalyticDB for PostgreSQL console and go to the **Basic Information*	- page of the instance to view the **public endpoint*	- in the **Database Connection*	- section.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp12ga6v69h86****.gpdb.rds.aliyuncs.com
	CurrentConnectionString *string `json:"CurrentConnectionString,omitempty" xml:"CurrentConnectionString,omitempty"`
	// The ID of the instance.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the details of all AnalyticDB for PostgreSQL instances in a specific region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
}

func (s ReleaseInstancePublicConnectionRequest) String() string {
	return tea.Prettify(s)
}

func (s ReleaseInstancePublicConnectionRequest) GoString() string {
	return s.String()
}

func (s *ReleaseInstancePublicConnectionRequest) SetAddressType(v string) *ReleaseInstancePublicConnectionRequest {
	s.AddressType = &v
	return s
}

func (s *ReleaseInstancePublicConnectionRequest) SetCurrentConnectionString(v string) *ReleaseInstancePublicConnectionRequest {
	s.CurrentConnectionString = &v
	return s
}

func (s *ReleaseInstancePublicConnectionRequest) SetDBInstanceId(v string) *ReleaseInstancePublicConnectionRequest {
	s.DBInstanceId = &v
	return s
}

type ReleaseInstancePublicConnectionResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// 9CEF7037-4158-4A65-BEC7-2A**********
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ReleaseInstancePublicConnectionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ReleaseInstancePublicConnectionResponseBody) GoString() string {
	return s.String()
}

func (s *ReleaseInstancePublicConnectionResponseBody) SetRequestId(v string) *ReleaseInstancePublicConnectionResponseBody {
	s.RequestId = &v
	return s
}

type ReleaseInstancePublicConnectionResponse struct {
	Headers    map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ReleaseInstancePublicConnectionResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ReleaseInstancePublicConnectionResponse) String() string {
	return tea.Prettify(s)
}

func (s ReleaseInstancePublicConnectionResponse) GoString() string {
	return s.String()
}

func (s *ReleaseInstancePublicConnectionResponse) SetHeaders(v map[string]*string) *ReleaseInstancePublicConnectionResponse {
	s.Headers = v
	return s
}

func (s *ReleaseInstancePublicConnectionResponse) SetStatusCode(v int32) *ReleaseInstancePublicConnectionResponse {
	s.StatusCode = &v
	return s
}

func (s *ReleaseInstancePublicConnectionResponse) SetBody(v *ReleaseInstancePublicConnectionResponseBody) *ReleaseInstancePublicConnectionResponse {
	s.Body = v
	return s
}

type RerankRequest struct {
	// Instance ID.
	//
	// > You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) API to view details of all AnalyticDB PostgreSQL instances in the target region, including the instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// List of documents to be re-ordered.
	Documents []*string `json:"Documents,omitempty" xml:"Documents,omitempty" type:"Repeated"`
	// Maximum number of chunks allowed when the text exceeds the model window:
	//
	// - bge-reranker-v2-m3: default value is 10.
	//
	// - bge-reranker-v2-minicpm-layerwise: default value is 5:
	//
	// > Example of splitting
	//
	// > - If using the bge-reranker-v2-minicpm-layerwise model, the maximum single inference window is 2048 tokens. If the query is 48 tokens and the content of a single document parameter is 9000 tokens, it will be divided as follows: 1-2000 for the first, 2001-4000 for the second, and so on. If the number of splits exceeds MaxChunksPerDoc, the remaining sentences will be discarded.
	//
	// example:
	//
	// 10
	MaxChunksPerDoc *int32 `json:"MaxChunksPerDoc,omitempty" xml:"MaxChunksPerDoc,omitempty"`
	// Rerank model, currently supports:
	//
	// - bge-reranker-v2-m3: (default), better performance, supports 8192 tokens per inference, if exceeded, it will be split, which may reduce the effect.
	//
	// - bge-reranker-v2-minicpm-layerwise: better performance than v2-m3, supports 2048 tokens per inference, if exceeded, it will be split, which may reduce the effect.
	//
	// example:
	//
	// bge-reranker-v2-m3
	Model   *string `json:"Model,omitempty" xml:"Model,omitempty"`
	OwnerId *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// Query statement for Rerank.
	//
	// example:
	//
	// What is ADBPG?
	Query *string `json:"Query,omitempty" xml:"Query,omitempty"`
	// Region ID where the instance is located.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// If set to false, does not return the Documents text, only returns the index of the document order and the rerank score.
	//
	// example:
	//
	// false
	ReturnDocuments *bool `json:"ReturnDocuments,omitempty" xml:"ReturnDocuments,omitempty"`
	// Number of most relevant documents to return.
	//
	// example:
	//
	// 3
	TopK *int32 `json:"TopK,omitempty" xml:"TopK,omitempty"`
}

func (s RerankRequest) String() string {
	return tea.Prettify(s)
}

func (s RerankRequest) GoString() string {
	return s.String()
}

func (s *RerankRequest) SetDBInstanceId(v string) *RerankRequest {
	s.DBInstanceId = &v
	return s
}

func (s *RerankRequest) SetDocuments(v []*string) *RerankRequest {
	s.Documents = v
	return s
}

func (s *RerankRequest) SetMaxChunksPerDoc(v int32) *RerankRequest {
	s.MaxChunksPerDoc = &v
	return s
}

func (s *RerankRequest) SetModel(v string) *RerankRequest {
	s.Model = &v
	return s
}

func (s *RerankRequest) SetOwnerId(v int64) *RerankRequest {
	s.OwnerId = &v
	return s
}

func (s *RerankRequest) SetQuery(v string) *RerankRequest {
	s.Query = &v
	return s
}

func (s *RerankRequest) SetRegionId(v string) *RerankRequest {
	s.RegionId = &v
	return s
}

func (s *RerankRequest) SetReturnDocuments(v bool) *RerankRequest {
	s.ReturnDocuments = &v
	return s
}

func (s *RerankRequest) SetTopK(v int32) *RerankRequest {
	s.TopK = &v
	return s
}

type RerankShrinkRequest struct {
	// Instance ID.
	//
	// > You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) API to view details of all AnalyticDB PostgreSQL instances in the target region, including the instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// List of documents to be re-ordered.
	DocumentsShrink *string `json:"Documents,omitempty" xml:"Documents,omitempty"`
	// Maximum number of chunks allowed when the text exceeds the model window:
	//
	// - bge-reranker-v2-m3: default value is 10.
	//
	// - bge-reranker-v2-minicpm-layerwise: default value is 5:
	//
	// > Example of splitting
	//
	// > - If using the bge-reranker-v2-minicpm-layerwise model, the maximum single inference window is 2048 tokens. If the query is 48 tokens and the content of a single document parameter is 9000 tokens, it will be divided as follows: 1-2000 for the first, 2001-4000 for the second, and so on. If the number of splits exceeds MaxChunksPerDoc, the remaining sentences will be discarded.
	//
	// example:
	//
	// 10
	MaxChunksPerDoc *int32 `json:"MaxChunksPerDoc,omitempty" xml:"MaxChunksPerDoc,omitempty"`
	// Rerank model, currently supports:
	//
	// - bge-reranker-v2-m3: (default), better performance, supports 8192 tokens per inference, if exceeded, it will be split, which may reduce the effect.
	//
	// - bge-reranker-v2-minicpm-layerwise: better performance than v2-m3, supports 2048 tokens per inference, if exceeded, it will be split, which may reduce the effect.
	//
	// example:
	//
	// bge-reranker-v2-m3
	Model   *string `json:"Model,omitempty" xml:"Model,omitempty"`
	OwnerId *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// Query statement for Rerank.
	//
	// example:
	//
	// What is ADBPG?
	Query *string `json:"Query,omitempty" xml:"Query,omitempty"`
	// Region ID where the instance is located.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// If set to false, does not return the Documents text, only returns the index of the document order and the rerank score.
	//
	// example:
	//
	// false
	ReturnDocuments *bool `json:"ReturnDocuments,omitempty" xml:"ReturnDocuments,omitempty"`
	// Number of most relevant documents to return.
	//
	// example:
	//
	// 3
	TopK *int32 `json:"TopK,omitempty" xml:"TopK,omitempty"`
}

func (s RerankShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s RerankShrinkRequest) GoString() string {
	return s.String()
}

func (s *RerankShrinkRequest) SetDBInstanceId(v string) *RerankShrinkRequest {
	s.DBInstanceId = &v
	return s
}

func (s *RerankShrinkRequest) SetDocumentsShrink(v string) *RerankShrinkRequest {
	s.DocumentsShrink = &v
	return s
}

func (s *RerankShrinkRequest) SetMaxChunksPerDoc(v int32) *RerankShrinkRequest {
	s.MaxChunksPerDoc = &v
	return s
}

func (s *RerankShrinkRequest) SetModel(v string) *RerankShrinkRequest {
	s.Model = &v
	return s
}

func (s *RerankShrinkRequest) SetOwnerId(v int64) *RerankShrinkRequest {
	s.OwnerId = &v
	return s
}

func (s *RerankShrinkRequest) SetQuery(v string) *RerankShrinkRequest {
	s.Query = &v
	return s
}

func (s *RerankShrinkRequest) SetRegionId(v string) *RerankShrinkRequest {
	s.RegionId = &v
	return s
}

func (s *RerankShrinkRequest) SetReturnDocuments(v bool) *RerankShrinkRequest {
	s.ReturnDocuments = &v
	return s
}

func (s *RerankShrinkRequest) SetTopK(v int32) *RerankShrinkRequest {
	s.TopK = &v
	return s
}

type RerankResponseBody struct {
	// Detailed information returned by the interface.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Rerank results.
	Results *RerankResponseBodyResults `json:"Results,omitempty" xml:"Results,omitempty" type:"Struct"`
	// API execution status, value description:
	//
	// - **success**: Execution succeeded.
	//
	// - **fail**: Execution failed.
	//
	// example:
	//
	// success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// Number of consumed tokens.
	//
	// example:
	//
	// 100
	Tokens *int32 `json:"Tokens,omitempty" xml:"Tokens,omitempty"`
}

func (s RerankResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RerankResponseBody) GoString() string {
	return s.String()
}

func (s *RerankResponseBody) SetMessage(v string) *RerankResponseBody {
	s.Message = &v
	return s
}

func (s *RerankResponseBody) SetRequestId(v string) *RerankResponseBody {
	s.RequestId = &v
	return s
}

func (s *RerankResponseBody) SetResults(v *RerankResponseBodyResults) *RerankResponseBody {
	s.Results = v
	return s
}

func (s *RerankResponseBody) SetStatus(v string) *RerankResponseBody {
	s.Status = &v
	return s
}

func (s *RerankResponseBody) SetTokens(v int32) *RerankResponseBody {
	s.Tokens = &v
	return s
}

type RerankResponseBodyResults struct {
	Results []*RerankResponseBodyResultsResults `json:"Results,omitempty" xml:"Results,omitempty" type:"Repeated"`
}

func (s RerankResponseBodyResults) String() string {
	return tea.Prettify(s)
}

func (s RerankResponseBodyResults) GoString() string {
	return s.String()
}

func (s *RerankResponseBodyResults) SetResults(v []*RerankResponseBodyResultsResults) *RerankResponseBodyResults {
	s.Results = v
	return s
}

type RerankResponseBodyResultsResults struct {
	// Re-ordered document information.
	//
	// example:
	//
	// ADBPG is the OLAP database of Alibaba Cloud.
	Document *string `json:"Document,omitempty" xml:"Document,omitempty"`
	// Index of this document in the request parameter Documents, starting from 0.
	//
	// example:
	//
	// 1
	Index *int32 `json:"Index,omitempty" xml:"Index,omitempty"`
	// Rerank similarity score.
	//
	// example:
	//
	// 2.31412
	RelevanceScore *float32 `json:"RelevanceScore,omitempty" xml:"RelevanceScore,omitempty"`
}

func (s RerankResponseBodyResultsResults) String() string {
	return tea.Prettify(s)
}

func (s RerankResponseBodyResultsResults) GoString() string {
	return s.String()
}

func (s *RerankResponseBodyResultsResults) SetDocument(v string) *RerankResponseBodyResultsResults {
	s.Document = &v
	return s
}

func (s *RerankResponseBodyResultsResults) SetIndex(v int32) *RerankResponseBodyResultsResults {
	s.Index = &v
	return s
}

func (s *RerankResponseBodyResultsResults) SetRelevanceScore(v float32) *RerankResponseBodyResultsResults {
	s.RelevanceScore = &v
	return s
}

type RerankResponse struct {
	Headers    map[string]*string  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RerankResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RerankResponse) String() string {
	return tea.Prettify(s)
}

func (s RerankResponse) GoString() string {
	return s.String()
}

func (s *RerankResponse) SetHeaders(v map[string]*string) *RerankResponse {
	s.Headers = v
	return s
}

func (s *RerankResponse) SetStatusCode(v int32) *RerankResponse {
	s.StatusCode = &v
	return s
}

func (s *RerankResponse) SetBody(v *RerankResponseBody) *RerankResponse {
	s.Body = v
	return s
}

type ResetAccountPasswordRequest struct {
	// The ID of the instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// testaccount_1
	AccountName *string `json:"AccountName,omitempty" xml:"AccountName,omitempty"`
	// The name of the account.
	//
	// This parameter is required.
	//
	// example:
	//
	// Testaccount_1
	AccountPassword *string `json:"AccountPassword,omitempty" xml:"AccountPassword,omitempty"`
	// Before you call this operation, make sure that the following requirements are met:
	//
	// 	- The instance is in the running state.
	//
	// 	- The instance is not locked.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-t4nf48vf15713****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
}

func (s ResetAccountPasswordRequest) String() string {
	return tea.Prettify(s)
}

func (s ResetAccountPasswordRequest) GoString() string {
	return s.String()
}

func (s *ResetAccountPasswordRequest) SetAccountName(v string) *ResetAccountPasswordRequest {
	s.AccountName = &v
	return s
}

func (s *ResetAccountPasswordRequest) SetAccountPassword(v string) *ResetAccountPasswordRequest {
	s.AccountPassword = &v
	return s
}

func (s *ResetAccountPasswordRequest) SetDBInstanceId(v string) *ResetAccountPasswordRequest {
	s.DBInstanceId = &v
	return s
}

type ResetAccountPasswordResponseBody struct {
	// The new password for the account. The password must be 8 to 32 characters in length and contain at least three of the following character types: uppercase letters, lowercase letters, digits, and special characters. Special characters include `! @ # $ % ^ & 	- ( ) _ + - =`
	//
	// example:
	//
	// 187C80FC-75C4-477C-BBF2-A368A36D041C
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ResetAccountPasswordResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ResetAccountPasswordResponseBody) GoString() string {
	return s.String()
}

func (s *ResetAccountPasswordResponseBody) SetRequestId(v string) *ResetAccountPasswordResponseBody {
	s.RequestId = &v
	return s
}

type ResetAccountPasswordResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ResetAccountPasswordResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ResetAccountPasswordResponse) String() string {
	return tea.Prettify(s)
}

func (s ResetAccountPasswordResponse) GoString() string {
	return s.String()
}

func (s *ResetAccountPasswordResponse) SetHeaders(v map[string]*string) *ResetAccountPasswordResponse {
	s.Headers = v
	return s
}

func (s *ResetAccountPasswordResponse) SetStatusCode(v int32) *ResetAccountPasswordResponse {
	s.StatusCode = &v
	return s
}

func (s *ResetAccountPasswordResponse) SetBody(v *ResetAccountPasswordResponseBody) *ResetAccountPasswordResponse {
	s.Body = v
	return s
}

type ResetIMVMonitorDataRequest struct {
	// The instance ID.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp152460513z****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The name of the database.
	//
	// This parameter is required.
	//
	// example:
	//
	// testdb
	Database *string `json:"Database,omitempty" xml:"Database,omitempty"`
}

func (s ResetIMVMonitorDataRequest) String() string {
	return tea.Prettify(s)
}

func (s ResetIMVMonitorDataRequest) GoString() string {
	return s.String()
}

func (s *ResetIMVMonitorDataRequest) SetDBInstanceId(v string) *ResetIMVMonitorDataRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ResetIMVMonitorDataRequest) SetDatabase(v string) *ResetIMVMonitorDataRequest {
	s.Database = &v
	return s
}

type ResetIMVMonitorDataResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **false**
	//
	// 	- **true**
	//
	// example:
	//
	// true
	Status *bool `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ResetIMVMonitorDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ResetIMVMonitorDataResponseBody) GoString() string {
	return s.String()
}

func (s *ResetIMVMonitorDataResponseBody) SetRequestId(v string) *ResetIMVMonitorDataResponseBody {
	s.RequestId = &v
	return s
}

func (s *ResetIMVMonitorDataResponseBody) SetStatus(v bool) *ResetIMVMonitorDataResponseBody {
	s.Status = &v
	return s
}

type ResetIMVMonitorDataResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ResetIMVMonitorDataResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ResetIMVMonitorDataResponse) String() string {
	return tea.Prettify(s)
}

func (s ResetIMVMonitorDataResponse) GoString() string {
	return s.String()
}

func (s *ResetIMVMonitorDataResponse) SetHeaders(v map[string]*string) *ResetIMVMonitorDataResponse {
	s.Headers = v
	return s
}

func (s *ResetIMVMonitorDataResponse) SetStatusCode(v int32) *ResetIMVMonitorDataResponse {
	s.StatusCode = &v
	return s
}

func (s *ResetIMVMonitorDataResponse) SetBody(v *ResetIMVMonitorDataResponseBody) *ResetIMVMonitorDataResponse {
	s.Body = v
	return s
}

type RestartDBInstanceRequest struct {
	// The client token that is used to ensure the idempotence of the request. For more information, see [How to ensure idempotence](https://help.aliyun.com/document_detail/327176.html).
	//
	// example:
	//
	// 0c593ea1-3bea-11e9-b96b-88**********
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// The ID of the instance.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the details of all AnalyticDB for PostgreSQL instances in a specific region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
}

func (s RestartDBInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s RestartDBInstanceRequest) GoString() string {
	return s.String()
}

func (s *RestartDBInstanceRequest) SetClientToken(v string) *RestartDBInstanceRequest {
	s.ClientToken = &v
	return s
}

func (s *RestartDBInstanceRequest) SetDBInstanceId(v string) *RestartDBInstanceRequest {
	s.DBInstanceId = &v
	return s
}

type RestartDBInstanceResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// A7356493-7141-4393-8951-CDA8AB5D67EC
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RestartDBInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RestartDBInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *RestartDBInstanceResponseBody) SetRequestId(v string) *RestartDBInstanceResponseBody {
	s.RequestId = &v
	return s
}

type RestartDBInstanceResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RestartDBInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RestartDBInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s RestartDBInstanceResponse) GoString() string {
	return s.String()
}

func (s *RestartDBInstanceResponse) SetHeaders(v map[string]*string) *RestartDBInstanceResponse {
	s.Headers = v
	return s
}

func (s *RestartDBInstanceResponse) SetStatusCode(v int32) *RestartDBInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *RestartDBInstanceResponse) SetBody(v *RestartDBInstanceResponseBody) *RestartDBInstanceResponse {
	s.Body = v
	return s
}

type ResumeDataRedistributeRequest struct {
	// The instance ID.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s ResumeDataRedistributeRequest) String() string {
	return tea.Prettify(s)
}

func (s ResumeDataRedistributeRequest) GoString() string {
	return s.String()
}

func (s *ResumeDataRedistributeRequest) SetDBInstanceId(v string) *ResumeDataRedistributeRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ResumeDataRedistributeRequest) SetOwnerId(v int64) *ResumeDataRedistributeRequest {
	s.OwnerId = &v
	return s
}

type ResumeDataRedistributeResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ResumeDataRedistributeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ResumeDataRedistributeResponseBody) GoString() string {
	return s.String()
}

func (s *ResumeDataRedistributeResponseBody) SetRequestId(v string) *ResumeDataRedistributeResponseBody {
	s.RequestId = &v
	return s
}

type ResumeDataRedistributeResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ResumeDataRedistributeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ResumeDataRedistributeResponse) String() string {
	return tea.Prettify(s)
}

func (s ResumeDataRedistributeResponse) GoString() string {
	return s.String()
}

func (s *ResumeDataRedistributeResponse) SetHeaders(v map[string]*string) *ResumeDataRedistributeResponse {
	s.Headers = v
	return s
}

func (s *ResumeDataRedistributeResponse) SetStatusCode(v int32) *ResumeDataRedistributeResponse {
	s.StatusCode = &v
	return s
}

func (s *ResumeDataRedistributeResponse) SetBody(v *ResumeDataRedistributeResponseBody) *ResumeDataRedistributeResponse {
	s.Body = v
	return s
}

type ResumeInstanceRequest struct {
	// The ID of the instance.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the details of all AnalyticDB for PostgreSQL instances in a specific region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s ResumeInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s ResumeInstanceRequest) GoString() string {
	return s.String()
}

func (s *ResumeInstanceRequest) SetDBInstanceId(v string) *ResumeInstanceRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ResumeInstanceRequest) SetOwnerId(v int64) *ResumeInstanceRequest {
	s.OwnerId = &v
	return s
}

type ResumeInstanceResponseBody struct {
	// The ID of the instance.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The error message returned.
	//
	// This parameter is returned only if **false*	- is returned for the **Status*	- parameter.
	//
	// example:
	//
	// ******
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 34b32a0a-08ef-4a87-b6be-cdd9********
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **false**: The request failed.
	//
	// 	- **true**: The request was successful.
	//
	// example:
	//
	// true
	Status *bool `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ResumeInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ResumeInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *ResumeInstanceResponseBody) SetDBInstanceId(v string) *ResumeInstanceResponseBody {
	s.DBInstanceId = &v
	return s
}

func (s *ResumeInstanceResponseBody) SetErrorMessage(v string) *ResumeInstanceResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *ResumeInstanceResponseBody) SetRequestId(v string) *ResumeInstanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *ResumeInstanceResponseBody) SetStatus(v bool) *ResumeInstanceResponseBody {
	s.Status = &v
	return s
}

type ResumeInstanceResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ResumeInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ResumeInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s ResumeInstanceResponse) GoString() string {
	return s.String()
}

func (s *ResumeInstanceResponse) SetHeaders(v map[string]*string) *ResumeInstanceResponse {
	s.Headers = v
	return s
}

func (s *ResumeInstanceResponse) SetStatusCode(v int32) *ResumeInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *ResumeInstanceResponse) SetBody(v *ResumeInstanceResponseBody) *ResumeInstanceResponse {
	s.Body = v
	return s
}

type SetDBInstancePlanStatusRequest struct {
	// The ID of the instance.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the details of all AnalyticDB for PostgreSQL instances in a specific region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The ID of the plan.
	//
	// >  You can call the [DescribeDBInstancePlans](https://help.aliyun.com/document_detail/449398.html) operation to query the details of plans, including plan IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1234
	PlanId *string `json:"PlanId,omitempty" xml:"PlanId,omitempty"`
	// Specifies whether to enable or disable the plan. Valid values:
	//
	// 	- **disable**: disables the plan.
	//
	// 	- **enable**: enables the plan.
	//
	// This parameter is required.
	//
	// example:
	//
	// disable
	PlanStatus *string `json:"PlanStatus,omitempty" xml:"PlanStatus,omitempty"`
}

func (s SetDBInstancePlanStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s SetDBInstancePlanStatusRequest) GoString() string {
	return s.String()
}

func (s *SetDBInstancePlanStatusRequest) SetDBInstanceId(v string) *SetDBInstancePlanStatusRequest {
	s.DBInstanceId = &v
	return s
}

func (s *SetDBInstancePlanStatusRequest) SetOwnerId(v int64) *SetDBInstancePlanStatusRequest {
	s.OwnerId = &v
	return s
}

func (s *SetDBInstancePlanStatusRequest) SetPlanId(v string) *SetDBInstancePlanStatusRequest {
	s.PlanId = &v
	return s
}

func (s *SetDBInstancePlanStatusRequest) SetPlanStatus(v string) *SetDBInstancePlanStatusRequest {
	s.PlanStatus = &v
	return s
}

type SetDBInstancePlanStatusResponseBody struct {
	// The error message returned.
	//
	// This parameter is returned only when the operation fails.
	//
	// example:
	//
	// ****
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// The ID of the plan.
	//
	// example:
	//
	// 1234
	PlanId *string `json:"PlanId,omitempty" xml:"PlanId,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 34b32a0a-08ef-4a87-b6be-cdd988888888
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The state of the operation.
	//
	// If the operation is successful, **success*	- is returned. If the operation fails, this parameter is not returned.
	//
	// example:
	//
	// success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s SetDBInstancePlanStatusResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetDBInstancePlanStatusResponseBody) GoString() string {
	return s.String()
}

func (s *SetDBInstancePlanStatusResponseBody) SetErrorMessage(v string) *SetDBInstancePlanStatusResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *SetDBInstancePlanStatusResponseBody) SetPlanId(v string) *SetDBInstancePlanStatusResponseBody {
	s.PlanId = &v
	return s
}

func (s *SetDBInstancePlanStatusResponseBody) SetRequestId(v string) *SetDBInstancePlanStatusResponseBody {
	s.RequestId = &v
	return s
}

func (s *SetDBInstancePlanStatusResponseBody) SetStatus(v string) *SetDBInstancePlanStatusResponseBody {
	s.Status = &v
	return s
}

type SetDBInstancePlanStatusResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SetDBInstancePlanStatusResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SetDBInstancePlanStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s SetDBInstancePlanStatusResponse) GoString() string {
	return s.String()
}

func (s *SetDBInstancePlanStatusResponse) SetHeaders(v map[string]*string) *SetDBInstancePlanStatusResponse {
	s.Headers = v
	return s
}

func (s *SetDBInstancePlanStatusResponse) SetStatusCode(v int32) *SetDBInstancePlanStatusResponse {
	s.StatusCode = &v
	return s
}

func (s *SetDBInstancePlanStatusResponse) SetBody(v *SetDBInstancePlanStatusResponseBody) *SetDBInstancePlanStatusResponse {
	s.Body = v
	return s
}

type SetDataShareInstanceRequest struct {
	// The ID of the AnalyticDB for PostgreSQL instance in Serverless mode.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the details of all AnalyticDB for PostgreSQL instances in a specific region, including instance IDs.
	//
	// This parameter is required.
	InstanceList []*string `json:"InstanceList,omitempty" xml:"InstanceList,omitempty" type:"Repeated"`
	// Specifies whether to enable or disable data sharing. Valid values:
	//
	// 	- **add**: enables data sharing.
	//
	// 	- **remove**: disables data sharing.
	//
	// This parameter is required.
	//
	// example:
	//
	// add
	OperationType *string `json:"OperationType,omitempty" xml:"OperationType,omitempty"`
	OwnerId       *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The ID of the region.
	//
	// >  You can call the [DescribeRegions](https://help.aliyun.com/document_detail/86912.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s SetDataShareInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s SetDataShareInstanceRequest) GoString() string {
	return s.String()
}

func (s *SetDataShareInstanceRequest) SetInstanceList(v []*string) *SetDataShareInstanceRequest {
	s.InstanceList = v
	return s
}

func (s *SetDataShareInstanceRequest) SetOperationType(v string) *SetDataShareInstanceRequest {
	s.OperationType = &v
	return s
}

func (s *SetDataShareInstanceRequest) SetOwnerId(v int64) *SetDataShareInstanceRequest {
	s.OwnerId = &v
	return s
}

func (s *SetDataShareInstanceRequest) SetRegionId(v string) *SetDataShareInstanceRequest {
	s.RegionId = &v
	return s
}

type SetDataShareInstanceShrinkRequest struct {
	// The ID of the AnalyticDB for PostgreSQL instance in Serverless mode.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the details of all AnalyticDB for PostgreSQL instances in a specific region, including instance IDs.
	//
	// This parameter is required.
	InstanceListShrink *string `json:"InstanceList,omitempty" xml:"InstanceList,omitempty"`
	// Specifies whether to enable or disable data sharing. Valid values:
	//
	// 	- **add**: enables data sharing.
	//
	// 	- **remove**: disables data sharing.
	//
	// This parameter is required.
	//
	// example:
	//
	// add
	OperationType *string `json:"OperationType,omitempty" xml:"OperationType,omitempty"`
	OwnerId       *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The ID of the region.
	//
	// >  You can call the [DescribeRegions](https://help.aliyun.com/document_detail/86912.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s SetDataShareInstanceShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s SetDataShareInstanceShrinkRequest) GoString() string {
	return s.String()
}

func (s *SetDataShareInstanceShrinkRequest) SetInstanceListShrink(v string) *SetDataShareInstanceShrinkRequest {
	s.InstanceListShrink = &v
	return s
}

func (s *SetDataShareInstanceShrinkRequest) SetOperationType(v string) *SetDataShareInstanceShrinkRequest {
	s.OperationType = &v
	return s
}

func (s *SetDataShareInstanceShrinkRequest) SetOwnerId(v int64) *SetDataShareInstanceShrinkRequest {
	s.OwnerId = &v
	return s
}

func (s *SetDataShareInstanceShrinkRequest) SetRegionId(v string) *SetDataShareInstanceShrinkRequest {
	s.RegionId = &v
	return s
}

type SetDataShareInstanceResponseBody struct {
	// The error message returned if the operation fails.
	//
	// example:
	//
	// error message
	ErrMessage *string `json:"ErrMessage,omitempty" xml:"ErrMessage,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// B4CAF581-2AC7-41AD-8940-D5**********
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The state of the operation. Valid values:
	//
	// 	- **success**: The operation is successful.
	//
	// 	- **failed**: The operation fails.
	//
	// example:
	//
	// success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s SetDataShareInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetDataShareInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *SetDataShareInstanceResponseBody) SetErrMessage(v string) *SetDataShareInstanceResponseBody {
	s.ErrMessage = &v
	return s
}

func (s *SetDataShareInstanceResponseBody) SetRequestId(v string) *SetDataShareInstanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *SetDataShareInstanceResponseBody) SetStatus(v string) *SetDataShareInstanceResponseBody {
	s.Status = &v
	return s
}

type SetDataShareInstanceResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SetDataShareInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SetDataShareInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s SetDataShareInstanceResponse) GoString() string {
	return s.String()
}

func (s *SetDataShareInstanceResponse) SetHeaders(v map[string]*string) *SetDataShareInstanceResponse {
	s.Headers = v
	return s
}

func (s *SetDataShareInstanceResponse) SetStatusCode(v int32) *SetDataShareInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *SetDataShareInstanceResponse) SetBody(v *SetDataShareInstanceResponseBody) *SetDataShareInstanceResponse {
	s.Body = v
	return s
}

type SwitchDBInstanceNetTypeRequest struct {
	// The prefix of the custom endpoint.
	//
	// 	- The prefix can contain lowercase letters, digits, and hyphens (-) and must start with a lowercase letter.
	//
	// 	- The prefix can be up to 30 characters in length.
	//
	// This parameter is required.
	//
	// example:
	//
	// test1234
	ConnectionStringPrefix *string `json:"ConnectionStringPrefix,omitempty" xml:"ConnectionStringPrefix,omitempty"`
	// The instance ID.
	//
	// > You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/2361776.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// rm-uf6wjk5xxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The port number.
	//
	// This parameter is required.
	//
	// example:
	//
	// 3306
	Port *string `json:"Port,omitempty" xml:"Port,omitempty"`
}

func (s SwitchDBInstanceNetTypeRequest) String() string {
	return tea.Prettify(s)
}

func (s SwitchDBInstanceNetTypeRequest) GoString() string {
	return s.String()
}

func (s *SwitchDBInstanceNetTypeRequest) SetConnectionStringPrefix(v string) *SwitchDBInstanceNetTypeRequest {
	s.ConnectionStringPrefix = &v
	return s
}

func (s *SwitchDBInstanceNetTypeRequest) SetDBInstanceId(v string) *SwitchDBInstanceNetTypeRequest {
	s.DBInstanceId = &v
	return s
}

func (s *SwitchDBInstanceNetTypeRequest) SetPort(v string) *SwitchDBInstanceNetTypeRequest {
	s.Port = &v
	return s
}

type SwitchDBInstanceNetTypeResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// FA67B751-2A2D-470C-850B-D6B93699D35C
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SwitchDBInstanceNetTypeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SwitchDBInstanceNetTypeResponseBody) GoString() string {
	return s.String()
}

func (s *SwitchDBInstanceNetTypeResponseBody) SetRequestId(v string) *SwitchDBInstanceNetTypeResponseBody {
	s.RequestId = &v
	return s
}

type SwitchDBInstanceNetTypeResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SwitchDBInstanceNetTypeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SwitchDBInstanceNetTypeResponse) String() string {
	return tea.Prettify(s)
}

func (s SwitchDBInstanceNetTypeResponse) GoString() string {
	return s.String()
}

func (s *SwitchDBInstanceNetTypeResponse) SetHeaders(v map[string]*string) *SwitchDBInstanceNetTypeResponse {
	s.Headers = v
	return s
}

func (s *SwitchDBInstanceNetTypeResponse) SetStatusCode(v int32) *SwitchDBInstanceNetTypeResponse {
	s.StatusCode = &v
	return s
}

func (s *SwitchDBInstanceNetTypeResponse) SetBody(v *SwitchDBInstanceNetTypeResponseBody) *SwitchDBInstanceNetTypeResponse {
	s.Body = v
	return s
}

type TagResourcesRequest struct {
	OwnerAccount *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The ID of the region. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/86912.html) operation to query region IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of an instance. Valid values of N: 1 to 50.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxxxxx
	ResourceId           []*string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty" type:"Repeated"`
	ResourceOwnerAccount *string   `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	// The mode of the instance. Valid values:
	//
	// 	- `instance`: reserved storage mode
	//
	// 	- `ALIYUN::GPDB::INSTANCE`: elastic storage mode
	//
	// This parameter is required.
	//
	// example:
	//
	// instance
	ResourceType *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	// The list of tags.
	//
	// This parameter is required.
	Tag []*TagResourcesRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s TagResourcesRequest) String() string {
	return tea.Prettify(s)
}

func (s TagResourcesRequest) GoString() string {
	return s.String()
}

func (s *TagResourcesRequest) SetOwnerAccount(v string) *TagResourcesRequest {
	s.OwnerAccount = &v
	return s
}

func (s *TagResourcesRequest) SetOwnerId(v int64) *TagResourcesRequest {
	s.OwnerId = &v
	return s
}

func (s *TagResourcesRequest) SetRegionId(v string) *TagResourcesRequest {
	s.RegionId = &v
	return s
}

func (s *TagResourcesRequest) SetResourceId(v []*string) *TagResourcesRequest {
	s.ResourceId = v
	return s
}

func (s *TagResourcesRequest) SetResourceOwnerAccount(v string) *TagResourcesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *TagResourcesRequest) SetResourceOwnerId(v int64) *TagResourcesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *TagResourcesRequest) SetResourceType(v string) *TagResourcesRequest {
	s.ResourceType = &v
	return s
}

func (s *TagResourcesRequest) SetTag(v []*TagResourcesRequestTag) *TagResourcesRequest {
	s.Tag = v
	return s
}

type TagResourcesRequestTag struct {
	// The key of a tag. Valid values of N: 1 to 20. This parameter value cannot be an empty string. A tag key can contain a maximum of 128 characters. It cannot start with `aliyun` or`  acs: ` and cannot contain `http://` or`  https:// `.
	//
	// This parameter is required.
	//
	// example:
	//
	// TestKey
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The value of a tag. Valid values of N: 1 to 20. This parameter value can be an empty string. A tag value can contain a maximum of 128 characters. It cannot start with `acs:` and cannot contain `http://` or `https://`.
	//
	// This parameter is required.
	//
	// example:
	//
	// TestValue
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s TagResourcesRequestTag) String() string {
	return tea.Prettify(s)
}

func (s TagResourcesRequestTag) GoString() string {
	return s.String()
}

func (s *TagResourcesRequestTag) SetKey(v string) *TagResourcesRequestTag {
	s.Key = &v
	return s
}

func (s *TagResourcesRequestTag) SetValue(v string) *TagResourcesRequestTag {
	s.Value = &v
	return s
}

type TagResourcesResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// 5414A4E5-4C36-4461-95FC-23**********
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s TagResourcesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s TagResourcesResponseBody) GoString() string {
	return s.String()
}

func (s *TagResourcesResponseBody) SetRequestId(v string) *TagResourcesResponseBody {
	s.RequestId = &v
	return s
}

type TagResourcesResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *TagResourcesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s TagResourcesResponse) String() string {
	return tea.Prettify(s)
}

func (s TagResourcesResponse) GoString() string {
	return s.String()
}

func (s *TagResourcesResponse) SetHeaders(v map[string]*string) *TagResourcesResponse {
	s.Headers = v
	return s
}

func (s *TagResourcesResponse) SetStatusCode(v int32) *TagResourcesResponse {
	s.StatusCode = &v
	return s
}

func (s *TagResourcesResponse) SetBody(v *TagResourcesResponseBody) *TagResourcesResponse {
	s.Body = v
	return s
}

type TextEmbeddingRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string   `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	Input        []*string `json:"Input,omitempty" xml:"Input,omitempty" type:"Repeated"`
	// example:
	//
	// text-embedding-v2
	Model   *string `json:"Model,omitempty" xml:"Model,omitempty"`
	OwnerId *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s TextEmbeddingRequest) String() string {
	return tea.Prettify(s)
}

func (s TextEmbeddingRequest) GoString() string {
	return s.String()
}

func (s *TextEmbeddingRequest) SetDBInstanceId(v string) *TextEmbeddingRequest {
	s.DBInstanceId = &v
	return s
}

func (s *TextEmbeddingRequest) SetInput(v []*string) *TextEmbeddingRequest {
	s.Input = v
	return s
}

func (s *TextEmbeddingRequest) SetModel(v string) *TextEmbeddingRequest {
	s.Model = &v
	return s
}

func (s *TextEmbeddingRequest) SetOwnerId(v int64) *TextEmbeddingRequest {
	s.OwnerId = &v
	return s
}

func (s *TextEmbeddingRequest) SetRegionId(v string) *TextEmbeddingRequest {
	s.RegionId = &v
	return s
}

type TextEmbeddingShrinkRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	InputShrink  *string `json:"Input,omitempty" xml:"Input,omitempty"`
	// example:
	//
	// text-embedding-v2
	Model   *string `json:"Model,omitempty" xml:"Model,omitempty"`
	OwnerId *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s TextEmbeddingShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s TextEmbeddingShrinkRequest) GoString() string {
	return s.String()
}

func (s *TextEmbeddingShrinkRequest) SetDBInstanceId(v string) *TextEmbeddingShrinkRequest {
	s.DBInstanceId = &v
	return s
}

func (s *TextEmbeddingShrinkRequest) SetInputShrink(v string) *TextEmbeddingShrinkRequest {
	s.InputShrink = &v
	return s
}

func (s *TextEmbeddingShrinkRequest) SetModel(v string) *TextEmbeddingShrinkRequest {
	s.Model = &v
	return s
}

func (s *TextEmbeddingShrinkRequest) SetOwnerId(v int64) *TextEmbeddingShrinkRequest {
	s.OwnerId = &v
	return s
}

func (s *TextEmbeddingShrinkRequest) SetRegionId(v string) *TextEmbeddingShrinkRequest {
	s.RegionId = &v
	return s
}

type TextEmbeddingResponseBody struct {
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Results   *TextEmbeddingResponseBodyResults `json:"Results,omitempty" xml:"Results,omitempty" type:"Struct"`
	// example:
	//
	// success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// example:
	//
	// 1000
	TextTokens *int32 `json:"TextTokens,omitempty" xml:"TextTokens,omitempty"`
}

func (s TextEmbeddingResponseBody) String() string {
	return tea.Prettify(s)
}

func (s TextEmbeddingResponseBody) GoString() string {
	return s.String()
}

func (s *TextEmbeddingResponseBody) SetMessage(v string) *TextEmbeddingResponseBody {
	s.Message = &v
	return s
}

func (s *TextEmbeddingResponseBody) SetRequestId(v string) *TextEmbeddingResponseBody {
	s.RequestId = &v
	return s
}

func (s *TextEmbeddingResponseBody) SetResults(v *TextEmbeddingResponseBodyResults) *TextEmbeddingResponseBody {
	s.Results = v
	return s
}

func (s *TextEmbeddingResponseBody) SetStatus(v string) *TextEmbeddingResponseBody {
	s.Status = &v
	return s
}

func (s *TextEmbeddingResponseBody) SetTextTokens(v int32) *TextEmbeddingResponseBody {
	s.TextTokens = &v
	return s
}

type TextEmbeddingResponseBodyResults struct {
	Results []*TextEmbeddingResponseBodyResultsResults `json:"Results,omitempty" xml:"Results,omitempty" type:"Repeated"`
}

func (s TextEmbeddingResponseBodyResults) String() string {
	return tea.Prettify(s)
}

func (s TextEmbeddingResponseBodyResults) GoString() string {
	return s.String()
}

func (s *TextEmbeddingResponseBodyResults) SetResults(v []*TextEmbeddingResponseBodyResultsResults) *TextEmbeddingResponseBodyResults {
	s.Results = v
	return s
}

type TextEmbeddingResponseBodyResultsResults struct {
	Embedding *TextEmbeddingResponseBodyResultsResultsEmbedding `json:"Embedding,omitempty" xml:"Embedding,omitempty" type:"Struct"`
	// example:
	//
	// 0
	Index *int32 `json:"Index,omitempty" xml:"Index,omitempty"`
}

func (s TextEmbeddingResponseBodyResultsResults) String() string {
	return tea.Prettify(s)
}

func (s TextEmbeddingResponseBodyResultsResults) GoString() string {
	return s.String()
}

func (s *TextEmbeddingResponseBodyResultsResults) SetEmbedding(v *TextEmbeddingResponseBodyResultsResultsEmbedding) *TextEmbeddingResponseBodyResultsResults {
	s.Embedding = v
	return s
}

func (s *TextEmbeddingResponseBodyResultsResults) SetIndex(v int32) *TextEmbeddingResponseBodyResultsResults {
	s.Index = &v
	return s
}

type TextEmbeddingResponseBodyResultsResultsEmbedding struct {
	Embedding []*float64 `json:"Embedding,omitempty" xml:"Embedding,omitempty" type:"Repeated"`
}

func (s TextEmbeddingResponseBodyResultsResultsEmbedding) String() string {
	return tea.Prettify(s)
}

func (s TextEmbeddingResponseBodyResultsResultsEmbedding) GoString() string {
	return s.String()
}

func (s *TextEmbeddingResponseBodyResultsResultsEmbedding) SetEmbedding(v []*float64) *TextEmbeddingResponseBodyResultsResultsEmbedding {
	s.Embedding = v
	return s
}

type TextEmbeddingResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *TextEmbeddingResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s TextEmbeddingResponse) String() string {
	return tea.Prettify(s)
}

func (s TextEmbeddingResponse) GoString() string {
	return s.String()
}

func (s *TextEmbeddingResponse) SetHeaders(v map[string]*string) *TextEmbeddingResponse {
	s.Headers = v
	return s
}

func (s *TextEmbeddingResponse) SetStatusCode(v int32) *TextEmbeddingResponse {
	s.StatusCode = &v
	return s
}

func (s *TextEmbeddingResponse) SetBody(v *TextEmbeddingResponseBody) *TextEmbeddingResponse {
	s.Body = v
	return s
}

type UnbindDBResourceGroupWithRoleRequest struct {
	// The instance ID.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The name of the resource group.
	//
	// This parameter is required.
	//
	// example:
	//
	// testgroup
	ResourceGroupName *string `json:"ResourceGroupName,omitempty" xml:"ResourceGroupName,omitempty"`
	// The roles.
	//
	// This parameter is required.
	RoleList []*string `json:"RoleList,omitempty" xml:"RoleList,omitempty" type:"Repeated"`
}

func (s UnbindDBResourceGroupWithRoleRequest) String() string {
	return tea.Prettify(s)
}

func (s UnbindDBResourceGroupWithRoleRequest) GoString() string {
	return s.String()
}

func (s *UnbindDBResourceGroupWithRoleRequest) SetDBInstanceId(v string) *UnbindDBResourceGroupWithRoleRequest {
	s.DBInstanceId = &v
	return s
}

func (s *UnbindDBResourceGroupWithRoleRequest) SetOwnerId(v int64) *UnbindDBResourceGroupWithRoleRequest {
	s.OwnerId = &v
	return s
}

func (s *UnbindDBResourceGroupWithRoleRequest) SetResourceGroupName(v string) *UnbindDBResourceGroupWithRoleRequest {
	s.ResourceGroupName = &v
	return s
}

func (s *UnbindDBResourceGroupWithRoleRequest) SetRoleList(v []*string) *UnbindDBResourceGroupWithRoleRequest {
	s.RoleList = v
	return s
}

type UnbindDBResourceGroupWithRoleShrinkRequest struct {
	// The instance ID.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The name of the resource group.
	//
	// This parameter is required.
	//
	// example:
	//
	// testgroup
	ResourceGroupName *string `json:"ResourceGroupName,omitempty" xml:"ResourceGroupName,omitempty"`
	// The roles.
	//
	// This parameter is required.
	RoleListShrink *string `json:"RoleList,omitempty" xml:"RoleList,omitempty"`
}

func (s UnbindDBResourceGroupWithRoleShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s UnbindDBResourceGroupWithRoleShrinkRequest) GoString() string {
	return s.String()
}

func (s *UnbindDBResourceGroupWithRoleShrinkRequest) SetDBInstanceId(v string) *UnbindDBResourceGroupWithRoleShrinkRequest {
	s.DBInstanceId = &v
	return s
}

func (s *UnbindDBResourceGroupWithRoleShrinkRequest) SetOwnerId(v int64) *UnbindDBResourceGroupWithRoleShrinkRequest {
	s.OwnerId = &v
	return s
}

func (s *UnbindDBResourceGroupWithRoleShrinkRequest) SetResourceGroupName(v string) *UnbindDBResourceGroupWithRoleShrinkRequest {
	s.ResourceGroupName = &v
	return s
}

func (s *UnbindDBResourceGroupWithRoleShrinkRequest) SetRoleListShrink(v string) *UnbindDBResourceGroupWithRoleShrinkRequest {
	s.RoleListShrink = &v
	return s
}

type UnbindDBResourceGroupWithRoleResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UnbindDBResourceGroupWithRoleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UnbindDBResourceGroupWithRoleResponseBody) GoString() string {
	return s.String()
}

func (s *UnbindDBResourceGroupWithRoleResponseBody) SetRequestId(v string) *UnbindDBResourceGroupWithRoleResponseBody {
	s.RequestId = &v
	return s
}

type UnbindDBResourceGroupWithRoleResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UnbindDBResourceGroupWithRoleResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UnbindDBResourceGroupWithRoleResponse) String() string {
	return tea.Prettify(s)
}

func (s UnbindDBResourceGroupWithRoleResponse) GoString() string {
	return s.String()
}

func (s *UnbindDBResourceGroupWithRoleResponse) SetHeaders(v map[string]*string) *UnbindDBResourceGroupWithRoleResponse {
	s.Headers = v
	return s
}

func (s *UnbindDBResourceGroupWithRoleResponse) SetStatusCode(v int32) *UnbindDBResourceGroupWithRoleResponse {
	s.StatusCode = &v
	return s
}

func (s *UnbindDBResourceGroupWithRoleResponse) SetBody(v *UnbindDBResourceGroupWithRoleResponseBody) *UnbindDBResourceGroupWithRoleResponse {
	s.Body = v
	return s
}

type UnloadSampleDataRequest struct {
	// The ID of the instance.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the IDs of all AnalyticDB for PostgreSQL instances in a specific region.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s UnloadSampleDataRequest) String() string {
	return tea.Prettify(s)
}

func (s UnloadSampleDataRequest) GoString() string {
	return s.String()
}

func (s *UnloadSampleDataRequest) SetDBInstanceId(v string) *UnloadSampleDataRequest {
	s.DBInstanceId = &v
	return s
}

func (s *UnloadSampleDataRequest) SetOwnerId(v int64) *UnloadSampleDataRequest {
	s.OwnerId = &v
	return s
}

type UnloadSampleDataResponseBody struct {
	// The ID of the instance.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The error message returned if an error occurs. This message does not affect the execution of the operation.
	//
	// example:
	//
	// ********
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 4E42ABC3-4DBD-5343-9BCA-66B7D091311F_6914
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The execution state of the operation. Valid values:
	//
	// 	- **false**: The operation fails.
	//
	// 	- **true**: The operation is successful.
	//
	// example:
	//
	// true
	Status *bool `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s UnloadSampleDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UnloadSampleDataResponseBody) GoString() string {
	return s.String()
}

func (s *UnloadSampleDataResponseBody) SetDBInstanceId(v string) *UnloadSampleDataResponseBody {
	s.DBInstanceId = &v
	return s
}

func (s *UnloadSampleDataResponseBody) SetErrorMessage(v string) *UnloadSampleDataResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *UnloadSampleDataResponseBody) SetRequestId(v string) *UnloadSampleDataResponseBody {
	s.RequestId = &v
	return s
}

func (s *UnloadSampleDataResponseBody) SetStatus(v bool) *UnloadSampleDataResponseBody {
	s.Status = &v
	return s
}

type UnloadSampleDataResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UnloadSampleDataResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UnloadSampleDataResponse) String() string {
	return tea.Prettify(s)
}

func (s UnloadSampleDataResponse) GoString() string {
	return s.String()
}

func (s *UnloadSampleDataResponse) SetHeaders(v map[string]*string) *UnloadSampleDataResponse {
	s.Headers = v
	return s
}

func (s *UnloadSampleDataResponse) SetStatusCode(v int32) *UnloadSampleDataResponse {
	s.StatusCode = &v
	return s
}

func (s *UnloadSampleDataResponse) SetBody(v *UnloadSampleDataResponseBody) *UnloadSampleDataResponse {
	s.Body = v
	return s
}

type UntagResourcesRequest struct {
	// Whether to untag all tags on the instance. This parameter is only effective when TagKey.N is not set in the request. The value range is:
	//
	// - true
	//
	// - false
	//
	// Default value: false
	//
	// example:
	//
	// false
	All          *bool   `json:"All,omitempty" xml:"All,omitempty"`
	OwnerAccount *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// Region ID, you can view available region IDs through the [DescribeRegions](https://help.aliyun.com/document_detail/86912.html) interface.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// Instance ID. N\\"s value range: 1~50
	//
	// This parameter is required.
	ResourceId           []*string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty" type:"Repeated"`
	ResourceOwnerAccount *string   `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	// Resource type. The value range is:
	//
	// - `instance`: Reserved mode instance.
	//
	// - `ALIYUN::GPDB::INSTANCE`: Elastic mode instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// instance
	ResourceType *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	// Resource tag key. N\\"s value range: 1~20
	TagKey []*string `json:"TagKey,omitempty" xml:"TagKey,omitempty" type:"Repeated"`
}

func (s UntagResourcesRequest) String() string {
	return tea.Prettify(s)
}

func (s UntagResourcesRequest) GoString() string {
	return s.String()
}

func (s *UntagResourcesRequest) SetAll(v bool) *UntagResourcesRequest {
	s.All = &v
	return s
}

func (s *UntagResourcesRequest) SetOwnerAccount(v string) *UntagResourcesRequest {
	s.OwnerAccount = &v
	return s
}

func (s *UntagResourcesRequest) SetOwnerId(v int64) *UntagResourcesRequest {
	s.OwnerId = &v
	return s
}

func (s *UntagResourcesRequest) SetRegionId(v string) *UntagResourcesRequest {
	s.RegionId = &v
	return s
}

func (s *UntagResourcesRequest) SetResourceId(v []*string) *UntagResourcesRequest {
	s.ResourceId = v
	return s
}

func (s *UntagResourcesRequest) SetResourceOwnerAccount(v string) *UntagResourcesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *UntagResourcesRequest) SetResourceOwnerId(v int64) *UntagResourcesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *UntagResourcesRequest) SetResourceType(v string) *UntagResourcesRequest {
	s.ResourceType = &v
	return s
}

func (s *UntagResourcesRequest) SetTagKey(v []*string) *UntagResourcesRequest {
	s.TagKey = v
	return s
}

type UntagResourcesResponseBody struct {
	// Request ID.
	//
	// example:
	//
	// 5414A4E5-4C36-4461-95FC-23757A20B5F8
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UntagResourcesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UntagResourcesResponseBody) GoString() string {
	return s.String()
}

func (s *UntagResourcesResponseBody) SetRequestId(v string) *UntagResourcesResponseBody {
	s.RequestId = &v
	return s
}

type UntagResourcesResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UntagResourcesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UntagResourcesResponse) String() string {
	return tea.Prettify(s)
}

func (s UntagResourcesResponse) GoString() string {
	return s.String()
}

func (s *UntagResourcesResponse) SetHeaders(v map[string]*string) *UntagResourcesResponse {
	s.Headers = v
	return s
}

func (s *UntagResourcesResponse) SetStatusCode(v int32) *UntagResourcesResponse {
	s.StatusCode = &v
	return s
}

func (s *UntagResourcesResponse) SetBody(v *UntagResourcesResponseBody) *UntagResourcesResponse {
	s.Body = v
	return s
}

type UpdateCollectionDataMetadataRequest struct {
	// Collection name.
	//
	// > You can use the [ListCollections](https://help.aliyun.com/document_detail/2401503.html) API to view the list.
	//
	// This parameter is required.
	//
	// example:
	//
	// document
	Collection *string `json:"Collection,omitempty" xml:"Collection,omitempty"`
	// Instance ID.
	//
	// > You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) API to view details of all AnalyticDB for PostgreSQL instances in the target region, including the instance ID.
	//
	// example:
	//
	// gp-j788ghhjjxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// Filter condition for the data to be updated, in SQL WHERE format. This field cannot be empty at the same time as the Ids field.
	//
	// example:
	//
	// business_value = \\"chat_file_1\\"
	Filter *string `json:"Filter,omitempty" xml:"Filter,omitempty"`
	// ID list of the data to be updated, i.e., the Row.Id specified when uploading the data. This field cannot be empty at the same time as the Filter field.
	Ids []*string `json:"Ids,omitempty" xml:"Ids,omitempty" type:"Repeated"`
	// Data to be updated, in a JSON string of MAP format. The key is the field name, and the value is the new data value.
	//
	// This parameter is required.
	//
	// example:
	//
	// {
	//
	//       "title": "new title",
	//
	//       "content": "new content"
	//
	// }
	Metadata map[string]interface{} `json:"Metadata,omitempty" xml:"Metadata,omitempty"`
	// Namespace.
	//
	// > You can use the [ListNamespaces](https://help.aliyun.com/document_detail/2401502.html) API to view the list.
	//
	// example:
	//
	// mynamespace
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// Password corresponding to the namespace.
	//
	// This parameter is required.
	//
	// example:
	//
	// testpassword
	NamespacePassword *string `json:"NamespacePassword,omitempty" xml:"NamespacePassword,omitempty"`
	OwnerId           *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// Region ID where the instance is located.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// ID of the Workspace composed of multiple database instances. This parameter and the DBInstanceId parameter cannot both be empty. When both are specified, this parameter takes precedence.
	//
	// example:
	//
	// gp-ws-*****
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s UpdateCollectionDataMetadataRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateCollectionDataMetadataRequest) GoString() string {
	return s.String()
}

func (s *UpdateCollectionDataMetadataRequest) SetCollection(v string) *UpdateCollectionDataMetadataRequest {
	s.Collection = &v
	return s
}

func (s *UpdateCollectionDataMetadataRequest) SetDBInstanceId(v string) *UpdateCollectionDataMetadataRequest {
	s.DBInstanceId = &v
	return s
}

func (s *UpdateCollectionDataMetadataRequest) SetFilter(v string) *UpdateCollectionDataMetadataRequest {
	s.Filter = &v
	return s
}

func (s *UpdateCollectionDataMetadataRequest) SetIds(v []*string) *UpdateCollectionDataMetadataRequest {
	s.Ids = v
	return s
}

func (s *UpdateCollectionDataMetadataRequest) SetMetadata(v map[string]interface{}) *UpdateCollectionDataMetadataRequest {
	s.Metadata = v
	return s
}

func (s *UpdateCollectionDataMetadataRequest) SetNamespace(v string) *UpdateCollectionDataMetadataRequest {
	s.Namespace = &v
	return s
}

func (s *UpdateCollectionDataMetadataRequest) SetNamespacePassword(v string) *UpdateCollectionDataMetadataRequest {
	s.NamespacePassword = &v
	return s
}

func (s *UpdateCollectionDataMetadataRequest) SetOwnerId(v int64) *UpdateCollectionDataMetadataRequest {
	s.OwnerId = &v
	return s
}

func (s *UpdateCollectionDataMetadataRequest) SetRegionId(v string) *UpdateCollectionDataMetadataRequest {
	s.RegionId = &v
	return s
}

func (s *UpdateCollectionDataMetadataRequest) SetWorkspaceId(v string) *UpdateCollectionDataMetadataRequest {
	s.WorkspaceId = &v
	return s
}

type UpdateCollectionDataMetadataShrinkRequest struct {
	// Collection name.
	//
	// > You can use the [ListCollections](https://help.aliyun.com/document_detail/2401503.html) API to view the list.
	//
	// This parameter is required.
	//
	// example:
	//
	// document
	Collection *string `json:"Collection,omitempty" xml:"Collection,omitempty"`
	// Instance ID.
	//
	// > You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) API to view details of all AnalyticDB for PostgreSQL instances in the target region, including the instance ID.
	//
	// example:
	//
	// gp-j788ghhjjxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// Filter condition for the data to be updated, in SQL WHERE format. This field cannot be empty at the same time as the Ids field.
	//
	// example:
	//
	// business_value = \\"chat_file_1\\"
	Filter *string `json:"Filter,omitempty" xml:"Filter,omitempty"`
	// ID list of the data to be updated, i.e., the Row.Id specified when uploading the data. This field cannot be empty at the same time as the Filter field.
	IdsShrink *string `json:"Ids,omitempty" xml:"Ids,omitempty"`
	// Data to be updated, in a JSON string of MAP format. The key is the field name, and the value is the new data value.
	//
	// This parameter is required.
	//
	// example:
	//
	// {
	//
	//       "title": "new title",
	//
	//       "content": "new content"
	//
	// }
	MetadataShrink *string `json:"Metadata,omitempty" xml:"Metadata,omitempty"`
	// Namespace.
	//
	// > You can use the [ListNamespaces](https://help.aliyun.com/document_detail/2401502.html) API to view the list.
	//
	// example:
	//
	// mynamespace
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// Password corresponding to the namespace.
	//
	// This parameter is required.
	//
	// example:
	//
	// testpassword
	NamespacePassword *string `json:"NamespacePassword,omitempty" xml:"NamespacePassword,omitempty"`
	OwnerId           *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// Region ID where the instance is located.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// ID of the Workspace composed of multiple database instances. This parameter and the DBInstanceId parameter cannot both be empty. When both are specified, this parameter takes precedence.
	//
	// example:
	//
	// gp-ws-*****
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s UpdateCollectionDataMetadataShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateCollectionDataMetadataShrinkRequest) GoString() string {
	return s.String()
}

func (s *UpdateCollectionDataMetadataShrinkRequest) SetCollection(v string) *UpdateCollectionDataMetadataShrinkRequest {
	s.Collection = &v
	return s
}

func (s *UpdateCollectionDataMetadataShrinkRequest) SetDBInstanceId(v string) *UpdateCollectionDataMetadataShrinkRequest {
	s.DBInstanceId = &v
	return s
}

func (s *UpdateCollectionDataMetadataShrinkRequest) SetFilter(v string) *UpdateCollectionDataMetadataShrinkRequest {
	s.Filter = &v
	return s
}

func (s *UpdateCollectionDataMetadataShrinkRequest) SetIdsShrink(v string) *UpdateCollectionDataMetadataShrinkRequest {
	s.IdsShrink = &v
	return s
}

func (s *UpdateCollectionDataMetadataShrinkRequest) SetMetadataShrink(v string) *UpdateCollectionDataMetadataShrinkRequest {
	s.MetadataShrink = &v
	return s
}

func (s *UpdateCollectionDataMetadataShrinkRequest) SetNamespace(v string) *UpdateCollectionDataMetadataShrinkRequest {
	s.Namespace = &v
	return s
}

func (s *UpdateCollectionDataMetadataShrinkRequest) SetNamespacePassword(v string) *UpdateCollectionDataMetadataShrinkRequest {
	s.NamespacePassword = &v
	return s
}

func (s *UpdateCollectionDataMetadataShrinkRequest) SetOwnerId(v int64) *UpdateCollectionDataMetadataShrinkRequest {
	s.OwnerId = &v
	return s
}

func (s *UpdateCollectionDataMetadataShrinkRequest) SetRegionId(v string) *UpdateCollectionDataMetadataShrinkRequest {
	s.RegionId = &v
	return s
}

func (s *UpdateCollectionDataMetadataShrinkRequest) SetWorkspaceId(v string) *UpdateCollectionDataMetadataShrinkRequest {
	s.WorkspaceId = &v
	return s
}

type UpdateCollectionDataMetadataResponseBody struct {
	// Number of effective entries.
	//
	// example:
	//
	// 10
	AppliedRows *int64 `json:"AppliedRows,omitempty" xml:"AppliedRows,omitempty"`
	// Detailed information when the request fails.
	//
	// example:
	//
	// failed to connect database, detailMsg: getConnection fail::SQL State: 28P01, Error Code: 0, Error Message: FATAL: password
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Status, with the following values:
	//
	// - **success**: Success.
	//
	// - **fail**: Failure.
	//
	// example:
	//
	// success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s UpdateCollectionDataMetadataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateCollectionDataMetadataResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateCollectionDataMetadataResponseBody) SetAppliedRows(v int64) *UpdateCollectionDataMetadataResponseBody {
	s.AppliedRows = &v
	return s
}

func (s *UpdateCollectionDataMetadataResponseBody) SetMessage(v string) *UpdateCollectionDataMetadataResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateCollectionDataMetadataResponseBody) SetRequestId(v string) *UpdateCollectionDataMetadataResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateCollectionDataMetadataResponseBody) SetStatus(v string) *UpdateCollectionDataMetadataResponseBody {
	s.Status = &v
	return s
}

type UpdateCollectionDataMetadataResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateCollectionDataMetadataResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateCollectionDataMetadataResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateCollectionDataMetadataResponse) GoString() string {
	return s.String()
}

func (s *UpdateCollectionDataMetadataResponse) SetHeaders(v map[string]*string) *UpdateCollectionDataMetadataResponse {
	s.Headers = v
	return s
}

func (s *UpdateCollectionDataMetadataResponse) SetStatusCode(v int32) *UpdateCollectionDataMetadataResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateCollectionDataMetadataResponse) SetBody(v *UpdateCollectionDataMetadataResponseBody) *UpdateCollectionDataMetadataResponse {
	s.Body = v
	return s
}

type UpdateDBInstancePlanRequest struct {
	// The ID of the instance.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the details of all AnalyticDB for PostgreSQL instances in a specific region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The execution information of the plan. Specify the parameter in the JSON format. The parameter value varies based on the values of **PlanType*	- and **PlanScheduleType**. The following section describes the PlanConfig parameter.
	//
	// example:
	//
	// {"pause":{"executeTime":"2022-08-30T16:00:00Z"}}
	PlanConfig *string `json:"PlanConfig,omitempty" xml:"PlanConfig,omitempty"`
	// The description of the plan.
	//
	// example:
	//
	// this is a test plan
	PlanDesc *string `json:"PlanDesc,omitempty" xml:"PlanDesc,omitempty"`
	// The end time of the plan. Specify the time in the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time must be in UTC. The end time must be later than the start time.
	//
	// >
	//
	// 	- This parameter must be specified only for **periodically executed*	- plans.
	//
	// 	- If you do not specify this parameter, the plan stops until the plan is deleted.
	//
	// example:
	//
	// 2023-04-17T23:00Z
	PlanEndDate *string `json:"PlanEndDate,omitempty" xml:"PlanEndDate,omitempty"`
	// The ID of the plan.
	//
	// >  You can call the [DescribeDBInstancePlans](https://help.aliyun.com/document_detail/449398.html) operation to query the details of plans, including plan IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1234
	PlanId *string `json:"PlanId,omitempty" xml:"PlanId,omitempty"`
	// The name of the plan.
	//
	// example:
	//
	// test-plan
	PlanName *string `json:"PlanName,omitempty" xml:"PlanName,omitempty"`
	// The start time of the plan. Specify the time in the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time must be in UTC.
	//
	// >
	//
	// 	- This parameter must be specified only for **periodically executed*	- plans.
	//
	// 	- If you do not specify this parameter, the current time is used.
	//
	// example:
	//
	// 2022-04-17T23:00Z
	PlanStartDate *string `json:"PlanStartDate,omitempty" xml:"PlanStartDate,omitempty"`
}

func (s UpdateDBInstancePlanRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateDBInstancePlanRequest) GoString() string {
	return s.String()
}

func (s *UpdateDBInstancePlanRequest) SetDBInstanceId(v string) *UpdateDBInstancePlanRequest {
	s.DBInstanceId = &v
	return s
}

func (s *UpdateDBInstancePlanRequest) SetOwnerId(v int64) *UpdateDBInstancePlanRequest {
	s.OwnerId = &v
	return s
}

func (s *UpdateDBInstancePlanRequest) SetPlanConfig(v string) *UpdateDBInstancePlanRequest {
	s.PlanConfig = &v
	return s
}

func (s *UpdateDBInstancePlanRequest) SetPlanDesc(v string) *UpdateDBInstancePlanRequest {
	s.PlanDesc = &v
	return s
}

func (s *UpdateDBInstancePlanRequest) SetPlanEndDate(v string) *UpdateDBInstancePlanRequest {
	s.PlanEndDate = &v
	return s
}

func (s *UpdateDBInstancePlanRequest) SetPlanId(v string) *UpdateDBInstancePlanRequest {
	s.PlanId = &v
	return s
}

func (s *UpdateDBInstancePlanRequest) SetPlanName(v string) *UpdateDBInstancePlanRequest {
	s.PlanName = &v
	return s
}

func (s *UpdateDBInstancePlanRequest) SetPlanStartDate(v string) *UpdateDBInstancePlanRequest {
	s.PlanStartDate = &v
	return s
}

type UpdateDBInstancePlanResponseBody struct {
	// The ID of the instance.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The error message returned.
	//
	// This parameter is returned only when the operation fails.
	//
	// example:
	//
	// ****
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// The ID of the plan.
	//
	// example:
	//
	// 1234
	PlanId *string `json:"PlanId,omitempty" xml:"PlanId,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 34b32a0a-08ef-4a87-b6be-cdd9f56fc3ad
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The state of the operation.
	//
	// If the operation is successful, **success*	- is returned. If the operation fails, this parameter is not returned.
	//
	// example:
	//
	// success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s UpdateDBInstancePlanResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateDBInstancePlanResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateDBInstancePlanResponseBody) SetDBInstanceId(v string) *UpdateDBInstancePlanResponseBody {
	s.DBInstanceId = &v
	return s
}

func (s *UpdateDBInstancePlanResponseBody) SetErrorMessage(v string) *UpdateDBInstancePlanResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *UpdateDBInstancePlanResponseBody) SetPlanId(v string) *UpdateDBInstancePlanResponseBody {
	s.PlanId = &v
	return s
}

func (s *UpdateDBInstancePlanResponseBody) SetRequestId(v string) *UpdateDBInstancePlanResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateDBInstancePlanResponseBody) SetStatus(v string) *UpdateDBInstancePlanResponseBody {
	s.Status = &v
	return s
}

type UpdateDBInstancePlanResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateDBInstancePlanResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateDBInstancePlanResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateDBInstancePlanResponse) GoString() string {
	return s.String()
}

func (s *UpdateDBInstancePlanResponse) SetHeaders(v map[string]*string) *UpdateDBInstancePlanResponse {
	s.Headers = v
	return s
}

func (s *UpdateDBInstancePlanResponse) SetStatusCode(v int32) *UpdateDBInstancePlanResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateDBInstancePlanResponse) SetBody(v *UpdateDBInstancePlanResponseBody) *UpdateDBInstancePlanResponse {
	s.Body = v
	return s
}

type UpgradeDBInstanceRequest struct {
	// This parameter is no longer used.
	//
	// example:
	//
	// null
	DBInstanceClass *string `json:"DBInstanceClass,omitempty" xml:"DBInstanceClass,omitempty"`
	// This parameter is no longer used.
	//
	// example:
	//
	// null
	DBInstanceGroupCount *string `json:"DBInstanceGroupCount,omitempty" xml:"DBInstanceGroupCount,omitempty"`
	// The instance ID.
	//
	// > You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the IDs of all AnalyticDB for PostgreSQL instances within a region.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-rj***************
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The specifications of each compute node. For information about the supported specifications, see [Instance specifications](https://help.aliyun.com/document_detail/35406.html).
	//
	// > This parameter is available only for instances in elastic storage mode.
	//
	// example:
	//
	// 4C16G
	InstanceSpec *string `json:"InstanceSpec,omitempty" xml:"InstanceSpec,omitempty"`
	// This parameter is no longer used.
	//
	// example:
	//
	// 2
	MasterNodeNum *string `json:"MasterNodeNum,omitempty" xml:"MasterNodeNum,omitempty"`
	OwnerId       *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// This parameter is no longer used.
	//
	// example:
	//
	// null
	PayType *string `json:"PayType,omitempty" xml:"PayType,omitempty"`
	// The region ID of the instance.
	//
	// > You can call the [DescribeRegions](https://help.aliyun.com/document_detail/86912.html) operation to query the most recent region list.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the resource group to which the instance belongs. For information about how to obtain the ID of a resource group, see [View basic information of a resource group](https://help.aliyun.com/document_detail/151181.html).
	//
	// example:
	//
	// rg-bp67acfmxazb4p****
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	// The performance level of Enterprise SSDs (ESSDs). Valid values:
	//
	// 	- **pl0**
	//
	// 	- **pl1**
	//
	// 	- **pl2**
	//
	// example:
	//
	// pl1
	SegDiskPerformanceLevel *string `json:"SegDiskPerformanceLevel,omitempty" xml:"SegDiskPerformanceLevel,omitempty"`
	// The number of compute nodes. The number of compute nodes varies based on the instance resource type and edition.
	//
	// 	- Valid values for High-availability Edition instances in elastic storage mode: 4 to 512, in 4 increments.
	//
	// 	- Valid values for High-performance Edition instances in elastic storage mode: 2 to 512, in 2 increments.
	//
	// 	- Valid values for instances in manual Serverless mode: 2 to 512, in 2 increments.
	//
	// example:
	//
	// 2
	SegNodeNum *string `json:"SegNodeNum,omitempty" xml:"SegNodeNum,omitempty"`
	// The disk storage type of the instance after the change. The disk storage type can be changed only to ESSD. Set the value to **cloud_essd**.
	//
	// example:
	//
	// cloud_essd
	SegStorageType *string `json:"SegStorageType,omitempty" xml:"SegStorageType,omitempty"`
	// The storage capacity of each compute node. Unit: GB. Valid values: 50 to 6000, in 50 increments.
	//
	// >  This parameter is available only for instances in elastic storage mode.
	//
	// example:
	//
	// 100
	StorageSize *string `json:"StorageSize,omitempty" xml:"StorageSize,omitempty"`
	// The type of the instance configuration change. Valid values:
	//
	// 	- **0*	- (default): changes the number of compute nodes.
	//
	// 	- **1**: changes the specifications and storage capacity of each compute node.
	//
	// 	- **2**: changes the number of coordinator nodes.
	//
	// 	- **3**: changes the disk storage type and ESSD performance level of the instance.
	//
	// >
	//
	// 	- The supported changes to compute node configurations vary based on the instance resource type. For more information, see the "Usage notes" section of the [Change compute node configurations](https://help.aliyun.com/document_detail/50956.html) topic.
	//
	// 	- After you specify a change type, only the corresponding parameters take effect. For example, if you set **UpgradeType*	- to 0, the parameter that is used to change the number of compute nodes takes effect, but the parameter that is used to change the number of coordinator nodes does not.
	//
	// 	- The number of coordinator nodes can be changed only on the China site (aliyun.com).
	//
	// 	- The disk storage type can be changed only from ultra disks to ESSDs.
	//
	// example:
	//
	// 0
	UpgradeType *int64 `json:"UpgradeType,omitempty" xml:"UpgradeType,omitempty"`
}

func (s UpgradeDBInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s UpgradeDBInstanceRequest) GoString() string {
	return s.String()
}

func (s *UpgradeDBInstanceRequest) SetDBInstanceClass(v string) *UpgradeDBInstanceRequest {
	s.DBInstanceClass = &v
	return s
}

func (s *UpgradeDBInstanceRequest) SetDBInstanceGroupCount(v string) *UpgradeDBInstanceRequest {
	s.DBInstanceGroupCount = &v
	return s
}

func (s *UpgradeDBInstanceRequest) SetDBInstanceId(v string) *UpgradeDBInstanceRequest {
	s.DBInstanceId = &v
	return s
}

func (s *UpgradeDBInstanceRequest) SetInstanceSpec(v string) *UpgradeDBInstanceRequest {
	s.InstanceSpec = &v
	return s
}

func (s *UpgradeDBInstanceRequest) SetMasterNodeNum(v string) *UpgradeDBInstanceRequest {
	s.MasterNodeNum = &v
	return s
}

func (s *UpgradeDBInstanceRequest) SetOwnerId(v int64) *UpgradeDBInstanceRequest {
	s.OwnerId = &v
	return s
}

func (s *UpgradeDBInstanceRequest) SetPayType(v string) *UpgradeDBInstanceRequest {
	s.PayType = &v
	return s
}

func (s *UpgradeDBInstanceRequest) SetRegionId(v string) *UpgradeDBInstanceRequest {
	s.RegionId = &v
	return s
}

func (s *UpgradeDBInstanceRequest) SetResourceGroupId(v string) *UpgradeDBInstanceRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *UpgradeDBInstanceRequest) SetSegDiskPerformanceLevel(v string) *UpgradeDBInstanceRequest {
	s.SegDiskPerformanceLevel = &v
	return s
}

func (s *UpgradeDBInstanceRequest) SetSegNodeNum(v string) *UpgradeDBInstanceRequest {
	s.SegNodeNum = &v
	return s
}

func (s *UpgradeDBInstanceRequest) SetSegStorageType(v string) *UpgradeDBInstanceRequest {
	s.SegStorageType = &v
	return s
}

func (s *UpgradeDBInstanceRequest) SetStorageSize(v string) *UpgradeDBInstanceRequest {
	s.StorageSize = &v
	return s
}

func (s *UpgradeDBInstanceRequest) SetUpgradeType(v int64) *UpgradeDBInstanceRequest {
	s.UpgradeType = &v
	return s
}

type UpgradeDBInstanceResponseBody struct {
	// The instance ID.
	//
	// example:
	//
	// gp-rj***************
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The order ID.
	//
	// example:
	//
	// *********
	OrderId *string `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 25C11EE5-B7E8-481A-A07C-BD**********
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpgradeDBInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpgradeDBInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *UpgradeDBInstanceResponseBody) SetDBInstanceId(v string) *UpgradeDBInstanceResponseBody {
	s.DBInstanceId = &v
	return s
}

func (s *UpgradeDBInstanceResponseBody) SetOrderId(v string) *UpgradeDBInstanceResponseBody {
	s.OrderId = &v
	return s
}

func (s *UpgradeDBInstanceResponseBody) SetRequestId(v string) *UpgradeDBInstanceResponseBody {
	s.RequestId = &v
	return s
}

type UpgradeDBInstanceResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpgradeDBInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpgradeDBInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s UpgradeDBInstanceResponse) GoString() string {
	return s.String()
}

func (s *UpgradeDBInstanceResponse) SetHeaders(v map[string]*string) *UpgradeDBInstanceResponse {
	s.Headers = v
	return s
}

func (s *UpgradeDBInstanceResponse) SetStatusCode(v int32) *UpgradeDBInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *UpgradeDBInstanceResponse) SetBody(v *UpgradeDBInstanceResponseBody) *UpgradeDBInstanceResponse {
	s.Body = v
	return s
}

type UpgradeDBVersionRequest struct {
	// The ID of the instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-wz9kmr708m155j***
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// This parameter is no longer used and does not need to be specified.
	//
	// example:
	//
	// null
	MajorVersion *string `json:"MajorVersion,omitempty" xml:"MajorVersion,omitempty"`
	// The minor version of the instance.
	//
	// example:
	//
	// 6.3.6.1-202112012048
	MinorVersion *string `json:"MinorVersion,omitempty" xml:"MinorVersion,omitempty"`
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The region ID of the instance.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// This parameter is no longer used and does not need to be specified.
	//
	// example:
	//
	// null
	SwitchTime *string `json:"SwitchTime,omitempty" xml:"SwitchTime,omitempty"`
	// This parameter is no longer used and does not need to be specified.
	//
	// example:
	//
	// null
	SwitchTimeMode *string `json:"SwitchTimeMode,omitempty" xml:"SwitchTimeMode,omitempty"`
}

func (s UpgradeDBVersionRequest) String() string {
	return tea.Prettify(s)
}

func (s UpgradeDBVersionRequest) GoString() string {
	return s.String()
}

func (s *UpgradeDBVersionRequest) SetDBInstanceId(v string) *UpgradeDBVersionRequest {
	s.DBInstanceId = &v
	return s
}

func (s *UpgradeDBVersionRequest) SetMajorVersion(v string) *UpgradeDBVersionRequest {
	s.MajorVersion = &v
	return s
}

func (s *UpgradeDBVersionRequest) SetMinorVersion(v string) *UpgradeDBVersionRequest {
	s.MinorVersion = &v
	return s
}

func (s *UpgradeDBVersionRequest) SetOwnerId(v int64) *UpgradeDBVersionRequest {
	s.OwnerId = &v
	return s
}

func (s *UpgradeDBVersionRequest) SetRegionId(v string) *UpgradeDBVersionRequest {
	s.RegionId = &v
	return s
}

func (s *UpgradeDBVersionRequest) SetSwitchTime(v string) *UpgradeDBVersionRequest {
	s.SwitchTime = &v
	return s
}

func (s *UpgradeDBVersionRequest) SetSwitchTimeMode(v string) *UpgradeDBVersionRequest {
	s.SwitchTimeMode = &v
	return s
}

type UpgradeDBVersionResponseBody struct {
	// This parameter is no longer returned.
	//
	// example:
	//
	// gp-wz9kmr708m155j***
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The name of the instance.
	//
	// example:
	//
	// gp-wz9kmr708m155j***
	DBInstanceName *string `json:"DBInstanceName,omitempty" xml:"DBInstanceName,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 25C11EE5-B7E8-481A-A07C-BD619971A570
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The ID of the task.
	//
	// example:
	//
	// 101450956
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s UpgradeDBVersionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpgradeDBVersionResponseBody) GoString() string {
	return s.String()
}

func (s *UpgradeDBVersionResponseBody) SetDBInstanceId(v string) *UpgradeDBVersionResponseBody {
	s.DBInstanceId = &v
	return s
}

func (s *UpgradeDBVersionResponseBody) SetDBInstanceName(v string) *UpgradeDBVersionResponseBody {
	s.DBInstanceName = &v
	return s
}

func (s *UpgradeDBVersionResponseBody) SetRequestId(v string) *UpgradeDBVersionResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpgradeDBVersionResponseBody) SetTaskId(v string) *UpgradeDBVersionResponseBody {
	s.TaskId = &v
	return s
}

type UpgradeDBVersionResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpgradeDBVersionResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpgradeDBVersionResponse) String() string {
	return tea.Prettify(s)
}

func (s UpgradeDBVersionResponse) GoString() string {
	return s.String()
}

func (s *UpgradeDBVersionResponse) SetHeaders(v map[string]*string) *UpgradeDBVersionResponse {
	s.Headers = v
	return s
}

func (s *UpgradeDBVersionResponse) SetStatusCode(v int32) *UpgradeDBVersionResponse {
	s.StatusCode = &v
	return s
}

func (s *UpgradeDBVersionResponse) SetBody(v *UpgradeDBVersionResponseBody) *UpgradeDBVersionResponse {
	s.Body = v
	return s
}

type UpgradeExtensionsRequest struct {
	// The instance ID.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// Database name.
	//
	// example:
	//
	// test01
	DatabaseName *string `json:"DatabaseName,omitempty" xml:"DatabaseName,omitempty"`
	// The extensions that you want to update. Separate multiple extensions with commas (,).
	//
	// This parameter is required.
	//
	// example:
	//
	// citext,dblink
	Extensions *string `json:"Extensions,omitempty" xml:"Extensions,omitempty"`
	// The region ID of the instance.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s UpgradeExtensionsRequest) String() string {
	return tea.Prettify(s)
}

func (s UpgradeExtensionsRequest) GoString() string {
	return s.String()
}

func (s *UpgradeExtensionsRequest) SetDBInstanceId(v string) *UpgradeExtensionsRequest {
	s.DBInstanceId = &v
	return s
}

func (s *UpgradeExtensionsRequest) SetDatabaseName(v string) *UpgradeExtensionsRequest {
	s.DatabaseName = &v
	return s
}

func (s *UpgradeExtensionsRequest) SetExtensions(v string) *UpgradeExtensionsRequest {
	s.Extensions = &v
	return s
}

func (s *UpgradeExtensionsRequest) SetRegionId(v string) *UpgradeExtensionsRequest {
	s.RegionId = &v
	return s
}

type UpgradeExtensionsResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpgradeExtensionsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpgradeExtensionsResponseBody) GoString() string {
	return s.String()
}

func (s *UpgradeExtensionsResponseBody) SetRequestId(v string) *UpgradeExtensionsResponseBody {
	s.RequestId = &v
	return s
}

type UpgradeExtensionsResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpgradeExtensionsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpgradeExtensionsResponse) String() string {
	return tea.Prettify(s)
}

func (s UpgradeExtensionsResponse) GoString() string {
	return s.String()
}

func (s *UpgradeExtensionsResponse) SetHeaders(v map[string]*string) *UpgradeExtensionsResponse {
	s.Headers = v
	return s
}

func (s *UpgradeExtensionsResponse) SetStatusCode(v int32) *UpgradeExtensionsResponse {
	s.StatusCode = &v
	return s
}

func (s *UpgradeExtensionsResponse) SetBody(v *UpgradeExtensionsResponseBody) *UpgradeExtensionsResponse {
	s.Body = v
	return s
}

type UploadDocumentAsyncRequest struct {
	// The size of data that is overlapped between consecutive chunks. The maximum value of this parameter cannot be greater than the value of the ChunkSize parameter.
	//
	// >  This parameter is used to prevent context missing that may occur due to data truncation. For example, when you upload a long text, you can retain specific overlapped text content between consecutive chunks to better understand the context.
	//
	// example:
	//
	// 50
	ChunkOverlap *int32 `json:"ChunkOverlap,omitempty" xml:"ChunkOverlap,omitempty"`
	// Strategy for processing large data: the size of each chunk when the data is split into smaller parts. Maximum value is 2048.
	//
	// example:
	//
	// 250
	ChunkSize *int32 `json:"ChunkSize,omitempty" xml:"ChunkSize,omitempty"`
	// The name of the document library.
	//
	// > Created by the [CreateDocumentCollection](https://help.aliyun.com/document_detail/2618448.html) API. You can call the [ListDocumentCollections](https://help.aliyun.com/document_detail/2618452.html) API to view the document libraries that have already been created.
	//
	// This parameter is required.
	//
	// example:
	//
	// document
	Collection *string `json:"Collection,omitempty" xml:"Collection,omitempty"`
	// Instance ID with vector engine optimization acceleration enabled. You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) API to view details of all AnalyticDB PostgreSQL instances in the target region, including the instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The name of the document loader. You do not need to specify this parameter. A document loader is automatically specified based on the file extension. Valid values:
	//
	// 	- UnstructuredHTMLLoader: `.html`
	//
	// 	- UnstructuredMarkdownLoader: `.md`
	//
	// 	- PyMuPDFLoader: `.pdf`
	//
	// 	- PyPDFLoader: `.pdf`
	//
	// 	- RapidOCRPDFLoader: `.pdf`
	//
	// 	- PDFWithImageRefLoader: `.pdf` (with the text-image association feature)
	//
	// 	- JSONLoader: `.json`
	//
	// 	- CSVLoader: `.csv`
	//
	// 	- RapidOCRLoader: `.png`, `.jpg`, `.jpeg`, and `.bmp`
	//
	// 	- UnstructuredFileLoader: `.eml`, `.msg`, `.rst`, `.txt`, `.docx`, `.epub`, `.odt`, `.pptx`, and `.tsv`
	//
	// example:
	//
	// PyMuPDFLoader
	DocumentLoaderName *string `json:"DocumentLoaderName,omitempty" xml:"DocumentLoaderName,omitempty"`
	// Specifies whether to perform only document understanding and chunking, but not vectorization and storage. Default value: false.
	//
	// >  You can set this parameter to true, check the chunking effect, and then perform optimization if needed.
	//
	// example:
	//
	// false
	DryRun *bool `json:"DryRun,omitempty" xml:"DryRun,omitempty"`
	// The file name of the document.
	//
	// >
	//
	// 	- We recommend that you add an extension to the file name. Examples: `.json`, `.md`, and `.pdf`. If you do not add an extension, the default loader designed for unstructured data is used.
	//
	// 	- If an image file is involved, the file name must contain an extension. The following extensions are supported: `.bmp`, `.jpg`, `.jpeg`, `.png`, and `.tiff`.
	//
	// 	- You can use a compressed package to upload images. The package file name must contain an extension. Supported package file extensions: `.tar`, `.gz`, and `.zip`.
	//
	// This parameter is required.
	//
	// example:
	//
	// mydoc.txt
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// The URL of the publicly accessible document.
	//
	// >  > - It is recommended to call this interface using the SDK, which provides a method called UploadDocumentAsyncAdvance for directly uploading local files. > - If the URL points to an image archive, the number of images in the archive should not exceed 100.
	//
	// This parameter is required.
	//
	// example:
	//
	// https://xx/mydoc.txt
	FileUrl *string `json:"FileUrl,omitempty" xml:"FileUrl,omitempty"`
	// The metadata. The value of this parameter must be the same as the Metadata parameter that is specified when you call the CreateDocumentCollection operation.
	Metadata map[string]interface{} `json:"Metadata,omitempty" xml:"Metadata,omitempty"`
	// Namespace, default is public. You can create one through the CreateNamespace interface and view the list via the ListNamespaces interface.
	//
	// example:
	//
	// mynamespace
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// The password corresponding to the namespace.  > This value is specified by the CreateNamespace interface.
	//
	// This parameter is required.
	//
	// example:
	//
	// testpassword
	NamespacePassword *string `json:"NamespacePassword,omitempty" xml:"NamespacePassword,omitempty"`
	OwnerId           *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The region ID of the instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The separators that are used to split large amounts of data.
	//
	// >
	//
	// 	- This is an important parameter that determines the chunking effect. This parameter is related to the splitter that is specified by the TextSplitterName parameter.
	//
	// 	- In most cases, you do not need to specify this parameter. The server assigns separators based on the value of the TextSplitterName parameter.
	Separators []*string `json:"Separators,omitempty" xml:"Separators,omitempty" type:"Repeated"`
	// The name of the splitter. Valid values:
	//
	// 	- **ChineseRecursiveTextSplitter**: inherits from RecursiveCharacterTextSplitter, uses `["\\n\\n","\\n", "。|!|?", "\\.\\s|\\!\\s|\\?\\s", ";|;\\s", ",|,\\s"]` as separators by default, and uses regular expressions to match text.
	//
	// 	- **RecursiveCharacterTextSplitter**: uses `["\\n\\n", "\\n", " ", ""]` as separators by default. The splitter supports splitting code in languages such as `C++, Go, Java, JS, PHP, Proto, Python, RST, Ruby, Rust, Scala, Swift, Markdown, LaTeX, HTML, Sol, and C Sharp`.
	//
	// 	- **SpacyTextSplitter**: uses `\\n\\n` as separators by default and uses the en_core_web_sm model of spaCy. The splitter can obtain better splitting effect.
	//
	// 	- **MarkdownHeaderTextSplitter**: splits text in the `[("#", "head1"), ("##", "head2"), ("###", "head3"), ("####", "head4")]` format. The splitter is suitable for Markdown text.
	//
	// example:
	//
	// ChineseRecursiveTextSplitter
	TextSplitterName *string `json:"TextSplitterName,omitempty" xml:"TextSplitterName,omitempty"`
	// Specifies whether to enable title enhancement.
	//
	// >  You can determine the title text, mark the text in the metadata, and then combine the text with the upper-level title to implement text enhancement.
	//
	// example:
	//
	// false
	ZhTitleEnhance *bool `json:"ZhTitleEnhance,omitempty" xml:"ZhTitleEnhance,omitempty"`
}

func (s UploadDocumentAsyncRequest) String() string {
	return tea.Prettify(s)
}

func (s UploadDocumentAsyncRequest) GoString() string {
	return s.String()
}

func (s *UploadDocumentAsyncRequest) SetChunkOverlap(v int32) *UploadDocumentAsyncRequest {
	s.ChunkOverlap = &v
	return s
}

func (s *UploadDocumentAsyncRequest) SetChunkSize(v int32) *UploadDocumentAsyncRequest {
	s.ChunkSize = &v
	return s
}

func (s *UploadDocumentAsyncRequest) SetCollection(v string) *UploadDocumentAsyncRequest {
	s.Collection = &v
	return s
}

func (s *UploadDocumentAsyncRequest) SetDBInstanceId(v string) *UploadDocumentAsyncRequest {
	s.DBInstanceId = &v
	return s
}

func (s *UploadDocumentAsyncRequest) SetDocumentLoaderName(v string) *UploadDocumentAsyncRequest {
	s.DocumentLoaderName = &v
	return s
}

func (s *UploadDocumentAsyncRequest) SetDryRun(v bool) *UploadDocumentAsyncRequest {
	s.DryRun = &v
	return s
}

func (s *UploadDocumentAsyncRequest) SetFileName(v string) *UploadDocumentAsyncRequest {
	s.FileName = &v
	return s
}

func (s *UploadDocumentAsyncRequest) SetFileUrl(v string) *UploadDocumentAsyncRequest {
	s.FileUrl = &v
	return s
}

func (s *UploadDocumentAsyncRequest) SetMetadata(v map[string]interface{}) *UploadDocumentAsyncRequest {
	s.Metadata = v
	return s
}

func (s *UploadDocumentAsyncRequest) SetNamespace(v string) *UploadDocumentAsyncRequest {
	s.Namespace = &v
	return s
}

func (s *UploadDocumentAsyncRequest) SetNamespacePassword(v string) *UploadDocumentAsyncRequest {
	s.NamespacePassword = &v
	return s
}

func (s *UploadDocumentAsyncRequest) SetOwnerId(v int64) *UploadDocumentAsyncRequest {
	s.OwnerId = &v
	return s
}

func (s *UploadDocumentAsyncRequest) SetRegionId(v string) *UploadDocumentAsyncRequest {
	s.RegionId = &v
	return s
}

func (s *UploadDocumentAsyncRequest) SetSeparators(v []*string) *UploadDocumentAsyncRequest {
	s.Separators = v
	return s
}

func (s *UploadDocumentAsyncRequest) SetTextSplitterName(v string) *UploadDocumentAsyncRequest {
	s.TextSplitterName = &v
	return s
}

func (s *UploadDocumentAsyncRequest) SetZhTitleEnhance(v bool) *UploadDocumentAsyncRequest {
	s.ZhTitleEnhance = &v
	return s
}

type UploadDocumentAsyncAdvanceRequest struct {
	// The size of data that is overlapped between consecutive chunks. The maximum value of this parameter cannot be greater than the value of the ChunkSize parameter.
	//
	// >  This parameter is used to prevent context missing that may occur due to data truncation. For example, when you upload a long text, you can retain specific overlapped text content between consecutive chunks to better understand the context.
	//
	// example:
	//
	// 50
	ChunkOverlap *int32 `json:"ChunkOverlap,omitempty" xml:"ChunkOverlap,omitempty"`
	// Strategy for processing large data: the size of each chunk when the data is split into smaller parts. Maximum value is 2048.
	//
	// example:
	//
	// 250
	ChunkSize *int32 `json:"ChunkSize,omitempty" xml:"ChunkSize,omitempty"`
	// The name of the document library.
	//
	// > Created by the [CreateDocumentCollection](https://help.aliyun.com/document_detail/2618448.html) API. You can call the [ListDocumentCollections](https://help.aliyun.com/document_detail/2618452.html) API to view the document libraries that have already been created.
	//
	// This parameter is required.
	//
	// example:
	//
	// document
	Collection *string `json:"Collection,omitempty" xml:"Collection,omitempty"`
	// Instance ID with vector engine optimization acceleration enabled. You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) API to view details of all AnalyticDB PostgreSQL instances in the target region, including the instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The name of the document loader. You do not need to specify this parameter. A document loader is automatically specified based on the file extension. Valid values:
	//
	// 	- UnstructuredHTMLLoader: `.html`
	//
	// 	- UnstructuredMarkdownLoader: `.md`
	//
	// 	- PyMuPDFLoader: `.pdf`
	//
	// 	- PyPDFLoader: `.pdf`
	//
	// 	- RapidOCRPDFLoader: `.pdf`
	//
	// 	- PDFWithImageRefLoader: `.pdf` (with the text-image association feature)
	//
	// 	- JSONLoader: `.json`
	//
	// 	- CSVLoader: `.csv`
	//
	// 	- RapidOCRLoader: `.png`, `.jpg`, `.jpeg`, and `.bmp`
	//
	// 	- UnstructuredFileLoader: `.eml`, `.msg`, `.rst`, `.txt`, `.docx`, `.epub`, `.odt`, `.pptx`, and `.tsv`
	//
	// example:
	//
	// PyMuPDFLoader
	DocumentLoaderName *string `json:"DocumentLoaderName,omitempty" xml:"DocumentLoaderName,omitempty"`
	// Specifies whether to perform only document understanding and chunking, but not vectorization and storage. Default value: false.
	//
	// >  You can set this parameter to true, check the chunking effect, and then perform optimization if needed.
	//
	// example:
	//
	// false
	DryRun *bool `json:"DryRun,omitempty" xml:"DryRun,omitempty"`
	// The file name of the document.
	//
	// >
	//
	// 	- We recommend that you add an extension to the file name. Examples: `.json`, `.md`, and `.pdf`. If you do not add an extension, the default loader designed for unstructured data is used.
	//
	// 	- If an image file is involved, the file name must contain an extension. The following extensions are supported: `.bmp`, `.jpg`, `.jpeg`, `.png`, and `.tiff`.
	//
	// 	- You can use a compressed package to upload images. The package file name must contain an extension. Supported package file extensions: `.tar`, `.gz`, and `.zip`.
	//
	// This parameter is required.
	//
	// example:
	//
	// mydoc.txt
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// The URL of the publicly accessible document.
	//
	// >  > - It is recommended to call this interface using the SDK, which provides a method called UploadDocumentAsyncAdvance for directly uploading local files. > - If the URL points to an image archive, the number of images in the archive should not exceed 100.
	//
	// This parameter is required.
	//
	// example:
	//
	// https://xx/mydoc.txt
	FileUrlObject io.Reader `json:"FileUrl,omitempty" xml:"FileUrl,omitempty"`
	// The metadata. The value of this parameter must be the same as the Metadata parameter that is specified when you call the CreateDocumentCollection operation.
	Metadata map[string]interface{} `json:"Metadata,omitempty" xml:"Metadata,omitempty"`
	// Namespace, default is public. You can create one through the CreateNamespace interface and view the list via the ListNamespaces interface.
	//
	// example:
	//
	// mynamespace
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// The password corresponding to the namespace.  > This value is specified by the CreateNamespace interface.
	//
	// This parameter is required.
	//
	// example:
	//
	// testpassword
	NamespacePassword *string `json:"NamespacePassword,omitempty" xml:"NamespacePassword,omitempty"`
	OwnerId           *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The region ID of the instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The separators that are used to split large amounts of data.
	//
	// >
	//
	// 	- This is an important parameter that determines the chunking effect. This parameter is related to the splitter that is specified by the TextSplitterName parameter.
	//
	// 	- In most cases, you do not need to specify this parameter. The server assigns separators based on the value of the TextSplitterName parameter.
	Separators []*string `json:"Separators,omitempty" xml:"Separators,omitempty" type:"Repeated"`
	// The name of the splitter. Valid values:
	//
	// 	- **ChineseRecursiveTextSplitter**: inherits from RecursiveCharacterTextSplitter, uses `["\\n\\n","\\n", "。|!|?", "\\.\\s|\\!\\s|\\?\\s", ";|;\\s", ",|,\\s"]` as separators by default, and uses regular expressions to match text.
	//
	// 	- **RecursiveCharacterTextSplitter**: uses `["\\n\\n", "\\n", " ", ""]` as separators by default. The splitter supports splitting code in languages such as `C++, Go, Java, JS, PHP, Proto, Python, RST, Ruby, Rust, Scala, Swift, Markdown, LaTeX, HTML, Sol, and C Sharp`.
	//
	// 	- **SpacyTextSplitter**: uses `\\n\\n` as separators by default and uses the en_core_web_sm model of spaCy. The splitter can obtain better splitting effect.
	//
	// 	- **MarkdownHeaderTextSplitter**: splits text in the `[("#", "head1"), ("##", "head2"), ("###", "head3"), ("####", "head4")]` format. The splitter is suitable for Markdown text.
	//
	// example:
	//
	// ChineseRecursiveTextSplitter
	TextSplitterName *string `json:"TextSplitterName,omitempty" xml:"TextSplitterName,omitempty"`
	// Specifies whether to enable title enhancement.
	//
	// >  You can determine the title text, mark the text in the metadata, and then combine the text with the upper-level title to implement text enhancement.
	//
	// example:
	//
	// false
	ZhTitleEnhance *bool `json:"ZhTitleEnhance,omitempty" xml:"ZhTitleEnhance,omitempty"`
}

func (s UploadDocumentAsyncAdvanceRequest) String() string {
	return tea.Prettify(s)
}

func (s UploadDocumentAsyncAdvanceRequest) GoString() string {
	return s.String()
}

func (s *UploadDocumentAsyncAdvanceRequest) SetChunkOverlap(v int32) *UploadDocumentAsyncAdvanceRequest {
	s.ChunkOverlap = &v
	return s
}

func (s *UploadDocumentAsyncAdvanceRequest) SetChunkSize(v int32) *UploadDocumentAsyncAdvanceRequest {
	s.ChunkSize = &v
	return s
}

func (s *UploadDocumentAsyncAdvanceRequest) SetCollection(v string) *UploadDocumentAsyncAdvanceRequest {
	s.Collection = &v
	return s
}

func (s *UploadDocumentAsyncAdvanceRequest) SetDBInstanceId(v string) *UploadDocumentAsyncAdvanceRequest {
	s.DBInstanceId = &v
	return s
}

func (s *UploadDocumentAsyncAdvanceRequest) SetDocumentLoaderName(v string) *UploadDocumentAsyncAdvanceRequest {
	s.DocumentLoaderName = &v
	return s
}

func (s *UploadDocumentAsyncAdvanceRequest) SetDryRun(v bool) *UploadDocumentAsyncAdvanceRequest {
	s.DryRun = &v
	return s
}

func (s *UploadDocumentAsyncAdvanceRequest) SetFileName(v string) *UploadDocumentAsyncAdvanceRequest {
	s.FileName = &v
	return s
}

func (s *UploadDocumentAsyncAdvanceRequest) SetFileUrlObject(v io.Reader) *UploadDocumentAsyncAdvanceRequest {
	s.FileUrlObject = v
	return s
}

func (s *UploadDocumentAsyncAdvanceRequest) SetMetadata(v map[string]interface{}) *UploadDocumentAsyncAdvanceRequest {
	s.Metadata = v
	return s
}

func (s *UploadDocumentAsyncAdvanceRequest) SetNamespace(v string) *UploadDocumentAsyncAdvanceRequest {
	s.Namespace = &v
	return s
}

func (s *UploadDocumentAsyncAdvanceRequest) SetNamespacePassword(v string) *UploadDocumentAsyncAdvanceRequest {
	s.NamespacePassword = &v
	return s
}

func (s *UploadDocumentAsyncAdvanceRequest) SetOwnerId(v int64) *UploadDocumentAsyncAdvanceRequest {
	s.OwnerId = &v
	return s
}

func (s *UploadDocumentAsyncAdvanceRequest) SetRegionId(v string) *UploadDocumentAsyncAdvanceRequest {
	s.RegionId = &v
	return s
}

func (s *UploadDocumentAsyncAdvanceRequest) SetSeparators(v []*string) *UploadDocumentAsyncAdvanceRequest {
	s.Separators = v
	return s
}

func (s *UploadDocumentAsyncAdvanceRequest) SetTextSplitterName(v string) *UploadDocumentAsyncAdvanceRequest {
	s.TextSplitterName = &v
	return s
}

func (s *UploadDocumentAsyncAdvanceRequest) SetZhTitleEnhance(v bool) *UploadDocumentAsyncAdvanceRequest {
	s.ZhTitleEnhance = &v
	return s
}

type UploadDocumentAsyncShrinkRequest struct {
	// The size of data that is overlapped between consecutive chunks. The maximum value of this parameter cannot be greater than the value of the ChunkSize parameter.
	//
	// >  This parameter is used to prevent context missing that may occur due to data truncation. For example, when you upload a long text, you can retain specific overlapped text content between consecutive chunks to better understand the context.
	//
	// example:
	//
	// 50
	ChunkOverlap *int32 `json:"ChunkOverlap,omitempty" xml:"ChunkOverlap,omitempty"`
	// Strategy for processing large data: the size of each chunk when the data is split into smaller parts. Maximum value is 2048.
	//
	// example:
	//
	// 250
	ChunkSize *int32 `json:"ChunkSize,omitempty" xml:"ChunkSize,omitempty"`
	// The name of the document library.
	//
	// > Created by the [CreateDocumentCollection](https://help.aliyun.com/document_detail/2618448.html) API. You can call the [ListDocumentCollections](https://help.aliyun.com/document_detail/2618452.html) API to view the document libraries that have already been created.
	//
	// This parameter is required.
	//
	// example:
	//
	// document
	Collection *string `json:"Collection,omitempty" xml:"Collection,omitempty"`
	// Instance ID with vector engine optimization acceleration enabled. You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) API to view details of all AnalyticDB PostgreSQL instances in the target region, including the instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-bp12ga6v69h86****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The name of the document loader. You do not need to specify this parameter. A document loader is automatically specified based on the file extension. Valid values:
	//
	// 	- UnstructuredHTMLLoader: `.html`
	//
	// 	- UnstructuredMarkdownLoader: `.md`
	//
	// 	- PyMuPDFLoader: `.pdf`
	//
	// 	- PyPDFLoader: `.pdf`
	//
	// 	- RapidOCRPDFLoader: `.pdf`
	//
	// 	- PDFWithImageRefLoader: `.pdf` (with the text-image association feature)
	//
	// 	- JSONLoader: `.json`
	//
	// 	- CSVLoader: `.csv`
	//
	// 	- RapidOCRLoader: `.png`, `.jpg`, `.jpeg`, and `.bmp`
	//
	// 	- UnstructuredFileLoader: `.eml`, `.msg`, `.rst`, `.txt`, `.docx`, `.epub`, `.odt`, `.pptx`, and `.tsv`
	//
	// example:
	//
	// PyMuPDFLoader
	DocumentLoaderName *string `json:"DocumentLoaderName,omitempty" xml:"DocumentLoaderName,omitempty"`
	// Specifies whether to perform only document understanding and chunking, but not vectorization and storage. Default value: false.
	//
	// >  You can set this parameter to true, check the chunking effect, and then perform optimization if needed.
	//
	// example:
	//
	// false
	DryRun *bool `json:"DryRun,omitempty" xml:"DryRun,omitempty"`
	// The file name of the document.
	//
	// >
	//
	// 	- We recommend that you add an extension to the file name. Examples: `.json`, `.md`, and `.pdf`. If you do not add an extension, the default loader designed for unstructured data is used.
	//
	// 	- If an image file is involved, the file name must contain an extension. The following extensions are supported: `.bmp`, `.jpg`, `.jpeg`, `.png`, and `.tiff`.
	//
	// 	- You can use a compressed package to upload images. The package file name must contain an extension. Supported package file extensions: `.tar`, `.gz`, and `.zip`.
	//
	// This parameter is required.
	//
	// example:
	//
	// mydoc.txt
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// The URL of the publicly accessible document.
	//
	// >  > - It is recommended to call this interface using the SDK, which provides a method called UploadDocumentAsyncAdvance for directly uploading local files. > - If the URL points to an image archive, the number of images in the archive should not exceed 100.
	//
	// This parameter is required.
	//
	// example:
	//
	// https://xx/mydoc.txt
	FileUrl *string `json:"FileUrl,omitempty" xml:"FileUrl,omitempty"`
	// The metadata. The value of this parameter must be the same as the Metadata parameter that is specified when you call the CreateDocumentCollection operation.
	MetadataShrink *string `json:"Metadata,omitempty" xml:"Metadata,omitempty"`
	// Namespace, default is public. You can create one through the CreateNamespace interface and view the list via the ListNamespaces interface.
	//
	// example:
	//
	// mynamespace
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// The password corresponding to the namespace.  > This value is specified by the CreateNamespace interface.
	//
	// This parameter is required.
	//
	// example:
	//
	// testpassword
	NamespacePassword *string `json:"NamespacePassword,omitempty" xml:"NamespacePassword,omitempty"`
	OwnerId           *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The region ID of the instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The separators that are used to split large amounts of data.
	//
	// >
	//
	// 	- This is an important parameter that determines the chunking effect. This parameter is related to the splitter that is specified by the TextSplitterName parameter.
	//
	// 	- In most cases, you do not need to specify this parameter. The server assigns separators based on the value of the TextSplitterName parameter.
	SeparatorsShrink *string `json:"Separators,omitempty" xml:"Separators,omitempty"`
	// The name of the splitter. Valid values:
	//
	// 	- **ChineseRecursiveTextSplitter**: inherits from RecursiveCharacterTextSplitter, uses `["\\n\\n","\\n", "。|!|?", "\\.\\s|\\!\\s|\\?\\s", ";|;\\s", ",|,\\s"]` as separators by default, and uses regular expressions to match text.
	//
	// 	- **RecursiveCharacterTextSplitter**: uses `["\\n\\n", "\\n", " ", ""]` as separators by default. The splitter supports splitting code in languages such as `C++, Go, Java, JS, PHP, Proto, Python, RST, Ruby, Rust, Scala, Swift, Markdown, LaTeX, HTML, Sol, and C Sharp`.
	//
	// 	- **SpacyTextSplitter**: uses `\\n\\n` as separators by default and uses the en_core_web_sm model of spaCy. The splitter can obtain better splitting effect.
	//
	// 	- **MarkdownHeaderTextSplitter**: splits text in the `[("#", "head1"), ("##", "head2"), ("###", "head3"), ("####", "head4")]` format. The splitter is suitable for Markdown text.
	//
	// example:
	//
	// ChineseRecursiveTextSplitter
	TextSplitterName *string `json:"TextSplitterName,omitempty" xml:"TextSplitterName,omitempty"`
	// Specifies whether to enable title enhancement.
	//
	// >  You can determine the title text, mark the text in the metadata, and then combine the text with the upper-level title to implement text enhancement.
	//
	// example:
	//
	// false
	ZhTitleEnhance *bool `json:"ZhTitleEnhance,omitempty" xml:"ZhTitleEnhance,omitempty"`
}

func (s UploadDocumentAsyncShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s UploadDocumentAsyncShrinkRequest) GoString() string {
	return s.String()
}

func (s *UploadDocumentAsyncShrinkRequest) SetChunkOverlap(v int32) *UploadDocumentAsyncShrinkRequest {
	s.ChunkOverlap = &v
	return s
}

func (s *UploadDocumentAsyncShrinkRequest) SetChunkSize(v int32) *UploadDocumentAsyncShrinkRequest {
	s.ChunkSize = &v
	return s
}

func (s *UploadDocumentAsyncShrinkRequest) SetCollection(v string) *UploadDocumentAsyncShrinkRequest {
	s.Collection = &v
	return s
}

func (s *UploadDocumentAsyncShrinkRequest) SetDBInstanceId(v string) *UploadDocumentAsyncShrinkRequest {
	s.DBInstanceId = &v
	return s
}

func (s *UploadDocumentAsyncShrinkRequest) SetDocumentLoaderName(v string) *UploadDocumentAsyncShrinkRequest {
	s.DocumentLoaderName = &v
	return s
}

func (s *UploadDocumentAsyncShrinkRequest) SetDryRun(v bool) *UploadDocumentAsyncShrinkRequest {
	s.DryRun = &v
	return s
}

func (s *UploadDocumentAsyncShrinkRequest) SetFileName(v string) *UploadDocumentAsyncShrinkRequest {
	s.FileName = &v
	return s
}

func (s *UploadDocumentAsyncShrinkRequest) SetFileUrl(v string) *UploadDocumentAsyncShrinkRequest {
	s.FileUrl = &v
	return s
}

func (s *UploadDocumentAsyncShrinkRequest) SetMetadataShrink(v string) *UploadDocumentAsyncShrinkRequest {
	s.MetadataShrink = &v
	return s
}

func (s *UploadDocumentAsyncShrinkRequest) SetNamespace(v string) *UploadDocumentAsyncShrinkRequest {
	s.Namespace = &v
	return s
}

func (s *UploadDocumentAsyncShrinkRequest) SetNamespacePassword(v string) *UploadDocumentAsyncShrinkRequest {
	s.NamespacePassword = &v
	return s
}

func (s *UploadDocumentAsyncShrinkRequest) SetOwnerId(v int64) *UploadDocumentAsyncShrinkRequest {
	s.OwnerId = &v
	return s
}

func (s *UploadDocumentAsyncShrinkRequest) SetRegionId(v string) *UploadDocumentAsyncShrinkRequest {
	s.RegionId = &v
	return s
}

func (s *UploadDocumentAsyncShrinkRequest) SetSeparatorsShrink(v string) *UploadDocumentAsyncShrinkRequest {
	s.SeparatorsShrink = &v
	return s
}

func (s *UploadDocumentAsyncShrinkRequest) SetTextSplitterName(v string) *UploadDocumentAsyncShrinkRequest {
	s.TextSplitterName = &v
	return s
}

func (s *UploadDocumentAsyncShrinkRequest) SetZhTitleEnhance(v bool) *UploadDocumentAsyncShrinkRequest {
	s.ZhTitleEnhance = &v
	return s
}

type UploadDocumentAsyncResponseBody struct {
	// The job ID.
	//
	// example:
	//
	// 231460f8-75dc-405e-a669-0c5204887e91
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// The returned message.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// API execution status, with the following values:
	//
	// - **success**: Execution succeeded.
	//
	// - **fail**: Execution failed.
	//
	// example:
	//
	// success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s UploadDocumentAsyncResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UploadDocumentAsyncResponseBody) GoString() string {
	return s.String()
}

func (s *UploadDocumentAsyncResponseBody) SetJobId(v string) *UploadDocumentAsyncResponseBody {
	s.JobId = &v
	return s
}

func (s *UploadDocumentAsyncResponseBody) SetMessage(v string) *UploadDocumentAsyncResponseBody {
	s.Message = &v
	return s
}

func (s *UploadDocumentAsyncResponseBody) SetRequestId(v string) *UploadDocumentAsyncResponseBody {
	s.RequestId = &v
	return s
}

func (s *UploadDocumentAsyncResponseBody) SetStatus(v string) *UploadDocumentAsyncResponseBody {
	s.Status = &v
	return s
}

type UploadDocumentAsyncResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UploadDocumentAsyncResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UploadDocumentAsyncResponse) String() string {
	return tea.Prettify(s)
}

func (s UploadDocumentAsyncResponse) GoString() string {
	return s.String()
}

func (s *UploadDocumentAsyncResponse) SetHeaders(v map[string]*string) *UploadDocumentAsyncResponse {
	s.Headers = v
	return s
}

func (s *UploadDocumentAsyncResponse) SetStatusCode(v int32) *UploadDocumentAsyncResponse {
	s.StatusCode = &v
	return s
}

func (s *UploadDocumentAsyncResponse) SetBody(v *UploadDocumentAsyncResponseBody) *UploadDocumentAsyncResponse {
	s.Body = v
	return s
}

type UpsertChunksRequest struct {
	// Document collection name.
	//
	// > Created by the [CreateDocumentCollection](https://help.aliyun.com/document_detail/2618448.html) API. You can use the [ListDocumentCollections](https://help.aliyun.com/document_detail/2618452.html) API to view the already created document collections.
	//
	// This parameter is required.
	//
	// example:
	//
	// document
	Collection *string `json:"Collection,omitempty" xml:"Collection,omitempty"`
	// Instance ID.
	//
	// > You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) API to view details of all AnalyticDB PostgreSQL instances in the target region, including the instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// File name.
	//
	// > If a file name is specified and not empty, it will overwrite the data for this file name; if empty, the chunks data will be appended directly to the document collection.
	//
	// example:
	//
	// mydoc.txt
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// Namespace, default is public.
	//
	// > You can create it using the [CreateNamespace](https://help.aliyun.com/document_detail/2401495.html) API and view the list using the [ListNamespaces](https://help.aliyun.com/document_detail/2401502.html) API.
	//
	// example:
	//
	// mynamespace
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// Password corresponding to the namespace.
	//
	// > This value is specified by the [CreateNamespace](https://help.aliyun.com/document_detail/2401495.html) API.
	//
	// This parameter is required.
	//
	// example:
	//
	// testpassword
	NamespacePassword *string `json:"NamespacePassword,omitempty" xml:"NamespacePassword,omitempty"`
	OwnerId           *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// Region ID where the instance is located.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// List of split documents.
	TextChunks []*UpsertChunksRequestTextChunks `json:"TextChunks,omitempty" xml:"TextChunks,omitempty" type:"Repeated"`
}

func (s UpsertChunksRequest) String() string {
	return tea.Prettify(s)
}

func (s UpsertChunksRequest) GoString() string {
	return s.String()
}

func (s *UpsertChunksRequest) SetCollection(v string) *UpsertChunksRequest {
	s.Collection = &v
	return s
}

func (s *UpsertChunksRequest) SetDBInstanceId(v string) *UpsertChunksRequest {
	s.DBInstanceId = &v
	return s
}

func (s *UpsertChunksRequest) SetFileName(v string) *UpsertChunksRequest {
	s.FileName = &v
	return s
}

func (s *UpsertChunksRequest) SetNamespace(v string) *UpsertChunksRequest {
	s.Namespace = &v
	return s
}

func (s *UpsertChunksRequest) SetNamespacePassword(v string) *UpsertChunksRequest {
	s.NamespacePassword = &v
	return s
}

func (s *UpsertChunksRequest) SetOwnerId(v int64) *UpsertChunksRequest {
	s.OwnerId = &v
	return s
}

func (s *UpsertChunksRequest) SetRegionId(v string) *UpsertChunksRequest {
	s.RegionId = &v
	return s
}

func (s *UpsertChunksRequest) SetTextChunks(v []*UpsertChunksRequestTextChunks) *UpsertChunksRequest {
	s.TextChunks = v
	return s
}

type UpsertChunksRequestTextChunks struct {
	// Document content.
	//
	// This parameter is required.
	//
	// example:
	//
	// Cloud-native data warehouse AnalyticDB PostgreSQL Edition provides a simple, fast, and cost-effective PB-level cloud data warehouse solution.
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// Metadata.
	//
	// example:
	//
	// {"title":"test"}
	Metadata map[string]interface{} `json:"Metadata,omitempty" xml:"Metadata,omitempty"`
}

func (s UpsertChunksRequestTextChunks) String() string {
	return tea.Prettify(s)
}

func (s UpsertChunksRequestTextChunks) GoString() string {
	return s.String()
}

func (s *UpsertChunksRequestTextChunks) SetContent(v string) *UpsertChunksRequestTextChunks {
	s.Content = &v
	return s
}

func (s *UpsertChunksRequestTextChunks) SetMetadata(v map[string]interface{}) *UpsertChunksRequestTextChunks {
	s.Metadata = v
	return s
}

type UpsertChunksShrinkRequest struct {
	// Document collection name.
	//
	// > Created by the [CreateDocumentCollection](https://help.aliyun.com/document_detail/2618448.html) API. You can use the [ListDocumentCollections](https://help.aliyun.com/document_detail/2618452.html) API to view the already created document collections.
	//
	// This parameter is required.
	//
	// example:
	//
	// document
	Collection *string `json:"Collection,omitempty" xml:"Collection,omitempty"`
	// Instance ID.
	//
	// > You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) API to view details of all AnalyticDB PostgreSQL instances in the target region, including the instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// File name.
	//
	// > If a file name is specified and not empty, it will overwrite the data for this file name; if empty, the chunks data will be appended directly to the document collection.
	//
	// example:
	//
	// mydoc.txt
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// Namespace, default is public.
	//
	// > You can create it using the [CreateNamespace](https://help.aliyun.com/document_detail/2401495.html) API and view the list using the [ListNamespaces](https://help.aliyun.com/document_detail/2401502.html) API.
	//
	// example:
	//
	// mynamespace
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// Password corresponding to the namespace.
	//
	// > This value is specified by the [CreateNamespace](https://help.aliyun.com/document_detail/2401495.html) API.
	//
	// This parameter is required.
	//
	// example:
	//
	// testpassword
	NamespacePassword *string `json:"NamespacePassword,omitempty" xml:"NamespacePassword,omitempty"`
	OwnerId           *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// Region ID where the instance is located.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// List of split documents.
	TextChunksShrink *string `json:"TextChunks,omitempty" xml:"TextChunks,omitempty"`
}

func (s UpsertChunksShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s UpsertChunksShrinkRequest) GoString() string {
	return s.String()
}

func (s *UpsertChunksShrinkRequest) SetCollection(v string) *UpsertChunksShrinkRequest {
	s.Collection = &v
	return s
}

func (s *UpsertChunksShrinkRequest) SetDBInstanceId(v string) *UpsertChunksShrinkRequest {
	s.DBInstanceId = &v
	return s
}

func (s *UpsertChunksShrinkRequest) SetFileName(v string) *UpsertChunksShrinkRequest {
	s.FileName = &v
	return s
}

func (s *UpsertChunksShrinkRequest) SetNamespace(v string) *UpsertChunksShrinkRequest {
	s.Namespace = &v
	return s
}

func (s *UpsertChunksShrinkRequest) SetNamespacePassword(v string) *UpsertChunksShrinkRequest {
	s.NamespacePassword = &v
	return s
}

func (s *UpsertChunksShrinkRequest) SetOwnerId(v int64) *UpsertChunksShrinkRequest {
	s.OwnerId = &v
	return s
}

func (s *UpsertChunksShrinkRequest) SetRegionId(v string) *UpsertChunksShrinkRequest {
	s.RegionId = &v
	return s
}

func (s *UpsertChunksShrinkRequest) SetTextChunksShrink(v string) *UpsertChunksShrinkRequest {
	s.TextChunksShrink = &v
	return s
}

type UpsertChunksResponseBody struct {
	// Number of tokens used during vectorization.
	//
	// > A token refers to the smallest unit into which the input text is divided. A token can be a word, a phrase, a punctuation mark, a character, etc.
	//
	// example:
	//
	// 100
	EmbeddingTokens *string `json:"EmbeddingTokens,omitempty" xml:"EmbeddingTokens,omitempty"`
	// Return message.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// API execution status, with the following values:
	//
	// - **success**: Execution succeeded.
	//
	// - **fail**: Execution failed.
	//
	// example:
	//
	// success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s UpsertChunksResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpsertChunksResponseBody) GoString() string {
	return s.String()
}

func (s *UpsertChunksResponseBody) SetEmbeddingTokens(v string) *UpsertChunksResponseBody {
	s.EmbeddingTokens = &v
	return s
}

func (s *UpsertChunksResponseBody) SetMessage(v string) *UpsertChunksResponseBody {
	s.Message = &v
	return s
}

func (s *UpsertChunksResponseBody) SetRequestId(v string) *UpsertChunksResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpsertChunksResponseBody) SetStatus(v string) *UpsertChunksResponseBody {
	s.Status = &v
	return s
}

type UpsertChunksResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpsertChunksResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpsertChunksResponse) String() string {
	return tea.Prettify(s)
}

func (s UpsertChunksResponse) GoString() string {
	return s.String()
}

func (s *UpsertChunksResponse) SetHeaders(v map[string]*string) *UpsertChunksResponse {
	s.Headers = v
	return s
}

func (s *UpsertChunksResponse) SetStatusCode(v int32) *UpsertChunksResponse {
	s.StatusCode = &v
	return s
}

func (s *UpsertChunksResponse) SetBody(v *UpsertChunksResponseBody) *UpsertChunksResponse {
	s.Body = v
	return s
}

type UpsertCollectionDataRequest struct {
	// The name of the collection.
	//
	// This parameter is required.
	//
	// example:
	//
	// document
	Collection *string `json:"Collection,omitempty" xml:"Collection,omitempty"`
	// The instance ID.
	//
	// > You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The name of the namespace. Default value: public.
	//
	// >  You can call the [CreateNamespace](https://help.aliyun.com/document_detail/2401495.html) operation to create a namespace and call the [ListNamespaces](https://help.aliyun.com/document_detail/2401502.html) operation to query a list of namespaces.
	//
	// example:
	//
	// mynamespace
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// The password of the namespace.
	//
	// This parameter is required.
	//
	// example:
	//
	// testpassword
	NamespacePassword *string `json:"NamespacePassword,omitempty" xml:"NamespacePassword,omitempty"`
	OwnerId           *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The region ID of the instance.
	//
	// >  You can call the [DescribeRegions](https://help.aliyun.com/document_detail/86912.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string                            `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Rows     []*UpsertCollectionDataRequestRows `json:"Rows,omitempty" xml:"Rows,omitempty" type:"Repeated"`
	// The ID of the workspace that consists of multiple AnalyticDB for PostgreSQL instances. You must specify one of the WorkspaceId and DBInstanceId parameters. If you specify both parameters, the WorkspaceId parameter takes effect.
	//
	// example:
	//
	// gp-ws-*****
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s UpsertCollectionDataRequest) String() string {
	return tea.Prettify(s)
}

func (s UpsertCollectionDataRequest) GoString() string {
	return s.String()
}

func (s *UpsertCollectionDataRequest) SetCollection(v string) *UpsertCollectionDataRequest {
	s.Collection = &v
	return s
}

func (s *UpsertCollectionDataRequest) SetDBInstanceId(v string) *UpsertCollectionDataRequest {
	s.DBInstanceId = &v
	return s
}

func (s *UpsertCollectionDataRequest) SetNamespace(v string) *UpsertCollectionDataRequest {
	s.Namespace = &v
	return s
}

func (s *UpsertCollectionDataRequest) SetNamespacePassword(v string) *UpsertCollectionDataRequest {
	s.NamespacePassword = &v
	return s
}

func (s *UpsertCollectionDataRequest) SetOwnerId(v int64) *UpsertCollectionDataRequest {
	s.OwnerId = &v
	return s
}

func (s *UpsertCollectionDataRequest) SetRegionId(v string) *UpsertCollectionDataRequest {
	s.RegionId = &v
	return s
}

func (s *UpsertCollectionDataRequest) SetRows(v []*UpsertCollectionDataRequestRows) *UpsertCollectionDataRequest {
	s.Rows = v
	return s
}

func (s *UpsertCollectionDataRequest) SetWorkspaceId(v string) *UpsertCollectionDataRequest {
	s.WorkspaceId = &v
	return s
}

type UpsertCollectionDataRequestRows struct {
	Id           *string                                      `json:"Id,omitempty" xml:"Id,omitempty"`
	Metadata     map[string]*string                           `json:"Metadata,omitempty" xml:"Metadata,omitempty"`
	SparseVector *UpsertCollectionDataRequestRowsSparseVector `json:"SparseVector,omitempty" xml:"SparseVector,omitempty" type:"Struct"`
	// This parameter is required.
	Vector []*float64 `json:"Vector,omitempty" xml:"Vector,omitempty" type:"Repeated"`
}

func (s UpsertCollectionDataRequestRows) String() string {
	return tea.Prettify(s)
}

func (s UpsertCollectionDataRequestRows) GoString() string {
	return s.String()
}

func (s *UpsertCollectionDataRequestRows) SetId(v string) *UpsertCollectionDataRequestRows {
	s.Id = &v
	return s
}

func (s *UpsertCollectionDataRequestRows) SetMetadata(v map[string]*string) *UpsertCollectionDataRequestRows {
	s.Metadata = v
	return s
}

func (s *UpsertCollectionDataRequestRows) SetSparseVector(v *UpsertCollectionDataRequestRowsSparseVector) *UpsertCollectionDataRequestRows {
	s.SparseVector = v
	return s
}

func (s *UpsertCollectionDataRequestRows) SetVector(v []*float64) *UpsertCollectionDataRequestRows {
	s.Vector = v
	return s
}

type UpsertCollectionDataRequestRowsSparseVector struct {
	Indices []*int64   `json:"Indices,omitempty" xml:"Indices,omitempty" type:"Repeated"`
	Values  []*float64 `json:"Values,omitempty" xml:"Values,omitempty" type:"Repeated"`
}

func (s UpsertCollectionDataRequestRowsSparseVector) String() string {
	return tea.Prettify(s)
}

func (s UpsertCollectionDataRequestRowsSparseVector) GoString() string {
	return s.String()
}

func (s *UpsertCollectionDataRequestRowsSparseVector) SetIndices(v []*int64) *UpsertCollectionDataRequestRowsSparseVector {
	s.Indices = v
	return s
}

func (s *UpsertCollectionDataRequestRowsSparseVector) SetValues(v []*float64) *UpsertCollectionDataRequestRowsSparseVector {
	s.Values = v
	return s
}

type UpsertCollectionDataShrinkRequest struct {
	// The name of the collection.
	//
	// This parameter is required.
	//
	// example:
	//
	// document
	Collection *string `json:"Collection,omitempty" xml:"Collection,omitempty"`
	// The instance ID.
	//
	// > You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The name of the namespace. Default value: public.
	//
	// >  You can call the [CreateNamespace](https://help.aliyun.com/document_detail/2401495.html) operation to create a namespace and call the [ListNamespaces](https://help.aliyun.com/document_detail/2401502.html) operation to query a list of namespaces.
	//
	// example:
	//
	// mynamespace
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// The password of the namespace.
	//
	// This parameter is required.
	//
	// example:
	//
	// testpassword
	NamespacePassword *string `json:"NamespacePassword,omitempty" xml:"NamespacePassword,omitempty"`
	OwnerId           *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The region ID of the instance.
	//
	// >  You can call the [DescribeRegions](https://help.aliyun.com/document_detail/86912.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId   *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	RowsShrink *string `json:"Rows,omitempty" xml:"Rows,omitempty"`
	// The ID of the workspace that consists of multiple AnalyticDB for PostgreSQL instances. You must specify one of the WorkspaceId and DBInstanceId parameters. If you specify both parameters, the WorkspaceId parameter takes effect.
	//
	// example:
	//
	// gp-ws-*****
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s UpsertCollectionDataShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s UpsertCollectionDataShrinkRequest) GoString() string {
	return s.String()
}

func (s *UpsertCollectionDataShrinkRequest) SetCollection(v string) *UpsertCollectionDataShrinkRequest {
	s.Collection = &v
	return s
}

func (s *UpsertCollectionDataShrinkRequest) SetDBInstanceId(v string) *UpsertCollectionDataShrinkRequest {
	s.DBInstanceId = &v
	return s
}

func (s *UpsertCollectionDataShrinkRequest) SetNamespace(v string) *UpsertCollectionDataShrinkRequest {
	s.Namespace = &v
	return s
}

func (s *UpsertCollectionDataShrinkRequest) SetNamespacePassword(v string) *UpsertCollectionDataShrinkRequest {
	s.NamespacePassword = &v
	return s
}

func (s *UpsertCollectionDataShrinkRequest) SetOwnerId(v int64) *UpsertCollectionDataShrinkRequest {
	s.OwnerId = &v
	return s
}

func (s *UpsertCollectionDataShrinkRequest) SetRegionId(v string) *UpsertCollectionDataShrinkRequest {
	s.RegionId = &v
	return s
}

func (s *UpsertCollectionDataShrinkRequest) SetRowsShrink(v string) *UpsertCollectionDataShrinkRequest {
	s.RowsShrink = &v
	return s
}

func (s *UpsertCollectionDataShrinkRequest) SetWorkspaceId(v string) *UpsertCollectionDataShrinkRequest {
	s.WorkspaceId = &v
	return s
}

type UpsertCollectionDataResponseBody struct {
	// The returned message.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **success**
	//
	// 	- **fail**
	//
	// example:
	//
	// success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s UpsertCollectionDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpsertCollectionDataResponseBody) GoString() string {
	return s.String()
}

func (s *UpsertCollectionDataResponseBody) SetMessage(v string) *UpsertCollectionDataResponseBody {
	s.Message = &v
	return s
}

func (s *UpsertCollectionDataResponseBody) SetRequestId(v string) *UpsertCollectionDataResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpsertCollectionDataResponseBody) SetStatus(v string) *UpsertCollectionDataResponseBody {
	s.Status = &v
	return s
}

type UpsertCollectionDataResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpsertCollectionDataResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpsertCollectionDataResponse) String() string {
	return tea.Prettify(s)
}

func (s UpsertCollectionDataResponse) GoString() string {
	return s.String()
}

func (s *UpsertCollectionDataResponse) SetHeaders(v map[string]*string) *UpsertCollectionDataResponse {
	s.Headers = v
	return s
}

func (s *UpsertCollectionDataResponse) SetStatusCode(v int32) *UpsertCollectionDataResponse {
	s.StatusCode = &v
	return s
}

func (s *UpsertCollectionDataResponse) SetBody(v *UpsertCollectionDataResponseBody) *UpsertCollectionDataResponse {
	s.Body = v
	return s
}

type UpsertCollectionDataAsyncRequest struct {
	// The name of the collection.
	//
	// >  You can call the [ListCollections](https://help.aliyun.com/document_detail/2401503.html) operation to query a list of collections.
	//
	// This parameter is required.
	//
	// example:
	//
	// document
	Collection *string `json:"Collection,omitempty" xml:"Collection,omitempty"`
	// The instance ID.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The Internet-accessible vector data file URL.
	//
	// >
	//
	// 	- The file content must be in the JSONL format. Each line consists of a list of JSON data, which specifies a set of vector data.
	//
	// 	- Data format of each line: `{String Id; Map<String, Object> Metadata; List<Double> Vector}`. Example: `{"Id":"myid", "Metadata": {"my_meta_key": "my_meta_value"}, "Vector": [1.234, -0.123]}`.
	//
	// 	- We recommend that you use SDKs to call this operation. SDKs encapsulate the UpsertCollectionDataAsyncAdvance method to upload on-premises files as data sources.
	//
	// This parameter is required.
	//
	// example:
	//
	// https://xx/vectors.jsonl
	FileUrl *string `json:"FileUrl,omitempty" xml:"FileUrl,omitempty"`
	// The name of the namespace. Default value: public.
	//
	// >  You can call the CreateNamespace operation to create a namespace and call the ListNamespaces operation to query a list of namespaces.
	//
	// example:
	//
	// mynamespace
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// The password of the namespace.
	//
	// >  The value of this parameter is specified when you call the CreateNamespace operation.
	//
	// This parameter is required.
	//
	// example:
	//
	// testpassword
	NamespacePassword *string `json:"NamespacePassword,omitempty" xml:"NamespacePassword,omitempty"`
	OwnerId           *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The region ID of the instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the Workspace composed of multiple database instances. This parameter and the DBInstanceId parameter cannot both be empty. When both are specified, this parameter takes precedence.
	//
	// example:
	//
	// gp-ws-*****
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s UpsertCollectionDataAsyncRequest) String() string {
	return tea.Prettify(s)
}

func (s UpsertCollectionDataAsyncRequest) GoString() string {
	return s.String()
}

func (s *UpsertCollectionDataAsyncRequest) SetCollection(v string) *UpsertCollectionDataAsyncRequest {
	s.Collection = &v
	return s
}

func (s *UpsertCollectionDataAsyncRequest) SetDBInstanceId(v string) *UpsertCollectionDataAsyncRequest {
	s.DBInstanceId = &v
	return s
}

func (s *UpsertCollectionDataAsyncRequest) SetFileUrl(v string) *UpsertCollectionDataAsyncRequest {
	s.FileUrl = &v
	return s
}

func (s *UpsertCollectionDataAsyncRequest) SetNamespace(v string) *UpsertCollectionDataAsyncRequest {
	s.Namespace = &v
	return s
}

func (s *UpsertCollectionDataAsyncRequest) SetNamespacePassword(v string) *UpsertCollectionDataAsyncRequest {
	s.NamespacePassword = &v
	return s
}

func (s *UpsertCollectionDataAsyncRequest) SetOwnerId(v int64) *UpsertCollectionDataAsyncRequest {
	s.OwnerId = &v
	return s
}

func (s *UpsertCollectionDataAsyncRequest) SetRegionId(v string) *UpsertCollectionDataAsyncRequest {
	s.RegionId = &v
	return s
}

func (s *UpsertCollectionDataAsyncRequest) SetWorkspaceId(v string) *UpsertCollectionDataAsyncRequest {
	s.WorkspaceId = &v
	return s
}

type UpsertCollectionDataAsyncAdvanceRequest struct {
	// The name of the collection.
	//
	// >  You can call the [ListCollections](https://help.aliyun.com/document_detail/2401503.html) operation to query a list of collections.
	//
	// This parameter is required.
	//
	// example:
	//
	// document
	Collection *string `json:"Collection,omitempty" xml:"Collection,omitempty"`
	// The instance ID.
	//
	// >  You can call the [DescribeDBInstances](https://help.aliyun.com/document_detail/86911.html) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.
	//
	// example:
	//
	// gp-xxxxxxxxx
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The Internet-accessible vector data file URL.
	//
	// >
	//
	// 	- The file content must be in the JSONL format. Each line consists of a list of JSON data, which specifies a set of vector data.
	//
	// 	- Data format of each line: `{String Id; Map<String, Object> Metadata; List<Double> Vector}`. Example: `{"Id":"myid", "Metadata": {"my_meta_key": "my_meta_value"}, "Vector": [1.234, -0.123]}`.
	//
	// 	- We recommend that you use SDKs to call this operation. SDKs encapsulate the UpsertCollectionDataAsyncAdvance method to upload on-premises files as data sources.
	//
	// This parameter is required.
	//
	// example:
	//
	// https://xx/vectors.jsonl
	FileUrlObject io.Reader `json:"FileUrl,omitempty" xml:"FileUrl,omitempty"`
	// The name of the namespace. Default value: public.
	//
	// >  You can call the CreateNamespace operation to create a namespace and call the ListNamespaces operation to query a list of namespaces.
	//
	// example:
	//
	// mynamespace
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// The password of the namespace.
	//
	// >  The value of this parameter is specified when you call the CreateNamespace operation.
	//
	// This parameter is required.
	//
	// example:
	//
	// testpassword
	NamespacePassword *string `json:"NamespacePassword,omitempty" xml:"NamespacePassword,omitempty"`
	OwnerId           *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The region ID of the instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the Workspace composed of multiple database instances. This parameter and the DBInstanceId parameter cannot both be empty. When both are specified, this parameter takes precedence.
	//
	// example:
	//
	// gp-ws-*****
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s UpsertCollectionDataAsyncAdvanceRequest) String() string {
	return tea.Prettify(s)
}

func (s UpsertCollectionDataAsyncAdvanceRequest) GoString() string {
	return s.String()
}

func (s *UpsertCollectionDataAsyncAdvanceRequest) SetCollection(v string) *UpsertCollectionDataAsyncAdvanceRequest {
	s.Collection = &v
	return s
}

func (s *UpsertCollectionDataAsyncAdvanceRequest) SetDBInstanceId(v string) *UpsertCollectionDataAsyncAdvanceRequest {
	s.DBInstanceId = &v
	return s
}

func (s *UpsertCollectionDataAsyncAdvanceRequest) SetFileUrlObject(v io.Reader) *UpsertCollectionDataAsyncAdvanceRequest {
	s.FileUrlObject = v
	return s
}

func (s *UpsertCollectionDataAsyncAdvanceRequest) SetNamespace(v string) *UpsertCollectionDataAsyncAdvanceRequest {
	s.Namespace = &v
	return s
}

func (s *UpsertCollectionDataAsyncAdvanceRequest) SetNamespacePassword(v string) *UpsertCollectionDataAsyncAdvanceRequest {
	s.NamespacePassword = &v
	return s
}

func (s *UpsertCollectionDataAsyncAdvanceRequest) SetOwnerId(v int64) *UpsertCollectionDataAsyncAdvanceRequest {
	s.OwnerId = &v
	return s
}

func (s *UpsertCollectionDataAsyncAdvanceRequest) SetRegionId(v string) *UpsertCollectionDataAsyncAdvanceRequest {
	s.RegionId = &v
	return s
}

func (s *UpsertCollectionDataAsyncAdvanceRequest) SetWorkspaceId(v string) *UpsertCollectionDataAsyncAdvanceRequest {
	s.WorkspaceId = &v
	return s
}

type UpsertCollectionDataAsyncResponseBody struct {
	// The job ID. It can be used to query the job status or cancel the job.
	//
	// example:
	//
	// 231460f8-75dc-405e-a669-0c5204887e91
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// The returned message.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// ABB39CC3-4488-4857-905D-2E4A051D0521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The status of the operation. Valid values:
	//
	// 	- **success**
	//
	// 	- **fail**
	//
	// example:
	//
	// success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s UpsertCollectionDataAsyncResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpsertCollectionDataAsyncResponseBody) GoString() string {
	return s.String()
}

func (s *UpsertCollectionDataAsyncResponseBody) SetJobId(v string) *UpsertCollectionDataAsyncResponseBody {
	s.JobId = &v
	return s
}

func (s *UpsertCollectionDataAsyncResponseBody) SetMessage(v string) *UpsertCollectionDataAsyncResponseBody {
	s.Message = &v
	return s
}

func (s *UpsertCollectionDataAsyncResponseBody) SetRequestId(v string) *UpsertCollectionDataAsyncResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpsertCollectionDataAsyncResponseBody) SetStatus(v string) *UpsertCollectionDataAsyncResponseBody {
	s.Status = &v
	return s
}

type UpsertCollectionDataAsyncResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpsertCollectionDataAsyncResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpsertCollectionDataAsyncResponse) String() string {
	return tea.Prettify(s)
}

func (s UpsertCollectionDataAsyncResponse) GoString() string {
	return s.String()
}

func (s *UpsertCollectionDataAsyncResponse) SetHeaders(v map[string]*string) *UpsertCollectionDataAsyncResponse {
	s.Headers = v
	return s
}

func (s *UpsertCollectionDataAsyncResponse) SetStatusCode(v int32) *UpsertCollectionDataAsyncResponse {
	s.StatusCode = &v
	return s
}

func (s *UpsertCollectionDataAsyncResponse) SetBody(v *UpsertCollectionDataAsyncResponseBody) *UpsertCollectionDataAsyncResponse {
	s.Body = v
	return s
}

type Client struct {
	openapi.Client
}

func NewClient(config *openapi.Config) (*Client, error) {
	client := new(Client)
	err := client.Init(config)
	return client, err
}

func (client *Client) Init(config *openapi.Config) (_err error) {
	_err = client.Client.Init(config)
	if _err != nil {
		return _err
	}
	client.EndpointRule = tea.String("regional")
	client.EndpointMap = map[string]*string{
		"cn-beijing":            tea.String("gpdb.aliyuncs.com"),
		"cn-hangzhou":           tea.String("gpdb.aliyuncs.com"),
		"cn-shanghai":           tea.String("gpdb.aliyuncs.com"),
		"cn-shenzhen":           tea.String("gpdb.aliyuncs.com"),
		"cn-hongkong":           tea.String("gpdb.aliyuncs.com"),
		"ap-southeast-1":        tea.String("gpdb.aliyuncs.com"),
		"us-west-1":             tea.String("gpdb.aliyuncs.com"),
		"us-east-1":             tea.String("gpdb.aliyuncs.com"),
		"cn-hangzhou-finance":   tea.String("gpdb.aliyuncs.com"),
		"cn-shanghai-finance-1": tea.String("gpdb.aliyuncs.com"),
		"cn-shenzhen-finance-1": tea.String("gpdb.aliyuncs.com"),
		"cn-qingdao":            tea.String("gpdb.aliyuncs.com"),
		"cn-north-2-gov-1":      tea.String("gpdb.aliyuncs.com"),
	}
	_err = client.CheckConfig(config)
	if _err != nil {
		return _err
	}
	client.Endpoint, _err = client.GetEndpoint(tea.String("gpdb"), client.RegionId, client.EndpointRule, client.Network, client.Suffix, client.EndpointMap, client.Endpoint)
	if _err != nil {
		return _err
	}

	return nil
}

func (client *Client) GetEndpoint(productId *string, regionId *string, endpointRule *string, network *string, suffix *string, endpointMap map[string]*string, endpoint *string) (_result *string, _err error) {
	if !tea.BoolValue(util.Empty(endpoint)) {
		_result = endpoint
		return _result, _err
	}

	if !tea.BoolValue(util.IsUnset(endpointMap)) && !tea.BoolValue(util.Empty(endpointMap[tea.StringValue(regionId)])) {
		_result = endpointMap[tea.StringValue(regionId)]
		return _result, _err
	}

	_body, _err := endpointutil.GetEndpointRules(productId, regionId, endpointRule, network, suffix)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Allocates a public endpoint for an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// You can call this operation to apply for a public endpoint for an AnalyticDB for PostgreSQL instance. Both the primary and instance endpoints of an AnalyticDB for PostgreSQL instance can be public endpoints. For more information, see [Endpoints of an instance and its primary coordinator node](https://help.aliyun.com/document_detail/204879.html).
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - AllocateInstancePublicConnectionRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AllocateInstancePublicConnectionResponse
func (client *Client) AllocateInstancePublicConnectionWithOptions(request *AllocateInstancePublicConnectionRequest, runtime *util.RuntimeOptions) (_result *AllocateInstancePublicConnectionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AddressType)) {
		query["AddressType"] = request.AddressType
	}

	if !tea.BoolValue(util.IsUnset(request.ConnectionStringPrefix)) {
		query["ConnectionStringPrefix"] = request.ConnectionStringPrefix
	}

	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Port)) {
		query["Port"] = request.Port
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AllocateInstancePublicConnection"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &AllocateInstancePublicConnectionResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &AllocateInstancePublicConnectionResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Allocates a public endpoint for an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// You can call this operation to apply for a public endpoint for an AnalyticDB for PostgreSQL instance. Both the primary and instance endpoints of an AnalyticDB for PostgreSQL instance can be public endpoints. For more information, see [Endpoints of an instance and its primary coordinator node](https://help.aliyun.com/document_detail/204879.html).
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - AllocateInstancePublicConnectionRequest
//
// @return AllocateInstancePublicConnectionResponse
func (client *Client) AllocateInstancePublicConnection(request *AllocateInstancePublicConnectionRequest) (_result *AllocateInstancePublicConnectionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AllocateInstancePublicConnectionResponse{}
	_body, _err := client.AllocateInstancePublicConnectionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Binds a resource group to a database role.
//
// @param tmpReq - BindDBResourceGroupWithRoleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return BindDBResourceGroupWithRoleResponse
func (client *Client) BindDBResourceGroupWithRoleWithOptions(tmpReq *BindDBResourceGroupWithRoleRequest, runtime *util.RuntimeOptions) (_result *BindDBResourceGroupWithRoleResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &BindDBResourceGroupWithRoleShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.RoleList)) {
		request.RoleListShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.RoleList, tea.String("RoleList"), tea.String("simple"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupName)) {
		query["ResourceGroupName"] = request.ResourceGroupName
	}

	if !tea.BoolValue(util.IsUnset(request.RoleListShrink)) {
		query["RoleList"] = request.RoleListShrink
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("BindDBResourceGroupWithRole"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &BindDBResourceGroupWithRoleResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &BindDBResourceGroupWithRoleResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Binds a resource group to a database role.
//
// @param request - BindDBResourceGroupWithRoleRequest
//
// @return BindDBResourceGroupWithRoleResponse
func (client *Client) BindDBResourceGroupWithRole(request *BindDBResourceGroupWithRoleRequest) (_result *BindDBResourceGroupWithRoleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BindDBResourceGroupWithRoleResponse{}
	_body, _err := client.BindDBResourceGroupWithRoleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 取消创建索引任务
//
// @param request - CancelCreateIndexJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CancelCreateIndexJobResponse
func (client *Client) CancelCreateIndexJobWithOptions(request *CancelCreateIndexJobRequest, runtime *util.RuntimeOptions) (_result *CancelCreateIndexJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Collection)) {
		query["Collection"] = request.Collection
	}

	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	if !tea.BoolValue(util.IsUnset(request.Namespace)) {
		query["Namespace"] = request.Namespace
	}

	if !tea.BoolValue(util.IsUnset(request.NamespacePassword)) {
		query["NamespacePassword"] = request.NamespacePassword
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		query["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CancelCreateIndexJob"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &CancelCreateIndexJobResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &CancelCreateIndexJobResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// 取消创建索引任务
//
// @param request - CancelCreateIndexJobRequest
//
// @return CancelCreateIndexJobResponse
func (client *Client) CancelCreateIndexJob(request *CancelCreateIndexJobRequest) (_result *CancelCreateIndexJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CancelCreateIndexJobResponse{}
	_body, _err := client.CancelCreateIndexJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Cancels an asynchronous document upload job based on the job ID.
//
// Description:
//
// This operation is related to the UploadDocumentAsync operation. You can call this operation to cancel a document upload job.
//
// >  If the canceling operation is complete, failed, or is canceled, you cannot call the operation again. The canceling operation only interrupts the document upload job. To remove the uploaded data, you must manually remove it or call the DeleteCollectionData operation. You can also call the document upload operation to overwrite the data by using the same FileName parameter.
//
// @param request - CancelUploadDocumentJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CancelUploadDocumentJobResponse
func (client *Client) CancelUploadDocumentJobWithOptions(request *CancelUploadDocumentJobRequest, runtime *util.RuntimeOptions) (_result *CancelUploadDocumentJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Collection)) {
		body["Collection"] = request.Collection
	}

	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		body["JobId"] = request.JobId
	}

	if !tea.BoolValue(util.IsUnset(request.Namespace)) {
		body["Namespace"] = request.Namespace
	}

	if !tea.BoolValue(util.IsUnset(request.NamespacePassword)) {
		body["NamespacePassword"] = request.NamespacePassword
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CancelUploadDocumentJob"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &CancelUploadDocumentJobResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &CancelUploadDocumentJobResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Cancels an asynchronous document upload job based on the job ID.
//
// Description:
//
// This operation is related to the UploadDocumentAsync operation. You can call this operation to cancel a document upload job.
//
// >  If the canceling operation is complete, failed, or is canceled, you cannot call the operation again. The canceling operation only interrupts the document upload job. To remove the uploaded data, you must manually remove it or call the DeleteCollectionData operation. You can also call the document upload operation to overwrite the data by using the same FileName parameter.
//
// @param request - CancelUploadDocumentJobRequest
//
// @return CancelUploadDocumentJobResponse
func (client *Client) CancelUploadDocumentJob(request *CancelUploadDocumentJobRequest) (_result *CancelUploadDocumentJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CancelUploadDocumentJobResponse{}
	_body, _err := client.CancelUploadDocumentJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Cancels an asynchronous vector data upload job by using a job ID.
//
// Description:
//
// This operation is related to the `UpsertCollectionDataAsync` operation. You can call this operation to cancel an upload job.
//
// >  If the canceling operation is complete, failed, or is canceled, you cannot call the operation again. The canceling operation only interrupts the upload job. To remove the uploaded data, you must manually remove it or call the DeleteCollectionData operation.
//
// @param request - CancelUpsertCollectionDataJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CancelUpsertCollectionDataJobResponse
func (client *Client) CancelUpsertCollectionDataJobWithOptions(request *CancelUpsertCollectionDataJobRequest, runtime *util.RuntimeOptions) (_result *CancelUpsertCollectionDataJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		query["WorkspaceId"] = request.WorkspaceId
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Collection)) {
		body["Collection"] = request.Collection
	}

	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		body["JobId"] = request.JobId
	}

	if !tea.BoolValue(util.IsUnset(request.Namespace)) {
		body["Namespace"] = request.Namespace
	}

	if !tea.BoolValue(util.IsUnset(request.NamespacePassword)) {
		body["NamespacePassword"] = request.NamespacePassword
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CancelUpsertCollectionDataJob"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &CancelUpsertCollectionDataJobResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &CancelUpsertCollectionDataJobResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Cancels an asynchronous vector data upload job by using a job ID.
//
// Description:
//
// This operation is related to the `UpsertCollectionDataAsync` operation. You can call this operation to cancel an upload job.
//
// >  If the canceling operation is complete, failed, or is canceled, you cannot call the operation again. The canceling operation only interrupts the upload job. To remove the uploaded data, you must manually remove it or call the DeleteCollectionData operation.
//
// @param request - CancelUpsertCollectionDataJobRequest
//
// @return CancelUpsertCollectionDataJobResponse
func (client *Client) CancelUpsertCollectionDataJob(request *CancelUpsertCollectionDataJobRequest) (_result *CancelUpsertCollectionDataJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CancelUpsertCollectionDataJobResponse{}
	_body, _err := client.CancelUpsertCollectionDataJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Checks the configurations of a Hadoop data source.
//
// @param request - CheckHadoopDataSourceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CheckHadoopDataSourceResponse
func (client *Client) CheckHadoopDataSourceWithOptions(request *CheckHadoopDataSourceRequest, runtime *util.RuntimeOptions) (_result *CheckHadoopDataSourceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CheckDir)) {
		query["CheckDir"] = request.CheckDir
	}

	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.DataSourceId)) {
		query["DataSourceId"] = request.DataSourceId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CheckHadoopDataSource"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &CheckHadoopDataSourceResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &CheckHadoopDataSourceResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Checks the configurations of a Hadoop data source.
//
// @param request - CheckHadoopDataSourceRequest
//
// @return CheckHadoopDataSourceResponse
func (client *Client) CheckHadoopDataSource(request *CheckHadoopDataSourceRequest) (_result *CheckHadoopDataSourceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CheckHadoopDataSourceResponse{}
	_body, _err := client.CheckHadoopDataSourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Check Hadoop Cluster Network Connectivity
//
// @param request - CheckHadoopNetConnectionRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CheckHadoopNetConnectionResponse
func (client *Client) CheckHadoopNetConnectionWithOptions(request *CheckHadoopNetConnectionRequest, runtime *util.RuntimeOptions) (_result *CheckHadoopNetConnectionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.DataSourceId)) {
		query["DataSourceId"] = request.DataSourceId
	}

	if !tea.BoolValue(util.IsUnset(request.EmrInstanceId)) {
		query["EmrInstanceId"] = request.EmrInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CheckHadoopNetConnection"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &CheckHadoopNetConnectionResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &CheckHadoopNetConnectionResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Check Hadoop Cluster Network Connectivity
//
// @param request - CheckHadoopNetConnectionRequest
//
// @return CheckHadoopNetConnectionResponse
func (client *Client) CheckHadoopNetConnection(request *CheckHadoopNetConnectionRequest) (_result *CheckHadoopNetConnectionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CheckHadoopNetConnectionResponse{}
	_body, _err := client.CheckHadoopNetConnectionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Check the network connectivity of the JDBC connection string
//
// @param request - CheckJDBCSourceNetConnectionRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CheckJDBCSourceNetConnectionResponse
func (client *Client) CheckJDBCSourceNetConnectionWithOptions(request *CheckJDBCSourceNetConnectionRequest, runtime *util.RuntimeOptions) (_result *CheckJDBCSourceNetConnectionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.DataSourceId)) {
		query["DataSourceId"] = request.DataSourceId
	}

	if !tea.BoolValue(util.IsUnset(request.JdbcConnectionString)) {
		query["JdbcConnectionString"] = request.JdbcConnectionString
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CheckJDBCSourceNetConnection"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &CheckJDBCSourceNetConnectionResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &CheckJDBCSourceNetConnectionResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Check the network connectivity of the JDBC connection string
//
// @param request - CheckJDBCSourceNetConnectionRequest
//
// @return CheckJDBCSourceNetConnectionResponse
func (client *Client) CheckJDBCSourceNetConnection(request *CheckJDBCSourceNetConnectionRequest) (_result *CheckJDBCSourceNetConnectionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CheckJDBCSourceNetConnectionResponse{}
	_body, _err := client.CheckJDBCSourceNetConnectionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries whether a service-linked role is created.
//
// @param request - CheckServiceLinkedRoleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CheckServiceLinkedRoleResponse
func (client *Client) CheckServiceLinkedRoleWithOptions(request *CheckServiceLinkedRoleRequest, runtime *util.RuntimeOptions) (_result *CheckServiceLinkedRoleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CheckServiceLinkedRole"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &CheckServiceLinkedRoleResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &CheckServiceLinkedRoleResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries whether a service-linked role is created.
//
// @param request - CheckServiceLinkedRoleRequest
//
// @return CheckServiceLinkedRoleResponse
func (client *Client) CheckServiceLinkedRole(request *CheckServiceLinkedRoleRequest) (_result *CheckServiceLinkedRoleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CheckServiceLinkedRoleResponse{}
	_body, _err := client.CheckServiceLinkedRoleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 恢复数据至指定实例
//
// @param request - CloneDBInstanceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CloneDBInstanceResponse
func (client *Client) CloneDBInstanceWithOptions(request *CloneDBInstanceRequest, runtime *util.RuntimeOptions) (_result *CloneDBInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BackupId)) {
		query["BackupId"] = request.BackupId
	}

	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.SrcDbInstanceName)) {
		query["SrcDbInstanceName"] = request.SrcDbInstanceName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CloneDBInstance"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &CloneDBInstanceResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &CloneDBInstanceResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// 恢复数据至指定实例
//
// @param request - CloneDBInstanceRequest
//
// @return CloneDBInstanceResponse
func (client *Client) CloneDBInstance(request *CloneDBInstanceRequest) (_result *CloneDBInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CloneDBInstanceResponse{}
	_body, _err := client.CloneDBInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates an initial account for an AnalyticDB for PostgreSQL instance.
//
// Description:
//
//   Before you can use an AnalyticDB for PostgreSQL instance, you must create an initial account for the instance.
//
// 	- You can call this operation to create only initial accounts. For information about how to create other types of accounts, see [Create a database account](https://help.aliyun.com/document_detail/50206.html).
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - CreateAccountRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateAccountResponse
func (client *Client) CreateAccountWithOptions(request *CreateAccountRequest, runtime *util.RuntimeOptions) (_result *CreateAccountResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccountDescription)) {
		query["AccountDescription"] = request.AccountDescription
	}

	if !tea.BoolValue(util.IsUnset(request.AccountName)) {
		query["AccountName"] = request.AccountName
	}

	if !tea.BoolValue(util.IsUnset(request.AccountPassword)) {
		query["AccountPassword"] = request.AccountPassword
	}

	if !tea.BoolValue(util.IsUnset(request.AccountType)) {
		query["AccountType"] = request.AccountType
	}

	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.DatabaseName)) {
		query["DatabaseName"] = request.DatabaseName
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateAccount"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &CreateAccountResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &CreateAccountResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Creates an initial account for an AnalyticDB for PostgreSQL instance.
//
// Description:
//
//   Before you can use an AnalyticDB for PostgreSQL instance, you must create an initial account for the instance.
//
// 	- You can call this operation to create only initial accounts. For information about how to create other types of accounts, see [Create a database account](https://help.aliyun.com/document_detail/50206.html).
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - CreateAccountRequest
//
// @return CreateAccountResponse
func (client *Client) CreateAccount(request *CreateAccountRequest) (_result *CreateAccountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateAccountResponse{}
	_body, _err := client.CreateAccountWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 创建备份
//
// @param request - CreateBackupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateBackupResponse
func (client *Client) CreateBackupWithOptions(request *CreateBackupRequest, runtime *util.RuntimeOptions) (_result *CreateBackupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateBackup"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &CreateBackupResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &CreateBackupResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// 创建备份
//
// @param request - CreateBackupRequest
//
// @return CreateBackupResponse
func (client *Client) CreateBackup(request *CreateBackupRequest) (_result *CreateBackupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateBackupResponse{}
	_body, _err := client.CreateBackupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a vector collection.
//
// @param tmpReq - CreateCollectionRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateCollectionResponse
func (client *Client) CreateCollectionWithOptions(tmpReq *CreateCollectionRequest, runtime *util.RuntimeOptions) (_result *CreateCollectionResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &CreateCollectionShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.SparseVectorIndexConfig)) {
		request.SparseVectorIndexConfigShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.SparseVectorIndexConfig, tea.String("SparseVectorIndexConfig"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Collection)) {
		query["Collection"] = request.Collection
	}

	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Dimension)) {
		query["Dimension"] = request.Dimension
	}

	if !tea.BoolValue(util.IsUnset(request.ExternalStorage)) {
		query["ExternalStorage"] = request.ExternalStorage
	}

	if !tea.BoolValue(util.IsUnset(request.FullTextRetrievalFields)) {
		query["FullTextRetrievalFields"] = request.FullTextRetrievalFields
	}

	if !tea.BoolValue(util.IsUnset(request.HnswEfConstruction)) {
		query["HnswEfConstruction"] = request.HnswEfConstruction
	}

	if !tea.BoolValue(util.IsUnset(request.HnswM)) {
		query["HnswM"] = request.HnswM
	}

	if !tea.BoolValue(util.IsUnset(request.ManagerAccount)) {
		query["ManagerAccount"] = request.ManagerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ManagerAccountPassword)) {
		query["ManagerAccountPassword"] = request.ManagerAccountPassword
	}

	if !tea.BoolValue(util.IsUnset(request.Metadata)) {
		query["Metadata"] = request.Metadata
	}

	if !tea.BoolValue(util.IsUnset(request.MetadataIndices)) {
		query["MetadataIndices"] = request.MetadataIndices
	}

	if !tea.BoolValue(util.IsUnset(request.Metrics)) {
		query["Metrics"] = request.Metrics
	}

	if !tea.BoolValue(util.IsUnset(request.Namespace)) {
		query["Namespace"] = request.Namespace
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Parser)) {
		query["Parser"] = request.Parser
	}

	if !tea.BoolValue(util.IsUnset(request.PqEnable)) {
		query["PqEnable"] = request.PqEnable
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.SparseVectorIndexConfigShrink)) {
		query["SparseVectorIndexConfig"] = request.SparseVectorIndexConfigShrink
	}

	if !tea.BoolValue(util.IsUnset(request.SupportSparse)) {
		query["SupportSparse"] = request.SupportSparse
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		query["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateCollection"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &CreateCollectionResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &CreateCollectionResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Creates a vector collection.
//
// @param request - CreateCollectionRequest
//
// @return CreateCollectionResponse
func (client *Client) CreateCollection(request *CreateCollectionRequest) (_result *CreateCollectionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateCollectionResponse{}
	_body, _err := client.CreateCollectionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Create Instance
//
// Description:
//
// Before using this interface, please make sure you have fully understood the [billing method](https://help.aliyun.com/document_detail/35406.html) and <props="china">[pricing](https://www.aliyun.com/price/product#/gpdb/detail/GreenplumPost)<props="intl">[pricing](https://www.alibabacloud.com/zh/product/hybriddb-postgresql/pricing) of the AnalyticDB for PostgreSQL product.
//
// @param request - CreateDBInstanceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateDBInstanceResponse
func (client *Client) CreateDBInstanceWithOptions(request *CreateDBInstanceRequest, runtime *util.RuntimeOptions) (_result *CreateDBInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AINodeSpecInfos)) {
		query["AINodeSpecInfos"] = request.AINodeSpecInfos
	}

	if !tea.BoolValue(util.IsUnset(request.BackupId)) {
		query["BackupId"] = request.BackupId
	}

	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		query["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.CreateSampleData)) {
		query["CreateSampleData"] = request.CreateSampleData
	}

	if !tea.BoolValue(util.IsUnset(request.DBInstanceCategory)) {
		query["DBInstanceCategory"] = request.DBInstanceCategory
	}

	if !tea.BoolValue(util.IsUnset(request.DBInstanceClass)) {
		query["DBInstanceClass"] = request.DBInstanceClass
	}

	if !tea.BoolValue(util.IsUnset(request.DBInstanceDescription)) {
		query["DBInstanceDescription"] = request.DBInstanceDescription
	}

	if !tea.BoolValue(util.IsUnset(request.DBInstanceGroupCount)) {
		query["DBInstanceGroupCount"] = request.DBInstanceGroupCount
	}

	if !tea.BoolValue(util.IsUnset(request.DBInstanceMode)) {
		query["DBInstanceMode"] = request.DBInstanceMode
	}

	if !tea.BoolValue(util.IsUnset(request.DeployMode)) {
		query["DeployMode"] = request.DeployMode
	}

	if !tea.BoolValue(util.IsUnset(request.EnableSSL)) {
		query["EnableSSL"] = request.EnableSSL
	}

	if !tea.BoolValue(util.IsUnset(request.EncryptionKey)) {
		query["EncryptionKey"] = request.EncryptionKey
	}

	if !tea.BoolValue(util.IsUnset(request.EncryptionType)) {
		query["EncryptionType"] = request.EncryptionType
	}

	if !tea.BoolValue(util.IsUnset(request.Engine)) {
		query["Engine"] = request.Engine
	}

	if !tea.BoolValue(util.IsUnset(request.EngineVersion)) {
		query["EngineVersion"] = request.EngineVersion
	}

	if !tea.BoolValue(util.IsUnset(request.IdleTime)) {
		query["IdleTime"] = request.IdleTime
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceNetworkType)) {
		query["InstanceNetworkType"] = request.InstanceNetworkType
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceSpec)) {
		query["InstanceSpec"] = request.InstanceSpec
	}

	if !tea.BoolValue(util.IsUnset(request.MasterAISpec)) {
		query["MasterAISpec"] = request.MasterAISpec
	}

	if !tea.BoolValue(util.IsUnset(request.MasterCU)) {
		query["MasterCU"] = request.MasterCU
	}

	if !tea.BoolValue(util.IsUnset(request.MasterNodeNum)) {
		query["MasterNodeNum"] = request.MasterNodeNum
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PayType)) {
		query["PayType"] = request.PayType
	}

	if !tea.BoolValue(util.IsUnset(request.Period)) {
		query["Period"] = request.Period
	}

	if !tea.BoolValue(util.IsUnset(request.PrivateIpAddress)) {
		query["PrivateIpAddress"] = request.PrivateIpAddress
	}

	if !tea.BoolValue(util.IsUnset(request.ProdType)) {
		query["ProdType"] = request.ProdType
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityIPList)) {
		query["SecurityIPList"] = request.SecurityIPList
	}

	if !tea.BoolValue(util.IsUnset(request.SegDiskPerformanceLevel)) {
		query["SegDiskPerformanceLevel"] = request.SegDiskPerformanceLevel
	}

	if !tea.BoolValue(util.IsUnset(request.SegNodeNum)) {
		query["SegNodeNum"] = request.SegNodeNum
	}

	if !tea.BoolValue(util.IsUnset(request.SegStorageType)) {
		query["SegStorageType"] = request.SegStorageType
	}

	if !tea.BoolValue(util.IsUnset(request.ServerlessMode)) {
		query["ServerlessMode"] = request.ServerlessMode
	}

	if !tea.BoolValue(util.IsUnset(request.ServerlessResource)) {
		query["ServerlessResource"] = request.ServerlessResource
	}

	if !tea.BoolValue(util.IsUnset(request.SrcDbInstanceName)) {
		query["SrcDbInstanceName"] = request.SrcDbInstanceName
	}

	if !tea.BoolValue(util.IsUnset(request.StandbyVSwitchId)) {
		query["StandbyVSwitchId"] = request.StandbyVSwitchId
	}

	if !tea.BoolValue(util.IsUnset(request.StandbyZoneId)) {
		query["StandbyZoneId"] = request.StandbyZoneId
	}

	if !tea.BoolValue(util.IsUnset(request.StorageSize)) {
		query["StorageSize"] = request.StorageSize
	}

	if !tea.BoolValue(util.IsUnset(request.StorageType)) {
		query["StorageType"] = request.StorageType
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	if !tea.BoolValue(util.IsUnset(request.UsedTime)) {
		query["UsedTime"] = request.UsedTime
	}

	if !tea.BoolValue(util.IsUnset(request.VPCId)) {
		query["VPCId"] = request.VPCId
	}

	if !tea.BoolValue(util.IsUnset(request.VSwitchId)) {
		query["VSwitchId"] = request.VSwitchId
	}

	if !tea.BoolValue(util.IsUnset(request.VectorConfigurationStatus)) {
		query["VectorConfigurationStatus"] = request.VectorConfigurationStatus
	}

	if !tea.BoolValue(util.IsUnset(request.ZoneId)) {
		query["ZoneId"] = request.ZoneId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateDBInstance"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &CreateDBInstanceResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &CreateDBInstanceResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Create Instance
//
// Description:
//
// Before using this interface, please make sure you have fully understood the [billing method](https://help.aliyun.com/document_detail/35406.html) and <props="china">[pricing](https://www.aliyun.com/price/product#/gpdb/detail/GreenplumPost)<props="intl">[pricing](https://www.alibabacloud.com/zh/product/hybriddb-postgresql/pricing) of the AnalyticDB for PostgreSQL product.
//
// @param request - CreateDBInstanceRequest
//
// @return CreateDBInstanceResponse
func (client *Client) CreateDBInstance(request *CreateDBInstanceRequest) (_result *CreateDBInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateDBInstanceResponse{}
	_body, _err := client.CreateDBInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a plan for an AnalyticDB for PostgreSQL instance.
//
// Description:
//
//   The plan management feature is supported only for pay-as-you-go instances.
//
// 	- When you change the compute node specifications or change the number of compute nodes, transient connections may occur. We recommend that you perform these operations during off-peak hours.
//
// Before you call this operation, make sure that you are familiar with the billing of AnalyticDB for PostgreSQL. For more information, see [Billing methods](https://help.aliyun.com/document_detail/35406.html) and [AnalyticDB for PostgreSQL pricing](https://www.alibabacloud.com/zh/product/hybriddb-postgresql/pricing).
//
// @param request - CreateDBInstancePlanRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateDBInstancePlanResponse
func (client *Client) CreateDBInstancePlanWithOptions(request *CreateDBInstancePlanRequest, runtime *util.RuntimeOptions) (_result *CreateDBInstancePlanResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PlanConfig)) {
		query["PlanConfig"] = request.PlanConfig
	}

	if !tea.BoolValue(util.IsUnset(request.PlanDesc)) {
		query["PlanDesc"] = request.PlanDesc
	}

	if !tea.BoolValue(util.IsUnset(request.PlanEndDate)) {
		query["PlanEndDate"] = request.PlanEndDate
	}

	if !tea.BoolValue(util.IsUnset(request.PlanName)) {
		query["PlanName"] = request.PlanName
	}

	if !tea.BoolValue(util.IsUnset(request.PlanScheduleType)) {
		query["PlanScheduleType"] = request.PlanScheduleType
	}

	if !tea.BoolValue(util.IsUnset(request.PlanStartDate)) {
		query["PlanStartDate"] = request.PlanStartDate
	}

	if !tea.BoolValue(util.IsUnset(request.PlanType)) {
		query["PlanType"] = request.PlanType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateDBInstancePlan"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &CreateDBInstancePlanResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &CreateDBInstancePlanResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Creates a plan for an AnalyticDB for PostgreSQL instance.
//
// Description:
//
//   The plan management feature is supported only for pay-as-you-go instances.
//
// 	- When you change the compute node specifications or change the number of compute nodes, transient connections may occur. We recommend that you perform these operations during off-peak hours.
//
// Before you call this operation, make sure that you are familiar with the billing of AnalyticDB for PostgreSQL. For more information, see [Billing methods](https://help.aliyun.com/document_detail/35406.html) and [AnalyticDB for PostgreSQL pricing](https://www.alibabacloud.com/zh/product/hybriddb-postgresql/pricing).
//
// @param request - CreateDBInstancePlanRequest
//
// @return CreateDBInstancePlanResponse
func (client *Client) CreateDBInstancePlan(request *CreateDBInstancePlanRequest) (_result *CreateDBInstancePlanResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateDBInstancePlanResponse{}
	_body, _err := client.CreateDBInstancePlanWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a resource group.
//
// @param request - CreateDBResourceGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateDBResourceGroupResponse
func (client *Client) CreateDBResourceGroupWithOptions(request *CreateDBResourceGroupRequest, runtime *util.RuntimeOptions) (_result *CreateDBResourceGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupConfig)) {
		query["ResourceGroupConfig"] = request.ResourceGroupConfig
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupName)) {
		query["ResourceGroupName"] = request.ResourceGroupName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateDBResourceGroup"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &CreateDBResourceGroupResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &CreateDBResourceGroupResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Creates a resource group.
//
// @param request - CreateDBResourceGroupRequest
//
// @return CreateDBResourceGroupResponse
func (client *Client) CreateDBResourceGroup(request *CreateDBResourceGroupRequest) (_result *CreateDBResourceGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateDBResourceGroupResponse{}
	_body, _err := client.CreateDBResourceGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a document collection.
//
// @param request - CreateDocumentCollectionRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateDocumentCollectionResponse
func (client *Client) CreateDocumentCollectionWithOptions(request *CreateDocumentCollectionRequest, runtime *util.RuntimeOptions) (_result *CreateDocumentCollectionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Collection)) {
		query["Collection"] = request.Collection
	}

	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Dimension)) {
		query["Dimension"] = request.Dimension
	}

	if !tea.BoolValue(util.IsUnset(request.EmbeddingModel)) {
		query["EmbeddingModel"] = request.EmbeddingModel
	}

	if !tea.BoolValue(util.IsUnset(request.ExternalStorage)) {
		query["ExternalStorage"] = request.ExternalStorage
	}

	if !tea.BoolValue(util.IsUnset(request.FullTextRetrievalFields)) {
		query["FullTextRetrievalFields"] = request.FullTextRetrievalFields
	}

	if !tea.BoolValue(util.IsUnset(request.HnswEfConstruction)) {
		query["HnswEfConstruction"] = request.HnswEfConstruction
	}

	if !tea.BoolValue(util.IsUnset(request.HnswM)) {
		query["HnswM"] = request.HnswM
	}

	if !tea.BoolValue(util.IsUnset(request.ManagerAccount)) {
		query["ManagerAccount"] = request.ManagerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ManagerAccountPassword)) {
		query["ManagerAccountPassword"] = request.ManagerAccountPassword
	}

	if !tea.BoolValue(util.IsUnset(request.Metadata)) {
		query["Metadata"] = request.Metadata
	}

	if !tea.BoolValue(util.IsUnset(request.MetadataIndices)) {
		query["MetadataIndices"] = request.MetadataIndices
	}

	if !tea.BoolValue(util.IsUnset(request.Metrics)) {
		query["Metrics"] = request.Metrics
	}

	if !tea.BoolValue(util.IsUnset(request.Namespace)) {
		query["Namespace"] = request.Namespace
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Parser)) {
		query["Parser"] = request.Parser
	}

	if !tea.BoolValue(util.IsUnset(request.PqEnable)) {
		query["PqEnable"] = request.PqEnable
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateDocumentCollection"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &CreateDocumentCollectionResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &CreateDocumentCollectionResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Creates a document collection.
//
// @param request - CreateDocumentCollectionRequest
//
// @return CreateDocumentCollectionResponse
func (client *Client) CreateDocumentCollection(request *CreateDocumentCollectionRequest) (_result *CreateDocumentCollectionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateDocumentCollectionResponse{}
	_body, _err := client.CreateDocumentCollectionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Install extensions.
//
// @param request - CreateExtensionsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateExtensionsResponse
func (client *Client) CreateExtensionsWithOptions(request *CreateExtensionsRequest, runtime *util.RuntimeOptions) (_result *CreateExtensionsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.DBNames)) {
		query["DBNames"] = request.DBNames
	}

	if !tea.BoolValue(util.IsUnset(request.Extensions)) {
		query["Extensions"] = request.Extensions
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateExtensions"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &CreateExtensionsResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &CreateExtensionsResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Install extensions.
//
// @param request - CreateExtensionsRequest
//
// @return CreateExtensionsResponse
func (client *Client) CreateExtensions(request *CreateExtensionsRequest) (_result *CreateExtensionsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateExtensionsResponse{}
	_body, _err := client.CreateExtensionsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Create External Data Service
//
// @param request - CreateExternalDataServiceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateExternalDataServiceResponse
func (client *Client) CreateExternalDataServiceWithOptions(request *CreateExternalDataServiceRequest, runtime *util.RuntimeOptions) (_result *CreateExternalDataServiceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceDescription)) {
		query["ServiceDescription"] = request.ServiceDescription
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceName)) {
		query["ServiceName"] = request.ServiceName
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceSpec)) {
		query["ServiceSpec"] = request.ServiceSpec
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateExternalDataService"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &CreateExternalDataServiceResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &CreateExternalDataServiceResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Create External Data Service
//
// @param request - CreateExternalDataServiceRequest
//
// @return CreateExternalDataServiceResponse
func (client *Client) CreateExternalDataService(request *CreateExternalDataServiceRequest) (_result *CreateExternalDataServiceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateExternalDataServiceResponse{}
	_body, _err := client.CreateExternalDataServiceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Create Hadoop data source configuration
//
// @param request - CreateHadoopDataSourceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateHadoopDataSourceResponse
func (client *Client) CreateHadoopDataSourceWithOptions(request *CreateHadoopDataSourceRequest, runtime *util.RuntimeOptions) (_result *CreateHadoopDataSourceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.DataSourceDescription)) {
		query["DataSourceDescription"] = request.DataSourceDescription
	}

	if !tea.BoolValue(util.IsUnset(request.DataSourceName)) {
		query["DataSourceName"] = request.DataSourceName
	}

	if !tea.BoolValue(util.IsUnset(request.DataSourceType)) {
		query["DataSourceType"] = request.DataSourceType
	}

	if !tea.BoolValue(util.IsUnset(request.EmrInstanceId)) {
		query["EmrInstanceId"] = request.EmrInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.HDFSConf)) {
		query["HDFSConf"] = request.HDFSConf
	}

	if !tea.BoolValue(util.IsUnset(request.HadoopCoreConf)) {
		query["HadoopCoreConf"] = request.HadoopCoreConf
	}

	if !tea.BoolValue(util.IsUnset(request.HadoopCreateType)) {
		query["HadoopCreateType"] = request.HadoopCreateType
	}

	if !tea.BoolValue(util.IsUnset(request.HadoopHostsAddress)) {
		query["HadoopHostsAddress"] = request.HadoopHostsAddress
	}

	if !tea.BoolValue(util.IsUnset(request.HiveConf)) {
		query["HiveConf"] = request.HiveConf
	}

	if !tea.BoolValue(util.IsUnset(request.MapReduceConf)) {
		query["MapReduceConf"] = request.MapReduceConf
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.YarnConf)) {
		query["YarnConf"] = request.YarnConf
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateHadoopDataSource"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &CreateHadoopDataSourceResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &CreateHadoopDataSourceResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Create Hadoop data source configuration
//
// @param request - CreateHadoopDataSourceRequest
//
// @return CreateHadoopDataSourceResponse
func (client *Client) CreateHadoopDataSource(request *CreateHadoopDataSourceRequest) (_result *CreateHadoopDataSourceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateHadoopDataSourceResponse{}
	_body, _err := client.CreateHadoopDataSourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 创建索引
//
// @param request - CreateIndexRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateIndexResponse
func (client *Client) CreateIndexWithOptions(request *CreateIndexRequest, runtime *util.RuntimeOptions) (_result *CreateIndexResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Collection)) {
		query["Collection"] = request.Collection
	}

	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.IndexConfig)) {
		query["IndexConfig"] = request.IndexConfig
	}

	if !tea.BoolValue(util.IsUnset(request.IndexField)) {
		query["IndexField"] = request.IndexField
	}

	if !tea.BoolValue(util.IsUnset(request.IndexName)) {
		query["IndexName"] = request.IndexName
	}

	if !tea.BoolValue(util.IsUnset(request.Namespace)) {
		query["Namespace"] = request.Namespace
	}

	if !tea.BoolValue(util.IsUnset(request.NamespacePassword)) {
		query["NamespacePassword"] = request.NamespacePassword
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		query["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateIndex"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &CreateIndexResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &CreateIndexResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// 创建索引
//
// @param request - CreateIndexRequest
//
// @return CreateIndexResponse
func (client *Client) CreateIndex(request *CreateIndexRequest) (_result *CreateIndexResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateIndexResponse{}
	_body, _err := client.CreateIndexWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a JDBC data source.
//
// @param request - CreateJDBCDataSourceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateJDBCDataSourceResponse
func (client *Client) CreateJDBCDataSourceWithOptions(request *CreateJDBCDataSourceRequest, runtime *util.RuntimeOptions) (_result *CreateJDBCDataSourceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.DataSourceDescription)) {
		query["DataSourceDescription"] = request.DataSourceDescription
	}

	if !tea.BoolValue(util.IsUnset(request.DataSourceName)) {
		query["DataSourceName"] = request.DataSourceName
	}

	if !tea.BoolValue(util.IsUnset(request.DataSourceType)) {
		query["DataSourceType"] = request.DataSourceType
	}

	if !tea.BoolValue(util.IsUnset(request.JDBCConnectionString)) {
		query["JDBCConnectionString"] = request.JDBCConnectionString
	}

	if !tea.BoolValue(util.IsUnset(request.JDBCPassword)) {
		query["JDBCPassword"] = request.JDBCPassword
	}

	if !tea.BoolValue(util.IsUnset(request.JDBCUserName)) {
		query["JDBCUserName"] = request.JDBCUserName
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateJDBCDataSource"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &CreateJDBCDataSourceResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &CreateJDBCDataSourceResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Creates a JDBC data source.
//
// @param request - CreateJDBCDataSourceRequest
//
// @return CreateJDBCDataSourceResponse
func (client *Client) CreateJDBCDataSource(request *CreateJDBCDataSourceRequest) (_result *CreateJDBCDataSourceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateJDBCDataSourceResponse{}
	_body, _err := client.CreateJDBCDataSourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a vector namespace.
//
// @param request - CreateNamespaceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateNamespaceResponse
func (client *Client) CreateNamespaceWithOptions(request *CreateNamespaceRequest, runtime *util.RuntimeOptions) (_result *CreateNamespaceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.ManagerAccount)) {
		query["ManagerAccount"] = request.ManagerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ManagerAccountPassword)) {
		query["ManagerAccountPassword"] = request.ManagerAccountPassword
	}

	if !tea.BoolValue(util.IsUnset(request.Namespace)) {
		query["Namespace"] = request.Namespace
	}

	if !tea.BoolValue(util.IsUnset(request.NamespacePassword)) {
		query["NamespacePassword"] = request.NamespacePassword
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		query["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateNamespace"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &CreateNamespaceResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &CreateNamespaceResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Creates a vector namespace.
//
// @param request - CreateNamespaceRequest
//
// @return CreateNamespaceResponse
func (client *Client) CreateNamespace(request *CreateNamespaceRequest) (_result *CreateNamespaceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateNamespaceResponse{}
	_body, _err := client.CreateNamespaceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Create Homogeneous Data Source
//
// @param request - CreateRemoteADBDataSourceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateRemoteADBDataSourceResponse
func (client *Client) CreateRemoteADBDataSourceWithOptions(request *CreateRemoteADBDataSourceRequest, runtime *util.RuntimeOptions) (_result *CreateRemoteADBDataSourceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DataSourceName)) {
		query["DataSourceName"] = request.DataSourceName
	}

	if !tea.BoolValue(util.IsUnset(request.LocalDBInstanceId)) {
		query["LocalDBInstanceId"] = request.LocalDBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.LocalDatabase)) {
		query["LocalDatabase"] = request.LocalDatabase
	}

	if !tea.BoolValue(util.IsUnset(request.ManagerUserName)) {
		query["ManagerUserName"] = request.ManagerUserName
	}

	if !tea.BoolValue(util.IsUnset(request.ManagerUserPassword)) {
		query["ManagerUserPassword"] = request.ManagerUserPassword
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RemoteDBInstanceId)) {
		query["RemoteDBInstanceId"] = request.RemoteDBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.RemoteDatabase)) {
		query["RemoteDatabase"] = request.RemoteDatabase
	}

	if !tea.BoolValue(util.IsUnset(request.UserName)) {
		query["UserName"] = request.UserName
	}

	if !tea.BoolValue(util.IsUnset(request.UserPassword)) {
		query["UserPassword"] = request.UserPassword
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateRemoteADBDataSource"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &CreateRemoteADBDataSourceResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &CreateRemoteADBDataSourceResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Create Homogeneous Data Source
//
// @param request - CreateRemoteADBDataSourceRequest
//
// @return CreateRemoteADBDataSourceResponse
func (client *Client) CreateRemoteADBDataSource(request *CreateRemoteADBDataSourceRequest) (_result *CreateRemoteADBDataSourceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateRemoteADBDataSourceResponse{}
	_body, _err := client.CreateRemoteADBDataSourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a sample dataset for an AnalyticDB for PostgreSQL instance.
//
// Description:
//
//   You can call this operation to create a sample dataset for an AnalyticDB for PostgreSQL instance. Then, you can execute query statements on the sample dataset to experience or test your instance. For more information about query statements, see [Dataset information and query examples](https://help.aliyun.com/document_detail/452277.html).
//
// 	- This operation is supported only for AnalyticDB for PostgreSQL V6.3.8.8 to 6.3.8.x, V6.3.10.3, and later.
//
// 	- Versions from V6.3.9.0 to V6.3.10.2 are not supported.
//
// @param request - CreateSampleDataRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateSampleDataResponse
func (client *Client) CreateSampleDataWithOptions(request *CreateSampleDataRequest, runtime *util.RuntimeOptions) (_result *CreateSampleDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateSampleData"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &CreateSampleDataResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &CreateSampleDataResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Creates a sample dataset for an AnalyticDB for PostgreSQL instance.
//
// Description:
//
//   You can call this operation to create a sample dataset for an AnalyticDB for PostgreSQL instance. Then, you can execute query statements on the sample dataset to experience or test your instance. For more information about query statements, see [Dataset information and query examples](https://help.aliyun.com/document_detail/452277.html).
//
// 	- This operation is supported only for AnalyticDB for PostgreSQL V6.3.8.8 to 6.3.8.x, V6.3.10.3, and later.
//
// 	- Versions from V6.3.9.0 to V6.3.10.2 are not supported.
//
// @param request - CreateSampleDataRequest
//
// @return CreateSampleDataResponse
func (client *Client) CreateSampleData(request *CreateSampleDataRequest) (_result *CreateSampleDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateSampleDataResponse{}
	_body, _err := client.CreateSampleDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates an access credential for an AnalyticDB for PostgreSQL instance by using the name and password of a database account.
//
// @param request - CreateSecretRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateSecretResponse
func (client *Client) CreateSecretWithOptions(request *CreateSecretRequest, runtime *util.RuntimeOptions) (_result *CreateSecretResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Password)) {
		query["Password"] = request.Password
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.SecretName)) {
		query["SecretName"] = request.SecretName
	}

	if !tea.BoolValue(util.IsUnset(request.TestConnection)) {
		query["TestConnection"] = request.TestConnection
	}

	if !tea.BoolValue(util.IsUnset(request.Username)) {
		query["Username"] = request.Username
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		query["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateSecret"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &CreateSecretResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &CreateSecretResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Creates an access credential for an AnalyticDB for PostgreSQL instance by using the name and password of a database account.
//
// @param request - CreateSecretRequest
//
// @return CreateSecretResponse
func (client *Client) CreateSecret(request *CreateSecretRequest) (_result *CreateSecretResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateSecretResponse{}
	_body, _err := client.CreateSecretWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a service-linked role.
//
// @param request - CreateServiceLinkedRoleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateServiceLinkedRoleResponse
func (client *Client) CreateServiceLinkedRoleWithOptions(request *CreateServiceLinkedRoleRequest, runtime *util.RuntimeOptions) (_result *CreateServiceLinkedRoleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateServiceLinkedRole"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &CreateServiceLinkedRoleResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &CreateServiceLinkedRoleResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Creates a service-linked role.
//
// @param request - CreateServiceLinkedRoleRequest
//
// @return CreateServiceLinkedRoleResponse
func (client *Client) CreateServiceLinkedRole(request *CreateServiceLinkedRoleRequest) (_result *CreateServiceLinkedRoleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateServiceLinkedRoleResponse{}
	_body, _err := client.CreateServiceLinkedRoleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Create External Data Source Configuration
//
// @param request - CreateStreamingDataServiceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateStreamingDataServiceResponse
func (client *Client) CreateStreamingDataServiceWithOptions(request *CreateStreamingDataServiceRequest, runtime *util.RuntimeOptions) (_result *CreateStreamingDataServiceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceDescription)) {
		query["ServiceDescription"] = request.ServiceDescription
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceName)) {
		query["ServiceName"] = request.ServiceName
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceSpec)) {
		query["ServiceSpec"] = request.ServiceSpec
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateStreamingDataService"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &CreateStreamingDataServiceResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &CreateStreamingDataServiceResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Create External Data Source Configuration
//
// @param request - CreateStreamingDataServiceRequest
//
// @return CreateStreamingDataServiceResponse
func (client *Client) CreateStreamingDataService(request *CreateStreamingDataServiceRequest) (_result *CreateStreamingDataServiceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateStreamingDataServiceResponse{}
	_body, _err := client.CreateStreamingDataServiceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Create External Data Source Configuration
//
// @param request - CreateStreamingDataSourceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateStreamingDataSourceResponse
func (client *Client) CreateStreamingDataSourceWithOptions(request *CreateStreamingDataSourceRequest, runtime *util.RuntimeOptions) (_result *CreateStreamingDataSourceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.DataSourceConfig)) {
		query["DataSourceConfig"] = request.DataSourceConfig
	}

	if !tea.BoolValue(util.IsUnset(request.DataSourceDescription)) {
		query["DataSourceDescription"] = request.DataSourceDescription
	}

	if !tea.BoolValue(util.IsUnset(request.DataSourceName)) {
		query["DataSourceName"] = request.DataSourceName
	}

	if !tea.BoolValue(util.IsUnset(request.DataSourceType)) {
		query["DataSourceType"] = request.DataSourceType
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceId)) {
		query["ServiceId"] = request.ServiceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateStreamingDataSource"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &CreateStreamingDataSourceResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &CreateStreamingDataSourceResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Create External Data Source Configuration
//
// @param request - CreateStreamingDataSourceRequest
//
// @return CreateStreamingDataSourceResponse
func (client *Client) CreateStreamingDataSource(request *CreateStreamingDataSourceRequest) (_result *CreateStreamingDataSourceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateStreamingDataSourceResponse{}
	_body, _err := client.CreateStreamingDataSourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Create External Data Source Configuration
//
// @param tmpReq - CreateStreamingJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateStreamingJobResponse
func (client *Client) CreateStreamingJobWithOptions(tmpReq *CreateStreamingJobRequest, runtime *util.RuntimeOptions) (_result *CreateStreamingJobResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &CreateStreamingJobShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.DestColumns)) {
		request.DestColumnsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.DestColumns, tea.String("DestColumns"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.MatchColumns)) {
		request.MatchColumnsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.MatchColumns, tea.String("MatchColumns"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.SrcColumns)) {
		request.SrcColumnsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.SrcColumns, tea.String("SrcColumns"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.UpdateColumns)) {
		request.UpdateColumnsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.UpdateColumns, tea.String("UpdateColumns"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Account)) {
		query["Account"] = request.Account
	}

	if !tea.BoolValue(util.IsUnset(request.Consistency)) {
		query["Consistency"] = request.Consistency
	}

	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.DataSourceId)) {
		query["DataSourceId"] = request.DataSourceId
	}

	if !tea.BoolValue(util.IsUnset(request.DestColumnsShrink)) {
		query["DestColumns"] = request.DestColumnsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.DestDatabase)) {
		query["DestDatabase"] = request.DestDatabase
	}

	if !tea.BoolValue(util.IsUnset(request.DestSchema)) {
		query["DestSchema"] = request.DestSchema
	}

	if !tea.BoolValue(util.IsUnset(request.DestTable)) {
		query["DestTable"] = request.DestTable
	}

	if !tea.BoolValue(util.IsUnset(request.ErrorLimitCount)) {
		query["ErrorLimitCount"] = request.ErrorLimitCount
	}

	if !tea.BoolValue(util.IsUnset(request.FallbackOffset)) {
		query["FallbackOffset"] = request.FallbackOffset
	}

	if !tea.BoolValue(util.IsUnset(request.GroupName)) {
		query["GroupName"] = request.GroupName
	}

	if !tea.BoolValue(util.IsUnset(request.JobConfig)) {
		query["JobConfig"] = request.JobConfig
	}

	if !tea.BoolValue(util.IsUnset(request.JobDescription)) {
		query["JobDescription"] = request.JobDescription
	}

	if !tea.BoolValue(util.IsUnset(request.JobName)) {
		query["JobName"] = request.JobName
	}

	if !tea.BoolValue(util.IsUnset(request.MatchColumnsShrink)) {
		query["MatchColumns"] = request.MatchColumnsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Mode)) {
		query["Mode"] = request.Mode
	}

	if !tea.BoolValue(util.IsUnset(request.Password)) {
		query["Password"] = request.Password
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.SrcColumnsShrink)) {
		query["SrcColumns"] = request.SrcColumnsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.TryRun)) {
		query["TryRun"] = request.TryRun
	}

	if !tea.BoolValue(util.IsUnset(request.UpdateColumnsShrink)) {
		query["UpdateColumns"] = request.UpdateColumnsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.WriteMode)) {
		query["WriteMode"] = request.WriteMode
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateStreamingJob"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &CreateStreamingJobResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &CreateStreamingJobResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Create External Data Source Configuration
//
// @param request - CreateStreamingJobRequest
//
// @return CreateStreamingJobResponse
func (client *Client) CreateStreamingJob(request *CreateStreamingJobRequest) (_result *CreateStreamingJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateStreamingJobResponse{}
	_body, _err := client.CreateStreamingJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Create Vector Index
//
// @param request - CreateVectorIndexRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateVectorIndexResponse
func (client *Client) CreateVectorIndexWithOptions(request *CreateVectorIndexRequest, runtime *util.RuntimeOptions) (_result *CreateVectorIndexResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Collection)) {
		query["Collection"] = request.Collection
	}

	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Dimension)) {
		query["Dimension"] = request.Dimension
	}

	if !tea.BoolValue(util.IsUnset(request.ExternalStorage)) {
		query["ExternalStorage"] = request.ExternalStorage
	}

	if !tea.BoolValue(util.IsUnset(request.HnswEfConstruction)) {
		query["HnswEfConstruction"] = request.HnswEfConstruction
	}

	if !tea.BoolValue(util.IsUnset(request.HnswM)) {
		query["HnswM"] = request.HnswM
	}

	if !tea.BoolValue(util.IsUnset(request.ManagerAccount)) {
		query["ManagerAccount"] = request.ManagerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ManagerAccountPassword)) {
		query["ManagerAccountPassword"] = request.ManagerAccountPassword
	}

	if !tea.BoolValue(util.IsUnset(request.Metrics)) {
		query["Metrics"] = request.Metrics
	}

	if !tea.BoolValue(util.IsUnset(request.Namespace)) {
		query["Namespace"] = request.Namespace
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PqEnable)) {
		query["PqEnable"] = request.PqEnable
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateVectorIndex"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &CreateVectorIndexResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &CreateVectorIndexResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Create Vector Index
//
// @param request - CreateVectorIndexRequest
//
// @return CreateVectorIndexResponse
func (client *Client) CreateVectorIndex(request *CreateVectorIndexRequest) (_result *CreateVectorIndexResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateVectorIndexResponse{}
	_body, _err := client.CreateVectorIndexWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 删除数据库账号
//
// @param request - DeleteAccountRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteAccountResponse
func (client *Client) DeleteAccountWithOptions(request *DeleteAccountRequest, runtime *util.RuntimeOptions) (_result *DeleteAccountResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccountName)) {
		query["AccountName"] = request.AccountName
	}

	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteAccount"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DeleteAccountResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DeleteAccountResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// 删除数据库账号
//
// @param request - DeleteAccountRequest
//
// @return DeleteAccountResponse
func (client *Client) DeleteAccount(request *DeleteAccountRequest) (_result *DeleteAccountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteAccountResponse{}
	_body, _err := client.DeleteAccountWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 删除备份
//
// @param request - DeleteBackupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteBackupResponse
func (client *Client) DeleteBackupWithOptions(request *DeleteBackupRequest, runtime *util.RuntimeOptions) (_result *DeleteBackupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BackupId)) {
		query["BackupId"] = request.BackupId
	}

	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteBackup"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DeleteBackupResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DeleteBackupResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// 删除备份
//
// @param request - DeleteBackupRequest
//
// @return DeleteBackupResponse
func (client *Client) DeleteBackup(request *DeleteBackupRequest) (_result *DeleteBackupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteBackupResponse{}
	_body, _err := client.DeleteBackupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a vector collection.
//
// @param request - DeleteCollectionRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteCollectionResponse
func (client *Client) DeleteCollectionWithOptions(request *DeleteCollectionRequest, runtime *util.RuntimeOptions) (_result *DeleteCollectionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Collection)) {
		query["Collection"] = request.Collection
	}

	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Namespace)) {
		query["Namespace"] = request.Namespace
	}

	if !tea.BoolValue(util.IsUnset(request.NamespacePassword)) {
		query["NamespacePassword"] = request.NamespacePassword
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		query["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteCollection"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DeleteCollectionResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DeleteCollectionResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Deletes a vector collection.
//
// @param request - DeleteCollectionRequest
//
// @return DeleteCollectionResponse
func (client *Client) DeleteCollection(request *DeleteCollectionRequest) (_result *DeleteCollectionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteCollectionResponse{}
	_body, _err := client.DeleteCollectionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes vector data.
//
// @param request - DeleteCollectionDataRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteCollectionDataResponse
func (client *Client) DeleteCollectionDataWithOptions(request *DeleteCollectionDataRequest, runtime *util.RuntimeOptions) (_result *DeleteCollectionDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Collection)) {
		query["Collection"] = request.Collection
	}

	if !tea.BoolValue(util.IsUnset(request.CollectionData)) {
		query["CollectionData"] = request.CollectionData
	}

	if !tea.BoolValue(util.IsUnset(request.CollectionDataFilter)) {
		query["CollectionDataFilter"] = request.CollectionDataFilter
	}

	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Namespace)) {
		query["Namespace"] = request.Namespace
	}

	if !tea.BoolValue(util.IsUnset(request.NamespacePassword)) {
		query["NamespacePassword"] = request.NamespacePassword
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		query["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteCollectionData"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DeleteCollectionDataResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DeleteCollectionDataResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Deletes vector data.
//
// @param request - DeleteCollectionDataRequest
//
// @return DeleteCollectionDataResponse
func (client *Client) DeleteCollectionData(request *DeleteCollectionDataRequest) (_result *DeleteCollectionDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteCollectionDataResponse{}
	_body, _err := client.DeleteCollectionDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Releases a pay-as-you-go AnalyticDB for PostgreSQL instance.
//
// Description:
//
//   Subscription instances cannot be manually released. They are automatically released when they expire.
//
// 	- You can call this operation to release pay-as-you-go instances only when they are in the **Running*	- state.
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - DeleteDBInstanceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteDBInstanceResponse
func (client *Client) DeleteDBInstanceWithOptions(request *DeleteDBInstanceRequest, runtime *util.RuntimeOptions) (_result *DeleteDBInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		query["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteDBInstance"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DeleteDBInstanceResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DeleteDBInstanceResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Releases a pay-as-you-go AnalyticDB for PostgreSQL instance.
//
// Description:
//
//   Subscription instances cannot be manually released. They are automatically released when they expire.
//
// 	- You can call this operation to release pay-as-you-go instances only when they are in the **Running*	- state.
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - DeleteDBInstanceRequest
//
// @return DeleteDBInstanceResponse
func (client *Client) DeleteDBInstance(request *DeleteDBInstanceRequest) (_result *DeleteDBInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteDBInstanceResponse{}
	_body, _err := client.DeleteDBInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a plan from an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// If you no longer need a plan, you can call this operation to delete the plan. The plan management feature is supported only for AnalyticDB for PostgreSQL instances in Serverless mode.
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - DeleteDBInstancePlanRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteDBInstancePlanResponse
func (client *Client) DeleteDBInstancePlanWithOptions(request *DeleteDBInstancePlanRequest, runtime *util.RuntimeOptions) (_result *DeleteDBInstancePlanResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PlanId)) {
		query["PlanId"] = request.PlanId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteDBInstancePlan"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DeleteDBInstancePlanResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DeleteDBInstancePlanResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Deletes a plan from an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// If you no longer need a plan, you can call this operation to delete the plan. The plan management feature is supported only for AnalyticDB for PostgreSQL instances in Serverless mode.
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - DeleteDBInstancePlanRequest
//
// @return DeleteDBInstancePlanResponse
func (client *Client) DeleteDBInstancePlan(request *DeleteDBInstancePlanRequest) (_result *DeleteDBInstancePlanResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteDBInstancePlanResponse{}
	_body, _err := client.DeleteDBInstancePlanWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a resource group.
//
// @param request - DeleteDBResourceGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteDBResourceGroupResponse
func (client *Client) DeleteDBResourceGroupWithOptions(request *DeleteDBResourceGroupRequest, runtime *util.RuntimeOptions) (_result *DeleteDBResourceGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupName)) {
		query["ResourceGroupName"] = request.ResourceGroupName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteDBResourceGroup"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DeleteDBResourceGroupResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DeleteDBResourceGroupResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Deletes a resource group.
//
// @param request - DeleteDBResourceGroupRequest
//
// @return DeleteDBResourceGroupResponse
func (client *Client) DeleteDBResourceGroup(request *DeleteDBResourceGroupRequest) (_result *DeleteDBResourceGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteDBResourceGroupResponse{}
	_body, _err := client.DeleteDBResourceGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Delete Document
//
// @param request - DeleteDocumentRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteDocumentResponse
func (client *Client) DeleteDocumentWithOptions(request *DeleteDocumentRequest, runtime *util.RuntimeOptions) (_result *DeleteDocumentResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Collection)) {
		query["Collection"] = request.Collection
	}

	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.FileName)) {
		query["FileName"] = request.FileName
	}

	if !tea.BoolValue(util.IsUnset(request.Namespace)) {
		query["Namespace"] = request.Namespace
	}

	if !tea.BoolValue(util.IsUnset(request.NamespacePassword)) {
		query["NamespacePassword"] = request.NamespacePassword
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteDocument"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DeleteDocumentResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DeleteDocumentResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Delete Document
//
// @param request - DeleteDocumentRequest
//
// @return DeleteDocumentResponse
func (client *Client) DeleteDocument(request *DeleteDocumentRequest) (_result *DeleteDocumentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteDocumentResponse{}
	_body, _err := client.DeleteDocumentWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Delete Knowledge Base
//
// @param request - DeleteDocumentCollectionRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteDocumentCollectionResponse
func (client *Client) DeleteDocumentCollectionWithOptions(request *DeleteDocumentCollectionRequest, runtime *util.RuntimeOptions) (_result *DeleteDocumentCollectionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Collection)) {
		query["Collection"] = request.Collection
	}

	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Namespace)) {
		query["Namespace"] = request.Namespace
	}

	if !tea.BoolValue(util.IsUnset(request.NamespacePassword)) {
		query["NamespacePassword"] = request.NamespacePassword
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteDocumentCollection"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DeleteDocumentCollectionResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DeleteDocumentCollectionResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Delete Knowledge Base
//
// @param request - DeleteDocumentCollectionRequest
//
// @return DeleteDocumentCollectionResponse
func (client *Client) DeleteDocumentCollection(request *DeleteDocumentCollectionRequest) (_result *DeleteDocumentCollectionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteDocumentCollectionResponse{}
	_body, _err := client.DeleteDocumentCollectionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Uninstall an extension.
//
// @param request - DeleteExtensionRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteExtensionResponse
func (client *Client) DeleteExtensionWithOptions(request *DeleteExtensionRequest, runtime *util.RuntimeOptions) (_result *DeleteExtensionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.DBNames)) {
		query["DBNames"] = request.DBNames
	}

	if !tea.BoolValue(util.IsUnset(request.Extension)) {
		query["Extension"] = request.Extension
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteExtension"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DeleteExtensionResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DeleteExtensionResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Uninstall an extension.
//
// @param request - DeleteExtensionRequest
//
// @return DeleteExtensionResponse
func (client *Client) DeleteExtension(request *DeleteExtensionRequest) (_result *DeleteExtensionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteExtensionResponse{}
	_body, _err := client.DeleteExtensionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Delete External Data Service
//
// @param request - DeleteExternalDataServiceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteExternalDataServiceResponse
func (client *Client) DeleteExternalDataServiceWithOptions(request *DeleteExternalDataServiceRequest, runtime *util.RuntimeOptions) (_result *DeleteExternalDataServiceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceId)) {
		query["ServiceId"] = request.ServiceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteExternalDataService"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DeleteExternalDataServiceResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DeleteExternalDataServiceResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Delete External Data Service
//
// @param request - DeleteExternalDataServiceRequest
//
// @return DeleteExternalDataServiceResponse
func (client *Client) DeleteExternalDataService(request *DeleteExternalDataServiceRequest) (_result *DeleteExternalDataServiceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteExternalDataServiceResponse{}
	_body, _err := client.DeleteExternalDataServiceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 删除hadoop数据源
//
// @param request - DeleteHadoopDataSourceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteHadoopDataSourceResponse
func (client *Client) DeleteHadoopDataSourceWithOptions(request *DeleteHadoopDataSourceRequest, runtime *util.RuntimeOptions) (_result *DeleteHadoopDataSourceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.DataSourceId)) {
		query["DataSourceId"] = request.DataSourceId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteHadoopDataSource"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DeleteHadoopDataSourceResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DeleteHadoopDataSourceResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// 删除hadoop数据源
//
// @param request - DeleteHadoopDataSourceRequest
//
// @return DeleteHadoopDataSourceResponse
func (client *Client) DeleteHadoopDataSource(request *DeleteHadoopDataSourceRequest) (_result *DeleteHadoopDataSourceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteHadoopDataSourceResponse{}
	_body, _err := client.DeleteHadoopDataSourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 删除索引
//
// @param request - DeleteIndexRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteIndexResponse
func (client *Client) DeleteIndexWithOptions(request *DeleteIndexRequest, runtime *util.RuntimeOptions) (_result *DeleteIndexResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Collection)) {
		query["Collection"] = request.Collection
	}

	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.IndexName)) {
		query["IndexName"] = request.IndexName
	}

	if !tea.BoolValue(util.IsUnset(request.Namespace)) {
		query["Namespace"] = request.Namespace
	}

	if !tea.BoolValue(util.IsUnset(request.NamespacePassword)) {
		query["NamespacePassword"] = request.NamespacePassword
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		query["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteIndex"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DeleteIndexResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DeleteIndexResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// 删除索引
//
// @param request - DeleteIndexRequest
//
// @return DeleteIndexResponse
func (client *Client) DeleteIndex(request *DeleteIndexRequest) (_result *DeleteIndexResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteIndexResponse{}
	_body, _err := client.DeleteIndexWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Delete JDBC data source
//
// @param request - DeleteJDBCDataSourceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteJDBCDataSourceResponse
func (client *Client) DeleteJDBCDataSourceWithOptions(request *DeleteJDBCDataSourceRequest, runtime *util.RuntimeOptions) (_result *DeleteJDBCDataSourceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.DataSourceId)) {
		query["DataSourceId"] = request.DataSourceId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteJDBCDataSource"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DeleteJDBCDataSourceResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DeleteJDBCDataSourceResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Delete JDBC data source
//
// @param request - DeleteJDBCDataSourceRequest
//
// @return DeleteJDBCDataSourceResponse
func (client *Client) DeleteJDBCDataSource(request *DeleteJDBCDataSourceRequest) (_result *DeleteJDBCDataSourceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteJDBCDataSourceResponse{}
	_body, _err := client.DeleteJDBCDataSourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a namespace.
//
// @param request - DeleteNamespaceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteNamespaceResponse
func (client *Client) DeleteNamespaceWithOptions(request *DeleteNamespaceRequest, runtime *util.RuntimeOptions) (_result *DeleteNamespaceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.ManagerAccount)) {
		query["ManagerAccount"] = request.ManagerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ManagerAccountPassword)) {
		query["ManagerAccountPassword"] = request.ManagerAccountPassword
	}

	if !tea.BoolValue(util.IsUnset(request.Namespace)) {
		query["Namespace"] = request.Namespace
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		query["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteNamespace"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DeleteNamespaceResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DeleteNamespaceResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Deletes a namespace.
//
// @param request - DeleteNamespaceRequest
//
// @return DeleteNamespaceResponse
func (client *Client) DeleteNamespace(request *DeleteNamespaceRequest) (_result *DeleteNamespaceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteNamespaceResponse{}
	_body, _err := client.DeleteNamespaceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a remote AnalyticDB data source.
//
// @param request - DeleteRemoteADBDataSourceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteRemoteADBDataSourceResponse
func (client *Client) DeleteRemoteADBDataSourceWithOptions(request *DeleteRemoteADBDataSourceRequest, runtime *util.RuntimeOptions) (_result *DeleteRemoteADBDataSourceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DataSourceId)) {
		query["DataSourceId"] = request.DataSourceId
	}

	if !tea.BoolValue(util.IsUnset(request.LocalDBInstanceId)) {
		query["LocalDBInstanceId"] = request.LocalDBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteRemoteADBDataSource"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DeleteRemoteADBDataSourceResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DeleteRemoteADBDataSourceResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Deletes a remote AnalyticDB data source.
//
// @param request - DeleteRemoteADBDataSourceRequest
//
// @return DeleteRemoteADBDataSourceResponse
func (client *Client) DeleteRemoteADBDataSource(request *DeleteRemoteADBDataSourceRequest) (_result *DeleteRemoteADBDataSourceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteRemoteADBDataSourceResponse{}
	_body, _err := client.DeleteRemoteADBDataSourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes the access credentials of an AnalyticDB for PostgreSQL instance.
//
// @param request - DeleteSecretRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteSecretResponse
func (client *Client) DeleteSecretWithOptions(request *DeleteSecretRequest, runtime *util.RuntimeOptions) (_result *DeleteSecretResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.SecretArn)) {
		query["SecretArn"] = request.SecretArn
	}

	if !tea.BoolValue(util.IsUnset(request.SecretName)) {
		query["SecretName"] = request.SecretName
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		query["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteSecret"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DeleteSecretResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DeleteSecretResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Deletes the access credentials of an AnalyticDB for PostgreSQL instance.
//
// @param request - DeleteSecretRequest
//
// @return DeleteSecretResponse
func (client *Client) DeleteSecret(request *DeleteSecretRequest) (_result *DeleteSecretResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteSecretResponse{}
	_body, _err := client.DeleteSecretWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a real-time data service.
//
// @param request - DeleteStreamingDataServiceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteStreamingDataServiceResponse
func (client *Client) DeleteStreamingDataServiceWithOptions(request *DeleteStreamingDataServiceRequest, runtime *util.RuntimeOptions) (_result *DeleteStreamingDataServiceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceId)) {
		query["ServiceId"] = request.ServiceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteStreamingDataService"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DeleteStreamingDataServiceResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DeleteStreamingDataServiceResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Deletes a real-time data service.
//
// @param request - DeleteStreamingDataServiceRequest
//
// @return DeleteStreamingDataServiceResponse
func (client *Client) DeleteStreamingDataService(request *DeleteStreamingDataServiceRequest) (_result *DeleteStreamingDataServiceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteStreamingDataServiceResponse{}
	_body, _err := client.DeleteStreamingDataServiceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a real-time data source.
//
// @param request - DeleteStreamingDataSourceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteStreamingDataSourceResponse
func (client *Client) DeleteStreamingDataSourceWithOptions(request *DeleteStreamingDataSourceRequest, runtime *util.RuntimeOptions) (_result *DeleteStreamingDataSourceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.DataSourceId)) {
		query["DataSourceId"] = request.DataSourceId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteStreamingDataSource"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DeleteStreamingDataSourceResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DeleteStreamingDataSourceResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Deletes a real-time data source.
//
// @param request - DeleteStreamingDataSourceRequest
//
// @return DeleteStreamingDataSourceResponse
func (client *Client) DeleteStreamingDataSource(request *DeleteStreamingDataSourceRequest) (_result *DeleteStreamingDataSourceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteStreamingDataSourceResponse{}
	_body, _err := client.DeleteStreamingDataSourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a real-time data service job.
//
// @param request - DeleteStreamingJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteStreamingJobResponse
func (client *Client) DeleteStreamingJobWithOptions(request *DeleteStreamingJobRequest, runtime *util.RuntimeOptions) (_result *DeleteStreamingJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteStreamingJob"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DeleteStreamingJobResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DeleteStreamingJobResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Deletes a real-time data service job.
//
// @param request - DeleteStreamingJobRequest
//
// @return DeleteStreamingJobResponse
func (client *Client) DeleteStreamingJob(request *DeleteStreamingJobRequest) (_result *DeleteStreamingJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteStreamingJobResponse{}
	_body, _err := client.DeleteStreamingJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a vector index.
//
// @param request - DeleteVectorIndexRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteVectorIndexResponse
func (client *Client) DeleteVectorIndexWithOptions(request *DeleteVectorIndexRequest, runtime *util.RuntimeOptions) (_result *DeleteVectorIndexResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Collection)) {
		query["Collection"] = request.Collection
	}

	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.ManagerAccount)) {
		query["ManagerAccount"] = request.ManagerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ManagerAccountPassword)) {
		query["ManagerAccountPassword"] = request.ManagerAccountPassword
	}

	if !tea.BoolValue(util.IsUnset(request.Namespace)) {
		query["Namespace"] = request.Namespace
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteVectorIndex"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DeleteVectorIndexResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DeleteVectorIndexResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Deletes a vector index.
//
// @param request - DeleteVectorIndexRequest
//
// @return DeleteVectorIndexResponse
func (client *Client) DeleteVectorIndex(request *DeleteVectorIndexRequest) (_result *DeleteVectorIndexResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteVectorIndexResponse{}
	_body, _err := client.DeleteVectorIndexWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about database accounts for an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// This operation is called to query the information of the privileged account in an AnalyticDB for PostgreSQL instance, such as its state, description, and the instance.
//
// ## Limit
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered and may affect your business. We recommend that you take note of the limit when you call this operation.
//
// @param request - DescribeAccountsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeAccountsResponse
func (client *Client) DescribeAccountsWithOptions(request *DescribeAccountsRequest, runtime *util.RuntimeOptions) (_result *DescribeAccountsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccountName)) {
		query["AccountName"] = request.AccountName
	}

	if !tea.BoolValue(util.IsUnset(request.AccountType)) {
		query["AccountType"] = request.AccountType
	}

	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAccounts"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeAccountsResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeAccountsResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the information about database accounts for an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// This operation is called to query the information of the privileged account in an AnalyticDB for PostgreSQL instance, such as its state, description, and the instance.
//
// ## Limit
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered and may affect your business. We recommend that you take note of the limit when you call this operation.
//
// @param request - DescribeAccountsRequest
//
// @return DescribeAccountsResponse
func (client *Client) DescribeAccounts(request *DescribeAccountsRequest) (_result *DescribeAccountsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAccountsResponse{}
	_body, _err := client.DescribeAccountsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries active SQL records.
//
// @param request - DescribeActiveSQLRecordsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeActiveSQLRecordsResponse
func (client *Client) DescribeActiveSQLRecordsWithOptions(request *DescribeActiveSQLRecordsRequest, runtime *util.RuntimeOptions) (_result *DescribeActiveSQLRecordsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Database)) {
		query["Database"] = request.Database
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.Keyword)) {
		query["Keyword"] = request.Keyword
	}

	if !tea.BoolValue(util.IsUnset(request.MaxDuration)) {
		query["MaxDuration"] = request.MaxDuration
	}

	if !tea.BoolValue(util.IsUnset(request.MinDuration)) {
		query["MinDuration"] = request.MinDuration
	}

	if !tea.BoolValue(util.IsUnset(request.Order)) {
		query["Order"] = request.Order
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.User)) {
		query["User"] = request.User
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeActiveSQLRecords"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeActiveSQLRecordsResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeActiveSQLRecordsResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries active SQL records.
//
// @param request - DescribeActiveSQLRecordsRequest
//
// @return DescribeActiveSQLRecordsResponse
func (client *Client) DescribeActiveSQLRecords(request *DescribeActiveSQLRecordsRequest) (_result *DescribeActiveSQLRecordsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeActiveSQLRecordsResponse{}
	_body, _err := client.DescribeActiveSQLRecordsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about available resources of AnalyticDB for PostgreSQL.
//
// Description:
//
// When you create an AnalyticDB for PostgreSQL instance, you can call this operation to query the available resources within a zone.
//
// @param request - DescribeAvailableResourcesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeAvailableResourcesResponse
func (client *Client) DescribeAvailableResourcesWithOptions(request *DescribeAvailableResourcesRequest, runtime *util.RuntimeOptions) (_result *DescribeAvailableResourcesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ChargeType)) {
		query["ChargeType"] = request.ChargeType
	}

	if !tea.BoolValue(util.IsUnset(request.Region)) {
		query["Region"] = request.Region
	}

	if !tea.BoolValue(util.IsUnset(request.ZoneId)) {
		query["ZoneId"] = request.ZoneId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAvailableResources"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeAvailableResourcesResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeAvailableResourcesResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the information about available resources of AnalyticDB for PostgreSQL.
//
// Description:
//
// When you create an AnalyticDB for PostgreSQL instance, you can call this operation to query the available resources within a zone.
//
// @param request - DescribeAvailableResourcesRequest
//
// @return DescribeAvailableResourcesResponse
func (client *Client) DescribeAvailableResources(request *DescribeAvailableResourcesRequest) (_result *DescribeAvailableResourcesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAvailableResourcesResponse{}
	_body, _err := client.DescribeAvailableResourcesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取备份任务详情
//
// @param request - DescribeBackupJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeBackupJobResponse
func (client *Client) DescribeBackupJobWithOptions(request *DescribeBackupJobRequest, runtime *util.RuntimeOptions) (_result *DescribeBackupJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BackupJobId)) {
		query["BackupJobId"] = request.BackupJobId
	}

	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeBackupJob"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeBackupJobResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeBackupJobResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// 获取备份任务详情
//
// @param request - DescribeBackupJobRequest
//
// @return DescribeBackupJobResponse
func (client *Client) DescribeBackupJob(request *DescribeBackupJobRequest) (_result *DescribeBackupJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeBackupJobResponse{}
	_body, _err := client.DescribeBackupJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the backup policy of an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// You can call this operation to query the backup settings of an AnalyticDB for PostgreSQL instance in elastic storage mode. Periodically backing data can prevent data loss. For more information about how to modify backup policies, see [ModifyBackupPolicy](https://help.aliyun.com/document_detail/210095.html).
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - DescribeBackupPolicyRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeBackupPolicyResponse
func (client *Client) DescribeBackupPolicyWithOptions(request *DescribeBackupPolicyRequest, runtime *util.RuntimeOptions) (_result *DescribeBackupPolicyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeBackupPolicy"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeBackupPolicyResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeBackupPolicyResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the backup policy of an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// You can call this operation to query the backup settings of an AnalyticDB for PostgreSQL instance in elastic storage mode. Periodically backing data can prevent data loss. For more information about how to modify backup policies, see [ModifyBackupPolicy](https://help.aliyun.com/document_detail/210095.html).
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - DescribeBackupPolicyRequest
//
// @return DescribeBackupPolicyResponse
func (client *Client) DescribeBackupPolicy(request *DescribeBackupPolicyRequest) (_result *DescribeBackupPolicyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeBackupPolicyResponse{}
	_body, _err := client.DescribeBackupPolicyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about a vector collection.
//
// @param request - DescribeCollectionRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeCollectionResponse
func (client *Client) DescribeCollectionWithOptions(request *DescribeCollectionRequest, runtime *util.RuntimeOptions) (_result *DescribeCollectionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Collection)) {
		query["Collection"] = request.Collection
	}

	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Namespace)) {
		query["Namespace"] = request.Namespace
	}

	if !tea.BoolValue(util.IsUnset(request.NamespacePassword)) {
		query["NamespacePassword"] = request.NamespacePassword
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		query["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeCollection"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeCollectionResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeCollectionResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the information about a vector collection.
//
// @param request - DescribeCollectionRequest
//
// @return DescribeCollectionResponse
func (client *Client) DescribeCollection(request *DescribeCollectionRequest) (_result *DescribeCollectionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeCollectionResponse{}
	_body, _err := client.DescribeCollectionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取创建索引任务
//
// @param request - DescribeCreateIndexJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeCreateIndexJobResponse
func (client *Client) DescribeCreateIndexJobWithOptions(request *DescribeCreateIndexJobRequest, runtime *util.RuntimeOptions) (_result *DescribeCreateIndexJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Collection)) {
		query["Collection"] = request.Collection
	}

	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	if !tea.BoolValue(util.IsUnset(request.Namespace)) {
		query["Namespace"] = request.Namespace
	}

	if !tea.BoolValue(util.IsUnset(request.NamespacePassword)) {
		query["NamespacePassword"] = request.NamespacePassword
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		query["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeCreateIndexJob"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeCreateIndexJobResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeCreateIndexJobResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// 获取创建索引任务
//
// @param request - DescribeCreateIndexJobRequest
//
// @return DescribeCreateIndexJobResponse
func (client *Client) DescribeCreateIndexJob(request *DescribeCreateIndexJobRequest) (_result *DescribeCreateIndexJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeCreateIndexJobResponse{}
	_body, _err := client.DescribeCreateIndexJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of nodes in an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// ##
//
// You can call this operation to query the information about coordinator and compute nodes in an AnalyticDB for PostgreSQL instance in elastic storage mode or Serverless mode.
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - DescribeDBClusterNodeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDBClusterNodeResponse
func (client *Client) DescribeDBClusterNodeWithOptions(request *DescribeDBClusterNodeRequest, runtime *util.RuntimeOptions) (_result *DescribeDBClusterNodeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.NodeType)) {
		query["NodeType"] = request.NodeType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDBClusterNode"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeDBClusterNodeResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeDBClusterNodeResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries a list of nodes in an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// ##
//
// You can call this operation to query the information about coordinator and compute nodes in an AnalyticDB for PostgreSQL instance in elastic storage mode or Serverless mode.
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - DescribeDBClusterNodeRequest
//
// @return DescribeDBClusterNodeResponse
func (client *Client) DescribeDBClusterNode(request *DescribeDBClusterNodeRequest) (_result *DescribeDBClusterNodeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDBClusterNodeResponse{}
	_body, _err := client.DescribeDBClusterNodeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about performance metrics of an AnalyticDB for PostgreSQL instance within a time range.
//
// Description:
//
// You can query monitoring information only within the last 30 days.
//
// @param request - DescribeDBClusterPerformanceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDBClusterPerformanceResponse
func (client *Client) DescribeDBClusterPerformanceWithOptions(request *DescribeDBClusterPerformanceRequest, runtime *util.RuntimeOptions) (_result *DescribeDBClusterPerformanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.Key)) {
		query["Key"] = request.Key
	}

	if !tea.BoolValue(util.IsUnset(request.NodeType)) {
		query["NodeType"] = request.NodeType
	}

	if !tea.BoolValue(util.IsUnset(request.Nodes)) {
		query["Nodes"] = request.Nodes
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupName)) {
		query["ResourceGroupName"] = request.ResourceGroupName
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDBClusterPerformance"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeDBClusterPerformanceResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeDBClusterPerformanceResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the information about performance metrics of an AnalyticDB for PostgreSQL instance within a time range.
//
// Description:
//
// You can query monitoring information only within the last 30 days.
//
// @param request - DescribeDBClusterPerformanceRequest
//
// @return DescribeDBClusterPerformanceResponse
func (client *Client) DescribeDBClusterPerformance(request *DescribeDBClusterPerformanceRequest) (_result *DescribeDBClusterPerformanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDBClusterPerformanceResponse{}
	_body, _err := client.DescribeDBClusterPerformanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Query detailed information about the instance.
//
// Description:
//
// ## Usage Instructions
//
// This interface is generally used to view information such as the specifications, network type, and instance status of AnalyticDB for PostgreSQL instances.
//
// ## QPS Limitation
//
// The default single-user QPS limit for this interface is 1000 times/second. If the limit is exceeded, API calls will be throttled, which may affect your business. Please use it reasonably.
//
// <props="china">The QPS in this document is only a default reference value. For accurate information, please refer to the [API Rate Quota List](https://quotas.console.aliyun.com/flow-control-products/gpdb/quotas).
//
// @param request - DescribeDBInstanceAttributeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDBInstanceAttributeResponse
func (client *Client) DescribeDBInstanceAttributeWithOptions(request *DescribeDBInstanceAttributeRequest, runtime *util.RuntimeOptions) (_result *DescribeDBInstanceAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDBInstanceAttribute"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeDBInstanceAttributeResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeDBInstanceAttributeResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Query detailed information about the instance.
//
// Description:
//
// ## Usage Instructions
//
// This interface is generally used to view information such as the specifications, network type, and instance status of AnalyticDB for PostgreSQL instances.
//
// ## QPS Limitation
//
// The default single-user QPS limit for this interface is 1000 times/second. If the limit is exceeded, API calls will be throttled, which may affect your business. Please use it reasonably.
//
// <props="china">The QPS in this document is only a default reference value. For accurate information, please refer to the [API Rate Quota List](https://quotas.console.aliyun.com/flow-control-products/gpdb/quotas).
//
// @param request - DescribeDBInstanceAttributeRequest
//
// @return DescribeDBInstanceAttributeResponse
func (client *Client) DescribeDBInstanceAttribute(request *DescribeDBInstanceAttributeRequest) (_result *DescribeDBInstanceAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDBInstanceAttributeResponse{}
	_body, _err := client.DescribeDBInstanceAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about data bloat for an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// You can call this operation to query the details of data bloat on an AnalyticDB for PostgreSQL instance in elastic storage mode. The minor version of the instance must be V6.3.10.1 or later. For more information about how to view and update the minor version of an instance, see [View the minor engine version](https://help.aliyun.com/document_detail/277424.html) and [Update the minor engine version](https://help.aliyun.com/document_detail/139271.html).
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - DescribeDBInstanceDataBloatRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDBInstanceDataBloatResponse
func (client *Client) DescribeDBInstanceDataBloatWithOptions(request *DescribeDBInstanceDataBloatRequest, runtime *util.RuntimeOptions) (_result *DescribeDBInstanceDataBloatResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Database)) {
		query["Database"] = request.Database
	}

	if !tea.BoolValue(util.IsUnset(request.OrderBy)) {
		query["OrderBy"] = request.OrderBy
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDBInstanceDataBloat"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeDBInstanceDataBloatResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeDBInstanceDataBloatResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the information about data bloat for an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// You can call this operation to query the details of data bloat on an AnalyticDB for PostgreSQL instance in elastic storage mode. The minor version of the instance must be V6.3.10.1 or later. For more information about how to view and update the minor version of an instance, see [View the minor engine version](https://help.aliyun.com/document_detail/277424.html) and [Update the minor engine version](https://help.aliyun.com/document_detail/139271.html).
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - DescribeDBInstanceDataBloatRequest
//
// @return DescribeDBInstanceDataBloatResponse
func (client *Client) DescribeDBInstanceDataBloat(request *DescribeDBInstanceDataBloatRequest) (_result *DescribeDBInstanceDataBloatResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDBInstanceDataBloatResponse{}
	_body, _err := client.DescribeDBInstanceDataBloatWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about data skew for an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// To prevent data skew from affecting your database service, you can call this operation to query the details about data skew on an AnalyticDB for PostgreSQL instance.
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - DescribeDBInstanceDataSkewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDBInstanceDataSkewResponse
func (client *Client) DescribeDBInstanceDataSkewWithOptions(request *DescribeDBInstanceDataSkewRequest, runtime *util.RuntimeOptions) (_result *DescribeDBInstanceDataSkewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Database)) {
		query["Database"] = request.Database
	}

	if !tea.BoolValue(util.IsUnset(request.OrderBy)) {
		query["OrderBy"] = request.OrderBy
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDBInstanceDataSkew"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeDBInstanceDataSkewResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeDBInstanceDataSkewResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the information about data skew for an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// To prevent data skew from affecting your database service, you can call this operation to query the details about data skew on an AnalyticDB for PostgreSQL instance.
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - DescribeDBInstanceDataSkewRequest
//
// @return DescribeDBInstanceDataSkewResponse
func (client *Client) DescribeDBInstanceDataSkew(request *DescribeDBInstanceDataSkewRequest) (_result *DescribeDBInstanceDataSkewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDBInstanceDataSkewResponse{}
	_body, _err := client.DescribeDBInstanceDataSkewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about nodes in an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// You can call this operation to query the distribution and states of coordinator and compute nodes in an AnalyticDB for PostgreSQL instance.
//
// @param request - DescribeDBInstanceDiagnosisSummaryRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDBInstanceDiagnosisSummaryResponse
func (client *Client) DescribeDBInstanceDiagnosisSummaryWithOptions(request *DescribeDBInstanceDiagnosisSummaryRequest, runtime *util.RuntimeOptions) (_result *DescribeDBInstanceDiagnosisSummaryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RolePreferd)) {
		query["RolePreferd"] = request.RolePreferd
	}

	if !tea.BoolValue(util.IsUnset(request.StartStatus)) {
		query["StartStatus"] = request.StartStatus
	}

	if !tea.BoolValue(util.IsUnset(request.SyncMode)) {
		query["SyncMode"] = request.SyncMode
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDBInstanceDiagnosisSummary"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeDBInstanceDiagnosisSummaryResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeDBInstanceDiagnosisSummaryResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the information about nodes in an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// You can call this operation to query the distribution and states of coordinator and compute nodes in an AnalyticDB for PostgreSQL instance.
//
// @param request - DescribeDBInstanceDiagnosisSummaryRequest
//
// @return DescribeDBInstanceDiagnosisSummaryResponse
func (client *Client) DescribeDBInstanceDiagnosisSummary(request *DescribeDBInstanceDiagnosisSummaryRequest) (_result *DescribeDBInstanceDiagnosisSummaryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDBInstanceDiagnosisSummaryResponse{}
	_body, _err := client.DescribeDBInstanceDiagnosisSummaryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the error logs of an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// You can call this operation to query the error logs of an AnalyticDB for PostgreSQL instance.
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - DescribeDBInstanceErrorLogRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDBInstanceErrorLogResponse
func (client *Client) DescribeDBInstanceErrorLogWithOptions(request *DescribeDBInstanceErrorLogRequest, runtime *util.RuntimeOptions) (_result *DescribeDBInstanceErrorLogResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Database)) {
		query["Database"] = request.Database
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.Host)) {
		query["Host"] = request.Host
	}

	if !tea.BoolValue(util.IsUnset(request.Keywords)) {
		query["Keywords"] = request.Keywords
	}

	if !tea.BoolValue(util.IsUnset(request.LogLevel)) {
		query["LogLevel"] = request.LogLevel
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.User)) {
		query["User"] = request.User
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDBInstanceErrorLog"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeDBInstanceErrorLogResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeDBInstanceErrorLogResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the error logs of an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// You can call this operation to query the error logs of an AnalyticDB for PostgreSQL instance.
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - DescribeDBInstanceErrorLogRequest
//
// @return DescribeDBInstanceErrorLogResponse
func (client *Client) DescribeDBInstanceErrorLog(request *DescribeDBInstanceErrorLogRequest) (_result *DescribeDBInstanceErrorLogResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDBInstanceErrorLogResponse{}
	_body, _err := client.DescribeDBInstanceErrorLogWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the whitelists of IP addresses that are allowed to access an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// You can call this operation to query the whitelists of IP addresses that are allowed to access an AnalyticDB for PostgreSQL instance.
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - DescribeDBInstanceIPArrayListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDBInstanceIPArrayListResponse
func (client *Client) DescribeDBInstanceIPArrayListWithOptions(request *DescribeDBInstanceIPArrayListRequest, runtime *util.RuntimeOptions) (_result *DescribeDBInstanceIPArrayListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceIPArrayName)) {
		query["DBInstanceIPArrayName"] = request.DBInstanceIPArrayName
	}

	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDBInstanceIPArrayList"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeDBInstanceIPArrayListResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeDBInstanceIPArrayListResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the whitelists of IP addresses that are allowed to access an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// You can call this operation to query the whitelists of IP addresses that are allowed to access an AnalyticDB for PostgreSQL instance.
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - DescribeDBInstanceIPArrayListRequest
//
// @return DescribeDBInstanceIPArrayListResponse
func (client *Client) DescribeDBInstanceIPArrayList(request *DescribeDBInstanceIPArrayListRequest) (_result *DescribeDBInstanceIPArrayListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDBInstanceIPArrayListResponse{}
	_body, _err := client.DescribeDBInstanceIPArrayListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the index usage of an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// Appropriate indexes can accelerate database queries. You can call this operation to query the index usage of an AnalyticDB for PostgreSQL instance.
//
// This operation is available only for instances of V6.3.10.1 or later in elastic storage mode. For information about how to view and update the minor version of an instance, see [View the minor engine version](https://help.aliyun.com/document_detail/277424.html) and [Update the minor engine version](https://help.aliyun.com/document_detail/139271.html).
//
// @param request - DescribeDBInstanceIndexUsageRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDBInstanceIndexUsageResponse
func (client *Client) DescribeDBInstanceIndexUsageWithOptions(request *DescribeDBInstanceIndexUsageRequest, runtime *util.RuntimeOptions) (_result *DescribeDBInstanceIndexUsageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Database)) {
		query["Database"] = request.Database
	}

	if !tea.BoolValue(util.IsUnset(request.OrderBy)) {
		query["OrderBy"] = request.OrderBy
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDBInstanceIndexUsage"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeDBInstanceIndexUsageResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeDBInstanceIndexUsageResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the index usage of an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// Appropriate indexes can accelerate database queries. You can call this operation to query the index usage of an AnalyticDB for PostgreSQL instance.
//
// This operation is available only for instances of V6.3.10.1 or later in elastic storage mode. For information about how to view and update the minor version of an instance, see [View the minor engine version](https://help.aliyun.com/document_detail/277424.html) and [Update the minor engine version](https://help.aliyun.com/document_detail/139271.html).
//
// @param request - DescribeDBInstanceIndexUsageRequest
//
// @return DescribeDBInstanceIndexUsageResponse
func (client *Client) DescribeDBInstanceIndexUsage(request *DescribeDBInstanceIndexUsageRequest) (_result *DescribeDBInstanceIndexUsageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDBInstanceIndexUsageResponse{}
	_body, _err := client.DescribeDBInstanceIndexUsageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the connection information of an instance.
//
// @param request - DescribeDBInstanceNetInfoRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDBInstanceNetInfoResponse
func (client *Client) DescribeDBInstanceNetInfoWithOptions(request *DescribeDBInstanceNetInfoRequest, runtime *util.RuntimeOptions) (_result *DescribeDBInstanceNetInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConnectionString)) {
		query["ConnectionString"] = request.ConnectionString
	}

	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDBInstanceNetInfo"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeDBInstanceNetInfoResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeDBInstanceNetInfoResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the connection information of an instance.
//
// @param request - DescribeDBInstanceNetInfoRequest
//
// @return DescribeDBInstanceNetInfoResponse
func (client *Client) DescribeDBInstanceNetInfo(request *DescribeDBInstanceNetInfoRequest) (_result *DescribeDBInstanceNetInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDBInstanceNetInfoResponse{}
	_body, _err := client.DescribeDBInstanceNetInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about performance metrics of an AnalyticDB for PostgreSQL instance within a time range.
//
// @param request - DescribeDBInstancePerformanceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDBInstancePerformanceResponse
func (client *Client) DescribeDBInstancePerformanceWithOptions(request *DescribeDBInstancePerformanceRequest, runtime *util.RuntimeOptions) (_result *DescribeDBInstancePerformanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.Key)) {
		query["Key"] = request.Key
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDBInstancePerformance"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeDBInstancePerformanceResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeDBInstancePerformanceResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the information about performance metrics of an AnalyticDB for PostgreSQL instance within a time range.
//
// @param request - DescribeDBInstancePerformanceRequest
//
// @return DescribeDBInstancePerformanceResponse
func (client *Client) DescribeDBInstancePerformance(request *DescribeDBInstancePerformanceRequest) (_result *DescribeDBInstancePerformanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDBInstancePerformanceResponse{}
	_body, _err := client.DescribeDBInstancePerformanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about plans for an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// You can call this operation to query the details of plans for an AnalyticDB for PostgreSQL instance in Serverless mode.
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - DescribeDBInstancePlansRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDBInstancePlansResponse
func (client *Client) DescribeDBInstancePlansWithOptions(request *DescribeDBInstancePlansRequest, runtime *util.RuntimeOptions) (_result *DescribeDBInstancePlansResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PlanCreateDate)) {
		query["PlanCreateDate"] = request.PlanCreateDate
	}

	if !tea.BoolValue(util.IsUnset(request.PlanDesc)) {
		query["PlanDesc"] = request.PlanDesc
	}

	if !tea.BoolValue(util.IsUnset(request.PlanId)) {
		query["PlanId"] = request.PlanId
	}

	if !tea.BoolValue(util.IsUnset(request.PlanScheduleType)) {
		query["PlanScheduleType"] = request.PlanScheduleType
	}

	if !tea.BoolValue(util.IsUnset(request.PlanType)) {
		query["PlanType"] = request.PlanType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDBInstancePlans"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeDBInstancePlansResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeDBInstancePlansResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the information about plans for an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// You can call this operation to query the details of plans for an AnalyticDB for PostgreSQL instance in Serverless mode.
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - DescribeDBInstancePlansRequest
//
// @return DescribeDBInstancePlansResponse
func (client *Client) DescribeDBInstancePlans(request *DescribeDBInstancePlansRequest) (_result *DescribeDBInstancePlansResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDBInstancePlansResponse{}
	_body, _err := client.DescribeDBInstancePlansWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the SSL information about an AnalyticDB for PostgreSQL instance.
//
// @param request - DescribeDBInstanceSSLRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDBInstanceSSLResponse
func (client *Client) DescribeDBInstanceSSLWithOptions(request *DescribeDBInstanceSSLRequest, runtime *util.RuntimeOptions) (_result *DescribeDBInstanceSSLResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDBInstanceSSL"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeDBInstanceSSLResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeDBInstanceSSLResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the SSL information about an AnalyticDB for PostgreSQL instance.
//
// @param request - DescribeDBInstanceSSLRequest
//
// @return DescribeDBInstanceSSLResponse
func (client *Client) DescribeDBInstanceSSL(request *DescribeDBInstanceSSLRequest) (_result *DescribeDBInstanceSSLResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDBInstanceSSLResponse{}
	_body, _err := client.DescribeDBInstanceSSLWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the maximum performance of an AnalyticDB for PostgreSQL instance.
//
// @param request - DescribeDBInstanceSupportMaxPerformanceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDBInstanceSupportMaxPerformanceResponse
func (client *Client) DescribeDBInstanceSupportMaxPerformanceWithOptions(request *DescribeDBInstanceSupportMaxPerformanceRequest, runtime *util.RuntimeOptions) (_result *DescribeDBInstanceSupportMaxPerformanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDBInstanceSupportMaxPerformance"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeDBInstanceSupportMaxPerformanceResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeDBInstanceSupportMaxPerformanceResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the maximum performance of an AnalyticDB for PostgreSQL instance.
//
// @param request - DescribeDBInstanceSupportMaxPerformanceRequest
//
// @return DescribeDBInstanceSupportMaxPerformanceResponse
func (client *Client) DescribeDBInstanceSupportMaxPerformance(request *DescribeDBInstanceSupportMaxPerformanceRequest) (_result *DescribeDBInstanceSupportMaxPerformanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDBInstanceSupportMaxPerformanceResponse{}
	_body, _err := client.DescribeDBInstanceSupportMaxPerformanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of AnalyticDB for PostgreSQL instances.
//
// Description:
//
// ##
//
// You can call this operation to query the instance types, network types, and states of AnalyticDB for PostgreSQL instances within a region.
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param tmpReq - DescribeDBInstancesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDBInstancesResponse
func (client *Client) DescribeDBInstancesWithOptions(tmpReq *DescribeDBInstancesRequest, runtime *util.RuntimeOptions) (_result *DescribeDBInstancesResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &DescribeDBInstancesShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.DBInstanceCategories)) {
		request.DBInstanceCategoriesShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.DBInstanceCategories, tea.String("DBInstanceCategories"), tea.String("simple"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.DBInstanceModes)) {
		request.DBInstanceModesShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.DBInstanceModes, tea.String("DBInstanceModes"), tea.String("simple"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.DBInstanceStatuses)) {
		request.DBInstanceStatusesShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.DBInstanceStatuses, tea.String("DBInstanceStatuses"), tea.String("simple"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.InstanceDeployTypes)) {
		request.InstanceDeployTypesShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.InstanceDeployTypes, tea.String("InstanceDeployTypes"), tea.String("simple"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceCategoriesShrink)) {
		query["DBInstanceCategories"] = request.DBInstanceCategoriesShrink
	}

	if !tea.BoolValue(util.IsUnset(request.DBInstanceDescription)) {
		query["DBInstanceDescription"] = request.DBInstanceDescription
	}

	if !tea.BoolValue(util.IsUnset(request.DBInstanceIds)) {
		query["DBInstanceIds"] = request.DBInstanceIds
	}

	if !tea.BoolValue(util.IsUnset(request.DBInstanceModesShrink)) {
		query["DBInstanceModes"] = request.DBInstanceModesShrink
	}

	if !tea.BoolValue(util.IsUnset(request.DBInstanceStatusesShrink)) {
		query["DBInstanceStatuses"] = request.DBInstanceStatusesShrink
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceDeployTypesShrink)) {
		query["InstanceDeployTypes"] = request.InstanceDeployTypesShrink
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceNetworkType)) {
		query["InstanceNetworkType"] = request.InstanceNetworkType
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	if !tea.BoolValue(util.IsUnset(request.VpcId)) {
		query["VpcId"] = request.VpcId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDBInstances"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeDBInstancesResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeDBInstancesResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries a list of AnalyticDB for PostgreSQL instances.
//
// Description:
//
// ##
//
// You can call this operation to query the instance types, network types, and states of AnalyticDB for PostgreSQL instances within a region.
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - DescribeDBInstancesRequest
//
// @return DescribeDBInstancesResponse
func (client *Client) DescribeDBInstances(request *DescribeDBInstancesRequest) (_result *DescribeDBInstancesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDBInstancesResponse{}
	_body, _err := client.DescribeDBInstancesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about resource groups.
//
// @param request - DescribeDBResourceGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDBResourceGroupResponse
func (client *Client) DescribeDBResourceGroupWithOptions(request *DescribeDBResourceGroupRequest, runtime *util.RuntimeOptions) (_result *DescribeDBResourceGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupName)) {
		query["ResourceGroupName"] = request.ResourceGroupName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDBResourceGroup"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeDBResourceGroupResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeDBResourceGroupResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the information about resource groups.
//
// @param request - DescribeDBResourceGroupRequest
//
// @return DescribeDBResourceGroupResponse
func (client *Client) DescribeDBResourceGroup(request *DescribeDBResourceGroupRequest) (_result *DescribeDBResourceGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDBResourceGroupResponse{}
	_body, _err := client.DescribeDBResourceGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the resource management mode of an AnalyticDB for PostgreSQL instance.
//
// @param request - DescribeDBResourceManagementModeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDBResourceManagementModeResponse
func (client *Client) DescribeDBResourceManagementModeWithOptions(request *DescribeDBResourceManagementModeRequest, runtime *util.RuntimeOptions) (_result *DescribeDBResourceManagementModeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDBResourceManagementMode"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeDBResourceManagementModeResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeDBResourceManagementModeResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the resource management mode of an AnalyticDB for PostgreSQL instance.
//
// @param request - DescribeDBResourceManagementModeRequest
//
// @return DescribeDBResourceManagementModeResponse
func (client *Client) DescribeDBResourceManagementMode(request *DescribeDBResourceManagementModeRequest) (_result *DescribeDBResourceManagementModeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDBResourceManagementModeResponse{}
	_body, _err := client.DescribeDBResourceManagementModeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about minor versions of AnalyticDB for PostgreSQL instances.
//
// @param request - DescribeDBVersionInfosRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDBVersionInfosResponse
func (client *Client) DescribeDBVersionInfosWithOptions(request *DescribeDBVersionInfosRequest, runtime *util.RuntimeOptions) (_result *DescribeDBVersionInfosResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceMode)) {
		query["DBInstanceMode"] = request.DBInstanceMode
	}

	if !tea.BoolValue(util.IsUnset(request.DBVersion)) {
		query["DBVersion"] = request.DBVersion
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDBVersionInfos"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeDBVersionInfosResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeDBVersionInfosResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the information about minor versions of AnalyticDB for PostgreSQL instances.
//
// @param request - DescribeDBVersionInfosRequest
//
// @return DescribeDBVersionInfosResponse
func (client *Client) DescribeDBVersionInfos(request *DescribeDBVersionInfosRequest) (_result *DescribeDBVersionInfosResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDBVersionInfosResponse{}
	_body, _err := client.DescribeDBVersionInfosWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of backup sets of full backup or point-in-time backup for an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// You can call this operation to query a list of backup sets and backup details only for instances in elastic storage mode.
//
// @param request - DescribeDataBackupsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDataBackupsResponse
func (client *Client) DescribeDataBackupsWithOptions(request *DescribeDataBackupsRequest, runtime *util.RuntimeOptions) (_result *DescribeDataBackupsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BackupId)) {
		query["BackupId"] = request.BackupId
	}

	if !tea.BoolValue(util.IsUnset(request.BackupMode)) {
		query["BackupMode"] = request.BackupMode
	}

	if !tea.BoolValue(util.IsUnset(request.BackupStatus)) {
		query["BackupStatus"] = request.BackupStatus
	}

	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.DataType)) {
		query["DataType"] = request.DataType
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDataBackups"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeDataBackupsResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeDataBackupsResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries a list of backup sets of full backup or point-in-time backup for an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// You can call this operation to query a list of backup sets and backup details only for instances in elastic storage mode.
//
// @param request - DescribeDataBackupsRequest
//
// @return DescribeDataBackupsResponse
func (client *Client) DescribeDataBackups(request *DescribeDataBackupsRequest) (_result *DescribeDataBackupsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDataBackupsResponse{}
	_body, _err := client.DescribeDataBackupsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the data redistribution information about an AnalyticDB for PostgreSQL V6.0 instance in elastic storage mode.
//
// @param request - DescribeDataReDistributeInfoRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDataReDistributeInfoResponse
func (client *Client) DescribeDataReDistributeInfoWithOptions(request *DescribeDataReDistributeInfoRequest, runtime *util.RuntimeOptions) (_result *DescribeDataReDistributeInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDataReDistributeInfo"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeDataReDistributeInfoResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeDataReDistributeInfoResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the data redistribution information about an AnalyticDB for PostgreSQL V6.0 instance in elastic storage mode.
//
// @param request - DescribeDataReDistributeInfoRequest
//
// @return DescribeDataReDistributeInfoResponse
func (client *Client) DescribeDataReDistributeInfo(request *DescribeDataReDistributeInfoRequest) (_result *DescribeDataReDistributeInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDataReDistributeInfoResponse{}
	_body, _err := client.DescribeDataReDistributeInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the state of data sharing for AnalyticDB for PostgreSQL instances.
//
// Description:
//
// Data sharing is supported only for instances in Serverless mode.
//
// @param request - DescribeDataShareInstancesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDataShareInstancesResponse
func (client *Client) DescribeDataShareInstancesWithOptions(request *DescribeDataShareInstancesRequest, runtime *util.RuntimeOptions) (_result *DescribeDataShareInstancesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SearchValue)) {
		query["SearchValue"] = request.SearchValue
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDataShareInstances"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeDataShareInstancesResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeDataShareInstancesResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the state of data sharing for AnalyticDB for PostgreSQL instances.
//
// Description:
//
// Data sharing is supported only for instances in Serverless mode.
//
// @param request - DescribeDataShareInstancesRequest
//
// @return DescribeDataShareInstancesResponse
func (client *Client) DescribeDataShareInstances(request *DescribeDataShareInstancesRequest) (_result *DescribeDataShareInstancesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDataShareInstancesResponse{}
	_body, _err := client.DescribeDataShareInstancesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about data sharing performance metrics.
//
// Description:
//
// You can call this operation to query the details of data sharing performance metrics for an AnalyticDB for PostgreSQL instance in Serverless mode, such as the number of shared topics and the amount of data shared.
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - DescribeDataSharePerformanceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDataSharePerformanceResponse
func (client *Client) DescribeDataSharePerformanceWithOptions(request *DescribeDataSharePerformanceRequest, runtime *util.RuntimeOptions) (_result *DescribeDataSharePerformanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.Key)) {
		query["Key"] = request.Key
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDataSharePerformance"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeDataSharePerformanceResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeDataSharePerformanceResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the information about data sharing performance metrics.
//
// Description:
//
// You can call this operation to query the details of data sharing performance metrics for an AnalyticDB for PostgreSQL instance in Serverless mode, such as the number of shared topics and the amount of data shared.
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - DescribeDataSharePerformanceRequest
//
// @return DescribeDataSharePerformanceResponse
func (client *Client) DescribeDataSharePerformance(request *DescribeDataSharePerformanceRequest) (_result *DescribeDataSharePerformanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDataSharePerformanceResponse{}
	_body, _err := client.DescribeDataSharePerformanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries all databases and database accounts for an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// To facilitate management, you can call this operation to query all databases and database accounts on an AnalyticDB for PostgreSQL instance.
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - DescribeDiagnosisDimensionsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDiagnosisDimensionsResponse
func (client *Client) DescribeDiagnosisDimensionsWithOptions(request *DescribeDiagnosisDimensionsRequest, runtime *util.RuntimeOptions) (_result *DescribeDiagnosisDimensionsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDiagnosisDimensions"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeDiagnosisDimensionsResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeDiagnosisDimensionsResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries all databases and database accounts for an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// To facilitate management, you can call this operation to query all databases and database accounts on an AnalyticDB for PostgreSQL instance.
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - DescribeDiagnosisDimensionsRequest
//
// @return DescribeDiagnosisDimensionsResponse
func (client *Client) DescribeDiagnosisDimensions(request *DescribeDiagnosisDimensionsRequest) (_result *DescribeDiagnosisDimensionsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDiagnosisDimensionsResponse{}
	_body, _err := client.DescribeDiagnosisDimensionsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the details of query execution on an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// You can call this operation to query the details of query execution on an AnalyticDB for PostgreSQL instance in elastic storage mode within a specified time range.
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - DescribeDiagnosisMonitorPerformanceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDiagnosisMonitorPerformanceResponse
func (client *Client) DescribeDiagnosisMonitorPerformanceWithOptions(request *DescribeDiagnosisMonitorPerformanceRequest, runtime *util.RuntimeOptions) (_result *DescribeDiagnosisMonitorPerformanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Database)) {
		query["Database"] = request.Database
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.QueryCondition)) {
		query["QueryCondition"] = request.QueryCondition
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.User)) {
		query["User"] = request.User
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDiagnosisMonitorPerformance"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeDiagnosisMonitorPerformanceResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeDiagnosisMonitorPerformanceResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the details of query execution on an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// You can call this operation to query the details of query execution on an AnalyticDB for PostgreSQL instance in elastic storage mode within a specified time range.
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - DescribeDiagnosisMonitorPerformanceRequest
//
// @return DescribeDiagnosisMonitorPerformanceResponse
func (client *Client) DescribeDiagnosisMonitorPerformance(request *DescribeDiagnosisMonitorPerformanceRequest) (_result *DescribeDiagnosisMonitorPerformanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDiagnosisMonitorPerformanceResponse{}
	_body, _err := client.DescribeDiagnosisMonitorPerformanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about SQL queries for an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// You can call this operation to query the details of SQL queries on an AnalyticDB for PostgreSQL instance within a specified time range.
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - DescribeDiagnosisRecordsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDiagnosisRecordsResponse
func (client *Client) DescribeDiagnosisRecordsWithOptions(request *DescribeDiagnosisRecordsRequest, runtime *util.RuntimeOptions) (_result *DescribeDiagnosisRecordsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Database)) {
		query["Database"] = request.Database
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.Keyword)) {
		query["Keyword"] = request.Keyword
	}

	if !tea.BoolValue(util.IsUnset(request.Order)) {
		query["Order"] = request.Order
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.QueryCondition)) {
		query["QueryCondition"] = request.QueryCondition
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.User)) {
		query["User"] = request.User
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDiagnosisRecords"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeDiagnosisRecordsResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeDiagnosisRecordsResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the information about SQL queries for an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// You can call this operation to query the details of SQL queries on an AnalyticDB for PostgreSQL instance within a specified time range.
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - DescribeDiagnosisRecordsRequest
//
// @return DescribeDiagnosisRecordsResponse
func (client *Client) DescribeDiagnosisRecords(request *DescribeDiagnosisRecordsRequest) (_result *DescribeDiagnosisRecordsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDiagnosisRecordsResponse{}
	_body, _err := client.DescribeDiagnosisRecordsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about a query for an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// You can call this operation to query the information about a query for an AnalyticDB for PostgreSQL instance, including the SQL statement, execution plan text, and execution plan tree.
//
// This operation is available only for instances of V6.3.10.1 or later in elastic storage mode. For information about how to view and update the minor version of an instance, see [View the minor engine version](https://help.aliyun.com/document_detail/277424.html) and [Update the minor engine version](https://help.aliyun.com/document_detail/139271.html).
//
// @param request - DescribeDiagnosisSQLInfoRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDiagnosisSQLInfoResponse
func (client *Client) DescribeDiagnosisSQLInfoWithOptions(request *DescribeDiagnosisSQLInfoRequest, runtime *util.RuntimeOptions) (_result *DescribeDiagnosisSQLInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Database)) {
		query["Database"] = request.Database
	}

	if !tea.BoolValue(util.IsUnset(request.QueryID)) {
		query["QueryID"] = request.QueryID
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDiagnosisSQLInfo"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeDiagnosisSQLInfoResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeDiagnosisSQLInfoResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the information about a query for an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// You can call this operation to query the information about a query for an AnalyticDB for PostgreSQL instance, including the SQL statement, execution plan text, and execution plan tree.
//
// This operation is available only for instances of V6.3.10.1 or later in elastic storage mode. For information about how to view and update the minor version of an instance, see [View the minor engine version](https://help.aliyun.com/document_detail/277424.html) and [Update the minor engine version](https://help.aliyun.com/document_detail/139271.html).
//
// @param request - DescribeDiagnosisSQLInfoRequest
//
// @return DescribeDiagnosisSQLInfoResponse
func (client *Client) DescribeDiagnosisSQLInfo(request *DescribeDiagnosisSQLInfoRequest) (_result *DescribeDiagnosisSQLInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDiagnosisSQLInfoResponse{}
	_body, _err := client.DescribeDiagnosisSQLInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Get Document Details
//
// @param request - DescribeDocumentRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDocumentResponse
func (client *Client) DescribeDocumentWithOptions(request *DescribeDocumentRequest, runtime *util.RuntimeOptions) (_result *DescribeDocumentResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Collection)) {
		query["Collection"] = request.Collection
	}

	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.FileName)) {
		query["FileName"] = request.FileName
	}

	if !tea.BoolValue(util.IsUnset(request.Namespace)) {
		query["Namespace"] = request.Namespace
	}

	if !tea.BoolValue(util.IsUnset(request.NamespacePassword)) {
		query["NamespacePassword"] = request.NamespacePassword
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDocument"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeDocumentResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeDocumentResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Get Document Details
//
// @param request - DescribeDocumentRequest
//
// @return DescribeDocumentResponse
func (client *Client) DescribeDocument(request *DescribeDocumentRequest) (_result *DescribeDocumentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDocumentResponse{}
	_body, _err := client.DescribeDocumentWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the download records of query diagnostic information for an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// You must call the [DownloadDiagnosisRecords](https://help.aliyun.com/document_detail/447700.html) operation to download the query diagnostic information before you can call this operation to query the download records and download URLs.
//
// This operation is available only for instances of V6.3.10.1 or later in elastic storage mode. For information about how to view and update the minor version of an instance, see [View the minor engine version](https://help.aliyun.com/document_detail/277424.html) and [Update the minor engine version](https://help.aliyun.com/document_detail/139271.html).
//
// @param request - DescribeDownloadRecordsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDownloadRecordsResponse
func (client *Client) DescribeDownloadRecordsWithOptions(request *DescribeDownloadRecordsRequest, runtime *util.RuntimeOptions) (_result *DescribeDownloadRecordsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.DownloadTaskType)) {
		query["DownloadTaskType"] = request.DownloadTaskType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDownloadRecords"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeDownloadRecordsResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeDownloadRecordsResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the download records of query diagnostic information for an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// You must call the [DownloadDiagnosisRecords](https://help.aliyun.com/document_detail/447700.html) operation to download the query diagnostic information before you can call this operation to query the download records and download URLs.
//
// This operation is available only for instances of V6.3.10.1 or later in elastic storage mode. For information about how to view and update the minor version of an instance, see [View the minor engine version](https://help.aliyun.com/document_detail/277424.html) and [Update the minor engine version](https://help.aliyun.com/document_detail/139271.html).
//
// @param request - DescribeDownloadRecordsRequest
//
// @return DescribeDownloadRecordsResponse
func (client *Client) DescribeDownloadRecords(request *DescribeDownloadRecordsRequest) (_result *DescribeDownloadRecordsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDownloadRecordsResponse{}
	_body, _err := client.DescribeDownloadRecordsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Get download records
//
// @param request - DescribeDownloadSQLLogsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDownloadSQLLogsResponse
func (client *Client) DescribeDownloadSQLLogsWithOptions(request *DescribeDownloadSQLLogsRequest, runtime *util.RuntimeOptions) (_result *DescribeDownloadSQLLogsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDownloadSQLLogs"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeDownloadSQLLogsResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeDownloadSQLLogsResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Get download records
//
// @param request - DescribeDownloadSQLLogsRequest
//
// @return DescribeDownloadSQLLogsResponse
func (client *Client) DescribeDownloadSQLLogs(request *DescribeDownloadSQLLogsRequest) (_result *DescribeDownloadSQLLogsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDownloadSQLLogsResponse{}
	_body, _err := client.DescribeDownloadSQLLogsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about an external data service.
//
// @param request - DescribeExternalDataServiceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeExternalDataServiceResponse
func (client *Client) DescribeExternalDataServiceWithOptions(request *DescribeExternalDataServiceRequest, runtime *util.RuntimeOptions) (_result *DescribeExternalDataServiceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceId)) {
		query["ServiceId"] = request.ServiceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeExternalDataService"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeExternalDataServiceResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeExternalDataServiceResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the information about an external data service.
//
// @param request - DescribeExternalDataServiceRequest
//
// @return DescribeExternalDataServiceResponse
func (client *Client) DescribeExternalDataService(request *DescribeExternalDataServiceRequest) (_result *DescribeExternalDataServiceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeExternalDataServiceResponse{}
	_body, _err := client.DescribeExternalDataServiceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries E-MapReduce (EMR) Hadoop clusters in a specific virtual private cloud (VPC).
//
// @param request - DescribeHadoopClustersInSameNetRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeHadoopClustersInSameNetResponse
func (client *Client) DescribeHadoopClustersInSameNetWithOptions(request *DescribeHadoopClustersInSameNetRequest, runtime *util.RuntimeOptions) (_result *DescribeHadoopClustersInSameNetResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeHadoopClustersInSameNet"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeHadoopClustersInSameNetResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeHadoopClustersInSameNetResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries E-MapReduce (EMR) Hadoop clusters in a specific virtual private cloud (VPC).
//
// @param request - DescribeHadoopClustersInSameNetRequest
//
// @return DescribeHadoopClustersInSameNetResponse
func (client *Client) DescribeHadoopClustersInSameNet(request *DescribeHadoopClustersInSameNetRequest) (_result *DescribeHadoopClustersInSameNetResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeHadoopClustersInSameNetResponse{}
	_body, _err := client.DescribeHadoopClustersInSameNetWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the configuration information about a Hadoop cluster.
//
// @param request - DescribeHadoopConfigsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeHadoopConfigsResponse
func (client *Client) DescribeHadoopConfigsWithOptions(request *DescribeHadoopConfigsRequest, runtime *util.RuntimeOptions) (_result *DescribeHadoopConfigsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConfigName)) {
		query["ConfigName"] = request.ConfigName
	}

	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.EmrInstanceId)) {
		query["EmrInstanceId"] = request.EmrInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeHadoopConfigs"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeHadoopConfigsResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeHadoopConfigsResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the configuration information about a Hadoop cluster.
//
// @param request - DescribeHadoopConfigsRequest
//
// @return DescribeHadoopConfigsResponse
func (client *Client) DescribeHadoopConfigs(request *DescribeHadoopConfigsRequest) (_result *DescribeHadoopConfigsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeHadoopConfigsResponse{}
	_body, _err := client.DescribeHadoopConfigsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Obtains the configurations of a Hadoop data source.
//
// @param request - DescribeHadoopDataSourceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeHadoopDataSourceResponse
func (client *Client) DescribeHadoopDataSourceWithOptions(request *DescribeHadoopDataSourceRequest, runtime *util.RuntimeOptions) (_result *DescribeHadoopDataSourceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.DataSourceId)) {
		query["DataSourceId"] = request.DataSourceId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeHadoopDataSource"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeHadoopDataSourceResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeHadoopDataSourceResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Obtains the configurations of a Hadoop data source.
//
// @param request - DescribeHadoopDataSourceRequest
//
// @return DescribeHadoopDataSourceResponse
func (client *Client) DescribeHadoopDataSource(request *DescribeHadoopDataSourceRequest) (_result *DescribeHadoopDataSourceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeHadoopDataSourceResponse{}
	_body, _err := client.DescribeHadoopDataSourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the health status of an AnalyticDB for PostgreSQL instance and its nodes.
//
// Description:
//
// This operation is called to query the health status of an AnalyticDB for PostgreSQL instance in elastic storage mode or Serverless mode and its coordinator and compute nodes.
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - DescribeHealthStatusRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeHealthStatusResponse
func (client *Client) DescribeHealthStatusWithOptions(request *DescribeHealthStatusRequest, runtime *util.RuntimeOptions) (_result *DescribeHealthStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Key)) {
		query["Key"] = request.Key
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeHealthStatus"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeHealthStatusResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeHealthStatusResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the health status of an AnalyticDB for PostgreSQL instance and its nodes.
//
// Description:
//
// This operation is called to query the health status of an AnalyticDB for PostgreSQL instance in elastic storage mode or Serverless mode and its coordinator and compute nodes.
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - DescribeHealthStatusRequest
//
// @return DescribeHealthStatusResponse
func (client *Client) DescribeHealthStatus(request *DescribeHealthStatusRequest) (_result *DescribeHealthStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeHealthStatusResponse{}
	_body, _err := client.DescribeHealthStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about real-time materialized views of an AnalyticDB for PostgreSQL instance.
//
// @param request - DescribeIMVInfosRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeIMVInfosResponse
func (client *Client) DescribeIMVInfosWithOptions(request *DescribeIMVInfosRequest, runtime *util.RuntimeOptions) (_result *DescribeIMVInfosResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Database)) {
		query["Database"] = request.Database
	}

	if !tea.BoolValue(util.IsUnset(request.MVName)) {
		query["MVName"] = request.MVName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeIMVInfos"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeIMVInfosResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeIMVInfosResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the information about real-time materialized views of an AnalyticDB for PostgreSQL instance.
//
// @param request - DescribeIMVInfosRequest
//
// @return DescribeIMVInfosResponse
func (client *Client) DescribeIMVInfos(request *DescribeIMVInfosRequest) (_result *DescribeIMVInfosResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeIMVInfosResponse{}
	_body, _err := client.DescribeIMVInfosWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取索引详情
//
// @param request - DescribeIndexRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeIndexResponse
func (client *Client) DescribeIndexWithOptions(request *DescribeIndexRequest, runtime *util.RuntimeOptions) (_result *DescribeIndexResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Collection)) {
		query["Collection"] = request.Collection
	}

	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.IndexName)) {
		query["IndexName"] = request.IndexName
	}

	if !tea.BoolValue(util.IsUnset(request.Namespace)) {
		query["Namespace"] = request.Namespace
	}

	if !tea.BoolValue(util.IsUnset(request.NamespacePassword)) {
		query["NamespacePassword"] = request.NamespacePassword
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		query["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeIndex"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeIndexResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeIndexResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// 获取索引详情
//
// @param request - DescribeIndexRequest
//
// @return DescribeIndexResponse
func (client *Client) DescribeIndex(request *DescribeIndexRequest) (_result *DescribeIndexResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeIndexResponse{}
	_body, _err := client.DescribeIndexWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the configurations of a Java Database Connectivity (JDBC) data source.
//
// @param request - DescribeJDBCDataSourceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeJDBCDataSourceResponse
func (client *Client) DescribeJDBCDataSourceWithOptions(request *DescribeJDBCDataSourceRequest, runtime *util.RuntimeOptions) (_result *DescribeJDBCDataSourceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.DataSourceId)) {
		query["DataSourceId"] = request.DataSourceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeJDBCDataSource"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeJDBCDataSourceResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeJDBCDataSourceResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the configurations of a Java Database Connectivity (JDBC) data source.
//
// @param request - DescribeJDBCDataSourceRequest
//
// @return DescribeJDBCDataSourceResponse
func (client *Client) DescribeJDBCDataSource(request *DescribeJDBCDataSourceRequest) (_result *DescribeJDBCDataSourceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeJDBCDataSourceResponse{}
	_body, _err := client.DescribeJDBCDataSourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of log backups.
//
// @param request - DescribeLogBackupsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLogBackupsResponse
func (client *Client) DescribeLogBackupsWithOptions(request *DescribeLogBackupsRequest, runtime *util.RuntimeOptions) (_result *DescribeLogBackupsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeLogBackups"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeLogBackupsResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeLogBackupsResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries a list of log backups.
//
// @param request - DescribeLogBackupsRequest
//
// @return DescribeLogBackupsResponse
func (client *Client) DescribeLogBackups(request *DescribeLogBackupsRequest) (_result *DescribeLogBackupsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLogBackupsResponse{}
	_body, _err := client.DescribeLogBackupsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the parameter modification logs of an AnalyticDB for PostgreSQL instance.
//
// @param request - DescribeModifyParameterLogRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeModifyParameterLogResponse
func (client *Client) DescribeModifyParameterLogWithOptions(request *DescribeModifyParameterLogRequest, runtime *util.RuntimeOptions) (_result *DescribeModifyParameterLogResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeModifyParameterLog"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeModifyParameterLogResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeModifyParameterLogResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the parameter modification logs of an AnalyticDB for PostgreSQL instance.
//
// @param request - DescribeModifyParameterLogRequest
//
// @return DescribeModifyParameterLogResponse
func (client *Client) DescribeModifyParameterLog(request *DescribeModifyParameterLogRequest) (_result *DescribeModifyParameterLogResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeModifyParameterLogResponse{}
	_body, _err := client.DescribeModifyParameterLogWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about a namespace.
//
// @param request - DescribeNamespaceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeNamespaceResponse
func (client *Client) DescribeNamespaceWithOptions(request *DescribeNamespaceRequest, runtime *util.RuntimeOptions) (_result *DescribeNamespaceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.ManagerAccount)) {
		query["ManagerAccount"] = request.ManagerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ManagerAccountPassword)) {
		query["ManagerAccountPassword"] = request.ManagerAccountPassword
	}

	if !tea.BoolValue(util.IsUnset(request.Namespace)) {
		query["Namespace"] = request.Namespace
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		query["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeNamespace"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeNamespaceResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeNamespaceResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the information about a namespace.
//
// @param request - DescribeNamespaceRequest
//
// @return DescribeNamespaceResponse
func (client *Client) DescribeNamespace(request *DescribeNamespaceRequest) (_result *DescribeNamespaceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeNamespaceResponse{}
	_body, _err := client.DescribeNamespaceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about configuration parameters for an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// This operation can be called to query the details of parameters in an AnalyticDB for PostgreSQL instance in elastic storage mode or Serverless mode.
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered and may affect your business. We recommend that you take note of the limit when you call this operation.
//
// @param request - DescribeParametersRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeParametersResponse
func (client *Client) DescribeParametersWithOptions(request *DescribeParametersRequest, runtime *util.RuntimeOptions) (_result *DescribeParametersResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeParameters"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeParametersResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeParametersResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the information about configuration parameters for an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// This operation can be called to query the details of parameters in an AnalyticDB for PostgreSQL instance in elastic storage mode or Serverless mode.
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered and may affect your business. We recommend that you take note of the limit when you call this operation.
//
// @param request - DescribeParametersRequest
//
// @return DescribeParametersResponse
func (client *Client) DescribeParameters(request *DescribeParametersRequest) (_result *DescribeParametersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeParametersResponse{}
	_body, _err := client.DescribeParametersWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of vSwitches.
//
// Description:
//
// When you create AnalyticDB for PostgreSQL instances, you can call this operation to query the details of vSwitches within a specified region or zone.
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - DescribeRdsVSwitchsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeRdsVSwitchsResponse
func (client *Client) DescribeRdsVSwitchsWithOptions(request *DescribeRdsVSwitchsRequest, runtime *util.RuntimeOptions) (_result *DescribeRdsVSwitchsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.VpcId)) {
		query["VpcId"] = request.VpcId
	}

	if !tea.BoolValue(util.IsUnset(request.ZoneId)) {
		query["ZoneId"] = request.ZoneId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeRdsVSwitchs"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeRdsVSwitchsResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeRdsVSwitchsResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries a list of vSwitches.
//
// Description:
//
// When you create AnalyticDB for PostgreSQL instances, you can call this operation to query the details of vSwitches within a specified region or zone.
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - DescribeRdsVSwitchsRequest
//
// @return DescribeRdsVSwitchsResponse
func (client *Client) DescribeRdsVSwitchs(request *DescribeRdsVSwitchsRequest) (_result *DescribeRdsVSwitchsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeRdsVSwitchsResponse{}
	_body, _err := client.DescribeRdsVSwitchsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of VPCs.
//
// Description:
//
// When you create an AnalyticDB for PostgreSQL instance, you can call this operation to query the available VPCs within a specified region or zone.
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - DescribeRdsVpcsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeRdsVpcsResponse
func (client *Client) DescribeRdsVpcsWithOptions(request *DescribeRdsVpcsRequest, runtime *util.RuntimeOptions) (_result *DescribeRdsVpcsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.ZoneId)) {
		query["ZoneId"] = request.ZoneId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeRdsVpcs"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeRdsVpcsResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeRdsVpcsResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries a list of VPCs.
//
// Description:
//
// When you create an AnalyticDB for PostgreSQL instance, you can call this operation to query the available VPCs within a specified region or zone.
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - DescribeRdsVpcsRequest
//
// @return DescribeRdsVpcsResponse
func (client *Client) DescribeRdsVpcs(request *DescribeRdsVpcsRequest) (_result *DescribeRdsVpcsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeRdsVpcsResponse{}
	_body, _err := client.DescribeRdsVpcsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of regions and zones where AnalyticDB for PostgreSQL is available.
//
// Description:
//
// Before you create an AnalyticDB for PostgreSQL instance, you must call this operation to query available regions and zones.
//
// ## Limit
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered and may affect your business. We recommend that you take note of the limit when you call this operation.
//
// @param request - DescribeRegionsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeRegionsResponse
func (client *Client) DescribeRegionsWithOptions(request *DescribeRegionsRequest, runtime *util.RuntimeOptions) (_result *DescribeRegionsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Region)) {
		query["Region"] = request.Region
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeRegions"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeRegionsResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeRegionsResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries a list of regions and zones where AnalyticDB for PostgreSQL is available.
//
// Description:
//
// Before you create an AnalyticDB for PostgreSQL instance, you must call this operation to query available regions and zones.
//
// ## Limit
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered and may affect your business. We recommend that you take note of the limit when you call this operation.
//
// @param request - DescribeRegionsRequest
//
// @return DescribeRegionsResponse
func (client *Client) DescribeRegions(request *DescribeRegionsRequest) (_result *DescribeRegionsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeRegionsResponse{}
	_body, _err := client.DescribeRegionsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of roles.
//
// @param request - DescribeRolesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeRolesResponse
func (client *Client) DescribeRolesWithOptions(request *DescribeRolesRequest, runtime *util.RuntimeOptions) (_result *DescribeRolesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeRoles"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeRolesResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeRolesResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries a list of roles.
//
// @param request - DescribeRolesRequest
//
// @return DescribeRolesResponse
func (client *Client) DescribeRoles(request *DescribeRolesRequest) (_result *DescribeRolesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeRolesResponse{}
	_body, _err := client.DescribeRolesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the number of audit logs for an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// This operation is not available for instances in reserved storage mode.
//
// @param request - DescribeSQLLogCountRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeSQLLogCountResponse
func (client *Client) DescribeSQLLogCountWithOptions(request *DescribeSQLLogCountRequest, runtime *util.RuntimeOptions) (_result *DescribeSQLLogCountResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Database)) {
		query["Database"] = request.Database
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.ExecuteCost)) {
		query["ExecuteCost"] = request.ExecuteCost
	}

	if !tea.BoolValue(util.IsUnset(request.ExecuteState)) {
		query["ExecuteState"] = request.ExecuteState
	}

	if !tea.BoolValue(util.IsUnset(request.MaxExecuteCost)) {
		query["MaxExecuteCost"] = request.MaxExecuteCost
	}

	if !tea.BoolValue(util.IsUnset(request.MinExecuteCost)) {
		query["MinExecuteCost"] = request.MinExecuteCost
	}

	if !tea.BoolValue(util.IsUnset(request.OperationClass)) {
		query["OperationClass"] = request.OperationClass
	}

	if !tea.BoolValue(util.IsUnset(request.OperationType)) {
		query["OperationType"] = request.OperationType
	}

	if !tea.BoolValue(util.IsUnset(request.QueryKeywords)) {
		query["QueryKeywords"] = request.QueryKeywords
	}

	if !tea.BoolValue(util.IsUnset(request.SourceIP)) {
		query["SourceIP"] = request.SourceIP
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.User)) {
		query["User"] = request.User
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSQLLogCount"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeSQLLogCountResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeSQLLogCountResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the number of audit logs for an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// This operation is not available for instances in reserved storage mode.
//
// @param request - DescribeSQLLogCountRequest
//
// @return DescribeSQLLogCountResponse
func (client *Client) DescribeSQLLogCount(request *DescribeSQLLogCountRequest) (_result *DescribeSQLLogCountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSQLLogCountResponse{}
	_body, _err := client.DescribeSQLLogCountWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the SQL execution logs of an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// > This operation is no longer used. To query SQL execution logs, call the [DescribeSQLLogsV2](https://help.aliyun.com/document_detail/453722.html) operation.
//
// @param request - DescribeSQLLogsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeSQLLogsResponse
func (client *Client) DescribeSQLLogsWithOptions(request *DescribeSQLLogsRequest, runtime *util.RuntimeOptions) (_result *DescribeSQLLogsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Database)) {
		query["Database"] = request.Database
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.ExecuteCost)) {
		query["ExecuteCost"] = request.ExecuteCost
	}

	if !tea.BoolValue(util.IsUnset(request.ExecuteState)) {
		query["ExecuteState"] = request.ExecuteState
	}

	if !tea.BoolValue(util.IsUnset(request.MaxExecuteCost)) {
		query["MaxExecuteCost"] = request.MaxExecuteCost
	}

	if !tea.BoolValue(util.IsUnset(request.MinExecuteCost)) {
		query["MinExecuteCost"] = request.MinExecuteCost
	}

	if !tea.BoolValue(util.IsUnset(request.OperationClass)) {
		query["OperationClass"] = request.OperationClass
	}

	if !tea.BoolValue(util.IsUnset(request.OperationType)) {
		query["OperationType"] = request.OperationType
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.QueryKeywords)) {
		query["QueryKeywords"] = request.QueryKeywords
	}

	if !tea.BoolValue(util.IsUnset(request.SourceIP)) {
		query["SourceIP"] = request.SourceIP
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.User)) {
		query["User"] = request.User
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSQLLogs"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeSQLLogsResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeSQLLogsResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the SQL execution logs of an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// > This operation is no longer used. To query SQL execution logs, call the [DescribeSQLLogsV2](https://help.aliyun.com/document_detail/453722.html) operation.
//
// @param request - DescribeSQLLogsRequest
//
// @return DescribeSQLLogsResponse
func (client *Client) DescribeSQLLogs(request *DescribeSQLLogsRequest) (_result *DescribeSQLLogsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSQLLogsResponse{}
	_body, _err := client.DescribeSQLLogsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries SQL logs within a specific time range.
//
// Description:
//
// You can call this operation to query SQL logs of an AnalyticDB for PostgreSQL instance within a specific time range.
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - DescribeSQLLogsV2Request
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeSQLLogsV2Response
func (client *Client) DescribeSQLLogsV2WithOptions(request *DescribeSQLLogsV2Request, runtime *util.RuntimeOptions) (_result *DescribeSQLLogsV2Response, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Database)) {
		query["Database"] = request.Database
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.ExecuteCost)) {
		query["ExecuteCost"] = request.ExecuteCost
	}

	if !tea.BoolValue(util.IsUnset(request.ExecuteState)) {
		query["ExecuteState"] = request.ExecuteState
	}

	if !tea.BoolValue(util.IsUnset(request.MaxExecuteCost)) {
		query["MaxExecuteCost"] = request.MaxExecuteCost
	}

	if !tea.BoolValue(util.IsUnset(request.MinExecuteCost)) {
		query["MinExecuteCost"] = request.MinExecuteCost
	}

	if !tea.BoolValue(util.IsUnset(request.OperationClass)) {
		query["OperationClass"] = request.OperationClass
	}

	if !tea.BoolValue(util.IsUnset(request.OperationType)) {
		query["OperationType"] = request.OperationType
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.QueryKeywords)) {
		query["QueryKeywords"] = request.QueryKeywords
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SourceIP)) {
		query["SourceIP"] = request.SourceIP
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.User)) {
		query["User"] = request.User
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSQLLogsV2"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeSQLLogsV2Response{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeSQLLogsV2Response{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries SQL logs within a specific time range.
//
// Description:
//
// You can call this operation to query SQL logs of an AnalyticDB for PostgreSQL instance within a specific time range.
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - DescribeSQLLogsV2Request
//
// @return DescribeSQLLogsV2Response
func (client *Client) DescribeSQLLogsV2(request *DescribeSQLLogsV2Request) (_result *DescribeSQLLogsV2Response, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSQLLogsV2Response{}
	_body, _err := client.DescribeSQLLogsV2WithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries whether a sample dataset is loaded to an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - DescribeSampleDataRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeSampleDataResponse
func (client *Client) DescribeSampleDataWithOptions(request *DescribeSampleDataRequest, runtime *util.RuntimeOptions) (_result *DescribeSampleDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSampleData"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeSampleDataResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeSampleDataResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries whether a sample dataset is loaded to an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - DescribeSampleDataRequest
//
// @return DescribeSampleDataResponse
func (client *Client) DescribeSampleData(request *DescribeSampleDataRequest) (_result *DescribeSampleDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSampleDataResponse{}
	_body, _err := client.DescribeSampleDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a real-time data service.
//
// @param request - DescribeStreamingDataServiceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeStreamingDataServiceResponse
func (client *Client) DescribeStreamingDataServiceWithOptions(request *DescribeStreamingDataServiceRequest, runtime *util.RuntimeOptions) (_result *DescribeStreamingDataServiceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceId)) {
		query["ServiceId"] = request.ServiceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeStreamingDataService"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeStreamingDataServiceResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeStreamingDataServiceResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries a real-time data service.
//
// @param request - DescribeStreamingDataServiceRequest
//
// @return DescribeStreamingDataServiceResponse
func (client *Client) DescribeStreamingDataService(request *DescribeStreamingDataServiceRequest) (_result *DescribeStreamingDataServiceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeStreamingDataServiceResponse{}
	_body, _err := client.DescribeStreamingDataServiceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Get external data source configuration information
//
// @param request - DescribeStreamingDataSourceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeStreamingDataSourceResponse
func (client *Client) DescribeStreamingDataSourceWithOptions(request *DescribeStreamingDataSourceRequest, runtime *util.RuntimeOptions) (_result *DescribeStreamingDataSourceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.DataSourceId)) {
		query["DataSourceId"] = request.DataSourceId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeStreamingDataSource"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeStreamingDataSourceResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeStreamingDataSourceResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Get external data source configuration information
//
// @param request - DescribeStreamingDataSourceRequest
//
// @return DescribeStreamingDataSourceResponse
func (client *Client) DescribeStreamingDataSource(request *DescribeStreamingDataSourceRequest) (_result *DescribeStreamingDataSourceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeStreamingDataSourceResponse{}
	_body, _err := client.DescribeStreamingDataSourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Delete External Data Source Configuration
//
// @param request - DescribeStreamingJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeStreamingJobResponse
func (client *Client) DescribeStreamingJobWithOptions(request *DescribeStreamingJobRequest, runtime *util.RuntimeOptions) (_result *DescribeStreamingJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeStreamingJob"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeStreamingJobResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeStreamingJobResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Delete External Data Source Configuration
//
// @param request - DescribeStreamingJobRequest
//
// @return DescribeStreamingJobResponse
func (client *Client) DescribeStreamingJob(request *DescribeStreamingJobRequest) (_result *DescribeStreamingJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeStreamingJobResponse{}
	_body, _err := client.DescribeStreamingJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the features that are supported by an AnalyticDB for PostgreSQL instance.
//
// @param request - DescribeSupportFeaturesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeSupportFeaturesResponse
func (client *Client) DescribeSupportFeaturesWithOptions(request *DescribeSupportFeaturesRequest, runtime *util.RuntimeOptions) (_result *DescribeSupportFeaturesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSupportFeatures"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeSupportFeaturesResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeSupportFeaturesResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the features that are supported by an AnalyticDB for PostgreSQL instance.
//
// @param request - DescribeSupportFeaturesRequest
//
// @return DescribeSupportFeaturesResponse
func (client *Client) DescribeSupportFeatures(request *DescribeSupportFeaturesRequest) (_result *DescribeSupportFeaturesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSupportFeaturesResponse{}
	_body, _err := client.DescribeSupportFeaturesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about a table.
//
// @param request - DescribeTableRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeTableResponse
func (client *Client) DescribeTableWithOptions(request *DescribeTableRequest, runtime *util.RuntimeOptions) (_result *DescribeTableResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Database)) {
		query["Database"] = request.Database
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.Schema)) {
		query["Schema"] = request.Schema
	}

	if !tea.BoolValue(util.IsUnset(request.SecretArn)) {
		query["SecretArn"] = request.SecretArn
	}

	if !tea.BoolValue(util.IsUnset(request.Table)) {
		query["Table"] = request.Table
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		query["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeTable"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeTableResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeTableResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the information about a table.
//
// @param request - DescribeTableRequest
//
// @return DescribeTableResponse
func (client *Client) DescribeTable(request *DescribeTableRequest) (_result *DescribeTableResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeTableResponse{}
	_body, _err := client.DescribeTableWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of tags for AnalyticDB for PostgreSQL instances.
//
// @param request - DescribeTagsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeTagsResponse
func (client *Client) DescribeTagsWithOptions(request *DescribeTagsRequest, runtime *util.RuntimeOptions) (_result *DescribeTagsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceType)) {
		query["ResourceType"] = request.ResourceType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeTags"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeTagsResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeTagsResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries a list of tags for AnalyticDB for PostgreSQL instances.
//
// @param request - DescribeTagsRequest
//
// @return DescribeTagsResponse
func (client *Client) DescribeTags(request *DescribeTagsRequest) (_result *DescribeTagsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeTagsResponse{}
	_body, _err := client.DescribeTagsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of Key Management Service (KMS) keys.
//
// @param request - DescribeUserEncryptionKeyListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeUserEncryptionKeyListResponse
func (client *Client) DescribeUserEncryptionKeyListWithOptions(request *DescribeUserEncryptionKeyListRequest, runtime *util.RuntimeOptions) (_result *DescribeUserEncryptionKeyListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeUserEncryptionKeyList"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeUserEncryptionKeyListResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeUserEncryptionKeyListResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries a list of Key Management Service (KMS) keys.
//
// @param request - DescribeUserEncryptionKeyListRequest
//
// @return DescribeUserEncryptionKeyListResponse
func (client *Client) DescribeUserEncryptionKeyList(request *DescribeUserEncryptionKeyListRequest) (_result *DescribeUserEncryptionKeyListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeUserEncryptionKeyListResponse{}
	_body, _err := client.DescribeUserEncryptionKeyListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about a lock-waiting query for an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// You can call this operation to query the details of a lock-waiting query only for an AnalyticDB for PostgreSQL V6.0 instance in elastic storage mode.
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - DescribeWaitingSQLInfoRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeWaitingSQLInfoResponse
func (client *Client) DescribeWaitingSQLInfoWithOptions(request *DescribeWaitingSQLInfoRequest, runtime *util.RuntimeOptions) (_result *DescribeWaitingSQLInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Database)) {
		query["Database"] = request.Database
	}

	if !tea.BoolValue(util.IsUnset(request.PID)) {
		query["PID"] = request.PID
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeWaitingSQLInfo"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeWaitingSQLInfoResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeWaitingSQLInfoResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the information about a lock-waiting query for an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// You can call this operation to query the details of a lock-waiting query only for an AnalyticDB for PostgreSQL V6.0 instance in elastic storage mode.
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - DescribeWaitingSQLInfoRequest
//
// @return DescribeWaitingSQLInfoResponse
func (client *Client) DescribeWaitingSQLInfo(request *DescribeWaitingSQLInfoRequest) (_result *DescribeWaitingSQLInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeWaitingSQLInfoResponse{}
	_body, _err := client.DescribeWaitingSQLInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the lock diagnostic records of an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// You can call this operation to query the lock diagnostics records only for an AnalyticDB for PostgreSQL V6.0 instance in elastic storage mode.
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - DescribeWaitingSQLRecordsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeWaitingSQLRecordsResponse
func (client *Client) DescribeWaitingSQLRecordsWithOptions(request *DescribeWaitingSQLRecordsRequest, runtime *util.RuntimeOptions) (_result *DescribeWaitingSQLRecordsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Database)) {
		query["Database"] = request.Database
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.Keyword)) {
		query["Keyword"] = request.Keyword
	}

	if !tea.BoolValue(util.IsUnset(request.Order)) {
		query["Order"] = request.Order
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.QueryCondition)) {
		query["QueryCondition"] = request.QueryCondition
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.User)) {
		query["User"] = request.User
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeWaitingSQLRecords"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeWaitingSQLRecordsResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeWaitingSQLRecordsResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the lock diagnostic records of an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// You can call this operation to query the lock diagnostics records only for an AnalyticDB for PostgreSQL V6.0 instance in elastic storage mode.
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - DescribeWaitingSQLRecordsRequest
//
// @return DescribeWaitingSQLRecordsResponse
func (client *Client) DescribeWaitingSQLRecords(request *DescribeWaitingSQLRecordsRequest) (_result *DescribeWaitingSQLRecordsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeWaitingSQLRecordsResponse{}
	_body, _err := client.DescribeWaitingSQLRecordsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Disables resource group management for an AnalyticDB for PostgreSQL V6.0 instance in elastic storage mode. After you disable resource group management, the resource management method of the instance switches from resource group management to resource queue management.
//
// Description:
//
//   You can call this operation only for AnalyticDB for PostgreSQL V6.0 instances in elastic storage mode whose minor version is V6.6.1.0 or later.
//
// 	- You can call this operation to disable resource group management only for AnalyticDB for PostgreSQL instances that are in the **Running*	- state.
//
// 	- **Note: When the resource management method is switched, your AnalyticDB for PostgreSQL instance restarts and becomes unavailable for approximately 5 minutes. To prevent your business from being affected, call this operation during off-peak hours.
//
// @param request - DisableDBResourceGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DisableDBResourceGroupResponse
func (client *Client) DisableDBResourceGroupWithOptions(request *DisableDBResourceGroupRequest, runtime *util.RuntimeOptions) (_result *DisableDBResourceGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DisableDBResourceGroup"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DisableDBResourceGroupResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DisableDBResourceGroupResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Disables resource group management for an AnalyticDB for PostgreSQL V6.0 instance in elastic storage mode. After you disable resource group management, the resource management method of the instance switches from resource group management to resource queue management.
//
// Description:
//
//   You can call this operation only for AnalyticDB for PostgreSQL V6.0 instances in elastic storage mode whose minor version is V6.6.1.0 or later.
//
// 	- You can call this operation to disable resource group management only for AnalyticDB for PostgreSQL instances that are in the **Running*	- state.
//
// 	- **Note: When the resource management method is switched, your AnalyticDB for PostgreSQL instance restarts and becomes unavailable for approximately 5 minutes. To prevent your business from being affected, call this operation during off-peak hours.
//
// @param request - DisableDBResourceGroupRequest
//
// @return DisableDBResourceGroupResponse
func (client *Client) DisableDBResourceGroup(request *DisableDBResourceGroupRequest) (_result *DisableDBResourceGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DisableDBResourceGroupResponse{}
	_body, _err := client.DisableDBResourceGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Downloads the query diagnostic information of an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// You can call this operation to download the query diagnostic information of an AnalyticDB for PostgreSQL instance. After the download is complete, you can call the [DescribeDownloadRecords](https://help.aliyun.com/document_detail/447712.html) operation to query download records and download URLs.
//
// This operation is available only for instances of V6.3.10.1 or later in elastic storage mode. For more information about how to view and update the minor engine version of an instance, see [View the minor engine version](https://help.aliyun.com/document_detail/277424.html) and [Update the minor engine version](https://help.aliyun.com/document_detail/139271.html).
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - DownloadDiagnosisRecordsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DownloadDiagnosisRecordsResponse
func (client *Client) DownloadDiagnosisRecordsWithOptions(request *DownloadDiagnosisRecordsRequest, runtime *util.RuntimeOptions) (_result *DownloadDiagnosisRecordsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Database)) {
		query["Database"] = request.Database
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.QueryCondition)) {
		query["QueryCondition"] = request.QueryCondition
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.User)) {
		query["User"] = request.User
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DownloadDiagnosisRecords"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DownloadDiagnosisRecordsResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DownloadDiagnosisRecordsResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Downloads the query diagnostic information of an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// You can call this operation to download the query diagnostic information of an AnalyticDB for PostgreSQL instance. After the download is complete, you can call the [DescribeDownloadRecords](https://help.aliyun.com/document_detail/447712.html) operation to query download records and download URLs.
//
// This operation is available only for instances of V6.3.10.1 or later in elastic storage mode. For more information about how to view and update the minor engine version of an instance, see [View the minor engine version](https://help.aliyun.com/document_detail/277424.html) and [Update the minor engine version](https://help.aliyun.com/document_detail/139271.html).
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - DownloadDiagnosisRecordsRequest
//
// @return DownloadDiagnosisRecordsResponse
func (client *Client) DownloadDiagnosisRecords(request *DownloadDiagnosisRecordsRequest) (_result *DownloadDiagnosisRecordsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DownloadDiagnosisRecordsResponse{}
	_body, _err := client.DownloadDiagnosisRecordsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Download the slow query logs of an AnalyticDB for PostgreSQL instance.
//
// @param request - DownloadSQLLogsRecordsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DownloadSQLLogsRecordsResponse
func (client *Client) DownloadSQLLogsRecordsWithOptions(request *DownloadSQLLogsRecordsRequest, runtime *util.RuntimeOptions) (_result *DownloadSQLLogsRecordsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Database)) {
		query["Database"] = request.Database
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.ExecuteCost)) {
		query["ExecuteCost"] = request.ExecuteCost
	}

	if !tea.BoolValue(util.IsUnset(request.ExecuteState)) {
		query["ExecuteState"] = request.ExecuteState
	}

	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.MaxExecuteCost)) {
		query["MaxExecuteCost"] = request.MaxExecuteCost
	}

	if !tea.BoolValue(util.IsUnset(request.MinExecuteCost)) {
		query["MinExecuteCost"] = request.MinExecuteCost
	}

	if !tea.BoolValue(util.IsUnset(request.OperationClass)) {
		query["OperationClass"] = request.OperationClass
	}

	if !tea.BoolValue(util.IsUnset(request.OperationType)) {
		query["OperationType"] = request.OperationType
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.QueryKeywords)) {
		query["QueryKeywords"] = request.QueryKeywords
	}

	if !tea.BoolValue(util.IsUnset(request.SourceIP)) {
		query["SourceIP"] = request.SourceIP
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.User)) {
		query["User"] = request.User
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DownloadSQLLogsRecords"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DownloadSQLLogsRecordsResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DownloadSQLLogsRecordsResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Download the slow query logs of an AnalyticDB for PostgreSQL instance.
//
// @param request - DownloadSQLLogsRecordsRequest
//
// @return DownloadSQLLogsRecordsResponse
func (client *Client) DownloadSQLLogsRecords(request *DownloadSQLLogsRecordsRequest) (_result *DownloadSQLLogsRecordsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DownloadSQLLogsRecordsResponse{}
	_body, _err := client.DownloadSQLLogsRecordsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Enables resource group management for an AnalyticDB for PostgreSQL V6.0 instance in elastic storage mode. After resource group management is enabled, the resource management mode of the instance is changed from resource queue to resource group.
//
// Description:
//
//   You can call this operation only for AnalyticDB for PostgreSQL V6.0 instances in elastic storage mode whose minor version is V6.6.1.0 or later.
//
// 	- You can call this operation to enable resource group management only for AnalyticDB for PostgreSQL instances that are in the **Running*	- state.
//
// 	- **Note: When the resource management mode is changed, your AnalyticDB for PostgreSQL instance is restarted and remains unavailable within 5 minutes. To prevent your business from being affected, call this operation during off-peak hours.
//
// @param request - EnableDBResourceGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return EnableDBResourceGroupResponse
func (client *Client) EnableDBResourceGroupWithOptions(request *EnableDBResourceGroupRequest, runtime *util.RuntimeOptions) (_result *EnableDBResourceGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("EnableDBResourceGroup"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &EnableDBResourceGroupResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &EnableDBResourceGroupResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Enables resource group management for an AnalyticDB for PostgreSQL V6.0 instance in elastic storage mode. After resource group management is enabled, the resource management mode of the instance is changed from resource queue to resource group.
//
// Description:
//
//   You can call this operation only for AnalyticDB for PostgreSQL V6.0 instances in elastic storage mode whose minor version is V6.6.1.0 or later.
//
// 	- You can call this operation to enable resource group management only for AnalyticDB for PostgreSQL instances that are in the **Running*	- state.
//
// 	- **Note: When the resource management mode is changed, your AnalyticDB for PostgreSQL instance is restarted and remains unavailable within 5 minutes. To prevent your business from being affected, call this operation during off-peak hours.
//
// @param request - EnableDBResourceGroupRequest
//
// @return EnableDBResourceGroupResponse
func (client *Client) EnableDBResourceGroup(request *EnableDBResourceGroupRequest) (_result *EnableDBResourceGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &EnableDBResourceGroupResponse{}
	_body, _err := client.EnableDBResourceGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Executes SQL statements.
//
// @param tmpReq - ExecuteStatementRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ExecuteStatementResponse
func (client *Client) ExecuteStatementWithOptions(tmpReq *ExecuteStatementRequest, runtime *util.RuntimeOptions) (_result *ExecuteStatementResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &ExecuteStatementShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Parameters)) {
		request.ParametersShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Parameters, tea.String("Parameters"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.RagWorkspaceCollection)) {
		request.RagWorkspaceCollectionShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.RagWorkspaceCollection, tea.String("RagWorkspaceCollection"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.Sqls)) {
		request.SqlsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Sqls, tea.String("Sqls"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Database)) {
		query["Database"] = request.Database
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RagWorkspaceCollectionShrink)) {
		query["RagWorkspaceCollection"] = request.RagWorkspaceCollectionShrink
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.RunType)) {
		query["RunType"] = request.RunType
	}

	if !tea.BoolValue(util.IsUnset(request.SecretArn)) {
		query["SecretArn"] = request.SecretArn
	}

	if !tea.BoolValue(util.IsUnset(request.StatementName)) {
		query["StatementName"] = request.StatementName
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		query["WorkspaceId"] = request.WorkspaceId
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ParametersShrink)) {
		body["Parameters"] = request.ParametersShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Sql)) {
		body["Sql"] = request.Sql
	}

	if !tea.BoolValue(util.IsUnset(request.SqlsShrink)) {
		body["Sqls"] = request.SqlsShrink
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ExecuteStatement"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ExecuteStatementResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ExecuteStatementResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Executes SQL statements.
//
// @param request - ExecuteStatementRequest
//
// @return ExecuteStatementResponse
func (client *Client) ExecuteStatement(request *ExecuteStatementRequest) (_result *ExecuteStatementResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ExecuteStatementResponse{}
	_body, _err := client.ExecuteStatementWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取特定的账号信息
//
// @param request - GetAccountRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetAccountResponse
func (client *Client) GetAccountWithOptions(request *GetAccountRequest, runtime *util.RuntimeOptions) (_result *GetAccountResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccountName)) {
		query["AccountName"] = request.AccountName
	}

	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetAccount"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &GetAccountResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &GetAccountResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// 获取特定的账号信息
//
// @param request - GetAccountRequest
//
// @return GetAccountResponse
func (client *Client) GetAccount(request *GetAccountRequest) (_result *GetAccountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetAccountResponse{}
	_body, _err := client.GetAccountWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about an access credential.
//
// @param request - GetSecretValueRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetSecretValueResponse
func (client *Client) GetSecretValueWithOptions(request *GetSecretValueRequest, runtime *util.RuntimeOptions) (_result *GetSecretValueResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.SecretArn)) {
		query["SecretArn"] = request.SecretArn
	}

	if !tea.BoolValue(util.IsUnset(request.SecretName)) {
		query["SecretName"] = request.SecretName
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		query["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetSecretValue"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &GetSecretValueResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &GetSecretValueResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the information about an access credential.
//
// @param request - GetSecretValueRequest
//
// @return GetSecretValueResponse
func (client *Client) GetSecretValue(request *GetSecretValueRequest) (_result *GetSecretValueResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetSecretValueResponse{}
	_body, _err := client.GetSecretValueWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Get Asynchronous SQL Execution Result
//
// @param request - GetStatementResultRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetStatementResultResponse
func (client *Client) GetStatementResultWithOptions(request *GetStatementResultRequest, runtime *util.RuntimeOptions) (_result *GetStatementResultResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Database)) {
		query["Database"] = request.Database
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.SecretArn)) {
		query["SecretArn"] = request.SecretArn
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetStatementResult"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &GetStatementResultResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &GetStatementResultResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Get Asynchronous SQL Execution Result
//
// @param request - GetStatementResultRequest
//
// @return GetStatementResultResponse
func (client *Client) GetStatementResult(request *GetStatementResultRequest) (_result *GetStatementResultResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetStatementResultResponse{}
	_body, _err := client.GetStatementResultWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the progress and result of an asynchronous document upload job based on the job ID.
//
// Description:
//
// This operation is related to the UploadDocumentAsync operation. You can call the UploadDocumentAsync operation to create an upload job and obtain the job ID, and then call the GetUploadDocumentJob operation to query the execution information of the job.
//
// >  Suggestions:
//
// 	- Determine whether the document upload job times out based on the document complexity and the number of tokens after chunking. In most cases, a job that lasts more than 2 hours is considered timeout.
//
// @param request - GetUploadDocumentJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetUploadDocumentJobResponse
func (client *Client) GetUploadDocumentJobWithOptions(request *GetUploadDocumentJobRequest, runtime *util.RuntimeOptions) (_result *GetUploadDocumentJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Collection)) {
		body["Collection"] = request.Collection
	}

	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		body["JobId"] = request.JobId
	}

	if !tea.BoolValue(util.IsUnset(request.Namespace)) {
		body["Namespace"] = request.Namespace
	}

	if !tea.BoolValue(util.IsUnset(request.NamespacePassword)) {
		body["NamespacePassword"] = request.NamespacePassword
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetUploadDocumentJob"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &GetUploadDocumentJobResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &GetUploadDocumentJobResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the progress and result of an asynchronous document upload job based on the job ID.
//
// Description:
//
// This operation is related to the UploadDocumentAsync operation. You can call the UploadDocumentAsync operation to create an upload job and obtain the job ID, and then call the GetUploadDocumentJob operation to query the execution information of the job.
//
// >  Suggestions:
//
// 	- Determine whether the document upload job times out based on the document complexity and the number of tokens after chunking. In most cases, a job that lasts more than 2 hours is considered timeout.
//
// @param request - GetUploadDocumentJobRequest
//
// @return GetUploadDocumentJobResponse
func (client *Client) GetUploadDocumentJob(request *GetUploadDocumentJobRequest) (_result *GetUploadDocumentJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetUploadDocumentJobResponse{}
	_body, _err := client.GetUploadDocumentJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the progress and result of an asynchronous vector data upload job by using a job ID.
//
// Description:
//
// This operation is related to the `UpsertCollectionDataAsync` operation. You can call the `UpsertCollectionDataAsync` operation to create an upload job and obtain a job ID, and then call the GetUpsertCollectionDataJob operation to query the execution information of the job.
//
// >  We recommend that you evaluate the amount of time required for the upload job based on 1,000 data entries every second, and then query the job progress every 5 seconds. The timeout period can be set to 30 minutes after the evaluated amount of time.
//
// @param request - GetUpsertCollectionDataJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetUpsertCollectionDataJobResponse
func (client *Client) GetUpsertCollectionDataJobWithOptions(request *GetUpsertCollectionDataJobRequest, runtime *util.RuntimeOptions) (_result *GetUpsertCollectionDataJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		query["WorkspaceId"] = request.WorkspaceId
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Collection)) {
		body["Collection"] = request.Collection
	}

	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		body["JobId"] = request.JobId
	}

	if !tea.BoolValue(util.IsUnset(request.Namespace)) {
		body["Namespace"] = request.Namespace
	}

	if !tea.BoolValue(util.IsUnset(request.NamespacePassword)) {
		body["NamespacePassword"] = request.NamespacePassword
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetUpsertCollectionDataJob"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &GetUpsertCollectionDataJobResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &GetUpsertCollectionDataJobResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the progress and result of an asynchronous vector data upload job by using a job ID.
//
// Description:
//
// This operation is related to the `UpsertCollectionDataAsync` operation. You can call the `UpsertCollectionDataAsync` operation to create an upload job and obtain a job ID, and then call the GetUpsertCollectionDataJob operation to query the execution information of the job.
//
// >  We recommend that you evaluate the amount of time required for the upload job based on 1,000 data entries every second, and then query the job progress every 5 seconds. The timeout period can be set to 30 minutes after the evaluated amount of time.
//
// @param request - GetUpsertCollectionDataJobRequest
//
// @return GetUpsertCollectionDataJobResponse
func (client *Client) GetUpsertCollectionDataJob(request *GetUpsertCollectionDataJobRequest) (_result *GetUpsertCollectionDataJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetUpsertCollectionDataJobResponse{}
	_body, _err := client.GetUpsertCollectionDataJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Grants vector collection permissions to a namespace.
//
// @param request - GrantCollectionRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GrantCollectionResponse
func (client *Client) GrantCollectionWithOptions(request *GrantCollectionRequest, runtime *util.RuntimeOptions) (_result *GrantCollectionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Collection)) {
		query["Collection"] = request.Collection
	}

	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.GrantToNamespace)) {
		query["GrantToNamespace"] = request.GrantToNamespace
	}

	if !tea.BoolValue(util.IsUnset(request.GrantType)) {
		query["GrantType"] = request.GrantType
	}

	if !tea.BoolValue(util.IsUnset(request.ManagerAccount)) {
		query["ManagerAccount"] = request.ManagerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ManagerAccountPassword)) {
		query["ManagerAccountPassword"] = request.ManagerAccountPassword
	}

	if !tea.BoolValue(util.IsUnset(request.Namespace)) {
		query["Namespace"] = request.Namespace
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GrantCollection"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &GrantCollectionResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &GrantCollectionResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Grants vector collection permissions to a namespace.
//
// @param request - GrantCollectionRequest
//
// @return GrantCollectionResponse
func (client *Client) GrantCollection(request *GrantCollectionRequest) (_result *GrantCollectionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GrantCollectionResponse{}
	_body, _err := client.GrantCollectionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Processes active queries.
//
// @param request - HandleActiveSQLRecordRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return HandleActiveSQLRecordResponse
func (client *Client) HandleActiveSQLRecordWithOptions(request *HandleActiveSQLRecordRequest, runtime *util.RuntimeOptions) (_result *HandleActiveSQLRecordResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.OperateType)) {
		query["OperateType"] = request.OperateType
	}

	if !tea.BoolValue(util.IsUnset(request.Pids)) {
		query["Pids"] = request.Pids
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("HandleActiveSQLRecord"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &HandleActiveSQLRecordResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &HandleActiveSQLRecordResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Processes active queries.
//
// @param request - HandleActiveSQLRecordRequest
//
// @return HandleActiveSQLRecordResponse
func (client *Client) HandleActiveSQLRecord(request *HandleActiveSQLRecordRequest) (_result *HandleActiveSQLRecordResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &HandleActiveSQLRecordResponse{}
	_body, _err := client.HandleActiveSQLRecordWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Initializes vector databases.
//
// @param request - InitVectorDatabaseRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return InitVectorDatabaseResponse
func (client *Client) InitVectorDatabaseWithOptions(request *InitVectorDatabaseRequest, runtime *util.RuntimeOptions) (_result *InitVectorDatabaseResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.ManagerAccount)) {
		query["ManagerAccount"] = request.ManagerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ManagerAccountPassword)) {
		query["ManagerAccountPassword"] = request.ManagerAccountPassword
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		query["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("InitVectorDatabase"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &InitVectorDatabaseResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &InitVectorDatabaseResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Initializes vector databases.
//
// @param request - InitVectorDatabaseRequest
//
// @return InitVectorDatabaseResponse
func (client *Client) InitVectorDatabase(request *InitVectorDatabaseRequest) (_result *InitVectorDatabaseResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &InitVectorDatabaseResponse{}
	_body, _err := client.InitVectorDatabaseWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取备份任务列表
//
// @param request - ListBackupJobsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListBackupJobsResponse
func (client *Client) ListBackupJobsWithOptions(request *ListBackupJobsRequest, runtime *util.RuntimeOptions) (_result *ListBackupJobsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BackupMode)) {
		query["BackupMode"] = request.BackupMode
	}

	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListBackupJobs"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ListBackupJobsResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ListBackupJobsResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// 获取备份任务列表
//
// @param request - ListBackupJobsRequest
//
// @return ListBackupJobsResponse
func (client *Client) ListBackupJobs(request *ListBackupJobsRequest) (_result *ListBackupJobsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListBackupJobsResponse{}
	_body, _err := client.ListBackupJobsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of vector collections.
//
// @param request - ListCollectionsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListCollectionsResponse
func (client *Client) ListCollectionsWithOptions(request *ListCollectionsRequest, runtime *util.RuntimeOptions) (_result *ListCollectionsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Namespace)) {
		query["Namespace"] = request.Namespace
	}

	if !tea.BoolValue(util.IsUnset(request.NamespacePassword)) {
		query["NamespacePassword"] = request.NamespacePassword
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		query["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListCollections"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ListCollectionsResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ListCollectionsResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries a list of vector collections.
//
// @param request - ListCollectionsRequest
//
// @return ListCollectionsResponse
func (client *Client) ListCollections(request *ListCollectionsRequest) (_result *ListCollectionsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListCollectionsResponse{}
	_body, _err := client.ListCollectionsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of databases.
//
// @param request - ListDatabasesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListDatabasesResponse
func (client *Client) ListDatabasesWithOptions(request *ListDatabasesRequest, runtime *util.RuntimeOptions) (_result *ListDatabasesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Database)) {
		query["Database"] = request.Database
	}

	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		query["MaxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		query["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.SecretArn)) {
		query["SecretArn"] = request.SecretArn
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListDatabases"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ListDatabasesResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ListDatabasesResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries a list of databases.
//
// @param request - ListDatabasesRequest
//
// @return ListDatabasesResponse
func (client *Client) ListDatabases(request *ListDatabasesRequest) (_result *ListDatabasesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListDatabasesResponse{}
	_body, _err := client.ListDatabasesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of document collections.
//
// @param request - ListDocumentCollectionsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListDocumentCollectionsResponse
func (client *Client) ListDocumentCollectionsWithOptions(request *ListDocumentCollectionsRequest, runtime *util.RuntimeOptions) (_result *ListDocumentCollectionsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Namespace)) {
		query["Namespace"] = request.Namespace
	}

	if !tea.BoolValue(util.IsUnset(request.NamespacePassword)) {
		query["NamespacePassword"] = request.NamespacePassword
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListDocumentCollections"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ListDocumentCollectionsResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ListDocumentCollectionsResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries a list of document collections.
//
// @param request - ListDocumentCollectionsRequest
//
// @return ListDocumentCollectionsResponse
func (client *Client) ListDocumentCollections(request *ListDocumentCollectionsRequest) (_result *ListDocumentCollectionsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListDocumentCollectionsResponse{}
	_body, _err := client.ListDocumentCollectionsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of documents in a collection.
//
// @param request - ListDocumentsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListDocumentsResponse
func (client *Client) ListDocumentsWithOptions(request *ListDocumentsRequest, runtime *util.RuntimeOptions) (_result *ListDocumentsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Collection)) {
		query["Collection"] = request.Collection
	}

	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		query["MaxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.Namespace)) {
		query["Namespace"] = request.Namespace
	}

	if !tea.BoolValue(util.IsUnset(request.NamespacePassword)) {
		query["NamespacePassword"] = request.NamespacePassword
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		query["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListDocuments"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ListDocumentsResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ListDocumentsResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries a list of documents in a collection.
//
// @param request - ListDocumentsRequest
//
// @return ListDocumentsResponse
func (client *Client) ListDocuments(request *ListDocumentsRequest) (_result *ListDocumentsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListDocumentsResponse{}
	_body, _err := client.ListDocumentsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of external data services.
//
// @param request - ListExternalDataServicesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListExternalDataServicesResponse
func (client *Client) ListExternalDataServicesWithOptions(request *ListExternalDataServicesRequest, runtime *util.RuntimeOptions) (_result *ListExternalDataServicesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListExternalDataServices"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ListExternalDataServicesResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ListExternalDataServicesResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries a list of external data services.
//
// @param request - ListExternalDataServicesRequest
//
// @return ListExternalDataServicesResponse
func (client *Client) ListExternalDataServices(request *ListExternalDataServicesRequest) (_result *ListExternalDataServicesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListExternalDataServicesResponse{}
	_body, _err := client.ListExternalDataServicesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取实例外表配置列表
//
// @param request - ListExternalDataSourcesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListExternalDataSourcesResponse
func (client *Client) ListExternalDataSourcesWithOptions(request *ListExternalDataSourcesRequest, runtime *util.RuntimeOptions) (_result *ListExternalDataSourcesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListExternalDataSources"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ListExternalDataSourcesResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ListExternalDataSourcesResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// 获取实例外表配置列表
//
// @param request - ListExternalDataSourcesRequest
//
// @return ListExternalDataSourcesResponse
func (client *Client) ListExternalDataSources(request *ListExternalDataSourcesRequest) (_result *ListExternalDataSourcesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListExternalDataSourcesResponse{}
	_body, _err := client.ListExternalDataSourcesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取索引列表
//
// @param request - ListIndicesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListIndicesResponse
func (client *Client) ListIndicesWithOptions(request *ListIndicesRequest, runtime *util.RuntimeOptions) (_result *ListIndicesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Collection)) {
		query["Collection"] = request.Collection
	}

	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Namespace)) {
		query["Namespace"] = request.Namespace
	}

	if !tea.BoolValue(util.IsUnset(request.NamespacePassword)) {
		query["NamespacePassword"] = request.NamespacePassword
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		query["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListIndices"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ListIndicesResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ListIndicesResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// 获取索引列表
//
// @param request - ListIndicesRequest
//
// @return ListIndicesResponse
func (client *Client) ListIndices(request *ListIndicesRequest) (_result *ListIndicesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListIndicesResponse{}
	_body, _err := client.ListIndicesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of extensions.
//
// @param request - ListInstanceExtensionsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListInstanceExtensionsResponse
func (client *Client) ListInstanceExtensionsWithOptions(request *ListInstanceExtensionsRequest, runtime *util.RuntimeOptions) (_result *ListInstanceExtensionsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Extension)) {
		query["Extension"] = request.Extension
	}

	if !tea.BoolValue(util.IsUnset(request.InstallStatus)) {
		query["InstallStatus"] = request.InstallStatus
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListInstanceExtensions"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ListInstanceExtensionsResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ListInstanceExtensionsResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries a list of extensions.
//
// @param request - ListInstanceExtensionsRequest
//
// @return ListInstanceExtensionsResponse
func (client *Client) ListInstanceExtensions(request *ListInstanceExtensionsRequest) (_result *ListInstanceExtensionsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListInstanceExtensionsResponse{}
	_body, _err := client.ListInstanceExtensionsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of namespaces.
//
// @param request - ListNamespacesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListNamespacesResponse
func (client *Client) ListNamespacesWithOptions(request *ListNamespacesRequest, runtime *util.RuntimeOptions) (_result *ListNamespacesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.ManagerAccount)) {
		query["ManagerAccount"] = request.ManagerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ManagerAccountPassword)) {
		query["ManagerAccountPassword"] = request.ManagerAccountPassword
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		query["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListNamespaces"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ListNamespacesResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ListNamespacesResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries a list of namespaces.
//
// @param request - ListNamespacesRequest
//
// @return ListNamespacesResponse
func (client *Client) ListNamespaces(request *ListNamespacesRequest) (_result *ListNamespacesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListNamespacesResponse{}
	_body, _err := client.ListNamespacesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Get Homogeneous Data Source
//
// @param request - ListRemoteADBDataSourcesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListRemoteADBDataSourcesResponse
func (client *Client) ListRemoteADBDataSourcesWithOptions(request *ListRemoteADBDataSourcesRequest, runtime *util.RuntimeOptions) (_result *ListRemoteADBDataSourcesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.DataSourceId)) {
		query["DataSourceId"] = request.DataSourceId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListRemoteADBDataSources"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ListRemoteADBDataSourcesResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ListRemoteADBDataSourcesResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Get Homogeneous Data Source
//
// @param request - ListRemoteADBDataSourcesRequest
//
// @return ListRemoteADBDataSourcesResponse
func (client *Client) ListRemoteADBDataSources(request *ListRemoteADBDataSourcesRequest) (_result *ListRemoteADBDataSourcesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListRemoteADBDataSourcesResponse{}
	_body, _err := client.ListRemoteADBDataSourcesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of schemas.
//
// @param request - ListSchemasRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListSchemasResponse
func (client *Client) ListSchemasWithOptions(request *ListSchemasRequest, runtime *util.RuntimeOptions) (_result *ListSchemasResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Database)) {
		query["Database"] = request.Database
	}

	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		query["MaxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		query["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.SchemaPattern)) {
		query["SchemaPattern"] = request.SchemaPattern
	}

	if !tea.BoolValue(util.IsUnset(request.SecretArn)) {
		query["SecretArn"] = request.SecretArn
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListSchemas"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ListSchemasResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ListSchemasResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries a list of schemas.
//
// @param request - ListSchemasRequest
//
// @return ListSchemasResponse
func (client *Client) ListSchemas(request *ListSchemasRequest) (_result *ListSchemasResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListSchemasResponse{}
	_body, _err := client.ListSchemasWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of access credentials.
//
// @param request - ListSecretsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListSecretsResponse
func (client *Client) ListSecretsWithOptions(request *ListSecretsRequest, runtime *util.RuntimeOptions) (_result *ListSecretsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		query["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListSecrets"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ListSecretsResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ListSecretsResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries a list of access credentials.
//
// @param request - ListSecretsRequest
//
// @return ListSecretsResponse
func (client *Client) ListSecrets(request *ListSecretsRequest) (_result *ListSecretsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListSecretsResponse{}
	_body, _err := client.ListSecretsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Create External Data Source Configuration
//
// @param request - ListStreamingDataServicesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListStreamingDataServicesResponse
func (client *Client) ListStreamingDataServicesWithOptions(request *ListStreamingDataServicesRequest, runtime *util.RuntimeOptions) (_result *ListStreamingDataServicesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListStreamingDataServices"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ListStreamingDataServicesResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ListStreamingDataServicesResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Create External Data Source Configuration
//
// @param request - ListStreamingDataServicesRequest
//
// @return ListStreamingDataServicesResponse
func (client *Client) ListStreamingDataServices(request *ListStreamingDataServicesRequest) (_result *ListStreamingDataServicesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListStreamingDataServicesResponse{}
	_body, _err := client.ListStreamingDataServicesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries real-time service data sources.
//
// @param request - ListStreamingDataSourcesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListStreamingDataSourcesResponse
func (client *Client) ListStreamingDataSourcesWithOptions(request *ListStreamingDataSourcesRequest, runtime *util.RuntimeOptions) (_result *ListStreamingDataSourcesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListStreamingDataSources"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ListStreamingDataSourcesResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ListStreamingDataSourcesResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries real-time service data sources.
//
// @param request - ListStreamingDataSourcesRequest
//
// @return ListStreamingDataSourcesResponse
func (client *Client) ListStreamingDataSources(request *ListStreamingDataSourcesRequest) (_result *ListStreamingDataSourcesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListStreamingDataSourcesResponse{}
	_body, _err := client.ListStreamingDataSourcesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries real-time data synchronization jobs.
//
// @param request - ListStreamingJobsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListStreamingJobsResponse
func (client *Client) ListStreamingJobsWithOptions(request *ListStreamingJobsRequest, runtime *util.RuntimeOptions) (_result *ListStreamingJobsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListStreamingJobs"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ListStreamingJobsResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ListStreamingJobsResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries real-time data synchronization jobs.
//
// @param request - ListStreamingJobsRequest
//
// @return ListStreamingJobsResponse
func (client *Client) ListStreamingJobs(request *ListStreamingJobsRequest) (_result *ListStreamingJobsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListStreamingJobsResponse{}
	_body, _err := client.ListStreamingJobsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of tables in a database.
//
// @param request - ListTablesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListTablesResponse
func (client *Client) ListTablesWithOptions(request *ListTablesRequest, runtime *util.RuntimeOptions) (_result *ListTablesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Database)) {
		query["Database"] = request.Database
	}

	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		query["MaxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		query["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.Schema)) {
		query["Schema"] = request.Schema
	}

	if !tea.BoolValue(util.IsUnset(request.SecretArn)) {
		query["SecretArn"] = request.SecretArn
	}

	if !tea.BoolValue(util.IsUnset(request.TablePattern)) {
		query["TablePattern"] = request.TablePattern
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListTables"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ListTablesResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ListTablesResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries a list of tables in a database.
//
// @param request - ListTablesRequest
//
// @return ListTablesResponse
func (client *Client) ListTables(request *ListTablesRequest) (_result *ListTablesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListTablesResponse{}
	_body, _err := client.ListTablesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of tags that are added to AnalyticDB for PostgreSQL instances.
//
// @param request - ListTagResourcesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListTagResourcesResponse
func (client *Client) ListTagResourcesWithOptions(request *ListTagResourcesRequest, runtime *util.RuntimeOptions) (_result *ListTagResourcesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		query["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceId)) {
		query["ResourceId"] = request.ResourceId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceType)) {
		query["ResourceType"] = request.ResourceType
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListTagResources"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ListTagResourcesResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ListTagResourcesResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries a list of tags that are added to AnalyticDB for PostgreSQL instances.
//
// @param request - ListTagResourcesRequest
//
// @return ListTagResourcesResponse
func (client *Client) ListTagResources(request *ListTagResourcesRequest) (_result *ListTagResourcesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListTagResourcesResponse{}
	_body, _err := client.ListTagResourcesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies the description of a database account for an AnalyticDB for PostgreSQL instance.
//
// @param request - ModifyAccountDescriptionRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyAccountDescriptionResponse
func (client *Client) ModifyAccountDescriptionWithOptions(request *ModifyAccountDescriptionRequest, runtime *util.RuntimeOptions) (_result *ModifyAccountDescriptionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccountDescription)) {
		query["AccountDescription"] = request.AccountDescription
	}

	if !tea.BoolValue(util.IsUnset(request.AccountName)) {
		query["AccountName"] = request.AccountName
	}

	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		query["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyAccountDescription"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ModifyAccountDescriptionResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ModifyAccountDescriptionResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Modifies the description of a database account for an AnalyticDB for PostgreSQL instance.
//
// @param request - ModifyAccountDescriptionRequest
//
// @return ModifyAccountDescriptionResponse
func (client *Client) ModifyAccountDescription(request *ModifyAccountDescriptionRequest) (_result *ModifyAccountDescriptionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyAccountDescriptionResponse{}
	_body, _err := client.ModifyAccountDescriptionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Configures the backup policy of an AnalyticDB for PostgreSQL instance.
//
// @param request - ModifyBackupPolicyRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyBackupPolicyResponse
func (client *Client) ModifyBackupPolicyWithOptions(request *ModifyBackupPolicyRequest, runtime *util.RuntimeOptions) (_result *ModifyBackupPolicyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BackupRetentionPeriod)) {
		query["BackupRetentionPeriod"] = request.BackupRetentionPeriod
	}

	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.EnableRecoveryPoint)) {
		query["EnableRecoveryPoint"] = request.EnableRecoveryPoint
	}

	if !tea.BoolValue(util.IsUnset(request.PreferredBackupPeriod)) {
		query["PreferredBackupPeriod"] = request.PreferredBackupPeriod
	}

	if !tea.BoolValue(util.IsUnset(request.PreferredBackupTime)) {
		query["PreferredBackupTime"] = request.PreferredBackupTime
	}

	if !tea.BoolValue(util.IsUnset(request.RecoveryPointPeriod)) {
		query["RecoveryPointPeriod"] = request.RecoveryPointPeriod
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyBackupPolicy"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ModifyBackupPolicyResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ModifyBackupPolicyResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Configures the backup policy of an AnalyticDB for PostgreSQL instance.
//
// @param request - ModifyBackupPolicyRequest
//
// @return ModifyBackupPolicyResponse
func (client *Client) ModifyBackupPolicy(request *ModifyBackupPolicyRequest) (_result *ModifyBackupPolicyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyBackupPolicyResponse{}
	_body, _err := client.ModifyBackupPolicyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Changes the threshold of computing resources and the wait period of idle resources for an AnalyticDB for PostgreSQL instance in Serverless automatic scheduling mode.
//
// @param request - ModifyDBInstanceConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyDBInstanceConfigResponse
func (client *Client) ModifyDBInstanceConfigWithOptions(request *ModifyDBInstanceConfigRequest, runtime *util.RuntimeOptions) (_result *ModifyDBInstanceConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceDescription)) {
		query["DBInstanceDescription"] = request.DBInstanceDescription
	}

	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.IdleTime)) {
		query["IdleTime"] = request.IdleTime
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.ServerlessResource)) {
		query["ServerlessResource"] = request.ServerlessResource
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyDBInstanceConfig"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ModifyDBInstanceConfigResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ModifyDBInstanceConfigResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Changes the threshold of computing resources and the wait period of idle resources for an AnalyticDB for PostgreSQL instance in Serverless automatic scheduling mode.
//
// @param request - ModifyDBInstanceConfigRequest
//
// @return ModifyDBInstanceConfigResponse
func (client *Client) ModifyDBInstanceConfig(request *ModifyDBInstanceConfigRequest) (_result *ModifyDBInstanceConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDBInstanceConfigResponse{}
	_body, _err := client.ModifyDBInstanceConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Changes the endpoint of an AnalyticDB for PostgreSQL instance.
//
// @param request - ModifyDBInstanceConnectionStringRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyDBInstanceConnectionStringResponse
func (client *Client) ModifyDBInstanceConnectionStringWithOptions(request *ModifyDBInstanceConnectionStringRequest, runtime *util.RuntimeOptions) (_result *ModifyDBInstanceConnectionStringResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		query["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.ConnectionStringPrefix)) {
		query["ConnectionStringPrefix"] = request.ConnectionStringPrefix
	}

	if !tea.BoolValue(util.IsUnset(request.CurrentConnectionString)) {
		query["CurrentConnectionString"] = request.CurrentConnectionString
	}

	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Port)) {
		query["Port"] = request.Port
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyDBInstanceConnectionString"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ModifyDBInstanceConnectionStringResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ModifyDBInstanceConnectionStringResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Changes the endpoint of an AnalyticDB for PostgreSQL instance.
//
// @param request - ModifyDBInstanceConnectionStringRequest
//
// @return ModifyDBInstanceConnectionStringResponse
func (client *Client) ModifyDBInstanceConnectionString(request *ModifyDBInstanceConnectionStringRequest) (_result *ModifyDBInstanceConnectionStringResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDBInstanceConnectionStringResponse{}
	_body, _err := client.ModifyDBInstanceConnectionStringWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 修改实例部署模式
//
// @param request - ModifyDBInstanceDeploymentModeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyDBInstanceDeploymentModeResponse
func (client *Client) ModifyDBInstanceDeploymentModeWithOptions(request *ModifyDBInstanceDeploymentModeRequest, runtime *util.RuntimeOptions) (_result *ModifyDBInstanceDeploymentModeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.DeployMode)) {
		query["DeployMode"] = request.DeployMode
	}

	if !tea.BoolValue(util.IsUnset(request.StandbyVSwitchId)) {
		query["StandbyVSwitchId"] = request.StandbyVSwitchId
	}

	if !tea.BoolValue(util.IsUnset(request.StandbyZoneId)) {
		query["StandbyZoneId"] = request.StandbyZoneId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyDBInstanceDeploymentMode"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ModifyDBInstanceDeploymentModeResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ModifyDBInstanceDeploymentModeResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// 修改实例部署模式
//
// @param request - ModifyDBInstanceDeploymentModeRequest
//
// @return ModifyDBInstanceDeploymentModeResponse
func (client *Client) ModifyDBInstanceDeploymentMode(request *ModifyDBInstanceDeploymentModeRequest) (_result *ModifyDBInstanceDeploymentModeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDBInstanceDeploymentModeResponse{}
	_body, _err := client.ModifyDBInstanceDeploymentModeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Changes the description of an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// To make it easy to identify AnalyticDB for PostgreSQL instances, you can call this operation to modify the description of instances.
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - ModifyDBInstanceDescriptionRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyDBInstanceDescriptionResponse
func (client *Client) ModifyDBInstanceDescriptionWithOptions(request *ModifyDBInstanceDescriptionRequest, runtime *util.RuntimeOptions) (_result *ModifyDBInstanceDescriptionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceDescription)) {
		query["DBInstanceDescription"] = request.DBInstanceDescription
	}

	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyDBInstanceDescription"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ModifyDBInstanceDescriptionResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ModifyDBInstanceDescriptionResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Changes the description of an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// To make it easy to identify AnalyticDB for PostgreSQL instances, you can call this operation to modify the description of instances.
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - ModifyDBInstanceDescriptionRequest
//
// @return ModifyDBInstanceDescriptionResponse
func (client *Client) ModifyDBInstanceDescription(request *ModifyDBInstanceDescriptionRequest) (_result *ModifyDBInstanceDescriptionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDBInstanceDescriptionResponse{}
	_body, _err := client.ModifyDBInstanceDescriptionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies the maintenance window of an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// The system maintains AnalyticDB for PostgreSQL instances during the maintenance window that you specify. We recommend that you set the maintenance window to off-peak hours to minimize the impact on your business.
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - ModifyDBInstanceMaintainTimeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyDBInstanceMaintainTimeResponse
func (client *Client) ModifyDBInstanceMaintainTimeWithOptions(request *ModifyDBInstanceMaintainTimeRequest, runtime *util.RuntimeOptions) (_result *ModifyDBInstanceMaintainTimeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyDBInstanceMaintainTime"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ModifyDBInstanceMaintainTimeResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ModifyDBInstanceMaintainTimeResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Modifies the maintenance window of an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// The system maintains AnalyticDB for PostgreSQL instances during the maintenance window that you specify. We recommend that you set the maintenance window to off-peak hours to minimize the impact on your business.
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - ModifyDBInstanceMaintainTimeRequest
//
// @return ModifyDBInstanceMaintainTimeResponse
func (client *Client) ModifyDBInstanceMaintainTime(request *ModifyDBInstanceMaintainTimeRequest) (_result *ModifyDBInstanceMaintainTimeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDBInstanceMaintainTimeResponse{}
	_body, _err := client.ModifyDBInstanceMaintainTimeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Changes the network type of an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// ##
//
// This operation is available only for AnalyticDB for PostgreSQL instances in reserved storage mode.
//
// ## QPS limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - ModifyDBInstanceNetworkTypeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyDBInstanceNetworkTypeResponse
func (client *Client) ModifyDBInstanceNetworkTypeWithOptions(request *ModifyDBInstanceNetworkTypeRequest, runtime *util.RuntimeOptions) (_result *ModifyDBInstanceNetworkTypeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceNetworkType)) {
		query["InstanceNetworkType"] = request.InstanceNetworkType
	}

	if !tea.BoolValue(util.IsUnset(request.PrivateIpAddress)) {
		query["PrivateIpAddress"] = request.PrivateIpAddress
	}

	if !tea.BoolValue(util.IsUnset(request.VPCId)) {
		query["VPCId"] = request.VPCId
	}

	if !tea.BoolValue(util.IsUnset(request.VSwitchId)) {
		query["VSwitchId"] = request.VSwitchId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyDBInstanceNetworkType"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ModifyDBInstanceNetworkTypeResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ModifyDBInstanceNetworkTypeResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Changes the network type of an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// ##
//
// This operation is available only for AnalyticDB for PostgreSQL instances in reserved storage mode.
//
// ## QPS limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - ModifyDBInstanceNetworkTypeRequest
//
// @return ModifyDBInstanceNetworkTypeResponse
func (client *Client) ModifyDBInstanceNetworkType(request *ModifyDBInstanceNetworkTypeRequest) (_result *ModifyDBInstanceNetworkTypeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDBInstanceNetworkTypeResponse{}
	_body, _err := client.ModifyDBInstanceNetworkTypeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 包年包月/按量付费转换改造
//
// @param request - ModifyDBInstancePayTypeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyDBInstancePayTypeResponse
func (client *Client) ModifyDBInstancePayTypeWithOptions(request *ModifyDBInstancePayTypeRequest, runtime *util.RuntimeOptions) (_result *ModifyDBInstancePayTypeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PayType)) {
		query["PayType"] = request.PayType
	}

	if !tea.BoolValue(util.IsUnset(request.Period)) {
		query["Period"] = request.Period
	}

	if !tea.BoolValue(util.IsUnset(request.UsedTime)) {
		query["UsedTime"] = request.UsedTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyDBInstancePayType"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ModifyDBInstancePayTypeResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ModifyDBInstancePayTypeResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// 包年包月/按量付费转换改造
//
// @param request - ModifyDBInstancePayTypeRequest
//
// @return ModifyDBInstancePayTypeResponse
func (client *Client) ModifyDBInstancePayType(request *ModifyDBInstancePayTypeRequest) (_result *ModifyDBInstancePayTypeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDBInstancePayTypeResponse{}
	_body, _err := client.ModifyDBInstancePayTypeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Moves an AnalyticDB for PostgreSQL instance to a resource group.
//
// Description:
//
// Resource Management allows you to build an organizational structure for resources based on your business requirements. You can use resource directories, folders, accounts, and resource groups to hierarchically organize and manage resources. For more information, see [What is Resource Management?](https://help.aliyun.com/document_detail/94475.html)
//
// @param request - ModifyDBInstanceResourceGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyDBInstanceResourceGroupResponse
func (client *Client) ModifyDBInstanceResourceGroupWithOptions(request *ModifyDBInstanceResourceGroupRequest, runtime *util.RuntimeOptions) (_result *ModifyDBInstanceResourceGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.NewResourceGroupId)) {
		query["NewResourceGroupId"] = request.NewResourceGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyDBInstanceResourceGroup"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ModifyDBInstanceResourceGroupResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ModifyDBInstanceResourceGroupResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Moves an AnalyticDB for PostgreSQL instance to a resource group.
//
// Description:
//
// Resource Management allows you to build an organizational structure for resources based on your business requirements. You can use resource directories, folders, accounts, and resource groups to hierarchically organize and manage resources. For more information, see [What is Resource Management?](https://help.aliyun.com/document_detail/94475.html)
//
// @param request - ModifyDBInstanceResourceGroupRequest
//
// @return ModifyDBInstanceResourceGroupResponse
func (client *Client) ModifyDBInstanceResourceGroup(request *ModifyDBInstanceResourceGroupRequest) (_result *ModifyDBInstanceResourceGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDBInstanceResourceGroupResponse{}
	_body, _err := client.ModifyDBInstanceResourceGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Enables, disables, or updates SSL encryption for an AnalyticDB for PostgreSQL instance.
//
// @param request - ModifyDBInstanceSSLRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyDBInstanceSSLResponse
func (client *Client) ModifyDBInstanceSSLWithOptions(request *ModifyDBInstanceSSLRequest, runtime *util.RuntimeOptions) (_result *ModifyDBInstanceSSLResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConnectionString)) {
		query["ConnectionString"] = request.ConnectionString
	}

	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.SSLEnabled)) {
		query["SSLEnabled"] = request.SSLEnabled
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyDBInstanceSSL"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ModifyDBInstanceSSLResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ModifyDBInstanceSSLResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Enables, disables, or updates SSL encryption for an AnalyticDB for PostgreSQL instance.
//
// @param request - ModifyDBInstanceSSLRequest
//
// @return ModifyDBInstanceSSLResponse
func (client *Client) ModifyDBInstanceSSL(request *ModifyDBInstanceSSLRequest) (_result *ModifyDBInstanceSSLResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDBInstanceSSLResponse{}
	_body, _err := client.ModifyDBInstanceSSLWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies the configurations of a resource group.
//
// @param tmpReq - ModifyDBResourceGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyDBResourceGroupResponse
func (client *Client) ModifyDBResourceGroupWithOptions(tmpReq *ModifyDBResourceGroupRequest, runtime *util.RuntimeOptions) (_result *ModifyDBResourceGroupResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &ModifyDBResourceGroupShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.ResourceGroupItems)) {
		request.ResourceGroupItemsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.ResourceGroupItems, tea.String("ResourceGroupItems"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupItemsShrink)) {
		query["ResourceGroupItems"] = request.ResourceGroupItemsShrink
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyDBResourceGroup"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ModifyDBResourceGroupResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ModifyDBResourceGroupResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Modifies the configurations of a resource group.
//
// @param request - ModifyDBResourceGroupRequest
//
// @return ModifyDBResourceGroupResponse
func (client *Client) ModifyDBResourceGroup(request *ModifyDBResourceGroupRequest) (_result *ModifyDBResourceGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDBResourceGroupResponse{}
	_body, _err := client.ModifyDBResourceGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modify External Data Service
//
// @param request - ModifyExternalDataServiceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyExternalDataServiceResponse
func (client *Client) ModifyExternalDataServiceWithOptions(request *ModifyExternalDataServiceRequest, runtime *util.RuntimeOptions) (_result *ModifyExternalDataServiceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceDescription)) {
		query["ServiceDescription"] = request.ServiceDescription
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceId)) {
		query["ServiceId"] = request.ServiceId
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceSpec)) {
		query["ServiceSpec"] = request.ServiceSpec
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyExternalDataService"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ModifyExternalDataServiceResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ModifyExternalDataServiceResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Modify External Data Service
//
// @param request - ModifyExternalDataServiceRequest
//
// @return ModifyExternalDataServiceResponse
func (client *Client) ModifyExternalDataService(request *ModifyExternalDataServiceRequest) (_result *ModifyExternalDataServiceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyExternalDataServiceResponse{}
	_body, _err := client.ModifyExternalDataServiceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies the configurations of a Hadoop data source.
//
// @param request - ModifyHadoopDataSourceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyHadoopDataSourceResponse
func (client *Client) ModifyHadoopDataSourceWithOptions(request *ModifyHadoopDataSourceRequest, runtime *util.RuntimeOptions) (_result *ModifyHadoopDataSourceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.DataSourceDescription)) {
		query["DataSourceDescription"] = request.DataSourceDescription
	}

	if !tea.BoolValue(util.IsUnset(request.DataSourceId)) {
		query["DataSourceId"] = request.DataSourceId
	}

	if !tea.BoolValue(util.IsUnset(request.DataSourceType)) {
		query["DataSourceType"] = request.DataSourceType
	}

	if !tea.BoolValue(util.IsUnset(request.EmrInstanceId)) {
		query["EmrInstanceId"] = request.EmrInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.HDFSConf)) {
		query["HDFSConf"] = request.HDFSConf
	}

	if !tea.BoolValue(util.IsUnset(request.HadoopCoreConf)) {
		query["HadoopCoreConf"] = request.HadoopCoreConf
	}

	if !tea.BoolValue(util.IsUnset(request.HadoopCreateType)) {
		query["HadoopCreateType"] = request.HadoopCreateType
	}

	if !tea.BoolValue(util.IsUnset(request.HadoopHostsAddress)) {
		query["HadoopHostsAddress"] = request.HadoopHostsAddress
	}

	if !tea.BoolValue(util.IsUnset(request.HiveConf)) {
		query["HiveConf"] = request.HiveConf
	}

	if !tea.BoolValue(util.IsUnset(request.MapReduceConf)) {
		query["MapReduceConf"] = request.MapReduceConf
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.YarnConf)) {
		query["YarnConf"] = request.YarnConf
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyHadoopDataSource"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ModifyHadoopDataSourceResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ModifyHadoopDataSourceResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Modifies the configurations of a Hadoop data source.
//
// @param request - ModifyHadoopDataSourceRequest
//
// @return ModifyHadoopDataSourceResponse
func (client *Client) ModifyHadoopDataSource(request *ModifyHadoopDataSourceRequest) (_result *ModifyHadoopDataSourceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyHadoopDataSourceResponse{}
	_body, _err := client.ModifyHadoopDataSourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies the configurations of a Java Database Connectivity (JDBC) data source.
//
// @param request - ModifyJDBCDataSourceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyJDBCDataSourceResponse
func (client *Client) ModifyJDBCDataSourceWithOptions(request *ModifyJDBCDataSourceRequest, runtime *util.RuntimeOptions) (_result *ModifyJDBCDataSourceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.DataSourceDescription)) {
		query["DataSourceDescription"] = request.DataSourceDescription
	}

	if !tea.BoolValue(util.IsUnset(request.DataSourceId)) {
		query["DataSourceId"] = request.DataSourceId
	}

	if !tea.BoolValue(util.IsUnset(request.DataSourceType)) {
		query["DataSourceType"] = request.DataSourceType
	}

	if !tea.BoolValue(util.IsUnset(request.JDBCConnectionString)) {
		query["JDBCConnectionString"] = request.JDBCConnectionString
	}

	if !tea.BoolValue(util.IsUnset(request.JDBCPassword)) {
		query["JDBCPassword"] = request.JDBCPassword
	}

	if !tea.BoolValue(util.IsUnset(request.JDBCUserName)) {
		query["JDBCUserName"] = request.JDBCUserName
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyJDBCDataSource"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ModifyJDBCDataSourceResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ModifyJDBCDataSourceResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Modifies the configurations of a Java Database Connectivity (JDBC) data source.
//
// @param request - ModifyJDBCDataSourceRequest
//
// @return ModifyJDBCDataSourceResponse
func (client *Client) ModifyJDBCDataSource(request *ModifyJDBCDataSourceRequest) (_result *ModifyJDBCDataSourceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyJDBCDataSourceResponse{}
	_body, _err := client.ModifyJDBCDataSourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Changes the specifications of coordinator node resources for an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// This operation is not available for instances in reserved storage mode.
//
// Before you call this operation, make sure that you are familiar with the billing of AnalyticDB for PostgreSQL. For more information, see [Billing methods](https://help.aliyun.com/document_detail/35406.html) and [AnalyticDB for PostgreSQL pricing](https://www.alibabacloud.com/zh/product/hybriddb-postgresql/pricing).
//
// @param request - ModifyMasterSpecRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyMasterSpecResponse
func (client *Client) ModifyMasterSpecWithOptions(request *ModifyMasterSpecRequest, runtime *util.RuntimeOptions) (_result *ModifyMasterSpecResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceDescription)) {
		query["DBInstanceDescription"] = request.DBInstanceDescription
	}

	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.MasterAISpec)) {
		query["MasterAISpec"] = request.MasterAISpec
	}

	if !tea.BoolValue(util.IsUnset(request.MasterCU)) {
		query["MasterCU"] = request.MasterCU
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyMasterSpec"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ModifyMasterSpecResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ModifyMasterSpecResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Changes the specifications of coordinator node resources for an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// This operation is not available for instances in reserved storage mode.
//
// Before you call this operation, make sure that you are familiar with the billing of AnalyticDB for PostgreSQL. For more information, see [Billing methods](https://help.aliyun.com/document_detail/35406.html) and [AnalyticDB for PostgreSQL pricing](https://www.alibabacloud.com/zh/product/hybriddb-postgresql/pricing).
//
// @param request - ModifyMasterSpecRequest
//
// @return ModifyMasterSpecResponse
func (client *Client) ModifyMasterSpec(request *ModifyMasterSpecRequest) (_result *ModifyMasterSpecResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyMasterSpecResponse{}
	_body, _err := client.ModifyMasterSpecWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies the configuration parameters of an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// This operation can be called to modify parameters of an AnalyticDB for PostgreSQL instance in elastic storage mode or Serverless mode.
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered and may affect your business. We recommend that you take note of the limit when you call this operation.
//
// @param request - ModifyParametersRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyParametersResponse
func (client *Client) ModifyParametersWithOptions(request *ModifyParametersRequest, runtime *util.RuntimeOptions) (_result *ModifyParametersResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.ForceRestartInstance)) {
		query["ForceRestartInstance"] = request.ForceRestartInstance
	}

	if !tea.BoolValue(util.IsUnset(request.Parameters)) {
		query["Parameters"] = request.Parameters
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyParameters"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ModifyParametersResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ModifyParametersResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Modifies the configuration parameters of an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// This operation can be called to modify parameters of an AnalyticDB for PostgreSQL instance in elastic storage mode or Serverless mode.
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered and may affect your business. We recommend that you take note of the limit when you call this operation.
//
// @param request - ModifyParametersRequest
//
// @return ModifyParametersResponse
func (client *Client) ModifyParameters(request *ModifyParametersRequest) (_result *ModifyParametersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyParametersResponse{}
	_body, _err := client.ModifyParametersWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modify Homogeneous Data Source
//
// @param request - ModifyRemoteADBDataSourceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyRemoteADBDataSourceResponse
func (client *Client) ModifyRemoteADBDataSourceWithOptions(request *ModifyRemoteADBDataSourceRequest, runtime *util.RuntimeOptions) (_result *ModifyRemoteADBDataSourceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DataSourceId)) {
		query["DataSourceId"] = request.DataSourceId
	}

	if !tea.BoolValue(util.IsUnset(request.DataSourceName)) {
		query["DataSourceName"] = request.DataSourceName
	}

	if !tea.BoolValue(util.IsUnset(request.LocalDBInstanceId)) {
		query["LocalDBInstanceId"] = request.LocalDBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.UserName)) {
		query["UserName"] = request.UserName
	}

	if !tea.BoolValue(util.IsUnset(request.UserPassword)) {
		query["UserPassword"] = request.UserPassword
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyRemoteADBDataSource"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ModifyRemoteADBDataSourceResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ModifyRemoteADBDataSourceResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Modify Homogeneous Data Source
//
// @param request - ModifyRemoteADBDataSourceRequest
//
// @return ModifyRemoteADBDataSourceResponse
func (client *Client) ModifyRemoteADBDataSource(request *ModifyRemoteADBDataSourceRequest) (_result *ModifyRemoteADBDataSourceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyRemoteADBDataSourceResponse{}
	_body, _err := client.ModifyRemoteADBDataSourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Enables or disables the SQL Explorer feature for an AnalyticDB for PostgreSQL instance.
//
// Description:
//
//   You can call this operation only for AnalyticDB for PostgreSQL instances in reserved storage mode.
//
// 	- You can call this operation only for AnalyticDB for PostgreSQL instances in Serverless automatic scheduling mode.
//
// @param request - ModifySQLCollectorPolicyRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifySQLCollectorPolicyResponse
func (client *Client) ModifySQLCollectorPolicyWithOptions(request *ModifySQLCollectorPolicyRequest, runtime *util.RuntimeOptions) (_result *ModifySQLCollectorPolicyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.SQLCollectorStatus)) {
		query["SQLCollectorStatus"] = request.SQLCollectorStatus
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifySQLCollectorPolicy"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ModifySQLCollectorPolicyResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ModifySQLCollectorPolicyResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Enables or disables the SQL Explorer feature for an AnalyticDB for PostgreSQL instance.
//
// Description:
//
//   You can call this operation only for AnalyticDB for PostgreSQL instances in reserved storage mode.
//
// 	- You can call this operation only for AnalyticDB for PostgreSQL instances in Serverless automatic scheduling mode.
//
// @param request - ModifySQLCollectorPolicyRequest
//
// @return ModifySQLCollectorPolicyResponse
func (client *Client) ModifySQLCollectorPolicy(request *ModifySQLCollectorPolicyRequest) (_result *ModifySQLCollectorPolicyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifySQLCollectorPolicyResponse{}
	_body, _err := client.ModifySQLCollectorPolicyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies the IP address whitelist of an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// To ensure the security and stability of AnalyticDB for PostgreSQL instances, the system denies all external IP addresses to access AnalyticDB for PostgreSQL instances by default. Before you can use an AnalyticDB for PostgreSQL instance, you must add the IP address or CIDR block of your client to the IP address whitelist of the instance.
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - ModifySecurityIpsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifySecurityIpsResponse
func (client *Client) ModifySecurityIpsWithOptions(request *ModifySecurityIpsRequest, runtime *util.RuntimeOptions) (_result *ModifySecurityIpsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceIPArrayAttribute)) {
		query["DBInstanceIPArrayAttribute"] = request.DBInstanceIPArrayAttribute
	}

	if !tea.BoolValue(util.IsUnset(request.DBInstanceIPArrayName)) {
		query["DBInstanceIPArrayName"] = request.DBInstanceIPArrayName
	}

	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.ModifyMode)) {
		query["ModifyMode"] = request.ModifyMode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityIPList)) {
		query["SecurityIPList"] = request.SecurityIPList
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifySecurityIps"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ModifySecurityIpsResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ModifySecurityIpsResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Modifies the IP address whitelist of an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// To ensure the security and stability of AnalyticDB for PostgreSQL instances, the system denies all external IP addresses to access AnalyticDB for PostgreSQL instances by default. Before you can use an AnalyticDB for PostgreSQL instance, you must add the IP address or CIDR block of your client to the IP address whitelist of the instance.
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - ModifySecurityIpsRequest
//
// @return ModifySecurityIpsResponse
func (client *Client) ModifySecurityIps(request *ModifySecurityIpsRequest) (_result *ModifySecurityIpsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifySecurityIpsResponse{}
	_body, _err := client.ModifySecurityIpsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies a real-time data service.
//
// @param request - ModifyStreamingDataServiceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyStreamingDataServiceResponse
func (client *Client) ModifyStreamingDataServiceWithOptions(request *ModifyStreamingDataServiceRequest, runtime *util.RuntimeOptions) (_result *ModifyStreamingDataServiceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceDescription)) {
		query["ServiceDescription"] = request.ServiceDescription
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceId)) {
		query["ServiceId"] = request.ServiceId
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceSpec)) {
		query["ServiceSpec"] = request.ServiceSpec
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyStreamingDataService"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ModifyStreamingDataServiceResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ModifyStreamingDataServiceResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Modifies a real-time data service.
//
// @param request - ModifyStreamingDataServiceRequest
//
// @return ModifyStreamingDataServiceResponse
func (client *Client) ModifyStreamingDataService(request *ModifyStreamingDataServiceRequest) (_result *ModifyStreamingDataServiceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyStreamingDataServiceResponse{}
	_body, _err := client.ModifyStreamingDataServiceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies a real-time service data source.
//
// @param request - ModifyStreamingDataSourceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyStreamingDataSourceResponse
func (client *Client) ModifyStreamingDataSourceWithOptions(request *ModifyStreamingDataSourceRequest, runtime *util.RuntimeOptions) (_result *ModifyStreamingDataSourceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.DataSourceConfig)) {
		query["DataSourceConfig"] = request.DataSourceConfig
	}

	if !tea.BoolValue(util.IsUnset(request.DataSourceDescription)) {
		query["DataSourceDescription"] = request.DataSourceDescription
	}

	if !tea.BoolValue(util.IsUnset(request.DataSourceId)) {
		query["DataSourceId"] = request.DataSourceId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyStreamingDataSource"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ModifyStreamingDataSourceResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ModifyStreamingDataSourceResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Modifies a real-time service data source.
//
// @param request - ModifyStreamingDataSourceRequest
//
// @return ModifyStreamingDataSourceResponse
func (client *Client) ModifyStreamingDataSource(request *ModifyStreamingDataSourceRequest) (_result *ModifyStreamingDataSourceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyStreamingDataSourceResponse{}
	_body, _err := client.ModifyStreamingDataSourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Create External Data Source Configuration
//
// @param tmpReq - ModifyStreamingJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyStreamingJobResponse
func (client *Client) ModifyStreamingJobWithOptions(tmpReq *ModifyStreamingJobRequest, runtime *util.RuntimeOptions) (_result *ModifyStreamingJobResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &ModifyStreamingJobShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.DestColumns)) {
		request.DestColumnsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.DestColumns, tea.String("DestColumns"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.MatchColumns)) {
		request.MatchColumnsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.MatchColumns, tea.String("MatchColumns"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.SrcColumns)) {
		request.SrcColumnsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.SrcColumns, tea.String("SrcColumns"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.UpdateColumns)) {
		request.UpdateColumnsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.UpdateColumns, tea.String("UpdateColumns"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Account)) {
		query["Account"] = request.Account
	}

	if !tea.BoolValue(util.IsUnset(request.Consistency)) {
		query["Consistency"] = request.Consistency
	}

	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.DestColumnsShrink)) {
		query["DestColumns"] = request.DestColumnsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.DestDatabase)) {
		query["DestDatabase"] = request.DestDatabase
	}

	if !tea.BoolValue(util.IsUnset(request.DestSchema)) {
		query["DestSchema"] = request.DestSchema
	}

	if !tea.BoolValue(util.IsUnset(request.DestTable)) {
		query["DestTable"] = request.DestTable
	}

	if !tea.BoolValue(util.IsUnset(request.ErrorLimitCount)) {
		query["ErrorLimitCount"] = request.ErrorLimitCount
	}

	if !tea.BoolValue(util.IsUnset(request.FallbackOffset)) {
		query["FallbackOffset"] = request.FallbackOffset
	}

	if !tea.BoolValue(util.IsUnset(request.GroupName)) {
		query["GroupName"] = request.GroupName
	}

	if !tea.BoolValue(util.IsUnset(request.JobConfig)) {
		query["JobConfig"] = request.JobConfig
	}

	if !tea.BoolValue(util.IsUnset(request.JobDescription)) {
		query["JobDescription"] = request.JobDescription
	}

	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	if !tea.BoolValue(util.IsUnset(request.MatchColumnsShrink)) {
		query["MatchColumns"] = request.MatchColumnsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Password)) {
		query["Password"] = request.Password
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.SrcColumnsShrink)) {
		query["SrcColumns"] = request.SrcColumnsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.TryRun)) {
		query["TryRun"] = request.TryRun
	}

	if !tea.BoolValue(util.IsUnset(request.UpdateColumnsShrink)) {
		query["UpdateColumns"] = request.UpdateColumnsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.WriteMode)) {
		query["WriteMode"] = request.WriteMode
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyStreamingJob"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ModifyStreamingJobResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ModifyStreamingJobResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Create External Data Source Configuration
//
// @param request - ModifyStreamingJobRequest
//
// @return ModifyStreamingJobResponse
func (client *Client) ModifyStreamingJob(request *ModifyStreamingJobRequest) (_result *ModifyStreamingJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyStreamingJobResponse{}
	_body, _err := client.ModifyStreamingJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies the vector engine optimization configuration of an AnalyticDB for PostgreSQL instance.
//
// @param request - ModifyVectorConfigurationRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyVectorConfigurationResponse
func (client *Client) ModifyVectorConfigurationWithOptions(request *ModifyVectorConfigurationRequest, runtime *util.RuntimeOptions) (_result *ModifyVectorConfigurationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.VectorConfigurationStatus)) {
		query["VectorConfigurationStatus"] = request.VectorConfigurationStatus
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyVectorConfiguration"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ModifyVectorConfigurationResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ModifyVectorConfigurationResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Modifies the vector engine optimization configuration of an AnalyticDB for PostgreSQL instance.
//
// @param request - ModifyVectorConfigurationRequest
//
// @return ModifyVectorConfigurationResponse
func (client *Client) ModifyVectorConfiguration(request *ModifyVectorConfigurationRequest) (_result *ModifyVectorConfigurationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyVectorConfigurationResponse{}
	_body, _err := client.ModifyVectorConfigurationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Pauses data redistribution.
//
// @param request - PauseDataRedistributeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return PauseDataRedistributeResponse
func (client *Client) PauseDataRedistributeWithOptions(request *PauseDataRedistributeRequest, runtime *util.RuntimeOptions) (_result *PauseDataRedistributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("PauseDataRedistribute"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &PauseDataRedistributeResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &PauseDataRedistributeResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Pauses data redistribution.
//
// @param request - PauseDataRedistributeRequest
//
// @return PauseDataRedistributeResponse
func (client *Client) PauseDataRedistribute(request *PauseDataRedistributeRequest) (_result *PauseDataRedistributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &PauseDataRedistributeResponse{}
	_body, _err := client.PauseDataRedistributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Pauses an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// You can call this operation to pause an AnalyticDB for PostgreSQL instance that is in the **Running*	- state.
//
// This operation is available only for AnalyticDB for PostgreSQL instances in Serverless mode that run V1.0.2.1 or later. For more information about how to view and update the minor engine version of an instance, see [View the minor engine version](https://help.aliyun.com/document_detail/277424.html) and [Update the minor engine version](https://help.aliyun.com/document_detail/139271.html).
//
// >  Before you call this operation, make sure that you are familiar with the billing methods and pricing of AnalyticDB for PostgreSQL instances. For more information, see [Billing methods](https://help.aliyun.com/document_detail/35406.html) and [AnalyticDB for PostgreSQL pricing](https://www.alibabacloud.com/zh/product/hybriddb-postgresql/pricing).
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - PauseInstanceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return PauseInstanceResponse
func (client *Client) PauseInstanceWithOptions(request *PauseInstanceRequest, runtime *util.RuntimeOptions) (_result *PauseInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("PauseInstance"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &PauseInstanceResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &PauseInstanceResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Pauses an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// You can call this operation to pause an AnalyticDB for PostgreSQL instance that is in the **Running*	- state.
//
// This operation is available only for AnalyticDB for PostgreSQL instances in Serverless mode that run V1.0.2.1 or later. For more information about how to view and update the minor engine version of an instance, see [View the minor engine version](https://help.aliyun.com/document_detail/277424.html) and [Update the minor engine version](https://help.aliyun.com/document_detail/139271.html).
//
// >  Before you call this operation, make sure that you are familiar with the billing methods and pricing of AnalyticDB for PostgreSQL instances. For more information, see [Billing methods](https://help.aliyun.com/document_detail/35406.html) and [AnalyticDB for PostgreSQL pricing](https://www.alibabacloud.com/zh/product/hybriddb-postgresql/pricing).
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - PauseInstanceRequest
//
// @return PauseInstanceResponse
func (client *Client) PauseInstance(request *PauseInstanceRequest) (_result *PauseInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &PauseInstanceResponse{}
	_body, _err := client.PauseInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Query Vector Data
//
// @param tmpReq - QueryCollectionDataRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryCollectionDataResponse
func (client *Client) QueryCollectionDataWithOptions(tmpReq *QueryCollectionDataRequest, runtime *util.RuntimeOptions) (_result *QueryCollectionDataResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &QueryCollectionDataShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.HybridSearchArgs)) {
		request.HybridSearchArgsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.HybridSearchArgs, tea.String("HybridSearchArgs"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.RelationalTableFilter)) {
		request.RelationalTableFilterShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.RelationalTableFilter, tea.String("RelationalTableFilter"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.SparseVector)) {
		request.SparseVectorShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.SparseVector, tea.String("SparseVector"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.Vector)) {
		request.VectorShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Vector, tea.String("Vector"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Collection)) {
		query["Collection"] = request.Collection
	}

	if !tea.BoolValue(util.IsUnset(request.Content)) {
		query["Content"] = request.Content
	}

	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Filter)) {
		query["Filter"] = request.Filter
	}

	if !tea.BoolValue(util.IsUnset(request.HybridSearch)) {
		query["HybridSearch"] = request.HybridSearch
	}

	if !tea.BoolValue(util.IsUnset(request.HybridSearchArgsShrink)) {
		query["HybridSearchArgs"] = request.HybridSearchArgsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.IncludeMetadataFields)) {
		query["IncludeMetadataFields"] = request.IncludeMetadataFields
	}

	if !tea.BoolValue(util.IsUnset(request.IncludeValues)) {
		query["IncludeValues"] = request.IncludeValues
	}

	if !tea.BoolValue(util.IsUnset(request.Metrics)) {
		query["Metrics"] = request.Metrics
	}

	if !tea.BoolValue(util.IsUnset(request.Namespace)) {
		query["Namespace"] = request.Namespace
	}

	if !tea.BoolValue(util.IsUnset(request.NamespacePassword)) {
		query["NamespacePassword"] = request.NamespacePassword
	}

	if !tea.BoolValue(util.IsUnset(request.Offset)) {
		query["Offset"] = request.Offset
	}

	if !tea.BoolValue(util.IsUnset(request.OrderBy)) {
		query["OrderBy"] = request.OrderBy
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.RelationalTableFilterShrink)) {
		query["RelationalTableFilter"] = request.RelationalTableFilterShrink
	}

	if !tea.BoolValue(util.IsUnset(request.SparseVectorShrink)) {
		query["SparseVector"] = request.SparseVectorShrink
	}

	if !tea.BoolValue(util.IsUnset(request.TopK)) {
		query["TopK"] = request.TopK
	}

	if !tea.BoolValue(util.IsUnset(request.VectorShrink)) {
		query["Vector"] = request.VectorShrink
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		query["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryCollectionData"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &QueryCollectionDataResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &QueryCollectionDataResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Query Vector Data
//
// @param request - QueryCollectionDataRequest
//
// @return QueryCollectionDataResponse
func (client *Client) QueryCollectionData(request *QueryCollectionDataRequest) (_result *QueryCollectionDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryCollectionDataResponse{}
	_body, _err := client.QueryCollectionDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Query
//
// @param tmpReq - QueryContentRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryContentResponse
func (client *Client) QueryContentWithOptions(tmpReq *QueryContentRequest, runtime *util.RuntimeOptions) (_result *QueryContentResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &QueryContentShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.HybridSearchArgs)) {
		request.HybridSearchArgsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.HybridSearchArgs, tea.String("HybridSearchArgs"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.RecallWindow)) {
		request.RecallWindowShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.RecallWindow, tea.String("RecallWindow"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Collection)) {
		query["Collection"] = request.Collection
	}

	if !tea.BoolValue(util.IsUnset(request.Content)) {
		query["Content"] = request.Content
	}

	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.FileName)) {
		query["FileName"] = request.FileName
	}

	if !tea.BoolValue(util.IsUnset(request.FileUrl)) {
		query["FileUrl"] = request.FileUrl
	}

	if !tea.BoolValue(util.IsUnset(request.Filter)) {
		query["Filter"] = request.Filter
	}

	if !tea.BoolValue(util.IsUnset(request.HybridSearch)) {
		query["HybridSearch"] = request.HybridSearch
	}

	if !tea.BoolValue(util.IsUnset(request.HybridSearchArgsShrink)) {
		query["HybridSearchArgs"] = request.HybridSearchArgsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.IncludeFileUrl)) {
		query["IncludeFileUrl"] = request.IncludeFileUrl
	}

	if !tea.BoolValue(util.IsUnset(request.IncludeMetadataFields)) {
		query["IncludeMetadataFields"] = request.IncludeMetadataFields
	}

	if !tea.BoolValue(util.IsUnset(request.IncludeVector)) {
		query["IncludeVector"] = request.IncludeVector
	}

	if !tea.BoolValue(util.IsUnset(request.Metrics)) {
		query["Metrics"] = request.Metrics
	}

	if !tea.BoolValue(util.IsUnset(request.Namespace)) {
		query["Namespace"] = request.Namespace
	}

	if !tea.BoolValue(util.IsUnset(request.NamespacePassword)) {
		query["NamespacePassword"] = request.NamespacePassword
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RecallWindowShrink)) {
		query["RecallWindow"] = request.RecallWindowShrink
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.RerankFactor)) {
		query["RerankFactor"] = request.RerankFactor
	}

	if !tea.BoolValue(util.IsUnset(request.TopK)) {
		query["TopK"] = request.TopK
	}

	if !tea.BoolValue(util.IsUnset(request.UseFullTextRetrieval)) {
		query["UseFullTextRetrieval"] = request.UseFullTextRetrieval
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryContent"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &QueryContentResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &QueryContentResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Query
//
// @param request - QueryContentRequest
//
// @return QueryContentResponse
func (client *Client) QueryContent(request *QueryContentRequest) (_result *QueryContentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryContentResponse{}
	_body, _err := client.QueryContentWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryContentAdvance(request *QueryContentAdvanceRequest, runtime *util.RuntimeOptions) (_result *QueryContentResponse, _err error) {
	// Step 0: init client
	accessKeyId, _err := client.Credential.GetAccessKeyId()
	if _err != nil {
		return _result, _err
	}

	accessKeySecret, _err := client.Credential.GetAccessKeySecret()
	if _err != nil {
		return _result, _err
	}

	securityToken, _err := client.Credential.GetSecurityToken()
	if _err != nil {
		return _result, _err
	}

	credentialType := client.Credential.GetType()
	openPlatformEndpoint := client.OpenPlatformEndpoint
	if tea.BoolValue(util.Empty(openPlatformEndpoint)) {
		openPlatformEndpoint = tea.String("openplatform.aliyuncs.com")
	}

	if tea.BoolValue(util.IsUnset(credentialType)) {
		credentialType = tea.String("access_key")
	}

	authConfig := &openapi.Config{
		AccessKeyId:     accessKeyId,
		AccessKeySecret: accessKeySecret,
		SecurityToken:   securityToken,
		Type:            credentialType,
		Endpoint:        openPlatformEndpoint,
		Protocol:        client.Protocol,
		RegionId:        client.RegionId,
	}
	authClient, _err := openplatform.NewClient(authConfig)
	if _err != nil {
		return _result, _err
	}

	authRequest := &openplatform.AuthorizeFileUploadRequest{
		Product:  tea.String("gpdb"),
		RegionId: client.RegionId,
	}
	authResponse := &openplatform.AuthorizeFileUploadResponse{}
	ossConfig := &oss.Config{
		AccessKeyId:     accessKeyId,
		AccessKeySecret: accessKeySecret,
		Type:            tea.String("access_key"),
		Protocol:        client.Protocol,
		RegionId:        client.RegionId,
	}
	ossClient, _err := oss.NewClient(ossConfig)
	if _err != nil {
		return _result, _err
	}

	fileObj := &fileform.FileField{}
	ossHeader := &oss.PostObjectRequestHeader{}
	uploadRequest := &oss.PostObjectRequest{}
	ossRuntime := &ossutil.RuntimeOptions{}
	openapiutil.Convert(runtime, ossRuntime)
	queryContentReq := &QueryContentRequest{}
	openapiutil.Convert(request, queryContentReq)
	if !tea.BoolValue(util.IsUnset(request.FileUrlObject)) {
		authResponse, _err = authClient.AuthorizeFileUploadWithOptions(authRequest, runtime)
		if _err != nil {
			return _result, _err
		}

		ossConfig.AccessKeyId = authResponse.Body.AccessKeyId
		ossConfig.Endpoint = openapiutil.GetEndpoint(authResponse.Body.Endpoint, authResponse.Body.UseAccelerate, client.EndpointType)
		ossClient, _err = oss.NewClient(ossConfig)
		if _err != nil {
			return _result, _err
		}

		fileObj = &fileform.FileField{
			Filename:    authResponse.Body.ObjectKey,
			Content:     request.FileUrlObject,
			ContentType: tea.String(""),
		}
		ossHeader = &oss.PostObjectRequestHeader{
			AccessKeyId:         authResponse.Body.AccessKeyId,
			Policy:              authResponse.Body.EncodedPolicy,
			Signature:           authResponse.Body.Signature,
			Key:                 authResponse.Body.ObjectKey,
			File:                fileObj,
			SuccessActionStatus: tea.String("201"),
		}
		uploadRequest = &oss.PostObjectRequest{
			BucketName: authResponse.Body.Bucket,
			Header:     ossHeader,
		}
		_, _err = ossClient.PostObject(uploadRequest, ossRuntime)
		if _err != nil {
			return _result, _err
		}
		queryContentReq.FileUrl = tea.String("http://" + tea.StringValue(authResponse.Body.Bucket) + "." + tea.StringValue(authResponse.Body.Endpoint) + "/" + tea.StringValue(authResponse.Body.ObjectKey))
	}

	queryContentResp, _err := client.QueryContentWithOptions(queryContentReq, runtime)
	if _err != nil {
		return _result, _err
	}

	_result = queryContentResp
	return _result, _err
}

// Summary:
//
// Rebalances an AnalyticDB for PostgreSQL instance.
//
// @param request - RebalanceDBInstanceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RebalanceDBInstanceResponse
func (client *Client) RebalanceDBInstanceWithOptions(request *RebalanceDBInstanceRequest, runtime *util.RuntimeOptions) (_result *RebalanceDBInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		query["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RebalanceDBInstance"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &RebalanceDBInstanceResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &RebalanceDBInstanceResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Rebalances an AnalyticDB for PostgreSQL instance.
//
// @param request - RebalanceDBInstanceRequest
//
// @return RebalanceDBInstanceResponse
func (client *Client) RebalanceDBInstance(request *RebalanceDBInstanceRequest) (_result *RebalanceDBInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RebalanceDBInstanceResponse{}
	_body, _err := client.RebalanceDBInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Releases the public endpoint of an AnalyticDB for PostgreSQL instance.
//
// @param request - ReleaseInstancePublicConnectionRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ReleaseInstancePublicConnectionResponse
func (client *Client) ReleaseInstancePublicConnectionWithOptions(request *ReleaseInstancePublicConnectionRequest, runtime *util.RuntimeOptions) (_result *ReleaseInstancePublicConnectionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AddressType)) {
		query["AddressType"] = request.AddressType
	}

	if !tea.BoolValue(util.IsUnset(request.CurrentConnectionString)) {
		query["CurrentConnectionString"] = request.CurrentConnectionString
	}

	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ReleaseInstancePublicConnection"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ReleaseInstancePublicConnectionResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ReleaseInstancePublicConnectionResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Releases the public endpoint of an AnalyticDB for PostgreSQL instance.
//
// @param request - ReleaseInstancePublicConnectionRequest
//
// @return ReleaseInstancePublicConnectionResponse
func (client *Client) ReleaseInstancePublicConnection(request *ReleaseInstancePublicConnectionRequest) (_result *ReleaseInstancePublicConnectionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ReleaseInstancePublicConnectionResponse{}
	_body, _err := client.ReleaseInstancePublicConnectionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Score and re-order documents using a model
//
// @param tmpReq - RerankRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RerankResponse
func (client *Client) RerankWithOptions(tmpReq *RerankRequest, runtime *util.RuntimeOptions) (_result *RerankResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &RerankShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Documents)) {
		request.DocumentsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Documents, tea.String("Documents"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DocumentsShrink)) {
		body["Documents"] = request.DocumentsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.MaxChunksPerDoc)) {
		body["MaxChunksPerDoc"] = request.MaxChunksPerDoc
	}

	if !tea.BoolValue(util.IsUnset(request.Model)) {
		body["Model"] = request.Model
	}

	if !tea.BoolValue(util.IsUnset(request.Query)) {
		body["Query"] = request.Query
	}

	if !tea.BoolValue(util.IsUnset(request.ReturnDocuments)) {
		body["ReturnDocuments"] = request.ReturnDocuments
	}

	if !tea.BoolValue(util.IsUnset(request.TopK)) {
		body["TopK"] = request.TopK
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("Rerank"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &RerankResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &RerankResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Score and re-order documents using a model
//
// @param request - RerankRequest
//
// @return RerankResponse
func (client *Client) Rerank(request *RerankRequest) (_result *RerankResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RerankResponse{}
	_body, _err := client.RerankWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Resets the password of a database account for an AnalyticDB for PostgreSQL instance.
//
// @param request - ResetAccountPasswordRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ResetAccountPasswordResponse
func (client *Client) ResetAccountPasswordWithOptions(request *ResetAccountPasswordRequest, runtime *util.RuntimeOptions) (_result *ResetAccountPasswordResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccountName)) {
		query["AccountName"] = request.AccountName
	}

	if !tea.BoolValue(util.IsUnset(request.AccountPassword)) {
		query["AccountPassword"] = request.AccountPassword
	}

	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ResetAccountPassword"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ResetAccountPasswordResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ResetAccountPasswordResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Resets the password of a database account for an AnalyticDB for PostgreSQL instance.
//
// @param request - ResetAccountPasswordRequest
//
// @return ResetAccountPasswordResponse
func (client *Client) ResetAccountPassword(request *ResetAccountPasswordRequest) (_result *ResetAccountPasswordResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ResetAccountPasswordResponse{}
	_body, _err := client.ResetAccountPasswordWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Resets the IMV statistics.
//
// @param request - ResetIMVMonitorDataRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ResetIMVMonitorDataResponse
func (client *Client) ResetIMVMonitorDataWithOptions(request *ResetIMVMonitorDataRequest, runtime *util.RuntimeOptions) (_result *ResetIMVMonitorDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Database)) {
		query["Database"] = request.Database
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ResetIMVMonitorData"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ResetIMVMonitorDataResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ResetIMVMonitorDataResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Resets the IMV statistics.
//
// @param request - ResetIMVMonitorDataRequest
//
// @return ResetIMVMonitorDataResponse
func (client *Client) ResetIMVMonitorData(request *ResetIMVMonitorDataRequest) (_result *ResetIMVMonitorDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ResetIMVMonitorDataResponse{}
	_body, _err := client.ResetIMVMonitorDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Restarts an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// A restart takes about 3 to 30 minutes. During the restart, services are unavailable. We recommend that you restart the instance during off-peak hours. After the instance is restarted and enters the running state, you can access the instance.
//
// ## Limit
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered and may affect your business. We recommend that you take note of the limit when you call this operation.
//
// @param request - RestartDBInstanceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RestartDBInstanceResponse
func (client *Client) RestartDBInstanceWithOptions(request *RestartDBInstanceRequest, runtime *util.RuntimeOptions) (_result *RestartDBInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		query["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RestartDBInstance"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &RestartDBInstanceResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &RestartDBInstanceResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Restarts an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// A restart takes about 3 to 30 minutes. During the restart, services are unavailable. We recommend that you restart the instance during off-peak hours. After the instance is restarted and enters the running state, you can access the instance.
//
// ## Limit
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered and may affect your business. We recommend that you take note of the limit when you call this operation.
//
// @param request - RestartDBInstanceRequest
//
// @return RestartDBInstanceResponse
func (client *Client) RestartDBInstance(request *RestartDBInstanceRequest) (_result *RestartDBInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RestartDBInstanceResponse{}
	_body, _err := client.RestartDBInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Resumes data redistribution.
//
// @param request - ResumeDataRedistributeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ResumeDataRedistributeResponse
func (client *Client) ResumeDataRedistributeWithOptions(request *ResumeDataRedistributeRequest, runtime *util.RuntimeOptions) (_result *ResumeDataRedistributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ResumeDataRedistribute"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ResumeDataRedistributeResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ResumeDataRedistributeResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Resumes data redistribution.
//
// @param request - ResumeDataRedistributeRequest
//
// @return ResumeDataRedistributeResponse
func (client *Client) ResumeDataRedistribute(request *ResumeDataRedistributeRequest) (_result *ResumeDataRedistributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ResumeDataRedistributeResponse{}
	_body, _err := client.ResumeDataRedistributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Resumes an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// You can call this operation to resume an AnalyticDB for PostgreSQL instance that is in the **Paused*	- state.
//
// This operation is available only for AnalyticDB for PostgreSQL instances in Serverless mode that run V1.0.2.1 or later. For more information about how to view and update the minor engine version of an instance, see [View the minor engine version](https://help.aliyun.com/document_detail/277424.html) and [Update the minor engine version](https://help.aliyun.com/document_detail/139271.html).
//
// >  Before you call this operation, make sure that you are familiar with the billing methods and pricing of AnalyticDB for PostgreSQL instances. For more information, see [Billing methods](https://help.aliyun.com/document_detail/35406.html) and [AnalyticDB for PostgreSQL pricing](https://www.alibabacloud.com/zh/product/hybriddb-postgresql/pricing).
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - ResumeInstanceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ResumeInstanceResponse
func (client *Client) ResumeInstanceWithOptions(request *ResumeInstanceRequest, runtime *util.RuntimeOptions) (_result *ResumeInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ResumeInstance"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ResumeInstanceResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ResumeInstanceResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Resumes an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// You can call this operation to resume an AnalyticDB for PostgreSQL instance that is in the **Paused*	- state.
//
// This operation is available only for AnalyticDB for PostgreSQL instances in Serverless mode that run V1.0.2.1 or later. For more information about how to view and update the minor engine version of an instance, see [View the minor engine version](https://help.aliyun.com/document_detail/277424.html) and [Update the minor engine version](https://help.aliyun.com/document_detail/139271.html).
//
// >  Before you call this operation, make sure that you are familiar with the billing methods and pricing of AnalyticDB for PostgreSQL instances. For more information, see [Billing methods](https://help.aliyun.com/document_detail/35406.html) and [AnalyticDB for PostgreSQL pricing](https://www.alibabacloud.com/zh/product/hybriddb-postgresql/pricing).
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - ResumeInstanceRequest
//
// @return ResumeInstanceResponse
func (client *Client) ResumeInstance(request *ResumeInstanceRequest) (_result *ResumeInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ResumeInstanceResponse{}
	_body, _err := client.ResumeInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Enables or disables a plan for an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// You can call this operation to enable or disable a specified plan. The plan management feature is supported only for AnalyticDB for PostgreSQL instances in Serverless mode.
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - SetDBInstancePlanStatusRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SetDBInstancePlanStatusResponse
func (client *Client) SetDBInstancePlanStatusWithOptions(request *SetDBInstancePlanStatusRequest, runtime *util.RuntimeOptions) (_result *SetDBInstancePlanStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PlanId)) {
		query["PlanId"] = request.PlanId
	}

	if !tea.BoolValue(util.IsUnset(request.PlanStatus)) {
		query["PlanStatus"] = request.PlanStatus
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SetDBInstancePlanStatus"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &SetDBInstancePlanStatusResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &SetDBInstancePlanStatusResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Enables or disables a plan for an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// You can call this operation to enable or disable a specified plan. The plan management feature is supported only for AnalyticDB for PostgreSQL instances in Serverless mode.
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - SetDBInstancePlanStatusRequest
//
// @return SetDBInstancePlanStatusResponse
func (client *Client) SetDBInstancePlanStatus(request *SetDBInstancePlanStatusRequest) (_result *SetDBInstancePlanStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetDBInstancePlanStatusResponse{}
	_body, _err := client.SetDBInstancePlanStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Enables or disables data sharing for an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// This operation is called to enable or disable data sharing for an AnalyticDB for PostgreSQL instance in Serverless mode.
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param tmpReq - SetDataShareInstanceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SetDataShareInstanceResponse
func (client *Client) SetDataShareInstanceWithOptions(tmpReq *SetDataShareInstanceRequest, runtime *util.RuntimeOptions) (_result *SetDataShareInstanceResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &SetDataShareInstanceShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.InstanceList)) {
		request.InstanceListShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.InstanceList, tea.String("InstanceList"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceListShrink)) {
		query["InstanceList"] = request.InstanceListShrink
	}

	if !tea.BoolValue(util.IsUnset(request.OperationType)) {
		query["OperationType"] = request.OperationType
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SetDataShareInstance"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &SetDataShareInstanceResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &SetDataShareInstanceResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Enables or disables data sharing for an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// This operation is called to enable or disable data sharing for an AnalyticDB for PostgreSQL instance in Serverless mode.
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - SetDataShareInstanceRequest
//
// @return SetDataShareInstanceResponse
func (client *Client) SetDataShareInstance(request *SetDataShareInstanceRequest) (_result *SetDataShareInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetDataShareInstanceResponse{}
	_body, _err := client.SetDataShareInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Switches between the internal and public endpoints of an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// This operation is not supported for AnalyticDB for PostgreSQL instances in elastic storage mode or Serverless mode.
//
// @param request - SwitchDBInstanceNetTypeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SwitchDBInstanceNetTypeResponse
func (client *Client) SwitchDBInstanceNetTypeWithOptions(request *SwitchDBInstanceNetTypeRequest, runtime *util.RuntimeOptions) (_result *SwitchDBInstanceNetTypeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConnectionStringPrefix)) {
		query["ConnectionStringPrefix"] = request.ConnectionStringPrefix
	}

	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Port)) {
		query["Port"] = request.Port
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SwitchDBInstanceNetType"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &SwitchDBInstanceNetTypeResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &SwitchDBInstanceNetTypeResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Switches between the internal and public endpoints of an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// This operation is not supported for AnalyticDB for PostgreSQL instances in elastic storage mode or Serverless mode.
//
// @param request - SwitchDBInstanceNetTypeRequest
//
// @return SwitchDBInstanceNetTypeResponse
func (client *Client) SwitchDBInstanceNetType(request *SwitchDBInstanceNetTypeRequest) (_result *SwitchDBInstanceNetTypeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SwitchDBInstanceNetTypeResponse{}
	_body, _err := client.SwitchDBInstanceNetTypeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates and adds tags to AnalyticDB for PostgreSQL instances.
//
// @param request - TagResourcesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return TagResourcesResponse
func (client *Client) TagResourcesWithOptions(request *TagResourcesRequest, runtime *util.RuntimeOptions) (_result *TagResourcesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceId)) {
		query["ResourceId"] = request.ResourceId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceType)) {
		query["ResourceType"] = request.ResourceType
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("TagResources"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &TagResourcesResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &TagResourcesResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Creates and adds tags to AnalyticDB for PostgreSQL instances.
//
// @param request - TagResourcesRequest
//
// @return TagResourcesResponse
func (client *Client) TagResources(request *TagResourcesRequest) (_result *TagResourcesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &TagResourcesResponse{}
	_body, _err := client.TagResourcesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 通过模型对文本文档进行向量化
//
// @param tmpReq - TextEmbeddingRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return TextEmbeddingResponse
func (client *Client) TextEmbeddingWithOptions(tmpReq *TextEmbeddingRequest, runtime *util.RuntimeOptions) (_result *TextEmbeddingResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &TextEmbeddingShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Input)) {
		request.InputShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Input, tea.String("Input"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InputShrink)) {
		body["Input"] = request.InputShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Model)) {
		body["Model"] = request.Model
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("TextEmbedding"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &TextEmbeddingResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &TextEmbeddingResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// 通过模型对文本文档进行向量化
//
// @param request - TextEmbeddingRequest
//
// @return TextEmbeddingResponse
func (client *Client) TextEmbedding(request *TextEmbeddingRequest) (_result *TextEmbeddingResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &TextEmbeddingResponse{}
	_body, _err := client.TextEmbeddingWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Unbinds database roles from a resource group.
//
// @param tmpReq - UnbindDBResourceGroupWithRoleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UnbindDBResourceGroupWithRoleResponse
func (client *Client) UnbindDBResourceGroupWithRoleWithOptions(tmpReq *UnbindDBResourceGroupWithRoleRequest, runtime *util.RuntimeOptions) (_result *UnbindDBResourceGroupWithRoleResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &UnbindDBResourceGroupWithRoleShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.RoleList)) {
		request.RoleListShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.RoleList, tea.String("RoleList"), tea.String("simple"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupName)) {
		query["ResourceGroupName"] = request.ResourceGroupName
	}

	if !tea.BoolValue(util.IsUnset(request.RoleListShrink)) {
		query["RoleList"] = request.RoleListShrink
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UnbindDBResourceGroupWithRole"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &UnbindDBResourceGroupWithRoleResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &UnbindDBResourceGroupWithRoleResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Unbinds database roles from a resource group.
//
// @param request - UnbindDBResourceGroupWithRoleRequest
//
// @return UnbindDBResourceGroupWithRoleResponse
func (client *Client) UnbindDBResourceGroupWithRole(request *UnbindDBResourceGroupWithRoleRequest) (_result *UnbindDBResourceGroupWithRoleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UnbindDBResourceGroupWithRoleResponse{}
	_body, _err := client.UnbindDBResourceGroupWithRoleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Releases a sample dataset from an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// You can call this operation to release a sample dataset from an AnalyticDB for PostgreSQL instance. You must have already loaded the sample dataset.
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - UnloadSampleDataRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UnloadSampleDataResponse
func (client *Client) UnloadSampleDataWithOptions(request *UnloadSampleDataRequest, runtime *util.RuntimeOptions) (_result *UnloadSampleDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UnloadSampleData"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &UnloadSampleDataResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &UnloadSampleDataResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Releases a sample dataset from an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// You can call this operation to release a sample dataset from an AnalyticDB for PostgreSQL instance. You must have already loaded the sample dataset.
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - UnloadSampleDataRequest
//
// @return UnloadSampleDataResponse
func (client *Client) UnloadSampleData(request *UnloadSampleDataRequest) (_result *UnloadSampleDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UnloadSampleDataResponse{}
	_body, _err := client.UnloadSampleDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Remove resource tags
//
// @param request - UntagResourcesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UntagResourcesResponse
func (client *Client) UntagResourcesWithOptions(request *UntagResourcesRequest, runtime *util.RuntimeOptions) (_result *UntagResourcesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.All)) {
		query["All"] = request.All
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceId)) {
		query["ResourceId"] = request.ResourceId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceType)) {
		query["ResourceType"] = request.ResourceType
	}

	if !tea.BoolValue(util.IsUnset(request.TagKey)) {
		query["TagKey"] = request.TagKey
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UntagResources"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &UntagResourcesResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &UntagResourcesResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Remove resource tags
//
// @param request - UntagResourcesRequest
//
// @return UntagResourcesResponse
func (client *Client) UntagResources(request *UntagResourcesRequest) (_result *UntagResourcesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UntagResourcesResponse{}
	_body, _err := client.UntagResourcesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Update Metadata of Collection Data
//
// @param tmpReq - UpdateCollectionDataMetadataRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateCollectionDataMetadataResponse
func (client *Client) UpdateCollectionDataMetadataWithOptions(tmpReq *UpdateCollectionDataMetadataRequest, runtime *util.RuntimeOptions) (_result *UpdateCollectionDataMetadataResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &UpdateCollectionDataMetadataShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Ids)) {
		request.IdsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Ids, tea.String("Ids"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.Metadata)) {
		request.MetadataShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Metadata, tea.String("Metadata"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Collection)) {
		query["Collection"] = request.Collection
	}

	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Filter)) {
		query["Filter"] = request.Filter
	}

	if !tea.BoolValue(util.IsUnset(request.IdsShrink)) {
		query["Ids"] = request.IdsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.MetadataShrink)) {
		query["Metadata"] = request.MetadataShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Namespace)) {
		query["Namespace"] = request.Namespace
	}

	if !tea.BoolValue(util.IsUnset(request.NamespacePassword)) {
		query["NamespacePassword"] = request.NamespacePassword
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		query["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateCollectionDataMetadata"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &UpdateCollectionDataMetadataResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &UpdateCollectionDataMetadataResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Update Metadata of Collection Data
//
// @param request - UpdateCollectionDataMetadataRequest
//
// @return UpdateCollectionDataMetadataResponse
func (client *Client) UpdateCollectionDataMetadata(request *UpdateCollectionDataMetadataRequest) (_result *UpdateCollectionDataMetadataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateCollectionDataMetadataResponse{}
	_body, _err := client.UpdateCollectionDataMetadataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies a plan for an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// You can call this operation to modify a plan for an AnalyticDB for PostgreSQL instance in Serverless mode. For example, you can modify a plan for periodically pausing and resuming an instance or scaling an instance.
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - UpdateDBInstancePlanRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateDBInstancePlanResponse
func (client *Client) UpdateDBInstancePlanWithOptions(request *UpdateDBInstancePlanRequest, runtime *util.RuntimeOptions) (_result *UpdateDBInstancePlanResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PlanConfig)) {
		query["PlanConfig"] = request.PlanConfig
	}

	if !tea.BoolValue(util.IsUnset(request.PlanDesc)) {
		query["PlanDesc"] = request.PlanDesc
	}

	if !tea.BoolValue(util.IsUnset(request.PlanEndDate)) {
		query["PlanEndDate"] = request.PlanEndDate
	}

	if !tea.BoolValue(util.IsUnset(request.PlanId)) {
		query["PlanId"] = request.PlanId
	}

	if !tea.BoolValue(util.IsUnset(request.PlanName)) {
		query["PlanName"] = request.PlanName
	}

	if !tea.BoolValue(util.IsUnset(request.PlanStartDate)) {
		query["PlanStartDate"] = request.PlanStartDate
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateDBInstancePlan"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &UpdateDBInstancePlanResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &UpdateDBInstancePlanResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Modifies a plan for an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// You can call this operation to modify a plan for an AnalyticDB for PostgreSQL instance in Serverless mode. For example, you can modify a plan for periodically pausing and resuming an instance or scaling an instance.
//
// ## Limits
//
// You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
//
// @param request - UpdateDBInstancePlanRequest
//
// @return UpdateDBInstancePlanResponse
func (client *Client) UpdateDBInstancePlan(request *UpdateDBInstancePlanRequest) (_result *UpdateDBInstancePlanResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateDBInstancePlanResponse{}
	_body, _err := client.UpdateDBInstancePlanWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Changes the configurations of an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// This operation is not available for instances in reserved storage mode.
//
// Before you call this operation, make sure that you are familiar with the billing of AnalyticDB for PostgreSQL. For more information, see [Billing methods](https://help.aliyun.com/document_detail/35406.html) and [AnalyticDB for PostgreSQL pricing](https://www.alibabacloud.com/zh/product/hybriddb-postgresql/pricing).
//
// @param request - UpgradeDBInstanceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpgradeDBInstanceResponse
func (client *Client) UpgradeDBInstanceWithOptions(request *UpgradeDBInstanceRequest, runtime *util.RuntimeOptions) (_result *UpgradeDBInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceClass)) {
		query["DBInstanceClass"] = request.DBInstanceClass
	}

	if !tea.BoolValue(util.IsUnset(request.DBInstanceGroupCount)) {
		query["DBInstanceGroupCount"] = request.DBInstanceGroupCount
	}

	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceSpec)) {
		query["InstanceSpec"] = request.InstanceSpec
	}

	if !tea.BoolValue(util.IsUnset(request.MasterNodeNum)) {
		query["MasterNodeNum"] = request.MasterNodeNum
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PayType)) {
		query["PayType"] = request.PayType
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SegDiskPerformanceLevel)) {
		query["SegDiskPerformanceLevel"] = request.SegDiskPerformanceLevel
	}

	if !tea.BoolValue(util.IsUnset(request.SegNodeNum)) {
		query["SegNodeNum"] = request.SegNodeNum
	}

	if !tea.BoolValue(util.IsUnset(request.SegStorageType)) {
		query["SegStorageType"] = request.SegStorageType
	}

	if !tea.BoolValue(util.IsUnset(request.StorageSize)) {
		query["StorageSize"] = request.StorageSize
	}

	if !tea.BoolValue(util.IsUnset(request.UpgradeType)) {
		query["UpgradeType"] = request.UpgradeType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpgradeDBInstance"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &UpgradeDBInstanceResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &UpgradeDBInstanceResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Changes the configurations of an AnalyticDB for PostgreSQL instance.
//
// Description:
//
// This operation is not available for instances in reserved storage mode.
//
// Before you call this operation, make sure that you are familiar with the billing of AnalyticDB for PostgreSQL. For more information, see [Billing methods](https://help.aliyun.com/document_detail/35406.html) and [AnalyticDB for PostgreSQL pricing](https://www.alibabacloud.com/zh/product/hybriddb-postgresql/pricing).
//
// @param request - UpgradeDBInstanceRequest
//
// @return UpgradeDBInstanceResponse
func (client *Client) UpgradeDBInstance(request *UpgradeDBInstanceRequest) (_result *UpgradeDBInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpgradeDBInstanceResponse{}
	_body, _err := client.UpgradeDBInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Upgrades the minor version of an AnalyticDB for PostgreSQL instance.
//
// @param request - UpgradeDBVersionRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpgradeDBVersionResponse
func (client *Client) UpgradeDBVersionWithOptions(request *UpgradeDBVersionRequest, runtime *util.RuntimeOptions) (_result *UpgradeDBVersionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.MajorVersion)) {
		query["MajorVersion"] = request.MajorVersion
	}

	if !tea.BoolValue(util.IsUnset(request.MinorVersion)) {
		query["MinorVersion"] = request.MinorVersion
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.SwitchTime)) {
		query["SwitchTime"] = request.SwitchTime
	}

	if !tea.BoolValue(util.IsUnset(request.SwitchTimeMode)) {
		query["SwitchTimeMode"] = request.SwitchTimeMode
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpgradeDBVersion"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &UpgradeDBVersionResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &UpgradeDBVersionResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Upgrades the minor version of an AnalyticDB for PostgreSQL instance.
//
// @param request - UpgradeDBVersionRequest
//
// @return UpgradeDBVersionResponse
func (client *Client) UpgradeDBVersion(request *UpgradeDBVersionRequest) (_result *UpgradeDBVersionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpgradeDBVersionResponse{}
	_body, _err := client.UpgradeDBVersionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Updates extensions.
//
// @param request - UpgradeExtensionsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpgradeExtensionsResponse
func (client *Client) UpgradeExtensionsWithOptions(request *UpgradeExtensionsRequest, runtime *util.RuntimeOptions) (_result *UpgradeExtensionsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.DatabaseName)) {
		query["DatabaseName"] = request.DatabaseName
	}

	if !tea.BoolValue(util.IsUnset(request.Extensions)) {
		query["Extensions"] = request.Extensions
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpgradeExtensions"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &UpgradeExtensionsResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &UpgradeExtensionsResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Updates extensions.
//
// @param request - UpgradeExtensionsRequest
//
// @return UpgradeExtensionsResponse
func (client *Client) UpgradeExtensions(request *UpgradeExtensionsRequest) (_result *UpgradeExtensionsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpgradeExtensionsResponse{}
	_body, _err := client.UpgradeExtensionsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Asynchronous Document Upload
//
// Description:
//
// The server loads and chunks a document based on the file extension, performs vectorization by using the embedding model that is specified when you call the CreateDocumentCollection operation, and then writes the document to the specified document collection. This operation supports multi-modal embedding for various formats of text and images.
//
// Related operations:
//
// 	- You can call the GetUploadDocumentJob operation to query the progress and result of a document upload job.
//
// 	- You can call the CancelUploadDocumentJob operation to cancel a document upload job.
//
// >
//
// 	- After a document upload request is submitted, the request is queued for processing. Up to 20 documents in the Pending and Running states can be processed within a Resource Access Management (RAM) user or Alibaba Cloud account.
//
// 	- A text document can be split into up to 100,000 chunks.
//
// 	- If a document collection uses the OnePeace model, each RAM user or Alibaba Cloud account can upload and query up to 10,000 images.
//
// @param tmpReq - UploadDocumentAsyncRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UploadDocumentAsyncResponse
func (client *Client) UploadDocumentAsyncWithOptions(tmpReq *UploadDocumentAsyncRequest, runtime *util.RuntimeOptions) (_result *UploadDocumentAsyncResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &UploadDocumentAsyncShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Metadata)) {
		request.MetadataShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Metadata, tea.String("Metadata"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.Separators)) {
		request.SeparatorsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Separators, tea.String("Separators"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ChunkOverlap)) {
		body["ChunkOverlap"] = request.ChunkOverlap
	}

	if !tea.BoolValue(util.IsUnset(request.ChunkSize)) {
		body["ChunkSize"] = request.ChunkSize
	}

	if !tea.BoolValue(util.IsUnset(request.Collection)) {
		body["Collection"] = request.Collection
	}

	if !tea.BoolValue(util.IsUnset(request.DocumentLoaderName)) {
		body["DocumentLoaderName"] = request.DocumentLoaderName
	}

	if !tea.BoolValue(util.IsUnset(request.DryRun)) {
		body["DryRun"] = request.DryRun
	}

	if !tea.BoolValue(util.IsUnset(request.FileName)) {
		body["FileName"] = request.FileName
	}

	if !tea.BoolValue(util.IsUnset(request.FileUrl)) {
		body["FileUrl"] = request.FileUrl
	}

	if !tea.BoolValue(util.IsUnset(request.MetadataShrink)) {
		body["Metadata"] = request.MetadataShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Namespace)) {
		body["Namespace"] = request.Namespace
	}

	if !tea.BoolValue(util.IsUnset(request.NamespacePassword)) {
		body["NamespacePassword"] = request.NamespacePassword
	}

	if !tea.BoolValue(util.IsUnset(request.SeparatorsShrink)) {
		body["Separators"] = request.SeparatorsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.TextSplitterName)) {
		body["TextSplitterName"] = request.TextSplitterName
	}

	if !tea.BoolValue(util.IsUnset(request.ZhTitleEnhance)) {
		body["ZhTitleEnhance"] = request.ZhTitleEnhance
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UploadDocumentAsync"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &UploadDocumentAsyncResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &UploadDocumentAsyncResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Asynchronous Document Upload
//
// Description:
//
// The server loads and chunks a document based on the file extension, performs vectorization by using the embedding model that is specified when you call the CreateDocumentCollection operation, and then writes the document to the specified document collection. This operation supports multi-modal embedding for various formats of text and images.
//
// Related operations:
//
// 	- You can call the GetUploadDocumentJob operation to query the progress and result of a document upload job.
//
// 	- You can call the CancelUploadDocumentJob operation to cancel a document upload job.
//
// >
//
// 	- After a document upload request is submitted, the request is queued for processing. Up to 20 documents in the Pending and Running states can be processed within a Resource Access Management (RAM) user or Alibaba Cloud account.
//
// 	- A text document can be split into up to 100,000 chunks.
//
// 	- If a document collection uses the OnePeace model, each RAM user or Alibaba Cloud account can upload and query up to 10,000 images.
//
// @param request - UploadDocumentAsyncRequest
//
// @return UploadDocumentAsyncResponse
func (client *Client) UploadDocumentAsync(request *UploadDocumentAsyncRequest) (_result *UploadDocumentAsyncResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UploadDocumentAsyncResponse{}
	_body, _err := client.UploadDocumentAsyncWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UploadDocumentAsyncAdvance(request *UploadDocumentAsyncAdvanceRequest, runtime *util.RuntimeOptions) (_result *UploadDocumentAsyncResponse, _err error) {
	// Step 0: init client
	accessKeyId, _err := client.Credential.GetAccessKeyId()
	if _err != nil {
		return _result, _err
	}

	accessKeySecret, _err := client.Credential.GetAccessKeySecret()
	if _err != nil {
		return _result, _err
	}

	securityToken, _err := client.Credential.GetSecurityToken()
	if _err != nil {
		return _result, _err
	}

	credentialType := client.Credential.GetType()
	openPlatformEndpoint := client.OpenPlatformEndpoint
	if tea.BoolValue(util.Empty(openPlatformEndpoint)) {
		openPlatformEndpoint = tea.String("openplatform.aliyuncs.com")
	}

	if tea.BoolValue(util.IsUnset(credentialType)) {
		credentialType = tea.String("access_key")
	}

	authConfig := &openapi.Config{
		AccessKeyId:     accessKeyId,
		AccessKeySecret: accessKeySecret,
		SecurityToken:   securityToken,
		Type:            credentialType,
		Endpoint:        openPlatformEndpoint,
		Protocol:        client.Protocol,
		RegionId:        client.RegionId,
	}
	authClient, _err := openplatform.NewClient(authConfig)
	if _err != nil {
		return _result, _err
	}

	authRequest := &openplatform.AuthorizeFileUploadRequest{
		Product:  tea.String("gpdb"),
		RegionId: client.RegionId,
	}
	authResponse := &openplatform.AuthorizeFileUploadResponse{}
	ossConfig := &oss.Config{
		AccessKeyId:     accessKeyId,
		AccessKeySecret: accessKeySecret,
		Type:            tea.String("access_key"),
		Protocol:        client.Protocol,
		RegionId:        client.RegionId,
	}
	ossClient, _err := oss.NewClient(ossConfig)
	if _err != nil {
		return _result, _err
	}

	fileObj := &fileform.FileField{}
	ossHeader := &oss.PostObjectRequestHeader{}
	uploadRequest := &oss.PostObjectRequest{}
	ossRuntime := &ossutil.RuntimeOptions{}
	openapiutil.Convert(runtime, ossRuntime)
	uploadDocumentAsyncReq := &UploadDocumentAsyncRequest{}
	openapiutil.Convert(request, uploadDocumentAsyncReq)
	if !tea.BoolValue(util.IsUnset(request.FileUrlObject)) {
		authResponse, _err = authClient.AuthorizeFileUploadWithOptions(authRequest, runtime)
		if _err != nil {
			return _result, _err
		}

		ossConfig.AccessKeyId = authResponse.Body.AccessKeyId
		ossConfig.Endpoint = openapiutil.GetEndpoint(authResponse.Body.Endpoint, authResponse.Body.UseAccelerate, client.EndpointType)
		ossClient, _err = oss.NewClient(ossConfig)
		if _err != nil {
			return _result, _err
		}

		fileObj = &fileform.FileField{
			Filename:    authResponse.Body.ObjectKey,
			Content:     request.FileUrlObject,
			ContentType: tea.String(""),
		}
		ossHeader = &oss.PostObjectRequestHeader{
			AccessKeyId:         authResponse.Body.AccessKeyId,
			Policy:              authResponse.Body.EncodedPolicy,
			Signature:           authResponse.Body.Signature,
			Key:                 authResponse.Body.ObjectKey,
			File:                fileObj,
			SuccessActionStatus: tea.String("201"),
		}
		uploadRequest = &oss.PostObjectRequest{
			BucketName: authResponse.Body.Bucket,
			Header:     ossHeader,
		}
		_, _err = ossClient.PostObject(uploadRequest, ossRuntime)
		if _err != nil {
			return _result, _err
		}
		uploadDocumentAsyncReq.FileUrl = tea.String("http://" + tea.StringValue(authResponse.Body.Bucket) + "." + tea.StringValue(authResponse.Body.Endpoint) + "/" + tea.StringValue(authResponse.Body.ObjectKey))
	}

	uploadDocumentAsyncResp, _err := client.UploadDocumentAsyncWithOptions(uploadDocumentAsyncReq, runtime)
	if _err != nil {
		return _result, _err
	}

	_result = uploadDocumentAsyncResp
	return _result, _err
}

// Summary:
//
// Upload split text
//
// Description:
//
// The vectorization algorithm for the document is specified by the CreateDocumentCollection API.
//
// @param tmpReq - UpsertChunksRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpsertChunksResponse
func (client *Client) UpsertChunksWithOptions(tmpReq *UpsertChunksRequest, runtime *util.RuntimeOptions) (_result *UpsertChunksResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &UpsertChunksShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.TextChunks)) {
		request.TextChunksShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TextChunks, tea.String("TextChunks"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Collection)) {
		query["Collection"] = request.Collection
	}

	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.FileName)) {
		query["FileName"] = request.FileName
	}

	if !tea.BoolValue(util.IsUnset(request.Namespace)) {
		query["Namespace"] = request.Namespace
	}

	if !tea.BoolValue(util.IsUnset(request.NamespacePassword)) {
		query["NamespacePassword"] = request.NamespacePassword
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.TextChunksShrink)) {
		body["TextChunks"] = request.TextChunksShrink
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpsertChunks"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &UpsertChunksResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &UpsertChunksResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Upload split text
//
// Description:
//
// The vectorization algorithm for the document is specified by the CreateDocumentCollection API.
//
// @param request - UpsertChunksRequest
//
// @return UpsertChunksResponse
func (client *Client) UpsertChunks(request *UpsertChunksRequest) (_result *UpsertChunksResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpsertChunksResponse{}
	_body, _err := client.UpsertChunksWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Uploads vector data to a vector collection.
//
// @param tmpReq - UpsertCollectionDataRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpsertCollectionDataResponse
func (client *Client) UpsertCollectionDataWithOptions(tmpReq *UpsertCollectionDataRequest, runtime *util.RuntimeOptions) (_result *UpsertCollectionDataResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &UpsertCollectionDataShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Rows)) {
		request.RowsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Rows, tea.String("Rows"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Collection)) {
		query["Collection"] = request.Collection
	}

	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Namespace)) {
		query["Namespace"] = request.Namespace
	}

	if !tea.BoolValue(util.IsUnset(request.NamespacePassword)) {
		query["NamespacePassword"] = request.NamespacePassword
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		query["WorkspaceId"] = request.WorkspaceId
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.RowsShrink)) {
		body["Rows"] = request.RowsShrink
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpsertCollectionData"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &UpsertCollectionDataResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &UpsertCollectionDataResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Uploads vector data to a vector collection.
//
// @param request - UpsertCollectionDataRequest
//
// @return UpsertCollectionDataResponse
func (client *Client) UpsertCollectionData(request *UpsertCollectionDataRequest) (_result *UpsertCollectionDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpsertCollectionDataResponse{}
	_body, _err := client.UpsertCollectionDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Uploads vector data in an asynchronous manner by using an on-premises file or a password-free Internet-accessible file URL. The vector data can be up to 200 MB in size.
//
// Description:
//
// This operation is the asynchronous operation of `UpsertCollectionData`. The `UpsertCollectionData` operation supports up to 10 MB of data, and this operation supports up to 200 MB of data.
//
// >  Related operations:
//
// 	- You can call the GetUpsertCollectionDataJob operation to query the progress and result of an upload job.
//
// 	- You can call the CancelUpsertCollectionDataJob operation to cancel an upload job.
//
// > You can upload data for the same collection only in a serial manner.
//
// @param request - UpsertCollectionDataAsyncRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpsertCollectionDataAsyncResponse
func (client *Client) UpsertCollectionDataAsyncWithOptions(request *UpsertCollectionDataAsyncRequest, runtime *util.RuntimeOptions) (_result *UpsertCollectionDataAsyncResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		query["WorkspaceId"] = request.WorkspaceId
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Collection)) {
		body["Collection"] = request.Collection
	}

	if !tea.BoolValue(util.IsUnset(request.FileUrl)) {
		body["FileUrl"] = request.FileUrl
	}

	if !tea.BoolValue(util.IsUnset(request.Namespace)) {
		body["Namespace"] = request.Namespace
	}

	if !tea.BoolValue(util.IsUnset(request.NamespacePassword)) {
		body["NamespacePassword"] = request.NamespacePassword
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpsertCollectionDataAsync"),
		Version:     tea.String("2016-05-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &UpsertCollectionDataAsyncResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &UpsertCollectionDataAsyncResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Uploads vector data in an asynchronous manner by using an on-premises file or a password-free Internet-accessible file URL. The vector data can be up to 200 MB in size.
//
// Description:
//
// This operation is the asynchronous operation of `UpsertCollectionData`. The `UpsertCollectionData` operation supports up to 10 MB of data, and this operation supports up to 200 MB of data.
//
// >  Related operations:
//
// 	- You can call the GetUpsertCollectionDataJob operation to query the progress and result of an upload job.
//
// 	- You can call the CancelUpsertCollectionDataJob operation to cancel an upload job.
//
// > You can upload data for the same collection only in a serial manner.
//
// @param request - UpsertCollectionDataAsyncRequest
//
// @return UpsertCollectionDataAsyncResponse
func (client *Client) UpsertCollectionDataAsync(request *UpsertCollectionDataAsyncRequest) (_result *UpsertCollectionDataAsyncResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpsertCollectionDataAsyncResponse{}
	_body, _err := client.UpsertCollectionDataAsyncWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpsertCollectionDataAsyncAdvance(request *UpsertCollectionDataAsyncAdvanceRequest, runtime *util.RuntimeOptions) (_result *UpsertCollectionDataAsyncResponse, _err error) {
	// Step 0: init client
	accessKeyId, _err := client.Credential.GetAccessKeyId()
	if _err != nil {
		return _result, _err
	}

	accessKeySecret, _err := client.Credential.GetAccessKeySecret()
	if _err != nil {
		return _result, _err
	}

	securityToken, _err := client.Credential.GetSecurityToken()
	if _err != nil {
		return _result, _err
	}

	credentialType := client.Credential.GetType()
	openPlatformEndpoint := client.OpenPlatformEndpoint
	if tea.BoolValue(util.Empty(openPlatformEndpoint)) {
		openPlatformEndpoint = tea.String("openplatform.aliyuncs.com")
	}

	if tea.BoolValue(util.IsUnset(credentialType)) {
		credentialType = tea.String("access_key")
	}

	authConfig := &openapi.Config{
		AccessKeyId:     accessKeyId,
		AccessKeySecret: accessKeySecret,
		SecurityToken:   securityToken,
		Type:            credentialType,
		Endpoint:        openPlatformEndpoint,
		Protocol:        client.Protocol,
		RegionId:        client.RegionId,
	}
	authClient, _err := openplatform.NewClient(authConfig)
	if _err != nil {
		return _result, _err
	}

	authRequest := &openplatform.AuthorizeFileUploadRequest{
		Product:  tea.String("gpdb"),
		RegionId: client.RegionId,
	}
	authResponse := &openplatform.AuthorizeFileUploadResponse{}
	ossConfig := &oss.Config{
		AccessKeyId:     accessKeyId,
		AccessKeySecret: accessKeySecret,
		Type:            tea.String("access_key"),
		Protocol:        client.Protocol,
		RegionId:        client.RegionId,
	}
	ossClient, _err := oss.NewClient(ossConfig)
	if _err != nil {
		return _result, _err
	}

	fileObj := &fileform.FileField{}
	ossHeader := &oss.PostObjectRequestHeader{}
	uploadRequest := &oss.PostObjectRequest{}
	ossRuntime := &ossutil.RuntimeOptions{}
	openapiutil.Convert(runtime, ossRuntime)
	upsertCollectionDataAsyncReq := &UpsertCollectionDataAsyncRequest{}
	openapiutil.Convert(request, upsertCollectionDataAsyncReq)
	if !tea.BoolValue(util.IsUnset(request.FileUrlObject)) {
		authResponse, _err = authClient.AuthorizeFileUploadWithOptions(authRequest, runtime)
		if _err != nil {
			return _result, _err
		}

		ossConfig.AccessKeyId = authResponse.Body.AccessKeyId
		ossConfig.Endpoint = openapiutil.GetEndpoint(authResponse.Body.Endpoint, authResponse.Body.UseAccelerate, client.EndpointType)
		ossClient, _err = oss.NewClient(ossConfig)
		if _err != nil {
			return _result, _err
		}

		fileObj = &fileform.FileField{
			Filename:    authResponse.Body.ObjectKey,
			Content:     request.FileUrlObject,
			ContentType: tea.String(""),
		}
		ossHeader = &oss.PostObjectRequestHeader{
			AccessKeyId:         authResponse.Body.AccessKeyId,
			Policy:              authResponse.Body.EncodedPolicy,
			Signature:           authResponse.Body.Signature,
			Key:                 authResponse.Body.ObjectKey,
			File:                fileObj,
			SuccessActionStatus: tea.String("201"),
		}
		uploadRequest = &oss.PostObjectRequest{
			BucketName: authResponse.Body.Bucket,
			Header:     ossHeader,
		}
		_, _err = ossClient.PostObject(uploadRequest, ossRuntime)
		if _err != nil {
			return _result, _err
		}
		upsertCollectionDataAsyncReq.FileUrl = tea.String("http://" + tea.StringValue(authResponse.Body.Bucket) + "." + tea.StringValue(authResponse.Body.Endpoint) + "/" + tea.StringValue(authResponse.Body.ObjectKey))
	}

	upsertCollectionDataAsyncResp, _err := client.UpsertCollectionDataAsyncWithOptions(upsertCollectionDataAsyncReq, runtime)
	if _err != nil {
		return _result, _err
	}

	_result = upsertCollectionDataAsyncResp
	return _result, _err
}
