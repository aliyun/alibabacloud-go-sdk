// This file is auto-generated, don't edit it. Thanks.
package client

import (
	openapi "github.com/alibabacloud-go/darabonba-openapi/v2/client"
	endpointutil "github.com/alibabacloud-go/endpoint-util/service"
	openapiutil "github.com/alibabacloud-go/openapi-util/service"
	util "github.com/alibabacloud-go/tea-utils/v2/service"
	"github.com/alibabacloud-go/tea/tea"
)

type CallChainInfo struct {
	AdditionalInfo *string                           `json:"AdditionalInfo,omitempty" xml:"AdditionalInfo,omitempty"`
	AppName        *string                           `json:"AppName,omitempty" xml:"AppName,omitempty"`
	AppType        *string                           `json:"AppType,omitempty" xml:"AppType,omitempty"`
	Children       []*CallChainInfo                  `json:"Children,omitempty" xml:"Children,omitempty" type:"Repeated"`
	HaveSpan       *bool                             `json:"HaveSpan,omitempty" xml:"HaveSpan,omitempty"`
	LogMap         map[string]map[string]interface{} `json:"LogMap,omitempty" xml:"LogMap,omitempty"`
	LogTime        *int64                            `json:"LogTime,omitempty" xml:"LogTime,omitempty"`
	ParentSpanId   *string                           `json:"ParentSpanId,omitempty" xml:"ParentSpanId,omitempty"`
	Pid            *string                           `json:"Pid,omitempty" xml:"Pid,omitempty"`
	RegionId       *string                           `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResultCode     *string                           `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	Rpc            *string                           `json:"Rpc,omitempty" xml:"Rpc,omitempty"`
	RpcId          *string                           `json:"RpcId,omitempty" xml:"RpcId,omitempty"`
	RpcType        *int64                            `json:"RpcType,omitempty" xml:"RpcType,omitempty"`
	ServerIp       *string                           `json:"ServerIp,omitempty" xml:"ServerIp,omitempty"`
	Span           *int64                            `json:"Span,omitempty" xml:"Span,omitempty"`
	SpanId         *string                           `json:"SpanId,omitempty" xml:"SpanId,omitempty"`
	TagMap         map[string]*string                `json:"TagMap,omitempty" xml:"TagMap,omitempty"`
	TraceId        *string                           `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s CallChainInfo) String() string {
	return tea.Prettify(s)
}

func (s CallChainInfo) GoString() string {
	return s.String()
}

func (s *CallChainInfo) SetAdditionalInfo(v string) *CallChainInfo {
	s.AdditionalInfo = &v
	return s
}

func (s *CallChainInfo) SetAppName(v string) *CallChainInfo {
	s.AppName = &v
	return s
}

func (s *CallChainInfo) SetAppType(v string) *CallChainInfo {
	s.AppType = &v
	return s
}

func (s *CallChainInfo) SetChildren(v []*CallChainInfo) *CallChainInfo {
	s.Children = v
	return s
}

func (s *CallChainInfo) SetHaveSpan(v bool) *CallChainInfo {
	s.HaveSpan = &v
	return s
}

func (s *CallChainInfo) SetLogMap(v map[string]map[string]interface{}) *CallChainInfo {
	s.LogMap = v
	return s
}

func (s *CallChainInfo) SetLogTime(v int64) *CallChainInfo {
	s.LogTime = &v
	return s
}

func (s *CallChainInfo) SetParentSpanId(v string) *CallChainInfo {
	s.ParentSpanId = &v
	return s
}

func (s *CallChainInfo) SetPid(v string) *CallChainInfo {
	s.Pid = &v
	return s
}

func (s *CallChainInfo) SetRegionId(v string) *CallChainInfo {
	s.RegionId = &v
	return s
}

func (s *CallChainInfo) SetResultCode(v string) *CallChainInfo {
	s.ResultCode = &v
	return s
}

func (s *CallChainInfo) SetRpc(v string) *CallChainInfo {
	s.Rpc = &v
	return s
}

func (s *CallChainInfo) SetRpcId(v string) *CallChainInfo {
	s.RpcId = &v
	return s
}

func (s *CallChainInfo) SetRpcType(v int64) *CallChainInfo {
	s.RpcType = &v
	return s
}

func (s *CallChainInfo) SetServerIp(v string) *CallChainInfo {
	s.ServerIp = &v
	return s
}

func (s *CallChainInfo) SetSpan(v int64) *CallChainInfo {
	s.Span = &v
	return s
}

func (s *CallChainInfo) SetSpanId(v string) *CallChainInfo {
	s.SpanId = &v
	return s
}

func (s *CallChainInfo) SetTagMap(v map[string]*string) *CallChainInfo {
	s.TagMap = v
	return s
}

func (s *CallChainInfo) SetTraceId(v string) *CallChainInfo {
	s.TraceId = &v
	return s
}

type GrafanaWorkspace struct {
	Commercial  *bool   `json:"commercial,omitempty" xml:"commercial,omitempty"`
	DeployType  *string `json:"deployType,omitempty" xml:"deployType,omitempty"`
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// example:
	//
	// 1652803200000
	EndTime *float32 `json:"endTime,omitempty" xml:"endTime,omitempty"`
	// example:
	//
	// 创建时间
	GmtCreate              *float32 `json:"gmtCreate,omitempty" xml:"gmtCreate,omitempty"`
	GrafanaVersion         *string  `json:"grafanaVersion,omitempty" xml:"grafanaVersion,omitempty"`
	GrafanaWorkspaceDomain *string  `json:"grafanaWorkspaceDomain,omitempty" xml:"grafanaWorkspaceDomain,omitempty"`
	// example:
	//
	// on
	GrafanaWorkspaceDomainStatus *string `json:"grafanaWorkspaceDomainStatus,omitempty" xml:"grafanaWorkspaceDomainStatus,omitempty"`
	// example:
	//
	// experts_edition/advanced_edition/standard
	GrafanaWorkspaceEdition *string `json:"grafanaWorkspaceEdition,omitempty" xml:"grafanaWorkspaceEdition,omitempty"`
	// example:
	//
	// g-thisisademo666
	GrafanaWorkspaceId *string `json:"grafanaWorkspaceId,omitempty" xml:"grafanaWorkspaceId,omitempty"`
	// example:
	//
	// 127.0.0.1:3000
	GrafanaWorkspaceIp   *string `json:"grafanaWorkspaceIp,omitempty" xml:"grafanaWorkspaceIp,omitempty"`
	GrafanaWorkspaceName *string `json:"grafanaWorkspaceName,omitempty" xml:"grafanaWorkspaceName,omitempty"`
	// example:
	//
	// 10
	MaxAccount           *string `json:"maxAccount,omitempty" xml:"maxAccount,omitempty"`
	NtmId                *string `json:"ntmId,omitempty" xml:"ntmId,omitempty"`
	PersonalDomain       *string `json:"personalDomain,omitempty" xml:"personalDomain,omitempty"`
	PersonalDomainPrefix *string `json:"personalDomainPrefix,omitempty" xml:"personalDomainPrefix,omitempty"`
	PrivateDomain        *string `json:"privateDomain,omitempty" xml:"privateDomain,omitempty"`
	PrivateIp            *string `json:"privateIp,omitempty" xml:"privateIp,omitempty"`
	// example:
	//
	// http/https
	Protocol *string `json:"protocol,omitempty" xml:"protocol,omitempty"`
	// example:
	//
	// cn-hangzhou
	RegionId        *string `json:"regionId,omitempty" xml:"regionId,omitempty"`
	ResourceGroupId *string `json:"resourceGroupId,omitempty" xml:"resourceGroupId,omitempty"`
	ShareSynced     *bool   `json:"shareSynced,omitempty" xml:"shareSynced,omitempty"`
	// example:
	//
	// 1.1.1.1
	SnatIp *string `json:"snatIp,omitempty" xml:"snatIp,omitempty"`
	// example:
	//
	// Starting/Running/Stop/DeleteSucceed
	Status         *string                 `json:"status,omitempty" xml:"status,omitempty"`
	Tags           []*GrafanaWorkspaceTags `json:"tags,omitempty" xml:"tags,omitempty" type:"Repeated"`
	UpgradeVersion []*string               `json:"upgradeVersion,omitempty" xml:"upgradeVersion,omitempty" type:"Repeated"`
	// example:
	//
	// 66666666
	UserId *string `json:"userId,omitempty" xml:"userId,omitempty"`
}

func (s GrafanaWorkspace) String() string {
	return tea.Prettify(s)
}

func (s GrafanaWorkspace) GoString() string {
	return s.String()
}

func (s *GrafanaWorkspace) SetCommercial(v bool) *GrafanaWorkspace {
	s.Commercial = &v
	return s
}

func (s *GrafanaWorkspace) SetDeployType(v string) *GrafanaWorkspace {
	s.DeployType = &v
	return s
}

func (s *GrafanaWorkspace) SetDescription(v string) *GrafanaWorkspace {
	s.Description = &v
	return s
}

func (s *GrafanaWorkspace) SetEndTime(v float32) *GrafanaWorkspace {
	s.EndTime = &v
	return s
}

func (s *GrafanaWorkspace) SetGmtCreate(v float32) *GrafanaWorkspace {
	s.GmtCreate = &v
	return s
}

func (s *GrafanaWorkspace) SetGrafanaVersion(v string) *GrafanaWorkspace {
	s.GrafanaVersion = &v
	return s
}

func (s *GrafanaWorkspace) SetGrafanaWorkspaceDomain(v string) *GrafanaWorkspace {
	s.GrafanaWorkspaceDomain = &v
	return s
}

func (s *GrafanaWorkspace) SetGrafanaWorkspaceDomainStatus(v string) *GrafanaWorkspace {
	s.GrafanaWorkspaceDomainStatus = &v
	return s
}

func (s *GrafanaWorkspace) SetGrafanaWorkspaceEdition(v string) *GrafanaWorkspace {
	s.GrafanaWorkspaceEdition = &v
	return s
}

func (s *GrafanaWorkspace) SetGrafanaWorkspaceId(v string) *GrafanaWorkspace {
	s.GrafanaWorkspaceId = &v
	return s
}

func (s *GrafanaWorkspace) SetGrafanaWorkspaceIp(v string) *GrafanaWorkspace {
	s.GrafanaWorkspaceIp = &v
	return s
}

func (s *GrafanaWorkspace) SetGrafanaWorkspaceName(v string) *GrafanaWorkspace {
	s.GrafanaWorkspaceName = &v
	return s
}

func (s *GrafanaWorkspace) SetMaxAccount(v string) *GrafanaWorkspace {
	s.MaxAccount = &v
	return s
}

func (s *GrafanaWorkspace) SetNtmId(v string) *GrafanaWorkspace {
	s.NtmId = &v
	return s
}

func (s *GrafanaWorkspace) SetPersonalDomain(v string) *GrafanaWorkspace {
	s.PersonalDomain = &v
	return s
}

func (s *GrafanaWorkspace) SetPersonalDomainPrefix(v string) *GrafanaWorkspace {
	s.PersonalDomainPrefix = &v
	return s
}

func (s *GrafanaWorkspace) SetPrivateDomain(v string) *GrafanaWorkspace {
	s.PrivateDomain = &v
	return s
}

func (s *GrafanaWorkspace) SetPrivateIp(v string) *GrafanaWorkspace {
	s.PrivateIp = &v
	return s
}

func (s *GrafanaWorkspace) SetProtocol(v string) *GrafanaWorkspace {
	s.Protocol = &v
	return s
}

func (s *GrafanaWorkspace) SetRegionId(v string) *GrafanaWorkspace {
	s.RegionId = &v
	return s
}

func (s *GrafanaWorkspace) SetResourceGroupId(v string) *GrafanaWorkspace {
	s.ResourceGroupId = &v
	return s
}

func (s *GrafanaWorkspace) SetShareSynced(v bool) *GrafanaWorkspace {
	s.ShareSynced = &v
	return s
}

func (s *GrafanaWorkspace) SetSnatIp(v string) *GrafanaWorkspace {
	s.SnatIp = &v
	return s
}

func (s *GrafanaWorkspace) SetStatus(v string) *GrafanaWorkspace {
	s.Status = &v
	return s
}

func (s *GrafanaWorkspace) SetTags(v []*GrafanaWorkspaceTags) *GrafanaWorkspace {
	s.Tags = v
	return s
}

func (s *GrafanaWorkspace) SetUpgradeVersion(v []*string) *GrafanaWorkspace {
	s.UpgradeVersion = v
	return s
}

func (s *GrafanaWorkspace) SetUserId(v string) *GrafanaWorkspace {
	s.UserId = &v
	return s
}

type GrafanaWorkspaceTags struct {
	Key   *string `json:"key,omitempty" xml:"key,omitempty"`
	Value *string `json:"value,omitempty" xml:"value,omitempty"`
}

func (s GrafanaWorkspaceTags) String() string {
	return tea.Prettify(s)
}

func (s GrafanaWorkspaceTags) GoString() string {
	return s.String()
}

func (s *GrafanaWorkspaceTags) SetKey(v string) *GrafanaWorkspaceTags {
	s.Key = &v
	return s
}

func (s *GrafanaWorkspaceTags) SetValue(v string) *GrafanaWorkspaceTags {
	s.Value = &v
	return s
}

type GrafanaWorkspaceAccount struct {
	// example:
	//
	// 1
	AccountId    *int64  `json:"accountId,omitempty" xml:"accountId,omitempty"`
	AccountNotes *string `json:"accountNotes,omitempty" xml:"accountNotes,omitempty"`
	// example:
	//
	// 131243781293
	AliyunUid *string `json:"aliyunUid,omitempty" xml:"aliyunUid,omitempty"`
	// example:
	//
	// test
	AliyunUserName *string `json:"aliyunUserName,omitempty" xml:"aliyunUserName,omitempty"`
	// example:
	//
	// 创建时间
	GmtCreate *float32                   `json:"gmtCreate,omitempty" xml:"gmtCreate,omitempty"`
	Orgs      []*GrafanaWorkspaceUserOrg `json:"orgs,omitempty" xml:"orgs,omitempty" type:"Repeated"`
	// example:
	//
	// aliyun
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
}

func (s GrafanaWorkspaceAccount) String() string {
	return tea.Prettify(s)
}

func (s GrafanaWorkspaceAccount) GoString() string {
	return s.String()
}

func (s *GrafanaWorkspaceAccount) SetAccountId(v int64) *GrafanaWorkspaceAccount {
	s.AccountId = &v
	return s
}

func (s *GrafanaWorkspaceAccount) SetAccountNotes(v string) *GrafanaWorkspaceAccount {
	s.AccountNotes = &v
	return s
}

func (s *GrafanaWorkspaceAccount) SetAliyunUid(v string) *GrafanaWorkspaceAccount {
	s.AliyunUid = &v
	return s
}

func (s *GrafanaWorkspaceAccount) SetAliyunUserName(v string) *GrafanaWorkspaceAccount {
	s.AliyunUserName = &v
	return s
}

func (s *GrafanaWorkspaceAccount) SetGmtCreate(v float32) *GrafanaWorkspaceAccount {
	s.GmtCreate = &v
	return s
}

func (s *GrafanaWorkspaceAccount) SetOrgs(v []*GrafanaWorkspaceUserOrg) *GrafanaWorkspaceAccount {
	s.Orgs = v
	return s
}

func (s *GrafanaWorkspaceAccount) SetType(v string) *GrafanaWorkspaceAccount {
	s.Type = &v
	return s
}

type GrafanaWorkspaceAlertNotification struct {
	// example:
	//
	// 1
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// true
	IsArms *bool `json:"isArms,omitempty" xml:"isArms,omitempty"`
	// example:
	//
	// true
	IsDefault *bool `json:"isDefault,omitempty" xml:"isDefault,omitempty"`
	// example:
	//
	// test
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// example:
	//
	// true
	SendReminder *bool `json:"sendReminder,omitempty" xml:"sendReminder,omitempty"`
	// example:
	//
	// {}
	Settings *string `json:"settings,omitempty" xml:"settings,omitempty"`
	// example:
	//
	// Email
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
	// example:
	//
	// Xfdf******
	Uid *string `json:"uid,omitempty" xml:"uid,omitempty"`
}

func (s GrafanaWorkspaceAlertNotification) String() string {
	return tea.Prettify(s)
}

func (s GrafanaWorkspaceAlertNotification) GoString() string {
	return s.String()
}

func (s *GrafanaWorkspaceAlertNotification) SetId(v int64) *GrafanaWorkspaceAlertNotification {
	s.Id = &v
	return s
}

func (s *GrafanaWorkspaceAlertNotification) SetIsArms(v bool) *GrafanaWorkspaceAlertNotification {
	s.IsArms = &v
	return s
}

func (s *GrafanaWorkspaceAlertNotification) SetIsDefault(v bool) *GrafanaWorkspaceAlertNotification {
	s.IsDefault = &v
	return s
}

func (s *GrafanaWorkspaceAlertNotification) SetName(v string) *GrafanaWorkspaceAlertNotification {
	s.Name = &v
	return s
}

func (s *GrafanaWorkspaceAlertNotification) SetSendReminder(v bool) *GrafanaWorkspaceAlertNotification {
	s.SendReminder = &v
	return s
}

func (s *GrafanaWorkspaceAlertNotification) SetSettings(v string) *GrafanaWorkspaceAlertNotification {
	s.Settings = &v
	return s
}

func (s *GrafanaWorkspaceAlertNotification) SetType(v string) *GrafanaWorkspaceAlertNotification {
	s.Type = &v
	return s
}

func (s *GrafanaWorkspaceAlertNotification) SetUid(v string) *GrafanaWorkspaceAlertNotification {
	s.Uid = &v
	return s
}

type GrafanaWorkspaceArmsAlertConfig struct {
	// example:
	//
	// true
	ArmsAlertsEnable     *string `json:"armsAlertsEnable,omitempty" xml:"armsAlertsEnable,omitempty"`
	ArmsAlertsWebhookUrl *string `json:"armsAlertsWebhookUrl,omitempty" xml:"armsAlertsWebhookUrl,omitempty"`
}

func (s GrafanaWorkspaceArmsAlertConfig) String() string {
	return tea.Prettify(s)
}

func (s GrafanaWorkspaceArmsAlertConfig) GoString() string {
	return s.String()
}

func (s *GrafanaWorkspaceArmsAlertConfig) SetArmsAlertsEnable(v string) *GrafanaWorkspaceArmsAlertConfig {
	s.ArmsAlertsEnable = &v
	return s
}

func (s *GrafanaWorkspaceArmsAlertConfig) SetArmsAlertsWebhookUrl(v string) *GrafanaWorkspaceArmsAlertConfig {
	s.ArmsAlertsWebhookUrl = &v
	return s
}

type GrafanaWorkspaceCustomDomain struct {
	// example:
	//
	// protocol为http时无需填写;
	Cert *string `json:"cert,omitempty" xml:"cert,omitempty"`
	// example:
	//
	// 1688627798017
	Date *int64 `json:"date,omitempty" xml:"date,omitempty"`
	// example:
	//
	// mydomain.com
	Domain *string `json:"domain,omitempty" xml:"domain,omitempty"`
	// example:
	//
	// grafana-cn-***********
	GrafanaWorkspaceId *string `json:"grafanaWorkspaceId,omitempty" xml:"grafanaWorkspaceId,omitempty"`
	// example:
	//
	// 1
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// protocol为http时无需填写;
	Key *string `json:"key,omitempty" xml:"key,omitempty"`
	// example:
	//
	// true
	PrivateZone *string `json:"privateZone,omitempty" xml:"privateZone,omitempty"`
	// example:
	//
	// https
	Protocol *string `json:"protocol,omitempty" xml:"protocol,omitempty"`
	// example:
	//
	// CreateSucceed
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// example:
	//
	// /
	Uri *string `json:"uri,omitempty" xml:"uri,omitempty"`
}

func (s GrafanaWorkspaceCustomDomain) String() string {
	return tea.Prettify(s)
}

func (s GrafanaWorkspaceCustomDomain) GoString() string {
	return s.String()
}

func (s *GrafanaWorkspaceCustomDomain) SetCert(v string) *GrafanaWorkspaceCustomDomain {
	s.Cert = &v
	return s
}

func (s *GrafanaWorkspaceCustomDomain) SetDate(v int64) *GrafanaWorkspaceCustomDomain {
	s.Date = &v
	return s
}

func (s *GrafanaWorkspaceCustomDomain) SetDomain(v string) *GrafanaWorkspaceCustomDomain {
	s.Domain = &v
	return s
}

func (s *GrafanaWorkspaceCustomDomain) SetGrafanaWorkspaceId(v string) *GrafanaWorkspaceCustomDomain {
	s.GrafanaWorkspaceId = &v
	return s
}

func (s *GrafanaWorkspaceCustomDomain) SetId(v int64) *GrafanaWorkspaceCustomDomain {
	s.Id = &v
	return s
}

func (s *GrafanaWorkspaceCustomDomain) SetKey(v string) *GrafanaWorkspaceCustomDomain {
	s.Key = &v
	return s
}

func (s *GrafanaWorkspaceCustomDomain) SetPrivateZone(v string) *GrafanaWorkspaceCustomDomain {
	s.PrivateZone = &v
	return s
}

func (s *GrafanaWorkspaceCustomDomain) SetProtocol(v string) *GrafanaWorkspaceCustomDomain {
	s.Protocol = &v
	return s
}

func (s *GrafanaWorkspaceCustomDomain) SetStatus(v string) *GrafanaWorkspaceCustomDomain {
	s.Status = &v
	return s
}

func (s *GrafanaWorkspaceCustomDomain) SetUri(v string) *GrafanaWorkspaceCustomDomain {
	s.Uri = &v
	return s
}

type GrafanaWorkspaceDashboardReport struct {
	// example:
	//
	// 1680861352600
	GmtCreate *int64 `json:"gmtCreate,omitempty" xml:"gmtCreate,omitempty"`
	// example:
	//
	// grafana-cn-**********
	GrafanaWorkspaceId *string `json:"grafanaWorkspaceId,omitempty" xml:"grafanaWorkspaceId,omitempty"`
	// example:
	//
	// 1
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// 1680861352600
	LastSendTime *int64  `json:"lastSendTime,omitempty" xml:"lastSendTime,omitempty"`
	Msg          *string `json:"msg,omitempty" xml:"msg,omitempty"`
	Name         *string `json:"name,omitempty" xml:"name,omitempty"`
	// example:
	//
	// ******@aliyun.com
	ReportChannelTarget *string `json:"reportChannelTarget,omitempty" xml:"reportChannelTarget,omitempty"`
	// example:
	//
	// Email
	ReportChannelType *string `json:"reportChannelType,omitempty" xml:"reportChannelType,omitempty"`
	// example:
	//
	// Grid,Simple
	ReportStyle *string `json:"reportStyle,omitempty" xml:"reportStyle,omitempty"`
	// example:
	//
	// Image
	ReportType *string `json:"reportType,omitempty" xml:"reportType,omitempty"`
	Status     *string `json:"status,omitempty" xml:"status,omitempty"`
	// example:
	//
	// 1
	TriggerDay *string `json:"triggerDay,omitempty" xml:"triggerDay,omitempty"`
	// example:
	//
	// 12:25
	TriggerTime *string `json:"triggerTime,omitempty" xml:"triggerTime,omitempty"`
	// example:
	//
	// ByWeek
	TriggerType *string `json:"triggerType,omitempty" xml:"triggerType,omitempty"`
	// example:
	//
	// Dashboard URL
	Url    *string `json:"url,omitempty" xml:"url,omitempty"`
	UserId *string `json:"userId,omitempty" xml:"userId,omitempty"`
}

func (s GrafanaWorkspaceDashboardReport) String() string {
	return tea.Prettify(s)
}

func (s GrafanaWorkspaceDashboardReport) GoString() string {
	return s.String()
}

func (s *GrafanaWorkspaceDashboardReport) SetGmtCreate(v int64) *GrafanaWorkspaceDashboardReport {
	s.GmtCreate = &v
	return s
}

func (s *GrafanaWorkspaceDashboardReport) SetGrafanaWorkspaceId(v string) *GrafanaWorkspaceDashboardReport {
	s.GrafanaWorkspaceId = &v
	return s
}

func (s *GrafanaWorkspaceDashboardReport) SetId(v int64) *GrafanaWorkspaceDashboardReport {
	s.Id = &v
	return s
}

func (s *GrafanaWorkspaceDashboardReport) SetLastSendTime(v int64) *GrafanaWorkspaceDashboardReport {
	s.LastSendTime = &v
	return s
}

func (s *GrafanaWorkspaceDashboardReport) SetMsg(v string) *GrafanaWorkspaceDashboardReport {
	s.Msg = &v
	return s
}

func (s *GrafanaWorkspaceDashboardReport) SetName(v string) *GrafanaWorkspaceDashboardReport {
	s.Name = &v
	return s
}

func (s *GrafanaWorkspaceDashboardReport) SetReportChannelTarget(v string) *GrafanaWorkspaceDashboardReport {
	s.ReportChannelTarget = &v
	return s
}

func (s *GrafanaWorkspaceDashboardReport) SetReportChannelType(v string) *GrafanaWorkspaceDashboardReport {
	s.ReportChannelType = &v
	return s
}

func (s *GrafanaWorkspaceDashboardReport) SetReportStyle(v string) *GrafanaWorkspaceDashboardReport {
	s.ReportStyle = &v
	return s
}

func (s *GrafanaWorkspaceDashboardReport) SetReportType(v string) *GrafanaWorkspaceDashboardReport {
	s.ReportType = &v
	return s
}

func (s *GrafanaWorkspaceDashboardReport) SetStatus(v string) *GrafanaWorkspaceDashboardReport {
	s.Status = &v
	return s
}

func (s *GrafanaWorkspaceDashboardReport) SetTriggerDay(v string) *GrafanaWorkspaceDashboardReport {
	s.TriggerDay = &v
	return s
}

func (s *GrafanaWorkspaceDashboardReport) SetTriggerTime(v string) *GrafanaWorkspaceDashboardReport {
	s.TriggerTime = &v
	return s
}

func (s *GrafanaWorkspaceDashboardReport) SetTriggerType(v string) *GrafanaWorkspaceDashboardReport {
	s.TriggerType = &v
	return s
}

func (s *GrafanaWorkspaceDashboardReport) SetUrl(v string) *GrafanaWorkspaceDashboardReport {
	s.Url = &v
	return s
}

func (s *GrafanaWorkspaceDashboardReport) SetUserId(v string) *GrafanaWorkspaceDashboardReport {
	s.UserId = &v
	return s
}

type GrafanaWorkspaceDashboardSync struct {
	// example:
	//
	// testTitle
	DashboardTitle *string `json:"dashboardTitle,omitempty" xml:"dashboardTitle,omitempty"`
	// example:
	//
	// https://g.console.aliyun.com/d/1098370038733503-14960236-422-3/ack-pro-apiserver
	DashboardURL *string `json:"dashboardURL,omitempty" xml:"dashboardURL,omitempty"`
	// example:
	//
	// xxxdvxsea
	DashboardUid *string `json:"dashboardUid,omitempty" xml:"dashboardUid,omitempty"`
	// example:
	//
	// 123456
	FolderId *string `json:"folderId,omitempty" xml:"folderId,omitempty"`
	// example:
	//
	// test
	FolderTitle *string `json:"folderTitle,omitempty" xml:"folderTitle,omitempty"`
	// example:
	//
	// https://g.console.aliyun.com/d/1098370038733503-14960236-422-3/ack-pro-apiserver
	FolderURL *string `json:"folderURL,omitempty" xml:"folderURL,omitempty"`
	// example:
	//
	// vxeupqn
	FolderUid *string `json:"folderUid,omitempty" xml:"folderUid,omitempty"`
	// example:
	//
	// 1
	OrgId *string `json:"orgId,omitempty" xml:"orgId,omitempty"`
	// example:
	//
	// user123
	OrgName *string `json:"orgName,omitempty" xml:"orgName,omitempty"`
	// example:
	//
	// normal
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
}

func (s GrafanaWorkspaceDashboardSync) String() string {
	return tea.Prettify(s)
}

func (s GrafanaWorkspaceDashboardSync) GoString() string {
	return s.String()
}

func (s *GrafanaWorkspaceDashboardSync) SetDashboardTitle(v string) *GrafanaWorkspaceDashboardSync {
	s.DashboardTitle = &v
	return s
}

func (s *GrafanaWorkspaceDashboardSync) SetDashboardURL(v string) *GrafanaWorkspaceDashboardSync {
	s.DashboardURL = &v
	return s
}

func (s *GrafanaWorkspaceDashboardSync) SetDashboardUid(v string) *GrafanaWorkspaceDashboardSync {
	s.DashboardUid = &v
	return s
}

func (s *GrafanaWorkspaceDashboardSync) SetFolderId(v string) *GrafanaWorkspaceDashboardSync {
	s.FolderId = &v
	return s
}

func (s *GrafanaWorkspaceDashboardSync) SetFolderTitle(v string) *GrafanaWorkspaceDashboardSync {
	s.FolderTitle = &v
	return s
}

func (s *GrafanaWorkspaceDashboardSync) SetFolderURL(v string) *GrafanaWorkspaceDashboardSync {
	s.FolderURL = &v
	return s
}

func (s *GrafanaWorkspaceDashboardSync) SetFolderUid(v string) *GrafanaWorkspaceDashboardSync {
	s.FolderUid = &v
	return s
}

func (s *GrafanaWorkspaceDashboardSync) SetOrgId(v string) *GrafanaWorkspaceDashboardSync {
	s.OrgId = &v
	return s
}

func (s *GrafanaWorkspaceDashboardSync) SetOrgName(v string) *GrafanaWorkspaceDashboardSync {
	s.OrgName = &v
	return s
}

func (s *GrafanaWorkspaceDashboardSync) SetType(v string) *GrafanaWorkspaceDashboardSync {
	s.Type = &v
	return s
}

type GrafanaWorkspaceDataBackup struct {
	// example:
	//
	// 1680861352600
	GmtCreate *int64 `json:"gmtCreate,omitempty" xml:"gmtCreate,omitempty"`
	// example:
	//
	// 1680861352600
	GmtModified *int64 `json:"gmtModified,omitempty" xml:"gmtModified,omitempty"`
	// example:
	//
	// grafana-cn-**********
	GrafanaWorkspaceId *string `json:"grafanaWorkspaceId,omitempty" xml:"grafanaWorkspaceId,omitempty"`
	// example:
	//
	// 1
	Id            *int64  `json:"id,omitempty" xml:"id,omitempty"`
	Msg           *string `json:"msg,omitempty" xml:"msg,omitempty"`
	ProcessName   *string `json:"processName,omitempty" xml:"processName,omitempty"`
	ProcessStatus *string `json:"processStatus,omitempty" xml:"processStatus,omitempty"`
	// example:
	//
	// User
	SubType *string `json:"subType,omitempty" xml:"subType,omitempty"`
	UserId  *string `json:"userId,omitempty" xml:"userId,omitempty"`
}

func (s GrafanaWorkspaceDataBackup) String() string {
	return tea.Prettify(s)
}

func (s GrafanaWorkspaceDataBackup) GoString() string {
	return s.String()
}

func (s *GrafanaWorkspaceDataBackup) SetGmtCreate(v int64) *GrafanaWorkspaceDataBackup {
	s.GmtCreate = &v
	return s
}

func (s *GrafanaWorkspaceDataBackup) SetGmtModified(v int64) *GrafanaWorkspaceDataBackup {
	s.GmtModified = &v
	return s
}

func (s *GrafanaWorkspaceDataBackup) SetGrafanaWorkspaceId(v string) *GrafanaWorkspaceDataBackup {
	s.GrafanaWorkspaceId = &v
	return s
}

func (s *GrafanaWorkspaceDataBackup) SetId(v int64) *GrafanaWorkspaceDataBackup {
	s.Id = &v
	return s
}

func (s *GrafanaWorkspaceDataBackup) SetMsg(v string) *GrafanaWorkspaceDataBackup {
	s.Msg = &v
	return s
}

func (s *GrafanaWorkspaceDataBackup) SetProcessName(v string) *GrafanaWorkspaceDataBackup {
	s.ProcessName = &v
	return s
}

func (s *GrafanaWorkspaceDataBackup) SetProcessStatus(v string) *GrafanaWorkspaceDataBackup {
	s.ProcessStatus = &v
	return s
}

func (s *GrafanaWorkspaceDataBackup) SetSubType(v string) *GrafanaWorkspaceDataBackup {
	s.SubType = &v
	return s
}

func (s *GrafanaWorkspaceDataBackup) SetUserId(v string) *GrafanaWorkspaceDataBackup {
	s.UserId = &v
	return s
}

type GrafanaWorkspaceIniBackup struct {
	Ext *string `json:"ext,omitempty" xml:"ext,omitempty"`
	// example:
	//
	// 1680861352600
	GmtCreate *int64 `json:"gmtCreate,omitempty" xml:"gmtCreate,omitempty"`
	// example:
	//
	// 1680861352600
	GmtModified *int64 `json:"gmtModified,omitempty" xml:"gmtModified,omitempty"`
	// example:
	//
	// grafana-cn-**********
	GrafanaWorkspaceId *string `json:"grafanaWorkspaceId,omitempty" xml:"grafanaWorkspaceId,omitempty"`
	// example:
	//
	// 1
	Id            *int64  `json:"id,omitempty" xml:"id,omitempty"`
	Msg           *string `json:"msg,omitempty" xml:"msg,omitempty"`
	ProcessName   *string `json:"processName,omitempty" xml:"processName,omitempty"`
	ProcessStatus *string `json:"processStatus,omitempty" xml:"processStatus,omitempty"`
	// example:
	//
	// User
	SubType *string `json:"subType,omitempty" xml:"subType,omitempty"`
	UserId  *string `json:"userId,omitempty" xml:"userId,omitempty"`
}

func (s GrafanaWorkspaceIniBackup) String() string {
	return tea.Prettify(s)
}

func (s GrafanaWorkspaceIniBackup) GoString() string {
	return s.String()
}

func (s *GrafanaWorkspaceIniBackup) SetExt(v string) *GrafanaWorkspaceIniBackup {
	s.Ext = &v
	return s
}

func (s *GrafanaWorkspaceIniBackup) SetGmtCreate(v int64) *GrafanaWorkspaceIniBackup {
	s.GmtCreate = &v
	return s
}

func (s *GrafanaWorkspaceIniBackup) SetGmtModified(v int64) *GrafanaWorkspaceIniBackup {
	s.GmtModified = &v
	return s
}

func (s *GrafanaWorkspaceIniBackup) SetGrafanaWorkspaceId(v string) *GrafanaWorkspaceIniBackup {
	s.GrafanaWorkspaceId = &v
	return s
}

func (s *GrafanaWorkspaceIniBackup) SetId(v int64) *GrafanaWorkspaceIniBackup {
	s.Id = &v
	return s
}

func (s *GrafanaWorkspaceIniBackup) SetMsg(v string) *GrafanaWorkspaceIniBackup {
	s.Msg = &v
	return s
}

func (s *GrafanaWorkspaceIniBackup) SetProcessName(v string) *GrafanaWorkspaceIniBackup {
	s.ProcessName = &v
	return s
}

func (s *GrafanaWorkspaceIniBackup) SetProcessStatus(v string) *GrafanaWorkspaceIniBackup {
	s.ProcessStatus = &v
	return s
}

func (s *GrafanaWorkspaceIniBackup) SetSubType(v string) *GrafanaWorkspaceIniBackup {
	s.SubType = &v
	return s
}

func (s *GrafanaWorkspaceIniBackup) SetUserId(v string) *GrafanaWorkspaceIniBackup {
	s.UserId = &v
	return s
}

type GrafanaWorkspaceIniProperty struct {
	DefaultValue *string `json:"defaultValue,omitempty" xml:"defaultValue,omitempty"`
	Description  *string `json:"description,omitempty" xml:"description,omitempty"`
	Example      *string `json:"example,omitempty" xml:"example,omitempty"`
	Key          *string `json:"key,omitempty" xml:"key,omitempty"`
	Secret       *bool   `json:"secret,omitempty" xml:"secret,omitempty"`
	Value        *string `json:"value,omitempty" xml:"value,omitempty"`
}

func (s GrafanaWorkspaceIniProperty) String() string {
	return tea.Prettify(s)
}

func (s GrafanaWorkspaceIniProperty) GoString() string {
	return s.String()
}

func (s *GrafanaWorkspaceIniProperty) SetDefaultValue(v string) *GrafanaWorkspaceIniProperty {
	s.DefaultValue = &v
	return s
}

func (s *GrafanaWorkspaceIniProperty) SetDescription(v string) *GrafanaWorkspaceIniProperty {
	s.Description = &v
	return s
}

func (s *GrafanaWorkspaceIniProperty) SetExample(v string) *GrafanaWorkspaceIniProperty {
	s.Example = &v
	return s
}

func (s *GrafanaWorkspaceIniProperty) SetKey(v string) *GrafanaWorkspaceIniProperty {
	s.Key = &v
	return s
}

func (s *GrafanaWorkspaceIniProperty) SetSecret(v bool) *GrafanaWorkspaceIniProperty {
	s.Secret = &v
	return s
}

func (s *GrafanaWorkspaceIniProperty) SetValue(v string) *GrafanaWorkspaceIniProperty {
	s.Value = &v
	return s
}

type GrafanaWorkspaceIniSection struct {
	Propertys []*GrafanaWorkspaceIniProperty `json:"propertys,omitempty" xml:"propertys,omitempty" type:"Repeated"`
	Section   *string                        `json:"section,omitempty" xml:"section,omitempty"`
}

func (s GrafanaWorkspaceIniSection) String() string {
	return tea.Prettify(s)
}

func (s GrafanaWorkspaceIniSection) GoString() string {
	return s.String()
}

func (s *GrafanaWorkspaceIniSection) SetPropertys(v []*GrafanaWorkspaceIniProperty) *GrafanaWorkspaceIniSection {
	s.Propertys = v
	return s
}

func (s *GrafanaWorkspaceIniSection) SetSection(v string) *GrafanaWorkspaceIniSection {
	s.Section = &v
	return s
}

type GrafanaWorkspaceIntegration struct {
	DatasourceAmount *int64                                `json:"datasourceAmount,omitempty" xml:"datasourceAmount,omitempty"`
	IntegrationId    *string                               `json:"integrationId,omitempty" xml:"integrationId,omitempty"`
	IntegrationName  *string                               `json:"integrationName,omitempty" xml:"integrationName,omitempty"`
	Previews         []*GrafanaWorkspaceIntegrationPreview `json:"previews,omitempty" xml:"previews,omitempty" type:"Repeated"`
	Status           *string                               `json:"status,omitempty" xml:"status,omitempty"`
	SupportRegions   []*string                             `json:"supportRegions,omitempty" xml:"supportRegions,omitempty" type:"Repeated"`
}

func (s GrafanaWorkspaceIntegration) String() string {
	return tea.Prettify(s)
}

func (s GrafanaWorkspaceIntegration) GoString() string {
	return s.String()
}

func (s *GrafanaWorkspaceIntegration) SetDatasourceAmount(v int64) *GrafanaWorkspaceIntegration {
	s.DatasourceAmount = &v
	return s
}

func (s *GrafanaWorkspaceIntegration) SetIntegrationId(v string) *GrafanaWorkspaceIntegration {
	s.IntegrationId = &v
	return s
}

func (s *GrafanaWorkspaceIntegration) SetIntegrationName(v string) *GrafanaWorkspaceIntegration {
	s.IntegrationName = &v
	return s
}

func (s *GrafanaWorkspaceIntegration) SetPreviews(v []*GrafanaWorkspaceIntegrationPreview) *GrafanaWorkspaceIntegration {
	s.Previews = v
	return s
}

func (s *GrafanaWorkspaceIntegration) SetStatus(v string) *GrafanaWorkspaceIntegration {
	s.Status = &v
	return s
}

func (s *GrafanaWorkspaceIntegration) SetSupportRegions(v []*string) *GrafanaWorkspaceIntegration {
	s.SupportRegions = v
	return s
}

type GrafanaWorkspaceIntegrationDataSource struct {
	ClusterType    *string            `json:"clusterType,omitempty" xml:"clusterType,omitempty"`
	DatasourceId   *string            `json:"datasourceId,omitempty" xml:"datasourceId,omitempty"`
	DatasourceName *string            `json:"datasourceName,omitempty" xml:"datasourceName,omitempty"`
	DatasourceUrl  *string            `json:"datasourceUrl,omitempty" xml:"datasourceUrl,omitempty"`
	Description    *string            `json:"description,omitempty" xml:"description,omitempty"`
	ExploreUrl     *string            `json:"exploreUrl,omitempty" xml:"exploreUrl,omitempty"`
	Extra          map[string]*string `json:"extra,omitempty" xml:"extra,omitempty"`
	FolderUrl      *string            `json:"folderUrl,omitempty" xml:"folderUrl,omitempty"`
	RegionId       *string            `json:"regionId,omitempty" xml:"regionId,omitempty"`
	Status         *string            `json:"status,omitempty" xml:"status,omitempty"`
	Type           *string            `json:"type,omitempty" xml:"type,omitempty"`
}

func (s GrafanaWorkspaceIntegrationDataSource) String() string {
	return tea.Prettify(s)
}

func (s GrafanaWorkspaceIntegrationDataSource) GoString() string {
	return s.String()
}

func (s *GrafanaWorkspaceIntegrationDataSource) SetClusterType(v string) *GrafanaWorkspaceIntegrationDataSource {
	s.ClusterType = &v
	return s
}

func (s *GrafanaWorkspaceIntegrationDataSource) SetDatasourceId(v string) *GrafanaWorkspaceIntegrationDataSource {
	s.DatasourceId = &v
	return s
}

func (s *GrafanaWorkspaceIntegrationDataSource) SetDatasourceName(v string) *GrafanaWorkspaceIntegrationDataSource {
	s.DatasourceName = &v
	return s
}

func (s *GrafanaWorkspaceIntegrationDataSource) SetDatasourceUrl(v string) *GrafanaWorkspaceIntegrationDataSource {
	s.DatasourceUrl = &v
	return s
}

func (s *GrafanaWorkspaceIntegrationDataSource) SetDescription(v string) *GrafanaWorkspaceIntegrationDataSource {
	s.Description = &v
	return s
}

func (s *GrafanaWorkspaceIntegrationDataSource) SetExploreUrl(v string) *GrafanaWorkspaceIntegrationDataSource {
	s.ExploreUrl = &v
	return s
}

func (s *GrafanaWorkspaceIntegrationDataSource) SetExtra(v map[string]*string) *GrafanaWorkspaceIntegrationDataSource {
	s.Extra = v
	return s
}

func (s *GrafanaWorkspaceIntegrationDataSource) SetFolderUrl(v string) *GrafanaWorkspaceIntegrationDataSource {
	s.FolderUrl = &v
	return s
}

func (s *GrafanaWorkspaceIntegrationDataSource) SetRegionId(v string) *GrafanaWorkspaceIntegrationDataSource {
	s.RegionId = &v
	return s
}

func (s *GrafanaWorkspaceIntegrationDataSource) SetStatus(v string) *GrafanaWorkspaceIntegrationDataSource {
	s.Status = &v
	return s
}

func (s *GrafanaWorkspaceIntegrationDataSource) SetType(v string) *GrafanaWorkspaceIntegrationDataSource {
	s.Type = &v
	return s
}

type GrafanaWorkspaceIntegrationDetail struct {
	DataSources   []*GrafanaWorkspaceIntegrationDataSource `json:"dataSources,omitempty" xml:"dataSources,omitempty" type:"Repeated"`
	IntegrationId *string                                  `json:"integrationId,omitempty" xml:"integrationId,omitempty"`
	Status        *string                                  `json:"status,omitempty" xml:"status,omitempty"`
}

func (s GrafanaWorkspaceIntegrationDetail) String() string {
	return tea.Prettify(s)
}

func (s GrafanaWorkspaceIntegrationDetail) GoString() string {
	return s.String()
}

func (s *GrafanaWorkspaceIntegrationDetail) SetDataSources(v []*GrafanaWorkspaceIntegrationDataSource) *GrafanaWorkspaceIntegrationDetail {
	s.DataSources = v
	return s
}

func (s *GrafanaWorkspaceIntegrationDetail) SetIntegrationId(v string) *GrafanaWorkspaceIntegrationDetail {
	s.IntegrationId = &v
	return s
}

func (s *GrafanaWorkspaceIntegrationDetail) SetStatus(v string) *GrafanaWorkspaceIntegrationDetail {
	s.Status = &v
	return s
}

type GrafanaWorkspaceIntegrationPreview struct {
	Id        *string `json:"id,omitempty" xml:"id,omitempty"`
	Image     *string `json:"image,omitempty" xml:"image,omitempty"`
	Name      *string `json:"name,omitempty" xml:"name,omitempty"`
	Thumbnail *string `json:"thumbnail,omitempty" xml:"thumbnail,omitempty"`
}

func (s GrafanaWorkspaceIntegrationPreview) String() string {
	return tea.Prettify(s)
}

func (s GrafanaWorkspaceIntegrationPreview) GoString() string {
	return s.String()
}

func (s *GrafanaWorkspaceIntegrationPreview) SetId(v string) *GrafanaWorkspaceIntegrationPreview {
	s.Id = &v
	return s
}

func (s *GrafanaWorkspaceIntegrationPreview) SetImage(v string) *GrafanaWorkspaceIntegrationPreview {
	s.Image = &v
	return s
}

func (s *GrafanaWorkspaceIntegrationPreview) SetName(v string) *GrafanaWorkspaceIntegrationPreview {
	s.Name = &v
	return s
}

func (s *GrafanaWorkspaceIntegrationPreview) SetThumbnail(v string) *GrafanaWorkspaceIntegrationPreview {
	s.Thumbnail = &v
	return s
}

type GrafanaWorkspaceMoveProcess struct {
	// example:
	//
	// 1680861352600
	GmtCreate *int64 `json:"gmtCreate,omitempty" xml:"gmtCreate,omitempty"`
	// example:
	//
	// 1680861352600
	GmtModified *int64 `json:"gmtModified,omitempty" xml:"gmtModified,omitempty"`
	// example:
	//
	// grafana-cn-**********
	GrafanaWorkspaceId *string `json:"grafanaWorkspaceId,omitempty" xml:"grafanaWorkspaceId,omitempty"`
	// example:
	//
	// 1
	Id            *int64  `json:"id,omitempty" xml:"id,omitempty"`
	Msg           *string `json:"msg,omitempty" xml:"msg,omitempty"`
	ProcessName   *string `json:"processName,omitempty" xml:"processName,omitempty"`
	ProcessStatus *string `json:"processStatus,omitempty" xml:"processStatus,omitempty"`
	// example:
	//
	// User
	SubType *string `json:"subType,omitempty" xml:"subType,omitempty"`
	UserId  *string `json:"userId,omitempty" xml:"userId,omitempty"`
}

func (s GrafanaWorkspaceMoveProcess) String() string {
	return tea.Prettify(s)
}

func (s GrafanaWorkspaceMoveProcess) GoString() string {
	return s.String()
}

func (s *GrafanaWorkspaceMoveProcess) SetGmtCreate(v int64) *GrafanaWorkspaceMoveProcess {
	s.GmtCreate = &v
	return s
}

func (s *GrafanaWorkspaceMoveProcess) SetGmtModified(v int64) *GrafanaWorkspaceMoveProcess {
	s.GmtModified = &v
	return s
}

func (s *GrafanaWorkspaceMoveProcess) SetGrafanaWorkspaceId(v string) *GrafanaWorkspaceMoveProcess {
	s.GrafanaWorkspaceId = &v
	return s
}

func (s *GrafanaWorkspaceMoveProcess) SetId(v int64) *GrafanaWorkspaceMoveProcess {
	s.Id = &v
	return s
}

func (s *GrafanaWorkspaceMoveProcess) SetMsg(v string) *GrafanaWorkspaceMoveProcess {
	s.Msg = &v
	return s
}

func (s *GrafanaWorkspaceMoveProcess) SetProcessName(v string) *GrafanaWorkspaceMoveProcess {
	s.ProcessName = &v
	return s
}

func (s *GrafanaWorkspaceMoveProcess) SetProcessStatus(v string) *GrafanaWorkspaceMoveProcess {
	s.ProcessStatus = &v
	return s
}

func (s *GrafanaWorkspaceMoveProcess) SetSubType(v string) *GrafanaWorkspaceMoveProcess {
	s.SubType = &v
	return s
}

func (s *GrafanaWorkspaceMoveProcess) SetUserId(v string) *GrafanaWorkspaceMoveProcess {
	s.UserId = &v
	return s
}

type GrafanaWorkspaceNews struct {
	Date        *int64  `json:"date,omitempty" xml:"date,omitempty"`
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	Image       *string `json:"image,omitempty" xml:"image,omitempty"`
	Link        *string `json:"link,omitempty" xml:"link,omitempty"`
	Title       *string `json:"title,omitempty" xml:"title,omitempty"`
}

func (s GrafanaWorkspaceNews) String() string {
	return tea.Prettify(s)
}

func (s GrafanaWorkspaceNews) GoString() string {
	return s.String()
}

func (s *GrafanaWorkspaceNews) SetDate(v int64) *GrafanaWorkspaceNews {
	s.Date = &v
	return s
}

func (s *GrafanaWorkspaceNews) SetDescription(v string) *GrafanaWorkspaceNews {
	s.Description = &v
	return s
}

func (s *GrafanaWorkspaceNews) SetImage(v string) *GrafanaWorkspaceNews {
	s.Image = &v
	return s
}

func (s *GrafanaWorkspaceNews) SetLink(v string) *GrafanaWorkspaceNews {
	s.Link = &v
	return s
}

func (s *GrafanaWorkspaceNews) SetTitle(v string) *GrafanaWorkspaceNews {
	s.Title = &v
	return s
}

type GrafanaWorkspaceOperateLog struct {
	Date               *float32 `json:"date,omitempty" xml:"date,omitempty"`
	Detail             *string  `json:"detail,omitempty" xml:"detail,omitempty"`
	GrafanaWorkspaceId *string  `json:"grafanaWorkspaceId,omitempty" xml:"grafanaWorkspaceId,omitempty"`
	Id                 *int64   `json:"id,omitempty" xml:"id,omitempty"`
	OperatorId         *string  `json:"operatorId,omitempty" xml:"operatorId,omitempty"`
}

func (s GrafanaWorkspaceOperateLog) String() string {
	return tea.Prettify(s)
}

func (s GrafanaWorkspaceOperateLog) GoString() string {
	return s.String()
}

func (s *GrafanaWorkspaceOperateLog) SetDate(v float32) *GrafanaWorkspaceOperateLog {
	s.Date = &v
	return s
}

func (s *GrafanaWorkspaceOperateLog) SetDetail(v string) *GrafanaWorkspaceOperateLog {
	s.Detail = &v
	return s
}

func (s *GrafanaWorkspaceOperateLog) SetGrafanaWorkspaceId(v string) *GrafanaWorkspaceOperateLog {
	s.GrafanaWorkspaceId = &v
	return s
}

func (s *GrafanaWorkspaceOperateLog) SetId(v int64) *GrafanaWorkspaceOperateLog {
	s.Id = &v
	return s
}

func (s *GrafanaWorkspaceOperateLog) SetOperatorId(v string) *GrafanaWorkspaceOperateLog {
	s.OperatorId = &v
	return s
}

type GrafanaWorkspaceOrg struct {
	// example:
	//
	// 1
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// main org
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
}

func (s GrafanaWorkspaceOrg) String() string {
	return tea.Prettify(s)
}

func (s GrafanaWorkspaceOrg) GoString() string {
	return s.String()
}

func (s *GrafanaWorkspaceOrg) SetId(v int64) *GrafanaWorkspaceOrg {
	s.Id = &v
	return s
}

func (s *GrafanaWorkspaceOrg) SetName(v string) *GrafanaWorkspaceOrg {
	s.Name = &v
	return s
}

type GrafanaWorkspaceTrans struct {
	ApiUrl             *string                        `json:"apiUrl,omitempty" xml:"apiUrl,omitempty"`
	AuthType           *string                        `json:"authType,omitempty" xml:"authType,omitempty"`
	GmtCreate          *float32                       `json:"gmtCreate,omitempty" xml:"gmtCreate,omitempty"`
	GmtModified        *float32                       `json:"gmtModified,omitempty" xml:"gmtModified,omitempty"`
	GrafanaWorkspaceId *string                        `json:"grafanaWorkspaceId,omitempty" xml:"grafanaWorkspaceId,omitempty"`
	Id                 *int64                         `json:"id,omitempty" xml:"id,omitempty"`
	Msg                *string                        `json:"msg,omitempty" xml:"msg,omitempty"`
	ProcessStatus      *string                        `json:"processStatus,omitempty" xml:"processStatus,omitempty"`
	TransDetails       []*GrafanaWorkspaceTransDetail `json:"transDetails,omitempty" xml:"transDetails,omitempty" type:"Repeated"`
	UserId             *string                        `json:"userId,omitempty" xml:"userId,omitempty"`
}

func (s GrafanaWorkspaceTrans) String() string {
	return tea.Prettify(s)
}

func (s GrafanaWorkspaceTrans) GoString() string {
	return s.String()
}

func (s *GrafanaWorkspaceTrans) SetApiUrl(v string) *GrafanaWorkspaceTrans {
	s.ApiUrl = &v
	return s
}

func (s *GrafanaWorkspaceTrans) SetAuthType(v string) *GrafanaWorkspaceTrans {
	s.AuthType = &v
	return s
}

func (s *GrafanaWorkspaceTrans) SetGmtCreate(v float32) *GrafanaWorkspaceTrans {
	s.GmtCreate = &v
	return s
}

func (s *GrafanaWorkspaceTrans) SetGmtModified(v float32) *GrafanaWorkspaceTrans {
	s.GmtModified = &v
	return s
}

func (s *GrafanaWorkspaceTrans) SetGrafanaWorkspaceId(v string) *GrafanaWorkspaceTrans {
	s.GrafanaWorkspaceId = &v
	return s
}

func (s *GrafanaWorkspaceTrans) SetId(v int64) *GrafanaWorkspaceTrans {
	s.Id = &v
	return s
}

func (s *GrafanaWorkspaceTrans) SetMsg(v string) *GrafanaWorkspaceTrans {
	s.Msg = &v
	return s
}

func (s *GrafanaWorkspaceTrans) SetProcessStatus(v string) *GrafanaWorkspaceTrans {
	s.ProcessStatus = &v
	return s
}

func (s *GrafanaWorkspaceTrans) SetTransDetails(v []*GrafanaWorkspaceTransDetail) *GrafanaWorkspaceTrans {
	s.TransDetails = v
	return s
}

func (s *GrafanaWorkspaceTrans) SetUserId(v string) *GrafanaWorkspaceTrans {
	s.UserId = &v
	return s
}

type GrafanaWorkspaceTransDetail struct {
	DashboardAmount  *int32  `json:"dashboardAmount,omitempty" xml:"dashboardAmount,omitempty"`
	DataSourceAmount *int32  `json:"dataSourceAmount,omitempty" xml:"dataSourceAmount,omitempty"`
	Original         *int64  `json:"original,omitempty" xml:"original,omitempty"`
	OriginalName     *string `json:"originalName,omitempty" xml:"originalName,omitempty"`
	Target           *int64  `json:"target,omitempty" xml:"target,omitempty"`
	TargetName       *string `json:"targetName,omitempty" xml:"targetName,omitempty"`
}

func (s GrafanaWorkspaceTransDetail) String() string {
	return tea.Prettify(s)
}

func (s GrafanaWorkspaceTransDetail) GoString() string {
	return s.String()
}

func (s *GrafanaWorkspaceTransDetail) SetDashboardAmount(v int32) *GrafanaWorkspaceTransDetail {
	s.DashboardAmount = &v
	return s
}

func (s *GrafanaWorkspaceTransDetail) SetDataSourceAmount(v int32) *GrafanaWorkspaceTransDetail {
	s.DataSourceAmount = &v
	return s
}

func (s *GrafanaWorkspaceTransDetail) SetOriginal(v int64) *GrafanaWorkspaceTransDetail {
	s.Original = &v
	return s
}

func (s *GrafanaWorkspaceTransDetail) SetOriginalName(v string) *GrafanaWorkspaceTransDetail {
	s.OriginalName = &v
	return s
}

func (s *GrafanaWorkspaceTransDetail) SetTarget(v int64) *GrafanaWorkspaceTransDetail {
	s.Target = &v
	return s
}

func (s *GrafanaWorkspaceTransDetail) SetTargetName(v string) *GrafanaWorkspaceTransDetail {
	s.TargetName = &v
	return s
}

type GrafanaWorkspaceUserCert struct {
	// example:
	//
	// 8096753
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// cert-7700050 [grafana.tongtong-max.cn]
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
}

func (s GrafanaWorkspaceUserCert) String() string {
	return tea.Prettify(s)
}

func (s GrafanaWorkspaceUserCert) GoString() string {
	return s.String()
}

func (s *GrafanaWorkspaceUserCert) SetId(v string) *GrafanaWorkspaceUserCert {
	s.Id = &v
	return s
}

func (s *GrafanaWorkspaceUserCert) SetName(v string) *GrafanaWorkspaceUserCert {
	s.Name = &v
	return s
}

type GrafanaWorkspaceUserOrg struct {
	// example:
	//
	// 1
	OrgId *int64 `json:"orgId,omitempty" xml:"orgId,omitempty"`
	// example:
	//
	// main org
	OrgName *string `json:"orgName,omitempty" xml:"orgName,omitempty"`
	// example:
	//
	// admin
	Role *string `json:"role,omitempty" xml:"role,omitempty"`
}

func (s GrafanaWorkspaceUserOrg) String() string {
	return tea.Prettify(s)
}

func (s GrafanaWorkspaceUserOrg) GoString() string {
	return s.String()
}

func (s *GrafanaWorkspaceUserOrg) SetOrgId(v int64) *GrafanaWorkspaceUserOrg {
	s.OrgId = &v
	return s
}

func (s *GrafanaWorkspaceUserOrg) SetOrgName(v string) *GrafanaWorkspaceUserOrg {
	s.OrgName = &v
	return s
}

func (s *GrafanaWorkspaceUserOrg) SetRole(v string) *GrafanaWorkspaceUserOrg {
	s.Role = &v
	return s
}

type GrafanaWorkspaceVpcConfig struct {
	// example:
	//
	// fc、ansm
	FcConfig *string `json:"fcConfig,omitempty" xml:"fcConfig,omitempty"`
	// example:
	//
	// 1
	Id         *int64  `json:"id,omitempty" xml:"id,omitempty"`
	InstallMsg *string `json:"installMsg,omitempty" xml:"installMsg,omitempty"`
	// example:
	//
	// CreateSucceed
	InstallStatus *string `json:"installStatus,omitempty" xml:"installStatus,omitempty"`
	// example:
	//
	// 北京VPC-A通道
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// example:
	//
	// cn-beijing
	RegionId *string `json:"regionId,omitempty" xml:"regionId,omitempty"`
	// example:
	//
	// sg-6we94uvybteyc******
	SecurityGroupId *string `json:"securityGroupId,omitempty" xml:"securityGroupId,omitempty"`
	// example:
	//
	// 10983***********
	UserId *string `json:"userId,omitempty" xml:"userId,omitempty"`
	// example:
	//
	// vsw-6we3**********
	VSwitchId *string `json:"vSwitchId,omitempty" xml:"vSwitchId,omitempty"`
	// example:
	//
	// vpc-6wehr2x**********
	VpcId *string `json:"vpcId,omitempty" xml:"vpcId,omitempty"`
}

func (s GrafanaWorkspaceVpcConfig) String() string {
	return tea.Prettify(s)
}

func (s GrafanaWorkspaceVpcConfig) GoString() string {
	return s.String()
}

func (s *GrafanaWorkspaceVpcConfig) SetFcConfig(v string) *GrafanaWorkspaceVpcConfig {
	s.FcConfig = &v
	return s
}

func (s *GrafanaWorkspaceVpcConfig) SetId(v int64) *GrafanaWorkspaceVpcConfig {
	s.Id = &v
	return s
}

func (s *GrafanaWorkspaceVpcConfig) SetInstallMsg(v string) *GrafanaWorkspaceVpcConfig {
	s.InstallMsg = &v
	return s
}

func (s *GrafanaWorkspaceVpcConfig) SetInstallStatus(v string) *GrafanaWorkspaceVpcConfig {
	s.InstallStatus = &v
	return s
}

func (s *GrafanaWorkspaceVpcConfig) SetName(v string) *GrafanaWorkspaceVpcConfig {
	s.Name = &v
	return s
}

func (s *GrafanaWorkspaceVpcConfig) SetRegionId(v string) *GrafanaWorkspaceVpcConfig {
	s.RegionId = &v
	return s
}

func (s *GrafanaWorkspaceVpcConfig) SetSecurityGroupId(v string) *GrafanaWorkspaceVpcConfig {
	s.SecurityGroupId = &v
	return s
}

func (s *GrafanaWorkspaceVpcConfig) SetUserId(v string) *GrafanaWorkspaceVpcConfig {
	s.UserId = &v
	return s
}

func (s *GrafanaWorkspaceVpcConfig) SetVSwitchId(v string) *GrafanaWorkspaceVpcConfig {
	s.VSwitchId = &v
	return s
}

func (s *GrafanaWorkspaceVpcConfig) SetVpcId(v string) *GrafanaWorkspaceVpcConfig {
	s.VpcId = &v
	return s
}

type GrafanaWorkspaceVpcRegion struct {
	// example:
	//
	// cn-beijing
	RegionId *string `json:"regionId,omitempty" xml:"regionId,omitempty"`
	// example:
	//
	// 华北2（北京）
	RegionName *string `json:"regionName,omitempty" xml:"regionName,omitempty"`
}

func (s GrafanaWorkspaceVpcRegion) String() string {
	return tea.Prettify(s)
}

func (s GrafanaWorkspaceVpcRegion) GoString() string {
	return s.String()
}

func (s *GrafanaWorkspaceVpcRegion) SetRegionId(v string) *GrafanaWorkspaceVpcRegion {
	s.RegionId = &v
	return s
}

func (s *GrafanaWorkspaceVpcRegion) SetRegionName(v string) *GrafanaWorkspaceVpcRegion {
	s.RegionName = &v
	return s
}

type GrafanaWorkspaceVpcRegionDetail struct {
	// example:
	//
	// fc、ansm
	FcConfig *string `json:"fcConfig,omitempty" xml:"fcConfig,omitempty"`
	// example:
	//
	// 配置ID
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// Uninitialized
	InstallStatus *string `json:"installStatus,omitempty" xml:"installStatus,omitempty"`
	// example:
	//
	// vpc-abc*****
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// example:
	//
	// cn-beijing
	RegionId         *string   `json:"regionId,omitempty" xml:"regionId,omitempty"`
	SecurityGroupId  *string   `json:"securityGroupId,omitempty" xml:"securityGroupId,omitempty"`
	SecurityGroupIds []*string `json:"securityGroupIds,omitempty" xml:"securityGroupIds,omitempty" type:"Repeated"`
	// example:
	//
	// 10988**********
	UserId     *string   `json:"userId,omitempty" xml:"userId,omitempty"`
	VSwitchId  *string   `json:"vSwitchId,omitempty" xml:"vSwitchId,omitempty"`
	VSwitchIds []*string `json:"vSwitchIds,omitempty" xml:"vSwitchIds,omitempty" type:"Repeated"`
	// example:
	//
	// vpc-2ze4siu98**********
	VpcId *string `json:"vpcId,omitempty" xml:"vpcId,omitempty"`
}

func (s GrafanaWorkspaceVpcRegionDetail) String() string {
	return tea.Prettify(s)
}

func (s GrafanaWorkspaceVpcRegionDetail) GoString() string {
	return s.String()
}

func (s *GrafanaWorkspaceVpcRegionDetail) SetFcConfig(v string) *GrafanaWorkspaceVpcRegionDetail {
	s.FcConfig = &v
	return s
}

func (s *GrafanaWorkspaceVpcRegionDetail) SetId(v int64) *GrafanaWorkspaceVpcRegionDetail {
	s.Id = &v
	return s
}

func (s *GrafanaWorkspaceVpcRegionDetail) SetInstallStatus(v string) *GrafanaWorkspaceVpcRegionDetail {
	s.InstallStatus = &v
	return s
}

func (s *GrafanaWorkspaceVpcRegionDetail) SetName(v string) *GrafanaWorkspaceVpcRegionDetail {
	s.Name = &v
	return s
}

func (s *GrafanaWorkspaceVpcRegionDetail) SetRegionId(v string) *GrafanaWorkspaceVpcRegionDetail {
	s.RegionId = &v
	return s
}

func (s *GrafanaWorkspaceVpcRegionDetail) SetSecurityGroupId(v string) *GrafanaWorkspaceVpcRegionDetail {
	s.SecurityGroupId = &v
	return s
}

func (s *GrafanaWorkspaceVpcRegionDetail) SetSecurityGroupIds(v []*string) *GrafanaWorkspaceVpcRegionDetail {
	s.SecurityGroupIds = v
	return s
}

func (s *GrafanaWorkspaceVpcRegionDetail) SetUserId(v string) *GrafanaWorkspaceVpcRegionDetail {
	s.UserId = &v
	return s
}

func (s *GrafanaWorkspaceVpcRegionDetail) SetVSwitchId(v string) *GrafanaWorkspaceVpcRegionDetail {
	s.VSwitchId = &v
	return s
}

func (s *GrafanaWorkspaceVpcRegionDetail) SetVSwitchIds(v []*string) *GrafanaWorkspaceVpcRegionDetail {
	s.VSwitchIds = v
	return s
}

func (s *GrafanaWorkspaceVpcRegionDetail) SetVpcId(v string) *GrafanaWorkspaceVpcRegionDetail {
	s.VpcId = &v
	return s
}

type QueryDataResponse struct {
	Results *string `json:"results,omitempty" xml:"results,omitempty"`
}

func (s QueryDataResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDataResponse) GoString() string {
	return s.String()
}

func (s *QueryDataResponse) SetResults(v string) *QueryDataResponse {
	s.Results = &v
	return s
}

type AddAliClusterIdsToPrometheusGlobalViewRequest struct {
	// The IDs of clusters. Separate multiple IDs with commas (,).
	//
	// This parameter is required.
	//
	// example:
	//
	// cd1d55bef19904324a20ed0ebb86caa5c,c5b48729918ab4745a24482ac29d0973a, c00a94896641449098bf24931e4166003, cd174485c09384060ba542bc1be1185a4
	ClusterIds *string `json:"ClusterIds,omitempty" xml:"ClusterIds,omitempty"`
	// The ID of the global aggregation instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// global-v2-cn-1478326682034601-vss8pd0i
	GlobalViewClusterId *string `json:"GlobalViewClusterId,omitempty" xml:"GlobalViewClusterId,omitempty"`
	// The name of the global aggregation instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// zyGlobalView
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	// The region ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s AddAliClusterIdsToPrometheusGlobalViewRequest) String() string {
	return tea.Prettify(s)
}

func (s AddAliClusterIdsToPrometheusGlobalViewRequest) GoString() string {
	return s.String()
}

func (s *AddAliClusterIdsToPrometheusGlobalViewRequest) SetClusterIds(v string) *AddAliClusterIdsToPrometheusGlobalViewRequest {
	s.ClusterIds = &v
	return s
}

func (s *AddAliClusterIdsToPrometheusGlobalViewRequest) SetGlobalViewClusterId(v string) *AddAliClusterIdsToPrometheusGlobalViewRequest {
	s.GlobalViewClusterId = &v
	return s
}

func (s *AddAliClusterIdsToPrometheusGlobalViewRequest) SetGroupName(v string) *AddAliClusterIdsToPrometheusGlobalViewRequest {
	s.GroupName = &v
	return s
}

func (s *AddAliClusterIdsToPrometheusGlobalViewRequest) SetRegionId(v string) *AddAliClusterIdsToPrometheusGlobalViewRequest {
	s.RegionId = &v
	return s
}

type AddAliClusterIdsToPrometheusGlobalViewResponseBody struct {
	// Status code. 200 is success, other status codes are exceptions.
	//
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The information about the array object.
	Data *AddAliClusterIdsToPrometheusGlobalViewResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// Returns a hint message for the result.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID. You can use the ID to query logs and troubleshoot issues.
	//
	// example:
	//
	// F7781D4A-2818-41E7-B7BB-79D809E9****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddAliClusterIdsToPrometheusGlobalViewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddAliClusterIdsToPrometheusGlobalViewResponseBody) GoString() string {
	return s.String()
}

func (s *AddAliClusterIdsToPrometheusGlobalViewResponseBody) SetCode(v int32) *AddAliClusterIdsToPrometheusGlobalViewResponseBody {
	s.Code = &v
	return s
}

func (s *AddAliClusterIdsToPrometheusGlobalViewResponseBody) SetData(v *AddAliClusterIdsToPrometheusGlobalViewResponseBodyData) *AddAliClusterIdsToPrometheusGlobalViewResponseBody {
	s.Data = v
	return s
}

func (s *AddAliClusterIdsToPrometheusGlobalViewResponseBody) SetMessage(v string) *AddAliClusterIdsToPrometheusGlobalViewResponseBody {
	s.Message = &v
	return s
}

func (s *AddAliClusterIdsToPrometheusGlobalViewResponseBody) SetRequestId(v string) *AddAliClusterIdsToPrometheusGlobalViewResponseBody {
	s.RequestId = &v
	return s
}

type AddAliClusterIdsToPrometheusGlobalViewResponseBodyData struct {
	// The Info-level information.
	//
	// example:
	//
	// {regionId: the region where the aggregation instance resides. globalViewClusterId: the ID of the aggregation instance. failedClusterIds: the ID of the cluster that failed to be added. A cluster may fail to be added because the specified cluster ID is invalid or the cluster is added across continents.}
	Info *string `json:"Info,omitempty" xml:"Info,omitempty"`
	// The additional information.
	//
	// example:
	//
	// OK
	Msg *string `json:"Msg,omitempty" xml:"Msg,omitempty"`
	// Indicates whether the request was successful.
	//
	// 	- `true`: The request was successful.
	//
	// 	- `false`: The request failed.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s AddAliClusterIdsToPrometheusGlobalViewResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s AddAliClusterIdsToPrometheusGlobalViewResponseBodyData) GoString() string {
	return s.String()
}

func (s *AddAliClusterIdsToPrometheusGlobalViewResponseBodyData) SetInfo(v string) *AddAliClusterIdsToPrometheusGlobalViewResponseBodyData {
	s.Info = &v
	return s
}

func (s *AddAliClusterIdsToPrometheusGlobalViewResponseBodyData) SetMsg(v string) *AddAliClusterIdsToPrometheusGlobalViewResponseBodyData {
	s.Msg = &v
	return s
}

func (s *AddAliClusterIdsToPrometheusGlobalViewResponseBodyData) SetSuccess(v bool) *AddAliClusterIdsToPrometheusGlobalViewResponseBodyData {
	s.Success = &v
	return s
}

type AddAliClusterIdsToPrometheusGlobalViewResponse struct {
	Headers    map[string]*string                                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AddAliClusterIdsToPrometheusGlobalViewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AddAliClusterIdsToPrometheusGlobalViewResponse) String() string {
	return tea.Prettify(s)
}

func (s AddAliClusterIdsToPrometheusGlobalViewResponse) GoString() string {
	return s.String()
}

func (s *AddAliClusterIdsToPrometheusGlobalViewResponse) SetHeaders(v map[string]*string) *AddAliClusterIdsToPrometheusGlobalViewResponse {
	s.Headers = v
	return s
}

func (s *AddAliClusterIdsToPrometheusGlobalViewResponse) SetStatusCode(v int32) *AddAliClusterIdsToPrometheusGlobalViewResponse {
	s.StatusCode = &v
	return s
}

func (s *AddAliClusterIdsToPrometheusGlobalViewResponse) SetBody(v *AddAliClusterIdsToPrometheusGlobalViewResponseBody) *AddAliClusterIdsToPrometheusGlobalViewResponse {
	s.Body = v
	return s
}

type AddGrafanaRequest struct {
	// The ID of the Container Service for Kubernetes (ACK) cluster.
	//
	// This parameter is required.
	//
	// example:
	//
	// cc7a37ee31aea4ed1a059eff8034b****
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	// The abbreviation of the software that is supported by Application Real-Time Monitoring Service (ARMS). Valid values (case-insensitive): `ASM`, `IoT`, and `Flink`.
	//
	// This parameter is required.
	//
	// example:
	//
	// asm
	Integration *string `json:"Integration,omitempty" xml:"Integration,omitempty"`
	// The ID of the region.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s AddGrafanaRequest) String() string {
	return tea.Prettify(s)
}

func (s AddGrafanaRequest) GoString() string {
	return s.String()
}

func (s *AddGrafanaRequest) SetClusterId(v string) *AddGrafanaRequest {
	s.ClusterId = &v
	return s
}

func (s *AddGrafanaRequest) SetIntegration(v string) *AddGrafanaRequest {
	s.Integration = &v
	return s
}

func (s *AddGrafanaRequest) SetRegionId(v string) *AddGrafanaRequest {
	s.RegionId = &v
	return s
}

type AddGrafanaResponseBody struct {
	// Indicates whether the call was successful.
	//
	// example:
	//
	// success
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 1A9C645C-C83F-4C9D-8CCB-29BEC9E1****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddGrafanaResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddGrafanaResponseBody) GoString() string {
	return s.String()
}

func (s *AddGrafanaResponseBody) SetData(v string) *AddGrafanaResponseBody {
	s.Data = &v
	return s
}

func (s *AddGrafanaResponseBody) SetRequestId(v string) *AddGrafanaResponseBody {
	s.RequestId = &v
	return s
}

type AddGrafanaResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AddGrafanaResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AddGrafanaResponse) String() string {
	return tea.Prettify(s)
}

func (s AddGrafanaResponse) GoString() string {
	return s.String()
}

func (s *AddGrafanaResponse) SetHeaders(v map[string]*string) *AddGrafanaResponse {
	s.Headers = v
	return s
}

func (s *AddGrafanaResponse) SetStatusCode(v int32) *AddGrafanaResponse {
	s.StatusCode = &v
	return s
}

func (s *AddGrafanaResponse) SetBody(v *AddGrafanaResponseBody) *AddGrafanaResponse {
	s.Body = v
	return s
}

type AddIntegrationRequest struct {
	// The ID of an Alibaba Cloud Container Service for Kubernetes cluster.
	//
	// This parameter is required.
	//
	// example:
	//
	// cc7a37ee31aea4ed1a059eff8034b****
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	// The software abbreviation that is supported by ARMS. Valid values (case-insensitive): `ASM`, `IoT`, and `Flink`.
	//
	// This parameter is required.
	//
	// example:
	//
	// asm
	Integration *string `json:"Integration,omitempty" xml:"Integration,omitempty"`
	// The region ID of the instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s AddIntegrationRequest) String() string {
	return tea.Prettify(s)
}

func (s AddIntegrationRequest) GoString() string {
	return s.String()
}

func (s *AddIntegrationRequest) SetClusterId(v string) *AddIntegrationRequest {
	s.ClusterId = &v
	return s
}

func (s *AddIntegrationRequest) SetIntegration(v string) *AddIntegrationRequest {
	s.Integration = &v
	return s
}

func (s *AddIntegrationRequest) SetRegionId(v string) *AddIntegrationRequest {
	s.RegionId = &v
	return s
}

type AddIntegrationResponseBody struct {
	// 状态码。200为成功，其他状态码为异常。
	//
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// Indicates whether the integration was successful.
	//
	// example:
	//
	// success
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// 返回结果的提示信息。
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 1A9C645C-C83F-4C9D-8CCB-29BEC9E1****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddIntegrationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddIntegrationResponseBody) GoString() string {
	return s.String()
}

func (s *AddIntegrationResponseBody) SetCode(v int32) *AddIntegrationResponseBody {
	s.Code = &v
	return s
}

func (s *AddIntegrationResponseBody) SetData(v string) *AddIntegrationResponseBody {
	s.Data = &v
	return s
}

func (s *AddIntegrationResponseBody) SetMessage(v string) *AddIntegrationResponseBody {
	s.Message = &v
	return s
}

func (s *AddIntegrationResponseBody) SetRequestId(v string) *AddIntegrationResponseBody {
	s.RequestId = &v
	return s
}

type AddIntegrationResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AddIntegrationResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AddIntegrationResponse) String() string {
	return tea.Prettify(s)
}

func (s AddIntegrationResponse) GoString() string {
	return s.String()
}

func (s *AddIntegrationResponse) SetHeaders(v map[string]*string) *AddIntegrationResponse {
	s.Headers = v
	return s
}

func (s *AddIntegrationResponse) SetStatusCode(v int32) *AddIntegrationResponse {
	s.StatusCode = &v
	return s
}

func (s *AddIntegrationResponse) SetBody(v *AddIntegrationResponseBody) *AddIntegrationResponse {
	s.Body = v
	return s
}

type AddPrometheusGlobalViewRequest struct {
	// The queried global aggregation instances. The value is a JSON string.
	//
	// This parameter is required.
	//
	// example:
	//
	// [         {             "sourceName": "Data source name- ArmsPrometheus No.1",             "sourceType":"AlibabaPrometheus",             "userId":"UserID",             "clusterId":"ClusterId",         },         {             "sourceName": "Data source name - MetrcStore No.2",             "sourceType":"MetricStore",             "dataSource":"MetricStore remote read address",             "extras":{                 "username":"BasicAuthUsername",                 "password":"BasicAuthPassword"             }         },         {             "sourceName": "Custom ",             "sourceType":"CustomPrometheus",             "dataSource":"Build your own Prometheus data source remoteread address",             "extras":{                 "username":"BasicAuthUsername",                 "password":"BasicAuthPassword"             }         },         {           	"sourceName": "Other one ",             "sourceType":"Others",             "dataSource":"Other data sources such as Tencent remoteread address",             "headers":{                 "AnyHeaderToFill":"Headers to be populated"             },             "extras":{                 "username":"BasicAuthUsername",                 "password":"BasicAuthPassword"             }         }   // ....... more addre ]
	Clusters *string `json:"Clusters,omitempty" xml:"Clusters,omitempty"`
	// The name of the aggregation instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// zyGlobalView
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	// The region ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The resource group ID.
	//
	// example:
	//
	// rg-aek2eq4pecazwfy
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	// The list of tags.
	Tag []*AddPrometheusGlobalViewRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s AddPrometheusGlobalViewRequest) String() string {
	return tea.Prettify(s)
}

func (s AddPrometheusGlobalViewRequest) GoString() string {
	return s.String()
}

func (s *AddPrometheusGlobalViewRequest) SetClusters(v string) *AddPrometheusGlobalViewRequest {
	s.Clusters = &v
	return s
}

func (s *AddPrometheusGlobalViewRequest) SetGroupName(v string) *AddPrometheusGlobalViewRequest {
	s.GroupName = &v
	return s
}

func (s *AddPrometheusGlobalViewRequest) SetRegionId(v string) *AddPrometheusGlobalViewRequest {
	s.RegionId = &v
	return s
}

func (s *AddPrometheusGlobalViewRequest) SetResourceGroupId(v string) *AddPrometheusGlobalViewRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *AddPrometheusGlobalViewRequest) SetTag(v []*AddPrometheusGlobalViewRequestTag) *AddPrometheusGlobalViewRequest {
	s.Tag = v
	return s
}

type AddPrometheusGlobalViewRequestTag struct {
	// The tag key.
	//
	// example:
	//
	// http.status_code
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The tag value.
	//
	// example:
	//
	// 200
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s AddPrometheusGlobalViewRequestTag) String() string {
	return tea.Prettify(s)
}

func (s AddPrometheusGlobalViewRequestTag) GoString() string {
	return s.String()
}

func (s *AddPrometheusGlobalViewRequestTag) SetKey(v string) *AddPrometheusGlobalViewRequestTag {
	s.Key = &v
	return s
}

func (s *AddPrometheusGlobalViewRequestTag) SetValue(v string) *AddPrometheusGlobalViewRequestTag {
	s.Value = &v
	return s
}

type AddPrometheusGlobalViewResponseBody struct {
	// 状态码。说明 200表示成功。
	//
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The information about the array object.
	Data *AddPrometheusGlobalViewResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// 返回结果的提示信息。
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID. You can use the ID to query logs and troubleshoot issues.
	//
	// example:
	//
	// 34ED024E-9E31-434A-9E4E-D9D15C3****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddPrometheusGlobalViewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddPrometheusGlobalViewResponseBody) GoString() string {
	return s.String()
}

func (s *AddPrometheusGlobalViewResponseBody) SetCode(v int32) *AddPrometheusGlobalViewResponseBody {
	s.Code = &v
	return s
}

func (s *AddPrometheusGlobalViewResponseBody) SetData(v *AddPrometheusGlobalViewResponseBodyData) *AddPrometheusGlobalViewResponseBody {
	s.Data = v
	return s
}

func (s *AddPrometheusGlobalViewResponseBody) SetMessage(v string) *AddPrometheusGlobalViewResponseBody {
	s.Message = &v
	return s
}

func (s *AddPrometheusGlobalViewResponseBody) SetRequestId(v string) *AddPrometheusGlobalViewResponseBody {
	s.RequestId = &v
	return s
}

type AddPrometheusGlobalViewResponseBodyData struct {
	// The Info-level information.
	Info *AddPrometheusGlobalViewResponseBodyDataInfo `json:"Info,omitempty" xml:"Info,omitempty" type:"Struct"`
	// The additional information.
	//
	// example:
	//
	// OK
	Msg *string `json:"Msg,omitempty" xml:"Msg,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- `true`
	//
	// 	- `false`
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s AddPrometheusGlobalViewResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s AddPrometheusGlobalViewResponseBodyData) GoString() string {
	return s.String()
}

func (s *AddPrometheusGlobalViewResponseBodyData) SetInfo(v *AddPrometheusGlobalViewResponseBodyDataInfo) *AddPrometheusGlobalViewResponseBodyData {
	s.Info = v
	return s
}

func (s *AddPrometheusGlobalViewResponseBodyData) SetMsg(v string) *AddPrometheusGlobalViewResponseBodyData {
	s.Msg = &v
	return s
}

func (s *AddPrometheusGlobalViewResponseBodyData) SetSuccess(v bool) *AddPrometheusGlobalViewResponseBodyData {
	s.Success = &v
	return s
}

type AddPrometheusGlobalViewResponseBodyDataInfo struct {
	// The list of instances that failed to be added.
	//
	// example:
	//
	// [{"sourceName": "Data source name- ArmsPrometheus","sourceType":"AlibabaPrometheus","userId":"UserID","clusterId":"ClusterId",}]
	FailedInstances *string `json:"FailedInstances,omitempty" xml:"FailedInstances,omitempty"`
	// The ID of the global aggregation instance.
	//
	// example:
	//
	// global-v2-cn-1483223059272121-jmjjfznz
	GlobalViewClusterId *string `json:"GlobalViewClusterId,omitempty" xml:"GlobalViewClusterId,omitempty"`
	// The region ID.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s AddPrometheusGlobalViewResponseBodyDataInfo) String() string {
	return tea.Prettify(s)
}

func (s AddPrometheusGlobalViewResponseBodyDataInfo) GoString() string {
	return s.String()
}

func (s *AddPrometheusGlobalViewResponseBodyDataInfo) SetFailedInstances(v string) *AddPrometheusGlobalViewResponseBodyDataInfo {
	s.FailedInstances = &v
	return s
}

func (s *AddPrometheusGlobalViewResponseBodyDataInfo) SetGlobalViewClusterId(v string) *AddPrometheusGlobalViewResponseBodyDataInfo {
	s.GlobalViewClusterId = &v
	return s
}

func (s *AddPrometheusGlobalViewResponseBodyDataInfo) SetRegionId(v string) *AddPrometheusGlobalViewResponseBodyDataInfo {
	s.RegionId = &v
	return s
}

type AddPrometheusGlobalViewResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AddPrometheusGlobalViewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AddPrometheusGlobalViewResponse) String() string {
	return tea.Prettify(s)
}

func (s AddPrometheusGlobalViewResponse) GoString() string {
	return s.String()
}

func (s *AddPrometheusGlobalViewResponse) SetHeaders(v map[string]*string) *AddPrometheusGlobalViewResponse {
	s.Headers = v
	return s
}

func (s *AddPrometheusGlobalViewResponse) SetStatusCode(v int32) *AddPrometheusGlobalViewResponse {
	s.StatusCode = &v
	return s
}

func (s *AddPrometheusGlobalViewResponse) SetBody(v *AddPrometheusGlobalViewResponseBody) *AddPrometheusGlobalViewResponse {
	s.Body = v
	return s
}

type AddPrometheusGlobalViewByAliClusterIdsRequest struct {
	// The IDs of clusters. Separate multiple IDs with commas (,).
	//
	// This parameter is required.
	//
	// example:
	//
	// cd1d55bef19904324a20ed0ebb86caa5c,c5b48729918ab4745a24482ac29d0973a, c00a94896641449098bf24931e4166003, cd174485c09384060ba542bc1be1185a4
	ClusterIds *string `json:"ClusterIds,omitempty" xml:"ClusterIds,omitempty"`
	// The name of the global aggregation instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// zyGlobalView
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	// The identifier to identify the service if custom dashboards are created for the specified clusters.
	//
	// example:
	//
	// adcp
	ProductCode *string `json:"ProductCode,omitempty" xml:"ProductCode,omitempty"`
	// The region ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s AddPrometheusGlobalViewByAliClusterIdsRequest) String() string {
	return tea.Prettify(s)
}

func (s AddPrometheusGlobalViewByAliClusterIdsRequest) GoString() string {
	return s.String()
}

func (s *AddPrometheusGlobalViewByAliClusterIdsRequest) SetClusterIds(v string) *AddPrometheusGlobalViewByAliClusterIdsRequest {
	s.ClusterIds = &v
	return s
}

func (s *AddPrometheusGlobalViewByAliClusterIdsRequest) SetGroupName(v string) *AddPrometheusGlobalViewByAliClusterIdsRequest {
	s.GroupName = &v
	return s
}

func (s *AddPrometheusGlobalViewByAliClusterIdsRequest) SetProductCode(v string) *AddPrometheusGlobalViewByAliClusterIdsRequest {
	s.ProductCode = &v
	return s
}

func (s *AddPrometheusGlobalViewByAliClusterIdsRequest) SetRegionId(v string) *AddPrometheusGlobalViewByAliClusterIdsRequest {
	s.RegionId = &v
	return s
}

type AddPrometheusGlobalViewByAliClusterIdsResponseBody struct {
	// Status code. 200 is success, other status codes are exceptions.
	//
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The struct returned.
	Data *AddPrometheusGlobalViewByAliClusterIdsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// Returns a hint message for the result.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID. You can use the ID to query logs and troubleshoot issues.
	//
	// example:
	//
	// 3A0EA2AF-C9B3-555C-B9D5-5DD8F5EF98A9
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddPrometheusGlobalViewByAliClusterIdsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddPrometheusGlobalViewByAliClusterIdsResponseBody) GoString() string {
	return s.String()
}

func (s *AddPrometheusGlobalViewByAliClusterIdsResponseBody) SetCode(v int32) *AddPrometheusGlobalViewByAliClusterIdsResponseBody {
	s.Code = &v
	return s
}

func (s *AddPrometheusGlobalViewByAliClusterIdsResponseBody) SetData(v *AddPrometheusGlobalViewByAliClusterIdsResponseBodyData) *AddPrometheusGlobalViewByAliClusterIdsResponseBody {
	s.Data = v
	return s
}

func (s *AddPrometheusGlobalViewByAliClusterIdsResponseBody) SetMessage(v string) *AddPrometheusGlobalViewByAliClusterIdsResponseBody {
	s.Message = &v
	return s
}

func (s *AddPrometheusGlobalViewByAliClusterIdsResponseBody) SetRequestId(v string) *AddPrometheusGlobalViewByAliClusterIdsResponseBody {
	s.RequestId = &v
	return s
}

type AddPrometheusGlobalViewByAliClusterIdsResponseBodyData struct {
	// The Info-level information.
	//
	// example:
	//
	// {regionId: the region where the aggregation instance resides. globalViewClusterId: the ID of the aggregation instance. failedClusterIds: the ID of the cluster that failed to be added. A cluster may fail to be added because the specified cluster ID is invalid or the cluster is added across continents.}
	Info *string `json:"Info,omitempty" xml:"Info,omitempty"`
	// The additional information.
	//
	// example:
	//
	// success
	Msg *string `json:"Msg,omitempty" xml:"Msg,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- `true`
	//
	// 	- `false`
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s AddPrometheusGlobalViewByAliClusterIdsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s AddPrometheusGlobalViewByAliClusterIdsResponseBodyData) GoString() string {
	return s.String()
}

func (s *AddPrometheusGlobalViewByAliClusterIdsResponseBodyData) SetInfo(v string) *AddPrometheusGlobalViewByAliClusterIdsResponseBodyData {
	s.Info = &v
	return s
}

func (s *AddPrometheusGlobalViewByAliClusterIdsResponseBodyData) SetMsg(v string) *AddPrometheusGlobalViewByAliClusterIdsResponseBodyData {
	s.Msg = &v
	return s
}

func (s *AddPrometheusGlobalViewByAliClusterIdsResponseBodyData) SetSuccess(v bool) *AddPrometheusGlobalViewByAliClusterIdsResponseBodyData {
	s.Success = &v
	return s
}

type AddPrometheusGlobalViewByAliClusterIdsResponse struct {
	Headers    map[string]*string                                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AddPrometheusGlobalViewByAliClusterIdsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AddPrometheusGlobalViewByAliClusterIdsResponse) String() string {
	return tea.Prettify(s)
}

func (s AddPrometheusGlobalViewByAliClusterIdsResponse) GoString() string {
	return s.String()
}

func (s *AddPrometheusGlobalViewByAliClusterIdsResponse) SetHeaders(v map[string]*string) *AddPrometheusGlobalViewByAliClusterIdsResponse {
	s.Headers = v
	return s
}

func (s *AddPrometheusGlobalViewByAliClusterIdsResponse) SetStatusCode(v int32) *AddPrometheusGlobalViewByAliClusterIdsResponse {
	s.StatusCode = &v
	return s
}

func (s *AddPrometheusGlobalViewByAliClusterIdsResponse) SetBody(v *AddPrometheusGlobalViewByAliClusterIdsResponseBody) *AddPrometheusGlobalViewByAliClusterIdsResponse {
	s.Body = v
	return s
}

type AddPrometheusInstanceRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// notificationpolicy_test
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// RW
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s AddPrometheusInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s AddPrometheusInstanceRequest) GoString() string {
	return s.String()
}

func (s *AddPrometheusInstanceRequest) SetName(v string) *AddPrometheusInstanceRequest {
	s.Name = &v
	return s
}

func (s *AddPrometheusInstanceRequest) SetRegionId(v string) *AddPrometheusInstanceRequest {
	s.RegionId = &v
	return s
}

func (s *AddPrometheusInstanceRequest) SetType(v string) *AddPrometheusInstanceRequest {
	s.Type = &v
	return s
}

type AddPrometheusInstanceResponseBody struct {
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned struct. { "RequestId": the request ID, "Data": "{ "clusterType": the cluster type, "remoteWriteUrl": the public URL for remote write, "internetGrafanaUrl": the internal URL for Grafana, "authToken": indicates whether authentication is enabled, "internetPushGatewayUrl": the internal URL for Pushgateway, "clusterId": the cluster ID, "internetRemoteReadUrl": the internal URL for remote read, "remoteReadUrl": the public URL for remote read, "grafanaUrl": the public URL for Grafana, "pushGatewayUrl": the public URL for Pushgateway, "internetRemoteWriteUrl": the internal URL for remote write}" }
	//
	// example:
	//
	// {
	//
	//   "RequestId": "1293091C-54AD-50FE-B787-E314B94B35AB",
	//
	//   "Data": "{
	//
	//   "clusterType":"remote-write-prometheus",
	//
	//   "remoteWriteUrl":"http://cn-hu/api/v3/write",
	//
	//   "internetGrafanaUrl":"https://cn-hanga/cn-hangzhou",
	//
	//   "authToken":false,
	//
	//   "internetPushGatewayUrl":"https://cangzhou/api/v2",
	//
	//   "clusterId":"vrju1lj3sa|123456",
	//
	//   "internetRemoteReadUrl":"https://cn-hangzh67cn-hangzhou/api/v1/read",
	//
	//   "remoteReadUrl":"http://cn-hanou/api/v1/read",
	//
	//   "grafanaUrl":"http://cn-angzhou",
	//
	//   "pushGatewayUrl":"htt1lj3sa/cn-hangzhou/api/v2",
	//
	//   "internetRemoteWriteUrl":"httpsngzhou/api/v3/write"}"
	//
	// }
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 9319A57D-2D9E-472A-B69B-CF3CD16D****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s AddPrometheusInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddPrometheusInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *AddPrometheusInstanceResponseBody) SetCode(v int32) *AddPrometheusInstanceResponseBody {
	s.Code = &v
	return s
}

func (s *AddPrometheusInstanceResponseBody) SetData(v string) *AddPrometheusInstanceResponseBody {
	s.Data = &v
	return s
}

func (s *AddPrometheusInstanceResponseBody) SetMessage(v string) *AddPrometheusInstanceResponseBody {
	s.Message = &v
	return s
}

func (s *AddPrometheusInstanceResponseBody) SetRequestId(v string) *AddPrometheusInstanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *AddPrometheusInstanceResponseBody) SetSuccess(v bool) *AddPrometheusInstanceResponseBody {
	s.Success = &v
	return s
}

type AddPrometheusInstanceResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AddPrometheusInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AddPrometheusInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s AddPrometheusInstanceResponse) GoString() string {
	return s.String()
}

func (s *AddPrometheusInstanceResponse) SetHeaders(v map[string]*string) *AddPrometheusInstanceResponse {
	s.Headers = v
	return s
}

func (s *AddPrometheusInstanceResponse) SetStatusCode(v int32) *AddPrometheusInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *AddPrometheusInstanceResponse) SetBody(v *AddPrometheusInstanceResponseBody) *AddPrometheusInstanceResponse {
	s.Body = v
	return s
}

type AddPrometheusIntegrationRequest struct {
	// The ID of the Prometheus instance. Only a Prometheus instance for Container Service or a Prometheus instance for ECS is supported.
	//
	// This parameter is required.
	//
	// example:
	//
	// cc7a37ee31aea4ed1a059eff8034b****
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	// The type of the integration.
	//
	// This parameter is required.
	//
	// example:
	//
	// kafka, mysql, redis, snmp, emr, nubela, and tidb
	IntegrationType *string `json:"IntegrationType,omitempty" xml:"IntegrationType,omitempty"`
	// The configurations of the exporter. The value is a JSON string.
	//
	// This parameter is required.
	//
	// example:
	//
	// {"port":"5554","name":"kafka-test12","kafka_instance":"kafka-test","__label_value":"kafka-test","scrape_interval":33,"metrics_path":"/metrics","__label_key":"kafka-test"}
	Param *string `json:"Param,omitempty" xml:"Param,omitempty"`
	// The region ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s AddPrometheusIntegrationRequest) String() string {
	return tea.Prettify(s)
}

func (s AddPrometheusIntegrationRequest) GoString() string {
	return s.String()
}

func (s *AddPrometheusIntegrationRequest) SetClusterId(v string) *AddPrometheusIntegrationRequest {
	s.ClusterId = &v
	return s
}

func (s *AddPrometheusIntegrationRequest) SetIntegrationType(v string) *AddPrometheusIntegrationRequest {
	s.IntegrationType = &v
	return s
}

func (s *AddPrometheusIntegrationRequest) SetParam(v string) *AddPrometheusIntegrationRequest {
	s.Param = &v
	return s
}

func (s *AddPrometheusIntegrationRequest) SetRegionId(v string) *AddPrometheusIntegrationRequest {
	s.RegionId = &v
	return s
}

type AddPrometheusIntegrationResponseBody struct {
	// The status code or error code.
	//
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The struct returned.
	Data *AddPrometheusIntegrationResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The message returned.
	//
	// example:
	//
	// message
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	//
	// example:
	//
	// 3703B98C-335E-5BA7-972E-F90E9E768A85
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddPrometheusIntegrationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddPrometheusIntegrationResponseBody) GoString() string {
	return s.String()
}

func (s *AddPrometheusIntegrationResponseBody) SetCode(v int32) *AddPrometheusIntegrationResponseBody {
	s.Code = &v
	return s
}

func (s *AddPrometheusIntegrationResponseBody) SetData(v *AddPrometheusIntegrationResponseBodyData) *AddPrometheusIntegrationResponseBody {
	s.Data = v
	return s
}

func (s *AddPrometheusIntegrationResponseBody) SetMessage(v string) *AddPrometheusIntegrationResponseBody {
	s.Message = &v
	return s
}

func (s *AddPrometheusIntegrationResponseBody) SetRequestId(v string) *AddPrometheusIntegrationResponseBody {
	s.RequestId = &v
	return s
}

type AddPrometheusIntegrationResponseBodyData struct {
	// The ID of the exporter.
	//
	// example:
	//
	// 2829
	InstanceId *int64 `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The name of the exporter.
	//
	// example:
	//
	// hw-cloud02
	InstanceName *string `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
}

func (s AddPrometheusIntegrationResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s AddPrometheusIntegrationResponseBodyData) GoString() string {
	return s.String()
}

func (s *AddPrometheusIntegrationResponseBodyData) SetInstanceId(v int64) *AddPrometheusIntegrationResponseBodyData {
	s.InstanceId = &v
	return s
}

func (s *AddPrometheusIntegrationResponseBodyData) SetInstanceName(v string) *AddPrometheusIntegrationResponseBodyData {
	s.InstanceName = &v
	return s
}

type AddPrometheusIntegrationResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AddPrometheusIntegrationResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AddPrometheusIntegrationResponse) String() string {
	return tea.Prettify(s)
}

func (s AddPrometheusIntegrationResponse) GoString() string {
	return s.String()
}

func (s *AddPrometheusIntegrationResponse) SetHeaders(v map[string]*string) *AddPrometheusIntegrationResponse {
	s.Headers = v
	return s
}

func (s *AddPrometheusIntegrationResponse) SetStatusCode(v int32) *AddPrometheusIntegrationResponse {
	s.StatusCode = &v
	return s
}

func (s *AddPrometheusIntegrationResponse) SetBody(v *AddPrometheusIntegrationResponseBody) *AddPrometheusIntegrationResponse {
	s.Body = v
	return s
}

type AddPrometheusRemoteWriteRequest struct {
	// The ID of the Prometheus instance. Only a Prometheus instance for Container Service or a Prometheus instance for ECS is supported.
	//
	// This parameter is required.
	//
	// example:
	//
	// cc7a37ee31aea4ed1a059eff8034b\\*\\*\\*\\	- or vpc-xxxxx
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	// The region ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The details of the remote write configuration item. Specify the value in the YAML format.
	//
	// This parameter is required.
	//
	// example:
	//
	// remote_write:
	//
	//   - name: rw1
	//
	//     url: "http://cn-hangzhou-intranet.arms.aliyuncs.com/prometheus/uid/xx/cn-hangzhou/api/v3/write"
	//
	//     basic_auth:
	//
	//       username: xxx
	//
	//       password: xxx
	//
	//     write_relabel_configs:
	//
	//       - source_labels: [ instance_id ]
	//
	//         separator: ;
	//
	//         regex: si
	//
	//         replacement: $1
	//
	//         action: keep
	//
	//   - name: rw2
	//
	//     url: "http://cn-hangzhou-intranet.arms.aliyuncs.com/prometheus/uid/xx/cn-hangzhou/api/v3/write"
	//
	//     basic_auth:
	//
	//       username: xxx
	//
	//       password: xxx
	//
	//     write_relabel_configs:
	//
	//       - source_labels: [ xx ]
	//
	//         separator: ;
	//
	//         regex: yyy
	//
	//         replacement: $1
	//
	//         action: keep
	RemoteWriteYaml *string `json:"RemoteWriteYaml,omitempty" xml:"RemoteWriteYaml,omitempty"`
}

func (s AddPrometheusRemoteWriteRequest) String() string {
	return tea.Prettify(s)
}

func (s AddPrometheusRemoteWriteRequest) GoString() string {
	return s.String()
}

func (s *AddPrometheusRemoteWriteRequest) SetClusterId(v string) *AddPrometheusRemoteWriteRequest {
	s.ClusterId = &v
	return s
}

func (s *AddPrometheusRemoteWriteRequest) SetRegionId(v string) *AddPrometheusRemoteWriteRequest {
	s.RegionId = &v
	return s
}

func (s *AddPrometheusRemoteWriteRequest) SetRemoteWriteYaml(v string) *AddPrometheusRemoteWriteRequest {
	s.RemoteWriteYaml = &v
	return s
}

type AddPrometheusRemoteWriteResponseBody struct {
	// The status code. The status code 200 indicates that the request was successful. If another status code is returned, the request failed.
	//
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The name of the remote write configuration item. If the request fails, an error message is returned.
	//
	// example:
	//
	// 1
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// The message returned.
	//
	// example:
	//
	// message
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 4C518054-852F-4023-ABC1-4AF95FF7****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- `true`
	//
	// 	- `false`
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s AddPrometheusRemoteWriteResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddPrometheusRemoteWriteResponseBody) GoString() string {
	return s.String()
}

func (s *AddPrometheusRemoteWriteResponseBody) SetCode(v int32) *AddPrometheusRemoteWriteResponseBody {
	s.Code = &v
	return s
}

func (s *AddPrometheusRemoteWriteResponseBody) SetData(v string) *AddPrometheusRemoteWriteResponseBody {
	s.Data = &v
	return s
}

func (s *AddPrometheusRemoteWriteResponseBody) SetMessage(v string) *AddPrometheusRemoteWriteResponseBody {
	s.Message = &v
	return s
}

func (s *AddPrometheusRemoteWriteResponseBody) SetRequestId(v string) *AddPrometheusRemoteWriteResponseBody {
	s.RequestId = &v
	return s
}

func (s *AddPrometheusRemoteWriteResponseBody) SetSuccess(v bool) *AddPrometheusRemoteWriteResponseBody {
	s.Success = &v
	return s
}

type AddPrometheusRemoteWriteResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AddPrometheusRemoteWriteResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AddPrometheusRemoteWriteResponse) String() string {
	return tea.Prettify(s)
}

func (s AddPrometheusRemoteWriteResponse) GoString() string {
	return s.String()
}

func (s *AddPrometheusRemoteWriteResponse) SetHeaders(v map[string]*string) *AddPrometheusRemoteWriteResponse {
	s.Headers = v
	return s
}

func (s *AddPrometheusRemoteWriteResponse) SetStatusCode(v int32) *AddPrometheusRemoteWriteResponse {
	s.StatusCode = &v
	return s
}

func (s *AddPrometheusRemoteWriteResponse) SetBody(v *AddPrometheusRemoteWriteResponseBody) *AddPrometheusRemoteWriteResponse {
	s.Body = v
	return s
}

type AddRecordingRuleRequest struct {
	// The cluster ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cc7a37ee31aea4ed1a059eff8034b****
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	// The region ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The custom recording rule. The value is in the YAML format.
	//
	// This parameter is required.
	//
	// example:
	//
	// groups: - name: "recording_demo"   rules:   - expr: "sum(jvm_memory_max_bytes)"     record: "rate_coredns_demo"
	RuleYaml *string `json:"RuleYaml,omitempty" xml:"RuleYaml,omitempty"`
}

func (s AddRecordingRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s AddRecordingRuleRequest) GoString() string {
	return s.String()
}

func (s *AddRecordingRuleRequest) SetClusterId(v string) *AddRecordingRuleRequest {
	s.ClusterId = &v
	return s
}

func (s *AddRecordingRuleRequest) SetRegionId(v string) *AddRecordingRuleRequest {
	s.RegionId = &v
	return s
}

func (s *AddRecordingRuleRequest) SetRuleYaml(v string) *AddRecordingRuleRequest {
	s.RuleYaml = &v
	return s
}

type AddRecordingRuleResponseBody struct {
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The status of the response.
	//
	// example:
	//
	// success
	Data    *string `json:"Data,omitempty" xml:"Data,omitempty"`
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 9FEA6D00-317F-45E3-9004-7FB8B0B7****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddRecordingRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddRecordingRuleResponseBody) GoString() string {
	return s.String()
}

func (s *AddRecordingRuleResponseBody) SetCode(v int32) *AddRecordingRuleResponseBody {
	s.Code = &v
	return s
}

func (s *AddRecordingRuleResponseBody) SetData(v string) *AddRecordingRuleResponseBody {
	s.Data = &v
	return s
}

func (s *AddRecordingRuleResponseBody) SetMessage(v string) *AddRecordingRuleResponseBody {
	s.Message = &v
	return s
}

func (s *AddRecordingRuleResponseBody) SetRequestId(v string) *AddRecordingRuleResponseBody {
	s.RequestId = &v
	return s
}

type AddRecordingRuleResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AddRecordingRuleResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AddRecordingRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s AddRecordingRuleResponse) GoString() string {
	return s.String()
}

func (s *AddRecordingRuleResponse) SetHeaders(v map[string]*string) *AddRecordingRuleResponse {
	s.Headers = v
	return s
}

func (s *AddRecordingRuleResponse) SetStatusCode(v int32) *AddRecordingRuleResponse {
	s.StatusCode = &v
	return s
}

func (s *AddRecordingRuleResponse) SetBody(v *AddRecordingRuleResponseBody) *AddRecordingRuleResponse {
	s.Body = v
	return s
}

type AddTagToFlinkClusterRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// c5defa51f******c92bd2ef5fb093269
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ab18f***93744d
	FlinkWorkSpaceId *string `json:"FlinkWorkSpaceId,omitempty" xml:"FlinkWorkSpaceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// flink-demo
	FlinkWorkSpaceName *string `json:"FlinkWorkSpaceName,omitempty" xml:"FlinkWorkSpaceName,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// example:
	//
	// rg-acfmxyexli2****
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 198608******7619
	TargetUserId *string `json:"TargetUserId,omitempty" xml:"TargetUserId,omitempty"`
}

func (s AddTagToFlinkClusterRequest) String() string {
	return tea.Prettify(s)
}

func (s AddTagToFlinkClusterRequest) GoString() string {
	return s.String()
}

func (s *AddTagToFlinkClusterRequest) SetClusterId(v string) *AddTagToFlinkClusterRequest {
	s.ClusterId = &v
	return s
}

func (s *AddTagToFlinkClusterRequest) SetFlinkWorkSpaceId(v string) *AddTagToFlinkClusterRequest {
	s.FlinkWorkSpaceId = &v
	return s
}

func (s *AddTagToFlinkClusterRequest) SetFlinkWorkSpaceName(v string) *AddTagToFlinkClusterRequest {
	s.FlinkWorkSpaceName = &v
	return s
}

func (s *AddTagToFlinkClusterRequest) SetRegionId(v string) *AddTagToFlinkClusterRequest {
	s.RegionId = &v
	return s
}

func (s *AddTagToFlinkClusterRequest) SetResourceGroupId(v string) *AddTagToFlinkClusterRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *AddTagToFlinkClusterRequest) SetTargetUserId(v string) *AddTagToFlinkClusterRequest {
	s.TargetUserId = &v
	return s
}

type AddTagToFlinkClusterResponseBody struct {
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// false
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// Id of the request
	//
	// example:
	//
	// 2FC13182-B9AF-4E6B-BE51-72669B7C****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s AddTagToFlinkClusterResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddTagToFlinkClusterResponseBody) GoString() string {
	return s.String()
}

func (s *AddTagToFlinkClusterResponseBody) SetCode(v int32) *AddTagToFlinkClusterResponseBody {
	s.Code = &v
	return s
}

func (s *AddTagToFlinkClusterResponseBody) SetData(v string) *AddTagToFlinkClusterResponseBody {
	s.Data = &v
	return s
}

func (s *AddTagToFlinkClusterResponseBody) SetRequestId(v string) *AddTagToFlinkClusterResponseBody {
	s.RequestId = &v
	return s
}

func (s *AddTagToFlinkClusterResponseBody) SetSuccess(v bool) *AddTagToFlinkClusterResponseBody {
	s.Success = &v
	return s
}

type AddTagToFlinkClusterResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AddTagToFlinkClusterResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AddTagToFlinkClusterResponse) String() string {
	return tea.Prettify(s)
}

func (s AddTagToFlinkClusterResponse) GoString() string {
	return s.String()
}

func (s *AddTagToFlinkClusterResponse) SetHeaders(v map[string]*string) *AddTagToFlinkClusterResponse {
	s.Headers = v
	return s
}

func (s *AddTagToFlinkClusterResponse) SetStatusCode(v int32) *AddTagToFlinkClusterResponse {
	s.StatusCode = &v
	return s
}

func (s *AddTagToFlinkClusterResponse) SetBody(v *AddTagToFlinkClusterResponseBody) *AddTagToFlinkClusterResponse {
	s.Body = v
	return s
}

type AppendInstancesToPrometheusGlobalViewRequest struct {
	// The list of global aggregation instances. The value is a JSON string.
	//
	// This parameter is required.
	//
	// example:
	//
	// [ { "sourceName": "Data source name- ArmsPrometheus No.1", "sourceType":"AlibabaPrometheus", "userId":"UserID", "clusterId":"ClusterId", }, { "sourceName": "Data source name - MetrcStore No.2", "sourceType":"MetricStore", "dataSource":"Remote read endpoint of the MetricStore", "extras":{ "username":"BasicAuthUsername", "password":"BasicAuthPassword" } }, { "sourceName": "Custom ", "sourceType":"CustomPrometheus", "dataSource":"Remote read endpoint of the self-managed Prometheus data source", "extras":{ "username":"BasicAuthUsername", "password":"BasicAuthPassword" } }, { "sourceName": "Other one ", "sourceType":"Others", "dataSource":"Endpoint of another data source such as Tencent remote read", "headers":{ "AnyHeaderToFill":"Headers to be filled" }, "extras":{ "username":"BasicAuthUsername", "password":"BasicAuthPassword" } } // ....... more addre ]
	Clusters *string `json:"Clusters,omitempty" xml:"Clusters,omitempty"`
	// The ID of the global aggregation instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// global-v2-cn-1670100631025794-6gjc0qgb
	GlobalViewClusterId *string `json:"GlobalViewClusterId,omitempty" xml:"GlobalViewClusterId,omitempty"`
	// The name of the global aggregation instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// zyGlobalView
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	// The region ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s AppendInstancesToPrometheusGlobalViewRequest) String() string {
	return tea.Prettify(s)
}

func (s AppendInstancesToPrometheusGlobalViewRequest) GoString() string {
	return s.String()
}

func (s *AppendInstancesToPrometheusGlobalViewRequest) SetClusters(v string) *AppendInstancesToPrometheusGlobalViewRequest {
	s.Clusters = &v
	return s
}

func (s *AppendInstancesToPrometheusGlobalViewRequest) SetGlobalViewClusterId(v string) *AppendInstancesToPrometheusGlobalViewRequest {
	s.GlobalViewClusterId = &v
	return s
}

func (s *AppendInstancesToPrometheusGlobalViewRequest) SetGroupName(v string) *AppendInstancesToPrometheusGlobalViewRequest {
	s.GroupName = &v
	return s
}

func (s *AppendInstancesToPrometheusGlobalViewRequest) SetRegionId(v string) *AppendInstancesToPrometheusGlobalViewRequest {
	s.RegionId = &v
	return s
}

type AppendInstancesToPrometheusGlobalViewResponseBody struct {
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The information about the array object.
	Data    *AppendInstancesToPrometheusGlobalViewResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	Message *string                                                `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID. You can use the ID to query logs and troubleshoot issues.
	//
	// example:
	//
	// 27E653FA-5958-45BE-8AA9-14D884DC****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AppendInstancesToPrometheusGlobalViewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AppendInstancesToPrometheusGlobalViewResponseBody) GoString() string {
	return s.String()
}

func (s *AppendInstancesToPrometheusGlobalViewResponseBody) SetCode(v int32) *AppendInstancesToPrometheusGlobalViewResponseBody {
	s.Code = &v
	return s
}

func (s *AppendInstancesToPrometheusGlobalViewResponseBody) SetData(v *AppendInstancesToPrometheusGlobalViewResponseBodyData) *AppendInstancesToPrometheusGlobalViewResponseBody {
	s.Data = v
	return s
}

func (s *AppendInstancesToPrometheusGlobalViewResponseBody) SetMessage(v string) *AppendInstancesToPrometheusGlobalViewResponseBody {
	s.Message = &v
	return s
}

func (s *AppendInstancesToPrometheusGlobalViewResponseBody) SetRequestId(v string) *AppendInstancesToPrometheusGlobalViewResponseBody {
	s.RequestId = &v
	return s
}

type AppendInstancesToPrometheusGlobalViewResponseBodyData struct {
	// The Info-level information.
	//
	// example:
	//
	// {regionId: the region where the aggregation instance resides. globalViewClusterId: the ID of the aggregation instance. failedInstances: the ID of the object that failed to be added.}
	Info *string `json:"Info,omitempty" xml:"Info,omitempty"`
	// The additional information.
	//
	// example:
	//
	// OK
	Msg *string `json:"Msg,omitempty" xml:"Msg,omitempty"`
	// Indicates whether the call was successful. Valid values:
	//
	// 	- `true`: The call was successful.
	//
	// 	- `false`: The call failed.
	//
	// example:
	//
	// True
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s AppendInstancesToPrometheusGlobalViewResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s AppendInstancesToPrometheusGlobalViewResponseBodyData) GoString() string {
	return s.String()
}

func (s *AppendInstancesToPrometheusGlobalViewResponseBodyData) SetInfo(v string) *AppendInstancesToPrometheusGlobalViewResponseBodyData {
	s.Info = &v
	return s
}

func (s *AppendInstancesToPrometheusGlobalViewResponseBodyData) SetMsg(v string) *AppendInstancesToPrometheusGlobalViewResponseBodyData {
	s.Msg = &v
	return s
}

func (s *AppendInstancesToPrometheusGlobalViewResponseBodyData) SetSuccess(v bool) *AppendInstancesToPrometheusGlobalViewResponseBodyData {
	s.Success = &v
	return s
}

type AppendInstancesToPrometheusGlobalViewResponse struct {
	Headers    map[string]*string                                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AppendInstancesToPrometheusGlobalViewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AppendInstancesToPrometheusGlobalViewResponse) String() string {
	return tea.Prettify(s)
}

func (s AppendInstancesToPrometheusGlobalViewResponse) GoString() string {
	return s.String()
}

func (s *AppendInstancesToPrometheusGlobalViewResponse) SetHeaders(v map[string]*string) *AppendInstancesToPrometheusGlobalViewResponse {
	s.Headers = v
	return s
}

func (s *AppendInstancesToPrometheusGlobalViewResponse) SetStatusCode(v int32) *AppendInstancesToPrometheusGlobalViewResponse {
	s.StatusCode = &v
	return s
}

func (s *AppendInstancesToPrometheusGlobalViewResponse) SetBody(v *AppendInstancesToPrometheusGlobalViewResponseBody) *AppendInstancesToPrometheusGlobalViewResponse {
	s.Body = v
	return s
}

type ApplyScenarioRequest struct {
	// The ID of the application.
	//
	// This parameter is required.
	//
	// example:
	//
	// b590lhguqs@28f515462f******
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// The configuration of the business monitoring job. The value is a JSON string. For more information about this parameter, see the following additional information about the **Config*	- parameter.
	//
	// This parameter is required.
	//
	// example:
	//
	// {"rpcType":"0","nameMatchType":"EQUALS","service":"/api/pop/test","operator":"and","filterItems":[{"type":"HttpHeaders","key":"uid","opt":"==","value":"123456789"}],"group":{"type":"HttpRequestParameters","key":"name"}}
	Config map[string]interface{} `json:"Config,omitempty" xml:"Config,omitempty"`
	// The name of the business monitoring job.
	//
	// This parameter is required.
	//
	// example:
	//
	// ScenarioName
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The ID of the region.
	//
	// example:
	//
	// cn-zhangjaikou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The scenario where you want to use the business monitoring job. Valid values:
	//
	// 	- `USER-DEFINED`: user-defined. This is the default value.
	//
	// 	- `EDAS-ROLLOUT`: application release in Enterprise Distributed Application Service (EDAS)
	//
	// 	- `OAM-ROLLOUT`: application release based on Open Application Model (OAM)
	//
	// 	- `MSC-CANARY`: canary release based on Microservice Engine (MSE)
	//
	// example:
	//
	// USER-DEFINED
	Scenario *string `json:"Scenario,omitempty" xml:"Scenario,omitempty"`
	// The code of the business monitoring job. This parameter is not required when you create a business monitoring job. However, this parameter is required when you update a business monitoring job.
	//
	// example:
	//
	// a9f8****
	Sign *string `json:"Sign,omitempty" xml:"Sign,omitempty"`
	// Specifies whether to record business parameters to the trace marked with the coloring sign.
	//
	// 	- `true`
	//
	// 	- `false`: This is the default value.
	//
	// example:
	//
	// false
	SnDump *bool `json:"SnDump,omitempty" xml:"SnDump,omitempty"`
	// Specifies whether traffic in the trace marked with the coloring sign is all collected.
	//
	// 	- `true`
	//
	// 	- `false`: This is the default value.
	//
	// example:
	//
	// false
	SnForce *bool `json:"SnForce,omitempty" xml:"SnForce,omitempty"`
	// Specifies whether to count traffic based on the coloring sign.
	//
	// 	- `true`
	//
	// 	- `false`: This is the default value.
	//
	// example:
	//
	// false
	SnStat *bool `json:"SnStat,omitempty" xml:"SnStat,omitempty"`
	// Specifies whether the coloring sign is transparently passed down to downstream application nodes in the trace.
	//
	// 	- `true`
	//
	// 	- `false`: This is the default value.
	//
	// example:
	//
	// false
	SnTransfer *bool `json:"SnTransfer,omitempty" xml:"SnTransfer,omitempty"`
	// Specifies whether the operation is an update operation.
	//
	// 	- `true`: update
	//
	// 	- `false`: insert
	//
	// This parameter is required.
	//
	// example:
	//
	// false
	UpdateOption *bool `json:"UpdateOption,omitempty" xml:"UpdateOption,omitempty"`
}

func (s ApplyScenarioRequest) String() string {
	return tea.Prettify(s)
}

func (s ApplyScenarioRequest) GoString() string {
	return s.String()
}

func (s *ApplyScenarioRequest) SetAppId(v string) *ApplyScenarioRequest {
	s.AppId = &v
	return s
}

func (s *ApplyScenarioRequest) SetConfig(v map[string]interface{}) *ApplyScenarioRequest {
	s.Config = v
	return s
}

func (s *ApplyScenarioRequest) SetName(v string) *ApplyScenarioRequest {
	s.Name = &v
	return s
}

func (s *ApplyScenarioRequest) SetRegionId(v string) *ApplyScenarioRequest {
	s.RegionId = &v
	return s
}

func (s *ApplyScenarioRequest) SetScenario(v string) *ApplyScenarioRequest {
	s.Scenario = &v
	return s
}

func (s *ApplyScenarioRequest) SetSign(v string) *ApplyScenarioRequest {
	s.Sign = &v
	return s
}

func (s *ApplyScenarioRequest) SetSnDump(v bool) *ApplyScenarioRequest {
	s.SnDump = &v
	return s
}

func (s *ApplyScenarioRequest) SetSnForce(v bool) *ApplyScenarioRequest {
	s.SnForce = &v
	return s
}

func (s *ApplyScenarioRequest) SetSnStat(v bool) *ApplyScenarioRequest {
	s.SnStat = &v
	return s
}

func (s *ApplyScenarioRequest) SetSnTransfer(v bool) *ApplyScenarioRequest {
	s.SnTransfer = &v
	return s
}

func (s *ApplyScenarioRequest) SetUpdateOption(v bool) *ApplyScenarioRequest {
	s.UpdateOption = &v
	return s
}

type ApplyScenarioShrinkRequest struct {
	// The ID of the application.
	//
	// This parameter is required.
	//
	// example:
	//
	// b590lhguqs@28f515462f******
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// The configuration of the business monitoring job. The value is a JSON string. For more information about this parameter, see the following additional information about the **Config*	- parameter.
	//
	// This parameter is required.
	//
	// example:
	//
	// {"rpcType":"0","nameMatchType":"EQUALS","service":"/api/pop/test","operator":"and","filterItems":[{"type":"HttpHeaders","key":"uid","opt":"==","value":"123456789"}],"group":{"type":"HttpRequestParameters","key":"name"}}
	ConfigShrink *string `json:"Config,omitempty" xml:"Config,omitempty"`
	// The name of the business monitoring job.
	//
	// This parameter is required.
	//
	// example:
	//
	// ScenarioName
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The ID of the region.
	//
	// example:
	//
	// cn-zhangjaikou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The scenario where you want to use the business monitoring job. Valid values:
	//
	// 	- `USER-DEFINED`: user-defined. This is the default value.
	//
	// 	- `EDAS-ROLLOUT`: application release in Enterprise Distributed Application Service (EDAS)
	//
	// 	- `OAM-ROLLOUT`: application release based on Open Application Model (OAM)
	//
	// 	- `MSC-CANARY`: canary release based on Microservice Engine (MSE)
	//
	// example:
	//
	// USER-DEFINED
	Scenario *string `json:"Scenario,omitempty" xml:"Scenario,omitempty"`
	// The code of the business monitoring job. This parameter is not required when you create a business monitoring job. However, this parameter is required when you update a business monitoring job.
	//
	// example:
	//
	// a9f8****
	Sign *string `json:"Sign,omitempty" xml:"Sign,omitempty"`
	// Specifies whether to record business parameters to the trace marked with the coloring sign.
	//
	// 	- `true`
	//
	// 	- `false`: This is the default value.
	//
	// example:
	//
	// false
	SnDump *bool `json:"SnDump,omitempty" xml:"SnDump,omitempty"`
	// Specifies whether traffic in the trace marked with the coloring sign is all collected.
	//
	// 	- `true`
	//
	// 	- `false`: This is the default value.
	//
	// example:
	//
	// false
	SnForce *bool `json:"SnForce,omitempty" xml:"SnForce,omitempty"`
	// Specifies whether to count traffic based on the coloring sign.
	//
	// 	- `true`
	//
	// 	- `false`: This is the default value.
	//
	// example:
	//
	// false
	SnStat *bool `json:"SnStat,omitempty" xml:"SnStat,omitempty"`
	// Specifies whether the coloring sign is transparently passed down to downstream application nodes in the trace.
	//
	// 	- `true`
	//
	// 	- `false`: This is the default value.
	//
	// example:
	//
	// false
	SnTransfer *bool `json:"SnTransfer,omitempty" xml:"SnTransfer,omitempty"`
	// Specifies whether the operation is an update operation.
	//
	// 	- `true`: update
	//
	// 	- `false`: insert
	//
	// This parameter is required.
	//
	// example:
	//
	// false
	UpdateOption *bool `json:"UpdateOption,omitempty" xml:"UpdateOption,omitempty"`
}

func (s ApplyScenarioShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s ApplyScenarioShrinkRequest) GoString() string {
	return s.String()
}

func (s *ApplyScenarioShrinkRequest) SetAppId(v string) *ApplyScenarioShrinkRequest {
	s.AppId = &v
	return s
}

func (s *ApplyScenarioShrinkRequest) SetConfigShrink(v string) *ApplyScenarioShrinkRequest {
	s.ConfigShrink = &v
	return s
}

func (s *ApplyScenarioShrinkRequest) SetName(v string) *ApplyScenarioShrinkRequest {
	s.Name = &v
	return s
}

func (s *ApplyScenarioShrinkRequest) SetRegionId(v string) *ApplyScenarioShrinkRequest {
	s.RegionId = &v
	return s
}

func (s *ApplyScenarioShrinkRequest) SetScenario(v string) *ApplyScenarioShrinkRequest {
	s.Scenario = &v
	return s
}

func (s *ApplyScenarioShrinkRequest) SetSign(v string) *ApplyScenarioShrinkRequest {
	s.Sign = &v
	return s
}

func (s *ApplyScenarioShrinkRequest) SetSnDump(v bool) *ApplyScenarioShrinkRequest {
	s.SnDump = &v
	return s
}

func (s *ApplyScenarioShrinkRequest) SetSnForce(v bool) *ApplyScenarioShrinkRequest {
	s.SnForce = &v
	return s
}

func (s *ApplyScenarioShrinkRequest) SetSnStat(v bool) *ApplyScenarioShrinkRequest {
	s.SnStat = &v
	return s
}

func (s *ApplyScenarioShrinkRequest) SetSnTransfer(v bool) *ApplyScenarioShrinkRequest {
	s.SnTransfer = &v
	return s
}

func (s *ApplyScenarioShrinkRequest) SetUpdateOption(v bool) *ApplyScenarioShrinkRequest {
	s.UpdateOption = &v
	return s
}

type ApplyScenarioResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// EA24D522-AD35-47B8-8CB2-ADBC38******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The code of the business monitoring job, which is the coloring sign.
	//
	// example:
	//
	// 2b97****
	Result *string `json:"Result,omitempty" xml:"Result,omitempty"`
}

func (s ApplyScenarioResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ApplyScenarioResponseBody) GoString() string {
	return s.String()
}

func (s *ApplyScenarioResponseBody) SetRequestId(v string) *ApplyScenarioResponseBody {
	s.RequestId = &v
	return s
}

func (s *ApplyScenarioResponseBody) SetResult(v string) *ApplyScenarioResponseBody {
	s.Result = &v
	return s
}

type ApplyScenarioResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ApplyScenarioResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ApplyScenarioResponse) String() string {
	return tea.Prettify(s)
}

func (s ApplyScenarioResponse) GoString() string {
	return s.String()
}

func (s *ApplyScenarioResponse) SetHeaders(v map[string]*string) *ApplyScenarioResponse {
	s.Headers = v
	return s
}

func (s *ApplyScenarioResponse) SetStatusCode(v int32) *ApplyScenarioResponse {
	s.StatusCode = &v
	return s
}

func (s *ApplyScenarioResponse) SetBody(v *ApplyScenarioResponseBody) *ApplyScenarioResponse {
	s.Body = v
	return s
}

type BindPrometheusGrafanaInstanceRequest struct {
	// The ID of the Prometheus instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// cc7a37ee31aea4ed1a059eff8034b****
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	// The ID of the Grafana workspace.
	//
	// This parameter is required.
	//
	// example:
	//
	// grafana-bp1*****
	GrafanaInstanceId *string `json:"GrafanaInstanceId,omitempty" xml:"GrafanaInstanceId,omitempty"`
	// The region ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the resource group to which the Prometheus instance belongs.
	//
	// example:
	//
	// rg-acfmxyexli2****
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
}

func (s BindPrometheusGrafanaInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s BindPrometheusGrafanaInstanceRequest) GoString() string {
	return s.String()
}

func (s *BindPrometheusGrafanaInstanceRequest) SetClusterId(v string) *BindPrometheusGrafanaInstanceRequest {
	s.ClusterId = &v
	return s
}

func (s *BindPrometheusGrafanaInstanceRequest) SetGrafanaInstanceId(v string) *BindPrometheusGrafanaInstanceRequest {
	s.GrafanaInstanceId = &v
	return s
}

func (s *BindPrometheusGrafanaInstanceRequest) SetRegionId(v string) *BindPrometheusGrafanaInstanceRequest {
	s.RegionId = &v
	return s
}

func (s *BindPrometheusGrafanaInstanceRequest) SetResourceGroupId(v string) *BindPrometheusGrafanaInstanceRequest {
	s.ResourceGroupId = &v
	return s
}

type BindPrometheusGrafanaInstanceResponseBody struct {
	// The status code. The status code 200 indicates that the request was successful. If another status code is returned, the request failed.
	//
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// Indicates whether the request was successful.
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Data *bool `json:"Data,omitempty" xml:"Data,omitempty"`
	// The message returned.
	//
	// example:
	//
	// message
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	//
	// example:
	//
	// 27E653FA-5958-45BE-8AA9-14D884DC****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s BindPrometheusGrafanaInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s BindPrometheusGrafanaInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *BindPrometheusGrafanaInstanceResponseBody) SetCode(v int32) *BindPrometheusGrafanaInstanceResponseBody {
	s.Code = &v
	return s
}

func (s *BindPrometheusGrafanaInstanceResponseBody) SetData(v bool) *BindPrometheusGrafanaInstanceResponseBody {
	s.Data = &v
	return s
}

func (s *BindPrometheusGrafanaInstanceResponseBody) SetMessage(v string) *BindPrometheusGrafanaInstanceResponseBody {
	s.Message = &v
	return s
}

func (s *BindPrometheusGrafanaInstanceResponseBody) SetRequestId(v string) *BindPrometheusGrafanaInstanceResponseBody {
	s.RequestId = &v
	return s
}

type BindPrometheusGrafanaInstanceResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *BindPrometheusGrafanaInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s BindPrometheusGrafanaInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s BindPrometheusGrafanaInstanceResponse) GoString() string {
	return s.String()
}

func (s *BindPrometheusGrafanaInstanceResponse) SetHeaders(v map[string]*string) *BindPrometheusGrafanaInstanceResponse {
	s.Headers = v
	return s
}

func (s *BindPrometheusGrafanaInstanceResponse) SetStatusCode(v int32) *BindPrometheusGrafanaInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *BindPrometheusGrafanaInstanceResponse) SetBody(v *BindPrometheusGrafanaInstanceResponseBody) *BindPrometheusGrafanaInstanceResponse {
	s.Body = v
	return s
}

type BlockAlarmNotificationRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 133
	AlarmId *int64 `json:"AlarmId,omitempty" xml:"AlarmId,omitempty"`
	// example:
	//
	// 2044049
	HandlerId *int64 `json:"HandlerId,omitempty" xml:"HandlerId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 180
	Timeout *int64 `json:"Timeout,omitempty" xml:"Timeout,omitempty"`
}

func (s BlockAlarmNotificationRequest) String() string {
	return tea.Prettify(s)
}

func (s BlockAlarmNotificationRequest) GoString() string {
	return s.String()
}

func (s *BlockAlarmNotificationRequest) SetAlarmId(v int64) *BlockAlarmNotificationRequest {
	s.AlarmId = &v
	return s
}

func (s *BlockAlarmNotificationRequest) SetHandlerId(v int64) *BlockAlarmNotificationRequest {
	s.HandlerId = &v
	return s
}

func (s *BlockAlarmNotificationRequest) SetRegionId(v string) *BlockAlarmNotificationRequest {
	s.RegionId = &v
	return s
}

func (s *BlockAlarmNotificationRequest) SetTimeout(v int64) *BlockAlarmNotificationRequest {
	s.Timeout = &v
	return s
}

type BlockAlarmNotificationResponseBody struct {
	// example:
	//
	// 200
	Code *int64 `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 626037F5-FDEB-45B0-804C-B3C92797****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Result *bool `json:"Result,omitempty" xml:"Result,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s BlockAlarmNotificationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s BlockAlarmNotificationResponseBody) GoString() string {
	return s.String()
}

func (s *BlockAlarmNotificationResponseBody) SetCode(v int64) *BlockAlarmNotificationResponseBody {
	s.Code = &v
	return s
}

func (s *BlockAlarmNotificationResponseBody) SetMessage(v string) *BlockAlarmNotificationResponseBody {
	s.Message = &v
	return s
}

func (s *BlockAlarmNotificationResponseBody) SetRequestId(v string) *BlockAlarmNotificationResponseBody {
	s.RequestId = &v
	return s
}

func (s *BlockAlarmNotificationResponseBody) SetResult(v bool) *BlockAlarmNotificationResponseBody {
	s.Result = &v
	return s
}

func (s *BlockAlarmNotificationResponseBody) SetSuccess(v bool) *BlockAlarmNotificationResponseBody {
	s.Success = &v
	return s
}

type BlockAlarmNotificationResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *BlockAlarmNotificationResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s BlockAlarmNotificationResponse) String() string {
	return tea.Prettify(s)
}

func (s BlockAlarmNotificationResponse) GoString() string {
	return s.String()
}

func (s *BlockAlarmNotificationResponse) SetHeaders(v map[string]*string) *BlockAlarmNotificationResponse {
	s.Headers = v
	return s
}

func (s *BlockAlarmNotificationResponse) SetStatusCode(v int32) *BlockAlarmNotificationResponse {
	s.StatusCode = &v
	return s
}

func (s *BlockAlarmNotificationResponse) SetBody(v *BlockAlarmNotificationResponseBody) *BlockAlarmNotificationResponse {
	s.Body = v
	return s
}

type ChangeAlarmSeverityRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 155
	AlarmId *int64 `json:"AlarmId,omitempty" xml:"AlarmId,omitempty"`
	// example:
	//
	// 2046076
	HandlerId *int64 `json:"HandlerId,omitempty" xml:"HandlerId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// P1
	Severity *string `json:"Severity,omitempty" xml:"Severity,omitempty"`
}

func (s ChangeAlarmSeverityRequest) String() string {
	return tea.Prettify(s)
}

func (s ChangeAlarmSeverityRequest) GoString() string {
	return s.String()
}

func (s *ChangeAlarmSeverityRequest) SetAlarmId(v int64) *ChangeAlarmSeverityRequest {
	s.AlarmId = &v
	return s
}

func (s *ChangeAlarmSeverityRequest) SetHandlerId(v int64) *ChangeAlarmSeverityRequest {
	s.HandlerId = &v
	return s
}

func (s *ChangeAlarmSeverityRequest) SetRegionId(v string) *ChangeAlarmSeverityRequest {
	s.RegionId = &v
	return s
}

func (s *ChangeAlarmSeverityRequest) SetSeverity(v string) *ChangeAlarmSeverityRequest {
	s.Severity = &v
	return s
}

type ChangeAlarmSeverityResponseBody struct {
	// example:
	//
	// 200
	Code *int64 `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// F7781D4A-2818-41E7-B7BB-79D809E9****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Result *bool `json:"Result,omitempty" xml:"Result,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ChangeAlarmSeverityResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ChangeAlarmSeverityResponseBody) GoString() string {
	return s.String()
}

func (s *ChangeAlarmSeverityResponseBody) SetCode(v int64) *ChangeAlarmSeverityResponseBody {
	s.Code = &v
	return s
}

func (s *ChangeAlarmSeverityResponseBody) SetMessage(v string) *ChangeAlarmSeverityResponseBody {
	s.Message = &v
	return s
}

func (s *ChangeAlarmSeverityResponseBody) SetRequestId(v string) *ChangeAlarmSeverityResponseBody {
	s.RequestId = &v
	return s
}

func (s *ChangeAlarmSeverityResponseBody) SetResult(v bool) *ChangeAlarmSeverityResponseBody {
	s.Result = &v
	return s
}

func (s *ChangeAlarmSeverityResponseBody) SetSuccess(v bool) *ChangeAlarmSeverityResponseBody {
	s.Success = &v
	return s
}

type ChangeAlarmSeverityResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ChangeAlarmSeverityResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ChangeAlarmSeverityResponse) String() string {
	return tea.Prettify(s)
}

func (s ChangeAlarmSeverityResponse) GoString() string {
	return s.String()
}

func (s *ChangeAlarmSeverityResponse) SetHeaders(v map[string]*string) *ChangeAlarmSeverityResponse {
	s.Headers = v
	return s
}

func (s *ChangeAlarmSeverityResponse) SetStatusCode(v int32) *ChangeAlarmSeverityResponse {
	s.StatusCode = &v
	return s
}

func (s *ChangeAlarmSeverityResponse) SetBody(v *ChangeAlarmSeverityResponseBody) *ChangeAlarmSeverityResponse {
	s.Body = v
	return s
}

type ChangeResourceGroupRequest struct {
	// The ID of the new resource group. You can view the available resource groups in the Resource Management console.
	//
	// This parameter is required.
	//
	// example:
	//
	// rg-aek2vezare****
	NewResourceGroupId *string `json:"NewResourceGroupId,omitempty" xml:"NewResourceGroupId,omitempty"`
	// The region ID of the resource.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The resource ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// ggxw4lnjuz@cfd34a78f******
	ResourceId *string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty"`
	// The resource type.
	//
	// example:
	//
	// APPLICATION
	ResourceType *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
}

func (s ChangeResourceGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s ChangeResourceGroupRequest) GoString() string {
	return s.String()
}

func (s *ChangeResourceGroupRequest) SetNewResourceGroupId(v string) *ChangeResourceGroupRequest {
	s.NewResourceGroupId = &v
	return s
}

func (s *ChangeResourceGroupRequest) SetRegionId(v string) *ChangeResourceGroupRequest {
	s.RegionId = &v
	return s
}

func (s *ChangeResourceGroupRequest) SetResourceId(v string) *ChangeResourceGroupRequest {
	s.ResourceId = &v
	return s
}

func (s *ChangeResourceGroupRequest) SetResourceType(v string) *ChangeResourceGroupRequest {
	s.ResourceType = &v
	return s
}

type ChangeResourceGroupResponseBody struct {
	// The status code or error code.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned struct.
	Data *ChangeResourceGroupResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// example:
	//
	// message
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 46355DD8-FC56-40C5-BFC6-269DE4F9****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ChangeResourceGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ChangeResourceGroupResponseBody) GoString() string {
	return s.String()
}

func (s *ChangeResourceGroupResponseBody) SetCode(v string) *ChangeResourceGroupResponseBody {
	s.Code = &v
	return s
}

func (s *ChangeResourceGroupResponseBody) SetData(v *ChangeResourceGroupResponseBodyData) *ChangeResourceGroupResponseBody {
	s.Data = v
	return s
}

func (s *ChangeResourceGroupResponseBody) SetMessage(v string) *ChangeResourceGroupResponseBody {
	s.Message = &v
	return s
}

func (s *ChangeResourceGroupResponseBody) SetRequestId(v string) *ChangeResourceGroupResponseBody {
	s.RequestId = &v
	return s
}

type ChangeResourceGroupResponseBodyData struct {
	// The ID of the resource group.
	//
	// example:
	//
	// rg-aek2vezare****
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	// The resource ID.
	//
	// example:
	//
	// ggxw4lnjuz@cfd34a78f******
	ResourceId *string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty"`
}

func (s ChangeResourceGroupResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ChangeResourceGroupResponseBodyData) GoString() string {
	return s.String()
}

func (s *ChangeResourceGroupResponseBodyData) SetResourceGroupId(v string) *ChangeResourceGroupResponseBodyData {
	s.ResourceGroupId = &v
	return s
}

func (s *ChangeResourceGroupResponseBodyData) SetResourceId(v string) *ChangeResourceGroupResponseBodyData {
	s.ResourceId = &v
	return s
}

type ChangeResourceGroupResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ChangeResourceGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ChangeResourceGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s ChangeResourceGroupResponse) GoString() string {
	return s.String()
}

func (s *ChangeResourceGroupResponse) SetHeaders(v map[string]*string) *ChangeResourceGroupResponse {
	s.Headers = v
	return s
}

func (s *ChangeResourceGroupResponse) SetStatusCode(v int32) *ChangeResourceGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *ChangeResourceGroupResponse) SetBody(v *ChangeResourceGroupResponseBody) *ChangeResourceGroupResponse {
	s.Body = v
	return s
}

type CheckCommercialStatusRequest struct {
	// The region ID. Default value: cn-hangzhou.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// Sub-services:
	//
	// - apm: Application Monitoring
	//
	// - rum: Real User Monitoring
	//
	// - prometheus: Managed Service for Prometheus
	//
	// - xtrace: Managed Service for OpenTelemetry
	//
	// example:
	//
	// apm
	Service *string `json:"Service,omitempty" xml:"Service,omitempty"`
}

func (s CheckCommercialStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s CheckCommercialStatusRequest) GoString() string {
	return s.String()
}

func (s *CheckCommercialStatusRequest) SetRegionId(v string) *CheckCommercialStatusRequest {
	s.RegionId = &v
	return s
}

func (s *CheckCommercialStatusRequest) SetService(v string) *CheckCommercialStatusRequest {
	s.Service = &v
	return s
}

type CheckCommercialStatusResponseBody struct {
	// The returned struct.
	//
	// example:
	//
	// True
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 1A474FF8-7861-4D00-81B5-5BC3DA4E****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CheckCommercialStatusResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CheckCommercialStatusResponseBody) GoString() string {
	return s.String()
}

func (s *CheckCommercialStatusResponseBody) SetData(v string) *CheckCommercialStatusResponseBody {
	s.Data = &v
	return s
}

func (s *CheckCommercialStatusResponseBody) SetRequestId(v string) *CheckCommercialStatusResponseBody {
	s.RequestId = &v
	return s
}

type CheckCommercialStatusResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CheckCommercialStatusResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CheckCommercialStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s CheckCommercialStatusResponse) GoString() string {
	return s.String()
}

func (s *CheckCommercialStatusResponse) SetHeaders(v map[string]*string) *CheckCommercialStatusResponse {
	s.Headers = v
	return s
}

func (s *CheckCommercialStatusResponse) SetStatusCode(v int32) *CheckCommercialStatusResponse {
	s.StatusCode = &v
	return s
}

func (s *CheckCommercialStatusResponse) SetBody(v *CheckCommercialStatusResponseBody) *CheckCommercialStatusResponse {
	s.Body = v
	return s
}

type CheckServiceStatusRequest struct {
	// The region ID.
	//
	// example:
	//
	// cn-beijing
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The service code of an Alibaba Cloud service. The service code of Managed Service for Prometheus is prometheus.
	//
	// This parameter is required.
	//
	// example:
	//
	// prometheus
	SvcCode *string `json:"SvcCode,omitempty" xml:"SvcCode,omitempty"`
}

func (s CheckServiceStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s CheckServiceStatusRequest) GoString() string {
	return s.String()
}

func (s *CheckServiceStatusRequest) SetRegionId(v string) *CheckServiceStatusRequest {
	s.RegionId = &v
	return s
}

func (s *CheckServiceStatusRequest) SetSvcCode(v string) *CheckServiceStatusRequest {
	s.SvcCode = &v
	return s
}

type CheckServiceStatusResponseBody struct {
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true.
	//
	// 	- false.
	//
	// example:
	//
	// true
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// The request ID. You can use the ID to find logs and troubleshoot issues.
	//
	// example:
	//
	// 5710C923-AD09-4293-9E11-DCBE3D15F8D4
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CheckServiceStatusResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CheckServiceStatusResponseBody) GoString() string {
	return s.String()
}

func (s *CheckServiceStatusResponseBody) SetData(v string) *CheckServiceStatusResponseBody {
	s.Data = &v
	return s
}

func (s *CheckServiceStatusResponseBody) SetRequestId(v string) *CheckServiceStatusResponseBody {
	s.RequestId = &v
	return s
}

type CheckServiceStatusResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CheckServiceStatusResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CheckServiceStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s CheckServiceStatusResponse) GoString() string {
	return s.String()
}

func (s *CheckServiceStatusResponse) SetHeaders(v map[string]*string) *CheckServiceStatusResponse {
	s.Headers = v
	return s
}

func (s *CheckServiceStatusResponse) SetStatusCode(v int32) *CheckServiceStatusResponse {
	s.StatusCode = &v
	return s
}

func (s *CheckServiceStatusResponse) SetBody(v *CheckServiceStatusResponseBody) *CheckServiceStatusResponse {
	s.Body = v
	return s
}

type ClaimAlarmRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 30
	AlarmId *int64 `json:"AlarmId,omitempty" xml:"AlarmId,omitempty"`
	// example:
	//
	// 2046076
	HandlerId *int64 `json:"HandlerId,omitempty" xml:"HandlerId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ClaimAlarmRequest) String() string {
	return tea.Prettify(s)
}

func (s ClaimAlarmRequest) GoString() string {
	return s.String()
}

func (s *ClaimAlarmRequest) SetAlarmId(v int64) *ClaimAlarmRequest {
	s.AlarmId = &v
	return s
}

func (s *ClaimAlarmRequest) SetHandlerId(v int64) *ClaimAlarmRequest {
	s.HandlerId = &v
	return s
}

func (s *ClaimAlarmRequest) SetRegionId(v string) *ClaimAlarmRequest {
	s.RegionId = &v
	return s
}

type ClaimAlarmResponseBody struct {
	// example:
	//
	// 200
	Code *int64 `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 6A9AEA84-7186-4D8D-B498-4585C6A2****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Result *bool `json:"Result,omitempty" xml:"Result,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ClaimAlarmResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ClaimAlarmResponseBody) GoString() string {
	return s.String()
}

func (s *ClaimAlarmResponseBody) SetCode(v int64) *ClaimAlarmResponseBody {
	s.Code = &v
	return s
}

func (s *ClaimAlarmResponseBody) SetMessage(v string) *ClaimAlarmResponseBody {
	s.Message = &v
	return s
}

func (s *ClaimAlarmResponseBody) SetRequestId(v string) *ClaimAlarmResponseBody {
	s.RequestId = &v
	return s
}

func (s *ClaimAlarmResponseBody) SetResult(v bool) *ClaimAlarmResponseBody {
	s.Result = &v
	return s
}

func (s *ClaimAlarmResponseBody) SetSuccess(v bool) *ClaimAlarmResponseBody {
	s.Success = &v
	return s
}

type ClaimAlarmResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ClaimAlarmResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ClaimAlarmResponse) String() string {
	return tea.Prettify(s)
}

func (s ClaimAlarmResponse) GoString() string {
	return s.String()
}

func (s *ClaimAlarmResponse) SetHeaders(v map[string]*string) *ClaimAlarmResponse {
	s.Headers = v
	return s
}

func (s *ClaimAlarmResponse) SetStatusCode(v int32) *ClaimAlarmResponse {
	s.StatusCode = &v
	return s
}

func (s *ClaimAlarmResponse) SetBody(v *ClaimAlarmResponseBody) *ClaimAlarmResponse {
	s.Body = v
	return s
}

type CloseAlarmRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 163
	AlarmId *int64 `json:"AlarmId,omitempty" xml:"AlarmId,omitempty"`
	// example:
	//
	// 2048065
	HandlerId *int64 `json:"HandlerId,omitempty" xml:"HandlerId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Solution *string `json:"Solution,omitempty" xml:"Solution,omitempty"`
}

func (s CloseAlarmRequest) String() string {
	return tea.Prettify(s)
}

func (s CloseAlarmRequest) GoString() string {
	return s.String()
}

func (s *CloseAlarmRequest) SetAlarmId(v int64) *CloseAlarmRequest {
	s.AlarmId = &v
	return s
}

func (s *CloseAlarmRequest) SetHandlerId(v int64) *CloseAlarmRequest {
	s.HandlerId = &v
	return s
}

func (s *CloseAlarmRequest) SetRegionId(v string) *CloseAlarmRequest {
	s.RegionId = &v
	return s
}

func (s *CloseAlarmRequest) SetSolution(v string) *CloseAlarmRequest {
	s.Solution = &v
	return s
}

type CloseAlarmResponseBody struct {
	// example:
	//
	// 200
	Code *int64 `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 46355DD8-FC56-40C5-BFC6-269DE4F9****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Result *bool `json:"Result,omitempty" xml:"Result,omitempty"`
	// example:
	//
	// True
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CloseAlarmResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CloseAlarmResponseBody) GoString() string {
	return s.String()
}

func (s *CloseAlarmResponseBody) SetCode(v int64) *CloseAlarmResponseBody {
	s.Code = &v
	return s
}

func (s *CloseAlarmResponseBody) SetMessage(v string) *CloseAlarmResponseBody {
	s.Message = &v
	return s
}

func (s *CloseAlarmResponseBody) SetRequestId(v string) *CloseAlarmResponseBody {
	s.RequestId = &v
	return s
}

func (s *CloseAlarmResponseBody) SetResult(v bool) *CloseAlarmResponseBody {
	s.Result = &v
	return s
}

func (s *CloseAlarmResponseBody) SetSuccess(v bool) *CloseAlarmResponseBody {
	s.Success = &v
	return s
}

type CloseAlarmResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CloseAlarmResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CloseAlarmResponse) String() string {
	return tea.Prettify(s)
}

func (s CloseAlarmResponse) GoString() string {
	return s.String()
}

func (s *CloseAlarmResponse) SetHeaders(v map[string]*string) *CloseAlarmResponse {
	s.Headers = v
	return s
}

func (s *CloseAlarmResponse) SetStatusCode(v int32) *CloseAlarmResponse {
	s.StatusCode = &v
	return s
}

func (s *CloseAlarmResponse) SetBody(v *CloseAlarmResponseBody) *CloseAlarmResponse {
	s.Body = v
	return s
}

type ConfigAppRequest struct {
	// The process identifier (PID) of the application. Separate multiple PIDs with commas (,).
	//
	// This parameter is required.
	//
	// example:
	//
	// iioe7jcnuk@582846f37******,atc889zkcf@d8deedfa9bf******
	AppIds *string `json:"AppIds,omitempty" xml:"AppIds,omitempty"`
	// Specifies whether to turn on or off the main switch of the ARMS agent. The monitoring stops after the switch is turned off. If you do not specify this parameter, the main switch status of the ARMS agent is queried.
	//
	// 	- `true`: turns on the switch
	//
	// 	- `false`: turns off the switch
	//
	// example:
	//
	// true
	Enable *string `json:"Enable,omitempty" xml:"Enable,omitempty"`
	// The region ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The type of the application. Set the value to **TRACE**.
	//
	// example:
	//
	// TRACE
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ConfigAppRequest) String() string {
	return tea.Prettify(s)
}

func (s ConfigAppRequest) GoString() string {
	return s.String()
}

func (s *ConfigAppRequest) SetAppIds(v string) *ConfigAppRequest {
	s.AppIds = &v
	return s
}

func (s *ConfigAppRequest) SetEnable(v string) *ConfigAppRequest {
	s.Enable = &v
	return s
}

func (s *ConfigAppRequest) SetRegionId(v string) *ConfigAppRequest {
	s.RegionId = &v
	return s
}

func (s *ConfigAppRequest) SetType(v string) *ConfigAppRequest {
	s.Type = &v
	return s
}

type ConfigAppResponseBody struct {
	// The result of turning on or off the main switch of the ARMS agent or the main switch status of the ARMS agent. Indicates whether the request was successful. Valid values: success failed The main switch status of the ARMS agent. Valid values: true false
	//
	// example:
	//
	// abc@def success\\nghi@jkl success\\n
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 16AF921B-8187-489F-9913-43C808B4****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ConfigAppResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ConfigAppResponseBody) GoString() string {
	return s.String()
}

func (s *ConfigAppResponseBody) SetData(v string) *ConfigAppResponseBody {
	s.Data = &v
	return s
}

func (s *ConfigAppResponseBody) SetRequestId(v string) *ConfigAppResponseBody {
	s.RequestId = &v
	return s
}

type ConfigAppResponse struct {
	Headers    map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ConfigAppResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ConfigAppResponse) String() string {
	return tea.Prettify(s)
}

func (s ConfigAppResponse) GoString() string {
	return s.String()
}

func (s *ConfigAppResponse) SetHeaders(v map[string]*string) *ConfigAppResponse {
	s.Headers = v
	return s
}

func (s *ConfigAppResponse) SetStatusCode(v int32) *ConfigAppResponse {
	s.StatusCode = &v
	return s
}

func (s *ConfigAppResponse) SetBody(v *ConfigAppResponseBody) *ConfigAppResponse {
	s.Body = v
	return s
}

type CreateAlertContactRequest struct {
	// The name of the alert contact.
	//
	// example:
	//
	// JohnDoe
	ContactName *string `json:"ContactName,omitempty" xml:"ContactName,omitempty"`
	// The webhook URL of the DingTalk chatbot. For more information about how to obtain the URL, see [Configure a DingTalk chatbot to send alert notifications](https://www.alibabacloud.com/help/zh/doc-detail/106247.htm). You must specify at least one of the following parameters: PhoneNum, Email, and DingRobotWebhookUrl.
	//
	// >  Enter `alert` in the custom keyword field of DingTalk chatbot security settings.
	//
	// example:
	//
	// https://oapi.dingtalk.com/robot/send?access_token=91f2f6****
	DingRobotWebhookUrl *string `json:"DingRobotWebhookUrl,omitempty" xml:"DingRobotWebhookUrl,omitempty"`
	// The email address of the alert contact. You must specify at least one of the following parameters: PhoneNum, Email, and DingRobotWebhookUrl.
	//
	// example:
	//
	// someone@example.com
	Email *string `json:"Email,omitempty" xml:"Email,omitempty"`
	// The mobile number of the alert contact. You must specify at least one of the following parameters: PhoneNum, Email, and DingRobotWebhookUrl.
	//
	// example:
	//
	// 1381111****
	PhoneNum *string `json:"PhoneNum,omitempty" xml:"PhoneNum,omitempty"`
	// The ID of the region. Set the value to `cn-hangzhou`.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the resource group. You can obtain the resource group ID in the **Resource Management*	- console.
	//
	// example:
	//
	// rg-aek2eq4peca****
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	// Specifies whether the alert contact receives system notifications. Valid values:
	//
	// 	- `true`: The alert contact receives system notifications.
	//
	// 	- `false`: The alert contact does not receive system notifications.
	//
	// example:
	//
	// true
	SystemNoc *bool `json:"SystemNoc,omitempty" xml:"SystemNoc,omitempty"`
}

func (s CreateAlertContactRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateAlertContactRequest) GoString() string {
	return s.String()
}

func (s *CreateAlertContactRequest) SetContactName(v string) *CreateAlertContactRequest {
	s.ContactName = &v
	return s
}

func (s *CreateAlertContactRequest) SetDingRobotWebhookUrl(v string) *CreateAlertContactRequest {
	s.DingRobotWebhookUrl = &v
	return s
}

func (s *CreateAlertContactRequest) SetEmail(v string) *CreateAlertContactRequest {
	s.Email = &v
	return s
}

func (s *CreateAlertContactRequest) SetPhoneNum(v string) *CreateAlertContactRequest {
	s.PhoneNum = &v
	return s
}

func (s *CreateAlertContactRequest) SetRegionId(v string) *CreateAlertContactRequest {
	s.RegionId = &v
	return s
}

func (s *CreateAlertContactRequest) SetResourceGroupId(v string) *CreateAlertContactRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *CreateAlertContactRequest) SetSystemNoc(v bool) *CreateAlertContactRequest {
	s.SystemNoc = &v
	return s
}

type CreateAlertContactResponseBody struct {
	// The ID of the alert contact.
	//
	// example:
	//
	// 102**
	ContactId *string `json:"ContactId,omitempty" xml:"ContactId,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// E9C9DA3D-10FE-472E-9EEF-2D0A3E41****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateAlertContactResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateAlertContactResponseBody) GoString() string {
	return s.String()
}

func (s *CreateAlertContactResponseBody) SetContactId(v string) *CreateAlertContactResponseBody {
	s.ContactId = &v
	return s
}

func (s *CreateAlertContactResponseBody) SetRequestId(v string) *CreateAlertContactResponseBody {
	s.RequestId = &v
	return s
}

type CreateAlertContactResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateAlertContactResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateAlertContactResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateAlertContactResponse) GoString() string {
	return s.String()
}

func (s *CreateAlertContactResponse) SetHeaders(v map[string]*string) *CreateAlertContactResponse {
	s.Headers = v
	return s
}

func (s *CreateAlertContactResponse) SetStatusCode(v int32) *CreateAlertContactResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateAlertContactResponse) SetBody(v *CreateAlertContactResponseBody) *CreateAlertContactResponse {
	s.Body = v
	return s
}

type CreateAlertContactGroupRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// TestGroup
	ContactGroupName *string `json:"ContactGroupName,omitempty" xml:"ContactGroupName,omitempty"`
	// example:
	//
	// 12	- 23	- 34*
	ContactIds *string `json:"ContactIds,omitempty" xml:"ContactIds,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s CreateAlertContactGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateAlertContactGroupRequest) GoString() string {
	return s.String()
}

func (s *CreateAlertContactGroupRequest) SetContactGroupName(v string) *CreateAlertContactGroupRequest {
	s.ContactGroupName = &v
	return s
}

func (s *CreateAlertContactGroupRequest) SetContactIds(v string) *CreateAlertContactGroupRequest {
	s.ContactIds = &v
	return s
}

func (s *CreateAlertContactGroupRequest) SetRegionId(v string) *CreateAlertContactGroupRequest {
	s.RegionId = &v
	return s
}

type CreateAlertContactGroupResponseBody struct {
	// example:
	//
	// 446*
	ContactGroupId *string `json:"ContactGroupId,omitempty" xml:"ContactGroupId,omitempty"`
	// example:
	//
	// 70675725-8F11-4817-8106-CFE0AD71****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateAlertContactGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateAlertContactGroupResponseBody) GoString() string {
	return s.String()
}

func (s *CreateAlertContactGroupResponseBody) SetContactGroupId(v string) *CreateAlertContactGroupResponseBody {
	s.ContactGroupId = &v
	return s
}

func (s *CreateAlertContactGroupResponseBody) SetRequestId(v string) *CreateAlertContactGroupResponseBody {
	s.RequestId = &v
	return s
}

type CreateAlertContactGroupResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateAlertContactGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateAlertContactGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateAlertContactGroupResponse) GoString() string {
	return s.String()
}

func (s *CreateAlertContactGroupResponse) SetHeaders(v map[string]*string) *CreateAlertContactGroupResponse {
	s.Headers = v
	return s
}

func (s *CreateAlertContactGroupResponse) SetStatusCode(v int32) *CreateAlertContactGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateAlertContactGroupResponse) SetBody(v *CreateAlertContactGroupResponseBody) *CreateAlertContactGroupResponse {
	s.Body = v
	return s
}

type CreateDispatchRuleRequest struct {
	// ## Additional information about the **DispatchRule*	- parameter
	//
	// **JSON string example and description**
	//
	// ```
	//
	// {
	//
	//   "system": false,        // Specifies whether the dispatch rule is editable. Valid values: true: not editable. false: editable.
	//
	//   "ruleid": 10282,           // The ID of the dispatch rule.
	//
	//   "name": "Prometheus Alert",   // The name of the dispatch policy.
	//
	//   "labelMatchExpressionGrid": {
	//
	//     "labelMatchExpressionGroups": [     // Sets the dispatch rule.
	//
	//       {
	//
	//         "labelMatchExpressions": [
	//
	//           {
	//
	//             "key": "_aliyun_arms_involvedObject_kind", // The key of the tag of the dispatch rule. For more information, see the next section.
	//
	//             "value": "app",                              // The value of the tag.
	//
	//             "operator": "eq"                             // The operator used in the dispatch rule. Valid values: eq: equals to. re: matches a regular expression.
	//
	//           }
	//
	//         ]
	//
	//       }
	//
	//     ]
	//
	//   },
	//
	//   "dispatchType": "CREATE_ALERT/DISCARD_ALERT",    // The alert handling method. Valid values: CREATE_ALERT: generates an alert. DISCARD_ALERT: discards the alert event and generates no alert.
	//
	//   "isRecover": true,               // Specifies whether to send the restored alert. Valid values: true: sends the alert. false: does not send the alert.
	//
	//   "groupRules": [                  // Sets the event group.
	//
	//     {
	//
	//       "groupId": 1,               // The ID of the group.
	//
	//       "groupingFields": [         // The fields that are used to group events. Events with the same field content are assigned to a group. Alerts with the same specified grouping field are sent to the handler in separate notifications.
	//
	//         "alertname"
	//
	//       ],
	//
	//       "groupWait": 10,                 // The duration for which the system waits after the first alert is sent. After the duration, all alerts are sent in a single notification to the handler.
	//
	//       "groupInterval": 15,             // The grouping interval. During the silence period of repeated alerts, if new alerts are generated, they will be sent after the group waiting time.
	//
	//       "repeatInterval": 20             // The silence period of repeated alerts. All alerts are repeatedly sent at specified intervals until the alerts are cleared.
	//
	//     }
	//
	//   ],
	//
	//   "notifyRules": [            // Sets the notification rule.
	//
	//     {
	//
	//       "notifyObjects": [
	//
	//         {
	//
	//           "notifyType": "ARMS_CONTACT",     // The type of the alert contact. Valid values: ARMS_CONTACT: contact. ARMS_CONTACT_GROUP: contact group.
	//
	//           "name": "JohnDoe",                // The name of the contact or contact group.
	//
	//           "notifyObjectId": 1               // The ID of the contact or contact group.
	//
	//         },
	//
	//         {
	//
	//           "notifyType": "ARMS_CONTACT_GROUP",
	//
	//           "name": "JohnDoe_group",
	//
	//           "notifyObjectId": 2
	//
	//         }
	//
	//       ],
	//
	//       "notifyChannels":["dingTalk","wechat","webhook","email"]     // The notification method. Valid values: dingTalk, sms, webhook, email, and wechat.
	//
	//     },
	//
	//   ],
	//
	// }
	//
	// ```
	//
	// **Enumerated keys of the tag of the dispatch rule**
	//
	// 	- `_aliyun_arms_userid`: user ID
	//
	// 	- `_aliyun_arms_involvedObject_kind`: type of the associated object
	//
	// 	- `_aliyun_arms_involvedObject_id`: ID of the associated object
	//
	// 	- `_aliyun_arms_involvedObject_name`: name of the associated object
	//
	// 	- `_aliyun_arms_alert_name`: alert name
	//
	// 	- `_aliyun_arms_alert_rule_id`: alert rule ID
	//
	// 	- `_aliyun_arms_alert_type`: alert type
	//
	// 	- `_aliyun_arms_alert_level`: alert severity
	//
	// This parameter is required.
	//
	// example:
	//
	// {   "system": false,   "ruleid": 10282,   "name": "Prometheus Alert",   "labelMatchExpressionGrid": {     "labelMatchExpressionGroups": [       {         "labelMatchExpressions": [           {             "key": "_aliyun_arms_involvedObject_kind",             "value": "app",             "operator": "eq"           }         ]       }     ]   },   "dispatchType": "CREATE_ALERT/DISCARD_ALERT",   "isRecover": true,   "groupRules": [     {       "groupId": 1,       "groupingFields": [         "alertname"       ],       "groupWait": 10,       "groupInterval": 15,       "repeatInterval": 20     }   ],   "notifyRules": [     {       "notifyObjects": [         {           "notifyType": "ARMS_CONTACT",           "name": "JohnDoe",           "notifyObjectId": 1         },         {           "notifyType": "ARMS_CONTACT_GROUP",           "name": "JohnDoe_group",           "notifyObjectId": 2         }       ],       "notifyChannels":["dingTalk","wechat","webhook","email"]     },   ], }
	DispatchRule *string `json:"DispatchRule,omitempty" xml:"DispatchRule,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s CreateDispatchRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDispatchRuleRequest) GoString() string {
	return s.String()
}

func (s *CreateDispatchRuleRequest) SetDispatchRule(v string) *CreateDispatchRuleRequest {
	s.DispatchRule = &v
	return s
}

func (s *CreateDispatchRuleRequest) SetRegionId(v string) *CreateDispatchRuleRequest {
	s.RegionId = &v
	return s
}

type CreateDispatchRuleResponseBody struct {
	// example:
	//
	// 10413
	DispatchRuleId *int64 `json:"DispatchRuleId,omitempty" xml:"DispatchRuleId,omitempty"`
	// example:
	//
	// A5EC8221-08F2-4C95-9AF1-49FD998C****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateDispatchRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateDispatchRuleResponseBody) GoString() string {
	return s.String()
}

func (s *CreateDispatchRuleResponseBody) SetDispatchRuleId(v int64) *CreateDispatchRuleResponseBody {
	s.DispatchRuleId = &v
	return s
}

func (s *CreateDispatchRuleResponseBody) SetRequestId(v string) *CreateDispatchRuleResponseBody {
	s.RequestId = &v
	return s
}

type CreateDispatchRuleResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateDispatchRuleResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateDispatchRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDispatchRuleResponse) GoString() string {
	return s.String()
}

func (s *CreateDispatchRuleResponse) SetHeaders(v map[string]*string) *CreateDispatchRuleResponse {
	s.Headers = v
	return s
}

func (s *CreateDispatchRuleResponse) SetStatusCode(v int32) *CreateDispatchRuleResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateDispatchRuleResponse) SetBody(v *CreateDispatchRuleResponseBody) *CreateDispatchRuleResponse {
	s.Body = v
	return s
}

type CreateEnvCustomJobRequest struct {
	// The language. Valid values: zh and en. Default value: zh.
	//
	// example:
	//
	// zh
	AliyunLang *string `json:"AliyunLang,omitempty" xml:"AliyunLang,omitempty"`
	// The YAML configuration string of the custom job.
	//
	// This parameter is required.
	//
	// example:
	//
	// Refer to supplementary instructions.
	ConfigYaml *string `json:"ConfigYaml,omitempty" xml:"ConfigYaml,omitempty"`
	// The name of the custom job.
	//
	// This parameter is required.
	//
	// example:
	//
	// customJob1
	CustomJobName *string `json:"CustomJobName,omitempty" xml:"CustomJobName,omitempty"`
	// The ID of the environment instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// env-xxxxxx
	EnvironmentId *string `json:"EnvironmentId,omitempty" xml:"EnvironmentId,omitempty"`
	// The region ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s CreateEnvCustomJobRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateEnvCustomJobRequest) GoString() string {
	return s.String()
}

func (s *CreateEnvCustomJobRequest) SetAliyunLang(v string) *CreateEnvCustomJobRequest {
	s.AliyunLang = &v
	return s
}

func (s *CreateEnvCustomJobRequest) SetConfigYaml(v string) *CreateEnvCustomJobRequest {
	s.ConfigYaml = &v
	return s
}

func (s *CreateEnvCustomJobRequest) SetCustomJobName(v string) *CreateEnvCustomJobRequest {
	s.CustomJobName = &v
	return s
}

func (s *CreateEnvCustomJobRequest) SetEnvironmentId(v string) *CreateEnvCustomJobRequest {
	s.EnvironmentId = &v
	return s
}

func (s *CreateEnvCustomJobRequest) SetRegionId(v string) *CreateEnvCustomJobRequest {
	s.RegionId = &v
	return s
}

type CreateEnvCustomJobResponseBody struct {
	// The HTTP status code. The status code 200 indicates that the request was successful. Other status codes indicate that the request failed.
	//
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The name of the custom job that was created, or the exception information.
	//
	// example:
	//
	// cutomJob1
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// The returned message.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 4C518054-852F-4023-ABC1-4AF95FF7****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateEnvCustomJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateEnvCustomJobResponseBody) GoString() string {
	return s.String()
}

func (s *CreateEnvCustomJobResponseBody) SetCode(v int32) *CreateEnvCustomJobResponseBody {
	s.Code = &v
	return s
}

func (s *CreateEnvCustomJobResponseBody) SetData(v string) *CreateEnvCustomJobResponseBody {
	s.Data = &v
	return s
}

func (s *CreateEnvCustomJobResponseBody) SetMessage(v string) *CreateEnvCustomJobResponseBody {
	s.Message = &v
	return s
}

func (s *CreateEnvCustomJobResponseBody) SetRequestId(v string) *CreateEnvCustomJobResponseBody {
	s.RequestId = &v
	return s
}

type CreateEnvCustomJobResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateEnvCustomJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateEnvCustomJobResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateEnvCustomJobResponse) GoString() string {
	return s.String()
}

func (s *CreateEnvCustomJobResponse) SetHeaders(v map[string]*string) *CreateEnvCustomJobResponse {
	s.Headers = v
	return s
}

func (s *CreateEnvCustomJobResponse) SetStatusCode(v int32) *CreateEnvCustomJobResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateEnvCustomJobResponse) SetBody(v *CreateEnvCustomJobResponseBody) *CreateEnvCustomJobResponse {
	s.Body = v
	return s
}

type CreateEnvPodMonitorRequest struct {
	// The language. Valid values: zh and en. Default value: zh.
	//
	// example:
	//
	// zh
	AliyunLang *string `json:"AliyunLang,omitempty" xml:"AliyunLang,omitempty"`
	// The YAML configuration string of the PodMonitor.
	//
	// This parameter is required.
	//
	// example:
	//
	// Refer to supplementary instructions.
	ConfigYaml *string `json:"ConfigYaml,omitempty" xml:"ConfigYaml,omitempty"`
	// Specifies whether to perform only a dry run, without performing the actual request.
	//
	// example:
	//
	// true
	DryRun *bool `json:"DryRun,omitempty" xml:"DryRun,omitempty"`
	// The ID of the environment instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// env-xxxxxx
	EnvironmentId *string `json:"EnvironmentId,omitempty" xml:"EnvironmentId,omitempty"`
	// The region ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s CreateEnvPodMonitorRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateEnvPodMonitorRequest) GoString() string {
	return s.String()
}

func (s *CreateEnvPodMonitorRequest) SetAliyunLang(v string) *CreateEnvPodMonitorRequest {
	s.AliyunLang = &v
	return s
}

func (s *CreateEnvPodMonitorRequest) SetConfigYaml(v string) *CreateEnvPodMonitorRequest {
	s.ConfigYaml = &v
	return s
}

func (s *CreateEnvPodMonitorRequest) SetDryRun(v bool) *CreateEnvPodMonitorRequest {
	s.DryRun = &v
	return s
}

func (s *CreateEnvPodMonitorRequest) SetEnvironmentId(v string) *CreateEnvPodMonitorRequest {
	s.EnvironmentId = &v
	return s
}

func (s *CreateEnvPodMonitorRequest) SetRegionId(v string) *CreateEnvPodMonitorRequest {
	s.RegionId = &v
	return s
}

type CreateEnvPodMonitorResponseBody struct {
	// The HTTP status code. The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned result, which indicates whether the operation was successful.
	Data *CreateEnvPodMonitorResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// example:
	//
	// message
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 78901766-3806-4E96-8E47-CFEF59E4****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateEnvPodMonitorResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateEnvPodMonitorResponseBody) GoString() string {
	return s.String()
}

func (s *CreateEnvPodMonitorResponseBody) SetCode(v int32) *CreateEnvPodMonitorResponseBody {
	s.Code = &v
	return s
}

func (s *CreateEnvPodMonitorResponseBody) SetData(v *CreateEnvPodMonitorResponseBodyData) *CreateEnvPodMonitorResponseBody {
	s.Data = v
	return s
}

func (s *CreateEnvPodMonitorResponseBody) SetMessage(v string) *CreateEnvPodMonitorResponseBody {
	s.Message = &v
	return s
}

func (s *CreateEnvPodMonitorResponseBody) SetRequestId(v string) *CreateEnvPodMonitorResponseBody {
	s.RequestId = &v
	return s
}

type CreateEnvPodMonitorResponseBodyData struct {
	// Indicates whether targets are matched.
	//
	// example:
	//
	// Match successful.
	MatchedMsg *string `json:"MatchedMsg,omitempty" xml:"MatchedMsg,omitempty"`
	// The number of matched targets.
	//
	// example:
	//
	// 1
	MatchedTargetCount *string `json:"MatchedTargetCount,omitempty" xml:"MatchedTargetCount,omitempty"`
	// The namespace.
	//
	// example:
	//
	// arms-prom
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// The name of the created PodMonitor.
	//
	// example:
	//
	// arms-admin-pm1
	PodMonitorName *string `json:"PodMonitorName,omitempty" xml:"PodMonitorName,omitempty"`
}

func (s CreateEnvPodMonitorResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s CreateEnvPodMonitorResponseBodyData) GoString() string {
	return s.String()
}

func (s *CreateEnvPodMonitorResponseBodyData) SetMatchedMsg(v string) *CreateEnvPodMonitorResponseBodyData {
	s.MatchedMsg = &v
	return s
}

func (s *CreateEnvPodMonitorResponseBodyData) SetMatchedTargetCount(v string) *CreateEnvPodMonitorResponseBodyData {
	s.MatchedTargetCount = &v
	return s
}

func (s *CreateEnvPodMonitorResponseBodyData) SetNamespace(v string) *CreateEnvPodMonitorResponseBodyData {
	s.Namespace = &v
	return s
}

func (s *CreateEnvPodMonitorResponseBodyData) SetPodMonitorName(v string) *CreateEnvPodMonitorResponseBodyData {
	s.PodMonitorName = &v
	return s
}

type CreateEnvPodMonitorResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateEnvPodMonitorResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateEnvPodMonitorResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateEnvPodMonitorResponse) GoString() string {
	return s.String()
}

func (s *CreateEnvPodMonitorResponse) SetHeaders(v map[string]*string) *CreateEnvPodMonitorResponse {
	s.Headers = v
	return s
}

func (s *CreateEnvPodMonitorResponse) SetStatusCode(v int32) *CreateEnvPodMonitorResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateEnvPodMonitorResponse) SetBody(v *CreateEnvPodMonitorResponseBody) *CreateEnvPodMonitorResponse {
	s.Body = v
	return s
}

type CreateEnvServiceMonitorRequest struct {
	// The language. Valid values: zh and en. Default value: zh.
	//
	// example:
	//
	// zh
	AliyunLang *string `json:"AliyunLang,omitempty" xml:"AliyunLang,omitempty"`
	// The YAML configuration string of the ServiceMonitor.
	//
	// This parameter is required.
	//
	// example:
	//
	// Refer to supplementary instructions.
	ConfigYaml *string `json:"ConfigYaml,omitempty" xml:"ConfigYaml,omitempty"`
	// Specifies whether to perform only a dry run, without performing the actual request.
	//
	// example:
	//
	// true
	DryRun *bool `json:"DryRun,omitempty" xml:"DryRun,omitempty"`
	// The ID of the environment instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// env-xxxxxx
	EnvironmentId *string `json:"EnvironmentId,omitempty" xml:"EnvironmentId,omitempty"`
	// The region ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s CreateEnvServiceMonitorRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateEnvServiceMonitorRequest) GoString() string {
	return s.String()
}

func (s *CreateEnvServiceMonitorRequest) SetAliyunLang(v string) *CreateEnvServiceMonitorRequest {
	s.AliyunLang = &v
	return s
}

func (s *CreateEnvServiceMonitorRequest) SetConfigYaml(v string) *CreateEnvServiceMonitorRequest {
	s.ConfigYaml = &v
	return s
}

func (s *CreateEnvServiceMonitorRequest) SetDryRun(v bool) *CreateEnvServiceMonitorRequest {
	s.DryRun = &v
	return s
}

func (s *CreateEnvServiceMonitorRequest) SetEnvironmentId(v string) *CreateEnvServiceMonitorRequest {
	s.EnvironmentId = &v
	return s
}

func (s *CreateEnvServiceMonitorRequest) SetRegionId(v string) *CreateEnvServiceMonitorRequest {
	s.RegionId = &v
	return s
}

type CreateEnvServiceMonitorResponseBody struct {
	// The HTTP status code. The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned struct.
	Data *CreateEnvServiceMonitorResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// example:
	//
	// message
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 78901766-3806-4E96-8E47-CFEF59E4****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateEnvServiceMonitorResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateEnvServiceMonitorResponseBody) GoString() string {
	return s.String()
}

func (s *CreateEnvServiceMonitorResponseBody) SetCode(v int32) *CreateEnvServiceMonitorResponseBody {
	s.Code = &v
	return s
}

func (s *CreateEnvServiceMonitorResponseBody) SetData(v *CreateEnvServiceMonitorResponseBodyData) *CreateEnvServiceMonitorResponseBody {
	s.Data = v
	return s
}

func (s *CreateEnvServiceMonitorResponseBody) SetMessage(v string) *CreateEnvServiceMonitorResponseBody {
	s.Message = &v
	return s
}

func (s *CreateEnvServiceMonitorResponseBody) SetRequestId(v string) *CreateEnvServiceMonitorResponseBody {
	s.RequestId = &v
	return s
}

type CreateEnvServiceMonitorResponseBodyData struct {
	// Indicates whether targets are matched.
	//
	// example:
	//
	// Match successful.
	MatchedMsg *string `json:"MatchedMsg,omitempty" xml:"MatchedMsg,omitempty"`
	// The number of matched targets.
	//
	// example:
	//
	// 1
	MatchedTargetCount *int32 `json:"MatchedTargetCount,omitempty" xml:"MatchedTargetCount,omitempty"`
	// The namespace.
	//
	// example:
	//
	// arms-prom
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// The name of the created ServiceMonitor.
	//
	// example:
	//
	// arms-admin1
	ServiceMonitorName *string `json:"ServiceMonitorName,omitempty" xml:"ServiceMonitorName,omitempty"`
}

func (s CreateEnvServiceMonitorResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s CreateEnvServiceMonitorResponseBodyData) GoString() string {
	return s.String()
}

func (s *CreateEnvServiceMonitorResponseBodyData) SetMatchedMsg(v string) *CreateEnvServiceMonitorResponseBodyData {
	s.MatchedMsg = &v
	return s
}

func (s *CreateEnvServiceMonitorResponseBodyData) SetMatchedTargetCount(v int32) *CreateEnvServiceMonitorResponseBodyData {
	s.MatchedTargetCount = &v
	return s
}

func (s *CreateEnvServiceMonitorResponseBodyData) SetNamespace(v string) *CreateEnvServiceMonitorResponseBodyData {
	s.Namespace = &v
	return s
}

func (s *CreateEnvServiceMonitorResponseBodyData) SetServiceMonitorName(v string) *CreateEnvServiceMonitorResponseBodyData {
	s.ServiceMonitorName = &v
	return s
}

type CreateEnvServiceMonitorResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateEnvServiceMonitorResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateEnvServiceMonitorResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateEnvServiceMonitorResponse) GoString() string {
	return s.String()
}

func (s *CreateEnvServiceMonitorResponse) SetHeaders(v map[string]*string) *CreateEnvServiceMonitorResponse {
	s.Headers = v
	return s
}

func (s *CreateEnvServiceMonitorResponse) SetStatusCode(v int32) *CreateEnvServiceMonitorResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateEnvServiceMonitorResponse) SetBody(v *CreateEnvServiceMonitorResponseBody) *CreateEnvServiceMonitorResponse {
	s.Body = v
	return s
}

type CreateEnvironmentRequest struct {
	// The language. Default value: zh.
	//
	// Valid values:
	//
	// 	- en
	//
	//     <!-- -->
	//
	//     :
	//
	//     <!-- -->
	//
	//     English
	//
	//     <!-- -->
	//
	//     .
	//
	// 	- zh
	//
	//     <!-- -->
	//
	//     :
	//
	//     <!-- -->
	//
	//     Chinese
	//
	//     <!-- -->
	//
	//     .
	//
	// example:
	//
	// zh
	AliyunLang *string `json:"AliyunLang,omitempty" xml:"AliyunLang,omitempty"`
	// The ID of the resource bound to the environment, such as the container ID or VPC ID. For a Cloud environment, specify the region ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// c6e9dec475dca4a50a188411d8cbxxx
	BindResourceId *string `json:"BindResourceId,omitempty" xml:"BindResourceId,omitempty"`
	// The name of the environment.
	//
	// This parameter is required.
	//
	// example:
	//
	// env1
	EnvironmentName *string `json:"EnvironmentName,omitempty" xml:"EnvironmentName,omitempty"`
	// The subtype of the environment. Valid values:
	//
	// 	- CS: ACK
	//
	// 	- ECS: ECS
	//
	// 	- Cloud: cloud service
	//
	// This parameter is required.
	//
	// example:
	//
	// ECS, ACK, etc.
	EnvironmentSubType *string `json:"EnvironmentSubType,omitempty" xml:"EnvironmentSubType,omitempty"`
	// The type of the environment. Valid values:
	//
	// 	- CS: ACK
	//
	// 	- ECS: ECS
	//
	// 	- Cloud: cloud service
	//
	// This parameter is required.
	//
	// example:
	//
	// CS
	EnvironmentType *string `json:"EnvironmentType,omitempty" xml:"EnvironmentType,omitempty"`
	// The payable resource plan. Valid values:
	//
	// 	- If the EnvironmentType parameter is set to CS, set the value to CS_Basic or CS_Pro. Default value: CS_Basic.
	//
	// 	- Otherwise, leave the parameter empty.
	//
	// example:
	//
	// CS_Basic
	FeePackage *string `json:"FeePackage,omitempty" xml:"FeePackage,omitempty"`
	// 环境绑定的grafana工作区id。传空时，表示使用默认的共享grafana。
	//
	// if can be null:
	// true
	GrafanaWorkspaceId *string `json:"GrafanaWorkspaceId,omitempty" xml:"GrafanaWorkspaceId,omitempty"`
	// Specifies whether agents or exporters are managed. Valid values:
	//
	// 	- none: No. By default, no managed agents or exporters are provided for ACK clusters.
	//
	// 	- agent: Agents are managed. By default, managed agents are provided for ASK clusters, ACS clusters, and ACK One clusters.
	//
	// 	- agent-exporter: Agents and exporters are managed. By default, managed agents and exporters are provided for cloud services.
	//
	// example:
	//
	// none
	ManagedType *string `json:"ManagedType,omitempty" xml:"ManagedType,omitempty"`
	// The ID of the Prometheus instance. If no Prometheus instance is created, call the InitEnvironment operation.
	//
	// example:
	//
	// c6e9dec475dca4a50a188411d8cbxxx
	PrometheusInstanceId *string `json:"PrometheusInstanceId,omitempty" xml:"PrometheusInstanceId,omitempty"`
	// The region ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the resource group.
	//
	// if can be null:
	// true
	//
	// example:
	//
	// rg-acfmxyexli2****
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	// The tags of the instance. You can specify this parameter to manage tags for the instance.
	Tags []*CreateEnvironmentRequestTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
}

func (s CreateEnvironmentRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateEnvironmentRequest) GoString() string {
	return s.String()
}

func (s *CreateEnvironmentRequest) SetAliyunLang(v string) *CreateEnvironmentRequest {
	s.AliyunLang = &v
	return s
}

func (s *CreateEnvironmentRequest) SetBindResourceId(v string) *CreateEnvironmentRequest {
	s.BindResourceId = &v
	return s
}

func (s *CreateEnvironmentRequest) SetEnvironmentName(v string) *CreateEnvironmentRequest {
	s.EnvironmentName = &v
	return s
}

func (s *CreateEnvironmentRequest) SetEnvironmentSubType(v string) *CreateEnvironmentRequest {
	s.EnvironmentSubType = &v
	return s
}

func (s *CreateEnvironmentRequest) SetEnvironmentType(v string) *CreateEnvironmentRequest {
	s.EnvironmentType = &v
	return s
}

func (s *CreateEnvironmentRequest) SetFeePackage(v string) *CreateEnvironmentRequest {
	s.FeePackage = &v
	return s
}

func (s *CreateEnvironmentRequest) SetGrafanaWorkspaceId(v string) *CreateEnvironmentRequest {
	s.GrafanaWorkspaceId = &v
	return s
}

func (s *CreateEnvironmentRequest) SetManagedType(v string) *CreateEnvironmentRequest {
	s.ManagedType = &v
	return s
}

func (s *CreateEnvironmentRequest) SetPrometheusInstanceId(v string) *CreateEnvironmentRequest {
	s.PrometheusInstanceId = &v
	return s
}

func (s *CreateEnvironmentRequest) SetRegionId(v string) *CreateEnvironmentRequest {
	s.RegionId = &v
	return s
}

func (s *CreateEnvironmentRequest) SetResourceGroupId(v string) *CreateEnvironmentRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *CreateEnvironmentRequest) SetTags(v []*CreateEnvironmentRequestTags) *CreateEnvironmentRequest {
	s.Tags = v
	return s
}

type CreateEnvironmentRequestTags struct {
	// The tag key.
	//
	// example:
	//
	// TestKey
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The tag value.
	//
	// example:
	//
	// TestValue
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s CreateEnvironmentRequestTags) String() string {
	return tea.Prettify(s)
}

func (s CreateEnvironmentRequestTags) GoString() string {
	return s.String()
}

func (s *CreateEnvironmentRequestTags) SetKey(v string) *CreateEnvironmentRequestTags {
	s.Key = &v
	return s
}

func (s *CreateEnvironmentRequestTags) SetValue(v string) *CreateEnvironmentRequestTags {
	s.Value = &v
	return s
}

type CreateEnvironmentResponseBody struct {
	// The HTTP status code. The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The ID of the created environment.
	//
	// example:
	//
	// env-xxxxx
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// The returned message.
	//
	// example:
	//
	// message
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 16AF921B-8187-489F-9913-43C808B4****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateEnvironmentResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateEnvironmentResponseBody) GoString() string {
	return s.String()
}

func (s *CreateEnvironmentResponseBody) SetCode(v int32) *CreateEnvironmentResponseBody {
	s.Code = &v
	return s
}

func (s *CreateEnvironmentResponseBody) SetData(v string) *CreateEnvironmentResponseBody {
	s.Data = &v
	return s
}

func (s *CreateEnvironmentResponseBody) SetMessage(v string) *CreateEnvironmentResponseBody {
	s.Message = &v
	return s
}

func (s *CreateEnvironmentResponseBody) SetRequestId(v string) *CreateEnvironmentResponseBody {
	s.RequestId = &v
	return s
}

type CreateEnvironmentResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateEnvironmentResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateEnvironmentResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateEnvironmentResponse) GoString() string {
	return s.String()
}

func (s *CreateEnvironmentResponse) SetHeaders(v map[string]*string) *CreateEnvironmentResponse {
	s.Headers = v
	return s
}

func (s *CreateEnvironmentResponse) SetStatusCode(v int32) *CreateEnvironmentResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateEnvironmentResponse) SetBody(v *CreateEnvironmentResponseBody) *CreateEnvironmentResponse {
	s.Body = v
	return s
}

type CreateGrafanaWorkspaceRequest struct {
	// example:
	//
	// zh
	AliyunLang *string `json:"AliyunLang,omitempty" xml:"AliyunLang,omitempty"`
	// example:
	//
	// test
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 10.0.x
	GrafanaVersion *string `json:"GrafanaVersion,omitempty" xml:"GrafanaVersion,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// experts_edition
	GrafanaWorkspaceEdition *string `json:"GrafanaWorkspaceEdition,omitempty" xml:"GrafanaWorkspaceEdition,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// testgrafana
	GrafanaWorkspaceName *string `json:"GrafanaWorkspaceName,omitempty" xml:"GrafanaWorkspaceName,omitempty"`
	// example:
	//
	// Test123456!
	Password *string `json:"Password,omitempty" xml:"Password,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// example:
	//
	// rg-acfmxyexli2****
	ResourceGroupId *string                              `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	Tags            []*CreateGrafanaWorkspaceRequestTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
}

func (s CreateGrafanaWorkspaceRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateGrafanaWorkspaceRequest) GoString() string {
	return s.String()
}

func (s *CreateGrafanaWorkspaceRequest) SetAliyunLang(v string) *CreateGrafanaWorkspaceRequest {
	s.AliyunLang = &v
	return s
}

func (s *CreateGrafanaWorkspaceRequest) SetDescription(v string) *CreateGrafanaWorkspaceRequest {
	s.Description = &v
	return s
}

func (s *CreateGrafanaWorkspaceRequest) SetGrafanaVersion(v string) *CreateGrafanaWorkspaceRequest {
	s.GrafanaVersion = &v
	return s
}

func (s *CreateGrafanaWorkspaceRequest) SetGrafanaWorkspaceEdition(v string) *CreateGrafanaWorkspaceRequest {
	s.GrafanaWorkspaceEdition = &v
	return s
}

func (s *CreateGrafanaWorkspaceRequest) SetGrafanaWorkspaceName(v string) *CreateGrafanaWorkspaceRequest {
	s.GrafanaWorkspaceName = &v
	return s
}

func (s *CreateGrafanaWorkspaceRequest) SetPassword(v string) *CreateGrafanaWorkspaceRequest {
	s.Password = &v
	return s
}

func (s *CreateGrafanaWorkspaceRequest) SetRegionId(v string) *CreateGrafanaWorkspaceRequest {
	s.RegionId = &v
	return s
}

func (s *CreateGrafanaWorkspaceRequest) SetResourceGroupId(v string) *CreateGrafanaWorkspaceRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *CreateGrafanaWorkspaceRequest) SetTags(v []*CreateGrafanaWorkspaceRequestTags) *CreateGrafanaWorkspaceRequest {
	s.Tags = v
	return s
}

type CreateGrafanaWorkspaceRequestTags struct {
	// example:
	//
	// TestKey
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// example:
	//
	// TestValue
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s CreateGrafanaWorkspaceRequestTags) String() string {
	return tea.Prettify(s)
}

func (s CreateGrafanaWorkspaceRequestTags) GoString() string {
	return s.String()
}

func (s *CreateGrafanaWorkspaceRequestTags) SetKey(v string) *CreateGrafanaWorkspaceRequestTags {
	s.Key = &v
	return s
}

func (s *CreateGrafanaWorkspaceRequestTags) SetValue(v string) *CreateGrafanaWorkspaceRequestTags {
	s.Value = &v
	return s
}

type CreateGrafanaWorkspaceShrinkRequest struct {
	// example:
	//
	// zh
	AliyunLang *string `json:"AliyunLang,omitempty" xml:"AliyunLang,omitempty"`
	// example:
	//
	// test
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 10.0.x
	GrafanaVersion *string `json:"GrafanaVersion,omitempty" xml:"GrafanaVersion,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// experts_edition
	GrafanaWorkspaceEdition *string `json:"GrafanaWorkspaceEdition,omitempty" xml:"GrafanaWorkspaceEdition,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// testgrafana
	GrafanaWorkspaceName *string `json:"GrafanaWorkspaceName,omitempty" xml:"GrafanaWorkspaceName,omitempty"`
	// example:
	//
	// Test123456!
	Password *string `json:"Password,omitempty" xml:"Password,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// example:
	//
	// rg-acfmxyexli2****
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	TagsShrink      *string `json:"Tags,omitempty" xml:"Tags,omitempty"`
}

func (s CreateGrafanaWorkspaceShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateGrafanaWorkspaceShrinkRequest) GoString() string {
	return s.String()
}

func (s *CreateGrafanaWorkspaceShrinkRequest) SetAliyunLang(v string) *CreateGrafanaWorkspaceShrinkRequest {
	s.AliyunLang = &v
	return s
}

func (s *CreateGrafanaWorkspaceShrinkRequest) SetDescription(v string) *CreateGrafanaWorkspaceShrinkRequest {
	s.Description = &v
	return s
}

func (s *CreateGrafanaWorkspaceShrinkRequest) SetGrafanaVersion(v string) *CreateGrafanaWorkspaceShrinkRequest {
	s.GrafanaVersion = &v
	return s
}

func (s *CreateGrafanaWorkspaceShrinkRequest) SetGrafanaWorkspaceEdition(v string) *CreateGrafanaWorkspaceShrinkRequest {
	s.GrafanaWorkspaceEdition = &v
	return s
}

func (s *CreateGrafanaWorkspaceShrinkRequest) SetGrafanaWorkspaceName(v string) *CreateGrafanaWorkspaceShrinkRequest {
	s.GrafanaWorkspaceName = &v
	return s
}

func (s *CreateGrafanaWorkspaceShrinkRequest) SetPassword(v string) *CreateGrafanaWorkspaceShrinkRequest {
	s.Password = &v
	return s
}

func (s *CreateGrafanaWorkspaceShrinkRequest) SetRegionId(v string) *CreateGrafanaWorkspaceShrinkRequest {
	s.RegionId = &v
	return s
}

func (s *CreateGrafanaWorkspaceShrinkRequest) SetResourceGroupId(v string) *CreateGrafanaWorkspaceShrinkRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *CreateGrafanaWorkspaceShrinkRequest) SetTagsShrink(v string) *CreateGrafanaWorkspaceShrinkRequest {
	s.TagsShrink = &v
	return s
}

type CreateGrafanaWorkspaceResponseBody struct {
	// example:
	//
	// 200
	Code *int32            `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *GrafanaWorkspace `json:"Data,omitempty" xml:"Data,omitempty"`
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// D80ADAAC-8C32-5479-BD14-C28CF832****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// example:
	//
	// eac0a8048716731735000007137d000b
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s CreateGrafanaWorkspaceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateGrafanaWorkspaceResponseBody) GoString() string {
	return s.String()
}

func (s *CreateGrafanaWorkspaceResponseBody) SetCode(v int32) *CreateGrafanaWorkspaceResponseBody {
	s.Code = &v
	return s
}

func (s *CreateGrafanaWorkspaceResponseBody) SetData(v *GrafanaWorkspace) *CreateGrafanaWorkspaceResponseBody {
	s.Data = v
	return s
}

func (s *CreateGrafanaWorkspaceResponseBody) SetMessage(v string) *CreateGrafanaWorkspaceResponseBody {
	s.Message = &v
	return s
}

func (s *CreateGrafanaWorkspaceResponseBody) SetRequestId(v string) *CreateGrafanaWorkspaceResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateGrafanaWorkspaceResponseBody) SetSuccess(v bool) *CreateGrafanaWorkspaceResponseBody {
	s.Success = &v
	return s
}

func (s *CreateGrafanaWorkspaceResponseBody) SetTraceId(v string) *CreateGrafanaWorkspaceResponseBody {
	s.TraceId = &v
	return s
}

type CreateGrafanaWorkspaceResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateGrafanaWorkspaceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateGrafanaWorkspaceResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateGrafanaWorkspaceResponse) GoString() string {
	return s.String()
}

func (s *CreateGrafanaWorkspaceResponse) SetHeaders(v map[string]*string) *CreateGrafanaWorkspaceResponse {
	s.Headers = v
	return s
}

func (s *CreateGrafanaWorkspaceResponse) SetStatusCode(v int32) *CreateGrafanaWorkspaceResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateGrafanaWorkspaceResponse) SetBody(v *CreateGrafanaWorkspaceResponseBody) *CreateGrafanaWorkspaceResponse {
	s.Body = v
	return s
}

type CreateIntegrationRequest struct {
	// Specifies whether to automatically clear alert events. Default value: true. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	AutoRecover *bool `json:"AutoRecover,omitempty" xml:"AutoRecover,omitempty"`
	// The description of the alert integration.
	//
	// example:
	//
	// Test
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The name of the alert integration.
	//
	// This parameter is required.
	//
	// example:
	//
	// CloudMonitor integration
	IntegrationName *string `json:"IntegrationName,omitempty" xml:"IntegrationName,omitempty"`
	// The service of the alert integration. Valid values:
	//
	// 	- CLOUD_MONITOR: CloudMonitor
	//
	// 	- LOG_SERVICE: Log Service
	//
	// This parameter is required.
	//
	// example:
	//
	// CLOUD_MONITOR
	IntegrationProductType *string `json:"IntegrationProductType,omitempty" xml:"IntegrationProductType,omitempty"`
	// The period of time within which alert events are automatically cleared. Unit: seconds. Default value: 300.
	//
	// example:
	//
	// 300
	RecoverTime *int64 `json:"RecoverTime,omitempty" xml:"RecoverTime,omitempty"`
	// The region ID.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s CreateIntegrationRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateIntegrationRequest) GoString() string {
	return s.String()
}

func (s *CreateIntegrationRequest) SetAutoRecover(v bool) *CreateIntegrationRequest {
	s.AutoRecover = &v
	return s
}

func (s *CreateIntegrationRequest) SetDescription(v string) *CreateIntegrationRequest {
	s.Description = &v
	return s
}

func (s *CreateIntegrationRequest) SetIntegrationName(v string) *CreateIntegrationRequest {
	s.IntegrationName = &v
	return s
}

func (s *CreateIntegrationRequest) SetIntegrationProductType(v string) *CreateIntegrationRequest {
	s.IntegrationProductType = &v
	return s
}

func (s *CreateIntegrationRequest) SetRecoverTime(v int64) *CreateIntegrationRequest {
	s.RecoverTime = &v
	return s
}

func (s *CreateIntegrationRequest) SetRegionId(v string) *CreateIntegrationRequest {
	s.RegionId = &v
	return s
}

type CreateIntegrationResponseBody struct {
	// The returned information about the alert integration.
	Integration *CreateIntegrationResponseBodyIntegration `json:"Integration,omitempty" xml:"Integration,omitempty" type:"Struct"`
	// The ID of the request.
	//
	// example:
	//
	// 34ED024E-9E31-434A-9E4E-D9D15C3****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateIntegrationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateIntegrationResponseBody) GoString() string {
	return s.String()
}

func (s *CreateIntegrationResponseBody) SetIntegration(v *CreateIntegrationResponseBodyIntegration) *CreateIntegrationResponseBody {
	s.Integration = v
	return s
}

func (s *CreateIntegrationResponseBody) SetRequestId(v string) *CreateIntegrationResponseBody {
	s.RequestId = &v
	return s
}

type CreateIntegrationResponseBodyIntegration struct {
	// Indicates whether alert events are automatically cleared. Default value: true. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	AutoRecover *bool `json:"AutoRecover,omitempty" xml:"AutoRecover,omitempty"`
	// The description of the alert integration.
	//
	// example:
	//
	// Test
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The ID of the alert integration.
	//
	// example:
	//
	// 1234
	IntegrationId *int64 `json:"IntegrationId,omitempty" xml:"IntegrationId,omitempty"`
	// The name of the alert integration.
	//
	// example:
	//
	// CloudMonitor integration
	IntegrationName *string `json:"IntegrationName,omitempty" xml:"IntegrationName,omitempty"`
	// The service of the alert integration. Valid values:
	//
	// 	- CLOUD_MONITOR: CloudMonitor
	//
	// 	- LOG_SERVICE: Log Service
	//
	// example:
	//
	// CLOUD_MONITOR
	IntegrationProductType *string `json:"IntegrationProductType,omitempty" xml:"IntegrationProductType,omitempty"`
	// The period of time within which alert events are automatically cleared. Unit: seconds. Default value: 300.
	//
	// example:
	//
	// 300
	RecoverTime *int64 `json:"RecoverTime,omitempty" xml:"RecoverTime,omitempty"`
}

func (s CreateIntegrationResponseBodyIntegration) String() string {
	return tea.Prettify(s)
}

func (s CreateIntegrationResponseBodyIntegration) GoString() string {
	return s.String()
}

func (s *CreateIntegrationResponseBodyIntegration) SetAutoRecover(v bool) *CreateIntegrationResponseBodyIntegration {
	s.AutoRecover = &v
	return s
}

func (s *CreateIntegrationResponseBodyIntegration) SetDescription(v string) *CreateIntegrationResponseBodyIntegration {
	s.Description = &v
	return s
}

func (s *CreateIntegrationResponseBodyIntegration) SetIntegrationId(v int64) *CreateIntegrationResponseBodyIntegration {
	s.IntegrationId = &v
	return s
}

func (s *CreateIntegrationResponseBodyIntegration) SetIntegrationName(v string) *CreateIntegrationResponseBodyIntegration {
	s.IntegrationName = &v
	return s
}

func (s *CreateIntegrationResponseBodyIntegration) SetIntegrationProductType(v string) *CreateIntegrationResponseBodyIntegration {
	s.IntegrationProductType = &v
	return s
}

func (s *CreateIntegrationResponseBodyIntegration) SetRecoverTime(v int64) *CreateIntegrationResponseBodyIntegration {
	s.RecoverTime = &v
	return s
}

type CreateIntegrationResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateIntegrationResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateIntegrationResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateIntegrationResponse) GoString() string {
	return s.String()
}

func (s *CreateIntegrationResponse) SetHeaders(v map[string]*string) *CreateIntegrationResponse {
	s.Headers = v
	return s
}

func (s *CreateIntegrationResponse) SetStatusCode(v int32) *CreateIntegrationResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateIntegrationResponse) SetBody(v *CreateIntegrationResponseBody) *CreateIntegrationResponse {
	s.Body = v
	return s
}

type CreateOrUpdateAlertRuleRequest struct {
	// The alert check type of the Prometheus alert rule. Valid values:
	//
	// 	- STATIC: a static threshold value. If you set the parameter to STATIC, you must specify the **MetricsKey*	- parameter. For more information, see the **Correspondence between AlertGroup and MetricsKey for Prometheus Service*	- table.
	//
	// 	- CUSTOM: a custom PromQL statement. If you set the parameter to CUSTOM, you must specify the **PromQL**, **Duration**, and **Message*	- parameters to create a Prometheus alert rule.
	//
	// example:
	//
	// STATIC
	AlertCheckType *string `json:"AlertCheckType,omitempty" xml:"AlertCheckType,omitempty"`
	// The alert contact group ID of the Prometheus alert rule. Valid values:
	//
	// 	- \\-1: custom PromQL
	//
	// 	- 1: Kubernetes load
	//
	// 	- 15: Kubernetes node
	//
	// example:
	//
	// -1
	AlertGroup *int64 `json:"AlertGroup,omitempty" xml:"AlertGroup,omitempty"`
	// The ID of the alert rule.
	//
	// 	- If you do not specify this parameter, a new alert rule is created.
	//
	// 	- If you specify this parameter, the specified alert rule is modified.
	//
	// example:
	//
	// 546xxx
	AlertId *int64 `json:"AlertId,omitempty" xml:"AlertId,omitempty"`
	// The name of the alert rule.
	//
	// This parameter is required.
	//
	// example:
	//
	// Alert Rule Demo
	AlertName *string `json:"AlertName,omitempty" xml:"AlertName,omitempty"`
	// The configuration of the alert sending channel. This parameter is used to be compatible with the old version of the rule.
	//
	// example:
	//
	// -
	AlertPiplines *string `json:"AlertPiplines,omitempty" xml:"AlertPiplines,omitempty"`
	// The content of the Application Monitoring or Browser Monitoring alert rule. The following code provides an example of the **AlertRuleContent*	- parameter. For more information about the meaning of each field, see the supplementary description.
	//
	// ```json
	//
	// {
	//
	//     "Condition": "OR",
	//
	//      "AlertRuleItems": [
	//
	//              { "Operator": "CURRENT_LTE",
	//
	//                  "MetricKey": "appstat.jvm.threadcount",
	//
	//                  "Value": 1000,
	//
	//                  "Aggregate": "AVG",
	//
	//                   "N": 10,
	//
	//                   "Tolerability": 169
	//
	//             }
	//
	//        ]
	//
	//   }
	//
	// ```
	//
	// >  The filter conditions specified by the **AlertRuleItems.MetricKey*	- field depends on the value of the **MetricsType*	- parameter. For more information about the types of metrics supported by Application Monitoring and Browser Monitoring and the alert rule fields corresponding to each metric, see the supplementary description.
	//
	// example:
	//
	// { "Condition": "OR", "AlertRuleItems": [ { "Operator": "CURRENT_LTE",  "MetricKey": "appstat.jvm.threadcount",  "Value": 1000,  "Aggregate": "AVG",   "N": 1  }  ]  }
	AlertRuleContent *string `json:"AlertRuleContent,omitempty" xml:"AlertRuleContent,omitempty"`
	// The status of the alert rule. Valid values:
	//
	// 	- RUNNING (default)
	//
	// 	- STOPPED
	//
	// example:
	//
	// RUNNING
	AlertStatus *string `json:"AlertStatus,omitempty" xml:"AlertStatus,omitempty"`
	// The following alert rule types are available:
	//
	// 	- APPLICATION_MONITORING_ALERT_RULE: alert rule for Application Monitoring
	//
	// 	- BROWSER_MONITORING_ALERT_RULE: alert rule for Browser Monitoring
	//
	// 	- RUM_MONITORING_ALERT_RULE: alert rule for RUM Monitoring
	//
	// 	- PROMETHEUS_MONITORING_ALERT_RULE: alert rule for Managed Service for Prometheus
	//
	// 	- XTRACE_MONITORING_ALERT_RULE: alert rule for Managed Service for OpenTelemetry
	//
	// 	- EBPF_MONITORING_ALERT_RULE: alert rule for Application Monitoring eBPF Edition
	//
	// This parameter is required.
	//
	// example:
	//
	// APPLICATION_MONITORING_ALERT_RULE
	AlertType *string `json:"AlertType,omitempty" xml:"AlertType,omitempty"`
	// The annotations of the Prometheus alert rule.
	//
	// example:
	//
	// [ { "Value": "PolarDB slow queries", "Name": "_aliyun_display_name" }
	Annotations *string `json:"Annotations,omitempty" xml:"Annotations,omitempty"`
	// Specifies whether to apply the alert rule to new applications that are created in Application Monitoring or Browser Monitoring. Valid values:
	//
	// 	- `true`: enables the health check feature.
	//
	// 	- `false`: disables the automatic backup feature.
	//
	// example:
	//
	// false
	AutoAddNewApplication *bool   `json:"AutoAddNewApplication,omitempty" xml:"AutoAddNewApplication,omitempty"`
	AutoAddTargetConfig   *string `json:"AutoAddTargetConfig,omitempty" xml:"AutoAddTargetConfig,omitempty"`
	// The ID of the monitored cluster.
	//
	// example:
	//
	// ceba9b9ea5b924dd0b6726d2de6******
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	// Data Configuration. The dataRevision field specifies the data repair method when there is no data for the metric.
	//
	// - Fill with zero: 0
	//
	// - Fill with one: 1
	//
	// - Fill with null: 2 (default, does not trigger an alarm)
	//
	// example:
	//
	// {
	//
	//     "dataRevision": 2
	//
	// }
	DataConfig *string `json:"DataConfig,omitempty" xml:"DataConfig,omitempty"`
	// The duration of the Prometheus alert rule. Unit: minutes.
	//
	// example:
	//
	// 1
	Duration *int64 `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// The filter conditions of the Application Monitoring or Browser Monitoring alert rule. Format:
	//
	//     "DimFilters": [
	//
	//     {
	//
	//      "FilterOpt": "ALL",
	//
	//     "FilterValues": [],         //The value of the filter condition.
	//
	//     "FilterKey": "rootIp"     //The key of the filter condition.
	//
	//     }
	//
	//     ]
	//
	// Valid values of **FilterOpt**:
	//
	// 	- STATIC: matches the value of the specified dimension.
	//
	// 	- ALL: traverses all dimension values. Dynamic thresholds do not support traversal.
	//
	// 	- DISABLE: aggregates the values of all dimensions.
	//
	// example:
	//
	// {"DimFilters": [             {               "FilterOpt": "ALL",               "FilterValues": [],               "FilterKey": "rootIp"             }           ]         }
	Filters *string `json:"Filters,omitempty" xml:"Filters,omitempty"`
	// The tags of the Prometheus alert rule.
	//
	// example:
	//
	// [  { "Value": "cms_polardb",             "Name": "_aliyun_cloud_product"           }         ]
	Labels *string `json:"Labels,omitempty" xml:"Labels,omitempty"`
	// The severity level of the Prometheus alert rule.
	//
	// 	- P1: Alert notifications are sent for major issues that affect the availability of core business, have a huge impact, and may lead to serious consequences.
	//
	// 	- P2: Alert notifications are sent for service errors that affect the system availability with relatively limited impact.
	//
	// 	- P3: Alert notifications are sent for issues that may cause service errors or negative effects, or alert notifications for services that are relatively less important.
	//
	// 	- P4: Alert notifications are sent for low-priority issues that do not affect your business.
	//
	// 	- Default: Alert notifications are sent regardless of alert levels.
	//
	// example:
	//
	// P2
	Level *string `json:"Level,omitempty" xml:"Level,omitempty"`
	// Application Tags. Used for application monitoring alert rules, to filter applications associated with alert rules.
	MarkTags []*CreateOrUpdateAlertRuleRequestMarkTags `json:"MarkTags,omitempty" xml:"MarkTags,omitempty" type:"Repeated"`
	// The alert message of the Prometheus alert rule.
	//
	// example:
	//
	// Namespace: {{$labels.namespace}} / Pod: {{$labels.pod_name}} / Container: {{$labels.container}} Memory usage exceeds 80%. Current value: {{ printf \\\\\\\\\\"%.2f\\\\\\\\\\" $value }}%
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The alert metrics. If you set the **AlertCheckType*	- parameter to **STATIC*	- when you create a Prometheus alert rule, you must specify the **MetricsKey*	- parameter.
	//
	// > Alert metrics vary depending on the value of the **AlertGroup*	- parameter. For more information about the correspondence between **AlertGroup*	- and **MetricsKey**, see the supplementary description.
	//
	// example:
	//
	// pop.status.error
	MetricsKey *string `json:"MetricsKey,omitempty" xml:"MetricsKey,omitempty"`
	// The metric type of the Application Monitoring or Browser Monitoring alert rule. For more information, see the following table.
	//
	// example:
	//
	// jvm
	MetricsType *string `json:"MetricsType,omitempty" xml:"MetricsType,omitempty"`
	// The effective time and notification time. This parameter is used to be compatible with the old version of the rule.
	//
	// example:
	//
	// -
	Notice *string `json:"Notice,omitempty" xml:"Notice,omitempty"`
	// Notification Mode. Normal mode or Simplified mode.
	//
	// example:
	//
	// NORMAL_MODE
	NotifyMode *string `json:"NotifyMode,omitempty" xml:"NotifyMode,omitempty"`
	// The notification policy.
	//
	// 	- If you set this parameter to null, no notification policy is specified. After you create an alert rule, you can create a notification policy and specify match rules and match conditions. For example, you can specify the name of the alert rule as the match condition. When the alert rule is triggered, an alert event is generated and an alert notification is sent to the contacts or contact groups that are specified in the notification policy.
	//
	// 	- To specify a notification policy, set this parameter to the ID of the notification policy. Application Real-Time Monitoring Service (ARMS) automatically adds a match rule to the notification policy and specifies the ID of the alert rule as the match condition. The name of the alert rule is also displayed. This way, the alert events that are generated based on the alert rule can be matched by the specified notification policy.
	//
	// example:
	//
	// 569xxx
	NotifyStrategy *string `json:"NotifyStrategy,omitempty" xml:"NotifyStrategy,omitempty"`
	// The process ID (PID) that is associated with the Application Monitoring or Browser Monitoring alert rule.
	//
	// example:
	//
	// ["b590lhguqs@40d8deedfa9******"]
	Pids *string `json:"Pids,omitempty" xml:"Pids,omitempty"`
	// It is determined when creating the underlying rules of Prometheus. The background will verify whether the product exists, which is used to distinguish cloud product filtering queries.
	//
	// example:
	//
	// xxxx
	Product *string `json:"Product,omitempty" xml:"Product,omitempty"`
	// The PromQL statement of the Prometheus alert rule.
	//
	// example:
	//
	// node_memory_MemAvailable_bytes{} / node_memory_MemTotal_bytes{} 	- 100
	PromQL *string `json:"PromQL,omitempty" xml:"PromQL,omitempty"`
	// The region ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The list of tags.
	Tags []*CreateOrUpdateAlertRuleRequestTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
}

func (s CreateOrUpdateAlertRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateOrUpdateAlertRuleRequest) GoString() string {
	return s.String()
}

func (s *CreateOrUpdateAlertRuleRequest) SetAlertCheckType(v string) *CreateOrUpdateAlertRuleRequest {
	s.AlertCheckType = &v
	return s
}

func (s *CreateOrUpdateAlertRuleRequest) SetAlertGroup(v int64) *CreateOrUpdateAlertRuleRequest {
	s.AlertGroup = &v
	return s
}

func (s *CreateOrUpdateAlertRuleRequest) SetAlertId(v int64) *CreateOrUpdateAlertRuleRequest {
	s.AlertId = &v
	return s
}

func (s *CreateOrUpdateAlertRuleRequest) SetAlertName(v string) *CreateOrUpdateAlertRuleRequest {
	s.AlertName = &v
	return s
}

func (s *CreateOrUpdateAlertRuleRequest) SetAlertPiplines(v string) *CreateOrUpdateAlertRuleRequest {
	s.AlertPiplines = &v
	return s
}

func (s *CreateOrUpdateAlertRuleRequest) SetAlertRuleContent(v string) *CreateOrUpdateAlertRuleRequest {
	s.AlertRuleContent = &v
	return s
}

func (s *CreateOrUpdateAlertRuleRequest) SetAlertStatus(v string) *CreateOrUpdateAlertRuleRequest {
	s.AlertStatus = &v
	return s
}

func (s *CreateOrUpdateAlertRuleRequest) SetAlertType(v string) *CreateOrUpdateAlertRuleRequest {
	s.AlertType = &v
	return s
}

func (s *CreateOrUpdateAlertRuleRequest) SetAnnotations(v string) *CreateOrUpdateAlertRuleRequest {
	s.Annotations = &v
	return s
}

func (s *CreateOrUpdateAlertRuleRequest) SetAutoAddNewApplication(v bool) *CreateOrUpdateAlertRuleRequest {
	s.AutoAddNewApplication = &v
	return s
}

func (s *CreateOrUpdateAlertRuleRequest) SetAutoAddTargetConfig(v string) *CreateOrUpdateAlertRuleRequest {
	s.AutoAddTargetConfig = &v
	return s
}

func (s *CreateOrUpdateAlertRuleRequest) SetClusterId(v string) *CreateOrUpdateAlertRuleRequest {
	s.ClusterId = &v
	return s
}

func (s *CreateOrUpdateAlertRuleRequest) SetDataConfig(v string) *CreateOrUpdateAlertRuleRequest {
	s.DataConfig = &v
	return s
}

func (s *CreateOrUpdateAlertRuleRequest) SetDuration(v int64) *CreateOrUpdateAlertRuleRequest {
	s.Duration = &v
	return s
}

func (s *CreateOrUpdateAlertRuleRequest) SetFilters(v string) *CreateOrUpdateAlertRuleRequest {
	s.Filters = &v
	return s
}

func (s *CreateOrUpdateAlertRuleRequest) SetLabels(v string) *CreateOrUpdateAlertRuleRequest {
	s.Labels = &v
	return s
}

func (s *CreateOrUpdateAlertRuleRequest) SetLevel(v string) *CreateOrUpdateAlertRuleRequest {
	s.Level = &v
	return s
}

func (s *CreateOrUpdateAlertRuleRequest) SetMarkTags(v []*CreateOrUpdateAlertRuleRequestMarkTags) *CreateOrUpdateAlertRuleRequest {
	s.MarkTags = v
	return s
}

func (s *CreateOrUpdateAlertRuleRequest) SetMessage(v string) *CreateOrUpdateAlertRuleRequest {
	s.Message = &v
	return s
}

func (s *CreateOrUpdateAlertRuleRequest) SetMetricsKey(v string) *CreateOrUpdateAlertRuleRequest {
	s.MetricsKey = &v
	return s
}

func (s *CreateOrUpdateAlertRuleRequest) SetMetricsType(v string) *CreateOrUpdateAlertRuleRequest {
	s.MetricsType = &v
	return s
}

func (s *CreateOrUpdateAlertRuleRequest) SetNotice(v string) *CreateOrUpdateAlertRuleRequest {
	s.Notice = &v
	return s
}

func (s *CreateOrUpdateAlertRuleRequest) SetNotifyMode(v string) *CreateOrUpdateAlertRuleRequest {
	s.NotifyMode = &v
	return s
}

func (s *CreateOrUpdateAlertRuleRequest) SetNotifyStrategy(v string) *CreateOrUpdateAlertRuleRequest {
	s.NotifyStrategy = &v
	return s
}

func (s *CreateOrUpdateAlertRuleRequest) SetPids(v string) *CreateOrUpdateAlertRuleRequest {
	s.Pids = &v
	return s
}

func (s *CreateOrUpdateAlertRuleRequest) SetProduct(v string) *CreateOrUpdateAlertRuleRequest {
	s.Product = &v
	return s
}

func (s *CreateOrUpdateAlertRuleRequest) SetPromQL(v string) *CreateOrUpdateAlertRuleRequest {
	s.PromQL = &v
	return s
}

func (s *CreateOrUpdateAlertRuleRequest) SetRegionId(v string) *CreateOrUpdateAlertRuleRequest {
	s.RegionId = &v
	return s
}

func (s *CreateOrUpdateAlertRuleRequest) SetTags(v []*CreateOrUpdateAlertRuleRequestTags) *CreateOrUpdateAlertRuleRequest {
	s.Tags = v
	return s
}

type CreateOrUpdateAlertRuleRequestMarkTags struct {
	// The Tag Key.
	//
	// example:
	//
	// service
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The Tag Value.
	//
	// example:
	//
	// proudct
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s CreateOrUpdateAlertRuleRequestMarkTags) String() string {
	return tea.Prettify(s)
}

func (s CreateOrUpdateAlertRuleRequestMarkTags) GoString() string {
	return s.String()
}

func (s *CreateOrUpdateAlertRuleRequestMarkTags) SetKey(v string) *CreateOrUpdateAlertRuleRequestMarkTags {
	s.Key = &v
	return s
}

func (s *CreateOrUpdateAlertRuleRequestMarkTags) SetValue(v string) *CreateOrUpdateAlertRuleRequestMarkTags {
	s.Value = &v
	return s
}

type CreateOrUpdateAlertRuleRequestTags struct {
	// The tag key.
	//
	// example:
	//
	// owner
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The tag value.
	//
	// example:
	//
	// John
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s CreateOrUpdateAlertRuleRequestTags) String() string {
	return tea.Prettify(s)
}

func (s CreateOrUpdateAlertRuleRequestTags) GoString() string {
	return s.String()
}

func (s *CreateOrUpdateAlertRuleRequestTags) SetKey(v string) *CreateOrUpdateAlertRuleRequestTags {
	s.Key = &v
	return s
}

func (s *CreateOrUpdateAlertRuleRequestTags) SetValue(v string) *CreateOrUpdateAlertRuleRequestTags {
	s.Value = &v
	return s
}

type CreateOrUpdateAlertRuleResponseBody struct {
	// The details of the alert rule.
	AlertRule *CreateOrUpdateAlertRuleResponseBodyAlertRule `json:"AlertRule,omitempty" xml:"AlertRule,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// 337B8F7E-0A64-5768-9225-E9B3CF******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateOrUpdateAlertRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateOrUpdateAlertRuleResponseBody) GoString() string {
	return s.String()
}

func (s *CreateOrUpdateAlertRuleResponseBody) SetAlertRule(v *CreateOrUpdateAlertRuleResponseBodyAlertRule) *CreateOrUpdateAlertRuleResponseBody {
	s.AlertRule = v
	return s
}

func (s *CreateOrUpdateAlertRuleResponseBody) SetRequestId(v string) *CreateOrUpdateAlertRuleResponseBody {
	s.RequestId = &v
	return s
}

type CreateOrUpdateAlertRuleResponseBodyAlertRule struct {
	// The alert check type of the Prometheus alert rule. Valid values:
	//
	// 	- STATIC: a static threshold value.
	//
	// 	- CUSTOM: a custom PromQL statement.
	//
	// example:
	//
	// STATIC
	AlertCheckType *string `json:"AlertCheckType,omitempty" xml:"AlertCheckType,omitempty"`
	// The alert contact group ID of the Prometheus alert rule. Valid values:
	//
	// 	- \\-1: custom PromQL
	//
	// 	- 1: Kubernetes load
	//
	// 	- 15: Kubernetes node
	//
	// example:
	//
	// -1
	AlertGroup *int64 `json:"AlertGroup,omitempty" xml:"AlertGroup,omitempty"`
	// The ID of the alert rule.
	//
	// example:
	//
	// 5510445
	AlertId *float32 `json:"AlertId,omitempty" xml:"AlertId,omitempty"`
	// The name of the alert rule.
	//
	// example:
	//
	// arms-test
	AlertName *string `json:"AlertName,omitempty" xml:"AlertName,omitempty"`
	// The content of the Application Monitoring or Browser Monitoring alert rule.
	AlertRuleContent *CreateOrUpdateAlertRuleResponseBodyAlertRuleAlertRuleContent `json:"AlertRuleContent,omitempty" xml:"AlertRuleContent,omitempty" type:"Struct"`
	// The status of the alert rule. Valid values:
	//
	// 	- RUNNING
	//
	// 	- STOPPED
	//
	// 	- PAUSED
	//
	// > The PAUSED status indicates that the alert rule is abnormal and is actively paused by the system. The alert rule may be paused because that it is not unique or the associated cluster has been deleted.
	//
	// example:
	//
	// RUNNING
	AlertStatus *string `json:"AlertStatus,omitempty" xml:"AlertStatus,omitempty"`
	// The type of the alert rule. Valid values:
	//
	// 	- APPLICATION_MONITORING_ALERT_RULE: alert rule for Application Monitoring
	//
	// 	- BROWSER_MONITORING_ALERT_RULE: alert rule for Browser Monitoring
	//
	// 	- PROMETHEUS_MONITORING_ALERT_RULE: alert rule for Prometheus Service
	//
	// example:
	//
	// APPLICATION_MONITORING_ALERT_RULE
	AlertType *string `json:"AlertType,omitempty" xml:"AlertType,omitempty"`
	// The annotations of the Prometheus alert rule.
	Annotations []*CreateOrUpdateAlertRuleResponseBodyAlertRuleAnnotations `json:"Annotations,omitempty" xml:"Annotations,omitempty" type:"Repeated"`
	// Indicates whether the alert rule was applied to new applications that were created in Application Monitoring or Browser Monitoring. Valid values:
	//
	// 	- `true`: enables the health check feature.
	//
	// 	- `false`: disables the automatic backup feature.
	//
	// example:
	//
	// false
	AutoAddNewApplication *bool `json:"AutoAddNewApplication,omitempty" xml:"AutoAddNewApplication,omitempty"`
	// The ID of the monitored cluster.
	//
	// example:
	//
	// ceba9b9ea5b924dd0b6726d2de6******
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	// The timestamp generated when the alert rule was created. Unit: seconds.
	//
	// example:
	//
	// 1641438611000
	CreatedTime *int64 `json:"CreatedTime,omitempty" xml:"CreatedTime,omitempty"`
	// The duration of the Prometheus alert rule. Unit: minutes.
	//
	// example:
	//
	// 1
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// The extended fields.
	//
	// example:
	//
	// {\\\\"alarmContext\\\\":\\\\"{\\\\\\\\\\"content\\\\\\\\\\":\\\\\\\\Alert name: $Alert name\\\\\\\\\\\\nFilter condition: $Filter condition\\\\\\\\\\\\nAlert time: $Alert time\\\\\\\\\\\\nAlert content: $Alert content\\\\\\\\\\\\nNote: The alert persists before you receive an email that reminds you to clear the alert. You will be reminded of the alert again 24 hours later. \\\\\\\\\\",\\\\\\\\\\"subTitle\\\\\\\\\\":\\\\\\\\\\"\\\\\\\\\\"}\\\\",\\\\"alertWays\\\\":\\\\"[0,1]\\\\",\\\\"contactGroupIds\\\\":\\\\"381,5075\\\\",\\\\"notice\\\\":\\\\"{\\\\\\\\\\"endTime\\\\\\\\\\":1480607940000,\\\\\\\\\\"noticeEndTime\\\\\\\\\\":1480607940000,\\\\\\\\\\"noticeStartTime\\\\\\\\\\":1480521600000,\\\\\\\\\\"startTime\\\\\\\\\\":1480521600000}\\\\"}
	Extend *string `json:"Extend,omitempty" xml:"Extend,omitempty"`
	// The filter conditions of the Application Monitoring or Browser Monitoring alert rule.
	Filters *CreateOrUpdateAlertRuleResponseBodyAlertRuleFilters `json:"Filters,omitempty" xml:"Filters,omitempty" type:"Struct"`
	// The tags of the Prometheus alert rule.
	Labels []*CreateOrUpdateAlertRuleResponseBodyAlertRuleLabels `json:"Labels,omitempty" xml:"Labels,omitempty" type:"Repeated"`
	// The severity level of the Prometheus alert rule.
	//
	// 	- P1: Alert notifications are sent for major issues that affect the availability of core business, have a huge impact, and may lead to serious consequences.
	//
	// 	- P2: Alert notifications are sent for service errors that affect the system availability with relatively limited impact.
	//
	// 	- P3: Alert notifications are sent for issues that may cause service errors or negative effects, or alert notifications for services that are relatively less important.
	//
	// 	- P4: Alert notifications are sent for low-priority issues that do not affect your business.
	//
	// 	- Default: Alert notifications are sent regardless of alert levels.
	//
	// example:
	//
	// P2
	Level *string `json:"Level,omitempty" xml:"Level,omitempty"`
	// The alert message of the Prometheus alert rule.
	//
	// example:
	//
	// Namespace: {{$labels.namespace}} / Pod: {{$labels.pod_name}} / Container: {{$labels.container}} Memory usage exceeds 80%. Current value: {{ printf \\\\\\\\\\"%.2f\\\\\\\\\\" $value }}%
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The metric type of the Application Monitoring or Browser Monitoring alert rule.
	//
	// example:
	//
	// JVM
	MetricsType *string `json:"MetricsType,omitempty" xml:"MetricsType,omitempty"`
	// Notification Mode.
	//
	// example:
	//
	// NORMAL_MODE
	NotifyMode *string `json:"NotifyMode,omitempty" xml:"NotifyMode,omitempty"`
	// The name of the notification policy.
	//
	// example:
	//
	// ALERT_MANAGER
	NotifyStrategy *string `json:"NotifyStrategy,omitempty" xml:"NotifyStrategy,omitempty"`
	// The process ID (PID) that was associated with the Application Monitoring or Browser Monitoring alert rule.
	Pids []*string `json:"Pids,omitempty" xml:"Pids,omitempty" type:"Repeated"`
	// The PromQL statement of the Prometheus alert rule.
	//
	// example:
	//
	// node_memory_MemAvailable_bytes{} / node_memory_MemTotal_bytes{} 	- 100
	PromQL *string `json:"PromQL,omitempty" xml:"PromQL,omitempty"`
	// The region ID.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The list of tags.
	Tags []*CreateOrUpdateAlertRuleResponseBodyAlertRuleTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
	// The timestamp generated when the alert rule was updated. Unit: seconds.
	//
	// example:
	//
	// 1641438611000
	UpdatedTime *int64 `json:"UpdatedTime,omitempty" xml:"UpdatedTime,omitempty"`
	// The ID of the Alibaba Cloud account.
	//
	// example:
	//
	// 1131971649******
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s CreateOrUpdateAlertRuleResponseBodyAlertRule) String() string {
	return tea.Prettify(s)
}

func (s CreateOrUpdateAlertRuleResponseBodyAlertRule) GoString() string {
	return s.String()
}

func (s *CreateOrUpdateAlertRuleResponseBodyAlertRule) SetAlertCheckType(v string) *CreateOrUpdateAlertRuleResponseBodyAlertRule {
	s.AlertCheckType = &v
	return s
}

func (s *CreateOrUpdateAlertRuleResponseBodyAlertRule) SetAlertGroup(v int64) *CreateOrUpdateAlertRuleResponseBodyAlertRule {
	s.AlertGroup = &v
	return s
}

func (s *CreateOrUpdateAlertRuleResponseBodyAlertRule) SetAlertId(v float32) *CreateOrUpdateAlertRuleResponseBodyAlertRule {
	s.AlertId = &v
	return s
}

func (s *CreateOrUpdateAlertRuleResponseBodyAlertRule) SetAlertName(v string) *CreateOrUpdateAlertRuleResponseBodyAlertRule {
	s.AlertName = &v
	return s
}

func (s *CreateOrUpdateAlertRuleResponseBodyAlertRule) SetAlertRuleContent(v *CreateOrUpdateAlertRuleResponseBodyAlertRuleAlertRuleContent) *CreateOrUpdateAlertRuleResponseBodyAlertRule {
	s.AlertRuleContent = v
	return s
}

func (s *CreateOrUpdateAlertRuleResponseBodyAlertRule) SetAlertStatus(v string) *CreateOrUpdateAlertRuleResponseBodyAlertRule {
	s.AlertStatus = &v
	return s
}

func (s *CreateOrUpdateAlertRuleResponseBodyAlertRule) SetAlertType(v string) *CreateOrUpdateAlertRuleResponseBodyAlertRule {
	s.AlertType = &v
	return s
}

func (s *CreateOrUpdateAlertRuleResponseBodyAlertRule) SetAnnotations(v []*CreateOrUpdateAlertRuleResponseBodyAlertRuleAnnotations) *CreateOrUpdateAlertRuleResponseBodyAlertRule {
	s.Annotations = v
	return s
}

func (s *CreateOrUpdateAlertRuleResponseBodyAlertRule) SetAutoAddNewApplication(v bool) *CreateOrUpdateAlertRuleResponseBodyAlertRule {
	s.AutoAddNewApplication = &v
	return s
}

func (s *CreateOrUpdateAlertRuleResponseBodyAlertRule) SetClusterId(v string) *CreateOrUpdateAlertRuleResponseBodyAlertRule {
	s.ClusterId = &v
	return s
}

func (s *CreateOrUpdateAlertRuleResponseBodyAlertRule) SetCreatedTime(v int64) *CreateOrUpdateAlertRuleResponseBodyAlertRule {
	s.CreatedTime = &v
	return s
}

func (s *CreateOrUpdateAlertRuleResponseBodyAlertRule) SetDuration(v string) *CreateOrUpdateAlertRuleResponseBodyAlertRule {
	s.Duration = &v
	return s
}

func (s *CreateOrUpdateAlertRuleResponseBodyAlertRule) SetExtend(v string) *CreateOrUpdateAlertRuleResponseBodyAlertRule {
	s.Extend = &v
	return s
}

func (s *CreateOrUpdateAlertRuleResponseBodyAlertRule) SetFilters(v *CreateOrUpdateAlertRuleResponseBodyAlertRuleFilters) *CreateOrUpdateAlertRuleResponseBodyAlertRule {
	s.Filters = v
	return s
}

func (s *CreateOrUpdateAlertRuleResponseBodyAlertRule) SetLabels(v []*CreateOrUpdateAlertRuleResponseBodyAlertRuleLabels) *CreateOrUpdateAlertRuleResponseBodyAlertRule {
	s.Labels = v
	return s
}

func (s *CreateOrUpdateAlertRuleResponseBodyAlertRule) SetLevel(v string) *CreateOrUpdateAlertRuleResponseBodyAlertRule {
	s.Level = &v
	return s
}

func (s *CreateOrUpdateAlertRuleResponseBodyAlertRule) SetMessage(v string) *CreateOrUpdateAlertRuleResponseBodyAlertRule {
	s.Message = &v
	return s
}

func (s *CreateOrUpdateAlertRuleResponseBodyAlertRule) SetMetricsType(v string) *CreateOrUpdateAlertRuleResponseBodyAlertRule {
	s.MetricsType = &v
	return s
}

func (s *CreateOrUpdateAlertRuleResponseBodyAlertRule) SetNotifyMode(v string) *CreateOrUpdateAlertRuleResponseBodyAlertRule {
	s.NotifyMode = &v
	return s
}

func (s *CreateOrUpdateAlertRuleResponseBodyAlertRule) SetNotifyStrategy(v string) *CreateOrUpdateAlertRuleResponseBodyAlertRule {
	s.NotifyStrategy = &v
	return s
}

func (s *CreateOrUpdateAlertRuleResponseBodyAlertRule) SetPids(v []*string) *CreateOrUpdateAlertRuleResponseBodyAlertRule {
	s.Pids = v
	return s
}

func (s *CreateOrUpdateAlertRuleResponseBodyAlertRule) SetPromQL(v string) *CreateOrUpdateAlertRuleResponseBodyAlertRule {
	s.PromQL = &v
	return s
}

func (s *CreateOrUpdateAlertRuleResponseBodyAlertRule) SetRegionId(v string) *CreateOrUpdateAlertRuleResponseBodyAlertRule {
	s.RegionId = &v
	return s
}

func (s *CreateOrUpdateAlertRuleResponseBodyAlertRule) SetTags(v []*CreateOrUpdateAlertRuleResponseBodyAlertRuleTags) *CreateOrUpdateAlertRuleResponseBodyAlertRule {
	s.Tags = v
	return s
}

func (s *CreateOrUpdateAlertRuleResponseBodyAlertRule) SetUpdatedTime(v int64) *CreateOrUpdateAlertRuleResponseBodyAlertRule {
	s.UpdatedTime = &v
	return s
}

func (s *CreateOrUpdateAlertRuleResponseBodyAlertRule) SetUserId(v string) *CreateOrUpdateAlertRuleResponseBodyAlertRule {
	s.UserId = &v
	return s
}

type CreateOrUpdateAlertRuleResponseBodyAlertRuleAlertRuleContent struct {
	// The trigger conditions of the Application Monitoring or Browser Monitoring alert rule.
	AlertRuleItems []*CreateOrUpdateAlertRuleResponseBodyAlertRuleAlertRuleContentAlertRuleItems `json:"AlertRuleItems,omitempty" xml:"AlertRuleItems,omitempty" type:"Repeated"`
	// The relationship between multiple alert conditions that were specified for the Application Monitoring or Browser Monitoring alert rule. Valid values:
	//
	// 	- OR: meets any of the specified conditions.
	//
	// 	- AND: meets all the specified conditions.
	//
	// example:
	//
	// "|"
	Condition *string `json:"Condition,omitempty" xml:"Condition,omitempty"`
}

func (s CreateOrUpdateAlertRuleResponseBodyAlertRuleAlertRuleContent) String() string {
	return tea.Prettify(s)
}

func (s CreateOrUpdateAlertRuleResponseBodyAlertRuleAlertRuleContent) GoString() string {
	return s.String()
}

func (s *CreateOrUpdateAlertRuleResponseBodyAlertRuleAlertRuleContent) SetAlertRuleItems(v []*CreateOrUpdateAlertRuleResponseBodyAlertRuleAlertRuleContentAlertRuleItems) *CreateOrUpdateAlertRuleResponseBodyAlertRuleAlertRuleContent {
	s.AlertRuleItems = v
	return s
}

func (s *CreateOrUpdateAlertRuleResponseBodyAlertRuleAlertRuleContent) SetCondition(v string) *CreateOrUpdateAlertRuleResponseBodyAlertRuleAlertRuleContent {
	s.Condition = &v
	return s
}

type CreateOrUpdateAlertRuleResponseBodyAlertRuleAlertRuleContentAlertRuleItems struct {
	// The aggregation method of the alert condition. Valid values:
	//
	// 	- AVG: calculates the average value
	//
	// 	- SUM: calculates the total value
	//
	// 	- MAX: selects the maximum value
	//
	// 	- MIN: selects the minimum value
	//
	// example:
	//
	// AVG
	Aggregate *string `json:"Aggregate,omitempty" xml:"Aggregate,omitempty"`
	// The metric of the alert condition.
	//
	// example:
	//
	// appstat.jvm.non_heap_used
	MetricKey *string `json:"MetricKey,omitempty" xml:"MetricKey,omitempty"`
	// Indicates the last N minutes.
	//
	// example:
	//
	// 1
	N *float32 `json:"N,omitempty" xml:"N,omitempty"`
	// The comparison operator that was used to compare the metric value with the threshold. Valid values:
	//
	// 	- CURRENT_GTE: greater than or equal to
	//
	// 	- CURRENT_LTE: less than or equal to
	//
	// 	- PREVIOUS_UP: the increase percentage compared with the last period
	//
	// 	- PREVIOUS_DOWN: the decrease percentage compared with the last period
	//
	// 	- HOH_UP: the increase percentage compared with the last hour
	//
	// 	- HOH_DOWN: the decrease percentage compared with the last hour
	//
	// 	- DOD_UP: the increase percentage compared with the last day
	//
	// 	- DOD_DOWN: the decrease percentage compared with the last day
	//
	// example:
	//
	// CURRENT_GTE
	Operator *string `json:"Operator,omitempty" xml:"Operator,omitempty"`
	// The threshold of the alert condition.
	//
	// example:
	//
	// 1
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s CreateOrUpdateAlertRuleResponseBodyAlertRuleAlertRuleContentAlertRuleItems) String() string {
	return tea.Prettify(s)
}

func (s CreateOrUpdateAlertRuleResponseBodyAlertRuleAlertRuleContentAlertRuleItems) GoString() string {
	return s.String()
}

func (s *CreateOrUpdateAlertRuleResponseBodyAlertRuleAlertRuleContentAlertRuleItems) SetAggregate(v string) *CreateOrUpdateAlertRuleResponseBodyAlertRuleAlertRuleContentAlertRuleItems {
	s.Aggregate = &v
	return s
}

func (s *CreateOrUpdateAlertRuleResponseBodyAlertRuleAlertRuleContentAlertRuleItems) SetMetricKey(v string) *CreateOrUpdateAlertRuleResponseBodyAlertRuleAlertRuleContentAlertRuleItems {
	s.MetricKey = &v
	return s
}

func (s *CreateOrUpdateAlertRuleResponseBodyAlertRuleAlertRuleContentAlertRuleItems) SetN(v float32) *CreateOrUpdateAlertRuleResponseBodyAlertRuleAlertRuleContentAlertRuleItems {
	s.N = &v
	return s
}

func (s *CreateOrUpdateAlertRuleResponseBodyAlertRuleAlertRuleContentAlertRuleItems) SetOperator(v string) *CreateOrUpdateAlertRuleResponseBodyAlertRuleAlertRuleContentAlertRuleItems {
	s.Operator = &v
	return s
}

func (s *CreateOrUpdateAlertRuleResponseBodyAlertRuleAlertRuleContentAlertRuleItems) SetValue(v string) *CreateOrUpdateAlertRuleResponseBodyAlertRuleAlertRuleContentAlertRuleItems {
	s.Value = &v
	return s
}

type CreateOrUpdateAlertRuleResponseBodyAlertRuleAnnotations struct {
	// The key of the annotation.
	//
	// example:
	//
	// 123
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The value of the annotation.
	//
	// example:
	//
	// abc
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s CreateOrUpdateAlertRuleResponseBodyAlertRuleAnnotations) String() string {
	return tea.Prettify(s)
}

func (s CreateOrUpdateAlertRuleResponseBodyAlertRuleAnnotations) GoString() string {
	return s.String()
}

func (s *CreateOrUpdateAlertRuleResponseBodyAlertRuleAnnotations) SetName(v string) *CreateOrUpdateAlertRuleResponseBodyAlertRuleAnnotations {
	s.Name = &v
	return s
}

func (s *CreateOrUpdateAlertRuleResponseBodyAlertRuleAnnotations) SetValue(v string) *CreateOrUpdateAlertRuleResponseBodyAlertRuleAnnotations {
	s.Value = &v
	return s
}

type CreateOrUpdateAlertRuleResponseBodyAlertRuleFilters struct {
	// The custom filter condition of the Browser Monitoring alert rule.
	CustomSLSFilters []*CreateOrUpdateAlertRuleResponseBodyAlertRuleFiltersCustomSLSFilters `json:"CustomSLSFilters,omitempty" xml:"CustomSLSFilters,omitempty" type:"Repeated"`
	// The information of the aggregation dimension.
	CustomSLSGroupByDimensions []*string `json:"CustomSLSGroupByDimensions,omitempty" xml:"CustomSLSGroupByDimensions,omitempty" type:"Repeated"`
	// The details of the custom filter condition.
	CustomSLSWheres []*string `json:"CustomSLSWheres,omitempty" xml:"CustomSLSWheres,omitempty" type:"Repeated"`
	// The information about each filter condition of the Application Monitoring or Browser Monitoring alert rule.
	DimFilters []*CreateOrUpdateAlertRuleResponseBodyAlertRuleFiltersDimFilters `json:"DimFilters,omitempty" xml:"DimFilters,omitempty" type:"Repeated"`
}

func (s CreateOrUpdateAlertRuleResponseBodyAlertRuleFilters) String() string {
	return tea.Prettify(s)
}

func (s CreateOrUpdateAlertRuleResponseBodyAlertRuleFilters) GoString() string {
	return s.String()
}

func (s *CreateOrUpdateAlertRuleResponseBodyAlertRuleFilters) SetCustomSLSFilters(v []*CreateOrUpdateAlertRuleResponseBodyAlertRuleFiltersCustomSLSFilters) *CreateOrUpdateAlertRuleResponseBodyAlertRuleFilters {
	s.CustomSLSFilters = v
	return s
}

func (s *CreateOrUpdateAlertRuleResponseBodyAlertRuleFilters) SetCustomSLSGroupByDimensions(v []*string) *CreateOrUpdateAlertRuleResponseBodyAlertRuleFilters {
	s.CustomSLSGroupByDimensions = v
	return s
}

func (s *CreateOrUpdateAlertRuleResponseBodyAlertRuleFilters) SetCustomSLSWheres(v []*string) *CreateOrUpdateAlertRuleResponseBodyAlertRuleFilters {
	s.CustomSLSWheres = v
	return s
}

func (s *CreateOrUpdateAlertRuleResponseBodyAlertRuleFilters) SetDimFilters(v []*CreateOrUpdateAlertRuleResponseBodyAlertRuleFiltersDimFilters) *CreateOrUpdateAlertRuleResponseBodyAlertRuleFilters {
	s.DimFilters = v
	return s
}

type CreateOrUpdateAlertRuleResponseBodyAlertRuleFiltersCustomSLSFilters struct {
	// The key of the filter condition.
	//
	// example:
	//
	// username
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The logical operator of the filter condition. Valid values:
	//
	// 	- \\=: equal to
	//
	// 	- not: not equal to
	//
	// example:
	//
	// =
	Opt *string `json:"Opt,omitempty" xml:"Opt,omitempty"`
	// Indicates whether this filter condition was displayed on the frontend.
	//
	// example:
	//
	// false
	Show *bool `json:"Show,omitempty" xml:"Show,omitempty"`
	// The log type of Browser Monitoring. This field was not included in other filter conditions.
	//
	// example:
	//
	// null
	T *string `json:"T,omitempty" xml:"T,omitempty"`
	// The value of the filter condition.
	//
	// example:
	//
	// test
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s CreateOrUpdateAlertRuleResponseBodyAlertRuleFiltersCustomSLSFilters) String() string {
	return tea.Prettify(s)
}

func (s CreateOrUpdateAlertRuleResponseBodyAlertRuleFiltersCustomSLSFilters) GoString() string {
	return s.String()
}

func (s *CreateOrUpdateAlertRuleResponseBodyAlertRuleFiltersCustomSLSFilters) SetKey(v string) *CreateOrUpdateAlertRuleResponseBodyAlertRuleFiltersCustomSLSFilters {
	s.Key = &v
	return s
}

func (s *CreateOrUpdateAlertRuleResponseBodyAlertRuleFiltersCustomSLSFilters) SetOpt(v string) *CreateOrUpdateAlertRuleResponseBodyAlertRuleFiltersCustomSLSFilters {
	s.Opt = &v
	return s
}

func (s *CreateOrUpdateAlertRuleResponseBodyAlertRuleFiltersCustomSLSFilters) SetShow(v bool) *CreateOrUpdateAlertRuleResponseBodyAlertRuleFiltersCustomSLSFilters {
	s.Show = &v
	return s
}

func (s *CreateOrUpdateAlertRuleResponseBodyAlertRuleFiltersCustomSLSFilters) SetT(v string) *CreateOrUpdateAlertRuleResponseBodyAlertRuleFiltersCustomSLSFilters {
	s.T = &v
	return s
}

func (s *CreateOrUpdateAlertRuleResponseBodyAlertRuleFiltersCustomSLSFilters) SetValue(v string) *CreateOrUpdateAlertRuleResponseBodyAlertRuleFiltersCustomSLSFilters {
	s.Value = &v
	return s
}

type CreateOrUpdateAlertRuleResponseBodyAlertRuleFiltersDimFilters struct {
	// The key of the filter condition.
	//
	// example:
	//
	// rootIp
	FilterKey *string `json:"FilterKey,omitempty" xml:"FilterKey,omitempty"`
	// The logical operator of the filter condition.
	//
	// example:
	//
	// ALL
	FilterOpt *string `json:"FilterOpt,omitempty" xml:"FilterOpt,omitempty"`
	// The details of the filter condition.
	FilterValues []*string `json:"FilterValues,omitempty" xml:"FilterValues,omitempty" type:"Repeated"`
}

func (s CreateOrUpdateAlertRuleResponseBodyAlertRuleFiltersDimFilters) String() string {
	return tea.Prettify(s)
}

func (s CreateOrUpdateAlertRuleResponseBodyAlertRuleFiltersDimFilters) GoString() string {
	return s.String()
}

func (s *CreateOrUpdateAlertRuleResponseBodyAlertRuleFiltersDimFilters) SetFilterKey(v string) *CreateOrUpdateAlertRuleResponseBodyAlertRuleFiltersDimFilters {
	s.FilterKey = &v
	return s
}

func (s *CreateOrUpdateAlertRuleResponseBodyAlertRuleFiltersDimFilters) SetFilterOpt(v string) *CreateOrUpdateAlertRuleResponseBodyAlertRuleFiltersDimFilters {
	s.FilterOpt = &v
	return s
}

func (s *CreateOrUpdateAlertRuleResponseBodyAlertRuleFiltersDimFilters) SetFilterValues(v []*string) *CreateOrUpdateAlertRuleResponseBodyAlertRuleFiltersDimFilters {
	s.FilterValues = v
	return s
}

type CreateOrUpdateAlertRuleResponseBodyAlertRuleLabels struct {
	// The tag key.
	//
	// example:
	//
	// 123
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The tag value.
	//
	// example:
	//
	// abc
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s CreateOrUpdateAlertRuleResponseBodyAlertRuleLabels) String() string {
	return tea.Prettify(s)
}

func (s CreateOrUpdateAlertRuleResponseBodyAlertRuleLabels) GoString() string {
	return s.String()
}

func (s *CreateOrUpdateAlertRuleResponseBodyAlertRuleLabels) SetName(v string) *CreateOrUpdateAlertRuleResponseBodyAlertRuleLabels {
	s.Name = &v
	return s
}

func (s *CreateOrUpdateAlertRuleResponseBodyAlertRuleLabels) SetValue(v string) *CreateOrUpdateAlertRuleResponseBodyAlertRuleLabels {
	s.Value = &v
	return s
}

type CreateOrUpdateAlertRuleResponseBodyAlertRuleTags struct {
	// The tag key.
	//
	// example:
	//
	// owner
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The tag value.
	//
	// example:
	//
	// John
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s CreateOrUpdateAlertRuleResponseBodyAlertRuleTags) String() string {
	return tea.Prettify(s)
}

func (s CreateOrUpdateAlertRuleResponseBodyAlertRuleTags) GoString() string {
	return s.String()
}

func (s *CreateOrUpdateAlertRuleResponseBodyAlertRuleTags) SetKey(v string) *CreateOrUpdateAlertRuleResponseBodyAlertRuleTags {
	s.Key = &v
	return s
}

func (s *CreateOrUpdateAlertRuleResponseBodyAlertRuleTags) SetValue(v string) *CreateOrUpdateAlertRuleResponseBodyAlertRuleTags {
	s.Value = &v
	return s
}

type CreateOrUpdateAlertRuleResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateOrUpdateAlertRuleResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateOrUpdateAlertRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateOrUpdateAlertRuleResponse) GoString() string {
	return s.String()
}

func (s *CreateOrUpdateAlertRuleResponse) SetHeaders(v map[string]*string) *CreateOrUpdateAlertRuleResponse {
	s.Headers = v
	return s
}

func (s *CreateOrUpdateAlertRuleResponse) SetStatusCode(v int32) *CreateOrUpdateAlertRuleResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateOrUpdateAlertRuleResponse) SetBody(v *CreateOrUpdateAlertRuleResponseBody) *CreateOrUpdateAlertRuleResponse {
	s.Body = v
	return s
}

type CreateOrUpdateContactRequest struct {
	// The ID of the alert contact.
	//
	// 	- If you do not specify this parameter, a new alert contact is created.
	//
	// 	- If you specify this parameter, the specified alert contact is modified.
	//
	// example:
	//
	// 123
	ContactId *int64 `json:"ContactId,omitempty" xml:"ContactId,omitempty"`
	// The name of the alert contact.
	//
	// This parameter is required.
	//
	// example:
	//
	// JohnDoe
	ContactName *string `json:"ContactName,omitempty" xml:"ContactName,omitempty"`
	CorpUserId  *string `json:"CorpUserId,omitempty" xml:"CorpUserId,omitempty"`
	// The webhook URL of the DingTalk chatbot.
	//
	// example:
	//
	// https://oapi.dingtalk.com/robot/send?access_token=69d4e0******
	DingRobotUrl *string `json:"DingRobotUrl,omitempty" xml:"DingRobotUrl,omitempty"`
	// The email address of the alert contact.
	//
	// > You must specify at least one of the **Phone*	- and **Email*	- parameters. Each mobile number or email address can be used for only one alert contact.
	//
	// example:
	//
	// someone@example.com
	Email *string `json:"Email,omitempty" xml:"Email,omitempty"`
	// Specifies whether the email address is verified.
	//
	// example:
	//
	// true
	IsEmailVerify *bool `json:"IsEmailVerify,omitempty" xml:"IsEmailVerify,omitempty"`
	// The mobile number of the alert contact.
	//
	// > You must specify at least one of the **Phone*	- and **Email*	- parameters. Each mobile number or email address can be used for only one alert contact.
	//
	// example:
	//
	// 1381111****
	Phone *string `json:"Phone,omitempty" xml:"Phone,omitempty"`
	// The operation that you want to perform if phone calls fail to be answered. Valid values:
	//
	// 	- 0: No operation is performed.
	//
	// 	- 1: A phone call is made again.
	//
	// 	- 2: A text message is sent.
	//
	// 	- 3 (default value): The global default value is used.
	//
	// example:
	//
	// 3
	ReissueSendNotice *int64 `json:"ReissueSendNotice,omitempty" xml:"ReissueSendNotice,omitempty"`
	// The resource group ID.
	//
	// example:
	//
	// rg-acfmxyexli2****
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
}

func (s CreateOrUpdateContactRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateOrUpdateContactRequest) GoString() string {
	return s.String()
}

func (s *CreateOrUpdateContactRequest) SetContactId(v int64) *CreateOrUpdateContactRequest {
	s.ContactId = &v
	return s
}

func (s *CreateOrUpdateContactRequest) SetContactName(v string) *CreateOrUpdateContactRequest {
	s.ContactName = &v
	return s
}

func (s *CreateOrUpdateContactRequest) SetCorpUserId(v string) *CreateOrUpdateContactRequest {
	s.CorpUserId = &v
	return s
}

func (s *CreateOrUpdateContactRequest) SetDingRobotUrl(v string) *CreateOrUpdateContactRequest {
	s.DingRobotUrl = &v
	return s
}

func (s *CreateOrUpdateContactRequest) SetEmail(v string) *CreateOrUpdateContactRequest {
	s.Email = &v
	return s
}

func (s *CreateOrUpdateContactRequest) SetIsEmailVerify(v bool) *CreateOrUpdateContactRequest {
	s.IsEmailVerify = &v
	return s
}

func (s *CreateOrUpdateContactRequest) SetPhone(v string) *CreateOrUpdateContactRequest {
	s.Phone = &v
	return s
}

func (s *CreateOrUpdateContactRequest) SetReissueSendNotice(v int64) *CreateOrUpdateContactRequest {
	s.ReissueSendNotice = &v
	return s
}

func (s *CreateOrUpdateContactRequest) SetResourceGroupId(v string) *CreateOrUpdateContactRequest {
	s.ResourceGroupId = &v
	return s
}

type CreateOrUpdateContactResponseBody struct {
	// The object of the alert contact.
	AlertContact *CreateOrUpdateContactResponseBodyAlertContact `json:"AlertContact,omitempty" xml:"AlertContact,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// E9C9DA3D-10FE-472E-9EEF-2D0A3E41****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateOrUpdateContactResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateOrUpdateContactResponseBody) GoString() string {
	return s.String()
}

func (s *CreateOrUpdateContactResponseBody) SetAlertContact(v *CreateOrUpdateContactResponseBodyAlertContact) *CreateOrUpdateContactResponseBody {
	s.AlertContact = v
	return s
}

func (s *CreateOrUpdateContactResponseBody) SetRequestId(v string) *CreateOrUpdateContactResponseBody {
	s.RequestId = &v
	return s
}

type CreateOrUpdateContactResponseBodyAlertContact struct {
	// The ID of the alert contact.
	//
	// example:
	//
	// 123
	ContactId *float32 `json:"ContactId,omitempty" xml:"ContactId,omitempty"`
	// The name of the alert contact.
	//
	// example:
	//
	// JohnDoe
	ContactName *string `json:"ContactName,omitempty" xml:"ContactName,omitempty"`
	// The webhook URL of the DingTalk chatbot.
	//
	// example:
	//
	// https://test1.com
	DingRobotUrl *string `json:"DingRobotUrl,omitempty" xml:"DingRobotUrl,omitempty"`
	// The email address of the alert contact.
	//
	// example:
	//
	// someone@example.com
	Email *string `json:"Email,omitempty" xml:"Email,omitempty"`
	// Indicates whether the mobile number was verified. Valid values:
	//
	// 	- `false` (default value): No
	//
	// 	- `true`: Yes
	//
	// You can call the **SendTTSVerifyLink*	- operation to verify the mobile number of an alert contact. Only verified mobile numbers can be specified in a notification policy to receive phone calls.
	//
	// example:
	//
	// false
	IsVerify *bool `json:"IsVerify,omitempty" xml:"IsVerify,omitempty"`
	// The mobile number of the alert contact.
	//
	// example:
	//
	// 1381111****
	Phone *string `json:"Phone,omitempty" xml:"Phone,omitempty"`
	// The operation that you want to perform if phone calls fail to be answered. Valid values: 0: No operation is performed. 1: A phone call is made again. 2: A text message is sent. 3 (default value): The global default value is used.
	//
	// example:
	//
	// 3
	ReissueSendNotice *int64 `json:"ReissueSendNotice,omitempty" xml:"ReissueSendNotice,omitempty"`
	// Indicates whether the email address was verified.
	//
	// example:
	//
	// true
	IsEmailVerify *bool `json:"isEmailVerify,omitempty" xml:"isEmailVerify,omitempty"`
}

func (s CreateOrUpdateContactResponseBodyAlertContact) String() string {
	return tea.Prettify(s)
}

func (s CreateOrUpdateContactResponseBodyAlertContact) GoString() string {
	return s.String()
}

func (s *CreateOrUpdateContactResponseBodyAlertContact) SetContactId(v float32) *CreateOrUpdateContactResponseBodyAlertContact {
	s.ContactId = &v
	return s
}

func (s *CreateOrUpdateContactResponseBodyAlertContact) SetContactName(v string) *CreateOrUpdateContactResponseBodyAlertContact {
	s.ContactName = &v
	return s
}

func (s *CreateOrUpdateContactResponseBodyAlertContact) SetDingRobotUrl(v string) *CreateOrUpdateContactResponseBodyAlertContact {
	s.DingRobotUrl = &v
	return s
}

func (s *CreateOrUpdateContactResponseBodyAlertContact) SetEmail(v string) *CreateOrUpdateContactResponseBodyAlertContact {
	s.Email = &v
	return s
}

func (s *CreateOrUpdateContactResponseBodyAlertContact) SetIsVerify(v bool) *CreateOrUpdateContactResponseBodyAlertContact {
	s.IsVerify = &v
	return s
}

func (s *CreateOrUpdateContactResponseBodyAlertContact) SetPhone(v string) *CreateOrUpdateContactResponseBodyAlertContact {
	s.Phone = &v
	return s
}

func (s *CreateOrUpdateContactResponseBodyAlertContact) SetReissueSendNotice(v int64) *CreateOrUpdateContactResponseBodyAlertContact {
	s.ReissueSendNotice = &v
	return s
}

func (s *CreateOrUpdateContactResponseBodyAlertContact) SetIsEmailVerify(v bool) *CreateOrUpdateContactResponseBodyAlertContact {
	s.IsEmailVerify = &v
	return s
}

type CreateOrUpdateContactResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateOrUpdateContactResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateOrUpdateContactResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateOrUpdateContactResponse) GoString() string {
	return s.String()
}

func (s *CreateOrUpdateContactResponse) SetHeaders(v map[string]*string) *CreateOrUpdateContactResponse {
	s.Headers = v
	return s
}

func (s *CreateOrUpdateContactResponse) SetStatusCode(v int32) *CreateOrUpdateContactResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateOrUpdateContactResponse) SetBody(v *CreateOrUpdateContactResponseBody) *CreateOrUpdateContactResponse {
	s.Body = v
	return s
}

type CreateOrUpdateContactGroupRequest struct {
	// The ID of the alert contact group.
	//
	// 	- If you do not specify this parameter, an alert contact group is created.
	//
	// 	- If you specify this parameter, the specified alert contact group is modified.
	//
	// example:
	//
	// 123
	ContactGroupId *int64 `json:"ContactGroupId,omitempty" xml:"ContactGroupId,omitempty"`
	// The name of the alert contact group.
	//
	// This parameter is required.
	//
	// example:
	//
	// TestGroup
	ContactGroupName *string `json:"ContactGroupName,omitempty" xml:"ContactGroupName,omitempty"`
	// The ID of the contact that you want to add to the contact group. Separate multiple IDs with commas (,).
	//
	// example:
	//
	// [1,2,3]
	ContactIds *string `json:"ContactIds,omitempty" xml:"ContactIds,omitempty"`
}

func (s CreateOrUpdateContactGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateOrUpdateContactGroupRequest) GoString() string {
	return s.String()
}

func (s *CreateOrUpdateContactGroupRequest) SetContactGroupId(v int64) *CreateOrUpdateContactGroupRequest {
	s.ContactGroupId = &v
	return s
}

func (s *CreateOrUpdateContactGroupRequest) SetContactGroupName(v string) *CreateOrUpdateContactGroupRequest {
	s.ContactGroupName = &v
	return s
}

func (s *CreateOrUpdateContactGroupRequest) SetContactIds(v string) *CreateOrUpdateContactGroupRequest {
	s.ContactIds = &v
	return s
}

type CreateOrUpdateContactGroupResponseBody struct {
	// The information about the alert contact group.
	AlertContactGroup *CreateOrUpdateContactGroupResponseBodyAlertContactGroup `json:"AlertContactGroup,omitempty" xml:"AlertContactGroup,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// 9319A57D-2D9E-472A-B69B-CF3CD16D****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateOrUpdateContactGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateOrUpdateContactGroupResponseBody) GoString() string {
	return s.String()
}

func (s *CreateOrUpdateContactGroupResponseBody) SetAlertContactGroup(v *CreateOrUpdateContactGroupResponseBodyAlertContactGroup) *CreateOrUpdateContactGroupResponseBody {
	s.AlertContactGroup = v
	return s
}

func (s *CreateOrUpdateContactGroupResponseBody) SetRequestId(v string) *CreateOrUpdateContactGroupResponseBody {
	s.RequestId = &v
	return s
}

type CreateOrUpdateContactGroupResponseBodyAlertContactGroup struct {
	// The ID of the alert contact group.
	//
	// example:
	//
	// 123
	ContactGroupId *float32 `json:"ContactGroupId,omitempty" xml:"ContactGroupId,omitempty"`
	// The name of the alert contact group.
	//
	// example:
	//
	// TestGroup
	ContactGroupName *string `json:"ContactGroupName,omitempty" xml:"ContactGroupName,omitempty"`
	// The IDs of the contacts that are included in the alert contact group.
	//
	// example:
	//
	// [1,2,3]
	ContactIds *string `json:"ContactIds,omitempty" xml:"ContactIds,omitempty"`
}

func (s CreateOrUpdateContactGroupResponseBodyAlertContactGroup) String() string {
	return tea.Prettify(s)
}

func (s CreateOrUpdateContactGroupResponseBodyAlertContactGroup) GoString() string {
	return s.String()
}

func (s *CreateOrUpdateContactGroupResponseBodyAlertContactGroup) SetContactGroupId(v float32) *CreateOrUpdateContactGroupResponseBodyAlertContactGroup {
	s.ContactGroupId = &v
	return s
}

func (s *CreateOrUpdateContactGroupResponseBodyAlertContactGroup) SetContactGroupName(v string) *CreateOrUpdateContactGroupResponseBodyAlertContactGroup {
	s.ContactGroupName = &v
	return s
}

func (s *CreateOrUpdateContactGroupResponseBodyAlertContactGroup) SetContactIds(v string) *CreateOrUpdateContactGroupResponseBodyAlertContactGroup {
	s.ContactIds = &v
	return s
}

type CreateOrUpdateContactGroupResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateOrUpdateContactGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateOrUpdateContactGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateOrUpdateContactGroupResponse) GoString() string {
	return s.String()
}

func (s *CreateOrUpdateContactGroupResponse) SetHeaders(v map[string]*string) *CreateOrUpdateContactGroupResponse {
	s.Headers = v
	return s
}

func (s *CreateOrUpdateContactGroupResponse) SetStatusCode(v int32) *CreateOrUpdateContactGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateOrUpdateContactGroupResponse) SetBody(v *CreateOrUpdateContactGroupResponseBody) *CreateOrUpdateContactGroupResponse {
	s.Body = v
	return s
}

type CreateOrUpdateEventBridgeIntegrationRequest struct {
	// The AccessKey ID that is used to connect to EventBridge.
	//
	// example:
	//
	// abc******************
	AccessKey *string `json:"AccessKey,omitempty" xml:"AccessKey,omitempty"`
	// The AccessKey secret that is used to connect to EventBridge.
	//
	// example:
	//
	// abc******************
	AccessSecret *string `json:"AccessSecret,omitempty" xml:"AccessSecret,omitempty"`
	// The description of the EventBridge integration.
	//
	// example:
	//
	// test
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The public endpoint of EventBridge.
	//
	// example:
	//
	// http://xxxxx
	Endpoint *string `json:"Endpoint,omitempty" xml:"Endpoint,omitempty"`
	// The name of the event bus.
	//
	// example:
	//
	// EventBus_Test
	EventBusName *string `json:"EventBusName,omitempty" xml:"EventBusName,omitempty"`
	// The region ID of the event bus.
	//
	// example:
	//
	// cn-hangzhou
	EventBusRegionId *string `json:"EventBusRegionId,omitempty" xml:"EventBusRegionId,omitempty"`
	// The ID of the EventBridge integration.
	//
	// 	- If you do not specify this parameter, an EventBridge integration is created.
	//
	// 	- If you specify this parameter, the specified EventBridge integration is modified.
	//
	// example:
	//
	// 123
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The name of the EventBridge integration.
	//
	// example:
	//
	// EventBridge_Test
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The event source.
	//
	// example:
	//
	// arms
	Source *string `json:"Source,omitempty" xml:"Source,omitempty"`
}

func (s CreateOrUpdateEventBridgeIntegrationRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateOrUpdateEventBridgeIntegrationRequest) GoString() string {
	return s.String()
}

func (s *CreateOrUpdateEventBridgeIntegrationRequest) SetAccessKey(v string) *CreateOrUpdateEventBridgeIntegrationRequest {
	s.AccessKey = &v
	return s
}

func (s *CreateOrUpdateEventBridgeIntegrationRequest) SetAccessSecret(v string) *CreateOrUpdateEventBridgeIntegrationRequest {
	s.AccessSecret = &v
	return s
}

func (s *CreateOrUpdateEventBridgeIntegrationRequest) SetDescription(v string) *CreateOrUpdateEventBridgeIntegrationRequest {
	s.Description = &v
	return s
}

func (s *CreateOrUpdateEventBridgeIntegrationRequest) SetEndpoint(v string) *CreateOrUpdateEventBridgeIntegrationRequest {
	s.Endpoint = &v
	return s
}

func (s *CreateOrUpdateEventBridgeIntegrationRequest) SetEventBusName(v string) *CreateOrUpdateEventBridgeIntegrationRequest {
	s.EventBusName = &v
	return s
}

func (s *CreateOrUpdateEventBridgeIntegrationRequest) SetEventBusRegionId(v string) *CreateOrUpdateEventBridgeIntegrationRequest {
	s.EventBusRegionId = &v
	return s
}

func (s *CreateOrUpdateEventBridgeIntegrationRequest) SetId(v int64) *CreateOrUpdateEventBridgeIntegrationRequest {
	s.Id = &v
	return s
}

func (s *CreateOrUpdateEventBridgeIntegrationRequest) SetName(v string) *CreateOrUpdateEventBridgeIntegrationRequest {
	s.Name = &v
	return s
}

func (s *CreateOrUpdateEventBridgeIntegrationRequest) SetSource(v string) *CreateOrUpdateEventBridgeIntegrationRequest {
	s.Source = &v
	return s
}

type CreateOrUpdateEventBridgeIntegrationResponseBody struct {
	// The information about the EventBridge integration.
	EventBridgeIntegration *CreateOrUpdateEventBridgeIntegrationResponseBodyEventBridgeIntegration `json:"EventBridgeIntegration,omitempty" xml:"EventBridgeIntegration,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// 2B289756-E791-5842-BCBD-AD414C******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateOrUpdateEventBridgeIntegrationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateOrUpdateEventBridgeIntegrationResponseBody) GoString() string {
	return s.String()
}

func (s *CreateOrUpdateEventBridgeIntegrationResponseBody) SetEventBridgeIntegration(v *CreateOrUpdateEventBridgeIntegrationResponseBodyEventBridgeIntegration) *CreateOrUpdateEventBridgeIntegrationResponseBody {
	s.EventBridgeIntegration = v
	return s
}

func (s *CreateOrUpdateEventBridgeIntegrationResponseBody) SetRequestId(v string) *CreateOrUpdateEventBridgeIntegrationResponseBody {
	s.RequestId = &v
	return s
}

type CreateOrUpdateEventBridgeIntegrationResponseBodyEventBridgeIntegration struct {
	// The AccessKey ID that is used to connect to EventBridge.
	//
	// example:
	//
	// abc******************
	AccessKey *string `json:"AccessKey,omitempty" xml:"AccessKey,omitempty"`
	// The AccessKey secret that is used to connect to EventBridge.
	//
	// example:
	//
	// abc******************
	AccessSecret *string `json:"AccessSecret,omitempty" xml:"AccessSecret,omitempty"`
	// The description of the EventBridge integration.
	//
	// example:
	//
	// test
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The public endpoint of EventBridge.
	//
	// example:
	//
	// http://xxxxx
	Endpoint *string `json:"Endpoint,omitempty" xml:"Endpoint,omitempty"`
	// The name of the event bus.
	//
	// example:
	//
	// EventBus_Test
	EventBusName *string `json:"EventBusName,omitempty" xml:"EventBusName,omitempty"`
	// The region ID of the event bus.
	//
	// example:
	//
	// cn-hangzhou
	EventBusRegionId *string `json:"EventBusRegionId,omitempty" xml:"EventBusRegionId,omitempty"`
	// The ID of the EventBridge integration.
	//
	// example:
	//
	// 123
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The name of the EventBridge integration.
	//
	// example:
	//
	// EventBridge_Test
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The event source.
	//
	// example:
	//
	// arms
	Source *string `json:"Source,omitempty" xml:"Source,omitempty"`
}

func (s CreateOrUpdateEventBridgeIntegrationResponseBodyEventBridgeIntegration) String() string {
	return tea.Prettify(s)
}

func (s CreateOrUpdateEventBridgeIntegrationResponseBodyEventBridgeIntegration) GoString() string {
	return s.String()
}

func (s *CreateOrUpdateEventBridgeIntegrationResponseBodyEventBridgeIntegration) SetAccessKey(v string) *CreateOrUpdateEventBridgeIntegrationResponseBodyEventBridgeIntegration {
	s.AccessKey = &v
	return s
}

func (s *CreateOrUpdateEventBridgeIntegrationResponseBodyEventBridgeIntegration) SetAccessSecret(v string) *CreateOrUpdateEventBridgeIntegrationResponseBodyEventBridgeIntegration {
	s.AccessSecret = &v
	return s
}

func (s *CreateOrUpdateEventBridgeIntegrationResponseBodyEventBridgeIntegration) SetDescription(v string) *CreateOrUpdateEventBridgeIntegrationResponseBodyEventBridgeIntegration {
	s.Description = &v
	return s
}

func (s *CreateOrUpdateEventBridgeIntegrationResponseBodyEventBridgeIntegration) SetEndpoint(v string) *CreateOrUpdateEventBridgeIntegrationResponseBodyEventBridgeIntegration {
	s.Endpoint = &v
	return s
}

func (s *CreateOrUpdateEventBridgeIntegrationResponseBodyEventBridgeIntegration) SetEventBusName(v string) *CreateOrUpdateEventBridgeIntegrationResponseBodyEventBridgeIntegration {
	s.EventBusName = &v
	return s
}

func (s *CreateOrUpdateEventBridgeIntegrationResponseBodyEventBridgeIntegration) SetEventBusRegionId(v string) *CreateOrUpdateEventBridgeIntegrationResponseBodyEventBridgeIntegration {
	s.EventBusRegionId = &v
	return s
}

func (s *CreateOrUpdateEventBridgeIntegrationResponseBodyEventBridgeIntegration) SetId(v int64) *CreateOrUpdateEventBridgeIntegrationResponseBodyEventBridgeIntegration {
	s.Id = &v
	return s
}

func (s *CreateOrUpdateEventBridgeIntegrationResponseBodyEventBridgeIntegration) SetName(v string) *CreateOrUpdateEventBridgeIntegrationResponseBodyEventBridgeIntegration {
	s.Name = &v
	return s
}

func (s *CreateOrUpdateEventBridgeIntegrationResponseBodyEventBridgeIntegration) SetSource(v string) *CreateOrUpdateEventBridgeIntegrationResponseBodyEventBridgeIntegration {
	s.Source = &v
	return s
}

type CreateOrUpdateEventBridgeIntegrationResponse struct {
	Headers    map[string]*string                                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateOrUpdateEventBridgeIntegrationResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateOrUpdateEventBridgeIntegrationResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateOrUpdateEventBridgeIntegrationResponse) GoString() string {
	return s.String()
}

func (s *CreateOrUpdateEventBridgeIntegrationResponse) SetHeaders(v map[string]*string) *CreateOrUpdateEventBridgeIntegrationResponse {
	s.Headers = v
	return s
}

func (s *CreateOrUpdateEventBridgeIntegrationResponse) SetStatusCode(v int32) *CreateOrUpdateEventBridgeIntegrationResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateOrUpdateEventBridgeIntegrationResponse) SetBody(v *CreateOrUpdateEventBridgeIntegrationResponseBody) *CreateOrUpdateEventBridgeIntegrationResponse {
	s.Body = v
	return s
}

type CreateOrUpdateIMRobotRequest struct {
	// The configurations of the alert card template. For more information about the parameters in the template, see the following section.
	//
	// example:
	//
	// {     "button": [         "claim",         "close",         "follow",         "send_itsm",         "block",         "unResolvedIncident"     ],     "field": [         {             "fieldName": "alarmName",             "visible": true         },         {             "fieldName": "notificationPolicy",             "visible": true         },         {             "fieldName": "alarmContent",             "visible": true         },         {             "fieldName": "alarmTime",             "visible": true         },         {             "fieldName": "seriesChart",             "visible": true         },         {             "fieldName": "includeEvent",             "visible": true         },         {             "fieldName": "assigned",             "visible": true         },         {             "fieldName": "similarAlarm",             "visible": true         },         {             "fieldName": "operator",             "visible": true         }     ] }
	CardTemplate *string `json:"CardTemplate,omitempty" xml:"CardTemplate,omitempty"`
	// Specifies whether to send daily statistics. Valid values:
	//
	// 	- `false` (default): Daily statistics are not sent.
	//
	// 	- `true`: Daily statistics are sent. If you set the value to `true`, the **DailyNocTime*	- parameter is required.
	//
	// example:
	//
	// true
	DailyNoc *bool `json:"DailyNoc,omitempty" xml:"DailyNoc,omitempty"`
	// The points in time at which the daily statistics are sent. Separate multiple points in time with commas (,). The points in time are in the HH:SS format. The information that ARMS sends at the specified points in time includes the total number of alerts generated on the current day, the number of cleared alerts, and the number of alerts to be cleared.
	//
	// example:
	//
	// 09:30,17:00
	DailyNocTime *string `json:"DailyNocTime,omitempty" xml:"DailyNocTime,omitempty"`
	// The signature key of DingTalk. If you specify a signature key, DingTalk authentication is performed by using the signature key. If you do not specify a signature key, a whitelist is used for authentication by default. The keyword of the whitelist is **Alert**.
	//
	// example:
	//
	// ******
	DingSignKey *string `json:"DingSignKey,omitempty" xml:"DingSignKey,omitempty"`
	// Specifies whether to enable the Outgoing feature.
	//
	// example:
	//
	// true
	EnableOutgoing *bool `json:"EnableOutgoing,omitempty" xml:"EnableOutgoing,omitempty"`
	// The webhook URL of the IM chatbot.
	//
	// This parameter is required.
	//
	// example:
	//
	// https://oapi.dingtalk.com/robot/send?access_token=e1a049121******
	RobotAddress *string `json:"RobotAddress,omitempty" xml:"RobotAddress,omitempty"`
	// The ID of the IM chatbot.
	//
	// > If you do not specify the parameter, a new IM chatbot is created.
	//
	// example:
	//
	// 123
	RobotId *int64 `json:"RobotId,omitempty" xml:"RobotId,omitempty"`
	// The name of the IM chatbot.
	//
	// This parameter is required.
	//
	// example:
	//
	// Chatbot name
	RobotName *string `json:"RobotName,omitempty" xml:"RobotName,omitempty"`
	// The token required to enable the Outgoing feature.
	//
	// example:
	//
	// 1656558719183be1245ab44********
	Token *string `json:"Token,omitempty" xml:"Token,omitempty"`
	// The type of the IM chatbot. Valid values:
	//
	// 	- `dingding`: DingTalk chatbot
	//
	// 	- `wechat`: WeCom chatbot
	//
	// example:
	//
	// dingding
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s CreateOrUpdateIMRobotRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateOrUpdateIMRobotRequest) GoString() string {
	return s.String()
}

func (s *CreateOrUpdateIMRobotRequest) SetCardTemplate(v string) *CreateOrUpdateIMRobotRequest {
	s.CardTemplate = &v
	return s
}

func (s *CreateOrUpdateIMRobotRequest) SetDailyNoc(v bool) *CreateOrUpdateIMRobotRequest {
	s.DailyNoc = &v
	return s
}

func (s *CreateOrUpdateIMRobotRequest) SetDailyNocTime(v string) *CreateOrUpdateIMRobotRequest {
	s.DailyNocTime = &v
	return s
}

func (s *CreateOrUpdateIMRobotRequest) SetDingSignKey(v string) *CreateOrUpdateIMRobotRequest {
	s.DingSignKey = &v
	return s
}

func (s *CreateOrUpdateIMRobotRequest) SetEnableOutgoing(v bool) *CreateOrUpdateIMRobotRequest {
	s.EnableOutgoing = &v
	return s
}

func (s *CreateOrUpdateIMRobotRequest) SetRobotAddress(v string) *CreateOrUpdateIMRobotRequest {
	s.RobotAddress = &v
	return s
}

func (s *CreateOrUpdateIMRobotRequest) SetRobotId(v int64) *CreateOrUpdateIMRobotRequest {
	s.RobotId = &v
	return s
}

func (s *CreateOrUpdateIMRobotRequest) SetRobotName(v string) *CreateOrUpdateIMRobotRequest {
	s.RobotName = &v
	return s
}

func (s *CreateOrUpdateIMRobotRequest) SetToken(v string) *CreateOrUpdateIMRobotRequest {
	s.Token = &v
	return s
}

func (s *CreateOrUpdateIMRobotRequest) SetType(v string) *CreateOrUpdateIMRobotRequest {
	s.Type = &v
	return s
}

type CreateOrUpdateIMRobotResponseBody struct {
	// The information about the IM chatbot.
	AlertRobot *CreateOrUpdateIMRobotResponseBodyAlertRobot `json:"AlertRobot,omitempty" xml:"AlertRobot,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// 16AF921B-8187-489F-9913-43C808B4****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateOrUpdateIMRobotResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateOrUpdateIMRobotResponseBody) GoString() string {
	return s.String()
}

func (s *CreateOrUpdateIMRobotResponseBody) SetAlertRobot(v *CreateOrUpdateIMRobotResponseBodyAlertRobot) *CreateOrUpdateIMRobotResponseBody {
	s.AlertRobot = v
	return s
}

func (s *CreateOrUpdateIMRobotResponseBody) SetRequestId(v string) *CreateOrUpdateIMRobotResponseBody {
	s.RequestId = &v
	return s
}

type CreateOrUpdateIMRobotResponseBodyAlertRobot struct {
	// The configurations of the alert card template.
	//
	// example:
	//
	// {     "button": [         "claim",         "close",         "follow",         "send_itsm",         "block",         "unResolvedIncident"     ],     "field": [         {             "fieldName": "alarmName",             "visible": true         },         {             "fieldName": "notificationPolicy",             "visible": true         },         {             "fieldName": "alarmContent",             "visible": true         },         {             "fieldName": "alarmTime",             "visible": true         },         {             "fieldName": "seriesChart",             "visible": true         },         {             "fieldName": "includeEvent",             "visible": true         },         {             "fieldName": "assigned",             "visible": true         },         {             "fieldName": "similarAlarm",             "visible": true         },         {             "fieldName": "operator",             "visible": true         }     ] }
	CardTemplate *string `json:"CardTemplate,omitempty" xml:"CardTemplate,omitempty"`
	// Indicates whether daily statistics are sent. Valid values:
	//
	// 	- `false` (default): Daily statistics are not sent.
	//
	// 	- `true`: Daily statistics are sent.
	//
	// example:
	//
	// true
	DailyNoc *bool `json:"DailyNoc,omitempty" xml:"DailyNoc,omitempty"`
	// The point in time at which the daily statistics are sent. The information that ARMS sends at the specified points in time includes the total number of alerts generated on the current day, the number of cleared alerts, and the number of alerts to be cleared.
	//
	// example:
	//
	// 09:30,17:00
	DailyNocTime *string `json:"DailyNocTime,omitempty" xml:"DailyNocTime,omitempty"`
	// Indicates whether the Outgoing feature is enabled.
	//
	// example:
	//
	// true
	EnableOutgoing *bool `json:"EnableOutgoing,omitempty" xml:"EnableOutgoing,omitempty"`
	// The webhook URL of the IM chatbot.
	//
	// example:
	//
	// https://oapi.dingtalk.com/robot/send?access_token=e1a049121******
	RobotAddress *string `json:"RobotAddress,omitempty" xml:"RobotAddress,omitempty"`
	// The ID of the IM chatbot.
	//
	// example:
	//
	// 123
	RobotId *float32 `json:"RobotId,omitempty" xml:"RobotId,omitempty"`
	// The name of the IM chatbot.
	//
	// example:
	//
	// Chatbot name
	RobotName *string `json:"RobotName,omitempty" xml:"RobotName,omitempty"`
	// The token required to enable the Outgoing feature.
	//
	// example:
	//
	// 1656558719183be1245ab44********
	Token *string `json:"Token,omitempty" xml:"Token,omitempty"`
	// The type of the IM chatbot. Valid values:
	//
	// 	- `dingding`: DingTalk chatbot
	//
	// 	- `wechat`: WeCom chatbot
	//
	// example:
	//
	// dingding
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s CreateOrUpdateIMRobotResponseBodyAlertRobot) String() string {
	return tea.Prettify(s)
}

func (s CreateOrUpdateIMRobotResponseBodyAlertRobot) GoString() string {
	return s.String()
}

func (s *CreateOrUpdateIMRobotResponseBodyAlertRobot) SetCardTemplate(v string) *CreateOrUpdateIMRobotResponseBodyAlertRobot {
	s.CardTemplate = &v
	return s
}

func (s *CreateOrUpdateIMRobotResponseBodyAlertRobot) SetDailyNoc(v bool) *CreateOrUpdateIMRobotResponseBodyAlertRobot {
	s.DailyNoc = &v
	return s
}

func (s *CreateOrUpdateIMRobotResponseBodyAlertRobot) SetDailyNocTime(v string) *CreateOrUpdateIMRobotResponseBodyAlertRobot {
	s.DailyNocTime = &v
	return s
}

func (s *CreateOrUpdateIMRobotResponseBodyAlertRobot) SetEnableOutgoing(v bool) *CreateOrUpdateIMRobotResponseBodyAlertRobot {
	s.EnableOutgoing = &v
	return s
}

func (s *CreateOrUpdateIMRobotResponseBodyAlertRobot) SetRobotAddress(v string) *CreateOrUpdateIMRobotResponseBodyAlertRobot {
	s.RobotAddress = &v
	return s
}

func (s *CreateOrUpdateIMRobotResponseBodyAlertRobot) SetRobotId(v float32) *CreateOrUpdateIMRobotResponseBodyAlertRobot {
	s.RobotId = &v
	return s
}

func (s *CreateOrUpdateIMRobotResponseBodyAlertRobot) SetRobotName(v string) *CreateOrUpdateIMRobotResponseBodyAlertRobot {
	s.RobotName = &v
	return s
}

func (s *CreateOrUpdateIMRobotResponseBodyAlertRobot) SetToken(v string) *CreateOrUpdateIMRobotResponseBodyAlertRobot {
	s.Token = &v
	return s
}

func (s *CreateOrUpdateIMRobotResponseBodyAlertRobot) SetType(v string) *CreateOrUpdateIMRobotResponseBodyAlertRobot {
	s.Type = &v
	return s
}

type CreateOrUpdateIMRobotResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateOrUpdateIMRobotResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateOrUpdateIMRobotResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateOrUpdateIMRobotResponse) GoString() string {
	return s.String()
}

func (s *CreateOrUpdateIMRobotResponse) SetHeaders(v map[string]*string) *CreateOrUpdateIMRobotResponse {
	s.Headers = v
	return s
}

func (s *CreateOrUpdateIMRobotResponse) SetStatusCode(v int32) *CreateOrUpdateIMRobotResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateOrUpdateIMRobotResponse) SetBody(v *CreateOrUpdateIMRobotResponseBody) *CreateOrUpdateIMRobotResponse {
	s.Body = v
	return s
}

type CreateOrUpdateNotificationPolicyRequest struct {
	// Specifies whether to enable simple mode.
	DirectedMode *bool `json:"DirectedMode,omitempty" xml:"DirectedMode,omitempty"`
	// The ID of the escalation policy.
	//
	// example:
	//
	// 123
	EscalationPolicyId *int64 `json:"EscalationPolicyId,omitempty" xml:"EscalationPolicyId,omitempty"`
	// An array of alert event group objects.
	//
	// 	- If you do not specify the groupingFields field, all alerts will be sent to contacts based on `alertname`.
	//
	// 	- If you specify the groupingFields field, alerts with the same field will be sent to contacts in one notification.
	//
	//     Sample statement:
	//
	// ```
	//
	// {
	//
	// "groupWait":5,    // The waiting time for grouping.
	//
	// "groupInterval":30,     // The time interval of grouping.
	//
	// "groupingFields":["alertname"]       // The field that is used to group alert events.
	//
	// }
	//
	// ```
	//
	// example:
	//
	// { 	"groupWait":5, 	"groupInterval":30, 	"groupingFields":["alertname"] }
	GroupRule *string `json:"GroupRule,omitempty" xml:"GroupRule,omitempty"`
	// The ID of the notification policy.
	//
	// 	- If you do not specify this parameter, a new notification policy is created.
	//
	// 	- If you specify this parameter, the specified notification policy is modified.
	//
	// example:
	//
	// 1234
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The integration ID of the ticket system to which alerts are pushed.
	//
	// example:
	//
	// 34
	IntegrationId *int64 `json:"IntegrationId,omitempty" xml:"IntegrationId,omitempty"`
	// The matching rules. Sample statement:
	//
	// ```
	//
	// [
	//
	//  {
	//
	//  "matchingConditions": [
	//
	//  {
	//
	//  "value": "test",    // The value of the matching condition.
	//
	//  "key": "alertname",     // The key of the matching condition.
	//
	//  "operator": "eq"   // The logical operator of the matching condition, including eq (equal to), neq (not equal to), in (contains), nin (does not contain), re (regular expression match), and nre (regular expression mismatch).
	//
	//  }
	//
	//  ]
	//
	//  }
	//
	//  ]
	//
	// ```
	//
	// example:
	//
	// [ 		 { 		 "matchingConditions": [          { 		 "value": "test", 		 "key": "alertname", 		 "operator": "eq"         }       ]     }   ]
	MatchingRules *string `json:"MatchingRules,omitempty" xml:"MatchingRules,omitempty"`
	// The name of the notification policy.
	//
	// This parameter is required.
	//
	// example:
	//
	// notificationpolicy_test
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// An array of notification rule objects. Format:
	//
	//     {
	//
	//      "notifyStartTime":"00:00",      // The start time of the notification window.
	//
	//      "notifyEndTime":"23:59",       // The end time of the notification window.
	//
	//      "notifyChannels":["dingTalk", "email", "sms", "tts", "webhook"],       // The notification methods. Valid values: dingTalk, email, sms, tts, and webhook.
	//
	//      "notifyObjects":[{       // An array of notification objects.
	//
	//      "notifyObjectType":"CONTACT",       // The type of the notification object. Valid values: CONTACT (contact), CONTACT_GROUP (contact group), ARMS_CONTACT (ARMS contact), ARMS_CONTACT_GROUP (ARMS contact group), DING_ROBOT_GROUP (DingTalk, Lark, WeCom, or IM chatbot), and CONTACT_SCHEDULE (user on duty defined by a schedule).
	//
	//      "notifyObjectId":123,       // The ID of the notification object.
	//
	//      "notifyObjectName":"test"       // The name of the notification object.
	//
	//      "notifyChannels": [ // The notification methods specified for a contact. Valid values: email, sms, and tts.
	//
	//                     "email",
	//
	//                     "sms",
	//
	//                     "tts"
	//
	//                 ],
	//
	//      }]
	//
	// This parameter is required.
	//
	// example:
	//
	// {     "notifyStartTime":"00:00",     "notifyEndTime":"23:59",     "notifyChannels":[         "dingTalk",         "email",         "sms",         "tts",         "webhook"     ],     "notifyObjects":[         {             "notifyObjectType":"CONTACT",             "notifyObjectId":123,             "notifyObjectName":"test"         }     ] }
	NotifyRule *string `json:"NotifyRule,omitempty" xml:"NotifyRule,omitempty"`
	// The notification template. The default notification template is provided below the table.
	//
	// example:
	//
	// {{if .commonLabels.clustername }}
	//
	//  &gt;  Cluster Name: {{ .commonLabels.clustername }}
	//
	//  {{ end }}{{if eq "app" .commonLabels._aliyun_arms_involvedObject_kind }}
	//
	//  &gt;  App Name: {{ .commonLabels._aliyun_arms_involvedObject_name }}
	//
	//  {{ end }}{{ for .alerts }} &gt;  {{ .annotations.message }} {{if .generatorURL }} [Details]({{.generatorURL}})  {{end}} {{if .annotations._aliyun_arms_insights_analyze_link }}[&lt;font color=\\"#ff0000\\"&gt;diagnostic analysis&lt;/font&gt;]({{ .annotations._aliyun_arms_insights_analyze_link}}){{ end }}{{if  eq "1" .labels._aliyun_arms_denoise_code }} (Important:{{.labels._aliyun_arms_important_reason }}) {{end}}
	//
	// {{end}}
	NotifyTemplate *string `json:"NotifyTemplate,omitempty" xml:"NotifyTemplate,omitempty"`
	// The ID of the region.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// Specifies whether to resend a notification for a long-lasting unresolved alert. Default value: true. Valid values:
	//
	// 	- `true`: If you set this parameter to `true`, you must set **RepeatInterval**.
	//
	// 	- `false`: If you set this parameter to `false`, you must set **EscalationPolicyId**.
	//
	// example:
	//
	// true
	Repeat *bool `json:"Repeat,omitempty" xml:"Repeat,omitempty"`
	// The time interval at which a notification is resent for a long-lasting unresolved alert. Unit: seconds.
	//
	// example:
	//
	// 600
	RepeatInterval *int64 `json:"RepeatInterval,omitempty" xml:"RepeatInterval,omitempty"`
	// Indicates whether the system sends a notification to the contacts when the status of an alert changes to Resolved. Default value: true. Valid values:
	//
	// 	- `true`: The system sends a notification.
	//
	// 	- `false`: The system does not send a notification.
	//
	// example:
	//
	// true
	SendRecoverMessage *bool `json:"SendRecoverMessage,omitempty" xml:"SendRecoverMessage,omitempty"`
}

func (s CreateOrUpdateNotificationPolicyRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateOrUpdateNotificationPolicyRequest) GoString() string {
	return s.String()
}

func (s *CreateOrUpdateNotificationPolicyRequest) SetDirectedMode(v bool) *CreateOrUpdateNotificationPolicyRequest {
	s.DirectedMode = &v
	return s
}

func (s *CreateOrUpdateNotificationPolicyRequest) SetEscalationPolicyId(v int64) *CreateOrUpdateNotificationPolicyRequest {
	s.EscalationPolicyId = &v
	return s
}

func (s *CreateOrUpdateNotificationPolicyRequest) SetGroupRule(v string) *CreateOrUpdateNotificationPolicyRequest {
	s.GroupRule = &v
	return s
}

func (s *CreateOrUpdateNotificationPolicyRequest) SetId(v int64) *CreateOrUpdateNotificationPolicyRequest {
	s.Id = &v
	return s
}

func (s *CreateOrUpdateNotificationPolicyRequest) SetIntegrationId(v int64) *CreateOrUpdateNotificationPolicyRequest {
	s.IntegrationId = &v
	return s
}

func (s *CreateOrUpdateNotificationPolicyRequest) SetMatchingRules(v string) *CreateOrUpdateNotificationPolicyRequest {
	s.MatchingRules = &v
	return s
}

func (s *CreateOrUpdateNotificationPolicyRequest) SetName(v string) *CreateOrUpdateNotificationPolicyRequest {
	s.Name = &v
	return s
}

func (s *CreateOrUpdateNotificationPolicyRequest) SetNotifyRule(v string) *CreateOrUpdateNotificationPolicyRequest {
	s.NotifyRule = &v
	return s
}

func (s *CreateOrUpdateNotificationPolicyRequest) SetNotifyTemplate(v string) *CreateOrUpdateNotificationPolicyRequest {
	s.NotifyTemplate = &v
	return s
}

func (s *CreateOrUpdateNotificationPolicyRequest) SetRegionId(v string) *CreateOrUpdateNotificationPolicyRequest {
	s.RegionId = &v
	return s
}

func (s *CreateOrUpdateNotificationPolicyRequest) SetRepeat(v bool) *CreateOrUpdateNotificationPolicyRequest {
	s.Repeat = &v
	return s
}

func (s *CreateOrUpdateNotificationPolicyRequest) SetRepeatInterval(v int64) *CreateOrUpdateNotificationPolicyRequest {
	s.RepeatInterval = &v
	return s
}

func (s *CreateOrUpdateNotificationPolicyRequest) SetSendRecoverMessage(v bool) *CreateOrUpdateNotificationPolicyRequest {
	s.SendRecoverMessage = &v
	return s
}

type CreateOrUpdateNotificationPolicyResponseBody struct {
	// An array of notification policy objects.
	NotificationPolicy *CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicy `json:"NotificationPolicy,omitempty" xml:"NotificationPolicy,omitempty" type:"Struct"`
	// The ID of the request.
	//
	// example:
	//
	// A5EC8221-08F2-4C95-9AF1-49FD998C****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateOrUpdateNotificationPolicyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateOrUpdateNotificationPolicyResponseBody) GoString() string {
	return s.String()
}

func (s *CreateOrUpdateNotificationPolicyResponseBody) SetNotificationPolicy(v *CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicy) *CreateOrUpdateNotificationPolicyResponseBody {
	s.NotificationPolicy = v
	return s
}

func (s *CreateOrUpdateNotificationPolicyResponseBody) SetRequestId(v string) *CreateOrUpdateNotificationPolicyResponseBody {
	s.RequestId = &v
	return s
}

type CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicy struct {
	// 极简模式
	DirectedMode *bool `json:"DirectedMode,omitempty" xml:"DirectedMode,omitempty"`
	// The ID of the escalation policy.
	//
	// example:
	//
	// 123
	EscalationPolicyId *int64 `json:"EscalationPolicyId,omitempty" xml:"EscalationPolicyId,omitempty"`
	// An array of alert event group objects.
	GroupRule *CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicyGroupRule `json:"GroupRule,omitempty" xml:"GroupRule,omitempty" type:"Struct"`
	// The ID of the notification policy.
	//
	// example:
	//
	// 1234
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The integration ID of the ticket system to which alerts are pushed.
	//
	// example:
	//
	// 34
	IntegrationId *int64 `json:"IntegrationId,omitempty" xml:"IntegrationId,omitempty"`
	// An array of alert event matching rule objects.
	MatchingRules []*CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicyMatchingRules `json:"MatchingRules,omitempty" xml:"MatchingRules,omitempty" type:"Repeated"`
	// The name of the notification policy.
	//
	// example:
	//
	// notificationpolicy_test
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// An array of notification rule objects.
	NotifyRule *CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicyNotifyRule `json:"NotifyRule,omitempty" xml:"NotifyRule,omitempty" type:"Struct"`
	// An array of notification template objects.
	NotifyTemplate *CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicyNotifyTemplate `json:"NotifyTemplate,omitempty" xml:"NotifyTemplate,omitempty" type:"Struct"`
	// Indicates whether a notification is resent for a long-lasting unresolved alert. Default value: true. Valid values:
	//
	// - `true`: The system resends a notification for a long-lasting unresolved alert at a specified time interval.
	//
	// - `false`: The system sends a notification for a long-lasting unresolved alert based on an escalation policy.
	//
	// example:
	//
	// true
	Repeat *bool `json:"Repeat,omitempty" xml:"Repeat,omitempty"`
	// The time interval at which a notification is resent for a long-lasting unresolved alert. Unit: seconds.
	//
	// example:
	//
	// 600
	RepeatInterval *int64 `json:"RepeatInterval,omitempty" xml:"RepeatInterval,omitempty"`
	// Indicates whether the system sends a notification to the contacts when the status of an alert changes to Resolved. Default value: true. Valid values:
	//
	// - `true`: The system sends a notification.
	//
	// - `false`: The system does not send a notification.
	//
	// example:
	//
	// true
	SendRecoverMessage *bool `json:"SendRecoverMessage,omitempty" xml:"SendRecoverMessage,omitempty"`
}

func (s CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicy) String() string {
	return tea.Prettify(s)
}

func (s CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicy) GoString() string {
	return s.String()
}

func (s *CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicy) SetDirectedMode(v bool) *CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicy {
	s.DirectedMode = &v
	return s
}

func (s *CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicy) SetEscalationPolicyId(v int64) *CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicy {
	s.EscalationPolicyId = &v
	return s
}

func (s *CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicy) SetGroupRule(v *CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicyGroupRule) *CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicy {
	s.GroupRule = v
	return s
}

func (s *CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicy) SetId(v int64) *CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicy {
	s.Id = &v
	return s
}

func (s *CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicy) SetIntegrationId(v int64) *CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicy {
	s.IntegrationId = &v
	return s
}

func (s *CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicy) SetMatchingRules(v []*CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicyMatchingRules) *CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicy {
	s.MatchingRules = v
	return s
}

func (s *CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicy) SetName(v string) *CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicy {
	s.Name = &v
	return s
}

func (s *CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicy) SetNotifyRule(v *CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicyNotifyRule) *CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicy {
	s.NotifyRule = v
	return s
}

func (s *CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicy) SetNotifyTemplate(v *CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicyNotifyTemplate) *CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicy {
	s.NotifyTemplate = v
	return s
}

func (s *CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicy) SetRepeat(v bool) *CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicy {
	s.Repeat = &v
	return s
}

func (s *CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicy) SetRepeatInterval(v int64) *CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicy {
	s.RepeatInterval = &v
	return s
}

func (s *CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicy) SetSendRecoverMessage(v bool) *CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicy {
	s.SendRecoverMessage = &v
	return s
}

type CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicyGroupRule struct {
	// The time interval of grouping. Unit: seconds. Default value: 30.
	//
	// example:
	//
	// 30
	GroupInterval *int64 `json:"GroupInterval,omitempty" xml:"GroupInterval,omitempty"`
	// The waiting time for grouping. Unit: seconds. Default value: 5.
	//
	// example:
	//
	// 5
	GroupWait *int64 `json:"GroupWait,omitempty" xml:"GroupWait,omitempty"`
	// The field that is used for grouping.
	GroupingFields []*string `json:"GroupingFields,omitempty" xml:"GroupingFields,omitempty" type:"Repeated"`
}

func (s CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicyGroupRule) String() string {
	return tea.Prettify(s)
}

func (s CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicyGroupRule) GoString() string {
	return s.String()
}

func (s *CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicyGroupRule) SetGroupInterval(v int64) *CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicyGroupRule {
	s.GroupInterval = &v
	return s
}

func (s *CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicyGroupRule) SetGroupWait(v int64) *CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicyGroupRule {
	s.GroupWait = &v
	return s
}

func (s *CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicyGroupRule) SetGroupingFields(v []*string) *CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicyGroupRule {
	s.GroupingFields = v
	return s
}

type CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicyMatchingRules struct {
	// An array of alert event matching condition objects.
	MatchingConditions []*CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicyMatchingRulesMatchingConditions `json:"MatchingConditions,omitempty" xml:"MatchingConditions,omitempty" type:"Repeated"`
}

func (s CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicyMatchingRules) String() string {
	return tea.Prettify(s)
}

func (s CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicyMatchingRules) GoString() string {
	return s.String()
}

func (s *CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicyMatchingRules) SetMatchingConditions(v []*CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicyMatchingRulesMatchingConditions) *CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicyMatchingRules {
	s.MatchingConditions = v
	return s
}

type CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicyMatchingRulesMatchingConditions struct {
	// The key of the matching condition.
	//
	// example:
	//
	// altertname
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The logical operator of the matching condition. Valid values:
	//
	// 	- `eq`: equal to
	//
	// 	- `neq`: not equal to
	//
	// 	- `in`: contains
	//
	// 	- `nin`: does not contain
	//
	// 	- `re`: regular expression match
	//
	// 	- `nre`: regular expression mismatch
	//
	// example:
	//
	// eq
	Operator *string `json:"Operator,omitempty" xml:"Operator,omitempty"`
	// The value of the matching condition.
	//
	// example:
	//
	// test
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicyMatchingRulesMatchingConditions) String() string {
	return tea.Prettify(s)
}

func (s CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicyMatchingRulesMatchingConditions) GoString() string {
	return s.String()
}

func (s *CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicyMatchingRulesMatchingConditions) SetKey(v string) *CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicyMatchingRulesMatchingConditions {
	s.Key = &v
	return s
}

func (s *CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicyMatchingRulesMatchingConditions) SetOperator(v string) *CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicyMatchingRulesMatchingConditions {
	s.Operator = &v
	return s
}

func (s *CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicyMatchingRulesMatchingConditions) SetValue(v string) *CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicyMatchingRulesMatchingConditions {
	s.Value = &v
	return s
}

type CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicyNotifyRule struct {
	// The notification methods. Valid values:
	//
	// - `dingTalk`: DingTalk
	//
	// - `email`: email
	//
	// - `sms`: text message
	//
	// - `tts`: phone call
	//
	// - `webhook`: webhook
	NotifyChannels []*string `json:"NotifyChannels,omitempty" xml:"NotifyChannels,omitempty" type:"Repeated"`
	// The end time of the notification window.
	//
	// example:
	//
	// 23:59
	NotifyEndTime *string `json:"NotifyEndTime,omitempty" xml:"NotifyEndTime,omitempty"`
	// An array of notification contact objects.
	NotifyObjects []*CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicyNotifyRuleNotifyObjects `json:"NotifyObjects,omitempty" xml:"NotifyObjects,omitempty" type:"Repeated"`
	// The start time of the notification window.
	//
	// example:
	//
	// 00:00
	NotifyStartTime *string `json:"NotifyStartTime,omitempty" xml:"NotifyStartTime,omitempty"`
}

func (s CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicyNotifyRule) String() string {
	return tea.Prettify(s)
}

func (s CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicyNotifyRule) GoString() string {
	return s.String()
}

func (s *CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicyNotifyRule) SetNotifyChannels(v []*string) *CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicyNotifyRule {
	s.NotifyChannels = v
	return s
}

func (s *CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicyNotifyRule) SetNotifyEndTime(v string) *CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicyNotifyRule {
	s.NotifyEndTime = &v
	return s
}

func (s *CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicyNotifyRule) SetNotifyObjects(v []*CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicyNotifyRuleNotifyObjects) *CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicyNotifyRule {
	s.NotifyObjects = v
	return s
}

func (s *CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicyNotifyRule) SetNotifyStartTime(v string) *CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicyNotifyRule {
	s.NotifyStartTime = &v
	return s
}

type CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicyNotifyRuleNotifyObjects struct {
	// 通知对象为联系人时的单独的联系方式
	NotifyChannels []*string `json:"NotifyChannels,omitempty" xml:"NotifyChannels,omitempty" type:"Repeated"`
	// The ID of the notification contact.
	//
	// example:
	//
	// 123
	NotifyObjectId *int64 `json:"NotifyObjectId,omitempty" xml:"NotifyObjectId,omitempty"`
	// The name of the notification contact.
	//
	// example:
	//
	// test
	NotifyObjectName *string `json:"NotifyObjectName,omitempty" xml:"NotifyObjectName,omitempty"`
	// The type of the notification contact. Valid values:
	//
	// - CONTACT: an individual contact
	//
	// - CONTACT_GROUP: a contact group
	//
	// - DING_ROBOT: an instant messaging (IM) robot
	//
	// - CONTACT_SCHEDULE: a person on duty based on an established schedule
	//
	// example:
	//
	// CONTACT
	NotifyObjectType *string `json:"NotifyObjectType,omitempty" xml:"NotifyObjectType,omitempty"`
}

func (s CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicyNotifyRuleNotifyObjects) String() string {
	return tea.Prettify(s)
}

func (s CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicyNotifyRuleNotifyObjects) GoString() string {
	return s.String()
}

func (s *CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicyNotifyRuleNotifyObjects) SetNotifyChannels(v []*string) *CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicyNotifyRuleNotifyObjects {
	s.NotifyChannels = v
	return s
}

func (s *CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicyNotifyRuleNotifyObjects) SetNotifyObjectId(v int64) *CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicyNotifyRuleNotifyObjects {
	s.NotifyObjectId = &v
	return s
}

func (s *CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicyNotifyRuleNotifyObjects) SetNotifyObjectName(v string) *CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicyNotifyRuleNotifyObjects {
	s.NotifyObjectName = &v
	return s
}

func (s *CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicyNotifyRuleNotifyObjects) SetNotifyObjectType(v string) *CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicyNotifyRuleNotifyObjects {
	s.NotifyObjectType = &v
	return s
}

type CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicyNotifyTemplate struct {
	// The content of the alert notification sent through email.
	//
	// example:
	//
	// Alert Name: {{ .commonLabels.alertname }}{{if .commonLabels.clustername }}
	//
	// Cluster Name: {{ .commonLabels.clustername }} {{ end }}{{if eq "app" .commonLabels._aliyun_arms_involvedObject_kind }}
	//
	// App Name: {{ .commonLabels._aliyun_arms_involvedObject_name }} {{ end }}
	//
	// Notification Policy: {{ .dispatchRuleName }}
	//
	// Alert Time: {{ .startTime }}
	//
	// Description: {{ for .alerts }} {{ .annotations.message }}  {{if .generatorURL }}  &lt;a href="{{.generatorURL}}" > Details&lt;/a&gt;
	//
	//  {{ end }} {{ end }}
	EmailContent *string `json:"EmailContent,omitempty" xml:"EmailContent,omitempty"`
	// The content of the alert resolution notification sent through email.
	//
	// example:
	//
	// Alert Name: {{ .commonLabels.alertname }}{{if .commonLabels.clustername }}
	//
	// Cluster Name: {{ .commonLabels.clustername }} {{ end }}{{if eq "app" .commonLabels._aliyun_arms_involvedObject_kind }}
	//
	// App Name: {{ .commonLabels._aliyun_arms_involvedObject_name }} {{ end }}
	//
	// Notification Policy: {{ .dispatchRuleName }}
	//
	// Recover Time: {{ .endTime }}
	//
	// Description: {{ for .alerts }} {{ .annotations.message }}  {{if .generatorURL }} &lt;a href="{{.generatorURL}}" > Details&lt;/a&gt;
	//
	//  {{ end }} {{ end }}
	EmailRecoverContent *string `json:"EmailRecoverContent,omitempty" xml:"EmailRecoverContent,omitempty"`
	// The title of the alert resolution notification sent through email.
	//
	// example:
	//
	// {{ .commonLabels.alertname }}
	EmailRecoverTitle *string `json:"EmailRecoverTitle,omitempty" xml:"EmailRecoverTitle,omitempty"`
	// The title of the alert notification sent through email.
	//
	// example:
	//
	// {{ .commonLabels.alertname }}
	EmailTitle *string `json:"EmailTitle,omitempty" xml:"EmailTitle,omitempty"`
	// The content of the alert notification sent by the IM robot.
	//
	// example:
	//
	// {{if .commonLabels.clustername }}
	//
	//  &gt;  Cluster Name: {{ .commonLabels.clustername }}
	//
	//  {{ end }}{{if eq "app" .commonLabels._aliyun_arms_involvedObject_kind }}
	//
	//  &gt;  App Name: {{ .commonLabels._aliyun_arms_involvedObject_name }}
	//
	//  {{ end }}{{ for .alerts }} &gt;  {{ .annotations.message }} {{if .generatorURL }} [Details]({{.generatorURL}})  {{end}} {{if .annotations._aliyun_arms_insights_analyze_link }}[&lt;font color=\\"#ff0000\\"&gt;diagnostic analysis&lt;/font&gt;]({{ .annotations._aliyun_arms_insights_analyze_link}}){{ end }}{{if  eq "1" .labels._aliyun_arms_denoise_code }} (Important:{{.labels._aliyun_arms_important_reason }}) {{end}}
	//
	// {{end}}
	RobotContent *string `json:"RobotContent,omitempty" xml:"RobotContent,omitempty"`
	// The content of the alert notification sent through text message.
	//
	// example:
	//
	// {{ .level }}Alert Occurs
	//
	// Alert Name: {{ .commonLabels.alertname }}{{if .commonLabels.clustername }}
	//
	// Cluster Name: {{ .commonLabels.clustername }} {{ end }}{{if eq "app" .commonLabels._aliyun_arms_involvedObject_kind }}
	//
	// App Name: {{ .commonLabels._aliyun_arms_involvedObject_name }} {{ end }}
	//
	// Notification Policy: {{ .dispatchRuleName }}
	//
	// Alert Time: {{ .startTime }}
	//
	// Description: {{ for .alerts }} {{ .annotations.message }} {{ end }}
	SmsContent *string `json:"SmsContent,omitempty" xml:"SmsContent,omitempty"`
	// The content of the alert resolution notification sent through text message.
	//
	// example:
	//
	// Alert Recovery Notification
	//
	// Alert Name: {{ .commonLabels.alertname }}{{if .commonLabels.clustername }}
	//
	// Cluster Name: {{ .commonLabels.clustername }} {{ end }}{{if eq "app" .commonLabels._aliyun_arms_involvedObject_kind }}
	//
	// App Name: {{ .commonLabels._aliyun_arms_involvedObject_name }} {{ end }}
	//
	// Notification Policy: {{ .dispatchRuleName }}
	//
	// Recover Time: {{ .endTime }}
	//
	// Description: {{ for .alerts }} {{ .annotations.message }} {{ end }}
	SmsRecoverContent *string `json:"SmsRecoverContent,omitempty" xml:"SmsRecoverContent,omitempty"`
	// The content of the alert notification by phone.
	//
	// example:
	//
	// Alert Name: {{ .commonLabels.alertname }}{{if .commonLabels.clustername }}
	//
	// Cluster Name: {{ .commonLabels.clustername }} {{ end }}{{if eq "app" .commonLabels._aliyun_arms_involvedObject_kind }}
	//
	// App Name: {{ .commonLabels._aliyun_arms_involvedObject_name }} {{ end }}
	//
	// Notification Policy: {{ .dispatchRuleName }}
	//
	// Alert Time: {{ .startTime }}
	//
	// Description: {{ for .alerts }} {{ .annotations.message }} {{ end }}
	TtsContent *string `json:"TtsContent,omitempty" xml:"TtsContent,omitempty"`
	// The content of the alert resolution notification by phone.
	//
	// example:
	//
	// Alert Name: {{ .commonLabels.alertname }}{{if .commonLabels.clustername }}
	//
	// Cluster Name: {{ .commonLabels.clustername }} {{ end }}{{if eq "app" .commonLabels._aliyun_arms_involvedObject_kind }}
	//
	// App Name: {{ .commonLabels._aliyun_arms_involvedObject_name }} {{ end }}
	//
	// Notification Policy: {{ .dispatchRuleName }}
	//
	// Recover Time: {{ .endTime }}
	//
	// Description: {{ for .alerts }} {{ .annotations.message }} {{ end }}
	TtsRecoverContent *string `json:"TtsRecoverContent,omitempty" xml:"TtsRecoverContent,omitempty"`
}

func (s CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicyNotifyTemplate) String() string {
	return tea.Prettify(s)
}

func (s CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicyNotifyTemplate) GoString() string {
	return s.String()
}

func (s *CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicyNotifyTemplate) SetEmailContent(v string) *CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicyNotifyTemplate {
	s.EmailContent = &v
	return s
}

func (s *CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicyNotifyTemplate) SetEmailRecoverContent(v string) *CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicyNotifyTemplate {
	s.EmailRecoverContent = &v
	return s
}

func (s *CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicyNotifyTemplate) SetEmailRecoverTitle(v string) *CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicyNotifyTemplate {
	s.EmailRecoverTitle = &v
	return s
}

func (s *CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicyNotifyTemplate) SetEmailTitle(v string) *CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicyNotifyTemplate {
	s.EmailTitle = &v
	return s
}

func (s *CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicyNotifyTemplate) SetRobotContent(v string) *CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicyNotifyTemplate {
	s.RobotContent = &v
	return s
}

func (s *CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicyNotifyTemplate) SetSmsContent(v string) *CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicyNotifyTemplate {
	s.SmsContent = &v
	return s
}

func (s *CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicyNotifyTemplate) SetSmsRecoverContent(v string) *CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicyNotifyTemplate {
	s.SmsRecoverContent = &v
	return s
}

func (s *CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicyNotifyTemplate) SetTtsContent(v string) *CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicyNotifyTemplate {
	s.TtsContent = &v
	return s
}

func (s *CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicyNotifyTemplate) SetTtsRecoverContent(v string) *CreateOrUpdateNotificationPolicyResponseBodyNotificationPolicyNotifyTemplate {
	s.TtsRecoverContent = &v
	return s
}

type CreateOrUpdateNotificationPolicyResponse struct {
	Headers    map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateOrUpdateNotificationPolicyResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateOrUpdateNotificationPolicyResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateOrUpdateNotificationPolicyResponse) GoString() string {
	return s.String()
}

func (s *CreateOrUpdateNotificationPolicyResponse) SetHeaders(v map[string]*string) *CreateOrUpdateNotificationPolicyResponse {
	s.Headers = v
	return s
}

func (s *CreateOrUpdateNotificationPolicyResponse) SetStatusCode(v int32) *CreateOrUpdateNotificationPolicyResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateOrUpdateNotificationPolicyResponse) SetBody(v *CreateOrUpdateNotificationPolicyResponseBody) *CreateOrUpdateNotificationPolicyResponse {
	s.Body = v
	return s
}

type CreateOrUpdateSilencePolicyRequest struct {
	// The ID of the silence policy.
	//
	// 	- If you do not configure this parameter, a new silence policy is created.
	//
	// 	- If you configure this parameter, the specified silence policy is modified.
	//
	// example:
	//
	// 1234
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The matching rules. The following code shows the format of matching rules:
	//
	//     [
	//
	//          {
	//
	//     	 "matchingConditions": [
	//
	//     	 {
	//
	//     	 "value": "test", // The value of the matching condition.
	//
	//     	 "key": "altertname", // The key of the matching condition.
	//
	//     	 "operator": "eq" // The logical operator of the matching condition, including eq (equal to), neq (not equal to), in (contains), nin (does not contain), re (regular expression match), and nre (regular expression mismatch).
	//
	//     	 }
	//
	//     	 ]
	//
	//          }
	//
	//     	 ]
	//
	// example:
	//
	// [ 	 { 	 "matchingConditions": [ 	 { 	 "value": "test", 	 "key": "altertname", 	 "operator": "eq" 	 } 	 ]      } 	 ]
	MatchingRules *string `json:"MatchingRules,omitempty" xml:"MatchingRules,omitempty"`
	// The name of the silence policy.
	//
	// This parameter is required.
	//
	// example:
	//
	// silencepolicy_test
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The ID of the region.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// example:
	//
	// enable
	State *string `json:"State,omitempty" xml:"State,omitempty"`
}

func (s CreateOrUpdateSilencePolicyRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateOrUpdateSilencePolicyRequest) GoString() string {
	return s.String()
}

func (s *CreateOrUpdateSilencePolicyRequest) SetId(v int64) *CreateOrUpdateSilencePolicyRequest {
	s.Id = &v
	return s
}

func (s *CreateOrUpdateSilencePolicyRequest) SetMatchingRules(v string) *CreateOrUpdateSilencePolicyRequest {
	s.MatchingRules = &v
	return s
}

func (s *CreateOrUpdateSilencePolicyRequest) SetName(v string) *CreateOrUpdateSilencePolicyRequest {
	s.Name = &v
	return s
}

func (s *CreateOrUpdateSilencePolicyRequest) SetRegionId(v string) *CreateOrUpdateSilencePolicyRequest {
	s.RegionId = &v
	return s
}

func (s *CreateOrUpdateSilencePolicyRequest) SetState(v string) *CreateOrUpdateSilencePolicyRequest {
	s.State = &v
	return s
}

type CreateOrUpdateSilencePolicyResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// A5EC8221-08F2-4C95-9AF1-49FD998C****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// A list of silence policies.
	SilencePolicy *CreateOrUpdateSilencePolicyResponseBodySilencePolicy `json:"SilencePolicy,omitempty" xml:"SilencePolicy,omitempty" type:"Struct"`
}

func (s CreateOrUpdateSilencePolicyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateOrUpdateSilencePolicyResponseBody) GoString() string {
	return s.String()
}

func (s *CreateOrUpdateSilencePolicyResponseBody) SetRequestId(v string) *CreateOrUpdateSilencePolicyResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateOrUpdateSilencePolicyResponseBody) SetSilencePolicy(v *CreateOrUpdateSilencePolicyResponseBodySilencePolicy) *CreateOrUpdateSilencePolicyResponseBody {
	s.SilencePolicy = v
	return s
}

type CreateOrUpdateSilencePolicyResponseBodySilencePolicy struct {
	// The ID of the silence policy.
	//
	// example:
	//
	// 1234
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// A list of matching rules.
	MatchingRules []*CreateOrUpdateSilencePolicyResponseBodySilencePolicyMatchingRules `json:"MatchingRules,omitempty" xml:"MatchingRules,omitempty" type:"Repeated"`
	// The name of the silence policy.
	//
	// example:
	//
	// silencepolicy_test
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// enable
	State *string `json:"State,omitempty" xml:"State,omitempty"`
}

func (s CreateOrUpdateSilencePolicyResponseBodySilencePolicy) String() string {
	return tea.Prettify(s)
}

func (s CreateOrUpdateSilencePolicyResponseBodySilencePolicy) GoString() string {
	return s.String()
}

func (s *CreateOrUpdateSilencePolicyResponseBodySilencePolicy) SetId(v int64) *CreateOrUpdateSilencePolicyResponseBodySilencePolicy {
	s.Id = &v
	return s
}

func (s *CreateOrUpdateSilencePolicyResponseBodySilencePolicy) SetMatchingRules(v []*CreateOrUpdateSilencePolicyResponseBodySilencePolicyMatchingRules) *CreateOrUpdateSilencePolicyResponseBodySilencePolicy {
	s.MatchingRules = v
	return s
}

func (s *CreateOrUpdateSilencePolicyResponseBodySilencePolicy) SetName(v string) *CreateOrUpdateSilencePolicyResponseBodySilencePolicy {
	s.Name = &v
	return s
}

func (s *CreateOrUpdateSilencePolicyResponseBodySilencePolicy) SetState(v string) *CreateOrUpdateSilencePolicyResponseBodySilencePolicy {
	s.State = &v
	return s
}

type CreateOrUpdateSilencePolicyResponseBodySilencePolicyMatchingRules struct {
	// A list of matching conditions.
	MatchingConditions []*CreateOrUpdateSilencePolicyResponseBodySilencePolicyMatchingRulesMatchingConditions `json:"MatchingConditions,omitempty" xml:"MatchingConditions,omitempty" type:"Repeated"`
}

func (s CreateOrUpdateSilencePolicyResponseBodySilencePolicyMatchingRules) String() string {
	return tea.Prettify(s)
}

func (s CreateOrUpdateSilencePolicyResponseBodySilencePolicyMatchingRules) GoString() string {
	return s.String()
}

func (s *CreateOrUpdateSilencePolicyResponseBodySilencePolicyMatchingRules) SetMatchingConditions(v []*CreateOrUpdateSilencePolicyResponseBodySilencePolicyMatchingRulesMatchingConditions) *CreateOrUpdateSilencePolicyResponseBodySilencePolicyMatchingRules {
	s.MatchingConditions = v
	return s
}

type CreateOrUpdateSilencePolicyResponseBodySilencePolicyMatchingRulesMatchingConditions struct {
	// The key of the matching condition.
	//
	// example:
	//
	// altertname
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The logical operator of the matching condition. Valid values:
	//
	// 	- `eq`: equal to
	//
	// 	- `neq`: not equal to
	//
	// 	- `in`: contains
	//
	// 	- `nin`: does not contain
	//
	// 	- `re`: regular expression match
	//
	// 	- `nre`: regular expression mismatch
	//
	// example:
	//
	// eq
	Operator *string `json:"Operator,omitempty" xml:"Operator,omitempty"`
	// The value of the matching condition.
	//
	// example:
	//
	// test
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s CreateOrUpdateSilencePolicyResponseBodySilencePolicyMatchingRulesMatchingConditions) String() string {
	return tea.Prettify(s)
}

func (s CreateOrUpdateSilencePolicyResponseBodySilencePolicyMatchingRulesMatchingConditions) GoString() string {
	return s.String()
}

func (s *CreateOrUpdateSilencePolicyResponseBodySilencePolicyMatchingRulesMatchingConditions) SetKey(v string) *CreateOrUpdateSilencePolicyResponseBodySilencePolicyMatchingRulesMatchingConditions {
	s.Key = &v
	return s
}

func (s *CreateOrUpdateSilencePolicyResponseBodySilencePolicyMatchingRulesMatchingConditions) SetOperator(v string) *CreateOrUpdateSilencePolicyResponseBodySilencePolicyMatchingRulesMatchingConditions {
	s.Operator = &v
	return s
}

func (s *CreateOrUpdateSilencePolicyResponseBodySilencePolicyMatchingRulesMatchingConditions) SetValue(v string) *CreateOrUpdateSilencePolicyResponseBodySilencePolicyMatchingRulesMatchingConditions {
	s.Value = &v
	return s
}

type CreateOrUpdateSilencePolicyResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateOrUpdateSilencePolicyResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateOrUpdateSilencePolicyResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateOrUpdateSilencePolicyResponse) GoString() string {
	return s.String()
}

func (s *CreateOrUpdateSilencePolicyResponse) SetHeaders(v map[string]*string) *CreateOrUpdateSilencePolicyResponse {
	s.Headers = v
	return s
}

func (s *CreateOrUpdateSilencePolicyResponse) SetStatusCode(v int32) *CreateOrUpdateSilencePolicyResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateOrUpdateSilencePolicyResponse) SetBody(v *CreateOrUpdateSilencePolicyResponseBody) *CreateOrUpdateSilencePolicyResponse {
	s.Body = v
	return s
}

type CreateOrUpdateWebhookContactRequest struct {
	// The HTTP request headers.
	//
	// example:
	//
	// [{"Content-Type":"application/json;charset=utf-8"}]
	BizHeaders *string `json:"BizHeaders,omitempty" xml:"BizHeaders,omitempty"`
	// The parameters in the HTTP request.
	//
	// example:
	//
	// [{"content":"mike"}]
	BizParams *string `json:"BizParams,omitempty" xml:"BizParams,omitempty"`
	// The notification template that is sent when an alert is triggered. This parameter is required if the **Method*	- parameter is set to **Post**. You can use the `$content` placeholder to specify the notification content. The content cannot exceed 500 characters in length. For more information, see [Variable description of a notification template](https://help.aliyun.com/document_detail/251834.html).\\\\
	//
	// example:
	//
	// { "Alert name":"{{ .commonLabels.alertname }}{{if .commonLabels.clustername }}", "Cluster name":"{{ .commonLabels.clustername }} {{ end }}{{if eq "app" .commonLabels._aliyun_arms_involvedObject_kind }}", "Application name":"{{ .commonLabels._aliyun_arms_involvedObject_name }} {{ end }}", "Notification policy":"{{ .dispatchRuleName }}", "Alert time":"{{ .startTime }}", "Alert content":"{{ for .alerts }} {{ .annotations.message }} {{ end }}" }
	Body *string `json:"Body,omitempty" xml:"Body,omitempty"`
	// The HTTP request method.
	//
	// 	- Post
	//
	// 	- Get
	//
	// This parameter is required.
	//
	// example:
	//
	// Post
	Method *string `json:"Method,omitempty" xml:"Method,omitempty"`
	// The notification template that is sent when an alert is resolved. This parameter is required if the **Method*	- parameter is set to **Post**. You can use the `$content` placeholder to specify the notification content. The content cannot exceed 500 characters in length. For more information, see [Variable description of a notification template](https://help.aliyun.com/document_detail/251834.html).
	//
	// example:
	//
	// { "Alert name":"{{ .commonLabels.alertname }}{{if .commonLabels.clustername }}", "Cluster name":"{{ .commonLabels.clustername }} {{ end }}{{if eq "app" .commonLabels._aliyun_arms_involvedObject_kind }}", "Application name":"{{ .commonLabels._aliyun_arms_involvedObject_name }} {{ end }}", "Notification policy":"{{ .dispatchRuleName }}", "Recovery time":"{{ .endTime }}", "Alert content":"{{ for .alerts }} {{ .annotations.message }} {{ end }}" }
	RecoverBody *string `json:"RecoverBody,omitempty" xml:"RecoverBody,omitempty"`
	// The URL of the HTTP request **method**.
	//
	// This parameter is required.
	//
	// example:
	//
	// https://oapi.dingtalk.com/robot/send?access_token=e1a049121******
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
	// The ID of the webhook alert contact.
	//
	// 	- If you do not specify this parameter, a new webhook alert contact is created.
	//
	// 	- If you specify this parameter, the specified webhook alert contact is modified.
	//
	// example:
	//
	// 123
	WebhookId *int64 `json:"WebhookId,omitempty" xml:"WebhookId,omitempty"`
	// The name of the webhook alert contact.
	//
	// This parameter is required.
	//
	// example:
	//
	// Webhook alert
	WebhookName *string `json:"WebhookName,omitempty" xml:"WebhookName,omitempty"`
}

func (s CreateOrUpdateWebhookContactRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateOrUpdateWebhookContactRequest) GoString() string {
	return s.String()
}

func (s *CreateOrUpdateWebhookContactRequest) SetBizHeaders(v string) *CreateOrUpdateWebhookContactRequest {
	s.BizHeaders = &v
	return s
}

func (s *CreateOrUpdateWebhookContactRequest) SetBizParams(v string) *CreateOrUpdateWebhookContactRequest {
	s.BizParams = &v
	return s
}

func (s *CreateOrUpdateWebhookContactRequest) SetBody(v string) *CreateOrUpdateWebhookContactRequest {
	s.Body = &v
	return s
}

func (s *CreateOrUpdateWebhookContactRequest) SetMethod(v string) *CreateOrUpdateWebhookContactRequest {
	s.Method = &v
	return s
}

func (s *CreateOrUpdateWebhookContactRequest) SetRecoverBody(v string) *CreateOrUpdateWebhookContactRequest {
	s.RecoverBody = &v
	return s
}

func (s *CreateOrUpdateWebhookContactRequest) SetUrl(v string) *CreateOrUpdateWebhookContactRequest {
	s.Url = &v
	return s
}

func (s *CreateOrUpdateWebhookContactRequest) SetWebhookId(v int64) *CreateOrUpdateWebhookContactRequest {
	s.WebhookId = &v
	return s
}

func (s *CreateOrUpdateWebhookContactRequest) SetWebhookName(v string) *CreateOrUpdateWebhookContactRequest {
	s.WebhookName = &v
	return s
}

type CreateOrUpdateWebhookContactResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 16AF921B-8187-489F-9913-43C808B4****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The returned webhook alert contact.
	WebhookContact *CreateOrUpdateWebhookContactResponseBodyWebhookContact `json:"WebhookContact,omitempty" xml:"WebhookContact,omitempty" type:"Struct"`
}

func (s CreateOrUpdateWebhookContactResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateOrUpdateWebhookContactResponseBody) GoString() string {
	return s.String()
}

func (s *CreateOrUpdateWebhookContactResponseBody) SetRequestId(v string) *CreateOrUpdateWebhookContactResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateOrUpdateWebhookContactResponseBody) SetWebhookContact(v *CreateOrUpdateWebhookContactResponseBodyWebhookContact) *CreateOrUpdateWebhookContactResponseBody {
	s.WebhookContact = v
	return s
}

type CreateOrUpdateWebhookContactResponseBodyWebhookContact struct {
	// The information about the webhook alert contact.
	Webhook *CreateOrUpdateWebhookContactResponseBodyWebhookContactWebhook `json:"Webhook,omitempty" xml:"Webhook,omitempty" type:"Struct"`
	// The ID of the webhook alert contact.
	//
	// example:
	//
	// 123
	WebhookId *float32 `json:"WebhookId,omitempty" xml:"WebhookId,omitempty"`
	// The name of the webhook alert contact.
	//
	// example:
	//
	// Webhook alert
	WebhookName *string `json:"WebhookName,omitempty" xml:"WebhookName,omitempty"`
}

func (s CreateOrUpdateWebhookContactResponseBodyWebhookContact) String() string {
	return tea.Prettify(s)
}

func (s CreateOrUpdateWebhookContactResponseBodyWebhookContact) GoString() string {
	return s.String()
}

func (s *CreateOrUpdateWebhookContactResponseBodyWebhookContact) SetWebhook(v *CreateOrUpdateWebhookContactResponseBodyWebhookContactWebhook) *CreateOrUpdateWebhookContactResponseBodyWebhookContact {
	s.Webhook = v
	return s
}

func (s *CreateOrUpdateWebhookContactResponseBodyWebhookContact) SetWebhookId(v float32) *CreateOrUpdateWebhookContactResponseBodyWebhookContact {
	s.WebhookId = &v
	return s
}

func (s *CreateOrUpdateWebhookContactResponseBodyWebhookContact) SetWebhookName(v string) *CreateOrUpdateWebhookContactResponseBodyWebhookContact {
	s.WebhookName = &v
	return s
}

type CreateOrUpdateWebhookContactResponseBodyWebhookContactWebhook struct {
	// The HTTP request headers.
	//
	// example:
	//
	// [{"Content-Type":"application/json;charset=utf-8"}]
	BizHeaders *string `json:"BizHeaders,omitempty" xml:"BizHeaders,omitempty"`
	// The parameters in the HTTP request.
	//
	// example:
	//
	// [{"content":"mike"}]
	BizParams *string `json:"BizParams,omitempty" xml:"BizParams,omitempty"`
	// The alert notification template.
	//
	// example:
	//
	// { "Alert name":"{{ .commonLabels.alertname }}{{if .commonLabels.clustername }}", "Cluster name":"{{ .commonLabels.clustername }} {{ end }}{{if eq "app" .commonLabels._aliyun_arms_involvedObject_kind }}", "Application name":"{{ .commonLabels._aliyun_arms_involvedObject_name }} {{ end }}", "Notification policy":"{{ .dispatchRuleName }}", "Alert time":"{{ .startTime }}", "Alert content":"{{ for .alerts }} {{ .annotations.message }} {{ end }}" }
	Body *string `json:"Body,omitempty" xml:"Body,omitempty"`
	// The HTTP request method.
	//
	// 	- Post
	//
	// 	- Get
	//
	// example:
	//
	// Post
	Method *string `json:"Method,omitempty" xml:"Method,omitempty"`
	// The notification template for clearing alerts.
	//
	// example:
	//
	// { "Alert name":"{{ .commonLabels.alertname }}{{if .commonLabels.clustername }}", "Cluster name":"{{ .commonLabels.clustername }} {{ end }}{{if eq "app" .commonLabels._aliyun_arms_involvedObject_kind }}", "Application name":"{{ .commonLabels._aliyun_arms_involvedObject_name }} {{ end }}", "Notification policy":"{{ .dispatchRuleName }}", "Recovery time":"{{ .endTime }}", "Alert content":"{{ for .alerts }} {{ .annotations.message }} {{ end }}" }
	RecoverBody *string `json:"RecoverBody,omitempty" xml:"RecoverBody,omitempty"`
	// The URL of the request method.
	//
	// example:
	//
	// https://oapi.dingtalk.com/robot/send?access_token=e1a049121******
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s CreateOrUpdateWebhookContactResponseBodyWebhookContactWebhook) String() string {
	return tea.Prettify(s)
}

func (s CreateOrUpdateWebhookContactResponseBodyWebhookContactWebhook) GoString() string {
	return s.String()
}

func (s *CreateOrUpdateWebhookContactResponseBodyWebhookContactWebhook) SetBizHeaders(v string) *CreateOrUpdateWebhookContactResponseBodyWebhookContactWebhook {
	s.BizHeaders = &v
	return s
}

func (s *CreateOrUpdateWebhookContactResponseBodyWebhookContactWebhook) SetBizParams(v string) *CreateOrUpdateWebhookContactResponseBodyWebhookContactWebhook {
	s.BizParams = &v
	return s
}

func (s *CreateOrUpdateWebhookContactResponseBodyWebhookContactWebhook) SetBody(v string) *CreateOrUpdateWebhookContactResponseBodyWebhookContactWebhook {
	s.Body = &v
	return s
}

func (s *CreateOrUpdateWebhookContactResponseBodyWebhookContactWebhook) SetMethod(v string) *CreateOrUpdateWebhookContactResponseBodyWebhookContactWebhook {
	s.Method = &v
	return s
}

func (s *CreateOrUpdateWebhookContactResponseBodyWebhookContactWebhook) SetRecoverBody(v string) *CreateOrUpdateWebhookContactResponseBodyWebhookContactWebhook {
	s.RecoverBody = &v
	return s
}

func (s *CreateOrUpdateWebhookContactResponseBodyWebhookContactWebhook) SetUrl(v string) *CreateOrUpdateWebhookContactResponseBodyWebhookContactWebhook {
	s.Url = &v
	return s
}

type CreateOrUpdateWebhookContactResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateOrUpdateWebhookContactResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateOrUpdateWebhookContactResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateOrUpdateWebhookContactResponse) GoString() string {
	return s.String()
}

func (s *CreateOrUpdateWebhookContactResponse) SetHeaders(v map[string]*string) *CreateOrUpdateWebhookContactResponse {
	s.Headers = v
	return s
}

func (s *CreateOrUpdateWebhookContactResponse) SetStatusCode(v int32) *CreateOrUpdateWebhookContactResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateOrUpdateWebhookContactResponse) SetBody(v *CreateOrUpdateWebhookContactResponseBody) *CreateOrUpdateWebhookContactResponse {
	s.Body = v
	return s
}

type CreatePrometheusAlertRuleRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// Prometheus_Alert
	AlertName *string `json:"AlertName,omitempty" xml:"AlertName,omitempty"`
	// example:
	//
	// [{"Value": "xxx","Name": "description"}]
	Annotations *string `json:"Annotations,omitempty" xml:"Annotations,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// c0bad479465464e1d8c1e641b0afb****
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	// example:
	//
	// 10282
	DispatchRuleId *int64 `json:"DispatchRuleId,omitempty" xml:"DispatchRuleId,omitempty"`
	// This parameter is required.
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 100 	- (sum(rate(container_cpu_usage_seconds_total[1m])) by (pod_name) / sum(label_replace(kube_pod_container_resource_limits_cpu_cores, \\"pod_name\\", \\"$1\\", \\"pod\\", \\"(.*)\\")) by (pod_name))>75
	Expression *string `json:"Expression,omitempty" xml:"Expression,omitempty"`
	// example:
	//
	// [{"Value": "critical","Name": "severity"}]
	Labels *string `json:"Labels,omitempty" xml:"Labels,omitempty"`
	// This parameter is required.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// ALERT_MANAGER
	NotifyType *string `json:"NotifyType,omitempty" xml:"NotifyType,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string                                 `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Tags     []*CreatePrometheusAlertRuleRequestTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
	// example:
	//
	// 101
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s CreatePrometheusAlertRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s CreatePrometheusAlertRuleRequest) GoString() string {
	return s.String()
}

func (s *CreatePrometheusAlertRuleRequest) SetAlertName(v string) *CreatePrometheusAlertRuleRequest {
	s.AlertName = &v
	return s
}

func (s *CreatePrometheusAlertRuleRequest) SetAnnotations(v string) *CreatePrometheusAlertRuleRequest {
	s.Annotations = &v
	return s
}

func (s *CreatePrometheusAlertRuleRequest) SetClusterId(v string) *CreatePrometheusAlertRuleRequest {
	s.ClusterId = &v
	return s
}

func (s *CreatePrometheusAlertRuleRequest) SetDispatchRuleId(v int64) *CreatePrometheusAlertRuleRequest {
	s.DispatchRuleId = &v
	return s
}

func (s *CreatePrometheusAlertRuleRequest) SetDuration(v string) *CreatePrometheusAlertRuleRequest {
	s.Duration = &v
	return s
}

func (s *CreatePrometheusAlertRuleRequest) SetExpression(v string) *CreatePrometheusAlertRuleRequest {
	s.Expression = &v
	return s
}

func (s *CreatePrometheusAlertRuleRequest) SetLabels(v string) *CreatePrometheusAlertRuleRequest {
	s.Labels = &v
	return s
}

func (s *CreatePrometheusAlertRuleRequest) SetMessage(v string) *CreatePrometheusAlertRuleRequest {
	s.Message = &v
	return s
}

func (s *CreatePrometheusAlertRuleRequest) SetNotifyType(v string) *CreatePrometheusAlertRuleRequest {
	s.NotifyType = &v
	return s
}

func (s *CreatePrometheusAlertRuleRequest) SetRegionId(v string) *CreatePrometheusAlertRuleRequest {
	s.RegionId = &v
	return s
}

func (s *CreatePrometheusAlertRuleRequest) SetTags(v []*CreatePrometheusAlertRuleRequestTags) *CreatePrometheusAlertRuleRequest {
	s.Tags = v
	return s
}

func (s *CreatePrometheusAlertRuleRequest) SetType(v string) *CreatePrometheusAlertRuleRequest {
	s.Type = &v
	return s
}

type CreatePrometheusAlertRuleRequestTags struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s CreatePrometheusAlertRuleRequestTags) String() string {
	return tea.Prettify(s)
}

func (s CreatePrometheusAlertRuleRequestTags) GoString() string {
	return s.String()
}

func (s *CreatePrometheusAlertRuleRequestTags) SetKey(v string) *CreatePrometheusAlertRuleRequestTags {
	s.Key = &v
	return s
}

func (s *CreatePrometheusAlertRuleRequestTags) SetValue(v string) *CreatePrometheusAlertRuleRequestTags {
	s.Value = &v
	return s
}

type CreatePrometheusAlertRuleResponseBody struct {
	Code                *int64                                                    `json:"Code,omitempty" xml:"Code,omitempty"`
	Message             *string                                                   `json:"Message,omitempty" xml:"Message,omitempty"`
	PrometheusAlertRule *CreatePrometheusAlertRuleResponseBodyPrometheusAlertRule `json:"PrometheusAlertRule,omitempty" xml:"PrometheusAlertRule,omitempty" type:"Struct"`
	// example:
	//
	// 9FEA6D00-317F-45E3-9004-7FB8B0B7****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreatePrometheusAlertRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreatePrometheusAlertRuleResponseBody) GoString() string {
	return s.String()
}

func (s *CreatePrometheusAlertRuleResponseBody) SetCode(v int64) *CreatePrometheusAlertRuleResponseBody {
	s.Code = &v
	return s
}

func (s *CreatePrometheusAlertRuleResponseBody) SetMessage(v string) *CreatePrometheusAlertRuleResponseBody {
	s.Message = &v
	return s
}

func (s *CreatePrometheusAlertRuleResponseBody) SetPrometheusAlertRule(v *CreatePrometheusAlertRuleResponseBodyPrometheusAlertRule) *CreatePrometheusAlertRuleResponseBody {
	s.PrometheusAlertRule = v
	return s
}

func (s *CreatePrometheusAlertRuleResponseBody) SetRequestId(v string) *CreatePrometheusAlertRuleResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreatePrometheusAlertRuleResponseBody) SetSuccess(v bool) *CreatePrometheusAlertRuleResponseBody {
	s.Success = &v
	return s
}

type CreatePrometheusAlertRuleResponseBodyPrometheusAlertRule struct {
	// example:
	//
	// 3888704
	AlertId *int64 `json:"AlertId,omitempty" xml:"AlertId,omitempty"`
	// example:
	//
	// Prometheus_Alert
	AlertName   *string                                                                `json:"AlertName,omitempty" xml:"AlertName,omitempty"`
	Annotations []*CreatePrometheusAlertRuleResponseBodyPrometheusAlertRuleAnnotations `json:"Annotations,omitempty" xml:"Annotations,omitempty" type:"Repeated"`
	// example:
	//
	// c0bad479465464e1d8c1e641b0afb****
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	// example:
	//
	// 10282
	DispatchRuleId *int64  `json:"DispatchRuleId,omitempty" xml:"DispatchRuleId,omitempty"`
	Duration       *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// example:
	//
	// 100 	- (sum(rate(container_cpu_usage_seconds_total[1m])) by (pod_name) / sum(label_replace(kube_pod_container_resource_limits_cpu_cores, \\"pod_name\\", \\"$1\\", \\"pod\\", \\"(.*)\\")) by (pod_name))>75
	Expression *string                                                           `json:"Expression,omitempty" xml:"Expression,omitempty"`
	Labels     []*CreatePrometheusAlertRuleResponseBodyPrometheusAlertRuleLabels `json:"Labels,omitempty" xml:"Labels,omitempty" type:"Repeated"`
	Message    *string                                                           `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// ALERT_MANAGER
	NotifyType *string `json:"NotifyType,omitempty" xml:"NotifyType,omitempty"`
	// example:
	//
	// 1
	Status *int32  `json:"Status,omitempty" xml:"Status,omitempty"`
	Type   *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s CreatePrometheusAlertRuleResponseBodyPrometheusAlertRule) String() string {
	return tea.Prettify(s)
}

func (s CreatePrometheusAlertRuleResponseBodyPrometheusAlertRule) GoString() string {
	return s.String()
}

func (s *CreatePrometheusAlertRuleResponseBodyPrometheusAlertRule) SetAlertId(v int64) *CreatePrometheusAlertRuleResponseBodyPrometheusAlertRule {
	s.AlertId = &v
	return s
}

func (s *CreatePrometheusAlertRuleResponseBodyPrometheusAlertRule) SetAlertName(v string) *CreatePrometheusAlertRuleResponseBodyPrometheusAlertRule {
	s.AlertName = &v
	return s
}

func (s *CreatePrometheusAlertRuleResponseBodyPrometheusAlertRule) SetAnnotations(v []*CreatePrometheusAlertRuleResponseBodyPrometheusAlertRuleAnnotations) *CreatePrometheusAlertRuleResponseBodyPrometheusAlertRule {
	s.Annotations = v
	return s
}

func (s *CreatePrometheusAlertRuleResponseBodyPrometheusAlertRule) SetClusterId(v string) *CreatePrometheusAlertRuleResponseBodyPrometheusAlertRule {
	s.ClusterId = &v
	return s
}

func (s *CreatePrometheusAlertRuleResponseBodyPrometheusAlertRule) SetDispatchRuleId(v int64) *CreatePrometheusAlertRuleResponseBodyPrometheusAlertRule {
	s.DispatchRuleId = &v
	return s
}

func (s *CreatePrometheusAlertRuleResponseBodyPrometheusAlertRule) SetDuration(v string) *CreatePrometheusAlertRuleResponseBodyPrometheusAlertRule {
	s.Duration = &v
	return s
}

func (s *CreatePrometheusAlertRuleResponseBodyPrometheusAlertRule) SetExpression(v string) *CreatePrometheusAlertRuleResponseBodyPrometheusAlertRule {
	s.Expression = &v
	return s
}

func (s *CreatePrometheusAlertRuleResponseBodyPrometheusAlertRule) SetLabels(v []*CreatePrometheusAlertRuleResponseBodyPrometheusAlertRuleLabels) *CreatePrometheusAlertRuleResponseBodyPrometheusAlertRule {
	s.Labels = v
	return s
}

func (s *CreatePrometheusAlertRuleResponseBodyPrometheusAlertRule) SetMessage(v string) *CreatePrometheusAlertRuleResponseBodyPrometheusAlertRule {
	s.Message = &v
	return s
}

func (s *CreatePrometheusAlertRuleResponseBodyPrometheusAlertRule) SetNotifyType(v string) *CreatePrometheusAlertRuleResponseBodyPrometheusAlertRule {
	s.NotifyType = &v
	return s
}

func (s *CreatePrometheusAlertRuleResponseBodyPrometheusAlertRule) SetStatus(v int32) *CreatePrometheusAlertRuleResponseBodyPrometheusAlertRule {
	s.Status = &v
	return s
}

func (s *CreatePrometheusAlertRuleResponseBodyPrometheusAlertRule) SetType(v string) *CreatePrometheusAlertRuleResponseBodyPrometheusAlertRule {
	s.Type = &v
	return s
}

type CreatePrometheusAlertRuleResponseBodyPrometheusAlertRuleAnnotations struct {
	// example:
	//
	// message
	Name  *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s CreatePrometheusAlertRuleResponseBodyPrometheusAlertRuleAnnotations) String() string {
	return tea.Prettify(s)
}

func (s CreatePrometheusAlertRuleResponseBodyPrometheusAlertRuleAnnotations) GoString() string {
	return s.String()
}

func (s *CreatePrometheusAlertRuleResponseBodyPrometheusAlertRuleAnnotations) SetName(v string) *CreatePrometheusAlertRuleResponseBodyPrometheusAlertRuleAnnotations {
	s.Name = &v
	return s
}

func (s *CreatePrometheusAlertRuleResponseBodyPrometheusAlertRuleAnnotations) SetValue(v string) *CreatePrometheusAlertRuleResponseBodyPrometheusAlertRuleAnnotations {
	s.Value = &v
	return s
}

type CreatePrometheusAlertRuleResponseBodyPrometheusAlertRuleLabels struct {
	// example:
	//
	// severity
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// critical
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s CreatePrometheusAlertRuleResponseBodyPrometheusAlertRuleLabels) String() string {
	return tea.Prettify(s)
}

func (s CreatePrometheusAlertRuleResponseBodyPrometheusAlertRuleLabels) GoString() string {
	return s.String()
}

func (s *CreatePrometheusAlertRuleResponseBodyPrometheusAlertRuleLabels) SetName(v string) *CreatePrometheusAlertRuleResponseBodyPrometheusAlertRuleLabels {
	s.Name = &v
	return s
}

func (s *CreatePrometheusAlertRuleResponseBodyPrometheusAlertRuleLabels) SetValue(v string) *CreatePrometheusAlertRuleResponseBodyPrometheusAlertRuleLabels {
	s.Value = &v
	return s
}

type CreatePrometheusAlertRuleResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreatePrometheusAlertRuleResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreatePrometheusAlertRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s CreatePrometheusAlertRuleResponse) GoString() string {
	return s.String()
}

func (s *CreatePrometheusAlertRuleResponse) SetHeaders(v map[string]*string) *CreatePrometheusAlertRuleResponse {
	s.Headers = v
	return s
}

func (s *CreatePrometheusAlertRuleResponse) SetStatusCode(v int32) *CreatePrometheusAlertRuleResponse {
	s.StatusCode = &v
	return s
}

func (s *CreatePrometheusAlertRuleResponse) SetBody(v *CreatePrometheusAlertRuleResponseBody) *CreatePrometheusAlertRuleResponse {
	s.Body = v
	return s
}

type CreatePrometheusInstanceRequest struct {
	// Does it require all child instances to be verified successfully before creating a GlobalView instance. The default is false, which means partial success is possible.
	//
	// example:
	//
	// true
	AllSubClustersSuccess *bool `json:"AllSubClustersSuccess,omitempty" xml:"AllSubClustersSuccess,omitempty"`
	// The number of days for automatic archiving after storage expiration (optional values: 60, 90, 180, 365). 0 means not archive.
	//
	// example:
	//
	// 90
	ArchiveDuration *int32 `json:"ArchiveDuration,omitempty" xml:"ArchiveDuration,omitempty"`
	// The ID of the ACK cluster. This parameter is required if you set the ClusterType parameter to aliyun-cs.
	//
	// example:
	//
	// cc7a37ee31aea4ed1a059eff8034b****
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	// The name of the created cluster. This parameter is required if you set the ClusterType parameter to remote-write or ecs.
	//
	// example:
	//
	// clusterNameOfTest
	ClusterName *string `json:"ClusterName,omitempty" xml:"ClusterName,omitempty"`
	// The type of the cluster to which the Prometheus instance belongs. Valid values:
	//
	// 	- remote-write: Prometheus instance for remote write.
	//
	// 	- ecs(Not supported): Prometheus instance for ECS.
	//
	// 	- cloud-monitor(Not supported): Prometheus instance for Alibaba Cloud services in China.
	//
	// 	- cloud-product(Not supported): Prometheus instance for Alibaba Cloud services outside China.
	//
	// 	- global-view: Prometheus instance for GlobalView.
	//
	// 	- aliyun-cs(Not supported): Prometheus instance for Container Service for Kubernetes (ACK).
	//
	// This parameter is required.
	//
	// example:
	//
	// remote-write
	ClusterType *string `json:"ClusterType,omitempty" xml:"ClusterType,omitempty"`
	// Data storage duration (in days).
	//
	// example:
	//
	// 90
	Duration *int32 `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// The ID of the Grafana dedicated instance. This parameter is available if you set the ClusterType parameter to ecs.
	//
	// example:
	//
	// grafana-bp1*****
	GrafanaInstanceId *string `json:"GrafanaInstanceId,omitempty" xml:"GrafanaInstanceId,omitempty"`
	// The ID of the region. If you use a Prometheus instance to monitor an Alibaba Cloud service in China, this parameter must be set to cn-shanghai.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-shanghai
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the custom resource group. You can configure this parameter to bind the instance to the resource group.
	//
	// example:
	//
	// rg-acfmxyexli2****
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	// The ID of the security group. This parameter is required if you set the ClusterType parameter to ecs.
	//
	// example:
	//
	// sg-bp1********
	SecurityGroupId *string `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
	// JSON string for child instances of the globalView instance.
	//
	// example:
	//
	// When the clusterType is global view, this parameter needs to be passed: a list of information about the clusters that need to be aggregated.
	//
	// Example:
	//
	// [
	//
	//   {
	//
	//     "Headers":{
	//
	//     },
	//
	//     "RegionId": "cn hangzhou",
	//
	//     "SourceType": "Alibaba Prometheus",
	//
	//     "Extras":{
	//
	//     },
	//
	//     "ClusterId": "c39a1048921e04f ****************",
	//
	//     "SourceName": "test1",
	//
	//     "DataSource": "",
	//
	//     "UserId": "1672753 ******************"
	//
	//   },
	//
	//   {
	//
	//     "Headers":{
	//
	//     },
	//
	//     "RegionId": "cn beijing",
	//
	//     "SourceType": "Alibaba Prometheus",
	//
	//     "Extras":{
	//
	//     },
	//
	//     "ClusterId": "c6b6485496d5b40 ****************",
	//
	//     "SourceName": "test2",
	//
	//     "DataSource": "",
	//
	//     "UserId": "1672753 ******************"
	//
	//   },
	//
	//   {
	//
	//     "Headers":{
	//
	//     },
	//
	//     "RegionId": "cn zhangjiakou",
	//
	//     "SourceType": "Alibaba Prometheus",
	//
	//     "Extras":{
	//
	//     },
	//
	//     "ClusterId": "c261a4f3200c446 ****************",
	//
	//     "SourceName": "test3",
	//
	//     "DataSource": "",
	//
	//     "UserId": "1672753 ******************"
	//
	//   }
	//
	// ]
	SubClustersJson *string `json:"SubClustersJson,omitempty" xml:"SubClustersJson,omitempty"`
	// The tags of the instance. You can configure this parameter to manage tags for the instance.
	//
	// example:
	//
	// [
	//
	//     {
	//
	//         "labelName":"labelValue"
	//
	//     },
	//
	//     {
	//
	//         "testName":"clusterA"
	//
	//     }
	//
	// ]
	Tags []*CreatePrometheusInstanceRequestTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
	// The ID of the vSwitch. This parameter is required if you set the ClusterType parameter to ecs.
	//
	// example:
	//
	// vsw-bp1*********
	VSwitchId *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	// The ID of virtual private cloud (VPC). This parameter is required if you set the ClusterType parameter to ecs.
	//
	// example:
	//
	// vpc-rpn**********
	VpcId *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
}

func (s CreatePrometheusInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s CreatePrometheusInstanceRequest) GoString() string {
	return s.String()
}

func (s *CreatePrometheusInstanceRequest) SetAllSubClustersSuccess(v bool) *CreatePrometheusInstanceRequest {
	s.AllSubClustersSuccess = &v
	return s
}

func (s *CreatePrometheusInstanceRequest) SetArchiveDuration(v int32) *CreatePrometheusInstanceRequest {
	s.ArchiveDuration = &v
	return s
}

func (s *CreatePrometheusInstanceRequest) SetClusterId(v string) *CreatePrometheusInstanceRequest {
	s.ClusterId = &v
	return s
}

func (s *CreatePrometheusInstanceRequest) SetClusterName(v string) *CreatePrometheusInstanceRequest {
	s.ClusterName = &v
	return s
}

func (s *CreatePrometheusInstanceRequest) SetClusterType(v string) *CreatePrometheusInstanceRequest {
	s.ClusterType = &v
	return s
}

func (s *CreatePrometheusInstanceRequest) SetDuration(v int32) *CreatePrometheusInstanceRequest {
	s.Duration = &v
	return s
}

func (s *CreatePrometheusInstanceRequest) SetGrafanaInstanceId(v string) *CreatePrometheusInstanceRequest {
	s.GrafanaInstanceId = &v
	return s
}

func (s *CreatePrometheusInstanceRequest) SetRegionId(v string) *CreatePrometheusInstanceRequest {
	s.RegionId = &v
	return s
}

func (s *CreatePrometheusInstanceRequest) SetResourceGroupId(v string) *CreatePrometheusInstanceRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *CreatePrometheusInstanceRequest) SetSecurityGroupId(v string) *CreatePrometheusInstanceRequest {
	s.SecurityGroupId = &v
	return s
}

func (s *CreatePrometheusInstanceRequest) SetSubClustersJson(v string) *CreatePrometheusInstanceRequest {
	s.SubClustersJson = &v
	return s
}

func (s *CreatePrometheusInstanceRequest) SetTags(v []*CreatePrometheusInstanceRequestTags) *CreatePrometheusInstanceRequest {
	s.Tags = v
	return s
}

func (s *CreatePrometheusInstanceRequest) SetVSwitchId(v string) *CreatePrometheusInstanceRequest {
	s.VSwitchId = &v
	return s
}

func (s *CreatePrometheusInstanceRequest) SetVpcId(v string) *CreatePrometheusInstanceRequest {
	s.VpcId = &v
	return s
}

type CreatePrometheusInstanceRequestTags struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s CreatePrometheusInstanceRequestTags) String() string {
	return tea.Prettify(s)
}

func (s CreatePrometheusInstanceRequestTags) GoString() string {
	return s.String()
}

func (s *CreatePrometheusInstanceRequestTags) SetKey(v string) *CreatePrometheusInstanceRequestTags {
	s.Key = &v
	return s
}

func (s *CreatePrometheusInstanceRequestTags) SetValue(v string) *CreatePrometheusInstanceRequestTags {
	s.Value = &v
	return s
}

type CreatePrometheusInstanceResponseBody struct {
	// The status code. The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The ID of the created Prometheus instance.
	//
	// example:
	//
	// qduukd****
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// The message returned.
	//
	// example:
	//
	// message
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 70675725-8F11-4817-8106-CFE0AD71****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreatePrometheusInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreatePrometheusInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *CreatePrometheusInstanceResponseBody) SetCode(v int32) *CreatePrometheusInstanceResponseBody {
	s.Code = &v
	return s
}

func (s *CreatePrometheusInstanceResponseBody) SetData(v string) *CreatePrometheusInstanceResponseBody {
	s.Data = &v
	return s
}

func (s *CreatePrometheusInstanceResponseBody) SetMessage(v string) *CreatePrometheusInstanceResponseBody {
	s.Message = &v
	return s
}

func (s *CreatePrometheusInstanceResponseBody) SetRequestId(v string) *CreatePrometheusInstanceResponseBody {
	s.RequestId = &v
	return s
}

type CreatePrometheusInstanceResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreatePrometheusInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreatePrometheusInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s CreatePrometheusInstanceResponse) GoString() string {
	return s.String()
}

func (s *CreatePrometheusInstanceResponse) SetHeaders(v map[string]*string) *CreatePrometheusInstanceResponse {
	s.Headers = v
	return s
}

func (s *CreatePrometheusInstanceResponse) SetStatusCode(v int32) *CreatePrometheusInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *CreatePrometheusInstanceResponse) SetBody(v *CreatePrometheusInstanceResponseBody) *CreatePrometheusInstanceResponse {
	s.Body = v
	return s
}

type CreatePrometheusMonitoringRequest struct {
	// The ID of the Prometheus instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// cc7a37ee31aea4ed1a059eff8034b****
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	// The monitoring configuration. Specify a YAML string.
	//
	// This parameter is required.
	//
	// example:
	//
	// Please refer to the supplementary explanation of the request parameters.
	ConfigYaml *string `json:"ConfigYaml,omitempty" xml:"ConfigYaml,omitempty"`
	// The region ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The status of the monitoring configuration. Valid values: run and stop. Default value: run. This parameter is not available if the Type parameter is set to Probe.
	//
	// example:
	//
	// run
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The type of the monitoring configuration.
	//
	// Valid values for a Prometheus instance for Container Service: serviceMonitor, podMonitor, customJob, and probe.
	//
	// Valid values for a Prometheus instance for ECS: customJob and probe.
	//
	// This parameter is required.
	//
	// example:
	//
	// serviceMonitor
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s CreatePrometheusMonitoringRequest) String() string {
	return tea.Prettify(s)
}

func (s CreatePrometheusMonitoringRequest) GoString() string {
	return s.String()
}

func (s *CreatePrometheusMonitoringRequest) SetClusterId(v string) *CreatePrometheusMonitoringRequest {
	s.ClusterId = &v
	return s
}

func (s *CreatePrometheusMonitoringRequest) SetConfigYaml(v string) *CreatePrometheusMonitoringRequest {
	s.ConfigYaml = &v
	return s
}

func (s *CreatePrometheusMonitoringRequest) SetRegionId(v string) *CreatePrometheusMonitoringRequest {
	s.RegionId = &v
	return s
}

func (s *CreatePrometheusMonitoringRequest) SetStatus(v string) *CreatePrometheusMonitoringRequest {
	s.Status = &v
	return s
}

func (s *CreatePrometheusMonitoringRequest) SetType(v string) *CreatePrometheusMonitoringRequest {
	s.Type = &v
	return s
}

type CreatePrometheusMonitoringResponseBody struct {
	// The status code. The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The name of the monitoring configuration that was added, or the exception information.
	//
	// example:
	//
	// name1
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// The returned message.
	//
	// example:
	//
	// message
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 21E85B16-75A6-429A-9F65-8AAC9A54****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreatePrometheusMonitoringResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreatePrometheusMonitoringResponseBody) GoString() string {
	return s.String()
}

func (s *CreatePrometheusMonitoringResponseBody) SetCode(v int32) *CreatePrometheusMonitoringResponseBody {
	s.Code = &v
	return s
}

func (s *CreatePrometheusMonitoringResponseBody) SetData(v string) *CreatePrometheusMonitoringResponseBody {
	s.Data = &v
	return s
}

func (s *CreatePrometheusMonitoringResponseBody) SetMessage(v string) *CreatePrometheusMonitoringResponseBody {
	s.Message = &v
	return s
}

func (s *CreatePrometheusMonitoringResponseBody) SetRequestId(v string) *CreatePrometheusMonitoringResponseBody {
	s.RequestId = &v
	return s
}

type CreatePrometheusMonitoringResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreatePrometheusMonitoringResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreatePrometheusMonitoringResponse) String() string {
	return tea.Prettify(s)
}

func (s CreatePrometheusMonitoringResponse) GoString() string {
	return s.String()
}

func (s *CreatePrometheusMonitoringResponse) SetHeaders(v map[string]*string) *CreatePrometheusMonitoringResponse {
	s.Headers = v
	return s
}

func (s *CreatePrometheusMonitoringResponse) SetStatusCode(v int32) *CreatePrometheusMonitoringResponse {
	s.StatusCode = &v
	return s
}

func (s *CreatePrometheusMonitoringResponse) SetBody(v *CreatePrometheusMonitoringResponseBody) *CreatePrometheusMonitoringResponse {
	s.Body = v
	return s
}

type CreateRetcodeAppRequest struct {
	// The region ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the resource group. You can obtain the resource group ID in the **Resource Management*	- console.
	//
	// example:
	//
	// rg-acfmxyexli2****
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	// The name of the application that is monitored by Browser Monitoring.
	//
	// This parameter is required.
	//
	// example:
	//
	// SdkTest
	RetcodeAppName *string `json:"RetcodeAppName,omitempty" xml:"RetcodeAppName,omitempty"`
	// The site type.
	//
	// This parameter is required.
	//
	// example:
	//
	// mini_dd
	RetcodeAppType *string `json:"RetcodeAppType,omitempty" xml:"RetcodeAppType,omitempty"`
	// The list of tags.
	Tags []*CreateRetcodeAppRequestTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
}

func (s CreateRetcodeAppRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateRetcodeAppRequest) GoString() string {
	return s.String()
}

func (s *CreateRetcodeAppRequest) SetRegionId(v string) *CreateRetcodeAppRequest {
	s.RegionId = &v
	return s
}

func (s *CreateRetcodeAppRequest) SetResourceGroupId(v string) *CreateRetcodeAppRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *CreateRetcodeAppRequest) SetRetcodeAppName(v string) *CreateRetcodeAppRequest {
	s.RetcodeAppName = &v
	return s
}

func (s *CreateRetcodeAppRequest) SetRetcodeAppType(v string) *CreateRetcodeAppRequest {
	s.RetcodeAppType = &v
	return s
}

func (s *CreateRetcodeAppRequest) SetTags(v []*CreateRetcodeAppRequestTags) *CreateRetcodeAppRequest {
	s.Tags = v
	return s
}

type CreateRetcodeAppRequestTags struct {
	// The tag key.
	//
	// example:
	//
	// TestKey
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The tag value.
	//
	// example:
	//
	// TestValue
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s CreateRetcodeAppRequestTags) String() string {
	return tea.Prettify(s)
}

func (s CreateRetcodeAppRequestTags) GoString() string {
	return s.String()
}

func (s *CreateRetcodeAppRequestTags) SetKey(v string) *CreateRetcodeAppRequestTags {
	s.Key = &v
	return s
}

func (s *CreateRetcodeAppRequestTags) SetValue(v string) *CreateRetcodeAppRequestTags {
	s.Value = &v
	return s
}

type CreateRetcodeAppResponseBody struct {
	// The status code. The status code 200 indicates that the request was successful. If another status code is returned, the request failed.
	//
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The response parameters.
	//
	// example:
	//
	// cs80w0n7u3@6455f403dba2f0a
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// The message returned.
	//
	// example:
	//
	// message
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// A5EC8221-08F2-4C95-9AF1-49FD998C647A
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The return detail.
	RetcodeAppDataBean *CreateRetcodeAppResponseBodyRetcodeAppDataBean `json:"RetcodeAppDataBean,omitempty" xml:"RetcodeAppDataBean,omitempty" type:"Struct"`
	// Indicates whether the call was successful. Valid values:
	//
	// 	- true: The call was successful.
	//
	// 	- false: The call failed.
	//
	// example:
	//
	// True
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateRetcodeAppResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateRetcodeAppResponseBody) GoString() string {
	return s.String()
}

func (s *CreateRetcodeAppResponseBody) SetCode(v int32) *CreateRetcodeAppResponseBody {
	s.Code = &v
	return s
}

func (s *CreateRetcodeAppResponseBody) SetData(v string) *CreateRetcodeAppResponseBody {
	s.Data = &v
	return s
}

func (s *CreateRetcodeAppResponseBody) SetMessage(v string) *CreateRetcodeAppResponseBody {
	s.Message = &v
	return s
}

func (s *CreateRetcodeAppResponseBody) SetRequestId(v string) *CreateRetcodeAppResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateRetcodeAppResponseBody) SetRetcodeAppDataBean(v *CreateRetcodeAppResponseBodyRetcodeAppDataBean) *CreateRetcodeAppResponseBody {
	s.RetcodeAppDataBean = v
	return s
}

func (s *CreateRetcodeAppResponseBody) SetSuccess(v bool) *CreateRetcodeAppResponseBody {
	s.Success = &v
	return s
}

type CreateRetcodeAppResponseBodyRetcodeAppDataBean struct {
	// The application ID.
	//
	// example:
	//
	// 135143
	AppId *int64 `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// PID.
	//
	// example:
	//
	// aokcdqn3ly@a195c6d6421****
	Pid *string `json:"Pid,omitempty" xml:"Pid,omitempty"`
	// The ID of the resource group.
	//
	// If this parameter is left empty, the default resource group is used. You can view the resource group ID on the Resource Group page in the Resource Management console.
	//
	// example:
	//
	// rg-acfmxyexli2****
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	// The tags.
	Tags *CreateRetcodeAppResponseBodyRetcodeAppDataBeanTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Struct"`
}

func (s CreateRetcodeAppResponseBodyRetcodeAppDataBean) String() string {
	return tea.Prettify(s)
}

func (s CreateRetcodeAppResponseBodyRetcodeAppDataBean) GoString() string {
	return s.String()
}

func (s *CreateRetcodeAppResponseBodyRetcodeAppDataBean) SetAppId(v int64) *CreateRetcodeAppResponseBodyRetcodeAppDataBean {
	s.AppId = &v
	return s
}

func (s *CreateRetcodeAppResponseBodyRetcodeAppDataBean) SetPid(v string) *CreateRetcodeAppResponseBodyRetcodeAppDataBean {
	s.Pid = &v
	return s
}

func (s *CreateRetcodeAppResponseBodyRetcodeAppDataBean) SetResourceGroupId(v string) *CreateRetcodeAppResponseBodyRetcodeAppDataBean {
	s.ResourceGroupId = &v
	return s
}

func (s *CreateRetcodeAppResponseBodyRetcodeAppDataBean) SetTags(v *CreateRetcodeAppResponseBodyRetcodeAppDataBeanTags) *CreateRetcodeAppResponseBodyRetcodeAppDataBean {
	s.Tags = v
	return s
}

type CreateRetcodeAppResponseBodyRetcodeAppDataBeanTags struct {
	Tags []*CreateRetcodeAppResponseBodyRetcodeAppDataBeanTagsTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
}

func (s CreateRetcodeAppResponseBodyRetcodeAppDataBeanTags) String() string {
	return tea.Prettify(s)
}

func (s CreateRetcodeAppResponseBodyRetcodeAppDataBeanTags) GoString() string {
	return s.String()
}

func (s *CreateRetcodeAppResponseBodyRetcodeAppDataBeanTags) SetTags(v []*CreateRetcodeAppResponseBodyRetcodeAppDataBeanTagsTags) *CreateRetcodeAppResponseBodyRetcodeAppDataBeanTags {
	s.Tags = v
	return s
}

type CreateRetcodeAppResponseBodyRetcodeAppDataBeanTagsTags struct {
	// The tag key.
	//
	// example:
	//
	// TestKey
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The tag value.
	//
	// example:
	//
	// TestValue
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s CreateRetcodeAppResponseBodyRetcodeAppDataBeanTagsTags) String() string {
	return tea.Prettify(s)
}

func (s CreateRetcodeAppResponseBodyRetcodeAppDataBeanTagsTags) GoString() string {
	return s.String()
}

func (s *CreateRetcodeAppResponseBodyRetcodeAppDataBeanTagsTags) SetKey(v string) *CreateRetcodeAppResponseBodyRetcodeAppDataBeanTagsTags {
	s.Key = &v
	return s
}

func (s *CreateRetcodeAppResponseBodyRetcodeAppDataBeanTagsTags) SetValue(v string) *CreateRetcodeAppResponseBodyRetcodeAppDataBeanTagsTags {
	s.Value = &v
	return s
}

type CreateRetcodeAppResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateRetcodeAppResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateRetcodeAppResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateRetcodeAppResponse) GoString() string {
	return s.String()
}

func (s *CreateRetcodeAppResponse) SetHeaders(v map[string]*string) *CreateRetcodeAppResponse {
	s.Headers = v
	return s
}

func (s *CreateRetcodeAppResponse) SetStatusCode(v int32) *CreateRetcodeAppResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateRetcodeAppResponse) SetBody(v *CreateRetcodeAppResponseBody) *CreateRetcodeAppResponse {
	s.Body = v
	return s
}

type CreateRumAppRequest struct {
	// example:
	//
	// default
	AppGroup *string `json:"AppGroup,omitempty" xml:"AppGroup,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// test-app
	AppName     *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// example:
	//
	// com.xxxx.xxxxxx
	PackageName *string `json:"PackageName,omitempty" xml:"PackageName,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// example:
	//
	// rg-acfmxyexli2****
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// web
	SiteType *string `json:"SiteType,omitempty" xml:"SiteType,omitempty"`
	// example:
	//
	// arms
	Source *string                   `json:"Source,omitempty" xml:"Source,omitempty"`
	Tag    []*CreateRumAppRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s CreateRumAppRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateRumAppRequest) GoString() string {
	return s.String()
}

func (s *CreateRumAppRequest) SetAppGroup(v string) *CreateRumAppRequest {
	s.AppGroup = &v
	return s
}

func (s *CreateRumAppRequest) SetAppName(v string) *CreateRumAppRequest {
	s.AppName = &v
	return s
}

func (s *CreateRumAppRequest) SetDescription(v string) *CreateRumAppRequest {
	s.Description = &v
	return s
}

func (s *CreateRumAppRequest) SetPackageName(v string) *CreateRumAppRequest {
	s.PackageName = &v
	return s
}

func (s *CreateRumAppRequest) SetRegionId(v string) *CreateRumAppRequest {
	s.RegionId = &v
	return s
}

func (s *CreateRumAppRequest) SetResourceGroupId(v string) *CreateRumAppRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *CreateRumAppRequest) SetSiteType(v string) *CreateRumAppRequest {
	s.SiteType = &v
	return s
}

func (s *CreateRumAppRequest) SetSource(v string) *CreateRumAppRequest {
	s.Source = &v
	return s
}

func (s *CreateRumAppRequest) SetTag(v []*CreateRumAppRequestTag) *CreateRumAppRequest {
	s.Tag = v
	return s
}

type CreateRumAppRequestTag struct {
	// example:
	//
	// app
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// example:
	//
	// ecs
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s CreateRumAppRequestTag) String() string {
	return tea.Prettify(s)
}

func (s CreateRumAppRequestTag) GoString() string {
	return s.String()
}

func (s *CreateRumAppRequestTag) SetKey(v string) *CreateRumAppRequestTag {
	s.Key = &v
	return s
}

func (s *CreateRumAppRequestTag) SetValue(v string) *CreateRumAppRequestTag {
	s.Value = &v
	return s
}

type CreateRumAppResponseBody struct {
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// ggxxxnjuz@xxxx,xxxxxx-default-cn.rum.aliyuncs.com
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// Id of the request
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	//
	// example:
	//
	// 1A474FF8-7861-4D00-81B5-5BC3DA4E****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// rg-acfmxyexli2****
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateRumAppResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateRumAppResponseBody) GoString() string {
	return s.String()
}

func (s *CreateRumAppResponseBody) SetCode(v int32) *CreateRumAppResponseBody {
	s.Code = &v
	return s
}

func (s *CreateRumAppResponseBody) SetData(v string) *CreateRumAppResponseBody {
	s.Data = &v
	return s
}

func (s *CreateRumAppResponseBody) SetHttpStatusCode(v int32) *CreateRumAppResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *CreateRumAppResponseBody) SetMessage(v string) *CreateRumAppResponseBody {
	s.Message = &v
	return s
}

func (s *CreateRumAppResponseBody) SetRequestId(v string) *CreateRumAppResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateRumAppResponseBody) SetResourceGroupId(v string) *CreateRumAppResponseBody {
	s.ResourceGroupId = &v
	return s
}

func (s *CreateRumAppResponseBody) SetSuccess(v bool) *CreateRumAppResponseBody {
	s.Success = &v
	return s
}

type CreateRumAppResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateRumAppResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateRumAppResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateRumAppResponse) GoString() string {
	return s.String()
}

func (s *CreateRumAppResponse) SetHeaders(v map[string]*string) *CreateRumAppResponse {
	s.Headers = v
	return s
}

func (s *CreateRumAppResponse) SetStatusCode(v int32) *CreateRumAppResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateRumAppResponse) SetBody(v *CreateRumAppResponseBody) *CreateRumAppResponse {
	s.Body = v
	return s
}

type CreateRumUploadFileUrlRequest struct {
	// example:
	//
	// test-app
	AppName *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	// example:
	//
	// text/plain
	ContentType *string `json:"ContentType,omitempty" xml:"ContentType,omitempty"`
	// example:
	//
	// test.js.map
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// example:
	//
	// iioe7jcnuk@582846f37******
	Pid *string `json:"Pid,omitempty" xml:"Pid,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// example:
	//
	// source-map
	SourcemapType *string `json:"SourcemapType,omitempty" xml:"SourcemapType,omitempty"`
	// example:
	//
	// 125bdb39-a415-4503-bd96-e293925fc64c
	Uuid *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
	// example:
	//
	// 1.0.0
	VersionId *string `json:"VersionId,omitempty" xml:"VersionId,omitempty"`
}

func (s CreateRumUploadFileUrlRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateRumUploadFileUrlRequest) GoString() string {
	return s.String()
}

func (s *CreateRumUploadFileUrlRequest) SetAppName(v string) *CreateRumUploadFileUrlRequest {
	s.AppName = &v
	return s
}

func (s *CreateRumUploadFileUrlRequest) SetContentType(v string) *CreateRumUploadFileUrlRequest {
	s.ContentType = &v
	return s
}

func (s *CreateRumUploadFileUrlRequest) SetFileName(v string) *CreateRumUploadFileUrlRequest {
	s.FileName = &v
	return s
}

func (s *CreateRumUploadFileUrlRequest) SetPid(v string) *CreateRumUploadFileUrlRequest {
	s.Pid = &v
	return s
}

func (s *CreateRumUploadFileUrlRequest) SetRegionId(v string) *CreateRumUploadFileUrlRequest {
	s.RegionId = &v
	return s
}

func (s *CreateRumUploadFileUrlRequest) SetSourcemapType(v string) *CreateRumUploadFileUrlRequest {
	s.SourcemapType = &v
	return s
}

func (s *CreateRumUploadFileUrlRequest) SetUuid(v string) *CreateRumUploadFileUrlRequest {
	s.Uuid = &v
	return s
}

func (s *CreateRumUploadFileUrlRequest) SetVersionId(v string) *CreateRumUploadFileUrlRequest {
	s.VersionId = &v
	return s
}

type CreateRumUploadFileUrlResponseBody struct {
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// http://arms-rum-v2.oss-cn-hangzhou.aliyuncs.com/113197164xxxxx28/b590lhguqs%40f93xxxxxbf31d3/1.0.0-robots.txt?Expires=1713847079&OSSAccessKeyId=STS.NT6XvoxkyqA&Signature=6ptYX4OTjLMrsleTlA2t97
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	//
	// example:
	//
	// A5EC8221-08F2-4C95-9AF1-49FD998C****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateRumUploadFileUrlResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateRumUploadFileUrlResponseBody) GoString() string {
	return s.String()
}

func (s *CreateRumUploadFileUrlResponseBody) SetCode(v int32) *CreateRumUploadFileUrlResponseBody {
	s.Code = &v
	return s
}

func (s *CreateRumUploadFileUrlResponseBody) SetData(v string) *CreateRumUploadFileUrlResponseBody {
	s.Data = &v
	return s
}

func (s *CreateRumUploadFileUrlResponseBody) SetHttpStatusCode(v int32) *CreateRumUploadFileUrlResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *CreateRumUploadFileUrlResponseBody) SetMessage(v string) *CreateRumUploadFileUrlResponseBody {
	s.Message = &v
	return s
}

func (s *CreateRumUploadFileUrlResponseBody) SetRequestId(v string) *CreateRumUploadFileUrlResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateRumUploadFileUrlResponseBody) SetSuccess(v bool) *CreateRumUploadFileUrlResponseBody {
	s.Success = &v
	return s
}

type CreateRumUploadFileUrlResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateRumUploadFileUrlResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateRumUploadFileUrlResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateRumUploadFileUrlResponse) GoString() string {
	return s.String()
}

func (s *CreateRumUploadFileUrlResponse) SetHeaders(v map[string]*string) *CreateRumUploadFileUrlResponse {
	s.Headers = v
	return s
}

func (s *CreateRumUploadFileUrlResponse) SetStatusCode(v int32) *CreateRumUploadFileUrlResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateRumUploadFileUrlResponse) SetBody(v *CreateRumUploadFileUrlResponseBody) *CreateRumUploadFileUrlResponse {
	s.Body = v
	return s
}

type CreateSyntheticTaskRequest struct {
	CommonParam    *CreateSyntheticTaskRequestCommonParam    `json:"CommonParam,omitempty" xml:"CommonParam,omitempty" type:"Struct"`
	Download       *CreateSyntheticTaskRequestDownload       `json:"Download,omitempty" xml:"Download,omitempty" type:"Struct"`
	ExtendInterval *CreateSyntheticTaskRequestExtendInterval `json:"ExtendInterval,omitempty" xml:"ExtendInterval,omitempty" type:"Struct"`
	// This parameter is required.
	//
	// example:
	//
	// 5
	IntervalTime *string `json:"IntervalTime,omitempty" xml:"IntervalTime,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 0
	IntervalType *string `json:"IntervalType,omitempty" xml:"IntervalType,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 0
	IpType *int64 `json:"IpType,omitempty" xml:"IpType,omitempty"`
	// This parameter is required.
	MonitorList []*CreateSyntheticTaskRequestMonitorList `json:"MonitorList,omitempty" xml:"MonitorList,omitempty" type:"Repeated"`
	Navigation  *CreateSyntheticTaskRequestNavigation    `json:"Navigation,omitempty" xml:"Navigation,omitempty" type:"Struct"`
	Net         *CreateSyntheticTaskRequestNet           `json:"Net,omitempty" xml:"Net,omitempty" type:"Struct"`
	Protocol    *CreateSyntheticTaskRequestProtocol      `json:"Protocol,omitempty" xml:"Protocol,omitempty" type:"Struct"`
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// This parameter is required.
	TaskName *string `json:"TaskName,omitempty" xml:"TaskName,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 0
	TaskType *int64 `json:"TaskType,omitempty" xml:"TaskType,omitempty"`
	// example:
	//
	// false
	UpdateTask *bool `json:"UpdateTask,omitempty" xml:"UpdateTask,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// https://www.example.com
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s CreateSyntheticTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSyntheticTaskRequest) GoString() string {
	return s.String()
}

func (s *CreateSyntheticTaskRequest) SetCommonParam(v *CreateSyntheticTaskRequestCommonParam) *CreateSyntheticTaskRequest {
	s.CommonParam = v
	return s
}

func (s *CreateSyntheticTaskRequest) SetDownload(v *CreateSyntheticTaskRequestDownload) *CreateSyntheticTaskRequest {
	s.Download = v
	return s
}

func (s *CreateSyntheticTaskRequest) SetExtendInterval(v *CreateSyntheticTaskRequestExtendInterval) *CreateSyntheticTaskRequest {
	s.ExtendInterval = v
	return s
}

func (s *CreateSyntheticTaskRequest) SetIntervalTime(v string) *CreateSyntheticTaskRequest {
	s.IntervalTime = &v
	return s
}

func (s *CreateSyntheticTaskRequest) SetIntervalType(v string) *CreateSyntheticTaskRequest {
	s.IntervalType = &v
	return s
}

func (s *CreateSyntheticTaskRequest) SetIpType(v int64) *CreateSyntheticTaskRequest {
	s.IpType = &v
	return s
}

func (s *CreateSyntheticTaskRequest) SetMonitorList(v []*CreateSyntheticTaskRequestMonitorList) *CreateSyntheticTaskRequest {
	s.MonitorList = v
	return s
}

func (s *CreateSyntheticTaskRequest) SetNavigation(v *CreateSyntheticTaskRequestNavigation) *CreateSyntheticTaskRequest {
	s.Navigation = v
	return s
}

func (s *CreateSyntheticTaskRequest) SetNet(v *CreateSyntheticTaskRequestNet) *CreateSyntheticTaskRequest {
	s.Net = v
	return s
}

func (s *CreateSyntheticTaskRequest) SetProtocol(v *CreateSyntheticTaskRequestProtocol) *CreateSyntheticTaskRequest {
	s.Protocol = v
	return s
}

func (s *CreateSyntheticTaskRequest) SetRegionId(v string) *CreateSyntheticTaskRequest {
	s.RegionId = &v
	return s
}

func (s *CreateSyntheticTaskRequest) SetTaskName(v string) *CreateSyntheticTaskRequest {
	s.TaskName = &v
	return s
}

func (s *CreateSyntheticTaskRequest) SetTaskType(v int64) *CreateSyntheticTaskRequest {
	s.TaskType = &v
	return s
}

func (s *CreateSyntheticTaskRequest) SetUpdateTask(v bool) *CreateSyntheticTaskRequest {
	s.UpdateTask = &v
	return s
}

func (s *CreateSyntheticTaskRequest) SetUrl(v string) *CreateSyntheticTaskRequest {
	s.Url = &v
	return s
}

type CreateSyntheticTaskRequestCommonParam struct {
	// example:
	//
	// 1
	AlarmFlag *string                                           `json:"AlarmFlag,omitempty" xml:"AlarmFlag,omitempty"`
	AlertList []*CreateSyntheticTaskRequestCommonParamAlertList `json:"AlertList,omitempty" xml:"AlertList,omitempty" type:"Repeated"`
	// example:
	//
	// 123
	AlertNotifierId *string `json:"AlertNotifierId,omitempty" xml:"AlertNotifierId,omitempty"`
	// example:
	//
	// 1234
	AlertPolicyId *string `json:"AlertPolicyId,omitempty" xml:"AlertPolicyId,omitempty"`
	// example:
	//
	// 0
	MonitorSamples *int64 `json:"MonitorSamples,omitempty" xml:"MonitorSamples,omitempty"`
	// example:
	//
	// 2022-07-20 10
	StartExecutionTime *int64 `json:"StartExecutionTime,omitempty" xml:"StartExecutionTime,omitempty"`
}

func (s CreateSyntheticTaskRequestCommonParam) String() string {
	return tea.Prettify(s)
}

func (s CreateSyntheticTaskRequestCommonParam) GoString() string {
	return s.String()
}

func (s *CreateSyntheticTaskRequestCommonParam) SetAlarmFlag(v string) *CreateSyntheticTaskRequestCommonParam {
	s.AlarmFlag = &v
	return s
}

func (s *CreateSyntheticTaskRequestCommonParam) SetAlertList(v []*CreateSyntheticTaskRequestCommonParamAlertList) *CreateSyntheticTaskRequestCommonParam {
	s.AlertList = v
	return s
}

func (s *CreateSyntheticTaskRequestCommonParam) SetAlertNotifierId(v string) *CreateSyntheticTaskRequestCommonParam {
	s.AlertNotifierId = &v
	return s
}

func (s *CreateSyntheticTaskRequestCommonParam) SetAlertPolicyId(v string) *CreateSyntheticTaskRequestCommonParam {
	s.AlertPolicyId = &v
	return s
}

func (s *CreateSyntheticTaskRequestCommonParam) SetMonitorSamples(v int64) *CreateSyntheticTaskRequestCommonParam {
	s.MonitorSamples = &v
	return s
}

func (s *CreateSyntheticTaskRequestCommonParam) SetStartExecutionTime(v int64) *CreateSyntheticTaskRequestCommonParam {
	s.StartExecutionTime = &v
	return s
}

type CreateSyntheticTaskRequestCommonParamAlertList struct {
	// example:
	//
	// true
	IsCritical *int64 `json:"IsCritical,omitempty" xml:"IsCritical,omitempty"`
	// example:
	//
	// PING_SET
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// 1
	Symbols *int64 `json:"Symbols,omitempty" xml:"Symbols,omitempty"`
}

func (s CreateSyntheticTaskRequestCommonParamAlertList) String() string {
	return tea.Prettify(s)
}

func (s CreateSyntheticTaskRequestCommonParamAlertList) GoString() string {
	return s.String()
}

func (s *CreateSyntheticTaskRequestCommonParamAlertList) SetIsCritical(v int64) *CreateSyntheticTaskRequestCommonParamAlertList {
	s.IsCritical = &v
	return s
}

func (s *CreateSyntheticTaskRequestCommonParamAlertList) SetName(v string) *CreateSyntheticTaskRequestCommonParamAlertList {
	s.Name = &v
	return s
}

func (s *CreateSyntheticTaskRequestCommonParamAlertList) SetSymbols(v int64) *CreateSyntheticTaskRequestCommonParamAlertList {
	s.Symbols = &v
	return s
}

type CreateSyntheticTaskRequestDownload struct {
	// example:
	//
	// 200
	ConnectionTimeout           *float64 `json:"ConnectionTimeout,omitempty" xml:"ConnectionTimeout,omitempty"`
	DownloadCustomHeaderContent *string  `json:"DownloadCustomHeaderContent,omitempty" xml:"DownloadCustomHeaderContent,omitempty"`
	// example:
	//
	// 1
	DownloadCustomHost *int64 `json:"DownloadCustomHost,omitempty" xml:"DownloadCustomHost,omitempty"`
	// example:
	//
	// ipv4:192.168.2.1,192.168.2.5:img.a.com|192.168.2.1[8080]:img.a.com
	DownloadCustomHostIp           *string `json:"DownloadCustomHostIp,omitempty" xml:"DownloadCustomHostIp,omitempty"`
	DownloadIgnoreCertificateError *string `json:"DownloadIgnoreCertificateError,omitempty" xml:"DownloadIgnoreCertificateError,omitempty"`
	// example:
	//
	// 1
	DownloadKernel           *int64 `json:"DownloadKernel,omitempty" xml:"DownloadKernel,omitempty"`
	DownloadRedirection      *int64 `json:"DownloadRedirection,omitempty" xml:"DownloadRedirection,omitempty"`
	DownloadTransmissionSize *int64 `json:"DownloadTransmissionSize,omitempty" xml:"DownloadTransmissionSize,omitempty"`
	MonitorTimeout           *int64 `json:"MonitorTimeout,omitempty" xml:"MonitorTimeout,omitempty"`
	// example:
	//
	// 1
	QuickProtocol    *string `json:"QuickProtocol,omitempty" xml:"QuickProtocol,omitempty"`
	ValidateKeywords *string `json:"ValidateKeywords,omitempty" xml:"ValidateKeywords,omitempty"`
	// example:
	//
	// 0
	VerifyWay *int64 `json:"VerifyWay,omitempty" xml:"VerifyWay,omitempty"`
	// example:
	//
	// [{\\"src\\":\\"211.154.166.174\\"}]
	WhiteList *string `json:"WhiteList,omitempty" xml:"WhiteList,omitempty"`
}

func (s CreateSyntheticTaskRequestDownload) String() string {
	return tea.Prettify(s)
}

func (s CreateSyntheticTaskRequestDownload) GoString() string {
	return s.String()
}

func (s *CreateSyntheticTaskRequestDownload) SetConnectionTimeout(v float64) *CreateSyntheticTaskRequestDownload {
	s.ConnectionTimeout = &v
	return s
}

func (s *CreateSyntheticTaskRequestDownload) SetDownloadCustomHeaderContent(v string) *CreateSyntheticTaskRequestDownload {
	s.DownloadCustomHeaderContent = &v
	return s
}

func (s *CreateSyntheticTaskRequestDownload) SetDownloadCustomHost(v int64) *CreateSyntheticTaskRequestDownload {
	s.DownloadCustomHost = &v
	return s
}

func (s *CreateSyntheticTaskRequestDownload) SetDownloadCustomHostIp(v string) *CreateSyntheticTaskRequestDownload {
	s.DownloadCustomHostIp = &v
	return s
}

func (s *CreateSyntheticTaskRequestDownload) SetDownloadIgnoreCertificateError(v string) *CreateSyntheticTaskRequestDownload {
	s.DownloadIgnoreCertificateError = &v
	return s
}

func (s *CreateSyntheticTaskRequestDownload) SetDownloadKernel(v int64) *CreateSyntheticTaskRequestDownload {
	s.DownloadKernel = &v
	return s
}

func (s *CreateSyntheticTaskRequestDownload) SetDownloadRedirection(v int64) *CreateSyntheticTaskRequestDownload {
	s.DownloadRedirection = &v
	return s
}

func (s *CreateSyntheticTaskRequestDownload) SetDownloadTransmissionSize(v int64) *CreateSyntheticTaskRequestDownload {
	s.DownloadTransmissionSize = &v
	return s
}

func (s *CreateSyntheticTaskRequestDownload) SetMonitorTimeout(v int64) *CreateSyntheticTaskRequestDownload {
	s.MonitorTimeout = &v
	return s
}

func (s *CreateSyntheticTaskRequestDownload) SetQuickProtocol(v string) *CreateSyntheticTaskRequestDownload {
	s.QuickProtocol = &v
	return s
}

func (s *CreateSyntheticTaskRequestDownload) SetValidateKeywords(v string) *CreateSyntheticTaskRequestDownload {
	s.ValidateKeywords = &v
	return s
}

func (s *CreateSyntheticTaskRequestDownload) SetVerifyWay(v int64) *CreateSyntheticTaskRequestDownload {
	s.VerifyWay = &v
	return s
}

func (s *CreateSyntheticTaskRequestDownload) SetWhiteList(v string) *CreateSyntheticTaskRequestDownload {
	s.WhiteList = &v
	return s
}

type CreateSyntheticTaskRequestExtendInterval struct {
	Days []*int64 `json:"Days,omitempty" xml:"Days,omitempty" type:"Repeated"`
	// example:
	//
	// 23
	EndHour *int64 `json:"EndHour,omitempty" xml:"EndHour,omitempty"`
	// example:
	//
	// 00
	EndMinute *int64 `json:"EndMinute,omitempty" xml:"EndMinute,omitempty"`
	// example:
	//
	// 2022-08-20 10
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// example:
	//
	// 00
	StartHour *int64 `json:"StartHour,omitempty" xml:"StartHour,omitempty"`
	// example:
	//
	// 00
	StartMinute *int64 `json:"StartMinute,omitempty" xml:"StartMinute,omitempty"`
	// example:
	//
	// 2022-07-20 10
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s CreateSyntheticTaskRequestExtendInterval) String() string {
	return tea.Prettify(s)
}

func (s CreateSyntheticTaskRequestExtendInterval) GoString() string {
	return s.String()
}

func (s *CreateSyntheticTaskRequestExtendInterval) SetDays(v []*int64) *CreateSyntheticTaskRequestExtendInterval {
	s.Days = v
	return s
}

func (s *CreateSyntheticTaskRequestExtendInterval) SetEndHour(v int64) *CreateSyntheticTaskRequestExtendInterval {
	s.EndHour = &v
	return s
}

func (s *CreateSyntheticTaskRequestExtendInterval) SetEndMinute(v int64) *CreateSyntheticTaskRequestExtendInterval {
	s.EndMinute = &v
	return s
}

func (s *CreateSyntheticTaskRequestExtendInterval) SetEndTime(v string) *CreateSyntheticTaskRequestExtendInterval {
	s.EndTime = &v
	return s
}

func (s *CreateSyntheticTaskRequestExtendInterval) SetStartHour(v int64) *CreateSyntheticTaskRequestExtendInterval {
	s.StartHour = &v
	return s
}

func (s *CreateSyntheticTaskRequestExtendInterval) SetStartMinute(v int64) *CreateSyntheticTaskRequestExtendInterval {
	s.StartMinute = &v
	return s
}

func (s *CreateSyntheticTaskRequestExtendInterval) SetStartTime(v string) *CreateSyntheticTaskRequestExtendInterval {
	s.StartTime = &v
	return s
}

type CreateSyntheticTaskRequestMonitorList struct {
	// This parameter is required.
	//
	// example:
	//
	// 1100101
	CityCode *int64 `json:"CityCode,omitempty" xml:"CityCode,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// IDC
	MonitorType *int64 `json:"MonitorType,omitempty" xml:"MonitorType,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 18
	NetServiceId *int64 `json:"NetServiceId,omitempty" xml:"NetServiceId,omitempty"`
}

func (s CreateSyntheticTaskRequestMonitorList) String() string {
	return tea.Prettify(s)
}

func (s CreateSyntheticTaskRequestMonitorList) GoString() string {
	return s.String()
}

func (s *CreateSyntheticTaskRequestMonitorList) SetCityCode(v int64) *CreateSyntheticTaskRequestMonitorList {
	s.CityCode = &v
	return s
}

func (s *CreateSyntheticTaskRequestMonitorList) SetMonitorType(v int64) *CreateSyntheticTaskRequestMonitorList {
	s.MonitorType = &v
	return s
}

func (s *CreateSyntheticTaskRequestMonitorList) SetNetServiceId(v int64) *CreateSyntheticTaskRequestMonitorList {
	s.NetServiceId = &v
	return s
}

type CreateSyntheticTaskRequestNavigation struct {
	DNSHijackWhiteList *string `json:"DNSHijackWhiteList,omitempty" xml:"DNSHijackWhiteList,omitempty"`
	ElementBlacklist   *string `json:"ElementBlacklist,omitempty" xml:"ElementBlacklist,omitempty"`
	// example:
	//
	// 3
	ExecuteActiveX *int64 `json:"ExecuteActiveX,omitempty" xml:"ExecuteActiveX,omitempty"`
	// example:
	//
	// 1
	ExecuteApplication *int64 `json:"ExecuteApplication,omitempty" xml:"ExecuteApplication,omitempty"`
	// example:
	//
	// 1
	ExecuteScript *int64 `json:"ExecuteScript,omitempty" xml:"ExecuteScript,omitempty"`
	// example:
	//
	// 1
	FilterInvalidIP     *int64  `json:"FilterInvalidIP,omitempty" xml:"FilterInvalidIP,omitempty"`
	FlowHijackJumpTimes *int64  `json:"FlowHijackJumpTimes,omitempty" xml:"FlowHijackJumpTimes,omitempty"`
	FlowHijackLogo      *string `json:"FlowHijackLogo,omitempty" xml:"FlowHijackLogo,omitempty"`
	// example:
	//
	// 20
	MonitorTimeout *string `json:"MonitorTimeout,omitempty" xml:"MonitorTimeout,omitempty"`
	// example:
	//
	// 1
	NavAutomaticScrolling *string `json:"NavAutomaticScrolling,omitempty" xml:"NavAutomaticScrolling,omitempty"`
	// example:
	//
	// 0
	NavCustomHeader *string `json:"NavCustomHeader,omitempty" xml:"NavCustomHeader,omitempty"`
	// example:
	//
	// Host:www.example.com|Referer:www.example.com
	NavCustomHeaderContent *string `json:"NavCustomHeaderContent,omitempty" xml:"NavCustomHeaderContent,omitempty"`
	// example:
	//
	// 1
	NavCustomHost *int64 `json:"NavCustomHost,omitempty" xml:"NavCustomHost,omitempty"`
	// example:
	//
	// ipv4:192.168.2.1,192.168.2.5:img.a.com|192.168.2.1[8080]:img.a.com
	NavCustomHostIp *string `json:"NavCustomHostIp,omitempty" xml:"NavCustomHostIp,omitempty"`
	// example:
	//
	// 1
	NavDisableCache *int64 `json:"NavDisableCache,omitempty" xml:"NavDisableCache,omitempty"`
	// example:
	//
	// 1
	NavDisableCompression *string `json:"NavDisableCompression,omitempty" xml:"NavDisableCompression,omitempty"`
	// example:
	//
	// 1
	NavIgnoreCertificateError *int64 `json:"NavIgnoreCertificateError,omitempty" xml:"NavIgnoreCertificateError,omitempty"`
	// example:
	//
	// 1
	NavRedirection *int64 `json:"NavRedirection,omitempty" xml:"NavRedirection,omitempty"`
	// example:
	//
	// 2
	NavReturnElement *int64  `json:"NavReturnElement,omitempty" xml:"NavReturnElement,omitempty"`
	PageTamper       *string `json:"PageTamper,omitempty" xml:"PageTamper,omitempty"`
	// example:
	//
	// ssh
	ProcessName *string `json:"ProcessName,omitempty" xml:"ProcessName,omitempty"`
	// example:
	//
	// www.example.com
	QUICDomain *string `json:"QUICDomain,omitempty" xml:"QUICDomain,omitempty"`
	// example:
	//
	// 0
	QUICVersion *int64 `json:"QUICVersion,omitempty" xml:"QUICVersion,omitempty"`
	// example:
	//
	// 0
	RequestHeader *int64 `json:"RequestHeader,omitempty" xml:"RequestHeader,omitempty"`
	// example:
	//
	// 0
	ResponseHeader *int64 `json:"ResponseHeader,omitempty" xml:"ResponseHeader,omitempty"`
	// example:
	//
	// 5
	SlowElementThreshold  *float64 `json:"SlowElementThreshold,omitempty" xml:"SlowElementThreshold,omitempty"`
	VerifyStringBlacklist *string  `json:"VerifyStringBlacklist,omitempty" xml:"VerifyStringBlacklist,omitempty"`
	VerifyStringWhiteList *string  `json:"VerifyStringWhiteList,omitempty" xml:"VerifyStringWhiteList,omitempty"`
	WaitCompletionTime    *float64 `json:"WaitCompletionTime,omitempty" xml:"WaitCompletionTime,omitempty"`
}

func (s CreateSyntheticTaskRequestNavigation) String() string {
	return tea.Prettify(s)
}

func (s CreateSyntheticTaskRequestNavigation) GoString() string {
	return s.String()
}

func (s *CreateSyntheticTaskRequestNavigation) SetDNSHijackWhiteList(v string) *CreateSyntheticTaskRequestNavigation {
	s.DNSHijackWhiteList = &v
	return s
}

func (s *CreateSyntheticTaskRequestNavigation) SetElementBlacklist(v string) *CreateSyntheticTaskRequestNavigation {
	s.ElementBlacklist = &v
	return s
}

func (s *CreateSyntheticTaskRequestNavigation) SetExecuteActiveX(v int64) *CreateSyntheticTaskRequestNavigation {
	s.ExecuteActiveX = &v
	return s
}

func (s *CreateSyntheticTaskRequestNavigation) SetExecuteApplication(v int64) *CreateSyntheticTaskRequestNavigation {
	s.ExecuteApplication = &v
	return s
}

func (s *CreateSyntheticTaskRequestNavigation) SetExecuteScript(v int64) *CreateSyntheticTaskRequestNavigation {
	s.ExecuteScript = &v
	return s
}

func (s *CreateSyntheticTaskRequestNavigation) SetFilterInvalidIP(v int64) *CreateSyntheticTaskRequestNavigation {
	s.FilterInvalidIP = &v
	return s
}

func (s *CreateSyntheticTaskRequestNavigation) SetFlowHijackJumpTimes(v int64) *CreateSyntheticTaskRequestNavigation {
	s.FlowHijackJumpTimes = &v
	return s
}

func (s *CreateSyntheticTaskRequestNavigation) SetFlowHijackLogo(v string) *CreateSyntheticTaskRequestNavigation {
	s.FlowHijackLogo = &v
	return s
}

func (s *CreateSyntheticTaskRequestNavigation) SetMonitorTimeout(v string) *CreateSyntheticTaskRequestNavigation {
	s.MonitorTimeout = &v
	return s
}

func (s *CreateSyntheticTaskRequestNavigation) SetNavAutomaticScrolling(v string) *CreateSyntheticTaskRequestNavigation {
	s.NavAutomaticScrolling = &v
	return s
}

func (s *CreateSyntheticTaskRequestNavigation) SetNavCustomHeader(v string) *CreateSyntheticTaskRequestNavigation {
	s.NavCustomHeader = &v
	return s
}

func (s *CreateSyntheticTaskRequestNavigation) SetNavCustomHeaderContent(v string) *CreateSyntheticTaskRequestNavigation {
	s.NavCustomHeaderContent = &v
	return s
}

func (s *CreateSyntheticTaskRequestNavigation) SetNavCustomHost(v int64) *CreateSyntheticTaskRequestNavigation {
	s.NavCustomHost = &v
	return s
}

func (s *CreateSyntheticTaskRequestNavigation) SetNavCustomHostIp(v string) *CreateSyntheticTaskRequestNavigation {
	s.NavCustomHostIp = &v
	return s
}

func (s *CreateSyntheticTaskRequestNavigation) SetNavDisableCache(v int64) *CreateSyntheticTaskRequestNavigation {
	s.NavDisableCache = &v
	return s
}

func (s *CreateSyntheticTaskRequestNavigation) SetNavDisableCompression(v string) *CreateSyntheticTaskRequestNavigation {
	s.NavDisableCompression = &v
	return s
}

func (s *CreateSyntheticTaskRequestNavigation) SetNavIgnoreCertificateError(v int64) *CreateSyntheticTaskRequestNavigation {
	s.NavIgnoreCertificateError = &v
	return s
}

func (s *CreateSyntheticTaskRequestNavigation) SetNavRedirection(v int64) *CreateSyntheticTaskRequestNavigation {
	s.NavRedirection = &v
	return s
}

func (s *CreateSyntheticTaskRequestNavigation) SetNavReturnElement(v int64) *CreateSyntheticTaskRequestNavigation {
	s.NavReturnElement = &v
	return s
}

func (s *CreateSyntheticTaskRequestNavigation) SetPageTamper(v string) *CreateSyntheticTaskRequestNavigation {
	s.PageTamper = &v
	return s
}

func (s *CreateSyntheticTaskRequestNavigation) SetProcessName(v string) *CreateSyntheticTaskRequestNavigation {
	s.ProcessName = &v
	return s
}

func (s *CreateSyntheticTaskRequestNavigation) SetQUICDomain(v string) *CreateSyntheticTaskRequestNavigation {
	s.QUICDomain = &v
	return s
}

func (s *CreateSyntheticTaskRequestNavigation) SetQUICVersion(v int64) *CreateSyntheticTaskRequestNavigation {
	s.QUICVersion = &v
	return s
}

func (s *CreateSyntheticTaskRequestNavigation) SetRequestHeader(v int64) *CreateSyntheticTaskRequestNavigation {
	s.RequestHeader = &v
	return s
}

func (s *CreateSyntheticTaskRequestNavigation) SetResponseHeader(v int64) *CreateSyntheticTaskRequestNavigation {
	s.ResponseHeader = &v
	return s
}

func (s *CreateSyntheticTaskRequestNavigation) SetSlowElementThreshold(v float64) *CreateSyntheticTaskRequestNavigation {
	s.SlowElementThreshold = &v
	return s
}

func (s *CreateSyntheticTaskRequestNavigation) SetVerifyStringBlacklist(v string) *CreateSyntheticTaskRequestNavigation {
	s.VerifyStringBlacklist = &v
	return s
}

func (s *CreateSyntheticTaskRequestNavigation) SetVerifyStringWhiteList(v string) *CreateSyntheticTaskRequestNavigation {
	s.VerifyStringWhiteList = &v
	return s
}

func (s *CreateSyntheticTaskRequestNavigation) SetWaitCompletionTime(v float64) *CreateSyntheticTaskRequestNavigation {
	s.WaitCompletionTime = &v
	return s
}

type CreateSyntheticTaskRequestNet struct {
	// example:
	//
	// 114.114.XX.XX
	NetDNSNs *string `json:"NetDNSNs,omitempty" xml:"NetDNSNs,omitempty"`
	// example:
	//
	// 1
	NetDNSQueryMethod *int64 `json:"NetDNSQueryMethod,omitempty" xml:"NetDNSQueryMethod,omitempty"`
	// example:
	//
	// 0
	NetDNSServer *int64 `json:"NetDNSServer,omitempty" xml:"NetDNSServer,omitempty"`
	// example:
	//
	// 1
	NetDNSSwitch *int64 `json:"NetDNSSwitch,omitempty" xml:"NetDNSSwitch,omitempty"`
	// example:
	//
	// 5
	NetDNSTimeout *int64 `json:"NetDNSTimeout,omitempty" xml:"NetDNSTimeout,omitempty"`
	// example:
	//
	// 0
	NetDigSwitch *int64 `json:"NetDigSwitch,omitempty" xml:"NetDigSwitch,omitempty"`
	// example:
	//
	// 0
	NetICMPActive *int64 `json:"NetICMPActive,omitempty" xml:"NetICMPActive,omitempty"`
	// example:
	//
	// 0
	NetICMPDataCut *int64 `json:"NetICMPDataCut,omitempty" xml:"NetICMPDataCut,omitempty"`
	// example:
	//
	// 1
	NetICMPInterval *int64 `json:"NetICMPInterval,omitempty" xml:"NetICMPInterval,omitempty"`
	// example:
	//
	// 4
	NetICMPNum *int64 `json:"NetICMPNum,omitempty" xml:"NetICMPNum,omitempty"`
	// example:
	//
	// 32
	NetICMPSize *int64 `json:"NetICMPSize,omitempty" xml:"NetICMPSize,omitempty"`
	// example:
	//
	// 1
	NetICMPSwitch  *int64 `json:"NetICMPSwitch,omitempty" xml:"NetICMPSwitch,omitempty"`
	NetICMPTimeout *int64 `json:"NetICMPTimeout,omitempty" xml:"NetICMPTimeout,omitempty"`
	// example:
	//
	// 20
	NetTraceRouteNum *int64 `json:"NetTraceRouteNum,omitempty" xml:"NetTraceRouteNum,omitempty"`
	// example:
	//
	// 1
	NetTraceRouteSwitch *int64 `json:"NetTraceRouteSwitch,omitempty" xml:"NetTraceRouteSwitch,omitempty"`
	// example:
	//
	// 60
	NetTraceRouteTimeout *int64 `json:"NetTraceRouteTimeout,omitempty" xml:"NetTraceRouteTimeout,omitempty"`
	// example:
	//
	// www.aliyun.com:202.0.3.55|203.3.44.67
	WhiteList *string `json:"WhiteList,omitempty" xml:"WhiteList,omitempty"`
}

func (s CreateSyntheticTaskRequestNet) String() string {
	return tea.Prettify(s)
}

func (s CreateSyntheticTaskRequestNet) GoString() string {
	return s.String()
}

func (s *CreateSyntheticTaskRequestNet) SetNetDNSNs(v string) *CreateSyntheticTaskRequestNet {
	s.NetDNSNs = &v
	return s
}

func (s *CreateSyntheticTaskRequestNet) SetNetDNSQueryMethod(v int64) *CreateSyntheticTaskRequestNet {
	s.NetDNSQueryMethod = &v
	return s
}

func (s *CreateSyntheticTaskRequestNet) SetNetDNSServer(v int64) *CreateSyntheticTaskRequestNet {
	s.NetDNSServer = &v
	return s
}

func (s *CreateSyntheticTaskRequestNet) SetNetDNSSwitch(v int64) *CreateSyntheticTaskRequestNet {
	s.NetDNSSwitch = &v
	return s
}

func (s *CreateSyntheticTaskRequestNet) SetNetDNSTimeout(v int64) *CreateSyntheticTaskRequestNet {
	s.NetDNSTimeout = &v
	return s
}

func (s *CreateSyntheticTaskRequestNet) SetNetDigSwitch(v int64) *CreateSyntheticTaskRequestNet {
	s.NetDigSwitch = &v
	return s
}

func (s *CreateSyntheticTaskRequestNet) SetNetICMPActive(v int64) *CreateSyntheticTaskRequestNet {
	s.NetICMPActive = &v
	return s
}

func (s *CreateSyntheticTaskRequestNet) SetNetICMPDataCut(v int64) *CreateSyntheticTaskRequestNet {
	s.NetICMPDataCut = &v
	return s
}

func (s *CreateSyntheticTaskRequestNet) SetNetICMPInterval(v int64) *CreateSyntheticTaskRequestNet {
	s.NetICMPInterval = &v
	return s
}

func (s *CreateSyntheticTaskRequestNet) SetNetICMPNum(v int64) *CreateSyntheticTaskRequestNet {
	s.NetICMPNum = &v
	return s
}

func (s *CreateSyntheticTaskRequestNet) SetNetICMPSize(v int64) *CreateSyntheticTaskRequestNet {
	s.NetICMPSize = &v
	return s
}

func (s *CreateSyntheticTaskRequestNet) SetNetICMPSwitch(v int64) *CreateSyntheticTaskRequestNet {
	s.NetICMPSwitch = &v
	return s
}

func (s *CreateSyntheticTaskRequestNet) SetNetICMPTimeout(v int64) *CreateSyntheticTaskRequestNet {
	s.NetICMPTimeout = &v
	return s
}

func (s *CreateSyntheticTaskRequestNet) SetNetTraceRouteNum(v int64) *CreateSyntheticTaskRequestNet {
	s.NetTraceRouteNum = &v
	return s
}

func (s *CreateSyntheticTaskRequestNet) SetNetTraceRouteSwitch(v int64) *CreateSyntheticTaskRequestNet {
	s.NetTraceRouteSwitch = &v
	return s
}

func (s *CreateSyntheticTaskRequestNet) SetNetTraceRouteTimeout(v int64) *CreateSyntheticTaskRequestNet {
	s.NetTraceRouteTimeout = &v
	return s
}

func (s *CreateSyntheticTaskRequestNet) SetWhiteList(v string) *CreateSyntheticTaskRequestNet {
	s.WhiteList = &v
	return s
}

type CreateSyntheticTaskRequestProtocol struct {
	// example:
	//
	// 0
	CharacterEncoding *int64 `json:"CharacterEncoding,omitempty" xml:"CharacterEncoding,omitempty"`
	// example:
	//
	// 1
	CustomHost *int64 `json:"CustomHost,omitempty" xml:"CustomHost,omitempty"`
	// example:
	//
	// ipv4:192.168.2.1,192.168.2.5:img.a.com|192.168.2.1[8080]:img.a.com
	CustomHostIp *string `json:"CustomHostIp,omitempty" xml:"CustomHostIp,omitempty"`
	// example:
	//
	// 3
	ProtocolConnectionTime *int64 `json:"ProtocolConnectionTime,omitempty" xml:"ProtocolConnectionTime,omitempty"`
	// example:
	//
	// 30
	ProtocolMonitorTimeout *string                                           `json:"ProtocolMonitorTimeout,omitempty" xml:"ProtocolMonitorTimeout,omitempty"`
	ReceivedDataSize       *int64                                            `json:"ReceivedDataSize,omitempty" xml:"ReceivedDataSize,omitempty"`
	RequestContent         *CreateSyntheticTaskRequestProtocolRequestContent `json:"RequestContent,omitempty" xml:"RequestContent,omitempty" type:"Struct"`
	VerifyContent          *string                                           `json:"VerifyContent,omitempty" xml:"VerifyContent,omitempty"`
	// example:
	//
	// 0
	VerifyWay *int64 `json:"VerifyWay,omitempty" xml:"VerifyWay,omitempty"`
}

func (s CreateSyntheticTaskRequestProtocol) String() string {
	return tea.Prettify(s)
}

func (s CreateSyntheticTaskRequestProtocol) GoString() string {
	return s.String()
}

func (s *CreateSyntheticTaskRequestProtocol) SetCharacterEncoding(v int64) *CreateSyntheticTaskRequestProtocol {
	s.CharacterEncoding = &v
	return s
}

func (s *CreateSyntheticTaskRequestProtocol) SetCustomHost(v int64) *CreateSyntheticTaskRequestProtocol {
	s.CustomHost = &v
	return s
}

func (s *CreateSyntheticTaskRequestProtocol) SetCustomHostIp(v string) *CreateSyntheticTaskRequestProtocol {
	s.CustomHostIp = &v
	return s
}

func (s *CreateSyntheticTaskRequestProtocol) SetProtocolConnectionTime(v int64) *CreateSyntheticTaskRequestProtocol {
	s.ProtocolConnectionTime = &v
	return s
}

func (s *CreateSyntheticTaskRequestProtocol) SetProtocolMonitorTimeout(v string) *CreateSyntheticTaskRequestProtocol {
	s.ProtocolMonitorTimeout = &v
	return s
}

func (s *CreateSyntheticTaskRequestProtocol) SetReceivedDataSize(v int64) *CreateSyntheticTaskRequestProtocol {
	s.ReceivedDataSize = &v
	return s
}

func (s *CreateSyntheticTaskRequestProtocol) SetRequestContent(v *CreateSyntheticTaskRequestProtocolRequestContent) *CreateSyntheticTaskRequestProtocol {
	s.RequestContent = v
	return s
}

func (s *CreateSyntheticTaskRequestProtocol) SetVerifyContent(v string) *CreateSyntheticTaskRequestProtocol {
	s.VerifyContent = &v
	return s
}

func (s *CreateSyntheticTaskRequestProtocol) SetVerifyWay(v int64) *CreateSyntheticTaskRequestProtocol {
	s.VerifyWay = &v
	return s
}

type CreateSyntheticTaskRequestProtocolRequestContent struct {
	Body   *CreateSyntheticTaskRequestProtocolRequestContentBody     `json:"Body,omitempty" xml:"Body,omitempty" type:"Struct"`
	Header []*CreateSyntheticTaskRequestProtocolRequestContentHeader `json:"Header,omitempty" xml:"Header,omitempty" type:"Repeated"`
	// example:
	//
	// POST
	Method *string `json:"Method,omitempty" xml:"Method,omitempty"`
}

func (s CreateSyntheticTaskRequestProtocolRequestContent) String() string {
	return tea.Prettify(s)
}

func (s CreateSyntheticTaskRequestProtocolRequestContent) GoString() string {
	return s.String()
}

func (s *CreateSyntheticTaskRequestProtocolRequestContent) SetBody(v *CreateSyntheticTaskRequestProtocolRequestContentBody) *CreateSyntheticTaskRequestProtocolRequestContent {
	s.Body = v
	return s
}

func (s *CreateSyntheticTaskRequestProtocolRequestContent) SetHeader(v []*CreateSyntheticTaskRequestProtocolRequestContentHeader) *CreateSyntheticTaskRequestProtocolRequestContent {
	s.Header = v
	return s
}

func (s *CreateSyntheticTaskRequestProtocolRequestContent) SetMethod(v string) *CreateSyntheticTaskRequestProtocolRequestContent {
	s.Method = &v
	return s
}

type CreateSyntheticTaskRequestProtocolRequestContentBody struct {
	FormData []*CreateSyntheticTaskRequestProtocolRequestContentBodyFormData `json:"FormData,omitempty" xml:"FormData,omitempty" type:"Repeated"`
	// example:
	//
	// json
	Language *string `json:"Language,omitempty" xml:"Language,omitempty"`
	// example:
	//
	// form-data
	Mode *string `json:"Mode,omitempty" xml:"Mode,omitempty"`
	// example:
	//
	// content
	Raw         *string                                                            `json:"Raw,omitempty" xml:"Raw,omitempty"`
	UrlEncoding []*CreateSyntheticTaskRequestProtocolRequestContentBodyUrlEncoding `json:"UrlEncoding,omitempty" xml:"UrlEncoding,omitempty" type:"Repeated"`
}

func (s CreateSyntheticTaskRequestProtocolRequestContentBody) String() string {
	return tea.Prettify(s)
}

func (s CreateSyntheticTaskRequestProtocolRequestContentBody) GoString() string {
	return s.String()
}

func (s *CreateSyntheticTaskRequestProtocolRequestContentBody) SetFormData(v []*CreateSyntheticTaskRequestProtocolRequestContentBodyFormData) *CreateSyntheticTaskRequestProtocolRequestContentBody {
	s.FormData = v
	return s
}

func (s *CreateSyntheticTaskRequestProtocolRequestContentBody) SetLanguage(v string) *CreateSyntheticTaskRequestProtocolRequestContentBody {
	s.Language = &v
	return s
}

func (s *CreateSyntheticTaskRequestProtocolRequestContentBody) SetMode(v string) *CreateSyntheticTaskRequestProtocolRequestContentBody {
	s.Mode = &v
	return s
}

func (s *CreateSyntheticTaskRequestProtocolRequestContentBody) SetRaw(v string) *CreateSyntheticTaskRequestProtocolRequestContentBody {
	s.Raw = &v
	return s
}

func (s *CreateSyntheticTaskRequestProtocolRequestContentBody) SetUrlEncoding(v []*CreateSyntheticTaskRequestProtocolRequestContentBodyUrlEncoding) *CreateSyntheticTaskRequestProtocolRequestContentBody {
	s.UrlEncoding = v
	return s
}

type CreateSyntheticTaskRequestProtocolRequestContentBodyFormData struct {
	// example:
	//
	// appId
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// example:
	//
	// 3425
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s CreateSyntheticTaskRequestProtocolRequestContentBodyFormData) String() string {
	return tea.Prettify(s)
}

func (s CreateSyntheticTaskRequestProtocolRequestContentBodyFormData) GoString() string {
	return s.String()
}

func (s *CreateSyntheticTaskRequestProtocolRequestContentBodyFormData) SetKey(v string) *CreateSyntheticTaskRequestProtocolRequestContentBodyFormData {
	s.Key = &v
	return s
}

func (s *CreateSyntheticTaskRequestProtocolRequestContentBodyFormData) SetValue(v string) *CreateSyntheticTaskRequestProtocolRequestContentBodyFormData {
	s.Value = &v
	return s
}

type CreateSyntheticTaskRequestProtocolRequestContentBodyUrlEncoding struct {
	// example:
	//
	// appId
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// example:
	//
	// 11080
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s CreateSyntheticTaskRequestProtocolRequestContentBodyUrlEncoding) String() string {
	return tea.Prettify(s)
}

func (s CreateSyntheticTaskRequestProtocolRequestContentBodyUrlEncoding) GoString() string {
	return s.String()
}

func (s *CreateSyntheticTaskRequestProtocolRequestContentBodyUrlEncoding) SetKey(v string) *CreateSyntheticTaskRequestProtocolRequestContentBodyUrlEncoding {
	s.Key = &v
	return s
}

func (s *CreateSyntheticTaskRequestProtocolRequestContentBodyUrlEncoding) SetValue(v string) *CreateSyntheticTaskRequestProtocolRequestContentBodyUrlEncoding {
	s.Value = &v
	return s
}

type CreateSyntheticTaskRequestProtocolRequestContentHeader struct {
	// example:
	//
	// regionId
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// example:
	//
	// cn-hangzhou
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s CreateSyntheticTaskRequestProtocolRequestContentHeader) String() string {
	return tea.Prettify(s)
}

func (s CreateSyntheticTaskRequestProtocolRequestContentHeader) GoString() string {
	return s.String()
}

func (s *CreateSyntheticTaskRequestProtocolRequestContentHeader) SetKey(v string) *CreateSyntheticTaskRequestProtocolRequestContentHeader {
	s.Key = &v
	return s
}

func (s *CreateSyntheticTaskRequestProtocolRequestContentHeader) SetValue(v string) *CreateSyntheticTaskRequestProtocolRequestContentHeader {
	s.Value = &v
	return s
}

type CreateSyntheticTaskShrinkRequest struct {
	CommonParamShrink    *string `json:"CommonParam,omitempty" xml:"CommonParam,omitempty"`
	DownloadShrink       *string `json:"Download,omitempty" xml:"Download,omitempty"`
	ExtendIntervalShrink *string `json:"ExtendInterval,omitempty" xml:"ExtendInterval,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 5
	IntervalTime *string `json:"IntervalTime,omitempty" xml:"IntervalTime,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 0
	IntervalType *string `json:"IntervalType,omitempty" xml:"IntervalType,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 0
	IpType *int64 `json:"IpType,omitempty" xml:"IpType,omitempty"`
	// This parameter is required.
	MonitorListShrink *string `json:"MonitorList,omitempty" xml:"MonitorList,omitempty"`
	NavigationShrink  *string `json:"Navigation,omitempty" xml:"Navigation,omitempty"`
	NetShrink         *string `json:"Net,omitempty" xml:"Net,omitempty"`
	ProtocolShrink    *string `json:"Protocol,omitempty" xml:"Protocol,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// This parameter is required.
	TaskName *string `json:"TaskName,omitempty" xml:"TaskName,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 0
	TaskType *int64 `json:"TaskType,omitempty" xml:"TaskType,omitempty"`
	// example:
	//
	// false
	UpdateTask *bool `json:"UpdateTask,omitempty" xml:"UpdateTask,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// https://www.example.com
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s CreateSyntheticTaskShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSyntheticTaskShrinkRequest) GoString() string {
	return s.String()
}

func (s *CreateSyntheticTaskShrinkRequest) SetCommonParamShrink(v string) *CreateSyntheticTaskShrinkRequest {
	s.CommonParamShrink = &v
	return s
}

func (s *CreateSyntheticTaskShrinkRequest) SetDownloadShrink(v string) *CreateSyntheticTaskShrinkRequest {
	s.DownloadShrink = &v
	return s
}

func (s *CreateSyntheticTaskShrinkRequest) SetExtendIntervalShrink(v string) *CreateSyntheticTaskShrinkRequest {
	s.ExtendIntervalShrink = &v
	return s
}

func (s *CreateSyntheticTaskShrinkRequest) SetIntervalTime(v string) *CreateSyntheticTaskShrinkRequest {
	s.IntervalTime = &v
	return s
}

func (s *CreateSyntheticTaskShrinkRequest) SetIntervalType(v string) *CreateSyntheticTaskShrinkRequest {
	s.IntervalType = &v
	return s
}

func (s *CreateSyntheticTaskShrinkRequest) SetIpType(v int64) *CreateSyntheticTaskShrinkRequest {
	s.IpType = &v
	return s
}

func (s *CreateSyntheticTaskShrinkRequest) SetMonitorListShrink(v string) *CreateSyntheticTaskShrinkRequest {
	s.MonitorListShrink = &v
	return s
}

func (s *CreateSyntheticTaskShrinkRequest) SetNavigationShrink(v string) *CreateSyntheticTaskShrinkRequest {
	s.NavigationShrink = &v
	return s
}

func (s *CreateSyntheticTaskShrinkRequest) SetNetShrink(v string) *CreateSyntheticTaskShrinkRequest {
	s.NetShrink = &v
	return s
}

func (s *CreateSyntheticTaskShrinkRequest) SetProtocolShrink(v string) *CreateSyntheticTaskShrinkRequest {
	s.ProtocolShrink = &v
	return s
}

func (s *CreateSyntheticTaskShrinkRequest) SetRegionId(v string) *CreateSyntheticTaskShrinkRequest {
	s.RegionId = &v
	return s
}

func (s *CreateSyntheticTaskShrinkRequest) SetTaskName(v string) *CreateSyntheticTaskShrinkRequest {
	s.TaskName = &v
	return s
}

func (s *CreateSyntheticTaskShrinkRequest) SetTaskType(v int64) *CreateSyntheticTaskShrinkRequest {
	s.TaskType = &v
	return s
}

func (s *CreateSyntheticTaskShrinkRequest) SetUpdateTask(v bool) *CreateSyntheticTaskShrinkRequest {
	s.UpdateTask = &v
	return s
}

func (s *CreateSyntheticTaskShrinkRequest) SetUrl(v string) *CreateSyntheticTaskShrinkRequest {
	s.Url = &v
	return s
}

type CreateSyntheticTaskResponseBody struct {
	// example:
	//
	// 1001
	Code *string                              `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *CreateSyntheticTaskResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// null
	Msg *string `json:"Msg,omitempty" xml:"Msg,omitempty"`
	// example:
	//
	// A5EC8221-08F2-4C95-9AF1-49FD998C****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateSyntheticTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateSyntheticTaskResponseBody) GoString() string {
	return s.String()
}

func (s *CreateSyntheticTaskResponseBody) SetCode(v string) *CreateSyntheticTaskResponseBody {
	s.Code = &v
	return s
}

func (s *CreateSyntheticTaskResponseBody) SetData(v *CreateSyntheticTaskResponseBodyData) *CreateSyntheticTaskResponseBody {
	s.Data = v
	return s
}

func (s *CreateSyntheticTaskResponseBody) SetMsg(v string) *CreateSyntheticTaskResponseBody {
	s.Msg = &v
	return s
}

func (s *CreateSyntheticTaskResponseBody) SetRequestId(v string) *CreateSyntheticTaskResponseBody {
	s.RequestId = &v
	return s
}

type CreateSyntheticTaskResponseBodyData struct {
	// example:
	//
	// 1234
	TaskId *int64 `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s CreateSyntheticTaskResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s CreateSyntheticTaskResponseBodyData) GoString() string {
	return s.String()
}

func (s *CreateSyntheticTaskResponseBodyData) SetTaskId(v int64) *CreateSyntheticTaskResponseBodyData {
	s.TaskId = &v
	return s
}

type CreateSyntheticTaskResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateSyntheticTaskResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateSyntheticTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateSyntheticTaskResponse) GoString() string {
	return s.String()
}

func (s *CreateSyntheticTaskResponse) SetHeaders(v map[string]*string) *CreateSyntheticTaskResponse {
	s.Headers = v
	return s
}

func (s *CreateSyntheticTaskResponse) SetStatusCode(v int32) *CreateSyntheticTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateSyntheticTaskResponse) SetBody(v *CreateSyntheticTaskResponseBody) *CreateSyntheticTaskResponse {
	s.Body = v
	return s
}

type CreateTimingSyntheticTaskRequest struct {
	AvailableAssertions []*CreateTimingSyntheticTaskRequestAvailableAssertions `json:"AvailableAssertions,omitempty" xml:"AvailableAssertions,omitempty" type:"Repeated"`
	CommonSetting       *CreateTimingSyntheticTaskRequestCommonSetting         `json:"CommonSetting,omitempty" xml:"CommonSetting,omitempty" type:"Struct"`
	CustomPeriod        *CreateTimingSyntheticTaskRequestCustomPeriod          `json:"CustomPeriod,omitempty" xml:"CustomPeriod,omitempty" type:"Struct"`
	// This parameter is required.
	//
	// example:
	//
	// 5m
	Frequency *string `json:"Frequency,omitempty" xml:"Frequency,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1
	MonitorCategory *int32 `json:"MonitorCategory,omitempty" xml:"MonitorCategory,omitempty"`
	// This parameter is required.
	MonitorConf *CreateTimingSyntheticTaskRequestMonitorConf `json:"MonitorConf,omitempty" xml:"MonitorConf,omitempty" type:"Struct"`
	// This parameter is required.
	Monitors []*CreateTimingSyntheticTaskRequestMonitors `json:"Monitors,omitempty" xml:"Monitors,omitempty" type:"Repeated"`
	// This parameter is required.
	//
	// example:
	//
	// demo-test
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// example:
	//
	// xxxx
	ResourceGroupId *string                                 `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	Tags            []*CreateTimingSyntheticTaskRequestTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
	// This parameter is required.
	//
	// example:
	//
	// 4
	TaskType *int32 `json:"TaskType,omitempty" xml:"TaskType,omitempty"`
}

func (s CreateTimingSyntheticTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateTimingSyntheticTaskRequest) GoString() string {
	return s.String()
}

func (s *CreateTimingSyntheticTaskRequest) SetAvailableAssertions(v []*CreateTimingSyntheticTaskRequestAvailableAssertions) *CreateTimingSyntheticTaskRequest {
	s.AvailableAssertions = v
	return s
}

func (s *CreateTimingSyntheticTaskRequest) SetCommonSetting(v *CreateTimingSyntheticTaskRequestCommonSetting) *CreateTimingSyntheticTaskRequest {
	s.CommonSetting = v
	return s
}

func (s *CreateTimingSyntheticTaskRequest) SetCustomPeriod(v *CreateTimingSyntheticTaskRequestCustomPeriod) *CreateTimingSyntheticTaskRequest {
	s.CustomPeriod = v
	return s
}

func (s *CreateTimingSyntheticTaskRequest) SetFrequency(v string) *CreateTimingSyntheticTaskRequest {
	s.Frequency = &v
	return s
}

func (s *CreateTimingSyntheticTaskRequest) SetMonitorCategory(v int32) *CreateTimingSyntheticTaskRequest {
	s.MonitorCategory = &v
	return s
}

func (s *CreateTimingSyntheticTaskRequest) SetMonitorConf(v *CreateTimingSyntheticTaskRequestMonitorConf) *CreateTimingSyntheticTaskRequest {
	s.MonitorConf = v
	return s
}

func (s *CreateTimingSyntheticTaskRequest) SetMonitors(v []*CreateTimingSyntheticTaskRequestMonitors) *CreateTimingSyntheticTaskRequest {
	s.Monitors = v
	return s
}

func (s *CreateTimingSyntheticTaskRequest) SetName(v string) *CreateTimingSyntheticTaskRequest {
	s.Name = &v
	return s
}

func (s *CreateTimingSyntheticTaskRequest) SetRegionId(v string) *CreateTimingSyntheticTaskRequest {
	s.RegionId = &v
	return s
}

func (s *CreateTimingSyntheticTaskRequest) SetResourceGroupId(v string) *CreateTimingSyntheticTaskRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *CreateTimingSyntheticTaskRequest) SetTags(v []*CreateTimingSyntheticTaskRequestTags) *CreateTimingSyntheticTaskRequest {
	s.Tags = v
	return s
}

func (s *CreateTimingSyntheticTaskRequest) SetTaskType(v int32) *CreateTimingSyntheticTaskRequest {
	s.TaskType = &v
	return s
}

type CreateTimingSyntheticTaskRequestAvailableAssertions struct {
	// This parameter is required.
	//
	// example:
	//
	// 200
	Expect *string `json:"Expect,omitempty" xml:"Expect,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// eq
	Operator *string `json:"Operator,omitempty" xml:"Operator,omitempty"`
	// example:
	//
	// key
	Target *string `json:"Target,omitempty" xml:"Target,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// DnsARecord
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s CreateTimingSyntheticTaskRequestAvailableAssertions) String() string {
	return tea.Prettify(s)
}

func (s CreateTimingSyntheticTaskRequestAvailableAssertions) GoString() string {
	return s.String()
}

func (s *CreateTimingSyntheticTaskRequestAvailableAssertions) SetExpect(v string) *CreateTimingSyntheticTaskRequestAvailableAssertions {
	s.Expect = &v
	return s
}

func (s *CreateTimingSyntheticTaskRequestAvailableAssertions) SetOperator(v string) *CreateTimingSyntheticTaskRequestAvailableAssertions {
	s.Operator = &v
	return s
}

func (s *CreateTimingSyntheticTaskRequestAvailableAssertions) SetTarget(v string) *CreateTimingSyntheticTaskRequestAvailableAssertions {
	s.Target = &v
	return s
}

func (s *CreateTimingSyntheticTaskRequestAvailableAssertions) SetType(v string) *CreateTimingSyntheticTaskRequestAvailableAssertions {
	s.Type = &v
	return s
}

type CreateTimingSyntheticTaskRequestCommonSetting struct {
	CustomHost              *CreateTimingSyntheticTaskRequestCommonSettingCustomHost              `json:"CustomHost,omitempty" xml:"CustomHost,omitempty" type:"Struct"`
	CustomPrometheusSetting *CreateTimingSyntheticTaskRequestCommonSettingCustomPrometheusSetting `json:"CustomPrometheusSetting,omitempty" xml:"CustomPrometheusSetting,omitempty" type:"Struct"`
	CustomVPCSetting        *CreateTimingSyntheticTaskRequestCommonSettingCustomVPCSetting        `json:"CustomVPCSetting,omitempty" xml:"CustomVPCSetting,omitempty" type:"Struct"`
	// example:
	//
	// 0
	IpType      *int32 `json:"IpType,omitempty" xml:"IpType,omitempty"`
	IsOpenTrace *bool  `json:"IsOpenTrace,omitempty" xml:"IsOpenTrace,omitempty"`
	// example:
	//
	// 0
	MonitorSamples  *int32  `json:"MonitorSamples,omitempty" xml:"MonitorSamples,omitempty"`
	TraceClientType *int32  `json:"TraceClientType,omitempty" xml:"TraceClientType,omitempty"`
	XtraceRegion    *string `json:"XtraceRegion,omitempty" xml:"XtraceRegion,omitempty"`
}

func (s CreateTimingSyntheticTaskRequestCommonSetting) String() string {
	return tea.Prettify(s)
}

func (s CreateTimingSyntheticTaskRequestCommonSetting) GoString() string {
	return s.String()
}

func (s *CreateTimingSyntheticTaskRequestCommonSetting) SetCustomHost(v *CreateTimingSyntheticTaskRequestCommonSettingCustomHost) *CreateTimingSyntheticTaskRequestCommonSetting {
	s.CustomHost = v
	return s
}

func (s *CreateTimingSyntheticTaskRequestCommonSetting) SetCustomPrometheusSetting(v *CreateTimingSyntheticTaskRequestCommonSettingCustomPrometheusSetting) *CreateTimingSyntheticTaskRequestCommonSetting {
	s.CustomPrometheusSetting = v
	return s
}

func (s *CreateTimingSyntheticTaskRequestCommonSetting) SetCustomVPCSetting(v *CreateTimingSyntheticTaskRequestCommonSettingCustomVPCSetting) *CreateTimingSyntheticTaskRequestCommonSetting {
	s.CustomVPCSetting = v
	return s
}

func (s *CreateTimingSyntheticTaskRequestCommonSetting) SetIpType(v int32) *CreateTimingSyntheticTaskRequestCommonSetting {
	s.IpType = &v
	return s
}

func (s *CreateTimingSyntheticTaskRequestCommonSetting) SetIsOpenTrace(v bool) *CreateTimingSyntheticTaskRequestCommonSetting {
	s.IsOpenTrace = &v
	return s
}

func (s *CreateTimingSyntheticTaskRequestCommonSetting) SetMonitorSamples(v int32) *CreateTimingSyntheticTaskRequestCommonSetting {
	s.MonitorSamples = &v
	return s
}

func (s *CreateTimingSyntheticTaskRequestCommonSetting) SetTraceClientType(v int32) *CreateTimingSyntheticTaskRequestCommonSetting {
	s.TraceClientType = &v
	return s
}

func (s *CreateTimingSyntheticTaskRequestCommonSetting) SetXtraceRegion(v string) *CreateTimingSyntheticTaskRequestCommonSetting {
	s.XtraceRegion = &v
	return s
}

type CreateTimingSyntheticTaskRequestCommonSettingCustomHost struct {
	// This parameter is required.
	Hosts []*CreateTimingSyntheticTaskRequestCommonSettingCustomHostHosts `json:"Hosts,omitempty" xml:"Hosts,omitempty" type:"Repeated"`
	// This parameter is required.
	//
	// example:
	//
	// 0
	SelectType *int32 `json:"SelectType,omitempty" xml:"SelectType,omitempty"`
}

func (s CreateTimingSyntheticTaskRequestCommonSettingCustomHost) String() string {
	return tea.Prettify(s)
}

func (s CreateTimingSyntheticTaskRequestCommonSettingCustomHost) GoString() string {
	return s.String()
}

func (s *CreateTimingSyntheticTaskRequestCommonSettingCustomHost) SetHosts(v []*CreateTimingSyntheticTaskRequestCommonSettingCustomHostHosts) *CreateTimingSyntheticTaskRequestCommonSettingCustomHost {
	s.Hosts = v
	return s
}

func (s *CreateTimingSyntheticTaskRequestCommonSettingCustomHost) SetSelectType(v int32) *CreateTimingSyntheticTaskRequestCommonSettingCustomHost {
	s.SelectType = &v
	return s
}

type CreateTimingSyntheticTaskRequestCommonSettingCustomHostHosts struct {
	// This parameter is required.
	//
	// example:
	//
	// www.aliyun.com
	Domain *string `json:"Domain,omitempty" xml:"Domain,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 0
	IpType *int32 `json:"IpType,omitempty" xml:"IpType,omitempty"`
	// This parameter is required.
	Ips []*string `json:"Ips,omitempty" xml:"Ips,omitempty" type:"Repeated"`
}

func (s CreateTimingSyntheticTaskRequestCommonSettingCustomHostHosts) String() string {
	return tea.Prettify(s)
}

func (s CreateTimingSyntheticTaskRequestCommonSettingCustomHostHosts) GoString() string {
	return s.String()
}

func (s *CreateTimingSyntheticTaskRequestCommonSettingCustomHostHosts) SetDomain(v string) *CreateTimingSyntheticTaskRequestCommonSettingCustomHostHosts {
	s.Domain = &v
	return s
}

func (s *CreateTimingSyntheticTaskRequestCommonSettingCustomHostHosts) SetIpType(v int32) *CreateTimingSyntheticTaskRequestCommonSettingCustomHostHosts {
	s.IpType = &v
	return s
}

func (s *CreateTimingSyntheticTaskRequestCommonSettingCustomHostHosts) SetIps(v []*string) *CreateTimingSyntheticTaskRequestCommonSettingCustomHostHosts {
	s.Ips = v
	return s
}

type CreateTimingSyntheticTaskRequestCommonSettingCustomPrometheusSetting struct {
	PrometheusClusterId     *string            `json:"PrometheusClusterId,omitempty" xml:"PrometheusClusterId,omitempty"`
	PrometheusClusterRegion *string            `json:"PrometheusClusterRegion,omitempty" xml:"PrometheusClusterRegion,omitempty"`
	PrometheusLabels        map[string]*string `json:"PrometheusLabels,omitempty" xml:"PrometheusLabels,omitempty"`
}

func (s CreateTimingSyntheticTaskRequestCommonSettingCustomPrometheusSetting) String() string {
	return tea.Prettify(s)
}

func (s CreateTimingSyntheticTaskRequestCommonSettingCustomPrometheusSetting) GoString() string {
	return s.String()
}

func (s *CreateTimingSyntheticTaskRequestCommonSettingCustomPrometheusSetting) SetPrometheusClusterId(v string) *CreateTimingSyntheticTaskRequestCommonSettingCustomPrometheusSetting {
	s.PrometheusClusterId = &v
	return s
}

func (s *CreateTimingSyntheticTaskRequestCommonSettingCustomPrometheusSetting) SetPrometheusClusterRegion(v string) *CreateTimingSyntheticTaskRequestCommonSettingCustomPrometheusSetting {
	s.PrometheusClusterRegion = &v
	return s
}

func (s *CreateTimingSyntheticTaskRequestCommonSettingCustomPrometheusSetting) SetPrometheusLabels(v map[string]*string) *CreateTimingSyntheticTaskRequestCommonSettingCustomPrometheusSetting {
	s.PrometheusLabels = v
	return s
}

type CreateTimingSyntheticTaskRequestCommonSettingCustomVPCSetting struct {
	RegionId      *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	SecureGroupId *string `json:"SecureGroupId,omitempty" xml:"SecureGroupId,omitempty"`
	VSwitchId     *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	VpcId         *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
}

func (s CreateTimingSyntheticTaskRequestCommonSettingCustomVPCSetting) String() string {
	return tea.Prettify(s)
}

func (s CreateTimingSyntheticTaskRequestCommonSettingCustomVPCSetting) GoString() string {
	return s.String()
}

func (s *CreateTimingSyntheticTaskRequestCommonSettingCustomVPCSetting) SetRegionId(v string) *CreateTimingSyntheticTaskRequestCommonSettingCustomVPCSetting {
	s.RegionId = &v
	return s
}

func (s *CreateTimingSyntheticTaskRequestCommonSettingCustomVPCSetting) SetSecureGroupId(v string) *CreateTimingSyntheticTaskRequestCommonSettingCustomVPCSetting {
	s.SecureGroupId = &v
	return s
}

func (s *CreateTimingSyntheticTaskRequestCommonSettingCustomVPCSetting) SetVSwitchId(v string) *CreateTimingSyntheticTaskRequestCommonSettingCustomVPCSetting {
	s.VSwitchId = &v
	return s
}

func (s *CreateTimingSyntheticTaskRequestCommonSettingCustomVPCSetting) SetVpcId(v string) *CreateTimingSyntheticTaskRequestCommonSettingCustomVPCSetting {
	s.VpcId = &v
	return s
}

type CreateTimingSyntheticTaskRequestCustomPeriod struct {
	// This parameter is required.
	//
	// example:
	//
	// 22
	EndHour *int32 `json:"EndHour,omitempty" xml:"EndHour,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 8
	StartHour *int32 `json:"StartHour,omitempty" xml:"StartHour,omitempty"`
}

func (s CreateTimingSyntheticTaskRequestCustomPeriod) String() string {
	return tea.Prettify(s)
}

func (s CreateTimingSyntheticTaskRequestCustomPeriod) GoString() string {
	return s.String()
}

func (s *CreateTimingSyntheticTaskRequestCustomPeriod) SetEndHour(v int32) *CreateTimingSyntheticTaskRequestCustomPeriod {
	s.EndHour = &v
	return s
}

func (s *CreateTimingSyntheticTaskRequestCustomPeriod) SetStartHour(v int32) *CreateTimingSyntheticTaskRequestCustomPeriod {
	s.StartHour = &v
	return s
}

type CreateTimingSyntheticTaskRequestMonitorConf struct {
	ApiHTTP      *CreateTimingSyntheticTaskRequestMonitorConfApiHTTP      `json:"ApiHTTP,omitempty" xml:"ApiHTTP,omitempty" type:"Struct"`
	FileDownload *CreateTimingSyntheticTaskRequestMonitorConfFileDownload `json:"FileDownload,omitempty" xml:"FileDownload,omitempty" type:"Struct"`
	NetDNS       *CreateTimingSyntheticTaskRequestMonitorConfNetDNS       `json:"NetDNS,omitempty" xml:"NetDNS,omitempty" type:"Struct"`
	NetICMP      *CreateTimingSyntheticTaskRequestMonitorConfNetICMP      `json:"NetICMP,omitempty" xml:"NetICMP,omitempty" type:"Struct"`
	NetTCP       *CreateTimingSyntheticTaskRequestMonitorConfNetTCP       `json:"NetTCP,omitempty" xml:"NetTCP,omitempty" type:"Struct"`
	Stream       *CreateTimingSyntheticTaskRequestMonitorConfStream       `json:"Stream,omitempty" xml:"Stream,omitempty" type:"Struct"`
	Website      *CreateTimingSyntheticTaskRequestMonitorConfWebsite      `json:"Website,omitempty" xml:"Website,omitempty" type:"Struct"`
}

func (s CreateTimingSyntheticTaskRequestMonitorConf) String() string {
	return tea.Prettify(s)
}

func (s CreateTimingSyntheticTaskRequestMonitorConf) GoString() string {
	return s.String()
}

func (s *CreateTimingSyntheticTaskRequestMonitorConf) SetApiHTTP(v *CreateTimingSyntheticTaskRequestMonitorConfApiHTTP) *CreateTimingSyntheticTaskRequestMonitorConf {
	s.ApiHTTP = v
	return s
}

func (s *CreateTimingSyntheticTaskRequestMonitorConf) SetFileDownload(v *CreateTimingSyntheticTaskRequestMonitorConfFileDownload) *CreateTimingSyntheticTaskRequestMonitorConf {
	s.FileDownload = v
	return s
}

func (s *CreateTimingSyntheticTaskRequestMonitorConf) SetNetDNS(v *CreateTimingSyntheticTaskRequestMonitorConfNetDNS) *CreateTimingSyntheticTaskRequestMonitorConf {
	s.NetDNS = v
	return s
}

func (s *CreateTimingSyntheticTaskRequestMonitorConf) SetNetICMP(v *CreateTimingSyntheticTaskRequestMonitorConfNetICMP) *CreateTimingSyntheticTaskRequestMonitorConf {
	s.NetICMP = v
	return s
}

func (s *CreateTimingSyntheticTaskRequestMonitorConf) SetNetTCP(v *CreateTimingSyntheticTaskRequestMonitorConfNetTCP) *CreateTimingSyntheticTaskRequestMonitorConf {
	s.NetTCP = v
	return s
}

func (s *CreateTimingSyntheticTaskRequestMonitorConf) SetStream(v *CreateTimingSyntheticTaskRequestMonitorConfStream) *CreateTimingSyntheticTaskRequestMonitorConf {
	s.Stream = v
	return s
}

func (s *CreateTimingSyntheticTaskRequestMonitorConf) SetWebsite(v *CreateTimingSyntheticTaskRequestMonitorConfWebsite) *CreateTimingSyntheticTaskRequestMonitorConf {
	s.Website = v
	return s
}

type CreateTimingSyntheticTaskRequestMonitorConfApiHTTP struct {
	CheckCert *bool `json:"CheckCert,omitempty" xml:"CheckCert,omitempty"`
	// example:
	//
	// 5000
	ConnectTimeout *int64 `json:"ConnectTimeout,omitempty" xml:"ConnectTimeout,omitempty"`
	// example:
	//
	// GET
	Method               *string                                                        `json:"Method,omitempty" xml:"Method,omitempty"`
	ProtocolAlpnProtocol *int32                                                         `json:"ProtocolAlpnProtocol,omitempty" xml:"ProtocolAlpnProtocol,omitempty"`
	RequestBody          *CreateTimingSyntheticTaskRequestMonitorConfApiHTTPRequestBody `json:"RequestBody,omitempty" xml:"RequestBody,omitempty" type:"Struct"`
	RequestHeaders       map[string]*string                                             `json:"RequestHeaders,omitempty" xml:"RequestHeaders,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// http://www.demo.com/api/list
	TargetUrl *string `json:"TargetUrl,omitempty" xml:"TargetUrl,omitempty"`
	// example:
	//
	// 10000
	Timeout *int64 `json:"Timeout,omitempty" xml:"Timeout,omitempty"`
}

func (s CreateTimingSyntheticTaskRequestMonitorConfApiHTTP) String() string {
	return tea.Prettify(s)
}

func (s CreateTimingSyntheticTaskRequestMonitorConfApiHTTP) GoString() string {
	return s.String()
}

func (s *CreateTimingSyntheticTaskRequestMonitorConfApiHTTP) SetCheckCert(v bool) *CreateTimingSyntheticTaskRequestMonitorConfApiHTTP {
	s.CheckCert = &v
	return s
}

func (s *CreateTimingSyntheticTaskRequestMonitorConfApiHTTP) SetConnectTimeout(v int64) *CreateTimingSyntheticTaskRequestMonitorConfApiHTTP {
	s.ConnectTimeout = &v
	return s
}

func (s *CreateTimingSyntheticTaskRequestMonitorConfApiHTTP) SetMethod(v string) *CreateTimingSyntheticTaskRequestMonitorConfApiHTTP {
	s.Method = &v
	return s
}

func (s *CreateTimingSyntheticTaskRequestMonitorConfApiHTTP) SetProtocolAlpnProtocol(v int32) *CreateTimingSyntheticTaskRequestMonitorConfApiHTTP {
	s.ProtocolAlpnProtocol = &v
	return s
}

func (s *CreateTimingSyntheticTaskRequestMonitorConfApiHTTP) SetRequestBody(v *CreateTimingSyntheticTaskRequestMonitorConfApiHTTPRequestBody) *CreateTimingSyntheticTaskRequestMonitorConfApiHTTP {
	s.RequestBody = v
	return s
}

func (s *CreateTimingSyntheticTaskRequestMonitorConfApiHTTP) SetRequestHeaders(v map[string]*string) *CreateTimingSyntheticTaskRequestMonitorConfApiHTTP {
	s.RequestHeaders = v
	return s
}

func (s *CreateTimingSyntheticTaskRequestMonitorConfApiHTTP) SetTargetUrl(v string) *CreateTimingSyntheticTaskRequestMonitorConfApiHTTP {
	s.TargetUrl = &v
	return s
}

func (s *CreateTimingSyntheticTaskRequestMonitorConfApiHTTP) SetTimeout(v int64) *CreateTimingSyntheticTaskRequestMonitorConfApiHTTP {
	s.Timeout = &v
	return s
}

type CreateTimingSyntheticTaskRequestMonitorConfApiHTTPRequestBody struct {
	// example:
	//
	// {
	//
	//   "key1": "value1",
	//
	//   "key2": "value2"
	//
	// }
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// example:
	//
	// application/json
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s CreateTimingSyntheticTaskRequestMonitorConfApiHTTPRequestBody) String() string {
	return tea.Prettify(s)
}

func (s CreateTimingSyntheticTaskRequestMonitorConfApiHTTPRequestBody) GoString() string {
	return s.String()
}

func (s *CreateTimingSyntheticTaskRequestMonitorConfApiHTTPRequestBody) SetContent(v string) *CreateTimingSyntheticTaskRequestMonitorConfApiHTTPRequestBody {
	s.Content = &v
	return s
}

func (s *CreateTimingSyntheticTaskRequestMonitorConfApiHTTPRequestBody) SetType(v string) *CreateTimingSyntheticTaskRequestMonitorConfApiHTTPRequestBody {
	s.Type = &v
	return s
}

type CreateTimingSyntheticTaskRequestMonitorConfFileDownload struct {
	// example:
	//
	// 5000
	ConnectionTimeout   *int64             `json:"ConnectionTimeout,omitempty" xml:"ConnectionTimeout,omitempty"`
	CustomHeaderContent map[string]*string `json:"CustomHeaderContent,omitempty" xml:"CustomHeaderContent,omitempty"`
	// example:
	//
	// 1
	DownloadKernel *int32 `json:"DownloadKernel,omitempty" xml:"DownloadKernel,omitempty"`
	// example:
	//
	// 1
	IgnoreCertificateAuthError *int32 `json:"IgnoreCertificateAuthError,omitempty" xml:"IgnoreCertificateAuthError,omitempty"`
	// example:
	//
	// 1
	IgnoreCertificateCanceledError *int32 `json:"IgnoreCertificateCanceledError,omitempty" xml:"IgnoreCertificateCanceledError,omitempty"`
	// example:
	//
	// 1
	IgnoreCertificateOutOfDateError *int32 `json:"IgnoreCertificateOutOfDateError,omitempty" xml:"IgnoreCertificateOutOfDateError,omitempty"`
	// example:
	//
	// 1
	IgnoreCertificateStatusError *int32 `json:"IgnoreCertificateStatusError,omitempty" xml:"IgnoreCertificateStatusError,omitempty"`
	// example:
	//
	// 1
	IgnoreCertificateUntrustworthyError *int32 `json:"IgnoreCertificateUntrustworthyError,omitempty" xml:"IgnoreCertificateUntrustworthyError,omitempty"`
	// example:
	//
	// 1
	IgnoreCertificateUsingError *int32 `json:"IgnoreCertificateUsingError,omitempty" xml:"IgnoreCertificateUsingError,omitempty"`
	// example:
	//
	// 1
	IgnoreInvalidHostError *int32 `json:"IgnoreInvalidHostError,omitempty" xml:"IgnoreInvalidHostError,omitempty"`
	// example:
	//
	// 60000
	MonitorTimeout *int64 `json:"MonitorTimeout,omitempty" xml:"MonitorTimeout,omitempty"`
	// example:
	//
	// 1
	QuickProtocol *int32 `json:"QuickProtocol,omitempty" xml:"QuickProtocol,omitempty"`
	// example:
	//
	// 1
	Redirection *int32 `json:"Redirection,omitempty" xml:"Redirection,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// https://img.alicdn.com/tfs/TB13DzOjXP7gK0jSZFjXXc5aXXa-212-48.png
	TargetUrl *string `json:"TargetUrl,omitempty" xml:"TargetUrl,omitempty"`
	// example:
	//
	// 2048
	TransmissionSize *int64  `json:"TransmissionSize,omitempty" xml:"TransmissionSize,omitempty"`
	ValidateKeywords *string `json:"ValidateKeywords,omitempty" xml:"ValidateKeywords,omitempty"`
	VerifyWay        *int32  `json:"VerifyWay,omitempty" xml:"VerifyWay,omitempty"`
	WhiteList        *string `json:"WhiteList,omitempty" xml:"WhiteList,omitempty"`
}

func (s CreateTimingSyntheticTaskRequestMonitorConfFileDownload) String() string {
	return tea.Prettify(s)
}

func (s CreateTimingSyntheticTaskRequestMonitorConfFileDownload) GoString() string {
	return s.String()
}

func (s *CreateTimingSyntheticTaskRequestMonitorConfFileDownload) SetConnectionTimeout(v int64) *CreateTimingSyntheticTaskRequestMonitorConfFileDownload {
	s.ConnectionTimeout = &v
	return s
}

func (s *CreateTimingSyntheticTaskRequestMonitorConfFileDownload) SetCustomHeaderContent(v map[string]*string) *CreateTimingSyntheticTaskRequestMonitorConfFileDownload {
	s.CustomHeaderContent = v
	return s
}

func (s *CreateTimingSyntheticTaskRequestMonitorConfFileDownload) SetDownloadKernel(v int32) *CreateTimingSyntheticTaskRequestMonitorConfFileDownload {
	s.DownloadKernel = &v
	return s
}

func (s *CreateTimingSyntheticTaskRequestMonitorConfFileDownload) SetIgnoreCertificateAuthError(v int32) *CreateTimingSyntheticTaskRequestMonitorConfFileDownload {
	s.IgnoreCertificateAuthError = &v
	return s
}

func (s *CreateTimingSyntheticTaskRequestMonitorConfFileDownload) SetIgnoreCertificateCanceledError(v int32) *CreateTimingSyntheticTaskRequestMonitorConfFileDownload {
	s.IgnoreCertificateCanceledError = &v
	return s
}

func (s *CreateTimingSyntheticTaskRequestMonitorConfFileDownload) SetIgnoreCertificateOutOfDateError(v int32) *CreateTimingSyntheticTaskRequestMonitorConfFileDownload {
	s.IgnoreCertificateOutOfDateError = &v
	return s
}

func (s *CreateTimingSyntheticTaskRequestMonitorConfFileDownload) SetIgnoreCertificateStatusError(v int32) *CreateTimingSyntheticTaskRequestMonitorConfFileDownload {
	s.IgnoreCertificateStatusError = &v
	return s
}

func (s *CreateTimingSyntheticTaskRequestMonitorConfFileDownload) SetIgnoreCertificateUntrustworthyError(v int32) *CreateTimingSyntheticTaskRequestMonitorConfFileDownload {
	s.IgnoreCertificateUntrustworthyError = &v
	return s
}

func (s *CreateTimingSyntheticTaskRequestMonitorConfFileDownload) SetIgnoreCertificateUsingError(v int32) *CreateTimingSyntheticTaskRequestMonitorConfFileDownload {
	s.IgnoreCertificateUsingError = &v
	return s
}

func (s *CreateTimingSyntheticTaskRequestMonitorConfFileDownload) SetIgnoreInvalidHostError(v int32) *CreateTimingSyntheticTaskRequestMonitorConfFileDownload {
	s.IgnoreInvalidHostError = &v
	return s
}

func (s *CreateTimingSyntheticTaskRequestMonitorConfFileDownload) SetMonitorTimeout(v int64) *CreateTimingSyntheticTaskRequestMonitorConfFileDownload {
	s.MonitorTimeout = &v
	return s
}

func (s *CreateTimingSyntheticTaskRequestMonitorConfFileDownload) SetQuickProtocol(v int32) *CreateTimingSyntheticTaskRequestMonitorConfFileDownload {
	s.QuickProtocol = &v
	return s
}

func (s *CreateTimingSyntheticTaskRequestMonitorConfFileDownload) SetRedirection(v int32) *CreateTimingSyntheticTaskRequestMonitorConfFileDownload {
	s.Redirection = &v
	return s
}

func (s *CreateTimingSyntheticTaskRequestMonitorConfFileDownload) SetTargetUrl(v string) *CreateTimingSyntheticTaskRequestMonitorConfFileDownload {
	s.TargetUrl = &v
	return s
}

func (s *CreateTimingSyntheticTaskRequestMonitorConfFileDownload) SetTransmissionSize(v int64) *CreateTimingSyntheticTaskRequestMonitorConfFileDownload {
	s.TransmissionSize = &v
	return s
}

func (s *CreateTimingSyntheticTaskRequestMonitorConfFileDownload) SetValidateKeywords(v string) *CreateTimingSyntheticTaskRequestMonitorConfFileDownload {
	s.ValidateKeywords = &v
	return s
}

func (s *CreateTimingSyntheticTaskRequestMonitorConfFileDownload) SetVerifyWay(v int32) *CreateTimingSyntheticTaskRequestMonitorConfFileDownload {
	s.VerifyWay = &v
	return s
}

func (s *CreateTimingSyntheticTaskRequestMonitorConfFileDownload) SetWhiteList(v string) *CreateTimingSyntheticTaskRequestMonitorConfFileDownload {
	s.WhiteList = &v
	return s
}

type CreateTimingSyntheticTaskRequestMonitorConfNetDNS struct {
	// example:
	//
	// 0
	DnsServerIpType *int32 `json:"DnsServerIpType,omitempty" xml:"DnsServerIpType,omitempty"`
	// example:
	//
	// 114.114.114.114
	NsServer *string `json:"NsServer,omitempty" xml:"NsServer,omitempty"`
	// example:
	//
	// 0
	QueryMethod *int32 `json:"QueryMethod,omitempty" xml:"QueryMethod,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// www.aliyun.com
	TargetUrl *string `json:"TargetUrl,omitempty" xml:"TargetUrl,omitempty"`
	// example:
	//
	// 5000
	Timeout *int64 `json:"Timeout,omitempty" xml:"Timeout,omitempty"`
}

func (s CreateTimingSyntheticTaskRequestMonitorConfNetDNS) String() string {
	return tea.Prettify(s)
}

func (s CreateTimingSyntheticTaskRequestMonitorConfNetDNS) GoString() string {
	return s.String()
}

func (s *CreateTimingSyntheticTaskRequestMonitorConfNetDNS) SetDnsServerIpType(v int32) *CreateTimingSyntheticTaskRequestMonitorConfNetDNS {
	s.DnsServerIpType = &v
	return s
}

func (s *CreateTimingSyntheticTaskRequestMonitorConfNetDNS) SetNsServer(v string) *CreateTimingSyntheticTaskRequestMonitorConfNetDNS {
	s.NsServer = &v
	return s
}

func (s *CreateTimingSyntheticTaskRequestMonitorConfNetDNS) SetQueryMethod(v int32) *CreateTimingSyntheticTaskRequestMonitorConfNetDNS {
	s.QueryMethod = &v
	return s
}

func (s *CreateTimingSyntheticTaskRequestMonitorConfNetDNS) SetTargetUrl(v string) *CreateTimingSyntheticTaskRequestMonitorConfNetDNS {
	s.TargetUrl = &v
	return s
}

func (s *CreateTimingSyntheticTaskRequestMonitorConfNetDNS) SetTimeout(v int64) *CreateTimingSyntheticTaskRequestMonitorConfNetDNS {
	s.Timeout = &v
	return s
}

type CreateTimingSyntheticTaskRequestMonitorConfNetICMP struct {
	// example:
	//
	// 200
	Interval *int64 `json:"Interval,omitempty" xml:"Interval,omitempty"`
	// example:
	//
	// 4
	PackageNum *int32 `json:"PackageNum,omitempty" xml:"PackageNum,omitempty"`
	// example:
	//
	// 32
	PackageSize *int32 `json:"PackageSize,omitempty" xml:"PackageSize,omitempty"`
	// example:
	//
	// true
	SplitPackage *bool `json:"SplitPackage,omitempty" xml:"SplitPackage,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// www.example.com
	TargetUrl *string `json:"TargetUrl,omitempty" xml:"TargetUrl,omitempty"`
	// example:
	//
	// 20000
	Timeout *int64 `json:"Timeout,omitempty" xml:"Timeout,omitempty"`
	// example:
	//
	// true
	TracertEnable *bool `json:"TracertEnable,omitempty" xml:"TracertEnable,omitempty"`
	// example:
	//
	// 20
	TracertNumMax *int32 `json:"TracertNumMax,omitempty" xml:"TracertNumMax,omitempty"`
	// example:
	//
	// 60000
	TracertTimeout *int64 `json:"TracertTimeout,omitempty" xml:"TracertTimeout,omitempty"`
}

func (s CreateTimingSyntheticTaskRequestMonitorConfNetICMP) String() string {
	return tea.Prettify(s)
}

func (s CreateTimingSyntheticTaskRequestMonitorConfNetICMP) GoString() string {
	return s.String()
}

func (s *CreateTimingSyntheticTaskRequestMonitorConfNetICMP) SetInterval(v int64) *CreateTimingSyntheticTaskRequestMonitorConfNetICMP {
	s.Interval = &v
	return s
}

func (s *CreateTimingSyntheticTaskRequestMonitorConfNetICMP) SetPackageNum(v int32) *CreateTimingSyntheticTaskRequestMonitorConfNetICMP {
	s.PackageNum = &v
	return s
}

func (s *CreateTimingSyntheticTaskRequestMonitorConfNetICMP) SetPackageSize(v int32) *CreateTimingSyntheticTaskRequestMonitorConfNetICMP {
	s.PackageSize = &v
	return s
}

func (s *CreateTimingSyntheticTaskRequestMonitorConfNetICMP) SetSplitPackage(v bool) *CreateTimingSyntheticTaskRequestMonitorConfNetICMP {
	s.SplitPackage = &v
	return s
}

func (s *CreateTimingSyntheticTaskRequestMonitorConfNetICMP) SetTargetUrl(v string) *CreateTimingSyntheticTaskRequestMonitorConfNetICMP {
	s.TargetUrl = &v
	return s
}

func (s *CreateTimingSyntheticTaskRequestMonitorConfNetICMP) SetTimeout(v int64) *CreateTimingSyntheticTaskRequestMonitorConfNetICMP {
	s.Timeout = &v
	return s
}

func (s *CreateTimingSyntheticTaskRequestMonitorConfNetICMP) SetTracertEnable(v bool) *CreateTimingSyntheticTaskRequestMonitorConfNetICMP {
	s.TracertEnable = &v
	return s
}

func (s *CreateTimingSyntheticTaskRequestMonitorConfNetICMP) SetTracertNumMax(v int32) *CreateTimingSyntheticTaskRequestMonitorConfNetICMP {
	s.TracertNumMax = &v
	return s
}

func (s *CreateTimingSyntheticTaskRequestMonitorConfNetICMP) SetTracertTimeout(v int64) *CreateTimingSyntheticTaskRequestMonitorConfNetICMP {
	s.TracertTimeout = &v
	return s
}

type CreateTimingSyntheticTaskRequestMonitorConfNetTCP struct {
	// example:
	//
	// 4
	ConnectTimes *int32 `json:"ConnectTimes,omitempty" xml:"ConnectTimes,omitempty"`
	// example:
	//
	// 200
	Interval *int64 `json:"Interval,omitempty" xml:"Interval,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// www.example.com
	TargetUrl *string `json:"TargetUrl,omitempty" xml:"TargetUrl,omitempty"`
	// example:
	//
	// 20000
	Timeout *int64 `json:"Timeout,omitempty" xml:"Timeout,omitempty"`
	// example:
	//
	// true
	TracertEnable *bool `json:"TracertEnable,omitempty" xml:"TracertEnable,omitempty"`
	// example:
	//
	// 20
	TracertNumMax *int32 `json:"TracertNumMax,omitempty" xml:"TracertNumMax,omitempty"`
	// example:
	//
	// 60000
	TracertTimeout *int64 `json:"TracertTimeout,omitempty" xml:"TracertTimeout,omitempty"`
}

func (s CreateTimingSyntheticTaskRequestMonitorConfNetTCP) String() string {
	return tea.Prettify(s)
}

func (s CreateTimingSyntheticTaskRequestMonitorConfNetTCP) GoString() string {
	return s.String()
}

func (s *CreateTimingSyntheticTaskRequestMonitorConfNetTCP) SetConnectTimes(v int32) *CreateTimingSyntheticTaskRequestMonitorConfNetTCP {
	s.ConnectTimes = &v
	return s
}

func (s *CreateTimingSyntheticTaskRequestMonitorConfNetTCP) SetInterval(v int64) *CreateTimingSyntheticTaskRequestMonitorConfNetTCP {
	s.Interval = &v
	return s
}

func (s *CreateTimingSyntheticTaskRequestMonitorConfNetTCP) SetTargetUrl(v string) *CreateTimingSyntheticTaskRequestMonitorConfNetTCP {
	s.TargetUrl = &v
	return s
}

func (s *CreateTimingSyntheticTaskRequestMonitorConfNetTCP) SetTimeout(v int64) *CreateTimingSyntheticTaskRequestMonitorConfNetTCP {
	s.Timeout = &v
	return s
}

func (s *CreateTimingSyntheticTaskRequestMonitorConfNetTCP) SetTracertEnable(v bool) *CreateTimingSyntheticTaskRequestMonitorConfNetTCP {
	s.TracertEnable = &v
	return s
}

func (s *CreateTimingSyntheticTaskRequestMonitorConfNetTCP) SetTracertNumMax(v int32) *CreateTimingSyntheticTaskRequestMonitorConfNetTCP {
	s.TracertNumMax = &v
	return s
}

func (s *CreateTimingSyntheticTaskRequestMonitorConfNetTCP) SetTracertTimeout(v int64) *CreateTimingSyntheticTaskRequestMonitorConfNetTCP {
	s.TracertTimeout = &v
	return s
}

type CreateTimingSyntheticTaskRequestMonitorConfStream struct {
	CustomHeaderContent  map[string]*string `json:"CustomHeaderContent,omitempty" xml:"CustomHeaderContent,omitempty"`
	PlayerType           *int32             `json:"PlayerType,omitempty" xml:"PlayerType,omitempty"`
	StreamAddressType    *int32             `json:"StreamAddressType,omitempty" xml:"StreamAddressType,omitempty"`
	StreamMonitorTimeout *int32             `json:"StreamMonitorTimeout,omitempty" xml:"StreamMonitorTimeout,omitempty"`
	StreamType           *int32             `json:"StreamType,omitempty" xml:"StreamType,omitempty"`
	TargetUrl            *string            `json:"TargetUrl,omitempty" xml:"TargetUrl,omitempty"`
	WhiteList            *string            `json:"WhiteList,omitempty" xml:"WhiteList,omitempty"`
}

func (s CreateTimingSyntheticTaskRequestMonitorConfStream) String() string {
	return tea.Prettify(s)
}

func (s CreateTimingSyntheticTaskRequestMonitorConfStream) GoString() string {
	return s.String()
}

func (s *CreateTimingSyntheticTaskRequestMonitorConfStream) SetCustomHeaderContent(v map[string]*string) *CreateTimingSyntheticTaskRequestMonitorConfStream {
	s.CustomHeaderContent = v
	return s
}

func (s *CreateTimingSyntheticTaskRequestMonitorConfStream) SetPlayerType(v int32) *CreateTimingSyntheticTaskRequestMonitorConfStream {
	s.PlayerType = &v
	return s
}

func (s *CreateTimingSyntheticTaskRequestMonitorConfStream) SetStreamAddressType(v int32) *CreateTimingSyntheticTaskRequestMonitorConfStream {
	s.StreamAddressType = &v
	return s
}

func (s *CreateTimingSyntheticTaskRequestMonitorConfStream) SetStreamMonitorTimeout(v int32) *CreateTimingSyntheticTaskRequestMonitorConfStream {
	s.StreamMonitorTimeout = &v
	return s
}

func (s *CreateTimingSyntheticTaskRequestMonitorConfStream) SetStreamType(v int32) *CreateTimingSyntheticTaskRequestMonitorConfStream {
	s.StreamType = &v
	return s
}

func (s *CreateTimingSyntheticTaskRequestMonitorConfStream) SetTargetUrl(v string) *CreateTimingSyntheticTaskRequestMonitorConfStream {
	s.TargetUrl = &v
	return s
}

func (s *CreateTimingSyntheticTaskRequestMonitorConfStream) SetWhiteList(v string) *CreateTimingSyntheticTaskRequestMonitorConfStream {
	s.WhiteList = &v
	return s
}

type CreateTimingSyntheticTaskRequestMonitorConfWebsite struct {
	// example:
	//
	// 0
	AutomaticScrolling *int32 `json:"AutomaticScrolling,omitempty" xml:"AutomaticScrolling,omitempty"`
	// example:
	//
	// 0
	CustomHeader        *int32             `json:"CustomHeader,omitempty" xml:"CustomHeader,omitempty"`
	CustomHeaderContent map[string]*string `json:"CustomHeaderContent,omitempty" xml:"CustomHeaderContent,omitempty"`
	DNSHijackWhitelist  *string            `json:"DNSHijackWhitelist,omitempty" xml:"DNSHijackWhitelist,omitempty"`
	// example:
	//
	// 1
	DisableCache *int32 `json:"DisableCache,omitempty" xml:"DisableCache,omitempty"`
	// example:
	//
	// 0
	DisableCompression *int32  `json:"DisableCompression,omitempty" xml:"DisableCompression,omitempty"`
	ElementBlacklist   *string `json:"ElementBlacklist,omitempty" xml:"ElementBlacklist,omitempty"`
	// example:
	//
	// 0
	FilterInvalidIP     *int32  `json:"FilterInvalidIP,omitempty" xml:"FilterInvalidIP,omitempty"`
	FlowHijackJumpTimes *int32  `json:"FlowHijackJumpTimes,omitempty" xml:"FlowHijackJumpTimes,omitempty"`
	FlowHijackLogo      *string `json:"FlowHijackLogo,omitempty" xml:"FlowHijackLogo,omitempty"`
	// example:
	//
	// 1
	IgnoreCertificateError *int32 `json:"IgnoreCertificateError,omitempty" xml:"IgnoreCertificateError,omitempty"`
	// example:
	//
	// 20000
	MonitorTimeout *int64  `json:"MonitorTimeout,omitempty" xml:"MonitorTimeout,omitempty"`
	PageTamper     *string `json:"PageTamper,omitempty" xml:"PageTamper,omitempty"`
	// example:
	//
	// 1
	Redirection *int32 `json:"Redirection,omitempty" xml:"Redirection,omitempty"`
	// example:
	//
	// 5000
	SlowElementThreshold *int64 `json:"SlowElementThreshold,omitempty" xml:"SlowElementThreshold,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// https://www.aliyun.com
	TargetUrl             *string `json:"TargetUrl,omitempty" xml:"TargetUrl,omitempty"`
	VerifyStringBlacklist *string `json:"VerifyStringBlacklist,omitempty" xml:"VerifyStringBlacklist,omitempty"`
	VerifyStringWhitelist *string `json:"VerifyStringWhitelist,omitempty" xml:"VerifyStringWhitelist,omitempty"`
	// example:
	//
	// 5000
	WaitCompletionTime *int64 `json:"WaitCompletionTime,omitempty" xml:"WaitCompletionTime,omitempty"`
}

func (s CreateTimingSyntheticTaskRequestMonitorConfWebsite) String() string {
	return tea.Prettify(s)
}

func (s CreateTimingSyntheticTaskRequestMonitorConfWebsite) GoString() string {
	return s.String()
}

func (s *CreateTimingSyntheticTaskRequestMonitorConfWebsite) SetAutomaticScrolling(v int32) *CreateTimingSyntheticTaskRequestMonitorConfWebsite {
	s.AutomaticScrolling = &v
	return s
}

func (s *CreateTimingSyntheticTaskRequestMonitorConfWebsite) SetCustomHeader(v int32) *CreateTimingSyntheticTaskRequestMonitorConfWebsite {
	s.CustomHeader = &v
	return s
}

func (s *CreateTimingSyntheticTaskRequestMonitorConfWebsite) SetCustomHeaderContent(v map[string]*string) *CreateTimingSyntheticTaskRequestMonitorConfWebsite {
	s.CustomHeaderContent = v
	return s
}

func (s *CreateTimingSyntheticTaskRequestMonitorConfWebsite) SetDNSHijackWhitelist(v string) *CreateTimingSyntheticTaskRequestMonitorConfWebsite {
	s.DNSHijackWhitelist = &v
	return s
}

func (s *CreateTimingSyntheticTaskRequestMonitorConfWebsite) SetDisableCache(v int32) *CreateTimingSyntheticTaskRequestMonitorConfWebsite {
	s.DisableCache = &v
	return s
}

func (s *CreateTimingSyntheticTaskRequestMonitorConfWebsite) SetDisableCompression(v int32) *CreateTimingSyntheticTaskRequestMonitorConfWebsite {
	s.DisableCompression = &v
	return s
}

func (s *CreateTimingSyntheticTaskRequestMonitorConfWebsite) SetElementBlacklist(v string) *CreateTimingSyntheticTaskRequestMonitorConfWebsite {
	s.ElementBlacklist = &v
	return s
}

func (s *CreateTimingSyntheticTaskRequestMonitorConfWebsite) SetFilterInvalidIP(v int32) *CreateTimingSyntheticTaskRequestMonitorConfWebsite {
	s.FilterInvalidIP = &v
	return s
}

func (s *CreateTimingSyntheticTaskRequestMonitorConfWebsite) SetFlowHijackJumpTimes(v int32) *CreateTimingSyntheticTaskRequestMonitorConfWebsite {
	s.FlowHijackJumpTimes = &v
	return s
}

func (s *CreateTimingSyntheticTaskRequestMonitorConfWebsite) SetFlowHijackLogo(v string) *CreateTimingSyntheticTaskRequestMonitorConfWebsite {
	s.FlowHijackLogo = &v
	return s
}

func (s *CreateTimingSyntheticTaskRequestMonitorConfWebsite) SetIgnoreCertificateError(v int32) *CreateTimingSyntheticTaskRequestMonitorConfWebsite {
	s.IgnoreCertificateError = &v
	return s
}

func (s *CreateTimingSyntheticTaskRequestMonitorConfWebsite) SetMonitorTimeout(v int64) *CreateTimingSyntheticTaskRequestMonitorConfWebsite {
	s.MonitorTimeout = &v
	return s
}

func (s *CreateTimingSyntheticTaskRequestMonitorConfWebsite) SetPageTamper(v string) *CreateTimingSyntheticTaskRequestMonitorConfWebsite {
	s.PageTamper = &v
	return s
}

func (s *CreateTimingSyntheticTaskRequestMonitorConfWebsite) SetRedirection(v int32) *CreateTimingSyntheticTaskRequestMonitorConfWebsite {
	s.Redirection = &v
	return s
}

func (s *CreateTimingSyntheticTaskRequestMonitorConfWebsite) SetSlowElementThreshold(v int64) *CreateTimingSyntheticTaskRequestMonitorConfWebsite {
	s.SlowElementThreshold = &v
	return s
}

func (s *CreateTimingSyntheticTaskRequestMonitorConfWebsite) SetTargetUrl(v string) *CreateTimingSyntheticTaskRequestMonitorConfWebsite {
	s.TargetUrl = &v
	return s
}

func (s *CreateTimingSyntheticTaskRequestMonitorConfWebsite) SetVerifyStringBlacklist(v string) *CreateTimingSyntheticTaskRequestMonitorConfWebsite {
	s.VerifyStringBlacklist = &v
	return s
}

func (s *CreateTimingSyntheticTaskRequestMonitorConfWebsite) SetVerifyStringWhitelist(v string) *CreateTimingSyntheticTaskRequestMonitorConfWebsite {
	s.VerifyStringWhitelist = &v
	return s
}

func (s *CreateTimingSyntheticTaskRequestMonitorConfWebsite) SetWaitCompletionTime(v int64) *CreateTimingSyntheticTaskRequestMonitorConfWebsite {
	s.WaitCompletionTime = &v
	return s
}

type CreateTimingSyntheticTaskRequestMonitors struct {
	// This parameter is required.
	//
	// example:
	//
	// 100023
	CityCode *string `json:"CityCode,omitempty" xml:"CityCode,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1
	ClientType *int32 `json:"ClientType,omitempty" xml:"ClientType,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1
	OperatorCode *string `json:"OperatorCode,omitempty" xml:"OperatorCode,omitempty"`
}

func (s CreateTimingSyntheticTaskRequestMonitors) String() string {
	return tea.Prettify(s)
}

func (s CreateTimingSyntheticTaskRequestMonitors) GoString() string {
	return s.String()
}

func (s *CreateTimingSyntheticTaskRequestMonitors) SetCityCode(v string) *CreateTimingSyntheticTaskRequestMonitors {
	s.CityCode = &v
	return s
}

func (s *CreateTimingSyntheticTaskRequestMonitors) SetClientType(v int32) *CreateTimingSyntheticTaskRequestMonitors {
	s.ClientType = &v
	return s
}

func (s *CreateTimingSyntheticTaskRequestMonitors) SetOperatorCode(v string) *CreateTimingSyntheticTaskRequestMonitors {
	s.OperatorCode = &v
	return s
}

type CreateTimingSyntheticTaskRequestTags struct {
	// example:
	//
	// Key
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// example:
	//
	// 500
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s CreateTimingSyntheticTaskRequestTags) String() string {
	return tea.Prettify(s)
}

func (s CreateTimingSyntheticTaskRequestTags) GoString() string {
	return s.String()
}

func (s *CreateTimingSyntheticTaskRequestTags) SetKey(v string) *CreateTimingSyntheticTaskRequestTags {
	s.Key = &v
	return s
}

func (s *CreateTimingSyntheticTaskRequestTags) SetValue(v string) *CreateTimingSyntheticTaskRequestTags {
	s.Value = &v
	return s
}

type CreateTimingSyntheticTaskShrinkRequest struct {
	AvailableAssertionsShrink *string `json:"AvailableAssertions,omitempty" xml:"AvailableAssertions,omitempty"`
	CommonSettingShrink       *string `json:"CommonSetting,omitempty" xml:"CommonSetting,omitempty"`
	CustomPeriodShrink        *string `json:"CustomPeriod,omitempty" xml:"CustomPeriod,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 5m
	Frequency *string `json:"Frequency,omitempty" xml:"Frequency,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1
	MonitorCategory *int32 `json:"MonitorCategory,omitempty" xml:"MonitorCategory,omitempty"`
	// This parameter is required.
	MonitorConfShrink *string `json:"MonitorConf,omitempty" xml:"MonitorConf,omitempty"`
	// This parameter is required.
	MonitorsShrink *string `json:"Monitors,omitempty" xml:"Monitors,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// demo-test
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// example:
	//
	// xxxx
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	TagsShrink      *string `json:"Tags,omitempty" xml:"Tags,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 4
	TaskType *int32 `json:"TaskType,omitempty" xml:"TaskType,omitempty"`
}

func (s CreateTimingSyntheticTaskShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateTimingSyntheticTaskShrinkRequest) GoString() string {
	return s.String()
}

func (s *CreateTimingSyntheticTaskShrinkRequest) SetAvailableAssertionsShrink(v string) *CreateTimingSyntheticTaskShrinkRequest {
	s.AvailableAssertionsShrink = &v
	return s
}

func (s *CreateTimingSyntheticTaskShrinkRequest) SetCommonSettingShrink(v string) *CreateTimingSyntheticTaskShrinkRequest {
	s.CommonSettingShrink = &v
	return s
}

func (s *CreateTimingSyntheticTaskShrinkRequest) SetCustomPeriodShrink(v string) *CreateTimingSyntheticTaskShrinkRequest {
	s.CustomPeriodShrink = &v
	return s
}

func (s *CreateTimingSyntheticTaskShrinkRequest) SetFrequency(v string) *CreateTimingSyntheticTaskShrinkRequest {
	s.Frequency = &v
	return s
}

func (s *CreateTimingSyntheticTaskShrinkRequest) SetMonitorCategory(v int32) *CreateTimingSyntheticTaskShrinkRequest {
	s.MonitorCategory = &v
	return s
}

func (s *CreateTimingSyntheticTaskShrinkRequest) SetMonitorConfShrink(v string) *CreateTimingSyntheticTaskShrinkRequest {
	s.MonitorConfShrink = &v
	return s
}

func (s *CreateTimingSyntheticTaskShrinkRequest) SetMonitorsShrink(v string) *CreateTimingSyntheticTaskShrinkRequest {
	s.MonitorsShrink = &v
	return s
}

func (s *CreateTimingSyntheticTaskShrinkRequest) SetName(v string) *CreateTimingSyntheticTaskShrinkRequest {
	s.Name = &v
	return s
}

func (s *CreateTimingSyntheticTaskShrinkRequest) SetRegionId(v string) *CreateTimingSyntheticTaskShrinkRequest {
	s.RegionId = &v
	return s
}

func (s *CreateTimingSyntheticTaskShrinkRequest) SetResourceGroupId(v string) *CreateTimingSyntheticTaskShrinkRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *CreateTimingSyntheticTaskShrinkRequest) SetTagsShrink(v string) *CreateTimingSyntheticTaskShrinkRequest {
	s.TagsShrink = &v
	return s
}

func (s *CreateTimingSyntheticTaskShrinkRequest) SetTaskType(v int32) *CreateTimingSyntheticTaskShrinkRequest {
	s.TaskType = &v
	return s
}

type CreateTimingSyntheticTaskResponseBody struct {
	// example:
	//
	// 200
	Code *int64                                     `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *CreateTimingSyntheticTaskResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	//
	// example:
	//
	// 53B5874D-EBC1-5567-B787-E4B7267F5CEB
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateTimingSyntheticTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateTimingSyntheticTaskResponseBody) GoString() string {
	return s.String()
}

func (s *CreateTimingSyntheticTaskResponseBody) SetCode(v int64) *CreateTimingSyntheticTaskResponseBody {
	s.Code = &v
	return s
}

func (s *CreateTimingSyntheticTaskResponseBody) SetData(v *CreateTimingSyntheticTaskResponseBodyData) *CreateTimingSyntheticTaskResponseBody {
	s.Data = v
	return s
}

func (s *CreateTimingSyntheticTaskResponseBody) SetMessage(v string) *CreateTimingSyntheticTaskResponseBody {
	s.Message = &v
	return s
}

func (s *CreateTimingSyntheticTaskResponseBody) SetRequestId(v string) *CreateTimingSyntheticTaskResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateTimingSyntheticTaskResponseBody) SetSuccess(v bool) *CreateTimingSyntheticTaskResponseBody {
	s.Success = &v
	return s
}

type CreateTimingSyntheticTaskResponseBodyData struct {
	// example:
	//
	// RUNNING
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// example:
	//
	// 5308a2691f59422c8c3b7aeccec9cd3b
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s CreateTimingSyntheticTaskResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s CreateTimingSyntheticTaskResponseBodyData) GoString() string {
	return s.String()
}

func (s *CreateTimingSyntheticTaskResponseBodyData) SetStatus(v string) *CreateTimingSyntheticTaskResponseBodyData {
	s.Status = &v
	return s
}

func (s *CreateTimingSyntheticTaskResponseBodyData) SetTaskId(v string) *CreateTimingSyntheticTaskResponseBodyData {
	s.TaskId = &v
	return s
}

type CreateTimingSyntheticTaskResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateTimingSyntheticTaskResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateTimingSyntheticTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateTimingSyntheticTaskResponse) GoString() string {
	return s.String()
}

func (s *CreateTimingSyntheticTaskResponse) SetHeaders(v map[string]*string) *CreateTimingSyntheticTaskResponse {
	s.Headers = v
	return s
}

func (s *CreateTimingSyntheticTaskResponse) SetStatusCode(v int32) *CreateTimingSyntheticTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateTimingSyntheticTaskResponse) SetBody(v *CreateTimingSyntheticTaskResponseBody) *CreateTimingSyntheticTaskResponse {
	s.Body = v
	return s
}

type CreateWebhookRequest struct {
	// The notification template that is sent when an alert is triggered. This parameter is required if the **Method*	- parameter is set to **Post**. You can use the $content placeholder to specify the notification content. The content cannot exceed 500 characters in length.
	//
	// This parameter is required.
	//
	// example:
	//
	// { "Alert Name": "{{ .commonLabels.alertname }}{{if .commonLabels.clustername }}", "Cluster Name": "{{ .commonLabels.clustername }} {{ end }}{{if eq " app" .commonLabels._aliyun_arms_involvedObject_kind }}", "Application Name": "{{ .commonLabels._aliyun_arms_involvedObject_name }} {{ end }}", "Notification Policy": "{{ .dispatchRuleName }}", "Alarm Time": "{{ .startTime }}", "Alert Content": "{{ for .alerts }} {{ .annotations.message }} {{ end }}" }
	Body *string `json:"Body,omitempty" xml:"Body,omitempty"`
	// The name of the contact.
	//
	// This parameter is required.
	//
	// example:
	//
	// WebhookAlert
	ContactName *string `json:"ContactName,omitempty" xml:"ContactName,omitempty"`
	// The HTTP request header.
	//
	// example:
	//
	// [{"Content-Type":"application/json"}]
	HttpHeaders *string `json:"HttpHeaders,omitempty" xml:"HttpHeaders,omitempty"`
	// The parameters in the HTTP request.
	//
	// example:
	//
	// [{"name":"mike"}]
	HttpParams *string `json:"HttpParams,omitempty" xml:"HttpParams,omitempty"`
	// The HTTP request method.
	//
	// 	- `Get`
	//
	// 	- `Post`
	//
	// This parameter is required.
	//
	// example:
	//
	// Post
	Method *string `json:"Method,omitempty" xml:"Method,omitempty"`
	// The notification template that is sent when an alert is resolved. This parameter is required if the **Method*	- parameter is set to **Post**. You can use the $content placeholder to specify the notification content. The content cannot exceed 500 characters in length.
	//
	// example:
	//
	// { "Alert Name": "{{ .commonLabels.alertname }}{{if .commonLabels.clustername }}", "Cluster Name": "{{ .commonLabels.clustername }} {{ end }}{{if eq " app" .commonLabels._aliyun_arms_involvedObject_kind }}", "Application Name": "{{ .commonLabels._aliyun_arms_involvedObject_name }} {{ end }}", "Notification Policy": "{{ .dispatchRuleName }}", "Alarm Time": "{{ .startTime }}", "Alert Content": "{{ for .alerts }} {{ .annotations.message }} {{ end }}" }
	RecoverBody *string `json:"RecoverBody,omitempty" xml:"RecoverBody,omitempty"`
	// The region ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The URL of the request **method**.
	//
	// This parameter is required.
	//
	// example:
	//
	// https://oapi.dingtalk.com/robot/send?access_token=e1a049121ddbfce1ca963d115ef88cc7219583c4fb79fe6e398fbfb688******
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s CreateWebhookRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateWebhookRequest) GoString() string {
	return s.String()
}

func (s *CreateWebhookRequest) SetBody(v string) *CreateWebhookRequest {
	s.Body = &v
	return s
}

func (s *CreateWebhookRequest) SetContactName(v string) *CreateWebhookRequest {
	s.ContactName = &v
	return s
}

func (s *CreateWebhookRequest) SetHttpHeaders(v string) *CreateWebhookRequest {
	s.HttpHeaders = &v
	return s
}

func (s *CreateWebhookRequest) SetHttpParams(v string) *CreateWebhookRequest {
	s.HttpParams = &v
	return s
}

func (s *CreateWebhookRequest) SetMethod(v string) *CreateWebhookRequest {
	s.Method = &v
	return s
}

func (s *CreateWebhookRequest) SetRecoverBody(v string) *CreateWebhookRequest {
	s.RecoverBody = &v
	return s
}

func (s *CreateWebhookRequest) SetRegionId(v string) *CreateWebhookRequest {
	s.RegionId = &v
	return s
}

func (s *CreateWebhookRequest) SetUrl(v string) *CreateWebhookRequest {
	s.Url = &v
	return s
}

type CreateWebhookResponseBody struct {
	// The ID of the contact for webhook alerts.
	//
	// example:
	//
	// 48716
	ContactId *string `json:"ContactId,omitempty" xml:"ContactId,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 16AF921B-8187-489F-9913-43C808B4****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateWebhookResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateWebhookResponseBody) GoString() string {
	return s.String()
}

func (s *CreateWebhookResponseBody) SetContactId(v string) *CreateWebhookResponseBody {
	s.ContactId = &v
	return s
}

func (s *CreateWebhookResponseBody) SetRequestId(v string) *CreateWebhookResponseBody {
	s.RequestId = &v
	return s
}

type CreateWebhookResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateWebhookResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateWebhookResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateWebhookResponse) GoString() string {
	return s.String()
}

func (s *CreateWebhookResponse) SetHeaders(v map[string]*string) *CreateWebhookResponse {
	s.Headers = v
	return s
}

func (s *CreateWebhookResponse) SetStatusCode(v int32) *CreateWebhookResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateWebhookResponse) SetBody(v *CreateWebhookResponseBody) *CreateWebhookResponse {
	s.Body = v
	return s
}

type DelAuthTokenRequest struct {
	// The cluster ID.
	//
	// example:
	//
	// cc7a37ee31aea4ed1a059eff8034b****
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	// The region ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DelAuthTokenRequest) String() string {
	return tea.Prettify(s)
}

func (s DelAuthTokenRequest) GoString() string {
	return s.String()
}

func (s *DelAuthTokenRequest) SetClusterId(v string) *DelAuthTokenRequest {
	s.ClusterId = &v
	return s
}

func (s *DelAuthTokenRequest) SetRegionId(v string) *DelAuthTokenRequest {
	s.RegionId = &v
	return s
}

type DelAuthTokenResponseBody struct {
	// Indicates whether the call was successful.
	//
	// example:
	//
	// success
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// The request ID.
	//
	// example:
	//
	// A5EC8221-08F2-4C95-9AF1-49FD998C647A
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DelAuthTokenResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DelAuthTokenResponseBody) GoString() string {
	return s.String()
}

func (s *DelAuthTokenResponseBody) SetData(v string) *DelAuthTokenResponseBody {
	s.Data = &v
	return s
}

func (s *DelAuthTokenResponseBody) SetRequestId(v string) *DelAuthTokenResponseBody {
	s.RequestId = &v
	return s
}

type DelAuthTokenResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DelAuthTokenResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DelAuthTokenResponse) String() string {
	return tea.Prettify(s)
}

func (s DelAuthTokenResponse) GoString() string {
	return s.String()
}

func (s *DelAuthTokenResponse) SetHeaders(v map[string]*string) *DelAuthTokenResponse {
	s.Headers = v
	return s
}

func (s *DelAuthTokenResponse) SetStatusCode(v int32) *DelAuthTokenResponse {
	s.StatusCode = &v
	return s
}

func (s *DelAuthTokenResponse) SetBody(v *DelAuthTokenResponseBody) *DelAuthTokenResponse {
	s.Body = v
	return s
}

type DeleteAddonReleaseRequest struct {
	AddonName *string `json:"AddonName,omitempty" xml:"AddonName,omitempty"`
	// Environment ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// env-xxx
	EnvironmentId *string `json:"EnvironmentId,omitempty" xml:"EnvironmentId,omitempty"`
	// Whether to be forcibly deleted. The default value is false.
	//
	// example:
	//
	// false
	Force *bool `json:"Force,omitempty" xml:"Force,omitempty"`
	// The region ID.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// Name of Release.
	//
	// This parameter is required.
	//
	// example:
	//
	// agent-822567d4-2449
	ReleaseName *string `json:"ReleaseName,omitempty" xml:"ReleaseName,omitempty"`
}

func (s DeleteAddonReleaseRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteAddonReleaseRequest) GoString() string {
	return s.String()
}

func (s *DeleteAddonReleaseRequest) SetAddonName(v string) *DeleteAddonReleaseRequest {
	s.AddonName = &v
	return s
}

func (s *DeleteAddonReleaseRequest) SetEnvironmentId(v string) *DeleteAddonReleaseRequest {
	s.EnvironmentId = &v
	return s
}

func (s *DeleteAddonReleaseRequest) SetForce(v bool) *DeleteAddonReleaseRequest {
	s.Force = &v
	return s
}

func (s *DeleteAddonReleaseRequest) SetRegionId(v string) *DeleteAddonReleaseRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteAddonReleaseRequest) SetReleaseName(v string) *DeleteAddonReleaseRequest {
	s.ReleaseName = &v
	return s
}

type DeleteAddonReleaseResponseBody struct {
	// Status code: 200 indicates success.
	//
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// Return a message.
	//
	// example:
	//
	// success
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// The returned message.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	//
	// example:
	//
	// F7781D4A-2818-41E7-B7BB-79D809E9****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the alert rule was deleted. Valid values:
	//
	// 	- `true`: The alert rule was deleted.
	//
	// 	- `false`: The alert rule failed to be deleted.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteAddonReleaseResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteAddonReleaseResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteAddonReleaseResponseBody) SetCode(v int32) *DeleteAddonReleaseResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteAddonReleaseResponseBody) SetData(v string) *DeleteAddonReleaseResponseBody {
	s.Data = &v
	return s
}

func (s *DeleteAddonReleaseResponseBody) SetMessage(v string) *DeleteAddonReleaseResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteAddonReleaseResponseBody) SetRequestId(v string) *DeleteAddonReleaseResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteAddonReleaseResponseBody) SetSuccess(v bool) *DeleteAddonReleaseResponseBody {
	s.Success = &v
	return s
}

type DeleteAddonReleaseResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteAddonReleaseResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteAddonReleaseResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteAddonReleaseResponse) GoString() string {
	return s.String()
}

func (s *DeleteAddonReleaseResponse) SetHeaders(v map[string]*string) *DeleteAddonReleaseResponse {
	s.Headers = v
	return s
}

func (s *DeleteAddonReleaseResponse) SetStatusCode(v int32) *DeleteAddonReleaseResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteAddonReleaseResponse) SetBody(v *DeleteAddonReleaseResponseBody) *DeleteAddonReleaseResponse {
	s.Body = v
	return s
}

type DeleteAlertContactRequest struct {
	// The ID of the alert contact.
	//
	// This parameter is required.
	//
	// example:
	//
	// 123
	ContactId *int64 `json:"ContactId,omitempty" xml:"ContactId,omitempty"`
	// The ID of the region.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DeleteAlertContactRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteAlertContactRequest) GoString() string {
	return s.String()
}

func (s *DeleteAlertContactRequest) SetContactId(v int64) *DeleteAlertContactRequest {
	s.ContactId = &v
	return s
}

func (s *DeleteAlertContactRequest) SetRegionId(v string) *DeleteAlertContactRequest {
	s.RegionId = &v
	return s
}

type DeleteAlertContactResponseBody struct {
	// Indicates whether the call was successful.
	//
	// 	- `true`: The call was successful.
	//
	// 	- `false`: The call failed.
	//
	// example:
	//
	// true
	IsSuccess *bool `json:"IsSuccess,omitempty" xml:"IsSuccess,omitempty"`
	// The ID of the request. You can query logs and troubleshoot issues based on the ID.
	//
	// example:
	//
	// 78901766-3806-4E96-8E47-CFEF59E4****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteAlertContactResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteAlertContactResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteAlertContactResponseBody) SetIsSuccess(v bool) *DeleteAlertContactResponseBody {
	s.IsSuccess = &v
	return s
}

func (s *DeleteAlertContactResponseBody) SetRequestId(v string) *DeleteAlertContactResponseBody {
	s.RequestId = &v
	return s
}

type DeleteAlertContactResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteAlertContactResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteAlertContactResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteAlertContactResponse) GoString() string {
	return s.String()
}

func (s *DeleteAlertContactResponse) SetHeaders(v map[string]*string) *DeleteAlertContactResponse {
	s.Headers = v
	return s
}

func (s *DeleteAlertContactResponse) SetStatusCode(v int32) *DeleteAlertContactResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteAlertContactResponse) SetBody(v *DeleteAlertContactResponseBody) *DeleteAlertContactResponse {
	s.Body = v
	return s
}

type DeleteAlertContactGroupRequest struct {
	// The ID of the alert contact group.
	//
	// This parameter is required.
	//
	// example:
	//
	// 123
	ContactGroupId *int64 `json:"ContactGroupId,omitempty" xml:"ContactGroupId,omitempty"`
	// The ID of the region.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DeleteAlertContactGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteAlertContactGroupRequest) GoString() string {
	return s.String()
}

func (s *DeleteAlertContactGroupRequest) SetContactGroupId(v int64) *DeleteAlertContactGroupRequest {
	s.ContactGroupId = &v
	return s
}

func (s *DeleteAlertContactGroupRequest) SetRegionId(v string) *DeleteAlertContactGroupRequest {
	s.RegionId = &v
	return s
}

type DeleteAlertContactGroupResponseBody struct {
	// Indicates whether the call was successful.
	//
	// 	- `true`: The call was successful.
	//
	// 	- `false`: The call failed.
	//
	// example:
	//
	// true
	IsSuccess *bool `json:"IsSuccess,omitempty" xml:"IsSuccess,omitempty"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	//
	// example:
	//
	// C21AB7CF-B7AF-410F-BD61-82D1567F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteAlertContactGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteAlertContactGroupResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteAlertContactGroupResponseBody) SetIsSuccess(v bool) *DeleteAlertContactGroupResponseBody {
	s.IsSuccess = &v
	return s
}

func (s *DeleteAlertContactGroupResponseBody) SetRequestId(v string) *DeleteAlertContactGroupResponseBody {
	s.RequestId = &v
	return s
}

type DeleteAlertContactGroupResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteAlertContactGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteAlertContactGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteAlertContactGroupResponse) GoString() string {
	return s.String()
}

func (s *DeleteAlertContactGroupResponse) SetHeaders(v map[string]*string) *DeleteAlertContactGroupResponse {
	s.Headers = v
	return s
}

func (s *DeleteAlertContactGroupResponse) SetStatusCode(v int32) *DeleteAlertContactGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteAlertContactGroupResponse) SetBody(v *DeleteAlertContactGroupResponseBody) *DeleteAlertContactGroupResponse {
	s.Body = v
	return s
}

type DeleteAlertRuleRequest struct {
	// Indicates whether the alert rule was successfully deleted.
	//
	// 	- `true`: The specified data is deleted.
	//
	// 	- `false`: The specified data fails to be deleted.
	//
	// This parameter is required.
	//
	// example:
	//
	// 123
	AlertId *int64 `json:"AlertId,omitempty" xml:"AlertId,omitempty"`
}

func (s DeleteAlertRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteAlertRuleRequest) GoString() string {
	return s.String()
}

func (s *DeleteAlertRuleRequest) SetAlertId(v int64) *DeleteAlertRuleRequest {
	s.AlertId = &v
	return s
}

type DeleteAlertRuleResponseBody struct {
	// Indicates whether the call was successful.
	//
	// 	- `true`: The call was successful.
	//
	// 	- `false`: The call failed.
	//
	// example:
	//
	// true
	IsSuccess *bool `json:"IsSuccess,omitempty" xml:"IsSuccess,omitempty"`
	// The request ID.
	//
	// example:
	//
	// C21AB7CF-B7AF-410F-BD61-82D1567F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteAlertRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteAlertRuleResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteAlertRuleResponseBody) SetIsSuccess(v bool) *DeleteAlertRuleResponseBody {
	s.IsSuccess = &v
	return s
}

func (s *DeleteAlertRuleResponseBody) SetRequestId(v string) *DeleteAlertRuleResponseBody {
	s.RequestId = &v
	return s
}

type DeleteAlertRuleResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteAlertRuleResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteAlertRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteAlertRuleResponse) GoString() string {
	return s.String()
}

func (s *DeleteAlertRuleResponse) SetHeaders(v map[string]*string) *DeleteAlertRuleResponse {
	s.Headers = v
	return s
}

func (s *DeleteAlertRuleResponse) SetStatusCode(v int32) *DeleteAlertRuleResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteAlertRuleResponse) SetBody(v *DeleteAlertRuleResponseBody) *DeleteAlertRuleResponse {
	s.Body = v
	return s
}

type DeleteAlertRulesRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// [123, 234]
	AlertIds *string `json:"AlertIds,omitempty" xml:"AlertIds,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DeleteAlertRulesRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteAlertRulesRequest) GoString() string {
	return s.String()
}

func (s *DeleteAlertRulesRequest) SetAlertIds(v string) *DeleteAlertRulesRequest {
	s.AlertIds = &v
	return s
}

func (s *DeleteAlertRulesRequest) SetRegionId(v string) *DeleteAlertRulesRequest {
	s.RegionId = &v
	return s
}

type DeleteAlertRulesResponseBody struct {
	// example:
	//
	// true
	IsSuccess *bool `json:"IsSuccess,omitempty" xml:"IsSuccess,omitempty"`
	// example:
	//
	// C21AB7CF-B7AF-410F-BD61-82D1567F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteAlertRulesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteAlertRulesResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteAlertRulesResponseBody) SetIsSuccess(v bool) *DeleteAlertRulesResponseBody {
	s.IsSuccess = &v
	return s
}

func (s *DeleteAlertRulesResponseBody) SetRequestId(v string) *DeleteAlertRulesResponseBody {
	s.RequestId = &v
	return s
}

type DeleteAlertRulesResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteAlertRulesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteAlertRulesResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteAlertRulesResponse) GoString() string {
	return s.String()
}

func (s *DeleteAlertRulesResponse) SetHeaders(v map[string]*string) *DeleteAlertRulesResponse {
	s.Headers = v
	return s
}

func (s *DeleteAlertRulesResponse) SetStatusCode(v int32) *DeleteAlertRulesResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteAlertRulesResponse) SetBody(v *DeleteAlertRulesResponseBody) *DeleteAlertRulesResponse {
	s.Body = v
	return s
}

type DeleteAppListRequest struct {
	// The PIDs of the applications monitored by ARMS Application Monitoring.
	Pids []*string `json:"Pids,omitempty" xml:"Pids,omitempty" type:"Repeated"`
	// The region ID.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DeleteAppListRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteAppListRequest) GoString() string {
	return s.String()
}

func (s *DeleteAppListRequest) SetPids(v []*string) *DeleteAppListRequest {
	s.Pids = v
	return s
}

func (s *DeleteAppListRequest) SetRegionId(v string) *DeleteAppListRequest {
	s.RegionId = &v
	return s
}

type DeleteAppListResponseBody struct {
	// The HTTP status code. 2XX indicates that the request was successful. 3XX indicates that the request was redirected. 4XX indicates that a request error occurred. 5XX indicates that a server error occurred.
	//
	// example:
	//
	// 200
	Code *int64 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned message.
	//
	// example:
	//
	// "{\\"code\\":200,\\"data\\":\\"{\\\\\\"code\\\\\\":200,\\\\\\"data\\\\\\":true,\\\\\\"errorCode\\\\ \\":\\\\\\"Deletion of application successful\\\\\\",\\\\\\"Message\\\\\\":\\\\\\"Deletion of application successful\\\\\\",\\\\\\"Successful\\\\\\":true,\\ \\\\"traceId\\\\\\":\\\\\\"0bc1667516940677164677396d0088\\\\\\"}\\",\\"errorCode\\":\\"Batch deletion of applications successful\\",\\"message\\":\\"Batch deletion of applications successful\\ ",\\"Success\\":true,\\"traceId\\":\\"210f470416940677161213505e0e7a\\"}"
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// The error message returned when the request parameters are invalid.
	//
	// example:
	//
	// "Deletion of application successful"
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 4B446DF2-3DDD-4B5B-8E3F-D5225120****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the specified applications are deleted. Valid values:
	//
	// 	- `true`: The applications are deleted.
	//
	// 	- `false`: The applications failed to be deleted.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteAppListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteAppListResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteAppListResponseBody) SetCode(v int64) *DeleteAppListResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteAppListResponseBody) SetData(v string) *DeleteAppListResponseBody {
	s.Data = &v
	return s
}

func (s *DeleteAppListResponseBody) SetMessage(v string) *DeleteAppListResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteAppListResponseBody) SetRequestId(v string) *DeleteAppListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteAppListResponseBody) SetSuccess(v bool) *DeleteAppListResponseBody {
	s.Success = &v
	return s
}

type DeleteAppListResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteAppListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteAppListResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteAppListResponse) GoString() string {
	return s.String()
}

func (s *DeleteAppListResponse) SetHeaders(v map[string]*string) *DeleteAppListResponse {
	s.Headers = v
	return s
}

func (s *DeleteAppListResponse) SetStatusCode(v int32) *DeleteAppListResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteAppListResponse) SetBody(v *DeleteAppListResponseBody) *DeleteAppListResponse {
	s.Body = v
	return s
}

type DeleteCmsExporterRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// cc7a37ee31aea4ed1a059eff8034b****
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DeleteCmsExporterRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteCmsExporterRequest) GoString() string {
	return s.String()
}

func (s *DeleteCmsExporterRequest) SetClusterId(v string) *DeleteCmsExporterRequest {
	s.ClusterId = &v
	return s
}

func (s *DeleteCmsExporterRequest) SetRegionId(v string) *DeleteCmsExporterRequest {
	s.RegionId = &v
	return s
}

type DeleteCmsExporterResponseBody struct {
	// example:
	//
	// success
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// example:
	//
	// 27E653FA-5958-45BE-8AA9-14D884DC****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteCmsExporterResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteCmsExporterResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteCmsExporterResponseBody) SetData(v string) *DeleteCmsExporterResponseBody {
	s.Data = &v
	return s
}

func (s *DeleteCmsExporterResponseBody) SetRequestId(v string) *DeleteCmsExporterResponseBody {
	s.RequestId = &v
	return s
}

type DeleteCmsExporterResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteCmsExporterResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteCmsExporterResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteCmsExporterResponse) GoString() string {
	return s.String()
}

func (s *DeleteCmsExporterResponse) SetHeaders(v map[string]*string) *DeleteCmsExporterResponse {
	s.Headers = v
	return s
}

func (s *DeleteCmsExporterResponse) SetStatusCode(v int32) *DeleteCmsExporterResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteCmsExporterResponse) SetBody(v *DeleteCmsExporterResponseBody) *DeleteCmsExporterResponse {
	s.Body = v
	return s
}

type DeleteContactRequest struct {
	// The operation that you want to perform. Set the value to **DeleteContact**.
	//
	// This parameter is required.
	//
	// example:
	//
	// 123
	ContactId *int64 `json:"ContactId,omitempty" xml:"ContactId,omitempty"`
}

func (s DeleteContactRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteContactRequest) GoString() string {
	return s.String()
}

func (s *DeleteContactRequest) SetContactId(v int64) *DeleteContactRequest {
	s.ContactId = &v
	return s
}

type DeleteContactResponseBody struct {
	// example:
	//
	// true
	IsSuccess *bool `json:"IsSuccess,omitempty" xml:"IsSuccess,omitempty"`
	// example:
	//
	// C21AB7CF-B7AF-410F-BD61-82D1567F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteContactResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteContactResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteContactResponseBody) SetIsSuccess(v bool) *DeleteContactResponseBody {
	s.IsSuccess = &v
	return s
}

func (s *DeleteContactResponseBody) SetRequestId(v string) *DeleteContactResponseBody {
	s.RequestId = &v
	return s
}

type DeleteContactResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteContactResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteContactResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteContactResponse) GoString() string {
	return s.String()
}

func (s *DeleteContactResponse) SetHeaders(v map[string]*string) *DeleteContactResponse {
	s.Headers = v
	return s
}

func (s *DeleteContactResponse) SetStatusCode(v int32) *DeleteContactResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteContactResponse) SetBody(v *DeleteContactResponseBody) *DeleteContactResponse {
	s.Body = v
	return s
}

type DeleteContactGroupRequest struct {
	// The ID of the alert contact group.
	//
	// This parameter is required.
	//
	// example:
	//
	// 123
	ContactGroupId *int64 `json:"ContactGroupId,omitempty" xml:"ContactGroupId,omitempty"`
}

func (s DeleteContactGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteContactGroupRequest) GoString() string {
	return s.String()
}

func (s *DeleteContactGroupRequest) SetContactGroupId(v int64) *DeleteContactGroupRequest {
	s.ContactGroupId = &v
	return s
}

type DeleteContactGroupResponseBody struct {
	// Indicates whether the alert contact group was deleted. Valid values:
	//
	// 	- `true`
	//
	// 	- `false`
	//
	// example:
	//
	// true
	IsSuccess *bool `json:"IsSuccess,omitempty" xml:"IsSuccess,omitempty"`
	// The request ID.
	//
	// example:
	//
	// C21AB7CF-B7AF-410F-BD61-82D1567F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteContactGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteContactGroupResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteContactGroupResponseBody) SetIsSuccess(v bool) *DeleteContactGroupResponseBody {
	s.IsSuccess = &v
	return s
}

func (s *DeleteContactGroupResponseBody) SetRequestId(v string) *DeleteContactGroupResponseBody {
	s.RequestId = &v
	return s
}

type DeleteContactGroupResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteContactGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteContactGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteContactGroupResponse) GoString() string {
	return s.String()
}

func (s *DeleteContactGroupResponse) SetHeaders(v map[string]*string) *DeleteContactGroupResponse {
	s.Headers = v
	return s
}

func (s *DeleteContactGroupResponse) SetStatusCode(v int32) *DeleteContactGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteContactGroupResponse) SetBody(v *DeleteContactGroupResponseBody) *DeleteContactGroupResponse {
	s.Body = v
	return s
}

type DeleteDispatchRuleRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 12345
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DeleteDispatchRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteDispatchRuleRequest) GoString() string {
	return s.String()
}

func (s *DeleteDispatchRuleRequest) SetId(v string) *DeleteDispatchRuleRequest {
	s.Id = &v
	return s
}

func (s *DeleteDispatchRuleRequest) SetRegionId(v string) *DeleteDispatchRuleRequest {
	s.RegionId = &v
	return s
}

type DeleteDispatchRuleResponseBody struct {
	// example:
	//
	// 16AF921B-8187-489F-9913-43C808B4****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteDispatchRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteDispatchRuleResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteDispatchRuleResponseBody) SetRequestId(v string) *DeleteDispatchRuleResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteDispatchRuleResponseBody) SetSuccess(v bool) *DeleteDispatchRuleResponseBody {
	s.Success = &v
	return s
}

type DeleteDispatchRuleResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteDispatchRuleResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteDispatchRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteDispatchRuleResponse) GoString() string {
	return s.String()
}

func (s *DeleteDispatchRuleResponse) SetHeaders(v map[string]*string) *DeleteDispatchRuleResponse {
	s.Headers = v
	return s
}

func (s *DeleteDispatchRuleResponse) SetStatusCode(v int32) *DeleteDispatchRuleResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteDispatchRuleResponse) SetBody(v *DeleteDispatchRuleResponseBody) *DeleteDispatchRuleResponse {
	s.Body = v
	return s
}

type DeleteEnvCustomJobRequest struct {
	// Custom job name.
	//
	// This parameter is required.
	//
	// example:
	//
	// job1
	CustomJobName *string `json:"CustomJobName,omitempty" xml:"CustomJobName,omitempty"`
	// Environment ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// env-xxx
	EnvironmentId *string `json:"EnvironmentId,omitempty" xml:"EnvironmentId,omitempty"`
	// The region ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DeleteEnvCustomJobRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteEnvCustomJobRequest) GoString() string {
	return s.String()
}

func (s *DeleteEnvCustomJobRequest) SetCustomJobName(v string) *DeleteEnvCustomJobRequest {
	s.CustomJobName = &v
	return s
}

func (s *DeleteEnvCustomJobRequest) SetEnvironmentId(v string) *DeleteEnvCustomJobRequest {
	s.EnvironmentId = &v
	return s
}

func (s *DeleteEnvCustomJobRequest) SetRegionId(v string) *DeleteEnvCustomJobRequest {
	s.RegionId = &v
	return s
}

type DeleteEnvCustomJobResponseBody struct {
	// The status code. The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned result.
	//
	// example:
	//
	// success
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// The returned message.
	//
	// example:
	//
	// message
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	//
	// example:
	//
	// 2FC13182-B9AF-4E6B-BE51-72669B7C****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteEnvCustomJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteEnvCustomJobResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteEnvCustomJobResponseBody) SetCode(v int32) *DeleteEnvCustomJobResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteEnvCustomJobResponseBody) SetData(v string) *DeleteEnvCustomJobResponseBody {
	s.Data = &v
	return s
}

func (s *DeleteEnvCustomJobResponseBody) SetMessage(v string) *DeleteEnvCustomJobResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteEnvCustomJobResponseBody) SetRequestId(v string) *DeleteEnvCustomJobResponseBody {
	s.RequestId = &v
	return s
}

type DeleteEnvCustomJobResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteEnvCustomJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteEnvCustomJobResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteEnvCustomJobResponse) GoString() string {
	return s.String()
}

func (s *DeleteEnvCustomJobResponse) SetHeaders(v map[string]*string) *DeleteEnvCustomJobResponse {
	s.Headers = v
	return s
}

func (s *DeleteEnvCustomJobResponse) SetStatusCode(v int32) *DeleteEnvCustomJobResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteEnvCustomJobResponse) SetBody(v *DeleteEnvCustomJobResponseBody) *DeleteEnvCustomJobResponse {
	s.Body = v
	return s
}

type DeleteEnvPodMonitorRequest struct {
	// Environment instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// env-xxxxxx
	EnvironmentId *string `json:"EnvironmentId,omitempty" xml:"EnvironmentId,omitempty"`
	// The namespace where podMonitor is located
	//
	// This parameter is required.
	//
	// example:
	//
	// arms-prom
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// PodMonitor name.
	//
	// This parameter is required.
	//
	// example:
	//
	// arms-admin-pm1
	PodMonitorName *string `json:"PodMonitorName,omitempty" xml:"PodMonitorName,omitempty"`
	// The region ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DeleteEnvPodMonitorRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteEnvPodMonitorRequest) GoString() string {
	return s.String()
}

func (s *DeleteEnvPodMonitorRequest) SetEnvironmentId(v string) *DeleteEnvPodMonitorRequest {
	s.EnvironmentId = &v
	return s
}

func (s *DeleteEnvPodMonitorRequest) SetNamespace(v string) *DeleteEnvPodMonitorRequest {
	s.Namespace = &v
	return s
}

func (s *DeleteEnvPodMonitorRequest) SetPodMonitorName(v string) *DeleteEnvPodMonitorRequest {
	s.PodMonitorName = &v
	return s
}

func (s *DeleteEnvPodMonitorRequest) SetRegionId(v string) *DeleteEnvPodMonitorRequest {
	s.RegionId = &v
	return s
}

type DeleteEnvPodMonitorResponseBody struct {
	// The status code. The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The data returned.
	//
	// example:
	//
	// success
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// The returned message.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	//
	// example:
	//
	// 626037F5-FDEB-45B0-804C-B3C92797****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteEnvPodMonitorResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteEnvPodMonitorResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteEnvPodMonitorResponseBody) SetCode(v int32) *DeleteEnvPodMonitorResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteEnvPodMonitorResponseBody) SetData(v string) *DeleteEnvPodMonitorResponseBody {
	s.Data = &v
	return s
}

func (s *DeleteEnvPodMonitorResponseBody) SetMessage(v string) *DeleteEnvPodMonitorResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteEnvPodMonitorResponseBody) SetRequestId(v string) *DeleteEnvPodMonitorResponseBody {
	s.RequestId = &v
	return s
}

type DeleteEnvPodMonitorResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteEnvPodMonitorResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteEnvPodMonitorResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteEnvPodMonitorResponse) GoString() string {
	return s.String()
}

func (s *DeleteEnvPodMonitorResponse) SetHeaders(v map[string]*string) *DeleteEnvPodMonitorResponse {
	s.Headers = v
	return s
}

func (s *DeleteEnvPodMonitorResponse) SetStatusCode(v int32) *DeleteEnvPodMonitorResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteEnvPodMonitorResponse) SetBody(v *DeleteEnvPodMonitorResponseBody) *DeleteEnvPodMonitorResponse {
	s.Body = v
	return s
}

type DeleteEnvServiceMonitorRequest struct {
	// Environment instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// env-xxxxxx
	EnvironmentId *string `json:"EnvironmentId,omitempty" xml:"EnvironmentId,omitempty"`
	// The name of the namespace.
	//
	// This parameter is required.
	//
	// example:
	//
	// arms-prom
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// The ID of the region.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// ServiceMonitor name.
	//
	// This parameter is required.
	//
	// example:
	//
	// arms-admin1
	ServiceMonitorName *string `json:"ServiceMonitorName,omitempty" xml:"ServiceMonitorName,omitempty"`
}

func (s DeleteEnvServiceMonitorRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteEnvServiceMonitorRequest) GoString() string {
	return s.String()
}

func (s *DeleteEnvServiceMonitorRequest) SetEnvironmentId(v string) *DeleteEnvServiceMonitorRequest {
	s.EnvironmentId = &v
	return s
}

func (s *DeleteEnvServiceMonitorRequest) SetNamespace(v string) *DeleteEnvServiceMonitorRequest {
	s.Namespace = &v
	return s
}

func (s *DeleteEnvServiceMonitorRequest) SetRegionId(v string) *DeleteEnvServiceMonitorRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteEnvServiceMonitorRequest) SetServiceMonitorName(v string) *DeleteEnvServiceMonitorRequest {
	s.ServiceMonitorName = &v
	return s
}

type DeleteEnvServiceMonitorResponseBody struct {
	// The status code or error code.
	//
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned data.
	//
	// example:
	//
	// success
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// The returned message.
	//
	// example:
	//
	// message
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	//
	// example:
	//
	// 78901766-3806-4E96-8E47-CFEF59E4****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteEnvServiceMonitorResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteEnvServiceMonitorResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteEnvServiceMonitorResponseBody) SetCode(v int32) *DeleteEnvServiceMonitorResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteEnvServiceMonitorResponseBody) SetData(v string) *DeleteEnvServiceMonitorResponseBody {
	s.Data = &v
	return s
}

func (s *DeleteEnvServiceMonitorResponseBody) SetMessage(v string) *DeleteEnvServiceMonitorResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteEnvServiceMonitorResponseBody) SetRequestId(v string) *DeleteEnvServiceMonitorResponseBody {
	s.RequestId = &v
	return s
}

type DeleteEnvServiceMonitorResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteEnvServiceMonitorResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteEnvServiceMonitorResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteEnvServiceMonitorResponse) GoString() string {
	return s.String()
}

func (s *DeleteEnvServiceMonitorResponse) SetHeaders(v map[string]*string) *DeleteEnvServiceMonitorResponse {
	s.Headers = v
	return s
}

func (s *DeleteEnvServiceMonitorResponse) SetStatusCode(v int32) *DeleteEnvServiceMonitorResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteEnvServiceMonitorResponse) SetBody(v *DeleteEnvServiceMonitorResponseBody) *DeleteEnvServiceMonitorResponse {
	s.Body = v
	return s
}

type DeleteEnvironmentRequest struct {
	// cascade delete Prometheus instance.
	//
	// if can be null:
	// true
	//
	// example:
	//
	// true
	DeletePromInstance *bool `json:"DeletePromInstance,omitempty" xml:"DeletePromInstance,omitempty"`
	// The ID of the environment instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// env-xxxxxx
	EnvironmentId *string `json:"EnvironmentId,omitempty" xml:"EnvironmentId,omitempty"`
	// The region ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DeleteEnvironmentRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteEnvironmentRequest) GoString() string {
	return s.String()
}

func (s *DeleteEnvironmentRequest) SetDeletePromInstance(v bool) *DeleteEnvironmentRequest {
	s.DeletePromInstance = &v
	return s
}

func (s *DeleteEnvironmentRequest) SetEnvironmentId(v string) *DeleteEnvironmentRequest {
	s.EnvironmentId = &v
	return s
}

func (s *DeleteEnvironmentRequest) SetRegionId(v string) *DeleteEnvironmentRequest {
	s.RegionId = &v
	return s
}

type DeleteEnvironmentResponseBody struct {
	// The HTTP status code. The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The result of the operation.
	//
	// example:
	//
	// success
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// The returned message.
	//
	// example:
	//
	// message
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 34ED024E-9E31-434A-9E4E-D9D15C3****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteEnvironmentResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteEnvironmentResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteEnvironmentResponseBody) SetCode(v int32) *DeleteEnvironmentResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteEnvironmentResponseBody) SetData(v string) *DeleteEnvironmentResponseBody {
	s.Data = &v
	return s
}

func (s *DeleteEnvironmentResponseBody) SetMessage(v string) *DeleteEnvironmentResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteEnvironmentResponseBody) SetRequestId(v string) *DeleteEnvironmentResponseBody {
	s.RequestId = &v
	return s
}

type DeleteEnvironmentResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteEnvironmentResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteEnvironmentResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteEnvironmentResponse) GoString() string {
	return s.String()
}

func (s *DeleteEnvironmentResponse) SetHeaders(v map[string]*string) *DeleteEnvironmentResponse {
	s.Headers = v
	return s
}

func (s *DeleteEnvironmentResponse) SetStatusCode(v int32) *DeleteEnvironmentResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteEnvironmentResponse) SetBody(v *DeleteEnvironmentResponseBody) *DeleteEnvironmentResponse {
	s.Body = v
	return s
}

type DeleteEnvironmentFeatureRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// env-xxx
	EnvironmentId *string `json:"EnvironmentId,omitempty" xml:"EnvironmentId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// metric-agent
	FeatureName *string `json:"FeatureName,omitempty" xml:"FeatureName,omitempty"`
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DeleteEnvironmentFeatureRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteEnvironmentFeatureRequest) GoString() string {
	return s.String()
}

func (s *DeleteEnvironmentFeatureRequest) SetEnvironmentId(v string) *DeleteEnvironmentFeatureRequest {
	s.EnvironmentId = &v
	return s
}

func (s *DeleteEnvironmentFeatureRequest) SetFeatureName(v string) *DeleteEnvironmentFeatureRequest {
	s.FeatureName = &v
	return s
}

func (s *DeleteEnvironmentFeatureRequest) SetRegionId(v string) *DeleteEnvironmentFeatureRequest {
	s.RegionId = &v
	return s
}

type DeleteEnvironmentFeatureResponseBody struct {
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// success
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	//
	// example:
	//
	// 2A0CEDF1-06FE-44AC-8E21-21A5BE65****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteEnvironmentFeatureResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteEnvironmentFeatureResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteEnvironmentFeatureResponseBody) SetCode(v int32) *DeleteEnvironmentFeatureResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteEnvironmentFeatureResponseBody) SetData(v string) *DeleteEnvironmentFeatureResponseBody {
	s.Data = &v
	return s
}

func (s *DeleteEnvironmentFeatureResponseBody) SetMessage(v string) *DeleteEnvironmentFeatureResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteEnvironmentFeatureResponseBody) SetRequestId(v string) *DeleteEnvironmentFeatureResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteEnvironmentFeatureResponseBody) SetSuccess(v bool) *DeleteEnvironmentFeatureResponseBody {
	s.Success = &v
	return s
}

type DeleteEnvironmentFeatureResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteEnvironmentFeatureResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteEnvironmentFeatureResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteEnvironmentFeatureResponse) GoString() string {
	return s.String()
}

func (s *DeleteEnvironmentFeatureResponse) SetHeaders(v map[string]*string) *DeleteEnvironmentFeatureResponse {
	s.Headers = v
	return s
}

func (s *DeleteEnvironmentFeatureResponse) SetStatusCode(v int32) *DeleteEnvironmentFeatureResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteEnvironmentFeatureResponse) SetBody(v *DeleteEnvironmentFeatureResponseBody) *DeleteEnvironmentFeatureResponse {
	s.Body = v
	return s
}

type DeleteEventBridgeIntegrationRequest struct {
	// The ID of the EventBridge integration. You can call the **ListEventBridgeIntegrations*	- operation to query the ID.
	//
	// example:
	//
	// 123
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s DeleteEventBridgeIntegrationRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteEventBridgeIntegrationRequest) GoString() string {
	return s.String()
}

func (s *DeleteEventBridgeIntegrationRequest) SetId(v int64) *DeleteEventBridgeIntegrationRequest {
	s.Id = &v
	return s
}

type DeleteEventBridgeIntegrationResponseBody struct {
	// Indicates whether the EventBridge integration is deleted.
	//
	// 	- `true`
	//
	// 	- `false`
	//
	// example:
	//
	// true
	IsSuccess *bool `json:"IsSuccess,omitempty" xml:"IsSuccess,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 2B289756-E791-5842-BCBD-AD414C******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteEventBridgeIntegrationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteEventBridgeIntegrationResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteEventBridgeIntegrationResponseBody) SetIsSuccess(v bool) *DeleteEventBridgeIntegrationResponseBody {
	s.IsSuccess = &v
	return s
}

func (s *DeleteEventBridgeIntegrationResponseBody) SetRequestId(v string) *DeleteEventBridgeIntegrationResponseBody {
	s.RequestId = &v
	return s
}

type DeleteEventBridgeIntegrationResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteEventBridgeIntegrationResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteEventBridgeIntegrationResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteEventBridgeIntegrationResponse) GoString() string {
	return s.String()
}

func (s *DeleteEventBridgeIntegrationResponse) SetHeaders(v map[string]*string) *DeleteEventBridgeIntegrationResponse {
	s.Headers = v
	return s
}

func (s *DeleteEventBridgeIntegrationResponse) SetStatusCode(v int32) *DeleteEventBridgeIntegrationResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteEventBridgeIntegrationResponse) SetBody(v *DeleteEventBridgeIntegrationResponseBody) *DeleteEventBridgeIntegrationResponse {
	s.Body = v
	return s
}

type DeleteGrafanaResourceRequest struct {
	// The ID of the cluster.
	//
	// This parameter is required.
	//
	// example:
	//
	// cc7a37ee31aea4ed1a059eff8034b****
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	// The name of the cluster.
	//
	// This parameter is required.
	//
	// example:
	//
	// clusterNameOfTest
	ClusterName *string `json:"ClusterName,omitempty" xml:"ClusterName,omitempty"`
	// The region ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DeleteGrafanaResourceRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteGrafanaResourceRequest) GoString() string {
	return s.String()
}

func (s *DeleteGrafanaResourceRequest) SetClusterId(v string) *DeleteGrafanaResourceRequest {
	s.ClusterId = &v
	return s
}

func (s *DeleteGrafanaResourceRequest) SetClusterName(v string) *DeleteGrafanaResourceRequest {
	s.ClusterName = &v
	return s
}

func (s *DeleteGrafanaResourceRequest) SetRegionId(v string) *DeleteGrafanaResourceRequest {
	s.RegionId = &v
	return s
}

type DeleteGrafanaResourceResponseBody struct {
	// Status code. 200 is success, other status codes are exceptions.
	//
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The message returned.
	//
	// example:
	//
	// delete success.
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// Returns a hint message for the result.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID. You can use the ID to query logs and troubleshoot issues.
	//
	// example:
	//
	// 771DC66C-C5E0-59BC-A983-DD18FEE9EFFA
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteGrafanaResourceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteGrafanaResourceResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteGrafanaResourceResponseBody) SetCode(v int32) *DeleteGrafanaResourceResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteGrafanaResourceResponseBody) SetData(v string) *DeleteGrafanaResourceResponseBody {
	s.Data = &v
	return s
}

func (s *DeleteGrafanaResourceResponseBody) SetMessage(v string) *DeleteGrafanaResourceResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteGrafanaResourceResponseBody) SetRequestId(v string) *DeleteGrafanaResourceResponseBody {
	s.RequestId = &v
	return s
}

type DeleteGrafanaResourceResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteGrafanaResourceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteGrafanaResourceResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteGrafanaResourceResponse) GoString() string {
	return s.String()
}

func (s *DeleteGrafanaResourceResponse) SetHeaders(v map[string]*string) *DeleteGrafanaResourceResponse {
	s.Headers = v
	return s
}

func (s *DeleteGrafanaResourceResponse) SetStatusCode(v int32) *DeleteGrafanaResourceResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteGrafanaResourceResponse) SetBody(v *DeleteGrafanaResourceResponseBody) *DeleteGrafanaResourceResponse {
	s.Body = v
	return s
}

type DeleteGrafanaWorkspaceRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// grafana-rnglkcdrntlhk0****
	GrafanaWorkspaceId *string `json:"GrafanaWorkspaceId,omitempty" xml:"GrafanaWorkspaceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DeleteGrafanaWorkspaceRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteGrafanaWorkspaceRequest) GoString() string {
	return s.String()
}

func (s *DeleteGrafanaWorkspaceRequest) SetGrafanaWorkspaceId(v string) *DeleteGrafanaWorkspaceRequest {
	s.GrafanaWorkspaceId = &v
	return s
}

func (s *DeleteGrafanaWorkspaceRequest) SetRegionId(v string) *DeleteGrafanaWorkspaceRequest {
	s.RegionId = &v
	return s
}

type DeleteGrafanaWorkspaceResponseBody struct {
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// true
	Data *bool `json:"Data,omitempty" xml:"Data,omitempty"`
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 27E653FA-5958-45BE-8AA9-14D884DC****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// example:
	//
	// eac0a8048716731735000007137d000b
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s DeleteGrafanaWorkspaceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteGrafanaWorkspaceResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteGrafanaWorkspaceResponseBody) SetCode(v int32) *DeleteGrafanaWorkspaceResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteGrafanaWorkspaceResponseBody) SetData(v bool) *DeleteGrafanaWorkspaceResponseBody {
	s.Data = &v
	return s
}

func (s *DeleteGrafanaWorkspaceResponseBody) SetMessage(v string) *DeleteGrafanaWorkspaceResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteGrafanaWorkspaceResponseBody) SetRequestId(v string) *DeleteGrafanaWorkspaceResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteGrafanaWorkspaceResponseBody) SetSuccess(v bool) *DeleteGrafanaWorkspaceResponseBody {
	s.Success = &v
	return s
}

func (s *DeleteGrafanaWorkspaceResponseBody) SetTraceId(v string) *DeleteGrafanaWorkspaceResponseBody {
	s.TraceId = &v
	return s
}

type DeleteGrafanaWorkspaceResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteGrafanaWorkspaceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteGrafanaWorkspaceResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteGrafanaWorkspaceResponse) GoString() string {
	return s.String()
}

func (s *DeleteGrafanaWorkspaceResponse) SetHeaders(v map[string]*string) *DeleteGrafanaWorkspaceResponse {
	s.Headers = v
	return s
}

func (s *DeleteGrafanaWorkspaceResponse) SetStatusCode(v int32) *DeleteGrafanaWorkspaceResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteGrafanaWorkspaceResponse) SetBody(v *DeleteGrafanaWorkspaceResponseBody) *DeleteGrafanaWorkspaceResponse {
	s.Body = v
	return s
}

type DeleteIMRobotRequest struct {
	// The ID of the IM chatbot.
	//
	// This parameter is required.
	//
	// example:
	//
	// 123
	RobotId *int64 `json:"RobotId,omitempty" xml:"RobotId,omitempty"`
}

func (s DeleteIMRobotRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteIMRobotRequest) GoString() string {
	return s.String()
}

func (s *DeleteIMRobotRequest) SetRobotId(v int64) *DeleteIMRobotRequest {
	s.RobotId = &v
	return s
}

type DeleteIMRobotResponseBody struct {
	// Indicates whether the call was successful.
	//
	// 	- `true`: The call was successful.
	//
	// 	- `false`: The call failed.
	//
	// example:
	//
	// true
	IsSuccess *bool `json:"IsSuccess,omitempty" xml:"IsSuccess,omitempty"`
	// The request ID. You can use the ID to find logs and troubleshoot issues.
	//
	// example:
	//
	// C21AB7CF-B7AF-410F-BD61-82D1567F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteIMRobotResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteIMRobotResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteIMRobotResponseBody) SetIsSuccess(v bool) *DeleteIMRobotResponseBody {
	s.IsSuccess = &v
	return s
}

func (s *DeleteIMRobotResponseBody) SetRequestId(v string) *DeleteIMRobotResponseBody {
	s.RequestId = &v
	return s
}

type DeleteIMRobotResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteIMRobotResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteIMRobotResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteIMRobotResponse) GoString() string {
	return s.String()
}

func (s *DeleteIMRobotResponse) SetHeaders(v map[string]*string) *DeleteIMRobotResponse {
	s.Headers = v
	return s
}

func (s *DeleteIMRobotResponse) SetStatusCode(v int32) *DeleteIMRobotResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteIMRobotResponse) SetBody(v *DeleteIMRobotResponseBody) *DeleteIMRobotResponse {
	s.Body = v
	return s
}

type DeleteIntegrationRequest struct {
	// The ID of the ACK cluster.
	//
	// This parameter is required.
	//
	// example:
	//
	// cc7a37ee31aea4ed1a059eff8034b****
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	// The abbreviation of the software that is supported by Application Real-Time Monitoring Service (ARMS). Valid values (case-insensitive): `ASM`, `IoT`, and `Flink`.
	//
	// This parameter is required.
	//
	// example:
	//
	// asm
	Integration *string `json:"Integration,omitempty" xml:"Integration,omitempty"`
	// The region ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DeleteIntegrationRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteIntegrationRequest) GoString() string {
	return s.String()
}

func (s *DeleteIntegrationRequest) SetClusterId(v string) *DeleteIntegrationRequest {
	s.ClusterId = &v
	return s
}

func (s *DeleteIntegrationRequest) SetIntegration(v string) *DeleteIntegrationRequest {
	s.Integration = &v
	return s
}

func (s *DeleteIntegrationRequest) SetRegionId(v string) *DeleteIntegrationRequest {
	s.RegionId = &v
	return s
}

type DeleteIntegrationResponseBody struct {
	// The HTTP status code. The status code 200 indicates that the request was successful. Other status codes indicate that the request failed.
	//
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// Indicates whether the call was successful.
	//
	// example:
	//
	// success
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// The returned message.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 1A9C645C-C83F-4C9D-8CCB-29BEC9E1****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteIntegrationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteIntegrationResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteIntegrationResponseBody) SetCode(v int32) *DeleteIntegrationResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteIntegrationResponseBody) SetData(v string) *DeleteIntegrationResponseBody {
	s.Data = &v
	return s
}

func (s *DeleteIntegrationResponseBody) SetMessage(v string) *DeleteIntegrationResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteIntegrationResponseBody) SetRequestId(v string) *DeleteIntegrationResponseBody {
	s.RequestId = &v
	return s
}

type DeleteIntegrationResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteIntegrationResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteIntegrationResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteIntegrationResponse) GoString() string {
	return s.String()
}

func (s *DeleteIntegrationResponse) SetHeaders(v map[string]*string) *DeleteIntegrationResponse {
	s.Headers = v
	return s
}

func (s *DeleteIntegrationResponse) SetStatusCode(v int32) *DeleteIntegrationResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteIntegrationResponse) SetBody(v *DeleteIntegrationResponseBody) *DeleteIntegrationResponse {
	s.Body = v
	return s
}

type DeleteIntegrationsRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 1234
	IntegrationId *int64 `json:"IntegrationId,omitempty" xml:"IntegrationId,omitempty"`
}

func (s DeleteIntegrationsRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteIntegrationsRequest) GoString() string {
	return s.String()
}

func (s *DeleteIntegrationsRequest) SetIntegrationId(v int64) *DeleteIntegrationsRequest {
	s.IntegrationId = &v
	return s
}

type DeleteIntegrationsResponseBody struct {
	// example:
	//
	// true
	IsSuccess *bool `json:"IsSuccess,omitempty" xml:"IsSuccess,omitempty"`
	// example:
	//
	// 34ED024E-9E31-434A-9E4E-D9D15C3****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteIntegrationsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteIntegrationsResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteIntegrationsResponseBody) SetIsSuccess(v bool) *DeleteIntegrationsResponseBody {
	s.IsSuccess = &v
	return s
}

func (s *DeleteIntegrationsResponseBody) SetRequestId(v string) *DeleteIntegrationsResponseBody {
	s.RequestId = &v
	return s
}

type DeleteIntegrationsResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteIntegrationsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteIntegrationsResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteIntegrationsResponse) GoString() string {
	return s.String()
}

func (s *DeleteIntegrationsResponse) SetHeaders(v map[string]*string) *DeleteIntegrationsResponse {
	s.Headers = v
	return s
}

func (s *DeleteIntegrationsResponse) SetStatusCode(v int32) *DeleteIntegrationsResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteIntegrationsResponse) SetBody(v *DeleteIntegrationsResponseBody) *DeleteIntegrationsResponse {
	s.Body = v
	return s
}

type DeleteNotificationPolicyRequest struct {
	// Deletes a notification policy based on its ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1234
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s DeleteNotificationPolicyRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteNotificationPolicyRequest) GoString() string {
	return s.String()
}

func (s *DeleteNotificationPolicyRequest) SetId(v int64) *DeleteNotificationPolicyRequest {
	s.Id = &v
	return s
}

type DeleteNotificationPolicyResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// true
	IsSuccess *bool `json:"IsSuccess,omitempty" xml:"IsSuccess,omitempty"`
	// The ID of the notification policy.
	//
	// example:
	//
	// A5EC8221-08F2-4C95-9AF1-49FD998C****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteNotificationPolicyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteNotificationPolicyResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteNotificationPolicyResponseBody) SetIsSuccess(v bool) *DeleteNotificationPolicyResponseBody {
	s.IsSuccess = &v
	return s
}

func (s *DeleteNotificationPolicyResponseBody) SetRequestId(v string) *DeleteNotificationPolicyResponseBody {
	s.RequestId = &v
	return s
}

type DeleteNotificationPolicyResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteNotificationPolicyResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteNotificationPolicyResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteNotificationPolicyResponse) GoString() string {
	return s.String()
}

func (s *DeleteNotificationPolicyResponse) SetHeaders(v map[string]*string) *DeleteNotificationPolicyResponse {
	s.Headers = v
	return s
}

func (s *DeleteNotificationPolicyResponse) SetStatusCode(v int32) *DeleteNotificationPolicyResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteNotificationPolicyResponse) SetBody(v *DeleteNotificationPolicyResponseBody) *DeleteNotificationPolicyResponse {
	s.Body = v
	return s
}

type DeletePrometheusAlertRuleRequest struct {
	// Indicates whether the alert rule was deleted. Valid values:
	//
	// 	- `true`: The alert rule was deleted.
	//
	// 	- `false`: The alert rule failed to be deleted.
	//
	// This parameter is required.
	//
	// example:
	//
	// 3888704
	AlertId   *int64  `json:"AlertId,omitempty" xml:"AlertId,omitempty"`
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
}

func (s DeletePrometheusAlertRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s DeletePrometheusAlertRuleRequest) GoString() string {
	return s.String()
}

func (s *DeletePrometheusAlertRuleRequest) SetAlertId(v int64) *DeletePrometheusAlertRuleRequest {
	s.AlertId = &v
	return s
}

func (s *DeletePrometheusAlertRuleRequest) SetClusterId(v string) *DeletePrometheusAlertRuleRequest {
	s.ClusterId = &v
	return s
}

type DeletePrometheusAlertRuleResponseBody struct {
	Code    *int64  `json:"Code,omitempty" xml:"Code,omitempty"`
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 9FEA6D00-317F-45E3-9004-7FB8B0B7****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeletePrometheusAlertRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeletePrometheusAlertRuleResponseBody) GoString() string {
	return s.String()
}

func (s *DeletePrometheusAlertRuleResponseBody) SetCode(v int64) *DeletePrometheusAlertRuleResponseBody {
	s.Code = &v
	return s
}

func (s *DeletePrometheusAlertRuleResponseBody) SetMessage(v string) *DeletePrometheusAlertRuleResponseBody {
	s.Message = &v
	return s
}

func (s *DeletePrometheusAlertRuleResponseBody) SetRequestId(v string) *DeletePrometheusAlertRuleResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeletePrometheusAlertRuleResponseBody) SetSuccess(v bool) *DeletePrometheusAlertRuleResponseBody {
	s.Success = &v
	return s
}

type DeletePrometheusAlertRuleResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeletePrometheusAlertRuleResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeletePrometheusAlertRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s DeletePrometheusAlertRuleResponse) GoString() string {
	return s.String()
}

func (s *DeletePrometheusAlertRuleResponse) SetHeaders(v map[string]*string) *DeletePrometheusAlertRuleResponse {
	s.Headers = v
	return s
}

func (s *DeletePrometheusAlertRuleResponse) SetStatusCode(v int32) *DeletePrometheusAlertRuleResponse {
	s.StatusCode = &v
	return s
}

func (s *DeletePrometheusAlertRuleResponse) SetBody(v *DeletePrometheusAlertRuleResponseBody) *DeletePrometheusAlertRuleResponse {
	s.Body = v
	return s
}

type DeletePrometheusGlobalViewRequest struct {
	// The ID of the global aggregation instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// global-v2-cn-1670100631025794-amaykca4
	GlobalViewClusterId *string `json:"GlobalViewClusterId,omitempty" xml:"GlobalViewClusterId,omitempty"`
	// The region ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DeletePrometheusGlobalViewRequest) String() string {
	return tea.Prettify(s)
}

func (s DeletePrometheusGlobalViewRequest) GoString() string {
	return s.String()
}

func (s *DeletePrometheusGlobalViewRequest) SetGlobalViewClusterId(v string) *DeletePrometheusGlobalViewRequest {
	s.GlobalViewClusterId = &v
	return s
}

func (s *DeletePrometheusGlobalViewRequest) SetRegionId(v string) *DeletePrometheusGlobalViewRequest {
	s.RegionId = &v
	return s
}

type DeletePrometheusGlobalViewResponseBody struct {
	// Status code. 200 is success, other status codes are exceptions.
	//
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The response parameters in the JSON format.
	//
	// example:
	//
	// {"Success":true,"Msg":"OK"}
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// Additional Message.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID. You can use the ID to query logs and troubleshoot issues.
	//
	// example:
	//
	// 337B8F7E-0A64-5768-9225-E9B3CF******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeletePrometheusGlobalViewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeletePrometheusGlobalViewResponseBody) GoString() string {
	return s.String()
}

func (s *DeletePrometheusGlobalViewResponseBody) SetCode(v int32) *DeletePrometheusGlobalViewResponseBody {
	s.Code = &v
	return s
}

func (s *DeletePrometheusGlobalViewResponseBody) SetData(v string) *DeletePrometheusGlobalViewResponseBody {
	s.Data = &v
	return s
}

func (s *DeletePrometheusGlobalViewResponseBody) SetMessage(v string) *DeletePrometheusGlobalViewResponseBody {
	s.Message = &v
	return s
}

func (s *DeletePrometheusGlobalViewResponseBody) SetRequestId(v string) *DeletePrometheusGlobalViewResponseBody {
	s.RequestId = &v
	return s
}

type DeletePrometheusGlobalViewResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeletePrometheusGlobalViewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeletePrometheusGlobalViewResponse) String() string {
	return tea.Prettify(s)
}

func (s DeletePrometheusGlobalViewResponse) GoString() string {
	return s.String()
}

func (s *DeletePrometheusGlobalViewResponse) SetHeaders(v map[string]*string) *DeletePrometheusGlobalViewResponse {
	s.Headers = v
	return s
}

func (s *DeletePrometheusGlobalViewResponse) SetStatusCode(v int32) *DeletePrometheusGlobalViewResponse {
	s.StatusCode = &v
	return s
}

func (s *DeletePrometheusGlobalViewResponse) SetBody(v *DeletePrometheusGlobalViewResponseBody) *DeletePrometheusGlobalViewResponse {
	s.Body = v
	return s
}

type DeletePrometheusIntegrationRequest struct {
	// The ID of the Prometheus instance. Only a Prometheus instance for Container Service or a Prometheus instance for ECS is supported.
	//
	// This parameter is required.
	//
	// example:
	//
	// cc7a37ee31aea4ed1a059eff8034b****
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	// The ID of the exporter.
	//
	// example:
	//
	// 2875
	InstanceId *int64 `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The type of the integration.
	//
	// This parameter is required.
	//
	// example:
	//
	// kafka and mysql.
	IntegrationType *string `json:"IntegrationType,omitempty" xml:"IntegrationType,omitempty"`
	// The region ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DeletePrometheusIntegrationRequest) String() string {
	return tea.Prettify(s)
}

func (s DeletePrometheusIntegrationRequest) GoString() string {
	return s.String()
}

func (s *DeletePrometheusIntegrationRequest) SetClusterId(v string) *DeletePrometheusIntegrationRequest {
	s.ClusterId = &v
	return s
}

func (s *DeletePrometheusIntegrationRequest) SetInstanceId(v int64) *DeletePrometheusIntegrationRequest {
	s.InstanceId = &v
	return s
}

func (s *DeletePrometheusIntegrationRequest) SetIntegrationType(v string) *DeletePrometheusIntegrationRequest {
	s.IntegrationType = &v
	return s
}

func (s *DeletePrometheusIntegrationRequest) SetRegionId(v string) *DeletePrometheusIntegrationRequest {
	s.RegionId = &v
	return s
}

type DeletePrometheusIntegrationResponseBody struct {
	// The status code. The status code 200 indicates that the request was successful. If another status code is returned, the request failed.
	//
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// success or an error message.
	//
	// example:
	//
	// success
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// The message returned.
	//
	// example:
	//
	// message
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	//
	// example:
	//
	// 19F54318-CC92-5567-BF66-CB029EC44C84
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeletePrometheusIntegrationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeletePrometheusIntegrationResponseBody) GoString() string {
	return s.String()
}

func (s *DeletePrometheusIntegrationResponseBody) SetCode(v int32) *DeletePrometheusIntegrationResponseBody {
	s.Code = &v
	return s
}

func (s *DeletePrometheusIntegrationResponseBody) SetData(v string) *DeletePrometheusIntegrationResponseBody {
	s.Data = &v
	return s
}

func (s *DeletePrometheusIntegrationResponseBody) SetMessage(v string) *DeletePrometheusIntegrationResponseBody {
	s.Message = &v
	return s
}

func (s *DeletePrometheusIntegrationResponseBody) SetRequestId(v string) *DeletePrometheusIntegrationResponseBody {
	s.RequestId = &v
	return s
}

type DeletePrometheusIntegrationResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeletePrometheusIntegrationResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeletePrometheusIntegrationResponse) String() string {
	return tea.Prettify(s)
}

func (s DeletePrometheusIntegrationResponse) GoString() string {
	return s.String()
}

func (s *DeletePrometheusIntegrationResponse) SetHeaders(v map[string]*string) *DeletePrometheusIntegrationResponse {
	s.Headers = v
	return s
}

func (s *DeletePrometheusIntegrationResponse) SetStatusCode(v int32) *DeletePrometheusIntegrationResponse {
	s.StatusCode = &v
	return s
}

func (s *DeletePrometheusIntegrationResponse) SetBody(v *DeletePrometheusIntegrationResponseBody) *DeletePrometheusIntegrationResponse {
	s.Body = v
	return s
}

type DeletePrometheusMonitoringRequest struct {
	// The ID of the Prometheus instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// cc7a37ee31aea4ed1a059eff8034b****
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	// The name of the monitoring configuration.
	//
	// This parameter is required.
	//
	// example:
	//
	// customJob1
	MonitoringName *string `json:"MonitoringName,omitempty" xml:"MonitoringName,omitempty"`
	// The region ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The type of the monitoring configuration.
	//
	// Valid values for a Prometheus instance for Container Service: serviceMonitor, podMonitor, customJob, and probe.
	//
	// Valid values for a Prometheus instance for ECS: customJob and probe.
	//
	// This parameter is required.
	//
	// example:
	//
	// probe
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DeletePrometheusMonitoringRequest) String() string {
	return tea.Prettify(s)
}

func (s DeletePrometheusMonitoringRequest) GoString() string {
	return s.String()
}

func (s *DeletePrometheusMonitoringRequest) SetClusterId(v string) *DeletePrometheusMonitoringRequest {
	s.ClusterId = &v
	return s
}

func (s *DeletePrometheusMonitoringRequest) SetMonitoringName(v string) *DeletePrometheusMonitoringRequest {
	s.MonitoringName = &v
	return s
}

func (s *DeletePrometheusMonitoringRequest) SetRegionId(v string) *DeletePrometheusMonitoringRequest {
	s.RegionId = &v
	return s
}

func (s *DeletePrometheusMonitoringRequest) SetType(v string) *DeletePrometheusMonitoringRequest {
	s.Type = &v
	return s
}

type DeletePrometheusMonitoringResponseBody struct {
	// The status code. The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The result of the operation.
	//
	// example:
	//
	// success
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// The returned message.
	//
	// example:
	//
	// message
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 4D6C358A-A58B-4F4B-94CE-F5AAF023****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeletePrometheusMonitoringResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeletePrometheusMonitoringResponseBody) GoString() string {
	return s.String()
}

func (s *DeletePrometheusMonitoringResponseBody) SetCode(v int32) *DeletePrometheusMonitoringResponseBody {
	s.Code = &v
	return s
}

func (s *DeletePrometheusMonitoringResponseBody) SetData(v string) *DeletePrometheusMonitoringResponseBody {
	s.Data = &v
	return s
}

func (s *DeletePrometheusMonitoringResponseBody) SetMessage(v string) *DeletePrometheusMonitoringResponseBody {
	s.Message = &v
	return s
}

func (s *DeletePrometheusMonitoringResponseBody) SetRequestId(v string) *DeletePrometheusMonitoringResponseBody {
	s.RequestId = &v
	return s
}

type DeletePrometheusMonitoringResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeletePrometheusMonitoringResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeletePrometheusMonitoringResponse) String() string {
	return tea.Prettify(s)
}

func (s DeletePrometheusMonitoringResponse) GoString() string {
	return s.String()
}

func (s *DeletePrometheusMonitoringResponse) SetHeaders(v map[string]*string) *DeletePrometheusMonitoringResponse {
	s.Headers = v
	return s
}

func (s *DeletePrometheusMonitoringResponse) SetStatusCode(v int32) *DeletePrometheusMonitoringResponse {
	s.StatusCode = &v
	return s
}

func (s *DeletePrometheusMonitoringResponse) SetBody(v *DeletePrometheusMonitoringResponseBody) *DeletePrometheusMonitoringResponse {
	s.Body = v
	return s
}

type DeletePrometheusRemoteWriteRequest struct {
	// The ID of the Prometheus instance. Only a Prometheus instance for Container Service or a Prometheus instance for ECS is supported.
	//
	// This parameter is required.
	//
	// example:
	//
	// cc7a37ee31aea4ed1a059eff8034b\\*\\*\\*\\	- or vpc-xxxx
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	// The region ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The names of the remote write configuration items that you want to delete. Separate configuration items with commas (,).
	//
	// This parameter is required.
	//
	// example:
	//
	// name1,name2
	RemoteWriteNames *string `json:"RemoteWriteNames,omitempty" xml:"RemoteWriteNames,omitempty"`
}

func (s DeletePrometheusRemoteWriteRequest) String() string {
	return tea.Prettify(s)
}

func (s DeletePrometheusRemoteWriteRequest) GoString() string {
	return s.String()
}

func (s *DeletePrometheusRemoteWriteRequest) SetClusterId(v string) *DeletePrometheusRemoteWriteRequest {
	s.ClusterId = &v
	return s
}

func (s *DeletePrometheusRemoteWriteRequest) SetRegionId(v string) *DeletePrometheusRemoteWriteRequest {
	s.RegionId = &v
	return s
}

func (s *DeletePrometheusRemoteWriteRequest) SetRemoteWriteNames(v string) *DeletePrometheusRemoteWriteRequest {
	s.RemoteWriteNames = &v
	return s
}

type DeletePrometheusRemoteWriteResponseBody struct {
	// The status code or error code.
	//
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The remote write configuration items. If the request fails, an error message is returned.
	//
	// example:
	//
	// 1
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// The message returned.
	//
	// example:
	//
	// message
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 9319A57D-2D9E-472A-B69B-CF3CD16D****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values: true and false.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeletePrometheusRemoteWriteResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeletePrometheusRemoteWriteResponseBody) GoString() string {
	return s.String()
}

func (s *DeletePrometheusRemoteWriteResponseBody) SetCode(v int32) *DeletePrometheusRemoteWriteResponseBody {
	s.Code = &v
	return s
}

func (s *DeletePrometheusRemoteWriteResponseBody) SetData(v string) *DeletePrometheusRemoteWriteResponseBody {
	s.Data = &v
	return s
}

func (s *DeletePrometheusRemoteWriteResponseBody) SetMessage(v string) *DeletePrometheusRemoteWriteResponseBody {
	s.Message = &v
	return s
}

func (s *DeletePrometheusRemoteWriteResponseBody) SetRequestId(v string) *DeletePrometheusRemoteWriteResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeletePrometheusRemoteWriteResponseBody) SetSuccess(v bool) *DeletePrometheusRemoteWriteResponseBody {
	s.Success = &v
	return s
}

type DeletePrometheusRemoteWriteResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeletePrometheusRemoteWriteResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeletePrometheusRemoteWriteResponse) String() string {
	return tea.Prettify(s)
}

func (s DeletePrometheusRemoteWriteResponse) GoString() string {
	return s.String()
}

func (s *DeletePrometheusRemoteWriteResponse) SetHeaders(v map[string]*string) *DeletePrometheusRemoteWriteResponse {
	s.Headers = v
	return s
}

func (s *DeletePrometheusRemoteWriteResponse) SetStatusCode(v int32) *DeletePrometheusRemoteWriteResponse {
	s.StatusCode = &v
	return s
}

func (s *DeletePrometheusRemoteWriteResponse) SetBody(v *DeletePrometheusRemoteWriteResponseBody) *DeletePrometheusRemoteWriteResponse {
	s.Body = v
	return s
}

type DeleteRetcodeAppRequest struct {
	// The application ID.
	//
	// example:
	//
	// 1231
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// The name of the application.
	//
	// example:
	//
	// test-app
	AppName *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	// The process identifier (PID) of the application.
	//
	// This parameter is required.
	//
	// example:
	//
	// aokcdqn3ly@741623b4e91****
	Pid *string `json:"Pid,omitempty" xml:"Pid,omitempty"`
	// The region ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DeleteRetcodeAppRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteRetcodeAppRequest) GoString() string {
	return s.String()
}

func (s *DeleteRetcodeAppRequest) SetAppId(v string) *DeleteRetcodeAppRequest {
	s.AppId = &v
	return s
}

func (s *DeleteRetcodeAppRequest) SetAppName(v string) *DeleteRetcodeAppRequest {
	s.AppName = &v
	return s
}

func (s *DeleteRetcodeAppRequest) SetPid(v string) *DeleteRetcodeAppRequest {
	s.Pid = &v
	return s
}

func (s *DeleteRetcodeAppRequest) SetRegionId(v string) *DeleteRetcodeAppRequest {
	s.RegionId = &v
	return s
}

type DeleteRetcodeAppResponseBody struct {
	// 状态码。200为成功，其他状态码为异常。
	//
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// Indicates whether the Browser Monitoring task was deleted. Valid values:
	//
	// 	- `true`
	//
	// 	- `false`
	//
	// example:
	//
	// true
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// 附加信息。取值说明如下：请求正常，返回success。请求异常，返回具体异常信息。
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 01FF8DD9-A09C-47A1-895A-B6E321BE77B6
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// 操作是否成功：
	//
	// - `true`：操作成功
	//
	// - `false`：操作失败
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteRetcodeAppResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteRetcodeAppResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteRetcodeAppResponseBody) SetCode(v int32) *DeleteRetcodeAppResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteRetcodeAppResponseBody) SetData(v string) *DeleteRetcodeAppResponseBody {
	s.Data = &v
	return s
}

func (s *DeleteRetcodeAppResponseBody) SetMessage(v string) *DeleteRetcodeAppResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteRetcodeAppResponseBody) SetRequestId(v string) *DeleteRetcodeAppResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteRetcodeAppResponseBody) SetSuccess(v bool) *DeleteRetcodeAppResponseBody {
	s.Success = &v
	return s
}

type DeleteRetcodeAppResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteRetcodeAppResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteRetcodeAppResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteRetcodeAppResponse) GoString() string {
	return s.String()
}

func (s *DeleteRetcodeAppResponse) SetHeaders(v map[string]*string) *DeleteRetcodeAppResponse {
	s.Headers = v
	return s
}

func (s *DeleteRetcodeAppResponse) SetStatusCode(v int32) *DeleteRetcodeAppResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteRetcodeAppResponse) SetBody(v *DeleteRetcodeAppResponseBody) *DeleteRetcodeAppResponse {
	s.Body = v
	return s
}

type DeleteRumAppRequest struct {
	// example:
	//
	// default
	AppGroup *string `json:"AppGroup,omitempty" xml:"AppGroup,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// b590lhguqs@28f515462******
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DeleteRumAppRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteRumAppRequest) GoString() string {
	return s.String()
}

func (s *DeleteRumAppRequest) SetAppGroup(v string) *DeleteRumAppRequest {
	s.AppGroup = &v
	return s
}

func (s *DeleteRumAppRequest) SetAppId(v string) *DeleteRumAppRequest {
	s.AppId = &v
	return s
}

func (s *DeleteRumAppRequest) SetRegionId(v string) *DeleteRumAppRequest {
	s.RegionId = &v
	return s
}

type DeleteRumAppResponseBody struct {
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	//
	// example:
	//
	// 4C518054-852F-4023-ABC1-4AF95FF7****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// rg-aek2eq4peca****
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	// example:
	//
	// Success to delete app.
	Result *string `json:"Result,omitempty" xml:"Result,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteRumAppResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteRumAppResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteRumAppResponseBody) SetCode(v int32) *DeleteRumAppResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteRumAppResponseBody) SetHttpStatusCode(v int32) *DeleteRumAppResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DeleteRumAppResponseBody) SetMessage(v string) *DeleteRumAppResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteRumAppResponseBody) SetRequestId(v string) *DeleteRumAppResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteRumAppResponseBody) SetResourceGroupId(v string) *DeleteRumAppResponseBody {
	s.ResourceGroupId = &v
	return s
}

func (s *DeleteRumAppResponseBody) SetResult(v string) *DeleteRumAppResponseBody {
	s.Result = &v
	return s
}

func (s *DeleteRumAppResponseBody) SetSuccess(v bool) *DeleteRumAppResponseBody {
	s.Success = &v
	return s
}

type DeleteRumAppResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteRumAppResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteRumAppResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteRumAppResponse) GoString() string {
	return s.String()
}

func (s *DeleteRumAppResponse) SetHeaders(v map[string]*string) *DeleteRumAppResponse {
	s.Headers = v
	return s
}

func (s *DeleteRumAppResponse) SetStatusCode(v int32) *DeleteRumAppResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteRumAppResponse) SetBody(v *DeleteRumAppResponseBody) *DeleteRumAppResponse {
	s.Body = v
	return s
}

type DeleteRumUploadFileRequest struct {
	// example:
	//
	// test.js.map
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// example:
	//
	// atc889zkcf@d8deedfa9bf****
	Pid *string `json:"Pid,omitempty" xml:"Pid,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// example:
	//
	// MS4wLjAtbWFpbi4wZjM0NzRlOSxxxxxx
	Uuid *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
	// example:
	//
	// 1.0.0
	VersionId *string `json:"VersionId,omitempty" xml:"VersionId,omitempty"`
}

func (s DeleteRumUploadFileRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteRumUploadFileRequest) GoString() string {
	return s.String()
}

func (s *DeleteRumUploadFileRequest) SetFileName(v string) *DeleteRumUploadFileRequest {
	s.FileName = &v
	return s
}

func (s *DeleteRumUploadFileRequest) SetPid(v string) *DeleteRumUploadFileRequest {
	s.Pid = &v
	return s
}

func (s *DeleteRumUploadFileRequest) SetRegionId(v string) *DeleteRumUploadFileRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteRumUploadFileRequest) SetUuid(v string) *DeleteRumUploadFileRequest {
	s.Uuid = &v
	return s
}

func (s *DeleteRumUploadFileRequest) SetVersionId(v string) *DeleteRumUploadFileRequest {
	s.VersionId = &v
	return s
}

type DeleteRumUploadFileResponseBody struct {
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// success
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	//
	// example:
	//
	// 40B10E04-81E8-4643-970D-F1B38F2E****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteRumUploadFileResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteRumUploadFileResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteRumUploadFileResponseBody) SetCode(v int32) *DeleteRumUploadFileResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteRumUploadFileResponseBody) SetData(v string) *DeleteRumUploadFileResponseBody {
	s.Data = &v
	return s
}

func (s *DeleteRumUploadFileResponseBody) SetHttpStatusCode(v int32) *DeleteRumUploadFileResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DeleteRumUploadFileResponseBody) SetMessage(v string) *DeleteRumUploadFileResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteRumUploadFileResponseBody) SetRequestId(v string) *DeleteRumUploadFileResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteRumUploadFileResponseBody) SetSuccess(v bool) *DeleteRumUploadFileResponseBody {
	s.Success = &v
	return s
}

type DeleteRumUploadFileResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteRumUploadFileResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteRumUploadFileResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteRumUploadFileResponse) GoString() string {
	return s.String()
}

func (s *DeleteRumUploadFileResponse) SetHeaders(v map[string]*string) *DeleteRumUploadFileResponse {
	s.Headers = v
	return s
}

func (s *DeleteRumUploadFileResponse) SetStatusCode(v int32) *DeleteRumUploadFileResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteRumUploadFileResponse) SetBody(v *DeleteRumUploadFileResponseBody) *DeleteRumUploadFileResponse {
	s.Body = v
	return s
}

type DeleteScenarioRequest struct {
	// The ID of the region.
	//
	// example:
	//
	// cn-zhangjaikou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the business monitoring job. You can obtain the ID by calling the ListScenario operation.
	//
	// This parameter is required.
	//
	// example:
	//
	// 132
	ScenarioId *int64 `json:"ScenarioId,omitempty" xml:"ScenarioId,omitempty"`
}

func (s DeleteScenarioRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteScenarioRequest) GoString() string {
	return s.String()
}

func (s *DeleteScenarioRequest) SetRegionId(v string) *DeleteScenarioRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteScenarioRequest) SetScenarioId(v int64) *DeleteScenarioRequest {
	s.ScenarioId = &v
	return s
}

type DeleteScenarioResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// EA24D522-AD35-47B8-8CB2-ADBC382B****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request is successful.
	//
	// 	- `true`: successful
	//
	// 	- `false`: failed
	//
	// example:
	//
	// true
	Result *bool `json:"Result,omitempty" xml:"Result,omitempty"`
}

func (s DeleteScenarioResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteScenarioResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteScenarioResponseBody) SetRequestId(v string) *DeleteScenarioResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteScenarioResponseBody) SetResult(v bool) *DeleteScenarioResponseBody {
	s.Result = &v
	return s
}

type DeleteScenarioResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteScenarioResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteScenarioResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteScenarioResponse) GoString() string {
	return s.String()
}

func (s *DeleteScenarioResponse) SetHeaders(v map[string]*string) *DeleteScenarioResponse {
	s.Headers = v
	return s
}

func (s *DeleteScenarioResponse) SetStatusCode(v int32) *DeleteScenarioResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteScenarioResponse) SetBody(v *DeleteScenarioResponseBody) *DeleteScenarioResponse {
	s.Body = v
	return s
}

type DeleteSilencePolicyRequest struct {
	// The ID of the request.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1234
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s DeleteSilencePolicyRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteSilencePolicyRequest) GoString() string {
	return s.String()
}

func (s *DeleteSilencePolicyRequest) SetId(v int64) *DeleteSilencePolicyRequest {
	s.Id = &v
	return s
}

type DeleteSilencePolicyResponseBody struct {
	// Indicates whether the silence policy was deleted successfully. Valid values:
	//
	// 	- `true`: The silence policy was deleted successfully.
	//
	// 	- `false`: The silence policy failed to be deleted.
	//
	// example:
	//
	// true
	IsSuccess *bool `json:"IsSuccess,omitempty" xml:"IsSuccess,omitempty"`
	// The operation that you want to perform. Set the value to **DeleteSilencePolicy**.
	//
	// example:
	//
	// A5EC8221-08F2-4C95-9AF1-49FD998C****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteSilencePolicyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteSilencePolicyResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteSilencePolicyResponseBody) SetIsSuccess(v bool) *DeleteSilencePolicyResponseBody {
	s.IsSuccess = &v
	return s
}

func (s *DeleteSilencePolicyResponseBody) SetRequestId(v string) *DeleteSilencePolicyResponseBody {
	s.RequestId = &v
	return s
}

type DeleteSilencePolicyResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteSilencePolicyResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteSilencePolicyResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteSilencePolicyResponse) GoString() string {
	return s.String()
}

func (s *DeleteSilencePolicyResponse) SetHeaders(v map[string]*string) *DeleteSilencePolicyResponse {
	s.Headers = v
	return s
}

func (s *DeleteSilencePolicyResponse) SetStatusCode(v int32) *DeleteSilencePolicyResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteSilencePolicyResponse) SetBody(v *DeleteSilencePolicyResponseBody) *DeleteSilencePolicyResponse {
	s.Body = v
	return s
}

type DeleteSourceMapRequest struct {
	// This parameter is required.
	FidList []*string `json:"FidList,omitempty" xml:"FidList,omitempty" type:"Repeated"`
	// This parameter is required.
	//
	// example:
	//
	// atc889zkcf@d8deedfa9bf****
	Pid *string `json:"Pid,omitempty" xml:"Pid,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DeleteSourceMapRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteSourceMapRequest) GoString() string {
	return s.String()
}

func (s *DeleteSourceMapRequest) SetFidList(v []*string) *DeleteSourceMapRequest {
	s.FidList = v
	return s
}

func (s *DeleteSourceMapRequest) SetPid(v string) *DeleteSourceMapRequest {
	s.Pid = &v
	return s
}

func (s *DeleteSourceMapRequest) SetRegionId(v string) *DeleteSourceMapRequest {
	s.RegionId = &v
	return s
}

type DeleteSourceMapShrinkRequest struct {
	// This parameter is required.
	FidListShrink *string `json:"FidList,omitempty" xml:"FidList,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// atc889zkcf@d8deedfa9bf****
	Pid *string `json:"Pid,omitempty" xml:"Pid,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DeleteSourceMapShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteSourceMapShrinkRequest) GoString() string {
	return s.String()
}

func (s *DeleteSourceMapShrinkRequest) SetFidListShrink(v string) *DeleteSourceMapShrinkRequest {
	s.FidListShrink = &v
	return s
}

func (s *DeleteSourceMapShrinkRequest) SetPid(v string) *DeleteSourceMapShrinkRequest {
	s.Pid = &v
	return s
}

func (s *DeleteSourceMapShrinkRequest) SetRegionId(v string) *DeleteSourceMapShrinkRequest {
	s.RegionId = &v
	return s
}

type DeleteSourceMapResponseBody struct {
	// example:
	//
	// success
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// example:
	//
	// 1A9C645C-C83F-4C9D-8CCB-29BEC9E1****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteSourceMapResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteSourceMapResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteSourceMapResponseBody) SetData(v string) *DeleteSourceMapResponseBody {
	s.Data = &v
	return s
}

func (s *DeleteSourceMapResponseBody) SetRequestId(v string) *DeleteSourceMapResponseBody {
	s.RequestId = &v
	return s
}

type DeleteSourceMapResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteSourceMapResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteSourceMapResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteSourceMapResponse) GoString() string {
	return s.String()
}

func (s *DeleteSourceMapResponse) SetHeaders(v map[string]*string) *DeleteSourceMapResponse {
	s.Headers = v
	return s
}

func (s *DeleteSourceMapResponse) SetStatusCode(v int32) *DeleteSourceMapResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteSourceMapResponse) SetBody(v *DeleteSourceMapResponseBody) *DeleteSourceMapResponse {
	s.Body = v
	return s
}

type DeleteSyntheticTaskRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// This parameter is required.
	TaskIds []*string `json:"TaskIds,omitempty" xml:"TaskIds,omitempty" type:"Repeated"`
}

func (s DeleteSyntheticTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteSyntheticTaskRequest) GoString() string {
	return s.String()
}

func (s *DeleteSyntheticTaskRequest) SetRegionId(v string) *DeleteSyntheticTaskRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteSyntheticTaskRequest) SetTaskIds(v []*string) *DeleteSyntheticTaskRequest {
	s.TaskIds = v
	return s
}

type DeleteSyntheticTaskResponseBody struct {
	// Id of the request
	//
	// example:
	//
	// 1A9C645C-C83F-4C9D-8CCB-29BEC9E1****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Result *string `json:"Result,omitempty" xml:"Result,omitempty"`
}

func (s DeleteSyntheticTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteSyntheticTaskResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteSyntheticTaskResponseBody) SetRequestId(v string) *DeleteSyntheticTaskResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteSyntheticTaskResponseBody) SetResult(v string) *DeleteSyntheticTaskResponseBody {
	s.Result = &v
	return s
}

type DeleteSyntheticTaskResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteSyntheticTaskResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteSyntheticTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteSyntheticTaskResponse) GoString() string {
	return s.String()
}

func (s *DeleteSyntheticTaskResponse) SetHeaders(v map[string]*string) *DeleteSyntheticTaskResponse {
	s.Headers = v
	return s
}

func (s *DeleteSyntheticTaskResponse) SetStatusCode(v int32) *DeleteSyntheticTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteSyntheticTaskResponse) SetBody(v *DeleteSyntheticTaskResponseBody) *DeleteSyntheticTaskResponse {
	s.Body = v
	return s
}

type DeleteTimingSyntheticTaskRequest struct {
	// The region ID.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The resource group ID.
	//
	// example:
	//
	// rg-aek2eq4peca****
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	// The ID of the synthetic monitoring task.
	//
	// example:
	//
	// 5308a2691f59422c8c3b7aeccec9cd3b
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s DeleteTimingSyntheticTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteTimingSyntheticTaskRequest) GoString() string {
	return s.String()
}

func (s *DeleteTimingSyntheticTaskRequest) SetRegionId(v string) *DeleteTimingSyntheticTaskRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteTimingSyntheticTaskRequest) SetResourceGroupId(v string) *DeleteTimingSyntheticTaskRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *DeleteTimingSyntheticTaskRequest) SetTaskId(v string) *DeleteTimingSyntheticTaskRequest {
	s.TaskId = &v
	return s
}

type DeleteTimingSyntheticTaskResponseBody struct {
	// The HTTP status code. The status code 200 indicates that the request was successful. Other status codes indicate that the request failed.
	//
	// example:
	//
	// 200
	Code *int64 `json:"Code,omitempty" xml:"Code,omitempty"`
	// Indicates whether the synthetic monitoring task was deleted. true: The synthetic monitoring task was deleted. false: The synthetic monitoring task failed to be deleted.
	//
	// example:
	//
	// true
	Data *bool `json:"Data,omitempty" xml:"Data,omitempty"`
	// The returned message.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// A5EC8221-08F2-4C95-9AF1-49FD998C****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteTimingSyntheticTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteTimingSyntheticTaskResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteTimingSyntheticTaskResponseBody) SetCode(v int64) *DeleteTimingSyntheticTaskResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteTimingSyntheticTaskResponseBody) SetData(v bool) *DeleteTimingSyntheticTaskResponseBody {
	s.Data = &v
	return s
}

func (s *DeleteTimingSyntheticTaskResponseBody) SetMessage(v string) *DeleteTimingSyntheticTaskResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteTimingSyntheticTaskResponseBody) SetRequestId(v string) *DeleteTimingSyntheticTaskResponseBody {
	s.RequestId = &v
	return s
}

type DeleteTimingSyntheticTaskResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteTimingSyntheticTaskResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteTimingSyntheticTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteTimingSyntheticTaskResponse) GoString() string {
	return s.String()
}

func (s *DeleteTimingSyntheticTaskResponse) SetHeaders(v map[string]*string) *DeleteTimingSyntheticTaskResponse {
	s.Headers = v
	return s
}

func (s *DeleteTimingSyntheticTaskResponse) SetStatusCode(v int32) *DeleteTimingSyntheticTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteTimingSyntheticTaskResponse) SetBody(v *DeleteTimingSyntheticTaskResponseBody) *DeleteTimingSyntheticTaskResponse {
	s.Body = v
	return s
}

type DeleteTraceAppRequest struct {
	// The ID of the application that you want to delete. You can call the SearchTraceAppByName operation to query the application ID. For more information, see [SearchTraceAppByName](https://help.aliyun.com/document_detail/130676.html).
	//
	// This parameter is required.
	//
	// example:
	//
	// 5406**
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// The reason(s) to delete application.
	DeleteReason *DeleteTraceAppRequestDeleteReason `json:"DeleteReason,omitempty" xml:"DeleteReason,omitempty" type:"Struct"`
	// The PID of the application. For more information about how to query the PID, see [QueryMetricByPage](https://www.alibabacloud.com/help/zh/doc-detail/186100.htm?spm=a2cdw.13409063.0.0.7a72281f0bkTfx#title-imy-7gj-qhr).
	//
	// This parameter is required.
	//
	// example:
	//
	// 9w0sc5gxxz@edcsd447c2f****
	Pid *string `json:"Pid,omitempty" xml:"Pid,omitempty"`
	// The ID of the region in which the application is located.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The type of the application that you want to delete. You can call the SearchTraceAppByName operation to query the application type. For more information, see [SearchTraceAppByName](https://help.aliyun.com/document_detail/130676.html). Valid values:
	//
	// 	- `TRACE`: Application Monitoring
	//
	// 	- `RETCODE`: frontend monitoring
	//
	// This parameter is required.
	//
	// example:
	//
	// TRACE
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DeleteTraceAppRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteTraceAppRequest) GoString() string {
	return s.String()
}

func (s *DeleteTraceAppRequest) SetAppId(v string) *DeleteTraceAppRequest {
	s.AppId = &v
	return s
}

func (s *DeleteTraceAppRequest) SetDeleteReason(v *DeleteTraceAppRequestDeleteReason) *DeleteTraceAppRequest {
	s.DeleteReason = v
	return s
}

func (s *DeleteTraceAppRequest) SetPid(v string) *DeleteTraceAppRequest {
	s.Pid = &v
	return s
}

func (s *DeleteTraceAppRequest) SetRegionId(v string) *DeleteTraceAppRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteTraceAppRequest) SetType(v string) *DeleteTraceAppRequest {
	s.Type = &v
	return s
}

type DeleteTraceAppRequestDeleteReason struct {
	// Reasons Ids.
	ReasonIds []*DeleteTraceAppRequestDeleteReasonReasonIds `json:"ReasonIds,omitempty" xml:"ReasonIds,omitempty" type:"Repeated"`
	// Additional remarks when none of the reasons for removal provided are met.
	//
	// example:
	//
	// The business scenario cannot be satisfied.
	Remark *string `json:"Remark,omitempty" xml:"Remark,omitempty"`
}

func (s DeleteTraceAppRequestDeleteReason) String() string {
	return tea.Prettify(s)
}

func (s DeleteTraceAppRequestDeleteReason) GoString() string {
	return s.String()
}

func (s *DeleteTraceAppRequestDeleteReason) SetReasonIds(v []*DeleteTraceAppRequestDeleteReasonReasonIds) *DeleteTraceAppRequestDeleteReason {
	s.ReasonIds = v
	return s
}

func (s *DeleteTraceAppRequestDeleteReason) SetRemark(v string) *DeleteTraceAppRequestDeleteReason {
	s.Remark = &v
	return s
}

type DeleteTraceAppRequestDeleteReasonReasonIds struct {
	// The ID of the reason for deletion.
	//
	// example:
	//
	// 0
	Id *int32 `json:"Id,omitempty" xml:"Id,omitempty"`
	// A description of the reason for removal.
	//
	// example:
	//
	// The function is not perfect, and the root cause of the problem cannot be located.
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s DeleteTraceAppRequestDeleteReasonReasonIds) String() string {
	return tea.Prettify(s)
}

func (s DeleteTraceAppRequestDeleteReasonReasonIds) GoString() string {
	return s.String()
}

func (s *DeleteTraceAppRequestDeleteReasonReasonIds) SetId(v int32) *DeleteTraceAppRequestDeleteReasonReasonIds {
	s.Id = &v
	return s
}

func (s *DeleteTraceAppRequestDeleteReasonReasonIds) SetName(v string) *DeleteTraceAppRequestDeleteReasonReasonIds {
	s.Name = &v
	return s
}

type DeleteTraceAppShrinkRequest struct {
	// The ID of the application that you want to delete. You can call the SearchTraceAppByName operation to query the application ID. For more information, see [SearchTraceAppByName](https://help.aliyun.com/document_detail/130676.html).
	//
	// This parameter is required.
	//
	// example:
	//
	// 5406**
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// The reason(s) to delete application.
	DeleteReasonShrink *string `json:"DeleteReason,omitempty" xml:"DeleteReason,omitempty"`
	// The PID of the application. For more information about how to query the PID, see [QueryMetricByPage](https://www.alibabacloud.com/help/zh/doc-detail/186100.htm?spm=a2cdw.13409063.0.0.7a72281f0bkTfx#title-imy-7gj-qhr).
	//
	// This parameter is required.
	//
	// example:
	//
	// 9w0sc5gxxz@edcsd447c2f****
	Pid *string `json:"Pid,omitempty" xml:"Pid,omitempty"`
	// The ID of the region in which the application is located.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The type of the application that you want to delete. You can call the SearchTraceAppByName operation to query the application type. For more information, see [SearchTraceAppByName](https://help.aliyun.com/document_detail/130676.html). Valid values:
	//
	// 	- `TRACE`: Application Monitoring
	//
	// 	- `RETCODE`: frontend monitoring
	//
	// This parameter is required.
	//
	// example:
	//
	// TRACE
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DeleteTraceAppShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteTraceAppShrinkRequest) GoString() string {
	return s.String()
}

func (s *DeleteTraceAppShrinkRequest) SetAppId(v string) *DeleteTraceAppShrinkRequest {
	s.AppId = &v
	return s
}

func (s *DeleteTraceAppShrinkRequest) SetDeleteReasonShrink(v string) *DeleteTraceAppShrinkRequest {
	s.DeleteReasonShrink = &v
	return s
}

func (s *DeleteTraceAppShrinkRequest) SetPid(v string) *DeleteTraceAppShrinkRequest {
	s.Pid = &v
	return s
}

func (s *DeleteTraceAppShrinkRequest) SetRegionId(v string) *DeleteTraceAppShrinkRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteTraceAppShrinkRequest) SetType(v string) *DeleteTraceAppShrinkRequest {
	s.Type = &v
	return s
}

type DeleteTraceAppResponseBody struct {
	// The status code. The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *int64 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The response in JSON format, including the HTTP status code, error code, response message, and trace ID.
	//
	// example:
	//
	// "{\\\\"code\\\\":200,\\\\"data\\\\":\\\\"{\\\\\\\\\\"code\\\\\\\\\\":200,\\\\\\\\\\"data\\\\\\\\\\":true,\\\\\\\\\\"errorCode\\\\\\\\\\":\\\\\\\\\\"The application is deleted\\\\\\\\\\",\\\\\\\\\\"message\\\\\\\\\\":\\\\\\\\\\"The application is deleted\\\\\\\\\\",\\\\\\\\\\"success\\\\\\\\\\":true,\\\\\\\\\\"traceId\\\\\\\\\\":\\\\\\\\\\"0bc0594d15954826692915817e\\*\\*\\*\\*\\\\\\\\\\"}\\\\",\\\\"errorCode\\\\":\\\\"The application is deleted\\\\",\\\\"message\\\\":\\\\"The application is deleted\\\\",\\\\"success\\\\":true,\\\\"traceId\\\\":\\\\"0ab2646915954826692568137d\\*\\*\\*\\*\\\\"}
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// The returned message.
	//
	// example:
	//
	// Internal error. Please try again. Contact the DingTalk service account if the issue                              persists after multiple retries.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 46355DD8-FC56-40C5-BFC6-269DE4F9****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// true: The request was successful.
	//
	// false: The request failed.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteTraceAppResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteTraceAppResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteTraceAppResponseBody) SetCode(v int64) *DeleteTraceAppResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteTraceAppResponseBody) SetData(v string) *DeleteTraceAppResponseBody {
	s.Data = &v
	return s
}

func (s *DeleteTraceAppResponseBody) SetMessage(v string) *DeleteTraceAppResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteTraceAppResponseBody) SetRequestId(v string) *DeleteTraceAppResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteTraceAppResponseBody) SetSuccess(v bool) *DeleteTraceAppResponseBody {
	s.Success = &v
	return s
}

type DeleteTraceAppResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteTraceAppResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteTraceAppResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteTraceAppResponse) GoString() string {
	return s.String()
}

func (s *DeleteTraceAppResponse) SetHeaders(v map[string]*string) *DeleteTraceAppResponse {
	s.Headers = v
	return s
}

func (s *DeleteTraceAppResponse) SetStatusCode(v int32) *DeleteTraceAppResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteTraceAppResponse) SetBody(v *DeleteTraceAppResponseBody) *DeleteTraceAppResponse {
	s.Body = v
	return s
}

type DeleteWebhookContactRequest struct {
	// The ID of the webhook alert contact.
	//
	// This parameter is required.
	//
	// example:
	//
	// 123
	WebhookId *int64 `json:"WebhookId,omitempty" xml:"WebhookId,omitempty"`
}

func (s DeleteWebhookContactRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteWebhookContactRequest) GoString() string {
	return s.String()
}

func (s *DeleteWebhookContactRequest) SetWebhookId(v int64) *DeleteWebhookContactRequest {
	s.WebhookId = &v
	return s
}

type DeleteWebhookContactResponseBody struct {
	// Indicates whether the webhook alert contact was deleted.
	//
	// 	- `true`
	//
	// 	- `false`
	//
	// example:
	//
	// true
	IsSuccess *bool `json:"IsSuccess,omitempty" xml:"IsSuccess,omitempty"`
	// The request ID.
	//
	// example:
	//
	// C21AB7CF-B7AF-410F-BD61-82D1567F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteWebhookContactResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteWebhookContactResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteWebhookContactResponseBody) SetIsSuccess(v bool) *DeleteWebhookContactResponseBody {
	s.IsSuccess = &v
	return s
}

func (s *DeleteWebhookContactResponseBody) SetRequestId(v string) *DeleteWebhookContactResponseBody {
	s.RequestId = &v
	return s
}

type DeleteWebhookContactResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteWebhookContactResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteWebhookContactResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteWebhookContactResponse) GoString() string {
	return s.String()
}

func (s *DeleteWebhookContactResponse) SetHeaders(v map[string]*string) *DeleteWebhookContactResponse {
	s.Headers = v
	return s
}

func (s *DeleteWebhookContactResponse) SetStatusCode(v int32) *DeleteWebhookContactResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteWebhookContactResponse) SetBody(v *DeleteWebhookContactResponseBody) *DeleteWebhookContactResponse {
	s.Body = v
	return s
}

type DescribeAddonReleaseRequest struct {
	// The environment ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// env-xxx
	EnvironmentId *string `json:"EnvironmentId,omitempty" xml:"EnvironmentId,omitempty"`
	// The region ID.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The name of the add-on release.
	//
	// This parameter is required.
	//
	// example:
	//
	// agent-822567d4-2449
	ReleaseName *string `json:"ReleaseName,omitempty" xml:"ReleaseName,omitempty"`
}

func (s DescribeAddonReleaseRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAddonReleaseRequest) GoString() string {
	return s.String()
}

func (s *DescribeAddonReleaseRequest) SetEnvironmentId(v string) *DescribeAddonReleaseRequest {
	s.EnvironmentId = &v
	return s
}

func (s *DescribeAddonReleaseRequest) SetRegionId(v string) *DescribeAddonReleaseRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeAddonReleaseRequest) SetReleaseName(v string) *DescribeAddonReleaseRequest {
	s.ReleaseName = &v
	return s
}

type DescribeAddonReleaseResponseBody struct {
	// The HTTP status code. The status code 200 indicates that the request was successful. Other status codes indicate that the request failed.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The release information.
	Data *DescribeAddonReleaseResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 78901766-3806-4E96-8E47-CFEF59E4****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values: true and false.
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeAddonReleaseResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAddonReleaseResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAddonReleaseResponseBody) SetCode(v string) *DescribeAddonReleaseResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeAddonReleaseResponseBody) SetData(v *DescribeAddonReleaseResponseBodyData) *DescribeAddonReleaseResponseBody {
	s.Data = v
	return s
}

func (s *DescribeAddonReleaseResponseBody) SetMessage(v string) *DescribeAddonReleaseResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeAddonReleaseResponseBody) SetRequestId(v string) *DescribeAddonReleaseResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAddonReleaseResponseBody) SetSuccess(v string) *DescribeAddonReleaseResponseBody {
	s.Success = &v
	return s
}

type DescribeAddonReleaseResponseBodyData struct {
	// The configuration information of the add-on release.
	//
	// example:
	//
	// {"host":"mysql-service.default","port":3306,"username":"root","password":"roots"}
	Config *string `json:"Config,omitempty" xml:"Config,omitempty"`
	// The release information.
	Release *DescribeAddonReleaseResponseBodyDataRelease `json:"Release,omitempty" xml:"Release,omitempty" type:"Struct"`
}

func (s DescribeAddonReleaseResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeAddonReleaseResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeAddonReleaseResponseBodyData) SetConfig(v string) *DescribeAddonReleaseResponseBodyData {
	s.Config = &v
	return s
}

func (s *DescribeAddonReleaseResponseBodyData) SetRelease(v *DescribeAddonReleaseResponseBodyDataRelease) *DescribeAddonReleaseResponseBodyData {
	s.Release = v
	return s
}

type DescribeAddonReleaseResponseBodyDataRelease struct {
	// The name of the add-on.
	//
	// example:
	//
	// mysql
	AddonName *string `json:"AddonName,omitempty" xml:"AddonName,omitempty"`
	// The number of alert rules.
	//
	// example:
	//
	// 1
	AlertRuleCount *int64 `json:"AlertRuleCount,omitempty" xml:"AlertRuleCount,omitempty"`
	// The installation phase.
	Conditions []*DescribeAddonReleaseResponseBodyDataReleaseConditions `json:"Conditions,omitempty" xml:"Conditions,omitempty" type:"Repeated"`
	// The time when the add-on was created.
	//
	// example:
	//
	// 2023-09-22T16:56:29+08:00
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The number of dashboards.
	//
	// example:
	//
	// 1
	DashboardCount *int64 `json:"DashboardCount,omitempty" xml:"DashboardCount,omitempty"`
	// The environment ID.
	//
	// example:
	//
	// env-xxxx
	EnvironmentId *string `json:"EnvironmentId,omitempty" xml:"EnvironmentId,omitempty"`
	// The number of exporters.
	//
	// example:
	//
	// 2
	ExporterCount *int64 `json:"ExporterCount,omitempty" xml:"ExporterCount,omitempty"`
	// Indicates whether the configuration is available.
	//
	// example:
	//
	// true
	HaveConfig *bool `json:"HaveConfig,omitempty" xml:"HaveConfig,omitempty"`
	// The user ID.
	//
	// example:
	//
	// 23810923891
	InstallUserId *string `json:"InstallUserId,omitempty" xml:"InstallUserId,omitempty"`
	// The language.
	//
	// example:
	//
	// zh
	Language *string `json:"Language,omitempty" xml:"Language,omitempty"`
	// Whether or not it is a managed component.
	Managed *bool `json:"Managed,omitempty" xml:"Managed,omitempty"`
	// The region ID.
	//
	// example:
	//
	// cn-heyuan
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The release ID after installation.
	//
	// example:
	//
	// be29c093-3fd6-4fb6-9430-797030cc183a
	ReleaseId *string `json:"ReleaseId,omitempty" xml:"ReleaseId,omitempty"`
	// The name of the release.
	//
	// example:
	//
	// mysql-1695372983039
	ReleaseName *string `json:"ReleaseName,omitempty" xml:"ReleaseName,omitempty"`
	// The scenario.
	//
	// example:
	//
	// database
	Scene *string `json:"Scene,omitempty" xml:"Scene,omitempty"`
	// The status.
	//
	// example:
	//
	// 0
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The time when the add-on was updated.
	//
	// example:
	//
	// 2023-09-22T16:56:29+08:00
	UpdateTime *string `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
	// The user ID.
	//
	// example:
	//
	// 13818734031
	UserID *string `json:"UserID,omitempty" xml:"UserID,omitempty"`
	// The version of the add-on.
	//
	// example:
	//
	// 0.0.1
	Version *string `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s DescribeAddonReleaseResponseBodyDataRelease) String() string {
	return tea.Prettify(s)
}

func (s DescribeAddonReleaseResponseBodyDataRelease) GoString() string {
	return s.String()
}

func (s *DescribeAddonReleaseResponseBodyDataRelease) SetAddonName(v string) *DescribeAddonReleaseResponseBodyDataRelease {
	s.AddonName = &v
	return s
}

func (s *DescribeAddonReleaseResponseBodyDataRelease) SetAlertRuleCount(v int64) *DescribeAddonReleaseResponseBodyDataRelease {
	s.AlertRuleCount = &v
	return s
}

func (s *DescribeAddonReleaseResponseBodyDataRelease) SetConditions(v []*DescribeAddonReleaseResponseBodyDataReleaseConditions) *DescribeAddonReleaseResponseBodyDataRelease {
	s.Conditions = v
	return s
}

func (s *DescribeAddonReleaseResponseBodyDataRelease) SetCreateTime(v string) *DescribeAddonReleaseResponseBodyDataRelease {
	s.CreateTime = &v
	return s
}

func (s *DescribeAddonReleaseResponseBodyDataRelease) SetDashboardCount(v int64) *DescribeAddonReleaseResponseBodyDataRelease {
	s.DashboardCount = &v
	return s
}

func (s *DescribeAddonReleaseResponseBodyDataRelease) SetEnvironmentId(v string) *DescribeAddonReleaseResponseBodyDataRelease {
	s.EnvironmentId = &v
	return s
}

func (s *DescribeAddonReleaseResponseBodyDataRelease) SetExporterCount(v int64) *DescribeAddonReleaseResponseBodyDataRelease {
	s.ExporterCount = &v
	return s
}

func (s *DescribeAddonReleaseResponseBodyDataRelease) SetHaveConfig(v bool) *DescribeAddonReleaseResponseBodyDataRelease {
	s.HaveConfig = &v
	return s
}

func (s *DescribeAddonReleaseResponseBodyDataRelease) SetInstallUserId(v string) *DescribeAddonReleaseResponseBodyDataRelease {
	s.InstallUserId = &v
	return s
}

func (s *DescribeAddonReleaseResponseBodyDataRelease) SetLanguage(v string) *DescribeAddonReleaseResponseBodyDataRelease {
	s.Language = &v
	return s
}

func (s *DescribeAddonReleaseResponseBodyDataRelease) SetManaged(v bool) *DescribeAddonReleaseResponseBodyDataRelease {
	s.Managed = &v
	return s
}

func (s *DescribeAddonReleaseResponseBodyDataRelease) SetRegionId(v string) *DescribeAddonReleaseResponseBodyDataRelease {
	s.RegionId = &v
	return s
}

func (s *DescribeAddonReleaseResponseBodyDataRelease) SetReleaseId(v string) *DescribeAddonReleaseResponseBodyDataRelease {
	s.ReleaseId = &v
	return s
}

func (s *DescribeAddonReleaseResponseBodyDataRelease) SetReleaseName(v string) *DescribeAddonReleaseResponseBodyDataRelease {
	s.ReleaseName = &v
	return s
}

func (s *DescribeAddonReleaseResponseBodyDataRelease) SetScene(v string) *DescribeAddonReleaseResponseBodyDataRelease {
	s.Scene = &v
	return s
}

func (s *DescribeAddonReleaseResponseBodyDataRelease) SetStatus(v string) *DescribeAddonReleaseResponseBodyDataRelease {
	s.Status = &v
	return s
}

func (s *DescribeAddonReleaseResponseBodyDataRelease) SetUpdateTime(v string) *DescribeAddonReleaseResponseBodyDataRelease {
	s.UpdateTime = &v
	return s
}

func (s *DescribeAddonReleaseResponseBodyDataRelease) SetUserID(v string) *DescribeAddonReleaseResponseBodyDataRelease {
	s.UserID = &v
	return s
}

func (s *DescribeAddonReleaseResponseBodyDataRelease) SetVersion(v string) *DescribeAddonReleaseResponseBodyDataRelease {
	s.Version = &v
	return s
}

type DescribeAddonReleaseResponseBodyDataReleaseConditions struct {
	// The first transition time.
	//
	// example:
	//
	// 2018-01-31T14:32:19Z
	FirstTransitionTime *string `json:"FirstTransitionTime,omitempty" xml:"FirstTransitionTime,omitempty"`
	// The last transition time.
	//
	// example:
	//
	// 2018-01-31T14:32:19Z
	LastTransitionTime *string `json:"LastTransitionTime,omitempty" xml:"LastTransitionTime,omitempty"`
	// The detailed information.
	//
	// example:
	//
	// xxxx
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The reason for the failure.
	//
	// example:
	//
	// xxxx
	Reason *string `json:"Reason,omitempty" xml:"Reason,omitempty"`
	// The status of the phase.
	//
	// example:
	//
	// True
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The type of the phase.
	//
	// example:
	//
	// Loaded
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeAddonReleaseResponseBodyDataReleaseConditions) String() string {
	return tea.Prettify(s)
}

func (s DescribeAddonReleaseResponseBodyDataReleaseConditions) GoString() string {
	return s.String()
}

func (s *DescribeAddonReleaseResponseBodyDataReleaseConditions) SetFirstTransitionTime(v string) *DescribeAddonReleaseResponseBodyDataReleaseConditions {
	s.FirstTransitionTime = &v
	return s
}

func (s *DescribeAddonReleaseResponseBodyDataReleaseConditions) SetLastTransitionTime(v string) *DescribeAddonReleaseResponseBodyDataReleaseConditions {
	s.LastTransitionTime = &v
	return s
}

func (s *DescribeAddonReleaseResponseBodyDataReleaseConditions) SetMessage(v string) *DescribeAddonReleaseResponseBodyDataReleaseConditions {
	s.Message = &v
	return s
}

func (s *DescribeAddonReleaseResponseBodyDataReleaseConditions) SetReason(v string) *DescribeAddonReleaseResponseBodyDataReleaseConditions {
	s.Reason = &v
	return s
}

func (s *DescribeAddonReleaseResponseBodyDataReleaseConditions) SetStatus(v string) *DescribeAddonReleaseResponseBodyDataReleaseConditions {
	s.Status = &v
	return s
}

func (s *DescribeAddonReleaseResponseBodyDataReleaseConditions) SetType(v string) *DescribeAddonReleaseResponseBodyDataReleaseConditions {
	s.Type = &v
	return s
}

type DescribeAddonReleaseResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAddonReleaseResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAddonReleaseResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAddonReleaseResponse) GoString() string {
	return s.String()
}

func (s *DescribeAddonReleaseResponse) SetHeaders(v map[string]*string) *DescribeAddonReleaseResponse {
	s.Headers = v
	return s
}

func (s *DescribeAddonReleaseResponse) SetStatusCode(v int32) *DescribeAddonReleaseResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAddonReleaseResponse) SetBody(v *DescribeAddonReleaseResponseBody) *DescribeAddonReleaseResponse {
	s.Body = v
	return s
}

type DescribeContactGroupsRequest struct {
	// The name of the alert contact group.
	//
	// example:
	//
	// TestGroup
	ContactGroupName *string `json:"ContactGroupName,omitempty" xml:"ContactGroupName,omitempty"`
	// The ID of the alert contact group.
	//
	// example:
	//
	// 12345
	GroupIds *string `json:"GroupIds,omitempty" xml:"GroupIds,omitempty"`
	// Specifies whether to return all the alert contacts in the queried alert contact group. Valid values:
	//
	// 	- `false`
	//
	// 	- `true`
	//
	// example:
	//
	// true
	IsDetail *bool `json:"IsDetail,omitempty" xml:"IsDetail,omitempty"`
	// The number of the page to return.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	Page *int64 `json:"Page,omitempty" xml:"Page,omitempty"`
	// The region ID.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The number of alert contact groups displayed on each page.
	//
	// This parameter is required.
	//
	// example:
	//
	// 20
	Size *int64 `json:"Size,omitempty" xml:"Size,omitempty"`
}

func (s DescribeContactGroupsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeContactGroupsRequest) GoString() string {
	return s.String()
}

func (s *DescribeContactGroupsRequest) SetContactGroupName(v string) *DescribeContactGroupsRequest {
	s.ContactGroupName = &v
	return s
}

func (s *DescribeContactGroupsRequest) SetGroupIds(v string) *DescribeContactGroupsRequest {
	s.GroupIds = &v
	return s
}

func (s *DescribeContactGroupsRequest) SetIsDetail(v bool) *DescribeContactGroupsRequest {
	s.IsDetail = &v
	return s
}

func (s *DescribeContactGroupsRequest) SetPage(v int64) *DescribeContactGroupsRequest {
	s.Page = &v
	return s
}

func (s *DescribeContactGroupsRequest) SetRegionId(v string) *DescribeContactGroupsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeContactGroupsRequest) SetSize(v int64) *DescribeContactGroupsRequest {
	s.Size = &v
	return s
}

type DescribeContactGroupsResponseBody struct {
	// The objects that were returned.
	PageBean *DescribeContactGroupsResponseBodyPageBean `json:"PageBean,omitempty" xml:"PageBean,omitempty" type:"Struct"`
	// The ID of the request.
	//
	// example:
	//
	// 4D6C358A-A58B-4F4B-94CE-F5AAF023****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeContactGroupsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeContactGroupsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeContactGroupsResponseBody) SetPageBean(v *DescribeContactGroupsResponseBodyPageBean) *DescribeContactGroupsResponseBody {
	s.PageBean = v
	return s
}

func (s *DescribeContactGroupsResponseBody) SetRequestId(v string) *DescribeContactGroupsResponseBody {
	s.RequestId = &v
	return s
}

type DescribeContactGroupsResponseBodyPageBean struct {
	// The name of the alert contact group.
	AlertContactGroups []*DescribeContactGroupsResponseBodyPageBeanAlertContactGroups `json:"AlertContactGroups,omitempty" xml:"AlertContactGroups,omitempty" type:"Repeated"`
	// The page number of the returned page.
	//
	// example:
	//
	// 1
	Page *int64 `json:"Page,omitempty" xml:"Page,omitempty"`
	// The number of alert contact groups displayed on each page.
	//
	// example:
	//
	// 20
	Size *int64 `json:"Size,omitempty" xml:"Size,omitempty"`
	// The total number of alert contact groups.
	//
	// example:
	//
	// 1
	Total *int64 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s DescribeContactGroupsResponseBodyPageBean) String() string {
	return tea.Prettify(s)
}

func (s DescribeContactGroupsResponseBodyPageBean) GoString() string {
	return s.String()
}

func (s *DescribeContactGroupsResponseBodyPageBean) SetAlertContactGroups(v []*DescribeContactGroupsResponseBodyPageBeanAlertContactGroups) *DescribeContactGroupsResponseBodyPageBean {
	s.AlertContactGroups = v
	return s
}

func (s *DescribeContactGroupsResponseBodyPageBean) SetPage(v int64) *DescribeContactGroupsResponseBodyPageBean {
	s.Page = &v
	return s
}

func (s *DescribeContactGroupsResponseBodyPageBean) SetSize(v int64) *DescribeContactGroupsResponseBodyPageBean {
	s.Size = &v
	return s
}

func (s *DescribeContactGroupsResponseBodyPageBean) SetTotal(v int64) *DescribeContactGroupsResponseBodyPageBean {
	s.Total = &v
	return s
}

type DescribeContactGroupsResponseBodyPageBeanAlertContactGroups struct {
	// The ID of the alert contact group.
	//
	// example:
	//
	// 83261
	ArmsContactGroupId *int64 `json:"ArmsContactGroupId,omitempty" xml:"ArmsContactGroupId,omitempty"`
	// The ID of the alert contact group.
	//
	// example:
	//
	// 123
	ContactGroupId *float32 `json:"ContactGroupId,omitempty" xml:"ContactGroupId,omitempty"`
	// The name of the alert contact group.
	//
	// example:
	//
	// TestGroup
	ContactGroupName *string `json:"ContactGroupName,omitempty" xml:"ContactGroupName,omitempty"`
	// The contact information. If the **IsDetail*	- parameter is set to `false`, no **contact*	- information is displayed.
	Contacts []*DescribeContactGroupsResponseBodyPageBeanAlertContactGroupsContacts `json:"Contacts,omitempty" xml:"Contacts,omitempty" type:"Repeated"`
}

func (s DescribeContactGroupsResponseBodyPageBeanAlertContactGroups) String() string {
	return tea.Prettify(s)
}

func (s DescribeContactGroupsResponseBodyPageBeanAlertContactGroups) GoString() string {
	return s.String()
}

func (s *DescribeContactGroupsResponseBodyPageBeanAlertContactGroups) SetArmsContactGroupId(v int64) *DescribeContactGroupsResponseBodyPageBeanAlertContactGroups {
	s.ArmsContactGroupId = &v
	return s
}

func (s *DescribeContactGroupsResponseBodyPageBeanAlertContactGroups) SetContactGroupId(v float32) *DescribeContactGroupsResponseBodyPageBeanAlertContactGroups {
	s.ContactGroupId = &v
	return s
}

func (s *DescribeContactGroupsResponseBodyPageBeanAlertContactGroups) SetContactGroupName(v string) *DescribeContactGroupsResponseBodyPageBeanAlertContactGroups {
	s.ContactGroupName = &v
	return s
}

func (s *DescribeContactGroupsResponseBodyPageBeanAlertContactGroups) SetContacts(v []*DescribeContactGroupsResponseBodyPageBeanAlertContactGroupsContacts) *DescribeContactGroupsResponseBodyPageBeanAlertContactGroups {
	s.Contacts = v
	return s
}

type DescribeContactGroupsResponseBodyPageBeanAlertContactGroupsContacts struct {
	// The ID of the alert contact.
	//
	// example:
	//
	// 100117
	ArmsContactId *int64 `json:"ArmsContactId,omitempty" xml:"ArmsContactId,omitempty"`
	// The ID of the alert contact.
	//
	// example:
	//
	// 456
	ContactId *float32 `json:"ContactId,omitempty" xml:"ContactId,omitempty"`
	// The name of the alert contact.
	//
	// example:
	//
	// John Doe
	ContactName *string `json:"ContactName,omitempty" xml:"ContactName,omitempty"`
	// The email address of the alert contact.
	//
	// example:
	//
	// someone@example.com
	Email *string `json:"Email,omitempty" xml:"Email,omitempty"`
	// The mobile number of the alert contact.
	//
	// example:
	//
	// 1381111****
	Phone *string `json:"Phone,omitempty" xml:"Phone,omitempty"`
}

func (s DescribeContactGroupsResponseBodyPageBeanAlertContactGroupsContacts) String() string {
	return tea.Prettify(s)
}

func (s DescribeContactGroupsResponseBodyPageBeanAlertContactGroupsContacts) GoString() string {
	return s.String()
}

func (s *DescribeContactGroupsResponseBodyPageBeanAlertContactGroupsContacts) SetArmsContactId(v int64) *DescribeContactGroupsResponseBodyPageBeanAlertContactGroupsContacts {
	s.ArmsContactId = &v
	return s
}

func (s *DescribeContactGroupsResponseBodyPageBeanAlertContactGroupsContacts) SetContactId(v float32) *DescribeContactGroupsResponseBodyPageBeanAlertContactGroupsContacts {
	s.ContactId = &v
	return s
}

func (s *DescribeContactGroupsResponseBodyPageBeanAlertContactGroupsContacts) SetContactName(v string) *DescribeContactGroupsResponseBodyPageBeanAlertContactGroupsContacts {
	s.ContactName = &v
	return s
}

func (s *DescribeContactGroupsResponseBodyPageBeanAlertContactGroupsContacts) SetEmail(v string) *DescribeContactGroupsResponseBodyPageBeanAlertContactGroupsContacts {
	s.Email = &v
	return s
}

func (s *DescribeContactGroupsResponseBodyPageBeanAlertContactGroupsContacts) SetPhone(v string) *DescribeContactGroupsResponseBodyPageBeanAlertContactGroupsContacts {
	s.Phone = &v
	return s
}

type DescribeContactGroupsResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeContactGroupsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeContactGroupsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeContactGroupsResponse) GoString() string {
	return s.String()
}

func (s *DescribeContactGroupsResponse) SetHeaders(v map[string]*string) *DescribeContactGroupsResponse {
	s.Headers = v
	return s
}

func (s *DescribeContactGroupsResponse) SetStatusCode(v int32) *DescribeContactGroupsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeContactGroupsResponse) SetBody(v *DescribeContactGroupsResponseBody) *DescribeContactGroupsResponse {
	s.Body = v
	return s
}

type DescribeContactsRequest struct {
	// The ID of the alert contact that you want to query. Separate multiple contact IDs with spaces.
	//
	// example:
	//
	// 123,321
	ContactIds *string `json:"ContactIds,omitempty" xml:"ContactIds,omitempty"`
	// The name of the alert contact.
	//
	// example:
	//
	// John Doe
	ContactName *string `json:"ContactName,omitempty" xml:"ContactName,omitempty"`
	// The email address of the alert contact.
	//
	// example:
	//
	// someone@example.com
	Email *string `json:"Email,omitempty" xml:"Email,omitempty"`
	// The number of the page to return.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	Page *int64 `json:"Page,omitempty" xml:"Page,omitempty"`
	// The mobile number of the alert contact.
	//
	// example:
	//
	// 1381111*****
	Phone *string `json:"Phone,omitempty" xml:"Phone,omitempty"`
	// The region ID.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The number of alert contacts to return on each page.
	//
	// This parameter is required.
	//
	// example:
	//
	// 20
	Size *int64 `json:"Size,omitempty" xml:"Size,omitempty"`
	// Specifies whether to return redundant information.
	//
	// example:
	//
	// true
	Verbose *string `json:"Verbose,omitempty" xml:"Verbose,omitempty"`
}

func (s DescribeContactsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeContactsRequest) GoString() string {
	return s.String()
}

func (s *DescribeContactsRequest) SetContactIds(v string) *DescribeContactsRequest {
	s.ContactIds = &v
	return s
}

func (s *DescribeContactsRequest) SetContactName(v string) *DescribeContactsRequest {
	s.ContactName = &v
	return s
}

func (s *DescribeContactsRequest) SetEmail(v string) *DescribeContactsRequest {
	s.Email = &v
	return s
}

func (s *DescribeContactsRequest) SetPage(v int64) *DescribeContactsRequest {
	s.Page = &v
	return s
}

func (s *DescribeContactsRequest) SetPhone(v string) *DescribeContactsRequest {
	s.Phone = &v
	return s
}

func (s *DescribeContactsRequest) SetRegionId(v string) *DescribeContactsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeContactsRequest) SetSize(v int64) *DescribeContactsRequest {
	s.Size = &v
	return s
}

func (s *DescribeContactsRequest) SetVerbose(v string) *DescribeContactsRequest {
	s.Verbose = &v
	return s
}

type DescribeContactsResponseBody struct {
	// The objects that were returned.
	PageBean *DescribeContactsResponseBodyPageBean `json:"PageBean,omitempty" xml:"PageBean,omitempty" type:"Struct"`
	// The ID of the request.
	//
	// example:
	//
	// 21E85B16-75A6-429A-9F65-8AAC9A54****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeContactsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeContactsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeContactsResponseBody) SetPageBean(v *DescribeContactsResponseBodyPageBean) *DescribeContactsResponseBody {
	s.PageBean = v
	return s
}

func (s *DescribeContactsResponseBody) SetRequestId(v string) *DescribeContactsResponseBody {
	s.RequestId = &v
	return s
}

type DescribeContactsResponseBodyPageBean struct {
	// The alert contacts.
	AlertContacts []*DescribeContactsResponseBodyPageBeanAlertContacts `json:"AlertContacts,omitempty" xml:"AlertContacts,omitempty" type:"Repeated"`
	// The page number of the returned page.
	//
	// example:
	//
	// 1
	Page *int64 `json:"Page,omitempty" xml:"Page,omitempty"`
	// The number of alert contacts returned per page.
	//
	// example:
	//
	// 20
	Size *int64 `json:"Size,omitempty" xml:"Size,omitempty"`
	// The total number of alert contacts.
	//
	// example:
	//
	// 1
	Total *int64 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s DescribeContactsResponseBodyPageBean) String() string {
	return tea.Prettify(s)
}

func (s DescribeContactsResponseBodyPageBean) GoString() string {
	return s.String()
}

func (s *DescribeContactsResponseBodyPageBean) SetAlertContacts(v []*DescribeContactsResponseBodyPageBeanAlertContacts) *DescribeContactsResponseBodyPageBean {
	s.AlertContacts = v
	return s
}

func (s *DescribeContactsResponseBodyPageBean) SetPage(v int64) *DescribeContactsResponseBodyPageBean {
	s.Page = &v
	return s
}

func (s *DescribeContactsResponseBodyPageBean) SetSize(v int64) *DescribeContactsResponseBodyPageBean {
	s.Size = &v
	return s
}

func (s *DescribeContactsResponseBodyPageBean) SetTotal(v int64) *DescribeContactsResponseBodyPageBean {
	s.Total = &v
	return s
}

type DescribeContactsResponseBodyPageBeanAlertContacts struct {
	// The ID of the alert contact.
	//
	// example:
	//
	// 100147
	ArmsContactId *int64 `json:"ArmsContactId,omitempty" xml:"ArmsContactId,omitempty"`
	// The ID of the alert contact.
	//
	// example:
	//
	// 123
	ContactId *float32 `json:"ContactId,omitempty" xml:"ContactId,omitempty"`
	// The name of the alert contact.
	//
	// example:
	//
	// John Doe
	ContactName *string `json:"ContactName,omitempty" xml:"ContactName,omitempty"`
	// The email address of the alert contact.
	//
	// example:
	//
	// someone@example.com
	Email *string `json:"Email,omitempty" xml:"Email,omitempty"`
	// Indicates whether the email address was verified.
	//
	// example:
	//
	// true
	IsEmailVerify *bool `json:"IsEmailVerify,omitempty" xml:"IsEmailVerify,omitempty"`
	// Indicates whether the mobile number was verified. Valid values:
	//
	// 	- `false`: no
	//
	// 	- `true`: yes
	//
	// example:
	//
	// false
	IsVerify *bool `json:"IsVerify,omitempty" xml:"IsVerify,omitempty"`
	// The mobile number of the alert contact.
	//
	// example:
	//
	// 1381111****
	Phone *string `json:"Phone,omitempty" xml:"Phone,omitempty"`
	// The operation that you want to perform if phone calls fail to be answered. Valid values:
	//
	// 	- 0: No operation is performed.
	//
	// 	- 1: A phone call is made again.
	//
	// 	- 2: A text message is sent.
	//
	// 	- 3 (default value): The global default value is used.
	//
	// example:
	//
	// 3
	ReissueSendNotice *int64 `json:"ReissueSendNotice,omitempty" xml:"ReissueSendNotice,omitempty"`
}

func (s DescribeContactsResponseBodyPageBeanAlertContacts) String() string {
	return tea.Prettify(s)
}

func (s DescribeContactsResponseBodyPageBeanAlertContacts) GoString() string {
	return s.String()
}

func (s *DescribeContactsResponseBodyPageBeanAlertContacts) SetArmsContactId(v int64) *DescribeContactsResponseBodyPageBeanAlertContacts {
	s.ArmsContactId = &v
	return s
}

func (s *DescribeContactsResponseBodyPageBeanAlertContacts) SetContactId(v float32) *DescribeContactsResponseBodyPageBeanAlertContacts {
	s.ContactId = &v
	return s
}

func (s *DescribeContactsResponseBodyPageBeanAlertContacts) SetContactName(v string) *DescribeContactsResponseBodyPageBeanAlertContacts {
	s.ContactName = &v
	return s
}

func (s *DescribeContactsResponseBodyPageBeanAlertContacts) SetEmail(v string) *DescribeContactsResponseBodyPageBeanAlertContacts {
	s.Email = &v
	return s
}

func (s *DescribeContactsResponseBodyPageBeanAlertContacts) SetIsEmailVerify(v bool) *DescribeContactsResponseBodyPageBeanAlertContacts {
	s.IsEmailVerify = &v
	return s
}

func (s *DescribeContactsResponseBodyPageBeanAlertContacts) SetIsVerify(v bool) *DescribeContactsResponseBodyPageBeanAlertContacts {
	s.IsVerify = &v
	return s
}

func (s *DescribeContactsResponseBodyPageBeanAlertContacts) SetPhone(v string) *DescribeContactsResponseBodyPageBeanAlertContacts {
	s.Phone = &v
	return s
}

func (s *DescribeContactsResponseBodyPageBeanAlertContacts) SetReissueSendNotice(v int64) *DescribeContactsResponseBodyPageBeanAlertContacts {
	s.ReissueSendNotice = &v
	return s
}

type DescribeContactsResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeContactsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeContactsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeContactsResponse) GoString() string {
	return s.String()
}

func (s *DescribeContactsResponse) SetHeaders(v map[string]*string) *DescribeContactsResponse {
	s.Headers = v
	return s
}

func (s *DescribeContactsResponse) SetStatusCode(v int32) *DescribeContactsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeContactsResponse) SetBody(v *DescribeContactsResponseBody) *DescribeContactsResponse {
	s.Body = v
	return s
}

type DescribeDispatchRuleRequest struct {
	// The ID of the dispatch policy.
	//
	// This parameter is required.
	//
	// example:
	//
	// 12345
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// The ID of the region.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeDispatchRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDispatchRuleRequest) GoString() string {
	return s.String()
}

func (s *DescribeDispatchRuleRequest) SetId(v string) *DescribeDispatchRuleRequest {
	s.Id = &v
	return s
}

func (s *DescribeDispatchRuleRequest) SetRegionId(v string) *DescribeDispatchRuleRequest {
	s.RegionId = &v
	return s
}

type DescribeDispatchRuleResponseBody struct {
	// The struct returned.
	DispatchRule *DescribeDispatchRuleResponseBodyDispatchRule `json:"DispatchRule,omitempty" xml:"DispatchRule,omitempty" type:"Struct"`
	// The ID of the request.
	//
	// example:
	//
	// 34ED024E-9E31-434A-9E4E-D9D15C3****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeDispatchRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDispatchRuleResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDispatchRuleResponseBody) SetDispatchRule(v *DescribeDispatchRuleResponseBodyDispatchRule) *DescribeDispatchRuleResponseBody {
	s.DispatchRule = v
	return s
}

func (s *DescribeDispatchRuleResponseBody) SetRequestId(v string) *DescribeDispatchRuleResponseBody {
	s.RequestId = &v
	return s
}

type DescribeDispatchRuleResponseBodyDispatchRule struct {
	// Alarm handling method.
	//
	// CREATE_ALERT: Generate an alert.
	//
	// DISCARD_ALERT: Discard the alarm event, that is, no alarm.
	//
	// example:
	//
	// CREATE_ALERT
	DispatchType *string `json:"DispatchType,omitempty" xml:"DispatchType,omitempty"`
	// The information about groups.
	GroupRules []*DescribeDispatchRuleResponseBodyDispatchRuleGroupRules `json:"GroupRules,omitempty" xml:"GroupRules,omitempty" type:"Repeated"`
	// Whether to send recovered alerts.
	//
	// true: send.
	//
	// false: do not send.
	//
	// example:
	//
	// true
	IsRecover *bool `json:"IsRecover,omitempty" xml:"IsRecover,omitempty"`
	// The information about the dispatch rule.
	LabelMatchExpressionGrid *DescribeDispatchRuleResponseBodyDispatchRuleLabelMatchExpressionGrid `json:"LabelMatchExpressionGrid,omitempty" xml:"LabelMatchExpressionGrid,omitempty" type:"Struct"`
	// The name of the dispatch policy.
	//
	// example:
	//
	// Prometheus Alert
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The collection of notification methods.
	NotifyRules []*DescribeDispatchRuleResponseBodyDispatchRuleNotifyRules `json:"NotifyRules,omitempty" xml:"NotifyRules,omitempty" type:"Repeated"`
	// The ID of the dispatch rule.
	//
	// example:
	//
	// 10282
	RuleId *int64 `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
	// Indicates whether the dispatch policy is enabled. Valid values:
	//
	// - `true`: enabled
	//
	// - `false`: disabled
	//
	// example:
	//
	// true
	State *string `json:"State,omitempty" xml:"State,omitempty"`
}

func (s DescribeDispatchRuleResponseBodyDispatchRule) String() string {
	return tea.Prettify(s)
}

func (s DescribeDispatchRuleResponseBodyDispatchRule) GoString() string {
	return s.String()
}

func (s *DescribeDispatchRuleResponseBodyDispatchRule) SetDispatchType(v string) *DescribeDispatchRuleResponseBodyDispatchRule {
	s.DispatchType = &v
	return s
}

func (s *DescribeDispatchRuleResponseBodyDispatchRule) SetGroupRules(v []*DescribeDispatchRuleResponseBodyDispatchRuleGroupRules) *DescribeDispatchRuleResponseBodyDispatchRule {
	s.GroupRules = v
	return s
}

func (s *DescribeDispatchRuleResponseBodyDispatchRule) SetIsRecover(v bool) *DescribeDispatchRuleResponseBodyDispatchRule {
	s.IsRecover = &v
	return s
}

func (s *DescribeDispatchRuleResponseBodyDispatchRule) SetLabelMatchExpressionGrid(v *DescribeDispatchRuleResponseBodyDispatchRuleLabelMatchExpressionGrid) *DescribeDispatchRuleResponseBodyDispatchRule {
	s.LabelMatchExpressionGrid = v
	return s
}

func (s *DescribeDispatchRuleResponseBodyDispatchRule) SetName(v string) *DescribeDispatchRuleResponseBodyDispatchRule {
	s.Name = &v
	return s
}

func (s *DescribeDispatchRuleResponseBodyDispatchRule) SetNotifyRules(v []*DescribeDispatchRuleResponseBodyDispatchRuleNotifyRules) *DescribeDispatchRuleResponseBodyDispatchRule {
	s.NotifyRules = v
	return s
}

func (s *DescribeDispatchRuleResponseBodyDispatchRule) SetRuleId(v int64) *DescribeDispatchRuleResponseBodyDispatchRule {
	s.RuleId = &v
	return s
}

func (s *DescribeDispatchRuleResponseBodyDispatchRule) SetState(v string) *DescribeDispatchRuleResponseBodyDispatchRule {
	s.State = &v
	return s
}

type DescribeDispatchRuleResponseBodyDispatchRuleGroupRules struct {
	// The ID of the group.
	//
	// example:
	//
	// 1
	GroupId *int64 `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The grouping interval.
	//
	// example:
	//
	// 15
	GroupInterval *int64 `json:"GroupInterval,omitempty" xml:"GroupInterval,omitempty"`
	// The waiting time for grouping.
	//
	// example:
	//
	// 10
	GroupWaitTime *int64 `json:"GroupWaitTime,omitempty" xml:"GroupWaitTime,omitempty"`
	// The grouping fields.
	GroupingFields []*string `json:"GroupingFields,omitempty" xml:"GroupingFields,omitempty" type:"Repeated"`
	// The time interval at which a notification is resent for a long-lasting unresolved alert. Unit: seconds.
	//
	// example:
	//
	// 20
	RepeatInterval *int64 `json:"RepeatInterval,omitempty" xml:"RepeatInterval,omitempty"`
}

func (s DescribeDispatchRuleResponseBodyDispatchRuleGroupRules) String() string {
	return tea.Prettify(s)
}

func (s DescribeDispatchRuleResponseBodyDispatchRuleGroupRules) GoString() string {
	return s.String()
}

func (s *DescribeDispatchRuleResponseBodyDispatchRuleGroupRules) SetGroupId(v int64) *DescribeDispatchRuleResponseBodyDispatchRuleGroupRules {
	s.GroupId = &v
	return s
}

func (s *DescribeDispatchRuleResponseBodyDispatchRuleGroupRules) SetGroupInterval(v int64) *DescribeDispatchRuleResponseBodyDispatchRuleGroupRules {
	s.GroupInterval = &v
	return s
}

func (s *DescribeDispatchRuleResponseBodyDispatchRuleGroupRules) SetGroupWaitTime(v int64) *DescribeDispatchRuleResponseBodyDispatchRuleGroupRules {
	s.GroupWaitTime = &v
	return s
}

func (s *DescribeDispatchRuleResponseBodyDispatchRuleGroupRules) SetGroupingFields(v []*string) *DescribeDispatchRuleResponseBodyDispatchRuleGroupRules {
	s.GroupingFields = v
	return s
}

func (s *DescribeDispatchRuleResponseBodyDispatchRuleGroupRules) SetRepeatInterval(v int64) *DescribeDispatchRuleResponseBodyDispatchRuleGroupRules {
	s.RepeatInterval = &v
	return s
}

type DescribeDispatchRuleResponseBodyDispatchRuleLabelMatchExpressionGrid struct {
	// The collection of dispatch rules.
	LabelMatchExpressionGroups []*DescribeDispatchRuleResponseBodyDispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroups `json:"LabelMatchExpressionGroups,omitempty" xml:"LabelMatchExpressionGroups,omitempty" type:"Repeated"`
}

func (s DescribeDispatchRuleResponseBodyDispatchRuleLabelMatchExpressionGrid) String() string {
	return tea.Prettify(s)
}

func (s DescribeDispatchRuleResponseBodyDispatchRuleLabelMatchExpressionGrid) GoString() string {
	return s.String()
}

func (s *DescribeDispatchRuleResponseBodyDispatchRuleLabelMatchExpressionGrid) SetLabelMatchExpressionGroups(v []*DescribeDispatchRuleResponseBodyDispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroups) *DescribeDispatchRuleResponseBodyDispatchRuleLabelMatchExpressionGrid {
	s.LabelMatchExpressionGroups = v
	return s
}

type DescribeDispatchRuleResponseBodyDispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroups struct {
	// The collection of conditions of the dispatch rule.
	LabelMatchExpressions []*DescribeDispatchRuleResponseBodyDispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupsLabelMatchExpressions `json:"LabelMatchExpressions,omitempty" xml:"LabelMatchExpressions,omitempty" type:"Repeated"`
}

func (s DescribeDispatchRuleResponseBodyDispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroups) String() string {
	return tea.Prettify(s)
}

func (s DescribeDispatchRuleResponseBodyDispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroups) GoString() string {
	return s.String()
}

func (s *DescribeDispatchRuleResponseBodyDispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroups) SetLabelMatchExpressions(v []*DescribeDispatchRuleResponseBodyDispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupsLabelMatchExpressions) *DescribeDispatchRuleResponseBodyDispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroups {
	s.LabelMatchExpressions = v
	return s
}

type DescribeDispatchRuleResponseBodyDispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupsLabelMatchExpressions struct {
	// The key of the tag of the dispatch rule. Valid values:
	//
	// 	- `_aliyun_arms_userid`: user ID
	//
	// 	- `_aliyun_arms_involvedObject_kind`: type of the associated object
	//
	// 	- `_aliyun_arms_involvedObject_id`: ID of the associated object
	//
	// 	- `_aliyun_arms_involvedObject_name`: name of the associated object
	//
	// 	- `_aliyun_arms_alert_name`: alert name
	//
	// 	- `_aliyun_arms_alert_rule_id`: alert rule ID
	//
	// 	- `_aliyun_arms_alert_type`: alert type
	//
	// 	- `_aliyun_arms_alert_level`: alert severity
	//
	// example:
	//
	// _aliyun_arms_involvedObject_kind
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The operator used in the dispatch rule. Valid values:
	//
	// 	- `eq`: equals to.
	//
	// 	- `re`: matches a regular expression.
	//
	// example:
	//
	// eq
	Operator *string `json:"Operator,omitempty" xml:"Operator,omitempty"`
	// The value of the tag.
	//
	// example:
	//
	// app
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeDispatchRuleResponseBodyDispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupsLabelMatchExpressions) String() string {
	return tea.Prettify(s)
}

func (s DescribeDispatchRuleResponseBodyDispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupsLabelMatchExpressions) GoString() string {
	return s.String()
}

func (s *DescribeDispatchRuleResponseBodyDispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupsLabelMatchExpressions) SetKey(v string) *DescribeDispatchRuleResponseBodyDispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupsLabelMatchExpressions {
	s.Key = &v
	return s
}

func (s *DescribeDispatchRuleResponseBodyDispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupsLabelMatchExpressions) SetOperator(v string) *DescribeDispatchRuleResponseBodyDispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupsLabelMatchExpressions {
	s.Operator = &v
	return s
}

func (s *DescribeDispatchRuleResponseBodyDispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupsLabelMatchExpressions) SetValue(v string) *DescribeDispatchRuleResponseBodyDispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupsLabelMatchExpressions {
	s.Value = &v
	return s
}

type DescribeDispatchRuleResponseBodyDispatchRuleNotifyRules struct {
	// The notification method Array.
	NotifyChannels []*string `json:"NotifyChannels,omitempty" xml:"NotifyChannels,omitempty" type:"Repeated"`
	// The collection of alert contacts.
	NotifyObjects []*DescribeDispatchRuleResponseBodyDispatchRuleNotifyRulesNotifyObjects `json:"NotifyObjects,omitempty" xml:"NotifyObjects,omitempty" type:"Repeated"`
}

func (s DescribeDispatchRuleResponseBodyDispatchRuleNotifyRules) String() string {
	return tea.Prettify(s)
}

func (s DescribeDispatchRuleResponseBodyDispatchRuleNotifyRules) GoString() string {
	return s.String()
}

func (s *DescribeDispatchRuleResponseBodyDispatchRuleNotifyRules) SetNotifyChannels(v []*string) *DescribeDispatchRuleResponseBodyDispatchRuleNotifyRules {
	s.NotifyChannels = v
	return s
}

func (s *DescribeDispatchRuleResponseBodyDispatchRuleNotifyRules) SetNotifyObjects(v []*DescribeDispatchRuleResponseBodyDispatchRuleNotifyRulesNotifyObjects) *DescribeDispatchRuleResponseBodyDispatchRuleNotifyRules {
	s.NotifyObjects = v
	return s
}

type DescribeDispatchRuleResponseBodyDispatchRuleNotifyRulesNotifyObjects struct {
	// The name of the contact or contact group.
	//
	// example:
	//
	// JohnDoe
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The ID of the contact or contact group.
	//
	// example:
	//
	// 1
	NotifyObjectId *string `json:"NotifyObjectId,omitempty" xml:"NotifyObjectId,omitempty"`
	// The type of the alert contact. Valid values:
	//
	// - `CONTACT`: contact
	//
	// - `CONTACT_GROUP`: contact group
	//
	// example:
	//
	// CONTACT
	NotifyType *string `json:"NotifyType,omitempty" xml:"NotifyType,omitempty"`
}

func (s DescribeDispatchRuleResponseBodyDispatchRuleNotifyRulesNotifyObjects) String() string {
	return tea.Prettify(s)
}

func (s DescribeDispatchRuleResponseBodyDispatchRuleNotifyRulesNotifyObjects) GoString() string {
	return s.String()
}

func (s *DescribeDispatchRuleResponseBodyDispatchRuleNotifyRulesNotifyObjects) SetName(v string) *DescribeDispatchRuleResponseBodyDispatchRuleNotifyRulesNotifyObjects {
	s.Name = &v
	return s
}

func (s *DescribeDispatchRuleResponseBodyDispatchRuleNotifyRulesNotifyObjects) SetNotifyObjectId(v string) *DescribeDispatchRuleResponseBodyDispatchRuleNotifyRulesNotifyObjects {
	s.NotifyObjectId = &v
	return s
}

func (s *DescribeDispatchRuleResponseBodyDispatchRuleNotifyRulesNotifyObjects) SetNotifyType(v string) *DescribeDispatchRuleResponseBodyDispatchRuleNotifyRulesNotifyObjects {
	s.NotifyType = &v
	return s
}

type DescribeDispatchRuleResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeDispatchRuleResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeDispatchRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDispatchRuleResponse) GoString() string {
	return s.String()
}

func (s *DescribeDispatchRuleResponse) SetHeaders(v map[string]*string) *DescribeDispatchRuleResponse {
	s.Headers = v
	return s
}

func (s *DescribeDispatchRuleResponse) SetStatusCode(v int32) *DescribeDispatchRuleResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDispatchRuleResponse) SetBody(v *DescribeDispatchRuleResponseBody) *DescribeDispatchRuleResponse {
	s.Body = v
	return s
}

type DescribeEnvCustomJobRequest struct {
	// The name of the custom job.
	//
	// This parameter is required.
	//
	// example:
	//
	// customJob1
	CustomJobName *string `json:"CustomJobName,omitempty" xml:"CustomJobName,omitempty"`
	// Specifies whether to return the encrypted YAML string.
	//
	// example:
	//
	// true
	EncryptYaml *bool `json:"EncryptYaml,omitempty" xml:"EncryptYaml,omitempty"`
	// The ID of the environment instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// env-xxxxxx
	EnvironmentId *string `json:"EnvironmentId,omitempty" xml:"EnvironmentId,omitempty"`
	// The region ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeEnvCustomJobRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnvCustomJobRequest) GoString() string {
	return s.String()
}

func (s *DescribeEnvCustomJobRequest) SetCustomJobName(v string) *DescribeEnvCustomJobRequest {
	s.CustomJobName = &v
	return s
}

func (s *DescribeEnvCustomJobRequest) SetEncryptYaml(v bool) *DescribeEnvCustomJobRequest {
	s.EncryptYaml = &v
	return s
}

func (s *DescribeEnvCustomJobRequest) SetEnvironmentId(v string) *DescribeEnvCustomJobRequest {
	s.EnvironmentId = &v
	return s
}

func (s *DescribeEnvCustomJobRequest) SetRegionId(v string) *DescribeEnvCustomJobRequest {
	s.RegionId = &v
	return s
}

type DescribeEnvCustomJobResponseBody struct {
	// The HTTP status code. The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned struct.
	Data *DescribeEnvCustomJobResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 6A9AEA84-7186-4D8D-B498-4585C6A2****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeEnvCustomJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnvCustomJobResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeEnvCustomJobResponseBody) SetCode(v int32) *DescribeEnvCustomJobResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeEnvCustomJobResponseBody) SetData(v *DescribeEnvCustomJobResponseBodyData) *DescribeEnvCustomJobResponseBody {
	s.Data = v
	return s
}

func (s *DescribeEnvCustomJobResponseBody) SetMessage(v string) *DescribeEnvCustomJobResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeEnvCustomJobResponseBody) SetRequestId(v string) *DescribeEnvCustomJobResponseBody {
	s.RequestId = &v
	return s
}

type DescribeEnvCustomJobResponseBodyData struct {
	// If the request parameter EncryptYaml is set to true, a Base64-encoded YAML string is returned. Otherwise, a plaintext YAML string is returned.
	//
	// example:
	//
	// Refer to supplementary instructions.
	ConfigYaml *string `json:"ConfigYaml,omitempty" xml:"ConfigYaml,omitempty"`
	// The name of the custom job.
	//
	// example:
	//
	// customJob1
	CustomJobName *string `json:"CustomJobName,omitempty" xml:"CustomJobName,omitempty"`
	// The ID of the environment instance.
	//
	// example:
	//
	// env-xxxxx
	EnvironmentId *string `json:"EnvironmentId,omitempty" xml:"EnvironmentId,omitempty"`
	// The region ID.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The status of the custom job. Valid values: run and stop.
	//
	// example:
	//
	// run
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeEnvCustomJobResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnvCustomJobResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeEnvCustomJobResponseBodyData) SetConfigYaml(v string) *DescribeEnvCustomJobResponseBodyData {
	s.ConfigYaml = &v
	return s
}

func (s *DescribeEnvCustomJobResponseBodyData) SetCustomJobName(v string) *DescribeEnvCustomJobResponseBodyData {
	s.CustomJobName = &v
	return s
}

func (s *DescribeEnvCustomJobResponseBodyData) SetEnvironmentId(v string) *DescribeEnvCustomJobResponseBodyData {
	s.EnvironmentId = &v
	return s
}

func (s *DescribeEnvCustomJobResponseBodyData) SetRegionId(v string) *DescribeEnvCustomJobResponseBodyData {
	s.RegionId = &v
	return s
}

func (s *DescribeEnvCustomJobResponseBodyData) SetStatus(v string) *DescribeEnvCustomJobResponseBodyData {
	s.Status = &v
	return s
}

type DescribeEnvCustomJobResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeEnvCustomJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeEnvCustomJobResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnvCustomJobResponse) GoString() string {
	return s.String()
}

func (s *DescribeEnvCustomJobResponse) SetHeaders(v map[string]*string) *DescribeEnvCustomJobResponse {
	s.Headers = v
	return s
}

func (s *DescribeEnvCustomJobResponse) SetStatusCode(v int32) *DescribeEnvCustomJobResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeEnvCustomJobResponse) SetBody(v *DescribeEnvCustomJobResponseBody) *DescribeEnvCustomJobResponse {
	s.Body = v
	return s
}

type DescribeEnvPodMonitorRequest struct {
	// The ID of the environment instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// env-xxxxx
	EnvironmentId *string `json:"EnvironmentId,omitempty" xml:"EnvironmentId,omitempty"`
	// The namespace where the PodMonitor is located.
	//
	// This parameter is required.
	//
	// example:
	//
	// arms-prom
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// The name of the PodMonitor.
	//
	// This parameter is required.
	//
	// example:
	//
	// arms-admin-pm1
	PodMonitorName *string `json:"PodMonitorName,omitempty" xml:"PodMonitorName,omitempty"`
	// The region ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeEnvPodMonitorRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnvPodMonitorRequest) GoString() string {
	return s.String()
}

func (s *DescribeEnvPodMonitorRequest) SetEnvironmentId(v string) *DescribeEnvPodMonitorRequest {
	s.EnvironmentId = &v
	return s
}

func (s *DescribeEnvPodMonitorRequest) SetNamespace(v string) *DescribeEnvPodMonitorRequest {
	s.Namespace = &v
	return s
}

func (s *DescribeEnvPodMonitorRequest) SetPodMonitorName(v string) *DescribeEnvPodMonitorRequest {
	s.PodMonitorName = &v
	return s
}

func (s *DescribeEnvPodMonitorRequest) SetRegionId(v string) *DescribeEnvPodMonitorRequest {
	s.RegionId = &v
	return s
}

type DescribeEnvPodMonitorResponseBody struct {
	// The HTTP status code. The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned struct.
	Data *DescribeEnvPodMonitorResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 1A9C645C-C83F-4C9D-8CCB-29BEC9E1****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeEnvPodMonitorResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnvPodMonitorResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeEnvPodMonitorResponseBody) SetCode(v int32) *DescribeEnvPodMonitorResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeEnvPodMonitorResponseBody) SetData(v *DescribeEnvPodMonitorResponseBodyData) *DescribeEnvPodMonitorResponseBody {
	s.Data = v
	return s
}

func (s *DescribeEnvPodMonitorResponseBody) SetMessage(v string) *DescribeEnvPodMonitorResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeEnvPodMonitorResponseBody) SetRequestId(v string) *DescribeEnvPodMonitorResponseBody {
	s.RequestId = &v
	return s
}

type DescribeEnvPodMonitorResponseBodyData struct {
	// The YAML configuration string of the PodMonitor.
	//
	// example:
	//
	// Refer to supplementary instructions.
	ConfigYaml *string `json:"ConfigYaml,omitempty" xml:"ConfigYaml,omitempty"`
	// The ID of the environment instance.
	//
	// example:
	//
	// env-xxxxx
	EnvironmentId *string `json:"EnvironmentId,omitempty" xml:"EnvironmentId,omitempty"`
	// The namespace.
	//
	// example:
	//
	// arms-prom
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// The name of the PodMonitor.
	//
	// example:
	//
	// podMonitor1
	PodMonitorName *string `json:"PodMonitorName,omitempty" xml:"PodMonitorName,omitempty"`
	// The region ID.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The status of the PodMonitor. Valid values: run and stop.
	//
	// example:
	//
	// run
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeEnvPodMonitorResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnvPodMonitorResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeEnvPodMonitorResponseBodyData) SetConfigYaml(v string) *DescribeEnvPodMonitorResponseBodyData {
	s.ConfigYaml = &v
	return s
}

func (s *DescribeEnvPodMonitorResponseBodyData) SetEnvironmentId(v string) *DescribeEnvPodMonitorResponseBodyData {
	s.EnvironmentId = &v
	return s
}

func (s *DescribeEnvPodMonitorResponseBodyData) SetNamespace(v string) *DescribeEnvPodMonitorResponseBodyData {
	s.Namespace = &v
	return s
}

func (s *DescribeEnvPodMonitorResponseBodyData) SetPodMonitorName(v string) *DescribeEnvPodMonitorResponseBodyData {
	s.PodMonitorName = &v
	return s
}

func (s *DescribeEnvPodMonitorResponseBodyData) SetRegionId(v string) *DescribeEnvPodMonitorResponseBodyData {
	s.RegionId = &v
	return s
}

func (s *DescribeEnvPodMonitorResponseBodyData) SetStatus(v string) *DescribeEnvPodMonitorResponseBodyData {
	s.Status = &v
	return s
}

type DescribeEnvPodMonitorResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeEnvPodMonitorResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeEnvPodMonitorResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnvPodMonitorResponse) GoString() string {
	return s.String()
}

func (s *DescribeEnvPodMonitorResponse) SetHeaders(v map[string]*string) *DescribeEnvPodMonitorResponse {
	s.Headers = v
	return s
}

func (s *DescribeEnvPodMonitorResponse) SetStatusCode(v int32) *DescribeEnvPodMonitorResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeEnvPodMonitorResponse) SetBody(v *DescribeEnvPodMonitorResponseBody) *DescribeEnvPodMonitorResponse {
	s.Body = v
	return s
}

type DescribeEnvServiceMonitorRequest struct {
	// The ID of the environment instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// env-xxxxx
	EnvironmentId *string `json:"EnvironmentId,omitempty" xml:"EnvironmentId,omitempty"`
	// The namespace where the ServiceMonitor is located.
	//
	// This parameter is required.
	//
	// example:
	//
	// arms-prom
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// The region ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The name of the ServiceMonitor.
	//
	// This parameter is required.
	//
	// example:
	//
	// arms-admin1
	ServiceMonitorName *string `json:"ServiceMonitorName,omitempty" xml:"ServiceMonitorName,omitempty"`
}

func (s DescribeEnvServiceMonitorRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnvServiceMonitorRequest) GoString() string {
	return s.String()
}

func (s *DescribeEnvServiceMonitorRequest) SetEnvironmentId(v string) *DescribeEnvServiceMonitorRequest {
	s.EnvironmentId = &v
	return s
}

func (s *DescribeEnvServiceMonitorRequest) SetNamespace(v string) *DescribeEnvServiceMonitorRequest {
	s.Namespace = &v
	return s
}

func (s *DescribeEnvServiceMonitorRequest) SetRegionId(v string) *DescribeEnvServiceMonitorRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeEnvServiceMonitorRequest) SetServiceMonitorName(v string) *DescribeEnvServiceMonitorRequest {
	s.ServiceMonitorName = &v
	return s
}

type DescribeEnvServiceMonitorResponseBody struct {
	// The HTTP status code. The status code 200 indicates that the request was successful. Other status codes indicate that the request failed.
	//
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned struct.
	Data *DescribeEnvServiceMonitorResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 40B10E04-81E8-4643-970D-F1B38F2E****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeEnvServiceMonitorResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnvServiceMonitorResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeEnvServiceMonitorResponseBody) SetCode(v int32) *DescribeEnvServiceMonitorResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeEnvServiceMonitorResponseBody) SetData(v *DescribeEnvServiceMonitorResponseBodyData) *DescribeEnvServiceMonitorResponseBody {
	s.Data = v
	return s
}

func (s *DescribeEnvServiceMonitorResponseBody) SetMessage(v string) *DescribeEnvServiceMonitorResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeEnvServiceMonitorResponseBody) SetRequestId(v string) *DescribeEnvServiceMonitorResponseBody {
	s.RequestId = &v
	return s
}

type DescribeEnvServiceMonitorResponseBodyData struct {
	// The YAML configuration string of the ServiceMonitor.
	//
	// example:
	//
	// Refer to supplementary instructions.
	ConfigYaml *string `json:"ConfigYaml,omitempty" xml:"ConfigYaml,omitempty"`
	// The ID of the environment instance.
	//
	// example:
	//
	// env-xxxxx
	EnvironmentId *string `json:"EnvironmentId,omitempty" xml:"EnvironmentId,omitempty"`
	// The namespace.
	//
	// example:
	//
	// arms-prom
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// The region ID.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The name of the ServiceMonitor.
	//
	// example:
	//
	// serviceMonitor1
	ServiceMonitorName *string `json:"ServiceMonitorName,omitempty" xml:"ServiceMonitorName,omitempty"`
	// The status of the ServiceMonitor. Valid values: run and stop.
	//
	// example:
	//
	// run
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeEnvServiceMonitorResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnvServiceMonitorResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeEnvServiceMonitorResponseBodyData) SetConfigYaml(v string) *DescribeEnvServiceMonitorResponseBodyData {
	s.ConfigYaml = &v
	return s
}

func (s *DescribeEnvServiceMonitorResponseBodyData) SetEnvironmentId(v string) *DescribeEnvServiceMonitorResponseBodyData {
	s.EnvironmentId = &v
	return s
}

func (s *DescribeEnvServiceMonitorResponseBodyData) SetNamespace(v string) *DescribeEnvServiceMonitorResponseBodyData {
	s.Namespace = &v
	return s
}

func (s *DescribeEnvServiceMonitorResponseBodyData) SetRegionId(v string) *DescribeEnvServiceMonitorResponseBodyData {
	s.RegionId = &v
	return s
}

func (s *DescribeEnvServiceMonitorResponseBodyData) SetServiceMonitorName(v string) *DescribeEnvServiceMonitorResponseBodyData {
	s.ServiceMonitorName = &v
	return s
}

func (s *DescribeEnvServiceMonitorResponseBodyData) SetStatus(v string) *DescribeEnvServiceMonitorResponseBodyData {
	s.Status = &v
	return s
}

type DescribeEnvServiceMonitorResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeEnvServiceMonitorResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeEnvServiceMonitorResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnvServiceMonitorResponse) GoString() string {
	return s.String()
}

func (s *DescribeEnvServiceMonitorResponse) SetHeaders(v map[string]*string) *DescribeEnvServiceMonitorResponse {
	s.Headers = v
	return s
}

func (s *DescribeEnvServiceMonitorResponse) SetStatusCode(v int32) *DescribeEnvServiceMonitorResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeEnvServiceMonitorResponse) SetBody(v *DescribeEnvServiceMonitorResponseBody) *DescribeEnvServiceMonitorResponse {
	s.Body = v
	return s
}

type DescribeEnvironmentRequest struct {
	// The ID of the environment instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// env-xxxxx
	EnvironmentId *string `json:"EnvironmentId,omitempty" xml:"EnvironmentId,omitempty"`
	// The region ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeEnvironmentRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnvironmentRequest) GoString() string {
	return s.String()
}

func (s *DescribeEnvironmentRequest) SetEnvironmentId(v string) *DescribeEnvironmentRequest {
	s.EnvironmentId = &v
	return s
}

func (s *DescribeEnvironmentRequest) SetRegionId(v string) *DescribeEnvironmentRequest {
	s.RegionId = &v
	return s
}

type DescribeEnvironmentResponseBody struct {
	// The HTTP status code. The status code 200 indicates that the request was successful. Other status codes indicate that the request failed.
	//
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned struct.
	Data *DescribeEnvironmentResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// example:
	//
	// message
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// C21AB7CF-B7AF-410F-BD61-82D1567F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeEnvironmentResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnvironmentResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeEnvironmentResponseBody) SetCode(v int32) *DescribeEnvironmentResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeEnvironmentResponseBody) SetData(v *DescribeEnvironmentResponseBodyData) *DescribeEnvironmentResponseBody {
	s.Data = v
	return s
}

func (s *DescribeEnvironmentResponseBody) SetMessage(v string) *DescribeEnvironmentResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeEnvironmentResponseBody) SetRequestId(v string) *DescribeEnvironmentResponseBody {
	s.RequestId = &v
	return s
}

type DescribeEnvironmentResponseBodyData struct {
	// The ID of the resource associated with the environment, such as the ACK cluster ID or VPC ID.
	//
	// example:
	//
	// vpc-xxxxx
	BindResourceId *string `json:"BindResourceId,omitempty" xml:"BindResourceId,omitempty"`
	// The profile of the resource.
	//
	// example:
	//
	// Default
	BindResourceProfile *string `json:"BindResourceProfile,omitempty" xml:"BindResourceProfile,omitempty"`
	// The status of the resource.
	//
	// example:
	//
	// running
	BindResourceStatus *string `json:"BindResourceStatus,omitempty" xml:"BindResourceStatus,omitempty"`
	// The retention period of the resource. Unit: days.
	//
	// example:
	//
	// 15
	BindResourceStoreDuration *string `json:"BindResourceStoreDuration,omitempty" xml:"BindResourceStoreDuration,omitempty"`
	// The resource type.
	//
	// example:
	//
	// ECS
	BindResourceType *string `json:"BindResourceType,omitempty" xml:"BindResourceType,omitempty"`
	// The VPC CIDR block.
	//
	// example:
	//
	// 192.168.0.0/16
	BindVpcCidr *string `json:"BindVpcCidr,omitempty" xml:"BindVpcCidr,omitempty"`
	// The status of the database that is bound to the Prometheus instance.
	//
	// Valid values:
	//
	// 	- UNINSTALLING
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- INSTALLING
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- UNINSTALLED
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- RUNNING
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- MODIFYING
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// RUNNING
	DbInstanceStatus *string `json:"DbInstanceStatus,omitempty" xml:"DbInstanceStatus,omitempty"`
	// The ID of the environment instance.
	//
	// example:
	//
	// env-xxxxx
	EnvironmentId *string `json:"EnvironmentId,omitempty" xml:"EnvironmentId,omitempty"`
	// The environment name.
	//
	// example:
	//
	// env1
	EnvironmentName *string `json:"EnvironmentName,omitempty" xml:"EnvironmentName,omitempty"`
	// Environment subtypes:
	//
	// - CS: Currently supports ACK.
	//
	// - ECS: ECS is currently supported.
	//
	// - Cloud: Currently supports Cloud.
	//
	// example:
	//
	// ACK
	EnvironmentSubType *string `json:"EnvironmentSubType,omitempty" xml:"EnvironmentSubType,omitempty"`
	// The type of the environment. Valid values:
	//
	// 	- CS: Container Service for Kubernetes (ACK)
	//
	// 	- ECS: Elastic Compute Service
	//
	// 	- Cloud: cloud service
	//
	// example:
	//
	// CS
	EnvironmentType *string `json:"EnvironmentType,omitempty" xml:"EnvironmentType,omitempty"`
	// The payable resource plan. Valid values:
	//
	// 	- If the EnvironmentType parameter is set to CS, set the value to CS_Basic or CS_Pro.
	//
	// 	- Otherwise, leave the parameter empty.
	//
	// example:
	//
	// CS_Basic
	FeePackage *string `json:"FeePackage,omitempty" xml:"FeePackage,omitempty"`
	// The name of the Grafana data source.
	//
	// example:
	//
	// datasource1
	GrafaDataSourceName *string `json:"GrafaDataSourceName,omitempty" xml:"GrafaDataSourceName,omitempty"`
	// The unique ID of the Grafana data source.
	//
	// example:
	//
	// zuvw
	GrafanaDatasourceUid *string `json:"GrafanaDatasourceUid,omitempty" xml:"GrafanaDatasourceUid,omitempty"`
	// The name of the Grafana directory.
	//
	// example:
	//
	// folder1
	GrafanaFolderTitle *string `json:"GrafanaFolderTitle,omitempty" xml:"GrafanaFolderTitle,omitempty"`
	// The unique ID of the Grafana directory.
	//
	// example:
	//
	// xyz
	GrafanaFolderUid *string `json:"GrafanaFolderUid,omitempty" xml:"GrafanaFolderUid,omitempty"`
	// The URL of the Grafana directory.
	//
	// example:
	//
	// https://g.console.aliyun.com/dashboards/f/xxx/yyyy
	GrafanaFolderUrl *string `json:"GrafanaFolderUrl,omitempty" xml:"GrafanaFolderUrl,omitempty"`
	// grafana工作区id
	//
	// example:
	//
	// grafana-cn-27a3m8eem0a
	GrafanaWorkspaceId *string `json:"GrafanaWorkspaceId,omitempty" xml:"GrafanaWorkspaceId,omitempty"`
	// managed type:
	//
	// - none: unmanaged. The default value for ACK clusters.
	//
	// - agent: managed agent (including KSM). The default values for ASK, ACS, and AckOne clusters.
	//
	// - agent-exporter: managed agent and exporters. The default value for the cloud service type.
	//
	// example:
	//
	// none
	ManagedType *string `json:"ManagedType,omitempty" xml:"ManagedType,omitempty"`
	// The ID of the Prometheus instance.
	//
	// example:
	//
	// xxxxyyyyyzzzzz
	PrometheusInstanceId *string `json:"PrometheusInstanceId,omitempty" xml:"PrometheusInstanceId,omitempty"`
	// The name of the Prometheus instance.
	//
	// example:
	//
	// name1
	PrometheusInstanceName *string `json:"PrometheusInstanceName,omitempty" xml:"PrometheusInstanceName,omitempty"`
	// The region ID.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the resource group.
	//
	// example:
	//
	// rg-aek2vezare****
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	// The tags.
	Tags []*DescribeEnvironmentResponseBodyDataTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
	// The user ID.
	//
	// example:
	//
	// 13002222xxxx
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	// The VPC ID.
	//
	// example:
	//
	// vpc-8vb02uk57qbcktqcvqqqj
	VpcId *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
}

func (s DescribeEnvironmentResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnvironmentResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeEnvironmentResponseBodyData) SetBindResourceId(v string) *DescribeEnvironmentResponseBodyData {
	s.BindResourceId = &v
	return s
}

func (s *DescribeEnvironmentResponseBodyData) SetBindResourceProfile(v string) *DescribeEnvironmentResponseBodyData {
	s.BindResourceProfile = &v
	return s
}

func (s *DescribeEnvironmentResponseBodyData) SetBindResourceStatus(v string) *DescribeEnvironmentResponseBodyData {
	s.BindResourceStatus = &v
	return s
}

func (s *DescribeEnvironmentResponseBodyData) SetBindResourceStoreDuration(v string) *DescribeEnvironmentResponseBodyData {
	s.BindResourceStoreDuration = &v
	return s
}

func (s *DescribeEnvironmentResponseBodyData) SetBindResourceType(v string) *DescribeEnvironmentResponseBodyData {
	s.BindResourceType = &v
	return s
}

func (s *DescribeEnvironmentResponseBodyData) SetBindVpcCidr(v string) *DescribeEnvironmentResponseBodyData {
	s.BindVpcCidr = &v
	return s
}

func (s *DescribeEnvironmentResponseBodyData) SetDbInstanceStatus(v string) *DescribeEnvironmentResponseBodyData {
	s.DbInstanceStatus = &v
	return s
}

func (s *DescribeEnvironmentResponseBodyData) SetEnvironmentId(v string) *DescribeEnvironmentResponseBodyData {
	s.EnvironmentId = &v
	return s
}

func (s *DescribeEnvironmentResponseBodyData) SetEnvironmentName(v string) *DescribeEnvironmentResponseBodyData {
	s.EnvironmentName = &v
	return s
}

func (s *DescribeEnvironmentResponseBodyData) SetEnvironmentSubType(v string) *DescribeEnvironmentResponseBodyData {
	s.EnvironmentSubType = &v
	return s
}

func (s *DescribeEnvironmentResponseBodyData) SetEnvironmentType(v string) *DescribeEnvironmentResponseBodyData {
	s.EnvironmentType = &v
	return s
}

func (s *DescribeEnvironmentResponseBodyData) SetFeePackage(v string) *DescribeEnvironmentResponseBodyData {
	s.FeePackage = &v
	return s
}

func (s *DescribeEnvironmentResponseBodyData) SetGrafaDataSourceName(v string) *DescribeEnvironmentResponseBodyData {
	s.GrafaDataSourceName = &v
	return s
}

func (s *DescribeEnvironmentResponseBodyData) SetGrafanaDatasourceUid(v string) *DescribeEnvironmentResponseBodyData {
	s.GrafanaDatasourceUid = &v
	return s
}

func (s *DescribeEnvironmentResponseBodyData) SetGrafanaFolderTitle(v string) *DescribeEnvironmentResponseBodyData {
	s.GrafanaFolderTitle = &v
	return s
}

func (s *DescribeEnvironmentResponseBodyData) SetGrafanaFolderUid(v string) *DescribeEnvironmentResponseBodyData {
	s.GrafanaFolderUid = &v
	return s
}

func (s *DescribeEnvironmentResponseBodyData) SetGrafanaFolderUrl(v string) *DescribeEnvironmentResponseBodyData {
	s.GrafanaFolderUrl = &v
	return s
}

func (s *DescribeEnvironmentResponseBodyData) SetGrafanaWorkspaceId(v string) *DescribeEnvironmentResponseBodyData {
	s.GrafanaWorkspaceId = &v
	return s
}

func (s *DescribeEnvironmentResponseBodyData) SetManagedType(v string) *DescribeEnvironmentResponseBodyData {
	s.ManagedType = &v
	return s
}

func (s *DescribeEnvironmentResponseBodyData) SetPrometheusInstanceId(v string) *DescribeEnvironmentResponseBodyData {
	s.PrometheusInstanceId = &v
	return s
}

func (s *DescribeEnvironmentResponseBodyData) SetPrometheusInstanceName(v string) *DescribeEnvironmentResponseBodyData {
	s.PrometheusInstanceName = &v
	return s
}

func (s *DescribeEnvironmentResponseBodyData) SetRegionId(v string) *DescribeEnvironmentResponseBodyData {
	s.RegionId = &v
	return s
}

func (s *DescribeEnvironmentResponseBodyData) SetResourceGroupId(v string) *DescribeEnvironmentResponseBodyData {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeEnvironmentResponseBodyData) SetTags(v []*DescribeEnvironmentResponseBodyDataTags) *DescribeEnvironmentResponseBodyData {
	s.Tags = v
	return s
}

func (s *DescribeEnvironmentResponseBodyData) SetUserId(v string) *DescribeEnvironmentResponseBodyData {
	s.UserId = &v
	return s
}

func (s *DescribeEnvironmentResponseBodyData) SetVpcId(v string) *DescribeEnvironmentResponseBodyData {
	s.VpcId = &v
	return s
}

type DescribeEnvironmentResponseBodyDataTags struct {
	// The key of the tag.
	//
	// example:
	//
	// user1
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The value of the tag
	//
	// example:
	//
	// p_dev
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeEnvironmentResponseBodyDataTags) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnvironmentResponseBodyDataTags) GoString() string {
	return s.String()
}

func (s *DescribeEnvironmentResponseBodyDataTags) SetKey(v string) *DescribeEnvironmentResponseBodyDataTags {
	s.Key = &v
	return s
}

func (s *DescribeEnvironmentResponseBodyDataTags) SetValue(v string) *DescribeEnvironmentResponseBodyDataTags {
	s.Value = &v
	return s
}

type DescribeEnvironmentResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeEnvironmentResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeEnvironmentResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnvironmentResponse) GoString() string {
	return s.String()
}

func (s *DescribeEnvironmentResponse) SetHeaders(v map[string]*string) *DescribeEnvironmentResponse {
	s.Headers = v
	return s
}

func (s *DescribeEnvironmentResponse) SetStatusCode(v int32) *DescribeEnvironmentResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeEnvironmentResponse) SetBody(v *DescribeEnvironmentResponseBody) *DescribeEnvironmentResponse {
	s.Body = v
	return s
}

type DescribeEnvironmentFeatureRequest struct {
	AliyunLang *string `json:"AliyunLang,omitempty" xml:"AliyunLang,omitempty"`
	// The environment ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// env-xxx
	EnvironmentId *string `json:"EnvironmentId,omitempty" xml:"EnvironmentId,omitempty"`
	// The name of the feature.
	//
	// Valid values:
	//
	// 	- app-agent-pilot
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- metric-agent
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// This parameter is required.
	//
	// example:
	//
	// metric-agent
	FeatureName *string `json:"FeatureName,omitempty" xml:"FeatureName,omitempty"`
	// The region ID.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeEnvironmentFeatureRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnvironmentFeatureRequest) GoString() string {
	return s.String()
}

func (s *DescribeEnvironmentFeatureRequest) SetAliyunLang(v string) *DescribeEnvironmentFeatureRequest {
	s.AliyunLang = &v
	return s
}

func (s *DescribeEnvironmentFeatureRequest) SetEnvironmentId(v string) *DescribeEnvironmentFeatureRequest {
	s.EnvironmentId = &v
	return s
}

func (s *DescribeEnvironmentFeatureRequest) SetFeatureName(v string) *DescribeEnvironmentFeatureRequest {
	s.FeatureName = &v
	return s
}

func (s *DescribeEnvironmentFeatureRequest) SetRegionId(v string) *DescribeEnvironmentFeatureRequest {
	s.RegionId = &v
	return s
}

type DescribeEnvironmentFeatureResponseBody struct {
	// The HTTP status code. The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned struct.
	Data *DescribeEnvironmentFeatureResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 01FF8DD9-A09C-47A1-895A-B6E321BE77B6
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values: true and false.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeEnvironmentFeatureResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnvironmentFeatureResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeEnvironmentFeatureResponseBody) SetCode(v int32) *DescribeEnvironmentFeatureResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeEnvironmentFeatureResponseBody) SetData(v *DescribeEnvironmentFeatureResponseBodyData) *DescribeEnvironmentFeatureResponseBody {
	s.Data = v
	return s
}

func (s *DescribeEnvironmentFeatureResponseBody) SetMessage(v string) *DescribeEnvironmentFeatureResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeEnvironmentFeatureResponseBody) SetRequestId(v string) *DescribeEnvironmentFeatureResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeEnvironmentFeatureResponseBody) SetSuccess(v bool) *DescribeEnvironmentFeatureResponseBody {
	s.Success = &v
	return s
}

type DescribeEnvironmentFeatureResponseBodyData struct {
	// The installation information of the feature.
	Feature *DescribeEnvironmentFeatureResponseBodyDataFeature `json:"Feature,omitempty" xml:"Feature,omitempty" type:"Struct"`
	// The status of the feature.
	FeatureStatus *DescribeEnvironmentFeatureResponseBodyDataFeatureStatus `json:"FeatureStatus,omitempty" xml:"FeatureStatus,omitempty" type:"Struct"`
}

func (s DescribeEnvironmentFeatureResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnvironmentFeatureResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeEnvironmentFeatureResponseBodyData) SetFeature(v *DescribeEnvironmentFeatureResponseBodyDataFeature) *DescribeEnvironmentFeatureResponseBodyData {
	s.Feature = v
	return s
}

func (s *DescribeEnvironmentFeatureResponseBodyData) SetFeatureStatus(v *DescribeEnvironmentFeatureResponseBodyDataFeatureStatus) *DescribeEnvironmentFeatureResponseBodyData {
	s.FeatureStatus = v
	return s
}

type DescribeEnvironmentFeatureResponseBodyDataFeature struct {
	// The alias of the feature.
	//
	// example:
	//
	// Prometheus agent.
	Alias *string `json:"Alias,omitempty" xml:"Alias,omitempty"`
	// The configuration of the feature.
	Config map[string]*string `json:"Config,omitempty" xml:"Config,omitempty"`
	// The description of the feature.
	//
	// example:
	//
	// Collect Metric data using the Prometheus collection specification.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The environment ID.
	//
	// example:
	//
	// env-xxxxx
	EnvironmentId *string `json:"EnvironmentId,omitempty" xml:"EnvironmentId,omitempty"`
	// The URL of the icon.
	//
	// example:
	//
	// http://xxx
	Icon *string `json:"Icon,omitempty" xml:"Icon,omitempty"`
	// The language.
	//
	// example:
	//
	// zh
	Language *string `json:"Language,omitempty" xml:"Language,omitempty"`
	// The latest version number.
	//
	// example:
	//
	// 1.1.17
	LatestVersion *string `json:"LatestVersion,omitempty" xml:"LatestVersion,omitempty"`
	// Whether or not it is a managed component.
	Managed *bool `json:"Managed,omitempty" xml:"Managed,omitempty"`
	// The name of the feature.
	//
	// example:
	//
	// metric-agent
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The status.
	//
	// example:
	//
	// Success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The version number.
	//
	// example:
	//
	// 1.1.17
	Version *string `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s DescribeEnvironmentFeatureResponseBodyDataFeature) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnvironmentFeatureResponseBodyDataFeature) GoString() string {
	return s.String()
}

func (s *DescribeEnvironmentFeatureResponseBodyDataFeature) SetAlias(v string) *DescribeEnvironmentFeatureResponseBodyDataFeature {
	s.Alias = &v
	return s
}

func (s *DescribeEnvironmentFeatureResponseBodyDataFeature) SetConfig(v map[string]*string) *DescribeEnvironmentFeatureResponseBodyDataFeature {
	s.Config = v
	return s
}

func (s *DescribeEnvironmentFeatureResponseBodyDataFeature) SetDescription(v string) *DescribeEnvironmentFeatureResponseBodyDataFeature {
	s.Description = &v
	return s
}

func (s *DescribeEnvironmentFeatureResponseBodyDataFeature) SetEnvironmentId(v string) *DescribeEnvironmentFeatureResponseBodyDataFeature {
	s.EnvironmentId = &v
	return s
}

func (s *DescribeEnvironmentFeatureResponseBodyDataFeature) SetIcon(v string) *DescribeEnvironmentFeatureResponseBodyDataFeature {
	s.Icon = &v
	return s
}

func (s *DescribeEnvironmentFeatureResponseBodyDataFeature) SetLanguage(v string) *DescribeEnvironmentFeatureResponseBodyDataFeature {
	s.Language = &v
	return s
}

func (s *DescribeEnvironmentFeatureResponseBodyDataFeature) SetLatestVersion(v string) *DescribeEnvironmentFeatureResponseBodyDataFeature {
	s.LatestVersion = &v
	return s
}

func (s *DescribeEnvironmentFeatureResponseBodyDataFeature) SetManaged(v bool) *DescribeEnvironmentFeatureResponseBodyDataFeature {
	s.Managed = &v
	return s
}

func (s *DescribeEnvironmentFeatureResponseBodyDataFeature) SetName(v string) *DescribeEnvironmentFeatureResponseBodyDataFeature {
	s.Name = &v
	return s
}

func (s *DescribeEnvironmentFeatureResponseBodyDataFeature) SetStatus(v string) *DescribeEnvironmentFeatureResponseBodyDataFeature {
	s.Status = &v
	return s
}

func (s *DescribeEnvironmentFeatureResponseBodyDataFeature) SetVersion(v string) *DescribeEnvironmentFeatureResponseBodyDataFeature {
	s.Version = &v
	return s
}

type DescribeEnvironmentFeatureResponseBodyDataFeatureStatus struct {
	BindResourceId *string `json:"BindResourceId,omitempty" xml:"BindResourceId,omitempty"`
	// The containers of the feature.
	FeatureContainers []*DescribeEnvironmentFeatureResponseBodyDataFeatureStatusFeatureContainers `json:"FeatureContainers,omitempty" xml:"FeatureContainers,omitempty" type:"Repeated"`
	Ips               []*string                                                                   `json:"Ips,omitempty" xml:"Ips,omitempty" type:"Repeated"`
	// The Kubernetes resource name of the feature.
	//
	// example:
	//
	// arms-prometheus-ack-arms-prometheus
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The namespace.
	//
	// example:
	//
	// arms-prom
	Namespace       *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	SecurityGroupId *string `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
	// The status of the agent. Valid values:
	//
	// 	- Success: The agent is running.
	//
	// 	- Failed: The agent failed to run.
	//
	// 	- Not Found: The agent is not installed.
	//
	// example:
	//
	// Success
	Status    *string `json:"Status,omitempty" xml:"Status,omitempty"`
	VSwitchId *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
}

func (s DescribeEnvironmentFeatureResponseBodyDataFeatureStatus) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnvironmentFeatureResponseBodyDataFeatureStatus) GoString() string {
	return s.String()
}

func (s *DescribeEnvironmentFeatureResponseBodyDataFeatureStatus) SetBindResourceId(v string) *DescribeEnvironmentFeatureResponseBodyDataFeatureStatus {
	s.BindResourceId = &v
	return s
}

func (s *DescribeEnvironmentFeatureResponseBodyDataFeatureStatus) SetFeatureContainers(v []*DescribeEnvironmentFeatureResponseBodyDataFeatureStatusFeatureContainers) *DescribeEnvironmentFeatureResponseBodyDataFeatureStatus {
	s.FeatureContainers = v
	return s
}

func (s *DescribeEnvironmentFeatureResponseBodyDataFeatureStatus) SetIps(v []*string) *DescribeEnvironmentFeatureResponseBodyDataFeatureStatus {
	s.Ips = v
	return s
}

func (s *DescribeEnvironmentFeatureResponseBodyDataFeatureStatus) SetName(v string) *DescribeEnvironmentFeatureResponseBodyDataFeatureStatus {
	s.Name = &v
	return s
}

func (s *DescribeEnvironmentFeatureResponseBodyDataFeatureStatus) SetNamespace(v string) *DescribeEnvironmentFeatureResponseBodyDataFeatureStatus {
	s.Namespace = &v
	return s
}

func (s *DescribeEnvironmentFeatureResponseBodyDataFeatureStatus) SetSecurityGroupId(v string) *DescribeEnvironmentFeatureResponseBodyDataFeatureStatus {
	s.SecurityGroupId = &v
	return s
}

func (s *DescribeEnvironmentFeatureResponseBodyDataFeatureStatus) SetStatus(v string) *DescribeEnvironmentFeatureResponseBodyDataFeatureStatus {
	s.Status = &v
	return s
}

func (s *DescribeEnvironmentFeatureResponseBodyDataFeatureStatus) SetVSwitchId(v string) *DescribeEnvironmentFeatureResponseBodyDataFeatureStatus {
	s.VSwitchId = &v
	return s
}

type DescribeEnvironmentFeatureResponseBodyDataFeatureStatusFeatureContainers struct {
	// The container parameters.
	Args []*string `json:"Args,omitempty" xml:"Args,omitempty" type:"Repeated"`
	// The image of the container.
	//
	// example:
	//
	// registry-cn-hangzhou-vpc.ack.aliyuncs.com/acs/arms-prometheus-agent:v4.0.0
	Image *string `json:"Image,omitempty" xml:"Image,omitempty"`
	// The name of the container.
	//
	// example:
	//
	// arms-prometheus-operator
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s DescribeEnvironmentFeatureResponseBodyDataFeatureStatusFeatureContainers) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnvironmentFeatureResponseBodyDataFeatureStatusFeatureContainers) GoString() string {
	return s.String()
}

func (s *DescribeEnvironmentFeatureResponseBodyDataFeatureStatusFeatureContainers) SetArgs(v []*string) *DescribeEnvironmentFeatureResponseBodyDataFeatureStatusFeatureContainers {
	s.Args = v
	return s
}

func (s *DescribeEnvironmentFeatureResponseBodyDataFeatureStatusFeatureContainers) SetImage(v string) *DescribeEnvironmentFeatureResponseBodyDataFeatureStatusFeatureContainers {
	s.Image = &v
	return s
}

func (s *DescribeEnvironmentFeatureResponseBodyDataFeatureStatusFeatureContainers) SetName(v string) *DescribeEnvironmentFeatureResponseBodyDataFeatureStatusFeatureContainers {
	s.Name = &v
	return s
}

type DescribeEnvironmentFeatureResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeEnvironmentFeatureResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeEnvironmentFeatureResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnvironmentFeatureResponse) GoString() string {
	return s.String()
}

func (s *DescribeEnvironmentFeatureResponse) SetHeaders(v map[string]*string) *DescribeEnvironmentFeatureResponse {
	s.Headers = v
	return s
}

func (s *DescribeEnvironmentFeatureResponse) SetStatusCode(v int32) *DescribeEnvironmentFeatureResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeEnvironmentFeatureResponse) SetBody(v *DescribeEnvironmentFeatureResponseBody) *DescribeEnvironmentFeatureResponse {
	s.Body = v
	return s
}

type DescribeIMRobotsRequest struct {
	// The number of the page to return.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	Page *int64 `json:"Page,omitempty" xml:"Page,omitempty"`
	// The chatbot IDs.
	//
	// example:
	//
	// 123
	RobotIds *string `json:"RobotIds,omitempty" xml:"RobotIds,omitempty"`
	// The name of the IM chatbot.
	//
	// example:
	//
	// Chatbot name
	RobotName *string `json:"RobotName,omitempty" xml:"RobotName,omitempty"`
	// The number of IM chatbots to return on each page.
	//
	// This parameter is required.
	//
	// example:
	//
	// 20
	Size *int64 `json:"Size,omitempty" xml:"Size,omitempty"`
}

func (s DescribeIMRobotsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeIMRobotsRequest) GoString() string {
	return s.String()
}

func (s *DescribeIMRobotsRequest) SetPage(v int64) *DescribeIMRobotsRequest {
	s.Page = &v
	return s
}

func (s *DescribeIMRobotsRequest) SetRobotIds(v string) *DescribeIMRobotsRequest {
	s.RobotIds = &v
	return s
}

func (s *DescribeIMRobotsRequest) SetRobotName(v string) *DescribeIMRobotsRequest {
	s.RobotName = &v
	return s
}

func (s *DescribeIMRobotsRequest) SetSize(v int64) *DescribeIMRobotsRequest {
	s.Size = &v
	return s
}

type DescribeIMRobotsResponseBody struct {
	// The returned objects.
	PageBean *DescribeIMRobotsResponseBodyPageBean `json:"PageBean,omitempty" xml:"PageBean,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// 4D6C358A-A58B-4F4B-94CE-F5AAF023****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeIMRobotsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeIMRobotsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeIMRobotsResponseBody) SetPageBean(v *DescribeIMRobotsResponseBodyPageBean) *DescribeIMRobotsResponseBody {
	s.PageBean = v
	return s
}

func (s *DescribeIMRobotsResponseBody) SetRequestId(v string) *DescribeIMRobotsResponseBody {
	s.RequestId = &v
	return s
}

type DescribeIMRobotsResponseBodyPageBean struct {
	// The queried IM chatbots.
	AlertIMRobots []*DescribeIMRobotsResponseBodyPageBeanAlertIMRobots `json:"AlertIMRobots,omitempty" xml:"AlertIMRobots,omitempty" type:"Repeated"`
	// The page number of the returned page.
	//
	// example:
	//
	// 1
	Page *int64 `json:"Page,omitempty" xml:"Page,omitempty"`
	// The number of IM chatbots returned per page.
	//
	// example:
	//
	// 20
	Size *int64 `json:"Size,omitempty" xml:"Size,omitempty"`
	// The total number of queried IM chatbots.
	//
	// example:
	//
	// 1
	Total *int64 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s DescribeIMRobotsResponseBodyPageBean) String() string {
	return tea.Prettify(s)
}

func (s DescribeIMRobotsResponseBodyPageBean) GoString() string {
	return s.String()
}

func (s *DescribeIMRobotsResponseBodyPageBean) SetAlertIMRobots(v []*DescribeIMRobotsResponseBodyPageBeanAlertIMRobots) *DescribeIMRobotsResponseBodyPageBean {
	s.AlertIMRobots = v
	return s
}

func (s *DescribeIMRobotsResponseBodyPageBean) SetPage(v int64) *DescribeIMRobotsResponseBodyPageBean {
	s.Page = &v
	return s
}

func (s *DescribeIMRobotsResponseBodyPageBean) SetSize(v int64) *DescribeIMRobotsResponseBodyPageBean {
	s.Size = &v
	return s
}

func (s *DescribeIMRobotsResponseBodyPageBean) SetTotal(v int64) *DescribeIMRobotsResponseBodyPageBean {
	s.Total = &v
	return s
}

type DescribeIMRobotsResponseBodyPageBeanAlertIMRobots struct {
	// The time when the IM chatbot was created.
	//
	// example:
	//
	// 2023-01-16 17:21:48
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// Indicates whether daily statistics are sent. Valid values:
	//
	// 	- `false` (default): Daily statistics are not sent.
	//
	// 	- `true`: Daily statistics are sent.
	//
	// example:
	//
	// true
	DailyNoc *bool `json:"DailyNoc,omitempty" xml:"DailyNoc,omitempty"`
	// The point in time at which the daily statistics are sent. The information that ARMS sends at the specified points in time includes the total number of alerts generated on the current day, the number of cleared alerts, and the number of alerts to be cleared.
	//
	// example:
	//
	// 09:30,17:30
	DailyNocTime *string `json:"DailyNocTime,omitempty" xml:"DailyNocTime,omitempty"`
	// The signature key of DingTalk. If you specify a signature key, DingTalk authentication is performed by using the signature key. If you do not specify a signature key, a whitelist is used for authentication by default. The keyword of the whitelist is **Alert**.
	//
	// example:
	//
	// ******
	DingSignKey *string `json:"DingSignKey,omitempty" xml:"DingSignKey,omitempty"`
	// The notification policies.
	DispatchRules []*DescribeIMRobotsResponseBodyPageBeanAlertIMRobotsDispatchRules `json:"DispatchRules,omitempty" xml:"DispatchRules,omitempty" type:"Repeated"`
	// The webhook URL of the IM chatbot.
	//
	// example:
	//
	// https://oapi.dingtalk.com/robot/send?access_token=e1a049121******
	RobotAddr *string `json:"RobotAddr,omitempty" xml:"RobotAddr,omitempty"`
	// The ID of the IM chatbot.
	//
	// example:
	//
	// 123
	RobotId *float32 `json:"RobotId,omitempty" xml:"RobotId,omitempty"`
	// The name of the IM chatbot.
	//
	// example:
	//
	// Chatbot name
	RobotName *string `json:"RobotName,omitempty" xml:"RobotName,omitempty"`
	// The type of the IM chatbot. Valid values:
	//
	// 	- `dingding`: DingTalk chatbot
	//
	// 	- `wechat`: WeCom chatbot
	//
	// example:
	//
	// dingding
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeIMRobotsResponseBodyPageBeanAlertIMRobots) String() string {
	return tea.Prettify(s)
}

func (s DescribeIMRobotsResponseBodyPageBeanAlertIMRobots) GoString() string {
	return s.String()
}

func (s *DescribeIMRobotsResponseBodyPageBeanAlertIMRobots) SetCreateTime(v string) *DescribeIMRobotsResponseBodyPageBeanAlertIMRobots {
	s.CreateTime = &v
	return s
}

func (s *DescribeIMRobotsResponseBodyPageBeanAlertIMRobots) SetDailyNoc(v bool) *DescribeIMRobotsResponseBodyPageBeanAlertIMRobots {
	s.DailyNoc = &v
	return s
}

func (s *DescribeIMRobotsResponseBodyPageBeanAlertIMRobots) SetDailyNocTime(v string) *DescribeIMRobotsResponseBodyPageBeanAlertIMRobots {
	s.DailyNocTime = &v
	return s
}

func (s *DescribeIMRobotsResponseBodyPageBeanAlertIMRobots) SetDingSignKey(v string) *DescribeIMRobotsResponseBodyPageBeanAlertIMRobots {
	s.DingSignKey = &v
	return s
}

func (s *DescribeIMRobotsResponseBodyPageBeanAlertIMRobots) SetDispatchRules(v []*DescribeIMRobotsResponseBodyPageBeanAlertIMRobotsDispatchRules) *DescribeIMRobotsResponseBodyPageBeanAlertIMRobots {
	s.DispatchRules = v
	return s
}

func (s *DescribeIMRobotsResponseBodyPageBeanAlertIMRobots) SetRobotAddr(v string) *DescribeIMRobotsResponseBodyPageBeanAlertIMRobots {
	s.RobotAddr = &v
	return s
}

func (s *DescribeIMRobotsResponseBodyPageBeanAlertIMRobots) SetRobotId(v float32) *DescribeIMRobotsResponseBodyPageBeanAlertIMRobots {
	s.RobotId = &v
	return s
}

func (s *DescribeIMRobotsResponseBodyPageBeanAlertIMRobots) SetRobotName(v string) *DescribeIMRobotsResponseBodyPageBeanAlertIMRobots {
	s.RobotName = &v
	return s
}

func (s *DescribeIMRobotsResponseBodyPageBeanAlertIMRobots) SetType(v string) *DescribeIMRobotsResponseBodyPageBeanAlertIMRobots {
	s.Type = &v
	return s
}

type DescribeIMRobotsResponseBodyPageBeanAlertIMRobotsDispatchRules struct {
	// The ID of the notification policy.
	//
	// example:
	//
	// 12345
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// The name of the notification policy.
	//
	// example:
	//
	// Notification policy test
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
}

func (s DescribeIMRobotsResponseBodyPageBeanAlertIMRobotsDispatchRules) String() string {
	return tea.Prettify(s)
}

func (s DescribeIMRobotsResponseBodyPageBeanAlertIMRobotsDispatchRules) GoString() string {
	return s.String()
}

func (s *DescribeIMRobotsResponseBodyPageBeanAlertIMRobotsDispatchRules) SetId(v int64) *DescribeIMRobotsResponseBodyPageBeanAlertIMRobotsDispatchRules {
	s.Id = &v
	return s
}

func (s *DescribeIMRobotsResponseBodyPageBeanAlertIMRobotsDispatchRules) SetName(v string) *DescribeIMRobotsResponseBodyPageBeanAlertIMRobotsDispatchRules {
	s.Name = &v
	return s
}

type DescribeIMRobotsResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeIMRobotsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeIMRobotsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeIMRobotsResponse) GoString() string {
	return s.String()
}

func (s *DescribeIMRobotsResponse) SetHeaders(v map[string]*string) *DescribeIMRobotsResponse {
	s.Headers = v
	return s
}

func (s *DescribeIMRobotsResponse) SetStatusCode(v int32) *DescribeIMRobotsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeIMRobotsResponse) SetBody(v *DescribeIMRobotsResponseBody) *DescribeIMRobotsResponse {
	s.Body = v
	return s
}

type DescribePrometheusAlertRuleRequest struct {
	// The ID of the alert rule. You can call the ListPrometheusAlertRules operation to query the ID of the alert rule.
	//
	// This parameter is required.
	//
	// example:
	//
	// 3888704
	AlertId   *int64  `json:"AlertId,omitempty" xml:"AlertId,omitempty"`
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
}

func (s DescribePrometheusAlertRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribePrometheusAlertRuleRequest) GoString() string {
	return s.String()
}

func (s *DescribePrometheusAlertRuleRequest) SetAlertId(v int64) *DescribePrometheusAlertRuleRequest {
	s.AlertId = &v
	return s
}

func (s *DescribePrometheusAlertRuleRequest) SetClusterId(v string) *DescribePrometheusAlertRuleRequest {
	s.ClusterId = &v
	return s
}

type DescribePrometheusAlertRuleResponseBody struct {
	Code    *int64  `json:"Code,omitempty" xml:"Code,omitempty"`
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The returned struct.
	PrometheusAlertRule *DescribePrometheusAlertRuleResponseBodyPrometheusAlertRule `json:"PrometheusAlertRule,omitempty" xml:"PrometheusAlertRule,omitempty" type:"Struct"`
	// The ID of the request.
	//
	// example:
	//
	// 9FEA6D00-317F-45E3-9004-7FB8B0B7****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribePrometheusAlertRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribePrometheusAlertRuleResponseBody) GoString() string {
	return s.String()
}

func (s *DescribePrometheusAlertRuleResponseBody) SetCode(v int64) *DescribePrometheusAlertRuleResponseBody {
	s.Code = &v
	return s
}

func (s *DescribePrometheusAlertRuleResponseBody) SetMessage(v string) *DescribePrometheusAlertRuleResponseBody {
	s.Message = &v
	return s
}

func (s *DescribePrometheusAlertRuleResponseBody) SetPrometheusAlertRule(v *DescribePrometheusAlertRuleResponseBodyPrometheusAlertRule) *DescribePrometheusAlertRuleResponseBody {
	s.PrometheusAlertRule = v
	return s
}

func (s *DescribePrometheusAlertRuleResponseBody) SetRequestId(v string) *DescribePrometheusAlertRuleResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribePrometheusAlertRuleResponseBody) SetSuccess(v bool) *DescribePrometheusAlertRuleResponseBody {
	s.Success = &v
	return s
}

type DescribePrometheusAlertRuleResponseBodyPrometheusAlertRule struct {
	// The ID of the alert rule.
	//
	// example:
	//
	// 3888704
	AlertId *int64 `json:"AlertId,omitempty" xml:"AlertId,omitempty"`
	// The name of the alert rule.
	//
	// example:
	//
	// Prometheus_Alert
	AlertName *string `json:"AlertName,omitempty" xml:"AlertName,omitempty"`
	// The annotations of the alert rule.
	Annotations []*DescribePrometheusAlertRuleResponseBodyPrometheusAlertRuleAnnotations `json:"Annotations,omitempty" xml:"Annotations,omitempty" type:"Repeated"`
	// The ID of the cluster.
	//
	// example:
	//
	// c0bad479465464e1d8c1e641b0afb****
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	// The ID of the notification policy. This parameter is returned if the **NotifyType*	- parameter is set to `DISPATCH_RULE`.
	//
	// example:
	//
	// 10282
	DispatchRuleId *int64 `json:"DispatchRuleId,omitempty" xml:"DispatchRuleId,omitempty"`
	// The duration of the alert. Valid values: 1 to 1440. Unit: minutes.
	//
	// example:
	//
	// 1m
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// The expression of the alert rule.
	//
	// example:
	//
	// 100 	- (sum(rate(container_cpu_usage_seconds_total[1m])) by (pod_name) / sum(label_replace(kube_pod_container_resource_limits_cpu_cores, \\"pod_name\\", \\"$1\\", \\"pod\\", \\"(.*)\\")) by (pod_name))>75
	Expression *string `json:"Expression,omitempty" xml:"Expression,omitempty"`
	// The tags of the alert rule.
	Labels []*DescribePrometheusAlertRuleResponseBodyPrometheusAlertRuleLabels `json:"Labels,omitempty" xml:"Labels,omitempty" type:"Repeated"`
	// The alert message. Tags can be referenced in the {{$labels.xxx}} format.
	//
	// example:
	//
	// The CPU utilization of ${{$labels.pod_name}} has exceeded 80%. Current value: {{$value}}%
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The method of that is used to send alert notifications. Valid values:
	//
	// 	- `ALERT_MANAGER`: Alert notifications are sent by Operation Center.
	//
	// 	- `DISPATCH_RULE`: Alert notifications are sent based on the specified notification policy.
	//
	// example:
	//
	// ALERT_MANAGER
	NotifyType *string `json:"NotifyType,omitempty" xml:"NotifyType,omitempty"`
	// Indicates whether the alert rule is enabled. Valid values:
	//
	// 	- `1`: The alert rule is enabled.
	//
	// 	- `0`: The alert rule is disabled.
	//
	// example:
	//
	// 1
	Status *int32 `json:"Status,omitempty" xml:"Status,omitempty"`
	// The type of the alert rule.
	//
	// example:
	//
	// Kubernetes component alert
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribePrometheusAlertRuleResponseBodyPrometheusAlertRule) String() string {
	return tea.Prettify(s)
}

func (s DescribePrometheusAlertRuleResponseBodyPrometheusAlertRule) GoString() string {
	return s.String()
}

func (s *DescribePrometheusAlertRuleResponseBodyPrometheusAlertRule) SetAlertId(v int64) *DescribePrometheusAlertRuleResponseBodyPrometheusAlertRule {
	s.AlertId = &v
	return s
}

func (s *DescribePrometheusAlertRuleResponseBodyPrometheusAlertRule) SetAlertName(v string) *DescribePrometheusAlertRuleResponseBodyPrometheusAlertRule {
	s.AlertName = &v
	return s
}

func (s *DescribePrometheusAlertRuleResponseBodyPrometheusAlertRule) SetAnnotations(v []*DescribePrometheusAlertRuleResponseBodyPrometheusAlertRuleAnnotations) *DescribePrometheusAlertRuleResponseBodyPrometheusAlertRule {
	s.Annotations = v
	return s
}

func (s *DescribePrometheusAlertRuleResponseBodyPrometheusAlertRule) SetClusterId(v string) *DescribePrometheusAlertRuleResponseBodyPrometheusAlertRule {
	s.ClusterId = &v
	return s
}

func (s *DescribePrometheusAlertRuleResponseBodyPrometheusAlertRule) SetDispatchRuleId(v int64) *DescribePrometheusAlertRuleResponseBodyPrometheusAlertRule {
	s.DispatchRuleId = &v
	return s
}

func (s *DescribePrometheusAlertRuleResponseBodyPrometheusAlertRule) SetDuration(v string) *DescribePrometheusAlertRuleResponseBodyPrometheusAlertRule {
	s.Duration = &v
	return s
}

func (s *DescribePrometheusAlertRuleResponseBodyPrometheusAlertRule) SetExpression(v string) *DescribePrometheusAlertRuleResponseBodyPrometheusAlertRule {
	s.Expression = &v
	return s
}

func (s *DescribePrometheusAlertRuleResponseBodyPrometheusAlertRule) SetLabels(v []*DescribePrometheusAlertRuleResponseBodyPrometheusAlertRuleLabels) *DescribePrometheusAlertRuleResponseBodyPrometheusAlertRule {
	s.Labels = v
	return s
}

func (s *DescribePrometheusAlertRuleResponseBodyPrometheusAlertRule) SetMessage(v string) *DescribePrometheusAlertRuleResponseBodyPrometheusAlertRule {
	s.Message = &v
	return s
}

func (s *DescribePrometheusAlertRuleResponseBodyPrometheusAlertRule) SetNotifyType(v string) *DescribePrometheusAlertRuleResponseBodyPrometheusAlertRule {
	s.NotifyType = &v
	return s
}

func (s *DescribePrometheusAlertRuleResponseBodyPrometheusAlertRule) SetStatus(v int32) *DescribePrometheusAlertRuleResponseBodyPrometheusAlertRule {
	s.Status = &v
	return s
}

func (s *DescribePrometheusAlertRuleResponseBodyPrometheusAlertRule) SetType(v string) *DescribePrometheusAlertRuleResponseBodyPrometheusAlertRule {
	s.Type = &v
	return s
}

type DescribePrometheusAlertRuleResponseBodyPrometheusAlertRuleAnnotations struct {
	// The name of the annotation.
	//
	// example:
	//
	// message
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The value of the annotation.
	//
	// example:
	//
	// The CPU utilization of ${{$labels.pod_name}} has exceeded 80%. Current value: {{$value}}%
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribePrometheusAlertRuleResponseBodyPrometheusAlertRuleAnnotations) String() string {
	return tea.Prettify(s)
}

func (s DescribePrometheusAlertRuleResponseBodyPrometheusAlertRuleAnnotations) GoString() string {
	return s.String()
}

func (s *DescribePrometheusAlertRuleResponseBodyPrometheusAlertRuleAnnotations) SetName(v string) *DescribePrometheusAlertRuleResponseBodyPrometheusAlertRuleAnnotations {
	s.Name = &v
	return s
}

func (s *DescribePrometheusAlertRuleResponseBodyPrometheusAlertRuleAnnotations) SetValue(v string) *DescribePrometheusAlertRuleResponseBodyPrometheusAlertRuleAnnotations {
	s.Value = &v
	return s
}

type DescribePrometheusAlertRuleResponseBodyPrometheusAlertRuleLabels struct {
	// The name of the tag.
	//
	// example:
	//
	// severity
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The value of the tag.
	//
	// example:
	//
	// critical
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribePrometheusAlertRuleResponseBodyPrometheusAlertRuleLabels) String() string {
	return tea.Prettify(s)
}

func (s DescribePrometheusAlertRuleResponseBodyPrometheusAlertRuleLabels) GoString() string {
	return s.String()
}

func (s *DescribePrometheusAlertRuleResponseBodyPrometheusAlertRuleLabels) SetName(v string) *DescribePrometheusAlertRuleResponseBodyPrometheusAlertRuleLabels {
	s.Name = &v
	return s
}

func (s *DescribePrometheusAlertRuleResponseBodyPrometheusAlertRuleLabels) SetValue(v string) *DescribePrometheusAlertRuleResponseBodyPrometheusAlertRuleLabels {
	s.Value = &v
	return s
}

type DescribePrometheusAlertRuleResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribePrometheusAlertRuleResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribePrometheusAlertRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribePrometheusAlertRuleResponse) GoString() string {
	return s.String()
}

func (s *DescribePrometheusAlertRuleResponse) SetHeaders(v map[string]*string) *DescribePrometheusAlertRuleResponse {
	s.Headers = v
	return s
}

func (s *DescribePrometheusAlertRuleResponse) SetStatusCode(v int32) *DescribePrometheusAlertRuleResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribePrometheusAlertRuleResponse) SetBody(v *DescribePrometheusAlertRuleResponseBody) *DescribePrometheusAlertRuleResponse {
	s.Body = v
	return s
}

type DescribeTraceLicenseKeyRequest struct {
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeTraceLicenseKeyRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeTraceLicenseKeyRequest) GoString() string {
	return s.String()
}

func (s *DescribeTraceLicenseKeyRequest) SetRegionId(v string) *DescribeTraceLicenseKeyRequest {
	s.RegionId = &v
	return s
}

type DescribeTraceLicenseKeyResponseBody struct {
	// example:
	//
	// b590lhguqs@3a75d95f218****
	LicenseKey *string `json:"LicenseKey,omitempty" xml:"LicenseKey,omitempty"`
	// example:
	//
	// 29053944-6FE5-4240-8927-10095ECE****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeTraceLicenseKeyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeTraceLicenseKeyResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeTraceLicenseKeyResponseBody) SetLicenseKey(v string) *DescribeTraceLicenseKeyResponseBody {
	s.LicenseKey = &v
	return s
}

func (s *DescribeTraceLicenseKeyResponseBody) SetRequestId(v string) *DescribeTraceLicenseKeyResponseBody {
	s.RequestId = &v
	return s
}

type DescribeTraceLicenseKeyResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeTraceLicenseKeyResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeTraceLicenseKeyResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeTraceLicenseKeyResponse) GoString() string {
	return s.String()
}

func (s *DescribeTraceLicenseKeyResponse) SetHeaders(v map[string]*string) *DescribeTraceLicenseKeyResponse {
	s.Headers = v
	return s
}

func (s *DescribeTraceLicenseKeyResponse) SetStatusCode(v int32) *DescribeTraceLicenseKeyResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeTraceLicenseKeyResponse) SetBody(v *DescribeTraceLicenseKeyResponseBody) *DescribeTraceLicenseKeyResponse {
	s.Body = v
	return s
}

type DescribeWebhookContactsRequest struct {
	// The ID of the alert contact.
	//
	// example:
	//
	// 123
	ContactIds *string `json:"ContactIds,omitempty" xml:"ContactIds,omitempty"`
	// The number of the page to return.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	Page *int64 `json:"Page,omitempty" xml:"Page,omitempty"`
	// The number of alert contacts displayed on each page.
	//
	// This parameter is required.
	//
	// example:
	//
	// 20
	Size *int64 `json:"Size,omitempty" xml:"Size,omitempty"`
	// The name of the webhook alert contact.
	//
	// example:
	//
	// Webhook name
	WebhookName *string `json:"WebhookName,omitempty" xml:"WebhookName,omitempty"`
}

func (s DescribeWebhookContactsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeWebhookContactsRequest) GoString() string {
	return s.String()
}

func (s *DescribeWebhookContactsRequest) SetContactIds(v string) *DescribeWebhookContactsRequest {
	s.ContactIds = &v
	return s
}

func (s *DescribeWebhookContactsRequest) SetPage(v int64) *DescribeWebhookContactsRequest {
	s.Page = &v
	return s
}

func (s *DescribeWebhookContactsRequest) SetSize(v int64) *DescribeWebhookContactsRequest {
	s.Size = &v
	return s
}

func (s *DescribeWebhookContactsRequest) SetWebhookName(v string) *DescribeWebhookContactsRequest {
	s.WebhookName = &v
	return s
}

type DescribeWebhookContactsResponseBody struct {
	// The returned objects.
	PageBean *DescribeWebhookContactsResponseBodyPageBean `json:"PageBean,omitempty" xml:"PageBean,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// 4D6C358A-A58B-4F4B-94CE-F5AAF023****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeWebhookContactsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeWebhookContactsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeWebhookContactsResponseBody) SetPageBean(v *DescribeWebhookContactsResponseBodyPageBean) *DescribeWebhookContactsResponseBody {
	s.PageBean = v
	return s
}

func (s *DescribeWebhookContactsResponseBody) SetRequestId(v string) *DescribeWebhookContactsResponseBody {
	s.RequestId = &v
	return s
}

type DescribeWebhookContactsResponseBodyPageBean struct {
	// The page number of the returned page.
	//
	// example:
	//
	// 1
	Page *int64 `json:"Page,omitempty" xml:"Page,omitempty"`
	// The number of alert contacts displayed on each page.
	//
	// example:
	//
	// 20
	Size *int64 `json:"Size,omitempty" xml:"Size,omitempty"`
	// The total number of alert contacts.
	//
	// example:
	//
	// 1
	Total *int64 `json:"Total,omitempty" xml:"Total,omitempty"`
	// The list of webhook alert contacts.
	WebhookContacts []*DescribeWebhookContactsResponseBodyPageBeanWebhookContacts `json:"WebhookContacts,omitempty" xml:"WebhookContacts,omitempty" type:"Repeated"`
}

func (s DescribeWebhookContactsResponseBodyPageBean) String() string {
	return tea.Prettify(s)
}

func (s DescribeWebhookContactsResponseBodyPageBean) GoString() string {
	return s.String()
}

func (s *DescribeWebhookContactsResponseBodyPageBean) SetPage(v int64) *DescribeWebhookContactsResponseBodyPageBean {
	s.Page = &v
	return s
}

func (s *DescribeWebhookContactsResponseBodyPageBean) SetSize(v int64) *DescribeWebhookContactsResponseBodyPageBean {
	s.Size = &v
	return s
}

func (s *DescribeWebhookContactsResponseBodyPageBean) SetTotal(v int64) *DescribeWebhookContactsResponseBodyPageBean {
	s.Total = &v
	return s
}

func (s *DescribeWebhookContactsResponseBodyPageBean) SetWebhookContacts(v []*DescribeWebhookContactsResponseBodyPageBeanWebhookContacts) *DescribeWebhookContactsResponseBodyPageBean {
	s.WebhookContacts = v
	return s
}

type DescribeWebhookContactsResponseBodyPageBeanWebhookContacts struct {
	// The details of the webhook alert contact.
	Webhook *DescribeWebhookContactsResponseBodyPageBeanWebhookContactsWebhook `json:"Webhook,omitempty" xml:"Webhook,omitempty" type:"Struct"`
	// The ID of the webhook alert contact.
	//
	// example:
	//
	// 123
	WebhookId *float32 `json:"WebhookId,omitempty" xml:"WebhookId,omitempty"`
	// The name of the webhook alert contact.
	//
	// example:
	//
	// Webhook name
	WebhookName *string `json:"WebhookName,omitempty" xml:"WebhookName,omitempty"`
}

func (s DescribeWebhookContactsResponseBodyPageBeanWebhookContacts) String() string {
	return tea.Prettify(s)
}

func (s DescribeWebhookContactsResponseBodyPageBeanWebhookContacts) GoString() string {
	return s.String()
}

func (s *DescribeWebhookContactsResponseBodyPageBeanWebhookContacts) SetWebhook(v *DescribeWebhookContactsResponseBodyPageBeanWebhookContactsWebhook) *DescribeWebhookContactsResponseBodyPageBeanWebhookContacts {
	s.Webhook = v
	return s
}

func (s *DescribeWebhookContactsResponseBodyPageBeanWebhookContacts) SetWebhookId(v float32) *DescribeWebhookContactsResponseBodyPageBeanWebhookContacts {
	s.WebhookId = &v
	return s
}

func (s *DescribeWebhookContactsResponseBodyPageBeanWebhookContacts) SetWebhookName(v string) *DescribeWebhookContactsResponseBodyPageBeanWebhookContacts {
	s.WebhookName = &v
	return s
}

type DescribeWebhookContactsResponseBodyPageBeanWebhookContactsWebhook struct {
	// The header of the HTTP request.
	//
	// example:
	//
	// [{"Content-Type":"application/json"}]
	BizHeaders map[string]interface{} `json:"BizHeaders,omitempty" xml:"BizHeaders,omitempty"`
	// The parameters in the HTTP request.
	//
	// example:
	//
	// [{"content:"mike"}]
	BizParams map[string]interface{} `json:"BizParams,omitempty" xml:"BizParams,omitempty"`
	// The alert notification template.
	//
	// example:
	//
	// { "Alert name":"{{ .commonLabels.alertname }}{{if .commonLabels.clustername }}", "Cluster name":"{{ .commonLabels.clustername }} {{ end }}{{if eq "app" .commonLabels._aliyun_arms_involvedObject_kind }}", "Application name":"{{ .commonLabels._aliyun_arms_involvedObject_name }} {{ end }}", "Notification policy":"{{ .dispatchRuleName }}", "Alert time":"{{ .startTime }}", "Alert content":"{{ for .alerts }} {{ .annotations.message }} {{ end }}" }
	Body *string `json:"Body,omitempty" xml:"Body,omitempty"`
	// The HTTP request method.
	//
	// 	- Get
	//
	// 	- Post
	//
	// example:
	//
	// Post
	Method *string `json:"Method,omitempty" xml:"Method,omitempty"`
	// The notification template for clearing alerts.
	//
	// example:
	//
	// { "Alert name":"{{ .commonLabels.alertname }}{{if .commonLabels.clustername }}", "Cluster name":"{{ .commonLabels.clustername }} {{ end }}{{if eq "app" .commonLabels._aliyun_arms_involvedObject_kind }}", "Application name":"{{ .commonLabels._aliyun_arms_involvedObject_name }} {{ end }}", "Notification policy":"{{ .dispatchRuleName }}", "Recovery time":"{{ .endTime }}", "Alert content":"{{ for .alerts }} {{ .annotations.message }} {{ end }}" }
	RecoverBody *string `json:"RecoverBody,omitempty" xml:"RecoverBody,omitempty"`
	// The URL of the request method.
	//
	// example:
	//
	// https://oapi.dingtalk.com/robot/send?access_token=91f2f6****
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s DescribeWebhookContactsResponseBodyPageBeanWebhookContactsWebhook) String() string {
	return tea.Prettify(s)
}

func (s DescribeWebhookContactsResponseBodyPageBeanWebhookContactsWebhook) GoString() string {
	return s.String()
}

func (s *DescribeWebhookContactsResponseBodyPageBeanWebhookContactsWebhook) SetBizHeaders(v map[string]interface{}) *DescribeWebhookContactsResponseBodyPageBeanWebhookContactsWebhook {
	s.BizHeaders = v
	return s
}

func (s *DescribeWebhookContactsResponseBodyPageBeanWebhookContactsWebhook) SetBizParams(v map[string]interface{}) *DescribeWebhookContactsResponseBodyPageBeanWebhookContactsWebhook {
	s.BizParams = v
	return s
}

func (s *DescribeWebhookContactsResponseBodyPageBeanWebhookContactsWebhook) SetBody(v string) *DescribeWebhookContactsResponseBodyPageBeanWebhookContactsWebhook {
	s.Body = &v
	return s
}

func (s *DescribeWebhookContactsResponseBodyPageBeanWebhookContactsWebhook) SetMethod(v string) *DescribeWebhookContactsResponseBodyPageBeanWebhookContactsWebhook {
	s.Method = &v
	return s
}

func (s *DescribeWebhookContactsResponseBodyPageBeanWebhookContactsWebhook) SetRecoverBody(v string) *DescribeWebhookContactsResponseBodyPageBeanWebhookContactsWebhook {
	s.RecoverBody = &v
	return s
}

func (s *DescribeWebhookContactsResponseBodyPageBeanWebhookContactsWebhook) SetUrl(v string) *DescribeWebhookContactsResponseBodyPageBeanWebhookContactsWebhook {
	s.Url = &v
	return s
}

type DescribeWebhookContactsResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeWebhookContactsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeWebhookContactsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeWebhookContactsResponse) GoString() string {
	return s.String()
}

func (s *DescribeWebhookContactsResponse) SetHeaders(v map[string]*string) *DescribeWebhookContactsResponse {
	s.Headers = v
	return s
}

func (s *DescribeWebhookContactsResponse) SetStatusCode(v int32) *DescribeWebhookContactsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeWebhookContactsResponse) SetBody(v *DescribeWebhookContactsResponseBody) *DescribeWebhookContactsResponse {
	s.Body = v
	return s
}

type EnableMetricRequest struct {
	// The cluster ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// ccfa5e34a5c1f4ce6b916a40a12151d88
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	// Enable metric name.
	//
	// example:
	//
	// kube_pod_container_status_ready
	DropMetric *string `json:"DropMetric,omitempty" xml:"DropMetric,omitempty"`
	// The region ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s EnableMetricRequest) String() string {
	return tea.Prettify(s)
}

func (s EnableMetricRequest) GoString() string {
	return s.String()
}

func (s *EnableMetricRequest) SetClusterId(v string) *EnableMetricRequest {
	s.ClusterId = &v
	return s
}

func (s *EnableMetricRequest) SetDropMetric(v string) *EnableMetricRequest {
	s.DropMetric = &v
	return s
}

func (s *EnableMetricRequest) SetRegionId(v string) *EnableMetricRequest {
	s.RegionId = &v
	return s
}

type EnableMetricResponseBody struct {
	// The HTTP status code returned for the request. Valid values:
	//
	// 	- 2XX: The request is successful.
	//
	// 	- 3XX: A redirection message is returned.
	//
	// 	- 4XX: The request is invalid.
	//
	// 	- 5XX: A server error occurs.
	//
	// example:
	//
	// 200
	Code *int64 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned struct.
	//
	// example:
	//
	// success
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// The returned message.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	//
	// example:
	//
	// 0231DA4B-3D11-5433-9376-3B5B46C7228D
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call was successful. Valid values:
	//
	// 	- `true`: The call was successful.
	//
	// 	- `false`: The call failed.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s EnableMetricResponseBody) String() string {
	return tea.Prettify(s)
}

func (s EnableMetricResponseBody) GoString() string {
	return s.String()
}

func (s *EnableMetricResponseBody) SetCode(v int64) *EnableMetricResponseBody {
	s.Code = &v
	return s
}

func (s *EnableMetricResponseBody) SetData(v string) *EnableMetricResponseBody {
	s.Data = &v
	return s
}

func (s *EnableMetricResponseBody) SetMessage(v string) *EnableMetricResponseBody {
	s.Message = &v
	return s
}

func (s *EnableMetricResponseBody) SetRequestId(v string) *EnableMetricResponseBody {
	s.RequestId = &v
	return s
}

func (s *EnableMetricResponseBody) SetSuccess(v bool) *EnableMetricResponseBody {
	s.Success = &v
	return s
}

type EnableMetricResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *EnableMetricResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s EnableMetricResponse) String() string {
	return tea.Prettify(s)
}

func (s EnableMetricResponse) GoString() string {
	return s.String()
}

func (s *EnableMetricResponse) SetHeaders(v map[string]*string) *EnableMetricResponse {
	s.Headers = v
	return s
}

func (s *EnableMetricResponse) SetStatusCode(v int32) *EnableMetricResponse {
	s.StatusCode = &v
	return s
}

func (s *EnableMetricResponse) SetBody(v *EnableMetricResponseBody) *EnableMetricResponse {
	s.Body = v
	return s
}

type GetAgentDownloadUrlRequest struct {
	// The region ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s GetAgentDownloadUrlRequest) String() string {
	return tea.Prettify(s)
}

func (s GetAgentDownloadUrlRequest) GoString() string {
	return s.String()
}

func (s *GetAgentDownloadUrlRequest) SetRegionId(v string) *GetAgentDownloadUrlRequest {
	s.RegionId = &v
	return s
}

type GetAgentDownloadUrlResponseBody struct {
	// The download URL of the ARMS agent.
	//
	// example:
	//
	// http://arms-apm-hangzhou.oss-cn-hangzhou-internal.aliyuncs.com/2.7.1.1/
	ArmsAgentDownloadUrl *string `json:"ArmsAgentDownloadUrl,omitempty" xml:"ArmsAgentDownloadUrl,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 14043452-D486-4EA1-80C9-BA73FB81****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetAgentDownloadUrlResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetAgentDownloadUrlResponseBody) GoString() string {
	return s.String()
}

func (s *GetAgentDownloadUrlResponseBody) SetArmsAgentDownloadUrl(v string) *GetAgentDownloadUrlResponseBody {
	s.ArmsAgentDownloadUrl = &v
	return s
}

func (s *GetAgentDownloadUrlResponseBody) SetRequestId(v string) *GetAgentDownloadUrlResponseBody {
	s.RequestId = &v
	return s
}

type GetAgentDownloadUrlResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetAgentDownloadUrlResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetAgentDownloadUrlResponse) String() string {
	return tea.Prettify(s)
}

func (s GetAgentDownloadUrlResponse) GoString() string {
	return s.String()
}

func (s *GetAgentDownloadUrlResponse) SetHeaders(v map[string]*string) *GetAgentDownloadUrlResponse {
	s.Headers = v
	return s
}

func (s *GetAgentDownloadUrlResponse) SetStatusCode(v int32) *GetAgentDownloadUrlResponse {
	s.StatusCode = &v
	return s
}

func (s *GetAgentDownloadUrlResponse) SetBody(v *GetAgentDownloadUrlResponseBody) *GetAgentDownloadUrlResponse {
	s.Body = v
	return s
}

type GetAlertRulesRequest struct {
	// The unique IDs of alert rules.
	//
	// 	- If you do not specify this parameter, the API operation does not filter alert rules based on their IDs.
	//
	// 	- If you specify this parameter, the API operation returns only the information of the specified alert rules. Other filter conditions also take effect.
	//
	// > When you call the GetAlertRules operation, you can specify other request parameters to obtain the AlertIds parameter from the response. Then, you can specify the AlertIds parameter to query the specified alert rules.
	//
	// example:
	//
	// ["12345"]
	AlertIds *string `json:"AlertIds,omitempty" xml:"AlertIds,omitempty"`
	// The names of alert rules. When you create alert rules of the new version, you cannot specify duplicate names. However, existing alert rules may have duplicate names. Therefore, the **AlertName*	- parameter does not uniquely identify an alert rule.
	//
	// 	- If you do not specify this parameter, the API operation does not filter alert rules based on their names.
	//
	// 	- If you specify this parameter, the API operation returns only the information of the specified alert rules. Other filter conditions also take effect.
	//
	// example:
	//
	// ["test"]
	AlertNames *string `json:"AlertNames,omitempty" xml:"AlertNames,omitempty"`
	// The status of the alert rule. Valid values:
	//
	// 	- RUNNING
	//
	// 	- STOPPED
	//
	// 	- PAUSED
	//
	// > The **PAUSED*	- status indicates that the alert rule is abnormal and is actively paused by the system. The alert rule may be paused because that it is not unique or the associated cluster has been deleted.
	//
	// example:
	//
	// RUNNING
	AlertStatus *string `json:"AlertStatus,omitempty" xml:"AlertStatus,omitempty"`
	// The type of the alert rule.
	//
	// 	- APPLICATION_MONITORING_ALERT_RULE: alert rule for Application Monitoring
	//
	// 	- BROWSER_MONITORING_ALERT_RULE: an alert rule for Browser Monitoring.
	//
	// 	- PROMETHEUS_MONITORING_ALERT_RULE: alert rule for Managed Service for Prometheus.
	//
	// example:
	//
	// APPLICATION_MONITORING_ALERT_RULE
	AlertType *string `json:"AlertType,omitempty" xml:"AlertType,omitempty"`
	// The ID of the monitored cluster.
	//
	// example:
	//
	// ceba9b9ea5b924dd0b6726d2de6******
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	// The number of the page to return.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	Page *int64 `json:"Page,omitempty" xml:"Page,omitempty"`
	// You do not need to configure this parameter.
	//
	// example:
	//
	// null
	ProductCode *string `json:"ProductCode,omitempty" xml:"ProductCode,omitempty"`
	// The region ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The number of alert rules to return on each page.
	//
	// This parameter is required.
	//
	// example:
	//
	// 20
	Size *int64 `json:"Size,omitempty" xml:"Size,omitempty"`
	// The list of tags.
	Tags []*GetAlertRulesRequestTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
}

func (s GetAlertRulesRequest) String() string {
	return tea.Prettify(s)
}

func (s GetAlertRulesRequest) GoString() string {
	return s.String()
}

func (s *GetAlertRulesRequest) SetAlertIds(v string) *GetAlertRulesRequest {
	s.AlertIds = &v
	return s
}

func (s *GetAlertRulesRequest) SetAlertNames(v string) *GetAlertRulesRequest {
	s.AlertNames = &v
	return s
}

func (s *GetAlertRulesRequest) SetAlertStatus(v string) *GetAlertRulesRequest {
	s.AlertStatus = &v
	return s
}

func (s *GetAlertRulesRequest) SetAlertType(v string) *GetAlertRulesRequest {
	s.AlertType = &v
	return s
}

func (s *GetAlertRulesRequest) SetClusterId(v string) *GetAlertRulesRequest {
	s.ClusterId = &v
	return s
}

func (s *GetAlertRulesRequest) SetPage(v int64) *GetAlertRulesRequest {
	s.Page = &v
	return s
}

func (s *GetAlertRulesRequest) SetProductCode(v string) *GetAlertRulesRequest {
	s.ProductCode = &v
	return s
}

func (s *GetAlertRulesRequest) SetRegionId(v string) *GetAlertRulesRequest {
	s.RegionId = &v
	return s
}

func (s *GetAlertRulesRequest) SetSize(v int64) *GetAlertRulesRequest {
	s.Size = &v
	return s
}

func (s *GetAlertRulesRequest) SetTags(v []*GetAlertRulesRequestTags) *GetAlertRulesRequest {
	s.Tags = v
	return s
}

type GetAlertRulesRequestTags struct {
	// The tag key.
	//
	// example:
	//
	// type
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The tag value.
	//
	// example:
	//
	// prod
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s GetAlertRulesRequestTags) String() string {
	return tea.Prettify(s)
}

func (s GetAlertRulesRequestTags) GoString() string {
	return s.String()
}

func (s *GetAlertRulesRequestTags) SetKey(v string) *GetAlertRulesRequestTags {
	s.Key = &v
	return s
}

func (s *GetAlertRulesRequestTags) SetValue(v string) *GetAlertRulesRequestTags {
	s.Value = &v
	return s
}

type GetAlertRulesResponseBody struct {
	// The pages returned.
	PageBean *GetAlertRulesResponseBodyPageBean `json:"PageBean,omitempty" xml:"PageBean,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// 337B8F7E-0A64-5768-9225-E9B3CF******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetAlertRulesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetAlertRulesResponseBody) GoString() string {
	return s.String()
}

func (s *GetAlertRulesResponseBody) SetPageBean(v *GetAlertRulesResponseBodyPageBean) *GetAlertRulesResponseBody {
	s.PageBean = v
	return s
}

func (s *GetAlertRulesResponseBody) SetRequestId(v string) *GetAlertRulesResponseBody {
	s.RequestId = &v
	return s
}

type GetAlertRulesResponseBodyPageBean struct {
	// The list of alert rules.
	AlertRules []*GetAlertRulesResponseBodyPageBeanAlertRules `json:"AlertRules,omitempty" xml:"AlertRules,omitempty" type:"Repeated"`
	// The number of pages returned.
	//
	// example:
	//
	// 1
	Page *int64 `json:"Page,omitempty" xml:"Page,omitempty"`
	// The number of alert rules returned per page.
	//
	// example:
	//
	// 20
	Size *int64 `json:"Size,omitempty" xml:"Size,omitempty"`
	// The total number of queried alert rules.
	//
	// example:
	//
	// 1
	Total *int64 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s GetAlertRulesResponseBodyPageBean) String() string {
	return tea.Prettify(s)
}

func (s GetAlertRulesResponseBodyPageBean) GoString() string {
	return s.String()
}

func (s *GetAlertRulesResponseBodyPageBean) SetAlertRules(v []*GetAlertRulesResponseBodyPageBeanAlertRules) *GetAlertRulesResponseBodyPageBean {
	s.AlertRules = v
	return s
}

func (s *GetAlertRulesResponseBodyPageBean) SetPage(v int64) *GetAlertRulesResponseBodyPageBean {
	s.Page = &v
	return s
}

func (s *GetAlertRulesResponseBodyPageBean) SetSize(v int64) *GetAlertRulesResponseBodyPageBean {
	s.Size = &v
	return s
}

func (s *GetAlertRulesResponseBodyPageBean) SetTotal(v int64) *GetAlertRulesResponseBodyPageBean {
	s.Total = &v
	return s
}

type GetAlertRulesResponseBodyPageBeanAlertRules struct {
	// The alert check type of the Prometheus alert rule. Valid values:
	//
	// 	- STATIC: static threshold value
	//
	// 	- CUSTOM: custom PromQL statement
	//
	// example:
	//
	// STATIC
	AlertCheckType *string `json:"AlertCheckType,omitempty" xml:"AlertCheckType,omitempty"`
	// The ID of the alert contact group to which the alert rule belongs. Valid values:
	//
	// 	- \\-1: custom PromQL
	//
	// 	- 1: Kubernetes load
	//
	// 	- 15: Kubernetes node
	//
	// example:
	//
	// 1
	AlertGroup *int64 `json:"AlertGroup,omitempty" xml:"AlertGroup,omitempty"`
	// The ID of the alert rule.
	//
	// example:
	//
	// 5730***
	AlertId *int64 `json:"AlertId,omitempty" xml:"AlertId,omitempty"`
	// The name of the alert rule.
	//
	// example:
	//
	// arms-test
	AlertName *string `json:"AlertName,omitempty" xml:"AlertName,omitempty"`
	// The content of the Application Monitoring or Browser Monitoring alert rule.
	AlertRuleContent *GetAlertRulesResponseBodyPageBeanAlertRulesAlertRuleContent `json:"AlertRuleContent,omitempty" xml:"AlertRuleContent,omitempty" type:"Struct"`
	// The status of the alert rule. Valid values:
	//
	// 	- RUNNING
	//
	// 	- STOPPED
	//
	// 	- PAUSED
	//
	// > The **PAUSED*	- status indicates that the alert rule is abnormal and is actively paused by the system. The alert rule may be paused because that it is not unique or the associated cluster has been deleted.
	//
	// example:
	//
	// RUNNING
	AlertStatus *string `json:"AlertStatus,omitempty" xml:"AlertStatus,omitempty"`
	// The type of the alert rule.
	//
	// 	- APPLICATION_MONITORING_ALERT_RULE: alert rule for Application Monitoring
	//
	// 	- BROWSER_MONITORING_ALERT_RULE: alert rule for Browser Monitoring
	//
	// 	- PROMETHEUS_MONITORING_ALERT_RULE: alert rule for Managed Service for Prometheus
	//
	// example:
	//
	// APPLICATION_MONITORING_ALERT_RULE
	AlertType *string `json:"AlertType,omitempty" xml:"AlertType,omitempty"`
	// The annotations of the Prometheus alert rule.
	Annotations []*GetAlertRulesResponseBodyPageBeanAlertRulesAnnotations `json:"Annotations,omitempty" xml:"Annotations,omitempty" type:"Repeated"`
	// Indicates whether the alert rule was applied to new applications that were created in Application Monitoring or Browser Monitoring. Valid values:
	//
	// 	- `true`
	//
	// 	- `false`
	//
	// example:
	//
	// false
	AutoAddNewApplication *bool `json:"AutoAddNewApplication,omitempty" xml:"AutoAddNewApplication,omitempty"`
	// The cluster ID of the Prometheus alert rule.
	//
	// example:
	//
	// ceba9b9ea5b924dd0b6726d2de6******
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	// The time when the alert rule was created. The value is a timestamp. Unit: milliseconds.
	//
	// example:
	//
	// 1640333981000
	CreatedTime *int64 `json:"CreatedTime,omitempty" xml:"CreatedTime,omitempty"`
	// The duration of the Prometheus alert rule.
	//
	// example:
	//
	// 1
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// The extended fields.
	//
	// > For existing Application Monitoring alert rules, the fields contained information such as contacts, alert template, and notification content.
	//
	// example:
	//
	// {\\\\"alarmContext\\\\":\\\\"{\\\\\\\\\\"content\\\\\\\\\\":\\\\\\\\Alert name: $Alert name\\\\\\\\\\\\nFilter condition: $Filter condition\\\\\\\\\\\\nAlert time: $Alert time\\\\\\\\\\\\nAlert content: $Alert content\\\\\\\\\\\\nNote: The alert persists before you receive an email that reminds you to clear the alert. You will be reminded of the alert again 24 hours later. \\\\\\\\\\",\\\\\\\\\\"subTitle\\\\\\\\\\":\\\\\\\\\\"\\\\\\\\\\"}\\\\",\\\\"alertWays\\\\":\\\\"[0,1]\\\\",\\\\"contactGroupIds\\\\":\\\\"381,5075\\\\",\\\\"notice\\\\":\\\\"{\\\\\\\\\\"endTime\\\\\\\\\\":1480607940000,\\\\\\\\\\"noticeEndTime\\\\\\\\\\":1480607940000,\\\\\\\\\\"noticeStartTime\\\\\\\\\\":1480521600000,\\\\\\\\\\"startTime\\\\\\\\\\":1480521600000}\\\\"}
	Extend *string `json:"Extend,omitempty" xml:"Extend,omitempty"`
	// The filter conditions of the Application Monitoring or Browser Monitoring alert rule.
	Filters *GetAlertRulesResponseBodyPageBeanAlertRulesFilters `json:"Filters,omitempty" xml:"Filters,omitempty" type:"Struct"`
	// The tags of the Prometheus alert rule.
	Labels []*GetAlertRulesResponseBodyPageBeanAlertRulesLabels `json:"Labels,omitempty" xml:"Labels,omitempty" type:"Repeated"`
	// The severity level of the Prometheus alert rule.
	//
	// 	- P1: Alert notifications are sent for major issues that affect the availability of core business, have a huge impact, and may lead to serious consequences.
	//
	// 	- P2: Alert notifications are sent for service errors that affect the system availability with relatively limited impact.
	//
	// 	- P3: Alert notifications are sent for issues that may cause service errors or negative effects, or alert notifications for services that are relatively less important.
	//
	// 	- P4: Alert notifications are sent for low-priority issues that do not affect your business.
	//
	// 	- Default: Alert notifications are sent regardless of alert levels.
	//
	// example:
	//
	// P2
	Level *string `json:"Level,omitempty" xml:"Level,omitempty"`
	// The alert message of the Prometheus alert rule.
	//
	// example:
	//
	// Namespace: {{$labels.namespace}} / Pod: {{$labels.pod_name}} / Container: {{$labels.container}} CPU usage: {{$labels.metrics_params_opt_label_value}} {{$labels.metrics_params_value}}%. Current value: {{ printf "%.2f" $value }}%
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The metric type of the Application Monitoring or Browser Monitoring alert rule.
	//
	// example:
	//
	// JVM
	MetricsType *string `json:"MetricsType,omitempty" xml:"MetricsType,omitempty"`
	// The name of the notification policy.
	//
	// example:
	//
	// ALERT_MANAGER
	NotifyStrategy *string `json:"NotifyStrategy,omitempty" xml:"NotifyStrategy,omitempty"`
	// The process ID (PID) that was associated with the Application Monitoring or Browser Monitoring alert rule.
	Pids []*string `json:"Pids,omitempty" xml:"Pids,omitempty" type:"Repeated"`
	// The PromQL statement of the Prometheus alert rule.
	//
	// example:
	//
	// node_memory_MemAvailable_bytes{} / node_memory_MemTotal_bytes{} 	- 100
	PromQL *string `json:"PromQL,omitempty" xml:"PromQL,omitempty"`
	// The region ID.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The list of tags.
	Tags []*GetAlertRulesResponseBodyPageBeanAlertRulesTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
	// The time when the alert rule was updated. The value is a timestamp. Unit: milliseconds.
	//
	// example:
	//
	// 1640333981000
	UpdatedTime *int64 `json:"UpdatedTime,omitempty" xml:"UpdatedTime,omitempty"`
	// The ID of the Alibaba Cloud account to which the resource belongs.
	//
	// example:
	//
	// 1131971649******
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s GetAlertRulesResponseBodyPageBeanAlertRules) String() string {
	return tea.Prettify(s)
}

func (s GetAlertRulesResponseBodyPageBeanAlertRules) GoString() string {
	return s.String()
}

func (s *GetAlertRulesResponseBodyPageBeanAlertRules) SetAlertCheckType(v string) *GetAlertRulesResponseBodyPageBeanAlertRules {
	s.AlertCheckType = &v
	return s
}

func (s *GetAlertRulesResponseBodyPageBeanAlertRules) SetAlertGroup(v int64) *GetAlertRulesResponseBodyPageBeanAlertRules {
	s.AlertGroup = &v
	return s
}

func (s *GetAlertRulesResponseBodyPageBeanAlertRules) SetAlertId(v int64) *GetAlertRulesResponseBodyPageBeanAlertRules {
	s.AlertId = &v
	return s
}

func (s *GetAlertRulesResponseBodyPageBeanAlertRules) SetAlertName(v string) *GetAlertRulesResponseBodyPageBeanAlertRules {
	s.AlertName = &v
	return s
}

func (s *GetAlertRulesResponseBodyPageBeanAlertRules) SetAlertRuleContent(v *GetAlertRulesResponseBodyPageBeanAlertRulesAlertRuleContent) *GetAlertRulesResponseBodyPageBeanAlertRules {
	s.AlertRuleContent = v
	return s
}

func (s *GetAlertRulesResponseBodyPageBeanAlertRules) SetAlertStatus(v string) *GetAlertRulesResponseBodyPageBeanAlertRules {
	s.AlertStatus = &v
	return s
}

func (s *GetAlertRulesResponseBodyPageBeanAlertRules) SetAlertType(v string) *GetAlertRulesResponseBodyPageBeanAlertRules {
	s.AlertType = &v
	return s
}

func (s *GetAlertRulesResponseBodyPageBeanAlertRules) SetAnnotations(v []*GetAlertRulesResponseBodyPageBeanAlertRulesAnnotations) *GetAlertRulesResponseBodyPageBeanAlertRules {
	s.Annotations = v
	return s
}

func (s *GetAlertRulesResponseBodyPageBeanAlertRules) SetAutoAddNewApplication(v bool) *GetAlertRulesResponseBodyPageBeanAlertRules {
	s.AutoAddNewApplication = &v
	return s
}

func (s *GetAlertRulesResponseBodyPageBeanAlertRules) SetClusterId(v string) *GetAlertRulesResponseBodyPageBeanAlertRules {
	s.ClusterId = &v
	return s
}

func (s *GetAlertRulesResponseBodyPageBeanAlertRules) SetCreatedTime(v int64) *GetAlertRulesResponseBodyPageBeanAlertRules {
	s.CreatedTime = &v
	return s
}

func (s *GetAlertRulesResponseBodyPageBeanAlertRules) SetDuration(v string) *GetAlertRulesResponseBodyPageBeanAlertRules {
	s.Duration = &v
	return s
}

func (s *GetAlertRulesResponseBodyPageBeanAlertRules) SetExtend(v string) *GetAlertRulesResponseBodyPageBeanAlertRules {
	s.Extend = &v
	return s
}

func (s *GetAlertRulesResponseBodyPageBeanAlertRules) SetFilters(v *GetAlertRulesResponseBodyPageBeanAlertRulesFilters) *GetAlertRulesResponseBodyPageBeanAlertRules {
	s.Filters = v
	return s
}

func (s *GetAlertRulesResponseBodyPageBeanAlertRules) SetLabels(v []*GetAlertRulesResponseBodyPageBeanAlertRulesLabels) *GetAlertRulesResponseBodyPageBeanAlertRules {
	s.Labels = v
	return s
}

func (s *GetAlertRulesResponseBodyPageBeanAlertRules) SetLevel(v string) *GetAlertRulesResponseBodyPageBeanAlertRules {
	s.Level = &v
	return s
}

func (s *GetAlertRulesResponseBodyPageBeanAlertRules) SetMessage(v string) *GetAlertRulesResponseBodyPageBeanAlertRules {
	s.Message = &v
	return s
}

func (s *GetAlertRulesResponseBodyPageBeanAlertRules) SetMetricsType(v string) *GetAlertRulesResponseBodyPageBeanAlertRules {
	s.MetricsType = &v
	return s
}

func (s *GetAlertRulesResponseBodyPageBeanAlertRules) SetNotifyStrategy(v string) *GetAlertRulesResponseBodyPageBeanAlertRules {
	s.NotifyStrategy = &v
	return s
}

func (s *GetAlertRulesResponseBodyPageBeanAlertRules) SetPids(v []*string) *GetAlertRulesResponseBodyPageBeanAlertRules {
	s.Pids = v
	return s
}

func (s *GetAlertRulesResponseBodyPageBeanAlertRules) SetPromQL(v string) *GetAlertRulesResponseBodyPageBeanAlertRules {
	s.PromQL = &v
	return s
}

func (s *GetAlertRulesResponseBodyPageBeanAlertRules) SetRegionId(v string) *GetAlertRulesResponseBodyPageBeanAlertRules {
	s.RegionId = &v
	return s
}

func (s *GetAlertRulesResponseBodyPageBeanAlertRules) SetTags(v []*GetAlertRulesResponseBodyPageBeanAlertRulesTags) *GetAlertRulesResponseBodyPageBeanAlertRules {
	s.Tags = v
	return s
}

func (s *GetAlertRulesResponseBodyPageBeanAlertRules) SetUpdatedTime(v int64) *GetAlertRulesResponseBodyPageBeanAlertRules {
	s.UpdatedTime = &v
	return s
}

func (s *GetAlertRulesResponseBodyPageBeanAlertRules) SetUserId(v string) *GetAlertRulesResponseBodyPageBeanAlertRules {
	s.UserId = &v
	return s
}

type GetAlertRulesResponseBodyPageBeanAlertRulesAlertRuleContent struct {
	// The trigger conditions of the Application Monitoring or Browser Monitoring alert rule.
	AlertRuleItems []*GetAlertRulesResponseBodyPageBeanAlertRulesAlertRuleContentAlertRuleItems `json:"AlertRuleItems,omitempty" xml:"AlertRuleItems,omitempty" type:"Repeated"`
	// The relationship between multiple alert conditions specified for the Application Monitoring or Browser Monitoring alert rule. Valid values:
	//
	// 	- OR: meets any of the specified conditions.
	//
	// 	- AND: meets all the specified conditions.
	//
	// example:
	//
	// OR
	Condition *string `json:"Condition,omitempty" xml:"Condition,omitempty"`
}

func (s GetAlertRulesResponseBodyPageBeanAlertRulesAlertRuleContent) String() string {
	return tea.Prettify(s)
}

func (s GetAlertRulesResponseBodyPageBeanAlertRulesAlertRuleContent) GoString() string {
	return s.String()
}

func (s *GetAlertRulesResponseBodyPageBeanAlertRulesAlertRuleContent) SetAlertRuleItems(v []*GetAlertRulesResponseBodyPageBeanAlertRulesAlertRuleContentAlertRuleItems) *GetAlertRulesResponseBodyPageBeanAlertRulesAlertRuleContent {
	s.AlertRuleItems = v
	return s
}

func (s *GetAlertRulesResponseBodyPageBeanAlertRulesAlertRuleContent) SetCondition(v string) *GetAlertRulesResponseBodyPageBeanAlertRulesAlertRuleContent {
	s.Condition = &v
	return s
}

type GetAlertRulesResponseBodyPageBeanAlertRulesAlertRuleContentAlertRuleItems struct {
	// The aggregation method of the alert condition. Valid values:
	//
	// 	- AVG: calculates the average value
	//
	// 	- SUM: calculates the total value
	//
	// 	- MAX: selects the maximum value
	//
	// 	- MIN: selects the minimum value
	//
	// example:
	//
	// AVG
	Aggregate *string `json:"Aggregate,omitempty" xml:"Aggregate,omitempty"`
	// The metric of the alert condition.
	//
	// example:
	//
	// appstat.jvm.non_heap_used
	MetricKey *string `json:"MetricKey,omitempty" xml:"MetricKey,omitempty"`
	// Indicates the last N minutes.
	//
	// example:
	//
	// 1
	N *int64 `json:"N,omitempty" xml:"N,omitempty"`
	// The comparison operator that was used to compare the metric value with the threshold. Valid values:
	//
	// 	- CURRENT_GTE: greater than or equal to
	//
	// 	- CURRENT_LTE: less than or equal to
	//
	// 	- PREVIOUS_UP: the increase percentage compared with the last period
	//
	// 	- PREVIOUS_DOWN: the decrease percentage compared with the last period
	//
	// 	- HOH_UP: the increase percentage compared with the last hour
	//
	// 	- HOH_DOWN: the decrease percentage compared with the last hour
	//
	// 	- DOD_UP: the increase percentage compared with the last day
	//
	// 	- DOD_DOWN: the decrease percentage compared with the last day
	//
	// example:
	//
	// CURRENT_GTE
	Operator *string `json:"Operator,omitempty" xml:"Operator,omitempty"`
	// The threshold of the alert condition.
	//
	// example:
	//
	// 1
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s GetAlertRulesResponseBodyPageBeanAlertRulesAlertRuleContentAlertRuleItems) String() string {
	return tea.Prettify(s)
}

func (s GetAlertRulesResponseBodyPageBeanAlertRulesAlertRuleContentAlertRuleItems) GoString() string {
	return s.String()
}

func (s *GetAlertRulesResponseBodyPageBeanAlertRulesAlertRuleContentAlertRuleItems) SetAggregate(v string) *GetAlertRulesResponseBodyPageBeanAlertRulesAlertRuleContentAlertRuleItems {
	s.Aggregate = &v
	return s
}

func (s *GetAlertRulesResponseBodyPageBeanAlertRulesAlertRuleContentAlertRuleItems) SetMetricKey(v string) *GetAlertRulesResponseBodyPageBeanAlertRulesAlertRuleContentAlertRuleItems {
	s.MetricKey = &v
	return s
}

func (s *GetAlertRulesResponseBodyPageBeanAlertRulesAlertRuleContentAlertRuleItems) SetN(v int64) *GetAlertRulesResponseBodyPageBeanAlertRulesAlertRuleContentAlertRuleItems {
	s.N = &v
	return s
}

func (s *GetAlertRulesResponseBodyPageBeanAlertRulesAlertRuleContentAlertRuleItems) SetOperator(v string) *GetAlertRulesResponseBodyPageBeanAlertRulesAlertRuleContentAlertRuleItems {
	s.Operator = &v
	return s
}

func (s *GetAlertRulesResponseBodyPageBeanAlertRulesAlertRuleContentAlertRuleItems) SetValue(v string) *GetAlertRulesResponseBodyPageBeanAlertRulesAlertRuleContentAlertRuleItems {
	s.Value = &v
	return s
}

type GetAlertRulesResponseBodyPageBeanAlertRulesAnnotations struct {
	// The key of the annotation.
	//
	// example:
	//
	// 123
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The value of the annotation.
	//
	// example:
	//
	// abc
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s GetAlertRulesResponseBodyPageBeanAlertRulesAnnotations) String() string {
	return tea.Prettify(s)
}

func (s GetAlertRulesResponseBodyPageBeanAlertRulesAnnotations) GoString() string {
	return s.String()
}

func (s *GetAlertRulesResponseBodyPageBeanAlertRulesAnnotations) SetName(v string) *GetAlertRulesResponseBodyPageBeanAlertRulesAnnotations {
	s.Name = &v
	return s
}

func (s *GetAlertRulesResponseBodyPageBeanAlertRulesAnnotations) SetValue(v string) *GetAlertRulesResponseBodyPageBeanAlertRulesAnnotations {
	s.Value = &v
	return s
}

type GetAlertRulesResponseBodyPageBeanAlertRulesFilters struct {
	// The custom filter condition of the Browser Monitoring alert rule.
	CustomSLSFilters []*GetAlertRulesResponseBodyPageBeanAlertRulesFiltersCustomSLSFilters `json:"CustomSLSFilters,omitempty" xml:"CustomSLSFilters,omitempty" type:"Repeated"`
	// The information of the aggregation dimension.
	CustomSLSGroupByDimensions []*string `json:"CustomSLSGroupByDimensions,omitempty" xml:"CustomSLSGroupByDimensions,omitempty" type:"Repeated"`
	// The details of the custom filter condition.
	CustomSLSWheres []*string `json:"CustomSLSWheres,omitempty" xml:"CustomSLSWheres,omitempty" type:"Repeated"`
	// The information about each filter condition of the Application Monitoring or Browser Monitoring alert rule.
	DimFilters []*GetAlertRulesResponseBodyPageBeanAlertRulesFiltersDimFilters `json:"DimFilters,omitempty" xml:"DimFilters,omitempty" type:"Repeated"`
}

func (s GetAlertRulesResponseBodyPageBeanAlertRulesFilters) String() string {
	return tea.Prettify(s)
}

func (s GetAlertRulesResponseBodyPageBeanAlertRulesFilters) GoString() string {
	return s.String()
}

func (s *GetAlertRulesResponseBodyPageBeanAlertRulesFilters) SetCustomSLSFilters(v []*GetAlertRulesResponseBodyPageBeanAlertRulesFiltersCustomSLSFilters) *GetAlertRulesResponseBodyPageBeanAlertRulesFilters {
	s.CustomSLSFilters = v
	return s
}

func (s *GetAlertRulesResponseBodyPageBeanAlertRulesFilters) SetCustomSLSGroupByDimensions(v []*string) *GetAlertRulesResponseBodyPageBeanAlertRulesFilters {
	s.CustomSLSGroupByDimensions = v
	return s
}

func (s *GetAlertRulesResponseBodyPageBeanAlertRulesFilters) SetCustomSLSWheres(v []*string) *GetAlertRulesResponseBodyPageBeanAlertRulesFilters {
	s.CustomSLSWheres = v
	return s
}

func (s *GetAlertRulesResponseBodyPageBeanAlertRulesFilters) SetDimFilters(v []*GetAlertRulesResponseBodyPageBeanAlertRulesFiltersDimFilters) *GetAlertRulesResponseBodyPageBeanAlertRulesFilters {
	s.DimFilters = v
	return s
}

type GetAlertRulesResponseBodyPageBeanAlertRulesFiltersCustomSLSFilters struct {
	// The key of the filter condition.
	//
	// example:
	//
	// username
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The logical operator of the filter condition. Valid values:
	//
	// 	- \\=: equal to
	//
	// 	- not: not equal to
	//
	// example:
	//
	// =
	Opt *string `json:"Opt,omitempty" xml:"Opt,omitempty"`
	// Indicates whether this filter condition was displayed on the frontend.
	//
	// example:
	//
	// false
	Show *bool `json:"Show,omitempty" xml:"Show,omitempty"`
	// Indicates the log type of Browser Monitoring. This field was not included in other filter conditions.
	//
	// example:
	//
	// null
	T *string `json:"T,omitempty" xml:"T,omitempty"`
	// The value of the filter condition.
	//
	// example:
	//
	// test
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s GetAlertRulesResponseBodyPageBeanAlertRulesFiltersCustomSLSFilters) String() string {
	return tea.Prettify(s)
}

func (s GetAlertRulesResponseBodyPageBeanAlertRulesFiltersCustomSLSFilters) GoString() string {
	return s.String()
}

func (s *GetAlertRulesResponseBodyPageBeanAlertRulesFiltersCustomSLSFilters) SetKey(v string) *GetAlertRulesResponseBodyPageBeanAlertRulesFiltersCustomSLSFilters {
	s.Key = &v
	return s
}

func (s *GetAlertRulesResponseBodyPageBeanAlertRulesFiltersCustomSLSFilters) SetOpt(v string) *GetAlertRulesResponseBodyPageBeanAlertRulesFiltersCustomSLSFilters {
	s.Opt = &v
	return s
}

func (s *GetAlertRulesResponseBodyPageBeanAlertRulesFiltersCustomSLSFilters) SetShow(v bool) *GetAlertRulesResponseBodyPageBeanAlertRulesFiltersCustomSLSFilters {
	s.Show = &v
	return s
}

func (s *GetAlertRulesResponseBodyPageBeanAlertRulesFiltersCustomSLSFilters) SetT(v string) *GetAlertRulesResponseBodyPageBeanAlertRulesFiltersCustomSLSFilters {
	s.T = &v
	return s
}

func (s *GetAlertRulesResponseBodyPageBeanAlertRulesFiltersCustomSLSFilters) SetValue(v string) *GetAlertRulesResponseBodyPageBeanAlertRulesFiltersCustomSLSFilters {
	s.Value = &v
	return s
}

type GetAlertRulesResponseBodyPageBeanAlertRulesFiltersDimFilters struct {
	// The key of the filter condition.
	//
	// example:
	//
	// rootIp
	FilterKey *string `json:"FilterKey,omitempty" xml:"FilterKey,omitempty"`
	// The logical operator of the filter condition.
	//
	// example:
	//
	// ALL
	FilterOpt *string `json:"FilterOpt,omitempty" xml:"FilterOpt,omitempty"`
	// The details of the filter condition.
	FilterValues []*string `json:"FilterValues,omitempty" xml:"FilterValues,omitempty" type:"Repeated"`
}

func (s GetAlertRulesResponseBodyPageBeanAlertRulesFiltersDimFilters) String() string {
	return tea.Prettify(s)
}

func (s GetAlertRulesResponseBodyPageBeanAlertRulesFiltersDimFilters) GoString() string {
	return s.String()
}

func (s *GetAlertRulesResponseBodyPageBeanAlertRulesFiltersDimFilters) SetFilterKey(v string) *GetAlertRulesResponseBodyPageBeanAlertRulesFiltersDimFilters {
	s.FilterKey = &v
	return s
}

func (s *GetAlertRulesResponseBodyPageBeanAlertRulesFiltersDimFilters) SetFilterOpt(v string) *GetAlertRulesResponseBodyPageBeanAlertRulesFiltersDimFilters {
	s.FilterOpt = &v
	return s
}

func (s *GetAlertRulesResponseBodyPageBeanAlertRulesFiltersDimFilters) SetFilterValues(v []*string) *GetAlertRulesResponseBodyPageBeanAlertRulesFiltersDimFilters {
	s.FilterValues = v
	return s
}

type GetAlertRulesResponseBodyPageBeanAlertRulesLabels struct {
	// The tag key.
	//
	// example:
	//
	// 123
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The tag value.
	//
	// example:
	//
	// abc
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s GetAlertRulesResponseBodyPageBeanAlertRulesLabels) String() string {
	return tea.Prettify(s)
}

func (s GetAlertRulesResponseBodyPageBeanAlertRulesLabels) GoString() string {
	return s.String()
}

func (s *GetAlertRulesResponseBodyPageBeanAlertRulesLabels) SetName(v string) *GetAlertRulesResponseBodyPageBeanAlertRulesLabels {
	s.Name = &v
	return s
}

func (s *GetAlertRulesResponseBodyPageBeanAlertRulesLabels) SetValue(v string) *GetAlertRulesResponseBodyPageBeanAlertRulesLabels {
	s.Value = &v
	return s
}

type GetAlertRulesResponseBodyPageBeanAlertRulesTags struct {
	// The tag key.
	//
	// example:
	//
	// type
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The tag value.
	//
	// example:
	//
	// prod
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s GetAlertRulesResponseBodyPageBeanAlertRulesTags) String() string {
	return tea.Prettify(s)
}

func (s GetAlertRulesResponseBodyPageBeanAlertRulesTags) GoString() string {
	return s.String()
}

func (s *GetAlertRulesResponseBodyPageBeanAlertRulesTags) SetKey(v string) *GetAlertRulesResponseBodyPageBeanAlertRulesTags {
	s.Key = &v
	return s
}

func (s *GetAlertRulesResponseBodyPageBeanAlertRulesTags) SetValue(v string) *GetAlertRulesResponseBodyPageBeanAlertRulesTags {
	s.Value = &v
	return s
}

type GetAlertRulesResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetAlertRulesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetAlertRulesResponse) String() string {
	return tea.Prettify(s)
}

func (s GetAlertRulesResponse) GoString() string {
	return s.String()
}

func (s *GetAlertRulesResponse) SetHeaders(v map[string]*string) *GetAlertRulesResponse {
	s.Headers = v
	return s
}

func (s *GetAlertRulesResponse) SetStatusCode(v int32) *GetAlertRulesResponse {
	s.StatusCode = &v
	return s
}

func (s *GetAlertRulesResponse) SetBody(v *GetAlertRulesResponseBody) *GetAlertRulesResponse {
	s.Body = v
	return s
}

type GetAppApiByPageRequest struct {
	// The page number of the returned page.
	//
	// example:
	//
	// 1
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// The end of the time range to query. Unit: milliseconds.
	//
	// example:
	//
	// 1600066800000
	EndTime *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The time interval between the data shards to be queried. Unit: milliseconds. Minimum value: 60000. Maximum value: 2147483647.
	//
	// example:
	//
	// 60000
	IntervalMills *int32 `json:"IntervalMills,omitempty" xml:"IntervalMills,omitempty"`
	// The process identifier (PID) of the application. For information about how to obtain a PID, see [Obtain the PID of an application](https://www.alibabacloud.com/help/zh/doc-detail/186100.htm?spm=a2cdw.13409063.0.0.7a72281f0bkTfx#title-imy-7gj-qhr).
	//
	// This parameter is required.
	//
	// example:
	//
	// a2n80plglh@745eddxxx
	PId *string `json:"PId,omitempty" xml:"PId,omitempty"`
	// The number of entries to return on each page. This parameter is no longer supported. The number of entries to return on each page. Default value: 10.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the region.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The beginning of the time range to query. Unit: milliseconds.
	//
	// example:
	//
	// 1600063200000
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s GetAppApiByPageRequest) String() string {
	return tea.Prettify(s)
}

func (s GetAppApiByPageRequest) GoString() string {
	return s.String()
}

func (s *GetAppApiByPageRequest) SetCurrentPage(v int32) *GetAppApiByPageRequest {
	s.CurrentPage = &v
	return s
}

func (s *GetAppApiByPageRequest) SetEndTime(v int64) *GetAppApiByPageRequest {
	s.EndTime = &v
	return s
}

func (s *GetAppApiByPageRequest) SetIntervalMills(v int32) *GetAppApiByPageRequest {
	s.IntervalMills = &v
	return s
}

func (s *GetAppApiByPageRequest) SetPId(v string) *GetAppApiByPageRequest {
	s.PId = &v
	return s
}

func (s *GetAppApiByPageRequest) SetPageSize(v int32) *GetAppApiByPageRequest {
	s.PageSize = &v
	return s
}

func (s *GetAppApiByPageRequest) SetRegionId(v string) *GetAppApiByPageRequest {
	s.RegionId = &v
	return s
}

func (s *GetAppApiByPageRequest) SetStartTime(v int64) *GetAppApiByPageRequest {
	s.StartTime = &v
	return s
}

type GetAppApiByPageResponseBody struct {
	// The HTTP status code returned for the request. Valid values:
	//
	// 	- 2XX: The request was successful.
	//
	// 	- 3XX: A redirection message was returned.
	//
	// 	- 4XX: The request was invalid.
	//
	// 	- 5XX: A server error occurred.
	//
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The struct returned.
	Data *GetAppApiByPageResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The message returned.
	//
	// example:
	//
	// message
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// B6A00968-82A8-4F14-9D1B-B53827DB****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call was successful. Valid values:
	//
	// 	- `true`: The call was successful.
	//
	// 	- `false`: The call failed.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetAppApiByPageResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetAppApiByPageResponseBody) GoString() string {
	return s.String()
}

func (s *GetAppApiByPageResponseBody) SetCode(v int32) *GetAppApiByPageResponseBody {
	s.Code = &v
	return s
}

func (s *GetAppApiByPageResponseBody) SetData(v *GetAppApiByPageResponseBodyData) *GetAppApiByPageResponseBody {
	s.Data = v
	return s
}

func (s *GetAppApiByPageResponseBody) SetMessage(v string) *GetAppApiByPageResponseBody {
	s.Message = &v
	return s
}

func (s *GetAppApiByPageResponseBody) SetRequestId(v string) *GetAppApiByPageResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetAppApiByPageResponseBody) SetSuccess(v bool) *GetAppApiByPageResponseBody {
	s.Success = &v
	return s
}

type GetAppApiByPageResponseBodyData struct {
	// Is completed.
	//
	// example:
	//
	// false
	Completed *bool `json:"Completed,omitempty" xml:"Completed,omitempty"`
	// The data entries.
	Items []map[string]interface{} `json:"Items,omitempty" xml:"Items,omitempty" type:"Repeated"`
	// The page number of the returned page.
	//
	// example:
	//
	// 1
	Page *int32 `json:"Page,omitempty" xml:"Page,omitempty"`
	// The number of entries returned per page.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of returned entries.
	//
	// example:
	//
	// 0
	Total *string `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s GetAppApiByPageResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetAppApiByPageResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetAppApiByPageResponseBodyData) SetCompleted(v bool) *GetAppApiByPageResponseBodyData {
	s.Completed = &v
	return s
}

func (s *GetAppApiByPageResponseBodyData) SetItems(v []map[string]interface{}) *GetAppApiByPageResponseBodyData {
	s.Items = v
	return s
}

func (s *GetAppApiByPageResponseBodyData) SetPage(v int32) *GetAppApiByPageResponseBodyData {
	s.Page = &v
	return s
}

func (s *GetAppApiByPageResponseBodyData) SetPageSize(v int32) *GetAppApiByPageResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *GetAppApiByPageResponseBodyData) SetTotal(v string) *GetAppApiByPageResponseBodyData {
	s.Total = &v
	return s
}

type GetAppApiByPageResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetAppApiByPageResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetAppApiByPageResponse) String() string {
	return tea.Prettify(s)
}

func (s GetAppApiByPageResponse) GoString() string {
	return s.String()
}

func (s *GetAppApiByPageResponse) SetHeaders(v map[string]*string) *GetAppApiByPageResponse {
	s.Headers = v
	return s
}

func (s *GetAppApiByPageResponse) SetStatusCode(v int32) *GetAppApiByPageResponse {
	s.StatusCode = &v
	return s
}

func (s *GetAppApiByPageResponse) SetBody(v *GetAppApiByPageResponseBody) *GetAppApiByPageResponse {
	s.Body = v
	return s
}

type GetAppJVMConfigRequest struct {
	// The end of the time range to query. Unit: milliseconds.
	//
	// example:
	//
	// 1480607940000
	EndTime *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The ID of the application.
	//
	// Log on to the **ARMS console**. In the left-side navigation pane, choose **Application Monitoring*	- > **Applications**. On the **Applications*	- page, click the name of an application. The URL in the address bar contains the process ID (PID) of the application. The PID is indicated in the pid=xxx format. The PID is usually percent encoded as xxx%40xxx. You must modify this value to remove the percent encoding. For example, if the PID in the URL is eb4zdose6v%409781be0f44d\\*\\*\\*\\*, you must replace %40 with an at sign (@) to obtain eb4zdose6v@9781be0f44d\\*\\*\\*\\*.
	//
	// example:
	//
	// atc889zkcf@d8deedfa9bf****
	Pid *string `json:"Pid,omitempty" xml:"Pid,omitempty"`
	// The ID of the region.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The start time of the call method.
	//
	// example:
	//
	// 1480521600000
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s GetAppJVMConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s GetAppJVMConfigRequest) GoString() string {
	return s.String()
}

func (s *GetAppJVMConfigRequest) SetEndTime(v int64) *GetAppJVMConfigRequest {
	s.EndTime = &v
	return s
}

func (s *GetAppJVMConfigRequest) SetPid(v string) *GetAppJVMConfigRequest {
	s.Pid = &v
	return s
}

func (s *GetAppJVMConfigRequest) SetRegionId(v string) *GetAppJVMConfigRequest {
	s.RegionId = &v
	return s
}

func (s *GetAppJVMConfigRequest) SetStartTime(v int64) *GetAppJVMConfigRequest {
	s.StartTime = &v
	return s
}

type GetAppJVMConfigResponseBody struct {
	// The status code. The status code 200 indicates that the request was successful. If another status code is returned, the request failed.
	//
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// Java VM info list.
	JvmInfoList []*GetAppJVMConfigResponseBodyJvmInfoList `json:"JvmInfoList,omitempty" xml:"JvmInfoList,omitempty" type:"Repeated"`
	// The returned message.
	//
	// example:
	//
	// message
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 1A9C645C-C83F-4C9D-8CCB-29BEC9E1****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- `true`
	//
	// 	- `false`
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetAppJVMConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetAppJVMConfigResponseBody) GoString() string {
	return s.String()
}

func (s *GetAppJVMConfigResponseBody) SetCode(v int32) *GetAppJVMConfigResponseBody {
	s.Code = &v
	return s
}

func (s *GetAppJVMConfigResponseBody) SetJvmInfoList(v []*GetAppJVMConfigResponseBodyJvmInfoList) *GetAppJVMConfigResponseBody {
	s.JvmInfoList = v
	return s
}

func (s *GetAppJVMConfigResponseBody) SetMessage(v string) *GetAppJVMConfigResponseBody {
	s.Message = &v
	return s
}

func (s *GetAppJVMConfigResponseBody) SetRequestId(v string) *GetAppJVMConfigResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetAppJVMConfigResponseBody) SetSuccess(v bool) *GetAppJVMConfigResponseBody {
	s.Success = &v
	return s
}

type GetAppJVMConfigResponseBodyJvmInfoList struct {
	// Agent version.
	//
	// example:
	//
	// 1.7.0-SNAPSHOT_3.0.3_3756244
	AgentVersion *string `json:"AgentVersion,omitempty" xml:"AgentVersion,omitempty"`
	// The name of the elastic container instance.
	//
	// example:
	//
	// host_name
	HostName *string `json:"HostName,omitempty" xml:"HostName,omitempty"`
	// Ip address.
	//
	// example:
	//
	// 47.91.59.244
	Ip *string `json:"Ip,omitempty" xml:"Ip,omitempty"`
	// The PID.
	//
	// example:
	//
	// dsv9zcel92@1455182510c5369
	Pid *string `json:"Pid,omitempty" xml:"Pid,omitempty"`
	// Process Id.
	//
	// example:
	//
	// 1
	ProcId *string `json:"ProcId,omitempty" xml:"ProcId,omitempty"`
	// Java VM config.
	//
	// example:
	//
	// [-javaagent:/home/admin/.opt/ArmsAgent/arms-bootstrap-1.7.0-SNAPSHOT.jar, -Doneagent.plugin.arms-agent.enabled=true, -Darms.licenseKey=[******], -Darms.agent.env=K8s, -Darms.agent.podinfo.path=/etc/podinfo, -Darms.appName=productservice, -Doneagent.region=cn-hangzhou, -Dproject.name=Product]
	VmArgs *string `json:"VmArgs,omitempty" xml:"VmArgs,omitempty"`
}

func (s GetAppJVMConfigResponseBodyJvmInfoList) String() string {
	return tea.Prettify(s)
}

func (s GetAppJVMConfigResponseBodyJvmInfoList) GoString() string {
	return s.String()
}

func (s *GetAppJVMConfigResponseBodyJvmInfoList) SetAgentVersion(v string) *GetAppJVMConfigResponseBodyJvmInfoList {
	s.AgentVersion = &v
	return s
}

func (s *GetAppJVMConfigResponseBodyJvmInfoList) SetHostName(v string) *GetAppJVMConfigResponseBodyJvmInfoList {
	s.HostName = &v
	return s
}

func (s *GetAppJVMConfigResponseBodyJvmInfoList) SetIp(v string) *GetAppJVMConfigResponseBodyJvmInfoList {
	s.Ip = &v
	return s
}

func (s *GetAppJVMConfigResponseBodyJvmInfoList) SetPid(v string) *GetAppJVMConfigResponseBodyJvmInfoList {
	s.Pid = &v
	return s
}

func (s *GetAppJVMConfigResponseBodyJvmInfoList) SetProcId(v string) *GetAppJVMConfigResponseBodyJvmInfoList {
	s.ProcId = &v
	return s
}

func (s *GetAppJVMConfigResponseBodyJvmInfoList) SetVmArgs(v string) *GetAppJVMConfigResponseBodyJvmInfoList {
	s.VmArgs = &v
	return s
}

type GetAppJVMConfigResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetAppJVMConfigResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetAppJVMConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s GetAppJVMConfigResponse) GoString() string {
	return s.String()
}

func (s *GetAppJVMConfigResponse) SetHeaders(v map[string]*string) *GetAppJVMConfigResponse {
	s.Headers = v
	return s
}

func (s *GetAppJVMConfigResponse) SetStatusCode(v int32) *GetAppJVMConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *GetAppJVMConfigResponse) SetBody(v *GetAppJVMConfigResponseBody) *GetAppJVMConfigResponse {
	s.Body = v
	return s
}

type GetAuthTokenRequest struct {
	// The ID of the cluster.
	//
	// This parameter is required.
	//
	// example:
	//
	// cc7a37ee31aea4ed1a059eff8034b****
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	// The region ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s GetAuthTokenRequest) String() string {
	return tea.Prettify(s)
}

func (s GetAuthTokenRequest) GoString() string {
	return s.String()
}

func (s *GetAuthTokenRequest) SetClusterId(v string) *GetAuthTokenRequest {
	s.ClusterId = &v
	return s
}

func (s *GetAuthTokenRequest) SetRegionId(v string) *GetAuthTokenRequest {
	s.RegionId = &v
	return s
}

type GetAuthTokenResponseBody struct {
	// The status code. The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned authentication token.
	//
	// example:
	//
	// eyJhbGciOiJIUzI1NiJ9******
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// The returned message.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 1A9C645C-C83F-4C9D-8CCB-29BEC9E1****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- `true`
	//
	// 	- `false`
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetAuthTokenResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetAuthTokenResponseBody) GoString() string {
	return s.String()
}

func (s *GetAuthTokenResponseBody) SetCode(v int32) *GetAuthTokenResponseBody {
	s.Code = &v
	return s
}

func (s *GetAuthTokenResponseBody) SetData(v string) *GetAuthTokenResponseBody {
	s.Data = &v
	return s
}

func (s *GetAuthTokenResponseBody) SetMessage(v string) *GetAuthTokenResponseBody {
	s.Message = &v
	return s
}

func (s *GetAuthTokenResponseBody) SetRequestId(v string) *GetAuthTokenResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetAuthTokenResponseBody) SetSuccess(v bool) *GetAuthTokenResponseBody {
	s.Success = &v
	return s
}

type GetAuthTokenResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetAuthTokenResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetAuthTokenResponse) String() string {
	return tea.Prettify(s)
}

func (s GetAuthTokenResponse) GoString() string {
	return s.String()
}

func (s *GetAuthTokenResponse) SetHeaders(v map[string]*string) *GetAuthTokenResponse {
	s.Headers = v
	return s
}

func (s *GetAuthTokenResponse) SetStatusCode(v int32) *GetAuthTokenResponse {
	s.StatusCode = &v
	return s
}

func (s *GetAuthTokenResponse) SetBody(v *GetAuthTokenResponseBody) *GetAuthTokenResponse {
	s.Body = v
	return s
}

type GetCloudClusterAllUrlRequest struct {
	// The ID of the CloudMonitor instance.
	//
	// example:
	//
	// ca9676014babd4
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	// The region ID.
	//
	// example:
	//
	// cn-beijing
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s GetCloudClusterAllUrlRequest) String() string {
	return tea.Prettify(s)
}

func (s GetCloudClusterAllUrlRequest) GoString() string {
	return s.String()
}

func (s *GetCloudClusterAllUrlRequest) SetClusterId(v string) *GetCloudClusterAllUrlRequest {
	s.ClusterId = &v
	return s
}

func (s *GetCloudClusterAllUrlRequest) SetRegionId(v string) *GetCloudClusterAllUrlRequest {
	s.RegionId = &v
	return s
}

type GetCloudClusterAllUrlResponseBody struct {
	// 状态码。200为成功，其他状态码为异常。
	//
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// An array object.
	Data []*GetCloudClusterAllUrlResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// 详细信息。
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	//
	// example:
	//
	// 99A663CB-8D7B-4B0D-A006-03C8EE38E7BB
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// 操作是否成功：true：操作成功                                 false：操作失败
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetCloudClusterAllUrlResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetCloudClusterAllUrlResponseBody) GoString() string {
	return s.String()
}

func (s *GetCloudClusterAllUrlResponseBody) SetCode(v int32) *GetCloudClusterAllUrlResponseBody {
	s.Code = &v
	return s
}

func (s *GetCloudClusterAllUrlResponseBody) SetData(v []*GetCloudClusterAllUrlResponseBodyData) *GetCloudClusterAllUrlResponseBody {
	s.Data = v
	return s
}

func (s *GetCloudClusterAllUrlResponseBody) SetMessage(v string) *GetCloudClusterAllUrlResponseBody {
	s.Message = &v
	return s
}

func (s *GetCloudClusterAllUrlResponseBody) SetRequestId(v string) *GetCloudClusterAllUrlResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetCloudClusterAllUrlResponseBody) SetSuccess(v bool) *GetCloudClusterAllUrlResponseBody {
	s.Success = &v
	return s
}

type GetCloudClusterAllUrlResponseBodyData struct {
	// The identifier of the cloud service.
	//
	// example:
	//
	// amp
	ProductCode *string `json:"ProductCode,omitempty" xml:"ProductCode,omitempty"`
	// The region ID.
	//
	// example:
	//
	// cn-hangzhou
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// The URLs for remote read and write. The value is a JSON string.
	RemoteUrl *GetCloudClusterAllUrlResponseBodyDataRemoteUrl `json:"RemoteUrl,omitempty" xml:"RemoteUrl,omitempty" type:"Struct"`
}

func (s GetCloudClusterAllUrlResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetCloudClusterAllUrlResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetCloudClusterAllUrlResponseBodyData) SetProductCode(v string) *GetCloudClusterAllUrlResponseBodyData {
	s.ProductCode = &v
	return s
}

func (s *GetCloudClusterAllUrlResponseBodyData) SetRegion(v string) *GetCloudClusterAllUrlResponseBodyData {
	s.Region = &v
	return s
}

func (s *GetCloudClusterAllUrlResponseBodyData) SetRemoteUrl(v *GetCloudClusterAllUrlResponseBodyDataRemoteUrl) *GetCloudClusterAllUrlResponseBodyData {
	s.RemoteUrl = v
	return s
}

type GetCloudClusterAllUrlResponseBodyDataRemoteUrl struct {
	// Indicates whether authentication is enabled.
	//
	// example:
	//
	// true
	AuthToken *bool `json:"AuthToken,omitempty" xml:"AuthToken,omitempty"`
	// The internal URL for Grafana.
	//
	// example:
	//
	// "http://cn-hangzhou-intranet.arms.aliyuncs.com:9090/api/v1/prometheus/XXXXXXXXXXXXXXXXX"
	GrafanaUrl *string `json:"GrafanaUrl,omitempty" xml:"GrafanaUrl,omitempty"`
	// The public URL for Grafana.
	//
	// example:
	//
	// "http://cn-hangzhou.arms.aliyuncs.com:9090/api/v1/prometheus/XXXXXXXXXXXXXXXXX"
	InternetGrafanaUrl *string `json:"InternetGrafanaUrl,omitempty" xml:"InternetGrafanaUrl,omitempty"`
	// The public URL for Pushgateway.
	//
	// example:
	//
	// "http://cn-hangzhou.arms.aliyuncs.com:9090/api/v1/prometheus/XXXXXXXXXXXXXXXXX"
	InternetPushGatewayUrl *string `json:"InternetPushGatewayUrl,omitempty" xml:"InternetPushGatewayUrl,omitempty"`
	// The public URL for remote read.
	//
	// example:
	//
	// "http://cn-hangzhou.arms.aliyuncs.com:9090/api/v1/prometheus/XXXXXXXXXXXXXXXXX"
	InternetRemoteReadUrl *string `json:"InternetRemoteReadUrl,omitempty" xml:"InternetRemoteReadUrl,omitempty"`
	// The public URL for remote write.
	//
	// example:
	//
	// "http://cn-hangzhou.arms.aliyuncs.com:9090/api/v1/prometheus/XXXXXXXXXXXXXXXXX"
	InternetRemoteWriteUrl *string `json:"InternetRemoteWriteUrl,omitempty" xml:"InternetRemoteWriteUrl,omitempty"`
	// The internal URL for Pushgateway.
	//
	// example:
	//
	// "http://cn-hangzhou-intranet.arms.aliyuncs.com:9090/api/v1/prometheus/XXXXXXXXXXXXXXXXX"
	PushGatewayUrl *string `json:"PushGatewayUrl,omitempty" xml:"PushGatewayUrl,omitempty"`
	// The internal URL for remote read.
	//
	// example:
	//
	// "http://cn-hangzhou-intranet.arms.aliyuncs.com:9090/api/v1/prometheus/XXXXXXXXXXXXXXXXX"
	RemoteReadUrl *string `json:"RemoteReadUrl,omitempty" xml:"RemoteReadUrl,omitempty"`
	// The internal URL for remote write.
	//
	// example:
	//
	// "http://cn-hangzhou-intranet.arms.aliyuncs.com:9090/api/v1/prometheus/XXXXXXXXXXXXXXXXX"
	RemoteWriteUrl *string `json:"RemoteWriteUrl,omitempty" xml:"RemoteWriteUrl,omitempty"`
	// The token value used for authentication.
	//
	// example:
	//
	// "eyJhbGciOiJIUzI1NiJ9.DKEIFJSL.KYK6uOtNVxTVHXJbH5MNqlsAuUtKzNlUvmAIiKc-QXw"
	Token *string `json:"Token,omitempty" xml:"Token,omitempty"`
}

func (s GetCloudClusterAllUrlResponseBodyDataRemoteUrl) String() string {
	return tea.Prettify(s)
}

func (s GetCloudClusterAllUrlResponseBodyDataRemoteUrl) GoString() string {
	return s.String()
}

func (s *GetCloudClusterAllUrlResponseBodyDataRemoteUrl) SetAuthToken(v bool) *GetCloudClusterAllUrlResponseBodyDataRemoteUrl {
	s.AuthToken = &v
	return s
}

func (s *GetCloudClusterAllUrlResponseBodyDataRemoteUrl) SetGrafanaUrl(v string) *GetCloudClusterAllUrlResponseBodyDataRemoteUrl {
	s.GrafanaUrl = &v
	return s
}

func (s *GetCloudClusterAllUrlResponseBodyDataRemoteUrl) SetInternetGrafanaUrl(v string) *GetCloudClusterAllUrlResponseBodyDataRemoteUrl {
	s.InternetGrafanaUrl = &v
	return s
}

func (s *GetCloudClusterAllUrlResponseBodyDataRemoteUrl) SetInternetPushGatewayUrl(v string) *GetCloudClusterAllUrlResponseBodyDataRemoteUrl {
	s.InternetPushGatewayUrl = &v
	return s
}

func (s *GetCloudClusterAllUrlResponseBodyDataRemoteUrl) SetInternetRemoteReadUrl(v string) *GetCloudClusterAllUrlResponseBodyDataRemoteUrl {
	s.InternetRemoteReadUrl = &v
	return s
}

func (s *GetCloudClusterAllUrlResponseBodyDataRemoteUrl) SetInternetRemoteWriteUrl(v string) *GetCloudClusterAllUrlResponseBodyDataRemoteUrl {
	s.InternetRemoteWriteUrl = &v
	return s
}

func (s *GetCloudClusterAllUrlResponseBodyDataRemoteUrl) SetPushGatewayUrl(v string) *GetCloudClusterAllUrlResponseBodyDataRemoteUrl {
	s.PushGatewayUrl = &v
	return s
}

func (s *GetCloudClusterAllUrlResponseBodyDataRemoteUrl) SetRemoteReadUrl(v string) *GetCloudClusterAllUrlResponseBodyDataRemoteUrl {
	s.RemoteReadUrl = &v
	return s
}

func (s *GetCloudClusterAllUrlResponseBodyDataRemoteUrl) SetRemoteWriteUrl(v string) *GetCloudClusterAllUrlResponseBodyDataRemoteUrl {
	s.RemoteWriteUrl = &v
	return s
}

func (s *GetCloudClusterAllUrlResponseBodyDataRemoteUrl) SetToken(v string) *GetCloudClusterAllUrlResponseBodyDataRemoteUrl {
	s.Token = &v
	return s
}

type GetCloudClusterAllUrlResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetCloudClusterAllUrlResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetCloudClusterAllUrlResponse) String() string {
	return tea.Prettify(s)
}

func (s GetCloudClusterAllUrlResponse) GoString() string {
	return s.String()
}

func (s *GetCloudClusterAllUrlResponse) SetHeaders(v map[string]*string) *GetCloudClusterAllUrlResponse {
	s.Headers = v
	return s
}

func (s *GetCloudClusterAllUrlResponse) SetStatusCode(v int32) *GetCloudClusterAllUrlResponse {
	s.StatusCode = &v
	return s
}

func (s *GetCloudClusterAllUrlResponse) SetBody(v *GetCloudClusterAllUrlResponseBody) *GetCloudClusterAllUrlResponse {
	s.Body = v
	return s
}

type GetClusterAllUrlRequest struct {
	// The cluster ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cc7a37ee31aea4ed1a059eff8034b****
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	// The region ID. Default value: cn-hangzhou.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s GetClusterAllUrlRequest) String() string {
	return tea.Prettify(s)
}

func (s GetClusterAllUrlRequest) GoString() string {
	return s.String()
}

func (s *GetClusterAllUrlRequest) SetClusterId(v string) *GetClusterAllUrlRequest {
	s.ClusterId = &v
	return s
}

func (s *GetClusterAllUrlRequest) SetRegionId(v string) *GetClusterAllUrlRequest {
	s.RegionId = &v
	return s
}

type GetClusterAllUrlResponseBody struct {
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The response parameters in the JSON format.
	//
	// example:
	//
	// {
	//
	//   "RequestId": "41877338-646B-5DD6-BFBE-F89F1E7245AD",
	//
	//   "Data": "{\\"clusterType\\":\\"ManagedKubernetes\\",\\"remoteWriteUrl\\":\\"http:/" }
	Data    *string `json:"Data,omitempty" xml:"Data,omitempty"`
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 40B10E04-81E8-4643-970D-F1B38F2E****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetClusterAllUrlResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetClusterAllUrlResponseBody) GoString() string {
	return s.String()
}

func (s *GetClusterAllUrlResponseBody) SetCode(v int32) *GetClusterAllUrlResponseBody {
	s.Code = &v
	return s
}

func (s *GetClusterAllUrlResponseBody) SetData(v string) *GetClusterAllUrlResponseBody {
	s.Data = &v
	return s
}

func (s *GetClusterAllUrlResponseBody) SetMessage(v string) *GetClusterAllUrlResponseBody {
	s.Message = &v
	return s
}

func (s *GetClusterAllUrlResponseBody) SetRequestId(v string) *GetClusterAllUrlResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetClusterAllUrlResponseBody) SetSuccess(v bool) *GetClusterAllUrlResponseBody {
	s.Success = &v
	return s
}

type GetClusterAllUrlResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetClusterAllUrlResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetClusterAllUrlResponse) String() string {
	return tea.Prettify(s)
}

func (s GetClusterAllUrlResponse) GoString() string {
	return s.String()
}

func (s *GetClusterAllUrlResponse) SetHeaders(v map[string]*string) *GetClusterAllUrlResponse {
	s.Headers = v
	return s
}

func (s *GetClusterAllUrlResponse) SetStatusCode(v int32) *GetClusterAllUrlResponse {
	s.StatusCode = &v
	return s
}

func (s *GetClusterAllUrlResponse) SetBody(v *GetClusterAllUrlResponseBody) *GetClusterAllUrlResponse {
	s.Body = v
	return s
}

type GetCommercialStatusRequest struct {
	// example:
	//
	// arms_app_post
	CommodityCode *string `json:"CommodityCode,omitempty" xml:"CommodityCode,omitempty"`
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s GetCommercialStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s GetCommercialStatusRequest) GoString() string {
	return s.String()
}

func (s *GetCommercialStatusRequest) SetCommodityCode(v string) *GetCommercialStatusRequest {
	s.CommodityCode = &v
	return s
}

func (s *GetCommercialStatusRequest) SetRegionId(v string) *GetCommercialStatusRequest {
	s.RegionId = &v
	return s
}

type GetCommercialStatusResponseBody struct {
	// Id of the request
	//
	// example:
	//
	// 49C82193-E991-5F6A-AF3E-1664D8D05CA3
	RequestId              *string                                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	UserAndCommodityStatus *GetCommercialStatusResponseBodyUserAndCommodityStatus `json:"UserAndCommodityStatus,omitempty" xml:"UserAndCommodityStatus,omitempty" type:"Struct"`
}

func (s GetCommercialStatusResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetCommercialStatusResponseBody) GoString() string {
	return s.String()
}

func (s *GetCommercialStatusResponseBody) SetRequestId(v string) *GetCommercialStatusResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetCommercialStatusResponseBody) SetUserAndCommodityStatus(v *GetCommercialStatusResponseBodyUserAndCommodityStatus) *GetCommercialStatusResponseBody {
	s.UserAndCommodityStatus = v
	return s
}

type GetCommercialStatusResponseBodyUserAndCommodityStatus struct {
	// example:
	//
	// false
	Basic *bool `json:"Basic,omitempty" xml:"Basic,omitempty"`
	// example:
	//
	// usage
	ChargeType *string `json:"ChargeType,omitempty" xml:"ChargeType,omitempty"`
	// example:
	//
	// true
	Enable *bool `json:"Enable,omitempty" xml:"Enable,omitempty"`
	// example:
	//
	// info
	ExtraInfo map[string]interface{} `json:"ExtraInfo,omitempty" xml:"ExtraInfo,omitempty"`
	// example:
	//
	// 10
	FreeDays *int64 `json:"FreeDays,omitempty" xml:"FreeDays,omitempty"`
	// example:
	//
	// NEW
	Lable *string `json:"Lable,omitempty" xml:"Lable,omitempty"`
	// example:
	//
	// Normal
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetCommercialStatusResponseBodyUserAndCommodityStatus) String() string {
	return tea.Prettify(s)
}

func (s GetCommercialStatusResponseBodyUserAndCommodityStatus) GoString() string {
	return s.String()
}

func (s *GetCommercialStatusResponseBodyUserAndCommodityStatus) SetBasic(v bool) *GetCommercialStatusResponseBodyUserAndCommodityStatus {
	s.Basic = &v
	return s
}

func (s *GetCommercialStatusResponseBodyUserAndCommodityStatus) SetChargeType(v string) *GetCommercialStatusResponseBodyUserAndCommodityStatus {
	s.ChargeType = &v
	return s
}

func (s *GetCommercialStatusResponseBodyUserAndCommodityStatus) SetEnable(v bool) *GetCommercialStatusResponseBodyUserAndCommodityStatus {
	s.Enable = &v
	return s
}

func (s *GetCommercialStatusResponseBodyUserAndCommodityStatus) SetExtraInfo(v map[string]interface{}) *GetCommercialStatusResponseBodyUserAndCommodityStatus {
	s.ExtraInfo = v
	return s
}

func (s *GetCommercialStatusResponseBodyUserAndCommodityStatus) SetFreeDays(v int64) *GetCommercialStatusResponseBodyUserAndCommodityStatus {
	s.FreeDays = &v
	return s
}

func (s *GetCommercialStatusResponseBodyUserAndCommodityStatus) SetLable(v string) *GetCommercialStatusResponseBodyUserAndCommodityStatus {
	s.Lable = &v
	return s
}

func (s *GetCommercialStatusResponseBodyUserAndCommodityStatus) SetStatus(v string) *GetCommercialStatusResponseBodyUserAndCommodityStatus {
	s.Status = &v
	return s
}

type GetCommercialStatusResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetCommercialStatusResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetCommercialStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s GetCommercialStatusResponse) GoString() string {
	return s.String()
}

func (s *GetCommercialStatusResponse) SetHeaders(v map[string]*string) *GetCommercialStatusResponse {
	s.Headers = v
	return s
}

func (s *GetCommercialStatusResponse) SetStatusCode(v int32) *GetCommercialStatusResponse {
	s.StatusCode = &v
	return s
}

func (s *GetCommercialStatusResponse) SetBody(v *GetCommercialStatusResponseBody) *GetCommercialStatusResponse {
	s.Body = v
	return s
}

type GetExploreUrlRequest struct {
	// The cluster ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// c9cc4c5e220f8461f9d71b6ec6e******
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	// The query statement that corresponds to the data source.
	//
	// example:
	//
	// {app="buy2"}
	Expression *string `json:"Expression,omitempty" xml:"Expression,omitempty"`
	// The region ID.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The type of the Grafana data source.
	//
	// This parameter is required.
	//
	// example:
	//
	// prometheus
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetExploreUrlRequest) String() string {
	return tea.Prettify(s)
}

func (s GetExploreUrlRequest) GoString() string {
	return s.String()
}

func (s *GetExploreUrlRequest) SetClusterId(v string) *GetExploreUrlRequest {
	s.ClusterId = &v
	return s
}

func (s *GetExploreUrlRequest) SetExpression(v string) *GetExploreUrlRequest {
	s.Expression = &v
	return s
}

func (s *GetExploreUrlRequest) SetRegionId(v string) *GetExploreUrlRequest {
	s.RegionId = &v
	return s
}

func (s *GetExploreUrlRequest) SetType(v string) *GetExploreUrlRequest {
	s.Type = &v
	return s
}

type GetExploreUrlResponseBody struct {
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// Response parameters
	//
	// example:
	//
	// -
	Data    *string `json:"Data,omitempty" xml:"Data,omitempty"`
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 34ED024E-9E31-434A-9E4E-D9D15C3****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetExploreUrlResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetExploreUrlResponseBody) GoString() string {
	return s.String()
}

func (s *GetExploreUrlResponseBody) SetCode(v int32) *GetExploreUrlResponseBody {
	s.Code = &v
	return s
}

func (s *GetExploreUrlResponseBody) SetData(v string) *GetExploreUrlResponseBody {
	s.Data = &v
	return s
}

func (s *GetExploreUrlResponseBody) SetMessage(v string) *GetExploreUrlResponseBody {
	s.Message = &v
	return s
}

func (s *GetExploreUrlResponseBody) SetRequestId(v string) *GetExploreUrlResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetExploreUrlResponseBody) SetSuccess(v bool) *GetExploreUrlResponseBody {
	s.Success = &v
	return s
}

type GetExploreUrlResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetExploreUrlResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetExploreUrlResponse) String() string {
	return tea.Prettify(s)
}

func (s GetExploreUrlResponse) GoString() string {
	return s.String()
}

func (s *GetExploreUrlResponse) SetHeaders(v map[string]*string) *GetExploreUrlResponse {
	s.Headers = v
	return s
}

func (s *GetExploreUrlResponse) SetStatusCode(v int32) *GetExploreUrlResponse {
	s.StatusCode = &v
	return s
}

func (s *GetExploreUrlResponse) SetBody(v *GetExploreUrlResponseBody) *GetExploreUrlResponse {
	s.Body = v
	return s
}

type GetGrafanaWorkspaceRequest struct {
	// example:
	//
	// zh
	AliyunLang *string `json:"AliyunLang,omitempty" xml:"AliyunLang,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// grafana-cn-4xl3g******
	GrafanaWorkspaceId *string `json:"GrafanaWorkspaceId,omitempty" xml:"GrafanaWorkspaceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s GetGrafanaWorkspaceRequest) String() string {
	return tea.Prettify(s)
}

func (s GetGrafanaWorkspaceRequest) GoString() string {
	return s.String()
}

func (s *GetGrafanaWorkspaceRequest) SetAliyunLang(v string) *GetGrafanaWorkspaceRequest {
	s.AliyunLang = &v
	return s
}

func (s *GetGrafanaWorkspaceRequest) SetGrafanaWorkspaceId(v string) *GetGrafanaWorkspaceRequest {
	s.GrafanaWorkspaceId = &v
	return s
}

func (s *GetGrafanaWorkspaceRequest) SetRegionId(v string) *GetGrafanaWorkspaceRequest {
	s.RegionId = &v
	return s
}

type GetGrafanaWorkspaceResponseBody struct {
	// example:
	//
	// 200
	Code *int32            `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *GrafanaWorkspace `json:"Data,omitempty" xml:"Data,omitempty"`
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	//
	// example:
	//
	// 2C3F217B-9AAE-5D51-974D-48********
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// example:
	//
	// eac0a8048716731735000007137d000b
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s GetGrafanaWorkspaceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetGrafanaWorkspaceResponseBody) GoString() string {
	return s.String()
}

func (s *GetGrafanaWorkspaceResponseBody) SetCode(v int32) *GetGrafanaWorkspaceResponseBody {
	s.Code = &v
	return s
}

func (s *GetGrafanaWorkspaceResponseBody) SetData(v *GrafanaWorkspace) *GetGrafanaWorkspaceResponseBody {
	s.Data = v
	return s
}

func (s *GetGrafanaWorkspaceResponseBody) SetMessage(v string) *GetGrafanaWorkspaceResponseBody {
	s.Message = &v
	return s
}

func (s *GetGrafanaWorkspaceResponseBody) SetRequestId(v string) *GetGrafanaWorkspaceResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetGrafanaWorkspaceResponseBody) SetSuccess(v bool) *GetGrafanaWorkspaceResponseBody {
	s.Success = &v
	return s
}

func (s *GetGrafanaWorkspaceResponseBody) SetTraceId(v string) *GetGrafanaWorkspaceResponseBody {
	s.TraceId = &v
	return s
}

type GetGrafanaWorkspaceResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetGrafanaWorkspaceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetGrafanaWorkspaceResponse) String() string {
	return tea.Prettify(s)
}

func (s GetGrafanaWorkspaceResponse) GoString() string {
	return s.String()
}

func (s *GetGrafanaWorkspaceResponse) SetHeaders(v map[string]*string) *GetGrafanaWorkspaceResponse {
	s.Headers = v
	return s
}

func (s *GetGrafanaWorkspaceResponse) SetStatusCode(v int32) *GetGrafanaWorkspaceResponse {
	s.StatusCode = &v
	return s
}

func (s *GetGrafanaWorkspaceResponse) SetBody(v *GetGrafanaWorkspaceResponseBody) *GetGrafanaWorkspaceResponse {
	s.Body = v
	return s
}

type GetIntegrationStateRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// cc7a37ee31aea4ed1a059eff8034b****
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// asm
	Integration *string `json:"Integration,omitempty" xml:"Integration,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s GetIntegrationStateRequest) String() string {
	return tea.Prettify(s)
}

func (s GetIntegrationStateRequest) GoString() string {
	return s.String()
}

func (s *GetIntegrationStateRequest) SetClusterId(v string) *GetIntegrationStateRequest {
	s.ClusterId = &v
	return s
}

func (s *GetIntegrationStateRequest) SetIntegration(v string) *GetIntegrationStateRequest {
	s.Integration = &v
	return s
}

func (s *GetIntegrationStateRequest) SetRegionId(v string) *GetIntegrationStateRequest {
	s.RegionId = &v
	return s
}

type GetIntegrationStateResponseBody struct {
	// 状态码。200为成功，其他状态码为异常。
	//
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// 返回结果的提示信息。
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 1A9C645C-C83F-4C9D-8CCB-29BEC9E1****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	State *bool `json:"State,omitempty" xml:"State,omitempty"`
}

func (s GetIntegrationStateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetIntegrationStateResponseBody) GoString() string {
	return s.String()
}

func (s *GetIntegrationStateResponseBody) SetCode(v int32) *GetIntegrationStateResponseBody {
	s.Code = &v
	return s
}

func (s *GetIntegrationStateResponseBody) SetMessage(v string) *GetIntegrationStateResponseBody {
	s.Message = &v
	return s
}

func (s *GetIntegrationStateResponseBody) SetRequestId(v string) *GetIntegrationStateResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetIntegrationStateResponseBody) SetState(v bool) *GetIntegrationStateResponseBody {
	s.State = &v
	return s
}

type GetIntegrationStateResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetIntegrationStateResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetIntegrationStateResponse) String() string {
	return tea.Prettify(s)
}

func (s GetIntegrationStateResponse) GoString() string {
	return s.String()
}

func (s *GetIntegrationStateResponse) SetHeaders(v map[string]*string) *GetIntegrationStateResponse {
	s.Headers = v
	return s
}

func (s *GetIntegrationStateResponse) SetStatusCode(v int32) *GetIntegrationStateResponse {
	s.StatusCode = &v
	return s
}

func (s *GetIntegrationStateResponse) SetBody(v *GetIntegrationStateResponseBody) *GetIntegrationStateResponse {
	s.Body = v
	return s
}

type GetManagedPrometheusStatusRequest struct {
	// The ID of the ASK cluster. This parameter is required if the ClusterType parameter is set to ask.
	//
	// This parameter is required.
	//
	// example:
	//
	// cc7a37ee31aea4ed1a059eff8034b****
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	// The type of the monitoring object. Valid values: ask , acs , one and ecs.
	//
	// This parameter is required.
	//
	// example:
	//
	// ask
	ClusterType *string `json:"ClusterType,omitempty" xml:"ClusterType,omitempty"`
	// The region ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the resource group to which the Prometheus instance belongs.
	//
	// example:
	//
	// rg-acfmxyexli2****
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	// This parameter is required if the ClusterType parameter is set to ecs.
	//
	// example:
	//
	// vpc-***
	VpcId *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
}

func (s GetManagedPrometheusStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s GetManagedPrometheusStatusRequest) GoString() string {
	return s.String()
}

func (s *GetManagedPrometheusStatusRequest) SetClusterId(v string) *GetManagedPrometheusStatusRequest {
	s.ClusterId = &v
	return s
}

func (s *GetManagedPrometheusStatusRequest) SetClusterType(v string) *GetManagedPrometheusStatusRequest {
	s.ClusterType = &v
	return s
}

func (s *GetManagedPrometheusStatusRequest) SetRegionId(v string) *GetManagedPrometheusStatusRequest {
	s.RegionId = &v
	return s
}

func (s *GetManagedPrometheusStatusRequest) SetResourceGroupId(v string) *GetManagedPrometheusStatusRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *GetManagedPrometheusStatusRequest) SetVpcId(v string) *GetManagedPrometheusStatusRequest {
	s.VpcId = &v
	return s
}

type GetManagedPrometheusStatusResponseBody struct {
	// The status code or error code.
	//
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The status of the Prometheus instance.
	//
	// 	- Installing: The Prometheus instance is created and the Prometheus agent has no registration information.
	//
	// 	- Succeed: The Prometheus instance is created and the Prometheus agent is registered.
	//
	// 	- Failure: The Prometheus instance failed to be created or the Prometheus agent failed to be registered.
	//
	// 	- Unknown: No status of the Prometheus instance is available.
	//
	// example:
	//
	// Installing
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// The returned message.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// F7781D4A-2818-41E7-B7BB-79D809E9****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- `true`
	//
	// 	- `false`
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetManagedPrometheusStatusResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetManagedPrometheusStatusResponseBody) GoString() string {
	return s.String()
}

func (s *GetManagedPrometheusStatusResponseBody) SetCode(v int32) *GetManagedPrometheusStatusResponseBody {
	s.Code = &v
	return s
}

func (s *GetManagedPrometheusStatusResponseBody) SetData(v string) *GetManagedPrometheusStatusResponseBody {
	s.Data = &v
	return s
}

func (s *GetManagedPrometheusStatusResponseBody) SetMessage(v string) *GetManagedPrometheusStatusResponseBody {
	s.Message = &v
	return s
}

func (s *GetManagedPrometheusStatusResponseBody) SetRequestId(v string) *GetManagedPrometheusStatusResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetManagedPrometheusStatusResponseBody) SetSuccess(v bool) *GetManagedPrometheusStatusResponseBody {
	s.Success = &v
	return s
}

type GetManagedPrometheusStatusResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetManagedPrometheusStatusResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetManagedPrometheusStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s GetManagedPrometheusStatusResponse) GoString() string {
	return s.String()
}

func (s *GetManagedPrometheusStatusResponse) SetHeaders(v map[string]*string) *GetManagedPrometheusStatusResponse {
	s.Headers = v
	return s
}

func (s *GetManagedPrometheusStatusResponse) SetStatusCode(v int32) *GetManagedPrometheusStatusResponse {
	s.StatusCode = &v
	return s
}

func (s *GetManagedPrometheusStatusResponse) SetBody(v *GetManagedPrometheusStatusResponseBody) *GetManagedPrometheusStatusResponse {
	s.Body = v
	return s
}

type GetMultipleTraceRequest struct {
	// The time when the trace ends. The value is a timestamp. Unit: milliseconds.
	//
	// example:
	//
	// 1663999380000
	EndTime *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The region ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The start time of the trace. The value is a timestamp. Unit: milliseconds.
	//
	// example:
	//
	// 1657692507000
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The trace IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// ac1400a115951745017447033d****
	TraceIDs []*string `json:"TraceIDs,omitempty" xml:"TraceIDs,omitempty" type:"Repeated"`
}

func (s GetMultipleTraceRequest) String() string {
	return tea.Prettify(s)
}

func (s GetMultipleTraceRequest) GoString() string {
	return s.String()
}

func (s *GetMultipleTraceRequest) SetEndTime(v int64) *GetMultipleTraceRequest {
	s.EndTime = &v
	return s
}

func (s *GetMultipleTraceRequest) SetRegionId(v string) *GetMultipleTraceRequest {
	s.RegionId = &v
	return s
}

func (s *GetMultipleTraceRequest) SetStartTime(v int64) *GetMultipleTraceRequest {
	s.StartTime = &v
	return s
}

func (s *GetMultipleTraceRequest) SetTraceIDs(v []*string) *GetMultipleTraceRequest {
	s.TraceIDs = v
	return s
}

type GetMultipleTraceResponseBody struct {
	// The details of traces.
	MultiCallChainInfos []*GetMultipleTraceResponseBodyMultiCallChainInfos `json:"MultiCallChainInfos,omitempty" xml:"MultiCallChainInfos,omitempty" type:"Repeated"`
	// The request ID.
	//
	// example:
	//
	// 2983BEF7-4A0D-47A2-94A2-8E9C5E63****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetMultipleTraceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetMultipleTraceResponseBody) GoString() string {
	return s.String()
}

func (s *GetMultipleTraceResponseBody) SetMultiCallChainInfos(v []*GetMultipleTraceResponseBodyMultiCallChainInfos) *GetMultipleTraceResponseBody {
	s.MultiCallChainInfos = v
	return s
}

func (s *GetMultipleTraceResponseBody) SetRequestId(v string) *GetMultipleTraceResponseBody {
	s.RequestId = &v
	return s
}

type GetMultipleTraceResponseBodyMultiCallChainInfos struct {
	// The details of the trace.
	Spans []*GetMultipleTraceResponseBodyMultiCallChainInfosSpans `json:"Spans,omitempty" xml:"Spans,omitempty" type:"Repeated"`
	// The trace ID.
	//
	// example:
	//
	// ac1400a115951745017447033d****
	TraceID *string `json:"TraceID,omitempty" xml:"TraceID,omitempty"`
}

func (s GetMultipleTraceResponseBodyMultiCallChainInfos) String() string {
	return tea.Prettify(s)
}

func (s GetMultipleTraceResponseBodyMultiCallChainInfos) GoString() string {
	return s.String()
}

func (s *GetMultipleTraceResponseBodyMultiCallChainInfos) SetSpans(v []*GetMultipleTraceResponseBodyMultiCallChainInfosSpans) *GetMultipleTraceResponseBodyMultiCallChainInfos {
	s.Spans = v
	return s
}

func (s *GetMultipleTraceResponseBodyMultiCallChainInfos) SetTraceID(v string) *GetMultipleTraceResponseBodyMultiCallChainInfos {
	s.TraceID = &v
	return s
}

type GetMultipleTraceResponseBodyMultiCallChainInfosSpans struct {
	// The amount of time consumed by the trace. Unit: milliseconds.
	//
	// example:
	//
	// 11
	Duration *int64 `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// Indicates whether a method stack was provided.
	//
	// 	- `true`: A method stack was provided.
	//
	// 	- `false`: No method stack was provided.
	//
	// example:
	//
	// true
	HaveStack *bool `json:"HaveStack,omitempty" xml:"HaveStack,omitempty"`
	// The log events in the trace.
	LogEventList []*GetMultipleTraceResponseBodyMultiCallChainInfosSpansLogEventList `json:"LogEventList,omitempty" xml:"LogEventList,omitempty" type:"Repeated"`
	// The name of the traced span.
	//
	// example:
	//
	// /demo/queryNotExistDB/11
	OperationName *string `json:"OperationName,omitempty" xml:"OperationName,omitempty"`
	// The ID of the parent span.
	//
	// example:
	//
	// 18
	ParentSpanId *string `json:"ParentSpanId,omitempty" xml:"ParentSpanId,omitempty"`
	// The status code returned.
	//
	// example:
	//
	// 1
	ResultCode *string `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	// RPC ID
	//
	// example:
	//
	// 0.1
	RpcId *string `json:"RpcId,omitempty" xml:"RpcId,omitempty"`
	// The type of the remote procedure call (RPC) mode.
	//
	// 	- 0: HTTP entry
	//
	// 	- 25: HTTP call
	//
	// 	- 1: High-speed Service Framework (HSF) call
	//
	// 	- 2: HSF provision
	//
	// 	- 40: on-premises API call
	//
	// 	- 60: MySQL call
	//
	// 	- 62: Oracle call
	//
	// 	- 63: PostgreSQL call
	//
	// 	- 70: Redis call
	//
	// 	- 4: Taobao Distributed Data Layer (TDDL) call
	//
	// 	- 5: Tair call
	//
	// 	- 13: MetaQ message sending
	//
	// 	- 252: MetaQ message receiving
	//
	// 	- 3: notification sending
	//
	// 	- 254: notification receiving
	//
	// 	- 7: Apache Dubbo call
	//
	// 	- 8: Apache Dubbo provision
	//
	// 	- 19: SOFARPC call
	//
	// 	- 18: SOFARPC provision
	//
	// 	- 11: Distributed Service Framework (DSF) call
	//
	// 	- 12: DSF provision
	//
	// 	- \\-1: unknown call
	//
	// example:
	//
	// 0
	RpcType *int32 `json:"RpcType,omitempty" xml:"RpcType,omitempty"`
	// The IP address of the host where the application resides.
	//
	// example:
	//
	// 172.20.XX.XX
	ServiceIp *string `json:"ServiceIp,omitempty" xml:"ServiceIp,omitempty"`
	// The name of the application.
	//
	// example:
	//
	// arms-k8s-demo-subcomponent
	ServiceName *string `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
	// The span ID.
	//
	// example:
	//
	// 1234
	SpanId *string `json:"SpanId,omitempty" xml:"SpanId,omitempty"`
	// The tags of the trace.
	TagEntryList []*GetMultipleTraceResponseBodyMultiCallChainInfosSpansTagEntryList `json:"TagEntryList,omitempty" xml:"TagEntryList,omitempty" type:"Repeated"`
	// The timestamp.
	//
	// example:
	//
	// 1595174501747
	Timestamp *int64 `json:"Timestamp,omitempty" xml:"Timestamp,omitempty"`
	// The trace ID.
	//
	// example:
	//
	// ac1400a115951745017447033d****
	TraceID *string `json:"TraceID,omitempty" xml:"TraceID,omitempty"`
}

func (s GetMultipleTraceResponseBodyMultiCallChainInfosSpans) String() string {
	return tea.Prettify(s)
}

func (s GetMultipleTraceResponseBodyMultiCallChainInfosSpans) GoString() string {
	return s.String()
}

func (s *GetMultipleTraceResponseBodyMultiCallChainInfosSpans) SetDuration(v int64) *GetMultipleTraceResponseBodyMultiCallChainInfosSpans {
	s.Duration = &v
	return s
}

func (s *GetMultipleTraceResponseBodyMultiCallChainInfosSpans) SetHaveStack(v bool) *GetMultipleTraceResponseBodyMultiCallChainInfosSpans {
	s.HaveStack = &v
	return s
}

func (s *GetMultipleTraceResponseBodyMultiCallChainInfosSpans) SetLogEventList(v []*GetMultipleTraceResponseBodyMultiCallChainInfosSpansLogEventList) *GetMultipleTraceResponseBodyMultiCallChainInfosSpans {
	s.LogEventList = v
	return s
}

func (s *GetMultipleTraceResponseBodyMultiCallChainInfosSpans) SetOperationName(v string) *GetMultipleTraceResponseBodyMultiCallChainInfosSpans {
	s.OperationName = &v
	return s
}

func (s *GetMultipleTraceResponseBodyMultiCallChainInfosSpans) SetParentSpanId(v string) *GetMultipleTraceResponseBodyMultiCallChainInfosSpans {
	s.ParentSpanId = &v
	return s
}

func (s *GetMultipleTraceResponseBodyMultiCallChainInfosSpans) SetResultCode(v string) *GetMultipleTraceResponseBodyMultiCallChainInfosSpans {
	s.ResultCode = &v
	return s
}

func (s *GetMultipleTraceResponseBodyMultiCallChainInfosSpans) SetRpcId(v string) *GetMultipleTraceResponseBodyMultiCallChainInfosSpans {
	s.RpcId = &v
	return s
}

func (s *GetMultipleTraceResponseBodyMultiCallChainInfosSpans) SetRpcType(v int32) *GetMultipleTraceResponseBodyMultiCallChainInfosSpans {
	s.RpcType = &v
	return s
}

func (s *GetMultipleTraceResponseBodyMultiCallChainInfosSpans) SetServiceIp(v string) *GetMultipleTraceResponseBodyMultiCallChainInfosSpans {
	s.ServiceIp = &v
	return s
}

func (s *GetMultipleTraceResponseBodyMultiCallChainInfosSpans) SetServiceName(v string) *GetMultipleTraceResponseBodyMultiCallChainInfosSpans {
	s.ServiceName = &v
	return s
}

func (s *GetMultipleTraceResponseBodyMultiCallChainInfosSpans) SetSpanId(v string) *GetMultipleTraceResponseBodyMultiCallChainInfosSpans {
	s.SpanId = &v
	return s
}

func (s *GetMultipleTraceResponseBodyMultiCallChainInfosSpans) SetTagEntryList(v []*GetMultipleTraceResponseBodyMultiCallChainInfosSpansTagEntryList) *GetMultipleTraceResponseBodyMultiCallChainInfosSpans {
	s.TagEntryList = v
	return s
}

func (s *GetMultipleTraceResponseBodyMultiCallChainInfosSpans) SetTimestamp(v int64) *GetMultipleTraceResponseBodyMultiCallChainInfosSpans {
	s.Timestamp = &v
	return s
}

func (s *GetMultipleTraceResponseBodyMultiCallChainInfosSpans) SetTraceID(v string) *GetMultipleTraceResponseBodyMultiCallChainInfosSpans {
	s.TraceID = &v
	return s
}

type GetMultipleTraceResponseBodyMultiCallChainInfosSpansLogEventList struct {
	// The tags of the trace.
	TagEntryList []*GetMultipleTraceResponseBodyMultiCallChainInfosSpansLogEventListTagEntryList `json:"TagEntryList,omitempty" xml:"TagEntryList,omitempty" type:"Repeated"`
	// The time when the log was generated. The value is a timestamp.
	//
	// example:
	//
	// 1595174501747
	Timestamp *int64 `json:"Timestamp,omitempty" xml:"Timestamp,omitempty"`
}

func (s GetMultipleTraceResponseBodyMultiCallChainInfosSpansLogEventList) String() string {
	return tea.Prettify(s)
}

func (s GetMultipleTraceResponseBodyMultiCallChainInfosSpansLogEventList) GoString() string {
	return s.String()
}

func (s *GetMultipleTraceResponseBodyMultiCallChainInfosSpansLogEventList) SetTagEntryList(v []*GetMultipleTraceResponseBodyMultiCallChainInfosSpansLogEventListTagEntryList) *GetMultipleTraceResponseBodyMultiCallChainInfosSpansLogEventList {
	s.TagEntryList = v
	return s
}

func (s *GetMultipleTraceResponseBodyMultiCallChainInfosSpansLogEventList) SetTimestamp(v int64) *GetMultipleTraceResponseBodyMultiCallChainInfosSpansLogEventList {
	s.Timestamp = &v
	return s
}

type GetMultipleTraceResponseBodyMultiCallChainInfosSpansLogEventListTagEntryList struct {
	// The key of the tag.
	//
	// example:
	//
	// http.status.code
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The value of the tag.
	//
	// example:
	//
	// 200
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s GetMultipleTraceResponseBodyMultiCallChainInfosSpansLogEventListTagEntryList) String() string {
	return tea.Prettify(s)
}

func (s GetMultipleTraceResponseBodyMultiCallChainInfosSpansLogEventListTagEntryList) GoString() string {
	return s.String()
}

func (s *GetMultipleTraceResponseBodyMultiCallChainInfosSpansLogEventListTagEntryList) SetKey(v string) *GetMultipleTraceResponseBodyMultiCallChainInfosSpansLogEventListTagEntryList {
	s.Key = &v
	return s
}

func (s *GetMultipleTraceResponseBodyMultiCallChainInfosSpansLogEventListTagEntryList) SetValue(v string) *GetMultipleTraceResponseBodyMultiCallChainInfosSpansLogEventListTagEntryList {
	s.Value = &v
	return s
}

type GetMultipleTraceResponseBodyMultiCallChainInfosSpansTagEntryList struct {
	// The key of the tag.
	//
	// example:
	//
	// http.status.code
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The value of the tag.
	//
	// example:
	//
	// 200
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s GetMultipleTraceResponseBodyMultiCallChainInfosSpansTagEntryList) String() string {
	return tea.Prettify(s)
}

func (s GetMultipleTraceResponseBodyMultiCallChainInfosSpansTagEntryList) GoString() string {
	return s.String()
}

func (s *GetMultipleTraceResponseBodyMultiCallChainInfosSpansTagEntryList) SetKey(v string) *GetMultipleTraceResponseBodyMultiCallChainInfosSpansTagEntryList {
	s.Key = &v
	return s
}

func (s *GetMultipleTraceResponseBodyMultiCallChainInfosSpansTagEntryList) SetValue(v string) *GetMultipleTraceResponseBodyMultiCallChainInfosSpansTagEntryList {
	s.Value = &v
	return s
}

type GetMultipleTraceResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetMultipleTraceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetMultipleTraceResponse) String() string {
	return tea.Prettify(s)
}

func (s GetMultipleTraceResponse) GoString() string {
	return s.String()
}

func (s *GetMultipleTraceResponse) SetHeaders(v map[string]*string) *GetMultipleTraceResponse {
	s.Headers = v
	return s
}

func (s *GetMultipleTraceResponse) SetStatusCode(v int32) *GetMultipleTraceResponse {
	s.StatusCode = &v
	return s
}

func (s *GetMultipleTraceResponse) SetBody(v *GetMultipleTraceResponseBody) *GetMultipleTraceResponse {
	s.Body = v
	return s
}

type GetOnCallSchedulesDetailRequest struct {
	// The date on which the shift ends. Format: `yyyy-MM-dd`.
	//
	// example:
	//
	// 2022-10-30
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The ID of the scheduling policy.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1234
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The date from which the shift starts. Format: `yyyy-MM-dd`.
	//
	// example:
	//
	// 2022-10-01
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s GetOnCallSchedulesDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s GetOnCallSchedulesDetailRequest) GoString() string {
	return s.String()
}

func (s *GetOnCallSchedulesDetailRequest) SetEndTime(v string) *GetOnCallSchedulesDetailRequest {
	s.EndTime = &v
	return s
}

func (s *GetOnCallSchedulesDetailRequest) SetId(v int64) *GetOnCallSchedulesDetailRequest {
	s.Id = &v
	return s
}

func (s *GetOnCallSchedulesDetailRequest) SetStartTime(v string) *GetOnCallSchedulesDetailRequest {
	s.StartTime = &v
	return s
}

type GetOnCallSchedulesDetailResponseBody struct {
	// The information about the scheduling policy.
	Data *GetOnCallSchedulesDetailResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// 21E85B16-75A6-429A-9F65-8AAC9A54****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetOnCallSchedulesDetailResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetOnCallSchedulesDetailResponseBody) GoString() string {
	return s.String()
}

func (s *GetOnCallSchedulesDetailResponseBody) SetData(v *GetOnCallSchedulesDetailResponseBodyData) *GetOnCallSchedulesDetailResponseBody {
	s.Data = v
	return s
}

func (s *GetOnCallSchedulesDetailResponseBody) SetRequestId(v string) *GetOnCallSchedulesDetailResponseBody {
	s.RequestId = &v
	return s
}

type GetOnCallSchedulesDetailResponseBodyData struct {
	// The URL of the DingTalk chatbot, which is used to receive notifications about shift changes.
	//
	// example:
	//
	// https://oapi.dingtalk.com/robot/send?access_token=69d4e009547e11069c6513309414937b7bf0482fb9284125b5******
	AlertRobotId *int64 `json:"AlertRobotId,omitempty" xml:"AlertRobotId,omitempty"`
	// The description of the scheduling policy.
	//
	// example:
	//
	// Test
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The ID of the scheduling policy.
	//
	// example:
	//
	// 1234
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The name of the scheduling policy.
	//
	// example:
	//
	// Scheduling policy test
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The information about the final user on duty.
	RenderedFinnalEntries []*GetOnCallSchedulesDetailResponseBodyDataRenderedFinnalEntries `json:"RenderedFinnalEntries,omitempty" xml:"RenderedFinnalEntries,omitempty" type:"Repeated"`
	// The scheduled users on duty within a time range.
	RenderedLayerEntries [][]*GetOnCallSchedulesDetailResponseBodyDataRenderedLayerEntries `json:"RenderedLayerEntries,omitempty" xml:"RenderedLayerEntries,omitempty" type:"Repeated"`
	// The information about the substitutes within a time range.
	RenderedSubstitudeEntries []*GetOnCallSchedulesDetailResponseBodyDataRenderedSubstitudeEntries `json:"RenderedSubstitudeEntries,omitempty" xml:"RenderedSubstitudeEntries,omitempty" type:"Repeated"`
	// The information about the shift.
	ScheduleLayers []*GetOnCallSchedulesDetailResponseBodyDataScheduleLayers `json:"ScheduleLayers,omitempty" xml:"ScheduleLayers,omitempty" type:"Repeated"`
}

func (s GetOnCallSchedulesDetailResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetOnCallSchedulesDetailResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetOnCallSchedulesDetailResponseBodyData) SetAlertRobotId(v int64) *GetOnCallSchedulesDetailResponseBodyData {
	s.AlertRobotId = &v
	return s
}

func (s *GetOnCallSchedulesDetailResponseBodyData) SetDescription(v string) *GetOnCallSchedulesDetailResponseBodyData {
	s.Description = &v
	return s
}

func (s *GetOnCallSchedulesDetailResponseBodyData) SetId(v int64) *GetOnCallSchedulesDetailResponseBodyData {
	s.Id = &v
	return s
}

func (s *GetOnCallSchedulesDetailResponseBodyData) SetName(v string) *GetOnCallSchedulesDetailResponseBodyData {
	s.Name = &v
	return s
}

func (s *GetOnCallSchedulesDetailResponseBodyData) SetRenderedFinnalEntries(v []*GetOnCallSchedulesDetailResponseBodyDataRenderedFinnalEntries) *GetOnCallSchedulesDetailResponseBodyData {
	s.RenderedFinnalEntries = v
	return s
}

func (s *GetOnCallSchedulesDetailResponseBodyData) SetRenderedLayerEntries(v [][]*GetOnCallSchedulesDetailResponseBodyDataRenderedLayerEntries) *GetOnCallSchedulesDetailResponseBodyData {
	s.RenderedLayerEntries = v
	return s
}

func (s *GetOnCallSchedulesDetailResponseBodyData) SetRenderedSubstitudeEntries(v []*GetOnCallSchedulesDetailResponseBodyDataRenderedSubstitudeEntries) *GetOnCallSchedulesDetailResponseBodyData {
	s.RenderedSubstitudeEntries = v
	return s
}

func (s *GetOnCallSchedulesDetailResponseBodyData) SetScheduleLayers(v []*GetOnCallSchedulesDetailResponseBodyDataScheduleLayers) *GetOnCallSchedulesDetailResponseBodyData {
	s.ScheduleLayers = v
	return s
}

type GetOnCallSchedulesDetailResponseBodyDataRenderedFinnalEntries struct {
	// The date on which the user completed shift work.
	//
	// example:
	//
	// 2022-10-30
	End *string `json:"End,omitempty" xml:"End,omitempty"`
	// The information about the user on duty.
	SimpleContact *GetOnCallSchedulesDetailResponseBodyDataRenderedFinnalEntriesSimpleContact `json:"SimpleContact,omitempty" xml:"SimpleContact,omitempty" type:"Struct"`
	// The date from which the user started shift work.
	//
	// example:
	//
	// 2022-10-01
	Start *string `json:"Start,omitempty" xml:"Start,omitempty"`
}

func (s GetOnCallSchedulesDetailResponseBodyDataRenderedFinnalEntries) String() string {
	return tea.Prettify(s)
}

func (s GetOnCallSchedulesDetailResponseBodyDataRenderedFinnalEntries) GoString() string {
	return s.String()
}

func (s *GetOnCallSchedulesDetailResponseBodyDataRenderedFinnalEntries) SetEnd(v string) *GetOnCallSchedulesDetailResponseBodyDataRenderedFinnalEntries {
	s.End = &v
	return s
}

func (s *GetOnCallSchedulesDetailResponseBodyDataRenderedFinnalEntries) SetSimpleContact(v *GetOnCallSchedulesDetailResponseBodyDataRenderedFinnalEntriesSimpleContact) *GetOnCallSchedulesDetailResponseBodyDataRenderedFinnalEntries {
	s.SimpleContact = v
	return s
}

func (s *GetOnCallSchedulesDetailResponseBodyDataRenderedFinnalEntries) SetStart(v string) *GetOnCallSchedulesDetailResponseBodyDataRenderedFinnalEntries {
	s.Start = &v
	return s
}

type GetOnCallSchedulesDetailResponseBodyDataRenderedFinnalEntriesSimpleContact struct {
	// The ID of the user on duty.
	//
	// example:
	//
	// 123
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The name of the user on duty.
	//
	// example:
	//
	// Employee 1
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s GetOnCallSchedulesDetailResponseBodyDataRenderedFinnalEntriesSimpleContact) String() string {
	return tea.Prettify(s)
}

func (s GetOnCallSchedulesDetailResponseBodyDataRenderedFinnalEntriesSimpleContact) GoString() string {
	return s.String()
}

func (s *GetOnCallSchedulesDetailResponseBodyDataRenderedFinnalEntriesSimpleContact) SetId(v int64) *GetOnCallSchedulesDetailResponseBodyDataRenderedFinnalEntriesSimpleContact {
	s.Id = &v
	return s
}

func (s *GetOnCallSchedulesDetailResponseBodyDataRenderedFinnalEntriesSimpleContact) SetName(v string) *GetOnCallSchedulesDetailResponseBodyDataRenderedFinnalEntriesSimpleContact {
	s.Name = &v
	return s
}

type GetOnCallSchedulesDetailResponseBodyDataRenderedLayerEntries struct {
	// The date from which the scheduled user was supposed to start shift work.
	//
	// example:
	//
	// 2022-10-01
	Start *string `json:"Start,omitempty" xml:"Start,omitempty"`
	// The date on which the scheduled user was supposed to complete shift work.
	//
	// example:
	//
	// 2022-10-30
	End *string `json:"End,omitempty" xml:"End,omitempty"`
	// The information about the scheduled user.
	SimpleContact *GetOnCallSchedulesDetailResponseBodyDataRenderedLayerEntriesSimpleContact `json:"SimpleContact,omitempty" xml:"SimpleContact,omitempty" type:"Struct"`
}

func (s GetOnCallSchedulesDetailResponseBodyDataRenderedLayerEntries) String() string {
	return tea.Prettify(s)
}

func (s GetOnCallSchedulesDetailResponseBodyDataRenderedLayerEntries) GoString() string {
	return s.String()
}

func (s *GetOnCallSchedulesDetailResponseBodyDataRenderedLayerEntries) SetStart(v string) *GetOnCallSchedulesDetailResponseBodyDataRenderedLayerEntries {
	s.Start = &v
	return s
}

func (s *GetOnCallSchedulesDetailResponseBodyDataRenderedLayerEntries) SetEnd(v string) *GetOnCallSchedulesDetailResponseBodyDataRenderedLayerEntries {
	s.End = &v
	return s
}

func (s *GetOnCallSchedulesDetailResponseBodyDataRenderedLayerEntries) SetSimpleContact(v *GetOnCallSchedulesDetailResponseBodyDataRenderedLayerEntriesSimpleContact) *GetOnCallSchedulesDetailResponseBodyDataRenderedLayerEntries {
	s.SimpleContact = v
	return s
}

type GetOnCallSchedulesDetailResponseBodyDataRenderedLayerEntriesSimpleContact struct {
	// The ID of the scheduled user.
	//
	// example:
	//
	// 123
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The name of the scheduled user.
	//
	// example:
	//
	// Employee 1
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s GetOnCallSchedulesDetailResponseBodyDataRenderedLayerEntriesSimpleContact) String() string {
	return tea.Prettify(s)
}

func (s GetOnCallSchedulesDetailResponseBodyDataRenderedLayerEntriesSimpleContact) GoString() string {
	return s.String()
}

func (s *GetOnCallSchedulesDetailResponseBodyDataRenderedLayerEntriesSimpleContact) SetId(v int64) *GetOnCallSchedulesDetailResponseBodyDataRenderedLayerEntriesSimpleContact {
	s.Id = &v
	return s
}

func (s *GetOnCallSchedulesDetailResponseBodyDataRenderedLayerEntriesSimpleContact) SetName(v string) *GetOnCallSchedulesDetailResponseBodyDataRenderedLayerEntriesSimpleContact {
	s.Name = &v
	return s
}

type GetOnCallSchedulesDetailResponseBodyDataRenderedSubstitudeEntries struct {
	// The date on which the substitute was supposed to complete shift work.
	//
	// example:
	//
	// 2022-10-30
	End *string `json:"End,omitempty" xml:"End,omitempty"`
	// The information about the substitute.
	SimpleContact *GetOnCallSchedulesDetailResponseBodyDataRenderedSubstitudeEntriesSimpleContact `json:"SimpleContact,omitempty" xml:"SimpleContact,omitempty" type:"Struct"`
	// The date from which the substitute was supposed to start shift work.
	//
	// example:
	//
	// 2022-10-01
	Start *string `json:"Start,omitempty" xml:"Start,omitempty"`
}

func (s GetOnCallSchedulesDetailResponseBodyDataRenderedSubstitudeEntries) String() string {
	return tea.Prettify(s)
}

func (s GetOnCallSchedulesDetailResponseBodyDataRenderedSubstitudeEntries) GoString() string {
	return s.String()
}

func (s *GetOnCallSchedulesDetailResponseBodyDataRenderedSubstitudeEntries) SetEnd(v string) *GetOnCallSchedulesDetailResponseBodyDataRenderedSubstitudeEntries {
	s.End = &v
	return s
}

func (s *GetOnCallSchedulesDetailResponseBodyDataRenderedSubstitudeEntries) SetSimpleContact(v *GetOnCallSchedulesDetailResponseBodyDataRenderedSubstitudeEntriesSimpleContact) *GetOnCallSchedulesDetailResponseBodyDataRenderedSubstitudeEntries {
	s.SimpleContact = v
	return s
}

func (s *GetOnCallSchedulesDetailResponseBodyDataRenderedSubstitudeEntries) SetStart(v string) *GetOnCallSchedulesDetailResponseBodyDataRenderedSubstitudeEntries {
	s.Start = &v
	return s
}

type GetOnCallSchedulesDetailResponseBodyDataRenderedSubstitudeEntriesSimpleContact struct {
	// The ID of the substitute.
	//
	// example:
	//
	// 234
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The name of the substitute.
	//
	// example:
	//
	// Employee 2
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s GetOnCallSchedulesDetailResponseBodyDataRenderedSubstitudeEntriesSimpleContact) String() string {
	return tea.Prettify(s)
}

func (s GetOnCallSchedulesDetailResponseBodyDataRenderedSubstitudeEntriesSimpleContact) GoString() string {
	return s.String()
}

func (s *GetOnCallSchedulesDetailResponseBodyDataRenderedSubstitudeEntriesSimpleContact) SetId(v int64) *GetOnCallSchedulesDetailResponseBodyDataRenderedSubstitudeEntriesSimpleContact {
	s.Id = &v
	return s
}

func (s *GetOnCallSchedulesDetailResponseBodyDataRenderedSubstitudeEntriesSimpleContact) SetName(v string) *GetOnCallSchedulesDetailResponseBodyDataRenderedSubstitudeEntriesSimpleContact {
	s.Name = &v
	return s
}

type GetOnCallSchedulesDetailResponseBodyDataScheduleLayers struct {
	// The ID list of users on duty.
	ContactIds []*int64 `json:"ContactIds,omitempty" xml:"ContactIds,omitempty" type:"Repeated"`
	// The limit on the time of the shift.
	Restrictions []*GetOnCallSchedulesDetailResponseBodyDataScheduleLayersRestrictions `json:"Restrictions,omitempty" xml:"Restrictions,omitempty" type:"Repeated"`
	// The type of the shift. Valid values:
	//
	// 	- DAY
	//
	// 	- WEEK
	//
	// 	- CUSTOM
	//
	// example:
	//
	// DAY
	RotationType *string `json:"RotationType,omitempty" xml:"RotationType,omitempty"`
	// The shift cycle. Unit: hours.
	//
	// example:
	//
	// 8
	ShiftLength *int64 `json:"ShiftLength,omitempty" xml:"ShiftLength,omitempty"`
	// The date on which the shift change took effect.
	//
	// example:
	//
	// 2022-10-01
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s GetOnCallSchedulesDetailResponseBodyDataScheduleLayers) String() string {
	return tea.Prettify(s)
}

func (s GetOnCallSchedulesDetailResponseBodyDataScheduleLayers) GoString() string {
	return s.String()
}

func (s *GetOnCallSchedulesDetailResponseBodyDataScheduleLayers) SetContactIds(v []*int64) *GetOnCallSchedulesDetailResponseBodyDataScheduleLayers {
	s.ContactIds = v
	return s
}

func (s *GetOnCallSchedulesDetailResponseBodyDataScheduleLayers) SetRestrictions(v []*GetOnCallSchedulesDetailResponseBodyDataScheduleLayersRestrictions) *GetOnCallSchedulesDetailResponseBodyDataScheduleLayers {
	s.Restrictions = v
	return s
}

func (s *GetOnCallSchedulesDetailResponseBodyDataScheduleLayers) SetRotationType(v string) *GetOnCallSchedulesDetailResponseBodyDataScheduleLayers {
	s.RotationType = &v
	return s
}

func (s *GetOnCallSchedulesDetailResponseBodyDataScheduleLayers) SetShiftLength(v int64) *GetOnCallSchedulesDetailResponseBodyDataScheduleLayers {
	s.ShiftLength = &v
	return s
}

func (s *GetOnCallSchedulesDetailResponseBodyDataScheduleLayers) SetStartTime(v string) *GetOnCallSchedulesDetailResponseBodyDataScheduleLayers {
	s.StartTime = &v
	return s
}

type GetOnCallSchedulesDetailResponseBodyDataScheduleLayersRestrictions struct {
	// The end time of the shift per day.
	//
	// example:
	//
	// 18:00
	EndTimeOfDay *string `json:"EndTimeOfDay,omitempty" xml:"EndTimeOfDay,omitempty"`
	// The type of the limit. Valid values:
	//
	// 	- daily_restriction
	//
	// 	- weekly_restriction
	//
	// example:
	//
	// daily_restriction
	RestrictionType *string `json:"RestrictionType,omitempty" xml:"RestrictionType,omitempty"`
	// The start time of the shift per day.
	//
	// example:
	//
	// 09:00
	StartTimeOfDay *string `json:"StartTimeOfDay,omitempty" xml:"StartTimeOfDay,omitempty"`
}

func (s GetOnCallSchedulesDetailResponseBodyDataScheduleLayersRestrictions) String() string {
	return tea.Prettify(s)
}

func (s GetOnCallSchedulesDetailResponseBodyDataScheduleLayersRestrictions) GoString() string {
	return s.String()
}

func (s *GetOnCallSchedulesDetailResponseBodyDataScheduleLayersRestrictions) SetEndTimeOfDay(v string) *GetOnCallSchedulesDetailResponseBodyDataScheduleLayersRestrictions {
	s.EndTimeOfDay = &v
	return s
}

func (s *GetOnCallSchedulesDetailResponseBodyDataScheduleLayersRestrictions) SetRestrictionType(v string) *GetOnCallSchedulesDetailResponseBodyDataScheduleLayersRestrictions {
	s.RestrictionType = &v
	return s
}

func (s *GetOnCallSchedulesDetailResponseBodyDataScheduleLayersRestrictions) SetStartTimeOfDay(v string) *GetOnCallSchedulesDetailResponseBodyDataScheduleLayersRestrictions {
	s.StartTimeOfDay = &v
	return s
}

type GetOnCallSchedulesDetailResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetOnCallSchedulesDetailResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetOnCallSchedulesDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s GetOnCallSchedulesDetailResponse) GoString() string {
	return s.String()
}

func (s *GetOnCallSchedulesDetailResponse) SetHeaders(v map[string]*string) *GetOnCallSchedulesDetailResponse {
	s.Headers = v
	return s
}

func (s *GetOnCallSchedulesDetailResponse) SetStatusCode(v int32) *GetOnCallSchedulesDetailResponse {
	s.StatusCode = &v
	return s
}

func (s *GetOnCallSchedulesDetailResponse) SetBody(v *GetOnCallSchedulesDetailResponseBody) *GetOnCallSchedulesDetailResponse {
	s.Body = v
	return s
}

type GetPrometheusApiTokenRequest struct {
	// The region ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s GetPrometheusApiTokenRequest) String() string {
	return tea.Prettify(s)
}

func (s GetPrometheusApiTokenRequest) GoString() string {
	return s.String()
}

func (s *GetPrometheusApiTokenRequest) SetRegionId(v string) *GetPrometheusApiTokenRequest {
	s.RegionId = &v
	return s
}

type GetPrometheusApiTokenResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 1A9C645C-C83F-4C9D-8CCB-29BEC9E1****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The token required for integrating Prometheus Service.
	//
	// example:
	//
	// 6dcbb77ef4ba6ef5466b5debf9e2****
	Token *string `json:"Token,omitempty" xml:"Token,omitempty"`
}

func (s GetPrometheusApiTokenResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetPrometheusApiTokenResponseBody) GoString() string {
	return s.String()
}

func (s *GetPrometheusApiTokenResponseBody) SetRequestId(v string) *GetPrometheusApiTokenResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetPrometheusApiTokenResponseBody) SetToken(v string) *GetPrometheusApiTokenResponseBody {
	s.Token = &v
	return s
}

type GetPrometheusApiTokenResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetPrometheusApiTokenResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetPrometheusApiTokenResponse) String() string {
	return tea.Prettify(s)
}

func (s GetPrometheusApiTokenResponse) GoString() string {
	return s.String()
}

func (s *GetPrometheusApiTokenResponse) SetHeaders(v map[string]*string) *GetPrometheusApiTokenResponse {
	s.Headers = v
	return s
}

func (s *GetPrometheusApiTokenResponse) SetStatusCode(v int32) *GetPrometheusApiTokenResponse {
	s.StatusCode = &v
	return s
}

func (s *GetPrometheusApiTokenResponse) SetBody(v *GetPrometheusApiTokenResponseBody) *GetPrometheusApiTokenResponse {
	s.Body = v
	return s
}

type GetPrometheusGlobalViewRequest struct {
	// The ID of the global aggregation instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// global-v2-cn-1478326682034601-vss8pd0i
	GlobalViewClusterId *string `json:"GlobalViewClusterId,omitempty" xml:"GlobalViewClusterId,omitempty"`
	// The region ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s GetPrometheusGlobalViewRequest) String() string {
	return tea.Prettify(s)
}

func (s GetPrometheusGlobalViewRequest) GoString() string {
	return s.String()
}

func (s *GetPrometheusGlobalViewRequest) SetGlobalViewClusterId(v string) *GetPrometheusGlobalViewRequest {
	s.GlobalViewClusterId = &v
	return s
}

func (s *GetPrometheusGlobalViewRequest) SetRegionId(v string) *GetPrometheusGlobalViewRequest {
	s.RegionId = &v
	return s
}

type GetPrometheusGlobalViewResponseBody struct {
	// Status code. 200 is success, other status codes are exceptions.
	//
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The struct returned.
	//
	// example:
	//
	// { "clusterId":"The ID of the global aggregation instance.", "groupName":"The name of the global aggregation instance.", "dataSources":[ { "sourceName":"The name of the data source.- ArmsPrometheus No.1", "sourceType":"AlibabaPrometheus", "userId":"UserID", "clusterId":"ClusterId" }, // more datasources ] }
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// Returns a hint message for the result.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 743AD493-D006-53BD-AAEC-DDCE7FB68EA7
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetPrometheusGlobalViewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetPrometheusGlobalViewResponseBody) GoString() string {
	return s.String()
}

func (s *GetPrometheusGlobalViewResponseBody) SetCode(v int32) *GetPrometheusGlobalViewResponseBody {
	s.Code = &v
	return s
}

func (s *GetPrometheusGlobalViewResponseBody) SetData(v string) *GetPrometheusGlobalViewResponseBody {
	s.Data = &v
	return s
}

func (s *GetPrometheusGlobalViewResponseBody) SetMessage(v string) *GetPrometheusGlobalViewResponseBody {
	s.Message = &v
	return s
}

func (s *GetPrometheusGlobalViewResponseBody) SetRequestId(v string) *GetPrometheusGlobalViewResponseBody {
	s.RequestId = &v
	return s
}

type GetPrometheusGlobalViewResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetPrometheusGlobalViewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetPrometheusGlobalViewResponse) String() string {
	return tea.Prettify(s)
}

func (s GetPrometheusGlobalViewResponse) GoString() string {
	return s.String()
}

func (s *GetPrometheusGlobalViewResponse) SetHeaders(v map[string]*string) *GetPrometheusGlobalViewResponse {
	s.Headers = v
	return s
}

func (s *GetPrometheusGlobalViewResponse) SetStatusCode(v int32) *GetPrometheusGlobalViewResponse {
	s.StatusCode = &v
	return s
}

func (s *GetPrometheusGlobalViewResponse) SetBody(v *GetPrometheusGlobalViewResponseBody) *GetPrometheusGlobalViewResponse {
	s.Body = v
	return s
}

type GetPrometheusInstanceRequest struct {
	// The ID of the Prometheus instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// c77f6f2397ea74672872acf5e31374a27
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	// The region ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s GetPrometheusInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s GetPrometheusInstanceRequest) GoString() string {
	return s.String()
}

func (s *GetPrometheusInstanceRequest) SetClusterId(v string) *GetPrometheusInstanceRequest {
	s.ClusterId = &v
	return s
}

func (s *GetPrometheusInstanceRequest) SetRegionId(v string) *GetPrometheusInstanceRequest {
	s.RegionId = &v
	return s
}

type GetPrometheusInstanceResponseBody struct {
	// The status code. The status code 200 indicates that the request was successful. If another status code is returned, the request failed.
	//
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned message.
	Data *GetPrometheusInstanceResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The message returned.
	//
	// example:
	//
	// message
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	//
	// example:
	//
	// 52C422FD-6B43-524D-B8A1-A4693294318C
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetPrometheusInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetPrometheusInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *GetPrometheusInstanceResponseBody) SetCode(v int32) *GetPrometheusInstanceResponseBody {
	s.Code = &v
	return s
}

func (s *GetPrometheusInstanceResponseBody) SetData(v *GetPrometheusInstanceResponseBodyData) *GetPrometheusInstanceResponseBody {
	s.Data = v
	return s
}

func (s *GetPrometheusInstanceResponseBody) SetMessage(v string) *GetPrometheusInstanceResponseBody {
	s.Message = &v
	return s
}

func (s *GetPrometheusInstanceResponseBody) SetRequestId(v string) *GetPrometheusInstanceResponseBody {
	s.RequestId = &v
	return s
}

type GetPrometheusInstanceResponseBodyData struct {
	// 权限类型：
	//
	// readWrite、readOnly、httpReadOnly
	//
	// example:
	//
	// readWrite
	AccessType *string `json:"AccessType,omitempty" xml:"AccessType,omitempty"`
	// The number of days for which data is automatically archived after the storage expires. Valid values: 60, 90, 180, and 365. 0 indicates that the data is not archived.
	//
	// example:
	//
	// 60
	ArchiveDuration *int32 `json:"ArchiveDuration,omitempty" xml:"ArchiveDuration,omitempty"`
	// Authorization token.
	//
	// example:
	//
	// GciOiJIUzI1NiJ9***
	AuthToken *string `json:"AuthToken,omitempty" xml:"AuthToken,omitempty"`
	// The ID of the Prometheus instance.
	//
	// example:
	//
	// c589a1b8db05c4561aefbb898ca8fb1cf
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	// The name of the monitoring object.
	//
	// example:
	//
	// prom1
	ClusterName *string `json:"ClusterName,omitempty" xml:"ClusterName,omitempty"`
	// 	- remote-write: general-purpose Prometheus instance
	//
	// 	- ecs: Prometheus instances for ECS
	//
	// 	- cloud-monitor: Prometheus instance for Alibaba Cloud services in the Chinese mainland
	//
	// 	- cloud-product: Prometheus instance for Alibaba Cloud services outside the Chinese mainland
	//
	// 	- global-view: global aggregation instance
	//
	// 	- aliyun-cs: Prometheus instance for Container Service
	//
	// example:
	//
	// remote-write
	ClusterType *string `json:"ClusterType,omitempty" xml:"ClusterType,omitempty"`
	// The ID of the Grafana workspace.
	//
	// example:
	//
	// grafana-rnggfvhlcdl6m71***
	GrafanaInstanceId *string `json:"GrafanaInstanceId,omitempty" xml:"GrafanaInstanceId,omitempty"`
	// Http API internet address.
	//
	// example:
	//
	// https://cn-beijing.arms.aliyuncs.com:9443/api/v1/prometheus/xxx
	HttpApiInterUrl *string `json:"HttpApiInterUrl,omitempty" xml:"HttpApiInterUrl,omitempty"`
	// Http API intranet address.
	//
	// example:
	//
	// http://cn-beijing-intranet.arms.aliyuncs.com:9090/api/v1/prometheus/xxx
	HttpApiIntraUrl *string `json:"HttpApiIntraUrl,omitempty" xml:"HttpApiIntraUrl,omitempty"`
	// The billing method. Valid values:
	//
	// 	- PREPAY: subscription
	//
	// 	- POSTPAY: pay-as-you-go
	//
	// example:
	//
	// PREPAY
	PaymentType *string `json:"PaymentType,omitempty" xml:"PaymentType,omitempty"`
	// Push gateway internet address.
	//
	// example:
	//
	// https://cn-beijing.arms.aliyuncs.com/prometheus/xxx/api/v2
	PushGatewayInterUrl *string `json:"PushGatewayInterUrl,omitempty" xml:"PushGatewayInterUrl,omitempty"`
	// Push gateway intranet address.
	//
	// example:
	//
	// http://cn-beijing-intranet.arms.aliyuncs.com/prometheus/xxx/api/v2
	PushGatewayIntraUrl *string `json:"PushGatewayIntraUrl,omitempty" xml:"PushGatewayIntraUrl,omitempty"`
	// The region ID.
	//
	// example:
	//
	// cn-beijing
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// Remote read internet address.
	//
	// example:
	//
	// http://cn-beijing.arms.aliyuncs.com:9090/api/v1/prometheus/xxx/api/v1/read
	RemoteReadInterUrl *string `json:"RemoteReadInterUrl,omitempty" xml:"RemoteReadInterUrl,omitempty"`
	// Remote read intranet address.
	//
	// example:
	//
	// http://cn-beijing-intranet.arms.aliyuncs.com:9090/api/v1/prometheus/xxx/api/v1/read
	RemoteReadIntraUrl *string `json:"RemoteReadIntraUrl,omitempty" xml:"RemoteReadIntraUrl,omitempty"`
	// Remote write internet address.
	//
	// example:
	//
	// https://cn-beijing.arms.aliyuncs.com/prometheus/xxx/api/v3/write
	RemoteWriteInterUrl *string `json:"RemoteWriteInterUrl,omitempty" xml:"RemoteWriteInterUrl,omitempty"`
	// Remote write intranet address.
	//
	// example:
	//
	// http://cn-beijing-intranet.arms.aliyuncs.com/prometheus/xxx/api/v3/write
	RemoteWriteIntraUrl *string `json:"RemoteWriteIntraUrl,omitempty" xml:"RemoteWriteIntraUrl,omitempty"`
	// The ID of the resource group to which the instance belongs.
	//
	// example:
	//
	// rg-aek2vezare****
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	// The type of the resource. Set the value to PROMETHEUS.
	//
	// example:
	//
	// PROMETHEUS
	ResourceType *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	// The ID of the security group. This parameter is returned only for Prometheus instances for ECS.
	//
	// example:
	//
	// sg-8vbdgmf4nraiqa9bx0jo
	SecurityGroupId *string `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
	// The data storage duration. Unit: days.
	//
	// example:
	//
	// 90
	StorageDuration *int32 `json:"StorageDuration,omitempty" xml:"StorageDuration,omitempty"`
	// The child instances of the Prometheus instance for GlobalView. The value is a JSON string.
	//
	// example:
	//
	// [{"headers":{},"regionId":"cn-hangzhou","sourceType":"AlibabaPrometheus","extras":{},"clusterId":"c39a1048921e04fceb039db2fbb73\\*\\*\\*","sourceName":"arms-luyao-test","dataSource":"","userId":"167275301789\\*\\*\\*"},{"headers":{},"regionId":"cn-beijing","sourceType":"AlibabaPrometheus","extras":{},"clusterId":"c6b6485496d5b400abde22cb47b5\\*\\*\\*\\*","sourceName":"agent-321-test","dataSource":"","userId":"1672753017899\\*\\*\\*"},{"headers":{},"regionId":"cn-zhangjiakou","sourceType":"AlibabaPrometheus","extras":{},"clusterId":"c261a4f3200c446659133f1ade789b15e","sourceName":"zaifeng-cardinality-01","dataSource":"","userId":"167275301789\\*\\*\\*"}]
	SubClustersJson *string `json:"SubClustersJson,omitempty" xml:"SubClustersJson,omitempty"`
	// The tags of the instance.
	Tags []*GetPrometheusInstanceResponseBodyDataTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
	// The user ID.
	//
	// example:
	//
	// 167275301789****
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	// The vSwitch ID. This parameter is returned only for Prometheus instances for ECS.
	//
	// example:
	//
	// vsw-f8z73vcja1tqnw90aav5a
	VSwitchId *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	// The VPC ID. This parameter is returned only for Prometheus instances for ECS.
	//
	// example:
	//
	// vpc-8vb02uk57qbcktqcvqqqj
	VpcId *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
}

func (s GetPrometheusInstanceResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetPrometheusInstanceResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetPrometheusInstanceResponseBodyData) SetAccessType(v string) *GetPrometheusInstanceResponseBodyData {
	s.AccessType = &v
	return s
}

func (s *GetPrometheusInstanceResponseBodyData) SetArchiveDuration(v int32) *GetPrometheusInstanceResponseBodyData {
	s.ArchiveDuration = &v
	return s
}

func (s *GetPrometheusInstanceResponseBodyData) SetAuthToken(v string) *GetPrometheusInstanceResponseBodyData {
	s.AuthToken = &v
	return s
}

func (s *GetPrometheusInstanceResponseBodyData) SetClusterId(v string) *GetPrometheusInstanceResponseBodyData {
	s.ClusterId = &v
	return s
}

func (s *GetPrometheusInstanceResponseBodyData) SetClusterName(v string) *GetPrometheusInstanceResponseBodyData {
	s.ClusterName = &v
	return s
}

func (s *GetPrometheusInstanceResponseBodyData) SetClusterType(v string) *GetPrometheusInstanceResponseBodyData {
	s.ClusterType = &v
	return s
}

func (s *GetPrometheusInstanceResponseBodyData) SetGrafanaInstanceId(v string) *GetPrometheusInstanceResponseBodyData {
	s.GrafanaInstanceId = &v
	return s
}

func (s *GetPrometheusInstanceResponseBodyData) SetHttpApiInterUrl(v string) *GetPrometheusInstanceResponseBodyData {
	s.HttpApiInterUrl = &v
	return s
}

func (s *GetPrometheusInstanceResponseBodyData) SetHttpApiIntraUrl(v string) *GetPrometheusInstanceResponseBodyData {
	s.HttpApiIntraUrl = &v
	return s
}

func (s *GetPrometheusInstanceResponseBodyData) SetPaymentType(v string) *GetPrometheusInstanceResponseBodyData {
	s.PaymentType = &v
	return s
}

func (s *GetPrometheusInstanceResponseBodyData) SetPushGatewayInterUrl(v string) *GetPrometheusInstanceResponseBodyData {
	s.PushGatewayInterUrl = &v
	return s
}

func (s *GetPrometheusInstanceResponseBodyData) SetPushGatewayIntraUrl(v string) *GetPrometheusInstanceResponseBodyData {
	s.PushGatewayIntraUrl = &v
	return s
}

func (s *GetPrometheusInstanceResponseBodyData) SetRegionId(v string) *GetPrometheusInstanceResponseBodyData {
	s.RegionId = &v
	return s
}

func (s *GetPrometheusInstanceResponseBodyData) SetRemoteReadInterUrl(v string) *GetPrometheusInstanceResponseBodyData {
	s.RemoteReadInterUrl = &v
	return s
}

func (s *GetPrometheusInstanceResponseBodyData) SetRemoteReadIntraUrl(v string) *GetPrometheusInstanceResponseBodyData {
	s.RemoteReadIntraUrl = &v
	return s
}

func (s *GetPrometheusInstanceResponseBodyData) SetRemoteWriteInterUrl(v string) *GetPrometheusInstanceResponseBodyData {
	s.RemoteWriteInterUrl = &v
	return s
}

func (s *GetPrometheusInstanceResponseBodyData) SetRemoteWriteIntraUrl(v string) *GetPrometheusInstanceResponseBodyData {
	s.RemoteWriteIntraUrl = &v
	return s
}

func (s *GetPrometheusInstanceResponseBodyData) SetResourceGroupId(v string) *GetPrometheusInstanceResponseBodyData {
	s.ResourceGroupId = &v
	return s
}

func (s *GetPrometheusInstanceResponseBodyData) SetResourceType(v string) *GetPrometheusInstanceResponseBodyData {
	s.ResourceType = &v
	return s
}

func (s *GetPrometheusInstanceResponseBodyData) SetSecurityGroupId(v string) *GetPrometheusInstanceResponseBodyData {
	s.SecurityGroupId = &v
	return s
}

func (s *GetPrometheusInstanceResponseBodyData) SetStorageDuration(v int32) *GetPrometheusInstanceResponseBodyData {
	s.StorageDuration = &v
	return s
}

func (s *GetPrometheusInstanceResponseBodyData) SetSubClustersJson(v string) *GetPrometheusInstanceResponseBodyData {
	s.SubClustersJson = &v
	return s
}

func (s *GetPrometheusInstanceResponseBodyData) SetTags(v []*GetPrometheusInstanceResponseBodyDataTags) *GetPrometheusInstanceResponseBodyData {
	s.Tags = v
	return s
}

func (s *GetPrometheusInstanceResponseBodyData) SetUserId(v string) *GetPrometheusInstanceResponseBodyData {
	s.UserId = &v
	return s
}

func (s *GetPrometheusInstanceResponseBodyData) SetVSwitchId(v string) *GetPrometheusInstanceResponseBodyData {
	s.VSwitchId = &v
	return s
}

func (s *GetPrometheusInstanceResponseBodyData) SetVpcId(v string) *GetPrometheusInstanceResponseBodyData {
	s.VpcId = &v
	return s
}

type GetPrometheusInstanceResponseBodyDataTags struct {
	// The tag key.
	//
	// example:
	//
	// tag1
	TagKey *string `json:"TagKey,omitempty" xml:"TagKey,omitempty"`
	// The tag value.
	//
	// example:
	//
	// tagValue1
	TagValue *string `json:"TagValue,omitempty" xml:"TagValue,omitempty"`
}

func (s GetPrometheusInstanceResponseBodyDataTags) String() string {
	return tea.Prettify(s)
}

func (s GetPrometheusInstanceResponseBodyDataTags) GoString() string {
	return s.String()
}

func (s *GetPrometheusInstanceResponseBodyDataTags) SetTagKey(v string) *GetPrometheusInstanceResponseBodyDataTags {
	s.TagKey = &v
	return s
}

func (s *GetPrometheusInstanceResponseBodyDataTags) SetTagValue(v string) *GetPrometheusInstanceResponseBodyDataTags {
	s.TagValue = &v
	return s
}

type GetPrometheusInstanceResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetPrometheusInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetPrometheusInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s GetPrometheusInstanceResponse) GoString() string {
	return s.String()
}

func (s *GetPrometheusInstanceResponse) SetHeaders(v map[string]*string) *GetPrometheusInstanceResponse {
	s.Headers = v
	return s
}

func (s *GetPrometheusInstanceResponse) SetStatusCode(v int32) *GetPrometheusInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *GetPrometheusInstanceResponse) SetBody(v *GetPrometheusInstanceResponseBody) *GetPrometheusInstanceResponse {
	s.Body = v
	return s
}

type GetPrometheusIntegrationRequest struct {
	// The ID of the Prometheus instance. Only a Prometheus instance for Container Service or a Prometheus instance for ECS is supported.
	//
	// This parameter is required.
	//
	// example:
	//
	// cc7a37ee31aea4ed1a059eff8034b****
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	// The exporter ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 2893
	InstanceId *int64 `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The type of the integration.
	//
	// This parameter is required.
	//
	// example:
	//
	// kafka, mysql, redis, snmp, emr, nubela, and tidb
	IntegrationType *string `json:"IntegrationType,omitempty" xml:"IntegrationType,omitempty"`
	// The region ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s GetPrometheusIntegrationRequest) String() string {
	return tea.Prettify(s)
}

func (s GetPrometheusIntegrationRequest) GoString() string {
	return s.String()
}

func (s *GetPrometheusIntegrationRequest) SetClusterId(v string) *GetPrometheusIntegrationRequest {
	s.ClusterId = &v
	return s
}

func (s *GetPrometheusIntegrationRequest) SetInstanceId(v int64) *GetPrometheusIntegrationRequest {
	s.InstanceId = &v
	return s
}

func (s *GetPrometheusIntegrationRequest) SetIntegrationType(v string) *GetPrometheusIntegrationRequest {
	s.IntegrationType = &v
	return s
}

func (s *GetPrometheusIntegrationRequest) SetRegionId(v string) *GetPrometheusIntegrationRequest {
	s.RegionId = &v
	return s
}

type GetPrometheusIntegrationResponseBody struct {
	// The status code. The status code 200 indicates that the request was successful. If another status code is returned, the request failed.
	//
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The struct returned.
	Data *GetPrometheusIntegrationResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The message returned.
	//
	// example:
	//
	// message
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	//
	// example:
	//
	// 9BEF2832-9D95-5E3E-9B10-74887CA17B94
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetPrometheusIntegrationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetPrometheusIntegrationResponseBody) GoString() string {
	return s.String()
}

func (s *GetPrometheusIntegrationResponseBody) SetCode(v int32) *GetPrometheusIntegrationResponseBody {
	s.Code = &v
	return s
}

func (s *GetPrometheusIntegrationResponseBody) SetData(v *GetPrometheusIntegrationResponseBodyData) *GetPrometheusIntegrationResponseBody {
	s.Data = v
	return s
}

func (s *GetPrometheusIntegrationResponseBody) SetMessage(v string) *GetPrometheusIntegrationResponseBody {
	s.Message = &v
	return s
}

func (s *GetPrometheusIntegrationResponseBody) SetRequestId(v string) *GetPrometheusIntegrationResponseBody {
	s.RequestId = &v
	return s
}

type GetPrometheusIntegrationResponseBodyData struct {
	// Indicates whether the exporter can be deleted.
	//
	// example:
	//
	// true
	CanDelete *bool `json:"CanDelete,omitempty" xml:"CanDelete,omitempty"`
	// Indicates whether the exporter can be modified.
	//
	// example:
	//
	// true
	CanEditor *bool `json:"CanEditor,omitempty" xml:"CanEditor,omitempty"`
	// The ID of the Prometheus instance.
	//
	// example:
	//
	// c589a1b8db05c4561aefbb898ca8fb1cf
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	// The container name.
	//
	// example:
	//
	// kafka-exporter-1
	ContainerName *string `json:"ContainerName,omitempty" xml:"ContainerName,omitempty"`
	// The description of the exporter.
	//
	// example:
	//
	// "{}"
	Describe *string `json:"Describe,omitempty" xml:"Describe,omitempty"`
	// The type of the exporter.
	//
	// example:
	//
	// tidb-exporter
	ExporterType *string `json:"ExporterType,omitempty" xml:"ExporterType,omitempty"`
	// The exporter ID.
	//
	// example:
	//
	// 2893
	InstanceId *int64 `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The name of the exporter.
	//
	// example:
	//
	// lpd-skyeye
	InstanceName *string `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	// The type of the integration.
	//
	// example:
	//
	// tidb
	IntegrationType *string `json:"IntegrationType,omitempty" xml:"IntegrationType,omitempty"`
	// The namespace.
	//
	// example:
	//
	// arms-prom
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// Indicates whether an upgrade is required.
	//
	// example:
	//
	// True
	NeedUpgrade *bool `json:"NeedUpgrade,omitempty" xml:"NeedUpgrade,omitempty"`
	// The configurations of the exporter. The value is a JSON string.
	//
	// example:
	//
	// {
	//
	//       "port": "5554",
	//
	//       "name": "kafka-test12",
	//
	//       "kafka_instance": "kafka-test",
	//
	//       "__label_value": "kafka-test",
	//
	//       "scrape_interval": 33,
	//
	//       "metrics_path": "/metrics",
	//
	//       "__label_key": "kafka-test"
	//
	// }
	Param *string `json:"Param,omitempty" xml:"Param,omitempty"`
	// Indicates whether the description is displayed.
	//
	// example:
	//
	// true
	ShowDescribe *bool `json:"ShowDescribe,omitempty" xml:"ShowDescribe,omitempty"`
	// Indicates whether the exporter logs are displayed.
	//
	// example:
	//
	// true
	ShowLog *string `json:"ShowLog,omitempty" xml:"ShowLog,omitempty"`
	// The status of the exporter.
	//
	// example:
	//
	// installed
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The monitored IP address.
	//
	// example:
	//
	// 127.0.0.1:3422
	Target *string `json:"Target,omitempty" xml:"Target,omitempty"`
	// The version information.
	//
	// example:
	//
	// 1.0.0
	Version *string `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s GetPrometheusIntegrationResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetPrometheusIntegrationResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetPrometheusIntegrationResponseBodyData) SetCanDelete(v bool) *GetPrometheusIntegrationResponseBodyData {
	s.CanDelete = &v
	return s
}

func (s *GetPrometheusIntegrationResponseBodyData) SetCanEditor(v bool) *GetPrometheusIntegrationResponseBodyData {
	s.CanEditor = &v
	return s
}

func (s *GetPrometheusIntegrationResponseBodyData) SetClusterId(v string) *GetPrometheusIntegrationResponseBodyData {
	s.ClusterId = &v
	return s
}

func (s *GetPrometheusIntegrationResponseBodyData) SetContainerName(v string) *GetPrometheusIntegrationResponseBodyData {
	s.ContainerName = &v
	return s
}

func (s *GetPrometheusIntegrationResponseBodyData) SetDescribe(v string) *GetPrometheusIntegrationResponseBodyData {
	s.Describe = &v
	return s
}

func (s *GetPrometheusIntegrationResponseBodyData) SetExporterType(v string) *GetPrometheusIntegrationResponseBodyData {
	s.ExporterType = &v
	return s
}

func (s *GetPrometheusIntegrationResponseBodyData) SetInstanceId(v int64) *GetPrometheusIntegrationResponseBodyData {
	s.InstanceId = &v
	return s
}

func (s *GetPrometheusIntegrationResponseBodyData) SetInstanceName(v string) *GetPrometheusIntegrationResponseBodyData {
	s.InstanceName = &v
	return s
}

func (s *GetPrometheusIntegrationResponseBodyData) SetIntegrationType(v string) *GetPrometheusIntegrationResponseBodyData {
	s.IntegrationType = &v
	return s
}

func (s *GetPrometheusIntegrationResponseBodyData) SetNamespace(v string) *GetPrometheusIntegrationResponseBodyData {
	s.Namespace = &v
	return s
}

func (s *GetPrometheusIntegrationResponseBodyData) SetNeedUpgrade(v bool) *GetPrometheusIntegrationResponseBodyData {
	s.NeedUpgrade = &v
	return s
}

func (s *GetPrometheusIntegrationResponseBodyData) SetParam(v string) *GetPrometheusIntegrationResponseBodyData {
	s.Param = &v
	return s
}

func (s *GetPrometheusIntegrationResponseBodyData) SetShowDescribe(v bool) *GetPrometheusIntegrationResponseBodyData {
	s.ShowDescribe = &v
	return s
}

func (s *GetPrometheusIntegrationResponseBodyData) SetShowLog(v string) *GetPrometheusIntegrationResponseBodyData {
	s.ShowLog = &v
	return s
}

func (s *GetPrometheusIntegrationResponseBodyData) SetStatus(v string) *GetPrometheusIntegrationResponseBodyData {
	s.Status = &v
	return s
}

func (s *GetPrometheusIntegrationResponseBodyData) SetTarget(v string) *GetPrometheusIntegrationResponseBodyData {
	s.Target = &v
	return s
}

func (s *GetPrometheusIntegrationResponseBodyData) SetVersion(v string) *GetPrometheusIntegrationResponseBodyData {
	s.Version = &v
	return s
}

type GetPrometheusIntegrationResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetPrometheusIntegrationResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetPrometheusIntegrationResponse) String() string {
	return tea.Prettify(s)
}

func (s GetPrometheusIntegrationResponse) GoString() string {
	return s.String()
}

func (s *GetPrometheusIntegrationResponse) SetHeaders(v map[string]*string) *GetPrometheusIntegrationResponse {
	s.Headers = v
	return s
}

func (s *GetPrometheusIntegrationResponse) SetStatusCode(v int32) *GetPrometheusIntegrationResponse {
	s.StatusCode = &v
	return s
}

func (s *GetPrometheusIntegrationResponse) SetBody(v *GetPrometheusIntegrationResponseBody) *GetPrometheusIntegrationResponse {
	s.Body = v
	return s
}

type GetPrometheusMonitoringRequest struct {
	// The ID of the Prometheus instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// cc7a37ee31aea4ed1a059eff8034b****
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	// The name of the monitoring configuration.
	//
	// This parameter is required.
	//
	// example:
	//
	// customJob1
	MonitoringName *string `json:"MonitoringName,omitempty" xml:"MonitoringName,omitempty"`
	// The region ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The type of the monitoring configuration.
	//
	// Valid values for a Prometheus instance for Container Service: serviceMonitor, podMonitor, customJob, and probe.
	//
	// Valid values for a Prometheus instance for ECS: customJob and probe.
	//
	// This parameter is required.
	//
	// example:
	//
	// customJob
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetPrometheusMonitoringRequest) String() string {
	return tea.Prettify(s)
}

func (s GetPrometheusMonitoringRequest) GoString() string {
	return s.String()
}

func (s *GetPrometheusMonitoringRequest) SetClusterId(v string) *GetPrometheusMonitoringRequest {
	s.ClusterId = &v
	return s
}

func (s *GetPrometheusMonitoringRequest) SetMonitoringName(v string) *GetPrometheusMonitoringRequest {
	s.MonitoringName = &v
	return s
}

func (s *GetPrometheusMonitoringRequest) SetRegionId(v string) *GetPrometheusMonitoringRequest {
	s.RegionId = &v
	return s
}

func (s *GetPrometheusMonitoringRequest) SetType(v string) *GetPrometheusMonitoringRequest {
	s.Type = &v
	return s
}

type GetPrometheusMonitoringResponseBody struct {
	// The status code. The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned struct.
	Data *GetPrometheusMonitoringResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// example:
	//
	// message
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 78901766-3806-4E96-8E47-CFEF59E4****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetPrometheusMonitoringResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetPrometheusMonitoringResponseBody) GoString() string {
	return s.String()
}

func (s *GetPrometheusMonitoringResponseBody) SetCode(v int32) *GetPrometheusMonitoringResponseBody {
	s.Code = &v
	return s
}

func (s *GetPrometheusMonitoringResponseBody) SetData(v *GetPrometheusMonitoringResponseBodyData) *GetPrometheusMonitoringResponseBody {
	s.Data = v
	return s
}

func (s *GetPrometheusMonitoringResponseBody) SetMessage(v string) *GetPrometheusMonitoringResponseBody {
	s.Message = &v
	return s
}

func (s *GetPrometheusMonitoringResponseBody) SetRequestId(v string) *GetPrometheusMonitoringResponseBody {
	s.RequestId = &v
	return s
}

type GetPrometheusMonitoringResponseBodyData struct {
	// Prometheus Instance ID.
	//
	// example:
	//
	// c589a1b8db05c4561aefbb898ca8fb1cf
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	// The monitoring configuration. The value is a YAML string.
	ConfigYaml *string `json:"ConfigYaml,omitempty" xml:"ConfigYaml,omitempty"`
	// The name of the monitoring configuration.
	//
	// example:
	//
	// customJob1
	MonitoringName *string `json:"MonitoringName,omitempty" xml:"MonitoringName,omitempty"`
	// The status of the monitoring configuration. Valid values: run and stop.
	//
	// example:
	//
	// run
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The type of the monitoring configuration. Valid values: serviceMonitor, podMonitor, customJob, and probe.
	//
	// example:
	//
	// serviceMonitor
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetPrometheusMonitoringResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetPrometheusMonitoringResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetPrometheusMonitoringResponseBodyData) SetClusterId(v string) *GetPrometheusMonitoringResponseBodyData {
	s.ClusterId = &v
	return s
}

func (s *GetPrometheusMonitoringResponseBodyData) SetConfigYaml(v string) *GetPrometheusMonitoringResponseBodyData {
	s.ConfigYaml = &v
	return s
}

func (s *GetPrometheusMonitoringResponseBodyData) SetMonitoringName(v string) *GetPrometheusMonitoringResponseBodyData {
	s.MonitoringName = &v
	return s
}

func (s *GetPrometheusMonitoringResponseBodyData) SetStatus(v string) *GetPrometheusMonitoringResponseBodyData {
	s.Status = &v
	return s
}

func (s *GetPrometheusMonitoringResponseBodyData) SetType(v string) *GetPrometheusMonitoringResponseBodyData {
	s.Type = &v
	return s
}

type GetPrometheusMonitoringResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetPrometheusMonitoringResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetPrometheusMonitoringResponse) String() string {
	return tea.Prettify(s)
}

func (s GetPrometheusMonitoringResponse) GoString() string {
	return s.String()
}

func (s *GetPrometheusMonitoringResponse) SetHeaders(v map[string]*string) *GetPrometheusMonitoringResponse {
	s.Headers = v
	return s
}

func (s *GetPrometheusMonitoringResponse) SetStatusCode(v int32) *GetPrometheusMonitoringResponse {
	s.StatusCode = &v
	return s
}

func (s *GetPrometheusMonitoringResponse) SetBody(v *GetPrometheusMonitoringResponseBody) *GetPrometheusMonitoringResponse {
	s.Body = v
	return s
}

type GetPrometheusRemoteWriteRequest struct {
	// The ID of the Prometheus instance. Only a Prometheus instance for Container Service or a Prometheus instance for ECS is supported.
	//
	// This parameter is required.
	//
	// example:
	//
	// cc7a37ee31aea4ed1a059eff8034b\\*\\*\\*\\	- or vpc-\\*\\*\\*
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	// The region ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The name of the remote write configuration item.
	//
	// This parameter is required.
	//
	// example:
	//
	// rw1
	RemoteWriteName *string `json:"RemoteWriteName,omitempty" xml:"RemoteWriteName,omitempty"`
}

func (s GetPrometheusRemoteWriteRequest) String() string {
	return tea.Prettify(s)
}

func (s GetPrometheusRemoteWriteRequest) GoString() string {
	return s.String()
}

func (s *GetPrometheusRemoteWriteRequest) SetClusterId(v string) *GetPrometheusRemoteWriteRequest {
	s.ClusterId = &v
	return s
}

func (s *GetPrometheusRemoteWriteRequest) SetRegionId(v string) *GetPrometheusRemoteWriteRequest {
	s.RegionId = &v
	return s
}

func (s *GetPrometheusRemoteWriteRequest) SetRemoteWriteName(v string) *GetPrometheusRemoteWriteRequest {
	s.RemoteWriteName = &v
	return s
}

type GetPrometheusRemoteWriteResponseBody struct {
	// The status code. The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The details of the remote write configuration item.
	//
	// example:
	//
	// name: rw1
	//
	// url: "http://cn-hangzhou-intranet.arms.aliyuncs.com/prometheus/uid/xx/cn-hangzhou/api/v3/write"
	//
	// basic_auth: username: xxx
	//
	// password: xxx
	//
	// write_relabel_configs: - source_labels: [instance_id]
	//
	// separator: ;
	//
	// regex: si
	//
	// replacement: $1
	//
	// action: keep
	Data *GetPrometheusRemoteWriteResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The message returned.
	//
	// example:
	//
	// message
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 40B10E04-81E8-4643-970D-F1B38F2E****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- `true`
	//
	// 	- `false`
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetPrometheusRemoteWriteResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetPrometheusRemoteWriteResponseBody) GoString() string {
	return s.String()
}

func (s *GetPrometheusRemoteWriteResponseBody) SetCode(v int32) *GetPrometheusRemoteWriteResponseBody {
	s.Code = &v
	return s
}

func (s *GetPrometheusRemoteWriteResponseBody) SetData(v *GetPrometheusRemoteWriteResponseBodyData) *GetPrometheusRemoteWriteResponseBody {
	s.Data = v
	return s
}

func (s *GetPrometheusRemoteWriteResponseBody) SetMessage(v string) *GetPrometheusRemoteWriteResponseBody {
	s.Message = &v
	return s
}

func (s *GetPrometheusRemoteWriteResponseBody) SetRequestId(v string) *GetPrometheusRemoteWriteResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetPrometheusRemoteWriteResponseBody) SetSuccess(v bool) *GetPrometheusRemoteWriteResponseBody {
	s.Success = &v
	return s
}

type GetPrometheusRemoteWriteResponseBodyData struct {
	// The ID of the Prometheus instance.
	//
	// example:
	//
	// c589a1b8db05c4561aefbb898ca8fb1cf
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	// The name of the remote write configuration item.
	//
	// example:
	//
	// abc123
	RemoteWriteName *string `json:"RemoteWriteName,omitempty" xml:"RemoteWriteName,omitempty"`
	// The details of the remote write configuration item. The value is in the YAML format.
	//
	// example:
	//
	// remote_write:
	//
	//   - name: rw1
	//
	//     url: "http://cn-hangzhou-intranet.arms.aliyuncs.com/prometheus/uid/xx/cn-hangzhou/api/v3/write"
	//
	//     basic_auth:
	//
	//       username: xxx
	//
	//       password: xxx
	//
	//     write_relabel_configs:
	//
	//       - source_labels: [ instance_id ]
	//
	//         separator: ;
	//
	//         regex: si
	//
	//         replacement: $1
	//
	//         action: keep
	RemoteWriteYaml *string `json:"RemoteWriteYaml,omitempty" xml:"RemoteWriteYaml,omitempty"`
}

func (s GetPrometheusRemoteWriteResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetPrometheusRemoteWriteResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetPrometheusRemoteWriteResponseBodyData) SetClusterId(v string) *GetPrometheusRemoteWriteResponseBodyData {
	s.ClusterId = &v
	return s
}

func (s *GetPrometheusRemoteWriteResponseBodyData) SetRemoteWriteName(v string) *GetPrometheusRemoteWriteResponseBodyData {
	s.RemoteWriteName = &v
	return s
}

func (s *GetPrometheusRemoteWriteResponseBodyData) SetRemoteWriteYaml(v string) *GetPrometheusRemoteWriteResponseBodyData {
	s.RemoteWriteYaml = &v
	return s
}

type GetPrometheusRemoteWriteResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetPrometheusRemoteWriteResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetPrometheusRemoteWriteResponse) String() string {
	return tea.Prettify(s)
}

func (s GetPrometheusRemoteWriteResponse) GoString() string {
	return s.String()
}

func (s *GetPrometheusRemoteWriteResponse) SetHeaders(v map[string]*string) *GetPrometheusRemoteWriteResponse {
	s.Headers = v
	return s
}

func (s *GetPrometheusRemoteWriteResponse) SetStatusCode(v int32) *GetPrometheusRemoteWriteResponse {
	s.StatusCode = &v
	return s
}

func (s *GetPrometheusRemoteWriteResponse) SetBody(v *GetPrometheusRemoteWriteResponseBody) *GetPrometheusRemoteWriteResponse {
	s.Body = v
	return s
}

type GetRecordingRuleRequest struct {
	// The ID of the cluster.
	//
	// This parameter is required.
	//
	// example:
	//
	// cc7a37ee31aea4ed1a059eff8034b****
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	// The region ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s GetRecordingRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s GetRecordingRuleRequest) GoString() string {
	return s.String()
}

func (s *GetRecordingRuleRequest) SetClusterId(v string) *GetRecordingRuleRequest {
	s.ClusterId = &v
	return s
}

func (s *GetRecordingRuleRequest) SetRegionId(v string) *GetRecordingRuleRequest {
	s.RegionId = &v
	return s
}

type GetRecordingRuleResponseBody struct {
	// Status code. 200 is success, other status codes are exceptions.
	//
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The recording rule.
	//
	// example:
	//
	// --- groups: - name: "recording_demo"   rules:   - expr: "sum(jvm_memory_max_bytes)"     record: "rate_coredns_demo"
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// Returns a hint message for the result.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 9FEA6D00-317F-45E3-9004-7FB8B0B7****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetRecordingRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetRecordingRuleResponseBody) GoString() string {
	return s.String()
}

func (s *GetRecordingRuleResponseBody) SetCode(v int32) *GetRecordingRuleResponseBody {
	s.Code = &v
	return s
}

func (s *GetRecordingRuleResponseBody) SetData(v string) *GetRecordingRuleResponseBody {
	s.Data = &v
	return s
}

func (s *GetRecordingRuleResponseBody) SetMessage(v string) *GetRecordingRuleResponseBody {
	s.Message = &v
	return s
}

func (s *GetRecordingRuleResponseBody) SetRequestId(v string) *GetRecordingRuleResponseBody {
	s.RequestId = &v
	return s
}

type GetRecordingRuleResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetRecordingRuleResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetRecordingRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s GetRecordingRuleResponse) GoString() string {
	return s.String()
}

func (s *GetRecordingRuleResponse) SetHeaders(v map[string]*string) *GetRecordingRuleResponse {
	s.Headers = v
	return s
}

func (s *GetRecordingRuleResponse) SetStatusCode(v int32) *GetRecordingRuleResponse {
	s.StatusCode = &v
	return s
}

func (s *GetRecordingRuleResponse) SetBody(v *GetRecordingRuleResponseBody) *GetRecordingRuleResponse {
	s.Body = v
	return s
}

type GetRetcodeAppByPidRequest struct {
	// The PID of the application. To obtain the PID of the application, perform the following steps: Log on to the Application Real-Time Monitoring Service (ARMS) console. In the left-side navigation pane, choose **Browser Monitoring*	- > **Browser Monitoring**. On the Browser Monitoring page, click the name of the application. The URL in the address bar contains the PID of the application. The PID is in the pid=xxx format. The PID is usually percent encoded as xxx%40xxx. You must modify this value to remove the percent encoding. For example, if the PID in the URL is xxx%4074xxx, you must replace %40 with the at sign (@) to obtain xxx@74xxx.
	//
	// example:
	//
	// b590lhguqs@9781be0f44dXXXX
	Pid *string `json:"Pid,omitempty" xml:"Pid,omitempty"`
	// The ID of the region.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The list of tags.
	Tags []*GetRetcodeAppByPidRequestTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
}

func (s GetRetcodeAppByPidRequest) String() string {
	return tea.Prettify(s)
}

func (s GetRetcodeAppByPidRequest) GoString() string {
	return s.String()
}

func (s *GetRetcodeAppByPidRequest) SetPid(v string) *GetRetcodeAppByPidRequest {
	s.Pid = &v
	return s
}

func (s *GetRetcodeAppByPidRequest) SetRegionId(v string) *GetRetcodeAppByPidRequest {
	s.RegionId = &v
	return s
}

func (s *GetRetcodeAppByPidRequest) SetTags(v []*GetRetcodeAppByPidRequestTags) *GetRetcodeAppByPidRequest {
	s.Tags = v
	return s
}

type GetRetcodeAppByPidRequestTags struct {
	// The tag key.
	//
	// example:
	//
	// TestKey
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The tag value.
	//
	// example:
	//
	// TestValue
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s GetRetcodeAppByPidRequestTags) String() string {
	return tea.Prettify(s)
}

func (s GetRetcodeAppByPidRequestTags) GoString() string {
	return s.String()
}

func (s *GetRetcodeAppByPidRequestTags) SetKey(v string) *GetRetcodeAppByPidRequestTags {
	s.Key = &v
	return s
}

func (s *GetRetcodeAppByPidRequestTags) SetValue(v string) *GetRetcodeAppByPidRequestTags {
	s.Value = &v
	return s
}

type GetRetcodeAppByPidResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// 2983BEF7-4A0D-47A2-94A2-8E9C5E63****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The returned application data.
	RetcodeApp *GetRetcodeAppByPidResponseBodyRetcodeApp `json:"RetcodeApp,omitempty" xml:"RetcodeApp,omitempty" type:"Struct"`
}

func (s GetRetcodeAppByPidResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetRetcodeAppByPidResponseBody) GoString() string {
	return s.String()
}

func (s *GetRetcodeAppByPidResponseBody) SetRequestId(v string) *GetRetcodeAppByPidResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetRetcodeAppByPidResponseBody) SetRetcodeApp(v *GetRetcodeAppByPidResponseBodyRetcodeApp) *GetRetcodeAppByPidResponseBody {
	s.RetcodeApp = v
	return s
}

type GetRetcodeAppByPidResponseBodyRetcodeApp struct {
	// The ID of the application. The parameter is an auto-increment parameter.
	//
	// example:
	//
	// 2787XXXX
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// The name of the application that is monitored by Browser Monitoring.
	//
	// example:
	//
	// testRetcodeAppXXXX
	AppName *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	// The process identifier (PID) of the application.
	//
	// example:
	//
	// b590lhguqs@9781be0f44dXXXX
	Pid *string `json:"Pid,omitempty" xml:"Pid,omitempty"`
	// The ID of the resource group. You can obtain the resource group ID in the **Resource Management*	- console.
	//
	// example:
	//
	// rg-acfmxidtzXXXX
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	// The type of the application that is monitored by Browser Monitoring. Valid values:
	//
	// 	- `web`: web application
	//
	// 	- `weex`: Weex mobile app
	//
	// 	- `mini_dd`: DingTalk mini program
	//
	// 	- `mini_alipay`: Alipay mini program
	//
	// 	- `mini_wx`: WeChat mini program
	//
	// 	- `mini_common`: mini program on other platforms
	//
	// example:
	//
	// web
	RetcodeAppType *string `json:"RetcodeAppType,omitempty" xml:"RetcodeAppType,omitempty"`
	// The tags that are attached to the instance.
	Tags []*GetRetcodeAppByPidResponseBodyRetcodeAppTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
}

func (s GetRetcodeAppByPidResponseBodyRetcodeApp) String() string {
	return tea.Prettify(s)
}

func (s GetRetcodeAppByPidResponseBodyRetcodeApp) GoString() string {
	return s.String()
}

func (s *GetRetcodeAppByPidResponseBodyRetcodeApp) SetAppId(v string) *GetRetcodeAppByPidResponseBodyRetcodeApp {
	s.AppId = &v
	return s
}

func (s *GetRetcodeAppByPidResponseBodyRetcodeApp) SetAppName(v string) *GetRetcodeAppByPidResponseBodyRetcodeApp {
	s.AppName = &v
	return s
}

func (s *GetRetcodeAppByPidResponseBodyRetcodeApp) SetPid(v string) *GetRetcodeAppByPidResponseBodyRetcodeApp {
	s.Pid = &v
	return s
}

func (s *GetRetcodeAppByPidResponseBodyRetcodeApp) SetResourceGroupId(v string) *GetRetcodeAppByPidResponseBodyRetcodeApp {
	s.ResourceGroupId = &v
	return s
}

func (s *GetRetcodeAppByPidResponseBodyRetcodeApp) SetRetcodeAppType(v string) *GetRetcodeAppByPidResponseBodyRetcodeApp {
	s.RetcodeAppType = &v
	return s
}

func (s *GetRetcodeAppByPidResponseBodyRetcodeApp) SetTags(v []*GetRetcodeAppByPidResponseBodyRetcodeAppTags) *GetRetcodeAppByPidResponseBodyRetcodeApp {
	s.Tags = v
	return s
}

type GetRetcodeAppByPidResponseBodyRetcodeAppTags struct {
	// The key of the tag.
	//
	// example:
	//
	// testKey
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The value of the tag.
	//
	// example:
	//
	// testValue
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s GetRetcodeAppByPidResponseBodyRetcodeAppTags) String() string {
	return tea.Prettify(s)
}

func (s GetRetcodeAppByPidResponseBodyRetcodeAppTags) GoString() string {
	return s.String()
}

func (s *GetRetcodeAppByPidResponseBodyRetcodeAppTags) SetKey(v string) *GetRetcodeAppByPidResponseBodyRetcodeAppTags {
	s.Key = &v
	return s
}

func (s *GetRetcodeAppByPidResponseBodyRetcodeAppTags) SetValue(v string) *GetRetcodeAppByPidResponseBodyRetcodeAppTags {
	s.Value = &v
	return s
}

type GetRetcodeAppByPidResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetRetcodeAppByPidResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetRetcodeAppByPidResponse) String() string {
	return tea.Prettify(s)
}

func (s GetRetcodeAppByPidResponse) GoString() string {
	return s.String()
}

func (s *GetRetcodeAppByPidResponse) SetHeaders(v map[string]*string) *GetRetcodeAppByPidResponse {
	s.Headers = v
	return s
}

func (s *GetRetcodeAppByPidResponse) SetStatusCode(v int32) *GetRetcodeAppByPidResponse {
	s.StatusCode = &v
	return s
}

func (s *GetRetcodeAppByPidResponse) SetBody(v *GetRetcodeAppByPidResponseBody) *GetRetcodeAppByPidResponse {
	s.Body = v
	return s
}

type GetRetcodeDataByQueryRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 1668687302
	From *int64 `json:"From,omitempty" xml:"From,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// atc889zkcf@d8deedfa9bf****
	Pid *string `json:"Pid,omitempty" xml:"Pid,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// t : pv|select sum(times) as pv , approx_distinct(uid) as uv , (date-date%3600000) as date  group by date
	Query *string `json:"Query,omitempty" xml:"Query,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1668688000
	To *int64 `json:"To,omitempty" xml:"To,omitempty"`
}

func (s GetRetcodeDataByQueryRequest) String() string {
	return tea.Prettify(s)
}

func (s GetRetcodeDataByQueryRequest) GoString() string {
	return s.String()
}

func (s *GetRetcodeDataByQueryRequest) SetFrom(v int64) *GetRetcodeDataByQueryRequest {
	s.From = &v
	return s
}

func (s *GetRetcodeDataByQueryRequest) SetPid(v string) *GetRetcodeDataByQueryRequest {
	s.Pid = &v
	return s
}

func (s *GetRetcodeDataByQueryRequest) SetQuery(v string) *GetRetcodeDataByQueryRequest {
	s.Query = &v
	return s
}

func (s *GetRetcodeDataByQueryRequest) SetRegionId(v string) *GetRetcodeDataByQueryRequest {
	s.RegionId = &v
	return s
}

func (s *GetRetcodeDataByQueryRequest) SetTo(v int64) *GetRetcodeDataByQueryRequest {
	s.To = &v
	return s
}

type GetRetcodeDataByQueryResponseBody struct {
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// {"total":0,"auth":false,"pageSize":20,"completed":true,"page":1,"items":[]}
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// example:
	//
	// Internal error. Please try again. Contact the DingTalk service account if the issue                              persists after multiple retries.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 2A0CEDF1-06FE-44AC-8E21-21A5BE65****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetRetcodeDataByQueryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetRetcodeDataByQueryResponseBody) GoString() string {
	return s.String()
}

func (s *GetRetcodeDataByQueryResponseBody) SetCode(v string) *GetRetcodeDataByQueryResponseBody {
	s.Code = &v
	return s
}

func (s *GetRetcodeDataByQueryResponseBody) SetData(v string) *GetRetcodeDataByQueryResponseBody {
	s.Data = &v
	return s
}

func (s *GetRetcodeDataByQueryResponseBody) SetMessage(v string) *GetRetcodeDataByQueryResponseBody {
	s.Message = &v
	return s
}

func (s *GetRetcodeDataByQueryResponseBody) SetRequestId(v string) *GetRetcodeDataByQueryResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetRetcodeDataByQueryResponseBody) SetSuccess(v bool) *GetRetcodeDataByQueryResponseBody {
	s.Success = &v
	return s
}

type GetRetcodeDataByQueryResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetRetcodeDataByQueryResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetRetcodeDataByQueryResponse) String() string {
	return tea.Prettify(s)
}

func (s GetRetcodeDataByQueryResponse) GoString() string {
	return s.String()
}

func (s *GetRetcodeDataByQueryResponse) SetHeaders(v map[string]*string) *GetRetcodeDataByQueryResponse {
	s.Headers = v
	return s
}

func (s *GetRetcodeDataByQueryResponse) SetStatusCode(v int32) *GetRetcodeDataByQueryResponse {
	s.StatusCode = &v
	return s
}

func (s *GetRetcodeDataByQueryResponse) SetBody(v *GetRetcodeDataByQueryResponseBody) *GetRetcodeDataByQueryResponse {
	s.Body = v
	return s
}

type GetRetcodeLogstoreRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// atc889zkcf@d8deedfa9bf****
	Pid *string `json:"Pid,omitempty" xml:"Pid,omitempty"`
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s GetRetcodeLogstoreRequest) String() string {
	return tea.Prettify(s)
}

func (s GetRetcodeLogstoreRequest) GoString() string {
	return s.String()
}

func (s *GetRetcodeLogstoreRequest) SetPid(v string) *GetRetcodeLogstoreRequest {
	s.Pid = &v
	return s
}

func (s *GetRetcodeLogstoreRequest) SetRegionId(v string) *GetRetcodeLogstoreRequest {
	s.RegionId = &v
	return s
}

type GetRetcodeLogstoreResponseBody struct {
	Data *GetRetcodeLogstoreResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 1A9C645C-C83F-4C9D-8CCB-29BEC9E1****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetRetcodeLogstoreResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetRetcodeLogstoreResponseBody) GoString() string {
	return s.String()
}

func (s *GetRetcodeLogstoreResponseBody) SetData(v *GetRetcodeLogstoreResponseBodyData) *GetRetcodeLogstoreResponseBody {
	s.Data = v
	return s
}

func (s *GetRetcodeLogstoreResponseBody) SetRequestId(v string) *GetRetcodeLogstoreResponseBody {
	s.RequestId = &v
	return s
}

type GetRetcodeLogstoreResponseBodyData struct {
	// example:
	//
	// retcode app or task can not be found!
	Message          *string                                             `json:"Message,omitempty" xml:"Message,omitempty"`
	RetcodeSLSConfig *GetRetcodeLogstoreResponseBodyDataRetcodeSLSConfig `json:"RetcodeSLSConfig,omitempty" xml:"RetcodeSLSConfig,omitempty" type:"Struct"`
	// example:
	//
	// true
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetRetcodeLogstoreResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetRetcodeLogstoreResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetRetcodeLogstoreResponseBodyData) SetMessage(v string) *GetRetcodeLogstoreResponseBodyData {
	s.Message = &v
	return s
}

func (s *GetRetcodeLogstoreResponseBodyData) SetRetcodeSLSConfig(v *GetRetcodeLogstoreResponseBodyDataRetcodeSLSConfig) *GetRetcodeLogstoreResponseBodyData {
	s.RetcodeSLSConfig = v
	return s
}

func (s *GetRetcodeLogstoreResponseBodyData) SetStatus(v string) *GetRetcodeLogstoreResponseBodyData {
	s.Status = &v
	return s
}

type GetRetcodeLogstoreResponseBodyDataRetcodeSLSConfig struct {
	// example:
	//
	// log-test-220431
	Logstore *string `json:"Logstore,omitempty" xml:"Logstore,omitempty"`
	// example:
	//
	// test-project
	Project *string `json:"Project,omitempty" xml:"Project,omitempty"`
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s GetRetcodeLogstoreResponseBodyDataRetcodeSLSConfig) String() string {
	return tea.Prettify(s)
}

func (s GetRetcodeLogstoreResponseBodyDataRetcodeSLSConfig) GoString() string {
	return s.String()
}

func (s *GetRetcodeLogstoreResponseBodyDataRetcodeSLSConfig) SetLogstore(v string) *GetRetcodeLogstoreResponseBodyDataRetcodeSLSConfig {
	s.Logstore = &v
	return s
}

func (s *GetRetcodeLogstoreResponseBodyDataRetcodeSLSConfig) SetProject(v string) *GetRetcodeLogstoreResponseBodyDataRetcodeSLSConfig {
	s.Project = &v
	return s
}

func (s *GetRetcodeLogstoreResponseBodyDataRetcodeSLSConfig) SetRegionId(v string) *GetRetcodeLogstoreResponseBodyDataRetcodeSLSConfig {
	s.RegionId = &v
	return s
}

type GetRetcodeLogstoreResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetRetcodeLogstoreResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetRetcodeLogstoreResponse) String() string {
	return tea.Prettify(s)
}

func (s GetRetcodeLogstoreResponse) GoString() string {
	return s.String()
}

func (s *GetRetcodeLogstoreResponse) SetHeaders(v map[string]*string) *GetRetcodeLogstoreResponse {
	s.Headers = v
	return s
}

func (s *GetRetcodeLogstoreResponse) SetStatusCode(v int32) *GetRetcodeLogstoreResponse {
	s.StatusCode = &v
	return s
}

func (s *GetRetcodeLogstoreResponse) SetBody(v *GetRetcodeLogstoreResponseBody) *GetRetcodeLogstoreResponse {
	s.Body = v
	return s
}

type GetRetcodeShareUrlRequest struct {
	// The process identifier (PID) of the application.
	//
	// Log on to the **ARMS console**. In the left-side navigation pane, choose **Browser Monitoring*	- > **Browser Monitoring**. On the Browser Monitoring page, click the name of an application. The URL in the address bar contains the process ID (PID) of the application. The PID is indicated in the `pid=xxx` format. The PID is usually percent encoded as `xxx%40xxx`. You must modify this value to remove the percent encoding. For example, if the PID in the URL is `eb4zdose6v%409781be0f44d****`, you must replace `%40` with @ to obtain `eb4zdose6v@9781be0f44d****`.
	//
	// This parameter is required.
	//
	// example:
	//
	// iioe7jcnuk@582846f37******
	Pid *string `json:"Pid,omitempty" xml:"Pid,omitempty"`
}

func (s GetRetcodeShareUrlRequest) String() string {
	return tea.Prettify(s)
}

func (s GetRetcodeShareUrlRequest) GoString() string {
	return s.String()
}

func (s *GetRetcodeShareUrlRequest) SetPid(v string) *GetRetcodeShareUrlRequest {
	s.Pid = &v
	return s
}

type GetRetcodeShareUrlResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 01FF8DD9-A09C-47A1-895A-B6E321******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The logon-free URL of the application.
	//
	// example:
	//
	// http://arms-daily.console.aliyun.com:8080/shareapi/retcode.json?login_arms_t3h_token=XXXxxx&action=RetcodeAction&eventSubmitDoGetData=1
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s GetRetcodeShareUrlResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetRetcodeShareUrlResponseBody) GoString() string {
	return s.String()
}

func (s *GetRetcodeShareUrlResponseBody) SetRequestId(v string) *GetRetcodeShareUrlResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetRetcodeShareUrlResponseBody) SetUrl(v string) *GetRetcodeShareUrlResponseBody {
	s.Url = &v
	return s
}

type GetRetcodeShareUrlResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetRetcodeShareUrlResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetRetcodeShareUrlResponse) String() string {
	return tea.Prettify(s)
}

func (s GetRetcodeShareUrlResponse) GoString() string {
	return s.String()
}

func (s *GetRetcodeShareUrlResponse) SetHeaders(v map[string]*string) *GetRetcodeShareUrlResponse {
	s.Headers = v
	return s
}

func (s *GetRetcodeShareUrlResponse) SetStatusCode(v int32) *GetRetcodeShareUrlResponse {
	s.StatusCode = &v
	return s
}

func (s *GetRetcodeShareUrlResponse) SetBody(v *GetRetcodeShareUrlResponseBody) *GetRetcodeShareUrlResponse {
	s.Body = v
	return s
}

type GetRumAppInfoRequest struct {
	// example:
	//
	// default
	AppGroup *string `json:"AppGroup,omitempty" xml:"AppGroup,omitempty"`
	// example:
	//
	// atc889zkcf@d8deedfa9bf****
	Pid *string `json:"Pid,omitempty" xml:"Pid,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s GetRumAppInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s GetRumAppInfoRequest) GoString() string {
	return s.String()
}

func (s *GetRumAppInfoRequest) SetAppGroup(v string) *GetRumAppInfoRequest {
	s.AppGroup = &v
	return s
}

func (s *GetRumAppInfoRequest) SetPid(v string) *GetRumAppInfoRequest {
	s.Pid = &v
	return s
}

func (s *GetRumAppInfoRequest) SetRegionId(v string) *GetRumAppInfoRequest {
	s.RegionId = &v
	return s
}

type GetRumAppInfoResponseBody struct {
	// example:
	//
	// 200
	Code *int32                         `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *GetRumAppInfoResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *string `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// StartTime is mandatory for this action.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	//
	// example:
	//
	// A5EC8221-08F2-4C95-9AF1-49FD998C****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetRumAppInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetRumAppInfoResponseBody) GoString() string {
	return s.String()
}

func (s *GetRumAppInfoResponseBody) SetCode(v int32) *GetRumAppInfoResponseBody {
	s.Code = &v
	return s
}

func (s *GetRumAppInfoResponseBody) SetData(v *GetRumAppInfoResponseBodyData) *GetRumAppInfoResponseBody {
	s.Data = v
	return s
}

func (s *GetRumAppInfoResponseBody) SetHttpStatusCode(v string) *GetRumAppInfoResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetRumAppInfoResponseBody) SetMessage(v string) *GetRumAppInfoResponseBody {
	s.Message = &v
	return s
}

func (s *GetRumAppInfoResponseBody) SetRequestId(v string) *GetRumAppInfoResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetRumAppInfoResponseBody) SetSuccess(v bool) *GetRumAppInfoResponseBody {
	s.Success = &v
	return s
}

type GetRumAppInfoResponseBodyData struct {
	// example:
	//
	// web
	AppType *string `json:"AppType,omitempty" xml:"AppType,omitempty"`
	// example:
	//
	// 1683353594000
	CreateTime  *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// example:
	//
	// xxxxxxxx-default-cn.rum.aliyuncs.com
	Endpoint *string `json:"Endpoint,omitempty" xml:"Endpoint,omitempty"`
	// example:
	//
	// true
	IsSubscription *string `json:"IsSubscription,omitempty" xml:"IsSubscription,omitempty"`
	// example:
	//
	// tomcat-demo-test
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// nickname
	NickName *string `json:"NickName,omitempty" xml:"NickName,omitempty"`
	// example:
	//
	// com.alibaba.rum
	PackageName *string `json:"PackageName,omitempty" xml:"PackageName,omitempty"`
	// example:
	//
	// avccccefy0@24cccccbf384dc6
	Pid *string `json:"Pid,omitempty" xml:"Pid,omitempty"`
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// example:
	//
	// rg-aek2vezare****
	ResourceGroupId      *string                                              `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	ServiceDomainConfigs []*GetRumAppInfoResponseBodyDataServiceDomainConfigs `json:"ServiceDomainConfigs,omitempty" xml:"ServiceDomainConfigs,omitempty" type:"Repeated"`
	// example:
	//
	// logstore-rum
	SlsLogstore *string `json:"SlsLogstore,omitempty" xml:"SlsLogstore,omitempty"`
	// example:
	//
	// proj-xtrace-xxxxxxxxxxxxxxxxxxxxxxx-cn-hangzhou
	SlsProject *string `json:"SlsProject,omitempty" xml:"SlsProject,omitempty"`
	// example:
	//
	// running
	Status *string                              `json:"Status,omitempty" xml:"Status,omitempty"`
	Tags   []*GetRumAppInfoResponseBodyDataTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
	// example:
	//
	// RUM
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetRumAppInfoResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetRumAppInfoResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetRumAppInfoResponseBodyData) SetAppType(v string) *GetRumAppInfoResponseBodyData {
	s.AppType = &v
	return s
}

func (s *GetRumAppInfoResponseBodyData) SetCreateTime(v string) *GetRumAppInfoResponseBodyData {
	s.CreateTime = &v
	return s
}

func (s *GetRumAppInfoResponseBodyData) SetDescription(v string) *GetRumAppInfoResponseBodyData {
	s.Description = &v
	return s
}

func (s *GetRumAppInfoResponseBodyData) SetEndpoint(v string) *GetRumAppInfoResponseBodyData {
	s.Endpoint = &v
	return s
}

func (s *GetRumAppInfoResponseBodyData) SetIsSubscription(v string) *GetRumAppInfoResponseBodyData {
	s.IsSubscription = &v
	return s
}

func (s *GetRumAppInfoResponseBodyData) SetName(v string) *GetRumAppInfoResponseBodyData {
	s.Name = &v
	return s
}

func (s *GetRumAppInfoResponseBodyData) SetNickName(v string) *GetRumAppInfoResponseBodyData {
	s.NickName = &v
	return s
}

func (s *GetRumAppInfoResponseBodyData) SetPackageName(v string) *GetRumAppInfoResponseBodyData {
	s.PackageName = &v
	return s
}

func (s *GetRumAppInfoResponseBodyData) SetPid(v string) *GetRumAppInfoResponseBodyData {
	s.Pid = &v
	return s
}

func (s *GetRumAppInfoResponseBodyData) SetRegionId(v string) *GetRumAppInfoResponseBodyData {
	s.RegionId = &v
	return s
}

func (s *GetRumAppInfoResponseBodyData) SetResourceGroupId(v string) *GetRumAppInfoResponseBodyData {
	s.ResourceGroupId = &v
	return s
}

func (s *GetRumAppInfoResponseBodyData) SetServiceDomainConfigs(v []*GetRumAppInfoResponseBodyDataServiceDomainConfigs) *GetRumAppInfoResponseBodyData {
	s.ServiceDomainConfigs = v
	return s
}

func (s *GetRumAppInfoResponseBodyData) SetSlsLogstore(v string) *GetRumAppInfoResponseBodyData {
	s.SlsLogstore = &v
	return s
}

func (s *GetRumAppInfoResponseBodyData) SetSlsProject(v string) *GetRumAppInfoResponseBodyData {
	s.SlsProject = &v
	return s
}

func (s *GetRumAppInfoResponseBodyData) SetStatus(v string) *GetRumAppInfoResponseBodyData {
	s.Status = &v
	return s
}

func (s *GetRumAppInfoResponseBodyData) SetTags(v []*GetRumAppInfoResponseBodyDataTags) *GetRumAppInfoResponseBodyData {
	s.Tags = v
	return s
}

func (s *GetRumAppInfoResponseBodyData) SetType(v string) *GetRumAppInfoResponseBodyData {
	s.Type = &v
	return s
}

type GetRumAppInfoResponseBodyDataServiceDomainConfigs struct {
	Description     *string   `json:"Description,omitempty" xml:"Description,omitempty"`
	Domain          *string   `json:"Domain,omitempty" xml:"Domain,omitempty"`
	PropagatorTypes []*string `json:"PropagatorTypes,omitempty" xml:"PropagatorTypes,omitempty" type:"Repeated"`
	Tracing         *bool     `json:"Tracing,omitempty" xml:"Tracing,omitempty"`
}

func (s GetRumAppInfoResponseBodyDataServiceDomainConfigs) String() string {
	return tea.Prettify(s)
}

func (s GetRumAppInfoResponseBodyDataServiceDomainConfigs) GoString() string {
	return s.String()
}

func (s *GetRumAppInfoResponseBodyDataServiceDomainConfigs) SetDescription(v string) *GetRumAppInfoResponseBodyDataServiceDomainConfigs {
	s.Description = &v
	return s
}

func (s *GetRumAppInfoResponseBodyDataServiceDomainConfigs) SetDomain(v string) *GetRumAppInfoResponseBodyDataServiceDomainConfigs {
	s.Domain = &v
	return s
}

func (s *GetRumAppInfoResponseBodyDataServiceDomainConfigs) SetPropagatorTypes(v []*string) *GetRumAppInfoResponseBodyDataServiceDomainConfigs {
	s.PropagatorTypes = v
	return s
}

func (s *GetRumAppInfoResponseBodyDataServiceDomainConfigs) SetTracing(v bool) *GetRumAppInfoResponseBodyDataServiceDomainConfigs {
	s.Tracing = &v
	return s
}

type GetRumAppInfoResponseBodyDataTags struct {
	// example:
	//
	// Label
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// example:
	//
	// Value
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s GetRumAppInfoResponseBodyDataTags) String() string {
	return tea.Prettify(s)
}

func (s GetRumAppInfoResponseBodyDataTags) GoString() string {
	return s.String()
}

func (s *GetRumAppInfoResponseBodyDataTags) SetKey(v string) *GetRumAppInfoResponseBodyDataTags {
	s.Key = &v
	return s
}

func (s *GetRumAppInfoResponseBodyDataTags) SetValue(v string) *GetRumAppInfoResponseBodyDataTags {
	s.Value = &v
	return s
}

type GetRumAppInfoResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetRumAppInfoResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetRumAppInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s GetRumAppInfoResponse) GoString() string {
	return s.String()
}

func (s *GetRumAppInfoResponse) SetHeaders(v map[string]*string) *GetRumAppInfoResponse {
	s.Headers = v
	return s
}

func (s *GetRumAppInfoResponse) SetStatusCode(v int32) *GetRumAppInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *GetRumAppInfoResponse) SetBody(v *GetRumAppInfoResponseBody) *GetRumAppInfoResponse {
	s.Body = v
	return s
}

type GetRumAppsRequest struct {
	// example:
	//
	// default
	AppGroup *string `json:"AppGroup,omitempty" xml:"AppGroup,omitempty"`
	// example:
	//
	// b590lhguqs@28f515462******
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// example:
	//
	// test-app
	AppName *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// example:
	//
	// rg-acfmxyexli2****
	ResourceGroupId *string                  `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	Tags            []*GetRumAppsRequestTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
}

func (s GetRumAppsRequest) String() string {
	return tea.Prettify(s)
}

func (s GetRumAppsRequest) GoString() string {
	return s.String()
}

func (s *GetRumAppsRequest) SetAppGroup(v string) *GetRumAppsRequest {
	s.AppGroup = &v
	return s
}

func (s *GetRumAppsRequest) SetAppId(v string) *GetRumAppsRequest {
	s.AppId = &v
	return s
}

func (s *GetRumAppsRequest) SetAppName(v string) *GetRumAppsRequest {
	s.AppName = &v
	return s
}

func (s *GetRumAppsRequest) SetRegionId(v string) *GetRumAppsRequest {
	s.RegionId = &v
	return s
}

func (s *GetRumAppsRequest) SetResourceGroupId(v string) *GetRumAppsRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *GetRumAppsRequest) SetTags(v []*GetRumAppsRequestTags) *GetRumAppsRequest {
	s.Tags = v
	return s
}

type GetRumAppsRequestTags struct {
	// example:
	//
	// TestKey
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// example:
	//
	// TestValue
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s GetRumAppsRequestTags) String() string {
	return tea.Prettify(s)
}

func (s GetRumAppsRequestTags) GoString() string {
	return s.String()
}

func (s *GetRumAppsRequestTags) SetKey(v string) *GetRumAppsRequestTags {
	s.Key = &v
	return s
}

func (s *GetRumAppsRequestTags) SetValue(v string) *GetRumAppsRequestTags {
	s.Value = &v
	return s
}

type GetRumAppsResponseBody struct {
	AppList []*GetRumAppsResponseBodyAppList `json:"AppList,omitempty" xml:"AppList,omitempty" type:"Repeated"`
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	//
	// example:
	//
	// 70675725-8F11-4817-8106-CFE0AD71****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetRumAppsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetRumAppsResponseBody) GoString() string {
	return s.String()
}

func (s *GetRumAppsResponseBody) SetAppList(v []*GetRumAppsResponseBodyAppList) *GetRumAppsResponseBody {
	s.AppList = v
	return s
}

func (s *GetRumAppsResponseBody) SetCode(v int32) *GetRumAppsResponseBody {
	s.Code = &v
	return s
}

func (s *GetRumAppsResponseBody) SetHttpStatusCode(v int32) *GetRumAppsResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetRumAppsResponseBody) SetMessage(v string) *GetRumAppsResponseBody {
	s.Message = &v
	return s
}

func (s *GetRumAppsResponseBody) SetRequestId(v string) *GetRumAppsResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetRumAppsResponseBody) SetSuccess(v bool) *GetRumAppsResponseBody {
	s.Success = &v
	return s
}

type GetRumAppsResponseBodyAppList struct {
	// example:
	//
	// web
	AppType *string `json:"AppType,omitempty" xml:"AppType,omitempty"`
	// example:
	//
	// 1685686960872
	CreateTime  interface{} `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	Description *string     `json:"Description,omitempty" xml:"Description,omitempty"`
	// example:
	//
	// xxxxxxxx-default-cn.rum.aliyuncs.com
	Endpoint *string `json:"Endpoint,omitempty" xml:"Endpoint,omitempty"`
	// example:
	//
	// true
	IsSubscription *bool   `json:"IsSubscription,omitempty" xml:"IsSubscription,omitempty"`
	Name           *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// Williamtag
	NickName *string `json:"NickName,omitempty" xml:"NickName,omitempty"`
	// example:
	//
	// com.zy.yxws
	PackageName *string `json:"PackageName,omitempty" xml:"PackageName,omitempty"`
	// example:
	//
	// xxxxx@cc08bdxxxx20b15
	Pid *string `json:"Pid,omitempty" xml:"Pid,omitempty"`
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// example:
	//
	// rg-acfmzaq3ypaqkdy
	ResourceGroupId      *string                                              `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	ServiceDomainConfigs []*GetRumAppsResponseBodyAppListServiceDomainConfigs `json:"ServiceDomainConfigs,omitempty" xml:"ServiceDomainConfigs,omitempty" type:"Repeated"`
	// example:
	//
	// logstore-rum
	SlsLogstore *string `json:"SlsLogstore,omitempty" xml:"SlsLogstore,omitempty"`
	// example:
	//
	// proj-xtrace-xxxxxxxba6ef5466b5debf9e2f951-cn-hangzhou
	SlsProject *string `json:"SlsProject,omitempty" xml:"SlsProject,omitempty"`
	// example:
	//
	// running
	Status *string                              `json:"Status,omitempty" xml:"Status,omitempty"`
	Tags   []*GetRumAppsResponseBodyAppListTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
	// example:
	//
	// RUM
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetRumAppsResponseBodyAppList) String() string {
	return tea.Prettify(s)
}

func (s GetRumAppsResponseBodyAppList) GoString() string {
	return s.String()
}

func (s *GetRumAppsResponseBodyAppList) SetAppType(v string) *GetRumAppsResponseBodyAppList {
	s.AppType = &v
	return s
}

func (s *GetRumAppsResponseBodyAppList) SetCreateTime(v interface{}) *GetRumAppsResponseBodyAppList {
	s.CreateTime = v
	return s
}

func (s *GetRumAppsResponseBodyAppList) SetDescription(v string) *GetRumAppsResponseBodyAppList {
	s.Description = &v
	return s
}

func (s *GetRumAppsResponseBodyAppList) SetEndpoint(v string) *GetRumAppsResponseBodyAppList {
	s.Endpoint = &v
	return s
}

func (s *GetRumAppsResponseBodyAppList) SetIsSubscription(v bool) *GetRumAppsResponseBodyAppList {
	s.IsSubscription = &v
	return s
}

func (s *GetRumAppsResponseBodyAppList) SetName(v string) *GetRumAppsResponseBodyAppList {
	s.Name = &v
	return s
}

func (s *GetRumAppsResponseBodyAppList) SetNickName(v string) *GetRumAppsResponseBodyAppList {
	s.NickName = &v
	return s
}

func (s *GetRumAppsResponseBodyAppList) SetPackageName(v string) *GetRumAppsResponseBodyAppList {
	s.PackageName = &v
	return s
}

func (s *GetRumAppsResponseBodyAppList) SetPid(v string) *GetRumAppsResponseBodyAppList {
	s.Pid = &v
	return s
}

func (s *GetRumAppsResponseBodyAppList) SetRegionId(v string) *GetRumAppsResponseBodyAppList {
	s.RegionId = &v
	return s
}

func (s *GetRumAppsResponseBodyAppList) SetResourceGroupId(v string) *GetRumAppsResponseBodyAppList {
	s.ResourceGroupId = &v
	return s
}

func (s *GetRumAppsResponseBodyAppList) SetServiceDomainConfigs(v []*GetRumAppsResponseBodyAppListServiceDomainConfigs) *GetRumAppsResponseBodyAppList {
	s.ServiceDomainConfigs = v
	return s
}

func (s *GetRumAppsResponseBodyAppList) SetSlsLogstore(v string) *GetRumAppsResponseBodyAppList {
	s.SlsLogstore = &v
	return s
}

func (s *GetRumAppsResponseBodyAppList) SetSlsProject(v string) *GetRumAppsResponseBodyAppList {
	s.SlsProject = &v
	return s
}

func (s *GetRumAppsResponseBodyAppList) SetStatus(v string) *GetRumAppsResponseBodyAppList {
	s.Status = &v
	return s
}

func (s *GetRumAppsResponseBodyAppList) SetTags(v []*GetRumAppsResponseBodyAppListTags) *GetRumAppsResponseBodyAppList {
	s.Tags = v
	return s
}

func (s *GetRumAppsResponseBodyAppList) SetType(v string) *GetRumAppsResponseBodyAppList {
	s.Type = &v
	return s
}

type GetRumAppsResponseBodyAppListServiceDomainConfigs struct {
	Description     *string   `json:"Description,omitempty" xml:"Description,omitempty"`
	Domain          *string   `json:"Domain,omitempty" xml:"Domain,omitempty"`
	PropagatorTypes []*string `json:"PropagatorTypes,omitempty" xml:"PropagatorTypes,omitempty" type:"Repeated"`
	Tracing         *string   `json:"Tracing,omitempty" xml:"Tracing,omitempty"`
}

func (s GetRumAppsResponseBodyAppListServiceDomainConfigs) String() string {
	return tea.Prettify(s)
}

func (s GetRumAppsResponseBodyAppListServiceDomainConfigs) GoString() string {
	return s.String()
}

func (s *GetRumAppsResponseBodyAppListServiceDomainConfigs) SetDescription(v string) *GetRumAppsResponseBodyAppListServiceDomainConfigs {
	s.Description = &v
	return s
}

func (s *GetRumAppsResponseBodyAppListServiceDomainConfigs) SetDomain(v string) *GetRumAppsResponseBodyAppListServiceDomainConfigs {
	s.Domain = &v
	return s
}

func (s *GetRumAppsResponseBodyAppListServiceDomainConfigs) SetPropagatorTypes(v []*string) *GetRumAppsResponseBodyAppListServiceDomainConfigs {
	s.PropagatorTypes = v
	return s
}

func (s *GetRumAppsResponseBodyAppListServiceDomainConfigs) SetTracing(v string) *GetRumAppsResponseBodyAppListServiceDomainConfigs {
	s.Tracing = &v
	return s
}

type GetRumAppsResponseBodyAppListTags struct {
	// example:
	//
	// tag1
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// example:
	//
	// ok
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s GetRumAppsResponseBodyAppListTags) String() string {
	return tea.Prettify(s)
}

func (s GetRumAppsResponseBodyAppListTags) GoString() string {
	return s.String()
}

func (s *GetRumAppsResponseBodyAppListTags) SetKey(v string) *GetRumAppsResponseBodyAppListTags {
	s.Key = &v
	return s
}

func (s *GetRumAppsResponseBodyAppListTags) SetValue(v string) *GetRumAppsResponseBodyAppListTags {
	s.Value = &v
	return s
}

type GetRumAppsResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetRumAppsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetRumAppsResponse) String() string {
	return tea.Prettify(s)
}

func (s GetRumAppsResponse) GoString() string {
	return s.String()
}

func (s *GetRumAppsResponse) SetHeaders(v map[string]*string) *GetRumAppsResponse {
	s.Headers = v
	return s
}

func (s *GetRumAppsResponse) SetStatusCode(v int32) *GetRumAppsResponse {
	s.StatusCode = &v
	return s
}

func (s *GetRumAppsResponse) SetBody(v *GetRumAppsResponseBody) *GetRumAppsResponse {
	s.Body = v
	return s
}

type GetRumDataForPageRequest struct {
	// example:
	//
	// default
	AppGroup *string `json:"AppGroup,omitempty" xml:"AppGroup,omitempty"`
	// example:
	//
	// 1
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// example:
	//
	// 1713774233
	EndTime *int32 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// example:
	//
	// 20
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// iixxxjcnuk@582846f37******
	Pid *string `json:"Pid,omitempty" xml:"Pid,omitempty"`
	// example:
	//
	// 	- and app.id: xxxx@586810fbxxxx19f
	Query *string `json:"Query,omitempty" xml:"Query,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// example:
	//
	// 1713687833
	StartTime *int32 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s GetRumDataForPageRequest) String() string {
	return tea.Prettify(s)
}

func (s GetRumDataForPageRequest) GoString() string {
	return s.String()
}

func (s *GetRumDataForPageRequest) SetAppGroup(v string) *GetRumDataForPageRequest {
	s.AppGroup = &v
	return s
}

func (s *GetRumDataForPageRequest) SetCurrentPage(v int32) *GetRumDataForPageRequest {
	s.CurrentPage = &v
	return s
}

func (s *GetRumDataForPageRequest) SetEndTime(v int32) *GetRumDataForPageRequest {
	s.EndTime = &v
	return s
}

func (s *GetRumDataForPageRequest) SetPageSize(v int32) *GetRumDataForPageRequest {
	s.PageSize = &v
	return s
}

func (s *GetRumDataForPageRequest) SetPid(v string) *GetRumDataForPageRequest {
	s.Pid = &v
	return s
}

func (s *GetRumDataForPageRequest) SetQuery(v string) *GetRumDataForPageRequest {
	s.Query = &v
	return s
}

func (s *GetRumDataForPageRequest) SetRegionId(v string) *GetRumDataForPageRequest {
	s.RegionId = &v
	return s
}

func (s *GetRumDataForPageRequest) SetStartTime(v int32) *GetRumDataForPageRequest {
	s.StartTime = &v
	return s
}

type GetRumDataForPageResponseBody struct {
	// example:
	//
	// 200
	Code *string                            `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *GetRumDataForPageResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *string `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// StartTime is mandatory for this action.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	//
	// example:
	//
	// 78901766-3806-4E96-8E47-CFEF59E4****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetRumDataForPageResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetRumDataForPageResponseBody) GoString() string {
	return s.String()
}

func (s *GetRumDataForPageResponseBody) SetCode(v string) *GetRumDataForPageResponseBody {
	s.Code = &v
	return s
}

func (s *GetRumDataForPageResponseBody) SetData(v *GetRumDataForPageResponseBodyData) *GetRumDataForPageResponseBody {
	s.Data = v
	return s
}

func (s *GetRumDataForPageResponseBody) SetHttpStatusCode(v string) *GetRumDataForPageResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetRumDataForPageResponseBody) SetMessage(v string) *GetRumDataForPageResponseBody {
	s.Message = &v
	return s
}

func (s *GetRumDataForPageResponseBody) SetRequestId(v string) *GetRumDataForPageResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetRumDataForPageResponseBody) SetSuccess(v string) *GetRumDataForPageResponseBody {
	s.Success = &v
	return s
}

type GetRumDataForPageResponseBodyData struct {
	Authentication *string `json:"Authentication,omitempty" xml:"Authentication,omitempty"`
	// example:
	//
	// true
	Completion *string                  `json:"Completion,omitempty" xml:"Completion,omitempty"`
	Items      []map[string]interface{} `json:"Items,omitempty" xml:"Items,omitempty" type:"Repeated"`
	// example:
	//
	// 1
	Page *string `json:"Page,omitempty" xml:"Page,omitempty"`
	// example:
	//
	// 20
	PageSize   *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Preference *string `json:"Preference,omitempty" xml:"Preference,omitempty"`
	// example:
	//
	// 7
	Total *string `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s GetRumDataForPageResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetRumDataForPageResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetRumDataForPageResponseBodyData) SetAuthentication(v string) *GetRumDataForPageResponseBodyData {
	s.Authentication = &v
	return s
}

func (s *GetRumDataForPageResponseBodyData) SetCompletion(v string) *GetRumDataForPageResponseBodyData {
	s.Completion = &v
	return s
}

func (s *GetRumDataForPageResponseBodyData) SetItems(v []map[string]interface{}) *GetRumDataForPageResponseBodyData {
	s.Items = v
	return s
}

func (s *GetRumDataForPageResponseBodyData) SetPage(v string) *GetRumDataForPageResponseBodyData {
	s.Page = &v
	return s
}

func (s *GetRumDataForPageResponseBodyData) SetPageSize(v string) *GetRumDataForPageResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *GetRumDataForPageResponseBodyData) SetPreference(v string) *GetRumDataForPageResponseBodyData {
	s.Preference = &v
	return s
}

func (s *GetRumDataForPageResponseBodyData) SetTotal(v string) *GetRumDataForPageResponseBodyData {
	s.Total = &v
	return s
}

type GetRumDataForPageResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetRumDataForPageResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetRumDataForPageResponse) String() string {
	return tea.Prettify(s)
}

func (s GetRumDataForPageResponse) GoString() string {
	return s.String()
}

func (s *GetRumDataForPageResponse) SetHeaders(v map[string]*string) *GetRumDataForPageResponse {
	s.Headers = v
	return s
}

func (s *GetRumDataForPageResponse) SetStatusCode(v int32) *GetRumDataForPageResponse {
	s.StatusCode = &v
	return s
}

func (s *GetRumDataForPageResponse) SetBody(v *GetRumDataForPageResponseBody) *GetRumDataForPageResponse {
	s.Body = v
	return s
}

type GetRumExceptionStackRequest struct {
	// example:
	//
	// iOSDemo:arm64%3B1489F4D3-6DE2-300C-90E9-E1B869675351%3B0x0000000104064000\\nAlibabaCloudRUM:arm64%3BAB7B3A8E-6CEE-325D-BCBB-8DA50E61804F%3B0x0000000106660000\\nlibdispatch.dylib:arm
	ExceptionBinaryImages *string `json:"ExceptionBinaryImages,omitempty" xml:"ExceptionBinaryImages,omitempty"`
	// example:
	//
	// [
	//
	// {
	//
	//     "call_stack.info": "libsystem_kernel.dylib  0x00000001f1ce9178 0x00000001f1ce8000 + 4472\\r\\nlibsystem_kernel.dylib  0x00000001f1ce8f10 0x00000001f1ce8000 + 3856\\r\\nlibsystem_kernel.dylib  0x00000001f1ced718 0x00000001f1ce8000 + 22296\\r\\nAlibabaCloudRUM  0x0000000106711af4 0x0000000106660000 + 727796\\r\\nlibsystem_pthread.dylib  0x00000002146744d4 0x0000000214672000 + 9428",
	//
	//     "call_stack.thread.name": "#3 BRSCrash Exception Handler (Secondary)",
	//
	//     "call_stack.thread.id": "16643"
	//
	//   }
	//
	// ]
	ExceptionStack *string `json:"ExceptionStack,omitempty" xml:"ExceptionStack,omitempty"`
	// example:
	//
	// 16643
	ExceptionThreadId *string `json:"ExceptionThreadId,omitempty" xml:"ExceptionThreadId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// atxxxxzkcf@d8deedfa9bf****
	Pid *string `json:"Pid,omitempty" xml:"Pid,omitempty"`
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s GetRumExceptionStackRequest) String() string {
	return tea.Prettify(s)
}

func (s GetRumExceptionStackRequest) GoString() string {
	return s.String()
}

func (s *GetRumExceptionStackRequest) SetExceptionBinaryImages(v string) *GetRumExceptionStackRequest {
	s.ExceptionBinaryImages = &v
	return s
}

func (s *GetRumExceptionStackRequest) SetExceptionStack(v string) *GetRumExceptionStackRequest {
	s.ExceptionStack = &v
	return s
}

func (s *GetRumExceptionStackRequest) SetExceptionThreadId(v string) *GetRumExceptionStackRequest {
	s.ExceptionThreadId = &v
	return s
}

func (s *GetRumExceptionStackRequest) SetPid(v string) *GetRumExceptionStackRequest {
	s.Pid = &v
	return s
}

func (s *GetRumExceptionStackRequest) SetRegionId(v string) *GetRumExceptionStackRequest {
	s.RegionId = &v
	return s
}

type GetRumExceptionStackResponseBody struct {
	// example:
	//
	// 200
	Code *string                               `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *GetRumExceptionStackResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *string `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// Internal error. Please try again. Contact the DingTalk service account if the issue                              persists after multiple retries.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	//
	// example:
	//
	// B6A00968-82A8-4F14-9D1B-B53827DB****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetRumExceptionStackResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetRumExceptionStackResponseBody) GoString() string {
	return s.String()
}

func (s *GetRumExceptionStackResponseBody) SetCode(v string) *GetRumExceptionStackResponseBody {
	s.Code = &v
	return s
}

func (s *GetRumExceptionStackResponseBody) SetData(v *GetRumExceptionStackResponseBodyData) *GetRumExceptionStackResponseBody {
	s.Data = v
	return s
}

func (s *GetRumExceptionStackResponseBody) SetHttpStatusCode(v string) *GetRumExceptionStackResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetRumExceptionStackResponseBody) SetMessage(v string) *GetRumExceptionStackResponseBody {
	s.Message = &v
	return s
}

func (s *GetRumExceptionStackResponseBody) SetRequestId(v string) *GetRumExceptionStackResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetRumExceptionStackResponseBody) SetSuccess(v string) *GetRumExceptionStackResponseBody {
	s.Success = &v
	return s
}

type GetRumExceptionStackResponseBodyData struct {
	Lines []*string `json:"Lines,omitempty" xml:"Lines,omitempty" type:"Repeated"`
	// example:
	//
	// 16643
	ThreadId *string `json:"ThreadId,omitempty" xml:"ThreadId,omitempty"`
}

func (s GetRumExceptionStackResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetRumExceptionStackResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetRumExceptionStackResponseBodyData) SetLines(v []*string) *GetRumExceptionStackResponseBodyData {
	s.Lines = v
	return s
}

func (s *GetRumExceptionStackResponseBodyData) SetThreadId(v string) *GetRumExceptionStackResponseBodyData {
	s.ThreadId = &v
	return s
}

type GetRumExceptionStackResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetRumExceptionStackResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetRumExceptionStackResponse) String() string {
	return tea.Prettify(s)
}

func (s GetRumExceptionStackResponse) GoString() string {
	return s.String()
}

func (s *GetRumExceptionStackResponse) SetHeaders(v map[string]*string) *GetRumExceptionStackResponse {
	s.Headers = v
	return s
}

func (s *GetRumExceptionStackResponse) SetStatusCode(v int32) *GetRumExceptionStackResponse {
	s.StatusCode = &v
	return s
}

func (s *GetRumExceptionStackResponse) SetBody(v *GetRumExceptionStackResponseBody) *GetRumExceptionStackResponse {
	s.Body = v
	return s
}

type GetRumUploadFilesRequest struct {
	// example:
	//
	// source-map
	AppType *string `json:"AppType,omitempty" xml:"AppType,omitempty"`
	// example:
	//
	// aoxxxxxly@741623b4e91****
	Pid *string `json:"Pid,omitempty" xml:"Pid,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s GetRumUploadFilesRequest) String() string {
	return tea.Prettify(s)
}

func (s GetRumUploadFilesRequest) GoString() string {
	return s.String()
}

func (s *GetRumUploadFilesRequest) SetAppType(v string) *GetRumUploadFilesRequest {
	s.AppType = &v
	return s
}

func (s *GetRumUploadFilesRequest) SetPid(v string) *GetRumUploadFilesRequest {
	s.Pid = &v
	return s
}

func (s *GetRumUploadFilesRequest) SetRegionId(v string) *GetRumUploadFilesRequest {
	s.RegionId = &v
	return s
}

type GetRumUploadFilesResponseBody struct {
	// example:
	//
	// 200
	Code *int32                               `json:"Code,omitempty" xml:"Code,omitempty"`
	Data []*GetRumUploadFilesResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// example:
	//
	// 200
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	//
	// example:
	//
	// 2983BEF7-4A0D-47A2-94A2-8E9C5E63****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetRumUploadFilesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetRumUploadFilesResponseBody) GoString() string {
	return s.String()
}

func (s *GetRumUploadFilesResponseBody) SetCode(v int32) *GetRumUploadFilesResponseBody {
	s.Code = &v
	return s
}

func (s *GetRumUploadFilesResponseBody) SetData(v []*GetRumUploadFilesResponseBodyData) *GetRumUploadFilesResponseBody {
	s.Data = v
	return s
}

func (s *GetRumUploadFilesResponseBody) SetHttpStatusCode(v int32) *GetRumUploadFilesResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetRumUploadFilesResponseBody) SetMessage(v string) *GetRumUploadFilesResponseBody {
	s.Message = &v
	return s
}

func (s *GetRumUploadFilesResponseBody) SetRequestId(v string) *GetRumUploadFilesResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetRumUploadFilesResponseBody) SetSuccess(v bool) *GetRumUploadFilesResponseBody {
	s.Success = &v
	return s
}

type GetRumUploadFilesResponseBodyData struct {
	// example:
	//
	// test.js.map
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// example:
	//
	// 1682863151000
	LastModifiedTime interface{} `json:"LastModifiedTime,omitempty" xml:"LastModifiedTime,omitempty"`
	// example:
	//
	// 1000
	Size *string `json:"Size,omitempty" xml:"Size,omitempty"`
	// example:
	//
	// cxxxerfewrfwerfwerffvrt
	Uuid *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
	// example:
	//
	// 1.0.0
	VersionId *string `json:"VersionId,omitempty" xml:"VersionId,omitempty"`
}

func (s GetRumUploadFilesResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetRumUploadFilesResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetRumUploadFilesResponseBodyData) SetFileName(v string) *GetRumUploadFilesResponseBodyData {
	s.FileName = &v
	return s
}

func (s *GetRumUploadFilesResponseBodyData) SetLastModifiedTime(v interface{}) *GetRumUploadFilesResponseBodyData {
	s.LastModifiedTime = v
	return s
}

func (s *GetRumUploadFilesResponseBodyData) SetSize(v string) *GetRumUploadFilesResponseBodyData {
	s.Size = &v
	return s
}

func (s *GetRumUploadFilesResponseBodyData) SetUuid(v string) *GetRumUploadFilesResponseBodyData {
	s.Uuid = &v
	return s
}

func (s *GetRumUploadFilesResponseBodyData) SetVersionId(v string) *GetRumUploadFilesResponseBodyData {
	s.VersionId = &v
	return s
}

type GetRumUploadFilesResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetRumUploadFilesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetRumUploadFilesResponse) String() string {
	return tea.Prettify(s)
}

func (s GetRumUploadFilesResponse) GoString() string {
	return s.String()
}

func (s *GetRumUploadFilesResponse) SetHeaders(v map[string]*string) *GetRumUploadFilesResponse {
	s.Headers = v
	return s
}

func (s *GetRumUploadFilesResponse) SetStatusCode(v int32) *GetRumUploadFilesResponse {
	s.StatusCode = &v
	return s
}

func (s *GetRumUploadFilesResponse) SetBody(v *GetRumUploadFilesResponseBody) *GetRumUploadFilesResponse {
	s.Body = v
	return s
}

type GetSourceMapInfoRequest struct {
	// example:
	//
	// true
	AscendingSequence *bool `json:"AscendingSequence,omitempty" xml:"AscendingSequence,omitempty"`
	// example:
	//
	// 0.0.0
	Edition *string `json:"Edition,omitempty" xml:"Edition,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// atc889zkcf@d8deedfa9bf****/0.0.0/test.sourcemap.js
	ID *string `json:"ID,omitempty" xml:"ID,omitempty"`
	// example:
	//
	// test
	Keyword *string `json:"Keyword,omitempty" xml:"Keyword,omitempty"`
	// example:
	//
	// version
	OrderField *string `json:"OrderField,omitempty" xml:"OrderField,omitempty"`
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s GetSourceMapInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s GetSourceMapInfoRequest) GoString() string {
	return s.String()
}

func (s *GetSourceMapInfoRequest) SetAscendingSequence(v bool) *GetSourceMapInfoRequest {
	s.AscendingSequence = &v
	return s
}

func (s *GetSourceMapInfoRequest) SetEdition(v string) *GetSourceMapInfoRequest {
	s.Edition = &v
	return s
}

func (s *GetSourceMapInfoRequest) SetID(v string) *GetSourceMapInfoRequest {
	s.ID = &v
	return s
}

func (s *GetSourceMapInfoRequest) SetKeyword(v string) *GetSourceMapInfoRequest {
	s.Keyword = &v
	return s
}

func (s *GetSourceMapInfoRequest) SetOrderField(v string) *GetSourceMapInfoRequest {
	s.OrderField = &v
	return s
}

func (s *GetSourceMapInfoRequest) SetRegionId(v string) *GetSourceMapInfoRequest {
	s.RegionId = &v
	return s
}

type GetSourceMapInfoResponseBody struct {
	// example:
	//
	// C21AB7CF-B7AF-410F-BD61-82D1567F****
	RequestId     *string                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	SourceMapList []*GetSourceMapInfoResponseBodySourceMapList `json:"SourceMapList,omitempty" xml:"SourceMapList,omitempty" type:"Repeated"`
}

func (s GetSourceMapInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetSourceMapInfoResponseBody) GoString() string {
	return s.String()
}

func (s *GetSourceMapInfoResponseBody) SetRequestId(v string) *GetSourceMapInfoResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetSourceMapInfoResponseBody) SetSourceMapList(v []*GetSourceMapInfoResponseBodySourceMapList) *GetSourceMapInfoResponseBody {
	s.SourceMapList = v
	return s
}

type GetSourceMapInfoResponseBodySourceMapList struct {
	// example:
	//
	// atc889zkcf@d8deedfa9bf****/0.0.0/test.sourcemap.js
	Fid *string `json:"Fid,omitempty" xml:"Fid,omitempty"`
	// example:
	//
	// test.sourcemap.js
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// example:
	//
	// 201223
	Size *string `json:"Size,omitempty" xml:"Size,omitempty"`
	// example:
	//
	// 1590657842000
	UploadTime *string `json:"UploadTime,omitempty" xml:"UploadTime,omitempty"`
	// example:
	//
	// 0.0.0
	Version *string `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s GetSourceMapInfoResponseBodySourceMapList) String() string {
	return tea.Prettify(s)
}

func (s GetSourceMapInfoResponseBodySourceMapList) GoString() string {
	return s.String()
}

func (s *GetSourceMapInfoResponseBodySourceMapList) SetFid(v string) *GetSourceMapInfoResponseBodySourceMapList {
	s.Fid = &v
	return s
}

func (s *GetSourceMapInfoResponseBodySourceMapList) SetFileName(v string) *GetSourceMapInfoResponseBodySourceMapList {
	s.FileName = &v
	return s
}

func (s *GetSourceMapInfoResponseBodySourceMapList) SetSize(v string) *GetSourceMapInfoResponseBodySourceMapList {
	s.Size = &v
	return s
}

func (s *GetSourceMapInfoResponseBodySourceMapList) SetUploadTime(v string) *GetSourceMapInfoResponseBodySourceMapList {
	s.UploadTime = &v
	return s
}

func (s *GetSourceMapInfoResponseBodySourceMapList) SetVersion(v string) *GetSourceMapInfoResponseBodySourceMapList {
	s.Version = &v
	return s
}

type GetSourceMapInfoResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetSourceMapInfoResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetSourceMapInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s GetSourceMapInfoResponse) GoString() string {
	return s.String()
}

func (s *GetSourceMapInfoResponse) SetHeaders(v map[string]*string) *GetSourceMapInfoResponse {
	s.Headers = v
	return s
}

func (s *GetSourceMapInfoResponse) SetStatusCode(v int32) *GetSourceMapInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *GetSourceMapInfoResponse) SetBody(v *GetSourceMapInfoResponseBody) *GetSourceMapInfoResponse {
	s.Body = v
	return s
}

type GetStackRequest struct {
	// The end time of the call method.
	//
	// example:
	//
	// 1653641800
	EndTime *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The process identifier (PID) of the application. For more information about how to obtain the PID, see [Obtain the PID of an application](https://www.alibabacloud.com/help/zh/doc-detail/186100.htm?spm=a2cdw.13409063.0.0.7a72281f0bkTfx#title-imy-7gj-qhr).
	//
	// example:
	//
	// eb4zdose6v@36bab313a******
	Pid *string `json:"Pid,omitempty" xml:"Pid,omitempty"`
	// The region ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the remote procedure call (RPC) mode. You can obtain the ID by calling the **GetTrace*	- operation.
	//
	// This parameter is required.
	//
	// example:
	//
	// 0.1
	RpcID *string `json:"RpcID,omitempty" xml:"RpcID,omitempty"`
	// The start time of the call method.
	//
	// example:
	//
	// 1653555396
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The trace ID. You can log on to the Application Real-Time Monitoring Service (ARMS) console and obtain the trace ID on the **Trace Query*	- page.
	//
	// This parameter is required.
	//
	// example:
	//
	// 0a5800611641470044457853******
	TraceID *string `json:"TraceID,omitempty" xml:"TraceID,omitempty"`
}

func (s GetStackRequest) String() string {
	return tea.Prettify(s)
}

func (s GetStackRequest) GoString() string {
	return s.String()
}

func (s *GetStackRequest) SetEndTime(v int64) *GetStackRequest {
	s.EndTime = &v
	return s
}

func (s *GetStackRequest) SetPid(v string) *GetStackRequest {
	s.Pid = &v
	return s
}

func (s *GetStackRequest) SetRegionId(v string) *GetStackRequest {
	s.RegionId = &v
	return s
}

func (s *GetStackRequest) SetRpcID(v string) *GetStackRequest {
	s.RpcID = &v
	return s
}

func (s *GetStackRequest) SetStartTime(v int64) *GetStackRequest {
	s.StartTime = &v
	return s
}

func (s *GetStackRequest) SetTraceID(v string) *GetStackRequest {
	s.TraceID = &v
	return s
}

type GetStackResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// B34C3A43-A901-5F94-9DAD-758CE4******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The information of the method stack.
	StackInfo []*GetStackResponseBodyStackInfo `json:"StackInfo,omitempty" xml:"StackInfo,omitempty" type:"Repeated"`
}

func (s GetStackResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetStackResponseBody) GoString() string {
	return s.String()
}

func (s *GetStackResponseBody) SetRequestId(v string) *GetStackResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetStackResponseBody) SetStackInfo(v []*GetStackResponseBodyStackInfo) *GetStackResponseBody {
	s.StackInfo = v
	return s
}

type GetStackResponseBodyStackInfo struct {
	// The name of the operation.
	//
	// example:
	//
	// Tomcat Servlet Process
	Api *string `json:"Api,omitempty" xml:"Api,omitempty"`
	// The duration. Unit: milliseconds.
	//
	// example:
	//
	// 32
	Duration *int64 `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// The error message.
	//
	// example:
	//
	// java.lang.NullPointerException
	Exception *string `json:"Exception,omitempty" xml:"Exception,omitempty"`
	// The information about the array object.
	ExtInfo *GetStackResponseBodyStackInfoExtInfo `json:"ExtInfo,omitempty" xml:"ExtInfo,omitempty" type:"Struct"`
	// The number of rows in the method stack information.
	//
	// example:
	//
	// 34
	Line *string `json:"Line,omitempty" xml:"Line,omitempty"`
	// The ID of the RPC mode.
	//
	// example:
	//
	// 0.1
	RpcId *string `json:"RpcId,omitempty" xml:"RpcId,omitempty"`
	// The name of the service.
	//
	// example:
	//
	// /com/test
	ServiceName *string `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
	// The start time of the call method.
	//
	// example:
	//
	// 1653555396
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s GetStackResponseBodyStackInfo) String() string {
	return tea.Prettify(s)
}

func (s GetStackResponseBodyStackInfo) GoString() string {
	return s.String()
}

func (s *GetStackResponseBodyStackInfo) SetApi(v string) *GetStackResponseBodyStackInfo {
	s.Api = &v
	return s
}

func (s *GetStackResponseBodyStackInfo) SetDuration(v int64) *GetStackResponseBodyStackInfo {
	s.Duration = &v
	return s
}

func (s *GetStackResponseBodyStackInfo) SetException(v string) *GetStackResponseBodyStackInfo {
	s.Exception = &v
	return s
}

func (s *GetStackResponseBodyStackInfo) SetExtInfo(v *GetStackResponseBodyStackInfoExtInfo) *GetStackResponseBodyStackInfo {
	s.ExtInfo = v
	return s
}

func (s *GetStackResponseBodyStackInfo) SetLine(v string) *GetStackResponseBodyStackInfo {
	s.Line = &v
	return s
}

func (s *GetStackResponseBodyStackInfo) SetRpcId(v string) *GetStackResponseBodyStackInfo {
	s.RpcId = &v
	return s
}

func (s *GetStackResponseBodyStackInfo) SetServiceName(v string) *GetStackResponseBodyStackInfo {
	s.ServiceName = &v
	return s
}

func (s *GetStackResponseBodyStackInfo) SetStartTime(v int64) *GetStackResponseBodyStackInfo {
	s.StartTime = &v
	return s
}

type GetStackResponseBodyStackInfoExtInfo struct {
	// The content of the custom parameter.
	//
	// example:
	//
	// input=254275&amp;
	Info *string `json:"Info,omitempty" xml:"Info,omitempty"`
	// The type of the custom parameter.
	//
	// example:
	//
	// 41
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetStackResponseBodyStackInfoExtInfo) String() string {
	return tea.Prettify(s)
}

func (s GetStackResponseBodyStackInfoExtInfo) GoString() string {
	return s.String()
}

func (s *GetStackResponseBodyStackInfoExtInfo) SetInfo(v string) *GetStackResponseBodyStackInfoExtInfo {
	s.Info = &v
	return s
}

func (s *GetStackResponseBodyStackInfoExtInfo) SetType(v string) *GetStackResponseBodyStackInfoExtInfo {
	s.Type = &v
	return s
}

type GetStackResponse struct {
	Headers    map[string]*string    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetStackResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetStackResponse) String() string {
	return tea.Prettify(s)
}

func (s GetStackResponse) GoString() string {
	return s.String()
}

func (s *GetStackResponse) SetHeaders(v map[string]*string) *GetStackResponse {
	s.Headers = v
	return s
}

func (s *GetStackResponse) SetStatusCode(v int32) *GetStackResponse {
	s.StatusCode = &v
	return s
}

func (s *GetStackResponse) SetBody(v *GetStackResponseBody) *GetStackResponse {
	s.Body = v
	return s
}

type GetSyntheticMonitorsRequest struct {
	// The query conditions.
	//
	// This parameter is required.
	Filter *GetSyntheticMonitorsRequestFilter `json:"Filter,omitempty" xml:"Filter,omitempty" type:"Struct"`
	// The region ID.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s GetSyntheticMonitorsRequest) String() string {
	return tea.Prettify(s)
}

func (s GetSyntheticMonitorsRequest) GoString() string {
	return s.String()
}

func (s *GetSyntheticMonitorsRequest) SetFilter(v *GetSyntheticMonitorsRequestFilter) *GetSyntheticMonitorsRequest {
	s.Filter = v
	return s
}

func (s *GetSyntheticMonitorsRequest) SetRegionId(v string) *GetSyntheticMonitorsRequest {
	s.RegionId = &v
	return s
}

type GetSyntheticMonitorsRequestFilter struct {
	// The type of the monitoring point. Valid values: 1: PC. 2: mobile device.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	MonitorCategory *int32 `json:"MonitorCategory,omitempty" xml:"MonitorCategory,omitempty"`
	// The network type. Valid values: 1: private network. 2: Internet.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	Network *int32 `json:"Network,omitempty" xml:"Network,omitempty"`
	// The type of the monitoring task. Valid values:
	//
	// 1: ICMP. 2: TCP. 3: DNS. 4: HTTP. 5: website speed. 6: file download.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	TaskType *int32 `json:"TaskType,omitempty" xml:"TaskType,omitempty"`
}

func (s GetSyntheticMonitorsRequestFilter) String() string {
	return tea.Prettify(s)
}

func (s GetSyntheticMonitorsRequestFilter) GoString() string {
	return s.String()
}

func (s *GetSyntheticMonitorsRequestFilter) SetMonitorCategory(v int32) *GetSyntheticMonitorsRequestFilter {
	s.MonitorCategory = &v
	return s
}

func (s *GetSyntheticMonitorsRequestFilter) SetNetwork(v int32) *GetSyntheticMonitorsRequestFilter {
	s.Network = &v
	return s
}

func (s *GetSyntheticMonitorsRequestFilter) SetTaskType(v int32) *GetSyntheticMonitorsRequestFilter {
	s.TaskType = &v
	return s
}

type GetSyntheticMonitorsShrinkRequest struct {
	// The query conditions.
	//
	// This parameter is required.
	FilterShrink *string `json:"Filter,omitempty" xml:"Filter,omitempty"`
	// The region ID.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s GetSyntheticMonitorsShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s GetSyntheticMonitorsShrinkRequest) GoString() string {
	return s.String()
}

func (s *GetSyntheticMonitorsShrinkRequest) SetFilterShrink(v string) *GetSyntheticMonitorsShrinkRequest {
	s.FilterShrink = &v
	return s
}

func (s *GetSyntheticMonitorsShrinkRequest) SetRegionId(v string) *GetSyntheticMonitorsShrinkRequest {
	s.RegionId = &v
	return s
}

type GetSyntheticMonitorsResponseBody struct {
	// The HTTP status code. The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *int64 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The list of monitoring points.
	Data []*GetSyntheticMonitorsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// The returned message.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 2FD473FF-5398-5A85-9BF6-7AB45561522F
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetSyntheticMonitorsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetSyntheticMonitorsResponseBody) GoString() string {
	return s.String()
}

func (s *GetSyntheticMonitorsResponseBody) SetCode(v int64) *GetSyntheticMonitorsResponseBody {
	s.Code = &v
	return s
}

func (s *GetSyntheticMonitorsResponseBody) SetData(v []*GetSyntheticMonitorsResponseBodyData) *GetSyntheticMonitorsResponseBody {
	s.Data = v
	return s
}

func (s *GetSyntheticMonitorsResponseBody) SetMessage(v string) *GetSyntheticMonitorsResponseBody {
	s.Message = &v
	return s
}

func (s *GetSyntheticMonitorsResponseBody) SetRequestId(v string) *GetSyntheticMonitorsResponseBody {
	s.RequestId = &v
	return s
}

type GetSyntheticMonitorsResponseBodyData struct {
	// Indicates whether the monitoring point is available. Valid values: true and false.
	//
	// example:
	//
	// true
	Available *string `json:"Available,omitempty" xml:"Available,omitempty"`
	// Indicates whether the monitoring point is selected. Valid values: true and false.
	//
	// example:
	//
	// true
	CanBeSelected *bool `json:"CanBeSelected,omitempty" xml:"CanBeSelected,omitempty"`
	// The city.
	//
	// example:
	//
	// Beijing
	City *string `json:"City,omitempty" xml:"City,omitempty"`
	// The city code.
	//
	// example:
	//
	// 1100101
	CityCode *string `json:"CityCode,omitempty" xml:"CityCode,omitempty"`
	// The client type of the monitoring point. Valid values: 1: data center. 2: Internet. 3: mobile device. 4: ECS instance.
	//
	// example:
	//
	// 1
	ClientType *int32 `json:"ClientType,omitempty" xml:"ClientType,omitempty"`
	// The country.
	//
	// example:
	//
	// China
	Country *string `json:"Country,omitempty" xml:"Country,omitempty"`
	// Indicates whether IPv6 is supported. Valid values: 0: IPv6 is not supported. 1: IPv6 is supported.
	//
	// example:
	//
	// 0
	Ipv6 *int32 `json:"Ipv6,omitempty" xml:"Ipv6,omitempty"`
	// The carrier.
	//
	// example:
	//
	// Alibaba Cloud
	Operator *string `json:"Operator,omitempty" xml:"Operator,omitempty"`
	// The carrier code.
	//
	// example:
	//
	// 1
	OperatorCode *string `json:"OperatorCode,omitempty" xml:"OperatorCode,omitempty"`
	// The region.
	//
	// example:
	//
	// Beijing
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
}

func (s GetSyntheticMonitorsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetSyntheticMonitorsResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetSyntheticMonitorsResponseBodyData) SetAvailable(v string) *GetSyntheticMonitorsResponseBodyData {
	s.Available = &v
	return s
}

func (s *GetSyntheticMonitorsResponseBodyData) SetCanBeSelected(v bool) *GetSyntheticMonitorsResponseBodyData {
	s.CanBeSelected = &v
	return s
}

func (s *GetSyntheticMonitorsResponseBodyData) SetCity(v string) *GetSyntheticMonitorsResponseBodyData {
	s.City = &v
	return s
}

func (s *GetSyntheticMonitorsResponseBodyData) SetCityCode(v string) *GetSyntheticMonitorsResponseBodyData {
	s.CityCode = &v
	return s
}

func (s *GetSyntheticMonitorsResponseBodyData) SetClientType(v int32) *GetSyntheticMonitorsResponseBodyData {
	s.ClientType = &v
	return s
}

func (s *GetSyntheticMonitorsResponseBodyData) SetCountry(v string) *GetSyntheticMonitorsResponseBodyData {
	s.Country = &v
	return s
}

func (s *GetSyntheticMonitorsResponseBodyData) SetIpv6(v int32) *GetSyntheticMonitorsResponseBodyData {
	s.Ipv6 = &v
	return s
}

func (s *GetSyntheticMonitorsResponseBodyData) SetOperator(v string) *GetSyntheticMonitorsResponseBodyData {
	s.Operator = &v
	return s
}

func (s *GetSyntheticMonitorsResponseBodyData) SetOperatorCode(v string) *GetSyntheticMonitorsResponseBodyData {
	s.OperatorCode = &v
	return s
}

func (s *GetSyntheticMonitorsResponseBodyData) SetRegion(v string) *GetSyntheticMonitorsResponseBodyData {
	s.Region = &v
	return s
}

type GetSyntheticMonitorsResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetSyntheticMonitorsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetSyntheticMonitorsResponse) String() string {
	return tea.Prettify(s)
}

func (s GetSyntheticMonitorsResponse) GoString() string {
	return s.String()
}

func (s *GetSyntheticMonitorsResponse) SetHeaders(v map[string]*string) *GetSyntheticMonitorsResponse {
	s.Headers = v
	return s
}

func (s *GetSyntheticMonitorsResponse) SetStatusCode(v int32) *GetSyntheticMonitorsResponse {
	s.StatusCode = &v
	return s
}

func (s *GetSyntheticMonitorsResponse) SetBody(v *GetSyntheticMonitorsResponseBody) *GetSyntheticMonitorsResponse {
	s.Body = v
	return s
}

type GetSyntheticTaskDetailRequest struct {
	// 地域ID。默认为cn-hangzhou。
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// 云拨测任务ID。
	//
	// This parameter is required.
	//
	// example:
	//
	// 123
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s GetSyntheticTaskDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s GetSyntheticTaskDetailRequest) GoString() string {
	return s.String()
}

func (s *GetSyntheticTaskDetailRequest) SetRegionId(v string) *GetSyntheticTaskDetailRequest {
	s.RegionId = &v
	return s
}

func (s *GetSyntheticTaskDetailRequest) SetTaskId(v string) *GetSyntheticTaskDetailRequest {
	s.TaskId = &v
	return s
}

type GetSyntheticTaskDetailResponseBody struct {
	// 请求ID。
	//
	// example:
	//
	// 4D6C358A-A58B-4F4B-94CE-F5AAF023****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// 任务详情。
	TaskDetail *GetSyntheticTaskDetailResponseBodyTaskDetail `json:"TaskDetail,omitempty" xml:"TaskDetail,omitempty" type:"Struct"`
}

func (s GetSyntheticTaskDetailResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetSyntheticTaskDetailResponseBody) GoString() string {
	return s.String()
}

func (s *GetSyntheticTaskDetailResponseBody) SetRequestId(v string) *GetSyntheticTaskDetailResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetSyntheticTaskDetailResponseBody) SetTaskDetail(v *GetSyntheticTaskDetailResponseBodyTaskDetail) *GetSyntheticTaskDetailResponseBody {
	s.TaskDetail = v
	return s
}

type GetSyntheticTaskDetailResponseBodyTaskDetail struct {
	CommonParam *GetSyntheticTaskDetailResponseBodyTaskDetailCommonParam `json:"CommonParam,omitempty" xml:"CommonParam,omitempty" type:"Struct"`
	// 文件下载任务。
	Download *GetSyntheticTaskDetailResponseBodyTaskDetailDownload `json:"Download,omitempty" xml:"Download,omitempty" type:"Struct"`
	// 自定义扩展频率。
	ExtendInterval *GetSyntheticTaskDetailResponseBodyTaskDetailExtendInterval `json:"ExtendInterval,omitempty" xml:"ExtendInterval,omitempty" type:"Struct"`
	// 拨测频率，单位为分钟。可选频率如下：
	//
	// - 1
	//
	// - 5
	//
	// - 10
	//
	// - 15
	//
	// - 20
	//
	// - 30
	//
	// - 60
	//
	// - 120
	//
	// - 180
	//
	// - 240
	//
	// - 360
	//
	// - 480
	//
	// - 720
	//
	// - 1440
	//
	// example:
	//
	// 20
	IntervalTime *int64 `json:"IntervalTime,omitempty" xml:"IntervalTime,omitempty"`
	// example:
	//
	// 0
	IntervalType *int64 `json:"IntervalType,omitempty" xml:"IntervalType,omitempty"`
	// example:
	//
	// 0
	IpType      *int64                                                     `json:"IpType,omitempty" xml:"IpType,omitempty"`
	MonitorList []*GetSyntheticTaskDetailResponseBodyTaskDetailMonitorList `json:"MonitorList,omitempty" xml:"MonitorList,omitempty" type:"Repeated"`
	// example:
	//
	// 12
	MonitorListString *string                                               `json:"MonitorListString,omitempty" xml:"MonitorListString,omitempty"`
	Nav               *GetSyntheticTaskDetailResponseBodyTaskDetailNav      `json:"Nav,omitempty" xml:"Nav,omitempty" type:"Struct"`
	Net               *GetSyntheticTaskDetailResponseBodyTaskDetailNet      `json:"Net,omitempty" xml:"Net,omitempty" type:"Struct"`
	Protocol          *GetSyntheticTaskDetailResponseBodyTaskDetailProtocol `json:"Protocol,omitempty" xml:"Protocol,omitempty" type:"Struct"`
	// 云拨测任务ID。
	//
	// example:
	//
	// 19584
	TaskId *int64 `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// 任务名称。
	//
	// example:
	//
	// net-test
	TaskName *string `json:"TaskName,omitempty" xml:"TaskName,omitempty"`
	// example:
	//
	// 0
	TaskType *int64 `json:"TaskType,omitempty" xml:"TaskType,omitempty"`
	// 拨测地址。
	//
	// example:
	//
	// www.example.com
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s GetSyntheticTaskDetailResponseBodyTaskDetail) String() string {
	return tea.Prettify(s)
}

func (s GetSyntheticTaskDetailResponseBodyTaskDetail) GoString() string {
	return s.String()
}

func (s *GetSyntheticTaskDetailResponseBodyTaskDetail) SetCommonParam(v *GetSyntheticTaskDetailResponseBodyTaskDetailCommonParam) *GetSyntheticTaskDetailResponseBodyTaskDetail {
	s.CommonParam = v
	return s
}

func (s *GetSyntheticTaskDetailResponseBodyTaskDetail) SetDownload(v *GetSyntheticTaskDetailResponseBodyTaskDetailDownload) *GetSyntheticTaskDetailResponseBodyTaskDetail {
	s.Download = v
	return s
}

func (s *GetSyntheticTaskDetailResponseBodyTaskDetail) SetExtendInterval(v *GetSyntheticTaskDetailResponseBodyTaskDetailExtendInterval) *GetSyntheticTaskDetailResponseBodyTaskDetail {
	s.ExtendInterval = v
	return s
}

func (s *GetSyntheticTaskDetailResponseBodyTaskDetail) SetIntervalTime(v int64) *GetSyntheticTaskDetailResponseBodyTaskDetail {
	s.IntervalTime = &v
	return s
}

func (s *GetSyntheticTaskDetailResponseBodyTaskDetail) SetIntervalType(v int64) *GetSyntheticTaskDetailResponseBodyTaskDetail {
	s.IntervalType = &v
	return s
}

func (s *GetSyntheticTaskDetailResponseBodyTaskDetail) SetIpType(v int64) *GetSyntheticTaskDetailResponseBodyTaskDetail {
	s.IpType = &v
	return s
}

func (s *GetSyntheticTaskDetailResponseBodyTaskDetail) SetMonitorList(v []*GetSyntheticTaskDetailResponseBodyTaskDetailMonitorList) *GetSyntheticTaskDetailResponseBodyTaskDetail {
	s.MonitorList = v
	return s
}

func (s *GetSyntheticTaskDetailResponseBodyTaskDetail) SetMonitorListString(v string) *GetSyntheticTaskDetailResponseBodyTaskDetail {
	s.MonitorListString = &v
	return s
}

func (s *GetSyntheticTaskDetailResponseBodyTaskDetail) SetNav(v *GetSyntheticTaskDetailResponseBodyTaskDetailNav) *GetSyntheticTaskDetailResponseBodyTaskDetail {
	s.Nav = v
	return s
}

func (s *GetSyntheticTaskDetailResponseBodyTaskDetail) SetNet(v *GetSyntheticTaskDetailResponseBodyTaskDetailNet) *GetSyntheticTaskDetailResponseBodyTaskDetail {
	s.Net = v
	return s
}

func (s *GetSyntheticTaskDetailResponseBodyTaskDetail) SetProtocol(v *GetSyntheticTaskDetailResponseBodyTaskDetailProtocol) *GetSyntheticTaskDetailResponseBodyTaskDetail {
	s.Protocol = v
	return s
}

func (s *GetSyntheticTaskDetailResponseBodyTaskDetail) SetTaskId(v int64) *GetSyntheticTaskDetailResponseBodyTaskDetail {
	s.TaskId = &v
	return s
}

func (s *GetSyntheticTaskDetailResponseBodyTaskDetail) SetTaskName(v string) *GetSyntheticTaskDetailResponseBodyTaskDetail {
	s.TaskName = &v
	return s
}

func (s *GetSyntheticTaskDetailResponseBodyTaskDetail) SetTaskType(v int64) *GetSyntheticTaskDetailResponseBodyTaskDetail {
	s.TaskType = &v
	return s
}

func (s *GetSyntheticTaskDetailResponseBodyTaskDetail) SetUrl(v string) *GetSyntheticTaskDetailResponseBodyTaskDetail {
	s.Url = &v
	return s
}

type GetSyntheticTaskDetailResponseBodyTaskDetailCommonParam struct {
	// example:
	//
	// 1
	AlarmFlag *int64                                                              `json:"AlarmFlag,omitempty" xml:"AlarmFlag,omitempty"`
	AlertList []*GetSyntheticTaskDetailResponseBodyTaskDetailCommonParamAlertList `json:"AlertList,omitempty" xml:"AlertList,omitempty" type:"Repeated"`
	// example:
	//
	// 1
	AlertNotifierId *string `json:"AlertNotifierId,omitempty" xml:"AlertNotifierId,omitempty"`
	// example:
	//
	// 1
	AlertPolicyId *string `json:"AlertPolicyId,omitempty" xml:"AlertPolicyId,omitempty"`
	// example:
	//
	// 1
	MonitorSamples *string `json:"MonitorSamples,omitempty" xml:"MonitorSamples,omitempty"`
	// example:
	//
	// 1664427128
	StartExecutionTime *string `json:"StartExecutionTime,omitempty" xml:"StartExecutionTime,omitempty"`
}

func (s GetSyntheticTaskDetailResponseBodyTaskDetailCommonParam) String() string {
	return tea.Prettify(s)
}

func (s GetSyntheticTaskDetailResponseBodyTaskDetailCommonParam) GoString() string {
	return s.String()
}

func (s *GetSyntheticTaskDetailResponseBodyTaskDetailCommonParam) SetAlarmFlag(v int64) *GetSyntheticTaskDetailResponseBodyTaskDetailCommonParam {
	s.AlarmFlag = &v
	return s
}

func (s *GetSyntheticTaskDetailResponseBodyTaskDetailCommonParam) SetAlertList(v []*GetSyntheticTaskDetailResponseBodyTaskDetailCommonParamAlertList) *GetSyntheticTaskDetailResponseBodyTaskDetailCommonParam {
	s.AlertList = v
	return s
}

func (s *GetSyntheticTaskDetailResponseBodyTaskDetailCommonParam) SetAlertNotifierId(v string) *GetSyntheticTaskDetailResponseBodyTaskDetailCommonParam {
	s.AlertNotifierId = &v
	return s
}

func (s *GetSyntheticTaskDetailResponseBodyTaskDetailCommonParam) SetAlertPolicyId(v string) *GetSyntheticTaskDetailResponseBodyTaskDetailCommonParam {
	s.AlertPolicyId = &v
	return s
}

func (s *GetSyntheticTaskDetailResponseBodyTaskDetailCommonParam) SetMonitorSamples(v string) *GetSyntheticTaskDetailResponseBodyTaskDetailCommonParam {
	s.MonitorSamples = &v
	return s
}

func (s *GetSyntheticTaskDetailResponseBodyTaskDetailCommonParam) SetStartExecutionTime(v string) *GetSyntheticTaskDetailResponseBodyTaskDetailCommonParam {
	s.StartExecutionTime = &v
	return s
}

type GetSyntheticTaskDetailResponseBodyTaskDetailCommonParamAlertList struct {
	// example:
	//
	// 1
	GeneralAlert *string `json:"GeneralAlert,omitempty" xml:"GeneralAlert,omitempty"`
	// example:
	//
	// 0
	IsCritical *string `json:"IsCritical,omitempty" xml:"IsCritical,omitempty"`
	// example:
	//
	// alert-test
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// 1
	SeriousAlert *string `json:"SeriousAlert,omitempty" xml:"SeriousAlert,omitempty"`
	// example:
	//
	// 1
	Symbols *string `json:"Symbols,omitempty" xml:"Symbols,omitempty"`
}

func (s GetSyntheticTaskDetailResponseBodyTaskDetailCommonParamAlertList) String() string {
	return tea.Prettify(s)
}

func (s GetSyntheticTaskDetailResponseBodyTaskDetailCommonParamAlertList) GoString() string {
	return s.String()
}

func (s *GetSyntheticTaskDetailResponseBodyTaskDetailCommonParamAlertList) SetGeneralAlert(v string) *GetSyntheticTaskDetailResponseBodyTaskDetailCommonParamAlertList {
	s.GeneralAlert = &v
	return s
}

func (s *GetSyntheticTaskDetailResponseBodyTaskDetailCommonParamAlertList) SetIsCritical(v string) *GetSyntheticTaskDetailResponseBodyTaskDetailCommonParamAlertList {
	s.IsCritical = &v
	return s
}

func (s *GetSyntheticTaskDetailResponseBodyTaskDetailCommonParamAlertList) SetName(v string) *GetSyntheticTaskDetailResponseBodyTaskDetailCommonParamAlertList {
	s.Name = &v
	return s
}

func (s *GetSyntheticTaskDetailResponseBodyTaskDetailCommonParamAlertList) SetSeriousAlert(v string) *GetSyntheticTaskDetailResponseBodyTaskDetailCommonParamAlertList {
	s.SeriousAlert = &v
	return s
}

func (s *GetSyntheticTaskDetailResponseBodyTaskDetailCommonParamAlertList) SetSymbols(v string) *GetSyntheticTaskDetailResponseBodyTaskDetailCommonParamAlertList {
	s.Symbols = &v
	return s
}

type GetSyntheticTaskDetailResponseBodyTaskDetailDownload struct {
	// example:
	//
	// 200
	ConnectionTimeout *int64 `json:"ConnectionTimeout,omitempty" xml:"ConnectionTimeout,omitempty"`
	// example:
	//
	// char
	DownloadCustomHeaderContent *string `json:"DownloadCustomHeaderContent,omitempty" xml:"DownloadCustomHeaderContent,omitempty"`
	// example:
	//
	// 0
	DownloadCustomHost *int64 `json:"DownloadCustomHost,omitempty" xml:"DownloadCustomHost,omitempty"`
	// example:
	//
	// 168.23.45.1
	DownloadCustomHostIp *string `json:"DownloadCustomHostIp,omitempty" xml:"DownloadCustomHostIp,omitempty"`
	// example:
	//
	// 1
	DownloadKernel *int64 `json:"DownloadKernel,omitempty" xml:"DownloadKernel,omitempty"`
	// example:
	//
	// 1
	DownloadRedirect *int64 `json:"DownloadRedirect,omitempty" xml:"DownloadRedirect,omitempty"`
	// example:
	//
	// 20
	DownloadTransmissionSize *int64 `json:"DownloadTransmissionSize,omitempty" xml:"DownloadTransmissionSize,omitempty"`
	// example:
	//
	// 12
	MonitorTimeout *int64 `json:"MonitorTimeout,omitempty" xml:"MonitorTimeout,omitempty"`
	// example:
	//
	// 1
	QuickProtocol *string `json:"QuickProtocol,omitempty" xml:"QuickProtocol,omitempty"`
	// example:
	//
	// test
	ValidateKeywords *string `json:"ValidateKeywords,omitempty" xml:"ValidateKeywords,omitempty"`
	// example:
	//
	// 0
	VerifyWay *int64 `json:"VerifyWay,omitempty" xml:"VerifyWay,omitempty"`
	// example:
	//
	// [{\\"src\\":\\"211.154.166.174\\"}]
	WhiteList *string `json:"WhiteList,omitempty" xml:"WhiteList,omitempty"`
}

func (s GetSyntheticTaskDetailResponseBodyTaskDetailDownload) String() string {
	return tea.Prettify(s)
}

func (s GetSyntheticTaskDetailResponseBodyTaskDetailDownload) GoString() string {
	return s.String()
}

func (s *GetSyntheticTaskDetailResponseBodyTaskDetailDownload) SetConnectionTimeout(v int64) *GetSyntheticTaskDetailResponseBodyTaskDetailDownload {
	s.ConnectionTimeout = &v
	return s
}

func (s *GetSyntheticTaskDetailResponseBodyTaskDetailDownload) SetDownloadCustomHeaderContent(v string) *GetSyntheticTaskDetailResponseBodyTaskDetailDownload {
	s.DownloadCustomHeaderContent = &v
	return s
}

func (s *GetSyntheticTaskDetailResponseBodyTaskDetailDownload) SetDownloadCustomHost(v int64) *GetSyntheticTaskDetailResponseBodyTaskDetailDownload {
	s.DownloadCustomHost = &v
	return s
}

func (s *GetSyntheticTaskDetailResponseBodyTaskDetailDownload) SetDownloadCustomHostIp(v string) *GetSyntheticTaskDetailResponseBodyTaskDetailDownload {
	s.DownloadCustomHostIp = &v
	return s
}

func (s *GetSyntheticTaskDetailResponseBodyTaskDetailDownload) SetDownloadKernel(v int64) *GetSyntheticTaskDetailResponseBodyTaskDetailDownload {
	s.DownloadKernel = &v
	return s
}

func (s *GetSyntheticTaskDetailResponseBodyTaskDetailDownload) SetDownloadRedirect(v int64) *GetSyntheticTaskDetailResponseBodyTaskDetailDownload {
	s.DownloadRedirect = &v
	return s
}

func (s *GetSyntheticTaskDetailResponseBodyTaskDetailDownload) SetDownloadTransmissionSize(v int64) *GetSyntheticTaskDetailResponseBodyTaskDetailDownload {
	s.DownloadTransmissionSize = &v
	return s
}

func (s *GetSyntheticTaskDetailResponseBodyTaskDetailDownload) SetMonitorTimeout(v int64) *GetSyntheticTaskDetailResponseBodyTaskDetailDownload {
	s.MonitorTimeout = &v
	return s
}

func (s *GetSyntheticTaskDetailResponseBodyTaskDetailDownload) SetQuickProtocol(v string) *GetSyntheticTaskDetailResponseBodyTaskDetailDownload {
	s.QuickProtocol = &v
	return s
}

func (s *GetSyntheticTaskDetailResponseBodyTaskDetailDownload) SetValidateKeywords(v string) *GetSyntheticTaskDetailResponseBodyTaskDetailDownload {
	s.ValidateKeywords = &v
	return s
}

func (s *GetSyntheticTaskDetailResponseBodyTaskDetailDownload) SetVerifyWay(v int64) *GetSyntheticTaskDetailResponseBodyTaskDetailDownload {
	s.VerifyWay = &v
	return s
}

func (s *GetSyntheticTaskDetailResponseBodyTaskDetailDownload) SetWhiteList(v string) *GetSyntheticTaskDetailResponseBodyTaskDetailDownload {
	s.WhiteList = &v
	return s
}

type GetSyntheticTaskDetailResponseBodyTaskDetailExtendInterval struct {
	// 拨测执行周期。
	//
	// - -1：每天
	//
	// - 0：周日
	//
	// - 1：周一
	//
	// - 2：周二
	//
	// - 3：周三
	//
	// - 4：周四
	//
	// - 5：周五
	//
	// - 6：周六
	Days []*int64 `json:"Days,omitempty" xml:"Days,omitempty" type:"Repeated"`
	// 当天结束分钟数。
	//
	// example:
	//
	// 20
	EndMinute *int64 `json:"EndMinute,omitempty" xml:"EndMinute,omitempty"`
	// example:
	//
	// 2022-05-03 11:40
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// 当天结束小时数。
	//
	// example:
	//
	// 12
	Endhour *int64 `json:"Endhour,omitempty" xml:"Endhour,omitempty"`
	// 当天开始拨测时间的小时数。
	//
	// example:
	//
	// 9
	StartHour *int64 `json:"StartHour,omitempty" xml:"StartHour,omitempty"`
	// 当天开始拨测时间的分钟数。
	//
	// example:
	//
	// 20
	StartMinute *int64 `json:"StartMinute,omitempty" xml:"StartMinute,omitempty"`
	// example:
	//
	// 2022-02-26 11:40
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s GetSyntheticTaskDetailResponseBodyTaskDetailExtendInterval) String() string {
	return tea.Prettify(s)
}

func (s GetSyntheticTaskDetailResponseBodyTaskDetailExtendInterval) GoString() string {
	return s.String()
}

func (s *GetSyntheticTaskDetailResponseBodyTaskDetailExtendInterval) SetDays(v []*int64) *GetSyntheticTaskDetailResponseBodyTaskDetailExtendInterval {
	s.Days = v
	return s
}

func (s *GetSyntheticTaskDetailResponseBodyTaskDetailExtendInterval) SetEndMinute(v int64) *GetSyntheticTaskDetailResponseBodyTaskDetailExtendInterval {
	s.EndMinute = &v
	return s
}

func (s *GetSyntheticTaskDetailResponseBodyTaskDetailExtendInterval) SetEndTime(v string) *GetSyntheticTaskDetailResponseBodyTaskDetailExtendInterval {
	s.EndTime = &v
	return s
}

func (s *GetSyntheticTaskDetailResponseBodyTaskDetailExtendInterval) SetEndhour(v int64) *GetSyntheticTaskDetailResponseBodyTaskDetailExtendInterval {
	s.Endhour = &v
	return s
}

func (s *GetSyntheticTaskDetailResponseBodyTaskDetailExtendInterval) SetStartHour(v int64) *GetSyntheticTaskDetailResponseBodyTaskDetailExtendInterval {
	s.StartHour = &v
	return s
}

func (s *GetSyntheticTaskDetailResponseBodyTaskDetailExtendInterval) SetStartMinute(v int64) *GetSyntheticTaskDetailResponseBodyTaskDetailExtendInterval {
	s.StartMinute = &v
	return s
}

func (s *GetSyntheticTaskDetailResponseBodyTaskDetailExtendInterval) SetStartTime(v string) *GetSyntheticTaskDetailResponseBodyTaskDetailExtendInterval {
	s.StartTime = &v
	return s
}

type GetSyntheticTaskDetailResponseBodyTaskDetailMonitorList struct {
	// 城市编码。
	CityCode     *int64 `json:"CityCode,omitempty" xml:"CityCode,omitempty"`
	MonitorType  *int64 `json:"MonitorType,omitempty" xml:"MonitorType,omitempty"`
	NetServiceId *int64 `json:"NetServiceId,omitempty" xml:"NetServiceId,omitempty"`
	SendCount    *int64 `json:"SendCount,omitempty" xml:"SendCount,omitempty"`
}

func (s GetSyntheticTaskDetailResponseBodyTaskDetailMonitorList) String() string {
	return tea.Prettify(s)
}

func (s GetSyntheticTaskDetailResponseBodyTaskDetailMonitorList) GoString() string {
	return s.String()
}

func (s *GetSyntheticTaskDetailResponseBodyTaskDetailMonitorList) SetCityCode(v int64) *GetSyntheticTaskDetailResponseBodyTaskDetailMonitorList {
	s.CityCode = &v
	return s
}

func (s *GetSyntheticTaskDetailResponseBodyTaskDetailMonitorList) SetMonitorType(v int64) *GetSyntheticTaskDetailResponseBodyTaskDetailMonitorList {
	s.MonitorType = &v
	return s
}

func (s *GetSyntheticTaskDetailResponseBodyTaskDetailMonitorList) SetNetServiceId(v int64) *GetSyntheticTaskDetailResponseBodyTaskDetailMonitorList {
	s.NetServiceId = &v
	return s
}

func (s *GetSyntheticTaskDetailResponseBodyTaskDetailMonitorList) SetSendCount(v int64) *GetSyntheticTaskDetailResponseBodyTaskDetailMonitorList {
	s.SendCount = &v
	return s
}

type GetSyntheticTaskDetailResponseBodyTaskDetailNav struct {
	// example:
	//
	// 119.119.53.156
	DnsHijackWhitelist *string `json:"DnsHijackWhitelist,omitempty" xml:"DnsHijackWhitelist,omitempty"`
	// example:
	//
	// test
	ElementBlacklist *string `json:"ElementBlacklist,omitempty" xml:"ElementBlacklist,omitempty"`
	// example:
	//
	// 3
	ExecuteActiveX *int64 `json:"ExecuteActiveX,omitempty" xml:"ExecuteActiveX,omitempty"`
	// example:
	//
	// 1
	ExecuteApplet *int64 `json:"ExecuteApplet,omitempty" xml:"ExecuteApplet,omitempty"`
	// example:
	//
	// 1
	ExecuteScript *int64 `json:"ExecuteScript,omitempty" xml:"ExecuteScript,omitempty"`
	// example:
	//
	// 1
	FilterInvalidIP *int64 `json:"FilterInvalidIP,omitempty" xml:"FilterInvalidIP,omitempty"`
	// example:
	//
	// 12
	FlowHijackJumpTimes *int64 `json:"FlowHijackJumpTimes,omitempty" xml:"FlowHijackJumpTimes,omitempty"`
	// example:
	//
	// target
	FlowHijackLogo *string `json:"FlowHijackLogo,omitempty" xml:"FlowHijackLogo,omitempty"`
	// example:
	//
	// 20
	MonitorTimeout *int64 `json:"MonitorTimeout,omitempty" xml:"MonitorTimeout,omitempty"`
	// example:
	//
	// 1
	NavAutomaticScrolling *int64 `json:"NavAutomaticScrolling,omitempty" xml:"NavAutomaticScrolling,omitempty"`
	// example:
	//
	// 0
	NavCustomHeader *string `json:"NavCustomHeader,omitempty" xml:"NavCustomHeader,omitempty"`
	// example:
	//
	// content
	NavCustomHeaderContent *string `json:"NavCustomHeaderContent,omitempty" xml:"NavCustomHeaderContent,omitempty"`
	// example:
	//
	// 1
	NavCustomHost   *int64  `json:"NavCustomHost,omitempty" xml:"NavCustomHost,omitempty"`
	NavCustomHostIp *string `json:"NavCustomHostIp,omitempty" xml:"NavCustomHostIp,omitempty"`
	// example:
	//
	// 1
	NavDisableCache *int64 `json:"NavDisableCache,omitempty" xml:"NavDisableCache,omitempty"`
	// example:
	//
	// 0
	NavDisableCompression *int64 `json:"NavDisableCompression,omitempty" xml:"NavDisableCompression,omitempty"`
	// example:
	//
	// 1
	NavIgnoreCertificateError *int64 `json:"NavIgnoreCertificateError,omitempty" xml:"NavIgnoreCertificateError,omitempty"`
	// example:
	//
	// 1
	NavRedirect *int64 `json:"NavRedirect,omitempty" xml:"NavRedirect,omitempty"`
	// example:
	//
	// 1
	NavReturnElement *int64 `json:"NavReturnElement,omitempty" xml:"NavReturnElement,omitempty"`
	// example:
	//
	// content
	PageTampering *string `json:"PageTampering,omitempty" xml:"PageTampering,omitempty"`
	// example:
	//
	// ssh
	ProcessName *string `json:"ProcessName,omitempty" xml:"ProcessName,omitempty"`
	// example:
	//
	// www.example.com
	QuicDomain *string `json:"QuicDomain,omitempty" xml:"QuicDomain,omitempty"`
	// example:
	//
	// 0
	QuicVersion *int64 `json:"QuicVersion,omitempty" xml:"QuicVersion,omitempty"`
	// example:
	//
	// 0
	RequestHeader *int64 `json:"RequestHeader,omitempty" xml:"RequestHeader,omitempty"`
	// example:
	//
	// 30
	SlowElementThreshold *int64 `json:"SlowElementThreshold,omitempty" xml:"SlowElementThreshold,omitempty"`
	// example:
	//
	// test
	VerifyStringBlacklist *string `json:"VerifyStringBlacklist,omitempty" xml:"VerifyStringBlacklist,omitempty"`
	// example:
	//
	// test
	VerifyStringWhitelist *string `json:"VerifyStringWhitelist,omitempty" xml:"VerifyStringWhitelist,omitempty"`
	// example:
	//
	// 20
	WaitCompletionTime *int64 `json:"WaitCompletionTime,omitempty" xml:"WaitCompletionTime,omitempty"`
}

func (s GetSyntheticTaskDetailResponseBodyTaskDetailNav) String() string {
	return tea.Prettify(s)
}

func (s GetSyntheticTaskDetailResponseBodyTaskDetailNav) GoString() string {
	return s.String()
}

func (s *GetSyntheticTaskDetailResponseBodyTaskDetailNav) SetDnsHijackWhitelist(v string) *GetSyntheticTaskDetailResponseBodyTaskDetailNav {
	s.DnsHijackWhitelist = &v
	return s
}

func (s *GetSyntheticTaskDetailResponseBodyTaskDetailNav) SetElementBlacklist(v string) *GetSyntheticTaskDetailResponseBodyTaskDetailNav {
	s.ElementBlacklist = &v
	return s
}

func (s *GetSyntheticTaskDetailResponseBodyTaskDetailNav) SetExecuteActiveX(v int64) *GetSyntheticTaskDetailResponseBodyTaskDetailNav {
	s.ExecuteActiveX = &v
	return s
}

func (s *GetSyntheticTaskDetailResponseBodyTaskDetailNav) SetExecuteApplet(v int64) *GetSyntheticTaskDetailResponseBodyTaskDetailNav {
	s.ExecuteApplet = &v
	return s
}

func (s *GetSyntheticTaskDetailResponseBodyTaskDetailNav) SetExecuteScript(v int64) *GetSyntheticTaskDetailResponseBodyTaskDetailNav {
	s.ExecuteScript = &v
	return s
}

func (s *GetSyntheticTaskDetailResponseBodyTaskDetailNav) SetFilterInvalidIP(v int64) *GetSyntheticTaskDetailResponseBodyTaskDetailNav {
	s.FilterInvalidIP = &v
	return s
}

func (s *GetSyntheticTaskDetailResponseBodyTaskDetailNav) SetFlowHijackJumpTimes(v int64) *GetSyntheticTaskDetailResponseBodyTaskDetailNav {
	s.FlowHijackJumpTimes = &v
	return s
}

func (s *GetSyntheticTaskDetailResponseBodyTaskDetailNav) SetFlowHijackLogo(v string) *GetSyntheticTaskDetailResponseBodyTaskDetailNav {
	s.FlowHijackLogo = &v
	return s
}

func (s *GetSyntheticTaskDetailResponseBodyTaskDetailNav) SetMonitorTimeout(v int64) *GetSyntheticTaskDetailResponseBodyTaskDetailNav {
	s.MonitorTimeout = &v
	return s
}

func (s *GetSyntheticTaskDetailResponseBodyTaskDetailNav) SetNavAutomaticScrolling(v int64) *GetSyntheticTaskDetailResponseBodyTaskDetailNav {
	s.NavAutomaticScrolling = &v
	return s
}

func (s *GetSyntheticTaskDetailResponseBodyTaskDetailNav) SetNavCustomHeader(v string) *GetSyntheticTaskDetailResponseBodyTaskDetailNav {
	s.NavCustomHeader = &v
	return s
}

func (s *GetSyntheticTaskDetailResponseBodyTaskDetailNav) SetNavCustomHeaderContent(v string) *GetSyntheticTaskDetailResponseBodyTaskDetailNav {
	s.NavCustomHeaderContent = &v
	return s
}

func (s *GetSyntheticTaskDetailResponseBodyTaskDetailNav) SetNavCustomHost(v int64) *GetSyntheticTaskDetailResponseBodyTaskDetailNav {
	s.NavCustomHost = &v
	return s
}

func (s *GetSyntheticTaskDetailResponseBodyTaskDetailNav) SetNavCustomHostIp(v string) *GetSyntheticTaskDetailResponseBodyTaskDetailNav {
	s.NavCustomHostIp = &v
	return s
}

func (s *GetSyntheticTaskDetailResponseBodyTaskDetailNav) SetNavDisableCache(v int64) *GetSyntheticTaskDetailResponseBodyTaskDetailNav {
	s.NavDisableCache = &v
	return s
}

func (s *GetSyntheticTaskDetailResponseBodyTaskDetailNav) SetNavDisableCompression(v int64) *GetSyntheticTaskDetailResponseBodyTaskDetailNav {
	s.NavDisableCompression = &v
	return s
}

func (s *GetSyntheticTaskDetailResponseBodyTaskDetailNav) SetNavIgnoreCertificateError(v int64) *GetSyntheticTaskDetailResponseBodyTaskDetailNav {
	s.NavIgnoreCertificateError = &v
	return s
}

func (s *GetSyntheticTaskDetailResponseBodyTaskDetailNav) SetNavRedirect(v int64) *GetSyntheticTaskDetailResponseBodyTaskDetailNav {
	s.NavRedirect = &v
	return s
}

func (s *GetSyntheticTaskDetailResponseBodyTaskDetailNav) SetNavReturnElement(v int64) *GetSyntheticTaskDetailResponseBodyTaskDetailNav {
	s.NavReturnElement = &v
	return s
}

func (s *GetSyntheticTaskDetailResponseBodyTaskDetailNav) SetPageTampering(v string) *GetSyntheticTaskDetailResponseBodyTaskDetailNav {
	s.PageTampering = &v
	return s
}

func (s *GetSyntheticTaskDetailResponseBodyTaskDetailNav) SetProcessName(v string) *GetSyntheticTaskDetailResponseBodyTaskDetailNav {
	s.ProcessName = &v
	return s
}

func (s *GetSyntheticTaskDetailResponseBodyTaskDetailNav) SetQuicDomain(v string) *GetSyntheticTaskDetailResponseBodyTaskDetailNav {
	s.QuicDomain = &v
	return s
}

func (s *GetSyntheticTaskDetailResponseBodyTaskDetailNav) SetQuicVersion(v int64) *GetSyntheticTaskDetailResponseBodyTaskDetailNav {
	s.QuicVersion = &v
	return s
}

func (s *GetSyntheticTaskDetailResponseBodyTaskDetailNav) SetRequestHeader(v int64) *GetSyntheticTaskDetailResponseBodyTaskDetailNav {
	s.RequestHeader = &v
	return s
}

func (s *GetSyntheticTaskDetailResponseBodyTaskDetailNav) SetSlowElementThreshold(v int64) *GetSyntheticTaskDetailResponseBodyTaskDetailNav {
	s.SlowElementThreshold = &v
	return s
}

func (s *GetSyntheticTaskDetailResponseBodyTaskDetailNav) SetVerifyStringBlacklist(v string) *GetSyntheticTaskDetailResponseBodyTaskDetailNav {
	s.VerifyStringBlacklist = &v
	return s
}

func (s *GetSyntheticTaskDetailResponseBodyTaskDetailNav) SetVerifyStringWhitelist(v string) *GetSyntheticTaskDetailResponseBodyTaskDetailNav {
	s.VerifyStringWhitelist = &v
	return s
}

func (s *GetSyntheticTaskDetailResponseBodyTaskDetailNav) SetWaitCompletionTime(v int64) *GetSyntheticTaskDetailResponseBodyTaskDetailNav {
	s.WaitCompletionTime = &v
	return s
}

type GetSyntheticTaskDetailResponseBodyTaskDetailNet struct {
	// example:
	//
	// 0
	NetDigSwitch *int64 `json:"NetDigSwitch,omitempty" xml:"NetDigSwitch,omitempty"`
	// example:
	//
	// 189.12.32.124
	NetDnsNs *string `json:"NetDnsNs,omitempty" xml:"NetDnsNs,omitempty"`
	// example:
	//
	// 1
	NetDnsQueryMethod *string `json:"NetDnsQueryMethod,omitempty" xml:"NetDnsQueryMethod,omitempty"`
	// example:
	//
	// 0
	NetDnsServer *int64 `json:"NetDnsServer,omitempty" xml:"NetDnsServer,omitempty"`
	// example:
	//
	// 0
	NetDnsSwitch *int64 `json:"NetDnsSwitch,omitempty" xml:"NetDnsSwitch,omitempty"`
	// example:
	//
	// 10
	NetDnsTimeout *string `json:"NetDnsTimeout,omitempty" xml:"NetDnsTimeout,omitempty"`
	// example:
	//
	// 0
	NetIcmpActive *int64 `json:"NetIcmpActive,omitempty" xml:"NetIcmpActive,omitempty"`
	// example:
	//
	// 0
	NetIcmpDataCut *int64 `json:"NetIcmpDataCut,omitempty" xml:"NetIcmpDataCut,omitempty"`
	// example:
	//
	// 10
	NetIcmpInterval *int64 `json:"NetIcmpInterval,omitempty" xml:"NetIcmpInterval,omitempty"`
	// example:
	//
	// 10
	NetIcmpNum *int64 `json:"NetIcmpNum,omitempty" xml:"NetIcmpNum,omitempty"`
	// example:
	//
	// 30
	NetIcmpSize *int64 `json:"NetIcmpSize,omitempty" xml:"NetIcmpSize,omitempty"`
	// example:
	//
	// 0
	NetIcmpSwitch *int64 `json:"NetIcmpSwitch,omitempty" xml:"NetIcmpSwitch,omitempty"`
	// example:
	//
	// 20
	NetIcmpTimeout *int64 `json:"NetIcmpTimeout,omitempty" xml:"NetIcmpTimeout,omitempty"`
	// example:
	//
	// 30
	NetTraceRouteNum *int64 `json:"NetTraceRouteNum,omitempty" xml:"NetTraceRouteNum,omitempty"`
	// example:
	//
	// 0
	NetTraceRouteSwitch *int64 `json:"NetTraceRouteSwitch,omitempty" xml:"NetTraceRouteSwitch,omitempty"`
	// example:
	//
	// 20
	NetTraceRouteTimeout *int64 `json:"NetTraceRouteTimeout,omitempty" xml:"NetTraceRouteTimeout,omitempty"`
	// example:
	//
	// 119.119.53.156/32
	WhiteList *string `json:"WhiteList,omitempty" xml:"WhiteList,omitempty"`
}

func (s GetSyntheticTaskDetailResponseBodyTaskDetailNet) String() string {
	return tea.Prettify(s)
}

func (s GetSyntheticTaskDetailResponseBodyTaskDetailNet) GoString() string {
	return s.String()
}

func (s *GetSyntheticTaskDetailResponseBodyTaskDetailNet) SetNetDigSwitch(v int64) *GetSyntheticTaskDetailResponseBodyTaskDetailNet {
	s.NetDigSwitch = &v
	return s
}

func (s *GetSyntheticTaskDetailResponseBodyTaskDetailNet) SetNetDnsNs(v string) *GetSyntheticTaskDetailResponseBodyTaskDetailNet {
	s.NetDnsNs = &v
	return s
}

func (s *GetSyntheticTaskDetailResponseBodyTaskDetailNet) SetNetDnsQueryMethod(v string) *GetSyntheticTaskDetailResponseBodyTaskDetailNet {
	s.NetDnsQueryMethod = &v
	return s
}

func (s *GetSyntheticTaskDetailResponseBodyTaskDetailNet) SetNetDnsServer(v int64) *GetSyntheticTaskDetailResponseBodyTaskDetailNet {
	s.NetDnsServer = &v
	return s
}

func (s *GetSyntheticTaskDetailResponseBodyTaskDetailNet) SetNetDnsSwitch(v int64) *GetSyntheticTaskDetailResponseBodyTaskDetailNet {
	s.NetDnsSwitch = &v
	return s
}

func (s *GetSyntheticTaskDetailResponseBodyTaskDetailNet) SetNetDnsTimeout(v string) *GetSyntheticTaskDetailResponseBodyTaskDetailNet {
	s.NetDnsTimeout = &v
	return s
}

func (s *GetSyntheticTaskDetailResponseBodyTaskDetailNet) SetNetIcmpActive(v int64) *GetSyntheticTaskDetailResponseBodyTaskDetailNet {
	s.NetIcmpActive = &v
	return s
}

func (s *GetSyntheticTaskDetailResponseBodyTaskDetailNet) SetNetIcmpDataCut(v int64) *GetSyntheticTaskDetailResponseBodyTaskDetailNet {
	s.NetIcmpDataCut = &v
	return s
}

func (s *GetSyntheticTaskDetailResponseBodyTaskDetailNet) SetNetIcmpInterval(v int64) *GetSyntheticTaskDetailResponseBodyTaskDetailNet {
	s.NetIcmpInterval = &v
	return s
}

func (s *GetSyntheticTaskDetailResponseBodyTaskDetailNet) SetNetIcmpNum(v int64) *GetSyntheticTaskDetailResponseBodyTaskDetailNet {
	s.NetIcmpNum = &v
	return s
}

func (s *GetSyntheticTaskDetailResponseBodyTaskDetailNet) SetNetIcmpSize(v int64) *GetSyntheticTaskDetailResponseBodyTaskDetailNet {
	s.NetIcmpSize = &v
	return s
}

func (s *GetSyntheticTaskDetailResponseBodyTaskDetailNet) SetNetIcmpSwitch(v int64) *GetSyntheticTaskDetailResponseBodyTaskDetailNet {
	s.NetIcmpSwitch = &v
	return s
}

func (s *GetSyntheticTaskDetailResponseBodyTaskDetailNet) SetNetIcmpTimeout(v int64) *GetSyntheticTaskDetailResponseBodyTaskDetailNet {
	s.NetIcmpTimeout = &v
	return s
}

func (s *GetSyntheticTaskDetailResponseBodyTaskDetailNet) SetNetTraceRouteNum(v int64) *GetSyntheticTaskDetailResponseBodyTaskDetailNet {
	s.NetTraceRouteNum = &v
	return s
}

func (s *GetSyntheticTaskDetailResponseBodyTaskDetailNet) SetNetTraceRouteSwitch(v int64) *GetSyntheticTaskDetailResponseBodyTaskDetailNet {
	s.NetTraceRouteSwitch = &v
	return s
}

func (s *GetSyntheticTaskDetailResponseBodyTaskDetailNet) SetNetTraceRouteTimeout(v int64) *GetSyntheticTaskDetailResponseBodyTaskDetailNet {
	s.NetTraceRouteTimeout = &v
	return s
}

func (s *GetSyntheticTaskDetailResponseBodyTaskDetailNet) SetWhiteList(v string) *GetSyntheticTaskDetailResponseBodyTaskDetailNet {
	s.WhiteList = &v
	return s
}

type GetSyntheticTaskDetailResponseBodyTaskDetailProtocol struct {
	// example:
	//
	// 0
	CharacterEncoding *int64 `json:"CharacterEncoding,omitempty" xml:"CharacterEncoding,omitempty"`
	// example:
	//
	// 1
	CustomHost *int64 `json:"CustomHost,omitempty" xml:"CustomHost,omitempty"`
	// example:
	//
	// 119.119.53.156
	CustomHostIp *string `json:"CustomHostIp,omitempty" xml:"CustomHostIp,omitempty"`
	// example:
	//
	// 20
	ProtocolConnectionTimeout *int64 `json:"ProtocolConnectionTimeout,omitempty" xml:"ProtocolConnectionTimeout,omitempty"`
	// example:
	//
	// 30
	ProtocolMonitorTimeout *int64 `json:"ProtocolMonitorTimeout,omitempty" xml:"ProtocolMonitorTimeout,omitempty"`
	// example:
	//
	// 30
	ReceivedDataSize *int64                                                              `json:"ReceivedDataSize,omitempty" xml:"ReceivedDataSize,omitempty"`
	RequestContent   *GetSyntheticTaskDetailResponseBodyTaskDetailProtocolRequestContent `json:"RequestContent,omitempty" xml:"RequestContent,omitempty" type:"Struct"`
	// example:
	//
	// list
	VerifyContent *string `json:"VerifyContent,omitempty" xml:"VerifyContent,omitempty"`
	// example:
	//
	// 0
	VerifyWay *int64 `json:"VerifyWay,omitempty" xml:"VerifyWay,omitempty"`
}

func (s GetSyntheticTaskDetailResponseBodyTaskDetailProtocol) String() string {
	return tea.Prettify(s)
}

func (s GetSyntheticTaskDetailResponseBodyTaskDetailProtocol) GoString() string {
	return s.String()
}

func (s *GetSyntheticTaskDetailResponseBodyTaskDetailProtocol) SetCharacterEncoding(v int64) *GetSyntheticTaskDetailResponseBodyTaskDetailProtocol {
	s.CharacterEncoding = &v
	return s
}

func (s *GetSyntheticTaskDetailResponseBodyTaskDetailProtocol) SetCustomHost(v int64) *GetSyntheticTaskDetailResponseBodyTaskDetailProtocol {
	s.CustomHost = &v
	return s
}

func (s *GetSyntheticTaskDetailResponseBodyTaskDetailProtocol) SetCustomHostIp(v string) *GetSyntheticTaskDetailResponseBodyTaskDetailProtocol {
	s.CustomHostIp = &v
	return s
}

func (s *GetSyntheticTaskDetailResponseBodyTaskDetailProtocol) SetProtocolConnectionTimeout(v int64) *GetSyntheticTaskDetailResponseBodyTaskDetailProtocol {
	s.ProtocolConnectionTimeout = &v
	return s
}

func (s *GetSyntheticTaskDetailResponseBodyTaskDetailProtocol) SetProtocolMonitorTimeout(v int64) *GetSyntheticTaskDetailResponseBodyTaskDetailProtocol {
	s.ProtocolMonitorTimeout = &v
	return s
}

func (s *GetSyntheticTaskDetailResponseBodyTaskDetailProtocol) SetReceivedDataSize(v int64) *GetSyntheticTaskDetailResponseBodyTaskDetailProtocol {
	s.ReceivedDataSize = &v
	return s
}

func (s *GetSyntheticTaskDetailResponseBodyTaskDetailProtocol) SetRequestContent(v *GetSyntheticTaskDetailResponseBodyTaskDetailProtocolRequestContent) *GetSyntheticTaskDetailResponseBodyTaskDetailProtocol {
	s.RequestContent = v
	return s
}

func (s *GetSyntheticTaskDetailResponseBodyTaskDetailProtocol) SetVerifyContent(v string) *GetSyntheticTaskDetailResponseBodyTaskDetailProtocol {
	s.VerifyContent = &v
	return s
}

func (s *GetSyntheticTaskDetailResponseBodyTaskDetailProtocol) SetVerifyWay(v int64) *GetSyntheticTaskDetailResponseBodyTaskDetailProtocol {
	s.VerifyWay = &v
	return s
}

type GetSyntheticTaskDetailResponseBodyTaskDetailProtocolRequestContent struct {
	Body   *GetSyntheticTaskDetailResponseBodyTaskDetailProtocolRequestContentBody     `json:"Body,omitempty" xml:"Body,omitempty" type:"Struct"`
	Header []*GetSyntheticTaskDetailResponseBodyTaskDetailProtocolRequestContentHeader `json:"Header,omitempty" xml:"Header,omitempty" type:"Repeated"`
	// example:
	//
	// POST
	Method *string `json:"Method,omitempty" xml:"Method,omitempty"`
}

func (s GetSyntheticTaskDetailResponseBodyTaskDetailProtocolRequestContent) String() string {
	return tea.Prettify(s)
}

func (s GetSyntheticTaskDetailResponseBodyTaskDetailProtocolRequestContent) GoString() string {
	return s.String()
}

func (s *GetSyntheticTaskDetailResponseBodyTaskDetailProtocolRequestContent) SetBody(v *GetSyntheticTaskDetailResponseBodyTaskDetailProtocolRequestContentBody) *GetSyntheticTaskDetailResponseBodyTaskDetailProtocolRequestContent {
	s.Body = v
	return s
}

func (s *GetSyntheticTaskDetailResponseBodyTaskDetailProtocolRequestContent) SetHeader(v []*GetSyntheticTaskDetailResponseBodyTaskDetailProtocolRequestContentHeader) *GetSyntheticTaskDetailResponseBodyTaskDetailProtocolRequestContent {
	s.Header = v
	return s
}

func (s *GetSyntheticTaskDetailResponseBodyTaskDetailProtocolRequestContent) SetMethod(v string) *GetSyntheticTaskDetailResponseBodyTaskDetailProtocolRequestContent {
	s.Method = &v
	return s
}

type GetSyntheticTaskDetailResponseBodyTaskDetailProtocolRequestContentBody struct {
	Formdata *GetSyntheticTaskDetailResponseBodyTaskDetailProtocolRequestContentBodyFormdata `json:"Formdata,omitempty" xml:"Formdata,omitempty" type:"Struct"`
	// example:
	//
	// xml
	Language *string `json:"Language,omitempty" xml:"Language,omitempty"`
	// example:
	//
	// form-data
	Mode *string `json:"Mode,omitempty" xml:"Mode,omitempty"`
	// example:
	//
	// content
	Raw        *string                                                                           `json:"Raw,omitempty" xml:"Raw,omitempty"`
	Urlencoded *GetSyntheticTaskDetailResponseBodyTaskDetailProtocolRequestContentBodyUrlencoded `json:"Urlencoded,omitempty" xml:"Urlencoded,omitempty" type:"Struct"`
}

func (s GetSyntheticTaskDetailResponseBodyTaskDetailProtocolRequestContentBody) String() string {
	return tea.Prettify(s)
}

func (s GetSyntheticTaskDetailResponseBodyTaskDetailProtocolRequestContentBody) GoString() string {
	return s.String()
}

func (s *GetSyntheticTaskDetailResponseBodyTaskDetailProtocolRequestContentBody) SetFormdata(v *GetSyntheticTaskDetailResponseBodyTaskDetailProtocolRequestContentBodyFormdata) *GetSyntheticTaskDetailResponseBodyTaskDetailProtocolRequestContentBody {
	s.Formdata = v
	return s
}

func (s *GetSyntheticTaskDetailResponseBodyTaskDetailProtocolRequestContentBody) SetLanguage(v string) *GetSyntheticTaskDetailResponseBodyTaskDetailProtocolRequestContentBody {
	s.Language = &v
	return s
}

func (s *GetSyntheticTaskDetailResponseBodyTaskDetailProtocolRequestContentBody) SetMode(v string) *GetSyntheticTaskDetailResponseBodyTaskDetailProtocolRequestContentBody {
	s.Mode = &v
	return s
}

func (s *GetSyntheticTaskDetailResponseBodyTaskDetailProtocolRequestContentBody) SetRaw(v string) *GetSyntheticTaskDetailResponseBodyTaskDetailProtocolRequestContentBody {
	s.Raw = &v
	return s
}

func (s *GetSyntheticTaskDetailResponseBodyTaskDetailProtocolRequestContentBody) SetUrlencoded(v *GetSyntheticTaskDetailResponseBodyTaskDetailProtocolRequestContentBodyUrlencoded) *GetSyntheticTaskDetailResponseBodyTaskDetailProtocolRequestContentBody {
	s.Urlencoded = v
	return s
}

type GetSyntheticTaskDetailResponseBodyTaskDetailProtocolRequestContentBodyFormdata struct {
	// example:
	//
	// appId
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// example:
	//
	// 3425
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s GetSyntheticTaskDetailResponseBodyTaskDetailProtocolRequestContentBodyFormdata) String() string {
	return tea.Prettify(s)
}

func (s GetSyntheticTaskDetailResponseBodyTaskDetailProtocolRequestContentBodyFormdata) GoString() string {
	return s.String()
}

func (s *GetSyntheticTaskDetailResponseBodyTaskDetailProtocolRequestContentBodyFormdata) SetKey(v string) *GetSyntheticTaskDetailResponseBodyTaskDetailProtocolRequestContentBodyFormdata {
	s.Key = &v
	return s
}

func (s *GetSyntheticTaskDetailResponseBodyTaskDetailProtocolRequestContentBodyFormdata) SetValue(v string) *GetSyntheticTaskDetailResponseBodyTaskDetailProtocolRequestContentBodyFormdata {
	s.Value = &v
	return s
}

type GetSyntheticTaskDetailResponseBodyTaskDetailProtocolRequestContentBodyUrlencoded struct {
	// example:
	//
	// appId
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// example:
	//
	// 11080
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s GetSyntheticTaskDetailResponseBodyTaskDetailProtocolRequestContentBodyUrlencoded) String() string {
	return tea.Prettify(s)
}

func (s GetSyntheticTaskDetailResponseBodyTaskDetailProtocolRequestContentBodyUrlencoded) GoString() string {
	return s.String()
}

func (s *GetSyntheticTaskDetailResponseBodyTaskDetailProtocolRequestContentBodyUrlencoded) SetKey(v string) *GetSyntheticTaskDetailResponseBodyTaskDetailProtocolRequestContentBodyUrlencoded {
	s.Key = &v
	return s
}

func (s *GetSyntheticTaskDetailResponseBodyTaskDetailProtocolRequestContentBodyUrlencoded) SetValue(v string) *GetSyntheticTaskDetailResponseBodyTaskDetailProtocolRequestContentBodyUrlencoded {
	s.Value = &v
	return s
}

type GetSyntheticTaskDetailResponseBodyTaskDetailProtocolRequestContentHeader struct {
	// example:
	//
	// regionId
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// example:
	//
	// cn-hangzhou
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s GetSyntheticTaskDetailResponseBodyTaskDetailProtocolRequestContentHeader) String() string {
	return tea.Prettify(s)
}

func (s GetSyntheticTaskDetailResponseBodyTaskDetailProtocolRequestContentHeader) GoString() string {
	return s.String()
}

func (s *GetSyntheticTaskDetailResponseBodyTaskDetailProtocolRequestContentHeader) SetKey(v string) *GetSyntheticTaskDetailResponseBodyTaskDetailProtocolRequestContentHeader {
	s.Key = &v
	return s
}

func (s *GetSyntheticTaskDetailResponseBodyTaskDetailProtocolRequestContentHeader) SetValue(v string) *GetSyntheticTaskDetailResponseBodyTaskDetailProtocolRequestContentHeader {
	s.Value = &v
	return s
}

type GetSyntheticTaskDetailResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetSyntheticTaskDetailResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetSyntheticTaskDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s GetSyntheticTaskDetailResponse) GoString() string {
	return s.String()
}

func (s *GetSyntheticTaskDetailResponse) SetHeaders(v map[string]*string) *GetSyntheticTaskDetailResponse {
	s.Headers = v
	return s
}

func (s *GetSyntheticTaskDetailResponse) SetStatusCode(v int32) *GetSyntheticTaskDetailResponse {
	s.StatusCode = &v
	return s
}

func (s *GetSyntheticTaskDetailResponse) SetBody(v *GetSyntheticTaskDetailResponseBody) *GetSyntheticTaskDetailResponse {
	s.Body = v
	return s
}

type GetSyntheticTaskListRequest struct {
	// example:
	//
	// asc
	Direction *string `json:"Direction,omitempty" xml:"Direction,omitempty"`
	// example:
	//
	// CreateTime
	Order *string `json:"Order,omitempty" xml:"Order,omitempty"`
	// example:
	//
	// 1
	PageNum *int64 `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	// example:
	//
	// 10
	PageSize *int64 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// example:
	//
	// net-test
	TaskName *string `json:"TaskName,omitempty" xml:"TaskName,omitempty"`
	// example:
	//
	// 1
	TaskStatus *string `json:"TaskStatus,omitempty" xml:"TaskStatus,omitempty"`
	// example:
	//
	// 0
	TaskType *string `json:"TaskType,omitempty" xml:"TaskType,omitempty"`
	// example:
	//
	// https://www.example.com
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s GetSyntheticTaskListRequest) String() string {
	return tea.Prettify(s)
}

func (s GetSyntheticTaskListRequest) GoString() string {
	return s.String()
}

func (s *GetSyntheticTaskListRequest) SetDirection(v string) *GetSyntheticTaskListRequest {
	s.Direction = &v
	return s
}

func (s *GetSyntheticTaskListRequest) SetOrder(v string) *GetSyntheticTaskListRequest {
	s.Order = &v
	return s
}

func (s *GetSyntheticTaskListRequest) SetPageNum(v int64) *GetSyntheticTaskListRequest {
	s.PageNum = &v
	return s
}

func (s *GetSyntheticTaskListRequest) SetPageSize(v int64) *GetSyntheticTaskListRequest {
	s.PageSize = &v
	return s
}

func (s *GetSyntheticTaskListRequest) SetRegionId(v string) *GetSyntheticTaskListRequest {
	s.RegionId = &v
	return s
}

func (s *GetSyntheticTaskListRequest) SetTaskName(v string) *GetSyntheticTaskListRequest {
	s.TaskName = &v
	return s
}

func (s *GetSyntheticTaskListRequest) SetTaskStatus(v string) *GetSyntheticTaskListRequest {
	s.TaskStatus = &v
	return s
}

func (s *GetSyntheticTaskListRequest) SetTaskType(v string) *GetSyntheticTaskListRequest {
	s.TaskType = &v
	return s
}

func (s *GetSyntheticTaskListRequest) SetUrl(v string) *GetSyntheticTaskListRequest {
	s.Url = &v
	return s
}

type GetSyntheticTaskListResponseBody struct {
	PageInfo *GetSyntheticTaskListResponseBodyPageInfo `json:"PageInfo,omitempty" xml:"PageInfo,omitempty" type:"Struct"`
	// example:
	//
	// A5EC8221-08F2-4C95-9AF1-49FD998C****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetSyntheticTaskListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetSyntheticTaskListResponseBody) GoString() string {
	return s.String()
}

func (s *GetSyntheticTaskListResponseBody) SetPageInfo(v *GetSyntheticTaskListResponseBodyPageInfo) *GetSyntheticTaskListResponseBody {
	s.PageInfo = v
	return s
}

func (s *GetSyntheticTaskListResponseBody) SetRequestId(v string) *GetSyntheticTaskListResponseBody {
	s.RequestId = &v
	return s
}

type GetSyntheticTaskListResponseBodyPageInfo struct {
	// example:
	//
	// false
	HasNextPage *string `json:"HasNextPage,omitempty" xml:"HasNextPage,omitempty"`
	// example:
	//
	// true
	HasPreviousPage *bool `json:"HasPreviousPage,omitempty" xml:"HasPreviousPage,omitempty"`
	// example:
	//
	// true
	IsFirstPage *bool `json:"IsFirstPage,omitempty" xml:"IsFirstPage,omitempty"`
	// example:
	//
	// true
	IsLastPage *bool                                           `json:"IsLastPage,omitempty" xml:"IsLastPage,omitempty"`
	List       []*GetSyntheticTaskListResponseBodyPageInfoList `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	// example:
	//
	// 1
	NavigateFirstPage *string `json:"NavigateFirstPage,omitempty" xml:"NavigateFirstPage,omitempty"`
	// example:
	//
	// 3
	NavigateLastPage *string `json:"NavigateLastPage,omitempty" xml:"NavigateLastPage,omitempty"`
	// example:
	//
	// 1,2,3
	NavigatePageNums *string `json:"NavigatePageNums,omitempty" xml:"NavigatePageNums,omitempty"`
	// example:
	//
	// 3
	NextPage *string `json:"NextPage,omitempty" xml:"NextPage,omitempty"`
	// example:
	//
	// 10
	Pages *string `json:"Pages,omitempty" xml:"Pages,omitempty"`
	// example:
	//
	// 1
	Prepage *string `json:"Prepage,omitempty" xml:"Prepage,omitempty"`
	// example:
	//
	// 10
	Size *int64 `json:"Size,omitempty" xml:"Size,omitempty"`
	// example:
	//
	// 15
	Total *int64 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s GetSyntheticTaskListResponseBodyPageInfo) String() string {
	return tea.Prettify(s)
}

func (s GetSyntheticTaskListResponseBodyPageInfo) GoString() string {
	return s.String()
}

func (s *GetSyntheticTaskListResponseBodyPageInfo) SetHasNextPage(v string) *GetSyntheticTaskListResponseBodyPageInfo {
	s.HasNextPage = &v
	return s
}

func (s *GetSyntheticTaskListResponseBodyPageInfo) SetHasPreviousPage(v bool) *GetSyntheticTaskListResponseBodyPageInfo {
	s.HasPreviousPage = &v
	return s
}

func (s *GetSyntheticTaskListResponseBodyPageInfo) SetIsFirstPage(v bool) *GetSyntheticTaskListResponseBodyPageInfo {
	s.IsFirstPage = &v
	return s
}

func (s *GetSyntheticTaskListResponseBodyPageInfo) SetIsLastPage(v bool) *GetSyntheticTaskListResponseBodyPageInfo {
	s.IsLastPage = &v
	return s
}

func (s *GetSyntheticTaskListResponseBodyPageInfo) SetList(v []*GetSyntheticTaskListResponseBodyPageInfoList) *GetSyntheticTaskListResponseBodyPageInfo {
	s.List = v
	return s
}

func (s *GetSyntheticTaskListResponseBodyPageInfo) SetNavigateFirstPage(v string) *GetSyntheticTaskListResponseBodyPageInfo {
	s.NavigateFirstPage = &v
	return s
}

func (s *GetSyntheticTaskListResponseBodyPageInfo) SetNavigateLastPage(v string) *GetSyntheticTaskListResponseBodyPageInfo {
	s.NavigateLastPage = &v
	return s
}

func (s *GetSyntheticTaskListResponseBodyPageInfo) SetNavigatePageNums(v string) *GetSyntheticTaskListResponseBodyPageInfo {
	s.NavigatePageNums = &v
	return s
}

func (s *GetSyntheticTaskListResponseBodyPageInfo) SetNextPage(v string) *GetSyntheticTaskListResponseBodyPageInfo {
	s.NextPage = &v
	return s
}

func (s *GetSyntheticTaskListResponseBodyPageInfo) SetPages(v string) *GetSyntheticTaskListResponseBodyPageInfo {
	s.Pages = &v
	return s
}

func (s *GetSyntheticTaskListResponseBodyPageInfo) SetPrepage(v string) *GetSyntheticTaskListResponseBodyPageInfo {
	s.Prepage = &v
	return s
}

func (s *GetSyntheticTaskListResponseBodyPageInfo) SetSize(v int64) *GetSyntheticTaskListResponseBodyPageInfo {
	s.Size = &v
	return s
}

func (s *GetSyntheticTaskListResponseBodyPageInfo) SetTotal(v int64) *GetSyntheticTaskListResponseBodyPageInfo {
	s.Total = &v
	return s
}

type GetSyntheticTaskListResponseBodyPageInfoList struct {
	// example:
	//
	// 1634005438000
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// 2
	MonitorNumber *int64 `json:"MonitorNumber,omitempty" xml:"MonitorNumber,omitempty"`
	// example:
	//
	// 2118709
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// example:
	//
	// net-test
	TaskName *string `json:"TaskName,omitempty" xml:"TaskName,omitempty"`
	// example:
	//
	// 0
	TaskStatus *string `json:"TaskStatus,omitempty" xml:"TaskStatus,omitempty"`
	// example:
	//
	// 0
	TaskType     *int64  `json:"TaskType,omitempty" xml:"TaskType,omitempty"`
	TaskTypeName *string `json:"TaskTypeName,omitempty" xml:"TaskTypeName,omitempty"`
	// example:
	//
	// www.example.com
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
	// example:
	//
	// 0.80
	Usable *float32 `json:"Usable,omitempty" xml:"Usable,omitempty"`
}

func (s GetSyntheticTaskListResponseBodyPageInfoList) String() string {
	return tea.Prettify(s)
}

func (s GetSyntheticTaskListResponseBodyPageInfoList) GoString() string {
	return s.String()
}

func (s *GetSyntheticTaskListResponseBodyPageInfoList) SetCreateTime(v string) *GetSyntheticTaskListResponseBodyPageInfoList {
	s.CreateTime = &v
	return s
}

func (s *GetSyntheticTaskListResponseBodyPageInfoList) SetMonitorNumber(v int64) *GetSyntheticTaskListResponseBodyPageInfoList {
	s.MonitorNumber = &v
	return s
}

func (s *GetSyntheticTaskListResponseBodyPageInfoList) SetTaskId(v string) *GetSyntheticTaskListResponseBodyPageInfoList {
	s.TaskId = &v
	return s
}

func (s *GetSyntheticTaskListResponseBodyPageInfoList) SetTaskName(v string) *GetSyntheticTaskListResponseBodyPageInfoList {
	s.TaskName = &v
	return s
}

func (s *GetSyntheticTaskListResponseBodyPageInfoList) SetTaskStatus(v string) *GetSyntheticTaskListResponseBodyPageInfoList {
	s.TaskStatus = &v
	return s
}

func (s *GetSyntheticTaskListResponseBodyPageInfoList) SetTaskType(v int64) *GetSyntheticTaskListResponseBodyPageInfoList {
	s.TaskType = &v
	return s
}

func (s *GetSyntheticTaskListResponseBodyPageInfoList) SetTaskTypeName(v string) *GetSyntheticTaskListResponseBodyPageInfoList {
	s.TaskTypeName = &v
	return s
}

func (s *GetSyntheticTaskListResponseBodyPageInfoList) SetUrl(v string) *GetSyntheticTaskListResponseBodyPageInfoList {
	s.Url = &v
	return s
}

func (s *GetSyntheticTaskListResponseBodyPageInfoList) SetUsable(v float32) *GetSyntheticTaskListResponseBodyPageInfoList {
	s.Usable = &v
	return s
}

type GetSyntheticTaskListResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetSyntheticTaskListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetSyntheticTaskListResponse) String() string {
	return tea.Prettify(s)
}

func (s GetSyntheticTaskListResponse) GoString() string {
	return s.String()
}

func (s *GetSyntheticTaskListResponse) SetHeaders(v map[string]*string) *GetSyntheticTaskListResponse {
	s.Headers = v
	return s
}

func (s *GetSyntheticTaskListResponse) SetStatusCode(v int32) *GetSyntheticTaskListResponse {
	s.StatusCode = &v
	return s
}

func (s *GetSyntheticTaskListResponse) SetBody(v *GetSyntheticTaskListResponseBody) *GetSyntheticTaskListResponse {
	s.Body = v
	return s
}

type GetSyntheticTaskMonitorsRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s GetSyntheticTaskMonitorsRequest) String() string {
	return tea.Prettify(s)
}

func (s GetSyntheticTaskMonitorsRequest) GoString() string {
	return s.String()
}

func (s *GetSyntheticTaskMonitorsRequest) SetRegionId(v string) *GetSyntheticTaskMonitorsRequest {
	s.RegionId = &v
	return s
}

type GetSyntheticTaskMonitorsResponseBody struct {
	// example:
	//
	// 1001
	Code *string                                     `json:"Code,omitempty" xml:"Code,omitempty"`
	Data []*GetSyntheticTaskMonitorsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// example:
	//
	// null
	Msg *string `json:"Msg,omitempty" xml:"Msg,omitempty"`
	// example:
	//
	// 21E85B16-75A6-429A-9F65-8AAC9A54****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetSyntheticTaskMonitorsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetSyntheticTaskMonitorsResponseBody) GoString() string {
	return s.String()
}

func (s *GetSyntheticTaskMonitorsResponseBody) SetCode(v string) *GetSyntheticTaskMonitorsResponseBody {
	s.Code = &v
	return s
}

func (s *GetSyntheticTaskMonitorsResponseBody) SetData(v []*GetSyntheticTaskMonitorsResponseBodyData) *GetSyntheticTaskMonitorsResponseBody {
	s.Data = v
	return s
}

func (s *GetSyntheticTaskMonitorsResponseBody) SetMsg(v string) *GetSyntheticTaskMonitorsResponseBody {
	s.Msg = &v
	return s
}

func (s *GetSyntheticTaskMonitorsResponseBody) SetRequestId(v string) *GetSyntheticTaskMonitorsResponseBody {
	s.RequestId = &v
	return s
}

type GetSyntheticTaskMonitorsResponseBodyData struct {
	// example:
	//
	// 0
	Busy *int64  `json:"Busy,omitempty" xml:"Busy,omitempty"`
	City *string `json:"City,omitempty" xml:"City,omitempty"`
	// example:
	//
	// 1100101
	CityCode *int64 `json:"CityCode,omitempty" xml:"CityCode,omitempty"`
	// example:
	//
	// 1
	ClientType *int64  `json:"ClientType,omitempty" xml:"ClientType,omitempty"`
	District   *string `json:"District,omitempty" xml:"District,omitempty"`
	// example:
	//
	// 18
	NetServiceId *int64 `json:"NetServiceId,omitempty" xml:"NetServiceId,omitempty"`
	// example:
	//
	// XXX
	NetServiceName *string `json:"NetServiceName,omitempty" xml:"NetServiceName,omitempty"`
}

func (s GetSyntheticTaskMonitorsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetSyntheticTaskMonitorsResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetSyntheticTaskMonitorsResponseBodyData) SetBusy(v int64) *GetSyntheticTaskMonitorsResponseBodyData {
	s.Busy = &v
	return s
}

func (s *GetSyntheticTaskMonitorsResponseBodyData) SetCity(v string) *GetSyntheticTaskMonitorsResponseBodyData {
	s.City = &v
	return s
}

func (s *GetSyntheticTaskMonitorsResponseBodyData) SetCityCode(v int64) *GetSyntheticTaskMonitorsResponseBodyData {
	s.CityCode = &v
	return s
}

func (s *GetSyntheticTaskMonitorsResponseBodyData) SetClientType(v int64) *GetSyntheticTaskMonitorsResponseBodyData {
	s.ClientType = &v
	return s
}

func (s *GetSyntheticTaskMonitorsResponseBodyData) SetDistrict(v string) *GetSyntheticTaskMonitorsResponseBodyData {
	s.District = &v
	return s
}

func (s *GetSyntheticTaskMonitorsResponseBodyData) SetNetServiceId(v int64) *GetSyntheticTaskMonitorsResponseBodyData {
	s.NetServiceId = &v
	return s
}

func (s *GetSyntheticTaskMonitorsResponseBodyData) SetNetServiceName(v string) *GetSyntheticTaskMonitorsResponseBodyData {
	s.NetServiceName = &v
	return s
}

type GetSyntheticTaskMonitorsResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetSyntheticTaskMonitorsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetSyntheticTaskMonitorsResponse) String() string {
	return tea.Prettify(s)
}

func (s GetSyntheticTaskMonitorsResponse) GoString() string {
	return s.String()
}

func (s *GetSyntheticTaskMonitorsResponse) SetHeaders(v map[string]*string) *GetSyntheticTaskMonitorsResponse {
	s.Headers = v
	return s
}

func (s *GetSyntheticTaskMonitorsResponse) SetStatusCode(v int32) *GetSyntheticTaskMonitorsResponse {
	s.StatusCode = &v
	return s
}

func (s *GetSyntheticTaskMonitorsResponse) SetBody(v *GetSyntheticTaskMonitorsResponseBody) *GetSyntheticTaskMonitorsResponse {
	s.Body = v
	return s
}

type GetTimingSyntheticTaskRequest struct {
	// The region ID.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the synthetic monitoring task.
	//
	// example:
	//
	// 856566a9cb2a4cafa05aa95ed0ec8f21
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s GetTimingSyntheticTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s GetTimingSyntheticTaskRequest) GoString() string {
	return s.String()
}

func (s *GetTimingSyntheticTaskRequest) SetRegionId(v string) *GetTimingSyntheticTaskRequest {
	s.RegionId = &v
	return s
}

func (s *GetTimingSyntheticTaskRequest) SetTaskId(v string) *GetTimingSyntheticTaskRequest {
	s.TaskId = &v
	return s
}

type GetTimingSyntheticTaskResponseBody struct {
	// The status code returned. The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *int64 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The struct returned.
	Data *GetTimingSyntheticTaskResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The message returned.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// E13430A6-57A9-56E9-9D8D-28FE8DEBCA40
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetTimingSyntheticTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetTimingSyntheticTaskResponseBody) GoString() string {
	return s.String()
}

func (s *GetTimingSyntheticTaskResponseBody) SetCode(v int64) *GetTimingSyntheticTaskResponseBody {
	s.Code = &v
	return s
}

func (s *GetTimingSyntheticTaskResponseBody) SetData(v *GetTimingSyntheticTaskResponseBodyData) *GetTimingSyntheticTaskResponseBody {
	s.Data = v
	return s
}

func (s *GetTimingSyntheticTaskResponseBody) SetMessage(v string) *GetTimingSyntheticTaskResponseBody {
	s.Message = &v
	return s
}

func (s *GetTimingSyntheticTaskResponseBody) SetRequestId(v string) *GetTimingSyntheticTaskResponseBody {
	s.RequestId = &v
	return s
}

type GetTimingSyntheticTaskResponseBodyData struct {
	// The list of assertions.
	AvailableAssertions []*GetTimingSyntheticTaskResponseBodyDataAvailableAssertions `json:"AvailableAssertions,omitempty" xml:"AvailableAssertions,omitempty" type:"Repeated"`
	// The general settings.
	CommonSetting *GetTimingSyntheticTaskResponseBodyDataCommonSetting `json:"CommonSetting,omitempty" xml:"CommonSetting,omitempty" type:"Struct"`
	// The custom cycle.
	CustomPeriod *GetTimingSyntheticTaskResponseBodyDataCustomPeriod `json:"CustomPeriod,omitempty" xml:"CustomPeriod,omitempty" type:"Struct"`
	// The detection frequency. Valid values: 1m, 5m, 10m, 15m, 20m, 30m, 1h, 2h, 3h, 4h, 6h, 8h, 12h, and 24h.
	//
	// example:
	//
	// 5m
	Frequency *string `json:"Frequency,omitempty" xml:"Frequency,omitempty"`
	// The detection point type. 1: PC. 2: mobile device.
	//
	// example:
	//
	// 1
	MonitorCategory *int64 `json:"MonitorCategory,omitempty" xml:"MonitorCategory,omitempty"`
	// The monitoring configurations.
	MonitorConf *GetTimingSyntheticTaskResponseBodyDataMonitorConf `json:"MonitorConf,omitempty" xml:"MonitorConf,omitempty" type:"Struct"`
	// The list of monitoring points.
	Monitors []*GetTimingSyntheticTaskResponseBodyDataMonitors `json:"Monitors,omitempty" xml:"Monitors,omitempty" type:"Repeated"`
	// The name of the task.
	//
	// example:
	//
	// AlibabaCloud DNS Task
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The region ID.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the resource group.
	//
	// example:
	//
	// default
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	// CREATING: The task is being created. RUNNING: The task is running. PARTIAL_RUNNING: The task is partially running. STOP: The task is stopped. LIMIT_STOP: The task is stopped due to quota insufficiency. EXCEPTION: The task is abnormal. DELETE: The task is deleted. DELETE_EXCEPTION: The task failed to be deleted.
	//
	// example:
	//
	// RUNNING
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The tag.
	Tags []*GetTimingSyntheticTaskResponseBodyDataTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
	// The ID of the synthetic monitoring task.
	//
	// example:
	//
	// 5308a2691f59422c8c3b7aeccec9cd3b
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// The type of the task. Valid values:
	//
	// ICMP TCP DNS HTTP Website speed measurement File download
	//
	// example:
	//
	// 5
	TaskType *int32 `json:"TaskType,omitempty" xml:"TaskType,omitempty"`
}

func (s GetTimingSyntheticTaskResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetTimingSyntheticTaskResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetTimingSyntheticTaskResponseBodyData) SetAvailableAssertions(v []*GetTimingSyntheticTaskResponseBodyDataAvailableAssertions) *GetTimingSyntheticTaskResponseBodyData {
	s.AvailableAssertions = v
	return s
}

func (s *GetTimingSyntheticTaskResponseBodyData) SetCommonSetting(v *GetTimingSyntheticTaskResponseBodyDataCommonSetting) *GetTimingSyntheticTaskResponseBodyData {
	s.CommonSetting = v
	return s
}

func (s *GetTimingSyntheticTaskResponseBodyData) SetCustomPeriod(v *GetTimingSyntheticTaskResponseBodyDataCustomPeriod) *GetTimingSyntheticTaskResponseBodyData {
	s.CustomPeriod = v
	return s
}

func (s *GetTimingSyntheticTaskResponseBodyData) SetFrequency(v string) *GetTimingSyntheticTaskResponseBodyData {
	s.Frequency = &v
	return s
}

func (s *GetTimingSyntheticTaskResponseBodyData) SetMonitorCategory(v int64) *GetTimingSyntheticTaskResponseBodyData {
	s.MonitorCategory = &v
	return s
}

func (s *GetTimingSyntheticTaskResponseBodyData) SetMonitorConf(v *GetTimingSyntheticTaskResponseBodyDataMonitorConf) *GetTimingSyntheticTaskResponseBodyData {
	s.MonitorConf = v
	return s
}

func (s *GetTimingSyntheticTaskResponseBodyData) SetMonitors(v []*GetTimingSyntheticTaskResponseBodyDataMonitors) *GetTimingSyntheticTaskResponseBodyData {
	s.Monitors = v
	return s
}

func (s *GetTimingSyntheticTaskResponseBodyData) SetName(v string) *GetTimingSyntheticTaskResponseBodyData {
	s.Name = &v
	return s
}

func (s *GetTimingSyntheticTaskResponseBodyData) SetRegionId(v string) *GetTimingSyntheticTaskResponseBodyData {
	s.RegionId = &v
	return s
}

func (s *GetTimingSyntheticTaskResponseBodyData) SetResourceGroupId(v string) *GetTimingSyntheticTaskResponseBodyData {
	s.ResourceGroupId = &v
	return s
}

func (s *GetTimingSyntheticTaskResponseBodyData) SetStatus(v string) *GetTimingSyntheticTaskResponseBodyData {
	s.Status = &v
	return s
}

func (s *GetTimingSyntheticTaskResponseBodyData) SetTags(v []*GetTimingSyntheticTaskResponseBodyDataTags) *GetTimingSyntheticTaskResponseBodyData {
	s.Tags = v
	return s
}

func (s *GetTimingSyntheticTaskResponseBodyData) SetTaskId(v string) *GetTimingSyntheticTaskResponseBodyData {
	s.TaskId = &v
	return s
}

func (s *GetTimingSyntheticTaskResponseBodyData) SetTaskType(v int32) *GetTimingSyntheticTaskResponseBodyData {
	s.TaskType = &v
	return s
}

type GetTimingSyntheticTaskResponseBodyDataAvailableAssertions struct {
	// The expected value.
	//
	// example:
	//
	// 100
	Expect *string `json:"Expect,omitempty" xml:"Expect,omitempty"`
	// The condition. gt: greater than. gte: greater than or equal to. lt: less than. lte: less than or equal to. eq: equal to. neq: not equal to. ctn: contain. nctn: does not contain. exist: exist. n_exist: does not exist. belong: belong to. n_belong: does not belong to. reg_match: regular expression.
	//
	// example:
	//
	// gt
	Operator *string `json:"Operator,omitempty" xml:"Operator,omitempty"`
	// The check target. If you set the type parameter to HttpResCode, HttpResBody, or HttpResponseTime, you do not need to set the target parameter. If you set the type parameter to HttpResHead, you must specify the key in the header. If you set the type parameter to HttpResBodyJson, use jsonPath.
	//
	// example:
	//
	// key
	Target *string `json:"Target,omitempty" xml:"Target,omitempty"`
	// The assertion type. Valid values: HttpResCode, HttpResHead, HttpResBody, HttpResBodyJson, HttpResponseTime, IcmpPackLoss (packet loss rate), IcmpPackMaxLatency (maximum packet latency), IcmpPackAvgLatency (average packet latency), TraceRouteHops (number of hops), DnsARecord (A record), DnsCName (CNAME), websiteTTFB (time to first packet), websiteTTLB (time to last packet), websiteFST (first paint time), websiteFFST (first meaningful paint), websiteOnload (full loaded time). For more information, see the following description.
	//
	// example:
	//
	// websiteTTLB
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetTimingSyntheticTaskResponseBodyDataAvailableAssertions) String() string {
	return tea.Prettify(s)
}

func (s GetTimingSyntheticTaskResponseBodyDataAvailableAssertions) GoString() string {
	return s.String()
}

func (s *GetTimingSyntheticTaskResponseBodyDataAvailableAssertions) SetExpect(v string) *GetTimingSyntheticTaskResponseBodyDataAvailableAssertions {
	s.Expect = &v
	return s
}

func (s *GetTimingSyntheticTaskResponseBodyDataAvailableAssertions) SetOperator(v string) *GetTimingSyntheticTaskResponseBodyDataAvailableAssertions {
	s.Operator = &v
	return s
}

func (s *GetTimingSyntheticTaskResponseBodyDataAvailableAssertions) SetTarget(v string) *GetTimingSyntheticTaskResponseBodyDataAvailableAssertions {
	s.Target = &v
	return s
}

func (s *GetTimingSyntheticTaskResponseBodyDataAvailableAssertions) SetType(v string) *GetTimingSyntheticTaskResponseBodyDataAvailableAssertions {
	s.Type = &v
	return s
}

type GetTimingSyntheticTaskResponseBodyDataCommonSetting struct {
	// The custom host.
	CustomHost              *GetTimingSyntheticTaskResponseBodyDataCommonSettingCustomHost              `json:"CustomHost,omitempty" xml:"CustomHost,omitempty" type:"Struct"`
	CustomPrometheusSetting *GetTimingSyntheticTaskResponseBodyDataCommonSettingCustomPrometheusSetting `json:"CustomPrometheusSetting,omitempty" xml:"CustomPrometheusSetting,omitempty" type:"Struct"`
	CustomVPCSetting        *GetTimingSyntheticTaskResponseBodyDataCommonSettingCustomVPCSetting        `json:"CustomVPCSetting,omitempty" xml:"CustomVPCSetting,omitempty" type:"Struct"`
	// The IP version. Valid values:
	//
	// 	- 0: A version is automatically selected.
	//
	// 	- 1: IPv4
	//
	// 	- 2: IPv6
	//
	// example:
	//
	// 0
	IpType *int32 `json:"IpType,omitempty" xml:"IpType,omitempty"`
	// 是否开启链路追踪。
	//
	// example:
	//
	// true
	IsOpenTrace *bool `json:"IsOpenTrace,omitempty" xml:"IsOpenTrace,omitempty"`
	// Specifies whether to evenly distribute monitoring samples. Valid values:
	//
	// 	- 0: No
	//
	// 	- 1: Yes
	//
	// example:
	//
	// 0
	MonitorSamples *int32 `json:"MonitorSamples,omitempty" xml:"MonitorSamples,omitempty"`
	// 链路追踪客户端类型：
	//
	// - 0：ARMS Agent
	//
	// - 1：OpenTelemetry
	//
	// - 2：Jaeger
	//
	// example:
	//
	// 1
	TraceClientType *int32 `json:"TraceClientType,omitempty" xml:"TraceClientType,omitempty"`
	// 链路数据上报region。
	//
	// example:
	//
	// cn-hangzhou
	XtraceRegion *string `json:"XtraceRegion,omitempty" xml:"XtraceRegion,omitempty"`
}

func (s GetTimingSyntheticTaskResponseBodyDataCommonSetting) String() string {
	return tea.Prettify(s)
}

func (s GetTimingSyntheticTaskResponseBodyDataCommonSetting) GoString() string {
	return s.String()
}

func (s *GetTimingSyntheticTaskResponseBodyDataCommonSetting) SetCustomHost(v *GetTimingSyntheticTaskResponseBodyDataCommonSettingCustomHost) *GetTimingSyntheticTaskResponseBodyDataCommonSetting {
	s.CustomHost = v
	return s
}

func (s *GetTimingSyntheticTaskResponseBodyDataCommonSetting) SetCustomPrometheusSetting(v *GetTimingSyntheticTaskResponseBodyDataCommonSettingCustomPrometheusSetting) *GetTimingSyntheticTaskResponseBodyDataCommonSetting {
	s.CustomPrometheusSetting = v
	return s
}

func (s *GetTimingSyntheticTaskResponseBodyDataCommonSetting) SetCustomVPCSetting(v *GetTimingSyntheticTaskResponseBodyDataCommonSettingCustomVPCSetting) *GetTimingSyntheticTaskResponseBodyDataCommonSetting {
	s.CustomVPCSetting = v
	return s
}

func (s *GetTimingSyntheticTaskResponseBodyDataCommonSetting) SetIpType(v int32) *GetTimingSyntheticTaskResponseBodyDataCommonSetting {
	s.IpType = &v
	return s
}

func (s *GetTimingSyntheticTaskResponseBodyDataCommonSetting) SetIsOpenTrace(v bool) *GetTimingSyntheticTaskResponseBodyDataCommonSetting {
	s.IsOpenTrace = &v
	return s
}

func (s *GetTimingSyntheticTaskResponseBodyDataCommonSetting) SetMonitorSamples(v int32) *GetTimingSyntheticTaskResponseBodyDataCommonSetting {
	s.MonitorSamples = &v
	return s
}

func (s *GetTimingSyntheticTaskResponseBodyDataCommonSetting) SetTraceClientType(v int32) *GetTimingSyntheticTaskResponseBodyDataCommonSetting {
	s.TraceClientType = &v
	return s
}

func (s *GetTimingSyntheticTaskResponseBodyDataCommonSetting) SetXtraceRegion(v string) *GetTimingSyntheticTaskResponseBodyDataCommonSetting {
	s.XtraceRegion = &v
	return s
}

type GetTimingSyntheticTaskResponseBodyDataCommonSettingCustomHost struct {
	// The list of hosts.
	Hosts []*GetTimingSyntheticTaskResponseBodyDataCommonSettingCustomHostHosts `json:"Hosts,omitempty" xml:"Hosts,omitempty" type:"Repeated"`
	// The selection mode. 0: Random. 1: Polling.
	//
	// example:
	//
	// 0
	SelectType *int32 `json:"SelectType,omitempty" xml:"SelectType,omitempty"`
}

func (s GetTimingSyntheticTaskResponseBodyDataCommonSettingCustomHost) String() string {
	return tea.Prettify(s)
}

func (s GetTimingSyntheticTaskResponseBodyDataCommonSettingCustomHost) GoString() string {
	return s.String()
}

func (s *GetTimingSyntheticTaskResponseBodyDataCommonSettingCustomHost) SetHosts(v []*GetTimingSyntheticTaskResponseBodyDataCommonSettingCustomHostHosts) *GetTimingSyntheticTaskResponseBodyDataCommonSettingCustomHost {
	s.Hosts = v
	return s
}

func (s *GetTimingSyntheticTaskResponseBodyDataCommonSettingCustomHost) SetSelectType(v int32) *GetTimingSyntheticTaskResponseBodyDataCommonSettingCustomHost {
	s.SelectType = &v
	return s
}

type GetTimingSyntheticTaskResponseBodyDataCommonSettingCustomHostHosts struct {
	// The domain name.
	//
	// example:
	//
	// www.aliyun.com
	Domain *string `json:"Domain,omitempty" xml:"Domain,omitempty"`
	// The IP version. Valid values:
	//
	// 	- 0: A version is automatically selected.
	//
	// 	- 1: IPv4
	//
	// 	- 2: IPv6
	//
	// example:
	//
	// 0
	IpType *int32 `json:"IpType,omitempty" xml:"IpType,omitempty"`
	// The list of IP addresses.
	Ips []*string `json:"Ips,omitempty" xml:"Ips,omitempty" type:"Repeated"`
}

func (s GetTimingSyntheticTaskResponseBodyDataCommonSettingCustomHostHosts) String() string {
	return tea.Prettify(s)
}

func (s GetTimingSyntheticTaskResponseBodyDataCommonSettingCustomHostHosts) GoString() string {
	return s.String()
}

func (s *GetTimingSyntheticTaskResponseBodyDataCommonSettingCustomHostHosts) SetDomain(v string) *GetTimingSyntheticTaskResponseBodyDataCommonSettingCustomHostHosts {
	s.Domain = &v
	return s
}

func (s *GetTimingSyntheticTaskResponseBodyDataCommonSettingCustomHostHosts) SetIpType(v int32) *GetTimingSyntheticTaskResponseBodyDataCommonSettingCustomHostHosts {
	s.IpType = &v
	return s
}

func (s *GetTimingSyntheticTaskResponseBodyDataCommonSettingCustomHostHosts) SetIps(v []*string) *GetTimingSyntheticTaskResponseBodyDataCommonSettingCustomHostHosts {
	s.Ips = v
	return s
}

type GetTimingSyntheticTaskResponseBodyDataCommonSettingCustomPrometheusSetting struct {
	PrometheusClusterId     *string            `json:"PrometheusClusterId,omitempty" xml:"PrometheusClusterId,omitempty"`
	PrometheusClusterRegion *string            `json:"PrometheusClusterRegion,omitempty" xml:"PrometheusClusterRegion,omitempty"`
	PrometheusLabels        map[string]*string `json:"PrometheusLabels,omitempty" xml:"PrometheusLabels,omitempty"`
}

func (s GetTimingSyntheticTaskResponseBodyDataCommonSettingCustomPrometheusSetting) String() string {
	return tea.Prettify(s)
}

func (s GetTimingSyntheticTaskResponseBodyDataCommonSettingCustomPrometheusSetting) GoString() string {
	return s.String()
}

func (s *GetTimingSyntheticTaskResponseBodyDataCommonSettingCustomPrometheusSetting) SetPrometheusClusterId(v string) *GetTimingSyntheticTaskResponseBodyDataCommonSettingCustomPrometheusSetting {
	s.PrometheusClusterId = &v
	return s
}

func (s *GetTimingSyntheticTaskResponseBodyDataCommonSettingCustomPrometheusSetting) SetPrometheusClusterRegion(v string) *GetTimingSyntheticTaskResponseBodyDataCommonSettingCustomPrometheusSetting {
	s.PrometheusClusterRegion = &v
	return s
}

func (s *GetTimingSyntheticTaskResponseBodyDataCommonSettingCustomPrometheusSetting) SetPrometheusLabels(v map[string]*string) *GetTimingSyntheticTaskResponseBodyDataCommonSettingCustomPrometheusSetting {
	s.PrometheusLabels = v
	return s
}

type GetTimingSyntheticTaskResponseBodyDataCommonSettingCustomVPCSetting struct {
	RegionId      *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	SecureGroupId *string `json:"SecureGroupId,omitempty" xml:"SecureGroupId,omitempty"`
	VSwitchId     *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	VpcId         *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
}

func (s GetTimingSyntheticTaskResponseBodyDataCommonSettingCustomVPCSetting) String() string {
	return tea.Prettify(s)
}

func (s GetTimingSyntheticTaskResponseBodyDataCommonSettingCustomVPCSetting) GoString() string {
	return s.String()
}

func (s *GetTimingSyntheticTaskResponseBodyDataCommonSettingCustomVPCSetting) SetRegionId(v string) *GetTimingSyntheticTaskResponseBodyDataCommonSettingCustomVPCSetting {
	s.RegionId = &v
	return s
}

func (s *GetTimingSyntheticTaskResponseBodyDataCommonSettingCustomVPCSetting) SetSecureGroupId(v string) *GetTimingSyntheticTaskResponseBodyDataCommonSettingCustomVPCSetting {
	s.SecureGroupId = &v
	return s
}

func (s *GetTimingSyntheticTaskResponseBodyDataCommonSettingCustomVPCSetting) SetVSwitchId(v string) *GetTimingSyntheticTaskResponseBodyDataCommonSettingCustomVPCSetting {
	s.VSwitchId = &v
	return s
}

func (s *GetTimingSyntheticTaskResponseBodyDataCommonSettingCustomVPCSetting) SetVpcId(v string) *GetTimingSyntheticTaskResponseBodyDataCommonSettingCustomVPCSetting {
	s.VpcId = &v
	return s
}

type GetTimingSyntheticTaskResponseBodyDataCustomPeriod struct {
	// The hour at which the test ends. Valid values: 0 to 24.
	//
	// example:
	//
	// 22
	EndHour *int64 `json:"EndHour,omitempty" xml:"EndHour,omitempty"`
	// The hour at which the test starts. Valid values: 0 to 24.
	//
	// example:
	//
	// 14
	StartHour *int64 `json:"StartHour,omitempty" xml:"StartHour,omitempty"`
}

func (s GetTimingSyntheticTaskResponseBodyDataCustomPeriod) String() string {
	return tea.Prettify(s)
}

func (s GetTimingSyntheticTaskResponseBodyDataCustomPeriod) GoString() string {
	return s.String()
}

func (s *GetTimingSyntheticTaskResponseBodyDataCustomPeriod) SetEndHour(v int64) *GetTimingSyntheticTaskResponseBodyDataCustomPeriod {
	s.EndHour = &v
	return s
}

func (s *GetTimingSyntheticTaskResponseBodyDataCustomPeriod) SetStartHour(v int64) *GetTimingSyntheticTaskResponseBodyDataCustomPeriod {
	s.StartHour = &v
	return s
}

type GetTimingSyntheticTaskResponseBodyDataMonitorConf struct {
	// The HTTP(S) synthetic test parameters.
	ApiHTTP *GetTimingSyntheticTaskResponseBodyDataMonitorConfApiHTTP `json:"ApiHTTP,omitempty" xml:"ApiHTTP,omitempty" type:"Struct"`
	// The file download parameters.
	FileDownload *GetTimingSyntheticTaskResponseBodyDataMonitorConfFileDownload `json:"FileDownload,omitempty" xml:"FileDownload,omitempty" type:"Struct"`
	// The DNS synthetic test parameters. This parameter is required if the TaskType parameter is set to 3.
	NetDNS *GetTimingSyntheticTaskResponseBodyDataMonitorConfNetDNS `json:"NetDNS,omitempty" xml:"NetDNS,omitempty" type:"Struct"`
	// The ICMP synthetic test parameters. This parameter is required if the TaskType parameter is set to 1.
	NetICMP *GetTimingSyntheticTaskResponseBodyDataMonitorConfNetICMP `json:"NetICMP,omitempty" xml:"NetICMP,omitempty" type:"Struct"`
	// The TCP synthetic tests parameters. This parameter is required if the TaskType parameter is set to 2.
	NetTCP *GetTimingSyntheticTaskResponseBodyDataMonitorConfNetTCP `json:"NetTCP,omitempty" xml:"NetTCP,omitempty" type:"Struct"`
	// 流媒体拨测配置。
	Stream *GetTimingSyntheticTaskResponseBodyDataMonitorConfStream `json:"Stream,omitempty" xml:"Stream,omitempty" type:"Struct"`
	// The website-speed measurement parameters.
	Website *GetTimingSyntheticTaskResponseBodyDataMonitorConfWebsite `json:"Website,omitempty" xml:"Website,omitempty" type:"Struct"`
}

func (s GetTimingSyntheticTaskResponseBodyDataMonitorConf) String() string {
	return tea.Prettify(s)
}

func (s GetTimingSyntheticTaskResponseBodyDataMonitorConf) GoString() string {
	return s.String()
}

func (s *GetTimingSyntheticTaskResponseBodyDataMonitorConf) SetApiHTTP(v *GetTimingSyntheticTaskResponseBodyDataMonitorConfApiHTTP) *GetTimingSyntheticTaskResponseBodyDataMonitorConf {
	s.ApiHTTP = v
	return s
}

func (s *GetTimingSyntheticTaskResponseBodyDataMonitorConf) SetFileDownload(v *GetTimingSyntheticTaskResponseBodyDataMonitorConfFileDownload) *GetTimingSyntheticTaskResponseBodyDataMonitorConf {
	s.FileDownload = v
	return s
}

func (s *GetTimingSyntheticTaskResponseBodyDataMonitorConf) SetNetDNS(v *GetTimingSyntheticTaskResponseBodyDataMonitorConfNetDNS) *GetTimingSyntheticTaskResponseBodyDataMonitorConf {
	s.NetDNS = v
	return s
}

func (s *GetTimingSyntheticTaskResponseBodyDataMonitorConf) SetNetICMP(v *GetTimingSyntheticTaskResponseBodyDataMonitorConfNetICMP) *GetTimingSyntheticTaskResponseBodyDataMonitorConf {
	s.NetICMP = v
	return s
}

func (s *GetTimingSyntheticTaskResponseBodyDataMonitorConf) SetNetTCP(v *GetTimingSyntheticTaskResponseBodyDataMonitorConfNetTCP) *GetTimingSyntheticTaskResponseBodyDataMonitorConf {
	s.NetTCP = v
	return s
}

func (s *GetTimingSyntheticTaskResponseBodyDataMonitorConf) SetStream(v *GetTimingSyntheticTaskResponseBodyDataMonitorConfStream) *GetTimingSyntheticTaskResponseBodyDataMonitorConf {
	s.Stream = v
	return s
}

func (s *GetTimingSyntheticTaskResponseBodyDataMonitorConf) SetWebsite(v *GetTimingSyntheticTaskResponseBodyDataMonitorConfWebsite) *GetTimingSyntheticTaskResponseBodyDataMonitorConf {
	s.Website = v
	return s
}

type GetTimingSyntheticTaskResponseBodyDataMonitorConfApiHTTP struct {
	CheckCert *bool `json:"CheckCert,omitempty" xml:"CheckCert,omitempty"`
	// The connection timeout period. Unit: milliseconds. Default value: 5000. Minimum value: 1000. Maximum value: 300000.
	//
	// example:
	//
	// 5000
	ConnectTimeout *int64 `json:"ConnectTimeout,omitempty" xml:"ConnectTimeout,omitempty"`
	// The request method.
	//
	// 	- POST
	//
	// 	- GET
	//
	// example:
	//
	// POST
	Method               *string `json:"Method,omitempty" xml:"Method,omitempty"`
	ProtocolAlpnProtocol *int32  `json:"ProtocolAlpnProtocol,omitempty" xml:"ProtocolAlpnProtocol,omitempty"`
	// The HTTP request body.
	RequestBody *GetTimingSyntheticTaskResponseBodyDataMonitorConfApiHTTPRequestBody `json:"RequestBody,omitempty" xml:"RequestBody,omitempty" type:"Struct"`
	// The HTTP request header.
	RequestHeaders map[string]*string `json:"RequestHeaders,omitempty" xml:"RequestHeaders,omitempty"`
	// The URL for synthetic monitoring.
	//
	// example:
	//
	// http://127.0.0.1:8090/api/list
	TargetUrl *string `json:"TargetUrl,omitempty" xml:"TargetUrl,omitempty"`
	// The timeout period. Unit: milliseconds. Default value: 10000. Minimum value: 1000. Maximum value: 300000.
	//
	// example:
	//
	// 10000
	Timeout *int64 `json:"Timeout,omitempty" xml:"Timeout,omitempty"`
}

func (s GetTimingSyntheticTaskResponseBodyDataMonitorConfApiHTTP) String() string {
	return tea.Prettify(s)
}

func (s GetTimingSyntheticTaskResponseBodyDataMonitorConfApiHTTP) GoString() string {
	return s.String()
}

func (s *GetTimingSyntheticTaskResponseBodyDataMonitorConfApiHTTP) SetCheckCert(v bool) *GetTimingSyntheticTaskResponseBodyDataMonitorConfApiHTTP {
	s.CheckCert = &v
	return s
}

func (s *GetTimingSyntheticTaskResponseBodyDataMonitorConfApiHTTP) SetConnectTimeout(v int64) *GetTimingSyntheticTaskResponseBodyDataMonitorConfApiHTTP {
	s.ConnectTimeout = &v
	return s
}

func (s *GetTimingSyntheticTaskResponseBodyDataMonitorConfApiHTTP) SetMethod(v string) *GetTimingSyntheticTaskResponseBodyDataMonitorConfApiHTTP {
	s.Method = &v
	return s
}

func (s *GetTimingSyntheticTaskResponseBodyDataMonitorConfApiHTTP) SetProtocolAlpnProtocol(v int32) *GetTimingSyntheticTaskResponseBodyDataMonitorConfApiHTTP {
	s.ProtocolAlpnProtocol = &v
	return s
}

func (s *GetTimingSyntheticTaskResponseBodyDataMonitorConfApiHTTP) SetRequestBody(v *GetTimingSyntheticTaskResponseBodyDataMonitorConfApiHTTPRequestBody) *GetTimingSyntheticTaskResponseBodyDataMonitorConfApiHTTP {
	s.RequestBody = v
	return s
}

func (s *GetTimingSyntheticTaskResponseBodyDataMonitorConfApiHTTP) SetRequestHeaders(v map[string]*string) *GetTimingSyntheticTaskResponseBodyDataMonitorConfApiHTTP {
	s.RequestHeaders = v
	return s
}

func (s *GetTimingSyntheticTaskResponseBodyDataMonitorConfApiHTTP) SetTargetUrl(v string) *GetTimingSyntheticTaskResponseBodyDataMonitorConfApiHTTP {
	s.TargetUrl = &v
	return s
}

func (s *GetTimingSyntheticTaskResponseBodyDataMonitorConfApiHTTP) SetTimeout(v int64) *GetTimingSyntheticTaskResponseBodyDataMonitorConfApiHTTP {
	s.Timeout = &v
	return s
}

type GetTimingSyntheticTaskResponseBodyDataMonitorConfApiHTTPRequestBody struct {
	// The content of the request body. Format: JSON string. The parameter is required if the type parameter is set to text/plain, application/json, application/xml, or text/html. Format: JSON string.
	//
	// example:
	//
	// text/plain
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// The type of the request body. Valid values: text/plain, application/json, application/x-www-form-urlencoded, multipart/form-data, application/xml, and text/html.
	//
	// example:
	//
	// multipart/form-data
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetTimingSyntheticTaskResponseBodyDataMonitorConfApiHTTPRequestBody) String() string {
	return tea.Prettify(s)
}

func (s GetTimingSyntheticTaskResponseBodyDataMonitorConfApiHTTPRequestBody) GoString() string {
	return s.String()
}

func (s *GetTimingSyntheticTaskResponseBodyDataMonitorConfApiHTTPRequestBody) SetContent(v string) *GetTimingSyntheticTaskResponseBodyDataMonitorConfApiHTTPRequestBody {
	s.Content = &v
	return s
}

func (s *GetTimingSyntheticTaskResponseBodyDataMonitorConfApiHTTPRequestBody) SetType(v string) *GetTimingSyntheticTaskResponseBodyDataMonitorConfApiHTTPRequestBody {
	s.Type = &v
	return s
}

type GetTimingSyntheticTaskResponseBodyDataMonitorConfFileDownload struct {
	// The connection timeout period. Unit: milliseconds. Minimum value: 1000. Maximum value: 120000. Default value: 5000.
	//
	// example:
	//
	// 5000
	ConnectionTimeout *int64 `json:"ConnectionTimeout,omitempty" xml:"ConnectionTimeout,omitempty"`
	// The content of the custom request header.
	CustomHeaderContent map[string]*string `json:"CustomHeaderContent,omitempty" xml:"CustomHeaderContent,omitempty"`
	// The kernel type.
	//
	// 	- 1: curl
	//
	// 	- 0: WinInet
	//
	// example:
	//
	// 0
	DownloadKernel *int64 `json:"DownloadKernel,omitempty" xml:"DownloadKernel,omitempty"`
	// Specifies whether to ignore CA certificate authentication errors. 0: No. 1: Yes. Default value: 1.
	//
	// example:
	//
	// 0
	IgnoreCertificateAuthError *int32 `json:"IgnoreCertificateAuthError,omitempty" xml:"IgnoreCertificateAuthError,omitempty"`
	// Specifies whether to ignore certificate revocation errors. 0: No. 1: Yes. Default value: 1.
	//
	// example:
	//
	// 0
	IgnoreCertificateCanceledError *int32 `json:"IgnoreCertificateCanceledError,omitempty" xml:"IgnoreCertificateCanceledError,omitempty"`
	// Specifies whether to ignore certificate invalidity. 0: No. 1: Yes. Default value: 1.
	//
	// example:
	//
	// 0
	IgnoreCertificateOutOfDateError *int32 `json:"IgnoreCertificateOutOfDateError,omitempty" xml:"IgnoreCertificateOutOfDateError,omitempty"`
	// Specifies whether to ignore certificate status errors. 0: No. 1: Yes. Default value: 1.
	//
	// example:
	//
	// 0
	IgnoreCertificateStatusError *int32 `json:"IgnoreCertificateStatusError,omitempty" xml:"IgnoreCertificateStatusError,omitempty"`
	// Specifies whether to ignore certificate incredibility. 0: No. 1: Yes. Default value: 1.
	//
	// example:
	//
	// 0
	IgnoreCertificateUntrustworthyError *int32 `json:"IgnoreCertificateUntrustworthyError,omitempty" xml:"IgnoreCertificateUntrustworthyError,omitempty"`
	// Specifies whether to ignore certificate usage errors. 0: No. 1: Yes. Default value: 1.
	//
	// example:
	//
	// 0
	IgnoreCertificateUsingError *int32 `json:"IgnoreCertificateUsingError,omitempty" xml:"IgnoreCertificateUsingError,omitempty"`
	// Specifies whether to ignore host invalidity. 0: No. 1: Yes. Default value: 1.
	//
	// example:
	//
	// 0
	IgnoreInvalidHostError *int32 `json:"IgnoreInvalidHostError,omitempty" xml:"IgnoreInvalidHostError,omitempty"`
	// The monitoring timeout period. Unit: milliseconds. Minimum value: 1000. Maximum value: 120000. Default value: 60000.
	//
	// example:
	//
	// 6000
	MonitorTimeout *int64 `json:"MonitorTimeout,omitempty" xml:"MonitorTimeout,omitempty"`
	// The QUIC protocol type.
	//
	// 	- 1: http1
	//
	// 	- 2: http2
	//
	// 	- 3: http3
	//
	// example:
	//
	// 1
	QuickProtocol *int64 `json:"QuickProtocol,omitempty" xml:"QuickProtocol,omitempty"`
	// Specifies whether to support redirection. 0: No. 1: Yes. Default value: 1.
	//
	// example:
	//
	// 0
	Redirection *int32 `json:"Redirection,omitempty" xml:"Redirection,omitempty"`
	// The file download URL.
	//
	// example:
	//
	// https://********
	TargetUrl *string `json:"TargetUrl,omitempty" xml:"TargetUrl,omitempty"`
	// The maximum file size of a single transfer. Unit: KB. Minimum value: 1. Maximum value: 20480. Valid values: 2048.
	//
	// example:
	//
	// 2048
	TransmissionSize *int64 `json:"TransmissionSize,omitempty" xml:"TransmissionSize,omitempty"`
	// 验证关键词。
	//
	// example:
	//
	// success
	ValidateKeywords *string `json:"ValidateKeywords,omitempty" xml:"ValidateKeywords,omitempty"`
	// 验证方式。
	//
	// - 0：不验证
	//
	// - 1：验证字符串
	//
	// - 2：MD5验证
	//
	// example:
	//
	// 0
	VerifyWay *int32 `json:"VerifyWay,omitempty" xml:"VerifyWay,omitempty"`
	// DNS劫持白名单。匹配规则支持IP、IP通配符、子网掩码和CNAME，可以填写多个匹配规则，多个匹配规则以竖线（|）隔开。例如：www.aliyun.com:203.0.3.55|203.3.44.67，表示www.aliyun.com域名下除203.0.3.55和203.3.44.67之外的其他IP都是被劫持的。
	//
	// example:
	//
	// www.aliyun.com:203.0.3.55|203.3.44.67
	WhiteList *string `json:"WhiteList,omitempty" xml:"WhiteList,omitempty"`
}

func (s GetTimingSyntheticTaskResponseBodyDataMonitorConfFileDownload) String() string {
	return tea.Prettify(s)
}

func (s GetTimingSyntheticTaskResponseBodyDataMonitorConfFileDownload) GoString() string {
	return s.String()
}

func (s *GetTimingSyntheticTaskResponseBodyDataMonitorConfFileDownload) SetConnectionTimeout(v int64) *GetTimingSyntheticTaskResponseBodyDataMonitorConfFileDownload {
	s.ConnectionTimeout = &v
	return s
}

func (s *GetTimingSyntheticTaskResponseBodyDataMonitorConfFileDownload) SetCustomHeaderContent(v map[string]*string) *GetTimingSyntheticTaskResponseBodyDataMonitorConfFileDownload {
	s.CustomHeaderContent = v
	return s
}

func (s *GetTimingSyntheticTaskResponseBodyDataMonitorConfFileDownload) SetDownloadKernel(v int64) *GetTimingSyntheticTaskResponseBodyDataMonitorConfFileDownload {
	s.DownloadKernel = &v
	return s
}

func (s *GetTimingSyntheticTaskResponseBodyDataMonitorConfFileDownload) SetIgnoreCertificateAuthError(v int32) *GetTimingSyntheticTaskResponseBodyDataMonitorConfFileDownload {
	s.IgnoreCertificateAuthError = &v
	return s
}

func (s *GetTimingSyntheticTaskResponseBodyDataMonitorConfFileDownload) SetIgnoreCertificateCanceledError(v int32) *GetTimingSyntheticTaskResponseBodyDataMonitorConfFileDownload {
	s.IgnoreCertificateCanceledError = &v
	return s
}

func (s *GetTimingSyntheticTaskResponseBodyDataMonitorConfFileDownload) SetIgnoreCertificateOutOfDateError(v int32) *GetTimingSyntheticTaskResponseBodyDataMonitorConfFileDownload {
	s.IgnoreCertificateOutOfDateError = &v
	return s
}

func (s *GetTimingSyntheticTaskResponseBodyDataMonitorConfFileDownload) SetIgnoreCertificateStatusError(v int32) *GetTimingSyntheticTaskResponseBodyDataMonitorConfFileDownload {
	s.IgnoreCertificateStatusError = &v
	return s
}

func (s *GetTimingSyntheticTaskResponseBodyDataMonitorConfFileDownload) SetIgnoreCertificateUntrustworthyError(v int32) *GetTimingSyntheticTaskResponseBodyDataMonitorConfFileDownload {
	s.IgnoreCertificateUntrustworthyError = &v
	return s
}

func (s *GetTimingSyntheticTaskResponseBodyDataMonitorConfFileDownload) SetIgnoreCertificateUsingError(v int32) *GetTimingSyntheticTaskResponseBodyDataMonitorConfFileDownload {
	s.IgnoreCertificateUsingError = &v
	return s
}

func (s *GetTimingSyntheticTaskResponseBodyDataMonitorConfFileDownload) SetIgnoreInvalidHostError(v int32) *GetTimingSyntheticTaskResponseBodyDataMonitorConfFileDownload {
	s.IgnoreInvalidHostError = &v
	return s
}

func (s *GetTimingSyntheticTaskResponseBodyDataMonitorConfFileDownload) SetMonitorTimeout(v int64) *GetTimingSyntheticTaskResponseBodyDataMonitorConfFileDownload {
	s.MonitorTimeout = &v
	return s
}

func (s *GetTimingSyntheticTaskResponseBodyDataMonitorConfFileDownload) SetQuickProtocol(v int64) *GetTimingSyntheticTaskResponseBodyDataMonitorConfFileDownload {
	s.QuickProtocol = &v
	return s
}

func (s *GetTimingSyntheticTaskResponseBodyDataMonitorConfFileDownload) SetRedirection(v int32) *GetTimingSyntheticTaskResponseBodyDataMonitorConfFileDownload {
	s.Redirection = &v
	return s
}

func (s *GetTimingSyntheticTaskResponseBodyDataMonitorConfFileDownload) SetTargetUrl(v string) *GetTimingSyntheticTaskResponseBodyDataMonitorConfFileDownload {
	s.TargetUrl = &v
	return s
}

func (s *GetTimingSyntheticTaskResponseBodyDataMonitorConfFileDownload) SetTransmissionSize(v int64) *GetTimingSyntheticTaskResponseBodyDataMonitorConfFileDownload {
	s.TransmissionSize = &v
	return s
}

func (s *GetTimingSyntheticTaskResponseBodyDataMonitorConfFileDownload) SetValidateKeywords(v string) *GetTimingSyntheticTaskResponseBodyDataMonitorConfFileDownload {
	s.ValidateKeywords = &v
	return s
}

func (s *GetTimingSyntheticTaskResponseBodyDataMonitorConfFileDownload) SetVerifyWay(v int32) *GetTimingSyntheticTaskResponseBodyDataMonitorConfFileDownload {
	s.VerifyWay = &v
	return s
}

func (s *GetTimingSyntheticTaskResponseBodyDataMonitorConfFileDownload) SetWhiteList(v string) *GetTimingSyntheticTaskResponseBodyDataMonitorConfFileDownload {
	s.WhiteList = &v
	return s
}

type GetTimingSyntheticTaskResponseBodyDataMonitorConfNetDNS struct {
	// The IP version of the DNS server. 0: IPv4. 1: IPv6. 2: A version is automatically selected. Default value: 0.
	//
	// example:
	//
	// 0
	DnsServerIpType *int32 `json:"DnsServerIpType,omitempty" xml:"DnsServerIpType,omitempty"`
	// The IP address of the DNS server. Default value: 114.114.114.114.
	//
	// example:
	//
	// 114.114.114.114
	NsServer *string `json:"NsServer,omitempty" xml:"NsServer,omitempty"`
	// The DNS query. 0: recursive, 1: iterative. Default value: 0.
	//
	// example:
	//
	// 0
	QueryMethod *int32 `json:"QueryMethod,omitempty" xml:"QueryMethod,omitempty"`
	// The destination domain name.
	//
	// example:
	//
	// www.aliyun.com
	TargetUrl *string `json:"TargetUrl,omitempty" xml:"TargetUrl,omitempty"`
	// The timeout period for the DNS synthetic test. Unit: milliseconds. The minimum value is 1000 and the maximum value is 45000. Default value: 5000.
	//
	// example:
	//
	// 5000
	Timeout *int64 `json:"Timeout,omitempty" xml:"Timeout,omitempty"`
}

func (s GetTimingSyntheticTaskResponseBodyDataMonitorConfNetDNS) String() string {
	return tea.Prettify(s)
}

func (s GetTimingSyntheticTaskResponseBodyDataMonitorConfNetDNS) GoString() string {
	return s.String()
}

func (s *GetTimingSyntheticTaskResponseBodyDataMonitorConfNetDNS) SetDnsServerIpType(v int32) *GetTimingSyntheticTaskResponseBodyDataMonitorConfNetDNS {
	s.DnsServerIpType = &v
	return s
}

func (s *GetTimingSyntheticTaskResponseBodyDataMonitorConfNetDNS) SetNsServer(v string) *GetTimingSyntheticTaskResponseBodyDataMonitorConfNetDNS {
	s.NsServer = &v
	return s
}

func (s *GetTimingSyntheticTaskResponseBodyDataMonitorConfNetDNS) SetQueryMethod(v int32) *GetTimingSyntheticTaskResponseBodyDataMonitorConfNetDNS {
	s.QueryMethod = &v
	return s
}

func (s *GetTimingSyntheticTaskResponseBodyDataMonitorConfNetDNS) SetTargetUrl(v string) *GetTimingSyntheticTaskResponseBodyDataMonitorConfNetDNS {
	s.TargetUrl = &v
	return s
}

func (s *GetTimingSyntheticTaskResponseBodyDataMonitorConfNetDNS) SetTimeout(v int64) *GetTimingSyntheticTaskResponseBodyDataMonitorConfNetDNS {
	s.Timeout = &v
	return s
}

type GetTimingSyntheticTaskResponseBodyDataMonitorConfNetICMP struct {
	// The interval at which ICMP packets are sent. Unit: milliseconds. Minimum value: 200. Maximum value: 2000. Default value: 200.
	//
	// example:
	//
	// 200
	Interval *int32 `json:"Interval,omitempty" xml:"Interval,omitempty"`
	// The number of ICMP packets that are sent. Minimum value: 1. Maximum value: 50. Default value: 4.
	//
	// example:
	//
	// 4
	PackageNum *int32 `json:"PackageNum,omitempty" xml:"PackageNum,omitempty"`
	// The size of each ICMP packet. Unit: bytes. Valid values: 32, 64, 128, 256, 512, 1024.
	//
	// example:
	//
	// 1024
	PackageSize *int32 `json:"PackageSize,omitempty" xml:"PackageSize,omitempty"`
	// Specifies whether to split ICMP packets. Default value: true.
	//
	// example:
	//
	// true
	SplitPackage *bool `json:"SplitPackage,omitempty" xml:"SplitPackage,omitempty"`
	// The destination host IP address or domain name
	//
	// example:
	//
	// www.aliyun.com
	TargetUrl *string `json:"TargetUrl,omitempty" xml:"TargetUrl,omitempty"`
	// The timeout period for the TCP synthetic test. Unit: milliseconds. Minimum value: 1000. Maximum value: 300000. Default value: 20000.
	//
	// example:
	//
	// 2000
	Timeout *int64 `json:"Timeout,omitempty" xml:"Timeout,omitempty"`
	// Specifies whether to enable the tracert command. Default value: true.
	//
	// example:
	//
	// true
	TracertEnable *bool `json:"TracertEnable,omitempty" xml:"TracertEnable,omitempty"`
	// The maximum number of hops for tracert. Minimum value: 1. Maximum value: 128. Default value: 64.
	//
	// example:
	//
	// 64
	TracertNumMax *int32 `json:"TracertNumMax,omitempty" xml:"TracertNumMax,omitempty"`
	// The timeout period of tracert. Unit: milliseconds. Minimum value: 1000. Maximum value: 300000. Default value: 60000.
	//
	// example:
	//
	// 60000
	TracertTimeout *int64 `json:"TracertTimeout,omitempty" xml:"TracertTimeout,omitempty"`
}

func (s GetTimingSyntheticTaskResponseBodyDataMonitorConfNetICMP) String() string {
	return tea.Prettify(s)
}

func (s GetTimingSyntheticTaskResponseBodyDataMonitorConfNetICMP) GoString() string {
	return s.String()
}

func (s *GetTimingSyntheticTaskResponseBodyDataMonitorConfNetICMP) SetInterval(v int32) *GetTimingSyntheticTaskResponseBodyDataMonitorConfNetICMP {
	s.Interval = &v
	return s
}

func (s *GetTimingSyntheticTaskResponseBodyDataMonitorConfNetICMP) SetPackageNum(v int32) *GetTimingSyntheticTaskResponseBodyDataMonitorConfNetICMP {
	s.PackageNum = &v
	return s
}

func (s *GetTimingSyntheticTaskResponseBodyDataMonitorConfNetICMP) SetPackageSize(v int32) *GetTimingSyntheticTaskResponseBodyDataMonitorConfNetICMP {
	s.PackageSize = &v
	return s
}

func (s *GetTimingSyntheticTaskResponseBodyDataMonitorConfNetICMP) SetSplitPackage(v bool) *GetTimingSyntheticTaskResponseBodyDataMonitorConfNetICMP {
	s.SplitPackage = &v
	return s
}

func (s *GetTimingSyntheticTaskResponseBodyDataMonitorConfNetICMP) SetTargetUrl(v string) *GetTimingSyntheticTaskResponseBodyDataMonitorConfNetICMP {
	s.TargetUrl = &v
	return s
}

func (s *GetTimingSyntheticTaskResponseBodyDataMonitorConfNetICMP) SetTimeout(v int64) *GetTimingSyntheticTaskResponseBodyDataMonitorConfNetICMP {
	s.Timeout = &v
	return s
}

func (s *GetTimingSyntheticTaskResponseBodyDataMonitorConfNetICMP) SetTracertEnable(v bool) *GetTimingSyntheticTaskResponseBodyDataMonitorConfNetICMP {
	s.TracertEnable = &v
	return s
}

func (s *GetTimingSyntheticTaskResponseBodyDataMonitorConfNetICMP) SetTracertNumMax(v int32) *GetTimingSyntheticTaskResponseBodyDataMonitorConfNetICMP {
	s.TracertNumMax = &v
	return s
}

func (s *GetTimingSyntheticTaskResponseBodyDataMonitorConfNetICMP) SetTracertTimeout(v int64) *GetTimingSyntheticTaskResponseBodyDataMonitorConfNetICMP {
	s.TracertTimeout = &v
	return s
}

type GetTimingSyntheticTaskResponseBodyDataMonitorConfNetTCP struct {
	// The number of TCP connections that are established in a test. Minimum value: 1. Maximum value: 16. Default value: 4.
	//
	// example:
	//
	// 4
	ConnectTimes *int32 `json:"ConnectTimes,omitempty" xml:"ConnectTimes,omitempty"`
	// The interval at which TCP connections are established. Unit: milliseconds. Minimum value: 200. Maximum value: 10000. Default value: 200.
	//
	// example:
	//
	// 200
	Interval *int64 `json:"Interval,omitempty" xml:"Interval,omitempty"`
	// The destination host IP address.
	//
	// example:
	//
	// 127.0.0.1:8888
	TargetUrl *string `json:"TargetUrl,omitempty" xml:"TargetUrl,omitempty"`
	// The timeout period for the TCP synthetic test. Unit: milliseconds. Minimum value: 1000. Maximum value: 300000. Default value: 20000.
	//
	// example:
	//
	// 20000
	Timeout *int64 `json:"Timeout,omitempty" xml:"Timeout,omitempty"`
	// Specifies whether to enable the tracert command. Default value: true.
	//
	// example:
	//
	// true
	TracertEnable *bool `json:"TracertEnable,omitempty" xml:"TracertEnable,omitempty"`
	// The maximum number of hops for tracert. Minimum value: 1. Maximum value: 128. Default value: 20.
	//
	// example:
	//
	// 20
	TracertNumMax *int32 `json:"TracertNumMax,omitempty" xml:"TracertNumMax,omitempty"`
	// The timeout period of tracert. Unit: milliseconds. Minimum value: 1000. Maximum value: 300000. Default value: 60000.
	//
	// example:
	//
	// 60000
	TracertTimeout *int64 `json:"TracertTimeout,omitempty" xml:"TracertTimeout,omitempty"`
}

func (s GetTimingSyntheticTaskResponseBodyDataMonitorConfNetTCP) String() string {
	return tea.Prettify(s)
}

func (s GetTimingSyntheticTaskResponseBodyDataMonitorConfNetTCP) GoString() string {
	return s.String()
}

func (s *GetTimingSyntheticTaskResponseBodyDataMonitorConfNetTCP) SetConnectTimes(v int32) *GetTimingSyntheticTaskResponseBodyDataMonitorConfNetTCP {
	s.ConnectTimes = &v
	return s
}

func (s *GetTimingSyntheticTaskResponseBodyDataMonitorConfNetTCP) SetInterval(v int64) *GetTimingSyntheticTaskResponseBodyDataMonitorConfNetTCP {
	s.Interval = &v
	return s
}

func (s *GetTimingSyntheticTaskResponseBodyDataMonitorConfNetTCP) SetTargetUrl(v string) *GetTimingSyntheticTaskResponseBodyDataMonitorConfNetTCP {
	s.TargetUrl = &v
	return s
}

func (s *GetTimingSyntheticTaskResponseBodyDataMonitorConfNetTCP) SetTimeout(v int64) *GetTimingSyntheticTaskResponseBodyDataMonitorConfNetTCP {
	s.Timeout = &v
	return s
}

func (s *GetTimingSyntheticTaskResponseBodyDataMonitorConfNetTCP) SetTracertEnable(v bool) *GetTimingSyntheticTaskResponseBodyDataMonitorConfNetTCP {
	s.TracertEnable = &v
	return s
}

func (s *GetTimingSyntheticTaskResponseBodyDataMonitorConfNetTCP) SetTracertNumMax(v int32) *GetTimingSyntheticTaskResponseBodyDataMonitorConfNetTCP {
	s.TracertNumMax = &v
	return s
}

func (s *GetTimingSyntheticTaskResponseBodyDataMonitorConfNetTCP) SetTracertTimeout(v int64) *GetTimingSyntheticTaskResponseBodyDataMonitorConfNetTCP {
	s.TracertTimeout = &v
	return s
}

type GetTimingSyntheticTaskResponseBodyDataMonitorConfStream struct {
	// 自定义header，JSON Map格式。
	CustomHeaderContent map[string]*string `json:"CustomHeaderContent,omitempty" xml:"CustomHeaderContent,omitempty"`
	// 播放器，不传默认12。
	//
	// - 12：VLC
	//
	// - 2：FlashPlayer
	//
	// example:
	//
	// 12
	PlayerType *int32 `json:"PlayerType,omitempty" xml:"PlayerType,omitempty"`
	// 资源地址类型：
	//
	// - 1：资源地址。
	//
	// - 0：页面地址。不传默认0。
	//
	// example:
	//
	// 0
	StreamAddressType *int32 `json:"StreamAddressType,omitempty" xml:"StreamAddressType,omitempty"`
	// 监测时长，单位秒，最长支持60s，不传默认60。
	//
	// example:
	//
	// 30
	StreamMonitorTimeout *int32 `json:"StreamMonitorTimeout,omitempty" xml:"StreamMonitorTimeout,omitempty"`
	// 音视频标志：0-视频，1-音频。
	//
	// example:
	//
	// 0
	StreamType *int32 `json:"StreamType,omitempty" xml:"StreamType,omitempty"`
	// 流媒体资源地址。
	//
	// example:
	//
	// http://www.aliyun.com/stream/test.mp4
	TargetUrl *string `json:"TargetUrl,omitempty" xml:"TargetUrl,omitempty"`
	// DNS劫持白名单。匹配规则支持IP、IP通配符、子网掩码和CNAME，可以填写多个匹配规则，多个匹配规则以竖线（|）隔开。例如：www.aliyun.com:203.0.3.55|203.3.44.67，表示www.aliyun.com域名下除203.0.3.55和203.3.44.67之外的其他IP都是被劫持的。
	//
	// example:
	//
	// www.aliyun.com:203.0.3.55|203.3.44.67
	WhiteList *string `json:"WhiteList,omitempty" xml:"WhiteList,omitempty"`
}

func (s GetTimingSyntheticTaskResponseBodyDataMonitorConfStream) String() string {
	return tea.Prettify(s)
}

func (s GetTimingSyntheticTaskResponseBodyDataMonitorConfStream) GoString() string {
	return s.String()
}

func (s *GetTimingSyntheticTaskResponseBodyDataMonitorConfStream) SetCustomHeaderContent(v map[string]*string) *GetTimingSyntheticTaskResponseBodyDataMonitorConfStream {
	s.CustomHeaderContent = v
	return s
}

func (s *GetTimingSyntheticTaskResponseBodyDataMonitorConfStream) SetPlayerType(v int32) *GetTimingSyntheticTaskResponseBodyDataMonitorConfStream {
	s.PlayerType = &v
	return s
}

func (s *GetTimingSyntheticTaskResponseBodyDataMonitorConfStream) SetStreamAddressType(v int32) *GetTimingSyntheticTaskResponseBodyDataMonitorConfStream {
	s.StreamAddressType = &v
	return s
}

func (s *GetTimingSyntheticTaskResponseBodyDataMonitorConfStream) SetStreamMonitorTimeout(v int32) *GetTimingSyntheticTaskResponseBodyDataMonitorConfStream {
	s.StreamMonitorTimeout = &v
	return s
}

func (s *GetTimingSyntheticTaskResponseBodyDataMonitorConfStream) SetStreamType(v int32) *GetTimingSyntheticTaskResponseBodyDataMonitorConfStream {
	s.StreamType = &v
	return s
}

func (s *GetTimingSyntheticTaskResponseBodyDataMonitorConfStream) SetTargetUrl(v string) *GetTimingSyntheticTaskResponseBodyDataMonitorConfStream {
	s.TargetUrl = &v
	return s
}

func (s *GetTimingSyntheticTaskResponseBodyDataMonitorConfStream) SetWhiteList(v string) *GetTimingSyntheticTaskResponseBodyDataMonitorConfStream {
	s.WhiteList = &v
	return s
}

type GetTimingSyntheticTaskResponseBodyDataMonitorConfWebsite struct {
	// Specifies whether to automatically scroll up and down the screen to load a page. 0: No. 1: Yes. Default value: 0.
	//
	// example:
	//
	// 0
	AutomaticScrolling *int32 `json:"AutomaticScrolling,omitempty" xml:"AutomaticScrolling,omitempty"`
	// Specifies whether to create a custom header. 0: No. 1: The first packet is modified. 2: All packets are modified. Default value: 0.
	//
	// example:
	//
	// 0
	CustomHeader *int32 `json:"CustomHeader,omitempty" xml:"CustomHeader,omitempty"`
	// The custom header. Format: JSON map.
	CustomHeaderContent map[string]*string `json:"CustomHeaderContent,omitempty" xml:"CustomHeaderContent,omitempty"`
	// 域名（例如www.aliyun.com）解析时，解析出的IP地址或者CNAME不在DNS劫持白名单内，用户就会访问失败或者返回一个非Aliyun的目标IP；若解析结果中的IP或者CNAME在DNS白名单内，则会被认定为没有发生DNS劫持。
	//
	// 填写格式：域名:匹配规则。匹配规则支持IP、IP通配符、子网掩码和CNAME，可以填写多个匹配规则，多个匹配规则以竖线（|）隔开。例如：www.aliyun.com:203.0.3.55|203.3.44.67，表示www.aliyun.com域名下除203.0.3.55和203.3.44.67之外的其他IP都是被劫持的。
	//
	// example:
	//
	// www.aliyun.com:203.0.3.55|203.3.44.67
	DNSHijackWhitelist *string `json:"DNSHijackWhitelist,omitempty" xml:"DNSHijackWhitelist,omitempty"`
	// Specifies whether to disable the cache. 0: No. 1: Yes. Default value: 1.
	//
	// example:
	//
	// 1
	DisableCache *int32 `json:"DisableCache,omitempty" xml:"DisableCache,omitempty"`
	// Specifies whether to accept compressed files based on the HTTP Accept-Encoding request header. 0: No. 1: Yes. Default value: 0.
	//
	// example:
	//
	// 0
	DisableCompression *int32 `json:"DisableCompression,omitempty" xml:"DisableCompression,omitempty"`
	// 在页面加载过程中如果出现元素黑名单中配置的元素，不会请求加载该元素 。
	//
	// example:
	//
	// www.example.com/a.jpg
	ElementBlacklist *string `json:"ElementBlacklist,omitempty" xml:"ElementBlacklist,omitempty"`
	// Specifies whether to exclude invalid IP addresses.
	//
	// 	- 1: No
	//
	// 	- 0: Yes
	//
	// example:
	//
	// 0
	FilterInvalidIP *int32 `json:"FilterInvalidIP,omitempty" xml:"FilterInvalidIP,omitempty"`
	// 识别元素：设置浏览页面元素总个数。
	//
	// example:
	//
	// 0
	FlowHijackJumpTimes *int32 `json:"FlowHijackJumpTimes,omitempty" xml:"FlowHijackJumpTimes,omitempty"`
	// 劫持标识：设置匹配的关键信息。填写劫持判断关键字或关键元素，允许带星号（*）。
	//
	// example:
	//
	// aliyun
	FlowHijackLogo *string `json:"FlowHijackLogo,omitempty" xml:"FlowHijackLogo,omitempty"`
	// Specifies whether to ignore SSL certificate errors during browsing. 0: No. 1: Yes. Default value: 1.
	//
	// example:
	//
	// 0
	IgnoreCertificateError *int32 `json:"IgnoreCertificateError,omitempty" xml:"IgnoreCertificateError,omitempty"`
	// The monitoring timeout period. Unit: milliseconds. Default value: 20000. Minimum value: 5000. Maximum value: 300000.
	//
	// example:
	//
	// 20000
	MonitorTimeout *int32 `json:"MonitorTimeout,omitempty" xml:"MonitorTimeout,omitempty"`
	// 监测页面出现了域名设置之外的元素都属于页面被篡改。常见的表现形式为弹出广告、浮动广告、跳转等。
	//
	// 填写格式：域名:元素。元素支持填写通配符，可以填写多个元素，多个元素以竖线（|）隔开。例如：www.aliyun.com:|/cc/bb/a.gif|/vv/bb/cc.jpg，表示www.aliyun.com域名下除基础文档、/cc/bb/a.gif和/vv/bb/cc.jpg之外的其他元素都属于页面被篡改。
	//
	// example:
	//
	// www.aliyun.com:|/cc/bb/a.gif|/vv/bb/cc.jpg
	PageTamper *string `json:"PageTamper,omitempty" xml:"PageTamper,omitempty"`
	// Specifies whether to continue browsing after redirection. 0: No, 1:Yes. Default value: 1.
	//
	// example:
	//
	// 1
	Redirection *int32 `json:"Redirection,omitempty" xml:"Redirection,omitempty"`
	// The time threshold that is used to define a slow element. Unit: milliseconds. Default value: 5000. Minimum value: 1. Maximum value: 300000.
	//
	// example:
	//
	// 5000
	SlowElementThreshold *int64 `json:"SlowElementThreshold,omitempty" xml:"SlowElementThreshold,omitempty"`
	// The destination URL.
	//
	// example:
	//
	// http://www.aliyun.com
	TargetUrl *string `json:"TargetUrl,omitempty" xml:"TargetUrl,omitempty"`
	// 验证字符串即监测页面源代码中的某个任意字符串。若客户端返回的源码中包含任一黑名单中的字符串则报650验证字符串失败的错误。多个字符串以竖线（|）隔开。
	//
	// example:
	//
	// error
	VerifyStringBlacklist *string `json:"VerifyStringBlacklist,omitempty" xml:"VerifyStringBlacklist,omitempty"`
	// 验证字符串即监测页面源代码中的某个任意字符串。客户端返回的源码必须包含所有白名单中的字符串，否则报650验证字符串失败的错误。多个字符串以竖线（|）隔开。
	//
	// example:
	//
	// success
	VerifyStringWhitelist *string `json:"VerifyStringWhitelist,omitempty" xml:"VerifyStringWhitelist,omitempty"`
	// The maximum waiting time. Unit: milliseconds. Default value: 5000. Minimum value: 5000. Maximum value: 300000.
	//
	// example:
	//
	// 5000
	WaitCompletionTime *int64 `json:"WaitCompletionTime,omitempty" xml:"WaitCompletionTime,omitempty"`
}

func (s GetTimingSyntheticTaskResponseBodyDataMonitorConfWebsite) String() string {
	return tea.Prettify(s)
}

func (s GetTimingSyntheticTaskResponseBodyDataMonitorConfWebsite) GoString() string {
	return s.String()
}

func (s *GetTimingSyntheticTaskResponseBodyDataMonitorConfWebsite) SetAutomaticScrolling(v int32) *GetTimingSyntheticTaskResponseBodyDataMonitorConfWebsite {
	s.AutomaticScrolling = &v
	return s
}

func (s *GetTimingSyntheticTaskResponseBodyDataMonitorConfWebsite) SetCustomHeader(v int32) *GetTimingSyntheticTaskResponseBodyDataMonitorConfWebsite {
	s.CustomHeader = &v
	return s
}

func (s *GetTimingSyntheticTaskResponseBodyDataMonitorConfWebsite) SetCustomHeaderContent(v map[string]*string) *GetTimingSyntheticTaskResponseBodyDataMonitorConfWebsite {
	s.CustomHeaderContent = v
	return s
}

func (s *GetTimingSyntheticTaskResponseBodyDataMonitorConfWebsite) SetDNSHijackWhitelist(v string) *GetTimingSyntheticTaskResponseBodyDataMonitorConfWebsite {
	s.DNSHijackWhitelist = &v
	return s
}

func (s *GetTimingSyntheticTaskResponseBodyDataMonitorConfWebsite) SetDisableCache(v int32) *GetTimingSyntheticTaskResponseBodyDataMonitorConfWebsite {
	s.DisableCache = &v
	return s
}

func (s *GetTimingSyntheticTaskResponseBodyDataMonitorConfWebsite) SetDisableCompression(v int32) *GetTimingSyntheticTaskResponseBodyDataMonitorConfWebsite {
	s.DisableCompression = &v
	return s
}

func (s *GetTimingSyntheticTaskResponseBodyDataMonitorConfWebsite) SetElementBlacklist(v string) *GetTimingSyntheticTaskResponseBodyDataMonitorConfWebsite {
	s.ElementBlacklist = &v
	return s
}

func (s *GetTimingSyntheticTaskResponseBodyDataMonitorConfWebsite) SetFilterInvalidIP(v int32) *GetTimingSyntheticTaskResponseBodyDataMonitorConfWebsite {
	s.FilterInvalidIP = &v
	return s
}

func (s *GetTimingSyntheticTaskResponseBodyDataMonitorConfWebsite) SetFlowHijackJumpTimes(v int32) *GetTimingSyntheticTaskResponseBodyDataMonitorConfWebsite {
	s.FlowHijackJumpTimes = &v
	return s
}

func (s *GetTimingSyntheticTaskResponseBodyDataMonitorConfWebsite) SetFlowHijackLogo(v string) *GetTimingSyntheticTaskResponseBodyDataMonitorConfWebsite {
	s.FlowHijackLogo = &v
	return s
}

func (s *GetTimingSyntheticTaskResponseBodyDataMonitorConfWebsite) SetIgnoreCertificateError(v int32) *GetTimingSyntheticTaskResponseBodyDataMonitorConfWebsite {
	s.IgnoreCertificateError = &v
	return s
}

func (s *GetTimingSyntheticTaskResponseBodyDataMonitorConfWebsite) SetMonitorTimeout(v int32) *GetTimingSyntheticTaskResponseBodyDataMonitorConfWebsite {
	s.MonitorTimeout = &v
	return s
}

func (s *GetTimingSyntheticTaskResponseBodyDataMonitorConfWebsite) SetPageTamper(v string) *GetTimingSyntheticTaskResponseBodyDataMonitorConfWebsite {
	s.PageTamper = &v
	return s
}

func (s *GetTimingSyntheticTaskResponseBodyDataMonitorConfWebsite) SetRedirection(v int32) *GetTimingSyntheticTaskResponseBodyDataMonitorConfWebsite {
	s.Redirection = &v
	return s
}

func (s *GetTimingSyntheticTaskResponseBodyDataMonitorConfWebsite) SetSlowElementThreshold(v int64) *GetTimingSyntheticTaskResponseBodyDataMonitorConfWebsite {
	s.SlowElementThreshold = &v
	return s
}

func (s *GetTimingSyntheticTaskResponseBodyDataMonitorConfWebsite) SetTargetUrl(v string) *GetTimingSyntheticTaskResponseBodyDataMonitorConfWebsite {
	s.TargetUrl = &v
	return s
}

func (s *GetTimingSyntheticTaskResponseBodyDataMonitorConfWebsite) SetVerifyStringBlacklist(v string) *GetTimingSyntheticTaskResponseBodyDataMonitorConfWebsite {
	s.VerifyStringBlacklist = &v
	return s
}

func (s *GetTimingSyntheticTaskResponseBodyDataMonitorConfWebsite) SetVerifyStringWhitelist(v string) *GetTimingSyntheticTaskResponseBodyDataMonitorConfWebsite {
	s.VerifyStringWhitelist = &v
	return s
}

func (s *GetTimingSyntheticTaskResponseBodyDataMonitorConfWebsite) SetWaitCompletionTime(v int64) *GetTimingSyntheticTaskResponseBodyDataMonitorConfWebsite {
	s.WaitCompletionTime = &v
	return s
}

type GetTimingSyntheticTaskResponseBodyDataMonitors struct {
	// The city code.
	//
	// example:
	//
	// 110100
	CityCode *string `json:"CityCode,omitempty" xml:"CityCode,omitempty"`
	// The client type of the monitoring point. Valid values: 1: data center. 2: Internet. 3: mobile device. 4: ECS instance.
	//
	// example:
	//
	// 1
	ClientType *int32 `json:"ClientType,omitempty" xml:"ClientType,omitempty"`
	// The carrier code.
	//
	// example:
	//
	// 1
	OperatorCode *string `json:"OperatorCode,omitempty" xml:"OperatorCode,omitempty"`
}

func (s GetTimingSyntheticTaskResponseBodyDataMonitors) String() string {
	return tea.Prettify(s)
}

func (s GetTimingSyntheticTaskResponseBodyDataMonitors) GoString() string {
	return s.String()
}

func (s *GetTimingSyntheticTaskResponseBodyDataMonitors) SetCityCode(v string) *GetTimingSyntheticTaskResponseBodyDataMonitors {
	s.CityCode = &v
	return s
}

func (s *GetTimingSyntheticTaskResponseBodyDataMonitors) SetClientType(v int32) *GetTimingSyntheticTaskResponseBodyDataMonitors {
	s.ClientType = &v
	return s
}

func (s *GetTimingSyntheticTaskResponseBodyDataMonitors) SetOperatorCode(v string) *GetTimingSyntheticTaskResponseBodyDataMonitors {
	s.OperatorCode = &v
	return s
}

type GetTimingSyntheticTaskResponseBodyDataTags struct {
	// The key of the tag.
	//
	// example:
	//
	// user1
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The value of the tag.
	//
	// example:
	//
	// myweb
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s GetTimingSyntheticTaskResponseBodyDataTags) String() string {
	return tea.Prettify(s)
}

func (s GetTimingSyntheticTaskResponseBodyDataTags) GoString() string {
	return s.String()
}

func (s *GetTimingSyntheticTaskResponseBodyDataTags) SetKey(v string) *GetTimingSyntheticTaskResponseBodyDataTags {
	s.Key = &v
	return s
}

func (s *GetTimingSyntheticTaskResponseBodyDataTags) SetValue(v string) *GetTimingSyntheticTaskResponseBodyDataTags {
	s.Value = &v
	return s
}

type GetTimingSyntheticTaskResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetTimingSyntheticTaskResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetTimingSyntheticTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s GetTimingSyntheticTaskResponse) GoString() string {
	return s.String()
}

func (s *GetTimingSyntheticTaskResponse) SetHeaders(v map[string]*string) *GetTimingSyntheticTaskResponse {
	s.Headers = v
	return s
}

func (s *GetTimingSyntheticTaskResponse) SetStatusCode(v int32) *GetTimingSyntheticTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *GetTimingSyntheticTaskResponse) SetBody(v *GetTimingSyntheticTaskResponseBody) *GetTimingSyntheticTaskResponse {
	s.Body = v
	return s
}

type GetTraceRequest struct {
	// The end of the time range to query. Unit: milliseconds.
	//
	// > If the ID of the trace is 30 characters in length, this parameter is optional. Otherwise, this parameter is required.
	//
	// example:
	//
	// 1623827603000
	EndTime *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The region ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The beginning of the time range to query. Unit: milliseconds.
	//
	// > If the ID of the trace is 30 characters in length, this parameter is optional. Otherwise, this parameter is required.
	//
	// example:
	//
	// 1623827602000
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The trace ID. You can log on to the ARMS console and obtain the trace ID on the **Trace Query*	- page or **Interface Snapshot*	- tab.
	//
	// This parameter is required.
	//
	// example:
	//
	// ac14001a15954493811405707d****
	TraceID *string `json:"TraceID,omitempty" xml:"TraceID,omitempty"`
}

func (s GetTraceRequest) String() string {
	return tea.Prettify(s)
}

func (s GetTraceRequest) GoString() string {
	return s.String()
}

func (s *GetTraceRequest) SetEndTime(v int64) *GetTraceRequest {
	s.EndTime = &v
	return s
}

func (s *GetTraceRequest) SetRegionId(v string) *GetTraceRequest {
	s.RegionId = &v
	return s
}

func (s *GetTraceRequest) SetStartTime(v int64) *GetTraceRequest {
	s.StartTime = &v
	return s
}

func (s *GetTraceRequest) SetTraceID(v string) *GetTraceRequest {
	s.TraceID = &v
	return s
}

type GetTraceResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 6A9AEA84-7186-4D8D-B498-4585C6A2****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The details of the trace.
	Spans []*GetTraceResponseBodySpans `json:"Spans,omitempty" xml:"Spans,omitempty" type:"Repeated"`
}

func (s GetTraceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetTraceResponseBody) GoString() string {
	return s.String()
}

func (s *GetTraceResponseBody) SetRequestId(v string) *GetTraceResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetTraceResponseBody) SetSpans(v []*GetTraceResponseBodySpans) *GetTraceResponseBody {
	s.Spans = v
	return s
}

type GetTraceResponseBodySpans struct {
	// The child spans of the current span.
	Children []map[string]interface{} `json:"Children,omitempty" xml:"Children,omitempty" type:"Repeated"`
	// The amount of time consumed by the trace. Unit: milliseconds.
	//
	// example:
	//
	// 1000
	Duration *int64 `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// Indicates whether a method stack was provided.
	//
	// 	- `true`: A method stack was provided.
	//
	// 	- `false`: No method stack was provided.
	//
	// example:
	//
	// false
	HaveStack *bool `json:"HaveStack,omitempty" xml:"HaveStack,omitempty"`
	// The log events in the trace.
	LogEventList []*GetTraceResponseBodySpansLogEventList `json:"LogEventList,omitempty" xml:"LogEventList,omitempty" type:"Repeated"`
	// The name of the traced span.
	//
	// example:
	//
	// /api/demo
	OperationName *string `json:"OperationName,omitempty" xml:"OperationName,omitempty"`
	// The ID of the parent span.
	//
	// example:
	//
	// 18
	ParentSpanId *string `json:"ParentSpanId,omitempty" xml:"ParentSpanId,omitempty"`
	// The status code.
	//
	// example:
	//
	// 222
	ResultCode *string `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	// The ID of the RPC mode.
	//
	// example:
	//
	// 0
	RpcId *string `json:"RpcId,omitempty" xml:"RpcId,omitempty"`
	// The type of the remote procedure call (RPC) mode.
	//
	// - 0 http
	//
	// - 25 http_client
	//
	// - 1 hsf_client
	//
	// - 2 hsf
	//
	// - 40 local
	//
	// - 41 async
	//
	// - 52 DB2
	//
	// - 53 Informix
	//
	// - 54 SequoiaDB
	//
	// - 55 Gbase
	//
	// - 56 GaussDB
	//
	// - 57 KingBase
	//
	// - 58 infuxdb
	//
	// - 59 clickhouse
	//
	// - 60 mysql
	//
	// - 61 mysql
	//
	// - 62 oracle
	//
	// - 63 postgresql
	//
	// - 64 mongodb
	//
	// - 65 ppas
	//
	// - 66 sqlserver
	//
	// - 67 mariadb
	//
	// - 68 dmdb
	//
	// - 69 oceanbase
	//
	// - 70 redis
	//
	// - 71 memcached
	//
	// - 72 elasticsearch
	//
	// - 73 kudu
	//
	// - 4 tddl
	//
	// - 5 tair
	//
	// - 13 mq_client
	//
	// - 252 mq
	//
	// - 23 kafka_client
	//
	// - 256 kafka
	//
	// - 3 notify_client
	//
	// - 254 notify
	//
	// - 7 dubbo_client
	//
	// - 8 dubbo
	//
	// - 11 dsf_client
	//
	// - 12 dsf
	//
	// - 9 grpc
	//
	// - 10 grpc_client
	//
	// - 16 thrift
	//
	// - 17 thrift_client
	//
	// - 18 sofa
	//
	// - 19 sofa_client
	//
	// - -1 unknown
	//
	// - 98 user_method
	//
	// - 100 root
	//
	// - 101 client
	//
	// - 102 server
	//
	// - 103 producer
	//
	// - 104 consumer
	//
	// - 105 db
	//
	// - 106 xtrace_other
	//
	// - 1301 schedulerx
	//
	// - 1302 XXL_Job
	//
	// - 1303 Spring_Scheduled
	//
	// - 1304 Quartz
	//
	// - 1305 ElasticJob
	//
	// - 1308 Jdk_Timer
	//
	// example:
	//
	// 1
	RpcType *int32 `json:"RpcType,omitempty" xml:"RpcType,omitempty"`
	// The IP address of the host where the application resides.
	//
	// example:
	//
	// 172.20.XX.XX
	ServiceIp *string `json:"ServiceIp,omitempty" xml:"ServiceIp,omitempty"`
	// The name of the application.
	//
	// example:
	//
	// arms-demo
	ServiceName *string `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
	// The span ID.
	//
	// example:
	//
	// 1234
	SpanId *string `json:"SpanId,omitempty" xml:"SpanId,omitempty"`
	// The tags of the trace.
	TagEntryList []*GetTraceResponseBodySpansTagEntryList `json:"TagEntryList,omitempty" xml:"TagEntryList,omitempty" type:"Repeated"`
	// The timestamp generated when the span was generated.
	//
	// example:
	//
	// 1590388651
	Timestamp *int64 `json:"Timestamp,omitempty" xml:"Timestamp,omitempty"`
	// The trace ID.
	//
	// example:
	//
	// ac14001a15954493811405707d****
	TraceID *string `json:"TraceID,omitempty" xml:"TraceID,omitempty"`
}

func (s GetTraceResponseBodySpans) String() string {
	return tea.Prettify(s)
}

func (s GetTraceResponseBodySpans) GoString() string {
	return s.String()
}

func (s *GetTraceResponseBodySpans) SetChildren(v []map[string]interface{}) *GetTraceResponseBodySpans {
	s.Children = v
	return s
}

func (s *GetTraceResponseBodySpans) SetDuration(v int64) *GetTraceResponseBodySpans {
	s.Duration = &v
	return s
}

func (s *GetTraceResponseBodySpans) SetHaveStack(v bool) *GetTraceResponseBodySpans {
	s.HaveStack = &v
	return s
}

func (s *GetTraceResponseBodySpans) SetLogEventList(v []*GetTraceResponseBodySpansLogEventList) *GetTraceResponseBodySpans {
	s.LogEventList = v
	return s
}

func (s *GetTraceResponseBodySpans) SetOperationName(v string) *GetTraceResponseBodySpans {
	s.OperationName = &v
	return s
}

func (s *GetTraceResponseBodySpans) SetParentSpanId(v string) *GetTraceResponseBodySpans {
	s.ParentSpanId = &v
	return s
}

func (s *GetTraceResponseBodySpans) SetResultCode(v string) *GetTraceResponseBodySpans {
	s.ResultCode = &v
	return s
}

func (s *GetTraceResponseBodySpans) SetRpcId(v string) *GetTraceResponseBodySpans {
	s.RpcId = &v
	return s
}

func (s *GetTraceResponseBodySpans) SetRpcType(v int32) *GetTraceResponseBodySpans {
	s.RpcType = &v
	return s
}

func (s *GetTraceResponseBodySpans) SetServiceIp(v string) *GetTraceResponseBodySpans {
	s.ServiceIp = &v
	return s
}

func (s *GetTraceResponseBodySpans) SetServiceName(v string) *GetTraceResponseBodySpans {
	s.ServiceName = &v
	return s
}

func (s *GetTraceResponseBodySpans) SetSpanId(v string) *GetTraceResponseBodySpans {
	s.SpanId = &v
	return s
}

func (s *GetTraceResponseBodySpans) SetTagEntryList(v []*GetTraceResponseBodySpansTagEntryList) *GetTraceResponseBodySpans {
	s.TagEntryList = v
	return s
}

func (s *GetTraceResponseBodySpans) SetTimestamp(v int64) *GetTraceResponseBodySpans {
	s.Timestamp = &v
	return s
}

func (s *GetTraceResponseBodySpans) SetTraceID(v string) *GetTraceResponseBodySpans {
	s.TraceID = &v
	return s
}

type GetTraceResponseBodySpansLogEventList struct {
	// The tags of the trace.
	TagEntryList []*GetTraceResponseBodySpansLogEventListTagEntryList `json:"TagEntryList,omitempty" xml:"TagEntryList,omitempty" type:"Repeated"`
	// The timestamp when the log event was generated.
	//
	// example:
	//
	// 1590388651
	Timestamp *int64 `json:"Timestamp,omitempty" xml:"Timestamp,omitempty"`
}

func (s GetTraceResponseBodySpansLogEventList) String() string {
	return tea.Prettify(s)
}

func (s GetTraceResponseBodySpansLogEventList) GoString() string {
	return s.String()
}

func (s *GetTraceResponseBodySpansLogEventList) SetTagEntryList(v []*GetTraceResponseBodySpansLogEventListTagEntryList) *GetTraceResponseBodySpansLogEventList {
	s.TagEntryList = v
	return s
}

func (s *GetTraceResponseBodySpansLogEventList) SetTimestamp(v int64) *GetTraceResponseBodySpansLogEventList {
	s.Timestamp = &v
	return s
}

type GetTraceResponseBodySpansLogEventListTagEntryList struct {
	// The key of the tag.
	//
	// example:
	//
	// http.status.code
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The value of the tag.
	//
	// example:
	//
	// 200
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s GetTraceResponseBodySpansLogEventListTagEntryList) String() string {
	return tea.Prettify(s)
}

func (s GetTraceResponseBodySpansLogEventListTagEntryList) GoString() string {
	return s.String()
}

func (s *GetTraceResponseBodySpansLogEventListTagEntryList) SetKey(v string) *GetTraceResponseBodySpansLogEventListTagEntryList {
	s.Key = &v
	return s
}

func (s *GetTraceResponseBodySpansLogEventListTagEntryList) SetValue(v string) *GetTraceResponseBodySpansLogEventListTagEntryList {
	s.Value = &v
	return s
}

type GetTraceResponseBodySpansTagEntryList struct {
	// The key of the tag.
	//
	// example:
	//
	// http.status.code
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The value of the tag.
	//
	// example:
	//
	// 200
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s GetTraceResponseBodySpansTagEntryList) String() string {
	return tea.Prettify(s)
}

func (s GetTraceResponseBodySpansTagEntryList) GoString() string {
	return s.String()
}

func (s *GetTraceResponseBodySpansTagEntryList) SetKey(v string) *GetTraceResponseBodySpansTagEntryList {
	s.Key = &v
	return s
}

func (s *GetTraceResponseBodySpansTagEntryList) SetValue(v string) *GetTraceResponseBodySpansTagEntryList {
	s.Value = &v
	return s
}

type GetTraceResponse struct {
	Headers    map[string]*string    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetTraceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetTraceResponse) String() string {
	return tea.Prettify(s)
}

func (s GetTraceResponse) GoString() string {
	return s.String()
}

func (s *GetTraceResponse) SetHeaders(v map[string]*string) *GetTraceResponse {
	s.Headers = v
	return s
}

func (s *GetTraceResponse) SetStatusCode(v int32) *GetTraceResponse {
	s.StatusCode = &v
	return s
}

func (s *GetTraceResponse) SetBody(v *GetTraceResponseBody) *GetTraceResponse {
	s.Body = v
	return s
}

type GetTraceAppRequest struct {
	// The process identifier (PID) of the application. For more information about how to obtain the PID, see [Obtain the PID of an application](https://www.alibabacloud.com/help/zh/doc-detail/186100.htm?spm=a2cdw.13409063.0.0.7a72281f0bkTfx#title-imy-7gj-qhr).
	//
	// This parameter is required.
	//
	// example:
	//
	// b590lhguqs@d8deedfa9bf****
	Pid *string `json:"Pid,omitempty" xml:"Pid,omitempty"`
	// The region ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The list of tags.
	Tags []*GetTraceAppRequestTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
}

func (s GetTraceAppRequest) String() string {
	return tea.Prettify(s)
}

func (s GetTraceAppRequest) GoString() string {
	return s.String()
}

func (s *GetTraceAppRequest) SetPid(v string) *GetTraceAppRequest {
	s.Pid = &v
	return s
}

func (s *GetTraceAppRequest) SetRegionId(v string) *GetTraceAppRequest {
	s.RegionId = &v
	return s
}

func (s *GetTraceAppRequest) SetTags(v []*GetTraceAppRequestTags) *GetTraceAppRequest {
	s.Tags = v
	return s
}

type GetTraceAppRequestTags struct {
	// The tag key.
	//
	// example:
	//
	// TestKey
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The tag value.
	//
	// example:
	//
	// TestValue
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s GetTraceAppRequestTags) String() string {
	return tea.Prettify(s)
}

func (s GetTraceAppRequestTags) GoString() string {
	return s.String()
}

func (s *GetTraceAppRequestTags) SetKey(v string) *GetTraceAppRequestTags {
	s.Key = &v
	return s
}

func (s *GetTraceAppRequestTags) SetValue(v string) *GetTraceAppRequestTags {
	s.Value = &v
	return s
}

type GetTraceAppResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// D80ADAAC-8C32-5479-BD14-C28CF832****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The information about the array object.
	TraceApp *GetTraceAppResponseBodyTraceApp `json:"TraceApp,omitempty" xml:"TraceApp,omitempty" type:"Struct"`
}

func (s GetTraceAppResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetTraceAppResponseBody) GoString() string {
	return s.String()
}

func (s *GetTraceAppResponseBody) SetRequestId(v string) *GetTraceAppResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetTraceAppResponseBody) SetTraceApp(v *GetTraceAppResponseBodyTraceApp) *GetTraceAppResponseBody {
	s.TraceApp = v
	return s
}

type GetTraceAppResponseBodyTraceApp struct {
	// The application ID.
	//
	// example:
	//
	// 123
	AppId *int64 `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// The name of the application.
	//
	// example:
	//
	// arms-k8s-demo
	AppName   *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	// The timestamp generated when the task was created.
	//
	// example:
	//
	// 1576599253000
	CreateTime *int64 `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The aliases of the application.
	Labels   []*string `json:"Labels,omitempty" xml:"Labels,omitempty" type:"Repeated"`
	Language *string   `json:"Language,omitempty" xml:"Language,omitempty"`
	// The process identifier (PID) of the application.
	//
	// example:
	//
	// b590lhguqs@d8deedfa9bf****
	Pid *string `json:"Pid,omitempty" xml:"Pid,omitempty"`
	// The region ID.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the resource group.
	//
	// example:
	//
	// rg-acfmxyexli2****
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	// Indicates whether the application is displayed in the Application Real-Time Monitoring Service (ARMS) console. Valid values:
	//
	// 	- `true`: yes
	//
	// 	- `false`: no
	//
	// example:
	//
	// true
	Show *bool `json:"Show,omitempty" xml:"Show,omitempty"`
	// The source of the application.
	//
	// example:
	//
	// ACSK8S
	Source *string `json:"Source,omitempty" xml:"Source,omitempty"`
	// A list of key-value pairs.
	Tags []*GetTraceAppResponseBodyTraceAppTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
	// The type of the monitoring task. Valid values:
	//
	// 	- `TRACE`: Application Monitoring
	//
	// 	- `RETCODE`: Browser Monitoring
	//
	// example:
	//
	// TRACE
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// The timestamp generated when the task information was updated.
	//
	// example:
	//
	// 1635700348000
	UpdateTime *int64 `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
	// The user ID.
	//
	// example:
	//
	// 113197164949****
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s GetTraceAppResponseBodyTraceApp) String() string {
	return tea.Prettify(s)
}

func (s GetTraceAppResponseBodyTraceApp) GoString() string {
	return s.String()
}

func (s *GetTraceAppResponseBodyTraceApp) SetAppId(v int64) *GetTraceAppResponseBodyTraceApp {
	s.AppId = &v
	return s
}

func (s *GetTraceAppResponseBodyTraceApp) SetAppName(v string) *GetTraceAppResponseBodyTraceApp {
	s.AppName = &v
	return s
}

func (s *GetTraceAppResponseBodyTraceApp) SetClusterId(v string) *GetTraceAppResponseBodyTraceApp {
	s.ClusterId = &v
	return s
}

func (s *GetTraceAppResponseBodyTraceApp) SetCreateTime(v int64) *GetTraceAppResponseBodyTraceApp {
	s.CreateTime = &v
	return s
}

func (s *GetTraceAppResponseBodyTraceApp) SetLabels(v []*string) *GetTraceAppResponseBodyTraceApp {
	s.Labels = v
	return s
}

func (s *GetTraceAppResponseBodyTraceApp) SetLanguage(v string) *GetTraceAppResponseBodyTraceApp {
	s.Language = &v
	return s
}

func (s *GetTraceAppResponseBodyTraceApp) SetPid(v string) *GetTraceAppResponseBodyTraceApp {
	s.Pid = &v
	return s
}

func (s *GetTraceAppResponseBodyTraceApp) SetRegionId(v string) *GetTraceAppResponseBodyTraceApp {
	s.RegionId = &v
	return s
}

func (s *GetTraceAppResponseBodyTraceApp) SetResourceGroupId(v string) *GetTraceAppResponseBodyTraceApp {
	s.ResourceGroupId = &v
	return s
}

func (s *GetTraceAppResponseBodyTraceApp) SetShow(v bool) *GetTraceAppResponseBodyTraceApp {
	s.Show = &v
	return s
}

func (s *GetTraceAppResponseBodyTraceApp) SetSource(v string) *GetTraceAppResponseBodyTraceApp {
	s.Source = &v
	return s
}

func (s *GetTraceAppResponseBodyTraceApp) SetTags(v []*GetTraceAppResponseBodyTraceAppTags) *GetTraceAppResponseBodyTraceApp {
	s.Tags = v
	return s
}

func (s *GetTraceAppResponseBodyTraceApp) SetType(v string) *GetTraceAppResponseBodyTraceApp {
	s.Type = &v
	return s
}

func (s *GetTraceAppResponseBodyTraceApp) SetUpdateTime(v int64) *GetTraceAppResponseBodyTraceApp {
	s.UpdateTime = &v
	return s
}

func (s *GetTraceAppResponseBodyTraceApp) SetUserId(v string) *GetTraceAppResponseBodyTraceApp {
	s.UserId = &v
	return s
}

type GetTraceAppResponseBodyTraceAppTags struct {
	// The tag key.
	//
	// example:
	//
	// TestKey
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The tag value.
	//
	// example:
	//
	// TestValue
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s GetTraceAppResponseBodyTraceAppTags) String() string {
	return tea.Prettify(s)
}

func (s GetTraceAppResponseBodyTraceAppTags) GoString() string {
	return s.String()
}

func (s *GetTraceAppResponseBodyTraceAppTags) SetKey(v string) *GetTraceAppResponseBodyTraceAppTags {
	s.Key = &v
	return s
}

func (s *GetTraceAppResponseBodyTraceAppTags) SetValue(v string) *GetTraceAppResponseBodyTraceAppTags {
	s.Value = &v
	return s
}

type GetTraceAppResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetTraceAppResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetTraceAppResponse) String() string {
	return tea.Prettify(s)
}

func (s GetTraceAppResponse) GoString() string {
	return s.String()
}

func (s *GetTraceAppResponse) SetHeaders(v map[string]*string) *GetTraceAppResponse {
	s.Headers = v
	return s
}

func (s *GetTraceAppResponse) SetStatusCode(v int32) *GetTraceAppResponse {
	s.StatusCode = &v
	return s
}

func (s *GetTraceAppResponse) SetBody(v *GetTraceAppResponseBody) *GetTraceAppResponse {
	s.Body = v
	return s
}

type ImportAppAlertRulesRequest struct {
	// The IDs of the alert contact groups. The value must be a JSON array.
	//
	// example:
	//
	// [123, 234]
	ContactGroupIds *string `json:"ContactGroupIds,omitempty" xml:"ContactGroupIds,omitempty"`
	// Specifies whether to enable the alert rule after it is created. Default value: `false`.
	//
	// 	- `true`: enables the alert rule.
	//
	// 	- `false`: disables the alert rule.
	//
	// example:
	//
	// true
	IsAutoStart *bool `json:"IsAutoStart,omitempty" xml:"IsAutoStart,omitempty"`
	// The process identifiers (PIDs) of the applications associated with the alert rule. The value must be a JSON array. For more information about how to obtain the PID, see [Obtain the PID of an application](~~186100#section-bkl-3j6-ezg~~).
	//
	// This parameter is required.
	//
	// example:
	//
	// ["atc889zkcf@d8deedfa9bfxxxx", "acd129bfcf@d5daebfa6cdxxxx"]
	Pids *string `json:"Pids,omitempty" xml:"Pids,omitempty"`
	// The ID of the region where the associated applications reside.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The list of tags.
	Tags []*ImportAppAlertRulesRequestTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
	// The configurations of the alert template based on which you want to create an alert rule. The value must be a JSON string. You must set at least one of the **TemplateAlertId*	- and **TemplageAlertConfig*	- parameters. If you set both parameters, the **TemplateAlertId*	- parameter prevails. For more information about the TemplageAlertConfig parameter, see the following **additional information about the TemplageAlertConfig parameter**.
	//
	// example:
	//
	// [ { "contactGroupIds": "381", "alertType": 5, "alarmContext": { "subTitle": "", "content": "Alarm name: $alarm name\\nFilter condition: $filter\\nAlarm time : $Alarm time\\nAlarm content: $Alarm content\\nNote: Before the recovery email is received, the alarm is in continuous alarm, and you will be reminded again after 24 hours!" }, "alertLevel": "WARN", " metricParam": { "appId": "70901", "pid": "atc889zkcf@d8deedfa9bf****", "type": "TXN", "dimensions": [ { "type": "STATIC", "value ": "\\\\/hello_test_api_address\\\\/test1", "key": "rpc" } ] }, "alertWay": [ "SMS", "MAIL", "DING_ROBOT" ], "alertRule": { "rules" : [ { "measure": "appstat.txn.rt", "alias": "Entry call response time_ms", "aggregates": "AVG", "nValue": 1, "value": 1, "operator ": "CURRENT_GTE" } ], "operator": "|" }, "title": "Alarm template alarm name", "config": "{\\"continuous\\":false,\\"dataRevision\\":2, \\"ownerId\\":\\"123412341234\\"}", "notice": { "noticeStartTime": 1480521600000, "startTime": 1480521600000, "endTime": 1480607940000, "noticeEndTime": 1480607940000 }, "stat us": "NON " } ]
	TemplageAlertConfig *string `json:"TemplageAlertConfig,omitempty" xml:"TemplageAlertConfig,omitempty"`
	// The ID of the alert template. You must set at least one of the **TemplateAlertId*	- and **TemplageAlertConfig*	- parameters. If you set both parameters, the **TemplateAlertId*	- parameter prevails.
	//
	// example:
	//
	// 324324234
	TemplateAlertId *string `json:"TemplateAlertId,omitempty" xml:"TemplateAlertId,omitempty"`
}

func (s ImportAppAlertRulesRequest) String() string {
	return tea.Prettify(s)
}

func (s ImportAppAlertRulesRequest) GoString() string {
	return s.String()
}

func (s *ImportAppAlertRulesRequest) SetContactGroupIds(v string) *ImportAppAlertRulesRequest {
	s.ContactGroupIds = &v
	return s
}

func (s *ImportAppAlertRulesRequest) SetIsAutoStart(v bool) *ImportAppAlertRulesRequest {
	s.IsAutoStart = &v
	return s
}

func (s *ImportAppAlertRulesRequest) SetPids(v string) *ImportAppAlertRulesRequest {
	s.Pids = &v
	return s
}

func (s *ImportAppAlertRulesRequest) SetRegionId(v string) *ImportAppAlertRulesRequest {
	s.RegionId = &v
	return s
}

func (s *ImportAppAlertRulesRequest) SetTags(v []*ImportAppAlertRulesRequestTags) *ImportAppAlertRulesRequest {
	s.Tags = v
	return s
}

func (s *ImportAppAlertRulesRequest) SetTemplageAlertConfig(v string) *ImportAppAlertRulesRequest {
	s.TemplageAlertConfig = &v
	return s
}

func (s *ImportAppAlertRulesRequest) SetTemplateAlertId(v string) *ImportAppAlertRulesRequest {
	s.TemplateAlertId = &v
	return s
}

type ImportAppAlertRulesRequestTags struct {
	// The tag key.
	//
	// example:
	//
	// type
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The tag value.
	//
	// example:
	//
	// prod
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s ImportAppAlertRulesRequestTags) String() string {
	return tea.Prettify(s)
}

func (s ImportAppAlertRulesRequestTags) GoString() string {
	return s.String()
}

func (s *ImportAppAlertRulesRequestTags) SetKey(v string) *ImportAppAlertRulesRequestTags {
	s.Key = &v
	return s
}

func (s *ImportAppAlertRulesRequestTags) SetValue(v string) *ImportAppAlertRulesRequestTags {
	s.Value = &v
	return s
}

type ImportAppAlertRulesResponseBody struct {
	// The ID of the alert rule.
	//
	// example:
	//
	// [12174**]
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// A5EC8221-08F2-4C95-9AF1-49FD998C****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ImportAppAlertRulesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ImportAppAlertRulesResponseBody) GoString() string {
	return s.String()
}

func (s *ImportAppAlertRulesResponseBody) SetData(v string) *ImportAppAlertRulesResponseBody {
	s.Data = &v
	return s
}

func (s *ImportAppAlertRulesResponseBody) SetRequestId(v string) *ImportAppAlertRulesResponseBody {
	s.RequestId = &v
	return s
}

type ImportAppAlertRulesResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ImportAppAlertRulesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ImportAppAlertRulesResponse) String() string {
	return tea.Prettify(s)
}

func (s ImportAppAlertRulesResponse) GoString() string {
	return s.String()
}

func (s *ImportAppAlertRulesResponse) SetHeaders(v map[string]*string) *ImportAppAlertRulesResponse {
	s.Headers = v
	return s
}

func (s *ImportAppAlertRulesResponse) SetStatusCode(v int32) *ImportAppAlertRulesResponse {
	s.StatusCode = &v
	return s
}

func (s *ImportAppAlertRulesResponse) SetBody(v *ImportAppAlertRulesResponseBody) *ImportAppAlertRulesResponse {
	s.Body = v
	return s
}

type InitEnvironmentRequest struct {
	// The language. Valid values: zh and en. Default value: zh.
	//
	// example:
	//
	// zh
	AliyunLang *string `json:"AliyunLang,omitempty" xml:"AliyunLang,omitempty"`
	// Whether to create a Token in order to enhance the security of data retrieval.
	//
	// example:
	//
	// false
	CreateAuthToken *bool `json:"CreateAuthToken,omitempty" xml:"CreateAuthToken,omitempty"`
	// The ID of the environment instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// env-xxx
	EnvironmentId *string `json:"EnvironmentId,omitempty" xml:"EnvironmentId,omitempty"`
	// Whether agents or exporters are managed. Valid values:
	//
	// 	- none: No. By default, no managed agents or exporters are provided for ACK clusters.
	//
	// 	- agent: Agents are managed. By default, managed agents are provided for ASK clusters, ACS clusters, and ACK One clusters.
	//
	// 	- agent-exproter: Agents and exporters are managed. By default, managed agents and exporters are provided for cloud services.
	//
	// example:
	//
	// agent
	ManagedType *string `json:"ManagedType,omitempty" xml:"ManagedType,omitempty"`
	// The region ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s InitEnvironmentRequest) String() string {
	return tea.Prettify(s)
}

func (s InitEnvironmentRequest) GoString() string {
	return s.String()
}

func (s *InitEnvironmentRequest) SetAliyunLang(v string) *InitEnvironmentRequest {
	s.AliyunLang = &v
	return s
}

func (s *InitEnvironmentRequest) SetCreateAuthToken(v bool) *InitEnvironmentRequest {
	s.CreateAuthToken = &v
	return s
}

func (s *InitEnvironmentRequest) SetEnvironmentId(v string) *InitEnvironmentRequest {
	s.EnvironmentId = &v
	return s
}

func (s *InitEnvironmentRequest) SetManagedType(v string) *InitEnvironmentRequest {
	s.ManagedType = &v
	return s
}

func (s *InitEnvironmentRequest) SetRegionId(v string) *InitEnvironmentRequest {
	s.RegionId = &v
	return s
}

type InitEnvironmentResponseBody struct {
	// The status code. The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The result of the operation.
	//
	// example:
	//
	// success
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// The returned message.
	//
	// example:
	//
	// message
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 4D6C358A-A58B-4F4B-94CE-F5AAF023****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s InitEnvironmentResponseBody) String() string {
	return tea.Prettify(s)
}

func (s InitEnvironmentResponseBody) GoString() string {
	return s.String()
}

func (s *InitEnvironmentResponseBody) SetCode(v int32) *InitEnvironmentResponseBody {
	s.Code = &v
	return s
}

func (s *InitEnvironmentResponseBody) SetData(v string) *InitEnvironmentResponseBody {
	s.Data = &v
	return s
}

func (s *InitEnvironmentResponseBody) SetMessage(v string) *InitEnvironmentResponseBody {
	s.Message = &v
	return s
}

func (s *InitEnvironmentResponseBody) SetRequestId(v string) *InitEnvironmentResponseBody {
	s.RequestId = &v
	return s
}

type InitEnvironmentResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *InitEnvironmentResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s InitEnvironmentResponse) String() string {
	return tea.Prettify(s)
}

func (s InitEnvironmentResponse) GoString() string {
	return s.String()
}

func (s *InitEnvironmentResponse) SetHeaders(v map[string]*string) *InitEnvironmentResponse {
	s.Headers = v
	return s
}

func (s *InitEnvironmentResponse) SetStatusCode(v int32) *InitEnvironmentResponse {
	s.StatusCode = &v
	return s
}

func (s *InitEnvironmentResponse) SetBody(v *InitEnvironmentResponseBody) *InitEnvironmentResponse {
	s.Body = v
	return s
}

type InstallAddonRequest struct {
	// The version of the add-on.
	//
	// This parameter is required.
	//
	// example:
	//
	// 0.0.1
	AddonVersion *string `json:"AddonVersion,omitempty" xml:"AddonVersion,omitempty"`
	// The language. Valid values: zh and en. Default value: zh.
	//
	// example:
	//
	// zh
	AliyunLang *string `json:"AliyunLang,omitempty" xml:"AliyunLang,omitempty"`
	// Specifies whether to perform only a dry run, without performing the actual request. Default value: false.
	//
	// example:
	//
	// false
	DryRun *bool `json:"DryRun,omitempty" xml:"DryRun,omitempty"`
	// The environment ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// env-xxx
	EnvironmentId *string `json:"EnvironmentId,omitempty" xml:"EnvironmentId,omitempty"`
	// The name of the add-on.
	//
	// This parameter is required.
	//
	// example:
	//
	// mysql
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The region ID.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The name of the add-on after it is installed. If you do not specify this parameter, a default rule name is generated.
	//
	// example:
	//
	// mysql-xxxxx
	ReleaseName *string `json:"ReleaseName,omitempty" xml:"ReleaseName,omitempty"`
	// The metadata.
	//
	// example:
	//
	// {"host":"mysql-service.default","port":3306,"username":"root","password":"roots"}
	Values *string `json:"Values,omitempty" xml:"Values,omitempty"`
}

func (s InstallAddonRequest) String() string {
	return tea.Prettify(s)
}

func (s InstallAddonRequest) GoString() string {
	return s.String()
}

func (s *InstallAddonRequest) SetAddonVersion(v string) *InstallAddonRequest {
	s.AddonVersion = &v
	return s
}

func (s *InstallAddonRequest) SetAliyunLang(v string) *InstallAddonRequest {
	s.AliyunLang = &v
	return s
}

func (s *InstallAddonRequest) SetDryRun(v bool) *InstallAddonRequest {
	s.DryRun = &v
	return s
}

func (s *InstallAddonRequest) SetEnvironmentId(v string) *InstallAddonRequest {
	s.EnvironmentId = &v
	return s
}

func (s *InstallAddonRequest) SetName(v string) *InstallAddonRequest {
	s.Name = &v
	return s
}

func (s *InstallAddonRequest) SetRegionId(v string) *InstallAddonRequest {
	s.RegionId = &v
	return s
}

func (s *InstallAddonRequest) SetReleaseName(v string) *InstallAddonRequest {
	s.ReleaseName = &v
	return s
}

func (s *InstallAddonRequest) SetValues(v string) *InstallAddonRequest {
	s.Values = &v
	return s
}

type InstallAddonResponseBody struct {
	// The HTTP status code. The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned data.
	Data *InstallAddonResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// C21AB7CF-B7AF-410F-BD61-82D1567F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values: true and false.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s InstallAddonResponseBody) String() string {
	return tea.Prettify(s)
}

func (s InstallAddonResponseBody) GoString() string {
	return s.String()
}

func (s *InstallAddonResponseBody) SetCode(v int32) *InstallAddonResponseBody {
	s.Code = &v
	return s
}

func (s *InstallAddonResponseBody) SetData(v *InstallAddonResponseBodyData) *InstallAddonResponseBody {
	s.Data = v
	return s
}

func (s *InstallAddonResponseBody) SetMessage(v string) *InstallAddonResponseBody {
	s.Message = &v
	return s
}

func (s *InstallAddonResponseBody) SetRequestId(v string) *InstallAddonResponseBody {
	s.RequestId = &v
	return s
}

func (s *InstallAddonResponseBody) SetSuccess(v bool) *InstallAddonResponseBody {
	s.Success = &v
	return s
}

type InstallAddonResponseBodyData struct {
	// The name of the add-on.
	//
	// example:
	//
	// mysql
	AddonName *string `json:"AddonName,omitempty" xml:"AddonName,omitempty"`
	// The number of alert rules.
	//
	// example:
	//
	// 1
	AlertRuleCount *int64 `json:"AlertRuleCount,omitempty" xml:"AlertRuleCount,omitempty"`
	// The installation phase.
	Conditions []*InstallAddonResponseBodyDataConditions `json:"Conditions,omitempty" xml:"Conditions,omitempty" type:"Repeated"`
	// The time when the add-on was created.
	//
	// example:
	//
	// 2023-09-22T16:56:29+08:00
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The number of dashboards.
	//
	// example:
	//
	// 1
	DashboardCount *int64 `json:"DashboardCount,omitempty" xml:"DashboardCount,omitempty"`
	// The environment ID.
	//
	// example:
	//
	// env-xxxx
	EnvironmentId *string `json:"EnvironmentId,omitempty" xml:"EnvironmentId,omitempty"`
	// The number of exporters.
	//
	// example:
	//
	// 2
	ExporterCount *int64 `json:"ExporterCount,omitempty" xml:"ExporterCount,omitempty"`
	// Indicates whether the configuration is available.
	//
	// example:
	//
	// true
	HaveConfig *bool `json:"HaveConfig,omitempty" xml:"HaveConfig,omitempty"`
	// The user ID.
	//
	// example:
	//
	// 123456
	InstallUserId *string `json:"InstallUserId,omitempty" xml:"InstallUserId,omitempty"`
	// The language.
	//
	// example:
	//
	// zh
	Language *string `json:"Language,omitempty" xml:"Language,omitempty"`
	// Whether or not it is a managed component.
	Managed *bool `json:"Managed,omitempty" xml:"Managed,omitempty"`
	// The region ID.
	//
	// example:
	//
	// cn-heyuan
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The release ID after installation.
	//
	// example:
	//
	// be29c093-3fd6-4fb6-9430-797030cc183a
	ReleaseId *string `json:"ReleaseId,omitempty" xml:"ReleaseId,omitempty"`
	// The name of the release.
	//
	// example:
	//
	// mysql-1695372983039
	ReleaseName *string `json:"ReleaseName,omitempty" xml:"ReleaseName,omitempty"`
	// The scenario.
	//
	// example:
	//
	// database
	Scene *string `json:"Scene,omitempty" xml:"Scene,omitempty"`
	// The status.
	//
	// example:
	//
	// 0
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The time when the add-on was updated.
	//
	// example:
	//
	// 2023-09-22T16:56:29+08:00
	UpdateTime *string `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
	// The user ID.
	//
	// example:
	//
	// 111
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	// The version of the add-on.
	//
	// example:
	//
	// 0.0.1
	Version *string `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s InstallAddonResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s InstallAddonResponseBodyData) GoString() string {
	return s.String()
}

func (s *InstallAddonResponseBodyData) SetAddonName(v string) *InstallAddonResponseBodyData {
	s.AddonName = &v
	return s
}

func (s *InstallAddonResponseBodyData) SetAlertRuleCount(v int64) *InstallAddonResponseBodyData {
	s.AlertRuleCount = &v
	return s
}

func (s *InstallAddonResponseBodyData) SetConditions(v []*InstallAddonResponseBodyDataConditions) *InstallAddonResponseBodyData {
	s.Conditions = v
	return s
}

func (s *InstallAddonResponseBodyData) SetCreateTime(v string) *InstallAddonResponseBodyData {
	s.CreateTime = &v
	return s
}

func (s *InstallAddonResponseBodyData) SetDashboardCount(v int64) *InstallAddonResponseBodyData {
	s.DashboardCount = &v
	return s
}

func (s *InstallAddonResponseBodyData) SetEnvironmentId(v string) *InstallAddonResponseBodyData {
	s.EnvironmentId = &v
	return s
}

func (s *InstallAddonResponseBodyData) SetExporterCount(v int64) *InstallAddonResponseBodyData {
	s.ExporterCount = &v
	return s
}

func (s *InstallAddonResponseBodyData) SetHaveConfig(v bool) *InstallAddonResponseBodyData {
	s.HaveConfig = &v
	return s
}

func (s *InstallAddonResponseBodyData) SetInstallUserId(v string) *InstallAddonResponseBodyData {
	s.InstallUserId = &v
	return s
}

func (s *InstallAddonResponseBodyData) SetLanguage(v string) *InstallAddonResponseBodyData {
	s.Language = &v
	return s
}

func (s *InstallAddonResponseBodyData) SetManaged(v bool) *InstallAddonResponseBodyData {
	s.Managed = &v
	return s
}

func (s *InstallAddonResponseBodyData) SetRegionId(v string) *InstallAddonResponseBodyData {
	s.RegionId = &v
	return s
}

func (s *InstallAddonResponseBodyData) SetReleaseId(v string) *InstallAddonResponseBodyData {
	s.ReleaseId = &v
	return s
}

func (s *InstallAddonResponseBodyData) SetReleaseName(v string) *InstallAddonResponseBodyData {
	s.ReleaseName = &v
	return s
}

func (s *InstallAddonResponseBodyData) SetScene(v string) *InstallAddonResponseBodyData {
	s.Scene = &v
	return s
}

func (s *InstallAddonResponseBodyData) SetStatus(v string) *InstallAddonResponseBodyData {
	s.Status = &v
	return s
}

func (s *InstallAddonResponseBodyData) SetUpdateTime(v string) *InstallAddonResponseBodyData {
	s.UpdateTime = &v
	return s
}

func (s *InstallAddonResponseBodyData) SetUserId(v string) *InstallAddonResponseBodyData {
	s.UserId = &v
	return s
}

func (s *InstallAddonResponseBodyData) SetVersion(v string) *InstallAddonResponseBodyData {
	s.Version = &v
	return s
}

type InstallAddonResponseBodyDataConditions struct {
	// The first transition time.
	//
	// example:
	//
	// 2018-01-31T14:32:19Z
	FirstTransitionTime *string `json:"FirstTransitionTime,omitempty" xml:"FirstTransitionTime,omitempty"`
	// The last transition time.
	//
	// example:
	//
	// 2018-01-31T14:32:19Z
	LastTransitionTime *string `json:"LastTransitionTime,omitempty" xml:"LastTransitionTime,omitempty"`
	// The detailed information.
	//
	// example:
	//
	// xxxx
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The reason for the failure.
	//
	// example:
	//
	// xxxx
	Reason *string `json:"Reason,omitempty" xml:"Reason,omitempty"`
	// The status of the phase.
	//
	// example:
	//
	// True
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The type of the phase.
	//
	// example:
	//
	// Loaded
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s InstallAddonResponseBodyDataConditions) String() string {
	return tea.Prettify(s)
}

func (s InstallAddonResponseBodyDataConditions) GoString() string {
	return s.String()
}

func (s *InstallAddonResponseBodyDataConditions) SetFirstTransitionTime(v string) *InstallAddonResponseBodyDataConditions {
	s.FirstTransitionTime = &v
	return s
}

func (s *InstallAddonResponseBodyDataConditions) SetLastTransitionTime(v string) *InstallAddonResponseBodyDataConditions {
	s.LastTransitionTime = &v
	return s
}

func (s *InstallAddonResponseBodyDataConditions) SetMessage(v string) *InstallAddonResponseBodyDataConditions {
	s.Message = &v
	return s
}

func (s *InstallAddonResponseBodyDataConditions) SetReason(v string) *InstallAddonResponseBodyDataConditions {
	s.Reason = &v
	return s
}

func (s *InstallAddonResponseBodyDataConditions) SetStatus(v string) *InstallAddonResponseBodyDataConditions {
	s.Status = &v
	return s
}

func (s *InstallAddonResponseBodyDataConditions) SetType(v string) *InstallAddonResponseBodyDataConditions {
	s.Type = &v
	return s
}

type InstallAddonResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *InstallAddonResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s InstallAddonResponse) String() string {
	return tea.Prettify(s)
}

func (s InstallAddonResponse) GoString() string {
	return s.String()
}

func (s *InstallAddonResponse) SetHeaders(v map[string]*string) *InstallAddonResponse {
	s.Headers = v
	return s
}

func (s *InstallAddonResponse) SetStatusCode(v int32) *InstallAddonResponse {
	s.StatusCode = &v
	return s
}

func (s *InstallAddonResponse) SetBody(v *InstallAddonResponseBody) *InstallAddonResponse {
	s.Body = v
	return s
}

type InstallCmsExporterRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// cc7a37ee31aea4ed1a059eff8034b****
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	// example:
	//
	// hologres#cen
	CmsArgs *string `json:"CmsArgs,omitempty" xml:"CmsArgs,omitempty"`
	// example:
	//
	// hologres#cen
	DirectArgs *string `json:"DirectArgs,omitempty" xml:"DirectArgs,omitempty"`
	// example:
	//
	// false
	EnableTag *bool `json:"EnableTag,omitempty" xml:"EnableTag,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// cn-beijing
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s InstallCmsExporterRequest) String() string {
	return tea.Prettify(s)
}

func (s InstallCmsExporterRequest) GoString() string {
	return s.String()
}

func (s *InstallCmsExporterRequest) SetClusterId(v string) *InstallCmsExporterRequest {
	s.ClusterId = &v
	return s
}

func (s *InstallCmsExporterRequest) SetCmsArgs(v string) *InstallCmsExporterRequest {
	s.CmsArgs = &v
	return s
}

func (s *InstallCmsExporterRequest) SetDirectArgs(v string) *InstallCmsExporterRequest {
	s.DirectArgs = &v
	return s
}

func (s *InstallCmsExporterRequest) SetEnableTag(v bool) *InstallCmsExporterRequest {
	s.EnableTag = &v
	return s
}

func (s *InstallCmsExporterRequest) SetRegionId(v string) *InstallCmsExporterRequest {
	s.RegionId = &v
	return s
}

type InstallCmsExporterResponseBody struct {
	// example:
	//
	// success
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// example:
	//
	// E7A04B0D-E2CA-59BB-8A9D-D5D349C22BF1
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s InstallCmsExporterResponseBody) String() string {
	return tea.Prettify(s)
}

func (s InstallCmsExporterResponseBody) GoString() string {
	return s.String()
}

func (s *InstallCmsExporterResponseBody) SetData(v string) *InstallCmsExporterResponseBody {
	s.Data = &v
	return s
}

func (s *InstallCmsExporterResponseBody) SetRequestId(v string) *InstallCmsExporterResponseBody {
	s.RequestId = &v
	return s
}

type InstallCmsExporterResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *InstallCmsExporterResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s InstallCmsExporterResponse) String() string {
	return tea.Prettify(s)
}

func (s InstallCmsExporterResponse) GoString() string {
	return s.String()
}

func (s *InstallCmsExporterResponse) SetHeaders(v map[string]*string) *InstallCmsExporterResponse {
	s.Headers = v
	return s
}

func (s *InstallCmsExporterResponse) SetStatusCode(v int32) *InstallCmsExporterResponse {
	s.StatusCode = &v
	return s
}

func (s *InstallCmsExporterResponse) SetBody(v *InstallCmsExporterResponseBody) *InstallCmsExporterResponse {
	s.Body = v
	return s
}

type InstallEnvironmentFeatureRequest struct {
	// The language. Valid values: zh and en. Default value: zh.
	//
	// example:
	//
	// zh
	AliyunLang *string `json:"AliyunLang,omitempty" xml:"AliyunLang,omitempty"`
	// The metadata of the feature.
	//
	// example:
	//
	// {\\"continuous\\":true,\\"dataRevision\\":2}
	Config *string `json:"Config,omitempty" xml:"Config,omitempty"`
	// The environment ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// env-xxx
	EnvironmentId *string `json:"EnvironmentId,omitempty" xml:"EnvironmentId,omitempty"`
	// The name of the feature.
	//
	// Valid values:
	//
	// 	- app-agent-pilot
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- metric-agent
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// This parameter is required.
	//
	// example:
	//
	// metric-agent
	FeatureName *string `json:"FeatureName,omitempty" xml:"FeatureName,omitempty"`
	// The version of the feature.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1.1.17
	FeatureVersion *string `json:"FeatureVersion,omitempty" xml:"FeatureVersion,omitempty"`
	// The region ID of the feature.
	//
	// example:
	//
	// cn-shenzhen
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// The region ID.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s InstallEnvironmentFeatureRequest) String() string {
	return tea.Prettify(s)
}

func (s InstallEnvironmentFeatureRequest) GoString() string {
	return s.String()
}

func (s *InstallEnvironmentFeatureRequest) SetAliyunLang(v string) *InstallEnvironmentFeatureRequest {
	s.AliyunLang = &v
	return s
}

func (s *InstallEnvironmentFeatureRequest) SetConfig(v string) *InstallEnvironmentFeatureRequest {
	s.Config = &v
	return s
}

func (s *InstallEnvironmentFeatureRequest) SetEnvironmentId(v string) *InstallEnvironmentFeatureRequest {
	s.EnvironmentId = &v
	return s
}

func (s *InstallEnvironmentFeatureRequest) SetFeatureName(v string) *InstallEnvironmentFeatureRequest {
	s.FeatureName = &v
	return s
}

func (s *InstallEnvironmentFeatureRequest) SetFeatureVersion(v string) *InstallEnvironmentFeatureRequest {
	s.FeatureVersion = &v
	return s
}

func (s *InstallEnvironmentFeatureRequest) SetRegion(v string) *InstallEnvironmentFeatureRequest {
	s.Region = &v
	return s
}

func (s *InstallEnvironmentFeatureRequest) SetRegionId(v string) *InstallEnvironmentFeatureRequest {
	s.RegionId = &v
	return s
}

type InstallEnvironmentFeatureResponseBody struct {
	// The HTTP status code. The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The release ID.
	//
	// example:
	//
	// 83FCC44C-A056-18AF-A902-7043E723F0D9
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// The returned message.
	//
	// example:
	//
	// message
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 4C518054-852F-4023-ABC1-4AF95FF7****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s InstallEnvironmentFeatureResponseBody) String() string {
	return tea.Prettify(s)
}

func (s InstallEnvironmentFeatureResponseBody) GoString() string {
	return s.String()
}

func (s *InstallEnvironmentFeatureResponseBody) SetCode(v int32) *InstallEnvironmentFeatureResponseBody {
	s.Code = &v
	return s
}

func (s *InstallEnvironmentFeatureResponseBody) SetData(v string) *InstallEnvironmentFeatureResponseBody {
	s.Data = &v
	return s
}

func (s *InstallEnvironmentFeatureResponseBody) SetMessage(v string) *InstallEnvironmentFeatureResponseBody {
	s.Message = &v
	return s
}

func (s *InstallEnvironmentFeatureResponseBody) SetRequestId(v string) *InstallEnvironmentFeatureResponseBody {
	s.RequestId = &v
	return s
}

func (s *InstallEnvironmentFeatureResponseBody) SetSuccess(v bool) *InstallEnvironmentFeatureResponseBody {
	s.Success = &v
	return s
}

type InstallEnvironmentFeatureResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *InstallEnvironmentFeatureResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s InstallEnvironmentFeatureResponse) String() string {
	return tea.Prettify(s)
}

func (s InstallEnvironmentFeatureResponse) GoString() string {
	return s.String()
}

func (s *InstallEnvironmentFeatureResponse) SetHeaders(v map[string]*string) *InstallEnvironmentFeatureResponse {
	s.Headers = v
	return s
}

func (s *InstallEnvironmentFeatureResponse) SetStatusCode(v int32) *InstallEnvironmentFeatureResponse {
	s.StatusCode = &v
	return s
}

func (s *InstallEnvironmentFeatureResponse) SetBody(v *InstallEnvironmentFeatureResponseBody) *InstallEnvironmentFeatureResponse {
	s.Body = v
	return s
}

type InstallManagedPrometheusRequest struct {
	// The ID of the ACK cluster.
	//
	// example:
	//
	// cc7a37ee31aea4ed1a059eff8034b****
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	// The name of the ECS instance. If you set the ClusterType parameter to ecs, you must configure this parameter.
	//
	// example:
	//
	// prd-ecs
	ClusterName *string `json:"ClusterName,omitempty" xml:"ClusterName,omitempty"`
	// The cluster type.
	//
	// Valid values:
	//
	// 	- ecs
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- one
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- ask
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- pro
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// This parameter is required.
	//
	// example:
	//
	// ask
	ClusterType *string `json:"ClusterType,omitempty" xml:"ClusterType,omitempty"`
	// The ID of the Grafana workspace used by the ASK cluster or ECS instance. If you set the value to free or leave the parameter empty, a shared Grafana workspace is used.
	//
	// example:
	//
	// grafana-bp1*****
	GrafanaInstanceId *string `json:"GrafanaInstanceId,omitempty" xml:"GrafanaInstanceId,omitempty"`
	// This parameter is not supported.
	//
	// if can be null:
	// true
	//
	// example:
	//
	// -
	KubeConfig *string `json:"KubeConfig,omitempty" xml:"KubeConfig,omitempty"`
	// The region ID.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the resource group to which the Prometheus instance belongs.
	//
	// example:
	//
	// rg-acfmxyexli2****
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	// The security group of the ASK cluster or ECS instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// sg-bp1********
	SecurityGroupId *string `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
	// The vSwitch used by the ASK cluster or ECS instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// vsw-bp1*********
	VSwitchId *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	// The virtual private cloud (VPC) where the ASK cluster or ECS instance resides.
	//
	// This parameter is required.
	//
	// example:
	//
	// vpc-xxxxxx
	VpcId *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
}

func (s InstallManagedPrometheusRequest) String() string {
	return tea.Prettify(s)
}

func (s InstallManagedPrometheusRequest) GoString() string {
	return s.String()
}

func (s *InstallManagedPrometheusRequest) SetClusterId(v string) *InstallManagedPrometheusRequest {
	s.ClusterId = &v
	return s
}

func (s *InstallManagedPrometheusRequest) SetClusterName(v string) *InstallManagedPrometheusRequest {
	s.ClusterName = &v
	return s
}

func (s *InstallManagedPrometheusRequest) SetClusterType(v string) *InstallManagedPrometheusRequest {
	s.ClusterType = &v
	return s
}

func (s *InstallManagedPrometheusRequest) SetGrafanaInstanceId(v string) *InstallManagedPrometheusRequest {
	s.GrafanaInstanceId = &v
	return s
}

func (s *InstallManagedPrometheusRequest) SetKubeConfig(v string) *InstallManagedPrometheusRequest {
	s.KubeConfig = &v
	return s
}

func (s *InstallManagedPrometheusRequest) SetRegionId(v string) *InstallManagedPrometheusRequest {
	s.RegionId = &v
	return s
}

func (s *InstallManagedPrometheusRequest) SetResourceGroupId(v string) *InstallManagedPrometheusRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *InstallManagedPrometheusRequest) SetSecurityGroupId(v string) *InstallManagedPrometheusRequest {
	s.SecurityGroupId = &v
	return s
}

func (s *InstallManagedPrometheusRequest) SetVSwitchId(v string) *InstallManagedPrometheusRequest {
	s.VSwitchId = &v
	return s
}

func (s *InstallManagedPrometheusRequest) SetVpcId(v string) *InstallManagedPrometheusRequest {
	s.VpcId = &v
	return s
}

type InstallManagedPrometheusResponseBody struct {
	// The status code. The status code 200 indicates that the request was successful. If another status code is returned, the request failed.
	//
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The response content. The status of the Prometheus instance is returned.
	//
	// example:
	//
	// success
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// The error message returned if the Prometheus instance fails to be created.
	//
	// example:
	//
	// vpcId is blank
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// String	2A0CEDF1-06FE-44AC-8E21-21A5BE65****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the Prometheus instance was created.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s InstallManagedPrometheusResponseBody) String() string {
	return tea.Prettify(s)
}

func (s InstallManagedPrometheusResponseBody) GoString() string {
	return s.String()
}

func (s *InstallManagedPrometheusResponseBody) SetCode(v int32) *InstallManagedPrometheusResponseBody {
	s.Code = &v
	return s
}

func (s *InstallManagedPrometheusResponseBody) SetData(v string) *InstallManagedPrometheusResponseBody {
	s.Data = &v
	return s
}

func (s *InstallManagedPrometheusResponseBody) SetMessage(v string) *InstallManagedPrometheusResponseBody {
	s.Message = &v
	return s
}

func (s *InstallManagedPrometheusResponseBody) SetRequestId(v string) *InstallManagedPrometheusResponseBody {
	s.RequestId = &v
	return s
}

func (s *InstallManagedPrometheusResponseBody) SetSuccess(v bool) *InstallManagedPrometheusResponseBody {
	s.Success = &v
	return s
}

type InstallManagedPrometheusResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *InstallManagedPrometheusResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s InstallManagedPrometheusResponse) String() string {
	return tea.Prettify(s)
}

func (s InstallManagedPrometheusResponse) GoString() string {
	return s.String()
}

func (s *InstallManagedPrometheusResponse) SetHeaders(v map[string]*string) *InstallManagedPrometheusResponse {
	s.Headers = v
	return s
}

func (s *InstallManagedPrometheusResponse) SetStatusCode(v int32) *InstallManagedPrometheusResponse {
	s.StatusCode = &v
	return s
}

func (s *InstallManagedPrometheusResponse) SetBody(v *InstallManagedPrometheusResponseBody) *InstallManagedPrometheusResponse {
	s.Body = v
	return s
}

type ListActivatedAlertsRequest struct {
	// The number of the page to return. Default value: `1`.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// The filter condition in the `{"key":"value"}`format. You must specify the `key` and `value` of the filter condition.
	//
	// example:
	//
	// {"alertname":"Container CPU usage is greater than 80%"}
	Filter *string `json:"Filter,omitempty" xml:"Filter,omitempty"`
	// The number of entries to return on each page. Default value: `10`.
	//
	// This parameter is required.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the region.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ListActivatedAlertsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListActivatedAlertsRequest) GoString() string {
	return s.String()
}

func (s *ListActivatedAlertsRequest) SetCurrentPage(v int32) *ListActivatedAlertsRequest {
	s.CurrentPage = &v
	return s
}

func (s *ListActivatedAlertsRequest) SetFilter(v string) *ListActivatedAlertsRequest {
	s.Filter = &v
	return s
}

func (s *ListActivatedAlertsRequest) SetPageSize(v int32) *ListActivatedAlertsRequest {
	s.PageSize = &v
	return s
}

func (s *ListActivatedAlertsRequest) SetRegionId(v string) *ListActivatedAlertsRequest {
	s.RegionId = &v
	return s
}

type ListActivatedAlertsResponseBody struct {
	// The struct returned.
	Page *ListActivatedAlertsResponseBodyPage `json:"Page,omitempty" xml:"Page,omitempty" type:"Struct"`
	// The ID of the request.
	//
	// example:
	//
	// BDB74B8F-4123-482A-ABB7-7F440349****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListActivatedAlertsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListActivatedAlertsResponseBody) GoString() string {
	return s.String()
}

func (s *ListActivatedAlertsResponseBody) SetPage(v *ListActivatedAlertsResponseBodyPage) *ListActivatedAlertsResponseBody {
	s.Page = v
	return s
}

func (s *ListActivatedAlertsResponseBody) SetRequestId(v string) *ListActivatedAlertsResponseBody {
	s.RequestId = &v
	return s
}

type ListActivatedAlertsResponseBodyPage struct {
	// The alerts that have been triggered.
	Alerts []*ListActivatedAlertsResponseBodyPageAlerts `json:"Alerts,omitempty" xml:"Alerts,omitempty" type:"Repeated"`
	// The page number of the returned page.
	//
	// example:
	//
	// 1
	Page *int32 `json:"Page,omitempty" xml:"Page,omitempty"`
	// The number of entries returned per page.
	//
	// example:
	//
	// 20
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 5
	Total *int32 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s ListActivatedAlertsResponseBodyPage) String() string {
	return tea.Prettify(s)
}

func (s ListActivatedAlertsResponseBodyPage) GoString() string {
	return s.String()
}

func (s *ListActivatedAlertsResponseBodyPage) SetAlerts(v []*ListActivatedAlertsResponseBodyPageAlerts) *ListActivatedAlertsResponseBodyPage {
	s.Alerts = v
	return s
}

func (s *ListActivatedAlertsResponseBodyPage) SetPage(v int32) *ListActivatedAlertsResponseBodyPage {
	s.Page = &v
	return s
}

func (s *ListActivatedAlertsResponseBodyPage) SetPageSize(v int32) *ListActivatedAlertsResponseBodyPage {
	s.PageSize = &v
	return s
}

func (s *ListActivatedAlertsResponseBodyPage) SetTotal(v int32) *ListActivatedAlertsResponseBodyPage {
	s.Total = &v
	return s
}

type ListActivatedAlertsResponseBodyPageAlerts struct {
	// The ID of the alert rule.
	//
	// example:
	//
	// 3888704
	AlertId *string `json:"AlertId,omitempty" xml:"AlertId,omitempty"`
	// The name of the alert rule.
	//
	// example:
	//
	// Container CPU usage is greater than 80%
	AlertName *string `json:"AlertName,omitempty" xml:"AlertName,omitempty"`
	// The type of the alert.
	//
	// example:
	//
	// PROMETHEUS_MONITORING_ALERT_RULE
	AlertType *string `json:"AlertType,omitempty" xml:"AlertType,omitempty"`
	// The number of times that the alert event was received.
	//
	// example:
	//
	// 598
	Count *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	// The timestamp when the alert rule was created.
	//
	// example:
	//
	// 1616466300000
	CreateTime *int64 `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The notification policies.
	DispatchRules []*ListActivatedAlertsResponseBodyPageAlertsDispatchRules `json:"DispatchRules,omitempty" xml:"DispatchRules,omitempty" type:"Repeated"`
	// The timestamp when the alert was ended.
	//
	// example:
	//
	// 1616502540000
	EndsAt *int64 `json:"EndsAt,omitempty" xml:"EndsAt,omitempty"`
	// The extended fields that indicate the following tags:
	//
	// 	- The tags that are carried in the metrics of the alert rule expression.
	//
	// 	- The tags that are created based on the alert rule.
	//
	// 	- The default tags of Application Real-Time Monitoring Service (ARMS).
	ExpandFields map[string]interface{} `json:"ExpandFields,omitempty" xml:"ExpandFields,omitempty"`
	// The name of the object that is associated with the alert.
	//
	// example:
	//
	// testphp2
	IntegrationName *string `json:"IntegrationName,omitempty" xml:"IntegrationName,omitempty"`
	// The type of the service integration that generated the alert.
	//
	// example:
	//
	// PROMETHEUS
	IntegrationType *string `json:"IntegrationType,omitempty" xml:"IntegrationType,omitempty"`
	// The type of the object that is associated with the alert.
	//
	// example:
	//
	// cluster
	InvolvedObjectKind *string `json:"InvolvedObjectKind,omitempty" xml:"InvolvedObjectKind,omitempty"`
	// The name of the service integration that generated the alert.
	//
	// example:
	//
	// Test integration-prometheus
	InvolvedObjectName *string `json:"InvolvedObjectName,omitempty" xml:"InvolvedObjectName,omitempty"`
	// The description of the alert.
	//
	// example:
	//
	// Alarm name: PodRestart_testphp2,\\n Pod night-test-group-1-1-5f5d6f4d84-pszns is restart, Value: 133.33%, 1.33%
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The level of the alert. Valid values:
	//
	// 	- `critical`
	//
	// 	- `error`
	//
	// 	- `warn`
	//
	// 	- `page`
	//
	// example:
	//
	// critical
	Severity *string `json:"Severity,omitempty" xml:"Severity,omitempty"`
	// The timestamp when the alert was generated.
	//
	// example:
	//
	// 1616466300000
	StartsAt *int64 `json:"StartsAt,omitempty" xml:"StartsAt,omitempty"`
	// The status of the alert. Valid values:
	//
	// 	- `Active`
	//
	// 	- `Inhibited`
	//
	// 	- `Silenced`
	//
	// 	- `Resolved`
	//
	// example:
	//
	// Active
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListActivatedAlertsResponseBodyPageAlerts) String() string {
	return tea.Prettify(s)
}

func (s ListActivatedAlertsResponseBodyPageAlerts) GoString() string {
	return s.String()
}

func (s *ListActivatedAlertsResponseBodyPageAlerts) SetAlertId(v string) *ListActivatedAlertsResponseBodyPageAlerts {
	s.AlertId = &v
	return s
}

func (s *ListActivatedAlertsResponseBodyPageAlerts) SetAlertName(v string) *ListActivatedAlertsResponseBodyPageAlerts {
	s.AlertName = &v
	return s
}

func (s *ListActivatedAlertsResponseBodyPageAlerts) SetAlertType(v string) *ListActivatedAlertsResponseBodyPageAlerts {
	s.AlertType = &v
	return s
}

func (s *ListActivatedAlertsResponseBodyPageAlerts) SetCount(v int32) *ListActivatedAlertsResponseBodyPageAlerts {
	s.Count = &v
	return s
}

func (s *ListActivatedAlertsResponseBodyPageAlerts) SetCreateTime(v int64) *ListActivatedAlertsResponseBodyPageAlerts {
	s.CreateTime = &v
	return s
}

func (s *ListActivatedAlertsResponseBodyPageAlerts) SetDispatchRules(v []*ListActivatedAlertsResponseBodyPageAlertsDispatchRules) *ListActivatedAlertsResponseBodyPageAlerts {
	s.DispatchRules = v
	return s
}

func (s *ListActivatedAlertsResponseBodyPageAlerts) SetEndsAt(v int64) *ListActivatedAlertsResponseBodyPageAlerts {
	s.EndsAt = &v
	return s
}

func (s *ListActivatedAlertsResponseBodyPageAlerts) SetExpandFields(v map[string]interface{}) *ListActivatedAlertsResponseBodyPageAlerts {
	s.ExpandFields = v
	return s
}

func (s *ListActivatedAlertsResponseBodyPageAlerts) SetIntegrationName(v string) *ListActivatedAlertsResponseBodyPageAlerts {
	s.IntegrationName = &v
	return s
}

func (s *ListActivatedAlertsResponseBodyPageAlerts) SetIntegrationType(v string) *ListActivatedAlertsResponseBodyPageAlerts {
	s.IntegrationType = &v
	return s
}

func (s *ListActivatedAlertsResponseBodyPageAlerts) SetInvolvedObjectKind(v string) *ListActivatedAlertsResponseBodyPageAlerts {
	s.InvolvedObjectKind = &v
	return s
}

func (s *ListActivatedAlertsResponseBodyPageAlerts) SetInvolvedObjectName(v string) *ListActivatedAlertsResponseBodyPageAlerts {
	s.InvolvedObjectName = &v
	return s
}

func (s *ListActivatedAlertsResponseBodyPageAlerts) SetMessage(v string) *ListActivatedAlertsResponseBodyPageAlerts {
	s.Message = &v
	return s
}

func (s *ListActivatedAlertsResponseBodyPageAlerts) SetSeverity(v string) *ListActivatedAlertsResponseBodyPageAlerts {
	s.Severity = &v
	return s
}

func (s *ListActivatedAlertsResponseBodyPageAlerts) SetStartsAt(v int64) *ListActivatedAlertsResponseBodyPageAlerts {
	s.StartsAt = &v
	return s
}

func (s *ListActivatedAlertsResponseBodyPageAlerts) SetStatus(v string) *ListActivatedAlertsResponseBodyPageAlerts {
	s.Status = &v
	return s
}

type ListActivatedAlertsResponseBodyPageAlertsDispatchRules struct {
	// The ID of the notification policy.
	//
	// example:
	//
	// 7021
	RuleId *int32 `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
	// The name of the notification policy.
	//
	// example:
	//
	// NotificationPolicy1
	RuleName *string `json:"RuleName,omitempty" xml:"RuleName,omitempty"`
}

func (s ListActivatedAlertsResponseBodyPageAlertsDispatchRules) String() string {
	return tea.Prettify(s)
}

func (s ListActivatedAlertsResponseBodyPageAlertsDispatchRules) GoString() string {
	return s.String()
}

func (s *ListActivatedAlertsResponseBodyPageAlertsDispatchRules) SetRuleId(v int32) *ListActivatedAlertsResponseBodyPageAlertsDispatchRules {
	s.RuleId = &v
	return s
}

func (s *ListActivatedAlertsResponseBodyPageAlertsDispatchRules) SetRuleName(v string) *ListActivatedAlertsResponseBodyPageAlertsDispatchRules {
	s.RuleName = &v
	return s
}

type ListActivatedAlertsResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListActivatedAlertsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListActivatedAlertsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListActivatedAlertsResponse) GoString() string {
	return s.String()
}

func (s *ListActivatedAlertsResponse) SetHeaders(v map[string]*string) *ListActivatedAlertsResponse {
	s.Headers = v
	return s
}

func (s *ListActivatedAlertsResponse) SetStatusCode(v int32) *ListActivatedAlertsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListActivatedAlertsResponse) SetBody(v *ListActivatedAlertsResponseBody) *ListActivatedAlertsResponse {
	s.Body = v
	return s
}

type ListAddonReleasesRequest struct {
	// Name of Addon.
	//
	// example:
	//
	// mysql
	AddonName *string `json:"AddonName,omitempty" xml:"AddonName,omitempty"`
	// Environment instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// env-xxx
	EnvironmentId *string `json:"EnvironmentId,omitempty" xml:"EnvironmentId,omitempty"`
	// The region ID.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ListAddonReleasesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListAddonReleasesRequest) GoString() string {
	return s.String()
}

func (s *ListAddonReleasesRequest) SetAddonName(v string) *ListAddonReleasesRequest {
	s.AddonName = &v
	return s
}

func (s *ListAddonReleasesRequest) SetEnvironmentId(v string) *ListAddonReleasesRequest {
	s.EnvironmentId = &v
	return s
}

func (s *ListAddonReleasesRequest) SetRegionId(v string) *ListAddonReleasesRequest {
	s.RegionId = &v
	return s
}

type ListAddonReleasesResponseBody struct {
	// Status code: 200 indicates success.
	//
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned struct.
	Data *ListAddonReleasesResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	//
	// example:
	//
	// E9C9DA3D-10FE-472E-9EEF-2D0A3E41****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful.
	//
	// 	- `true`: The request was successful.
	//
	// 	- `false`: The request failed.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListAddonReleasesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListAddonReleasesResponseBody) GoString() string {
	return s.String()
}

func (s *ListAddonReleasesResponseBody) SetCode(v int32) *ListAddonReleasesResponseBody {
	s.Code = &v
	return s
}

func (s *ListAddonReleasesResponseBody) SetData(v *ListAddonReleasesResponseBodyData) *ListAddonReleasesResponseBody {
	s.Data = v
	return s
}

func (s *ListAddonReleasesResponseBody) SetMessage(v string) *ListAddonReleasesResponseBody {
	s.Message = &v
	return s
}

func (s *ListAddonReleasesResponseBody) SetRequestId(v string) *ListAddonReleasesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListAddonReleasesResponseBody) SetSuccess(v bool) *ListAddonReleasesResponseBody {
	s.Success = &v
	return s
}

type ListAddonReleasesResponseBodyData struct {
	// Release list.
	Releases []*ListAddonReleasesResponseBodyDataReleases `json:"Releases,omitempty" xml:"Releases,omitempty" type:"Repeated"`
	// The total number of entries returned.
	//
	// example:
	//
	// 12
	Total *int64 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s ListAddonReleasesResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListAddonReleasesResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListAddonReleasesResponseBodyData) SetReleases(v []*ListAddonReleasesResponseBodyDataReleases) *ListAddonReleasesResponseBodyData {
	s.Releases = v
	return s
}

func (s *ListAddonReleasesResponseBodyData) SetTotal(v int64) *ListAddonReleasesResponseBodyData {
	s.Total = &v
	return s
}

type ListAddonReleasesResponseBodyDataReleases struct {
	// Name of Addon.
	//
	// example:
	//
	// mysql
	AddonName *string `json:"AddonName,omitempty" xml:"AddonName,omitempty"`
	// Number of alarm groups.
	//
	// example:
	//
	// 1
	AlertRuleCount *int64 `json:"AlertRuleCount,omitempty" xml:"AlertRuleCount,omitempty"`
	// Condition list.
	Conditions []*ListAddonReleasesResponseBodyDataReleasesConditions `json:"Conditions,omitempty" xml:"Conditions,omitempty" type:"Repeated"`
	// Created time.
	//
	// example:
	//
	// 2023-09-22T16:56:29+08:00
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// Number of dashboard.
	//
	// example:
	//
	// 1
	DashboardCount *int64 `json:"DashboardCount,omitempty" xml:"DashboardCount,omitempty"`
	// Environment instance ID.
	//
	// example:
	//
	// env-xxxx
	EnvironmentId *string `json:"EnvironmentId,omitempty" xml:"EnvironmentId,omitempty"`
	// Number of Exporter.
	//
	// example:
	//
	// 2
	ExporterCount *int64 `json:"ExporterCount,omitempty" xml:"ExporterCount,omitempty"`
	// Whether there is configuration.
	//
	// example:
	//
	// true
	HaveConfig *bool `json:"HaveConfig,omitempty" xml:"HaveConfig,omitempty"`
	// User ID of the installation.
	//
	// example:
	//
	// 1268790592387
	InstallUserId *string `json:"InstallUserId,omitempty" xml:"InstallUserId,omitempty"`
	// Language.
	//
	// example:
	//
	// zh
	Language *string `json:"Language,omitempty" xml:"Language,omitempty"`
	Managed  *bool   `json:"Managed,omitempty" xml:"Managed,omitempty"`
	// The ID of the region.
	//
	// example:
	//
	// cn-heyuan
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// Release ID.
	//
	// example:
	//
	// be29c093-3fd6-4fb6-9430-797030cc183a
	ReleaseId *string `json:"ReleaseId,omitempty" xml:"ReleaseId,omitempty"`
	// Name of Release.
	//
	// example:
	//
	// mysql-1695372983039
	ReleaseName *string `json:"ReleaseName,omitempty" xml:"ReleaseName,omitempty"`
	// Scene.
	//
	// example:
	//
	// database
	Scene *string `json:"Scene,omitempty" xml:"Scene,omitempty"`
	// Status of Release.
	//
	// example:
	//
	// 0
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// Update time.
	//
	// example:
	//
	// 2023-09-22T16:56:29+08:00
	UpdateTime *string `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
	// User ID.
	//
	// example:
	//
	// 111
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	// Version of Addon.
	//
	// example:
	//
	// 0.0.1
	Version *string `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s ListAddonReleasesResponseBodyDataReleases) String() string {
	return tea.Prettify(s)
}

func (s ListAddonReleasesResponseBodyDataReleases) GoString() string {
	return s.String()
}

func (s *ListAddonReleasesResponseBodyDataReleases) SetAddonName(v string) *ListAddonReleasesResponseBodyDataReleases {
	s.AddonName = &v
	return s
}

func (s *ListAddonReleasesResponseBodyDataReleases) SetAlertRuleCount(v int64) *ListAddonReleasesResponseBodyDataReleases {
	s.AlertRuleCount = &v
	return s
}

func (s *ListAddonReleasesResponseBodyDataReleases) SetConditions(v []*ListAddonReleasesResponseBodyDataReleasesConditions) *ListAddonReleasesResponseBodyDataReleases {
	s.Conditions = v
	return s
}

func (s *ListAddonReleasesResponseBodyDataReleases) SetCreateTime(v string) *ListAddonReleasesResponseBodyDataReleases {
	s.CreateTime = &v
	return s
}

func (s *ListAddonReleasesResponseBodyDataReleases) SetDashboardCount(v int64) *ListAddonReleasesResponseBodyDataReleases {
	s.DashboardCount = &v
	return s
}

func (s *ListAddonReleasesResponseBodyDataReleases) SetEnvironmentId(v string) *ListAddonReleasesResponseBodyDataReleases {
	s.EnvironmentId = &v
	return s
}

func (s *ListAddonReleasesResponseBodyDataReleases) SetExporterCount(v int64) *ListAddonReleasesResponseBodyDataReleases {
	s.ExporterCount = &v
	return s
}

func (s *ListAddonReleasesResponseBodyDataReleases) SetHaveConfig(v bool) *ListAddonReleasesResponseBodyDataReleases {
	s.HaveConfig = &v
	return s
}

func (s *ListAddonReleasesResponseBodyDataReleases) SetInstallUserId(v string) *ListAddonReleasesResponseBodyDataReleases {
	s.InstallUserId = &v
	return s
}

func (s *ListAddonReleasesResponseBodyDataReleases) SetLanguage(v string) *ListAddonReleasesResponseBodyDataReleases {
	s.Language = &v
	return s
}

func (s *ListAddonReleasesResponseBodyDataReleases) SetManaged(v bool) *ListAddonReleasesResponseBodyDataReleases {
	s.Managed = &v
	return s
}

func (s *ListAddonReleasesResponseBodyDataReleases) SetRegionId(v string) *ListAddonReleasesResponseBodyDataReleases {
	s.RegionId = &v
	return s
}

func (s *ListAddonReleasesResponseBodyDataReleases) SetReleaseId(v string) *ListAddonReleasesResponseBodyDataReleases {
	s.ReleaseId = &v
	return s
}

func (s *ListAddonReleasesResponseBodyDataReleases) SetReleaseName(v string) *ListAddonReleasesResponseBodyDataReleases {
	s.ReleaseName = &v
	return s
}

func (s *ListAddonReleasesResponseBodyDataReleases) SetScene(v string) *ListAddonReleasesResponseBodyDataReleases {
	s.Scene = &v
	return s
}

func (s *ListAddonReleasesResponseBodyDataReleases) SetStatus(v string) *ListAddonReleasesResponseBodyDataReleases {
	s.Status = &v
	return s
}

func (s *ListAddonReleasesResponseBodyDataReleases) SetUpdateTime(v string) *ListAddonReleasesResponseBodyDataReleases {
	s.UpdateTime = &v
	return s
}

func (s *ListAddonReleasesResponseBodyDataReleases) SetUserId(v string) *ListAddonReleasesResponseBodyDataReleases {
	s.UserId = &v
	return s
}

func (s *ListAddonReleasesResponseBodyDataReleases) SetVersion(v string) *ListAddonReleasesResponseBodyDataReleases {
	s.Version = &v
	return s
}

type ListAddonReleasesResponseBodyDataReleasesConditions struct {
	// First transition time.
	//
	// example:
	//
	// 2018-01-31T14:32:19Z
	FirstTransitionTime *string `json:"FirstTransitionTime,omitempty" xml:"FirstTransitionTime,omitempty"`
	// Last transition time.
	//
	// example:
	//
	// 2018-01-31T14:32:19Z
	LastTransitionTime *string `json:"LastTransitionTime,omitempty" xml:"LastTransitionTime,omitempty"`
	// Details.
	//
	// example:
	//
	// xxxx
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Reason of failure.
	//
	// example:
	//
	// xxxx
	Reason *string `json:"Reason,omitempty" xml:"Reason,omitempty"`
	// Condition status.
	//
	// example:
	//
	// True
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// Condition type.
	//
	// example:
	//
	// Loaded
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListAddonReleasesResponseBodyDataReleasesConditions) String() string {
	return tea.Prettify(s)
}

func (s ListAddonReleasesResponseBodyDataReleasesConditions) GoString() string {
	return s.String()
}

func (s *ListAddonReleasesResponseBodyDataReleasesConditions) SetFirstTransitionTime(v string) *ListAddonReleasesResponseBodyDataReleasesConditions {
	s.FirstTransitionTime = &v
	return s
}

func (s *ListAddonReleasesResponseBodyDataReleasesConditions) SetLastTransitionTime(v string) *ListAddonReleasesResponseBodyDataReleasesConditions {
	s.LastTransitionTime = &v
	return s
}

func (s *ListAddonReleasesResponseBodyDataReleasesConditions) SetMessage(v string) *ListAddonReleasesResponseBodyDataReleasesConditions {
	s.Message = &v
	return s
}

func (s *ListAddonReleasesResponseBodyDataReleasesConditions) SetReason(v string) *ListAddonReleasesResponseBodyDataReleasesConditions {
	s.Reason = &v
	return s
}

func (s *ListAddonReleasesResponseBodyDataReleasesConditions) SetStatus(v string) *ListAddonReleasesResponseBodyDataReleasesConditions {
	s.Status = &v
	return s
}

func (s *ListAddonReleasesResponseBodyDataReleasesConditions) SetType(v string) *ListAddonReleasesResponseBodyDataReleasesConditions {
	s.Type = &v
	return s
}

type ListAddonReleasesResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListAddonReleasesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListAddonReleasesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListAddonReleasesResponse) GoString() string {
	return s.String()
}

func (s *ListAddonReleasesResponse) SetHeaders(v map[string]*string) *ListAddonReleasesResponse {
	s.Headers = v
	return s
}

func (s *ListAddonReleasesResponse) SetStatusCode(v int32) *ListAddonReleasesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListAddonReleasesResponse) SetBody(v *ListAddonReleasesResponseBody) *ListAddonReleasesResponse {
	s.Body = v
	return s
}

type ListAddonsRequest struct {
	// Language,the default language is Chinese.
	//
	// example:
	//
	// zh
	AliyunLang *string `json:"AliyunLang,omitempty" xml:"AliyunLang,omitempty"`
	// Category filter.
	//
	// example:
	//
	// database
	Category *string `json:"Category,omitempty" xml:"Category,omitempty"`
	// Whether to enable regular matching.
	//
	// example:
	//
	// false
	Regexp *bool `json:"Regexp,omitempty" xml:"Regexp,omitempty"`
	// The region ID.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// A query field can be queried by name or description.
	//
	// example:
	//
	// mysql
	Search *string `json:"Search,omitempty" xml:"Search,omitempty"`
}

func (s ListAddonsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListAddonsRequest) GoString() string {
	return s.String()
}

func (s *ListAddonsRequest) SetAliyunLang(v string) *ListAddonsRequest {
	s.AliyunLang = &v
	return s
}

func (s *ListAddonsRequest) SetCategory(v string) *ListAddonsRequest {
	s.Category = &v
	return s
}

func (s *ListAddonsRequest) SetRegexp(v bool) *ListAddonsRequest {
	s.Regexp = &v
	return s
}

func (s *ListAddonsRequest) SetRegionId(v string) *ListAddonsRequest {
	s.RegionId = &v
	return s
}

func (s *ListAddonsRequest) SetSearch(v string) *ListAddonsRequest {
	s.Search = &v
	return s
}

type ListAddonsResponseBody struct {
	// Status code: 200 indicates success.
	//
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned struct.
	Data []*ListAddonsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// The returned message.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	//
	// example:
	//
	// 78901766-3806-4E96-8E47-CFEF59E4****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the alert rule was deleted. Valid values:
	//
	// 	- `true`: The alert rule was deleted.
	//
	// 	- `false`: The alert rule failed to be deleted.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListAddonsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListAddonsResponseBody) GoString() string {
	return s.String()
}

func (s *ListAddonsResponseBody) SetCode(v int32) *ListAddonsResponseBody {
	s.Code = &v
	return s
}

func (s *ListAddonsResponseBody) SetData(v []*ListAddonsResponseBodyData) *ListAddonsResponseBody {
	s.Data = v
	return s
}

func (s *ListAddonsResponseBody) SetMessage(v string) *ListAddonsResponseBody {
	s.Message = &v
	return s
}

func (s *ListAddonsResponseBody) SetRequestId(v string) *ListAddonsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListAddonsResponseBody) SetSuccess(v bool) *ListAddonsResponseBody {
	s.Success = &v
	return s
}

type ListAddonsResponseBodyData struct {
	// Ailas of the Addon.
	//
	// example:
	//
	// MySQL
	Alias *string `json:"Alias,omitempty" xml:"Alias,omitempty"`
	// Categories list.
	Categories []*string `json:"Categories,omitempty" xml:"Categories,omitempty" type:"Repeated"`
	// Dashboard list.
	Dashboards []*ListAddonsResponseBodyDataDashboards `json:"Dashboards,omitempty" xml:"Dashboards,omitempty" type:"Repeated"`
	// Description of the Addon.
	//
	// example:
	//
	// Monitor database indicators with MySQL Exporter
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// Environment list.
	Environments []*ListAddonsResponseBodyDataEnvironments `json:"Environments,omitempty" xml:"Environments,omitempty" type:"Repeated"`
	// Icon address.
	//
	// example:
	//
	// http://xxxx
	Icon *string `json:"Icon,omitempty" xml:"Icon,omitempty"`
	// Keyword list.
	Keywords []*string `json:"Keywords,omitempty" xml:"Keywords,omitempty" type:"Repeated"`
	// Language.
	//
	// example:
	//
	// zh
	Language *string `json:"Language,omitempty" xml:"Language,omitempty"`
	// Last installation time.
	//
	// example:
	//
	// 2023-09-22T16:56:29+08:00
	LatestReleaseCreateTime *string `json:"LatestReleaseCreateTime,omitempty" xml:"LatestReleaseCreateTime,omitempty"`
	// Name of the Addon.
	//
	// example:
	//
	// mysql
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// Whether to install it only once.
	//
	// example:
	//
	// false
	Once *bool `json:"Once,omitempty" xml:"Once,omitempty"`
	// Scene of the Addon.
	//
	// example:
	//
	// database
	Scene *string `json:"Scene,omitempty" xml:"Scene,omitempty"`
	// Version of the Addon.
	//
	// example:
	//
	// 0.0.1
	Version *string `json:"Version,omitempty" xml:"Version,omitempty"`
	// Weight of the Addon.
	//
	// example:
	//
	// 857
	Weight *string `json:"Weight,omitempty" xml:"Weight,omitempty"`
}

func (s ListAddonsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListAddonsResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListAddonsResponseBodyData) SetAlias(v string) *ListAddonsResponseBodyData {
	s.Alias = &v
	return s
}

func (s *ListAddonsResponseBodyData) SetCategories(v []*string) *ListAddonsResponseBodyData {
	s.Categories = v
	return s
}

func (s *ListAddonsResponseBodyData) SetDashboards(v []*ListAddonsResponseBodyDataDashboards) *ListAddonsResponseBodyData {
	s.Dashboards = v
	return s
}

func (s *ListAddonsResponseBodyData) SetDescription(v string) *ListAddonsResponseBodyData {
	s.Description = &v
	return s
}

func (s *ListAddonsResponseBodyData) SetEnvironments(v []*ListAddonsResponseBodyDataEnvironments) *ListAddonsResponseBodyData {
	s.Environments = v
	return s
}

func (s *ListAddonsResponseBodyData) SetIcon(v string) *ListAddonsResponseBodyData {
	s.Icon = &v
	return s
}

func (s *ListAddonsResponseBodyData) SetKeywords(v []*string) *ListAddonsResponseBodyData {
	s.Keywords = v
	return s
}

func (s *ListAddonsResponseBodyData) SetLanguage(v string) *ListAddonsResponseBodyData {
	s.Language = &v
	return s
}

func (s *ListAddonsResponseBodyData) SetLatestReleaseCreateTime(v string) *ListAddonsResponseBodyData {
	s.LatestReleaseCreateTime = &v
	return s
}

func (s *ListAddonsResponseBodyData) SetName(v string) *ListAddonsResponseBodyData {
	s.Name = &v
	return s
}

func (s *ListAddonsResponseBodyData) SetOnce(v bool) *ListAddonsResponseBodyData {
	s.Once = &v
	return s
}

func (s *ListAddonsResponseBodyData) SetScene(v string) *ListAddonsResponseBodyData {
	s.Scene = &v
	return s
}

func (s *ListAddonsResponseBodyData) SetVersion(v string) *ListAddonsResponseBodyData {
	s.Version = &v
	return s
}

func (s *ListAddonsResponseBodyData) SetWeight(v string) *ListAddonsResponseBodyData {
	s.Weight = &v
	return s
}

type ListAddonsResponseBodyDataDashboards struct {
	// Description of the dashboard.
	//
	// example:
	//
	// MySQL monitors the market information, monitoring the connection information, usage information and other indicators
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// Name of the dashboard.
	//
	// example:
	//
	// mysql-overview
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// URL of the dashboard.
	//
	// example:
	//
	// http://xxxx
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s ListAddonsResponseBodyDataDashboards) String() string {
	return tea.Prettify(s)
}

func (s ListAddonsResponseBodyDataDashboards) GoString() string {
	return s.String()
}

func (s *ListAddonsResponseBodyDataDashboards) SetDescription(v string) *ListAddonsResponseBodyDataDashboards {
	s.Description = &v
	return s
}

func (s *ListAddonsResponseBodyDataDashboards) SetName(v string) *ListAddonsResponseBodyDataDashboards {
	s.Name = &v
	return s
}

func (s *ListAddonsResponseBodyDataDashboards) SetUrl(v string) *ListAddonsResponseBodyDataDashboards {
	s.Url = &v
	return s
}

type ListAddonsResponseBodyDataEnvironments struct {
	// Dependency list.
	Dependencies *ListAddonsResponseBodyDataEnvironmentsDependencies `json:"Dependencies,omitempty" xml:"Dependencies,omitempty" type:"Struct"`
	// Description of environment.
	//
	// example:
	//
	// The MySQL service is deployed in a Kubernetes cluster.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// Whether to enable it.
	//
	// example:
	//
	// true
	Enable *bool `json:"Enable,omitempty" xml:"Enable,omitempty"`
	// Label of the environment.
	//
	// example:
	//
	// Container
	Label *string `json:"Label,omitempty" xml:"Label,omitempty"`
	// Name of the environment.
	//
	// example:
	//
	// CS
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// Policies list.
	Policies *ListAddonsResponseBodyDataEnvironmentsPolicies `json:"Policies,omitempty" xml:"Policies,omitempty" type:"Struct"`
}

func (s ListAddonsResponseBodyDataEnvironments) String() string {
	return tea.Prettify(s)
}

func (s ListAddonsResponseBodyDataEnvironments) GoString() string {
	return s.String()
}

func (s *ListAddonsResponseBodyDataEnvironments) SetDependencies(v *ListAddonsResponseBodyDataEnvironmentsDependencies) *ListAddonsResponseBodyDataEnvironments {
	s.Dependencies = v
	return s
}

func (s *ListAddonsResponseBodyDataEnvironments) SetDescription(v string) *ListAddonsResponseBodyDataEnvironments {
	s.Description = &v
	return s
}

func (s *ListAddonsResponseBodyDataEnvironments) SetEnable(v bool) *ListAddonsResponseBodyDataEnvironments {
	s.Enable = &v
	return s
}

func (s *ListAddonsResponseBodyDataEnvironments) SetLabel(v string) *ListAddonsResponseBodyDataEnvironments {
	s.Label = &v
	return s
}

func (s *ListAddonsResponseBodyDataEnvironments) SetName(v string) *ListAddonsResponseBodyDataEnvironments {
	s.Name = &v
	return s
}

func (s *ListAddonsResponseBodyDataEnvironments) SetPolicies(v *ListAddonsResponseBodyDataEnvironmentsPolicies) *ListAddonsResponseBodyDataEnvironments {
	s.Policies = v
	return s
}

type ListAddonsResponseBodyDataEnvironmentsDependencies struct {
	ClusterTypes []*string `json:"ClusterTypes,omitempty" xml:"ClusterTypes,omitempty" type:"Repeated"`
	// Name of the Feature.
	Features map[string]*bool `json:"Features,omitempty" xml:"Features,omitempty"`
	// Service list.
	Services []*string `json:"Services,omitempty" xml:"Services,omitempty" type:"Repeated"`
}

func (s ListAddonsResponseBodyDataEnvironmentsDependencies) String() string {
	return tea.Prettify(s)
}

func (s ListAddonsResponseBodyDataEnvironmentsDependencies) GoString() string {
	return s.String()
}

func (s *ListAddonsResponseBodyDataEnvironmentsDependencies) SetClusterTypes(v []*string) *ListAddonsResponseBodyDataEnvironmentsDependencies {
	s.ClusterTypes = v
	return s
}

func (s *ListAddonsResponseBodyDataEnvironmentsDependencies) SetFeatures(v map[string]*bool) *ListAddonsResponseBodyDataEnvironmentsDependencies {
	s.Features = v
	return s
}

func (s *ListAddonsResponseBodyDataEnvironmentsDependencies) SetServices(v []*string) *ListAddonsResponseBodyDataEnvironmentsDependencies {
	s.Services = v
	return s
}

type ListAddonsResponseBodyDataEnvironmentsPolicies struct {
	// Default alert status.
	//
	// example:
	//
	// default
	AlertDefaultStatus *string `json:"AlertDefaultStatus,omitempty" xml:"AlertDefaultStatus,omitempty"`
	// Default install status.
	//
	// example:
	//
	// false
	DefaultInstall *bool `json:"DefaultInstall,omitempty" xml:"DefaultInstall,omitempty"`
	// Whether to enable a service account.
	//
	// example:
	//
	// false.
	EnableServiceAccount *bool `json:"EnableServiceAccount,omitempty" xml:"EnableServiceAccount,omitempty"`
	// Metric check rule PromQL.
	MetricCheckRule *ListAddonsResponseBodyDataEnvironmentsPoliciesMetricCheckRule `json:"MetricCheckRule,omitempty" xml:"MetricCheckRule,omitempty" type:"Struct"`
	// Whether to restart after integration.
	//
	// example:
	//
	// false
	NeedRestartAfterIntegration *bool `json:"NeedRestartAfterIntegration,omitempty" xml:"NeedRestartAfterIntegration,omitempty"`
	// Protocol list.
	Protocols []*ListAddonsResponseBodyDataEnvironmentsPoliciesProtocols `json:"Protocols,omitempty" xml:"Protocols,omitempty" type:"Repeated"`
	// Target Addon name.
	//
	// example:
	//
	// cloud-rds-mysql
	TargetAddonName *string `json:"TargetAddonName,omitempty" xml:"TargetAddonName,omitempty"`
}

func (s ListAddonsResponseBodyDataEnvironmentsPolicies) String() string {
	return tea.Prettify(s)
}

func (s ListAddonsResponseBodyDataEnvironmentsPolicies) GoString() string {
	return s.String()
}

func (s *ListAddonsResponseBodyDataEnvironmentsPolicies) SetAlertDefaultStatus(v string) *ListAddonsResponseBodyDataEnvironmentsPolicies {
	s.AlertDefaultStatus = &v
	return s
}

func (s *ListAddonsResponseBodyDataEnvironmentsPolicies) SetDefaultInstall(v bool) *ListAddonsResponseBodyDataEnvironmentsPolicies {
	s.DefaultInstall = &v
	return s
}

func (s *ListAddonsResponseBodyDataEnvironmentsPolicies) SetEnableServiceAccount(v bool) *ListAddonsResponseBodyDataEnvironmentsPolicies {
	s.EnableServiceAccount = &v
	return s
}

func (s *ListAddonsResponseBodyDataEnvironmentsPolicies) SetMetricCheckRule(v *ListAddonsResponseBodyDataEnvironmentsPoliciesMetricCheckRule) *ListAddonsResponseBodyDataEnvironmentsPolicies {
	s.MetricCheckRule = v
	return s
}

func (s *ListAddonsResponseBodyDataEnvironmentsPolicies) SetNeedRestartAfterIntegration(v bool) *ListAddonsResponseBodyDataEnvironmentsPolicies {
	s.NeedRestartAfterIntegration = &v
	return s
}

func (s *ListAddonsResponseBodyDataEnvironmentsPolicies) SetProtocols(v []*ListAddonsResponseBodyDataEnvironmentsPoliciesProtocols) *ListAddonsResponseBodyDataEnvironmentsPolicies {
	s.Protocols = v
	return s
}

func (s *ListAddonsResponseBodyDataEnvironmentsPolicies) SetTargetAddonName(v string) *ListAddonsResponseBodyDataEnvironmentsPolicies {
	s.TargetAddonName = &v
	return s
}

type ListAddonsResponseBodyDataEnvironmentsPoliciesMetricCheckRule struct {
	// PromQL list.
	PromQL []*string `json:"PromQL,omitempty" xml:"PromQL,omitempty" type:"Repeated"`
}

func (s ListAddonsResponseBodyDataEnvironmentsPoliciesMetricCheckRule) String() string {
	return tea.Prettify(s)
}

func (s ListAddonsResponseBodyDataEnvironmentsPoliciesMetricCheckRule) GoString() string {
	return s.String()
}

func (s *ListAddonsResponseBodyDataEnvironmentsPoliciesMetricCheckRule) SetPromQL(v []*string) *ListAddonsResponseBodyDataEnvironmentsPoliciesMetricCheckRule {
	s.PromQL = v
	return s
}

type ListAddonsResponseBodyDataEnvironmentsPoliciesProtocols struct {
	// Description of the Protocol.
	//
	// example:
	//
	// ARMS
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// Icon address.
	//
	// example:
	//
	// http://xxxxxxx
	Icon *string `json:"Icon,omitempty" xml:"Icon,omitempty"`
	// Label of the Protocol.
	//
	// example:
	//
	// ARMS
	Label *string `json:"Label,omitempty" xml:"Label,omitempty"`
	// Name of the Protocol.
	//
	// example:
	//
	// arms
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s ListAddonsResponseBodyDataEnvironmentsPoliciesProtocols) String() string {
	return tea.Prettify(s)
}

func (s ListAddonsResponseBodyDataEnvironmentsPoliciesProtocols) GoString() string {
	return s.String()
}

func (s *ListAddonsResponseBodyDataEnvironmentsPoliciesProtocols) SetDescription(v string) *ListAddonsResponseBodyDataEnvironmentsPoliciesProtocols {
	s.Description = &v
	return s
}

func (s *ListAddonsResponseBodyDataEnvironmentsPoliciesProtocols) SetIcon(v string) *ListAddonsResponseBodyDataEnvironmentsPoliciesProtocols {
	s.Icon = &v
	return s
}

func (s *ListAddonsResponseBodyDataEnvironmentsPoliciesProtocols) SetLabel(v string) *ListAddonsResponseBodyDataEnvironmentsPoliciesProtocols {
	s.Label = &v
	return s
}

func (s *ListAddonsResponseBodyDataEnvironmentsPoliciesProtocols) SetName(v string) *ListAddonsResponseBodyDataEnvironmentsPoliciesProtocols {
	s.Name = &v
	return s
}

type ListAddonsResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListAddonsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListAddonsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListAddonsResponse) GoString() string {
	return s.String()
}

func (s *ListAddonsResponse) SetHeaders(v map[string]*string) *ListAddonsResponse {
	s.Headers = v
	return s
}

func (s *ListAddonsResponse) SetStatusCode(v int32) *ListAddonsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListAddonsResponse) SetBody(v *ListAddonsResponseBody) *ListAddonsResponse {
	s.Body = v
	return s
}

type ListAlertEventsRequest struct {
	// The name of the alert.
	//
	// example:
	//
	// Test-triggered alert
	AlertName *string `json:"AlertName,omitempty" xml:"AlertName,omitempty"`
	// The end time of the alert events that you want to query. Specify the time in the YYYY-MM-DD HH:mm:ss format.
	//
	// example:
	//
	// 2021-12-22 23:59:59
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The list of matching conditions.
	//
	// example:
	//
	// [         {           "value": "ARMS_NOTIFICATION",           "key": "clustername",           "operator": "eq"         }       ]     },{       "matchingConditions": [         {           "value": "test",           "key": "alertname",           "operator": "eq"         }       ]
	MatchingConditions *string `json:"MatchingConditions,omitempty" xml:"MatchingConditions,omitempty"`
	// The number of the page to return.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	Page                     *int64 `json:"Page,omitempty" xml:"Page,omitempty"`
	ShowNotificationPolicies *bool  `json:"ShowNotificationPolicies,omitempty" xml:"ShowNotificationPolicies,omitempty"`
	// The number of entries to return on each page.
	//
	// This parameter is required.
	//
	// example:
	//
	// 20
	Size *int64 `json:"Size,omitempty" xml:"Size,omitempty"`
	// The start time of the alert events that you want to query. Specify the time in the YYYY-MM-DD HH:mm:ss format.
	//
	// example:
	//
	// 2021-12-19 00:00:00
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The status of the alert events. Valid values:
	//
	// 	- Active
	//
	// 	- Silenced
	//
	// 	- Resolved
	//
	// example:
	//
	// Active
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListAlertEventsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListAlertEventsRequest) GoString() string {
	return s.String()
}

func (s *ListAlertEventsRequest) SetAlertName(v string) *ListAlertEventsRequest {
	s.AlertName = &v
	return s
}

func (s *ListAlertEventsRequest) SetEndTime(v string) *ListAlertEventsRequest {
	s.EndTime = &v
	return s
}

func (s *ListAlertEventsRequest) SetMatchingConditions(v string) *ListAlertEventsRequest {
	s.MatchingConditions = &v
	return s
}

func (s *ListAlertEventsRequest) SetPage(v int64) *ListAlertEventsRequest {
	s.Page = &v
	return s
}

func (s *ListAlertEventsRequest) SetShowNotificationPolicies(v bool) *ListAlertEventsRequest {
	s.ShowNotificationPolicies = &v
	return s
}

func (s *ListAlertEventsRequest) SetSize(v int64) *ListAlertEventsRequest {
	s.Size = &v
	return s
}

func (s *ListAlertEventsRequest) SetStartTime(v string) *ListAlertEventsRequest {
	s.StartTime = &v
	return s
}

func (s *ListAlertEventsRequest) SetStatus(v string) *ListAlertEventsRequest {
	s.Status = &v
	return s
}

type ListAlertEventsResponseBody struct {
	// The struct returned.
	PageBean *ListAlertEventsResponseBodyPageBean `json:"PageBean,omitempty" xml:"PageBean,omitempty" type:"Struct"`
	// The ID of the request.
	//
	// example:
	//
	// 2FC13182-B9AF-4E6B-BE51-72669B7C****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListAlertEventsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListAlertEventsResponseBody) GoString() string {
	return s.String()
}

func (s *ListAlertEventsResponseBody) SetPageBean(v *ListAlertEventsResponseBodyPageBean) *ListAlertEventsResponseBody {
	s.PageBean = v
	return s
}

func (s *ListAlertEventsResponseBody) SetRequestId(v string) *ListAlertEventsResponseBody {
	s.RequestId = &v
	return s
}

type ListAlertEventsResponseBodyPageBean struct {
	// The list of information about historical alert events.
	Events []*ListAlertEventsResponseBodyPageBeanEvents `json:"Events,omitempty" xml:"Events,omitempty" type:"Repeated"`
	// The number of the page returned.
	//
	// example:
	//
	// 1
	Page *int64 `json:"Page,omitempty" xml:"Page,omitempty"`
	// The number of entries returned per page.
	//
	// example:
	//
	// 20
	Size *int64 `json:"Size,omitempty" xml:"Size,omitempty"`
	// The total number of returned entries.
	//
	// example:
	//
	// 24
	Total *int64 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s ListAlertEventsResponseBodyPageBean) String() string {
	return tea.Prettify(s)
}

func (s ListAlertEventsResponseBodyPageBean) GoString() string {
	return s.String()
}

func (s *ListAlertEventsResponseBodyPageBean) SetEvents(v []*ListAlertEventsResponseBodyPageBeanEvents) *ListAlertEventsResponseBodyPageBean {
	s.Events = v
	return s
}

func (s *ListAlertEventsResponseBodyPageBean) SetPage(v int64) *ListAlertEventsResponseBodyPageBean {
	s.Page = &v
	return s
}

func (s *ListAlertEventsResponseBodyPageBean) SetSize(v int64) *ListAlertEventsResponseBodyPageBean {
	s.Size = &v
	return s
}

func (s *ListAlertEventsResponseBodyPageBean) SetTotal(v int64) *ListAlertEventsResponseBodyPageBean {
	s.Total = &v
	return s
}

type ListAlertEventsResponseBodyPageBeanEvents struct {
	// The list of associated alerts.
	Alarms []*ListAlertEventsResponseBodyPageBeanEventsAlarms `json:"Alarms,omitempty" xml:"Alarms,omitempty" type:"Repeated"`
	// The name of the alert.
	//
	// example:
	//
	// Test-triggered alert
	AlertName *string `json:"AlertName,omitempty" xml:"AlertName,omitempty"`
	// The list of annotations.
	//
	// example:
	//
	// [{\\"Name\\":\\"annotation-a\\",\\"Value\\":\\"annotation a value\\"}]
	Annotations *string `json:"Annotations,omitempty" xml:"Annotations,omitempty"`
	// The description of the alert event.
	//
	// example:
	//
	// Test
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The end time of the alert event.
	//
	// example:
	//
	// 2021-12-20 17:42:16
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The URL of the alert event.
	//
	// example:
	//
	// https://xxx.xx/
	GeneratorURL *string `json:"GeneratorURL,omitempty" xml:"GeneratorURL,omitempty"`
	// The user who handled the alert.
	//
	// example:
	//
	// Tom
	HandlerName *string `json:"HandlerName,omitempty" xml:"HandlerName,omitempty"`
	// The name of the alert integration.
	//
	// example:
	//
	// Custom integration
	IntegrationName *string `json:"IntegrationName,omitempty" xml:"IntegrationName,omitempty"`
	// The type of the alert integration.
	//
	// example:
	//
	// CUSTOM
	IntegrationType *string `json:"IntegrationType,omitempty" xml:"IntegrationType,omitempty"`
	// The list of tags.
	//
	// example:
	//
	// [{\\"name\\":\\"severity\\",\\"value\\":\\"error\\"}]
	Labels               *string                                                          `json:"Labels,omitempty" xml:"Labels,omitempty"`
	NotificationPolicies []*ListAlertEventsResponseBodyPageBeanEventsNotificationPolicies `json:"NotificationPolicies,omitempty" xml:"NotificationPolicies,omitempty" type:"Repeated"`
	// The time when the alert event was received.
	//
	// example:
	//
	// 2021-12-20 17:42:16
	ReceiveTime *string `json:"ReceiveTime,omitempty" xml:"ReceiveTime,omitempty"`
	// The severity level of the alert. Valid value:
	//
	// 	- critical: P1
	//
	// 	- error: P2
	//
	// 	- warning: P3
	//
	// 	- page: P4
	//
	// 	- default: P6
	//
	// example:
	//
	// critical
	Severity *string `json:"Severity,omitempty" xml:"Severity,omitempty"`
	// The start time of the alert event.
	//
	// example:
	//
	// 2021-12-20 17:42:16
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The status of the alert event. Valid values:
	//
	// 	- Active
	//
	// 	- Silenced
	//
	// 	- Resolved
	//
	// example:
	//
	// Active
	Status       *string `json:"Status,omitempty" xml:"Status,omitempty"`
	TriggerCount *int64  `json:"TriggerCount,omitempty" xml:"TriggerCount,omitempty"`
}

func (s ListAlertEventsResponseBodyPageBeanEvents) String() string {
	return tea.Prettify(s)
}

func (s ListAlertEventsResponseBodyPageBeanEvents) GoString() string {
	return s.String()
}

func (s *ListAlertEventsResponseBodyPageBeanEvents) SetAlarms(v []*ListAlertEventsResponseBodyPageBeanEventsAlarms) *ListAlertEventsResponseBodyPageBeanEvents {
	s.Alarms = v
	return s
}

func (s *ListAlertEventsResponseBodyPageBeanEvents) SetAlertName(v string) *ListAlertEventsResponseBodyPageBeanEvents {
	s.AlertName = &v
	return s
}

func (s *ListAlertEventsResponseBodyPageBeanEvents) SetAnnotations(v string) *ListAlertEventsResponseBodyPageBeanEvents {
	s.Annotations = &v
	return s
}

func (s *ListAlertEventsResponseBodyPageBeanEvents) SetDescription(v string) *ListAlertEventsResponseBodyPageBeanEvents {
	s.Description = &v
	return s
}

func (s *ListAlertEventsResponseBodyPageBeanEvents) SetEndTime(v string) *ListAlertEventsResponseBodyPageBeanEvents {
	s.EndTime = &v
	return s
}

func (s *ListAlertEventsResponseBodyPageBeanEvents) SetGeneratorURL(v string) *ListAlertEventsResponseBodyPageBeanEvents {
	s.GeneratorURL = &v
	return s
}

func (s *ListAlertEventsResponseBodyPageBeanEvents) SetHandlerName(v string) *ListAlertEventsResponseBodyPageBeanEvents {
	s.HandlerName = &v
	return s
}

func (s *ListAlertEventsResponseBodyPageBeanEvents) SetIntegrationName(v string) *ListAlertEventsResponseBodyPageBeanEvents {
	s.IntegrationName = &v
	return s
}

func (s *ListAlertEventsResponseBodyPageBeanEvents) SetIntegrationType(v string) *ListAlertEventsResponseBodyPageBeanEvents {
	s.IntegrationType = &v
	return s
}

func (s *ListAlertEventsResponseBodyPageBeanEvents) SetLabels(v string) *ListAlertEventsResponseBodyPageBeanEvents {
	s.Labels = &v
	return s
}

func (s *ListAlertEventsResponseBodyPageBeanEvents) SetNotificationPolicies(v []*ListAlertEventsResponseBodyPageBeanEventsNotificationPolicies) *ListAlertEventsResponseBodyPageBeanEvents {
	s.NotificationPolicies = v
	return s
}

func (s *ListAlertEventsResponseBodyPageBeanEvents) SetReceiveTime(v string) *ListAlertEventsResponseBodyPageBeanEvents {
	s.ReceiveTime = &v
	return s
}

func (s *ListAlertEventsResponseBodyPageBeanEvents) SetSeverity(v string) *ListAlertEventsResponseBodyPageBeanEvents {
	s.Severity = &v
	return s
}

func (s *ListAlertEventsResponseBodyPageBeanEvents) SetStartTime(v string) *ListAlertEventsResponseBodyPageBeanEvents {
	s.StartTime = &v
	return s
}

func (s *ListAlertEventsResponseBodyPageBeanEvents) SetStatus(v string) *ListAlertEventsResponseBodyPageBeanEvents {
	s.Status = &v
	return s
}

func (s *ListAlertEventsResponseBodyPageBeanEvents) SetTriggerCount(v int64) *ListAlertEventsResponseBodyPageBeanEvents {
	s.TriggerCount = &v
	return s
}

type ListAlertEventsResponseBodyPageBeanEventsAlarms struct {
	// The ID of the alert.
	//
	// example:
	//
	// 77444
	AlarmId *int64 `json:"AlarmId,omitempty" xml:"AlarmId,omitempty"`
	// The name of the alert.
	//
	// example:
	//
	// Test-triggered alert
	AlarmName *string `json:"AlarmName,omitempty" xml:"AlarmName,omitempty"`
	// The time when the alert was created.
	//
	// example:
	//
	// 2021-12-20 07:10:18
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The status of the alert. Valid values:
	//
	// 	- 0: The alert is pending.
	//
	// 	- 1: The alert is being handled.
	//
	// 	- 2: The alert is cleared.
	//
	// example:
	//
	// 0
	State *int32 `json:"State,omitempty" xml:"State,omitempty"`
}

func (s ListAlertEventsResponseBodyPageBeanEventsAlarms) String() string {
	return tea.Prettify(s)
}

func (s ListAlertEventsResponseBodyPageBeanEventsAlarms) GoString() string {
	return s.String()
}

func (s *ListAlertEventsResponseBodyPageBeanEventsAlarms) SetAlarmId(v int64) *ListAlertEventsResponseBodyPageBeanEventsAlarms {
	s.AlarmId = &v
	return s
}

func (s *ListAlertEventsResponseBodyPageBeanEventsAlarms) SetAlarmName(v string) *ListAlertEventsResponseBodyPageBeanEventsAlarms {
	s.AlarmName = &v
	return s
}

func (s *ListAlertEventsResponseBodyPageBeanEventsAlarms) SetCreateTime(v string) *ListAlertEventsResponseBodyPageBeanEventsAlarms {
	s.CreateTime = &v
	return s
}

func (s *ListAlertEventsResponseBodyPageBeanEventsAlarms) SetState(v int32) *ListAlertEventsResponseBodyPageBeanEventsAlarms {
	s.State = &v
	return s
}

type ListAlertEventsResponseBodyPageBeanEventsNotificationPolicies struct {
	Id   *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s ListAlertEventsResponseBodyPageBeanEventsNotificationPolicies) String() string {
	return tea.Prettify(s)
}

func (s ListAlertEventsResponseBodyPageBeanEventsNotificationPolicies) GoString() string {
	return s.String()
}

func (s *ListAlertEventsResponseBodyPageBeanEventsNotificationPolicies) SetId(v int64) *ListAlertEventsResponseBodyPageBeanEventsNotificationPolicies {
	s.Id = &v
	return s
}

func (s *ListAlertEventsResponseBodyPageBeanEventsNotificationPolicies) SetName(v string) *ListAlertEventsResponseBodyPageBeanEventsNotificationPolicies {
	s.Name = &v
	return s
}

type ListAlertEventsResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListAlertEventsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListAlertEventsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListAlertEventsResponse) GoString() string {
	return s.String()
}

func (s *ListAlertEventsResponse) SetHeaders(v map[string]*string) *ListAlertEventsResponse {
	s.Headers = v
	return s
}

func (s *ListAlertEventsResponse) SetStatusCode(v int32) *ListAlertEventsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListAlertEventsResponse) SetBody(v *ListAlertEventsResponseBody) *ListAlertEventsResponse {
	s.Body = v
	return s
}

type ListAlertsRequest struct {
	// The name of the alert rule.
	//
	// example:
	//
	// Test alert
	AlertName *string `json:"AlertName,omitempty" xml:"AlertName,omitempty"`
	// The ID of the notification policy.
	//
	// example:
	//
	// 12345
	DispatchRuleId *int64 `json:"DispatchRuleId,omitempty" xml:"DispatchRuleId,omitempty"`
	// The end time of the alert sending history that you want to query. Specify the time in the `YYYY-MM-DD HH:mm:ss` format.
	//
	// example:
	//
	// 2021-12-22 23:59:59
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The integration type.
	//
	// 	- ARMS
	//
	// 	- CLOUD_MONITOR
	//
	// 	- MSE
	//
	// 	- ARMS_CLOUD_DIALTEST
	//
	// 	- PROMETHEUS
	//
	// 	- LOG_SERVICE
	//
	// 	- CUSTOM
	//
	// 	- ARMS_PROMETHEUS
	//
	// 	- ARMS_APP_MON
	//
	// 	- ARMS_FRONT_MON
	//
	// 	- ARMS_CUSTOM
	//
	// 	- XTRACE
	//
	// 	- GRAFANA
	//
	// 	- ZABBIX
	//
	// 	- SKYWALKING
	//
	// 	- EVENT_BRIDGE
	//
	// 	- NAGIOS
	//
	// 	- OPENFALCON
	//
	// 	- ARMS_INSIGHTS
	//
	// example:
	//
	// ARMS_APP_MON
	IntegrationType *string `json:"IntegrationType,omitempty" xml:"IntegrationType,omitempty"`
	// The number of the page to return.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	Page *int64 `json:"Page,omitempty" xml:"Page,omitempty"`
	// The ID of the region.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The severity level of the alert. Valid values: P6, P5, P4, P3, P2, and P1. The preceding values are listed in ascending order of severity.
	//
	// example:
	//
	// P6
	Severity *string `json:"Severity,omitempty" xml:"Severity,omitempty"`
	// Specifies whether to query the activities that correspond to alerts. Valid values:
	//
	// 	- `false` (default value): The activities are not queried.
	//
	// 	- `true`: The activities in the last three days are queried.
	//
	// example:
	//
	// true
	ShowActivities *bool `json:"ShowActivities,omitempty" xml:"ShowActivities,omitempty"`
	// Specifies whether to query the events that correspond to alerts. Valid values:
	//
	// 	- `false` (default value): The events are not queried.
	//
	// 	- `true`: The events are queried.
	//
	// example:
	//
	// true
	ShowEvents *bool `json:"ShowEvents,omitempty" xml:"ShowEvents,omitempty"`
	// The number of alerts to return on each page.
	//
	// This parameter is required.
	//
	// example:
	//
	// 20
	Size *int64 `json:"Size,omitempty" xml:"Size,omitempty"`
	// The start time of the alert sending history that you want to query. Specify the time in the `YYYY-MM-DD HH:mm:ss` format.
	//
	// example:
	//
	// 2021-12-10 00:00:00
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The status of the alert. Valid values:
	//
	// 	- 0: The alert is pending.
	//
	// 	- 1: The alert is being handled.
	//
	// 	- 2: The alert is handled.
	//
	// example:
	//
	// 2
	State *int64 `json:"State,omitempty" xml:"State,omitempty"`
}

func (s ListAlertsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListAlertsRequest) GoString() string {
	return s.String()
}

func (s *ListAlertsRequest) SetAlertName(v string) *ListAlertsRequest {
	s.AlertName = &v
	return s
}

func (s *ListAlertsRequest) SetDispatchRuleId(v int64) *ListAlertsRequest {
	s.DispatchRuleId = &v
	return s
}

func (s *ListAlertsRequest) SetEndTime(v string) *ListAlertsRequest {
	s.EndTime = &v
	return s
}

func (s *ListAlertsRequest) SetIntegrationType(v string) *ListAlertsRequest {
	s.IntegrationType = &v
	return s
}

func (s *ListAlertsRequest) SetPage(v int64) *ListAlertsRequest {
	s.Page = &v
	return s
}

func (s *ListAlertsRequest) SetRegionId(v string) *ListAlertsRequest {
	s.RegionId = &v
	return s
}

func (s *ListAlertsRequest) SetSeverity(v string) *ListAlertsRequest {
	s.Severity = &v
	return s
}

func (s *ListAlertsRequest) SetShowActivities(v bool) *ListAlertsRequest {
	s.ShowActivities = &v
	return s
}

func (s *ListAlertsRequest) SetShowEvents(v bool) *ListAlertsRequest {
	s.ShowEvents = &v
	return s
}

func (s *ListAlertsRequest) SetSize(v int64) *ListAlertsRequest {
	s.Size = &v
	return s
}

func (s *ListAlertsRequest) SetStartTime(v string) *ListAlertsRequest {
	s.StartTime = &v
	return s
}

func (s *ListAlertsRequest) SetState(v int64) *ListAlertsRequest {
	s.State = &v
	return s
}

type ListAlertsResponseBody struct {
	// The information about the array object.
	PageBean *ListAlertsResponseBodyPageBean `json:"PageBean,omitempty" xml:"PageBean,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// 2FC13182-B9AF-4E6B-BE51-72669B7C****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListAlertsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListAlertsResponseBody) GoString() string {
	return s.String()
}

func (s *ListAlertsResponseBody) SetPageBean(v *ListAlertsResponseBodyPageBean) *ListAlertsResponseBody {
	s.PageBean = v
	return s
}

func (s *ListAlertsResponseBody) SetRequestId(v string) *ListAlertsResponseBody {
	s.RequestId = &v
	return s
}

type ListAlertsResponseBodyPageBean struct {
	// The alerts for which the alert sending history is queried.
	ListAlerts []*ListAlertsResponseBodyPageBeanListAlerts `json:"ListAlerts,omitempty" xml:"ListAlerts,omitempty" type:"Repeated"`
	// The page number of the returned page.
	//
	// example:
	//
	// 1
	Page *int64 `json:"Page,omitempty" xml:"Page,omitempty"`
	// The number of alerts returned per page.
	//
	// example:
	//
	// 20
	Size *int64 `json:"Size,omitempty" xml:"Size,omitempty"`
	// The total number of queried alerts.
	//
	// example:
	//
	// 1
	Total *int64 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s ListAlertsResponseBodyPageBean) String() string {
	return tea.Prettify(s)
}

func (s ListAlertsResponseBodyPageBean) GoString() string {
	return s.String()
}

func (s *ListAlertsResponseBodyPageBean) SetListAlerts(v []*ListAlertsResponseBodyPageBeanListAlerts) *ListAlertsResponseBodyPageBean {
	s.ListAlerts = v
	return s
}

func (s *ListAlertsResponseBodyPageBean) SetPage(v int64) *ListAlertsResponseBodyPageBean {
	s.Page = &v
	return s
}

func (s *ListAlertsResponseBodyPageBean) SetSize(v int64) *ListAlertsResponseBodyPageBean {
	s.Size = &v
	return s
}

func (s *ListAlertsResponseBodyPageBean) SetTotal(v int64) *ListAlertsResponseBodyPageBean {
	s.Total = &v
	return s
}

type ListAlertsResponseBodyPageBeanListAlerts struct {
	AcknowledgeTime *int64 `json:"AcknowledgeTime,omitempty" xml:"AcknowledgeTime,omitempty"`
	// The list of activities.
	Activities []*ListAlertsResponseBodyPageBeanListAlertsActivities `json:"Activities,omitempty" xml:"Activities,omitempty" type:"Repeated"`
	// The list of events.
	AlertEvents []*ListAlertsResponseBodyPageBeanListAlertsAlertEvents `json:"AlertEvents,omitempty" xml:"AlertEvents,omitempty" type:"Repeated"`
	// The alert ID.
	//
	// example:
	//
	// 2279
	AlertId *int64 `json:"AlertId,omitempty" xml:"AlertId,omitempty"`
	// The name of the alert rule.
	//
	// example:
	//
	// Test alert
	AlertName *string `json:"AlertName,omitempty" xml:"AlertName,omitempty"`
	// The time when the alert was created.
	//
	// example:
	//
	// 2022-01-18 00:21:35
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	Describe   *string `json:"Describe,omitempty" xml:"Describe,omitempty"`
	// The ID of the notification policy.
	//
	// example:
	//
	// 12345
	DispatchRuleId *float32 `json:"DispatchRuleId,omitempty" xml:"DispatchRuleId,omitempty"`
	// The name of the notification policy.
	//
	// example:
	//
	// DingTalk Notification
	DispatchRuleName *string `json:"DispatchRuleName,omitempty" xml:"DispatchRuleName,omitempty"`
	Handler          *string `json:"Handler,omitempty" xml:"Handler,omitempty"`
	NotifyRobots     *string `json:"NotifyRobots,omitempty" xml:"NotifyRobots,omitempty"`
	Owner            *string `json:"Owner,omitempty" xml:"Owner,omitempty"`
	RecoverTime      *int64  `json:"RecoverTime,omitempty" xml:"RecoverTime,omitempty"`
	// The severity level of the alert. Valid values: P6, P5, P4, P3, P2, and P1. The preceding values are listed in ascending order of severity.
	//
	// example:
	//
	// P6
	Severity *string `json:"Severity,omitempty" xml:"Severity,omitempty"`
	// The Alert solution.
	//
	// example:
	//
	// --
	Solution *string `json:"Solution,omitempty" xml:"Solution,omitempty"`
	// The status of the alert. Valid values:
	//
	// 	- 0: The alert is pending.
	//
	// 	- 1: The alert is being handled.
	//
	// 	- 2: The alert is handled.
	//
	// example:
	//
	// 0
	State *int64 `json:"State,omitempty" xml:"State,omitempty"`
}

func (s ListAlertsResponseBodyPageBeanListAlerts) String() string {
	return tea.Prettify(s)
}

func (s ListAlertsResponseBodyPageBeanListAlerts) GoString() string {
	return s.String()
}

func (s *ListAlertsResponseBodyPageBeanListAlerts) SetAcknowledgeTime(v int64) *ListAlertsResponseBodyPageBeanListAlerts {
	s.AcknowledgeTime = &v
	return s
}

func (s *ListAlertsResponseBodyPageBeanListAlerts) SetActivities(v []*ListAlertsResponseBodyPageBeanListAlertsActivities) *ListAlertsResponseBodyPageBeanListAlerts {
	s.Activities = v
	return s
}

func (s *ListAlertsResponseBodyPageBeanListAlerts) SetAlertEvents(v []*ListAlertsResponseBodyPageBeanListAlertsAlertEvents) *ListAlertsResponseBodyPageBeanListAlerts {
	s.AlertEvents = v
	return s
}

func (s *ListAlertsResponseBodyPageBeanListAlerts) SetAlertId(v int64) *ListAlertsResponseBodyPageBeanListAlerts {
	s.AlertId = &v
	return s
}

func (s *ListAlertsResponseBodyPageBeanListAlerts) SetAlertName(v string) *ListAlertsResponseBodyPageBeanListAlerts {
	s.AlertName = &v
	return s
}

func (s *ListAlertsResponseBodyPageBeanListAlerts) SetCreateTime(v string) *ListAlertsResponseBodyPageBeanListAlerts {
	s.CreateTime = &v
	return s
}

func (s *ListAlertsResponseBodyPageBeanListAlerts) SetDescribe(v string) *ListAlertsResponseBodyPageBeanListAlerts {
	s.Describe = &v
	return s
}

func (s *ListAlertsResponseBodyPageBeanListAlerts) SetDispatchRuleId(v float32) *ListAlertsResponseBodyPageBeanListAlerts {
	s.DispatchRuleId = &v
	return s
}

func (s *ListAlertsResponseBodyPageBeanListAlerts) SetDispatchRuleName(v string) *ListAlertsResponseBodyPageBeanListAlerts {
	s.DispatchRuleName = &v
	return s
}

func (s *ListAlertsResponseBodyPageBeanListAlerts) SetHandler(v string) *ListAlertsResponseBodyPageBeanListAlerts {
	s.Handler = &v
	return s
}

func (s *ListAlertsResponseBodyPageBeanListAlerts) SetNotifyRobots(v string) *ListAlertsResponseBodyPageBeanListAlerts {
	s.NotifyRobots = &v
	return s
}

func (s *ListAlertsResponseBodyPageBeanListAlerts) SetOwner(v string) *ListAlertsResponseBodyPageBeanListAlerts {
	s.Owner = &v
	return s
}

func (s *ListAlertsResponseBodyPageBeanListAlerts) SetRecoverTime(v int64) *ListAlertsResponseBodyPageBeanListAlerts {
	s.RecoverTime = &v
	return s
}

func (s *ListAlertsResponseBodyPageBeanListAlerts) SetSeverity(v string) *ListAlertsResponseBodyPageBeanListAlerts {
	s.Severity = &v
	return s
}

func (s *ListAlertsResponseBodyPageBeanListAlerts) SetSolution(v string) *ListAlertsResponseBodyPageBeanListAlerts {
	s.Solution = &v
	return s
}

func (s *ListAlertsResponseBodyPageBeanListAlerts) SetState(v int64) *ListAlertsResponseBodyPageBeanListAlerts {
	s.State = &v
	return s
}

type ListAlertsResponseBodyPageBeanListAlertsActivities struct {
	// The content of the alert notification.
	//
	// example:
	//
	// [Notification policy: Send notifications to DingTalk groups] Host monitoring. Host IP address: 10.76.XX.XX. Average memory usage of the host in the last 1 minute ≥ 1.0%. Current value: 84.7454%.
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// The description of the activity.
	//
	// example:
	//
	// [Alert Claimed] The alert is claimed
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The name of the handler.
	//
	// example:
	//
	// O\\&M Engineer A
	HandlerName *string `json:"HandlerName,omitempty" xml:"HandlerName,omitempty"`
	// The operation time of the activity.
	//
	// example:
	//
	// 2021-12-20 19:08:57
	Time *string `json:"Time,omitempty" xml:"Time,omitempty"`
	// The type of the activity. Valid values:
	//
	// 	- 1: The alert is claimed.
	//
	// 	- 2: The alert is disclaimed.
	//
	// 	- 3: A comment is added for the alert.
	//
	// 	- 4: The alert is disabled.
	//
	// 	- 5: An alert notification is sent.
	//
	// example:
	//
	// 1
	Type *int64 `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListAlertsResponseBodyPageBeanListAlertsActivities) String() string {
	return tea.Prettify(s)
}

func (s ListAlertsResponseBodyPageBeanListAlertsActivities) GoString() string {
	return s.String()
}

func (s *ListAlertsResponseBodyPageBeanListAlertsActivities) SetContent(v string) *ListAlertsResponseBodyPageBeanListAlertsActivities {
	s.Content = &v
	return s
}

func (s *ListAlertsResponseBodyPageBeanListAlertsActivities) SetDescription(v string) *ListAlertsResponseBodyPageBeanListAlertsActivities {
	s.Description = &v
	return s
}

func (s *ListAlertsResponseBodyPageBeanListAlertsActivities) SetHandlerName(v string) *ListAlertsResponseBodyPageBeanListAlertsActivities {
	s.HandlerName = &v
	return s
}

func (s *ListAlertsResponseBodyPageBeanListAlertsActivities) SetTime(v string) *ListAlertsResponseBodyPageBeanListAlertsActivities {
	s.Time = &v
	return s
}

func (s *ListAlertsResponseBodyPageBeanListAlertsActivities) SetType(v int64) *ListAlertsResponseBodyPageBeanListAlertsActivities {
	s.Type = &v
	return s
}

type ListAlertsResponseBodyPageBeanListAlertsAlertEvents struct {
	// The name of the event.
	//
	// example:
	//
	// Test-triggered alert
	AlertName *string `json:"AlertName,omitempty" xml:"AlertName,omitempty"`
	// The annotations.
	//
	// example:
	//
	// { "_aliyun_arms_alert_value":"4.0" "_aliyun_arms_alert_traceId":"ac10c43116421327442277073d5461-105075299"}
	Annotations *string `json:"Annotations,omitempty" xml:"Annotations,omitempty"`
	// The description of the event.
	//
	// example:
	//
	// Host monitoring. Host IP address: 10.76.XX.XX. Average memory usage of the host in the last 1 minute ≥ 1.0%. Current value: 84.7454%.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The time when the event ended.
	//
	// example:
	//
	// 2022-01-19 17:10:31
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The URL of the event.
	//
	// example:
	//
	// http://arms.console.aliyun.com
	GeneratorURL *string `json:"GeneratorURL,omitempty" xml:"GeneratorURL,omitempty"`
	// The name of the integration that corresponds to the alert event.
	//
	// example:
	//
	// ARMS
	IntegrationName *string `json:"IntegrationName,omitempty" xml:"IntegrationName,omitempty"`
	// The type of the integration that corresponds to the alert event. Valid values:
	//
	// 	- ARMS
	//
	// 	- CLOUD_MONITOR
	//
	// 	- MSE
	//
	// 	- ARMS_CLOUD_DIALTEST
	//
	// 	- PROMETHEUS
	//
	// 	- LOG_SERVICE
	//
	// 	- CUSTOM
	//
	// 	- ARMS_PROMETHEUS
	//
	// 	- ARMS_APP_MON
	//
	// 	- ARMS_FRONT_MON
	//
	// 	- ARMS_CUSTOM
	//
	// 	- XTRACE
	//
	// 	- GRAFANA
	//
	// 	- ZABBIX
	//
	// 	- SKYWALKING
	//
	// 	- EVENT_BRIDGE
	//
	// 	- NAGIOS
	//
	// 	- OPENFALCON
	//
	// 	- ARMS_INSIGHTS
	//
	// example:
	//
	// ARMS_APP_MON
	IntegrationType *string `json:"IntegrationType,omitempty" xml:"IntegrationType,omitempty"`
	// The tags.
	//
	// example:
	//
	// { "severity":"warning" "_aliyun_arms_alert_level":"ERROR" "_aliyun_arms_entropy":"0.30170457417889235"}
	Labels *string `json:"Labels,omitempty" xml:"Labels,omitempty"`
	// The time when the event was created.
	//
	// example:
	//
	// 2022-01-19 17:05:42
	ReceiveTime *string `json:"ReceiveTime,omitempty" xml:"ReceiveTime,omitempty"`
	// The severity level of the event. Valid values:
	//
	// 	- critical
	//
	// 	- error
	//
	// 	- warning
	//
	// 	- info
	//
	// example:
	//
	// warning
	Severity *string `json:"Severity,omitempty" xml:"Severity,omitempty"`
	// The time when the event started.
	//
	// example:
	//
	// 2022-01-18 00:14:00
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The status of the event. Valid values:
	//
	// 	- Active: The event is not cleared.
	//
	// 	- Silenced: The event is silenced.
	//
	// 	- Resolved: The event is cleared.
	//
	// example:
	//
	// Active
	State *string `json:"State,omitempty" xml:"State,omitempty"`
}

func (s ListAlertsResponseBodyPageBeanListAlertsAlertEvents) String() string {
	return tea.Prettify(s)
}

func (s ListAlertsResponseBodyPageBeanListAlertsAlertEvents) GoString() string {
	return s.String()
}

func (s *ListAlertsResponseBodyPageBeanListAlertsAlertEvents) SetAlertName(v string) *ListAlertsResponseBodyPageBeanListAlertsAlertEvents {
	s.AlertName = &v
	return s
}

func (s *ListAlertsResponseBodyPageBeanListAlertsAlertEvents) SetAnnotations(v string) *ListAlertsResponseBodyPageBeanListAlertsAlertEvents {
	s.Annotations = &v
	return s
}

func (s *ListAlertsResponseBodyPageBeanListAlertsAlertEvents) SetDescription(v string) *ListAlertsResponseBodyPageBeanListAlertsAlertEvents {
	s.Description = &v
	return s
}

func (s *ListAlertsResponseBodyPageBeanListAlertsAlertEvents) SetEndTime(v string) *ListAlertsResponseBodyPageBeanListAlertsAlertEvents {
	s.EndTime = &v
	return s
}

func (s *ListAlertsResponseBodyPageBeanListAlertsAlertEvents) SetGeneratorURL(v string) *ListAlertsResponseBodyPageBeanListAlertsAlertEvents {
	s.GeneratorURL = &v
	return s
}

func (s *ListAlertsResponseBodyPageBeanListAlertsAlertEvents) SetIntegrationName(v string) *ListAlertsResponseBodyPageBeanListAlertsAlertEvents {
	s.IntegrationName = &v
	return s
}

func (s *ListAlertsResponseBodyPageBeanListAlertsAlertEvents) SetIntegrationType(v string) *ListAlertsResponseBodyPageBeanListAlertsAlertEvents {
	s.IntegrationType = &v
	return s
}

func (s *ListAlertsResponseBodyPageBeanListAlertsAlertEvents) SetLabels(v string) *ListAlertsResponseBodyPageBeanListAlertsAlertEvents {
	s.Labels = &v
	return s
}

func (s *ListAlertsResponseBodyPageBeanListAlertsAlertEvents) SetReceiveTime(v string) *ListAlertsResponseBodyPageBeanListAlertsAlertEvents {
	s.ReceiveTime = &v
	return s
}

func (s *ListAlertsResponseBodyPageBeanListAlertsAlertEvents) SetSeverity(v string) *ListAlertsResponseBodyPageBeanListAlertsAlertEvents {
	s.Severity = &v
	return s
}

func (s *ListAlertsResponseBodyPageBeanListAlertsAlertEvents) SetStartTime(v string) *ListAlertsResponseBodyPageBeanListAlertsAlertEvents {
	s.StartTime = &v
	return s
}

func (s *ListAlertsResponseBodyPageBeanListAlertsAlertEvents) SetState(v string) *ListAlertsResponseBodyPageBeanListAlertsAlertEvents {
	s.State = &v
	return s
}

type ListAlertsResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListAlertsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListAlertsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListAlertsResponse) GoString() string {
	return s.String()
}

func (s *ListAlertsResponse) SetHeaders(v map[string]*string) *ListAlertsResponse {
	s.Headers = v
	return s
}

func (s *ListAlertsResponse) SetStatusCode(v int32) *ListAlertsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListAlertsResponse) SetBody(v *ListAlertsResponseBody) *ListAlertsResponse {
	s.Body = v
	return s
}

type ListClusterFromGrafanaRequest struct {
	// The region ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ListClusterFromGrafanaRequest) String() string {
	return tea.Prettify(s)
}

func (s ListClusterFromGrafanaRequest) GoString() string {
	return s.String()
}

func (s *ListClusterFromGrafanaRequest) SetRegionId(v string) *ListClusterFromGrafanaRequest {
	s.RegionId = &v
	return s
}

type ListClusterFromGrafanaResponseBody struct {
	// The cluster information.
	PromClusterList []*ListClusterFromGrafanaResponseBodyPromClusterList `json:"PromClusterList,omitempty" xml:"PromClusterList,omitempty" type:"Repeated"`
	// The request ID. You can use the ID to query logs and troubleshoot issues.
	//
	// example:
	//
	// 6849D41E-EED4-5C00-89F9-6047BBD9DCB4
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListClusterFromGrafanaResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListClusterFromGrafanaResponseBody) GoString() string {
	return s.String()
}

func (s *ListClusterFromGrafanaResponseBody) SetPromClusterList(v []*ListClusterFromGrafanaResponseBodyPromClusterList) *ListClusterFromGrafanaResponseBody {
	s.PromClusterList = v
	return s
}

func (s *ListClusterFromGrafanaResponseBody) SetRequestId(v string) *ListClusterFromGrafanaResponseBody {
	s.RequestId = &v
	return s
}

type ListClusterFromGrafanaResponseBodyPromClusterList struct {
	// The status of the Prometheus agent on the cluster. Valid values:
	//
	// 	- INSTALL_FAILED: The Prometheus agent failed to be installed.
	//
	// 	- INSTALL_SUCCEED: The Prometheus agent was installed.
	//
	// 	- NOT_REGISTER: You have not registered an Alibaba Cloud account.
	//
	// example:
	//
	// INSTALL_FAILED
	AgentStatus *string `json:"AgentStatus,omitempty" xml:"AgentStatus,omitempty"`
	// The cluster ID.
	//
	// example:
	//
	// c0df7ad9db0ed43128925ca04774c469e
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	// The name of the cluster.
	//
	// example:
	//
	// ay-ads-hangzhou
	ClusterName *string `json:"ClusterName,omitempty" xml:"ClusterName,omitempty"`
	// The type of the cluster.
	//
	// example:
	//
	// cloud-product-prometheus
	ClusterType *string `json:"ClusterType,omitempty" xml:"ClusterType,omitempty"`
	// The controller ID.
	//
	// example:
	//
	// 1092
	ControllerId *string `json:"ControllerId,omitempty" xml:"ControllerId,omitempty"`
	// The time when the dashboard was created.
	//
	// example:
	//
	// 2021-12-09T02:05:04Z
	CreateTime *int64 `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The extended fields. This parameter is a JSON string.
	//
	// example:
	//
	// {\\"app_id\\":\\"bbd\\",\\"task_id\\":\\"4305ba5bf14942daa6e553ed91f46988\\"}
	Extra *string `json:"Extra,omitempty" xml:"Extra,omitempty"`
	// The ID of a database in the cluster.
	//
	// example:
	//
	// 16136
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The timestamp when the Prometheus agent was installed.
	//
	// example:
	//
	// 1653532518000
	InstallTime *int64 `json:"InstallTime,omitempty" xml:"InstallTime,omitempty"`
	// Indicates whether the Prometheus agent was installed. Valid values:
	//
	// 	- true: The Prometheus agent was installed.
	//
	// 	- false: The Prometheus agent was not installed.
	//
	// example:
	//
	// true
	IsControllerInstalled *bool `json:"IsControllerInstalled,omitempty" xml:"IsControllerInstalled,omitempty"`
	// The time when the last heartbeat was reported.
	//
	// example:
	//
	// 1653532518000
	LastHeartBeatTime *int64 `json:"LastHeartBeatTime,omitempty" xml:"LastHeartBeatTime,omitempty"`
	// The number of nodes.
	//
	// example:
	//
	// 3
	NodeNum *int32 `json:"NodeNum,omitempty" xml:"NodeNum,omitempty"`
	// The custom parameter.
	//
	// example:
	//
	// {\\"Option\\": [\\"betaTestApproved\\"]}
	Options *string `json:"Options,omitempty" xml:"Options,omitempty"`
	// The list of nodejsonar logs.
	//
	// example:
	//
	// {}
	PluginsJsonArray *string `json:"PluginsJsonArray,omitempty" xml:"PluginsJsonArray,omitempty"`
	// The region ID.
	//
	// example:
	//
	// cn-beijing
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The information about applications deployed in the cluster.
	//
	// example:
	//
	// {}
	StateJson *string `json:"StateJson,omitempty" xml:"StateJson,omitempty"`
	// The time when the dashboard was updated.
	//
	// example:
	//
	// 2021-11-16T08:49:34Z
	UpdateTime *int64 `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
	// The ID of the Alibaba Cloud account to which the cluster belongs.
	//
	// example:
	//
	// 1247285**
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s ListClusterFromGrafanaResponseBodyPromClusterList) String() string {
	return tea.Prettify(s)
}

func (s ListClusterFromGrafanaResponseBodyPromClusterList) GoString() string {
	return s.String()
}

func (s *ListClusterFromGrafanaResponseBodyPromClusterList) SetAgentStatus(v string) *ListClusterFromGrafanaResponseBodyPromClusterList {
	s.AgentStatus = &v
	return s
}

func (s *ListClusterFromGrafanaResponseBodyPromClusterList) SetClusterId(v string) *ListClusterFromGrafanaResponseBodyPromClusterList {
	s.ClusterId = &v
	return s
}

func (s *ListClusterFromGrafanaResponseBodyPromClusterList) SetClusterName(v string) *ListClusterFromGrafanaResponseBodyPromClusterList {
	s.ClusterName = &v
	return s
}

func (s *ListClusterFromGrafanaResponseBodyPromClusterList) SetClusterType(v string) *ListClusterFromGrafanaResponseBodyPromClusterList {
	s.ClusterType = &v
	return s
}

func (s *ListClusterFromGrafanaResponseBodyPromClusterList) SetControllerId(v string) *ListClusterFromGrafanaResponseBodyPromClusterList {
	s.ControllerId = &v
	return s
}

func (s *ListClusterFromGrafanaResponseBodyPromClusterList) SetCreateTime(v int64) *ListClusterFromGrafanaResponseBodyPromClusterList {
	s.CreateTime = &v
	return s
}

func (s *ListClusterFromGrafanaResponseBodyPromClusterList) SetExtra(v string) *ListClusterFromGrafanaResponseBodyPromClusterList {
	s.Extra = &v
	return s
}

func (s *ListClusterFromGrafanaResponseBodyPromClusterList) SetId(v int64) *ListClusterFromGrafanaResponseBodyPromClusterList {
	s.Id = &v
	return s
}

func (s *ListClusterFromGrafanaResponseBodyPromClusterList) SetInstallTime(v int64) *ListClusterFromGrafanaResponseBodyPromClusterList {
	s.InstallTime = &v
	return s
}

func (s *ListClusterFromGrafanaResponseBodyPromClusterList) SetIsControllerInstalled(v bool) *ListClusterFromGrafanaResponseBodyPromClusterList {
	s.IsControllerInstalled = &v
	return s
}

func (s *ListClusterFromGrafanaResponseBodyPromClusterList) SetLastHeartBeatTime(v int64) *ListClusterFromGrafanaResponseBodyPromClusterList {
	s.LastHeartBeatTime = &v
	return s
}

func (s *ListClusterFromGrafanaResponseBodyPromClusterList) SetNodeNum(v int32) *ListClusterFromGrafanaResponseBodyPromClusterList {
	s.NodeNum = &v
	return s
}

func (s *ListClusterFromGrafanaResponseBodyPromClusterList) SetOptions(v string) *ListClusterFromGrafanaResponseBodyPromClusterList {
	s.Options = &v
	return s
}

func (s *ListClusterFromGrafanaResponseBodyPromClusterList) SetPluginsJsonArray(v string) *ListClusterFromGrafanaResponseBodyPromClusterList {
	s.PluginsJsonArray = &v
	return s
}

func (s *ListClusterFromGrafanaResponseBodyPromClusterList) SetRegionId(v string) *ListClusterFromGrafanaResponseBodyPromClusterList {
	s.RegionId = &v
	return s
}

func (s *ListClusterFromGrafanaResponseBodyPromClusterList) SetStateJson(v string) *ListClusterFromGrafanaResponseBodyPromClusterList {
	s.StateJson = &v
	return s
}

func (s *ListClusterFromGrafanaResponseBodyPromClusterList) SetUpdateTime(v int64) *ListClusterFromGrafanaResponseBodyPromClusterList {
	s.UpdateTime = &v
	return s
}

func (s *ListClusterFromGrafanaResponseBodyPromClusterList) SetUserId(v string) *ListClusterFromGrafanaResponseBodyPromClusterList {
	s.UserId = &v
	return s
}

type ListClusterFromGrafanaResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListClusterFromGrafanaResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListClusterFromGrafanaResponse) String() string {
	return tea.Prettify(s)
}

func (s ListClusterFromGrafanaResponse) GoString() string {
	return s.String()
}

func (s *ListClusterFromGrafanaResponse) SetHeaders(v map[string]*string) *ListClusterFromGrafanaResponse {
	s.Headers = v
	return s
}

func (s *ListClusterFromGrafanaResponse) SetStatusCode(v int32) *ListClusterFromGrafanaResponse {
	s.StatusCode = &v
	return s
}

func (s *ListClusterFromGrafanaResponse) SetBody(v *ListClusterFromGrafanaResponseBody) *ListClusterFromGrafanaResponse {
	s.Body = v
	return s
}

type ListCmsInstancesRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// n9p9o9o3se
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// example:
	//
	// direct
	TypeFilter *string `json:"TypeFilter,omitempty" xml:"TypeFilter,omitempty"`
}

func (s ListCmsInstancesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListCmsInstancesRequest) GoString() string {
	return s.String()
}

func (s *ListCmsInstancesRequest) SetClusterId(v string) *ListCmsInstancesRequest {
	s.ClusterId = &v
	return s
}

func (s *ListCmsInstancesRequest) SetRegionId(v string) *ListCmsInstancesRequest {
	s.RegionId = &v
	return s
}

func (s *ListCmsInstancesRequest) SetTypeFilter(v string) *ListCmsInstancesRequest {
	s.TypeFilter = &v
	return s
}

type ListCmsInstancesResponseBody struct {
	Data *ListCmsInstancesResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// E7A04B0D-E2CA-59BB-8A9D-D5D349C22BF1
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListCmsInstancesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListCmsInstancesResponseBody) GoString() string {
	return s.String()
}

func (s *ListCmsInstancesResponseBody) SetData(v *ListCmsInstancesResponseBodyData) *ListCmsInstancesResponseBody {
	s.Data = v
	return s
}

func (s *ListCmsInstancesResponseBody) SetRequestId(v string) *ListCmsInstancesResponseBody {
	s.RequestId = &v
	return s
}

type ListCmsInstancesResponseBodyData struct {
	// example:
	//
	// true
	EnableTag *bool                                       `json:"EnableTag,omitempty" xml:"EnableTag,omitempty"`
	Products  []*ListCmsInstancesResponseBodyDataProducts `json:"Products,omitempty" xml:"Products,omitempty" type:"Repeated"`
}

func (s ListCmsInstancesResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListCmsInstancesResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListCmsInstancesResponseBodyData) SetEnableTag(v bool) *ListCmsInstancesResponseBodyData {
	s.EnableTag = &v
	return s
}

func (s *ListCmsInstancesResponseBodyData) SetProducts(v []*ListCmsInstancesResponseBodyDataProducts) *ListCmsInstancesResponseBodyData {
	s.Products = v
	return s
}

type ListCmsInstancesResponseBodyDataProducts struct {
	// example:
	//
	// -
	Descr *string `json:"Descr,omitempty" xml:"Descr,omitempty"`
	// example:
	//
	// 20210
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// cloudserver
	Instance *string `json:"Instance,omitempty" xml:"Instance,omitempty"`
	// example:
	//
	// hologres
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// face
	Prod *string `json:"Prod,omitempty" xml:"Prod,omitempty"`
	// example:
	//
	// arms
	Source *string `json:"Source,omitempty" xml:"Source,omitempty"`
	// example:
	//
	// true
	State *string `json:"State,omitempty" xml:"State,omitempty"`
	// example:
	//
	// 1647852021000
	Time *string `json:"Time,omitempty" xml:"Time,omitempty"`
	// example:
	//
	// HOLOGRES
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// example:
	//
	// https://g.console.aliyun.com/d/1098370038733503-35894-565/cms-hologres?orgId\\u003d9\\u0026refresh\\u003d60s
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s ListCmsInstancesResponseBodyDataProducts) String() string {
	return tea.Prettify(s)
}

func (s ListCmsInstancesResponseBodyDataProducts) GoString() string {
	return s.String()
}

func (s *ListCmsInstancesResponseBodyDataProducts) SetDescr(v string) *ListCmsInstancesResponseBodyDataProducts {
	s.Descr = &v
	return s
}

func (s *ListCmsInstancesResponseBodyDataProducts) SetId(v string) *ListCmsInstancesResponseBodyDataProducts {
	s.Id = &v
	return s
}

func (s *ListCmsInstancesResponseBodyDataProducts) SetInstance(v string) *ListCmsInstancesResponseBodyDataProducts {
	s.Instance = &v
	return s
}

func (s *ListCmsInstancesResponseBodyDataProducts) SetName(v string) *ListCmsInstancesResponseBodyDataProducts {
	s.Name = &v
	return s
}

func (s *ListCmsInstancesResponseBodyDataProducts) SetProd(v string) *ListCmsInstancesResponseBodyDataProducts {
	s.Prod = &v
	return s
}

func (s *ListCmsInstancesResponseBodyDataProducts) SetSource(v string) *ListCmsInstancesResponseBodyDataProducts {
	s.Source = &v
	return s
}

func (s *ListCmsInstancesResponseBodyDataProducts) SetState(v string) *ListCmsInstancesResponseBodyDataProducts {
	s.State = &v
	return s
}

func (s *ListCmsInstancesResponseBodyDataProducts) SetTime(v string) *ListCmsInstancesResponseBodyDataProducts {
	s.Time = &v
	return s
}

func (s *ListCmsInstancesResponseBodyDataProducts) SetType(v string) *ListCmsInstancesResponseBodyDataProducts {
	s.Type = &v
	return s
}

func (s *ListCmsInstancesResponseBodyDataProducts) SetUrl(v string) *ListCmsInstancesResponseBodyDataProducts {
	s.Url = &v
	return s
}

type ListCmsInstancesResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListCmsInstancesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListCmsInstancesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListCmsInstancesResponse) GoString() string {
	return s.String()
}

func (s *ListCmsInstancesResponse) SetHeaders(v map[string]*string) *ListCmsInstancesResponse {
	s.Headers = v
	return s
}

func (s *ListCmsInstancesResponse) SetStatusCode(v int32) *ListCmsInstancesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListCmsInstancesResponse) SetBody(v *ListCmsInstancesResponseBody) *ListCmsInstancesResponse {
	s.Body = v
	return s
}

type ListDashboardsRequest struct {
	// The ID of the ACK cluster.
	//
	// example:
	//
	// cc7a37ee31aea4ed1a059eff8034b****
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	// Valid values: ACK, ASK, cloud-product-prometheus, and Node. You can query the dashboards of a virtual cluster by specifying the cluster type. For InfluxDB, set this parameter to `cloud-product-prometheus`.
	//
	// example:
	//
	// Node
	ClusterType *string `json:"ClusterType,omitempty" xml:"ClusterType,omitempty"`
	// The unique names of the dashboards. You can query dashboards by specifying their names. The **dashboard title*	- can be changed whereas the **dashboard name*	- cannot. You can specify multiple names and separate them with commas (,), for example, `k8s-event,k8s-overview`. A dashboard may have multiple versions. If you want to specify a version, you can add version information after the name, for example, `k8s-event:v1,k8s-overview:latest`.
	//
	// example:
	//
	// k8s-node-overview
	DashboardName *string `json:"DashboardName,omitempty" xml:"DashboardName,omitempty"`
	// The language of the returned Grafana dashboard. Valid values: en and zh. Default value: en.
	//
	// example:
	//
	// en
	Language *string `json:"Language,omitempty" xml:"Language,omitempty"`
	// The cloud service code. This parameter is required if you set the ClusterType parameter to `cloud-product-prometheus`. The following cloud services are available: Serverless App Engine, Microservices Engine, Message Queue for Apache RocketMQ, Lindorm, Message Queue for Apache Kafka, ApsaraDB for ClickHouse, Data Lake Analytics, Message Queue for RabbitMQ, ApsaraDB for MongoDB, Time Series Database (TSDB) for InfluxDB, MSE Cloud-native Gateway, Grafana Service, SchedulerX, Global Transaction Service, Enterprise Distributed Application Service, Machine Learning Platform for AI - Elastic Algorithm Service (EAS), Application High Availability Service, and Performance Testing.
	//
	// example:
	//
	// xxxx
	Product *string `json:"Product,omitempty" xml:"Product,omitempty"`
	// Specifies whether to create or query a virtual cluster. This parameter provides backward compatibility.
	//
	// example:
	//
	// false
	RecreateSwitch *bool `json:"RecreateSwitch,omitempty" xml:"RecreateSwitch,omitempty"`
	// The region ID.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The dashboard title. The dashboard title can be changed. We recommend that you specify the **DashboardName*	- parameter.
	//
	// example:
	//
	// ApiServer
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
}

func (s ListDashboardsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListDashboardsRequest) GoString() string {
	return s.String()
}

func (s *ListDashboardsRequest) SetClusterId(v string) *ListDashboardsRequest {
	s.ClusterId = &v
	return s
}

func (s *ListDashboardsRequest) SetClusterType(v string) *ListDashboardsRequest {
	s.ClusterType = &v
	return s
}

func (s *ListDashboardsRequest) SetDashboardName(v string) *ListDashboardsRequest {
	s.DashboardName = &v
	return s
}

func (s *ListDashboardsRequest) SetLanguage(v string) *ListDashboardsRequest {
	s.Language = &v
	return s
}

func (s *ListDashboardsRequest) SetProduct(v string) *ListDashboardsRequest {
	s.Product = &v
	return s
}

func (s *ListDashboardsRequest) SetRecreateSwitch(v bool) *ListDashboardsRequest {
	s.RecreateSwitch = &v
	return s
}

func (s *ListDashboardsRequest) SetRegionId(v string) *ListDashboardsRequest {
	s.RegionId = &v
	return s
}

func (s *ListDashboardsRequest) SetTitle(v string) *ListDashboardsRequest {
	s.Title = &v
	return s
}

type ListDashboardsResponseBody struct {
	// The information about the Grafana dashboard.
	DashboardVos []*ListDashboardsResponseBodyDashboardVos `json:"DashboardVos,omitempty" xml:"DashboardVos,omitempty" type:"Repeated"`
	// The environment ID.
	//
	// example:
	//
	// env-ebd54733482581fc8c4237******
	EnvironmentId *string `json:"EnvironmentId,omitempty" xml:"EnvironmentId,omitempty"`
	// Whether to enable Grafana service.
	//
	// example:
	//
	// true
	GrafanaServiceOpened *string `json:"GrafanaServiceOpened,omitempty" xml:"GrafanaServiceOpened,omitempty"`
	// Whether or not to turn on Prometheus service.
	//
	// example:
	//
	// true
	PrometheusServiceOpened *string `json:"PrometheusServiceOpened,omitempty" xml:"PrometheusServiceOpened,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 2A0CEDF1-06FE-44AC-8E21-21A5BE65****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListDashboardsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListDashboardsResponseBody) GoString() string {
	return s.String()
}

func (s *ListDashboardsResponseBody) SetDashboardVos(v []*ListDashboardsResponseBodyDashboardVos) *ListDashboardsResponseBody {
	s.DashboardVos = v
	return s
}

func (s *ListDashboardsResponseBody) SetEnvironmentId(v string) *ListDashboardsResponseBody {
	s.EnvironmentId = &v
	return s
}

func (s *ListDashboardsResponseBody) SetGrafanaServiceOpened(v string) *ListDashboardsResponseBody {
	s.GrafanaServiceOpened = &v
	return s
}

func (s *ListDashboardsResponseBody) SetPrometheusServiceOpened(v string) *ListDashboardsResponseBody {
	s.PrometheusServiceOpened = &v
	return s
}

func (s *ListDashboardsResponseBody) SetRequestId(v string) *ListDashboardsResponseBody {
	s.RequestId = &v
	return s
}

type ListDashboardsResponseBodyDashboardVos struct {
	// The type of the Grafana dashboard. This parameter has the same effect as the Exporter parameter whereas provides clearer implication.
	//
	// example:
	//
	// Node
	DashboardType *string `json:"DashboardType,omitempty" xml:"DashboardType,omitempty"`
	// The type of the exporter access source. Valid values:
	//
	// 	- Prometheus
	//
	// 	- Node
	//
	// 	- GPU
	//
	// 	- Redis
	//
	// 	- MySQL
	//
	// 	- Kafka
	//
	// 	- NGINX V2
	//
	// 	- Nginx
	//
	// 	- ZooKeeper
	//
	// 	- MongoDB
	//
	// 	- RabbitMQ
	//
	// 	- PostgreSQL
	//
	// 	- Kubernetes
	//
	// 	- Client Library
	//
	// 	- Elasticsearch
	//
	// 	- RocketMQ
	//
	// example:
	//
	// Nginx
	Exporter *string `json:"Exporter,omitempty" xml:"Exporter,omitempty"`
	// The URL of the Grafana dashboard.
	//
	// example:
	//
	// http://g.console.aliyun.com/d/1131971649496228-*****-59/ApiServer?orgId=3**&refresh=60s
	HttpUrl *string `json:"HttpUrl,omitempty" xml:"HttpUrl,omitempty"`
	// The URL of the Grafana dashboard.
	//
	// example:
	//
	// http://g.console.aliyun.com/d/1131971649496228-*****-59/ApiServer?orgId=3**&refresh=60s
	HttpsUrl *string `json:"HttpsUrl,omitempty" xml:"HttpsUrl,omitempty"`
	// The information about the Grafana dashboards.
	I18nChild *ListDashboardsResponseBodyDashboardVosI18nChild `json:"I18nChild,omitempty" xml:"I18nChild,omitempty" type:"Struct"`
	// The ID of the Grafana dashboard. The value is unique only when you install the Grafana dashboard.
	//
	// example:
	//
	// 1100**
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// Indicates whether the exporter was provided by ARMS. Valid values:
	//
	// 	- `true`: The exporter is provided by ARMS.
	//
	// 	- `false`: The exporter is not provided by ARMS.
	//
	// example:
	//
	// false
	IsArmsExporter *bool `json:"IsArmsExporter,omitempty" xml:"IsArmsExporter,omitempty"`
	// The type of the dashboard. Valid values: BASIC, THIRD, LIMIT, and CUSTOM. BASIC indicates a basic dashboard. THIRD indicates a third-party dashboard. LIMIT indicates a time-limited free dashboard. CUSTOM indicates a custom dashboard.
	//
	// example:
	//
	// BASIC
	Kind *string `json:"Kind,omitempty" xml:"Kind,omitempty"`
	// The language of the Grafana dashboard.
	//
	// example:
	//
	// en
	Language *string `json:"Language,omitempty" xml:"Language,omitempty"`
	// The name of the Grafana dashboard. This parameter is different from the **Title*	- parameter as this parameter cannot be changed.
	//
	// example:
	//
	// k8s-node-overview
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// Indicates whether the Grafana dashboard has a new version that was available for upgrade.
	//
	// example:
	//
	// false
	NeedUpdate *bool `json:"NeedUpdate,omitempty" xml:"NeedUpdate,omitempty"`
	// The tags of the Grafana dashboard.
	Tags []*string `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
	// The timestamp generated when the Grafana dashboard was created. Unit: seconds
	//
	// example:
	//
	// 1590136924
	Time *string `json:"Time,omitempty" xml:"Time,omitempty"`
	// The title of the Grafana dashboard.
	//
	// example:
	//
	// ApiServer
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// The type of the Grafana dashboard. Valid values:
	//
	// 	- `dash-db`: a dashboard
	//
	// 	- `dash-folder`: a folder that can include a dashboard
	//
	// example:
	//
	// dash-db
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// The unique identifier of a dashboard when multiple Grafana dashboards were installed. It is a unique business ID displayed on the page.
	//
	// example:
	//
	// 1131971649496228-*****-59
	Uid *string `json:"Uid,omitempty" xml:"Uid,omitempty"`
	// The complete URL of the Grafana dashboard.
	//
	// example:
	//
	// http://g.console.aliyun.com/d/1131971649496228-*****-59/ApiServer?orgId=3**&refresh=60s
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
	// The version of the Grafana dashboard. The combination of version and name uniquely identifies a dashboard.
	//
	// example:
	//
	// v2
	Version *string `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s ListDashboardsResponseBodyDashboardVos) String() string {
	return tea.Prettify(s)
}

func (s ListDashboardsResponseBodyDashboardVos) GoString() string {
	return s.String()
}

func (s *ListDashboardsResponseBodyDashboardVos) SetDashboardType(v string) *ListDashboardsResponseBodyDashboardVos {
	s.DashboardType = &v
	return s
}

func (s *ListDashboardsResponseBodyDashboardVos) SetExporter(v string) *ListDashboardsResponseBodyDashboardVos {
	s.Exporter = &v
	return s
}

func (s *ListDashboardsResponseBodyDashboardVos) SetHttpUrl(v string) *ListDashboardsResponseBodyDashboardVos {
	s.HttpUrl = &v
	return s
}

func (s *ListDashboardsResponseBodyDashboardVos) SetHttpsUrl(v string) *ListDashboardsResponseBodyDashboardVos {
	s.HttpsUrl = &v
	return s
}

func (s *ListDashboardsResponseBodyDashboardVos) SetI18nChild(v *ListDashboardsResponseBodyDashboardVosI18nChild) *ListDashboardsResponseBodyDashboardVos {
	s.I18nChild = v
	return s
}

func (s *ListDashboardsResponseBodyDashboardVos) SetId(v string) *ListDashboardsResponseBodyDashboardVos {
	s.Id = &v
	return s
}

func (s *ListDashboardsResponseBodyDashboardVos) SetIsArmsExporter(v bool) *ListDashboardsResponseBodyDashboardVos {
	s.IsArmsExporter = &v
	return s
}

func (s *ListDashboardsResponseBodyDashboardVos) SetKind(v string) *ListDashboardsResponseBodyDashboardVos {
	s.Kind = &v
	return s
}

func (s *ListDashboardsResponseBodyDashboardVos) SetLanguage(v string) *ListDashboardsResponseBodyDashboardVos {
	s.Language = &v
	return s
}

func (s *ListDashboardsResponseBodyDashboardVos) SetName(v string) *ListDashboardsResponseBodyDashboardVos {
	s.Name = &v
	return s
}

func (s *ListDashboardsResponseBodyDashboardVos) SetNeedUpdate(v bool) *ListDashboardsResponseBodyDashboardVos {
	s.NeedUpdate = &v
	return s
}

func (s *ListDashboardsResponseBodyDashboardVos) SetTags(v []*string) *ListDashboardsResponseBodyDashboardVos {
	s.Tags = v
	return s
}

func (s *ListDashboardsResponseBodyDashboardVos) SetTime(v string) *ListDashboardsResponseBodyDashboardVos {
	s.Time = &v
	return s
}

func (s *ListDashboardsResponseBodyDashboardVos) SetTitle(v string) *ListDashboardsResponseBodyDashboardVos {
	s.Title = &v
	return s
}

func (s *ListDashboardsResponseBodyDashboardVos) SetType(v string) *ListDashboardsResponseBodyDashboardVos {
	s.Type = &v
	return s
}

func (s *ListDashboardsResponseBodyDashboardVos) SetUid(v string) *ListDashboardsResponseBodyDashboardVos {
	s.Uid = &v
	return s
}

func (s *ListDashboardsResponseBodyDashboardVos) SetUrl(v string) *ListDashboardsResponseBodyDashboardVos {
	s.Url = &v
	return s
}

func (s *ListDashboardsResponseBodyDashboardVos) SetVersion(v string) *ListDashboardsResponseBodyDashboardVos {
	s.Version = &v
	return s
}

type ListDashboardsResponseBodyDashboardVosI18nChild struct {
	// The type of the Grafana dashboard. This parameter has the same effect as the Exporter parameter whereas provides clearer implication.
	//
	// example:
	//
	// Node
	DashboardType *string `json:"DashboardType,omitempty" xml:"DashboardType,omitempty"`
	// The type of the exporter access source. Valid values:
	//
	// 	- Prometheus
	//
	// 	- Node
	//
	// 	- GPU
	//
	// 	- Redis
	//
	// 	- MySQL
	//
	// 	- Kafka
	//
	// 	- NGINX V2
	//
	// 	- Nginx
	//
	// 	- ZooKeeper
	//
	// 	- MongoDB
	//
	// 	- RabbitMQ
	//
	// 	- PostgreSQL
	//
	// 	- Kubernetes
	//
	// 	- Client Library
	//
	// 	- Elasticsearch
	//
	// 	- RocketMQ
	//
	// example:
	//
	// Nginx
	Exporter *string `json:"Exporter,omitempty" xml:"Exporter,omitempty"`
	// The URL of the Grafana dashboard.
	//
	// example:
	//
	// http://g.console.aliyun.com/d/1131971649496228-*****-59/ApiServer?orgId=3**&refresh=60s
	HttpUrl *string `json:"HttpUrl,omitempty" xml:"HttpUrl,omitempty"`
	// The URL of the Grafana dashboard.
	//
	// example:
	//
	// http://g.console.aliyun.com/d/1131971649496228-*****-59/ApiServer?orgId=3**&refresh=60s
	HttpsUrl *string `json:"HttpsUrl,omitempty" xml:"HttpsUrl,omitempty"`
	// The ID of the Grafana dashboard. The value is unique only when you install the Grafana dashboard.
	//
	// example:
	//
	// 1100**
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// Indicates whether the exporter was provided by ARMS. Valid values:
	//
	// 	- `true`: The exporter is provided by ARMS.
	//
	// 	- `false`: The exporter is not provided by ARMS.
	//
	// example:
	//
	// false
	IsArmsExporter *bool `json:"IsArmsExporter,omitempty" xml:"IsArmsExporter,omitempty"`
	// The category of the Grafana dashboard. Valid values: BASIC, THIRD, LIMIT, and CUSTOM.
	//
	// example:
	//
	// BASIC
	Kind *string `json:"Kind,omitempty" xml:"Kind,omitempty"`
	// The language of the Grafana dashboard.
	//
	// example:
	//
	// zh
	Language *string `json:"Language,omitempty" xml:"Language,omitempty"`
	// The name of the Grafana dashboard. This parameter is different from the **Title*	- parameter as this parameter cannot be changed.
	//
	// example:
	//
	// k8s-node-overview
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// Indicates whether the Grafana dashboard has a new version that was available for upgrade.
	//
	// example:
	//
	// false
	NeedUpdate *bool `json:"NeedUpdate,omitempty" xml:"NeedUpdate,omitempty"`
	// The tags of the Grafana dashboard.
	Tags []*string `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
	// The timestamp when the Grafana dashboard was created.
	//
	// example:
	//
	// 1590136924
	Time *string `json:"Time,omitempty" xml:"Time,omitempty"`
	// The title of the Grafana dashboard.
	//
	// example:
	//
	// ApiServer
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// The type of the Grafana dashboard. Valid values:
	//
	// 	- `dash-db`: a dashboard
	//
	// 	- `dash-folder`: a folder that can include a dashboard
	//
	// example:
	//
	// dash-db
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// The unique identifier of a dashboard when multiple Grafana dashboards were installed. It is a unique business ID displayed on the page.
	//
	// example:
	//
	// 1131971649496228-*****-59
	Uid *string `json:"Uid,omitempty" xml:"Uid,omitempty"`
	// The complete URL of the Grafana dashboard.
	//
	// example:
	//
	// http://g.console.aliyun.com/d/1131971649496228-*****-59/ApiServer?orgId=3**&refresh=60s
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
	// The version of the Grafana dashboard. The combination of version and name uniquely identifies a dashboard.
	//
	// example:
	//
	// v2
	Version *string `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s ListDashboardsResponseBodyDashboardVosI18nChild) String() string {
	return tea.Prettify(s)
}

func (s ListDashboardsResponseBodyDashboardVosI18nChild) GoString() string {
	return s.String()
}

func (s *ListDashboardsResponseBodyDashboardVosI18nChild) SetDashboardType(v string) *ListDashboardsResponseBodyDashboardVosI18nChild {
	s.DashboardType = &v
	return s
}

func (s *ListDashboardsResponseBodyDashboardVosI18nChild) SetExporter(v string) *ListDashboardsResponseBodyDashboardVosI18nChild {
	s.Exporter = &v
	return s
}

func (s *ListDashboardsResponseBodyDashboardVosI18nChild) SetHttpUrl(v string) *ListDashboardsResponseBodyDashboardVosI18nChild {
	s.HttpUrl = &v
	return s
}

func (s *ListDashboardsResponseBodyDashboardVosI18nChild) SetHttpsUrl(v string) *ListDashboardsResponseBodyDashboardVosI18nChild {
	s.HttpsUrl = &v
	return s
}

func (s *ListDashboardsResponseBodyDashboardVosI18nChild) SetId(v string) *ListDashboardsResponseBodyDashboardVosI18nChild {
	s.Id = &v
	return s
}

func (s *ListDashboardsResponseBodyDashboardVosI18nChild) SetIsArmsExporter(v bool) *ListDashboardsResponseBodyDashboardVosI18nChild {
	s.IsArmsExporter = &v
	return s
}

func (s *ListDashboardsResponseBodyDashboardVosI18nChild) SetKind(v string) *ListDashboardsResponseBodyDashboardVosI18nChild {
	s.Kind = &v
	return s
}

func (s *ListDashboardsResponseBodyDashboardVosI18nChild) SetLanguage(v string) *ListDashboardsResponseBodyDashboardVosI18nChild {
	s.Language = &v
	return s
}

func (s *ListDashboardsResponseBodyDashboardVosI18nChild) SetName(v string) *ListDashboardsResponseBodyDashboardVosI18nChild {
	s.Name = &v
	return s
}

func (s *ListDashboardsResponseBodyDashboardVosI18nChild) SetNeedUpdate(v bool) *ListDashboardsResponseBodyDashboardVosI18nChild {
	s.NeedUpdate = &v
	return s
}

func (s *ListDashboardsResponseBodyDashboardVosI18nChild) SetTags(v []*string) *ListDashboardsResponseBodyDashboardVosI18nChild {
	s.Tags = v
	return s
}

func (s *ListDashboardsResponseBodyDashboardVosI18nChild) SetTime(v string) *ListDashboardsResponseBodyDashboardVosI18nChild {
	s.Time = &v
	return s
}

func (s *ListDashboardsResponseBodyDashboardVosI18nChild) SetTitle(v string) *ListDashboardsResponseBodyDashboardVosI18nChild {
	s.Title = &v
	return s
}

func (s *ListDashboardsResponseBodyDashboardVosI18nChild) SetType(v string) *ListDashboardsResponseBodyDashboardVosI18nChild {
	s.Type = &v
	return s
}

func (s *ListDashboardsResponseBodyDashboardVosI18nChild) SetUid(v string) *ListDashboardsResponseBodyDashboardVosI18nChild {
	s.Uid = &v
	return s
}

func (s *ListDashboardsResponseBodyDashboardVosI18nChild) SetUrl(v string) *ListDashboardsResponseBodyDashboardVosI18nChild {
	s.Url = &v
	return s
}

func (s *ListDashboardsResponseBodyDashboardVosI18nChild) SetVersion(v string) *ListDashboardsResponseBodyDashboardVosI18nChild {
	s.Version = &v
	return s
}

type ListDashboardsResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListDashboardsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListDashboardsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListDashboardsResponse) GoString() string {
	return s.String()
}

func (s *ListDashboardsResponse) SetHeaders(v map[string]*string) *ListDashboardsResponse {
	s.Headers = v
	return s
}

func (s *ListDashboardsResponse) SetStatusCode(v int32) *ListDashboardsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListDashboardsResponse) SetBody(v *ListDashboardsResponseBody) *ListDashboardsResponse {
	s.Body = v
	return s
}

type ListDashboardsByNameRequest struct {
	// The ID of the cluster. If the ClusterType parameter is not set to `cloud-product-prometheus` or `cms-enterprise-prometheus`, you must specify the ClusterId parameter.
	//
	// example:
	//
	// cc7a37ee31aea4ed1a059eff8034b****
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	// The cluster type. Valid values:
	//
	// 	- vpc-prometheus
	//
	// 	- cloud-product-prometheus
	//
	// 	- cms-enterprise-prometheus
	//
	// 	- ExternalKubernetes
	//
	// 	- Ask
	//
	// 	- Kubernetes
	//
	// 	- ManagedKubernetes
	//
	// 	- remote-write-prometheus
	//
	// 	- GlobalViewV2
	//
	// example:
	//
	// cloud-product-prometheus
	ClusterType *string `json:"ClusterType,omitempty" xml:"ClusterType,omitempty"`
	// The name of the dashboard.
	//
	// example:
	//
	// edas-ingress-url
	DashBoardName *string `json:"DashBoardName,omitempty" xml:"DashBoardName,omitempty"`
	// The version of the dashboard.
	//
	// example:
	//
	// latest
	DashBoardVersion *string `json:"DashBoardVersion,omitempty" xml:"DashBoardVersion,omitempty"`
	// The type of the data source. Valid values:
	//
	// 	- loki
	//
	// 	- prometheus
	//
	// example:
	//
	// loki
	DataSourceType *string `json:"DataSourceType,omitempty" xml:"DataSourceType,omitempty"`
	// The name of the dashboard group.
	//
	// example:
	//
	// EDAS
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	// Specifies whether to display the Grafana dashboard only in the Application Real-Time Monitoring Service (ARMS) console.
	//
	// example:
	//
	// true
	OnlyQuery *bool `json:"OnlyQuery,omitempty" xml:"OnlyQuery,omitempty"`
	// The abbreviation of the Alibaba Cloud service name.
	//
	// example:
	//
	// edas
	ProductCode *string `json:"ProductCode,omitempty" xml:"ProductCode,omitempty"`
	// The ID of the region.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ListDashboardsByNameRequest) String() string {
	return tea.Prettify(s)
}

func (s ListDashboardsByNameRequest) GoString() string {
	return s.String()
}

func (s *ListDashboardsByNameRequest) SetClusterId(v string) *ListDashboardsByNameRequest {
	s.ClusterId = &v
	return s
}

func (s *ListDashboardsByNameRequest) SetClusterType(v string) *ListDashboardsByNameRequest {
	s.ClusterType = &v
	return s
}

func (s *ListDashboardsByNameRequest) SetDashBoardName(v string) *ListDashboardsByNameRequest {
	s.DashBoardName = &v
	return s
}

func (s *ListDashboardsByNameRequest) SetDashBoardVersion(v string) *ListDashboardsByNameRequest {
	s.DashBoardVersion = &v
	return s
}

func (s *ListDashboardsByNameRequest) SetDataSourceType(v string) *ListDashboardsByNameRequest {
	s.DataSourceType = &v
	return s
}

func (s *ListDashboardsByNameRequest) SetGroupName(v string) *ListDashboardsByNameRequest {
	s.GroupName = &v
	return s
}

func (s *ListDashboardsByNameRequest) SetOnlyQuery(v bool) *ListDashboardsByNameRequest {
	s.OnlyQuery = &v
	return s
}

func (s *ListDashboardsByNameRequest) SetProductCode(v string) *ListDashboardsByNameRequest {
	s.ProductCode = &v
	return s
}

func (s *ListDashboardsByNameRequest) SetRegionId(v string) *ListDashboardsByNameRequest {
	s.RegionId = &v
	return s
}

type ListDashboardsByNameResponseBody struct {
	// Status Code. Description 200 indicates success.
	//
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned struct.
	//
	// example:
	//
	// [{"name":"Edas Ingress Url Analysis","type":"edas-ingress-url-analysis","url":"https://g.console.aliyun.com/d/1036052989950239-11040375-66-3/edas-ingress-url-analysis?var-clusterId=29ksa&var-regionId=cn-hangzhou"}]
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// Returns a hint message for the result.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request, You can use the ID to locate logs and troubleshoot issues.
	//
	// example:
	//
	// 2983BEF7-4A0D-47A2-94A2-8E9C5E63****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListDashboardsByNameResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListDashboardsByNameResponseBody) GoString() string {
	return s.String()
}

func (s *ListDashboardsByNameResponseBody) SetCode(v int32) *ListDashboardsByNameResponseBody {
	s.Code = &v
	return s
}

func (s *ListDashboardsByNameResponseBody) SetData(v string) *ListDashboardsByNameResponseBody {
	s.Data = &v
	return s
}

func (s *ListDashboardsByNameResponseBody) SetMessage(v string) *ListDashboardsByNameResponseBody {
	s.Message = &v
	return s
}

func (s *ListDashboardsByNameResponseBody) SetRequestId(v string) *ListDashboardsByNameResponseBody {
	s.RequestId = &v
	return s
}

type ListDashboardsByNameResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListDashboardsByNameResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListDashboardsByNameResponse) String() string {
	return tea.Prettify(s)
}

func (s ListDashboardsByNameResponse) GoString() string {
	return s.String()
}

func (s *ListDashboardsByNameResponse) SetHeaders(v map[string]*string) *ListDashboardsByNameResponse {
	s.Headers = v
	return s
}

func (s *ListDashboardsByNameResponse) SetStatusCode(v int32) *ListDashboardsByNameResponse {
	s.StatusCode = &v
	return s
}

func (s *ListDashboardsByNameResponse) SetBody(v *ListDashboardsByNameResponseBody) *ListDashboardsByNameResponse {
	s.Body = v
	return s
}

type ListDispatchRuleRequest struct {
	// example:
	//
	// Prod
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// example:
	//
	// true
	System *bool `json:"System,omitempty" xml:"System,omitempty"`
}

func (s ListDispatchRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s ListDispatchRuleRequest) GoString() string {
	return s.String()
}

func (s *ListDispatchRuleRequest) SetName(v string) *ListDispatchRuleRequest {
	s.Name = &v
	return s
}

func (s *ListDispatchRuleRequest) SetRegionId(v string) *ListDispatchRuleRequest {
	s.RegionId = &v
	return s
}

func (s *ListDispatchRuleRequest) SetSystem(v bool) *ListDispatchRuleRequest {
	s.System = &v
	return s
}

type ListDispatchRuleResponseBody struct {
	DispatchRules []*ListDispatchRuleResponseBodyDispatchRules `json:"DispatchRules,omitempty" xml:"DispatchRules,omitempty" type:"Repeated"`
	// example:
	//
	// 34ED024E-9E31-434A-9E4E-D9D15C3****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListDispatchRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListDispatchRuleResponseBody) GoString() string {
	return s.String()
}

func (s *ListDispatchRuleResponseBody) SetDispatchRules(v []*ListDispatchRuleResponseBodyDispatchRules) *ListDispatchRuleResponseBody {
	s.DispatchRules = v
	return s
}

func (s *ListDispatchRuleResponseBody) SetRequestId(v string) *ListDispatchRuleResponseBody {
	s.RequestId = &v
	return s
}

type ListDispatchRuleResponseBodyDispatchRules struct {
	// example:
	//
	// Prod
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// 10282
	RuleId *int64 `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
	// example:
	//
	// true
	State *string `json:"State,omitempty" xml:"State,omitempty"`
}

func (s ListDispatchRuleResponseBodyDispatchRules) String() string {
	return tea.Prettify(s)
}

func (s ListDispatchRuleResponseBodyDispatchRules) GoString() string {
	return s.String()
}

func (s *ListDispatchRuleResponseBodyDispatchRules) SetName(v string) *ListDispatchRuleResponseBodyDispatchRules {
	s.Name = &v
	return s
}

func (s *ListDispatchRuleResponseBodyDispatchRules) SetRuleId(v int64) *ListDispatchRuleResponseBodyDispatchRules {
	s.RuleId = &v
	return s
}

func (s *ListDispatchRuleResponseBodyDispatchRules) SetState(v string) *ListDispatchRuleResponseBodyDispatchRules {
	s.State = &v
	return s
}

type ListDispatchRuleResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListDispatchRuleResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListDispatchRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s ListDispatchRuleResponse) GoString() string {
	return s.String()
}

func (s *ListDispatchRuleResponse) SetHeaders(v map[string]*string) *ListDispatchRuleResponse {
	s.Headers = v
	return s
}

func (s *ListDispatchRuleResponse) SetStatusCode(v int32) *ListDispatchRuleResponse {
	s.StatusCode = &v
	return s
}

func (s *ListDispatchRuleResponse) SetBody(v *ListDispatchRuleResponseBody) *ListDispatchRuleResponse {
	s.Body = v
	return s
}

type ListEnvCustomJobsRequest struct {
	// Specifies whether to return the encrypted YAML string.
	//
	// example:
	//
	// true
	EncryptYaml *bool `json:"EncryptYaml,omitempty" xml:"EncryptYaml,omitempty"`
	// The ID of the environment instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// env-xxxxx
	EnvironmentId *string `json:"EnvironmentId,omitempty" xml:"EnvironmentId,omitempty"`
	// The region ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ListEnvCustomJobsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListEnvCustomJobsRequest) GoString() string {
	return s.String()
}

func (s *ListEnvCustomJobsRequest) SetEncryptYaml(v bool) *ListEnvCustomJobsRequest {
	s.EncryptYaml = &v
	return s
}

func (s *ListEnvCustomJobsRequest) SetEnvironmentId(v string) *ListEnvCustomJobsRequest {
	s.EnvironmentId = &v
	return s
}

func (s *ListEnvCustomJobsRequest) SetRegionId(v string) *ListEnvCustomJobsRequest {
	s.RegionId = &v
	return s
}

type ListEnvCustomJobsResponseBody struct {
	// The HTTP status code. The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned struct.
	Data []*ListEnvCustomJobsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// The returned message.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 2A0CEDF1-06FE-44AC-8E21-21A5BE65****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListEnvCustomJobsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListEnvCustomJobsResponseBody) GoString() string {
	return s.String()
}

func (s *ListEnvCustomJobsResponseBody) SetCode(v int32) *ListEnvCustomJobsResponseBody {
	s.Code = &v
	return s
}

func (s *ListEnvCustomJobsResponseBody) SetData(v []*ListEnvCustomJobsResponseBodyData) *ListEnvCustomJobsResponseBody {
	s.Data = v
	return s
}

func (s *ListEnvCustomJobsResponseBody) SetMessage(v string) *ListEnvCustomJobsResponseBody {
	s.Message = &v
	return s
}

func (s *ListEnvCustomJobsResponseBody) SetRequestId(v string) *ListEnvCustomJobsResponseBody {
	s.RequestId = &v
	return s
}

type ListEnvCustomJobsResponseBodyData struct {
	// The name of the component to which the custom job belongs.
	//
	// example:
	//
	// mysql
	AddonName *string `json:"AddonName,omitempty" xml:"AddonName,omitempty"`
	// The instance name of the component.
	//
	// example:
	//
	// mysql1
	AddonReleaseName *string `json:"AddonReleaseName,omitempty" xml:"AddonReleaseName,omitempty"`
	// The version of the component.
	//
	// example:
	//
	// 1.1.0
	AddonVersion *string `json:"AddonVersion,omitempty" xml:"AddonVersion,omitempty"`
	// If the request parameter EncryptYaml is set to true, a Base64-encoded YAML string is returned. Otherwise, a plaintext YAML string is returned.
	//
	// example:
	//
	// Refer to supplementary instructions.
	ConfigYaml *string `json:"ConfigYaml,omitempty" xml:"ConfigYaml,omitempty"`
	// The time when the custom job was created. The value of this parameter is a timestamp.
	//
	// example:
	//
	// 2022-01-01T10:11:34Z
	CreationTimestamp *string `json:"CreationTimestamp,omitempty" xml:"CreationTimestamp,omitempty"`
	// The name of the custom job.
	//
	// example:
	//
	// job1
	CustomJobName *string `json:"CustomJobName,omitempty" xml:"CustomJobName,omitempty"`
	// The ID of the environment instance.
	//
	// example:
	//
	// env-xxxx
	EnvironmentId *string `json:"EnvironmentId,omitempty" xml:"EnvironmentId,omitempty"`
	// The region ID.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The capture configurations.
	ScrapeConfigs []*ListEnvCustomJobsResponseBodyDataScrapeConfigs `json:"ScrapeConfigs,omitempty" xml:"ScrapeConfigs,omitempty" type:"Repeated"`
	// The status of the custom job.
	//
	// example:
	//
	// run
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListEnvCustomJobsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListEnvCustomJobsResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListEnvCustomJobsResponseBodyData) SetAddonName(v string) *ListEnvCustomJobsResponseBodyData {
	s.AddonName = &v
	return s
}

func (s *ListEnvCustomJobsResponseBodyData) SetAddonReleaseName(v string) *ListEnvCustomJobsResponseBodyData {
	s.AddonReleaseName = &v
	return s
}

func (s *ListEnvCustomJobsResponseBodyData) SetAddonVersion(v string) *ListEnvCustomJobsResponseBodyData {
	s.AddonVersion = &v
	return s
}

func (s *ListEnvCustomJobsResponseBodyData) SetConfigYaml(v string) *ListEnvCustomJobsResponseBodyData {
	s.ConfigYaml = &v
	return s
}

func (s *ListEnvCustomJobsResponseBodyData) SetCreationTimestamp(v string) *ListEnvCustomJobsResponseBodyData {
	s.CreationTimestamp = &v
	return s
}

func (s *ListEnvCustomJobsResponseBodyData) SetCustomJobName(v string) *ListEnvCustomJobsResponseBodyData {
	s.CustomJobName = &v
	return s
}

func (s *ListEnvCustomJobsResponseBodyData) SetEnvironmentId(v string) *ListEnvCustomJobsResponseBodyData {
	s.EnvironmentId = &v
	return s
}

func (s *ListEnvCustomJobsResponseBodyData) SetRegionId(v string) *ListEnvCustomJobsResponseBodyData {
	s.RegionId = &v
	return s
}

func (s *ListEnvCustomJobsResponseBodyData) SetScrapeConfigs(v []*ListEnvCustomJobsResponseBodyDataScrapeConfigs) *ListEnvCustomJobsResponseBodyData {
	s.ScrapeConfigs = v
	return s
}

func (s *ListEnvCustomJobsResponseBodyData) SetStatus(v string) *ListEnvCustomJobsResponseBodyData {
	s.Status = &v
	return s
}

type ListEnvCustomJobsResponseBodyDataScrapeConfigs struct {
	// The name of the job.
	//
	// example:
	//
	// custom-sd-demo
	JobName *string `json:"JobName,omitempty" xml:"JobName,omitempty"`
	// The path of the metric.
	//
	// example:
	//
	// /metrics
	MetricsPath *string `json:"MetricsPath,omitempty" xml:"MetricsPath,omitempty"`
	// The service discovery methods.
	ScrapeDiscoverys []*string `json:"ScrapeDiscoverys,omitempty" xml:"ScrapeDiscoverys,omitempty" type:"Repeated"`
	// The capture interval.
	//
	// example:
	//
	// 30s
	ScrapeInterval *string `json:"ScrapeInterval,omitempty" xml:"ScrapeInterval,omitempty"`
}

func (s ListEnvCustomJobsResponseBodyDataScrapeConfigs) String() string {
	return tea.Prettify(s)
}

func (s ListEnvCustomJobsResponseBodyDataScrapeConfigs) GoString() string {
	return s.String()
}

func (s *ListEnvCustomJobsResponseBodyDataScrapeConfigs) SetJobName(v string) *ListEnvCustomJobsResponseBodyDataScrapeConfigs {
	s.JobName = &v
	return s
}

func (s *ListEnvCustomJobsResponseBodyDataScrapeConfigs) SetMetricsPath(v string) *ListEnvCustomJobsResponseBodyDataScrapeConfigs {
	s.MetricsPath = &v
	return s
}

func (s *ListEnvCustomJobsResponseBodyDataScrapeConfigs) SetScrapeDiscoverys(v []*string) *ListEnvCustomJobsResponseBodyDataScrapeConfigs {
	s.ScrapeDiscoverys = v
	return s
}

func (s *ListEnvCustomJobsResponseBodyDataScrapeConfigs) SetScrapeInterval(v string) *ListEnvCustomJobsResponseBodyDataScrapeConfigs {
	s.ScrapeInterval = &v
	return s
}

type ListEnvCustomJobsResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListEnvCustomJobsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListEnvCustomJobsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListEnvCustomJobsResponse) GoString() string {
	return s.String()
}

func (s *ListEnvCustomJobsResponse) SetHeaders(v map[string]*string) *ListEnvCustomJobsResponse {
	s.Headers = v
	return s
}

func (s *ListEnvCustomJobsResponse) SetStatusCode(v int32) *ListEnvCustomJobsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListEnvCustomJobsResponse) SetBody(v *ListEnvCustomJobsResponseBody) *ListEnvCustomJobsResponse {
	s.Body = v
	return s
}

type ListEnvPodMonitorsRequest struct {
	// The environment ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// env-xxxxx
	EnvironmentId *string `json:"EnvironmentId,omitempty" xml:"EnvironmentId,omitempty"`
	// The region ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ListEnvPodMonitorsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListEnvPodMonitorsRequest) GoString() string {
	return s.String()
}

func (s *ListEnvPodMonitorsRequest) SetEnvironmentId(v string) *ListEnvPodMonitorsRequest {
	s.EnvironmentId = &v
	return s
}

func (s *ListEnvPodMonitorsRequest) SetRegionId(v string) *ListEnvPodMonitorsRequest {
	s.RegionId = &v
	return s
}

type ListEnvPodMonitorsResponseBody struct {
	// The HTTP status code. The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The result of the operation.
	Data []*ListEnvPodMonitorsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// The returned message.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 4C518054-852F-4023-ABC1-4AF95FF7****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListEnvPodMonitorsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListEnvPodMonitorsResponseBody) GoString() string {
	return s.String()
}

func (s *ListEnvPodMonitorsResponseBody) SetCode(v int32) *ListEnvPodMonitorsResponseBody {
	s.Code = &v
	return s
}

func (s *ListEnvPodMonitorsResponseBody) SetData(v []*ListEnvPodMonitorsResponseBodyData) *ListEnvPodMonitorsResponseBody {
	s.Data = v
	return s
}

func (s *ListEnvPodMonitorsResponseBody) SetMessage(v string) *ListEnvPodMonitorsResponseBody {
	s.Message = &v
	return s
}

func (s *ListEnvPodMonitorsResponseBody) SetRequestId(v string) *ListEnvPodMonitorsResponseBody {
	s.RequestId = &v
	return s
}

type ListEnvPodMonitorsResponseBodyData struct {
	// The name of the component to which the PodMonitor belongs.
	//
	// example:
	//
	// mysql
	AddonName *string `json:"AddonName,omitempty" xml:"AddonName,omitempty"`
	// The instance name of the component.
	//
	// example:
	//
	// mysql1
	AddonReleaseName *string `json:"AddonReleaseName,omitempty" xml:"AddonReleaseName,omitempty"`
	// The version of the component.
	//
	// example:
	//
	// 1.0.5
	AddonVersion *string `json:"AddonVersion,omitempty" xml:"AddonVersion,omitempty"`
	// The YAML configuration string.
	//
	// example:
	//
	// Refer to supplementary instructions.
	ConfigYaml *string `json:"ConfigYaml,omitempty" xml:"ConfigYaml,omitempty"`
	// The time when the PodMonitor was created. The value of this parameter is a timestamp.
	//
	// example:
	//
	// 2011-01-02T11:34:22Z
	CreationTimestamp *string `json:"CreationTimestamp,omitempty" xml:"CreationTimestamp,omitempty"`
	// The endpoints of the PodMonitor.
	Endpoints []*ListEnvPodMonitorsResponseBodyDataEndpoints `json:"Endpoints,omitempty" xml:"Endpoints,omitempty" type:"Repeated"`
	// The environment ID.
	//
	// example:
	//
	// env-xxxxx
	EnvironmentId *string `json:"EnvironmentId,omitempty" xml:"EnvironmentId,omitempty"`
	// The namespace.
	//
	// example:
	//
	// arms-prom
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// The name of the PodMonitor.
	//
	// example:
	//
	// pm1
	PodMonitorName *string `json:"PodMonitorName,omitempty" xml:"PodMonitorName,omitempty"`
	// The region ID.
	//
	// example:
	//
	// cn-beijing
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The status of the PodMonitor.
	//
	// example:
	//
	// run
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListEnvPodMonitorsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListEnvPodMonitorsResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListEnvPodMonitorsResponseBodyData) SetAddonName(v string) *ListEnvPodMonitorsResponseBodyData {
	s.AddonName = &v
	return s
}

func (s *ListEnvPodMonitorsResponseBodyData) SetAddonReleaseName(v string) *ListEnvPodMonitorsResponseBodyData {
	s.AddonReleaseName = &v
	return s
}

func (s *ListEnvPodMonitorsResponseBodyData) SetAddonVersion(v string) *ListEnvPodMonitorsResponseBodyData {
	s.AddonVersion = &v
	return s
}

func (s *ListEnvPodMonitorsResponseBodyData) SetConfigYaml(v string) *ListEnvPodMonitorsResponseBodyData {
	s.ConfigYaml = &v
	return s
}

func (s *ListEnvPodMonitorsResponseBodyData) SetCreationTimestamp(v string) *ListEnvPodMonitorsResponseBodyData {
	s.CreationTimestamp = &v
	return s
}

func (s *ListEnvPodMonitorsResponseBodyData) SetEndpoints(v []*ListEnvPodMonitorsResponseBodyDataEndpoints) *ListEnvPodMonitorsResponseBodyData {
	s.Endpoints = v
	return s
}

func (s *ListEnvPodMonitorsResponseBodyData) SetEnvironmentId(v string) *ListEnvPodMonitorsResponseBodyData {
	s.EnvironmentId = &v
	return s
}

func (s *ListEnvPodMonitorsResponseBodyData) SetNamespace(v string) *ListEnvPodMonitorsResponseBodyData {
	s.Namespace = &v
	return s
}

func (s *ListEnvPodMonitorsResponseBodyData) SetPodMonitorName(v string) *ListEnvPodMonitorsResponseBodyData {
	s.PodMonitorName = &v
	return s
}

func (s *ListEnvPodMonitorsResponseBodyData) SetRegionId(v string) *ListEnvPodMonitorsResponseBodyData {
	s.RegionId = &v
	return s
}

func (s *ListEnvPodMonitorsResponseBodyData) SetStatus(v string) *ListEnvPodMonitorsResponseBodyData {
	s.Status = &v
	return s
}

type ListEnvPodMonitorsResponseBodyDataEndpoints struct {
	// The collection interval.
	//
	// example:
	//
	// 30s
	Interval *string `json:"Interval,omitempty" xml:"Interval,omitempty"`
	// The number of pods that match the PodMonitor endpoint.
	//
	// example:
	//
	// 1
	MatchedTargetCount *int32 `json:"MatchedTargetCount,omitempty" xml:"MatchedTargetCount,omitempty"`
	// The collection path.
	//
	// example:
	//
	// /metrics
	Path *string `json:"Path,omitempty" xml:"Path,omitempty"`
	// The external port.
	//
	// example:
	//
	// 9182
	Port *string `json:"Port,omitempty" xml:"Port,omitempty"`
	// The destination port.
	//
	// example:
	//
	// 3306
	TargetPort *int32 `json:"TargetPort,omitempty" xml:"TargetPort,omitempty"`
}

func (s ListEnvPodMonitorsResponseBodyDataEndpoints) String() string {
	return tea.Prettify(s)
}

func (s ListEnvPodMonitorsResponseBodyDataEndpoints) GoString() string {
	return s.String()
}

func (s *ListEnvPodMonitorsResponseBodyDataEndpoints) SetInterval(v string) *ListEnvPodMonitorsResponseBodyDataEndpoints {
	s.Interval = &v
	return s
}

func (s *ListEnvPodMonitorsResponseBodyDataEndpoints) SetMatchedTargetCount(v int32) *ListEnvPodMonitorsResponseBodyDataEndpoints {
	s.MatchedTargetCount = &v
	return s
}

func (s *ListEnvPodMonitorsResponseBodyDataEndpoints) SetPath(v string) *ListEnvPodMonitorsResponseBodyDataEndpoints {
	s.Path = &v
	return s
}

func (s *ListEnvPodMonitorsResponseBodyDataEndpoints) SetPort(v string) *ListEnvPodMonitorsResponseBodyDataEndpoints {
	s.Port = &v
	return s
}

func (s *ListEnvPodMonitorsResponseBodyDataEndpoints) SetTargetPort(v int32) *ListEnvPodMonitorsResponseBodyDataEndpoints {
	s.TargetPort = &v
	return s
}

type ListEnvPodMonitorsResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListEnvPodMonitorsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListEnvPodMonitorsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListEnvPodMonitorsResponse) GoString() string {
	return s.String()
}

func (s *ListEnvPodMonitorsResponse) SetHeaders(v map[string]*string) *ListEnvPodMonitorsResponse {
	s.Headers = v
	return s
}

func (s *ListEnvPodMonitorsResponse) SetStatusCode(v int32) *ListEnvPodMonitorsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListEnvPodMonitorsResponse) SetBody(v *ListEnvPodMonitorsResponseBody) *ListEnvPodMonitorsResponse {
	s.Body = v
	return s
}

type ListEnvServiceMonitorsRequest struct {
	// The environment ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// env-xxxxx
	EnvironmentId *string `json:"EnvironmentId,omitempty" xml:"EnvironmentId,omitempty"`
	// The region ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ListEnvServiceMonitorsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListEnvServiceMonitorsRequest) GoString() string {
	return s.String()
}

func (s *ListEnvServiceMonitorsRequest) SetEnvironmentId(v string) *ListEnvServiceMonitorsRequest {
	s.EnvironmentId = &v
	return s
}

func (s *ListEnvServiceMonitorsRequest) SetRegionId(v string) *ListEnvServiceMonitorsRequest {
	s.RegionId = &v
	return s
}

type ListEnvServiceMonitorsResponseBody struct {
	// The HTTP status code. The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned struct.
	Data []*ListEnvServiceMonitorsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// The returned message.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 1A474FF8-7861-4D00-81B5-5BC3DA4E****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListEnvServiceMonitorsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListEnvServiceMonitorsResponseBody) GoString() string {
	return s.String()
}

func (s *ListEnvServiceMonitorsResponseBody) SetCode(v int32) *ListEnvServiceMonitorsResponseBody {
	s.Code = &v
	return s
}

func (s *ListEnvServiceMonitorsResponseBody) SetData(v []*ListEnvServiceMonitorsResponseBodyData) *ListEnvServiceMonitorsResponseBody {
	s.Data = v
	return s
}

func (s *ListEnvServiceMonitorsResponseBody) SetMessage(v string) *ListEnvServiceMonitorsResponseBody {
	s.Message = &v
	return s
}

func (s *ListEnvServiceMonitorsResponseBody) SetRequestId(v string) *ListEnvServiceMonitorsResponseBody {
	s.RequestId = &v
	return s
}

type ListEnvServiceMonitorsResponseBodyData struct {
	// The name of the component to which the ServiceMonitor belongs.
	//
	// example:
	//
	// mysql
	AddonName *string `json:"AddonName,omitempty" xml:"AddonName,omitempty"`
	// The instance name of the component.
	//
	// example:
	//
	// mysql1
	AddonReleaseName *string `json:"AddonReleaseName,omitempty" xml:"AddonReleaseName,omitempty"`
	// The version of the component.
	//
	// example:
	//
	// 1.1.0
	AddonVersion *string `json:"AddonVersion,omitempty" xml:"AddonVersion,omitempty"`
	// The YAML configuration string.
	//
	// example:
	//
	// Refer to supplementary instructions.
	ConfigYaml *string `json:"ConfigYaml,omitempty" xml:"ConfigYaml,omitempty"`
	// The time when the ServiceMonitor was created. The value of this parameter is a timestamp.
	//
	// example:
	//
	// 2011-10-11T22:32:11Z
	CreationTimestamp *string `json:"CreationTimestamp,omitempty" xml:"CreationTimestamp,omitempty"`
	// The endpoints of the ServiceMonitor.
	Endpoints []*ListEnvServiceMonitorsResponseBodyDataEndpoints `json:"Endpoints,omitempty" xml:"Endpoints,omitempty" type:"Repeated"`
	// The environment ID.
	//
	// example:
	//
	// env-xxxxx
	EnvironmentId *string `json:"EnvironmentId,omitempty" xml:"EnvironmentId,omitempty"`
	// The number of matched services.
	//
	// example:
	//
	// 1
	MatchedServiceCount *int32 `json:"MatchedServiceCount,omitempty" xml:"MatchedServiceCount,omitempty"`
	// The namespace.
	//
	// example:
	//
	// arms-prom
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// The region ID.
	//
	// example:
	//
	// cn-beijing
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The name of the ServiceMonitor.
	//
	// example:
	//
	// sm1
	ServiceMonitorName *string `json:"ServiceMonitorName,omitempty" xml:"ServiceMonitorName,omitempty"`
	// The status of the ServiceMonitor.
	//
	// example:
	//
	// run
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListEnvServiceMonitorsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListEnvServiceMonitorsResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListEnvServiceMonitorsResponseBodyData) SetAddonName(v string) *ListEnvServiceMonitorsResponseBodyData {
	s.AddonName = &v
	return s
}

func (s *ListEnvServiceMonitorsResponseBodyData) SetAddonReleaseName(v string) *ListEnvServiceMonitorsResponseBodyData {
	s.AddonReleaseName = &v
	return s
}

func (s *ListEnvServiceMonitorsResponseBodyData) SetAddonVersion(v string) *ListEnvServiceMonitorsResponseBodyData {
	s.AddonVersion = &v
	return s
}

func (s *ListEnvServiceMonitorsResponseBodyData) SetConfigYaml(v string) *ListEnvServiceMonitorsResponseBodyData {
	s.ConfigYaml = &v
	return s
}

func (s *ListEnvServiceMonitorsResponseBodyData) SetCreationTimestamp(v string) *ListEnvServiceMonitorsResponseBodyData {
	s.CreationTimestamp = &v
	return s
}

func (s *ListEnvServiceMonitorsResponseBodyData) SetEndpoints(v []*ListEnvServiceMonitorsResponseBodyDataEndpoints) *ListEnvServiceMonitorsResponseBodyData {
	s.Endpoints = v
	return s
}

func (s *ListEnvServiceMonitorsResponseBodyData) SetEnvironmentId(v string) *ListEnvServiceMonitorsResponseBodyData {
	s.EnvironmentId = &v
	return s
}

func (s *ListEnvServiceMonitorsResponseBodyData) SetMatchedServiceCount(v int32) *ListEnvServiceMonitorsResponseBodyData {
	s.MatchedServiceCount = &v
	return s
}

func (s *ListEnvServiceMonitorsResponseBodyData) SetNamespace(v string) *ListEnvServiceMonitorsResponseBodyData {
	s.Namespace = &v
	return s
}

func (s *ListEnvServiceMonitorsResponseBodyData) SetRegionId(v string) *ListEnvServiceMonitorsResponseBodyData {
	s.RegionId = &v
	return s
}

func (s *ListEnvServiceMonitorsResponseBodyData) SetServiceMonitorName(v string) *ListEnvServiceMonitorsResponseBodyData {
	s.ServiceMonitorName = &v
	return s
}

func (s *ListEnvServiceMonitorsResponseBodyData) SetStatus(v string) *ListEnvServiceMonitorsResponseBodyData {
	s.Status = &v
	return s
}

type ListEnvServiceMonitorsResponseBodyDataEndpoints struct {
	// The collection interval.
	//
	// example:
	//
	// 30s
	Interval *string `json:"Interval,omitempty" xml:"Interval,omitempty"`
	// The number of pods that match the ServiceMonitor endpoint.
	//
	// example:
	//
	// 1
	MatchedTargetCount *int32 `json:"MatchedTargetCount,omitempty" xml:"MatchedTargetCount,omitempty"`
	// The collection path.
	//
	// example:
	//
	// /metrics
	Path *string `json:"Path,omitempty" xml:"Path,omitempty"`
	// The external port.
	//
	// example:
	//
	// 9101
	Port *string `json:"Port,omitempty" xml:"Port,omitempty"`
	// The destination port.
	//
	// example:
	//
	// 443
	TargetPort *int32 `json:"TargetPort,omitempty" xml:"TargetPort,omitempty"`
}

func (s ListEnvServiceMonitorsResponseBodyDataEndpoints) String() string {
	return tea.Prettify(s)
}

func (s ListEnvServiceMonitorsResponseBodyDataEndpoints) GoString() string {
	return s.String()
}

func (s *ListEnvServiceMonitorsResponseBodyDataEndpoints) SetInterval(v string) *ListEnvServiceMonitorsResponseBodyDataEndpoints {
	s.Interval = &v
	return s
}

func (s *ListEnvServiceMonitorsResponseBodyDataEndpoints) SetMatchedTargetCount(v int32) *ListEnvServiceMonitorsResponseBodyDataEndpoints {
	s.MatchedTargetCount = &v
	return s
}

func (s *ListEnvServiceMonitorsResponseBodyDataEndpoints) SetPath(v string) *ListEnvServiceMonitorsResponseBodyDataEndpoints {
	s.Path = &v
	return s
}

func (s *ListEnvServiceMonitorsResponseBodyDataEndpoints) SetPort(v string) *ListEnvServiceMonitorsResponseBodyDataEndpoints {
	s.Port = &v
	return s
}

func (s *ListEnvServiceMonitorsResponseBodyDataEndpoints) SetTargetPort(v int32) *ListEnvServiceMonitorsResponseBodyDataEndpoints {
	s.TargetPort = &v
	return s
}

type ListEnvServiceMonitorsResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListEnvServiceMonitorsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListEnvServiceMonitorsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListEnvServiceMonitorsResponse) GoString() string {
	return s.String()
}

func (s *ListEnvServiceMonitorsResponse) SetHeaders(v map[string]*string) *ListEnvServiceMonitorsResponse {
	s.Headers = v
	return s
}

func (s *ListEnvServiceMonitorsResponse) SetStatusCode(v int32) *ListEnvServiceMonitorsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListEnvServiceMonitorsResponse) SetBody(v *ListEnvServiceMonitorsResponseBody) *ListEnvServiceMonitorsResponse {
	s.Body = v
	return s
}

type ListEnvironmentDashboardsRequest struct {
	// Name of Addon,One of AddonName and Scene must be filled in.
	//
	// example:
	//
	// trace-java
	AddonName *string `json:"AddonName,omitempty" xml:"AddonName,omitempty"`
	// The ID of the environment instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// env-xxx
	EnvironmentId *string `json:"EnvironmentId,omitempty" xml:"EnvironmentId,omitempty"`
	// The region ID of the instance.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The scenario of Addon. Either AddonName or Scene is required.
	//
	// example:
	//
	// database
	Scene *string `json:"Scene,omitempty" xml:"Scene,omitempty"`
}

func (s ListEnvironmentDashboardsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListEnvironmentDashboardsRequest) GoString() string {
	return s.String()
}

func (s *ListEnvironmentDashboardsRequest) SetAddonName(v string) *ListEnvironmentDashboardsRequest {
	s.AddonName = &v
	return s
}

func (s *ListEnvironmentDashboardsRequest) SetEnvironmentId(v string) *ListEnvironmentDashboardsRequest {
	s.EnvironmentId = &v
	return s
}

func (s *ListEnvironmentDashboardsRequest) SetRegionId(v string) *ListEnvironmentDashboardsRequest {
	s.RegionId = &v
	return s
}

func (s *ListEnvironmentDashboardsRequest) SetScene(v string) *ListEnvironmentDashboardsRequest {
	s.Scene = &v
	return s
}

type ListEnvironmentDashboardsResponseBody struct {
	// The HTTP status code. The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The result of the operation.
	Data *ListEnvironmentDashboardsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// example:
	//
	// message
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	//
	// example:
	//
	// A5EC8221-08F2-4C95-9AF1-49FD998C647A
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListEnvironmentDashboardsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListEnvironmentDashboardsResponseBody) GoString() string {
	return s.String()
}

func (s *ListEnvironmentDashboardsResponseBody) SetCode(v int32) *ListEnvironmentDashboardsResponseBody {
	s.Code = &v
	return s
}

func (s *ListEnvironmentDashboardsResponseBody) SetData(v *ListEnvironmentDashboardsResponseBodyData) *ListEnvironmentDashboardsResponseBody {
	s.Data = v
	return s
}

func (s *ListEnvironmentDashboardsResponseBody) SetMessage(v string) *ListEnvironmentDashboardsResponseBody {
	s.Message = &v
	return s
}

func (s *ListEnvironmentDashboardsResponseBody) SetRequestId(v string) *ListEnvironmentDashboardsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListEnvironmentDashboardsResponseBody) SetSuccess(v bool) *ListEnvironmentDashboardsResponseBody {
	s.Success = &v
	return s
}

type ListEnvironmentDashboardsResponseBodyData struct {
	// The dashboards.
	Dashboards []*ListEnvironmentDashboardsResponseBodyDataDashboards `json:"Dashboards,omitempty" xml:"Dashboards,omitempty" type:"Repeated"`
	// The total number of entries returned.
	//
	// example:
	//
	// 1
	Total *int64 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s ListEnvironmentDashboardsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListEnvironmentDashboardsResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListEnvironmentDashboardsResponseBodyData) SetDashboards(v []*ListEnvironmentDashboardsResponseBodyDataDashboards) *ListEnvironmentDashboardsResponseBodyData {
	s.Dashboards = v
	return s
}

func (s *ListEnvironmentDashboardsResponseBodyData) SetTotal(v int64) *ListEnvironmentDashboardsResponseBodyData {
	s.Total = &v
	return s
}

type ListEnvironmentDashboardsResponseBodyDataDashboards struct {
	// The UID of the folder.
	//
	// example:
	//
	// 1374923841627893
	FolderUid *string `json:"FolderUid,omitempty" xml:"FolderUid,omitempty"`
	// The region ID.
	//
	// example:
	//
	// cn-hangzhou
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// The keyword.
	Tags []*string `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
	// The title of the Grafana dashboard.
	//
	// example:
	//
	// kafka-instance
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// The unique identifier of the dashboard.
	//
	// example:
	//
	// 1537863211936042
	Uid *string `json:"Uid,omitempty" xml:"Uid,omitempty"`
	// The complete URL of the dashboard.
	//
	// example:
	//
	// http://xxx
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s ListEnvironmentDashboardsResponseBodyDataDashboards) String() string {
	return tea.Prettify(s)
}

func (s ListEnvironmentDashboardsResponseBodyDataDashboards) GoString() string {
	return s.String()
}

func (s *ListEnvironmentDashboardsResponseBodyDataDashboards) SetFolderUid(v string) *ListEnvironmentDashboardsResponseBodyDataDashboards {
	s.FolderUid = &v
	return s
}

func (s *ListEnvironmentDashboardsResponseBodyDataDashboards) SetRegion(v string) *ListEnvironmentDashboardsResponseBodyDataDashboards {
	s.Region = &v
	return s
}

func (s *ListEnvironmentDashboardsResponseBodyDataDashboards) SetTags(v []*string) *ListEnvironmentDashboardsResponseBodyDataDashboards {
	s.Tags = v
	return s
}

func (s *ListEnvironmentDashboardsResponseBodyDataDashboards) SetTitle(v string) *ListEnvironmentDashboardsResponseBodyDataDashboards {
	s.Title = &v
	return s
}

func (s *ListEnvironmentDashboardsResponseBodyDataDashboards) SetUid(v string) *ListEnvironmentDashboardsResponseBodyDataDashboards {
	s.Uid = &v
	return s
}

func (s *ListEnvironmentDashboardsResponseBodyDataDashboards) SetUrl(v string) *ListEnvironmentDashboardsResponseBodyDataDashboards {
	s.Url = &v
	return s
}

type ListEnvironmentDashboardsResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListEnvironmentDashboardsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListEnvironmentDashboardsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListEnvironmentDashboardsResponse) GoString() string {
	return s.String()
}

func (s *ListEnvironmentDashboardsResponse) SetHeaders(v map[string]*string) *ListEnvironmentDashboardsResponse {
	s.Headers = v
	return s
}

func (s *ListEnvironmentDashboardsResponse) SetStatusCode(v int32) *ListEnvironmentDashboardsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListEnvironmentDashboardsResponse) SetBody(v *ListEnvironmentDashboardsResponseBody) *ListEnvironmentDashboardsResponse {
	s.Body = v
	return s
}

type ListEnvironmentFeaturesRequest struct {
	AliyunLang *string `json:"AliyunLang,omitempty" xml:"AliyunLang,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// env-xxx
	EnvironmentId *string `json:"EnvironmentId,omitempty" xml:"EnvironmentId,omitempty"`
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ListEnvironmentFeaturesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListEnvironmentFeaturesRequest) GoString() string {
	return s.String()
}

func (s *ListEnvironmentFeaturesRequest) SetAliyunLang(v string) *ListEnvironmentFeaturesRequest {
	s.AliyunLang = &v
	return s
}

func (s *ListEnvironmentFeaturesRequest) SetEnvironmentId(v string) *ListEnvironmentFeaturesRequest {
	s.EnvironmentId = &v
	return s
}

func (s *ListEnvironmentFeaturesRequest) SetRegionId(v string) *ListEnvironmentFeaturesRequest {
	s.RegionId = &v
	return s
}

type ListEnvironmentFeaturesResponseBody struct {
	// example:
	//
	// 200
	Code *int32                                     `json:"Code,omitempty" xml:"Code,omitempty"`
	Data []*ListEnvironmentFeaturesResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	//
	// example:
	//
	// 40B10E04-81E8-4643-970D-F1B38F2E****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListEnvironmentFeaturesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListEnvironmentFeaturesResponseBody) GoString() string {
	return s.String()
}

func (s *ListEnvironmentFeaturesResponseBody) SetCode(v int32) *ListEnvironmentFeaturesResponseBody {
	s.Code = &v
	return s
}

func (s *ListEnvironmentFeaturesResponseBody) SetData(v []*ListEnvironmentFeaturesResponseBodyData) *ListEnvironmentFeaturesResponseBody {
	s.Data = v
	return s
}

func (s *ListEnvironmentFeaturesResponseBody) SetMessage(v string) *ListEnvironmentFeaturesResponseBody {
	s.Message = &v
	return s
}

func (s *ListEnvironmentFeaturesResponseBody) SetRequestId(v string) *ListEnvironmentFeaturesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListEnvironmentFeaturesResponseBody) SetSuccess(v bool) *ListEnvironmentFeaturesResponseBody {
	s.Success = &v
	return s
}

type ListEnvironmentFeaturesResponseBodyData struct {
	Alias       *string            `json:"Alias,omitempty" xml:"Alias,omitempty"`
	Config      map[string]*string `json:"Config,omitempty" xml:"Config,omitempty"`
	Description *string            `json:"Description,omitempty" xml:"Description,omitempty"`
	// example:
	//
	// env-xxxxx
	EnvironmentId *string `json:"EnvironmentId,omitempty" xml:"EnvironmentId,omitempty"`
	// example:
	//
	// http://xxx
	Icon *string `json:"Icon,omitempty" xml:"Icon,omitempty"`
	// example:
	//
	// zh
	Language *string `json:"Language,omitempty" xml:"Language,omitempty"`
	// example:
	//
	// 1.1.17
	LatestVersion *string `json:"LatestVersion,omitempty" xml:"LatestVersion,omitempty"`
	Managed       *bool   `json:"Managed,omitempty" xml:"Managed,omitempty"`
	// example:
	//
	// metric-agent
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// Success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// example:
	//
	// 1.1.17
	Version *string `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s ListEnvironmentFeaturesResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListEnvironmentFeaturesResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListEnvironmentFeaturesResponseBodyData) SetAlias(v string) *ListEnvironmentFeaturesResponseBodyData {
	s.Alias = &v
	return s
}

func (s *ListEnvironmentFeaturesResponseBodyData) SetConfig(v map[string]*string) *ListEnvironmentFeaturesResponseBodyData {
	s.Config = v
	return s
}

func (s *ListEnvironmentFeaturesResponseBodyData) SetDescription(v string) *ListEnvironmentFeaturesResponseBodyData {
	s.Description = &v
	return s
}

func (s *ListEnvironmentFeaturesResponseBodyData) SetEnvironmentId(v string) *ListEnvironmentFeaturesResponseBodyData {
	s.EnvironmentId = &v
	return s
}

func (s *ListEnvironmentFeaturesResponseBodyData) SetIcon(v string) *ListEnvironmentFeaturesResponseBodyData {
	s.Icon = &v
	return s
}

func (s *ListEnvironmentFeaturesResponseBodyData) SetLanguage(v string) *ListEnvironmentFeaturesResponseBodyData {
	s.Language = &v
	return s
}

func (s *ListEnvironmentFeaturesResponseBodyData) SetLatestVersion(v string) *ListEnvironmentFeaturesResponseBodyData {
	s.LatestVersion = &v
	return s
}

func (s *ListEnvironmentFeaturesResponseBodyData) SetManaged(v bool) *ListEnvironmentFeaturesResponseBodyData {
	s.Managed = &v
	return s
}

func (s *ListEnvironmentFeaturesResponseBodyData) SetName(v string) *ListEnvironmentFeaturesResponseBodyData {
	s.Name = &v
	return s
}

func (s *ListEnvironmentFeaturesResponseBodyData) SetStatus(v string) *ListEnvironmentFeaturesResponseBodyData {
	s.Status = &v
	return s
}

func (s *ListEnvironmentFeaturesResponseBodyData) SetVersion(v string) *ListEnvironmentFeaturesResponseBodyData {
	s.Version = &v
	return s
}

type ListEnvironmentFeaturesResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListEnvironmentFeaturesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListEnvironmentFeaturesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListEnvironmentFeaturesResponse) GoString() string {
	return s.String()
}

func (s *ListEnvironmentFeaturesResponse) SetHeaders(v map[string]*string) *ListEnvironmentFeaturesResponse {
	s.Headers = v
	return s
}

func (s *ListEnvironmentFeaturesResponse) SetStatusCode(v int32) *ListEnvironmentFeaturesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListEnvironmentFeaturesResponse) SetBody(v *ListEnvironmentFeaturesResponseBody) *ListEnvironmentFeaturesResponse {
	s.Body = v
	return s
}

type ListEnvironmentsRequest struct {
	// The add-on name. You must specify at least one of the AddonName and EnvironmentType parameters.
	//
	// example:
	//
	// trace-java
	AddonName *string `json:"AddonName,omitempty" xml:"AddonName,omitempty"`
	// The ID of the resource.
	//
	// example:
	//
	// cff30f0d67d7542dfb05bd114b4b1d7af
	BindResourceId *string `json:"BindResourceId,omitempty" xml:"BindResourceId,omitempty"`
	// The environment type. You must specify at least one of the AddonName and EnvironmentType parameters.
	//
	// Valid values:
	//
	// 	- CS
	//
	//     <!-- -->
	//
	//     :
	//
	//     <!-- -->
	//
	//     Container Service for Kubernetes (ACK)
	//
	//     <!-- -->
	//
	// 	- ECS
	//
	//     <!-- -->
	//
	//     :
	//
	//     <!-- -->
	//
	//     Elastic Compute Service (ECS)
	//
	//     <!-- -->
	//
	// 	- Cloud
	//
	//     <!-- -->
	//
	//     :
	//
	//     <!-- -->
	//
	//     cloud service
	//
	//     <!-- -->
	//
	// example:
	//
	// CS
	EnvironmentType *string `json:"EnvironmentType,omitempty" xml:"EnvironmentType,omitempty"`
	// The payable resource plan. Valid values:
	//
	// 	- If the EnvironmentType parameter is set to CS, set the value to CS_Basic or CS_Pro. Default value: CS_Basic.
	//
	// 	- Otherwise, leave the parameter empty.
	//
	// example:
	//
	// CS_Pro
	FeePackage *string `json:"FeePackage,omitempty" xml:"FeePackage,omitempty"`
	// The region ID.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the resource group.
	//
	// example:
	//
	// rg-aekzfurdatohtka
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	// The tags.
	Tag []*ListEnvironmentsRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s ListEnvironmentsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListEnvironmentsRequest) GoString() string {
	return s.String()
}

func (s *ListEnvironmentsRequest) SetAddonName(v string) *ListEnvironmentsRequest {
	s.AddonName = &v
	return s
}

func (s *ListEnvironmentsRequest) SetBindResourceId(v string) *ListEnvironmentsRequest {
	s.BindResourceId = &v
	return s
}

func (s *ListEnvironmentsRequest) SetEnvironmentType(v string) *ListEnvironmentsRequest {
	s.EnvironmentType = &v
	return s
}

func (s *ListEnvironmentsRequest) SetFeePackage(v string) *ListEnvironmentsRequest {
	s.FeePackage = &v
	return s
}

func (s *ListEnvironmentsRequest) SetRegionId(v string) *ListEnvironmentsRequest {
	s.RegionId = &v
	return s
}

func (s *ListEnvironmentsRequest) SetResourceGroupId(v string) *ListEnvironmentsRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *ListEnvironmentsRequest) SetTag(v []*ListEnvironmentsRequestTag) *ListEnvironmentsRequest {
	s.Tag = v
	return s
}

type ListEnvironmentsRequestTag struct {
	// The tag key.
	//
	// example:
	//
	// env
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The tag value.
	//
	// example:
	//
	// gfn_web_outbound_add
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s ListEnvironmentsRequestTag) String() string {
	return tea.Prettify(s)
}

func (s ListEnvironmentsRequestTag) GoString() string {
	return s.String()
}

func (s *ListEnvironmentsRequestTag) SetKey(v string) *ListEnvironmentsRequestTag {
	s.Key = &v
	return s
}

func (s *ListEnvironmentsRequestTag) SetValue(v string) *ListEnvironmentsRequestTag {
	s.Value = &v
	return s
}

type ListEnvironmentsShrinkRequest struct {
	// The add-on name. You must specify at least one of the AddonName and EnvironmentType parameters.
	//
	// example:
	//
	// trace-java
	AddonName *string `json:"AddonName,omitempty" xml:"AddonName,omitempty"`
	// The ID of the resource.
	//
	// example:
	//
	// cff30f0d67d7542dfb05bd114b4b1d7af
	BindResourceId *string `json:"BindResourceId,omitempty" xml:"BindResourceId,omitempty"`
	// The environment type. You must specify at least one of the AddonName and EnvironmentType parameters.
	//
	// Valid values:
	//
	// 	- CS
	//
	//     <!-- -->
	//
	//     :
	//
	//     <!-- -->
	//
	//     Container Service for Kubernetes (ACK)
	//
	//     <!-- -->
	//
	// 	- ECS
	//
	//     <!-- -->
	//
	//     :
	//
	//     <!-- -->
	//
	//     Elastic Compute Service (ECS)
	//
	//     <!-- -->
	//
	// 	- Cloud
	//
	//     <!-- -->
	//
	//     :
	//
	//     <!-- -->
	//
	//     cloud service
	//
	//     <!-- -->
	//
	// example:
	//
	// CS
	EnvironmentType *string `json:"EnvironmentType,omitempty" xml:"EnvironmentType,omitempty"`
	// The payable resource plan. Valid values:
	//
	// 	- If the EnvironmentType parameter is set to CS, set the value to CS_Basic or CS_Pro. Default value: CS_Basic.
	//
	// 	- Otherwise, leave the parameter empty.
	//
	// example:
	//
	// CS_Pro
	FeePackage *string `json:"FeePackage,omitempty" xml:"FeePackage,omitempty"`
	// The region ID.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the resource group.
	//
	// example:
	//
	// rg-aekzfurdatohtka
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	// The tags.
	TagShrink *string `json:"Tag,omitempty" xml:"Tag,omitempty"`
}

func (s ListEnvironmentsShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s ListEnvironmentsShrinkRequest) GoString() string {
	return s.String()
}

func (s *ListEnvironmentsShrinkRequest) SetAddonName(v string) *ListEnvironmentsShrinkRequest {
	s.AddonName = &v
	return s
}

func (s *ListEnvironmentsShrinkRequest) SetBindResourceId(v string) *ListEnvironmentsShrinkRequest {
	s.BindResourceId = &v
	return s
}

func (s *ListEnvironmentsShrinkRequest) SetEnvironmentType(v string) *ListEnvironmentsShrinkRequest {
	s.EnvironmentType = &v
	return s
}

func (s *ListEnvironmentsShrinkRequest) SetFeePackage(v string) *ListEnvironmentsShrinkRequest {
	s.FeePackage = &v
	return s
}

func (s *ListEnvironmentsShrinkRequest) SetRegionId(v string) *ListEnvironmentsShrinkRequest {
	s.RegionId = &v
	return s
}

func (s *ListEnvironmentsShrinkRequest) SetResourceGroupId(v string) *ListEnvironmentsShrinkRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *ListEnvironmentsShrinkRequest) SetTagShrink(v string) *ListEnvironmentsShrinkRequest {
	s.TagShrink = &v
	return s
}

type ListEnvironmentsResponseBody struct {
	// The HTTP status code. The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned struct.
	Data *ListEnvironmentsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 1A9C645C-C83F-4C9D-8CCB-29BEC9E1****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values: true and false.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListEnvironmentsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListEnvironmentsResponseBody) GoString() string {
	return s.String()
}

func (s *ListEnvironmentsResponseBody) SetCode(v int32) *ListEnvironmentsResponseBody {
	s.Code = &v
	return s
}

func (s *ListEnvironmentsResponseBody) SetData(v *ListEnvironmentsResponseBodyData) *ListEnvironmentsResponseBody {
	s.Data = v
	return s
}

func (s *ListEnvironmentsResponseBody) SetMessage(v string) *ListEnvironmentsResponseBody {
	s.Message = &v
	return s
}

func (s *ListEnvironmentsResponseBody) SetRequestId(v string) *ListEnvironmentsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListEnvironmentsResponseBody) SetSuccess(v bool) *ListEnvironmentsResponseBody {
	s.Success = &v
	return s
}

type ListEnvironmentsResponseBodyData struct {
	// The parameters of the environment instance.
	Environments []*ListEnvironmentsResponseBodyDataEnvironments `json:"Environments,omitempty" xml:"Environments,omitempty" type:"Repeated"`
	// The total number of returned entries.
	//
	// example:
	//
	// 12
	Total *int64 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s ListEnvironmentsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListEnvironmentsResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListEnvironmentsResponseBodyData) SetEnvironments(v []*ListEnvironmentsResponseBodyDataEnvironments) *ListEnvironmentsResponseBodyData {
	s.Environments = v
	return s
}

func (s *ListEnvironmentsResponseBodyData) SetTotal(v int64) *ListEnvironmentsResponseBodyData {
	s.Total = &v
	return s
}

type ListEnvironmentsResponseBodyDataEnvironments struct {
	// The add-ons.
	Addons []*ListEnvironmentsResponseBodyDataEnvironmentsAddons `json:"Addons,omitempty" xml:"Addons,omitempty" type:"Repeated"`
	// The ID of the resource bound to the environment instance. The resource can be a Kubernetes cluster or a VPC.
	//
	// example:
	//
	// vpc-bp1bgo8ronn
	BindResourceId *string `json:"BindResourceId,omitempty" xml:"BindResourceId,omitempty"`
	// The profile that is bound to the resource.
	//
	// example:
	//
	// xxx
	BindResourceProfile *string `json:"BindResourceProfile,omitempty" xml:"BindResourceProfile,omitempty"`
	// The resource type.
	//
	// example:
	//
	// VPC
	BindResourceType *string `json:"BindResourceType,omitempty" xml:"BindResourceType,omitempty"`
	// The CIDR block that is bound to the VPC.
	//
	// example:
	//
	// 172.16.0.0/12
	BindVpcCidr *string `json:"BindVpcCidr,omitempty" xml:"BindVpcCidr,omitempty"`
	// The time when the environment instance was created.
	//
	// example:
	//
	// 2023-03-24 11:58:35 +0800
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The user ID.
	//
	// example:
	//
	// 12378523784982
	CreatedUserId *string `json:"CreatedUserId,omitempty" xml:"CreatedUserId,omitempty"`
	// The ID of the environment instance.
	//
	// example:
	//
	// env-xxx
	EnvironmentId *string `json:"EnvironmentId,omitempty" xml:"EnvironmentId,omitempty"`
	// The name of the environment instance.
	//
	// example:
	//
	// feiliks-biz-prod-edas
	EnvironmentName *string `json:"EnvironmentName,omitempty" xml:"EnvironmentName,omitempty"`
	// The type of the environment instance. Valid values:
	//
	// 	- CS: Container Service
	//
	// 	- ECS: Elastic Compute Service (ECS)
	//
	// 	- Cloud: cloud service
	//
	// example:
	//
	// CS
	EnvironmentType *string `json:"EnvironmentType,omitempty" xml:"EnvironmentType,omitempty"`
	// The parameters of the feature.
	Features []*ListEnvironmentsResponseBodyDataEnvironmentsFeatures `json:"Features,omitempty" xml:"Features,omitempty" type:"Repeated"`
	// The payable resource plan. Valid values:
	//
	// 	- If the EnvironmentType parameter is set to CS, set the value to CS_Basic or CS_Pro. Default value: CS_Basic.
	//
	// 	- Otherwise, leave the parameter empty.
	//
	// example:
	//
	// CS_Pro
	FeePackage *string `json:"FeePackage,omitempty" xml:"FeePackage,omitempty"`
	// The unique ID of the Grafana data source.
	//
	// example:
	//
	// 12374890
	GrafanaDatasourceUid *string `json:"GrafanaDatasourceUid,omitempty" xml:"GrafanaDatasourceUid,omitempty"`
	// The name of the Grafana directory.
	//
	// example:
	//
	// filepath
	GrafanaFolderTitle *string `json:"GrafanaFolderTitle,omitempty" xml:"GrafanaFolderTitle,omitempty"`
	// The unique ID of the Grafana directory.
	//
	// example:
	//
	// 1798319482935
	GrafanaFolderUid *string `json:"GrafanaFolderUid,omitempty" xml:"GrafanaFolderUid,omitempty"`
	// The time when the last add-on was created.
	//
	// example:
	//
	// 2023-09-22T16:56:29+08:00
	LatestReleaseCreateTime *string `json:"LatestReleaseCreateTime,omitempty" xml:"LatestReleaseCreateTime,omitempty"`
	// Indicates whether agents or exporters are managed. Valid values:
	//
	// 	- none: No. By default, no managed agents or exporters are provided for ACK clusters.
	//
	// 	- agent: Agents are managed. By default, managed agents are provided for ASK clusters, ACS clusters, and ACK One clusters.
	//
	// 	- agent-exproter: Agents and exporters are managed. By default, managed agents and exporters are provided for cloud services.
	//
	// example:
	//
	// agent
	ManagedType *string `json:"ManagedType,omitempty" xml:"ManagedType,omitempty"`
	// The Prometheus ID.
	//
	// example:
	//
	// 124769812
	PrometheusId *int64 `json:"PrometheusId,omitempty" xml:"PrometheusId,omitempty"`
	// The ID of the Prometheus instance.
	//
	// example:
	//
	// vpc-m5e4alj2i24ndbn
	PrometheusInstanceId *string `json:"PrometheusInstanceId,omitempty" xml:"PrometheusInstanceId,omitempty"`
	// The ID of the region where the Message Queue for RabbitMQ instance resides.
	//
	// example:
	//
	// cn-zhangjiakou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The number of installed add-ons.
	//
	// example:
	//
	// 122
	ReleaseCount *int32 `json:"ReleaseCount,omitempty" xml:"ReleaseCount,omitempty"`
	// The resource group ID.
	//
	// example:
	//
	// rg-acfmvt3xpr5aema
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	// The tags of the environment resource.
	Tags []*ListEnvironmentsResponseBodyDataEnvironmentsTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
	// The ID of the user.
	//
	// example:
	//
	// 13990957477389
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s ListEnvironmentsResponseBodyDataEnvironments) String() string {
	return tea.Prettify(s)
}

func (s ListEnvironmentsResponseBodyDataEnvironments) GoString() string {
	return s.String()
}

func (s *ListEnvironmentsResponseBodyDataEnvironments) SetAddons(v []*ListEnvironmentsResponseBodyDataEnvironmentsAddons) *ListEnvironmentsResponseBodyDataEnvironments {
	s.Addons = v
	return s
}

func (s *ListEnvironmentsResponseBodyDataEnvironments) SetBindResourceId(v string) *ListEnvironmentsResponseBodyDataEnvironments {
	s.BindResourceId = &v
	return s
}

func (s *ListEnvironmentsResponseBodyDataEnvironments) SetBindResourceProfile(v string) *ListEnvironmentsResponseBodyDataEnvironments {
	s.BindResourceProfile = &v
	return s
}

func (s *ListEnvironmentsResponseBodyDataEnvironments) SetBindResourceType(v string) *ListEnvironmentsResponseBodyDataEnvironments {
	s.BindResourceType = &v
	return s
}

func (s *ListEnvironmentsResponseBodyDataEnvironments) SetBindVpcCidr(v string) *ListEnvironmentsResponseBodyDataEnvironments {
	s.BindVpcCidr = &v
	return s
}

func (s *ListEnvironmentsResponseBodyDataEnvironments) SetCreateTime(v string) *ListEnvironmentsResponseBodyDataEnvironments {
	s.CreateTime = &v
	return s
}

func (s *ListEnvironmentsResponseBodyDataEnvironments) SetCreatedUserId(v string) *ListEnvironmentsResponseBodyDataEnvironments {
	s.CreatedUserId = &v
	return s
}

func (s *ListEnvironmentsResponseBodyDataEnvironments) SetEnvironmentId(v string) *ListEnvironmentsResponseBodyDataEnvironments {
	s.EnvironmentId = &v
	return s
}

func (s *ListEnvironmentsResponseBodyDataEnvironments) SetEnvironmentName(v string) *ListEnvironmentsResponseBodyDataEnvironments {
	s.EnvironmentName = &v
	return s
}

func (s *ListEnvironmentsResponseBodyDataEnvironments) SetEnvironmentType(v string) *ListEnvironmentsResponseBodyDataEnvironments {
	s.EnvironmentType = &v
	return s
}

func (s *ListEnvironmentsResponseBodyDataEnvironments) SetFeatures(v []*ListEnvironmentsResponseBodyDataEnvironmentsFeatures) *ListEnvironmentsResponseBodyDataEnvironments {
	s.Features = v
	return s
}

func (s *ListEnvironmentsResponseBodyDataEnvironments) SetFeePackage(v string) *ListEnvironmentsResponseBodyDataEnvironments {
	s.FeePackage = &v
	return s
}

func (s *ListEnvironmentsResponseBodyDataEnvironments) SetGrafanaDatasourceUid(v string) *ListEnvironmentsResponseBodyDataEnvironments {
	s.GrafanaDatasourceUid = &v
	return s
}

func (s *ListEnvironmentsResponseBodyDataEnvironments) SetGrafanaFolderTitle(v string) *ListEnvironmentsResponseBodyDataEnvironments {
	s.GrafanaFolderTitle = &v
	return s
}

func (s *ListEnvironmentsResponseBodyDataEnvironments) SetGrafanaFolderUid(v string) *ListEnvironmentsResponseBodyDataEnvironments {
	s.GrafanaFolderUid = &v
	return s
}

func (s *ListEnvironmentsResponseBodyDataEnvironments) SetLatestReleaseCreateTime(v string) *ListEnvironmentsResponseBodyDataEnvironments {
	s.LatestReleaseCreateTime = &v
	return s
}

func (s *ListEnvironmentsResponseBodyDataEnvironments) SetManagedType(v string) *ListEnvironmentsResponseBodyDataEnvironments {
	s.ManagedType = &v
	return s
}

func (s *ListEnvironmentsResponseBodyDataEnvironments) SetPrometheusId(v int64) *ListEnvironmentsResponseBodyDataEnvironments {
	s.PrometheusId = &v
	return s
}

func (s *ListEnvironmentsResponseBodyDataEnvironments) SetPrometheusInstanceId(v string) *ListEnvironmentsResponseBodyDataEnvironments {
	s.PrometheusInstanceId = &v
	return s
}

func (s *ListEnvironmentsResponseBodyDataEnvironments) SetRegionId(v string) *ListEnvironmentsResponseBodyDataEnvironments {
	s.RegionId = &v
	return s
}

func (s *ListEnvironmentsResponseBodyDataEnvironments) SetReleaseCount(v int32) *ListEnvironmentsResponseBodyDataEnvironments {
	s.ReleaseCount = &v
	return s
}

func (s *ListEnvironmentsResponseBodyDataEnvironments) SetResourceGroupId(v string) *ListEnvironmentsResponseBodyDataEnvironments {
	s.ResourceGroupId = &v
	return s
}

func (s *ListEnvironmentsResponseBodyDataEnvironments) SetTags(v []*ListEnvironmentsResponseBodyDataEnvironmentsTags) *ListEnvironmentsResponseBodyDataEnvironments {
	s.Tags = v
	return s
}

func (s *ListEnvironmentsResponseBodyDataEnvironments) SetUserId(v string) *ListEnvironmentsResponseBodyDataEnvironments {
	s.UserId = &v
	return s
}

type ListEnvironmentsResponseBodyDataEnvironmentsAddons struct {
	// The alias of the add-on.
	//
	// example:
	//
	// MySQL Exporter
	Alias *string `json:"Alias,omitempty" xml:"Alias,omitempty"`
	// The description of the add-on.
	//
	// example:
	//
	// Collect mysql indicator information
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The URL of the icon.
	//
	// example:
	//
	// http://xxxx
	Icon *string `json:"Icon,omitempty" xml:"Icon,omitempty"`
	// The name of the add-on.
	//
	// example:
	//
	// metric-agent
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s ListEnvironmentsResponseBodyDataEnvironmentsAddons) String() string {
	return tea.Prettify(s)
}

func (s ListEnvironmentsResponseBodyDataEnvironmentsAddons) GoString() string {
	return s.String()
}

func (s *ListEnvironmentsResponseBodyDataEnvironmentsAddons) SetAlias(v string) *ListEnvironmentsResponseBodyDataEnvironmentsAddons {
	s.Alias = &v
	return s
}

func (s *ListEnvironmentsResponseBodyDataEnvironmentsAddons) SetDescription(v string) *ListEnvironmentsResponseBodyDataEnvironmentsAddons {
	s.Description = &v
	return s
}

func (s *ListEnvironmentsResponseBodyDataEnvironmentsAddons) SetIcon(v string) *ListEnvironmentsResponseBodyDataEnvironmentsAddons {
	s.Icon = &v
	return s
}

func (s *ListEnvironmentsResponseBodyDataEnvironmentsAddons) SetName(v string) *ListEnvironmentsResponseBodyDataEnvironmentsAddons {
	s.Name = &v
	return s
}

type ListEnvironmentsResponseBodyDataEnvironmentsFeatures struct {
	// The alias of the feature.
	//
	// example:
	//
	// Prometheus Agent
	Alias *string `json:"Alias,omitempty" xml:"Alias,omitempty"`
	// The description of the feature.
	//
	// example:
	//
	// Collect Metric data using the Prometheus collection specification
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The URL of the icon.
	//
	// example:
	//
	// http://xxx
	Icon *string `json:"Icon,omitempty" xml:"Icon,omitempty"`
	// The name of the feature.
	//
	// example:
	//
	// metirc-agent
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s ListEnvironmentsResponseBodyDataEnvironmentsFeatures) String() string {
	return tea.Prettify(s)
}

func (s ListEnvironmentsResponseBodyDataEnvironmentsFeatures) GoString() string {
	return s.String()
}

func (s *ListEnvironmentsResponseBodyDataEnvironmentsFeatures) SetAlias(v string) *ListEnvironmentsResponseBodyDataEnvironmentsFeatures {
	s.Alias = &v
	return s
}

func (s *ListEnvironmentsResponseBodyDataEnvironmentsFeatures) SetDescription(v string) *ListEnvironmentsResponseBodyDataEnvironmentsFeatures {
	s.Description = &v
	return s
}

func (s *ListEnvironmentsResponseBodyDataEnvironmentsFeatures) SetIcon(v string) *ListEnvironmentsResponseBodyDataEnvironmentsFeatures {
	s.Icon = &v
	return s
}

func (s *ListEnvironmentsResponseBodyDataEnvironmentsFeatures) SetName(v string) *ListEnvironmentsResponseBodyDataEnvironmentsFeatures {
	s.Name = &v
	return s
}

type ListEnvironmentsResponseBodyDataEnvironmentsTags struct {
	// The tag key.
	//
	// example:
	//
	// fpx-tag
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The tag value.
	//
	// example:
	//
	// cn-beijing
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s ListEnvironmentsResponseBodyDataEnvironmentsTags) String() string {
	return tea.Prettify(s)
}

func (s ListEnvironmentsResponseBodyDataEnvironmentsTags) GoString() string {
	return s.String()
}

func (s *ListEnvironmentsResponseBodyDataEnvironmentsTags) SetKey(v string) *ListEnvironmentsResponseBodyDataEnvironmentsTags {
	s.Key = &v
	return s
}

func (s *ListEnvironmentsResponseBodyDataEnvironmentsTags) SetValue(v string) *ListEnvironmentsResponseBodyDataEnvironmentsTags {
	s.Value = &v
	return s
}

type ListEnvironmentsResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListEnvironmentsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListEnvironmentsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListEnvironmentsResponse) GoString() string {
	return s.String()
}

func (s *ListEnvironmentsResponse) SetHeaders(v map[string]*string) *ListEnvironmentsResponse {
	s.Headers = v
	return s
}

func (s *ListEnvironmentsResponse) SetStatusCode(v int32) *ListEnvironmentsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListEnvironmentsResponse) SetBody(v *ListEnvironmentsResponseBody) *ListEnvironmentsResponse {
	s.Body = v
	return s
}

type ListEscalationPoliciesRequest struct {
	// The name of the escalation policy.
	//
	// example:
	//
	// prod escalation policy
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The number of the page to return.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	Page *int64 `json:"Page,omitempty" xml:"Page,omitempty"`
	// The number of entries to return on each page.
	//
	// This parameter is required.
	//
	// example:
	//
	// 20
	Size *int64 `json:"Size,omitempty" xml:"Size,omitempty"`
}

func (s ListEscalationPoliciesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListEscalationPoliciesRequest) GoString() string {
	return s.String()
}

func (s *ListEscalationPoliciesRequest) SetName(v string) *ListEscalationPoliciesRequest {
	s.Name = &v
	return s
}

func (s *ListEscalationPoliciesRequest) SetPage(v int64) *ListEscalationPoliciesRequest {
	s.Page = &v
	return s
}

func (s *ListEscalationPoliciesRequest) SetSize(v int64) *ListEscalationPoliciesRequest {
	s.Size = &v
	return s
}

type ListEscalationPoliciesResponseBody struct {
	// The returned objects.
	PageBean *ListEscalationPoliciesResponseBodyPageBean `json:"PageBean,omitempty" xml:"PageBean,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// 78901766-3806-4E96-8E47-CFEF59E4****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListEscalationPoliciesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListEscalationPoliciesResponseBody) GoString() string {
	return s.String()
}

func (s *ListEscalationPoliciesResponseBody) SetPageBean(v *ListEscalationPoliciesResponseBodyPageBean) *ListEscalationPoliciesResponseBody {
	s.PageBean = v
	return s
}

func (s *ListEscalationPoliciesResponseBody) SetRequestId(v string) *ListEscalationPoliciesResponseBody {
	s.RequestId = &v
	return s
}

type ListEscalationPoliciesResponseBodyPageBean struct {
	// The list of escalation policies.
	EscalationPolicies []*ListEscalationPoliciesResponseBodyPageBeanEscalationPolicies `json:"EscalationPolicies,omitempty" xml:"EscalationPolicies,omitempty" type:"Repeated"`
	// The page number of the returned page.
	//
	// example:
	//
	// 1
	Page *int64 `json:"Page,omitempty" xml:"Page,omitempty"`
	// The number of entries returned per page.
	//
	// example:
	//
	// 20
	Size *int64 `json:"Size,omitempty" xml:"Size,omitempty"`
	// The total number of returned entries.
	//
	// example:
	//
	// 1
	Total *int64 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s ListEscalationPoliciesResponseBodyPageBean) String() string {
	return tea.Prettify(s)
}

func (s ListEscalationPoliciesResponseBodyPageBean) GoString() string {
	return s.String()
}

func (s *ListEscalationPoliciesResponseBodyPageBean) SetEscalationPolicies(v []*ListEscalationPoliciesResponseBodyPageBeanEscalationPolicies) *ListEscalationPoliciesResponseBodyPageBean {
	s.EscalationPolicies = v
	return s
}

func (s *ListEscalationPoliciesResponseBodyPageBean) SetPage(v int64) *ListEscalationPoliciesResponseBodyPageBean {
	s.Page = &v
	return s
}

func (s *ListEscalationPoliciesResponseBodyPageBean) SetSize(v int64) *ListEscalationPoliciesResponseBodyPageBean {
	s.Size = &v
	return s
}

func (s *ListEscalationPoliciesResponseBodyPageBean) SetTotal(v int64) *ListEscalationPoliciesResponseBodyPageBean {
	s.Total = &v
	return s
}

type ListEscalationPoliciesResponseBodyPageBeanEscalationPolicies struct {
	// The ID of the escalation policy.
	//
	// example:
	//
	// 1234
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The name of the escalation policy.
	//
	// example:
	//
	// prod escalation policy
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s ListEscalationPoliciesResponseBodyPageBeanEscalationPolicies) String() string {
	return tea.Prettify(s)
}

func (s ListEscalationPoliciesResponseBodyPageBeanEscalationPolicies) GoString() string {
	return s.String()
}

func (s *ListEscalationPoliciesResponseBodyPageBeanEscalationPolicies) SetId(v int64) *ListEscalationPoliciesResponseBodyPageBeanEscalationPolicies {
	s.Id = &v
	return s
}

func (s *ListEscalationPoliciesResponseBodyPageBeanEscalationPolicies) SetName(v string) *ListEscalationPoliciesResponseBodyPageBeanEscalationPolicies {
	s.Name = &v
	return s
}

type ListEscalationPoliciesResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListEscalationPoliciesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListEscalationPoliciesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListEscalationPoliciesResponse) GoString() string {
	return s.String()
}

func (s *ListEscalationPoliciesResponse) SetHeaders(v map[string]*string) *ListEscalationPoliciesResponse {
	s.Headers = v
	return s
}

func (s *ListEscalationPoliciesResponse) SetStatusCode(v int32) *ListEscalationPoliciesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListEscalationPoliciesResponse) SetBody(v *ListEscalationPoliciesResponseBody) *ListEscalationPoliciesResponse {
	s.Body = v
	return s
}

type ListEventBridgeIntegrationsRequest struct {
	// The name of the EventBridge integration.
	//
	// example:
	//
	// EventBridge_Test
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The number of the page to return.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	Page *int64 `json:"Page,omitempty" xml:"Page,omitempty"`
	// The number of entries to return on each page.
	//
	// This parameter is required.
	//
	// example:
	//
	// 15
	Size *int64 `json:"Size,omitempty" xml:"Size,omitempty"`
}

func (s ListEventBridgeIntegrationsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListEventBridgeIntegrationsRequest) GoString() string {
	return s.String()
}

func (s *ListEventBridgeIntegrationsRequest) SetName(v string) *ListEventBridgeIntegrationsRequest {
	s.Name = &v
	return s
}

func (s *ListEventBridgeIntegrationsRequest) SetPage(v int64) *ListEventBridgeIntegrationsRequest {
	s.Page = &v
	return s
}

func (s *ListEventBridgeIntegrationsRequest) SetSize(v int64) *ListEventBridgeIntegrationsRequest {
	s.Size = &v
	return s
}

type ListEventBridgeIntegrationsResponseBody struct {
	// The information about EventBridge integrations that is returned on each page.
	PageBean *ListEventBridgeIntegrationsResponseBodyPageBean `json:"PageBean,omitempty" xml:"PageBean,omitempty" type:"Struct"`
	// The ID of the request.
	//
	// example:
	//
	// 2B289756-E791-5842-BCBD-AD414C******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListEventBridgeIntegrationsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListEventBridgeIntegrationsResponseBody) GoString() string {
	return s.String()
}

func (s *ListEventBridgeIntegrationsResponseBody) SetPageBean(v *ListEventBridgeIntegrationsResponseBodyPageBean) *ListEventBridgeIntegrationsResponseBody {
	s.PageBean = v
	return s
}

func (s *ListEventBridgeIntegrationsResponseBody) SetRequestId(v string) *ListEventBridgeIntegrationsResponseBody {
	s.RequestId = &v
	return s
}

type ListEventBridgeIntegrationsResponseBodyPageBean struct {
	// The EventBridge integrations.
	EventBridgeIntegrations []*ListEventBridgeIntegrationsResponseBodyPageBeanEventBridgeIntegrations `json:"EventBridgeIntegrations,omitempty" xml:"EventBridgeIntegrations,omitempty" type:"Repeated"`
	// The number of the returned page.
	//
	// example:
	//
	// 1
	Page *int64 `json:"Page,omitempty" xml:"Page,omitempty"`
	// The number of entries returned per page.
	//
	// example:
	//
	// 15
	Size *int64 `json:"Size,omitempty" xml:"Size,omitempty"`
	// The total number of EventBridge integrations that are returned.
	//
	// example:
	//
	// 1
	Total *int64 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s ListEventBridgeIntegrationsResponseBodyPageBean) String() string {
	return tea.Prettify(s)
}

func (s ListEventBridgeIntegrationsResponseBodyPageBean) GoString() string {
	return s.String()
}

func (s *ListEventBridgeIntegrationsResponseBodyPageBean) SetEventBridgeIntegrations(v []*ListEventBridgeIntegrationsResponseBodyPageBeanEventBridgeIntegrations) *ListEventBridgeIntegrationsResponseBodyPageBean {
	s.EventBridgeIntegrations = v
	return s
}

func (s *ListEventBridgeIntegrationsResponseBodyPageBean) SetPage(v int64) *ListEventBridgeIntegrationsResponseBodyPageBean {
	s.Page = &v
	return s
}

func (s *ListEventBridgeIntegrationsResponseBodyPageBean) SetSize(v int64) *ListEventBridgeIntegrationsResponseBodyPageBean {
	s.Size = &v
	return s
}

func (s *ListEventBridgeIntegrationsResponseBodyPageBean) SetTotal(v int64) *ListEventBridgeIntegrationsResponseBodyPageBean {
	s.Total = &v
	return s
}

type ListEventBridgeIntegrationsResponseBodyPageBeanEventBridgeIntegrations struct {
	// The description of the EventBridge integration.
	//
	// example:
	//
	// test
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The ID of the EventBridge integration.
	//
	// example:
	//
	// 123
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The name of the EventBridge integration.
	//
	// example:
	//
	// EventBridge_Test
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s ListEventBridgeIntegrationsResponseBodyPageBeanEventBridgeIntegrations) String() string {
	return tea.Prettify(s)
}

func (s ListEventBridgeIntegrationsResponseBodyPageBeanEventBridgeIntegrations) GoString() string {
	return s.String()
}

func (s *ListEventBridgeIntegrationsResponseBodyPageBeanEventBridgeIntegrations) SetDescription(v string) *ListEventBridgeIntegrationsResponseBodyPageBeanEventBridgeIntegrations {
	s.Description = &v
	return s
}

func (s *ListEventBridgeIntegrationsResponseBodyPageBeanEventBridgeIntegrations) SetId(v int64) *ListEventBridgeIntegrationsResponseBodyPageBeanEventBridgeIntegrations {
	s.Id = &v
	return s
}

func (s *ListEventBridgeIntegrationsResponseBodyPageBeanEventBridgeIntegrations) SetName(v string) *ListEventBridgeIntegrationsResponseBodyPageBeanEventBridgeIntegrations {
	s.Name = &v
	return s
}

type ListEventBridgeIntegrationsResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListEventBridgeIntegrationsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListEventBridgeIntegrationsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListEventBridgeIntegrationsResponse) GoString() string {
	return s.String()
}

func (s *ListEventBridgeIntegrationsResponse) SetHeaders(v map[string]*string) *ListEventBridgeIntegrationsResponse {
	s.Headers = v
	return s
}

func (s *ListEventBridgeIntegrationsResponse) SetStatusCode(v int32) *ListEventBridgeIntegrationsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListEventBridgeIntegrationsResponse) SetBody(v *ListEventBridgeIntegrationsResponseBody) *ListEventBridgeIntegrationsResponse {
	s.Body = v
	return s
}

type ListGrafanaWorkspaceRequest struct {
	// example:
	//
	// zh
	AliyunLang *string `json:"AliyunLang,omitempty" xml:"AliyunLang,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// example:
	//
	// rg-acfmxyexli2****
	ResourceGroupId *string                            `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	Tags            []*ListGrafanaWorkspaceRequestTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
}

func (s ListGrafanaWorkspaceRequest) String() string {
	return tea.Prettify(s)
}

func (s ListGrafanaWorkspaceRequest) GoString() string {
	return s.String()
}

func (s *ListGrafanaWorkspaceRequest) SetAliyunLang(v string) *ListGrafanaWorkspaceRequest {
	s.AliyunLang = &v
	return s
}

func (s *ListGrafanaWorkspaceRequest) SetRegionId(v string) *ListGrafanaWorkspaceRequest {
	s.RegionId = &v
	return s
}

func (s *ListGrafanaWorkspaceRequest) SetResourceGroupId(v string) *ListGrafanaWorkspaceRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *ListGrafanaWorkspaceRequest) SetTags(v []*ListGrafanaWorkspaceRequestTags) *ListGrafanaWorkspaceRequest {
	s.Tags = v
	return s
}

type ListGrafanaWorkspaceRequestTags struct {
	// example:
	//
	// TestKey
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// example:
	//
	// TestValue
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s ListGrafanaWorkspaceRequestTags) String() string {
	return tea.Prettify(s)
}

func (s ListGrafanaWorkspaceRequestTags) GoString() string {
	return s.String()
}

func (s *ListGrafanaWorkspaceRequestTags) SetKey(v string) *ListGrafanaWorkspaceRequestTags {
	s.Key = &v
	return s
}

func (s *ListGrafanaWorkspaceRequestTags) SetValue(v string) *ListGrafanaWorkspaceRequestTags {
	s.Value = &v
	return s
}

type ListGrafanaWorkspaceShrinkRequest struct {
	// example:
	//
	// zh
	AliyunLang *string `json:"AliyunLang,omitempty" xml:"AliyunLang,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// example:
	//
	// rg-acfmxyexli2****
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	TagsShrink      *string `json:"Tags,omitempty" xml:"Tags,omitempty"`
}

func (s ListGrafanaWorkspaceShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s ListGrafanaWorkspaceShrinkRequest) GoString() string {
	return s.String()
}

func (s *ListGrafanaWorkspaceShrinkRequest) SetAliyunLang(v string) *ListGrafanaWorkspaceShrinkRequest {
	s.AliyunLang = &v
	return s
}

func (s *ListGrafanaWorkspaceShrinkRequest) SetRegionId(v string) *ListGrafanaWorkspaceShrinkRequest {
	s.RegionId = &v
	return s
}

func (s *ListGrafanaWorkspaceShrinkRequest) SetResourceGroupId(v string) *ListGrafanaWorkspaceShrinkRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *ListGrafanaWorkspaceShrinkRequest) SetTagsShrink(v string) *ListGrafanaWorkspaceShrinkRequest {
	s.TagsShrink = &v
	return s
}

type ListGrafanaWorkspaceResponseBody struct {
	// example:
	//
	// 200
	Code *int32              `json:"Code,omitempty" xml:"Code,omitempty"`
	Data []*GrafanaWorkspace `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 0080BE65-167F-5CB6-A691-14E2EFD474BC
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// True
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// example:
	//
	// eac0a8048716731735000007137d000b
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s ListGrafanaWorkspaceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListGrafanaWorkspaceResponseBody) GoString() string {
	return s.String()
}

func (s *ListGrafanaWorkspaceResponseBody) SetCode(v int32) *ListGrafanaWorkspaceResponseBody {
	s.Code = &v
	return s
}

func (s *ListGrafanaWorkspaceResponseBody) SetData(v []*GrafanaWorkspace) *ListGrafanaWorkspaceResponseBody {
	s.Data = v
	return s
}

func (s *ListGrafanaWorkspaceResponseBody) SetMessage(v string) *ListGrafanaWorkspaceResponseBody {
	s.Message = &v
	return s
}

func (s *ListGrafanaWorkspaceResponseBody) SetRequestId(v string) *ListGrafanaWorkspaceResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListGrafanaWorkspaceResponseBody) SetSuccess(v bool) *ListGrafanaWorkspaceResponseBody {
	s.Success = &v
	return s
}

func (s *ListGrafanaWorkspaceResponseBody) SetTraceId(v string) *ListGrafanaWorkspaceResponseBody {
	s.TraceId = &v
	return s
}

type ListGrafanaWorkspaceResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListGrafanaWorkspaceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListGrafanaWorkspaceResponse) String() string {
	return tea.Prettify(s)
}

func (s ListGrafanaWorkspaceResponse) GoString() string {
	return s.String()
}

func (s *ListGrafanaWorkspaceResponse) SetHeaders(v map[string]*string) *ListGrafanaWorkspaceResponse {
	s.Headers = v
	return s
}

func (s *ListGrafanaWorkspaceResponse) SetStatusCode(v int32) *ListGrafanaWorkspaceResponse {
	s.StatusCode = &v
	return s
}

func (s *ListGrafanaWorkspaceResponse) SetBody(v *ListGrafanaWorkspaceResponseBody) *ListGrafanaWorkspaceResponse {
	s.Body = v
	return s
}

type ListInsightsEventsRequest struct {
	// The end of the time range to query. The value is a timestamp.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1480607940000
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The types of the events that you want to query. Separate multiple event types with commas (,). If you do not specify this parameter, all events are queried.
	//
	// 	- errorIncrease: API error-rate spike events. Examples: HTTP API error-rate spike events and Dubbo API error-rate spike events.
	//
	// 	- topErrorIncrease: the top five API error-rate spike events with the highest traffic.
	//
	// 	- topRtIncrease: API response-time spike events. Examples: HTTP API response-time spike events and Dubbo API response-time spike events.
	//
	// 	- rtIncrease: the top five API response-time spike events with the highest traffic.
	//
	// example:
	//
	// errorIncrease,topErrorIncrease,topExceptionIncrease,topRtIncrease,rtIncrease
	InsightsTypes *string `json:"InsightsTypes,omitempty" xml:"InsightsTypes,omitempty"`
	// The ID of the application.
	//
	// example:
	//
	// aokcdqn3ly@a195c6d6421****
	Pid *string `json:"Pid,omitempty" xml:"Pid,omitempty"`
	// The region ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The start of the time range to query. The value is a timestamp.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1595174400000
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s ListInsightsEventsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListInsightsEventsRequest) GoString() string {
	return s.String()
}

func (s *ListInsightsEventsRequest) SetEndTime(v string) *ListInsightsEventsRequest {
	s.EndTime = &v
	return s
}

func (s *ListInsightsEventsRequest) SetInsightsTypes(v string) *ListInsightsEventsRequest {
	s.InsightsTypes = &v
	return s
}

func (s *ListInsightsEventsRequest) SetPid(v string) *ListInsightsEventsRequest {
	s.Pid = &v
	return s
}

func (s *ListInsightsEventsRequest) SetRegionId(v string) *ListInsightsEventsRequest {
	s.RegionId = &v
	return s
}

func (s *ListInsightsEventsRequest) SetStartTime(v string) *ListInsightsEventsRequest {
	s.StartTime = &v
	return s
}

type ListInsightsEventsResponseBody struct {
	// The details of the event.
	InsightsEvents []*ListInsightsEventsResponseBodyInsightsEvents `json:"InsightsEvents,omitempty" xml:"InsightsEvents,omitempty" type:"Repeated"`
	// The request ID.
	//
	// example:
	//
	// 6F1174DC-6085-5353-AAE7-D4ADCD******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListInsightsEventsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListInsightsEventsResponseBody) GoString() string {
	return s.String()
}

func (s *ListInsightsEventsResponseBody) SetInsightsEvents(v []*ListInsightsEventsResponseBodyInsightsEvents) *ListInsightsEventsResponseBody {
	s.InsightsEvents = v
	return s
}

func (s *ListInsightsEventsResponseBody) SetRequestId(v string) *ListInsightsEventsResponseBody {
	s.RequestId = &v
	return s
}

type ListInsightsEventsResponseBodyInsightsEvents struct {
	// The time at which the event occurred. The value is a timestamp.
	//
	// example:
	//
	// 1658890560
	Date *int64 `json:"Date,omitempty" xml:"Date,omitempty"`
	// The description of the alert event.
	//
	// example:
	//
	// The overall response time of the [HTTP] service of the application [sd] spikes at [2022-07-27 10:57:00]
	Desc *string `json:"Desc,omitempty" xml:"Desc,omitempty"`
	// The severity of the event.
	//
	// example:
	//
	// P3
	Level *string `json:"Level,omitempty" xml:"Level,omitempty"`
	// The ID of the application associated with the event.
	//
	// example:
	//
	// dsv9zcel92@7da413b******
	Pid *string `json:"Pid,omitempty" xml:"Pid,omitempty"`
	// 问题标识。
	//
	// example:
	//
	// erep3o9zue@01ebe697ab70566|@1499161100890550|@cn-hangzhou|@1701841800000|@1701842040000|@daa6c51a-3c44-4d57-9548-4e212c******
	ProblemId *string `json:"ProblemId,omitempty" xml:"ProblemId,omitempty"`
	// The title of the event.
	//
	// example:
	//
	// Average response-time spikes of application services
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// The type of the event.
	//
	// example:
	//
	// rtIncrease
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListInsightsEventsResponseBodyInsightsEvents) String() string {
	return tea.Prettify(s)
}

func (s ListInsightsEventsResponseBodyInsightsEvents) GoString() string {
	return s.String()
}

func (s *ListInsightsEventsResponseBodyInsightsEvents) SetDate(v int64) *ListInsightsEventsResponseBodyInsightsEvents {
	s.Date = &v
	return s
}

func (s *ListInsightsEventsResponseBodyInsightsEvents) SetDesc(v string) *ListInsightsEventsResponseBodyInsightsEvents {
	s.Desc = &v
	return s
}

func (s *ListInsightsEventsResponseBodyInsightsEvents) SetLevel(v string) *ListInsightsEventsResponseBodyInsightsEvents {
	s.Level = &v
	return s
}

func (s *ListInsightsEventsResponseBodyInsightsEvents) SetPid(v string) *ListInsightsEventsResponseBodyInsightsEvents {
	s.Pid = &v
	return s
}

func (s *ListInsightsEventsResponseBodyInsightsEvents) SetProblemId(v string) *ListInsightsEventsResponseBodyInsightsEvents {
	s.ProblemId = &v
	return s
}

func (s *ListInsightsEventsResponseBodyInsightsEvents) SetTitle(v string) *ListInsightsEventsResponseBodyInsightsEvents {
	s.Title = &v
	return s
}

func (s *ListInsightsEventsResponseBodyInsightsEvents) SetType(v string) *ListInsightsEventsResponseBodyInsightsEvents {
	s.Type = &v
	return s
}

type ListInsightsEventsResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListInsightsEventsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListInsightsEventsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListInsightsEventsResponse) GoString() string {
	return s.String()
}

func (s *ListInsightsEventsResponse) SetHeaders(v map[string]*string) *ListInsightsEventsResponse {
	s.Headers = v
	return s
}

func (s *ListInsightsEventsResponse) SetStatusCode(v int32) *ListInsightsEventsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListInsightsEventsResponse) SetBody(v *ListInsightsEventsResponseBody) *ListInsightsEventsResponse {
	s.Body = v
	return s
}

type ListIntegrationRequest struct {
	// example:
	//
	// 云监控集成
	IntegrationName *string `json:"IntegrationName,omitempty" xml:"IntegrationName,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// CLOUD_MONITOR
	IntegrationProductType *string `json:"IntegrationProductType,omitempty" xml:"IntegrationProductType,omitempty"`
	// example:
	//
	// true
	IsDetail *bool `json:"IsDetail,omitempty" xml:"IsDetail,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1
	Page *int64 `json:"Page,omitempty" xml:"Page,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 10
	Size *int64 `json:"Size,omitempty" xml:"Size,omitempty"`
}

func (s ListIntegrationRequest) String() string {
	return tea.Prettify(s)
}

func (s ListIntegrationRequest) GoString() string {
	return s.String()
}

func (s *ListIntegrationRequest) SetIntegrationName(v string) *ListIntegrationRequest {
	s.IntegrationName = &v
	return s
}

func (s *ListIntegrationRequest) SetIntegrationProductType(v string) *ListIntegrationRequest {
	s.IntegrationProductType = &v
	return s
}

func (s *ListIntegrationRequest) SetIsDetail(v bool) *ListIntegrationRequest {
	s.IsDetail = &v
	return s
}

func (s *ListIntegrationRequest) SetPage(v int64) *ListIntegrationRequest {
	s.Page = &v
	return s
}

func (s *ListIntegrationRequest) SetSize(v int64) *ListIntegrationRequest {
	s.Size = &v
	return s
}

type ListIntegrationResponseBody struct {
	PageInfo *ListIntegrationResponseBodyPageInfo `json:"PageInfo,omitempty" xml:"PageInfo,omitempty" type:"Struct"`
	// example:
	//
	// 34ED024E-9E31-434A-9E4E-D9D15C3****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListIntegrationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListIntegrationResponseBody) GoString() string {
	return s.String()
}

func (s *ListIntegrationResponseBody) SetPageInfo(v *ListIntegrationResponseBodyPageInfo) *ListIntegrationResponseBody {
	s.PageInfo = v
	return s
}

func (s *ListIntegrationResponseBody) SetRequestId(v string) *ListIntegrationResponseBody {
	s.RequestId = &v
	return s
}

type ListIntegrationResponseBodyPageInfo struct {
	Integrations []*ListIntegrationResponseBodyPageInfoIntegrations `json:"Integrations,omitempty" xml:"Integrations,omitempty" type:"Repeated"`
	// example:
	//
	// 1
	Page *int64 `json:"Page,omitempty" xml:"Page,omitempty"`
	// example:
	//
	// 10
	Size *int64 `json:"Size,omitempty" xml:"Size,omitempty"`
	// example:
	//
	// 1
	Total *int64 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s ListIntegrationResponseBodyPageInfo) String() string {
	return tea.Prettify(s)
}

func (s ListIntegrationResponseBodyPageInfo) GoString() string {
	return s.String()
}

func (s *ListIntegrationResponseBodyPageInfo) SetIntegrations(v []*ListIntegrationResponseBodyPageInfoIntegrations) *ListIntegrationResponseBodyPageInfo {
	s.Integrations = v
	return s
}

func (s *ListIntegrationResponseBodyPageInfo) SetPage(v int64) *ListIntegrationResponseBodyPageInfo {
	s.Page = &v
	return s
}

func (s *ListIntegrationResponseBodyPageInfo) SetSize(v int64) *ListIntegrationResponseBodyPageInfo {
	s.Size = &v
	return s
}

func (s *ListIntegrationResponseBodyPageInfo) SetTotal(v int64) *ListIntegrationResponseBodyPageInfo {
	s.Total = &v
	return s
}

type ListIntegrationResponseBodyPageInfoIntegrations struct {
	// example:
	//
	// https://alerts.aliyuncs.com/api/v1/integrations/custom/ymQBN******
	ApiEndpoint *string `json:"ApiEndpoint,omitempty" xml:"ApiEndpoint,omitempty"`
	// example:
	//
	// 2022-06-18
	CreateTime        *string                                                           `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	IntegrationDetail *ListIntegrationResponseBodyPageInfoIntegrationsIntegrationDetail `json:"IntegrationDetail,omitempty" xml:"IntegrationDetail,omitempty" type:"Struct"`
	// example:
	//
	// 1234
	IntegrationId *int64 `json:"IntegrationId,omitempty" xml:"IntegrationId,omitempty"`
	// example:
	//
	// 云监控集成
	IntegrationName *string `json:"IntegrationName,omitempty" xml:"IntegrationName,omitempty"`
	// example:
	//
	// CLOUD_MONITOR
	IntegrationProductType *string `json:"IntegrationProductType,omitempty" xml:"IntegrationProductType,omitempty"`
	// example:
	//
	// ready
	Liveness *string `json:"Liveness,omitempty" xml:"Liveness,omitempty"`
	// example:
	//
	// ymQBN******
	ShortToken *string `json:"ShortToken,omitempty" xml:"ShortToken,omitempty"`
	// example:
	//
	// true
	State *bool `json:"State,omitempty" xml:"State,omitempty"`
}

func (s ListIntegrationResponseBodyPageInfoIntegrations) String() string {
	return tea.Prettify(s)
}

func (s ListIntegrationResponseBodyPageInfoIntegrations) GoString() string {
	return s.String()
}

func (s *ListIntegrationResponseBodyPageInfoIntegrations) SetApiEndpoint(v string) *ListIntegrationResponseBodyPageInfoIntegrations {
	s.ApiEndpoint = &v
	return s
}

func (s *ListIntegrationResponseBodyPageInfoIntegrations) SetCreateTime(v string) *ListIntegrationResponseBodyPageInfoIntegrations {
	s.CreateTime = &v
	return s
}

func (s *ListIntegrationResponseBodyPageInfoIntegrations) SetIntegrationDetail(v *ListIntegrationResponseBodyPageInfoIntegrationsIntegrationDetail) *ListIntegrationResponseBodyPageInfoIntegrations {
	s.IntegrationDetail = v
	return s
}

func (s *ListIntegrationResponseBodyPageInfoIntegrations) SetIntegrationId(v int64) *ListIntegrationResponseBodyPageInfoIntegrations {
	s.IntegrationId = &v
	return s
}

func (s *ListIntegrationResponseBodyPageInfoIntegrations) SetIntegrationName(v string) *ListIntegrationResponseBodyPageInfoIntegrations {
	s.IntegrationName = &v
	return s
}

func (s *ListIntegrationResponseBodyPageInfoIntegrations) SetIntegrationProductType(v string) *ListIntegrationResponseBodyPageInfoIntegrations {
	s.IntegrationProductType = &v
	return s
}

func (s *ListIntegrationResponseBodyPageInfoIntegrations) SetLiveness(v string) *ListIntegrationResponseBodyPageInfoIntegrations {
	s.Liveness = &v
	return s
}

func (s *ListIntegrationResponseBodyPageInfoIntegrations) SetShortToken(v string) *ListIntegrationResponseBodyPageInfoIntegrations {
	s.ShortToken = &v
	return s
}

func (s *ListIntegrationResponseBodyPageInfoIntegrations) SetState(v bool) *ListIntegrationResponseBodyPageInfoIntegrations {
	s.State = &v
	return s
}

type ListIntegrationResponseBodyPageInfoIntegrationsIntegrationDetail struct {
	// example:
	//
	// true
	AutoRecover *bool `json:"AutoRecover,omitempty" xml:"AutoRecover,omitempty"`
	// example:
	//
	// 测试
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// example:
	//
	// LABEL.alertname::LABEL.severity
	DuplicateKey               *string                  `json:"DuplicateKey,omitempty" xml:"DuplicateKey,omitempty"`
	ExtendedFieldRedefineRules []map[string]interface{} `json:"ExtendedFieldRedefineRules,omitempty" xml:"ExtendedFieldRedefineRules,omitempty" type:"Repeated"`
	FieldRedefineRules         []map[string]interface{} `json:"FieldRedefineRules,omitempty" xml:"FieldRedefineRules,omitempty" type:"Repeated"`
	// example:
	//
	// $.status
	InitiativeRecoverField *string `json:"InitiativeRecoverField,omitempty" xml:"InitiativeRecoverField,omitempty"`
	// example:
	//
	// ok
	InitiativeRecoverValue *string `json:"InitiativeRecoverValue,omitempty" xml:"InitiativeRecoverValue,omitempty"`
	// example:
	//
	// 300
	RecoverTime *int64   `json:"RecoverTime,omitempty" xml:"RecoverTime,omitempty"`
	Stat        []*int64 `json:"Stat,omitempty" xml:"Stat,omitempty" type:"Repeated"`
}

func (s ListIntegrationResponseBodyPageInfoIntegrationsIntegrationDetail) String() string {
	return tea.Prettify(s)
}

func (s ListIntegrationResponseBodyPageInfoIntegrationsIntegrationDetail) GoString() string {
	return s.String()
}

func (s *ListIntegrationResponseBodyPageInfoIntegrationsIntegrationDetail) SetAutoRecover(v bool) *ListIntegrationResponseBodyPageInfoIntegrationsIntegrationDetail {
	s.AutoRecover = &v
	return s
}

func (s *ListIntegrationResponseBodyPageInfoIntegrationsIntegrationDetail) SetDescription(v string) *ListIntegrationResponseBodyPageInfoIntegrationsIntegrationDetail {
	s.Description = &v
	return s
}

func (s *ListIntegrationResponseBodyPageInfoIntegrationsIntegrationDetail) SetDuplicateKey(v string) *ListIntegrationResponseBodyPageInfoIntegrationsIntegrationDetail {
	s.DuplicateKey = &v
	return s
}

func (s *ListIntegrationResponseBodyPageInfoIntegrationsIntegrationDetail) SetExtendedFieldRedefineRules(v []map[string]interface{}) *ListIntegrationResponseBodyPageInfoIntegrationsIntegrationDetail {
	s.ExtendedFieldRedefineRules = v
	return s
}

func (s *ListIntegrationResponseBodyPageInfoIntegrationsIntegrationDetail) SetFieldRedefineRules(v []map[string]interface{}) *ListIntegrationResponseBodyPageInfoIntegrationsIntegrationDetail {
	s.FieldRedefineRules = v
	return s
}

func (s *ListIntegrationResponseBodyPageInfoIntegrationsIntegrationDetail) SetInitiativeRecoverField(v string) *ListIntegrationResponseBodyPageInfoIntegrationsIntegrationDetail {
	s.InitiativeRecoverField = &v
	return s
}

func (s *ListIntegrationResponseBodyPageInfoIntegrationsIntegrationDetail) SetInitiativeRecoverValue(v string) *ListIntegrationResponseBodyPageInfoIntegrationsIntegrationDetail {
	s.InitiativeRecoverValue = &v
	return s
}

func (s *ListIntegrationResponseBodyPageInfoIntegrationsIntegrationDetail) SetRecoverTime(v int64) *ListIntegrationResponseBodyPageInfoIntegrationsIntegrationDetail {
	s.RecoverTime = &v
	return s
}

func (s *ListIntegrationResponseBodyPageInfoIntegrationsIntegrationDetail) SetStat(v []*int64) *ListIntegrationResponseBodyPageInfoIntegrationsIntegrationDetail {
	s.Stat = v
	return s
}

type ListIntegrationResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListIntegrationResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListIntegrationResponse) String() string {
	return tea.Prettify(s)
}

func (s ListIntegrationResponse) GoString() string {
	return s.String()
}

func (s *ListIntegrationResponse) SetHeaders(v map[string]*string) *ListIntegrationResponse {
	s.Headers = v
	return s
}

func (s *ListIntegrationResponse) SetStatusCode(v int32) *ListIntegrationResponse {
	s.StatusCode = &v
	return s
}

func (s *ListIntegrationResponse) SetBody(v *ListIntegrationResponseBody) *ListIntegrationResponse {
	s.Body = v
	return s
}

type ListNotificationPoliciesRequest struct {
	// Specifies whether to enable simple mode.
	DirectedMode *bool `json:"DirectedMode,omitempty" xml:"DirectedMode,omitempty"`
	// The ID of the notification policy.
	//
	// example:
	//
	// 12345
	Ids *string `json:"Ids,omitempty" xml:"Ids,omitempty"`
	// Specifies whether to query the details about notification policies. Valid values:
	//
	// 	- `true`: Details about notification policies are queried.
	//
	// 	- `false`: Details about notification policies are not queried.
	//
	// example:
	//
	// false
	IsDetail *bool `json:"IsDetail,omitempty" xml:"IsDetail,omitempty"`
	// The name of the notification policy.
	//
	// example:
	//
	// notificationpolicy_test
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The number of the page to return.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	Page *int64 `json:"Page,omitempty" xml:"Page,omitempty"`
	// The ID of the region.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The number of entries to return on each page.
	//
	// This parameter is required.
	//
	// example:
	//
	// 20
	Size *int64 `json:"Size,omitempty" xml:"Size,omitempty"`
}

func (s ListNotificationPoliciesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListNotificationPoliciesRequest) GoString() string {
	return s.String()
}

func (s *ListNotificationPoliciesRequest) SetDirectedMode(v bool) *ListNotificationPoliciesRequest {
	s.DirectedMode = &v
	return s
}

func (s *ListNotificationPoliciesRequest) SetIds(v string) *ListNotificationPoliciesRequest {
	s.Ids = &v
	return s
}

func (s *ListNotificationPoliciesRequest) SetIsDetail(v bool) *ListNotificationPoliciesRequest {
	s.IsDetail = &v
	return s
}

func (s *ListNotificationPoliciesRequest) SetName(v string) *ListNotificationPoliciesRequest {
	s.Name = &v
	return s
}

func (s *ListNotificationPoliciesRequest) SetPage(v int64) *ListNotificationPoliciesRequest {
	s.Page = &v
	return s
}

func (s *ListNotificationPoliciesRequest) SetRegionId(v string) *ListNotificationPoliciesRequest {
	s.RegionId = &v
	return s
}

func (s *ListNotificationPoliciesRequest) SetSize(v int64) *ListNotificationPoliciesRequest {
	s.Size = &v
	return s
}

type ListNotificationPoliciesResponseBody struct {
	// The returned pages.
	PageBean *ListNotificationPoliciesResponseBodyPageBean `json:"PageBean,omitempty" xml:"PageBean,omitempty" type:"Struct"`
	// The ID of the request.
	//
	// example:
	//
	// 78901766-3806-4E96-8E47-CFEF59E4****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListNotificationPoliciesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListNotificationPoliciesResponseBody) GoString() string {
	return s.String()
}

func (s *ListNotificationPoliciesResponseBody) SetPageBean(v *ListNotificationPoliciesResponseBodyPageBean) *ListNotificationPoliciesResponseBody {
	s.PageBean = v
	return s
}

func (s *ListNotificationPoliciesResponseBody) SetRequestId(v string) *ListNotificationPoliciesResponseBody {
	s.RequestId = &v
	return s
}

type ListNotificationPoliciesResponseBodyPageBean struct {
	// The queried notification policies.
	NotificationPolicies []*ListNotificationPoliciesResponseBodyPageBeanNotificationPolicies `json:"NotificationPolicies,omitempty" xml:"NotificationPolicies,omitempty" type:"Repeated"`
	// The number of the page returned.
	//
	// example:
	//
	// 1
	Page *int64 `json:"Page,omitempty" xml:"Page,omitempty"`
	// The number of entries that are returned on each page.
	//
	// example:
	//
	// 20
	Size *int64 `json:"Size,omitempty" xml:"Size,omitempty"`
	// The number of notification policies that are returned.
	//
	// example:
	//
	// 24
	Total *int64 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s ListNotificationPoliciesResponseBodyPageBean) String() string {
	return tea.Prettify(s)
}

func (s ListNotificationPoliciesResponseBodyPageBean) GoString() string {
	return s.String()
}

func (s *ListNotificationPoliciesResponseBodyPageBean) SetNotificationPolicies(v []*ListNotificationPoliciesResponseBodyPageBeanNotificationPolicies) *ListNotificationPoliciesResponseBodyPageBean {
	s.NotificationPolicies = v
	return s
}

func (s *ListNotificationPoliciesResponseBodyPageBean) SetPage(v int64) *ListNotificationPoliciesResponseBodyPageBean {
	s.Page = &v
	return s
}

func (s *ListNotificationPoliciesResponseBodyPageBean) SetSize(v int64) *ListNotificationPoliciesResponseBodyPageBean {
	s.Size = &v
	return s
}

func (s *ListNotificationPoliciesResponseBodyPageBean) SetTotal(v int64) *ListNotificationPoliciesResponseBodyPageBean {
	s.Total = &v
	return s
}

type ListNotificationPoliciesResponseBodyPageBeanNotificationPolicies struct {
	// Indicates whether simple mode is enabled.
	DirectedMode *bool `json:"DirectedMode,omitempty" xml:"DirectedMode,omitempty"`
	// The ID of the escalation policy.
	//
	// example:
	//
	// 123
	EscalationPolicyId *int64 `json:"EscalationPolicyId,omitempty" xml:"EscalationPolicyId,omitempty"`
	// The grouping rule for alert events.
	GroupRule *ListNotificationPoliciesResponseBodyPageBeanNotificationPoliciesGroupRule `json:"GroupRule,omitempty" xml:"GroupRule,omitempty" type:"Struct"`
	// The ID of the notification policy.
	//
	// example:
	//
	// 1234
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The integration ID of the ticket system to which alerts are pushed.
	//
	// example:
	//
	// 34
	IntegrationId *int64 `json:"IntegrationId,omitempty" xml:"IntegrationId,omitempty"`
	// The matching rules for alert events.
	MatchingRules []*ListNotificationPoliciesResponseBodyPageBeanNotificationPoliciesMatchingRules `json:"MatchingRules,omitempty" xml:"MatchingRules,omitempty" type:"Repeated"`
	// The name of the notification policy.
	//
	// example:
	//
	// notificationpolicy_test
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The notification rules.
	NotifyRule *ListNotificationPoliciesResponseBodyPageBeanNotificationPoliciesNotifyRule `json:"NotifyRule,omitempty" xml:"NotifyRule,omitempty" type:"Struct"`
	// The notification templates.
	NotifyTemplate *ListNotificationPoliciesResponseBodyPageBeanNotificationPoliciesNotifyTemplate `json:"NotifyTemplate,omitempty" xml:"NotifyTemplate,omitempty" type:"Struct"`
	// Indicates whether the system resends notifications for a long-lasting unresolved alert. Valid values:
	//
	// 	- `true` (default): The system resends notifications for a long-lasting unresolved alert at a specified time interval.
	//
	// 	- `false`: The system resends notifications for a long-lasting unresolved alert based on an escalation policy.
	//
	// example:
	//
	// true
	Repeat *bool `json:"Repeat,omitempty" xml:"Repeat,omitempty"`
	// The time interval at which notifications are resent for a long-lasting unresolved alert. Unit: seconds.
	//
	// example:
	//
	// 600
	RepeatInterval *int64 `json:"RepeatInterval,omitempty" xml:"RepeatInterval,omitempty"`
	// Indicates whether the status of an alert automatically changes to Resolved when all events related to the alert change to the Restored state. The system sends a notification to the alert contacts when the alert status changes to Resolved.
	//
	// 	- `true` (default): The system sends a notification.
	//
	// 	- `false`: The system does not send a notification.
	//
	// example:
	//
	// true
	SendRecoverMessage *bool `json:"SendRecoverMessage,omitempty" xml:"SendRecoverMessage,omitempty"`
}

func (s ListNotificationPoliciesResponseBodyPageBeanNotificationPolicies) String() string {
	return tea.Prettify(s)
}

func (s ListNotificationPoliciesResponseBodyPageBeanNotificationPolicies) GoString() string {
	return s.String()
}

func (s *ListNotificationPoliciesResponseBodyPageBeanNotificationPolicies) SetDirectedMode(v bool) *ListNotificationPoliciesResponseBodyPageBeanNotificationPolicies {
	s.DirectedMode = &v
	return s
}

func (s *ListNotificationPoliciesResponseBodyPageBeanNotificationPolicies) SetEscalationPolicyId(v int64) *ListNotificationPoliciesResponseBodyPageBeanNotificationPolicies {
	s.EscalationPolicyId = &v
	return s
}

func (s *ListNotificationPoliciesResponseBodyPageBeanNotificationPolicies) SetGroupRule(v *ListNotificationPoliciesResponseBodyPageBeanNotificationPoliciesGroupRule) *ListNotificationPoliciesResponseBodyPageBeanNotificationPolicies {
	s.GroupRule = v
	return s
}

func (s *ListNotificationPoliciesResponseBodyPageBeanNotificationPolicies) SetId(v int64) *ListNotificationPoliciesResponseBodyPageBeanNotificationPolicies {
	s.Id = &v
	return s
}

func (s *ListNotificationPoliciesResponseBodyPageBeanNotificationPolicies) SetIntegrationId(v int64) *ListNotificationPoliciesResponseBodyPageBeanNotificationPolicies {
	s.IntegrationId = &v
	return s
}

func (s *ListNotificationPoliciesResponseBodyPageBeanNotificationPolicies) SetMatchingRules(v []*ListNotificationPoliciesResponseBodyPageBeanNotificationPoliciesMatchingRules) *ListNotificationPoliciesResponseBodyPageBeanNotificationPolicies {
	s.MatchingRules = v
	return s
}

func (s *ListNotificationPoliciesResponseBodyPageBeanNotificationPolicies) SetName(v string) *ListNotificationPoliciesResponseBodyPageBeanNotificationPolicies {
	s.Name = &v
	return s
}

func (s *ListNotificationPoliciesResponseBodyPageBeanNotificationPolicies) SetNotifyRule(v *ListNotificationPoliciesResponseBodyPageBeanNotificationPoliciesNotifyRule) *ListNotificationPoliciesResponseBodyPageBeanNotificationPolicies {
	s.NotifyRule = v
	return s
}

func (s *ListNotificationPoliciesResponseBodyPageBeanNotificationPolicies) SetNotifyTemplate(v *ListNotificationPoliciesResponseBodyPageBeanNotificationPoliciesNotifyTemplate) *ListNotificationPoliciesResponseBodyPageBeanNotificationPolicies {
	s.NotifyTemplate = v
	return s
}

func (s *ListNotificationPoliciesResponseBodyPageBeanNotificationPolicies) SetRepeat(v bool) *ListNotificationPoliciesResponseBodyPageBeanNotificationPolicies {
	s.Repeat = &v
	return s
}

func (s *ListNotificationPoliciesResponseBodyPageBeanNotificationPolicies) SetRepeatInterval(v int64) *ListNotificationPoliciesResponseBodyPageBeanNotificationPolicies {
	s.RepeatInterval = &v
	return s
}

func (s *ListNotificationPoliciesResponseBodyPageBeanNotificationPolicies) SetSendRecoverMessage(v bool) *ListNotificationPoliciesResponseBodyPageBeanNotificationPolicies {
	s.SendRecoverMessage = &v
	return s
}

type ListNotificationPoliciesResponseBodyPageBeanNotificationPoliciesGroupRule struct {
	// The time interval of grouping. Unit: seconds. Default value: 30.
	//
	// example:
	//
	// 30
	GroupInterval *int64 `json:"GroupInterval,omitempty" xml:"GroupInterval,omitempty"`
	// The waiting time for grouping. Unit: seconds. Default value: 5.
	//
	// example:
	//
	// 5
	GroupWait *int64 `json:"GroupWait,omitempty" xml:"GroupWait,omitempty"`
	// The fields that are used to group events.
	//
	// 	- If this parameter is not returned, all alert notifications are sent to the alert contacts that belong to the `alertname` group. By default, this parameter is not returned.
	//
	// 	- If this parameter is returned, alerts with the same fields are sent to the alert contacts in one notification.
	GroupingFields []*string `json:"GroupingFields,omitempty" xml:"GroupingFields,omitempty" type:"Repeated"`
}

func (s ListNotificationPoliciesResponseBodyPageBeanNotificationPoliciesGroupRule) String() string {
	return tea.Prettify(s)
}

func (s ListNotificationPoliciesResponseBodyPageBeanNotificationPoliciesGroupRule) GoString() string {
	return s.String()
}

func (s *ListNotificationPoliciesResponseBodyPageBeanNotificationPoliciesGroupRule) SetGroupInterval(v int64) *ListNotificationPoliciesResponseBodyPageBeanNotificationPoliciesGroupRule {
	s.GroupInterval = &v
	return s
}

func (s *ListNotificationPoliciesResponseBodyPageBeanNotificationPoliciesGroupRule) SetGroupWait(v int64) *ListNotificationPoliciesResponseBodyPageBeanNotificationPoliciesGroupRule {
	s.GroupWait = &v
	return s
}

func (s *ListNotificationPoliciesResponseBodyPageBeanNotificationPoliciesGroupRule) SetGroupingFields(v []*string) *ListNotificationPoliciesResponseBodyPageBeanNotificationPoliciesGroupRule {
	s.GroupingFields = v
	return s
}

type ListNotificationPoliciesResponseBodyPageBeanNotificationPoliciesMatchingRules struct {
	// The matching conditions.
	MatchingConditions []*ListNotificationPoliciesResponseBodyPageBeanNotificationPoliciesMatchingRulesMatchingConditions `json:"MatchingConditions,omitempty" xml:"MatchingConditions,omitempty" type:"Repeated"`
}

func (s ListNotificationPoliciesResponseBodyPageBeanNotificationPoliciesMatchingRules) String() string {
	return tea.Prettify(s)
}

func (s ListNotificationPoliciesResponseBodyPageBeanNotificationPoliciesMatchingRules) GoString() string {
	return s.String()
}

func (s *ListNotificationPoliciesResponseBodyPageBeanNotificationPoliciesMatchingRules) SetMatchingConditions(v []*ListNotificationPoliciesResponseBodyPageBeanNotificationPoliciesMatchingRulesMatchingConditions) *ListNotificationPoliciesResponseBodyPageBeanNotificationPoliciesMatchingRules {
	s.MatchingConditions = v
	return s
}

type ListNotificationPoliciesResponseBodyPageBeanNotificationPoliciesMatchingRulesMatchingConditions struct {
	// The key of the matching condition.
	//
	// example:
	//
	// altertname
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The logical operator of the matching condition. Valid values:
	//
	// 	- `eq`: equal to
	//
	// 	- `neq`: not equal to
	//
	// 	- `in`: contains
	//
	// 	- `nin`: does not contain
	//
	// 	- `re`: regular expression match
	//
	// 	- `nre`: regular expression mismatch
	//
	// example:
	//
	// eq
	Operator *string `json:"Operator,omitempty" xml:"Operator,omitempty"`
	// The value of the matching condition.
	//
	// example:
	//
	// test
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s ListNotificationPoliciesResponseBodyPageBeanNotificationPoliciesMatchingRulesMatchingConditions) String() string {
	return tea.Prettify(s)
}

func (s ListNotificationPoliciesResponseBodyPageBeanNotificationPoliciesMatchingRulesMatchingConditions) GoString() string {
	return s.String()
}

func (s *ListNotificationPoliciesResponseBodyPageBeanNotificationPoliciesMatchingRulesMatchingConditions) SetKey(v string) *ListNotificationPoliciesResponseBodyPageBeanNotificationPoliciesMatchingRulesMatchingConditions {
	s.Key = &v
	return s
}

func (s *ListNotificationPoliciesResponseBodyPageBeanNotificationPoliciesMatchingRulesMatchingConditions) SetOperator(v string) *ListNotificationPoliciesResponseBodyPageBeanNotificationPoliciesMatchingRulesMatchingConditions {
	s.Operator = &v
	return s
}

func (s *ListNotificationPoliciesResponseBodyPageBeanNotificationPoliciesMatchingRulesMatchingConditions) SetValue(v string) *ListNotificationPoliciesResponseBodyPageBeanNotificationPoliciesMatchingRulesMatchingConditions {
	s.Value = &v
	return s
}

type ListNotificationPoliciesResponseBodyPageBeanNotificationPoliciesNotifyRule struct {
	// The notification methods.
	NotifyChannels []*string `json:"NotifyChannels,omitempty" xml:"NotifyChannels,omitempty" type:"Repeated"`
	// The end time of the notification window.
	//
	// example:
	//
	// 23:59
	NotifyEndTime *string `json:"NotifyEndTime,omitempty" xml:"NotifyEndTime,omitempty"`
	// The notification objects.
	NotifyObjects []*ListNotificationPoliciesResponseBodyPageBeanNotificationPoliciesNotifyRuleNotifyObjects `json:"NotifyObjects,omitempty" xml:"NotifyObjects,omitempty" type:"Repeated"`
	// The start time of the notification window.
	//
	// example:
	//
	// 00:00
	NotifyStartTime *string `json:"NotifyStartTime,omitempty" xml:"NotifyStartTime,omitempty"`
}

func (s ListNotificationPoliciesResponseBodyPageBeanNotificationPoliciesNotifyRule) String() string {
	return tea.Prettify(s)
}

func (s ListNotificationPoliciesResponseBodyPageBeanNotificationPoliciesNotifyRule) GoString() string {
	return s.String()
}

func (s *ListNotificationPoliciesResponseBodyPageBeanNotificationPoliciesNotifyRule) SetNotifyChannels(v []*string) *ListNotificationPoliciesResponseBodyPageBeanNotificationPoliciesNotifyRule {
	s.NotifyChannels = v
	return s
}

func (s *ListNotificationPoliciesResponseBodyPageBeanNotificationPoliciesNotifyRule) SetNotifyEndTime(v string) *ListNotificationPoliciesResponseBodyPageBeanNotificationPoliciesNotifyRule {
	s.NotifyEndTime = &v
	return s
}

func (s *ListNotificationPoliciesResponseBodyPageBeanNotificationPoliciesNotifyRule) SetNotifyObjects(v []*ListNotificationPoliciesResponseBodyPageBeanNotificationPoliciesNotifyRuleNotifyObjects) *ListNotificationPoliciesResponseBodyPageBeanNotificationPoliciesNotifyRule {
	s.NotifyObjects = v
	return s
}

func (s *ListNotificationPoliciesResponseBodyPageBeanNotificationPoliciesNotifyRule) SetNotifyStartTime(v string) *ListNotificationPoliciesResponseBodyPageBeanNotificationPoliciesNotifyRule {
	s.NotifyStartTime = &v
	return s
}

type ListNotificationPoliciesResponseBodyPageBeanNotificationPoliciesNotifyRuleNotifyObjects struct {
	// The notification methods specified for a contact.
	NotifyChannels []*string `json:"NotifyChannels,omitempty" xml:"NotifyChannels,omitempty" type:"Repeated"`
	// The ID of the notification object.
	//
	// example:
	//
	// 123
	NotifyObjectId *int64 `json:"NotifyObjectId,omitempty" xml:"NotifyObjectId,omitempty"`
	// The name of the notification object.
	//
	// example:
	//
	// test
	NotifyObjectName *string `json:"NotifyObjectName,omitempty" xml:"NotifyObjectName,omitempty"`
	// The type of the notification object. Valid values:
	//
	// 	- CONTACT: an individual contact
	//
	// 	- CONTACT_GROUP: a contact group
	//
	// 	- DING_ROBOT: an instant messaging (IM) chatbot
	//
	// 	- CONTACT_SCHEDULE: a person on duty based on an established schedule
	//
	// example:
	//
	// CONTACT
	NotifyObjectType *string `json:"NotifyObjectType,omitempty" xml:"NotifyObjectType,omitempty"`
}

func (s ListNotificationPoliciesResponseBodyPageBeanNotificationPoliciesNotifyRuleNotifyObjects) String() string {
	return tea.Prettify(s)
}

func (s ListNotificationPoliciesResponseBodyPageBeanNotificationPoliciesNotifyRuleNotifyObjects) GoString() string {
	return s.String()
}

func (s *ListNotificationPoliciesResponseBodyPageBeanNotificationPoliciesNotifyRuleNotifyObjects) SetNotifyChannels(v []*string) *ListNotificationPoliciesResponseBodyPageBeanNotificationPoliciesNotifyRuleNotifyObjects {
	s.NotifyChannels = v
	return s
}

func (s *ListNotificationPoliciesResponseBodyPageBeanNotificationPoliciesNotifyRuleNotifyObjects) SetNotifyObjectId(v int64) *ListNotificationPoliciesResponseBodyPageBeanNotificationPoliciesNotifyRuleNotifyObjects {
	s.NotifyObjectId = &v
	return s
}

func (s *ListNotificationPoliciesResponseBodyPageBeanNotificationPoliciesNotifyRuleNotifyObjects) SetNotifyObjectName(v string) *ListNotificationPoliciesResponseBodyPageBeanNotificationPoliciesNotifyRuleNotifyObjects {
	s.NotifyObjectName = &v
	return s
}

func (s *ListNotificationPoliciesResponseBodyPageBeanNotificationPoliciesNotifyRuleNotifyObjects) SetNotifyObjectType(v string) *ListNotificationPoliciesResponseBodyPageBeanNotificationPoliciesNotifyRuleNotifyObjects {
	s.NotifyObjectType = &v
	return s
}

type ListNotificationPoliciesResponseBodyPageBeanNotificationPoliciesNotifyTemplate struct {
	// The content of the alert notification sent by email.
	//
	// example:
	//
	// Alert Name: {{ .commonLabels.alertname }}{{if .commonLabels.clustername }}
	//
	// Cluster Name: {{ .commonLabels.clustername }} {{ end }}{{if eq "app" .commonLabels._aliyun_arms_involvedObject_kind }}
	//
	// App Name: {{ .commonLabels._aliyun_arms_involvedObject_name }} {{ end }}
	//
	// Notification Policy: {{ .dispatchRuleName }}
	//
	// Alert Time: {{ .startTime }}
	//
	// Description: {{ for .alerts }} {{ .annotations.message }}  {{if .generatorURL }}  &lt;a href="{{.generatorURL}}" > Details&lt;/a&gt;
	//
	//  {{ end }} {{ end }}
	EmailContent *string `json:"EmailContent,omitempty" xml:"EmailContent,omitempty"`
	// The content of the alert resolution notification sent by email.
	//
	// example:
	//
	// Alert Name: {{ .commonLabels.alertname }}{{if .commonLabels.clustername }}
	//
	// Cluster Name: {{ .commonLabels.clustername }} {{ end }}{{if eq "app" .commonLabels._aliyun_arms_involvedObject_kind }}
	//
	// App Name: {{ .commonLabels._aliyun_arms_involvedObject_name }} {{ end }}
	//
	// Notification Policy: {{ .dispatchRuleName }}
	//
	// Recover Time: {{ .endTime }}
	//
	// Description: {{ for .alerts }} {{ .annotations.message }}  {{if .generatorURL }} &lt;a href="{{.generatorURL}}" > Details&lt;/a&gt;
	//
	//  {{ end }} {{ end }}
	EmailRecoverContent *string `json:"EmailRecoverContent,omitempty" xml:"EmailRecoverContent,omitempty"`
	// The title of the alert resolution notification sent by email.
	//
	// example:
	//
	// {{ .commonLabels.alertname }}
	EmailRecoverTitle *string `json:"EmailRecoverTitle,omitempty" xml:"EmailRecoverTitle,omitempty"`
	// The title of the alert notification sent by email.
	//
	// example:
	//
	// {{ .commonLabels.alertname }}
	EmailTitle *string `json:"EmailTitle,omitempty" xml:"EmailTitle,omitempty"`
	// The content of the alert notification sent by an IM chatbot.
	//
	// example:
	//
	// {{if .commonLabels.clustername }}
	//
	//  &gt;  Cluster Name: {{ .commonLabels.clustername }}
	//
	//  {{ end }}{{if eq "app" .commonLabels._aliyun_arms_involvedObject_kind }}
	//
	//  &gt;  App Name: {{ .commonLabels._aliyun_arms_involvedObject_name }}
	//
	//  {{ end }}{{ for .alerts }} &gt;  {{ .annotations.message }} {{if .generatorURL }} [Details]({{.generatorURL}})  {{end}} {{if .annotations._aliyun_arms_insights_analyze_link }}[&lt;font color=\\"#ff0000\\"&gt;diagnostic analysis&lt;/font&gt;]({{ .annotations._aliyun_arms_insights_analyze_link}}){{ end }}{{if  eq "1" .labels._aliyun_arms_denoise_code }} (Important:{{.labels._aliyun_arms_important_reason }}) {{end}}
	//
	// {{end}}
	RobotContent *string `json:"RobotContent,omitempty" xml:"RobotContent,omitempty"`
	// The content of the alert notification sent by text message.
	//
	// example:
	//
	// {{ .level }}Alert Occurs
	//
	// Alert Name: {{ .commonLabels.alertname }}{{if .commonLabels.clustername }}
	//
	// Cluster Name: {{ .commonLabels.clustername }} {{ end }}{{if eq "app" .commonLabels._aliyun_arms_involvedObject_kind }}
	//
	// App Name: {{ .commonLabels._aliyun_arms_involvedObject_name }} {{ end }}
	//
	// Notification Policy: {{ .dispatchRuleName }}
	//
	// Alert Time: {{ .startTime }}
	//
	// Description: {{ for .alerts }} {{ .annotations.message }} {{ end }}
	SmsContent *string `json:"SmsContent,omitempty" xml:"SmsContent,omitempty"`
	// The content of the alert resolution notification sent by text message.
	//
	// example:
	//
	// Alert Recovery Notification
	//
	// Alert Name: {{ .commonLabels.alertname }}{{if .commonLabels.clustername }}
	//
	// Cluster Name: {{ .commonLabels.clustername }} {{ end }}{{if eq "app" .commonLabels._aliyun_arms_involvedObject_kind }}
	//
	// App Name: {{ .commonLabels._aliyun_arms_involvedObject_name }} {{ end }}
	//
	// Notification Policy: {{ .dispatchRuleName }}
	//
	// Recover Time: {{ .endTime }}
	//
	// Description: {{ for .alerts }} {{ .annotations.message }} {{ end }}
	SmsRecoverContent *string `json:"SmsRecoverContent,omitempty" xml:"SmsRecoverContent,omitempty"`
	// The content of the alert notification sent by phone.
	//
	// example:
	//
	// Alert Name: {{ .commonLabels.alertname }}{{if .commonLabels.clustername }}
	//
	// Cluster Name: {{ .commonLabels.clustername }} {{ end }}{{if eq "app" .commonLabels._aliyun_arms_involvedObject_kind }}
	//
	// App Name: {{ .commonLabels._aliyun_arms_involvedObject_name }} {{ end }}
	//
	// Notification Policy: {{ .dispatchRuleName }}
	//
	// Alert Time: {{ .startTime }}
	//
	// Description: {{ for .alerts }} {{ .annotations.message }} {{ end }}
	TtsContent *string `json:"TtsContent,omitempty" xml:"TtsContent,omitempty"`
	// The content of the alert resolution notification sent by phone.
	//
	// example:
	//
	// Alert Name: {{ .commonLabels.alertname }}{{if .commonLabels.clustername }}
	//
	// Cluster Name: {{ .commonLabels.clustername }} {{ end }}{{if eq "app" .commonLabels._aliyun_arms_involvedObject_kind }}
	//
	// App Name: {{ .commonLabels._aliyun_arms_involvedObject_name }} {{ end }}
	//
	// Notification Policy: {{ .dispatchRuleName }}
	//
	// Recover Time: {{ .endTime }}
	//
	// Description: {{ for .alerts }} {{ .annotations.message }} {{ end }}
	TtsRecoverContent *string `json:"TtsRecoverContent,omitempty" xml:"TtsRecoverContent,omitempty"`
}

func (s ListNotificationPoliciesResponseBodyPageBeanNotificationPoliciesNotifyTemplate) String() string {
	return tea.Prettify(s)
}

func (s ListNotificationPoliciesResponseBodyPageBeanNotificationPoliciesNotifyTemplate) GoString() string {
	return s.String()
}

func (s *ListNotificationPoliciesResponseBodyPageBeanNotificationPoliciesNotifyTemplate) SetEmailContent(v string) *ListNotificationPoliciesResponseBodyPageBeanNotificationPoliciesNotifyTemplate {
	s.EmailContent = &v
	return s
}

func (s *ListNotificationPoliciesResponseBodyPageBeanNotificationPoliciesNotifyTemplate) SetEmailRecoverContent(v string) *ListNotificationPoliciesResponseBodyPageBeanNotificationPoliciesNotifyTemplate {
	s.EmailRecoverContent = &v
	return s
}

func (s *ListNotificationPoliciesResponseBodyPageBeanNotificationPoliciesNotifyTemplate) SetEmailRecoverTitle(v string) *ListNotificationPoliciesResponseBodyPageBeanNotificationPoliciesNotifyTemplate {
	s.EmailRecoverTitle = &v
	return s
}

func (s *ListNotificationPoliciesResponseBodyPageBeanNotificationPoliciesNotifyTemplate) SetEmailTitle(v string) *ListNotificationPoliciesResponseBodyPageBeanNotificationPoliciesNotifyTemplate {
	s.EmailTitle = &v
	return s
}

func (s *ListNotificationPoliciesResponseBodyPageBeanNotificationPoliciesNotifyTemplate) SetRobotContent(v string) *ListNotificationPoliciesResponseBodyPageBeanNotificationPoliciesNotifyTemplate {
	s.RobotContent = &v
	return s
}

func (s *ListNotificationPoliciesResponseBodyPageBeanNotificationPoliciesNotifyTemplate) SetSmsContent(v string) *ListNotificationPoliciesResponseBodyPageBeanNotificationPoliciesNotifyTemplate {
	s.SmsContent = &v
	return s
}

func (s *ListNotificationPoliciesResponseBodyPageBeanNotificationPoliciesNotifyTemplate) SetSmsRecoverContent(v string) *ListNotificationPoliciesResponseBodyPageBeanNotificationPoliciesNotifyTemplate {
	s.SmsRecoverContent = &v
	return s
}

func (s *ListNotificationPoliciesResponseBodyPageBeanNotificationPoliciesNotifyTemplate) SetTtsContent(v string) *ListNotificationPoliciesResponseBodyPageBeanNotificationPoliciesNotifyTemplate {
	s.TtsContent = &v
	return s
}

func (s *ListNotificationPoliciesResponseBodyPageBeanNotificationPoliciesNotifyTemplate) SetTtsRecoverContent(v string) *ListNotificationPoliciesResponseBodyPageBeanNotificationPoliciesNotifyTemplate {
	s.TtsRecoverContent = &v
	return s
}

type ListNotificationPoliciesResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListNotificationPoliciesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListNotificationPoliciesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListNotificationPoliciesResponse) GoString() string {
	return s.String()
}

func (s *ListNotificationPoliciesResponse) SetHeaders(v map[string]*string) *ListNotificationPoliciesResponse {
	s.Headers = v
	return s
}

func (s *ListNotificationPoliciesResponse) SetStatusCode(v int32) *ListNotificationPoliciesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListNotificationPoliciesResponse) SetBody(v *ListNotificationPoliciesResponseBody) *ListNotificationPoliciesResponse {
	s.Body = v
	return s
}

type ListOnCallSchedulesRequest struct {
	// The name of the scheduling policy.
	//
	// example:
	//
	// OnCallSchedule_test
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The number of the page to return.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	Page *int64 `json:"Page,omitempty" xml:"Page,omitempty"`
	// The number of entries to return on each page.
	//
	// This parameter is required.
	//
	// example:
	//
	// 20
	Size *int64 `json:"Size,omitempty" xml:"Size,omitempty"`
}

func (s ListOnCallSchedulesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListOnCallSchedulesRequest) GoString() string {
	return s.String()
}

func (s *ListOnCallSchedulesRequest) SetName(v string) *ListOnCallSchedulesRequest {
	s.Name = &v
	return s
}

func (s *ListOnCallSchedulesRequest) SetPage(v int64) *ListOnCallSchedulesRequest {
	s.Page = &v
	return s
}

func (s *ListOnCallSchedulesRequest) SetSize(v int64) *ListOnCallSchedulesRequest {
	s.Size = &v
	return s
}

type ListOnCallSchedulesResponseBody struct {
	// The objects that were returned.
	PageBean *ListOnCallSchedulesResponseBodyPageBean `json:"PageBean,omitempty" xml:"PageBean,omitempty" type:"Struct"`
	// The ID of the request.
	//
	// example:
	//
	// 78901766-3806-4E96-8E47-CFEF59E4****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListOnCallSchedulesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListOnCallSchedulesResponseBody) GoString() string {
	return s.String()
}

func (s *ListOnCallSchedulesResponseBody) SetPageBean(v *ListOnCallSchedulesResponseBodyPageBean) *ListOnCallSchedulesResponseBody {
	s.PageBean = v
	return s
}

func (s *ListOnCallSchedulesResponseBody) SetRequestId(v string) *ListOnCallSchedulesResponseBody {
	s.RequestId = &v
	return s
}

type ListOnCallSchedulesResponseBodyPageBean struct {
	// The information about the scheduling policy.
	OnCallSchedules []*ListOnCallSchedulesResponseBodyPageBeanOnCallSchedules `json:"OnCallSchedules,omitempty" xml:"OnCallSchedules,omitempty" type:"Repeated"`
	// The page number of the returned page.
	//
	// example:
	//
	// 1
	Page *int64 `json:"Page,omitempty" xml:"Page,omitempty"`
	// The number of entries returned per page.
	//
	// example:
	//
	// 20
	Size *int64 `json:"Size,omitempty" xml:"Size,omitempty"`
	// The total number of returned entries.
	//
	// example:
	//
	// 1
	Total *int64 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s ListOnCallSchedulesResponseBodyPageBean) String() string {
	return tea.Prettify(s)
}

func (s ListOnCallSchedulesResponseBodyPageBean) GoString() string {
	return s.String()
}

func (s *ListOnCallSchedulesResponseBodyPageBean) SetOnCallSchedules(v []*ListOnCallSchedulesResponseBodyPageBeanOnCallSchedules) *ListOnCallSchedulesResponseBodyPageBean {
	s.OnCallSchedules = v
	return s
}

func (s *ListOnCallSchedulesResponseBodyPageBean) SetPage(v int64) *ListOnCallSchedulesResponseBodyPageBean {
	s.Page = &v
	return s
}

func (s *ListOnCallSchedulesResponseBodyPageBean) SetSize(v int64) *ListOnCallSchedulesResponseBodyPageBean {
	s.Size = &v
	return s
}

func (s *ListOnCallSchedulesResponseBodyPageBean) SetTotal(v int64) *ListOnCallSchedulesResponseBodyPageBean {
	s.Total = &v
	return s
}

type ListOnCallSchedulesResponseBodyPageBeanOnCallSchedules struct {
	// The description of the scheduling policy.
	//
	// example:
	//
	// Test scheduling policy
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The ID of the scheduling policy.
	//
	// example:
	//
	// 1234
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The name of the scheduling policy.
	//
	// example:
	//
	// OnCallSchedule_test
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s ListOnCallSchedulesResponseBodyPageBeanOnCallSchedules) String() string {
	return tea.Prettify(s)
}

func (s ListOnCallSchedulesResponseBodyPageBeanOnCallSchedules) GoString() string {
	return s.String()
}

func (s *ListOnCallSchedulesResponseBodyPageBeanOnCallSchedules) SetDescription(v string) *ListOnCallSchedulesResponseBodyPageBeanOnCallSchedules {
	s.Description = &v
	return s
}

func (s *ListOnCallSchedulesResponseBodyPageBeanOnCallSchedules) SetId(v int64) *ListOnCallSchedulesResponseBodyPageBeanOnCallSchedules {
	s.Id = &v
	return s
}

func (s *ListOnCallSchedulesResponseBodyPageBeanOnCallSchedules) SetName(v string) *ListOnCallSchedulesResponseBodyPageBeanOnCallSchedules {
	s.Name = &v
	return s
}

type ListOnCallSchedulesResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListOnCallSchedulesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListOnCallSchedulesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListOnCallSchedulesResponse) GoString() string {
	return s.String()
}

func (s *ListOnCallSchedulesResponse) SetHeaders(v map[string]*string) *ListOnCallSchedulesResponse {
	s.Headers = v
	return s
}

func (s *ListOnCallSchedulesResponse) SetStatusCode(v int32) *ListOnCallSchedulesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListOnCallSchedulesResponse) SetBody(v *ListOnCallSchedulesResponseBody) *ListOnCallSchedulesResponse {
	s.Body = v
	return s
}

type ListPrometheusAlertRulesRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// c0bad479465464e1d8c1e641b0afb****
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	// example:
	//
	// [{"key":"severity","value":"critical","operator":"re"}]
	MatchExpressions *string `json:"MatchExpressions,omitempty" xml:"MatchExpressions,omitempty"`
	// example:
	//
	// Prometheus_Alert
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// example:
	//
	// 1
	Status *int32                                 `json:"Status,omitempty" xml:"Status,omitempty"`
	Tags   []*ListPrometheusAlertRulesRequestTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
	Type   *string                                `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListPrometheusAlertRulesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListPrometheusAlertRulesRequest) GoString() string {
	return s.String()
}

func (s *ListPrometheusAlertRulesRequest) SetClusterId(v string) *ListPrometheusAlertRulesRequest {
	s.ClusterId = &v
	return s
}

func (s *ListPrometheusAlertRulesRequest) SetMatchExpressions(v string) *ListPrometheusAlertRulesRequest {
	s.MatchExpressions = &v
	return s
}

func (s *ListPrometheusAlertRulesRequest) SetName(v string) *ListPrometheusAlertRulesRequest {
	s.Name = &v
	return s
}

func (s *ListPrometheusAlertRulesRequest) SetRegionId(v string) *ListPrometheusAlertRulesRequest {
	s.RegionId = &v
	return s
}

func (s *ListPrometheusAlertRulesRequest) SetStatus(v int32) *ListPrometheusAlertRulesRequest {
	s.Status = &v
	return s
}

func (s *ListPrometheusAlertRulesRequest) SetTags(v []*ListPrometheusAlertRulesRequestTags) *ListPrometheusAlertRulesRequest {
	s.Tags = v
	return s
}

func (s *ListPrometheusAlertRulesRequest) SetType(v string) *ListPrometheusAlertRulesRequest {
	s.Type = &v
	return s
}

type ListPrometheusAlertRulesRequestTags struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s ListPrometheusAlertRulesRequestTags) String() string {
	return tea.Prettify(s)
}

func (s ListPrometheusAlertRulesRequestTags) GoString() string {
	return s.String()
}

func (s *ListPrometheusAlertRulesRequestTags) SetKey(v string) *ListPrometheusAlertRulesRequestTags {
	s.Key = &v
	return s
}

func (s *ListPrometheusAlertRulesRequestTags) SetValue(v string) *ListPrometheusAlertRulesRequestTags {
	s.Value = &v
	return s
}

type ListPrometheusAlertRulesResponseBody struct {
	Code                 *int64                                                      `json:"Code,omitempty" xml:"Code,omitempty"`
	Message              *string                                                     `json:"Message,omitempty" xml:"Message,omitempty"`
	PrometheusAlertRules []*ListPrometheusAlertRulesResponseBodyPrometheusAlertRules `json:"PrometheusAlertRules,omitempty" xml:"PrometheusAlertRules,omitempty" type:"Repeated"`
	// example:
	//
	// 9FEA6D00-317F-45E3-9004-7FB8B0B7****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListPrometheusAlertRulesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListPrometheusAlertRulesResponseBody) GoString() string {
	return s.String()
}

func (s *ListPrometheusAlertRulesResponseBody) SetCode(v int64) *ListPrometheusAlertRulesResponseBody {
	s.Code = &v
	return s
}

func (s *ListPrometheusAlertRulesResponseBody) SetMessage(v string) *ListPrometheusAlertRulesResponseBody {
	s.Message = &v
	return s
}

func (s *ListPrometheusAlertRulesResponseBody) SetPrometheusAlertRules(v []*ListPrometheusAlertRulesResponseBodyPrometheusAlertRules) *ListPrometheusAlertRulesResponseBody {
	s.PrometheusAlertRules = v
	return s
}

func (s *ListPrometheusAlertRulesResponseBody) SetRequestId(v string) *ListPrometheusAlertRulesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListPrometheusAlertRulesResponseBody) SetSuccess(v bool) *ListPrometheusAlertRulesResponseBody {
	s.Success = &v
	return s
}

type ListPrometheusAlertRulesResponseBodyPrometheusAlertRules struct {
	// example:
	//
	// 3888704
	AlertId *int64 `json:"AlertId,omitempty" xml:"AlertId,omitempty"`
	// example:
	//
	// Prometheus_Alert
	AlertName   *string                                                                `json:"AlertName,omitempty" xml:"AlertName,omitempty"`
	Annotations []*ListPrometheusAlertRulesResponseBodyPrometheusAlertRulesAnnotations `json:"Annotations,omitempty" xml:"Annotations,omitempty" type:"Repeated"`
	// example:
	//
	// c0bad479465464e1d8c1e641b0afb****
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	// example:
	//
	// 10282
	DispatchRuleId *int64 `json:"DispatchRuleId,omitempty" xml:"DispatchRuleId,omitempty"`
	// example:
	//
	// 1m
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// example:
	//
	// 100 	- (sum(rate(container_cpu_usage_seconds_total[1m])) by (pod_name) / sum(label_replace(kube_pod_container_resource_limits_cpu_cores, \\"pod_name\\", \\"$1\\", \\"pod\\", \\"(.*)\\")) by (pod_name))>75
	Expression *string                                                           `json:"Expression,omitempty" xml:"Expression,omitempty"`
	Labels     []*ListPrometheusAlertRulesResponseBodyPrometheusAlertRulesLabels `json:"Labels,omitempty" xml:"Labels,omitempty" type:"Repeated"`
	Message    *string                                                           `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// ALERT_MANAGER
	NotifyType *string `json:"NotifyType,omitempty" xml:"NotifyType,omitempty"`
	// example:
	//
	// 1
	Status *int32                                                          `json:"Status,omitempty" xml:"Status,omitempty"`
	Tags   []*ListPrometheusAlertRulesResponseBodyPrometheusAlertRulesTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
	Type   *string                                                         `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListPrometheusAlertRulesResponseBodyPrometheusAlertRules) String() string {
	return tea.Prettify(s)
}

func (s ListPrometheusAlertRulesResponseBodyPrometheusAlertRules) GoString() string {
	return s.String()
}

func (s *ListPrometheusAlertRulesResponseBodyPrometheusAlertRules) SetAlertId(v int64) *ListPrometheusAlertRulesResponseBodyPrometheusAlertRules {
	s.AlertId = &v
	return s
}

func (s *ListPrometheusAlertRulesResponseBodyPrometheusAlertRules) SetAlertName(v string) *ListPrometheusAlertRulesResponseBodyPrometheusAlertRules {
	s.AlertName = &v
	return s
}

func (s *ListPrometheusAlertRulesResponseBodyPrometheusAlertRules) SetAnnotations(v []*ListPrometheusAlertRulesResponseBodyPrometheusAlertRulesAnnotations) *ListPrometheusAlertRulesResponseBodyPrometheusAlertRules {
	s.Annotations = v
	return s
}

func (s *ListPrometheusAlertRulesResponseBodyPrometheusAlertRules) SetClusterId(v string) *ListPrometheusAlertRulesResponseBodyPrometheusAlertRules {
	s.ClusterId = &v
	return s
}

func (s *ListPrometheusAlertRulesResponseBodyPrometheusAlertRules) SetDispatchRuleId(v int64) *ListPrometheusAlertRulesResponseBodyPrometheusAlertRules {
	s.DispatchRuleId = &v
	return s
}

func (s *ListPrometheusAlertRulesResponseBodyPrometheusAlertRules) SetDuration(v string) *ListPrometheusAlertRulesResponseBodyPrometheusAlertRules {
	s.Duration = &v
	return s
}

func (s *ListPrometheusAlertRulesResponseBodyPrometheusAlertRules) SetExpression(v string) *ListPrometheusAlertRulesResponseBodyPrometheusAlertRules {
	s.Expression = &v
	return s
}

func (s *ListPrometheusAlertRulesResponseBodyPrometheusAlertRules) SetLabels(v []*ListPrometheusAlertRulesResponseBodyPrometheusAlertRulesLabels) *ListPrometheusAlertRulesResponseBodyPrometheusAlertRules {
	s.Labels = v
	return s
}

func (s *ListPrometheusAlertRulesResponseBodyPrometheusAlertRules) SetMessage(v string) *ListPrometheusAlertRulesResponseBodyPrometheusAlertRules {
	s.Message = &v
	return s
}

func (s *ListPrometheusAlertRulesResponseBodyPrometheusAlertRules) SetNotifyType(v string) *ListPrometheusAlertRulesResponseBodyPrometheusAlertRules {
	s.NotifyType = &v
	return s
}

func (s *ListPrometheusAlertRulesResponseBodyPrometheusAlertRules) SetStatus(v int32) *ListPrometheusAlertRulesResponseBodyPrometheusAlertRules {
	s.Status = &v
	return s
}

func (s *ListPrometheusAlertRulesResponseBodyPrometheusAlertRules) SetTags(v []*ListPrometheusAlertRulesResponseBodyPrometheusAlertRulesTags) *ListPrometheusAlertRulesResponseBodyPrometheusAlertRules {
	s.Tags = v
	return s
}

func (s *ListPrometheusAlertRulesResponseBodyPrometheusAlertRules) SetType(v string) *ListPrometheusAlertRulesResponseBodyPrometheusAlertRules {
	s.Type = &v
	return s
}

type ListPrometheusAlertRulesResponseBodyPrometheusAlertRulesAnnotations struct {
	// example:
	//
	// message
	Name  *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s ListPrometheusAlertRulesResponseBodyPrometheusAlertRulesAnnotations) String() string {
	return tea.Prettify(s)
}

func (s ListPrometheusAlertRulesResponseBodyPrometheusAlertRulesAnnotations) GoString() string {
	return s.String()
}

func (s *ListPrometheusAlertRulesResponseBodyPrometheusAlertRulesAnnotations) SetName(v string) *ListPrometheusAlertRulesResponseBodyPrometheusAlertRulesAnnotations {
	s.Name = &v
	return s
}

func (s *ListPrometheusAlertRulesResponseBodyPrometheusAlertRulesAnnotations) SetValue(v string) *ListPrometheusAlertRulesResponseBodyPrometheusAlertRulesAnnotations {
	s.Value = &v
	return s
}

type ListPrometheusAlertRulesResponseBodyPrometheusAlertRulesLabels struct {
	// example:
	//
	// severity
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// critical
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s ListPrometheusAlertRulesResponseBodyPrometheusAlertRulesLabels) String() string {
	return tea.Prettify(s)
}

func (s ListPrometheusAlertRulesResponseBodyPrometheusAlertRulesLabels) GoString() string {
	return s.String()
}

func (s *ListPrometheusAlertRulesResponseBodyPrometheusAlertRulesLabels) SetName(v string) *ListPrometheusAlertRulesResponseBodyPrometheusAlertRulesLabels {
	s.Name = &v
	return s
}

func (s *ListPrometheusAlertRulesResponseBodyPrometheusAlertRulesLabels) SetValue(v string) *ListPrometheusAlertRulesResponseBodyPrometheusAlertRulesLabels {
	s.Value = &v
	return s
}

type ListPrometheusAlertRulesResponseBodyPrometheusAlertRulesTags struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s ListPrometheusAlertRulesResponseBodyPrometheusAlertRulesTags) String() string {
	return tea.Prettify(s)
}

func (s ListPrometheusAlertRulesResponseBodyPrometheusAlertRulesTags) GoString() string {
	return s.String()
}

func (s *ListPrometheusAlertRulesResponseBodyPrometheusAlertRulesTags) SetKey(v string) *ListPrometheusAlertRulesResponseBodyPrometheusAlertRulesTags {
	s.Key = &v
	return s
}

func (s *ListPrometheusAlertRulesResponseBodyPrometheusAlertRulesTags) SetValue(v string) *ListPrometheusAlertRulesResponseBodyPrometheusAlertRulesTags {
	s.Value = &v
	return s
}

type ListPrometheusAlertRulesResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListPrometheusAlertRulesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListPrometheusAlertRulesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListPrometheusAlertRulesResponse) GoString() string {
	return s.String()
}

func (s *ListPrometheusAlertRulesResponse) SetHeaders(v map[string]*string) *ListPrometheusAlertRulesResponse {
	s.Headers = v
	return s
}

func (s *ListPrometheusAlertRulesResponse) SetStatusCode(v int32) *ListPrometheusAlertRulesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListPrometheusAlertRulesResponse) SetBody(v *ListPrometheusAlertRulesResponseBody) *ListPrometheusAlertRulesResponse {
	s.Body = v
	return s
}

type ListPrometheusAlertTemplatesRequest struct {
	// example:
	//
	// c0bad479465464e1d8c1e641b0afb****
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ListPrometheusAlertTemplatesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListPrometheusAlertTemplatesRequest) GoString() string {
	return s.String()
}

func (s *ListPrometheusAlertTemplatesRequest) SetClusterId(v string) *ListPrometheusAlertTemplatesRequest {
	s.ClusterId = &v
	return s
}

func (s *ListPrometheusAlertTemplatesRequest) SetRegionId(v string) *ListPrometheusAlertTemplatesRequest {
	s.RegionId = &v
	return s
}

type ListPrometheusAlertTemplatesResponseBody struct {
	PrometheusAlertTemplates []*ListPrometheusAlertTemplatesResponseBodyPrometheusAlertTemplates `json:"PrometheusAlertTemplates,omitempty" xml:"PrometheusAlertTemplates,omitempty" type:"Repeated"`
	// example:
	//
	// 9FEA6D00-317F-45E3-9004-7FB8B0B7****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListPrometheusAlertTemplatesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListPrometheusAlertTemplatesResponseBody) GoString() string {
	return s.String()
}

func (s *ListPrometheusAlertTemplatesResponseBody) SetPrometheusAlertTemplates(v []*ListPrometheusAlertTemplatesResponseBodyPrometheusAlertTemplates) *ListPrometheusAlertTemplatesResponseBody {
	s.PrometheusAlertTemplates = v
	return s
}

func (s *ListPrometheusAlertTemplatesResponseBody) SetRequestId(v string) *ListPrometheusAlertTemplatesResponseBody {
	s.RequestId = &v
	return s
}

type ListPrometheusAlertTemplatesResponseBodyPrometheusAlertTemplates struct {
	AlertName   *string                                                                        `json:"AlertName,omitempty" xml:"AlertName,omitempty"`
	Annotations []*ListPrometheusAlertTemplatesResponseBodyPrometheusAlertTemplatesAnnotations `json:"Annotations,omitempty" xml:"Annotations,omitempty" type:"Repeated"`
	Description *string                                                                        `json:"Description,omitempty" xml:"Description,omitempty"`
	// example:
	//
	// 1m
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// example:
	//
	// node_memory_MemAvailable_bytes / node_memory_MemTotal_bytes 	- 100 < 10
	Expression *string                                                                   `json:"Expression,omitempty" xml:"Expression,omitempty"`
	Labels     []*ListPrometheusAlertTemplatesResponseBodyPrometheusAlertTemplatesLabels `json:"Labels,omitempty" xml:"Labels,omitempty" type:"Repeated"`
	Type       *string                                                                   `json:"Type,omitempty" xml:"Type,omitempty"`
	// example:
	//
	// 1.0
	Version *string `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s ListPrometheusAlertTemplatesResponseBodyPrometheusAlertTemplates) String() string {
	return tea.Prettify(s)
}

func (s ListPrometheusAlertTemplatesResponseBodyPrometheusAlertTemplates) GoString() string {
	return s.String()
}

func (s *ListPrometheusAlertTemplatesResponseBodyPrometheusAlertTemplates) SetAlertName(v string) *ListPrometheusAlertTemplatesResponseBodyPrometheusAlertTemplates {
	s.AlertName = &v
	return s
}

func (s *ListPrometheusAlertTemplatesResponseBodyPrometheusAlertTemplates) SetAnnotations(v []*ListPrometheusAlertTemplatesResponseBodyPrometheusAlertTemplatesAnnotations) *ListPrometheusAlertTemplatesResponseBodyPrometheusAlertTemplates {
	s.Annotations = v
	return s
}

func (s *ListPrometheusAlertTemplatesResponseBodyPrometheusAlertTemplates) SetDescription(v string) *ListPrometheusAlertTemplatesResponseBodyPrometheusAlertTemplates {
	s.Description = &v
	return s
}

func (s *ListPrometheusAlertTemplatesResponseBodyPrometheusAlertTemplates) SetDuration(v string) *ListPrometheusAlertTemplatesResponseBodyPrometheusAlertTemplates {
	s.Duration = &v
	return s
}

func (s *ListPrometheusAlertTemplatesResponseBodyPrometheusAlertTemplates) SetExpression(v string) *ListPrometheusAlertTemplatesResponseBodyPrometheusAlertTemplates {
	s.Expression = &v
	return s
}

func (s *ListPrometheusAlertTemplatesResponseBodyPrometheusAlertTemplates) SetLabels(v []*ListPrometheusAlertTemplatesResponseBodyPrometheusAlertTemplatesLabels) *ListPrometheusAlertTemplatesResponseBodyPrometheusAlertTemplates {
	s.Labels = v
	return s
}

func (s *ListPrometheusAlertTemplatesResponseBodyPrometheusAlertTemplates) SetType(v string) *ListPrometheusAlertTemplatesResponseBodyPrometheusAlertTemplates {
	s.Type = &v
	return s
}

func (s *ListPrometheusAlertTemplatesResponseBodyPrometheusAlertTemplates) SetVersion(v string) *ListPrometheusAlertTemplatesResponseBodyPrometheusAlertTemplates {
	s.Version = &v
	return s
}

type ListPrometheusAlertTemplatesResponseBodyPrometheusAlertTemplatesAnnotations struct {
	// example:
	//
	// message
	Name  *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s ListPrometheusAlertTemplatesResponseBodyPrometheusAlertTemplatesAnnotations) String() string {
	return tea.Prettify(s)
}

func (s ListPrometheusAlertTemplatesResponseBodyPrometheusAlertTemplatesAnnotations) GoString() string {
	return s.String()
}

func (s *ListPrometheusAlertTemplatesResponseBodyPrometheusAlertTemplatesAnnotations) SetName(v string) *ListPrometheusAlertTemplatesResponseBodyPrometheusAlertTemplatesAnnotations {
	s.Name = &v
	return s
}

func (s *ListPrometheusAlertTemplatesResponseBodyPrometheusAlertTemplatesAnnotations) SetValue(v string) *ListPrometheusAlertTemplatesResponseBodyPrometheusAlertTemplatesAnnotations {
	s.Value = &v
	return s
}

type ListPrometheusAlertTemplatesResponseBodyPrometheusAlertTemplatesLabels struct {
	// example:
	//
	// severity
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// warning
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s ListPrometheusAlertTemplatesResponseBodyPrometheusAlertTemplatesLabels) String() string {
	return tea.Prettify(s)
}

func (s ListPrometheusAlertTemplatesResponseBodyPrometheusAlertTemplatesLabels) GoString() string {
	return s.String()
}

func (s *ListPrometheusAlertTemplatesResponseBodyPrometheusAlertTemplatesLabels) SetName(v string) *ListPrometheusAlertTemplatesResponseBodyPrometheusAlertTemplatesLabels {
	s.Name = &v
	return s
}

func (s *ListPrometheusAlertTemplatesResponseBodyPrometheusAlertTemplatesLabels) SetValue(v string) *ListPrometheusAlertTemplatesResponseBodyPrometheusAlertTemplatesLabels {
	s.Value = &v
	return s
}

type ListPrometheusAlertTemplatesResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListPrometheusAlertTemplatesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListPrometheusAlertTemplatesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListPrometheusAlertTemplatesResponse) GoString() string {
	return s.String()
}

func (s *ListPrometheusAlertTemplatesResponse) SetHeaders(v map[string]*string) *ListPrometheusAlertTemplatesResponse {
	s.Headers = v
	return s
}

func (s *ListPrometheusAlertTemplatesResponse) SetStatusCode(v int32) *ListPrometheusAlertTemplatesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListPrometheusAlertTemplatesResponse) SetBody(v *ListPrometheusAlertTemplatesResponseBody) *ListPrometheusAlertTemplatesResponse {
	s.Body = v
	return s
}

type ListPrometheusGlobalViewRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ListPrometheusGlobalViewRequest) String() string {
	return tea.Prettify(s)
}

func (s ListPrometheusGlobalViewRequest) GoString() string {
	return s.String()
}

func (s *ListPrometheusGlobalViewRequest) SetRegionId(v string) *ListPrometheusGlobalViewRequest {
	s.RegionId = &v
	return s
}

type ListPrometheusGlobalViewResponseBody struct {
	// example:
	//
	// 200
	Code *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// DBDCE95A-A0DD-5FC5-97CC-EEFC3D814385
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListPrometheusGlobalViewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListPrometheusGlobalViewResponseBody) GoString() string {
	return s.String()
}

func (s *ListPrometheusGlobalViewResponseBody) SetCode(v int32) *ListPrometheusGlobalViewResponseBody {
	s.Code = &v
	return s
}

func (s *ListPrometheusGlobalViewResponseBody) SetData(v string) *ListPrometheusGlobalViewResponseBody {
	s.Data = &v
	return s
}

func (s *ListPrometheusGlobalViewResponseBody) SetMessage(v string) *ListPrometheusGlobalViewResponseBody {
	s.Message = &v
	return s
}

func (s *ListPrometheusGlobalViewResponseBody) SetRequestId(v string) *ListPrometheusGlobalViewResponseBody {
	s.RequestId = &v
	return s
}

type ListPrometheusGlobalViewResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListPrometheusGlobalViewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListPrometheusGlobalViewResponse) String() string {
	return tea.Prettify(s)
}

func (s ListPrometheusGlobalViewResponse) GoString() string {
	return s.String()
}

func (s *ListPrometheusGlobalViewResponse) SetHeaders(v map[string]*string) *ListPrometheusGlobalViewResponse {
	s.Headers = v
	return s
}

func (s *ListPrometheusGlobalViewResponse) SetStatusCode(v int32) *ListPrometheusGlobalViewResponse {
	s.StatusCode = &v
	return s
}

func (s *ListPrometheusGlobalViewResponse) SetBody(v *ListPrometheusGlobalViewResponseBody) *ListPrometheusGlobalViewResponse {
	s.Body = v
	return s
}

type ListPrometheusInstanceByTagAndResourceGroupIdRequest struct {
	// The region ID of the Prometheus instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the resource group.
	//
	// example:
	//
	// rg-acfmxyexli2****
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	// The tags.
	Tag []*ListPrometheusInstanceByTagAndResourceGroupIdRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s ListPrometheusInstanceByTagAndResourceGroupIdRequest) String() string {
	return tea.Prettify(s)
}

func (s ListPrometheusInstanceByTagAndResourceGroupIdRequest) GoString() string {
	return s.String()
}

func (s *ListPrometheusInstanceByTagAndResourceGroupIdRequest) SetRegionId(v string) *ListPrometheusInstanceByTagAndResourceGroupIdRequest {
	s.RegionId = &v
	return s
}

func (s *ListPrometheusInstanceByTagAndResourceGroupIdRequest) SetResourceGroupId(v string) *ListPrometheusInstanceByTagAndResourceGroupIdRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *ListPrometheusInstanceByTagAndResourceGroupIdRequest) SetTag(v []*ListPrometheusInstanceByTagAndResourceGroupIdRequestTag) *ListPrometheusInstanceByTagAndResourceGroupIdRequest {
	s.Tag = v
	return s
}

type ListPrometheusInstanceByTagAndResourceGroupIdRequestTag struct {
	// The key of the tag.
	//
	// example:
	//
	// fpx-tag
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The value of the tag.
	//
	// example:
	//
	// fvt-tag-value
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s ListPrometheusInstanceByTagAndResourceGroupIdRequestTag) String() string {
	return tea.Prettify(s)
}

func (s ListPrometheusInstanceByTagAndResourceGroupIdRequestTag) GoString() string {
	return s.String()
}

func (s *ListPrometheusInstanceByTagAndResourceGroupIdRequestTag) SetKey(v string) *ListPrometheusInstanceByTagAndResourceGroupIdRequestTag {
	s.Key = &v
	return s
}

func (s *ListPrometheusInstanceByTagAndResourceGroupIdRequestTag) SetValue(v string) *ListPrometheusInstanceByTagAndResourceGroupIdRequestTag {
	s.Value = &v
	return s
}

type ListPrometheusInstanceByTagAndResourceGroupIdResponseBody struct {
	// The response code. The status code 200 indicates that the request was successful. Other status codes indicate that the request failed.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The struct returned.
	Data *ListPrometheusInstanceByTagAndResourceGroupIdResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// example:
	//
	// message
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	//
	// example:
	//
	// 4789C3E9-A85A-524B-B97B-9D2B14BA06BC
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListPrometheusInstanceByTagAndResourceGroupIdResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListPrometheusInstanceByTagAndResourceGroupIdResponseBody) GoString() string {
	return s.String()
}

func (s *ListPrometheusInstanceByTagAndResourceGroupIdResponseBody) SetCode(v string) *ListPrometheusInstanceByTagAndResourceGroupIdResponseBody {
	s.Code = &v
	return s
}

func (s *ListPrometheusInstanceByTagAndResourceGroupIdResponseBody) SetData(v *ListPrometheusInstanceByTagAndResourceGroupIdResponseBodyData) *ListPrometheusInstanceByTagAndResourceGroupIdResponseBody {
	s.Data = v
	return s
}

func (s *ListPrometheusInstanceByTagAndResourceGroupIdResponseBody) SetMessage(v string) *ListPrometheusInstanceByTagAndResourceGroupIdResponseBody {
	s.Message = &v
	return s
}

func (s *ListPrometheusInstanceByTagAndResourceGroupIdResponseBody) SetRequestId(v string) *ListPrometheusInstanceByTagAndResourceGroupIdResponseBody {
	s.RequestId = &v
	return s
}

type ListPrometheusInstanceByTagAndResourceGroupIdResponseBodyData struct {
	// The queried Prometheus instances.
	PrometheusInstances []*ListPrometheusInstanceByTagAndResourceGroupIdResponseBodyDataPrometheusInstances `json:"PrometheusInstances,omitempty" xml:"PrometheusInstances,omitempty" type:"Repeated"`
}

func (s ListPrometheusInstanceByTagAndResourceGroupIdResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListPrometheusInstanceByTagAndResourceGroupIdResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListPrometheusInstanceByTagAndResourceGroupIdResponseBodyData) SetPrometheusInstances(v []*ListPrometheusInstanceByTagAndResourceGroupIdResponseBodyDataPrometheusInstances) *ListPrometheusInstanceByTagAndResourceGroupIdResponseBodyData {
	s.PrometheusInstances = v
	return s
}

type ListPrometheusInstanceByTagAndResourceGroupIdResponseBodyDataPrometheusInstances struct {
	// Auth Token string.
	//
	// example:
	//
	// ad32dxxxx
	AuthToken *string `json:"AuthToken,omitempty" xml:"AuthToken,omitempty"`
	// The ID of the Prometheus instance.
	//
	// example:
	//
	// c9d5dda1aeca64220853ace304baeb03d
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	// The name of the Prometheus instance.
	//
	// example:
	//
	// prom1
	ClusterName *string `json:"ClusterName,omitempty" xml:"ClusterName,omitempty"`
	// The type of the cluster. Valid values: remote-write: Prometheus instance for remote write.
	//
	// 	- ecs: Prometheus instances for ECS.
	//
	// 	- cloud-monitor: Prometheus instance for Alibaba Cloud services in the Chinese mainland.
	//
	// 	- cloud-product: Prometheus instance for Alibaba Cloud services outside China.
	//
	// 	- global-view: Prometheus instance for GlobalView.
	//
	// 	- aliyun-cs: Prometheus instance for Container Service.
	//
	// example:
	//
	// ecs
	ClusterType *string `json:"ClusterType,omitempty" xml:"ClusterType,omitempty"`
	// The ID of the Grafana workspace.
	//
	// example:
	//
	// grafana-rnggfvhlcdl6m71l**
	GrafanaInstanceId *string `json:"GrafanaInstanceId,omitempty" xml:"GrafanaInstanceId,omitempty"`
	// HTTP Api internet url.
	//
	// example:
	//
	// http://cn-beijing.arms.aliyuncs.com:9090/api/v1/prometheus/xxx/cn-beijing
	HttpApiInterUrl *string `json:"HttpApiInterUrl,omitempty" xml:"HttpApiInterUrl,omitempty"`
	// HTTP Api intranet url.
	//
	// example:
	//
	// http://cn-beijing-intranet.arms.aliyuncs.com:9090/api/v1/prometheus/xxx/cn-beijing
	HttpApiIntraUrl *string `json:"HttpApiIntraUrl,omitempty" xml:"HttpApiIntraUrl,omitempty"`
	// The billing method. Valid values:
	//
	// 	- PREPAY: subscription.
	//
	// 	- POSTPAY: pay-as-you-go.
	//
	// example:
	//
	// POSTPAY
	PaymentType *string `json:"PaymentType,omitempty" xml:"PaymentType,omitempty"`
	// Push Gateway internet url.
	//
	// example:
	//
	// http://cn-beijing.arms.aliyuncs.com/prometheus/xxx/api/v2
	PushGatewayInterUrl *string `json:"PushGatewayInterUrl,omitempty" xml:"PushGatewayInterUrl,omitempty"`
	// Push Gateway intranet url.
	//
	// example:
	//
	// http://cn-beijing-intranet.arms.aliyuncs.com/prometheus/xxx/api/v2
	PushGatewayIntraUrl *string `json:"PushGatewayIntraUrl,omitempty" xml:"PushGatewayIntraUrl,omitempty"`
	// The region ID of the Prometheus instance.
	//
	// example:
	//
	// cn-shanghai
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// Remote Read internet url.
	//
	// example:
	//
	// http://cn-beijing.arms.aliyuncs.com:9090/api/v1/prometheus/xxx/api/v1/read
	RemoteReadInterUrl *string `json:"RemoteReadInterUrl,omitempty" xml:"RemoteReadInterUrl,omitempty"`
	// Remote Read intranet url.
	//
	// example:
	//
	// http://cn-beijing-intranet.arms.aliyuncs.com:9090/api/v1/prometheus/xxx/api/v1/read
	RemoteReadIntraUrl *string `json:"RemoteReadIntraUrl,omitempty" xml:"RemoteReadIntraUrl,omitempty"`
	// Remote Write internet url.
	//
	// example:
	//
	// http://cn-beijing.arms.aliyuncs.com/prometheus/xxx/api/v3/write
	RemoteWriteInterUrl *string `json:"RemoteWriteInterUrl,omitempty" xml:"RemoteWriteInterUrl,omitempty"`
	// Remote Write intranet url.
	//
	// example:
	//
	// http://cn-beijing-intranet.arms.aliyuncs.com/prometheus/xxx/api/v3/write
	RemoteWriteIntraUrl *string `json:"RemoteWriteIntraUrl,omitempty" xml:"RemoteWriteIntraUrl,omitempty"`
	// The ID of the resource group to which the Prometheus instance belongs.
	//
	// example:
	//
	// rg-acfmz7nocpeidcy
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	// Resource type.
	//
	// example:
	//
	// PROMETHEUS
	ResourceType *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	// The ID of the security group.
	//
	// example:
	//
	// sg-f8zd1toc10wmbi1v5rom
	SecurityGroupId *string `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
	// The child instances of the Prometheus instance for GlobalView instance. The value is a JSON string.
	//
	// example:
	//
	// [ { "headers": {}, "regionId": "cn-hangzhou", "sourceType": "AlibabaPrometheus", "extras": {}, "clusterId": "c39a1048921e04fceb039db2fb\\*\\*\\*\\*", "sourceName": "arms-luyao-test", "dataSource": "", "userId": "167275301789\\*\\*\\*\\*" }, { "headers": {}, "regionId": "cn-beijing", "sourceType": "AlibabaPrometheus", "extras": {}, "clusterId": "c6b6485496d5b400abde22cb47b5\\*\\*\\*\\*", "sourceName": "agent-321-test", "dataSource": "", "userId": "167275301789\\*\\*\\*\\*" }, { "headers": {}, "regionId": "cn-zhangjiakou", "sourceType": "AlibabaPrometheus", "extras": {}, "clusterId": "c261a4f3200c446659133f1ade78\\*\\*\\*\\*", "sourceName": "zaifeng-cardinality-01", "dataSource": "", "userId": "167275301789\\*\\*\\*\\*" } ]
	SubClustersJson *string `json:"SubClustersJson,omitempty" xml:"SubClustersJson,omitempty"`
	// The tags.
	Tags []*ListPrometheusInstanceByTagAndResourceGroupIdResponseBodyDataPrometheusInstancesTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
	// The ID of the user.
	//
	// example:
	//
	// 1672753017899***
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	// The ID of the vSwitch.
	//
	// example:
	//
	// vsw-f8z73vcja1tqnw90aav5a
	VSwitchId *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	// The ID of the virtual private cloud (VPC).
	//
	// example:
	//
	// vpc-8vbtp1fsm8mir18l8rl0u
	VpcId *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
}

func (s ListPrometheusInstanceByTagAndResourceGroupIdResponseBodyDataPrometheusInstances) String() string {
	return tea.Prettify(s)
}

func (s ListPrometheusInstanceByTagAndResourceGroupIdResponseBodyDataPrometheusInstances) GoString() string {
	return s.String()
}

func (s *ListPrometheusInstanceByTagAndResourceGroupIdResponseBodyDataPrometheusInstances) SetAuthToken(v string) *ListPrometheusInstanceByTagAndResourceGroupIdResponseBodyDataPrometheusInstances {
	s.AuthToken = &v
	return s
}

func (s *ListPrometheusInstanceByTagAndResourceGroupIdResponseBodyDataPrometheusInstances) SetClusterId(v string) *ListPrometheusInstanceByTagAndResourceGroupIdResponseBodyDataPrometheusInstances {
	s.ClusterId = &v
	return s
}

func (s *ListPrometheusInstanceByTagAndResourceGroupIdResponseBodyDataPrometheusInstances) SetClusterName(v string) *ListPrometheusInstanceByTagAndResourceGroupIdResponseBodyDataPrometheusInstances {
	s.ClusterName = &v
	return s
}

func (s *ListPrometheusInstanceByTagAndResourceGroupIdResponseBodyDataPrometheusInstances) SetClusterType(v string) *ListPrometheusInstanceByTagAndResourceGroupIdResponseBodyDataPrometheusInstances {
	s.ClusterType = &v
	return s
}

func (s *ListPrometheusInstanceByTagAndResourceGroupIdResponseBodyDataPrometheusInstances) SetGrafanaInstanceId(v string) *ListPrometheusInstanceByTagAndResourceGroupIdResponseBodyDataPrometheusInstances {
	s.GrafanaInstanceId = &v
	return s
}

func (s *ListPrometheusInstanceByTagAndResourceGroupIdResponseBodyDataPrometheusInstances) SetHttpApiInterUrl(v string) *ListPrometheusInstanceByTagAndResourceGroupIdResponseBodyDataPrometheusInstances {
	s.HttpApiInterUrl = &v
	return s
}

func (s *ListPrometheusInstanceByTagAndResourceGroupIdResponseBodyDataPrometheusInstances) SetHttpApiIntraUrl(v string) *ListPrometheusInstanceByTagAndResourceGroupIdResponseBodyDataPrometheusInstances {
	s.HttpApiIntraUrl = &v
	return s
}

func (s *ListPrometheusInstanceByTagAndResourceGroupIdResponseBodyDataPrometheusInstances) SetPaymentType(v string) *ListPrometheusInstanceByTagAndResourceGroupIdResponseBodyDataPrometheusInstances {
	s.PaymentType = &v
	return s
}

func (s *ListPrometheusInstanceByTagAndResourceGroupIdResponseBodyDataPrometheusInstances) SetPushGatewayInterUrl(v string) *ListPrometheusInstanceByTagAndResourceGroupIdResponseBodyDataPrometheusInstances {
	s.PushGatewayInterUrl = &v
	return s
}

func (s *ListPrometheusInstanceByTagAndResourceGroupIdResponseBodyDataPrometheusInstances) SetPushGatewayIntraUrl(v string) *ListPrometheusInstanceByTagAndResourceGroupIdResponseBodyDataPrometheusInstances {
	s.PushGatewayIntraUrl = &v
	return s
}

func (s *ListPrometheusInstanceByTagAndResourceGroupIdResponseBodyDataPrometheusInstances) SetRegionId(v string) *ListPrometheusInstanceByTagAndResourceGroupIdResponseBodyDataPrometheusInstances {
	s.RegionId = &v
	return s
}

func (s *ListPrometheusInstanceByTagAndResourceGroupIdResponseBodyDataPrometheusInstances) SetRemoteReadInterUrl(v string) *ListPrometheusInstanceByTagAndResourceGroupIdResponseBodyDataPrometheusInstances {
	s.RemoteReadInterUrl = &v
	return s
}

func (s *ListPrometheusInstanceByTagAndResourceGroupIdResponseBodyDataPrometheusInstances) SetRemoteReadIntraUrl(v string) *ListPrometheusInstanceByTagAndResourceGroupIdResponseBodyDataPrometheusInstances {
	s.RemoteReadIntraUrl = &v
	return s
}

func (s *ListPrometheusInstanceByTagAndResourceGroupIdResponseBodyDataPrometheusInstances) SetRemoteWriteInterUrl(v string) *ListPrometheusInstanceByTagAndResourceGroupIdResponseBodyDataPrometheusInstances {
	s.RemoteWriteInterUrl = &v
	return s
}

func (s *ListPrometheusInstanceByTagAndResourceGroupIdResponseBodyDataPrometheusInstances) SetRemoteWriteIntraUrl(v string) *ListPrometheusInstanceByTagAndResourceGroupIdResponseBodyDataPrometheusInstances {
	s.RemoteWriteIntraUrl = &v
	return s
}

func (s *ListPrometheusInstanceByTagAndResourceGroupIdResponseBodyDataPrometheusInstances) SetResourceGroupId(v string) *ListPrometheusInstanceByTagAndResourceGroupIdResponseBodyDataPrometheusInstances {
	s.ResourceGroupId = &v
	return s
}

func (s *ListPrometheusInstanceByTagAndResourceGroupIdResponseBodyDataPrometheusInstances) SetResourceType(v string) *ListPrometheusInstanceByTagAndResourceGroupIdResponseBodyDataPrometheusInstances {
	s.ResourceType = &v
	return s
}

func (s *ListPrometheusInstanceByTagAndResourceGroupIdResponseBodyDataPrometheusInstances) SetSecurityGroupId(v string) *ListPrometheusInstanceByTagAndResourceGroupIdResponseBodyDataPrometheusInstances {
	s.SecurityGroupId = &v
	return s
}

func (s *ListPrometheusInstanceByTagAndResourceGroupIdResponseBodyDataPrometheusInstances) SetSubClustersJson(v string) *ListPrometheusInstanceByTagAndResourceGroupIdResponseBodyDataPrometheusInstances {
	s.SubClustersJson = &v
	return s
}

func (s *ListPrometheusInstanceByTagAndResourceGroupIdResponseBodyDataPrometheusInstances) SetTags(v []*ListPrometheusInstanceByTagAndResourceGroupIdResponseBodyDataPrometheusInstancesTags) *ListPrometheusInstanceByTagAndResourceGroupIdResponseBodyDataPrometheusInstances {
	s.Tags = v
	return s
}

func (s *ListPrometheusInstanceByTagAndResourceGroupIdResponseBodyDataPrometheusInstances) SetUserId(v string) *ListPrometheusInstanceByTagAndResourceGroupIdResponseBodyDataPrometheusInstances {
	s.UserId = &v
	return s
}

func (s *ListPrometheusInstanceByTagAndResourceGroupIdResponseBodyDataPrometheusInstances) SetVSwitchId(v string) *ListPrometheusInstanceByTagAndResourceGroupIdResponseBodyDataPrometheusInstances {
	s.VSwitchId = &v
	return s
}

func (s *ListPrometheusInstanceByTagAndResourceGroupIdResponseBodyDataPrometheusInstances) SetVpcId(v string) *ListPrometheusInstanceByTagAndResourceGroupIdResponseBodyDataPrometheusInstances {
	s.VpcId = &v
	return s
}

type ListPrometheusInstanceByTagAndResourceGroupIdResponseBodyDataPrometheusInstancesTags struct {
	// The key of the tag.
	//
	// example:
	//
	// ac-cus-tag-3
	TagKey *string `json:"TagKey,omitempty" xml:"TagKey,omitempty"`
	// The value of the tag.
	//
	// example:
	//
	// asg-2vc8qq7x89o11rus9uvu
	TagValue *string `json:"TagValue,omitempty" xml:"TagValue,omitempty"`
}

func (s ListPrometheusInstanceByTagAndResourceGroupIdResponseBodyDataPrometheusInstancesTags) String() string {
	return tea.Prettify(s)
}

func (s ListPrometheusInstanceByTagAndResourceGroupIdResponseBodyDataPrometheusInstancesTags) GoString() string {
	return s.String()
}

func (s *ListPrometheusInstanceByTagAndResourceGroupIdResponseBodyDataPrometheusInstancesTags) SetTagKey(v string) *ListPrometheusInstanceByTagAndResourceGroupIdResponseBodyDataPrometheusInstancesTags {
	s.TagKey = &v
	return s
}

func (s *ListPrometheusInstanceByTagAndResourceGroupIdResponseBodyDataPrometheusInstancesTags) SetTagValue(v string) *ListPrometheusInstanceByTagAndResourceGroupIdResponseBodyDataPrometheusInstancesTags {
	s.TagValue = &v
	return s
}

type ListPrometheusInstanceByTagAndResourceGroupIdResponse struct {
	Headers    map[string]*string                                         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListPrometheusInstanceByTagAndResourceGroupIdResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListPrometheusInstanceByTagAndResourceGroupIdResponse) String() string {
	return tea.Prettify(s)
}

func (s ListPrometheusInstanceByTagAndResourceGroupIdResponse) GoString() string {
	return s.String()
}

func (s *ListPrometheusInstanceByTagAndResourceGroupIdResponse) SetHeaders(v map[string]*string) *ListPrometheusInstanceByTagAndResourceGroupIdResponse {
	s.Headers = v
	return s
}

func (s *ListPrometheusInstanceByTagAndResourceGroupIdResponse) SetStatusCode(v int32) *ListPrometheusInstanceByTagAndResourceGroupIdResponse {
	s.StatusCode = &v
	return s
}

func (s *ListPrometheusInstanceByTagAndResourceGroupIdResponse) SetBody(v *ListPrometheusInstanceByTagAndResourceGroupIdResponseBody) *ListPrometheusInstanceByTagAndResourceGroupIdResponse {
	s.Body = v
	return s
}

type ListPrometheusInstancesRequest struct {
	// Optional instance types (if left blank, all types of instances will be queried):
	//
	// - cloud-product-prometheus
	//
	// - ManagedKubernetes
	//
	// - satellite
	//
	// - Ask
	//
	// - remote-write-prometheus
	//
	// - cloud-monitor-cmee
	//
	// - ExternalKubernetes
	//
	// - vpc-prometheus
	//
	// - cloud-monitor-direct
	//
	// - Edge Kubernetes
	//
	// example:
	//
	// cloud-product-prometheus
	ClusterType *string `json:"ClusterType,omitempty" xml:"ClusterType,omitempty"`
	// The ID of the region.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// Specifies whether to query global aggregation instances. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// This parameter is required.
	//
	// example:
	//
	// true
	ShowGlobalView *bool `json:"ShowGlobalView,omitempty" xml:"ShowGlobalView,omitempty"`
}

func (s ListPrometheusInstancesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListPrometheusInstancesRequest) GoString() string {
	return s.String()
}

func (s *ListPrometheusInstancesRequest) SetClusterType(v string) *ListPrometheusInstancesRequest {
	s.ClusterType = &v
	return s
}

func (s *ListPrometheusInstancesRequest) SetRegionId(v string) *ListPrometheusInstancesRequest {
	s.RegionId = &v
	return s
}

func (s *ListPrometheusInstancesRequest) SetShowGlobalView(v bool) *ListPrometheusInstancesRequest {
	s.ShowGlobalView = &v
	return s
}

type ListPrometheusInstancesResponseBody struct {
	// The status code. The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The Prometheus instances in the region in the JSON format.
	//
	// example:
	//
	// [{"agentStatus":"0","clusterId":"global-v2-cn-1672753017899-dmjnwtzz","clusterName":"test-GlobalView","clusterType":"GlobalViewV2","commercialConfig":{},"createTime":1656579981000,"id":13785300,"isAdvancedClusterInstalled":false,"isClusterRunning":true,"isControllerInstalled":true,"isIntegrationCenter":false,"regionId":"cn-hongkong","updateTime":1657616273000,"userId":"1672753017899"},{"agentStatus":"0","clusterId":"51a123a61a8f31f0","clusterName":"cloud-product-prometheus_cn-qingdao","clusterType":"cloud-product-prometheus","commercialConfig":{},"controllerId":"51a123a61a8f31f0","createTime":1653532488000,"id":13746658,"isAdvancedClusterInstalled":false,"isClusterRunning":true,"isControllerInstalled":true,"isIntegrationCenter":false,"regionId":"cn-qingdao","updateTime":1653532518000,"userId":"1672753017899"}]
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// The returned message.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID. You can use the ID to query logs and troubleshoot issues.
	//
	// example:
	//
	// E9C9DA3D-10FE-472E-9EEF-2D0A3E41****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListPrometheusInstancesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListPrometheusInstancesResponseBody) GoString() string {
	return s.String()
}

func (s *ListPrometheusInstancesResponseBody) SetCode(v int32) *ListPrometheusInstancesResponseBody {
	s.Code = &v
	return s
}

func (s *ListPrometheusInstancesResponseBody) SetData(v string) *ListPrometheusInstancesResponseBody {
	s.Data = &v
	return s
}

func (s *ListPrometheusInstancesResponseBody) SetMessage(v string) *ListPrometheusInstancesResponseBody {
	s.Message = &v
	return s
}

func (s *ListPrometheusInstancesResponseBody) SetRequestId(v string) *ListPrometheusInstancesResponseBody {
	s.RequestId = &v
	return s
}

type ListPrometheusInstancesResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListPrometheusInstancesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListPrometheusInstancesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListPrometheusInstancesResponse) GoString() string {
	return s.String()
}

func (s *ListPrometheusInstancesResponse) SetHeaders(v map[string]*string) *ListPrometheusInstancesResponse {
	s.Headers = v
	return s
}

func (s *ListPrometheusInstancesResponse) SetStatusCode(v int32) *ListPrometheusInstancesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListPrometheusInstancesResponse) SetBody(v *ListPrometheusInstancesResponseBody) *ListPrometheusInstancesResponse {
	s.Body = v
	return s
}

type ListPrometheusIntegrationRequest struct {
	// The ID of the Prometheus instance. Only aliyun-cs and ecs instances are supported.
	//
	// This parameter is required.
	//
	// example:
	//
	// c77f6f2397ea74672872acf5e31374a27
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	// The integration type.
	//
	// This parameter is required.
	//
	// example:
	//
	// kafka, mysql, redis, snmp, emr, nubela, and tidb
	IntegrationType *string `json:"IntegrationType,omitempty" xml:"IntegrationType,omitempty"`
	// The region ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ListPrometheusIntegrationRequest) String() string {
	return tea.Prettify(s)
}

func (s ListPrometheusIntegrationRequest) GoString() string {
	return s.String()
}

func (s *ListPrometheusIntegrationRequest) SetClusterId(v string) *ListPrometheusIntegrationRequest {
	s.ClusterId = &v
	return s
}

func (s *ListPrometheusIntegrationRequest) SetIntegrationType(v string) *ListPrometheusIntegrationRequest {
	s.IntegrationType = &v
	return s
}

func (s *ListPrometheusIntegrationRequest) SetRegionId(v string) *ListPrometheusIntegrationRequest {
	s.RegionId = &v
	return s
}

type ListPrometheusIntegrationResponseBody struct {
	// The response code. The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The queried exporters.
	Data []*ListPrometheusIntegrationResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// The returned message.
	//
	// example:
	//
	// message
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	//
	// example:
	//
	// 1F1D8840-5330-5804-A8DB-C3C5C5CED6BB
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListPrometheusIntegrationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListPrometheusIntegrationResponseBody) GoString() string {
	return s.String()
}

func (s *ListPrometheusIntegrationResponseBody) SetCode(v int32) *ListPrometheusIntegrationResponseBody {
	s.Code = &v
	return s
}

func (s *ListPrometheusIntegrationResponseBody) SetData(v []*ListPrometheusIntegrationResponseBodyData) *ListPrometheusIntegrationResponseBody {
	s.Data = v
	return s
}

func (s *ListPrometheusIntegrationResponseBody) SetMessage(v string) *ListPrometheusIntegrationResponseBody {
	s.Message = &v
	return s
}

func (s *ListPrometheusIntegrationResponseBody) SetRequestId(v string) *ListPrometheusIntegrationResponseBody {
	s.RequestId = &v
	return s
}

type ListPrometheusIntegrationResponseBodyData struct {
	// Indicates whether the exporter can be deleted.
	//
	// example:
	//
	// true
	CanDelete *bool `json:"CanDelete,omitempty" xml:"CanDelete,omitempty"`
	// Indicates whether the exporter can be edited.
	//
	// example:
	//
	// true
	CanEditor *bool `json:"CanEditor,omitempty" xml:"CanEditor,omitempty"`
	// The ID of the Prometheus instance.
	//
	// example:
	//
	// c589a1b8db05c4561aefbb898ca8fb1cf
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	// The name of the container.
	//
	// example:
	//
	// container-1
	ContainerName *string `json:"ContainerName,omitempty" xml:"ContainerName,omitempty"`
	// The description of the exporter.
	//
	// example:
	//
	// "{}"
	Describe *string `json:"Describe,omitempty" xml:"Describe,omitempty"`
	// The type of the exporter.
	//
	// example:
	//
	// kafka-exporter
	ExporterType *string `json:"ExporterType,omitempty" xml:"ExporterType,omitempty"`
	// The exporter ID.
	//
	// example:
	//
	// 29374
	InstanceId *int64 `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The name of the exporter.
	//
	// example:
	//
	// inet
	InstanceName *string `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	// The integration type.
	//
	// example:
	//
	// Kafka, mysql, redis, snmp, emr, nubela, and tidb
	IntegrationType *string `json:"IntegrationType,omitempty" xml:"IntegrationType,omitempty"`
	// The namespace.
	//
	// example:
	//
	// arms-prom
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// Indicates whether an upgrade is required.
	//
	// example:
	//
	// true
	NeedUpgrade *bool `json:"NeedUpgrade,omitempty" xml:"NeedUpgrade,omitempty"`
	// The configurations of the exporter. The value is a JSON string.
	//
	// example:
	//
	// {
	//
	//       "port": "5554",
	//
	//       "name": "kafka-test12",
	//
	//       "kafka_instance": "kafka-test",
	//
	//       "__label_value": "kafka-test",
	//
	//       "scrape_interval": 33,
	//
	//       "metrics_path": "/metrics",
	//
	//       "__label_key": "kafka-test"
	//
	// }
	Param *string `json:"Param,omitempty" xml:"Param,omitempty"`
	// The pod name of the exporter.
	//
	// example:
	//
	// kafka-exporter-1
	PodName *string `json:"PodName,omitempty" xml:"PodName,omitempty"`
	// Indicates whether the description is displayed.
	//
	// example:
	//
	// true
	ShowDescribe *bool `json:"ShowDescribe,omitempty" xml:"ShowDescribe,omitempty"`
	// Indicates whether the exporter logs are displayed.
	//
	// example:
	//
	// true
	ShowLog *bool `json:"ShowLog,omitempty" xml:"ShowLog,omitempty"`
	// The state of the exporter.
	//
	// example:
	//
	// installed
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The monitored IP address.
	//
	// example:
	//
	// 121.40.62.240:3342
	Target *string `json:"Target,omitempty" xml:"Target,omitempty"`
	// The version number.
	//
	// example:
	//
	// 1.0.0
	Version *string `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s ListPrometheusIntegrationResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListPrometheusIntegrationResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListPrometheusIntegrationResponseBodyData) SetCanDelete(v bool) *ListPrometheusIntegrationResponseBodyData {
	s.CanDelete = &v
	return s
}

func (s *ListPrometheusIntegrationResponseBodyData) SetCanEditor(v bool) *ListPrometheusIntegrationResponseBodyData {
	s.CanEditor = &v
	return s
}

func (s *ListPrometheusIntegrationResponseBodyData) SetClusterId(v string) *ListPrometheusIntegrationResponseBodyData {
	s.ClusterId = &v
	return s
}

func (s *ListPrometheusIntegrationResponseBodyData) SetContainerName(v string) *ListPrometheusIntegrationResponseBodyData {
	s.ContainerName = &v
	return s
}

func (s *ListPrometheusIntegrationResponseBodyData) SetDescribe(v string) *ListPrometheusIntegrationResponseBodyData {
	s.Describe = &v
	return s
}

func (s *ListPrometheusIntegrationResponseBodyData) SetExporterType(v string) *ListPrometheusIntegrationResponseBodyData {
	s.ExporterType = &v
	return s
}

func (s *ListPrometheusIntegrationResponseBodyData) SetInstanceId(v int64) *ListPrometheusIntegrationResponseBodyData {
	s.InstanceId = &v
	return s
}

func (s *ListPrometheusIntegrationResponseBodyData) SetInstanceName(v string) *ListPrometheusIntegrationResponseBodyData {
	s.InstanceName = &v
	return s
}

func (s *ListPrometheusIntegrationResponseBodyData) SetIntegrationType(v string) *ListPrometheusIntegrationResponseBodyData {
	s.IntegrationType = &v
	return s
}

func (s *ListPrometheusIntegrationResponseBodyData) SetNamespace(v string) *ListPrometheusIntegrationResponseBodyData {
	s.Namespace = &v
	return s
}

func (s *ListPrometheusIntegrationResponseBodyData) SetNeedUpgrade(v bool) *ListPrometheusIntegrationResponseBodyData {
	s.NeedUpgrade = &v
	return s
}

func (s *ListPrometheusIntegrationResponseBodyData) SetParam(v string) *ListPrometheusIntegrationResponseBodyData {
	s.Param = &v
	return s
}

func (s *ListPrometheusIntegrationResponseBodyData) SetPodName(v string) *ListPrometheusIntegrationResponseBodyData {
	s.PodName = &v
	return s
}

func (s *ListPrometheusIntegrationResponseBodyData) SetShowDescribe(v bool) *ListPrometheusIntegrationResponseBodyData {
	s.ShowDescribe = &v
	return s
}

func (s *ListPrometheusIntegrationResponseBodyData) SetShowLog(v bool) *ListPrometheusIntegrationResponseBodyData {
	s.ShowLog = &v
	return s
}

func (s *ListPrometheusIntegrationResponseBodyData) SetStatus(v string) *ListPrometheusIntegrationResponseBodyData {
	s.Status = &v
	return s
}

func (s *ListPrometheusIntegrationResponseBodyData) SetTarget(v string) *ListPrometheusIntegrationResponseBodyData {
	s.Target = &v
	return s
}

func (s *ListPrometheusIntegrationResponseBodyData) SetVersion(v string) *ListPrometheusIntegrationResponseBodyData {
	s.Version = &v
	return s
}

type ListPrometheusIntegrationResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListPrometheusIntegrationResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListPrometheusIntegrationResponse) String() string {
	return tea.Prettify(s)
}

func (s ListPrometheusIntegrationResponse) GoString() string {
	return s.String()
}

func (s *ListPrometheusIntegrationResponse) SetHeaders(v map[string]*string) *ListPrometheusIntegrationResponse {
	s.Headers = v
	return s
}

func (s *ListPrometheusIntegrationResponse) SetStatusCode(v int32) *ListPrometheusIntegrationResponse {
	s.StatusCode = &v
	return s
}

func (s *ListPrometheusIntegrationResponse) SetBody(v *ListPrometheusIntegrationResponseBody) *ListPrometheusIntegrationResponse {
	s.Body = v
	return s
}

type ListPrometheusMonitoringRequest struct {
	// The ID of the Prometheus instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// cc7a37ee31aea4ed1a059eff8034b****
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	// The region ID. Default value: `cn-hangzhou`.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The type of the monitoring configuration. Valid values for a Prometheus instance for Container Service: serviceMonitor, podMonitor, customJob, and probe. Valid values for a Prometheus instance for ECS: customJob and probe.
	//
	// if can be null:
	// true
	//
	// example:
	//
	// serviceMonitor
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListPrometheusMonitoringRequest) String() string {
	return tea.Prettify(s)
}

func (s ListPrometheusMonitoringRequest) GoString() string {
	return s.String()
}

func (s *ListPrometheusMonitoringRequest) SetClusterId(v string) *ListPrometheusMonitoringRequest {
	s.ClusterId = &v
	return s
}

func (s *ListPrometheusMonitoringRequest) SetRegionId(v string) *ListPrometheusMonitoringRequest {
	s.RegionId = &v
	return s
}

func (s *ListPrometheusMonitoringRequest) SetType(v string) *ListPrometheusMonitoringRequest {
	s.Type = &v
	return s
}

type ListPrometheusMonitoringResponseBody struct {
	// The status code. The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned struct.
	Data []*ListPrometheusMonitoringResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// The returned message.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// D80ADAAC-8C32-5479-BD14-C28CF832****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListPrometheusMonitoringResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListPrometheusMonitoringResponseBody) GoString() string {
	return s.String()
}

func (s *ListPrometheusMonitoringResponseBody) SetCode(v int32) *ListPrometheusMonitoringResponseBody {
	s.Code = &v
	return s
}

func (s *ListPrometheusMonitoringResponseBody) SetData(v []*ListPrometheusMonitoringResponseBodyData) *ListPrometheusMonitoringResponseBody {
	s.Data = v
	return s
}

func (s *ListPrometheusMonitoringResponseBody) SetMessage(v string) *ListPrometheusMonitoringResponseBody {
	s.Message = &v
	return s
}

func (s *ListPrometheusMonitoringResponseBody) SetRequestId(v string) *ListPrometheusMonitoringResponseBody {
	s.RequestId = &v
	return s
}

type ListPrometheusMonitoringResponseBodyData struct {
	// Prometheus Instance ID.
	//
	// example:
	//
	// c589a1b8db05c4561aefbb898ca8fb1cf
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	// The monitoring configuration. The value is a YAML string.
	ConfigYaml *string `json:"ConfigYaml,omitempty" xml:"ConfigYaml,omitempty"`
	// The name of the monitoring configuration.
	//
	// example:
	//
	// podMonitor1
	MonitoringName *string `json:"MonitoringName,omitempty" xml:"MonitoringName,omitempty"`
	// The status of the monitoring configuration.
	//
	// example:
	//
	// run
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The type of the monitoring configuration.
	//
	// example:
	//
	// podMonitor
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListPrometheusMonitoringResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListPrometheusMonitoringResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListPrometheusMonitoringResponseBodyData) SetClusterId(v string) *ListPrometheusMonitoringResponseBodyData {
	s.ClusterId = &v
	return s
}

func (s *ListPrometheusMonitoringResponseBodyData) SetConfigYaml(v string) *ListPrometheusMonitoringResponseBodyData {
	s.ConfigYaml = &v
	return s
}

func (s *ListPrometheusMonitoringResponseBodyData) SetMonitoringName(v string) *ListPrometheusMonitoringResponseBodyData {
	s.MonitoringName = &v
	return s
}

func (s *ListPrometheusMonitoringResponseBodyData) SetStatus(v string) *ListPrometheusMonitoringResponseBodyData {
	s.Status = &v
	return s
}

func (s *ListPrometheusMonitoringResponseBodyData) SetType(v string) *ListPrometheusMonitoringResponseBodyData {
	s.Type = &v
	return s
}

type ListPrometheusMonitoringResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListPrometheusMonitoringResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListPrometheusMonitoringResponse) String() string {
	return tea.Prettify(s)
}

func (s ListPrometheusMonitoringResponse) GoString() string {
	return s.String()
}

func (s *ListPrometheusMonitoringResponse) SetHeaders(v map[string]*string) *ListPrometheusMonitoringResponse {
	s.Headers = v
	return s
}

func (s *ListPrometheusMonitoringResponse) SetStatusCode(v int32) *ListPrometheusMonitoringResponse {
	s.StatusCode = &v
	return s
}

func (s *ListPrometheusMonitoringResponse) SetBody(v *ListPrometheusMonitoringResponseBody) *ListPrometheusMonitoringResponse {
	s.Body = v
	return s
}

type ListPrometheusRemoteWritesRequest struct {
	// The ID of the Prometheus instance. Only a Prometheus instance for Container Service or a Prometheus instance for ECS is supported.
	//
	// This parameter is required.
	//
	// example:
	//
	// cc7a37ee31aea4ed1a059eff8034b\\*\\*\\*\\	- or vpc-\\*\\*\\*\\*
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	// The region ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ListPrometheusRemoteWritesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListPrometheusRemoteWritesRequest) GoString() string {
	return s.String()
}

func (s *ListPrometheusRemoteWritesRequest) SetClusterId(v string) *ListPrometheusRemoteWritesRequest {
	s.ClusterId = &v
	return s
}

func (s *ListPrometheusRemoteWritesRequest) SetRegionId(v string) *ListPrometheusRemoteWritesRequest {
	s.RegionId = &v
	return s
}

type ListPrometheusRemoteWritesResponseBody struct {
	// The status code. The status code 200 indicates that the request was successful. If another status code is returned, the request failed.
	//
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The remote write configuration items returned.
	//
	// example:
	//
	// [
	//
	//   {
	//
	//     "name": "TiDBxxx",
	//
	//     "yaml": "remote_write:\\\\n- basic_auth: {password: \\"******\\", username: xxx}\\\\n  name: TiDBxxx\\\\n  write_relabel_configs:\\\\n  - regex: si-6e2ca86444db4e55a7c1\\\\n    source_labels: [instance_id]\\\\n    action: keep\\\\n    separator: ;\\\\n    replacement: $1\\\\n  url: http://xxx:8080/prometheus/xxx/ddd/cn-hangzhou/api/v3/write\\\\n"
	//
	//   },
	//
	//   {
	//
	//     "name": "TiDBxxx1",
	//
	//     "yaml": "remote_write:\\\\n- basic_auth: {password: \\"******\\", username: xxx}\\\\n  name: TiDBxxx1\\\\n  write_relabel_configs:\\\\n  - regex: si-6e2ca86444db4e55a7c1\\\\n    source_labels: [instance_id]\\\\n    action: keep\\\\n    separator: ;\\\\n    replacement: $1\\\\n  url: http://xxx:8080/prometheus/xxx/ddd/cn-hangzhou/api/v3/write\\\\n"
	//
	//   }
	//
	// ]
	Data []*ListPrometheusRemoteWritesResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// The message returned.
	//
	// example:
	//
	// message
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 9319A57D-2D9E-472A-B69B-CF3CD16D****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values: true and false.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListPrometheusRemoteWritesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListPrometheusRemoteWritesResponseBody) GoString() string {
	return s.String()
}

func (s *ListPrometheusRemoteWritesResponseBody) SetCode(v int32) *ListPrometheusRemoteWritesResponseBody {
	s.Code = &v
	return s
}

func (s *ListPrometheusRemoteWritesResponseBody) SetData(v []*ListPrometheusRemoteWritesResponseBodyData) *ListPrometheusRemoteWritesResponseBody {
	s.Data = v
	return s
}

func (s *ListPrometheusRemoteWritesResponseBody) SetMessage(v string) *ListPrometheusRemoteWritesResponseBody {
	s.Message = &v
	return s
}

func (s *ListPrometheusRemoteWritesResponseBody) SetRequestId(v string) *ListPrometheusRemoteWritesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListPrometheusRemoteWritesResponseBody) SetSuccess(v bool) *ListPrometheusRemoteWritesResponseBody {
	s.Success = &v
	return s
}

type ListPrometheusRemoteWritesResponseBodyData struct {
	// The ID of the Prometheus instance.
	//
	// example:
	//
	// c589a1b8db05c4561aefbb898ca8fb1cf
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	// The name of the remote write configuration item.
	//
	// example:
	//
	// abc123
	RemoteWriteName *string `json:"RemoteWriteName,omitempty" xml:"RemoteWriteName,omitempty"`
	// The information about the queried remote write configuration item of the Prometheus instance. The information is displayed in the YAML format.
	//
	// example:
	//
	// remote_write:
	//
	//   - name: rw1
	//
	//     url: "http://cn-hangzhou-intranet.arms.aliyuncs.com/prometheus/uid/xx/cn-hangzhou/api/v3/write"
	//
	//     basic_auth:
	//
	//       username: xxx
	//
	//       password: xxx
	//
	//     write_relabel_configs:
	//
	//       - source_labels: [ instance_id ]
	//
	//         separator: ;
	//
	//         regex: si
	//
	//         replacement: $1
	//
	//         action: keep
	RemoteWriteYaml *string `json:"RemoteWriteYaml,omitempty" xml:"RemoteWriteYaml,omitempty"`
}

func (s ListPrometheusRemoteWritesResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListPrometheusRemoteWritesResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListPrometheusRemoteWritesResponseBodyData) SetClusterId(v string) *ListPrometheusRemoteWritesResponseBodyData {
	s.ClusterId = &v
	return s
}

func (s *ListPrometheusRemoteWritesResponseBodyData) SetRemoteWriteName(v string) *ListPrometheusRemoteWritesResponseBodyData {
	s.RemoteWriteName = &v
	return s
}

func (s *ListPrometheusRemoteWritesResponseBodyData) SetRemoteWriteYaml(v string) *ListPrometheusRemoteWritesResponseBodyData {
	s.RemoteWriteYaml = &v
	return s
}

type ListPrometheusRemoteWritesResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListPrometheusRemoteWritesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListPrometheusRemoteWritesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListPrometheusRemoteWritesResponse) GoString() string {
	return s.String()
}

func (s *ListPrometheusRemoteWritesResponse) SetHeaders(v map[string]*string) *ListPrometheusRemoteWritesResponse {
	s.Headers = v
	return s
}

func (s *ListPrometheusRemoteWritesResponse) SetStatusCode(v int32) *ListPrometheusRemoteWritesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListPrometheusRemoteWritesResponse) SetBody(v *ListPrometheusRemoteWritesResponseBody) *ListPrometheusRemoteWritesResponse {
	s.Body = v
	return s
}

type ListRetcodeAppsRequest struct {
	// The ID of the region.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the resource group. You can obtain the resource group ID in the **Resource Management*	- console.
	//
	// example:
	//
	// rg-acfmxyexli2****
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	// The tags.
	Tags []*ListRetcodeAppsRequestTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
}

func (s ListRetcodeAppsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListRetcodeAppsRequest) GoString() string {
	return s.String()
}

func (s *ListRetcodeAppsRequest) SetRegionId(v string) *ListRetcodeAppsRequest {
	s.RegionId = &v
	return s
}

func (s *ListRetcodeAppsRequest) SetResourceGroupId(v string) *ListRetcodeAppsRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *ListRetcodeAppsRequest) SetTags(v []*ListRetcodeAppsRequestTags) *ListRetcodeAppsRequest {
	s.Tags = v
	return s
}

type ListRetcodeAppsRequestTags struct {
	// The tag key.
	//
	// example:
	//
	// TestKey
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The tag value.
	//
	// example:
	//
	// TestValue
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s ListRetcodeAppsRequestTags) String() string {
	return tea.Prettify(s)
}

func (s ListRetcodeAppsRequestTags) GoString() string {
	return s.String()
}

func (s *ListRetcodeAppsRequestTags) SetKey(v string) *ListRetcodeAppsRequestTags {
	s.Key = &v
	return s
}

func (s *ListRetcodeAppsRequestTags) SetValue(v string) *ListRetcodeAppsRequestTags {
	s.Value = &v
	return s
}

type ListRetcodeAppsResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// 99A663CB-8D7B-4B0D-A006-03C8EE38E7BB
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The list of applications monitored by Browser Monitoring.
	RetcodeApps []*ListRetcodeAppsResponseBodyRetcodeApps `json:"RetcodeApps,omitempty" xml:"RetcodeApps,omitempty" type:"Repeated"`
}

func (s ListRetcodeAppsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListRetcodeAppsResponseBody) GoString() string {
	return s.String()
}

func (s *ListRetcodeAppsResponseBody) SetRequestId(v string) *ListRetcodeAppsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListRetcodeAppsResponseBody) SetRetcodeApps(v []*ListRetcodeAppsResponseBodyRetcodeApps) *ListRetcodeAppsResponseBody {
	s.RetcodeApps = v
	return s
}

type ListRetcodeAppsResponseBodyRetcodeApps struct {
	// The ID of the application. The parameter is an auto-increment parameter.
	//
	// example:
	//
	// 16064
	AppId *int64 `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// The name of the application.
	//
	// example:
	//
	// A1
	AppName *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	// The alias of the application monitored by Browser Monitoring.
	//
	// example:
	//
	// B1
	NickName *string `json:"NickName,omitempty" xml:"NickName,omitempty"`
	// The PID of the application.
	//
	// example:
	//
	// atc889zkcf@d8deedfa9bf****
	Pid *string `json:"Pid,omitempty" xml:"Pid,omitempty"`
	// The ID of the resource group.
	//
	// example:
	//
	// rg-acfmxyexli2****
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	// The type of the application. Valid values:
	//
	// 	- `web`: web application
	//
	// 	- `weex`: Weex mobile app
	//
	// 	- `mini_dd`: DingTalk mini program
	//
	// 	- `mini_alipay`: Alipay mini program
	//
	// 	- `mini_wx`: WeChat mini program
	//
	// 	- `mini_common`: mini program on other platforms
	//
	// example:
	//
	// web
	RetcodeAppType *string `json:"RetcodeAppType,omitempty" xml:"RetcodeAppType,omitempty"`
	// The tags.
	Tags []*ListRetcodeAppsResponseBodyRetcodeAppsTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
}

func (s ListRetcodeAppsResponseBodyRetcodeApps) String() string {
	return tea.Prettify(s)
}

func (s ListRetcodeAppsResponseBodyRetcodeApps) GoString() string {
	return s.String()
}

func (s *ListRetcodeAppsResponseBodyRetcodeApps) SetAppId(v int64) *ListRetcodeAppsResponseBodyRetcodeApps {
	s.AppId = &v
	return s
}

func (s *ListRetcodeAppsResponseBodyRetcodeApps) SetAppName(v string) *ListRetcodeAppsResponseBodyRetcodeApps {
	s.AppName = &v
	return s
}

func (s *ListRetcodeAppsResponseBodyRetcodeApps) SetNickName(v string) *ListRetcodeAppsResponseBodyRetcodeApps {
	s.NickName = &v
	return s
}

func (s *ListRetcodeAppsResponseBodyRetcodeApps) SetPid(v string) *ListRetcodeAppsResponseBodyRetcodeApps {
	s.Pid = &v
	return s
}

func (s *ListRetcodeAppsResponseBodyRetcodeApps) SetResourceGroupId(v string) *ListRetcodeAppsResponseBodyRetcodeApps {
	s.ResourceGroupId = &v
	return s
}

func (s *ListRetcodeAppsResponseBodyRetcodeApps) SetRetcodeAppType(v string) *ListRetcodeAppsResponseBodyRetcodeApps {
	s.RetcodeAppType = &v
	return s
}

func (s *ListRetcodeAppsResponseBodyRetcodeApps) SetTags(v []*ListRetcodeAppsResponseBodyRetcodeAppsTags) *ListRetcodeAppsResponseBodyRetcodeApps {
	s.Tags = v
	return s
}

type ListRetcodeAppsResponseBodyRetcodeAppsTags struct {
	// The tag key.
	//
	// example:
	//
	// TestKey
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The tag value.
	//
	// example:
	//
	// TestValue
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s ListRetcodeAppsResponseBodyRetcodeAppsTags) String() string {
	return tea.Prettify(s)
}

func (s ListRetcodeAppsResponseBodyRetcodeAppsTags) GoString() string {
	return s.String()
}

func (s *ListRetcodeAppsResponseBodyRetcodeAppsTags) SetKey(v string) *ListRetcodeAppsResponseBodyRetcodeAppsTags {
	s.Key = &v
	return s
}

func (s *ListRetcodeAppsResponseBodyRetcodeAppsTags) SetValue(v string) *ListRetcodeAppsResponseBodyRetcodeAppsTags {
	s.Value = &v
	return s
}

type ListRetcodeAppsResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListRetcodeAppsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListRetcodeAppsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListRetcodeAppsResponse) GoString() string {
	return s.String()
}

func (s *ListRetcodeAppsResponse) SetHeaders(v map[string]*string) *ListRetcodeAppsResponse {
	s.Headers = v
	return s
}

func (s *ListRetcodeAppsResponse) SetStatusCode(v int32) *ListRetcodeAppsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListRetcodeAppsResponse) SetBody(v *ListRetcodeAppsResponseBody) *ListRetcodeAppsResponse {
	s.Body = v
	return s
}

type ListScenarioRequest struct {
	// The ID of the application.
	//
	// This parameter is required.
	//
	// example:
	//
	// b590lhguqs@28f515462******
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// The name of the business monitoring job.
	//
	// This parameter is required.
	//
	// example:
	//
	// pro-content
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The ID of the region.
	//
	// example:
	//
	// cn-zhangjaikou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The scenario where the business monitoring job is used. Valid values:
	//
	// 	- `USER-DEFINED`: user-defined. This is the default value.
	//
	// 	- `EDAS-ROLLOUT`: application release in Enterprise Distributed Application Service (EDAS)
	//
	// 	- `OAM-ROLLOUT`: application release based on Open Application Model (OAM)
	//
	// 	- `MSC-CANARY`: canary release based on Microservice Engine (MSE)
	//
	// example:
	//
	// USER-DEFINED
	Scenario *string `json:"Scenario,omitempty" xml:"Scenario,omitempty"`
	// The code of the business monitoring job. Set this parameter when you know the code of the business monitoring job you want to query.
	//
	// example:
	//
	// a9f8****
	Sign *string `json:"Sign,omitempty" xml:"Sign,omitempty"`
}

func (s ListScenarioRequest) String() string {
	return tea.Prettify(s)
}

func (s ListScenarioRequest) GoString() string {
	return s.String()
}

func (s *ListScenarioRequest) SetAppId(v string) *ListScenarioRequest {
	s.AppId = &v
	return s
}

func (s *ListScenarioRequest) SetName(v string) *ListScenarioRequest {
	s.Name = &v
	return s
}

func (s *ListScenarioRequest) SetRegionId(v string) *ListScenarioRequest {
	s.RegionId = &v
	return s
}

func (s *ListScenarioRequest) SetScenario(v string) *ListScenarioRequest {
	s.Scenario = &v
	return s
}

func (s *ListScenarioRequest) SetSign(v string) *ListScenarioRequest {
	s.Sign = &v
	return s
}

type ListScenarioResponseBody struct {
	// The detailed information of the business monitoring job.
	ArmsScenarios []*ListScenarioResponseBodyArmsScenarios `json:"ArmsScenarios,omitempty" xml:"ArmsScenarios,omitempty" type:"Repeated"`
	// The ID of the request.
	//
	// example:
	//
	// 98027D1F-3AEB-492C-A4AA-E9217992****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListScenarioResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListScenarioResponseBody) GoString() string {
	return s.String()
}

func (s *ListScenarioResponseBody) SetArmsScenarios(v []*ListScenarioResponseBodyArmsScenarios) *ListScenarioResponseBody {
	s.ArmsScenarios = v
	return s
}

func (s *ListScenarioResponseBody) SetRequestId(v string) *ListScenarioResponseBody {
	s.RequestId = &v
	return s
}

type ListScenarioResponseBodyArmsScenarios struct {
	// The ID of the application.
	//
	// example:
	//
	// b590lhguqs@28f515462******
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// The time when the business monitoring job was created.
	//
	// example:
	//
	// 1585214916000
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The extended information. The value is a JSON string.
	//
	// example:
	//
	// {"_MODE": "CUSTOM-TRANSACTION","_SCENARIO": "USER-DEFINED"}
	Extensions *string `json:"Extensions,omitempty" xml:"Extensions,omitempty"`
	// The ID of the business monitoring job.
	//
	// example:
	//
	// 132
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The name of the business monitoring job.
	//
	// example:
	//
	// k8s_deployment_css-guns-vip-main-prod_silence
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The ID of the region.
	//
	// example:
	//
	// cn-zhangjiakou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The code of the business monitoring job.
	//
	// example:
	//
	// a9f8****
	Sign *string `json:"Sign,omitempty" xml:"Sign,omitempty"`
	// The time when the business monitoring job was updated.
	//
	// example:
	//
	// 1585214916000
	UpdateTime *string `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
	// The ID of the user.
	//
	// example:
	//
	// 113197164949****
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s ListScenarioResponseBodyArmsScenarios) String() string {
	return tea.Prettify(s)
}

func (s ListScenarioResponseBodyArmsScenarios) GoString() string {
	return s.String()
}

func (s *ListScenarioResponseBodyArmsScenarios) SetAppId(v string) *ListScenarioResponseBodyArmsScenarios {
	s.AppId = &v
	return s
}

func (s *ListScenarioResponseBodyArmsScenarios) SetCreateTime(v string) *ListScenarioResponseBodyArmsScenarios {
	s.CreateTime = &v
	return s
}

func (s *ListScenarioResponseBodyArmsScenarios) SetExtensions(v string) *ListScenarioResponseBodyArmsScenarios {
	s.Extensions = &v
	return s
}

func (s *ListScenarioResponseBodyArmsScenarios) SetId(v int64) *ListScenarioResponseBodyArmsScenarios {
	s.Id = &v
	return s
}

func (s *ListScenarioResponseBodyArmsScenarios) SetName(v string) *ListScenarioResponseBodyArmsScenarios {
	s.Name = &v
	return s
}

func (s *ListScenarioResponseBodyArmsScenarios) SetRegionId(v string) *ListScenarioResponseBodyArmsScenarios {
	s.RegionId = &v
	return s
}

func (s *ListScenarioResponseBodyArmsScenarios) SetSign(v string) *ListScenarioResponseBodyArmsScenarios {
	s.Sign = &v
	return s
}

func (s *ListScenarioResponseBodyArmsScenarios) SetUpdateTime(v string) *ListScenarioResponseBodyArmsScenarios {
	s.UpdateTime = &v
	return s
}

func (s *ListScenarioResponseBodyArmsScenarios) SetUserId(v string) *ListScenarioResponseBodyArmsScenarios {
	s.UserId = &v
	return s
}

type ListScenarioResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListScenarioResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListScenarioResponse) String() string {
	return tea.Prettify(s)
}

func (s ListScenarioResponse) GoString() string {
	return s.String()
}

func (s *ListScenarioResponse) SetHeaders(v map[string]*string) *ListScenarioResponse {
	s.Headers = v
	return s
}

func (s *ListScenarioResponse) SetStatusCode(v int32) *ListScenarioResponse {
	s.StatusCode = &v
	return s
}

func (s *ListScenarioResponse) SetBody(v *ListScenarioResponseBody) *ListScenarioResponse {
	s.Body = v
	return s
}

type ListSilencePoliciesRequest struct {
	// Specifies whether to query the details of a silence policy. Valid values:
	//
	// 	- `true`: Details of the silence policy are queried.
	//
	// 	- `false`: Details about notification policies are not queried.
	//
	// example:
	//
	// true
	IsDetail *bool `json:"IsDetail,omitempty" xml:"IsDetail,omitempty"`
	// The name of the silence policy.
	//
	// example:
	//
	// silencepolicy_test
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The number of the page to return.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	Page *int64 `json:"Page,omitempty" xml:"Page,omitempty"`
	// The ID of the region.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The number of entries to return on each page.
	//
	// This parameter is required.
	//
	// example:
	//
	// 20
	Size *int64 `json:"Size,omitempty" xml:"Size,omitempty"`
}

func (s ListSilencePoliciesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListSilencePoliciesRequest) GoString() string {
	return s.String()
}

func (s *ListSilencePoliciesRequest) SetIsDetail(v bool) *ListSilencePoliciesRequest {
	s.IsDetail = &v
	return s
}

func (s *ListSilencePoliciesRequest) SetName(v string) *ListSilencePoliciesRequest {
	s.Name = &v
	return s
}

func (s *ListSilencePoliciesRequest) SetPage(v int64) *ListSilencePoliciesRequest {
	s.Page = &v
	return s
}

func (s *ListSilencePoliciesRequest) SetRegionId(v string) *ListSilencePoliciesRequest {
	s.RegionId = &v
	return s
}

func (s *ListSilencePoliciesRequest) SetSize(v int64) *ListSilencePoliciesRequest {
	s.Size = &v
	return s
}

type ListSilencePoliciesResponseBody struct {
	// The objects that were returned.
	PageBean *ListSilencePoliciesResponseBodyPageBean `json:"PageBean,omitempty" xml:"PageBean,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// 78901766-3806-4E96-8E47-CFEF59E4****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListSilencePoliciesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListSilencePoliciesResponseBody) GoString() string {
	return s.String()
}

func (s *ListSilencePoliciesResponseBody) SetPageBean(v *ListSilencePoliciesResponseBodyPageBean) *ListSilencePoliciesResponseBody {
	s.PageBean = v
	return s
}

func (s *ListSilencePoliciesResponseBody) SetRequestId(v string) *ListSilencePoliciesResponseBody {
	s.RequestId = &v
	return s
}

type ListSilencePoliciesResponseBodyPageBean struct {
	// The number of the page returned.
	//
	// example:
	//
	// 1
	Page *int64 `json:"Page,omitempty" xml:"Page,omitempty"`
	// An array of silence policy objects.
	SilencePolicies []*ListSilencePoliciesResponseBodyPageBeanSilencePolicies `json:"SilencePolicies,omitempty" xml:"SilencePolicies,omitempty" type:"Repeated"`
	// The number of entries returned per page.
	//
	// example:
	//
	// 20
	Size *int64 `json:"Size,omitempty" xml:"Size,omitempty"`
	// The number of silence policies that were returned.
	//
	// example:
	//
	// 1
	Total *int64 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s ListSilencePoliciesResponseBodyPageBean) String() string {
	return tea.Prettify(s)
}

func (s ListSilencePoliciesResponseBodyPageBean) GoString() string {
	return s.String()
}

func (s *ListSilencePoliciesResponseBodyPageBean) SetPage(v int64) *ListSilencePoliciesResponseBodyPageBean {
	s.Page = &v
	return s
}

func (s *ListSilencePoliciesResponseBodyPageBean) SetSilencePolicies(v []*ListSilencePoliciesResponseBodyPageBeanSilencePolicies) *ListSilencePoliciesResponseBodyPageBean {
	s.SilencePolicies = v
	return s
}

func (s *ListSilencePoliciesResponseBodyPageBean) SetSize(v int64) *ListSilencePoliciesResponseBodyPageBean {
	s.Size = &v
	return s
}

func (s *ListSilencePoliciesResponseBodyPageBean) SetTotal(v int64) *ListSilencePoliciesResponseBodyPageBean {
	s.Total = &v
	return s
}

type ListSilencePoliciesResponseBodyPageBeanSilencePolicies struct {
	// The ID of the silence policy.
	//
	// example:
	//
	// 123
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// An array of matching rule objects.
	MatchingRules []*ListSilencePoliciesResponseBodyPageBeanSilencePoliciesMatchingRules `json:"MatchingRules,omitempty" xml:"MatchingRules,omitempty" type:"Repeated"`
	// The name of the silence policy.
	//
	// example:
	//
	// silencepolicy_test
	Name  *string `json:"Name,omitempty" xml:"Name,omitempty"`
	State *string `json:"State,omitempty" xml:"State,omitempty"`
}

func (s ListSilencePoliciesResponseBodyPageBeanSilencePolicies) String() string {
	return tea.Prettify(s)
}

func (s ListSilencePoliciesResponseBodyPageBeanSilencePolicies) GoString() string {
	return s.String()
}

func (s *ListSilencePoliciesResponseBodyPageBeanSilencePolicies) SetId(v int64) *ListSilencePoliciesResponseBodyPageBeanSilencePolicies {
	s.Id = &v
	return s
}

func (s *ListSilencePoliciesResponseBodyPageBeanSilencePolicies) SetMatchingRules(v []*ListSilencePoliciesResponseBodyPageBeanSilencePoliciesMatchingRules) *ListSilencePoliciesResponseBodyPageBeanSilencePolicies {
	s.MatchingRules = v
	return s
}

func (s *ListSilencePoliciesResponseBodyPageBeanSilencePolicies) SetName(v string) *ListSilencePoliciesResponseBodyPageBeanSilencePolicies {
	s.Name = &v
	return s
}

func (s *ListSilencePoliciesResponseBodyPageBeanSilencePolicies) SetState(v string) *ListSilencePoliciesResponseBodyPageBeanSilencePolicies {
	s.State = &v
	return s
}

type ListSilencePoliciesResponseBodyPageBeanSilencePoliciesMatchingRules struct {
	// An array of matching condition objects.
	MatchingConditions []*ListSilencePoliciesResponseBodyPageBeanSilencePoliciesMatchingRulesMatchingConditions `json:"MatchingConditions,omitempty" xml:"MatchingConditions,omitempty" type:"Repeated"`
}

func (s ListSilencePoliciesResponseBodyPageBeanSilencePoliciesMatchingRules) String() string {
	return tea.Prettify(s)
}

func (s ListSilencePoliciesResponseBodyPageBeanSilencePoliciesMatchingRules) GoString() string {
	return s.String()
}

func (s *ListSilencePoliciesResponseBodyPageBeanSilencePoliciesMatchingRules) SetMatchingConditions(v []*ListSilencePoliciesResponseBodyPageBeanSilencePoliciesMatchingRulesMatchingConditions) *ListSilencePoliciesResponseBodyPageBeanSilencePoliciesMatchingRules {
	s.MatchingConditions = v
	return s
}

type ListSilencePoliciesResponseBodyPageBeanSilencePoliciesMatchingRulesMatchingConditions struct {
	// The key of the matching condition.
	//
	// example:
	//
	// altertname
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The logical operator of the matching condition. Valid values:
	//
	// 	- `eq`: equal to
	//
	// 	- `neq`: not equal to
	//
	// 	- `in`: contains
	//
	// 	- `nin`: does not contain
	//
	// 	- `re`: regular expression match
	//
	// 	- `nre`: regular expression mismatch
	//
	// example:
	//
	// eq
	Operator *string `json:"Operator,omitempty" xml:"Operator,omitempty"`
	// The value of the matching condition.
	//
	// example:
	//
	// test
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s ListSilencePoliciesResponseBodyPageBeanSilencePoliciesMatchingRulesMatchingConditions) String() string {
	return tea.Prettify(s)
}

func (s ListSilencePoliciesResponseBodyPageBeanSilencePoliciesMatchingRulesMatchingConditions) GoString() string {
	return s.String()
}

func (s *ListSilencePoliciesResponseBodyPageBeanSilencePoliciesMatchingRulesMatchingConditions) SetKey(v string) *ListSilencePoliciesResponseBodyPageBeanSilencePoliciesMatchingRulesMatchingConditions {
	s.Key = &v
	return s
}

func (s *ListSilencePoliciesResponseBodyPageBeanSilencePoliciesMatchingRulesMatchingConditions) SetOperator(v string) *ListSilencePoliciesResponseBodyPageBeanSilencePoliciesMatchingRulesMatchingConditions {
	s.Operator = &v
	return s
}

func (s *ListSilencePoliciesResponseBodyPageBeanSilencePoliciesMatchingRulesMatchingConditions) SetValue(v string) *ListSilencePoliciesResponseBodyPageBeanSilencePoliciesMatchingRulesMatchingConditions {
	s.Value = &v
	return s
}

type ListSilencePoliciesResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListSilencePoliciesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListSilencePoliciesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListSilencePoliciesResponse) GoString() string {
	return s.String()
}

func (s *ListSilencePoliciesResponse) SetHeaders(v map[string]*string) *ListSilencePoliciesResponse {
	s.Headers = v
	return s
}

func (s *ListSilencePoliciesResponse) SetStatusCode(v int32) *ListSilencePoliciesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListSilencePoliciesResponse) SetBody(v *ListSilencePoliciesResponseBody) *ListSilencePoliciesResponse {
	s.Body = v
	return s
}

type ListSyntheticDetailRequest struct {
	AdvancedFilters []*ListSyntheticDetailRequestAdvancedFilters `json:"AdvancedFilters,omitempty" xml:"AdvancedFilters,omitempty" type:"Repeated"`
	// example:
	//
	// SYNTHETIC
	Category *string `json:"Category,omitempty" xml:"Category,omitempty"`
	// example:
	//
	// ICMP_LIST
	Detail *string `json:"Detail,omitempty" xml:"Detail,omitempty"`
	// example:
	//
	// 1684480557772
	EndTime      *int64                                    `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	ExactFilters []*ListSyntheticDetailRequestExactFilters `json:"ExactFilters,omitempty" xml:"ExactFilters,omitempty" type:"Repeated"`
	Filters      map[string]*string                        `json:"Filters,omitempty" xml:"Filters,omitempty"`
	// example:
	//
	// DESC
	Order *string `json:"Order,omitempty" xml:"Order,omitempty"`
	// example:
	//
	// timestamp
	OrderBy *string `json:"OrderBy,omitempty" xml:"OrderBy,omitempty"`
	// example:
	//
	// 1
	Page *int32 `json:"Page,omitempty" xml:"Page,omitempty"`
	// example:
	//
	// 20
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// example:
	//
	// 1684110343127
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// example:
	//
	// 1
	SyntheticType *int32 `json:"SyntheticType,omitempty" xml:"SyntheticType,omitempty"`
}

func (s ListSyntheticDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s ListSyntheticDetailRequest) GoString() string {
	return s.String()
}

func (s *ListSyntheticDetailRequest) SetAdvancedFilters(v []*ListSyntheticDetailRequestAdvancedFilters) *ListSyntheticDetailRequest {
	s.AdvancedFilters = v
	return s
}

func (s *ListSyntheticDetailRequest) SetCategory(v string) *ListSyntheticDetailRequest {
	s.Category = &v
	return s
}

func (s *ListSyntheticDetailRequest) SetDetail(v string) *ListSyntheticDetailRequest {
	s.Detail = &v
	return s
}

func (s *ListSyntheticDetailRequest) SetEndTime(v int64) *ListSyntheticDetailRequest {
	s.EndTime = &v
	return s
}

func (s *ListSyntheticDetailRequest) SetExactFilters(v []*ListSyntheticDetailRequestExactFilters) *ListSyntheticDetailRequest {
	s.ExactFilters = v
	return s
}

func (s *ListSyntheticDetailRequest) SetFilters(v map[string]*string) *ListSyntheticDetailRequest {
	s.Filters = v
	return s
}

func (s *ListSyntheticDetailRequest) SetOrder(v string) *ListSyntheticDetailRequest {
	s.Order = &v
	return s
}

func (s *ListSyntheticDetailRequest) SetOrderBy(v string) *ListSyntheticDetailRequest {
	s.OrderBy = &v
	return s
}

func (s *ListSyntheticDetailRequest) SetPage(v int32) *ListSyntheticDetailRequest {
	s.Page = &v
	return s
}

func (s *ListSyntheticDetailRequest) SetPageSize(v int32) *ListSyntheticDetailRequest {
	s.PageSize = &v
	return s
}

func (s *ListSyntheticDetailRequest) SetRegionId(v string) *ListSyntheticDetailRequest {
	s.RegionId = &v
	return s
}

func (s *ListSyntheticDetailRequest) SetStartTime(v int64) *ListSyntheticDetailRequest {
	s.StartTime = &v
	return s
}

func (s *ListSyntheticDetailRequest) SetSyntheticType(v int32) *ListSyntheticDetailRequest {
	s.SyntheticType = &v
	return s
}

type ListSyntheticDetailRequestAdvancedFilters struct {
	// example:
	//
	// taskType
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// example:
	//
	// eq
	OpType *string `json:"OpType,omitempty" xml:"OpType,omitempty"`
	// example:
	//
	// 1
	Value interface{} `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s ListSyntheticDetailRequestAdvancedFilters) String() string {
	return tea.Prettify(s)
}

func (s ListSyntheticDetailRequestAdvancedFilters) GoString() string {
	return s.String()
}

func (s *ListSyntheticDetailRequestAdvancedFilters) SetKey(v string) *ListSyntheticDetailRequestAdvancedFilters {
	s.Key = &v
	return s
}

func (s *ListSyntheticDetailRequestAdvancedFilters) SetOpType(v string) *ListSyntheticDetailRequestAdvancedFilters {
	s.OpType = &v
	return s
}

func (s *ListSyntheticDetailRequestAdvancedFilters) SetValue(v interface{}) *ListSyntheticDetailRequestAdvancedFilters {
	s.Value = v
	return s
}

type ListSyntheticDetailRequestExactFilters struct {
	Key    *string     `json:"Key,omitempty" xml:"Key,omitempty"`
	OpType *string     `json:"OpType,omitempty" xml:"OpType,omitempty"`
	Value  interface{} `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s ListSyntheticDetailRequestExactFilters) String() string {
	return tea.Prettify(s)
}

func (s ListSyntheticDetailRequestExactFilters) GoString() string {
	return s.String()
}

func (s *ListSyntheticDetailRequestExactFilters) SetKey(v string) *ListSyntheticDetailRequestExactFilters {
	s.Key = &v
	return s
}

func (s *ListSyntheticDetailRequestExactFilters) SetOpType(v string) *ListSyntheticDetailRequestExactFilters {
	s.OpType = &v
	return s
}

func (s *ListSyntheticDetailRequestExactFilters) SetValue(v interface{}) *ListSyntheticDetailRequestExactFilters {
	s.Value = v
	return s
}

type ListSyntheticDetailShrinkRequest struct {
	AdvancedFiltersShrink *string `json:"AdvancedFilters,omitempty" xml:"AdvancedFilters,omitempty"`
	// example:
	//
	// SYNTHETIC
	Category *string `json:"Category,omitempty" xml:"Category,omitempty"`
	// example:
	//
	// ICMP_LIST
	Detail *string `json:"Detail,omitempty" xml:"Detail,omitempty"`
	// example:
	//
	// 1684480557772
	EndTime            *int64  `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	ExactFiltersShrink *string `json:"ExactFilters,omitempty" xml:"ExactFilters,omitempty"`
	FiltersShrink      *string `json:"Filters,omitempty" xml:"Filters,omitempty"`
	// example:
	//
	// DESC
	Order *string `json:"Order,omitempty" xml:"Order,omitempty"`
	// example:
	//
	// timestamp
	OrderBy *string `json:"OrderBy,omitempty" xml:"OrderBy,omitempty"`
	// example:
	//
	// 1
	Page *int32 `json:"Page,omitempty" xml:"Page,omitempty"`
	// example:
	//
	// 20
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// example:
	//
	// 1684110343127
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// example:
	//
	// 1
	SyntheticType *int32 `json:"SyntheticType,omitempty" xml:"SyntheticType,omitempty"`
}

func (s ListSyntheticDetailShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s ListSyntheticDetailShrinkRequest) GoString() string {
	return s.String()
}

func (s *ListSyntheticDetailShrinkRequest) SetAdvancedFiltersShrink(v string) *ListSyntheticDetailShrinkRequest {
	s.AdvancedFiltersShrink = &v
	return s
}

func (s *ListSyntheticDetailShrinkRequest) SetCategory(v string) *ListSyntheticDetailShrinkRequest {
	s.Category = &v
	return s
}

func (s *ListSyntheticDetailShrinkRequest) SetDetail(v string) *ListSyntheticDetailShrinkRequest {
	s.Detail = &v
	return s
}

func (s *ListSyntheticDetailShrinkRequest) SetEndTime(v int64) *ListSyntheticDetailShrinkRequest {
	s.EndTime = &v
	return s
}

func (s *ListSyntheticDetailShrinkRequest) SetExactFiltersShrink(v string) *ListSyntheticDetailShrinkRequest {
	s.ExactFiltersShrink = &v
	return s
}

func (s *ListSyntheticDetailShrinkRequest) SetFiltersShrink(v string) *ListSyntheticDetailShrinkRequest {
	s.FiltersShrink = &v
	return s
}

func (s *ListSyntheticDetailShrinkRequest) SetOrder(v string) *ListSyntheticDetailShrinkRequest {
	s.Order = &v
	return s
}

func (s *ListSyntheticDetailShrinkRequest) SetOrderBy(v string) *ListSyntheticDetailShrinkRequest {
	s.OrderBy = &v
	return s
}

func (s *ListSyntheticDetailShrinkRequest) SetPage(v int32) *ListSyntheticDetailShrinkRequest {
	s.Page = &v
	return s
}

func (s *ListSyntheticDetailShrinkRequest) SetPageSize(v int32) *ListSyntheticDetailShrinkRequest {
	s.PageSize = &v
	return s
}

func (s *ListSyntheticDetailShrinkRequest) SetRegionId(v string) *ListSyntheticDetailShrinkRequest {
	s.RegionId = &v
	return s
}

func (s *ListSyntheticDetailShrinkRequest) SetStartTime(v int64) *ListSyntheticDetailShrinkRequest {
	s.StartTime = &v
	return s
}

func (s *ListSyntheticDetailShrinkRequest) SetSyntheticType(v int32) *ListSyntheticDetailShrinkRequest {
	s.SyntheticType = &v
	return s
}

type ListSyntheticDetailResponseBody struct {
	// example:
	//
	// 200
	Code *int64                               `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *ListSyntheticDetailResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// null
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	//
	// example:
	//
	// 70675725-8F11-4817-8106-CFE0AD71****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListSyntheticDetailResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListSyntheticDetailResponseBody) GoString() string {
	return s.String()
}

func (s *ListSyntheticDetailResponseBody) SetCode(v int64) *ListSyntheticDetailResponseBody {
	s.Code = &v
	return s
}

func (s *ListSyntheticDetailResponseBody) SetData(v *ListSyntheticDetailResponseBodyData) *ListSyntheticDetailResponseBody {
	s.Data = v
	return s
}

func (s *ListSyntheticDetailResponseBody) SetMessage(v string) *ListSyntheticDetailResponseBody {
	s.Message = &v
	return s
}

func (s *ListSyntheticDetailResponseBody) SetRequestId(v string) *ListSyntheticDetailResponseBody {
	s.RequestId = &v
	return s
}

type ListSyntheticDetailResponseBodyData struct {
	Items []map[string]interface{} `json:"Items,omitempty" xml:"Items,omitempty" type:"Repeated"`
	// example:
	//
	// 1
	Page *int32 `json:"Page,omitempty" xml:"Page,omitempty"`
	// example:
	//
	// 10
	PageSize       *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TaskCreateTime *int64 `json:"TaskCreateTime,omitempty" xml:"TaskCreateTime,omitempty"`
	// example:
	//
	// 12
	Total *int32 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s ListSyntheticDetailResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListSyntheticDetailResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListSyntheticDetailResponseBodyData) SetItems(v []map[string]interface{}) *ListSyntheticDetailResponseBodyData {
	s.Items = v
	return s
}

func (s *ListSyntheticDetailResponseBodyData) SetPage(v int32) *ListSyntheticDetailResponseBodyData {
	s.Page = &v
	return s
}

func (s *ListSyntheticDetailResponseBodyData) SetPageSize(v int32) *ListSyntheticDetailResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *ListSyntheticDetailResponseBodyData) SetTaskCreateTime(v int64) *ListSyntheticDetailResponseBodyData {
	s.TaskCreateTime = &v
	return s
}

func (s *ListSyntheticDetailResponseBodyData) SetTotal(v int32) *ListSyntheticDetailResponseBodyData {
	s.Total = &v
	return s
}

type ListSyntheticDetailResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListSyntheticDetailResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListSyntheticDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s ListSyntheticDetailResponse) GoString() string {
	return s.String()
}

func (s *ListSyntheticDetailResponse) SetHeaders(v map[string]*string) *ListSyntheticDetailResponse {
	s.Headers = v
	return s
}

func (s *ListSyntheticDetailResponse) SetStatusCode(v int32) *ListSyntheticDetailResponse {
	s.StatusCode = &v
	return s
}

func (s *ListSyntheticDetailResponse) SetBody(v *ListSyntheticDetailResponseBody) *ListSyntheticDetailResponse {
	s.Body = v
	return s
}

type ListTimingSyntheticTasksRequest struct {
	// The region ID.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the resource group.
	//
	// example:
	//
	// rg-acfmxyexli2****
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	// The search keyword.
	Search *ListTimingSyntheticTasksRequestSearch `json:"Search,omitempty" xml:"Search,omitempty" type:"Struct"`
	// The tags.
	Tags []*ListTimingSyntheticTasksRequestTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
}

func (s ListTimingSyntheticTasksRequest) String() string {
	return tea.Prettify(s)
}

func (s ListTimingSyntheticTasksRequest) GoString() string {
	return s.String()
}

func (s *ListTimingSyntheticTasksRequest) SetRegionId(v string) *ListTimingSyntheticTasksRequest {
	s.RegionId = &v
	return s
}

func (s *ListTimingSyntheticTasksRequest) SetResourceGroupId(v string) *ListTimingSyntheticTasksRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *ListTimingSyntheticTasksRequest) SetSearch(v *ListTimingSyntheticTasksRequestSearch) *ListTimingSyntheticTasksRequest {
	s.Search = v
	return s
}

func (s *ListTimingSyntheticTasksRequest) SetTags(v []*ListTimingSyntheticTasksRequestTags) *ListTimingSyntheticTasksRequest {
	s.Tags = v
	return s
}

type ListTimingSyntheticTasksRequestSearch struct {
	// The task name.
	//
	// example:
	//
	// AlibabaCloud DNS Task
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The order by which tasks are sorted. 1: ascending order. -1: descending order.
	//
	// example:
	//
	// 1
	Order *int32 `json:"Order,omitempty" xml:"Order,omitempty"`
	// The condition by which tasks are sorted. You can sort tasks by gmtCreate, gmtModified, status, or monitorCount.
	//
	// example:
	//
	// status
	OrderField *string `json:"OrderField,omitempty" xml:"OrderField,omitempty"`
	// The page number. This parameter is required.
	//
	// example:
	//
	// 1
	Page *int32 `json:"Page,omitempty" xml:"Page,omitempty"`
	// The number of entries per page. This parameter is required.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The task status. CREATING: The task is being created. RUNNING: The task is running. PARTIAL_RUNNING: The task is partially running. STOP: The task is stopped. LIMIT_STOP: The task is stopped due to quota limit. EXCEPTION: The task is abnormal. DELETE: The task is deleted. DELETE_EXCEPTION: An exception occurs while deleting the task.
	//
	// example:
	//
	// CREATING
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The task IDs.
	TaskIds []*string `json:"TaskIds,omitempty" xml:"TaskIds,omitempty" type:"Repeated"`
	// The task types.
	TaskTypes []*int32 `json:"TaskTypes,omitempty" xml:"TaskTypes,omitempty" type:"Repeated"`
}

func (s ListTimingSyntheticTasksRequestSearch) String() string {
	return tea.Prettify(s)
}

func (s ListTimingSyntheticTasksRequestSearch) GoString() string {
	return s.String()
}

func (s *ListTimingSyntheticTasksRequestSearch) SetName(v string) *ListTimingSyntheticTasksRequestSearch {
	s.Name = &v
	return s
}

func (s *ListTimingSyntheticTasksRequestSearch) SetOrder(v int32) *ListTimingSyntheticTasksRequestSearch {
	s.Order = &v
	return s
}

func (s *ListTimingSyntheticTasksRequestSearch) SetOrderField(v string) *ListTimingSyntheticTasksRequestSearch {
	s.OrderField = &v
	return s
}

func (s *ListTimingSyntheticTasksRequestSearch) SetPage(v int32) *ListTimingSyntheticTasksRequestSearch {
	s.Page = &v
	return s
}

func (s *ListTimingSyntheticTasksRequestSearch) SetPageSize(v int32) *ListTimingSyntheticTasksRequestSearch {
	s.PageSize = &v
	return s
}

func (s *ListTimingSyntheticTasksRequestSearch) SetStatus(v string) *ListTimingSyntheticTasksRequestSearch {
	s.Status = &v
	return s
}

func (s *ListTimingSyntheticTasksRequestSearch) SetTaskIds(v []*string) *ListTimingSyntheticTasksRequestSearch {
	s.TaskIds = v
	return s
}

func (s *ListTimingSyntheticTasksRequestSearch) SetTaskTypes(v []*int32) *ListTimingSyntheticTasksRequestSearch {
	s.TaskTypes = v
	return s
}

type ListTimingSyntheticTasksRequestTags struct {
	// The tag key.
	//
	// example:
	//
	// mark
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The tag value.
	//
	// example:
	//
	// value1111
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s ListTimingSyntheticTasksRequestTags) String() string {
	return tea.Prettify(s)
}

func (s ListTimingSyntheticTasksRequestTags) GoString() string {
	return s.String()
}

func (s *ListTimingSyntheticTasksRequestTags) SetKey(v string) *ListTimingSyntheticTasksRequestTags {
	s.Key = &v
	return s
}

func (s *ListTimingSyntheticTasksRequestTags) SetValue(v string) *ListTimingSyntheticTasksRequestTags {
	s.Value = &v
	return s
}

type ListTimingSyntheticTasksShrinkRequest struct {
	// The region ID.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the resource group.
	//
	// example:
	//
	// rg-acfmxyexli2****
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	// The search keyword.
	SearchShrink *string `json:"Search,omitempty" xml:"Search,omitempty"`
	// The tags.
	TagsShrink *string `json:"Tags,omitempty" xml:"Tags,omitempty"`
}

func (s ListTimingSyntheticTasksShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s ListTimingSyntheticTasksShrinkRequest) GoString() string {
	return s.String()
}

func (s *ListTimingSyntheticTasksShrinkRequest) SetRegionId(v string) *ListTimingSyntheticTasksShrinkRequest {
	s.RegionId = &v
	return s
}

func (s *ListTimingSyntheticTasksShrinkRequest) SetResourceGroupId(v string) *ListTimingSyntheticTasksShrinkRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *ListTimingSyntheticTasksShrinkRequest) SetSearchShrink(v string) *ListTimingSyntheticTasksShrinkRequest {
	s.SearchShrink = &v
	return s
}

func (s *ListTimingSyntheticTasksShrinkRequest) SetTagsShrink(v string) *ListTimingSyntheticTasksShrinkRequest {
	s.TagsShrink = &v
	return s
}

type ListTimingSyntheticTasksResponseBody struct {
	// The status code. The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *int64 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned struct.
	Data *ListTimingSyntheticTasksResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 730E90FE-996A-5638-99F3-4F0F9038CC6C
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListTimingSyntheticTasksResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListTimingSyntheticTasksResponseBody) GoString() string {
	return s.String()
}

func (s *ListTimingSyntheticTasksResponseBody) SetCode(v int64) *ListTimingSyntheticTasksResponseBody {
	s.Code = &v
	return s
}

func (s *ListTimingSyntheticTasksResponseBody) SetData(v *ListTimingSyntheticTasksResponseBodyData) *ListTimingSyntheticTasksResponseBody {
	s.Data = v
	return s
}

func (s *ListTimingSyntheticTasksResponseBody) SetMessage(v string) *ListTimingSyntheticTasksResponseBody {
	s.Message = &v
	return s
}

func (s *ListTimingSyntheticTasksResponseBody) SetRequestId(v string) *ListTimingSyntheticTasksResponseBody {
	s.RequestId = &v
	return s
}

type ListTimingSyntheticTasksResponseBodyData struct {
	// The queried tasks.
	Items []*ListTimingSyntheticTasksResponseBodyDataItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Repeated"`
	// The page number.
	//
	// example:
	//
	// 1
	Page *int32 `json:"Page,omitempty" xml:"Page,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of tasks.
	//
	// example:
	//
	// 100
	Total *int32 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s ListTimingSyntheticTasksResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListTimingSyntheticTasksResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListTimingSyntheticTasksResponseBodyData) SetItems(v []*ListTimingSyntheticTasksResponseBodyDataItems) *ListTimingSyntheticTasksResponseBodyData {
	s.Items = v
	return s
}

func (s *ListTimingSyntheticTasksResponseBodyData) SetPage(v int32) *ListTimingSyntheticTasksResponseBodyData {
	s.Page = &v
	return s
}

func (s *ListTimingSyntheticTasksResponseBodyData) SetPageSize(v int32) *ListTimingSyntheticTasksResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *ListTimingSyntheticTasksResponseBodyData) SetTotal(v int32) *ListTimingSyntheticTasksResponseBodyData {
	s.Total = &v
	return s
}

type ListTimingSyntheticTasksResponseBodyDataItems struct {
	CommonSetting *ListTimingSyntheticTasksResponseBodyDataItemsCommonSetting `json:"CommonSetting,omitempty" xml:"CommonSetting,omitempty" type:"Struct"`
	// The detection frequency. Valid values: 1m, 5m, 10m, 15m, 20m, 30m, 1h, 2h, 3h, 4h, 6h, 8h, 12h, and 24h.
	//
	// example:
	//
	// 1m
	Frequency *string `json:"Frequency,omitempty" xml:"Frequency,omitempty"`
	// The time when the task was created.
	//
	// example:
	//
	// 1671454758000
	GmtCreate *string `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	// The time when the task was modified.
	//
	// example:
	//
	// 1673085633000
	GmtModified *string `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	// The detection point type. 1: PC. 2: mobile device.
	//
	// example:
	//
	// 1
	MonitorCategory *int32 `json:"MonitorCategory,omitempty" xml:"MonitorCategory,omitempty"`
	// The number of detection points.
	//
	// example:
	//
	// 10
	MonitorNum *string `json:"MonitorNum,omitempty" xml:"MonitorNum,omitempty"`
	// The task name.
	//
	// example:
	//
	// AlibabaCloud DNS Task
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The region ID.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the resource group.
	//
	// example:
	//
	// rg-aekzgwtq5vxxxxx
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	// The task status. CREATING: The task is being created. RUNNING: The task is running. PARTIAL_RUNNING: The task is partially running. STOP: The task is stopped. LIMIT_STOP: The task is stopped due to quota limit. EXCEPTION: The task is abnormal. DELETE: The task is deleted. DELETE_EXCEPTION: An exception occurs while deleting the task.
	//
	// example:
	//
	// RUNNING
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The tags.
	Tags []*ListTimingSyntheticTasksResponseBodyDataItemsTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
	// The ID of the synthetic monitoring task.
	//
	// example:
	//
	// 5308a2691f59422c8c3b7aeccec9cd3b
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// The type of the task. Valid values:
	//
	// 1: ICMP. 2: TCP. 3: DNS. 4: HTTP. 5: website speed. 6: file download.
	//
	// example:
	//
	// 1
	TaskType *int32 `json:"TaskType,omitempty" xml:"TaskType,omitempty"`
	// The URL for synthetic monitoring.
	//
	// example:
	//
	// https://www.example.com
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s ListTimingSyntheticTasksResponseBodyDataItems) String() string {
	return tea.Prettify(s)
}

func (s ListTimingSyntheticTasksResponseBodyDataItems) GoString() string {
	return s.String()
}

func (s *ListTimingSyntheticTasksResponseBodyDataItems) SetCommonSetting(v *ListTimingSyntheticTasksResponseBodyDataItemsCommonSetting) *ListTimingSyntheticTasksResponseBodyDataItems {
	s.CommonSetting = v
	return s
}

func (s *ListTimingSyntheticTasksResponseBodyDataItems) SetFrequency(v string) *ListTimingSyntheticTasksResponseBodyDataItems {
	s.Frequency = &v
	return s
}

func (s *ListTimingSyntheticTasksResponseBodyDataItems) SetGmtCreate(v string) *ListTimingSyntheticTasksResponseBodyDataItems {
	s.GmtCreate = &v
	return s
}

func (s *ListTimingSyntheticTasksResponseBodyDataItems) SetGmtModified(v string) *ListTimingSyntheticTasksResponseBodyDataItems {
	s.GmtModified = &v
	return s
}

func (s *ListTimingSyntheticTasksResponseBodyDataItems) SetMonitorCategory(v int32) *ListTimingSyntheticTasksResponseBodyDataItems {
	s.MonitorCategory = &v
	return s
}

func (s *ListTimingSyntheticTasksResponseBodyDataItems) SetMonitorNum(v string) *ListTimingSyntheticTasksResponseBodyDataItems {
	s.MonitorNum = &v
	return s
}

func (s *ListTimingSyntheticTasksResponseBodyDataItems) SetName(v string) *ListTimingSyntheticTasksResponseBodyDataItems {
	s.Name = &v
	return s
}

func (s *ListTimingSyntheticTasksResponseBodyDataItems) SetRegionId(v string) *ListTimingSyntheticTasksResponseBodyDataItems {
	s.RegionId = &v
	return s
}

func (s *ListTimingSyntheticTasksResponseBodyDataItems) SetResourceGroupId(v string) *ListTimingSyntheticTasksResponseBodyDataItems {
	s.ResourceGroupId = &v
	return s
}

func (s *ListTimingSyntheticTasksResponseBodyDataItems) SetStatus(v string) *ListTimingSyntheticTasksResponseBodyDataItems {
	s.Status = &v
	return s
}

func (s *ListTimingSyntheticTasksResponseBodyDataItems) SetTags(v []*ListTimingSyntheticTasksResponseBodyDataItemsTags) *ListTimingSyntheticTasksResponseBodyDataItems {
	s.Tags = v
	return s
}

func (s *ListTimingSyntheticTasksResponseBodyDataItems) SetTaskId(v string) *ListTimingSyntheticTasksResponseBodyDataItems {
	s.TaskId = &v
	return s
}

func (s *ListTimingSyntheticTasksResponseBodyDataItems) SetTaskType(v int32) *ListTimingSyntheticTasksResponseBodyDataItems {
	s.TaskType = &v
	return s
}

func (s *ListTimingSyntheticTasksResponseBodyDataItems) SetUrl(v string) *ListTimingSyntheticTasksResponseBodyDataItems {
	s.Url = &v
	return s
}

type ListTimingSyntheticTasksResponseBodyDataItemsCommonSetting struct {
	CustomHost              *ListTimingSyntheticTasksResponseBodyDataItemsCommonSettingCustomHost              `json:"CustomHost,omitempty" xml:"CustomHost,omitempty" type:"Struct"`
	CustomPrometheusSetting *ListTimingSyntheticTasksResponseBodyDataItemsCommonSettingCustomPrometheusSetting `json:"CustomPrometheusSetting,omitempty" xml:"CustomPrometheusSetting,omitempty" type:"Struct"`
	CustomVPCSetting        *ListTimingSyntheticTasksResponseBodyDataItemsCommonSettingCustomVPCSetting        `json:"CustomVPCSetting,omitempty" xml:"CustomVPCSetting,omitempty" type:"Struct"`
	IpType                  *int32                                                                             `json:"IpType,omitempty" xml:"IpType,omitempty"`
	IsOpenTrace             *bool                                                                              `json:"IsOpenTrace,omitempty" xml:"IsOpenTrace,omitempty"`
	MonitorSamples          *int32                                                                             `json:"MonitorSamples,omitempty" xml:"MonitorSamples,omitempty"`
	TraceClientType         *int32                                                                             `json:"TraceClientType,omitempty" xml:"TraceClientType,omitempty"`
	XtraceRegion            *string                                                                            `json:"XtraceRegion,omitempty" xml:"XtraceRegion,omitempty"`
}

func (s ListTimingSyntheticTasksResponseBodyDataItemsCommonSetting) String() string {
	return tea.Prettify(s)
}

func (s ListTimingSyntheticTasksResponseBodyDataItemsCommonSetting) GoString() string {
	return s.String()
}

func (s *ListTimingSyntheticTasksResponseBodyDataItemsCommonSetting) SetCustomHost(v *ListTimingSyntheticTasksResponseBodyDataItemsCommonSettingCustomHost) *ListTimingSyntheticTasksResponseBodyDataItemsCommonSetting {
	s.CustomHost = v
	return s
}

func (s *ListTimingSyntheticTasksResponseBodyDataItemsCommonSetting) SetCustomPrometheusSetting(v *ListTimingSyntheticTasksResponseBodyDataItemsCommonSettingCustomPrometheusSetting) *ListTimingSyntheticTasksResponseBodyDataItemsCommonSetting {
	s.CustomPrometheusSetting = v
	return s
}

func (s *ListTimingSyntheticTasksResponseBodyDataItemsCommonSetting) SetCustomVPCSetting(v *ListTimingSyntheticTasksResponseBodyDataItemsCommonSettingCustomVPCSetting) *ListTimingSyntheticTasksResponseBodyDataItemsCommonSetting {
	s.CustomVPCSetting = v
	return s
}

func (s *ListTimingSyntheticTasksResponseBodyDataItemsCommonSetting) SetIpType(v int32) *ListTimingSyntheticTasksResponseBodyDataItemsCommonSetting {
	s.IpType = &v
	return s
}

func (s *ListTimingSyntheticTasksResponseBodyDataItemsCommonSetting) SetIsOpenTrace(v bool) *ListTimingSyntheticTasksResponseBodyDataItemsCommonSetting {
	s.IsOpenTrace = &v
	return s
}

func (s *ListTimingSyntheticTasksResponseBodyDataItemsCommonSetting) SetMonitorSamples(v int32) *ListTimingSyntheticTasksResponseBodyDataItemsCommonSetting {
	s.MonitorSamples = &v
	return s
}

func (s *ListTimingSyntheticTasksResponseBodyDataItemsCommonSetting) SetTraceClientType(v int32) *ListTimingSyntheticTasksResponseBodyDataItemsCommonSetting {
	s.TraceClientType = &v
	return s
}

func (s *ListTimingSyntheticTasksResponseBodyDataItemsCommonSetting) SetXtraceRegion(v string) *ListTimingSyntheticTasksResponseBodyDataItemsCommonSetting {
	s.XtraceRegion = &v
	return s
}

type ListTimingSyntheticTasksResponseBodyDataItemsCommonSettingCustomHost struct {
	Hosts      []*ListTimingSyntheticTasksResponseBodyDataItemsCommonSettingCustomHostHosts `json:"Hosts,omitempty" xml:"Hosts,omitempty" type:"Repeated"`
	SelectType *int32                                                                       `json:"SelectType,omitempty" xml:"SelectType,omitempty"`
}

func (s ListTimingSyntheticTasksResponseBodyDataItemsCommonSettingCustomHost) String() string {
	return tea.Prettify(s)
}

func (s ListTimingSyntheticTasksResponseBodyDataItemsCommonSettingCustomHost) GoString() string {
	return s.String()
}

func (s *ListTimingSyntheticTasksResponseBodyDataItemsCommonSettingCustomHost) SetHosts(v []*ListTimingSyntheticTasksResponseBodyDataItemsCommonSettingCustomHostHosts) *ListTimingSyntheticTasksResponseBodyDataItemsCommonSettingCustomHost {
	s.Hosts = v
	return s
}

func (s *ListTimingSyntheticTasksResponseBodyDataItemsCommonSettingCustomHost) SetSelectType(v int32) *ListTimingSyntheticTasksResponseBodyDataItemsCommonSettingCustomHost {
	s.SelectType = &v
	return s
}

type ListTimingSyntheticTasksResponseBodyDataItemsCommonSettingCustomHostHosts struct {
	Domain *string   `json:"Domain,omitempty" xml:"Domain,omitempty"`
	IpType *int32    `json:"IpType,omitempty" xml:"IpType,omitempty"`
	Ips    []*string `json:"Ips,omitempty" xml:"Ips,omitempty" type:"Repeated"`
}

func (s ListTimingSyntheticTasksResponseBodyDataItemsCommonSettingCustomHostHosts) String() string {
	return tea.Prettify(s)
}

func (s ListTimingSyntheticTasksResponseBodyDataItemsCommonSettingCustomHostHosts) GoString() string {
	return s.String()
}

func (s *ListTimingSyntheticTasksResponseBodyDataItemsCommonSettingCustomHostHosts) SetDomain(v string) *ListTimingSyntheticTasksResponseBodyDataItemsCommonSettingCustomHostHosts {
	s.Domain = &v
	return s
}

func (s *ListTimingSyntheticTasksResponseBodyDataItemsCommonSettingCustomHostHosts) SetIpType(v int32) *ListTimingSyntheticTasksResponseBodyDataItemsCommonSettingCustomHostHosts {
	s.IpType = &v
	return s
}

func (s *ListTimingSyntheticTasksResponseBodyDataItemsCommonSettingCustomHostHosts) SetIps(v []*string) *ListTimingSyntheticTasksResponseBodyDataItemsCommonSettingCustomHostHosts {
	s.Ips = v
	return s
}

type ListTimingSyntheticTasksResponseBodyDataItemsCommonSettingCustomPrometheusSetting struct {
	PrometheusClusterId     *string            `json:"PrometheusClusterId,omitempty" xml:"PrometheusClusterId,omitempty"`
	PrometheusClusterRegion *string            `json:"PrometheusClusterRegion,omitempty" xml:"PrometheusClusterRegion,omitempty"`
	PrometheusLabels        map[string]*string `json:"PrometheusLabels,omitempty" xml:"PrometheusLabels,omitempty"`
}

func (s ListTimingSyntheticTasksResponseBodyDataItemsCommonSettingCustomPrometheusSetting) String() string {
	return tea.Prettify(s)
}

func (s ListTimingSyntheticTasksResponseBodyDataItemsCommonSettingCustomPrometheusSetting) GoString() string {
	return s.String()
}

func (s *ListTimingSyntheticTasksResponseBodyDataItemsCommonSettingCustomPrometheusSetting) SetPrometheusClusterId(v string) *ListTimingSyntheticTasksResponseBodyDataItemsCommonSettingCustomPrometheusSetting {
	s.PrometheusClusterId = &v
	return s
}

func (s *ListTimingSyntheticTasksResponseBodyDataItemsCommonSettingCustomPrometheusSetting) SetPrometheusClusterRegion(v string) *ListTimingSyntheticTasksResponseBodyDataItemsCommonSettingCustomPrometheusSetting {
	s.PrometheusClusterRegion = &v
	return s
}

func (s *ListTimingSyntheticTasksResponseBodyDataItemsCommonSettingCustomPrometheusSetting) SetPrometheusLabels(v map[string]*string) *ListTimingSyntheticTasksResponseBodyDataItemsCommonSettingCustomPrometheusSetting {
	s.PrometheusLabels = v
	return s
}

type ListTimingSyntheticTasksResponseBodyDataItemsCommonSettingCustomVPCSetting struct {
	RegionId      *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	SecureGroupId *string `json:"SecureGroupId,omitempty" xml:"SecureGroupId,omitempty"`
	VSwitchId     *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	VpcId         *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
}

func (s ListTimingSyntheticTasksResponseBodyDataItemsCommonSettingCustomVPCSetting) String() string {
	return tea.Prettify(s)
}

func (s ListTimingSyntheticTasksResponseBodyDataItemsCommonSettingCustomVPCSetting) GoString() string {
	return s.String()
}

func (s *ListTimingSyntheticTasksResponseBodyDataItemsCommonSettingCustomVPCSetting) SetRegionId(v string) *ListTimingSyntheticTasksResponseBodyDataItemsCommonSettingCustomVPCSetting {
	s.RegionId = &v
	return s
}

func (s *ListTimingSyntheticTasksResponseBodyDataItemsCommonSettingCustomVPCSetting) SetSecureGroupId(v string) *ListTimingSyntheticTasksResponseBodyDataItemsCommonSettingCustomVPCSetting {
	s.SecureGroupId = &v
	return s
}

func (s *ListTimingSyntheticTasksResponseBodyDataItemsCommonSettingCustomVPCSetting) SetVSwitchId(v string) *ListTimingSyntheticTasksResponseBodyDataItemsCommonSettingCustomVPCSetting {
	s.VSwitchId = &v
	return s
}

func (s *ListTimingSyntheticTasksResponseBodyDataItemsCommonSettingCustomVPCSetting) SetVpcId(v string) *ListTimingSyntheticTasksResponseBodyDataItemsCommonSettingCustomVPCSetting {
	s.VpcId = &v
	return s
}

type ListTimingSyntheticTasksResponseBodyDataItemsTags struct {
	// The tag key.
	//
	// example:
	//
	// key
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The tag value.
	//
	// example:
	//
	// value
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s ListTimingSyntheticTasksResponseBodyDataItemsTags) String() string {
	return tea.Prettify(s)
}

func (s ListTimingSyntheticTasksResponseBodyDataItemsTags) GoString() string {
	return s.String()
}

func (s *ListTimingSyntheticTasksResponseBodyDataItemsTags) SetKey(v string) *ListTimingSyntheticTasksResponseBodyDataItemsTags {
	s.Key = &v
	return s
}

func (s *ListTimingSyntheticTasksResponseBodyDataItemsTags) SetValue(v string) *ListTimingSyntheticTasksResponseBodyDataItemsTags {
	s.Value = &v
	return s
}

type ListTimingSyntheticTasksResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListTimingSyntheticTasksResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListTimingSyntheticTasksResponse) String() string {
	return tea.Prettify(s)
}

func (s ListTimingSyntheticTasksResponse) GoString() string {
	return s.String()
}

func (s *ListTimingSyntheticTasksResponse) SetHeaders(v map[string]*string) *ListTimingSyntheticTasksResponse {
	s.Headers = v
	return s
}

func (s *ListTimingSyntheticTasksResponse) SetStatusCode(v int32) *ListTimingSyntheticTasksResponse {
	s.StatusCode = &v
	return s
}

func (s *ListTimingSyntheticTasksResponse) SetBody(v *ListTimingSyntheticTasksResponseBody) *ListTimingSyntheticTasksResponse {
	s.Body = v
	return s
}

type ListTraceAppsRequest struct {
	// The type of the application that is associated with the alert rule. Valid values:
	//
	// 	- `TRACE`: Application Monitoring
	//
	// 	- `EBPF`: Application Monitoring eBPF Edition
	//
	// example:
	//
	// TRACE
	AppType *string `json:"AppType,omitempty" xml:"AppType,omitempty"`
	// The region ID.
	//
	// example:
	//
	// cn-hangzhou
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// The region ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The resource group ID.
	//
	// example:
	//
	// rg-acfmxyexli2****
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	// The tags.
	Tags []*ListTraceAppsRequestTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
}

func (s ListTraceAppsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListTraceAppsRequest) GoString() string {
	return s.String()
}

func (s *ListTraceAppsRequest) SetAppType(v string) *ListTraceAppsRequest {
	s.AppType = &v
	return s
}

func (s *ListTraceAppsRequest) SetRegion(v string) *ListTraceAppsRequest {
	s.Region = &v
	return s
}

func (s *ListTraceAppsRequest) SetRegionId(v string) *ListTraceAppsRequest {
	s.RegionId = &v
	return s
}

func (s *ListTraceAppsRequest) SetResourceGroupId(v string) *ListTraceAppsRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *ListTraceAppsRequest) SetTags(v []*ListTraceAppsRequestTags) *ListTraceAppsRequest {
	s.Tags = v
	return s
}

type ListTraceAppsRequestTags struct {
	// The tag key.
	//
	// example:
	//
	// TestKey
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The tag value.
	//
	// example:
	//
	// TestValue
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s ListTraceAppsRequestTags) String() string {
	return tea.Prettify(s)
}

func (s ListTraceAppsRequestTags) GoString() string {
	return s.String()
}

func (s *ListTraceAppsRequestTags) SetKey(v string) *ListTraceAppsRequestTags {
	s.Key = &v
	return s
}

func (s *ListTraceAppsRequestTags) SetValue(v string) *ListTraceAppsRequestTags {
	s.Value = &v
	return s
}

type ListTraceAppsResponseBody struct {
	// The HTTP status code returned for the request. Valid values:
	//
	// 	- `2XX`: The request is successful.
	//
	// 	- `3XX`: A redirection message is returned.
	//
	// 	- `4XX`: The request is invalid.
	//
	// 	- `5XX`: A server error occurs.
	//
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The error message returned if the request parameters are invalid.
	//
	// example:
	//
	// Internal error. Please try again. Contact the DingTalk service account if the issue persists after multiple retries.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 40B10E04-81E8-4643-970D-F1B38F2E****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call was successful. Valid values:
	//
	// 	- `true`: The call was successful.
	//
	// 	- `false`: The call failed.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The queried application monitoring tasks.
	TraceApps []*ListTraceAppsResponseBodyTraceApps `json:"TraceApps,omitempty" xml:"TraceApps,omitempty" type:"Repeated"`
}

func (s ListTraceAppsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListTraceAppsResponseBody) GoString() string {
	return s.String()
}

func (s *ListTraceAppsResponseBody) SetCode(v int32) *ListTraceAppsResponseBody {
	s.Code = &v
	return s
}

func (s *ListTraceAppsResponseBody) SetMessage(v string) *ListTraceAppsResponseBody {
	s.Message = &v
	return s
}

func (s *ListTraceAppsResponseBody) SetRequestId(v string) *ListTraceAppsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListTraceAppsResponseBody) SetSuccess(v bool) *ListTraceAppsResponseBody {
	s.Success = &v
	return s
}

func (s *ListTraceAppsResponseBody) SetTraceApps(v []*ListTraceAppsResponseBodyTraceApps) *ListTraceAppsResponseBody {
	s.TraceApps = v
	return s
}

type ListTraceAppsResponseBodyTraceApps struct {
	// The application ID.
	//
	// example:
	//
	// 123
	AppId *int64 `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// The name of the application.
	//
	// example:
	//
	// test-app
	AppName *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	// The cluster ID.
	//
	// example:
	//
	// cc7a37ee31aea4ed1a059eff8034b****
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	// The time when the monitoring task was created. The value is a timestamp. Unit: milliseconds.
	//
	// example:
	//
	// 1529667762000
	CreateTime *int64 `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The tags of the application.
	Labels []*string `json:"Labels,omitempty" xml:"Labels,omitempty" type:"Repeated"`
	// The language.
	//
	// example:
	//
	// PHP
	Language *string `json:"Language,omitempty" xml:"Language,omitempty"`
	// The namespace.
	//
	// example:
	//
	// default
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// The process identifier (PID) of the application.
	//
	// example:
	//
	// a5f9bdeb-2627-4dbe-9247-****
	Pid *string `json:"Pid,omitempty" xml:"Pid,omitempty"`
	// The region ID.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The resource group ID.
	//
	// example:
	//
	// Resource group
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	// Indicates whether the application is displayed in the Application Real-Time Monitoring Service (ARMS) console. Valid values:
	//
	// 	- `true`: yes
	//
	// 	- `false`: no
	//
	// example:
	//
	// true
	Show *bool `json:"Show,omitempty" xml:"Show,omitempty"`
	// The source of the application.
	//
	// example:
	//
	// ACK
	Source *string `json:"Source,omitempty" xml:"Source,omitempty"`
	// The tags.
	Tags []*ListTraceAppsResponseBodyTraceAppsTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
	// The type of the monitoring task. Valid values:
	//
	// 	- `TRACE`: Application Monitoring
	//
	// 	- `RETCODE`: Browser Monitoring
	//
	// example:
	//
	// TRACE
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// The time when the monitoring task was updated. The value is a timestamp. Unit: milliseconds.
	//
	// example:
	//
	// 1529667762000
	UpdateTime *int64 `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
	// The user ID.
	//
	// example:
	//
	// 113197164949****
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	// The type of the workload.
	//
	// example:
	//
	// Deployment
	WorkloadKind *string `json:"WorkloadKind,omitempty" xml:"WorkloadKind,omitempty"`
	// The name of the workload.
	//
	// example:
	//
	// nginx-deployment
	WorkloadName *string `json:"WorkloadName,omitempty" xml:"WorkloadName,omitempty"`
}

func (s ListTraceAppsResponseBodyTraceApps) String() string {
	return tea.Prettify(s)
}

func (s ListTraceAppsResponseBodyTraceApps) GoString() string {
	return s.String()
}

func (s *ListTraceAppsResponseBodyTraceApps) SetAppId(v int64) *ListTraceAppsResponseBodyTraceApps {
	s.AppId = &v
	return s
}

func (s *ListTraceAppsResponseBodyTraceApps) SetAppName(v string) *ListTraceAppsResponseBodyTraceApps {
	s.AppName = &v
	return s
}

func (s *ListTraceAppsResponseBodyTraceApps) SetClusterId(v string) *ListTraceAppsResponseBodyTraceApps {
	s.ClusterId = &v
	return s
}

func (s *ListTraceAppsResponseBodyTraceApps) SetCreateTime(v int64) *ListTraceAppsResponseBodyTraceApps {
	s.CreateTime = &v
	return s
}

func (s *ListTraceAppsResponseBodyTraceApps) SetLabels(v []*string) *ListTraceAppsResponseBodyTraceApps {
	s.Labels = v
	return s
}

func (s *ListTraceAppsResponseBodyTraceApps) SetLanguage(v string) *ListTraceAppsResponseBodyTraceApps {
	s.Language = &v
	return s
}

func (s *ListTraceAppsResponseBodyTraceApps) SetNamespace(v string) *ListTraceAppsResponseBodyTraceApps {
	s.Namespace = &v
	return s
}

func (s *ListTraceAppsResponseBodyTraceApps) SetPid(v string) *ListTraceAppsResponseBodyTraceApps {
	s.Pid = &v
	return s
}

func (s *ListTraceAppsResponseBodyTraceApps) SetRegionId(v string) *ListTraceAppsResponseBodyTraceApps {
	s.RegionId = &v
	return s
}

func (s *ListTraceAppsResponseBodyTraceApps) SetResourceGroupId(v string) *ListTraceAppsResponseBodyTraceApps {
	s.ResourceGroupId = &v
	return s
}

func (s *ListTraceAppsResponseBodyTraceApps) SetShow(v bool) *ListTraceAppsResponseBodyTraceApps {
	s.Show = &v
	return s
}

func (s *ListTraceAppsResponseBodyTraceApps) SetSource(v string) *ListTraceAppsResponseBodyTraceApps {
	s.Source = &v
	return s
}

func (s *ListTraceAppsResponseBodyTraceApps) SetTags(v []*ListTraceAppsResponseBodyTraceAppsTags) *ListTraceAppsResponseBodyTraceApps {
	s.Tags = v
	return s
}

func (s *ListTraceAppsResponseBodyTraceApps) SetType(v string) *ListTraceAppsResponseBodyTraceApps {
	s.Type = &v
	return s
}

func (s *ListTraceAppsResponseBodyTraceApps) SetUpdateTime(v int64) *ListTraceAppsResponseBodyTraceApps {
	s.UpdateTime = &v
	return s
}

func (s *ListTraceAppsResponseBodyTraceApps) SetUserId(v string) *ListTraceAppsResponseBodyTraceApps {
	s.UserId = &v
	return s
}

func (s *ListTraceAppsResponseBodyTraceApps) SetWorkloadKind(v string) *ListTraceAppsResponseBodyTraceApps {
	s.WorkloadKind = &v
	return s
}

func (s *ListTraceAppsResponseBodyTraceApps) SetWorkloadName(v string) *ListTraceAppsResponseBodyTraceApps {
	s.WorkloadName = &v
	return s
}

type ListTraceAppsResponseBodyTraceAppsTags struct {
	// The tag key.
	//
	// example:
	//
	// TestKey
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The tag value.
	//
	// example:
	//
	// TestValue
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s ListTraceAppsResponseBodyTraceAppsTags) String() string {
	return tea.Prettify(s)
}

func (s ListTraceAppsResponseBodyTraceAppsTags) GoString() string {
	return s.String()
}

func (s *ListTraceAppsResponseBodyTraceAppsTags) SetKey(v string) *ListTraceAppsResponseBodyTraceAppsTags {
	s.Key = &v
	return s
}

func (s *ListTraceAppsResponseBodyTraceAppsTags) SetValue(v string) *ListTraceAppsResponseBodyTraceAppsTags {
	s.Value = &v
	return s
}

type ListTraceAppsResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListTraceAppsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListTraceAppsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListTraceAppsResponse) GoString() string {
	return s.String()
}

func (s *ListTraceAppsResponse) SetHeaders(v map[string]*string) *ListTraceAppsResponse {
	s.Headers = v
	return s
}

func (s *ListTraceAppsResponse) SetStatusCode(v int32) *ListTraceAppsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListTraceAppsResponse) SetBody(v *ListTraceAppsResponseBody) *ListTraceAppsResponse {
	s.Body = v
	return s
}

type ManageGetRecordingRuleRequest struct {
	// The cluster ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cc7a37ee31aea4ed1a059eff8034b****
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	// The user ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 876345234
	QueryUserId *string `json:"QueryUserId,omitempty" xml:"QueryUserId,omitempty"`
	// The region ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ManageGetRecordingRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s ManageGetRecordingRuleRequest) GoString() string {
	return s.String()
}

func (s *ManageGetRecordingRuleRequest) SetClusterId(v string) *ManageGetRecordingRuleRequest {
	s.ClusterId = &v
	return s
}

func (s *ManageGetRecordingRuleRequest) SetQueryUserId(v string) *ManageGetRecordingRuleRequest {
	s.QueryUserId = &v
	return s
}

func (s *ManageGetRecordingRuleRequest) SetRegionId(v string) *ManageGetRecordingRuleRequest {
	s.RegionId = &v
	return s
}

type ManageGetRecordingRuleResponseBody struct {
	// The HTTP status code. The status code 200 indicates that the request was successful. Other status codes indicate that the request failed.
	//
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned message.
	//
	// example:
	//
	// --- groups: - name: "recording_demo"   rules:   - expr: "sum(jvm_memory_max_bytes)"     record: "rate_coredns_demo"
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// The returned message.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID. You can use the ID to query logs and troubleshoot issues.
	//
	// example:
	//
	// 34ED024E-9E31-434A-9E4E-D9D15C3****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ManageGetRecordingRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ManageGetRecordingRuleResponseBody) GoString() string {
	return s.String()
}

func (s *ManageGetRecordingRuleResponseBody) SetCode(v int32) *ManageGetRecordingRuleResponseBody {
	s.Code = &v
	return s
}

func (s *ManageGetRecordingRuleResponseBody) SetData(v string) *ManageGetRecordingRuleResponseBody {
	s.Data = &v
	return s
}

func (s *ManageGetRecordingRuleResponseBody) SetMessage(v string) *ManageGetRecordingRuleResponseBody {
	s.Message = &v
	return s
}

func (s *ManageGetRecordingRuleResponseBody) SetRequestId(v string) *ManageGetRecordingRuleResponseBody {
	s.RequestId = &v
	return s
}

type ManageGetRecordingRuleResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ManageGetRecordingRuleResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ManageGetRecordingRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s ManageGetRecordingRuleResponse) GoString() string {
	return s.String()
}

func (s *ManageGetRecordingRuleResponse) SetHeaders(v map[string]*string) *ManageGetRecordingRuleResponse {
	s.Headers = v
	return s
}

func (s *ManageGetRecordingRuleResponse) SetStatusCode(v int32) *ManageGetRecordingRuleResponse {
	s.StatusCode = &v
	return s
}

func (s *ManageGetRecordingRuleResponse) SetBody(v *ManageGetRecordingRuleResponseBody) *ManageGetRecordingRuleResponse {
	s.Body = v
	return s
}

type ManageRecordingRuleRequest struct {
	// The cluster ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cf09705f5a82f454db0d50420b6b4e904
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	// The user ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 87348589207
	QueryUserId *string `json:"QueryUserId,omitempty" xml:"QueryUserId,omitempty"`
	// The region ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The recording rule.
	//
	// This parameter is required.
	//
	// example:
	//
	// groups:\\n- interval: 60s\\n  name: auto_analyzer_recording_rule_60s\\n  rules:\\n  - expr: sum(node_cpu_seconds_total)\\n    record: sum:node_cpu_seconds_total:recording_rule_hash_f341458c0f7d\\n
	RuleYaml *string `json:"RuleYaml,omitempty" xml:"RuleYaml,omitempty"`
}

func (s ManageRecordingRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s ManageRecordingRuleRequest) GoString() string {
	return s.String()
}

func (s *ManageRecordingRuleRequest) SetClusterId(v string) *ManageRecordingRuleRequest {
	s.ClusterId = &v
	return s
}

func (s *ManageRecordingRuleRequest) SetQueryUserId(v string) *ManageRecordingRuleRequest {
	s.QueryUserId = &v
	return s
}

func (s *ManageRecordingRuleRequest) SetRegionId(v string) *ManageRecordingRuleRequest {
	s.RegionId = &v
	return s
}

func (s *ManageRecordingRuleRequest) SetRuleYaml(v string) *ManageRecordingRuleRequest {
	s.RuleYaml = &v
	return s
}

type ManageRecordingRuleResponseBody struct {
	// The HTTP status code. The status code 200 indicates that the request was successful. Other status codes indicate that the request failed.
	//
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The result of the operation.
	//
	// example:
	//
	// success
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// The returned message.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID. You can use the ID to troubleshoot issues.
	//
	// example:
	//
	// CD782AEC-A676-529F-8F26-0ED0FF0EF1EA
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ManageRecordingRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ManageRecordingRuleResponseBody) GoString() string {
	return s.String()
}

func (s *ManageRecordingRuleResponseBody) SetCode(v int32) *ManageRecordingRuleResponseBody {
	s.Code = &v
	return s
}

func (s *ManageRecordingRuleResponseBody) SetData(v string) *ManageRecordingRuleResponseBody {
	s.Data = &v
	return s
}

func (s *ManageRecordingRuleResponseBody) SetMessage(v string) *ManageRecordingRuleResponseBody {
	s.Message = &v
	return s
}

func (s *ManageRecordingRuleResponseBody) SetRequestId(v string) *ManageRecordingRuleResponseBody {
	s.RequestId = &v
	return s
}

type ManageRecordingRuleResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ManageRecordingRuleResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ManageRecordingRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s ManageRecordingRuleResponse) GoString() string {
	return s.String()
}

func (s *ManageRecordingRuleResponse) SetHeaders(v map[string]*string) *ManageRecordingRuleResponse {
	s.Headers = v
	return s
}

func (s *ManageRecordingRuleResponse) SetStatusCode(v int32) *ManageRecordingRuleResponse {
	s.StatusCode = &v
	return s
}

func (s *ManageRecordingRuleResponse) SetBody(v *ManageRecordingRuleResponseBody) *ManageRecordingRuleResponse {
	s.Body = v
	return s
}

type OpenArmsDefaultSLRRequest struct {
	// The ID of the region.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s OpenArmsDefaultSLRRequest) String() string {
	return tea.Prettify(s)
}

func (s OpenArmsDefaultSLRRequest) GoString() string {
	return s.String()
}

func (s *OpenArmsDefaultSLRRequest) SetRegionId(v string) *OpenArmsDefaultSLRRequest {
	s.RegionId = &v
	return s
}

type OpenArmsDefaultSLRResponseBody struct {
	// The returned result.
	//
	// example:
	//
	// true
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 53CACA70-2CF7-490C-BD06-1A2AE4EB****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s OpenArmsDefaultSLRResponseBody) String() string {
	return tea.Prettify(s)
}

func (s OpenArmsDefaultSLRResponseBody) GoString() string {
	return s.String()
}

func (s *OpenArmsDefaultSLRResponseBody) SetData(v string) *OpenArmsDefaultSLRResponseBody {
	s.Data = &v
	return s
}

func (s *OpenArmsDefaultSLRResponseBody) SetRequestId(v string) *OpenArmsDefaultSLRResponseBody {
	s.RequestId = &v
	return s
}

type OpenArmsDefaultSLRResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *OpenArmsDefaultSLRResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s OpenArmsDefaultSLRResponse) String() string {
	return tea.Prettify(s)
}

func (s OpenArmsDefaultSLRResponse) GoString() string {
	return s.String()
}

func (s *OpenArmsDefaultSLRResponse) SetHeaders(v map[string]*string) *OpenArmsDefaultSLRResponse {
	s.Headers = v
	return s
}

func (s *OpenArmsDefaultSLRResponse) SetStatusCode(v int32) *OpenArmsDefaultSLRResponse {
	s.StatusCode = &v
	return s
}

func (s *OpenArmsDefaultSLRResponse) SetBody(v *OpenArmsDefaultSLRResponseBody) *OpenArmsDefaultSLRResponse {
	s.Body = v
	return s
}

type OpenArmsServiceSecondVersionRequest struct {
	// The region ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The type of the service. Valid values:
	//
	// 	- `arms`: ARMS
	//
	// 	- `arms_app`: Application Monitoring
	//
	// 	- `arms_web`: Browser Monitoring
	//
	// 	- `prometheus_monitor`: Managed Service for Prometheus
	//
	// 	- `synthetic_post`: Synthetic Monitoring
	//
	// This parameter is required.
	//
	// example:
	//
	// arms
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s OpenArmsServiceSecondVersionRequest) String() string {
	return tea.Prettify(s)
}

func (s OpenArmsServiceSecondVersionRequest) GoString() string {
	return s.String()
}

func (s *OpenArmsServiceSecondVersionRequest) SetRegionId(v string) *OpenArmsServiceSecondVersionRequest {
	s.RegionId = &v
	return s
}

func (s *OpenArmsServiceSecondVersionRequest) SetType(v string) *OpenArmsServiceSecondVersionRequest {
	s.Type = &v
	return s
}

type OpenArmsServiceSecondVersionResponseBody struct {
	// The service ID returned if the service is activated.
	//
	// example:
	//
	// 20896874992****
	OrderId *string `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 9ED50893-F3C4-42DF-ABB2-C200BE******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s OpenArmsServiceSecondVersionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s OpenArmsServiceSecondVersionResponseBody) GoString() string {
	return s.String()
}

func (s *OpenArmsServiceSecondVersionResponseBody) SetOrderId(v string) *OpenArmsServiceSecondVersionResponseBody {
	s.OrderId = &v
	return s
}

func (s *OpenArmsServiceSecondVersionResponseBody) SetRequestId(v string) *OpenArmsServiceSecondVersionResponseBody {
	s.RequestId = &v
	return s
}

type OpenArmsServiceSecondVersionResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *OpenArmsServiceSecondVersionResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s OpenArmsServiceSecondVersionResponse) String() string {
	return tea.Prettify(s)
}

func (s OpenArmsServiceSecondVersionResponse) GoString() string {
	return s.String()
}

func (s *OpenArmsServiceSecondVersionResponse) SetHeaders(v map[string]*string) *OpenArmsServiceSecondVersionResponse {
	s.Headers = v
	return s
}

func (s *OpenArmsServiceSecondVersionResponse) SetStatusCode(v int32) *OpenArmsServiceSecondVersionResponse {
	s.StatusCode = &v
	return s
}

func (s *OpenArmsServiceSecondVersionResponse) SetBody(v *OpenArmsServiceSecondVersionResponseBody) *OpenArmsServiceSecondVersionResponse {
	s.Body = v
	return s
}

type OpenVClusterRequest struct {
	// The type of the cluster. For cloud services, set this parameter to `cloud-product-prometheus`.
	//
	// This parameter is required.
	//
	// example:
	//
	// cloud-product-prometheus
	ClusterType *string `json:"ClusterType,omitempty" xml:"ClusterType,omitempty"`
	// The length of the cluster ID. Default value: 10.
	//
	// example:
	//
	// 10
	Length *int32 `json:"Length,omitempty" xml:"Length,omitempty"`
	// The name of the cloud service. This parameter is required if you set ClusterType to `cloud-product-prometheus`. Valid values: influxdb, mongodb, and DLA. You cannot specify multiple service names.
	//
	// example:
	//
	// influxdb
	Product *string `json:"Product,omitempty" xml:"Product,omitempty"`
	// Specifies whether to create or query a virtual cluster. This parameter provides backward compatibility.
	//
	// example:
	//
	// false
	RecreateSwitch *bool `json:"RecreateSwitch,omitempty" xml:"RecreateSwitch,omitempty"`
	// The region ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s OpenVClusterRequest) String() string {
	return tea.Prettify(s)
}

func (s OpenVClusterRequest) GoString() string {
	return s.String()
}

func (s *OpenVClusterRequest) SetClusterType(v string) *OpenVClusterRequest {
	s.ClusterType = &v
	return s
}

func (s *OpenVClusterRequest) SetLength(v int32) *OpenVClusterRequest {
	s.Length = &v
	return s
}

func (s *OpenVClusterRequest) SetProduct(v string) *OpenVClusterRequest {
	s.Product = &v
	return s
}

func (s *OpenVClusterRequest) SetRecreateSwitch(v bool) *OpenVClusterRequest {
	s.RecreateSwitch = &v
	return s
}

func (s *OpenVClusterRequest) SetRegionId(v string) *OpenVClusterRequest {
	s.RegionId = &v
	return s
}

type OpenVClusterResponseBody struct {
	// The cluster ID. The value is a string.
	//
	// example:
	//
	// rre59xelcx
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// The request ID. You can use the ID to find logs and troubleshoot issues.
	//
	// example:
	//
	// 42E58E4D-ACAD-4400-8FAF-F762340AE5B3
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s OpenVClusterResponseBody) String() string {
	return tea.Prettify(s)
}

func (s OpenVClusterResponseBody) GoString() string {
	return s.String()
}

func (s *OpenVClusterResponseBody) SetData(v string) *OpenVClusterResponseBody {
	s.Data = &v
	return s
}

func (s *OpenVClusterResponseBody) SetRequestId(v string) *OpenVClusterResponseBody {
	s.RequestId = &v
	return s
}

type OpenVClusterResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *OpenVClusterResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s OpenVClusterResponse) String() string {
	return tea.Prettify(s)
}

func (s OpenVClusterResponse) GoString() string {
	return s.String()
}

func (s *OpenVClusterResponse) SetHeaders(v map[string]*string) *OpenVClusterResponse {
	s.Headers = v
	return s
}

func (s *OpenVClusterResponse) SetStatusCode(v int32) *OpenVClusterResponse {
	s.StatusCode = &v
	return s
}

func (s *OpenVClusterResponse) SetBody(v *OpenVClusterResponseBody) *OpenVClusterResponse {
	s.Body = v
	return s
}

type OpenXtraceDefaultSLRRequest struct {
	// The region ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s OpenXtraceDefaultSLRRequest) String() string {
	return tea.Prettify(s)
}

func (s OpenXtraceDefaultSLRRequest) GoString() string {
	return s.String()
}

func (s *OpenXtraceDefaultSLRRequest) SetRegionId(v string) *OpenXtraceDefaultSLRRequest {
	s.RegionId = &v
	return s
}

type OpenXtraceDefaultSLRResponseBody struct {
	// Indicates whether the request was successful. Valid values:
	//
	// 	- `true`
	//
	// 	- `false`
	//
	// example:
	//
	// true
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 53CACA70-2CF7-490C-BD06-1A2AE4EB****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s OpenXtraceDefaultSLRResponseBody) String() string {
	return tea.Prettify(s)
}

func (s OpenXtraceDefaultSLRResponseBody) GoString() string {
	return s.String()
}

func (s *OpenXtraceDefaultSLRResponseBody) SetData(v string) *OpenXtraceDefaultSLRResponseBody {
	s.Data = &v
	return s
}

func (s *OpenXtraceDefaultSLRResponseBody) SetRequestId(v string) *OpenXtraceDefaultSLRResponseBody {
	s.RequestId = &v
	return s
}

type OpenXtraceDefaultSLRResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *OpenXtraceDefaultSLRResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s OpenXtraceDefaultSLRResponse) String() string {
	return tea.Prettify(s)
}

func (s OpenXtraceDefaultSLRResponse) GoString() string {
	return s.String()
}

func (s *OpenXtraceDefaultSLRResponse) SetHeaders(v map[string]*string) *OpenXtraceDefaultSLRResponse {
	s.Headers = v
	return s
}

func (s *OpenXtraceDefaultSLRResponse) SetStatusCode(v int32) *OpenXtraceDefaultSLRResponse {
	s.StatusCode = &v
	return s
}

func (s *OpenXtraceDefaultSLRResponse) SetBody(v *OpenXtraceDefaultSLRResponseBody) *OpenXtraceDefaultSLRResponse {
	s.Body = v
	return s
}

type QueryAppMetadataRequest struct {
	// The list of metadata IDs. Separate multiple IDs with commas (,).
	//
	// This parameter is required.
	//
	// example:
	//
	// 4c9dd447,3c76c565
	MetaIds *string `json:"MetaIds,omitempty" xml:"MetaIds,omitempty"`
	// The metadata type. Valid values: sql: obtains an SQL statement based on sqlId exception: obtains the exception stack based on exceptionId
	//
	// This parameter is required.
	//
	// example:
	//
	// sql
	MetaType *string `json:"MetaType,omitempty" xml:"MetaType,omitempty"`
	// The process identifier (PID) of the application. For more information about how to obtain the PID, see "Obtain the PID of an application."
	//
	// This parameter is required.
	//
	// example:
	//
	// ggxw4lnjuz@54364d85b97dc56
	Pid *string `json:"Pid,omitempty" xml:"Pid,omitempty"`
	// The region ID. Default value: cn-hangzhou.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s QueryAppMetadataRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryAppMetadataRequest) GoString() string {
	return s.String()
}

func (s *QueryAppMetadataRequest) SetMetaIds(v string) *QueryAppMetadataRequest {
	s.MetaIds = &v
	return s
}

func (s *QueryAppMetadataRequest) SetMetaType(v string) *QueryAppMetadataRequest {
	s.MetaType = &v
	return s
}

func (s *QueryAppMetadataRequest) SetPid(v string) *QueryAppMetadataRequest {
	s.Pid = &v
	return s
}

func (s *QueryAppMetadataRequest) SetRegionId(v string) *QueryAppMetadataRequest {
	s.RegionId = &v
	return s
}

type QueryAppMetadataResponseBody struct {
	// The HTTP status code returned for the request. Valid values:
	//
	// 	- 2XX: The request is successful.
	//
	// 	- 3XX: A redirection message is returned.
	//
	// 	- 4XX: The request is invalid.
	//
	// 	- 5XX: A server error occurs.
	//
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned struct.
	//
	// example:
	//
	// {\\"408d5533\\": \\"SELECT 	- FROM user_base_info\\"}
	Data map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	// The HTTP status code returned.
	//
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 51877BAC-330C-5845-BDFD-C7859AD33FB7
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call was successful. Valid values:
	//
	// 	- `true`: The call was successful.
	//
	// 	- `false`: The call failed.
	//
	// example:
	//
	// True
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s QueryAppMetadataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryAppMetadataResponseBody) GoString() string {
	return s.String()
}

func (s *QueryAppMetadataResponseBody) SetCode(v int32) *QueryAppMetadataResponseBody {
	s.Code = &v
	return s
}

func (s *QueryAppMetadataResponseBody) SetData(v map[string]interface{}) *QueryAppMetadataResponseBody {
	s.Data = v
	return s
}

func (s *QueryAppMetadataResponseBody) SetHttpStatusCode(v int32) *QueryAppMetadataResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *QueryAppMetadataResponseBody) SetRequestId(v string) *QueryAppMetadataResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryAppMetadataResponseBody) SetSuccess(v bool) *QueryAppMetadataResponseBody {
	s.Success = &v
	return s
}

type QueryAppMetadataResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryAppMetadataResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryAppMetadataResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryAppMetadataResponse) GoString() string {
	return s.String()
}

func (s *QueryAppMetadataResponse) SetHeaders(v map[string]*string) *QueryAppMetadataResponse {
	s.Headers = v
	return s
}

func (s *QueryAppMetadataResponse) SetStatusCode(v int32) *QueryAppMetadataResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryAppMetadataResponse) SetBody(v *QueryAppMetadataResponseBody) *QueryAppMetadataResponse {
	s.Body = v
	return s
}

type QueryAppTopologyRequest struct {
	// The application type
	//
	// example:
	//
	// TRACE
	AppType *string `json:"AppType,omitempty" xml:"AppType,omitempty"`
	// The database domain name.
	//
	// example:
	//
	// rm-xxx.mysql.rds.aliyuncs.com:3306
	Db *string `json:"Db,omitempty" xml:"Db,omitempty"`
	// The name of the database.
	//
	// example:
	//
	// orders
	DbName *string `json:"DbName,omitempty" xml:"DbName,omitempty"`
	// The end of the time range to query. Unit: milliseconds.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1671952708499
	EndTime *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The filter conditions.
	Filters map[string]*string `json:"Filters,omitempty" xml:"Filters,omitempty"`
	// The ID of the application.
	//
	// Log on to the **ARMS console**. In the left-side navigation pane, choose **Browser Monitoring*	- > **Browser Monitoring**. On the Browser Monitoring page, click the name of an application. The URL in the address bar contains the process ID (PID) of the application. The PID is indicated in the pid=xxx format. The PID is usually percent encoded as xxx%40xxx. You must modify this value to remove the percent encoding. For example, if the PID in the URL is eb4zdose6v%409781be0f44d\\*\\*\\*\\*, you must replace %40 with an at sign (@) to obtain eb4zdose6v@9781be0f44d\\*\\*\\*\\*.
	//
	// example:
	//
	// atc889zkcf@d8deedfa9bf****
	Pid *string `json:"Pid,omitempty" xml:"Pid,omitempty"`
	// The ID of the region.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// RPC interface name.
	//
	// example:
	//
	// /eventCenter
	Rpc *string `json:"Rpc,omitempty" xml:"Rpc,omitempty"`
	// The start of the time range to query. Unit: milliseconds.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1595568910000
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The type kind of topology.
	//
	// This parameter is required.
	//
	// example:
	//
	// apm_apps_v2
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s QueryAppTopologyRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryAppTopologyRequest) GoString() string {
	return s.String()
}

func (s *QueryAppTopologyRequest) SetAppType(v string) *QueryAppTopologyRequest {
	s.AppType = &v
	return s
}

func (s *QueryAppTopologyRequest) SetDb(v string) *QueryAppTopologyRequest {
	s.Db = &v
	return s
}

func (s *QueryAppTopologyRequest) SetDbName(v string) *QueryAppTopologyRequest {
	s.DbName = &v
	return s
}

func (s *QueryAppTopologyRequest) SetEndTime(v int64) *QueryAppTopologyRequest {
	s.EndTime = &v
	return s
}

func (s *QueryAppTopologyRequest) SetFilters(v map[string]*string) *QueryAppTopologyRequest {
	s.Filters = v
	return s
}

func (s *QueryAppTopologyRequest) SetPid(v string) *QueryAppTopologyRequest {
	s.Pid = &v
	return s
}

func (s *QueryAppTopologyRequest) SetRegionId(v string) *QueryAppTopologyRequest {
	s.RegionId = &v
	return s
}

func (s *QueryAppTopologyRequest) SetRpc(v string) *QueryAppTopologyRequest {
	s.Rpc = &v
	return s
}

func (s *QueryAppTopologyRequest) SetStartTime(v int64) *QueryAppTopologyRequest {
	s.StartTime = &v
	return s
}

func (s *QueryAppTopologyRequest) SetType(v string) *QueryAppTopologyRequest {
	s.Type = &v
	return s
}

type QueryAppTopologyShrinkRequest struct {
	// The application type
	//
	// example:
	//
	// TRACE
	AppType *string `json:"AppType,omitempty" xml:"AppType,omitempty"`
	// The database domain name.
	//
	// example:
	//
	// rm-xxx.mysql.rds.aliyuncs.com:3306
	Db *string `json:"Db,omitempty" xml:"Db,omitempty"`
	// The name of the database.
	//
	// example:
	//
	// orders
	DbName *string `json:"DbName,omitempty" xml:"DbName,omitempty"`
	// The end of the time range to query. Unit: milliseconds.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1671952708499
	EndTime *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The filter conditions.
	FiltersShrink *string `json:"Filters,omitempty" xml:"Filters,omitempty"`
	// The ID of the application.
	//
	// Log on to the **ARMS console**. In the left-side navigation pane, choose **Browser Monitoring*	- > **Browser Monitoring**. On the Browser Monitoring page, click the name of an application. The URL in the address bar contains the process ID (PID) of the application. The PID is indicated in the pid=xxx format. The PID is usually percent encoded as xxx%40xxx. You must modify this value to remove the percent encoding. For example, if the PID in the URL is eb4zdose6v%409781be0f44d\\*\\*\\*\\*, you must replace %40 with an at sign (@) to obtain eb4zdose6v@9781be0f44d\\*\\*\\*\\*.
	//
	// example:
	//
	// atc889zkcf@d8deedfa9bf****
	Pid *string `json:"Pid,omitempty" xml:"Pid,omitempty"`
	// The ID of the region.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// RPC interface name.
	//
	// example:
	//
	// /eventCenter
	Rpc *string `json:"Rpc,omitempty" xml:"Rpc,omitempty"`
	// The start of the time range to query. Unit: milliseconds.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1595568910000
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The type kind of topology.
	//
	// This parameter is required.
	//
	// example:
	//
	// apm_apps_v2
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s QueryAppTopologyShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryAppTopologyShrinkRequest) GoString() string {
	return s.String()
}

func (s *QueryAppTopologyShrinkRequest) SetAppType(v string) *QueryAppTopologyShrinkRequest {
	s.AppType = &v
	return s
}

func (s *QueryAppTopologyShrinkRequest) SetDb(v string) *QueryAppTopologyShrinkRequest {
	s.Db = &v
	return s
}

func (s *QueryAppTopologyShrinkRequest) SetDbName(v string) *QueryAppTopologyShrinkRequest {
	s.DbName = &v
	return s
}

func (s *QueryAppTopologyShrinkRequest) SetEndTime(v int64) *QueryAppTopologyShrinkRequest {
	s.EndTime = &v
	return s
}

func (s *QueryAppTopologyShrinkRequest) SetFiltersShrink(v string) *QueryAppTopologyShrinkRequest {
	s.FiltersShrink = &v
	return s
}

func (s *QueryAppTopologyShrinkRequest) SetPid(v string) *QueryAppTopologyShrinkRequest {
	s.Pid = &v
	return s
}

func (s *QueryAppTopologyShrinkRequest) SetRegionId(v string) *QueryAppTopologyShrinkRequest {
	s.RegionId = &v
	return s
}

func (s *QueryAppTopologyShrinkRequest) SetRpc(v string) *QueryAppTopologyShrinkRequest {
	s.Rpc = &v
	return s
}

func (s *QueryAppTopologyShrinkRequest) SetStartTime(v int64) *QueryAppTopologyShrinkRequest {
	s.StartTime = &v
	return s
}

func (s *QueryAppTopologyShrinkRequest) SetType(v string) *QueryAppTopologyShrinkRequest {
	s.Type = &v
	return s
}

type QueryAppTopologyResponseBody struct {
	// The status code. The status code 200 indicates that the request was successful. If another status code is returned, the request failed.
	//
	// example:
	//
	// 200
	Code *int64 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned struct.
	//
	// example:
	//
	// "Data": {
	//
	//     "nodes": [
	//
	//       {
	//
	//         "data": {
	//
	//           "duration": 0.2254335260115607,
	//
	//           "requests": 1211,
	//
	//           "type": "MYSQL",
	//
	//           "errors": 0
	//
	//         },
	//
	//         "id": "ggxw4lnjuz@c0507xxxx##MYSQL",
	//
	//         "label": "mysql-pod:3306(cart_db)"
	//
	//       }
	//
	//     ],
	//
	//     "edges": [
	//
	//       {
	//
	//         "data": {
	//
	//           "duration": 0.03333333333333333,
	//
	//           "requests": 600,
	//
	//           "type": "UNKNOWN",
	//
	//           "errors": 0
	//
	//         },
	//
	//         "id": "1974097372",
	//
	//         "source": "ggxw4lnjuz@456xxxxx",
	//
	//         "target": "ggxw4lnjuz@c0507xxxx"
	//
	//       }
	//
	//     ]
	//
	//   }
	Data interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	// The returned message.
	//
	// example:
	//
	// Internal error. Please try again. Contact the DingTalk service account if the issue                              persists after multiple retries.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 78901766-3806-4E96-8E47-CFEF59E4****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call was successful. Valid values:
	//
	// 	- true: The call was successful.
	//
	// 	- false: The call failed.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s QueryAppTopologyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryAppTopologyResponseBody) GoString() string {
	return s.String()
}

func (s *QueryAppTopologyResponseBody) SetCode(v int64) *QueryAppTopologyResponseBody {
	s.Code = &v
	return s
}

func (s *QueryAppTopologyResponseBody) SetData(v interface{}) *QueryAppTopologyResponseBody {
	s.Data = v
	return s
}

func (s *QueryAppTopologyResponseBody) SetMessage(v string) *QueryAppTopologyResponseBody {
	s.Message = &v
	return s
}

func (s *QueryAppTopologyResponseBody) SetRequestId(v string) *QueryAppTopologyResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryAppTopologyResponseBody) SetSuccess(v bool) *QueryAppTopologyResponseBody {
	s.Success = &v
	return s
}

type QueryAppTopologyResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryAppTopologyResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryAppTopologyResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryAppTopologyResponse) GoString() string {
	return s.String()
}

func (s *QueryAppTopologyResponse) SetHeaders(v map[string]*string) *QueryAppTopologyResponse {
	s.Headers = v
	return s
}

func (s *QueryAppTopologyResponse) SetStatusCode(v int32) *QueryAppTopologyResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryAppTopologyResponse) SetBody(v *QueryAppTopologyResponseBody) *QueryAppTopologyResponse {
	s.Body = v
	return s
}

type QueryCommercialUsageRequest struct {
	AdvancedFilters []*QueryCommercialUsageRequestAdvancedFilters `json:"AdvancedFilters,omitempty" xml:"AdvancedFilters,omitempty" type:"Repeated"`
	Dimensions      []*string                                     `json:"Dimensions,omitempty" xml:"Dimensions,omitempty" type:"Repeated"`
	// This parameter is required.
	//
	// example:
	//
	// 1699286400000
	EndTime *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// example:
	//
	// 3600
	IntervalInSec *int32    `json:"IntervalInSec,omitempty" xml:"IntervalInSec,omitempty"`
	Measures      []*string `json:"Measures,omitempty" xml:"Measures,omitempty" type:"Repeated"`
	// This parameter is required.
	//
	// example:
	//
	// USAGEFEE.STAT
	Metric *string `json:"Metric,omitempty" xml:"Metric,omitempty"`
	// example:
	//
	// ASC
	Order *string `json:"Order,omitempty" xml:"Order,omitempty"`
	// example:
	//
	// dataType
	OrderBy *string `json:"OrderBy,omitempty" xml:"OrderBy,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// instantQuery
	QueryType *string `json:"QueryType,omitempty" xml:"QueryType,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1699200000000
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s QueryCommercialUsageRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryCommercialUsageRequest) GoString() string {
	return s.String()
}

func (s *QueryCommercialUsageRequest) SetAdvancedFilters(v []*QueryCommercialUsageRequestAdvancedFilters) *QueryCommercialUsageRequest {
	s.AdvancedFilters = v
	return s
}

func (s *QueryCommercialUsageRequest) SetDimensions(v []*string) *QueryCommercialUsageRequest {
	s.Dimensions = v
	return s
}

func (s *QueryCommercialUsageRequest) SetEndTime(v int64) *QueryCommercialUsageRequest {
	s.EndTime = &v
	return s
}

func (s *QueryCommercialUsageRequest) SetIntervalInSec(v int32) *QueryCommercialUsageRequest {
	s.IntervalInSec = &v
	return s
}

func (s *QueryCommercialUsageRequest) SetMeasures(v []*string) *QueryCommercialUsageRequest {
	s.Measures = v
	return s
}

func (s *QueryCommercialUsageRequest) SetMetric(v string) *QueryCommercialUsageRequest {
	s.Metric = &v
	return s
}

func (s *QueryCommercialUsageRequest) SetOrder(v string) *QueryCommercialUsageRequest {
	s.Order = &v
	return s
}

func (s *QueryCommercialUsageRequest) SetOrderBy(v string) *QueryCommercialUsageRequest {
	s.OrderBy = &v
	return s
}

func (s *QueryCommercialUsageRequest) SetQueryType(v string) *QueryCommercialUsageRequest {
	s.QueryType = &v
	return s
}

func (s *QueryCommercialUsageRequest) SetStartTime(v int64) *QueryCommercialUsageRequest {
	s.StartTime = &v
	return s
}

type QueryCommercialUsageRequestAdvancedFilters struct {
	// example:
	//
	// regionId
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// example:
	//
	// eq
	OpType *string `json:"OpType,omitempty" xml:"OpType,omitempty"`
	// example:
	//
	// cn-hangzhou
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s QueryCommercialUsageRequestAdvancedFilters) String() string {
	return tea.Prettify(s)
}

func (s QueryCommercialUsageRequestAdvancedFilters) GoString() string {
	return s.String()
}

func (s *QueryCommercialUsageRequestAdvancedFilters) SetKey(v string) *QueryCommercialUsageRequestAdvancedFilters {
	s.Key = &v
	return s
}

func (s *QueryCommercialUsageRequestAdvancedFilters) SetOpType(v string) *QueryCommercialUsageRequestAdvancedFilters {
	s.OpType = &v
	return s
}

func (s *QueryCommercialUsageRequestAdvancedFilters) SetValue(v string) *QueryCommercialUsageRequestAdvancedFilters {
	s.Value = &v
	return s
}

type QueryCommercialUsageResponseBody struct {
	// example:
	//
	// 200
	Code *string                               `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *QueryCommercialUsageResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 99A663CB-8D7B-4B0D-A006-03C8EE38E7BB
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s QueryCommercialUsageResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryCommercialUsageResponseBody) GoString() string {
	return s.String()
}

func (s *QueryCommercialUsageResponseBody) SetCode(v string) *QueryCommercialUsageResponseBody {
	s.Code = &v
	return s
}

func (s *QueryCommercialUsageResponseBody) SetData(v *QueryCommercialUsageResponseBodyData) *QueryCommercialUsageResponseBody {
	s.Data = v
	return s
}

func (s *QueryCommercialUsageResponseBody) SetMessage(v string) *QueryCommercialUsageResponseBody {
	s.Message = &v
	return s
}

func (s *QueryCommercialUsageResponseBody) SetRequestId(v string) *QueryCommercialUsageResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryCommercialUsageResponseBody) SetSuccess(v bool) *QueryCommercialUsageResponseBody {
	s.Success = &v
	return s
}

type QueryCommercialUsageResponseBodyData struct {
	// example:
	//
	// true
	Complete *bool                    `json:"Complete,omitempty" xml:"Complete,omitempty"`
	Items    []map[string]interface{} `json:"Items,omitempty" xml:"Items,omitempty" type:"Repeated"`
}

func (s QueryCommercialUsageResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s QueryCommercialUsageResponseBodyData) GoString() string {
	return s.String()
}

func (s *QueryCommercialUsageResponseBodyData) SetComplete(v bool) *QueryCommercialUsageResponseBodyData {
	s.Complete = &v
	return s
}

func (s *QueryCommercialUsageResponseBodyData) SetItems(v []map[string]interface{}) *QueryCommercialUsageResponseBodyData {
	s.Items = v
	return s
}

type QueryCommercialUsageResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryCommercialUsageResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryCommercialUsageResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryCommercialUsageResponse) GoString() string {
	return s.String()
}

func (s *QueryCommercialUsageResponse) SetHeaders(v map[string]*string) *QueryCommercialUsageResponse {
	s.Headers = v
	return s
}

func (s *QueryCommercialUsageResponse) SetStatusCode(v int32) *QueryCommercialUsageResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryCommercialUsageResponse) SetBody(v *QueryCommercialUsageResponseBody) *QueryCommercialUsageResponse {
	s.Body = v
	return s
}

type QueryMetricByPageRequest struct {
	// The number of the page to return. Default value: `1`.
	//
	// example:
	//
	// 1
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// Custom filter conditions.
	CustomFilters []*string `json:"CustomFilters,omitempty" xml:"CustomFilters,omitempty" type:"Repeated"`
	// The dimensions of the metric that you want to query.
	//
	// example:
	//
	// ["detector_browser","detector_device"]
	Dimensions []*string `json:"Dimensions,omitempty" xml:"Dimensions,omitempty" type:"Repeated"`
	// The end of the time range to query. Unit: milliseconds.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1667546895000
	EndTime *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The filter conditions.
	Filters []*QueryMetricByPageRequestFilters `json:"Filters,omitempty" xml:"Filters,omitempty" type:"Repeated"`
	// The time interval at which data entries are aggregated. Unit: milliseconds. Minimum value: 60000.
	//
	// example:
	//
	// 100000
	IntervalInSec *int32 `json:"IntervalInSec,omitempty" xml:"IntervalInSec,omitempty"`
	// The measures of the metric that you want to query.
	//
	// example:
	//
	// pv
	Measures []*string `json:"Measures,omitempty" xml:"Measures,omitempty" type:"Repeated"`
	// The metric that you want to query. You cannot specify a custom metric. For more information, see the "Application monitoring metrics that can be queried" section.
	//
	// This parameter is required.
	//
	// example:
	//
	// appstat.host
	Metric *string `json:"Metric,omitempty" xml:"Metric,omitempty"`
	// The order in which measures are sorted. Valid values:
	//
	// 	- `ASC`: ascending order
	//
	// 	- `DESC`: descending order
	//
	// > If you do not specify the parameter, data is not sorted.
	//
	// example:
	//
	// ASC
	Order *string `json:"Order,omitempty" xml:"Order,omitempty"`
	// The dimension from which metrics are sorted. You can set this parameter to a supported dimension.
	//
	// example:
	//
	// pid
	OrderBy *string `json:"OrderBy,omitempty" xml:"OrderBy,omitempty"`
	// The number of entries to return on each page. This parameter is no longer supported. The number of entries to return on each page.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The start of the time range to query. Unit: milliseconds.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1667287695000
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s QueryMetricByPageRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryMetricByPageRequest) GoString() string {
	return s.String()
}

func (s *QueryMetricByPageRequest) SetCurrentPage(v int32) *QueryMetricByPageRequest {
	s.CurrentPage = &v
	return s
}

func (s *QueryMetricByPageRequest) SetCustomFilters(v []*string) *QueryMetricByPageRequest {
	s.CustomFilters = v
	return s
}

func (s *QueryMetricByPageRequest) SetDimensions(v []*string) *QueryMetricByPageRequest {
	s.Dimensions = v
	return s
}

func (s *QueryMetricByPageRequest) SetEndTime(v int64) *QueryMetricByPageRequest {
	s.EndTime = &v
	return s
}

func (s *QueryMetricByPageRequest) SetFilters(v []*QueryMetricByPageRequestFilters) *QueryMetricByPageRequest {
	s.Filters = v
	return s
}

func (s *QueryMetricByPageRequest) SetIntervalInSec(v int32) *QueryMetricByPageRequest {
	s.IntervalInSec = &v
	return s
}

func (s *QueryMetricByPageRequest) SetMeasures(v []*string) *QueryMetricByPageRequest {
	s.Measures = v
	return s
}

func (s *QueryMetricByPageRequest) SetMetric(v string) *QueryMetricByPageRequest {
	s.Metric = &v
	return s
}

func (s *QueryMetricByPageRequest) SetOrder(v string) *QueryMetricByPageRequest {
	s.Order = &v
	return s
}

func (s *QueryMetricByPageRequest) SetOrderBy(v string) *QueryMetricByPageRequest {
	s.OrderBy = &v
	return s
}

func (s *QueryMetricByPageRequest) SetPageSize(v int32) *QueryMetricByPageRequest {
	s.PageSize = &v
	return s
}

func (s *QueryMetricByPageRequest) SetStartTime(v int64) *QueryMetricByPageRequest {
	s.StartTime = &v
	return s
}

type QueryMetricByPageRequestFilters struct {
	// The key of the filter condition. You must set the key to `pid` or `regionId`.
	//
	// example:
	//
	// pid
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The value of the filter condition. You must set the value of the `pid` or `regionId` condition. For information about how to obtain the `pid`, see the "Obtain the PID of an application" section.
	//
	// example:
	//
	// xxx@74xxx
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s QueryMetricByPageRequestFilters) String() string {
	return tea.Prettify(s)
}

func (s QueryMetricByPageRequestFilters) GoString() string {
	return s.String()
}

func (s *QueryMetricByPageRequestFilters) SetKey(v string) *QueryMetricByPageRequestFilters {
	s.Key = &v
	return s
}

func (s *QueryMetricByPageRequestFilters) SetValue(v string) *QueryMetricByPageRequestFilters {
	s.Value = &v
	return s
}

type QueryMetricByPageResponseBody struct {
	// The HTTP status code returned for the request. Valid values:
	//
	// 	- 2XX: The request was successful.
	//
	// 	- 3XX: A redirection message was returned.
	//
	// 	- 4XX: The request was invalid.
	//
	// 	- 5XX: A server error occurred.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The information about the array object.
	Data *QueryMetricByPageResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The error message returned if the call fails.
	//
	// example:
	//
	// StartTime is mandatory for this action.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 687F9CB7-4798-57BF-A6EE-E6CC76******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call was successful. Valid values:
	//
	// 	- `true`: The call was successful.
	//
	// 	- `false`: The call failed.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s QueryMetricByPageResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryMetricByPageResponseBody) GoString() string {
	return s.String()
}

func (s *QueryMetricByPageResponseBody) SetCode(v string) *QueryMetricByPageResponseBody {
	s.Code = &v
	return s
}

func (s *QueryMetricByPageResponseBody) SetData(v *QueryMetricByPageResponseBodyData) *QueryMetricByPageResponseBody {
	s.Data = v
	return s
}

func (s *QueryMetricByPageResponseBody) SetMessage(v string) *QueryMetricByPageResponseBody {
	s.Message = &v
	return s
}

func (s *QueryMetricByPageResponseBody) SetRequestId(v string) *QueryMetricByPageResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryMetricByPageResponseBody) SetSuccess(v bool) *QueryMetricByPageResponseBody {
	s.Success = &v
	return s
}

type QueryMetricByPageResponseBodyData struct {
	// Whether the paging query ends.
	//
	// true: end.
	//
	// false: Need to continue pagination (continue to query after CurrentPage+1).
	//
	// example:
	//
	// false
	Completed *bool `json:"Completed,omitempty" xml:"Completed,omitempty"`
	// The data entries returned.
	Items []map[string]interface{} `json:"Items,omitempty" xml:"Items,omitempty" type:"Repeated"`
	// The page number of the returned page.
	//
	// example:
	//
	// 1
	Page *int32 `json:"Page,omitempty" xml:"Page,omitempty"`
	// The number of entries returned per page.
	//
	// example:
	//
	// 1
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 2
	Total *int32 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s QueryMetricByPageResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s QueryMetricByPageResponseBodyData) GoString() string {
	return s.String()
}

func (s *QueryMetricByPageResponseBodyData) SetCompleted(v bool) *QueryMetricByPageResponseBodyData {
	s.Completed = &v
	return s
}

func (s *QueryMetricByPageResponseBodyData) SetItems(v []map[string]interface{}) *QueryMetricByPageResponseBodyData {
	s.Items = v
	return s
}

func (s *QueryMetricByPageResponseBodyData) SetPage(v int32) *QueryMetricByPageResponseBodyData {
	s.Page = &v
	return s
}

func (s *QueryMetricByPageResponseBodyData) SetPageSize(v int32) *QueryMetricByPageResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *QueryMetricByPageResponseBodyData) SetTotal(v int32) *QueryMetricByPageResponseBodyData {
	s.Total = &v
	return s
}

type QueryMetricByPageResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryMetricByPageResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryMetricByPageResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryMetricByPageResponse) GoString() string {
	return s.String()
}

func (s *QueryMetricByPageResponse) SetHeaders(v map[string]*string) *QueryMetricByPageResponse {
	s.Headers = v
	return s
}

func (s *QueryMetricByPageResponse) SetStatusCode(v int32) *QueryMetricByPageResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryMetricByPageResponse) SetBody(v *QueryMetricByPageResponseBody) *QueryMetricByPageResponse {
	s.Body = v
	return s
}

type QueryPromInstallStatusRequest struct {
	// The cluster ID.
	//
	// example:
	//
	// cc7a37ee31aea4ed1a059eff8034b****
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	// The region ID.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s QueryPromInstallStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryPromInstallStatusRequest) GoString() string {
	return s.String()
}

func (s *QueryPromInstallStatusRequest) SetClusterId(v string) *QueryPromInstallStatusRequest {
	s.ClusterId = &v
	return s
}

func (s *QueryPromInstallStatusRequest) SetRegionId(v string) *QueryPromInstallStatusRequest {
	s.RegionId = &v
	return s
}

type QueryPromInstallStatusResponseBody struct {
	// The returned struct.
	Data *QueryPromInstallStatusResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// 27E653FA-5958-45BE-8AA9-14D884DC****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s QueryPromInstallStatusResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryPromInstallStatusResponseBody) GoString() string {
	return s.String()
}

func (s *QueryPromInstallStatusResponseBody) SetData(v *QueryPromInstallStatusResponseBodyData) *QueryPromInstallStatusResponseBody {
	s.Data = v
	return s
}

func (s *QueryPromInstallStatusResponseBody) SetRequestId(v string) *QueryPromInstallStatusResponseBody {
	s.RequestId = &v
	return s
}

type QueryPromInstallStatusResponseBodyData struct {
	// Indicates whether the call was successful. Valid values:
	//
	// true: The call was successful. false: The call fails.
	//
	// example:
	//
	// true
	IsControllerInstalled *bool `json:"isControllerInstalled,omitempty" xml:"isControllerInstalled,omitempty"`
}

func (s QueryPromInstallStatusResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s QueryPromInstallStatusResponseBodyData) GoString() string {
	return s.String()
}

func (s *QueryPromInstallStatusResponseBodyData) SetIsControllerInstalled(v bool) *QueryPromInstallStatusResponseBodyData {
	s.IsControllerInstalled = &v
	return s
}

type QueryPromInstallStatusResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryPromInstallStatusResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryPromInstallStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryPromInstallStatusResponse) GoString() string {
	return s.String()
}

func (s *QueryPromInstallStatusResponse) SetHeaders(v map[string]*string) *QueryPromInstallStatusResponse {
	s.Headers = v
	return s
}

func (s *QueryPromInstallStatusResponse) SetStatusCode(v int32) *QueryPromInstallStatusResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryPromInstallStatusResponse) SetBody(v *QueryPromInstallStatusResponseBody) *QueryPromInstallStatusResponse {
	s.Body = v
	return s
}

type QueryReleaseMetricRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// a341a2f2-ed07-4257-aae9-dfb1be******
	ChangeOrderId *string `json:"ChangeOrderId,omitempty" xml:"ChangeOrderId,omitempty"`
	// example:
	//
	// 1634005438000
	CreateTime *int64 `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// SystemContrast
	MetricType *string `json:"MetricType,omitempty" xml:"MetricType,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 8b46d03f-5947-449d-90fd-3a96c2******
	Pid *string `json:"Pid,omitempty" xml:"Pid,omitempty"`
	// example:
	//
	// null
	ProxyUserId *string `json:"ProxyUserId,omitempty" xml:"ProxyUserId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1632798718632
	ReleaseEndTime *int64 `json:"ReleaseEndTime,omitempty" xml:"ReleaseEndTime,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1632798686692
	ReleaseStartTime *int64 `json:"ReleaseStartTime,omitempty" xml:"ReleaseStartTime,omitempty"`
	// example:
	//
	// clothservice
	Service *string `json:"Service,omitempty" xml:"Service,omitempty"`
}

func (s QueryReleaseMetricRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryReleaseMetricRequest) GoString() string {
	return s.String()
}

func (s *QueryReleaseMetricRequest) SetChangeOrderId(v string) *QueryReleaseMetricRequest {
	s.ChangeOrderId = &v
	return s
}

func (s *QueryReleaseMetricRequest) SetCreateTime(v int64) *QueryReleaseMetricRequest {
	s.CreateTime = &v
	return s
}

func (s *QueryReleaseMetricRequest) SetMetricType(v string) *QueryReleaseMetricRequest {
	s.MetricType = &v
	return s
}

func (s *QueryReleaseMetricRequest) SetPid(v string) *QueryReleaseMetricRequest {
	s.Pid = &v
	return s
}

func (s *QueryReleaseMetricRequest) SetProxyUserId(v string) *QueryReleaseMetricRequest {
	s.ProxyUserId = &v
	return s
}

func (s *QueryReleaseMetricRequest) SetReleaseEndTime(v int64) *QueryReleaseMetricRequest {
	s.ReleaseEndTime = &v
	return s
}

func (s *QueryReleaseMetricRequest) SetReleaseStartTime(v int64) *QueryReleaseMetricRequest {
	s.ReleaseStartTime = &v
	return s
}

func (s *QueryReleaseMetricRequest) SetService(v string) *QueryReleaseMetricRequest {
	s.Service = &v
	return s
}

type QueryReleaseMetricResponseBody struct {
	// example:
	//
	// {"data":{"SystemCpuUser":{"all":[{"date":1632798718000,"val":4.3277,"dim":"SystemCpuUser"},{"date":1632798733000,"val":8.1091,"dim":"SystemCpuUser"}]},"SystemMemUtil":{"all":[{"date":1632798718000,"val":73.4227,"dim":"SystemMemUtil"},{"date":1632798733000,"val":93.0977,"dim":"SystemMemUtil"}]}},"success":true}
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// example:
	//
	// 46355DD8-FC56-40C5-BFC6-269DE4F9****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s QueryReleaseMetricResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryReleaseMetricResponseBody) GoString() string {
	return s.String()
}

func (s *QueryReleaseMetricResponseBody) SetData(v string) *QueryReleaseMetricResponseBody {
	s.Data = &v
	return s
}

func (s *QueryReleaseMetricResponseBody) SetRequestId(v string) *QueryReleaseMetricResponseBody {
	s.RequestId = &v
	return s
}

type QueryReleaseMetricResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryReleaseMetricResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryReleaseMetricResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryReleaseMetricResponse) GoString() string {
	return s.String()
}

func (s *QueryReleaseMetricResponse) SetHeaders(v map[string]*string) *QueryReleaseMetricResponse {
	s.Headers = v
	return s
}

func (s *QueryReleaseMetricResponse) SetStatusCode(v int32) *QueryReleaseMetricResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryReleaseMetricResponse) SetBody(v *QueryReleaseMetricResponseBody) *QueryReleaseMetricResponse {
	s.Body = v
	return s
}

type RemoveAliClusterIdsFromPrometheusGlobalViewRequest struct {
	// The IDs of clusters. Separate multiple IDs with commas (,).
	//
	// This parameter is required.
	//
	// example:
	//
	// cd1d55bef19904324a20ed0ebb86caa5c,c5b48729918ab4745a24482ac29d0973a, c00a94896641449098bf24931e4166003, cd174485c09384060ba542bc1be1185a4
	ClusterIds *string `json:"ClusterIds,omitempty" xml:"ClusterIds,omitempty"`
	// The ID of the global aggregation instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// global-v2-cn-1670100631025794-amaykca4
	GlobalViewClusterId *string `json:"GlobalViewClusterId,omitempty" xml:"GlobalViewClusterId,omitempty"`
	// The name of the global aggregation instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// zyGlobalView
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	// The region ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s RemoveAliClusterIdsFromPrometheusGlobalViewRequest) String() string {
	return tea.Prettify(s)
}

func (s RemoveAliClusterIdsFromPrometheusGlobalViewRequest) GoString() string {
	return s.String()
}

func (s *RemoveAliClusterIdsFromPrometheusGlobalViewRequest) SetClusterIds(v string) *RemoveAliClusterIdsFromPrometheusGlobalViewRequest {
	s.ClusterIds = &v
	return s
}

func (s *RemoveAliClusterIdsFromPrometheusGlobalViewRequest) SetGlobalViewClusterId(v string) *RemoveAliClusterIdsFromPrometheusGlobalViewRequest {
	s.GlobalViewClusterId = &v
	return s
}

func (s *RemoveAliClusterIdsFromPrometheusGlobalViewRequest) SetGroupName(v string) *RemoveAliClusterIdsFromPrometheusGlobalViewRequest {
	s.GroupName = &v
	return s
}

func (s *RemoveAliClusterIdsFromPrometheusGlobalViewRequest) SetRegionId(v string) *RemoveAliClusterIdsFromPrometheusGlobalViewRequest {
	s.RegionId = &v
	return s
}

type RemoveAliClusterIdsFromPrometheusGlobalViewResponseBody struct {
	// The HTTP status code. The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned struct.
	Data *RemoveAliClusterIdsFromPrometheusGlobalViewResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The message returned.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID. You can use the ID to query logs and troubleshoot issues.
	//
	// example:
	//
	// F7781D4A-2818-41E7-B7BB-79D809E9****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RemoveAliClusterIdsFromPrometheusGlobalViewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RemoveAliClusterIdsFromPrometheusGlobalViewResponseBody) GoString() string {
	return s.String()
}

func (s *RemoveAliClusterIdsFromPrometheusGlobalViewResponseBody) SetCode(v int32) *RemoveAliClusterIdsFromPrometheusGlobalViewResponseBody {
	s.Code = &v
	return s
}

func (s *RemoveAliClusterIdsFromPrometheusGlobalViewResponseBody) SetData(v *RemoveAliClusterIdsFromPrometheusGlobalViewResponseBodyData) *RemoveAliClusterIdsFromPrometheusGlobalViewResponseBody {
	s.Data = v
	return s
}

func (s *RemoveAliClusterIdsFromPrometheusGlobalViewResponseBody) SetMessage(v string) *RemoveAliClusterIdsFromPrometheusGlobalViewResponseBody {
	s.Message = &v
	return s
}

func (s *RemoveAliClusterIdsFromPrometheusGlobalViewResponseBody) SetRequestId(v string) *RemoveAliClusterIdsFromPrometheusGlobalViewResponseBody {
	s.RequestId = &v
	return s
}

type RemoveAliClusterIdsFromPrometheusGlobalViewResponseBodyData struct {
	// The Info-level information.
	//
	// example:
	//
	// {regionId: the region where the global aggregation instance resides. globalViewClusterId: the ID of the global aggregation instance. failedClusterIds: the IDs of the clusters that failed to be added. A cluster may fail to be added if the specified cluster ID is invalid.}
	Info *string `json:"Info,omitempty" xml:"Info,omitempty"`
	// The additional information.
	//
	// example:
	//
	// OK
	Msg *string `json:"Msg,omitempty" xml:"Msg,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- `true`
	//
	// 	- `false`
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s RemoveAliClusterIdsFromPrometheusGlobalViewResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s RemoveAliClusterIdsFromPrometheusGlobalViewResponseBodyData) GoString() string {
	return s.String()
}

func (s *RemoveAliClusterIdsFromPrometheusGlobalViewResponseBodyData) SetInfo(v string) *RemoveAliClusterIdsFromPrometheusGlobalViewResponseBodyData {
	s.Info = &v
	return s
}

func (s *RemoveAliClusterIdsFromPrometheusGlobalViewResponseBodyData) SetMsg(v string) *RemoveAliClusterIdsFromPrometheusGlobalViewResponseBodyData {
	s.Msg = &v
	return s
}

func (s *RemoveAliClusterIdsFromPrometheusGlobalViewResponseBodyData) SetSuccess(v bool) *RemoveAliClusterIdsFromPrometheusGlobalViewResponseBodyData {
	s.Success = &v
	return s
}

type RemoveAliClusterIdsFromPrometheusGlobalViewResponse struct {
	Headers    map[string]*string                                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RemoveAliClusterIdsFromPrometheusGlobalViewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RemoveAliClusterIdsFromPrometheusGlobalViewResponse) String() string {
	return tea.Prettify(s)
}

func (s RemoveAliClusterIdsFromPrometheusGlobalViewResponse) GoString() string {
	return s.String()
}

func (s *RemoveAliClusterIdsFromPrometheusGlobalViewResponse) SetHeaders(v map[string]*string) *RemoveAliClusterIdsFromPrometheusGlobalViewResponse {
	s.Headers = v
	return s
}

func (s *RemoveAliClusterIdsFromPrometheusGlobalViewResponse) SetStatusCode(v int32) *RemoveAliClusterIdsFromPrometheusGlobalViewResponse {
	s.StatusCode = &v
	return s
}

func (s *RemoveAliClusterIdsFromPrometheusGlobalViewResponse) SetBody(v *RemoveAliClusterIdsFromPrometheusGlobalViewResponseBody) *RemoveAliClusterIdsFromPrometheusGlobalViewResponse {
	s.Body = v
	return s
}

type RemoveSourcesFromPrometheusGlobalViewRequest struct {
	// The ID of the global aggregation instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// global-v2-cn-1478326682034601-vss8pd0i
	GlobalViewClusterId *string `json:"GlobalViewClusterId,omitempty" xml:"GlobalViewClusterId,omitempty"`
	// The name of the global aggregation instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// zyGlobalView
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	// The region ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The list of custom data sources. You can specify multiple data sources and separate them with commas (,).
	//
	// This parameter is required.
	//
	// example:
	//
	// localPrometheusClusterName,testCumterPrometheusName
	SourceNames *string `json:"SourceNames,omitempty" xml:"SourceNames,omitempty"`
}

func (s RemoveSourcesFromPrometheusGlobalViewRequest) String() string {
	return tea.Prettify(s)
}

func (s RemoveSourcesFromPrometheusGlobalViewRequest) GoString() string {
	return s.String()
}

func (s *RemoveSourcesFromPrometheusGlobalViewRequest) SetGlobalViewClusterId(v string) *RemoveSourcesFromPrometheusGlobalViewRequest {
	s.GlobalViewClusterId = &v
	return s
}

func (s *RemoveSourcesFromPrometheusGlobalViewRequest) SetGroupName(v string) *RemoveSourcesFromPrometheusGlobalViewRequest {
	s.GroupName = &v
	return s
}

func (s *RemoveSourcesFromPrometheusGlobalViewRequest) SetRegionId(v string) *RemoveSourcesFromPrometheusGlobalViewRequest {
	s.RegionId = &v
	return s
}

func (s *RemoveSourcesFromPrometheusGlobalViewRequest) SetSourceNames(v string) *RemoveSourcesFromPrometheusGlobalViewRequest {
	s.SourceNames = &v
	return s
}

type RemoveSourcesFromPrometheusGlobalViewResponseBody struct {
	// Status code. 200 is success, other status codes are exceptions.
	//
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned struct.
	Data *RemoveSourcesFromPrometheusGlobalViewResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// Returns a hint message for the result.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID. You can use the ID to query logs and troubleshoot issues.
	//
	// example:
	//
	// 9319A57D-2D9E-472A-B69B-CF3CD16D****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RemoveSourcesFromPrometheusGlobalViewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RemoveSourcesFromPrometheusGlobalViewResponseBody) GoString() string {
	return s.String()
}

func (s *RemoveSourcesFromPrometheusGlobalViewResponseBody) SetCode(v int32) *RemoveSourcesFromPrometheusGlobalViewResponseBody {
	s.Code = &v
	return s
}

func (s *RemoveSourcesFromPrometheusGlobalViewResponseBody) SetData(v *RemoveSourcesFromPrometheusGlobalViewResponseBodyData) *RemoveSourcesFromPrometheusGlobalViewResponseBody {
	s.Data = v
	return s
}

func (s *RemoveSourcesFromPrometheusGlobalViewResponseBody) SetMessage(v string) *RemoveSourcesFromPrometheusGlobalViewResponseBody {
	s.Message = &v
	return s
}

func (s *RemoveSourcesFromPrometheusGlobalViewResponseBody) SetRequestId(v string) *RemoveSourcesFromPrometheusGlobalViewResponseBody {
	s.RequestId = &v
	return s
}

type RemoveSourcesFromPrometheusGlobalViewResponseBodyData struct {
	// The Info-level information.
	//
	// example:
	//
	// {regionId: the region where the aggregation instance resides. globalViewClusterId: the ID of the aggregation instance.
	Info *string `json:"Info,omitempty" xml:"Info,omitempty"`
	// The additional information.
	//
	// example:
	//
	// OK
	Msg *string `json:"Msg,omitempty" xml:"Msg,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- `true`
	//
	// 	- `false`
	//
	// example:
	//
	// True
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s RemoveSourcesFromPrometheusGlobalViewResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s RemoveSourcesFromPrometheusGlobalViewResponseBodyData) GoString() string {
	return s.String()
}

func (s *RemoveSourcesFromPrometheusGlobalViewResponseBodyData) SetInfo(v string) *RemoveSourcesFromPrometheusGlobalViewResponseBodyData {
	s.Info = &v
	return s
}

func (s *RemoveSourcesFromPrometheusGlobalViewResponseBodyData) SetMsg(v string) *RemoveSourcesFromPrometheusGlobalViewResponseBodyData {
	s.Msg = &v
	return s
}

func (s *RemoveSourcesFromPrometheusGlobalViewResponseBodyData) SetSuccess(v bool) *RemoveSourcesFromPrometheusGlobalViewResponseBodyData {
	s.Success = &v
	return s
}

type RemoveSourcesFromPrometheusGlobalViewResponse struct {
	Headers    map[string]*string                                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RemoveSourcesFromPrometheusGlobalViewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RemoveSourcesFromPrometheusGlobalViewResponse) String() string {
	return tea.Prettify(s)
}

func (s RemoveSourcesFromPrometheusGlobalViewResponse) GoString() string {
	return s.String()
}

func (s *RemoveSourcesFromPrometheusGlobalViewResponse) SetHeaders(v map[string]*string) *RemoveSourcesFromPrometheusGlobalViewResponse {
	s.Headers = v
	return s
}

func (s *RemoveSourcesFromPrometheusGlobalViewResponse) SetStatusCode(v int32) *RemoveSourcesFromPrometheusGlobalViewResponse {
	s.StatusCode = &v
	return s
}

func (s *RemoveSourcesFromPrometheusGlobalViewResponse) SetBody(v *RemoveSourcesFromPrometheusGlobalViewResponseBody) *RemoveSourcesFromPrometheusGlobalViewResponse {
	s.Body = v
	return s
}

type RestartEnvironmentFeatureRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// env-xxx
	EnvironmentId *string `json:"EnvironmentId,omitempty" xml:"EnvironmentId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// metric-agent
	FeatureName *string `json:"FeatureName,omitempty" xml:"FeatureName,omitempty"`
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s RestartEnvironmentFeatureRequest) String() string {
	return tea.Prettify(s)
}

func (s RestartEnvironmentFeatureRequest) GoString() string {
	return s.String()
}

func (s *RestartEnvironmentFeatureRequest) SetEnvironmentId(v string) *RestartEnvironmentFeatureRequest {
	s.EnvironmentId = &v
	return s
}

func (s *RestartEnvironmentFeatureRequest) SetFeatureName(v string) *RestartEnvironmentFeatureRequest {
	s.FeatureName = &v
	return s
}

func (s *RestartEnvironmentFeatureRequest) SetRegionId(v string) *RestartEnvironmentFeatureRequest {
	s.RegionId = &v
	return s
}

type RestartEnvironmentFeatureResponseBody struct {
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// success
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// example:
	//
	// success.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	//
	// example:
	//
	// 2983BEF7-4A0D-47A2-94A2-8E9C5E63****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s RestartEnvironmentFeatureResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RestartEnvironmentFeatureResponseBody) GoString() string {
	return s.String()
}

func (s *RestartEnvironmentFeatureResponseBody) SetCode(v int32) *RestartEnvironmentFeatureResponseBody {
	s.Code = &v
	return s
}

func (s *RestartEnvironmentFeatureResponseBody) SetData(v string) *RestartEnvironmentFeatureResponseBody {
	s.Data = &v
	return s
}

func (s *RestartEnvironmentFeatureResponseBody) SetMessage(v string) *RestartEnvironmentFeatureResponseBody {
	s.Message = &v
	return s
}

func (s *RestartEnvironmentFeatureResponseBody) SetRequestId(v string) *RestartEnvironmentFeatureResponseBody {
	s.RequestId = &v
	return s
}

func (s *RestartEnvironmentFeatureResponseBody) SetSuccess(v bool) *RestartEnvironmentFeatureResponseBody {
	s.Success = &v
	return s
}

type RestartEnvironmentFeatureResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RestartEnvironmentFeatureResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RestartEnvironmentFeatureResponse) String() string {
	return tea.Prettify(s)
}

func (s RestartEnvironmentFeatureResponse) GoString() string {
	return s.String()
}

func (s *RestartEnvironmentFeatureResponse) SetHeaders(v map[string]*string) *RestartEnvironmentFeatureResponse {
	s.Headers = v
	return s
}

func (s *RestartEnvironmentFeatureResponse) SetStatusCode(v int32) *RestartEnvironmentFeatureResponse {
	s.StatusCode = &v
	return s
}

func (s *RestartEnvironmentFeatureResponse) SetBody(v *RestartEnvironmentFeatureResponseBody) *RestartEnvironmentFeatureResponse {
	s.Body = v
	return s
}

type SaveTraceAppConfigRequest struct {
	// The ID of the application.
	//
	// Log on to the **ARMS console**. In the left-side navigation pane, choose **Application Monitoring*	- > **Applications**. On the **Applications*	- page, click the name of an application. The URL in the address bar contains the process ID (PID) of the application. The PID is indicated in the pid=xxx format. The PID is usually percent encoded as xxx%40xxx. You must modify this value to remove the percent encoding. For example, if the PID in the URL is eb4zdose6v%409781be0f44d\\*\\*\\*\\*, you must replace %40 with an at sign (@) to obtain eb4zdose6v@9781be0f44d\\*\\*\\*\\*.
	//
	// This parameter is required.
	//
	// example:
	//
	// a2n80plglh@745eddxxx
	Pid *string `json:"Pid,omitempty" xml:"Pid,omitempty"`
	// The settings of Application Monitoring.
	Settings []*SaveTraceAppConfigRequestSettings `json:"Settings,omitempty" xml:"Settings,omitempty" type:"Repeated"`
}

func (s SaveTraceAppConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s SaveTraceAppConfigRequest) GoString() string {
	return s.String()
}

func (s *SaveTraceAppConfigRequest) SetPid(v string) *SaveTraceAppConfigRequest {
	s.Pid = &v
	return s
}

func (s *SaveTraceAppConfigRequest) SetSettings(v []*SaveTraceAppConfigRequestSettings) *SaveTraceAppConfigRequest {
	s.Settings = v
	return s
}

type SaveTraceAppConfigRequestSettings struct {
	// The values of the settings that you want to modify. For information about the supported settings, see the following items:
	//
	// 	- Trace sampling settings
	//
	// 	- Main switch settings
	//
	// 	- Threshold settings
	//
	// 	- Advanced settings
	//
	// 	- Thread settings
	//
	// 	- Memory snapshot settings
	//
	// 	- URL convergence settings
	//
	// 	- Business log association settings
	//
	// 	- Business monitoring settings
	//
	// example:
	//
	// sampling.enable
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The values of the settings that you want to modify. For information about the supported settings, see the following items:
	//
	// 	- Trace sampling settings
	//
	// 	- Main switch settings
	//
	// 	- Threshold settings
	//
	// 	- Advanced settings
	//
	// 	- Thread settings
	//
	// 	- Memory snapshot settings
	//
	// 	- URL convergence settings
	//
	// 	- Business log association settings
	//
	// 	- Business monitoring settings
	//
	// example:
	//
	// true
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s SaveTraceAppConfigRequestSettings) String() string {
	return tea.Prettify(s)
}

func (s SaveTraceAppConfigRequestSettings) GoString() string {
	return s.String()
}

func (s *SaveTraceAppConfigRequestSettings) SetKey(v string) *SaveTraceAppConfigRequestSettings {
	s.Key = &v
	return s
}

func (s *SaveTraceAppConfigRequestSettings) SetValue(v string) *SaveTraceAppConfigRequestSettings {
	s.Value = &v
	return s
}

type SaveTraceAppConfigResponseBody struct {
	// The status code. The status code 200 indicates that the request was successful. If another status code is returned, the request failed.
	//
	// example:
	//
	// 200
	Code *int64 `json:"Code,omitempty" xml:"Code,omitempty"`
	// Indicates whether the call was successful.
	//
	// example:
	//
	// success
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// The returned message.
	//
	// example:
	//
	// message
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 78901766-3806-4E96-8E47-CFEF59E4****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- `true`
	//
	// 	- `false`
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s SaveTraceAppConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SaveTraceAppConfigResponseBody) GoString() string {
	return s.String()
}

func (s *SaveTraceAppConfigResponseBody) SetCode(v int64) *SaveTraceAppConfigResponseBody {
	s.Code = &v
	return s
}

func (s *SaveTraceAppConfigResponseBody) SetData(v string) *SaveTraceAppConfigResponseBody {
	s.Data = &v
	return s
}

func (s *SaveTraceAppConfigResponseBody) SetMessage(v string) *SaveTraceAppConfigResponseBody {
	s.Message = &v
	return s
}

func (s *SaveTraceAppConfigResponseBody) SetRequestId(v string) *SaveTraceAppConfigResponseBody {
	s.RequestId = &v
	return s
}

func (s *SaveTraceAppConfigResponseBody) SetSuccess(v bool) *SaveTraceAppConfigResponseBody {
	s.Success = &v
	return s
}

type SaveTraceAppConfigResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SaveTraceAppConfigResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SaveTraceAppConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s SaveTraceAppConfigResponse) GoString() string {
	return s.String()
}

func (s *SaveTraceAppConfigResponse) SetHeaders(v map[string]*string) *SaveTraceAppConfigResponse {
	s.Headers = v
	return s
}

func (s *SaveTraceAppConfigResponse) SetStatusCode(v int32) *SaveTraceAppConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *SaveTraceAppConfigResponse) SetBody(v *SaveTraceAppConfigResponseBody) *SaveTraceAppConfigResponse {
	s.Body = v
	return s
}

type SearchAlertContactRequest struct {
	// The ID of the alert contact.
	//
	// example:
	//
	// [12345]
	ContactIds *string `json:"ContactIds,omitempty" xml:"ContactIds,omitempty"`
	// The name of the alert contact.
	//
	// example:
	//
	// John Doe
	ContactName *string `json:"ContactName,omitempty" xml:"ContactName,omitempty"`
	// The number of the page to return.
	//
	// example:
	//
	// 1
	CurrentPage *string `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// The email address of the alert contact.
	//
	// example:
	//
	// someone@example.com
	Email *string `json:"Email,omitempty" xml:"Email,omitempty"`
	// The number of entries to return on each page.
	//
	// example:
	//
	// 20
	PageSize *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The mobile number of the alert contact.
	//
	// example:
	//
	// 1381111*****
	Phone *string `json:"Phone,omitempty" xml:"Phone,omitempty"`
	// The ID of the region. Set the value to `cn-hangzhou`.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s SearchAlertContactRequest) String() string {
	return tea.Prettify(s)
}

func (s SearchAlertContactRequest) GoString() string {
	return s.String()
}

func (s *SearchAlertContactRequest) SetContactIds(v string) *SearchAlertContactRequest {
	s.ContactIds = &v
	return s
}

func (s *SearchAlertContactRequest) SetContactName(v string) *SearchAlertContactRequest {
	s.ContactName = &v
	return s
}

func (s *SearchAlertContactRequest) SetCurrentPage(v string) *SearchAlertContactRequest {
	s.CurrentPage = &v
	return s
}

func (s *SearchAlertContactRequest) SetEmail(v string) *SearchAlertContactRequest {
	s.Email = &v
	return s
}

func (s *SearchAlertContactRequest) SetPageSize(v string) *SearchAlertContactRequest {
	s.PageSize = &v
	return s
}

func (s *SearchAlertContactRequest) SetPhone(v string) *SearchAlertContactRequest {
	s.Phone = &v
	return s
}

func (s *SearchAlertContactRequest) SetRegionId(v string) *SearchAlertContactRequest {
	s.RegionId = &v
	return s
}

type SearchAlertContactResponseBody struct {
	// The returned struct.
	PageBean *SearchAlertContactResponseBodyPageBean `json:"PageBean,omitempty" xml:"PageBean,omitempty" type:"Struct"`
	// The ID of the request.
	//
	// example:
	//
	// 21E85B16-75A6-429A-9F65-8AAC9A54****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SearchAlertContactResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SearchAlertContactResponseBody) GoString() string {
	return s.String()
}

func (s *SearchAlertContactResponseBody) SetPageBean(v *SearchAlertContactResponseBodyPageBean) *SearchAlertContactResponseBody {
	s.PageBean = v
	return s
}

func (s *SearchAlertContactResponseBody) SetRequestId(v string) *SearchAlertContactResponseBody {
	s.RequestId = &v
	return s
}

type SearchAlertContactResponseBodyPageBean struct {
	// The information about the alert contacts.
	Contacts []*SearchAlertContactResponseBodyPageBeanContacts `json:"Contacts,omitempty" xml:"Contacts,omitempty" type:"Repeated"`
	// The page number of the returned page.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries returned per page.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of returned entries.
	//
	// example:
	//
	// 23
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s SearchAlertContactResponseBodyPageBean) String() string {
	return tea.Prettify(s)
}

func (s SearchAlertContactResponseBodyPageBean) GoString() string {
	return s.String()
}

func (s *SearchAlertContactResponseBodyPageBean) SetContacts(v []*SearchAlertContactResponseBodyPageBeanContacts) *SearchAlertContactResponseBodyPageBean {
	s.Contacts = v
	return s
}

func (s *SearchAlertContactResponseBodyPageBean) SetPageNumber(v int32) *SearchAlertContactResponseBodyPageBean {
	s.PageNumber = &v
	return s
}

func (s *SearchAlertContactResponseBodyPageBean) SetPageSize(v int32) *SearchAlertContactResponseBodyPageBean {
	s.PageSize = &v
	return s
}

func (s *SearchAlertContactResponseBodyPageBean) SetTotalCount(v int32) *SearchAlertContactResponseBodyPageBean {
	s.TotalCount = &v
	return s
}

type SearchAlertContactResponseBodyPageBeanContacts struct {
	// The ID of the alert contact.
	//
	// example:
	//
	// 123
	ContactId *int64 `json:"ContactId,omitempty" xml:"ContactId,omitempty"`
	// The name of the alert contact.
	//
	// example:
	//
	// John Doe
	ContactName *string `json:"ContactName,omitempty" xml:"ContactName,omitempty"`
	// The contact group to which the contact belongs. If your contacts are added to multiple contact groups, the contact groups are separated by vertical bars (|).
	//
	// example:
	//
	// Default Group | SRE Group
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// The timestamp generated when the alert contact was created.
	//
	// example:
	//
	// 1572349025000
	CreateTime *int64 `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The webhook URL of the DingTalk chatbot.
	//
	// example:
	//
	// https://oapi.dingtalk.com/robot/send?access_token=91f2f6****
	DingRobot *string `json:"DingRobot,omitempty" xml:"DingRobot,omitempty"`
	// The email address of the alert contact.
	//
	// example:
	//
	// someone@example.com
	Email *string `json:"Email,omitempty" xml:"Email,omitempty"`
	// The mobile number of the alert contact.
	//
	// example:
	//
	// 1381111*****
	Phone *string `json:"Phone,omitempty" xml:"Phone,omitempty"`
	// The ID of the resource group.
	//
	// example:
	//
	// rg-acfmxyexli2****
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	// Indicates whether the alert contact receives system notifications. Valid values:
	//
	// 	- `true`: The alert contact receives system notifications.
	//
	// 	- `false`: The alert contact does not receive system notifications.
	//
	// example:
	//
	// false
	SystemNoc *bool `json:"SystemNoc,omitempty" xml:"SystemNoc,omitempty"`
	// The timestamp generated when the alert contact was updated.
	//
	// example:
	//
	// 1580258717000
	UpdateTime *int64 `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
	// The ID of the user.
	//
	// example:
	//
	// 113197164949****
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	// The information about the webhook.
	//
	// example:
	//
	// {\\"body\\":\\"{   \\\\\\"msg_type\\\\\\": \\\\\\"text\\\\\\",   \\\\\\"content\\\\\\": {     \\\\\\"text\\\\\\": \\\\\\"$content\\\\\\"   } }\\",\\"header\\":{\\"Arms-Content-Type\\":\\"json\\"},\\"method\\":\\"post\\",\\"params\\":{},\\"url\\":\\"https://***",\\"userId\\":\\"1131971649***\\"}",
	Webhook *string `json:"Webhook,omitempty" xml:"Webhook,omitempty"`
}

func (s SearchAlertContactResponseBodyPageBeanContacts) String() string {
	return tea.Prettify(s)
}

func (s SearchAlertContactResponseBodyPageBeanContacts) GoString() string {
	return s.String()
}

func (s *SearchAlertContactResponseBodyPageBeanContacts) SetContactId(v int64) *SearchAlertContactResponseBodyPageBeanContacts {
	s.ContactId = &v
	return s
}

func (s *SearchAlertContactResponseBodyPageBeanContacts) SetContactName(v string) *SearchAlertContactResponseBodyPageBeanContacts {
	s.ContactName = &v
	return s
}

func (s *SearchAlertContactResponseBodyPageBeanContacts) SetContent(v string) *SearchAlertContactResponseBodyPageBeanContacts {
	s.Content = &v
	return s
}

func (s *SearchAlertContactResponseBodyPageBeanContacts) SetCreateTime(v int64) *SearchAlertContactResponseBodyPageBeanContacts {
	s.CreateTime = &v
	return s
}

func (s *SearchAlertContactResponseBodyPageBeanContacts) SetDingRobot(v string) *SearchAlertContactResponseBodyPageBeanContacts {
	s.DingRobot = &v
	return s
}

func (s *SearchAlertContactResponseBodyPageBeanContacts) SetEmail(v string) *SearchAlertContactResponseBodyPageBeanContacts {
	s.Email = &v
	return s
}

func (s *SearchAlertContactResponseBodyPageBeanContacts) SetPhone(v string) *SearchAlertContactResponseBodyPageBeanContacts {
	s.Phone = &v
	return s
}

func (s *SearchAlertContactResponseBodyPageBeanContacts) SetResourceGroupId(v string) *SearchAlertContactResponseBodyPageBeanContacts {
	s.ResourceGroupId = &v
	return s
}

func (s *SearchAlertContactResponseBodyPageBeanContacts) SetSystemNoc(v bool) *SearchAlertContactResponseBodyPageBeanContacts {
	s.SystemNoc = &v
	return s
}

func (s *SearchAlertContactResponseBodyPageBeanContacts) SetUpdateTime(v int64) *SearchAlertContactResponseBodyPageBeanContacts {
	s.UpdateTime = &v
	return s
}

func (s *SearchAlertContactResponseBodyPageBeanContacts) SetUserId(v string) *SearchAlertContactResponseBodyPageBeanContacts {
	s.UserId = &v
	return s
}

func (s *SearchAlertContactResponseBodyPageBeanContacts) SetWebhook(v string) *SearchAlertContactResponseBodyPageBeanContacts {
	s.Webhook = &v
	return s
}

type SearchAlertContactResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SearchAlertContactResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SearchAlertContactResponse) String() string {
	return tea.Prettify(s)
}

func (s SearchAlertContactResponse) GoString() string {
	return s.String()
}

func (s *SearchAlertContactResponse) SetHeaders(v map[string]*string) *SearchAlertContactResponse {
	s.Headers = v
	return s
}

func (s *SearchAlertContactResponse) SetStatusCode(v int32) *SearchAlertContactResponse {
	s.StatusCode = &v
	return s
}

func (s *SearchAlertContactResponse) SetBody(v *SearchAlertContactResponseBody) *SearchAlertContactResponse {
	s.Body = v
	return s
}

type SearchAlertContactGroupRequest struct {
	// The ID of the alert contact group. You can query multiple alert contact groups at a time. Separate multiple group IDs with commas (,).
	//
	// example:
	//
	// 746
	ContactGroupIds *string `json:"ContactGroupIds,omitempty" xml:"ContactGroupIds,omitempty"`
	// The name of the alert contact group.
	//
	// example:
	//
	// TestGroup
	ContactGroupName *string `json:"ContactGroupName,omitempty" xml:"ContactGroupName,omitempty"`
	// The ID of the alert contact. You can call the SearchAlertContact operation to query the contact IDs. For more information, see [SearchAlertContact](https://help.aliyun.com/document_detail/130703.html).
	//
	// example:
	//
	// 123
	ContactId *int64 `json:"ContactId,omitempty" xml:"ContactId,omitempty"`
	// The name of the alert contact.
	//
	// example:
	//
	// John Doe
	ContactName *string `json:"ContactName,omitempty" xml:"ContactName,omitempty"`
	// Specifies whether to return all alert contacts in the queried alert contact group. By default, not all alert contacts are returned.
	//
	// example:
	//
	// true
	IsDetail *bool `json:"IsDetail,omitempty" xml:"IsDetail,omitempty"`
	// The ID of the region. Default value: `cn-hangzhou`.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s SearchAlertContactGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s SearchAlertContactGroupRequest) GoString() string {
	return s.String()
}

func (s *SearchAlertContactGroupRequest) SetContactGroupIds(v string) *SearchAlertContactGroupRequest {
	s.ContactGroupIds = &v
	return s
}

func (s *SearchAlertContactGroupRequest) SetContactGroupName(v string) *SearchAlertContactGroupRequest {
	s.ContactGroupName = &v
	return s
}

func (s *SearchAlertContactGroupRequest) SetContactId(v int64) *SearchAlertContactGroupRequest {
	s.ContactId = &v
	return s
}

func (s *SearchAlertContactGroupRequest) SetContactName(v string) *SearchAlertContactGroupRequest {
	s.ContactName = &v
	return s
}

func (s *SearchAlertContactGroupRequest) SetIsDetail(v bool) *SearchAlertContactGroupRequest {
	s.IsDetail = &v
	return s
}

func (s *SearchAlertContactGroupRequest) SetRegionId(v string) *SearchAlertContactGroupRequest {
	s.RegionId = &v
	return s
}

type SearchAlertContactGroupResponseBody struct {
	// The information about the alert contact groups.
	ContactGroups []*SearchAlertContactGroupResponseBodyContactGroups `json:"ContactGroups,omitempty" xml:"ContactGroups,omitempty" type:"Repeated"`
	// The ID of the request.
	//
	// example:
	//
	// 4D6C358A-A58B-4F4B-94CE-F5AAF023****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SearchAlertContactGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SearchAlertContactGroupResponseBody) GoString() string {
	return s.String()
}

func (s *SearchAlertContactGroupResponseBody) SetContactGroups(v []*SearchAlertContactGroupResponseBodyContactGroups) *SearchAlertContactGroupResponseBody {
	s.ContactGroups = v
	return s
}

func (s *SearchAlertContactGroupResponseBody) SetRequestId(v string) *SearchAlertContactGroupResponseBody {
	s.RequestId = &v
	return s
}

type SearchAlertContactGroupResponseBodyContactGroups struct {
	// The ID of the alert contact group.
	//
	// example:
	//
	// 746
	ContactGroupId *int64 `json:"ContactGroupId,omitempty" xml:"ContactGroupId,omitempty"`
	// The name of the alert contact group.
	//
	// example:
	//
	// TestGroup
	ContactGroupName *string `json:"ContactGroupName,omitempty" xml:"ContactGroupName,omitempty"`
	// The alert contact list.
	Contacts []*SearchAlertContactGroupResponseBodyContactGroupsContacts `json:"Contacts,omitempty" xml:"Contacts,omitempty" type:"Repeated"`
	// The time when the alert contact group list was created. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// example:
	//
	// 1529668855000
	CreateTime *int64 `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The time when the alert contact group was last modified. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// example:
	//
	// 1529668855000
	UpdateTime *int64 `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
	// The ID of the user.
	//
	// example:
	//
	// 113197164949****
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s SearchAlertContactGroupResponseBodyContactGroups) String() string {
	return tea.Prettify(s)
}

func (s SearchAlertContactGroupResponseBodyContactGroups) GoString() string {
	return s.String()
}

func (s *SearchAlertContactGroupResponseBodyContactGroups) SetContactGroupId(v int64) *SearchAlertContactGroupResponseBodyContactGroups {
	s.ContactGroupId = &v
	return s
}

func (s *SearchAlertContactGroupResponseBodyContactGroups) SetContactGroupName(v string) *SearchAlertContactGroupResponseBodyContactGroups {
	s.ContactGroupName = &v
	return s
}

func (s *SearchAlertContactGroupResponseBodyContactGroups) SetContacts(v []*SearchAlertContactGroupResponseBodyContactGroupsContacts) *SearchAlertContactGroupResponseBodyContactGroups {
	s.Contacts = v
	return s
}

func (s *SearchAlertContactGroupResponseBodyContactGroups) SetCreateTime(v int64) *SearchAlertContactGroupResponseBodyContactGroups {
	s.CreateTime = &v
	return s
}

func (s *SearchAlertContactGroupResponseBodyContactGroups) SetUpdateTime(v int64) *SearchAlertContactGroupResponseBodyContactGroups {
	s.UpdateTime = &v
	return s
}

func (s *SearchAlertContactGroupResponseBodyContactGroups) SetUserId(v string) *SearchAlertContactGroupResponseBodyContactGroups {
	s.UserId = &v
	return s
}

type SearchAlertContactGroupResponseBodyContactGroupsContacts struct {
	// The ID of the alert contact.
	//
	// example:
	//
	// 123
	ContactId *int64 `json:"ContactId,omitempty" xml:"ContactId,omitempty"`
	// The name of the alert contact.
	//
	// example:
	//
	// John Doe
	ContactName *string `json:"ContactName,omitempty" xml:"ContactName,omitempty"`
	// The time when the alert contact group list was created. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// example:
	//
	// 1572349025000
	CreateTime *int64 `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The webhook URL of the DingTalk chatbot.
	//
	// example:
	//
	// https://oapi.dingtalk.com/robot/send?access_token=91f2f6****
	DingRobot *string `json:"DingRobot,omitempty" xml:"DingRobot,omitempty"`
	// The email address of the alert contact.
	//
	// example:
	//
	// someone@example.com
	Email *string `json:"Email,omitempty" xml:"Email,omitempty"`
	// The mobile number of the alert contact.
	//
	// example:
	//
	// 1381111*****
	Phone *string `json:"Phone,omitempty" xml:"Phone,omitempty"`
	// Indicates whether the alert contact receives system notifications. Valid values:
	//
	// 	- true: receives system notifications.
	//
	// 	- false: does not receive system notifications.
	//
	// example:
	//
	// false
	SystemNoc *bool `json:"SystemNoc,omitempty" xml:"SystemNoc,omitempty"`
	// The time when the alert contact group was last modified. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// example:
	//
	// 1580258717000
	UpdateTime *int64 `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
	// The ID of the user.
	//
	// example:
	//
	// 113197164949****
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s SearchAlertContactGroupResponseBodyContactGroupsContacts) String() string {
	return tea.Prettify(s)
}

func (s SearchAlertContactGroupResponseBodyContactGroupsContacts) GoString() string {
	return s.String()
}

func (s *SearchAlertContactGroupResponseBodyContactGroupsContacts) SetContactId(v int64) *SearchAlertContactGroupResponseBodyContactGroupsContacts {
	s.ContactId = &v
	return s
}

func (s *SearchAlertContactGroupResponseBodyContactGroupsContacts) SetContactName(v string) *SearchAlertContactGroupResponseBodyContactGroupsContacts {
	s.ContactName = &v
	return s
}

func (s *SearchAlertContactGroupResponseBodyContactGroupsContacts) SetCreateTime(v int64) *SearchAlertContactGroupResponseBodyContactGroupsContacts {
	s.CreateTime = &v
	return s
}

func (s *SearchAlertContactGroupResponseBodyContactGroupsContacts) SetDingRobot(v string) *SearchAlertContactGroupResponseBodyContactGroupsContacts {
	s.DingRobot = &v
	return s
}

func (s *SearchAlertContactGroupResponseBodyContactGroupsContacts) SetEmail(v string) *SearchAlertContactGroupResponseBodyContactGroupsContacts {
	s.Email = &v
	return s
}

func (s *SearchAlertContactGroupResponseBodyContactGroupsContacts) SetPhone(v string) *SearchAlertContactGroupResponseBodyContactGroupsContacts {
	s.Phone = &v
	return s
}

func (s *SearchAlertContactGroupResponseBodyContactGroupsContacts) SetSystemNoc(v bool) *SearchAlertContactGroupResponseBodyContactGroupsContacts {
	s.SystemNoc = &v
	return s
}

func (s *SearchAlertContactGroupResponseBodyContactGroupsContacts) SetUpdateTime(v int64) *SearchAlertContactGroupResponseBodyContactGroupsContacts {
	s.UpdateTime = &v
	return s
}

func (s *SearchAlertContactGroupResponseBodyContactGroupsContacts) SetUserId(v string) *SearchAlertContactGroupResponseBodyContactGroupsContacts {
	s.UserId = &v
	return s
}

type SearchAlertContactGroupResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SearchAlertContactGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SearchAlertContactGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s SearchAlertContactGroupResponse) GoString() string {
	return s.String()
}

func (s *SearchAlertContactGroupResponse) SetHeaders(v map[string]*string) *SearchAlertContactGroupResponse {
	s.Headers = v
	return s
}

func (s *SearchAlertContactGroupResponse) SetStatusCode(v int32) *SearchAlertContactGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *SearchAlertContactGroupResponse) SetBody(v *SearchAlertContactGroupResponseBody) *SearchAlertContactGroupResponse {
	s.Body = v
	return s
}

type SearchAlertHistoriesRequest struct {
	// The ID of the alert rule. You can call the SearchAlertRules operation and view the `Id` parameter in the response. For more information, see [SearchAlertRules](https://help.aliyun.com/document_detail/175825.html).
	//
	// example:
	//
	// 123
	AlertId *int64 `json:"AlertId,omitempty" xml:"AlertId,omitempty"`
	// The type of the alert rule. Valid values:
	//
	// 	- `1`: a custom alert rule that is used to monitor drill-down data sets
	//
	// 	- `3`: a custom alert rule that is used to monitor tiled data sets
	//
	// 	- `4`: an alert rule that is used to monitor web pages, including the default alert rule for browser monitoring
	//
	// 	- `5`: an alert rule that is used to monitor applications, including the default alert rule for application monitoring
	//
	// 	- `6`: the default alert rule for browser monitoring
	//
	// 	- `7`: the default alert rule for application monitoring
	//
	// 	- `8`: a Tracing Analysis alert rule
	//
	// 	- `101`: a Prometheus alert rule
	//
	// example:
	//
	// 4
	AlertType *int32 `json:"AlertType,omitempty" xml:"AlertType,omitempty"`
	// The number of the page to return. Default value: `1`.
	//
	// example:
	//
	// 1
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// The end of the time range to query. The value is a UNIX timestamp of the LONG data type. Unit: milliseconds. The default value is the current time.
	//
	// example:
	//
	// 1579499626000
	EndTime *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The number of entries to return on each page. Default value: `10`.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the region. Default value: `cn-hangzhou`.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The beginning of the time range to query. The value is a UNIX timestamp of the LONG data type. Unit: milliseconds. The default value is 10 minutes before the current time.
	//
	// example:
	//
	// 1595568910000
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s SearchAlertHistoriesRequest) String() string {
	return tea.Prettify(s)
}

func (s SearchAlertHistoriesRequest) GoString() string {
	return s.String()
}

func (s *SearchAlertHistoriesRequest) SetAlertId(v int64) *SearchAlertHistoriesRequest {
	s.AlertId = &v
	return s
}

func (s *SearchAlertHistoriesRequest) SetAlertType(v int32) *SearchAlertHistoriesRequest {
	s.AlertType = &v
	return s
}

func (s *SearchAlertHistoriesRequest) SetCurrentPage(v int32) *SearchAlertHistoriesRequest {
	s.CurrentPage = &v
	return s
}

func (s *SearchAlertHistoriesRequest) SetEndTime(v int64) *SearchAlertHistoriesRequest {
	s.EndTime = &v
	return s
}

func (s *SearchAlertHistoriesRequest) SetPageSize(v int32) *SearchAlertHistoriesRequest {
	s.PageSize = &v
	return s
}

func (s *SearchAlertHistoriesRequest) SetRegionId(v string) *SearchAlertHistoriesRequest {
	s.RegionId = &v
	return s
}

func (s *SearchAlertHistoriesRequest) SetStartTime(v int64) *SearchAlertHistoriesRequest {
	s.StartTime = &v
	return s
}

type SearchAlertHistoriesResponseBody struct {
	// The returned struct.
	PageBean *SearchAlertHistoriesResponseBodyPageBean `json:"PageBean,omitempty" xml:"PageBean,omitempty" type:"Struct"`
	// The ID of the request.
	//
	// example:
	//
	// 2FC13182-B9AF-4E6B-BE51-72669B7C****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SearchAlertHistoriesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SearchAlertHistoriesResponseBody) GoString() string {
	return s.String()
}

func (s *SearchAlertHistoriesResponseBody) SetPageBean(v *SearchAlertHistoriesResponseBodyPageBean) *SearchAlertHistoriesResponseBody {
	s.PageBean = v
	return s
}

func (s *SearchAlertHistoriesResponseBody) SetRequestId(v string) *SearchAlertHistoriesResponseBody {
	s.RequestId = &v
	return s
}

type SearchAlertHistoriesResponseBodyPageBean struct {
	// The information about alert records.
	AlarmHistories []*SearchAlertHistoriesResponseBodyPageBeanAlarmHistories `json:"AlarmHistories,omitempty" xml:"AlarmHistories,omitempty" type:"Repeated"`
	// The page number of the returned page.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries returned per page.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of returned entries.
	//
	// example:
	//
	// 2
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s SearchAlertHistoriesResponseBodyPageBean) String() string {
	return tea.Prettify(s)
}

func (s SearchAlertHistoriesResponseBodyPageBean) GoString() string {
	return s.String()
}

func (s *SearchAlertHistoriesResponseBodyPageBean) SetAlarmHistories(v []*SearchAlertHistoriesResponseBodyPageBeanAlarmHistories) *SearchAlertHistoriesResponseBodyPageBean {
	s.AlarmHistories = v
	return s
}

func (s *SearchAlertHistoriesResponseBodyPageBean) SetPageNumber(v int32) *SearchAlertHistoriesResponseBodyPageBean {
	s.PageNumber = &v
	return s
}

func (s *SearchAlertHistoriesResponseBodyPageBean) SetPageSize(v int32) *SearchAlertHistoriesResponseBodyPageBean {
	s.PageSize = &v
	return s
}

func (s *SearchAlertHistoriesResponseBodyPageBean) SetTotalCount(v int32) *SearchAlertHistoriesResponseBodyPageBean {
	s.TotalCount = &v
	return s
}

type SearchAlertHistoriesResponseBodyPageBeanAlarmHistories struct {
	// The content of the alert notification.
	//
	// example:
	//
	// "Alert name: Alert1\\nAlert time: 2020-07-24 12:14:00\\nAlert content: A total of four alerts are triggered: \\*\\*\\*\\*"
	AlarmContent *string `json:"AlarmContent,omitempty" xml:"AlarmContent,omitempty"`
	// The response code returned after the alert notification was sent.
	//
	// example:
	//
	// 200
	AlarmResponseCode *int32 `json:"AlarmResponseCode,omitempty" xml:"AlarmResponseCode,omitempty"`
	// The webhook URL, such as the webhook URL of a DingTalk chatbot.
	//
	// example:
	//
	// https://oapi.dingtalk.com/robot/send?access_token=91f2f65002fefe0ab9b71e6590c5ca504348cad742ff01e9c8ab204439ca****
	AlarmSources *string `json:"AlarmSources,omitempty" xml:"AlarmSources,omitempty"`
	// The time when the alert notification was sent.
	//
	// example:
	//
	// 1595564179000
	AlarmTime *int64 `json:"AlarmTime,omitempty" xml:"AlarmTime,omitempty"`
	// The type of the alert rule. Default value: 4. Valid values:
	//
	// 	- `1`: a custom alert rule that is used to monitor drill-down data sets
	//
	// 	- `3`: a custom alert rule that is used to monitor tiled data sets
	//
	// 	- `4`: an alert rule that is used to monitor web pages, including the default alert rule for browser monitoring
	//
	// 	- `5`: an alert rule that is used to monitor applications, including the default alert rule for application monitoring
	//
	// 	- `6`: the default alert rule for browser monitoring
	//
	// 	- `7`: the default alert rule for application monitoring
	//
	// 	- `8`: a Tracing Analysis alert rule
	//
	// 	- `101`: a Prometheus alert rule
	//
	// example:
	//
	// 4
	AlarmType *int32 `json:"AlarmType,omitempty" xml:"AlarmType,omitempty"`
	// The email address of the alert contact.
	//
	// example:
	//
	// someone@example.com
	Emails *string `json:"Emails,omitempty" xml:"Emails,omitempty"`
	// The ID of the alert notification.
	//
	// example:
	//
	// 123
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The mobile phone number of the alert contact.
	//
	// example:
	//
	// 1381111****
	Phones *string `json:"Phones,omitempty" xml:"Phones,omitempty"`
	// The internal fields.
	//
	// example:
	//
	// ""
	StrategyId *string `json:"StrategyId,omitempty" xml:"StrategyId,omitempty"`
	// The internal fields.
	//
	// example:
	//
	// ""
	Target *string `json:"Target,omitempty" xml:"Target,omitempty"`
	// The ID of the user.
	//
	// example:
	//
	// 113197164949****
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s SearchAlertHistoriesResponseBodyPageBeanAlarmHistories) String() string {
	return tea.Prettify(s)
}

func (s SearchAlertHistoriesResponseBodyPageBeanAlarmHistories) GoString() string {
	return s.String()
}

func (s *SearchAlertHistoriesResponseBodyPageBeanAlarmHistories) SetAlarmContent(v string) *SearchAlertHistoriesResponseBodyPageBeanAlarmHistories {
	s.AlarmContent = &v
	return s
}

func (s *SearchAlertHistoriesResponseBodyPageBeanAlarmHistories) SetAlarmResponseCode(v int32) *SearchAlertHistoriesResponseBodyPageBeanAlarmHistories {
	s.AlarmResponseCode = &v
	return s
}

func (s *SearchAlertHistoriesResponseBodyPageBeanAlarmHistories) SetAlarmSources(v string) *SearchAlertHistoriesResponseBodyPageBeanAlarmHistories {
	s.AlarmSources = &v
	return s
}

func (s *SearchAlertHistoriesResponseBodyPageBeanAlarmHistories) SetAlarmTime(v int64) *SearchAlertHistoriesResponseBodyPageBeanAlarmHistories {
	s.AlarmTime = &v
	return s
}

func (s *SearchAlertHistoriesResponseBodyPageBeanAlarmHistories) SetAlarmType(v int32) *SearchAlertHistoriesResponseBodyPageBeanAlarmHistories {
	s.AlarmType = &v
	return s
}

func (s *SearchAlertHistoriesResponseBodyPageBeanAlarmHistories) SetEmails(v string) *SearchAlertHistoriesResponseBodyPageBeanAlarmHistories {
	s.Emails = &v
	return s
}

func (s *SearchAlertHistoriesResponseBodyPageBeanAlarmHistories) SetId(v int64) *SearchAlertHistoriesResponseBodyPageBeanAlarmHistories {
	s.Id = &v
	return s
}

func (s *SearchAlertHistoriesResponseBodyPageBeanAlarmHistories) SetPhones(v string) *SearchAlertHistoriesResponseBodyPageBeanAlarmHistories {
	s.Phones = &v
	return s
}

func (s *SearchAlertHistoriesResponseBodyPageBeanAlarmHistories) SetStrategyId(v string) *SearchAlertHistoriesResponseBodyPageBeanAlarmHistories {
	s.StrategyId = &v
	return s
}

func (s *SearchAlertHistoriesResponseBodyPageBeanAlarmHistories) SetTarget(v string) *SearchAlertHistoriesResponseBodyPageBeanAlarmHistories {
	s.Target = &v
	return s
}

func (s *SearchAlertHistoriesResponseBodyPageBeanAlarmHistories) SetUserId(v string) *SearchAlertHistoriesResponseBodyPageBeanAlarmHistories {
	s.UserId = &v
	return s
}

type SearchAlertHistoriesResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SearchAlertHistoriesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SearchAlertHistoriesResponse) String() string {
	return tea.Prettify(s)
}

func (s SearchAlertHistoriesResponse) GoString() string {
	return s.String()
}

func (s *SearchAlertHistoriesResponse) SetHeaders(v map[string]*string) *SearchAlertHistoriesResponse {
	s.Headers = v
	return s
}

func (s *SearchAlertHistoriesResponse) SetStatusCode(v int32) *SearchAlertHistoriesResponse {
	s.StatusCode = &v
	return s
}

func (s *SearchAlertHistoriesResponse) SetBody(v *SearchAlertHistoriesResponseBody) *SearchAlertHistoriesResponse {
	s.Body = v
	return s
}

type SearchAlertRulesRequest struct {
	// The id of AlertRule.
	//
	// example:
	//
	// 12345
	AlertRuleId *string `json:"AlertRuleId,omitempty" xml:"AlertRuleId,omitempty"`
	// The type of the application that is associated with the alert rule. Valid values:
	//
	// 	- `TRACE`: application
	//
	// 	- `RETCODE`: browser
	//
	// example:
	//
	// TRACE
	AppType *string `json:"AppType,omitempty" xml:"AppType,omitempty"`
	// The page number of the page to return. Default value: `1`.
	//
	// example:
	//
	// 1
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// The number of entries to return per page. Default value: `10`.
	//
	// example:
	//
	// 20
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The process identifier (PID) of the application that is associated with the alert rule. For more information about how to obtain the PID, see [Obtain the PID of an application](https://help.aliyun.com/document_detail/186100.html?spm=a2c4g.11186623.6.792.1b50654cqcDPyk#title-imy-7gj-qhr).
	//
	// example:
	//
	// atc889zkcf@d8deedfa9bf****
	Pid *string `json:"Pid,omitempty" xml:"Pid,omitempty"`
	// The region ID of the alert data. For more information about the mappings between **RegionId*	- and **SystemRegionId**, see the detailed description below the table.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the resource group. You can obtain the resource group ID in the **Resource Management*	- console.
	//
	// example:
	//
	// rg-acfmxyexli2****
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	// The region ID of the alert rule. For more information about the mappings between **RegionId*	- and **SystemRegionId**, see the detailed description below the table.
	//
	// example:
	//
	// cn-hangzhou
	SystemRegionId *string `json:"SystemRegionId,omitempty" xml:"SystemRegionId,omitempty"`
	// The list of tags.
	Tags []*SearchAlertRulesRequestTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
	// The alert rule name.
	//
	// example:
	//
	// AlertRuleTitle
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// The alert rule type. Valid values:
	//
	// 	- `1`: custom alert rules that are used to monitor drill-down data sets
	//
	// 	- `3`: custom alert rules that are used to monitor tiled data sets
	//
	// 	- `4`: alert rules that are used to monitor the browser, including the default frontend alert rules
	//
	// 	- `5`: alert rules that are used to monitor applications, including the default application alert rules
	//
	// 	- `6`: the default browser alert rules
	//
	// 	- `7`: the default application alert rules
	//
	// 	- `8`: Tracing Analysis alert rules
	//
	// 	- `101`: Prometheus alert rules
	//
	// example:
	//
	// 4
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SearchAlertRulesRequest) String() string {
	return tea.Prettify(s)
}

func (s SearchAlertRulesRequest) GoString() string {
	return s.String()
}

func (s *SearchAlertRulesRequest) SetAlertRuleId(v string) *SearchAlertRulesRequest {
	s.AlertRuleId = &v
	return s
}

func (s *SearchAlertRulesRequest) SetAppType(v string) *SearchAlertRulesRequest {
	s.AppType = &v
	return s
}

func (s *SearchAlertRulesRequest) SetCurrentPage(v int32) *SearchAlertRulesRequest {
	s.CurrentPage = &v
	return s
}

func (s *SearchAlertRulesRequest) SetPageSize(v int32) *SearchAlertRulesRequest {
	s.PageSize = &v
	return s
}

func (s *SearchAlertRulesRequest) SetPid(v string) *SearchAlertRulesRequest {
	s.Pid = &v
	return s
}

func (s *SearchAlertRulesRequest) SetRegionId(v string) *SearchAlertRulesRequest {
	s.RegionId = &v
	return s
}

func (s *SearchAlertRulesRequest) SetResourceGroupId(v string) *SearchAlertRulesRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *SearchAlertRulesRequest) SetSystemRegionId(v string) *SearchAlertRulesRequest {
	s.SystemRegionId = &v
	return s
}

func (s *SearchAlertRulesRequest) SetTags(v []*SearchAlertRulesRequestTags) *SearchAlertRulesRequest {
	s.Tags = v
	return s
}

func (s *SearchAlertRulesRequest) SetTitle(v string) *SearchAlertRulesRequest {
	s.Title = &v
	return s
}

func (s *SearchAlertRulesRequest) SetType(v string) *SearchAlertRulesRequest {
	s.Type = &v
	return s
}

type SearchAlertRulesRequestTags struct {
	// The key of the tag. The following system preset fields are provided:
	//
	// 	- traceId: the ID of the trace.
	//
	// 	- serverApp: the name of the server application.
	//
	// 	- clientApp: the name of the client application.
	//
	// 	- service: the name of the operation.
	//
	// 	- rpc: the type of the call.
	//
	// 	- msOfSpan: the duration exceeds a specific value.
	//
	// 	- clientIp: the IP address of the client.
	//
	// 	- serverIp: the IP address of the server.
	//
	// 	- isError: specifies whether the call is abnormal.
	//
	// 	- hasTprof: contains only thread profiling.
	//
	// example:
	//
	// TestKey
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The tag value.
	//
	// example:
	//
	// TestValue
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s SearchAlertRulesRequestTags) String() string {
	return tea.Prettify(s)
}

func (s SearchAlertRulesRequestTags) GoString() string {
	return s.String()
}

func (s *SearchAlertRulesRequestTags) SetKey(v string) *SearchAlertRulesRequestTags {
	s.Key = &v
	return s
}

func (s *SearchAlertRulesRequestTags) SetValue(v string) *SearchAlertRulesRequestTags {
	s.Value = &v
	return s
}

type SearchAlertRulesResponseBody struct {
	// The returned struct.
	PageBean *SearchAlertRulesResponseBodyPageBean `json:"PageBean,omitempty" xml:"PageBean,omitempty" type:"Struct"`
	// The ID of the request.
	//
	// example:
	//
	// 34ED024E-9E31-434A-9E4E-D9D15C3****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SearchAlertRulesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SearchAlertRulesResponseBody) GoString() string {
	return s.String()
}

func (s *SearchAlertRulesResponseBody) SetPageBean(v *SearchAlertRulesResponseBodyPageBean) *SearchAlertRulesResponseBody {
	s.PageBean = v
	return s
}

func (s *SearchAlertRulesResponseBody) SetRequestId(v string) *SearchAlertRulesResponseBody {
	s.RequestId = &v
	return s
}

type SearchAlertRulesResponseBodyPageBean struct {
	// The details of the alert rules.
	AlertRules []*SearchAlertRulesResponseBodyPageBeanAlertRules `json:"AlertRules,omitempty" xml:"AlertRules,omitempty" type:"Repeated"`
	// The page number of the returned page.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries returned per page.
	//
	// example:
	//
	// 20
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of returned entries.
	//
	// example:
	//
	// 23
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s SearchAlertRulesResponseBodyPageBean) String() string {
	return tea.Prettify(s)
}

func (s SearchAlertRulesResponseBodyPageBean) GoString() string {
	return s.String()
}

func (s *SearchAlertRulesResponseBodyPageBean) SetAlertRules(v []*SearchAlertRulesResponseBodyPageBeanAlertRules) *SearchAlertRulesResponseBodyPageBean {
	s.AlertRules = v
	return s
}

func (s *SearchAlertRulesResponseBodyPageBean) SetPageNumber(v int32) *SearchAlertRulesResponseBodyPageBean {
	s.PageNumber = &v
	return s
}

func (s *SearchAlertRulesResponseBodyPageBean) SetPageSize(v int32) *SearchAlertRulesResponseBodyPageBean {
	s.PageSize = &v
	return s
}

func (s *SearchAlertRulesResponseBodyPageBean) SetTotalCount(v int32) *SearchAlertRulesResponseBodyPageBean {
	s.TotalCount = &v
	return s
}

type SearchAlertRulesResponseBodyPageBeanAlertRules struct {
	// The format of the alert notification.
	AlarmContext *SearchAlertRulesResponseBodyPageBeanAlertRulesAlarmContext `json:"AlarmContext,omitempty" xml:"AlarmContext,omitempty" type:"Struct"`
	// The severity of the alerts. Only the value `WARN` is supported.
	//
	// example:
	//
	// WARN
	AlertLevel *string `json:"AlertLevel,omitempty" xml:"AlertLevel,omitempty"`
	// The conditions of the alert rule. Multiple conditions are separated by the AND or OR logical operators.
	AlertRule *SearchAlertRulesResponseBodyPageBeanAlertRulesAlertRule `json:"AlertRule,omitempty" xml:"AlertRule,omitempty" type:"Struct"`
	// The name of the alert rule.
	//
	// example:
	//
	// TestAlertRule
	AlertTitle *string `json:"AlertTitle,omitempty" xml:"AlertTitle,omitempty"`
	// The type of the alert rule. Valid values:
	//
	// 	- `1`: custom alert rules that are used to monitor drill-down data sets
	//
	// 	- `3`: custom alert rules that are used to monitor tiled data sets
	//
	// 	- `4`: alert rules that are used to monitor the browser, including the default frontend alert rules
	//
	// 	- `5`: alert rules that are used to monitor applications, including the default application alert rules
	//
	// 	- `6`: the default browser alert rules
	//
	// 	- `7`: the default application alert rules
	//
	// 	- `8`: Tracing Analysis alert rules
	//
	// 	- `101`: Prometheus alert rules
	//
	// example:
	//
	// 4
	AlertType *int32 `json:"AlertType,omitempty" xml:"AlertType,omitempty"`
	// The version of the alert rule. Default value: `1`.
	//
	// example:
	//
	// 1
	AlertVersion *int32 `json:"AlertVersion,omitempty" xml:"AlertVersion,omitempty"`
	// Sending method of alarm notification.
	AlertWays []*string `json:"AlertWays,omitempty" xml:"AlertWays,omitempty" type:"Repeated"`
	// The configuration items of the alert rule. The value is a JSON string.
	//
	// The configuration item **continuous*	- indicates whether alert notifications are continuously sent. Valid values:
	//
	// 	- `true`: Alert notifications are sent every minute.
	//
	// 	- `false`: The alert silence feature is enabled.
	//
	// The configuration item **dataRevision*	- indicates the data revision policy that is used if no data is obtained or the data is null. Default value: 2. Valid values:
	//
	// 	- `0`: overwrites the data by using the value 0
	//
	// 	- `1`: overwrites the data by using the value 1
	//
	// 	- `2`: overwrites the data by using the value null. This value indicates that no alert is triggered if no data exists
	//
	// example:
	//
	// {\\"continuous\\":true,\\"dataRevision\\":2}
	Config *string `json:"Config,omitempty" xml:"Config,omitempty"`
	// The ID of the contact group. Multiple IDs are separated by commas (,).
	//
	// example:
	//
	// 381*,572*
	ContactGroupIdList *string `json:"ContactGroupIdList,omitempty" xml:"ContactGroupIdList,omitempty"`
	// The IDs of the alert contact groups. The value is a JSON array.
	//
	// example:
	//
	// [123, 234]
	ContactGroupIds *string `json:"ContactGroupIds,omitempty" xml:"ContactGroupIds,omitempty"`
	// The timestamp that shows when the alert rule was created.
	//
	// example:
	//
	// 1579508519683
	CreateTime *int64 `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// Indicates whether the alert is sent through the alert center. Valid values:
	//
	// 	- `true`
	//
	// 	- `false`
	//
	// example:
	//
	// true
	HostByAlertManager *bool `json:"HostByAlertManager,omitempty" xml:"HostByAlertManager,omitempty"`
	// The ID of the alert rule.
	//
	// example:
	//
	// 123
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The information about the application that is associated with the alert rule.
	MetricParam *SearchAlertRulesResponseBodyPageBeanAlertRulesMetricParam `json:"MetricParam,omitempty" xml:"MetricParam,omitempty" type:"Struct"`
	// The time ranges when the alert rule takes effect and when alert notifications are sent.
	Notice *SearchAlertRulesResponseBodyPageBeanAlertRulesNotice `json:"Notice,omitempty" xml:"Notice,omitempty" type:"Struct"`
	// The ID of the region to which the alert rule belongs.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the resource group.
	//
	// example:
	//
	// rg-acfmxyexli2****
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	// The status of the alert rule. `RUNNING`: The alert rule is enabled. `STOPPED`: The alert rule is disabled.
	//
	// example:
	//
	// RUNNING
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The ID of the Application Real-Time Monitoring Service (ARMS) task that is associated with the alert rule.
	//
	// example:
	//
	// 123
	TaskId *int64 `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// The status of the task. This parameter is hidden from users.
	//
	// example:
	//
	// ""
	TaskStatus *string `json:"TaskStatus,omitempty" xml:"TaskStatus,omitempty"`
	// The name of the alert.
	//
	// example:
	//
	// AlertTest
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// The timestamp that shows when the alert rule was updated.
	//
	// example:
	//
	// 1480521600000
	UpdateTime *int64 `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
	// The ID of the user to which the alert rule belongs.
	//
	// example:
	//
	// 113197164949****
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s SearchAlertRulesResponseBodyPageBeanAlertRules) String() string {
	return tea.Prettify(s)
}

func (s SearchAlertRulesResponseBodyPageBeanAlertRules) GoString() string {
	return s.String()
}

func (s *SearchAlertRulesResponseBodyPageBeanAlertRules) SetAlarmContext(v *SearchAlertRulesResponseBodyPageBeanAlertRulesAlarmContext) *SearchAlertRulesResponseBodyPageBeanAlertRules {
	s.AlarmContext = v
	return s
}

func (s *SearchAlertRulesResponseBodyPageBeanAlertRules) SetAlertLevel(v string) *SearchAlertRulesResponseBodyPageBeanAlertRules {
	s.AlertLevel = &v
	return s
}

func (s *SearchAlertRulesResponseBodyPageBeanAlertRules) SetAlertRule(v *SearchAlertRulesResponseBodyPageBeanAlertRulesAlertRule) *SearchAlertRulesResponseBodyPageBeanAlertRules {
	s.AlertRule = v
	return s
}

func (s *SearchAlertRulesResponseBodyPageBeanAlertRules) SetAlertTitle(v string) *SearchAlertRulesResponseBodyPageBeanAlertRules {
	s.AlertTitle = &v
	return s
}

func (s *SearchAlertRulesResponseBodyPageBeanAlertRules) SetAlertType(v int32) *SearchAlertRulesResponseBodyPageBeanAlertRules {
	s.AlertType = &v
	return s
}

func (s *SearchAlertRulesResponseBodyPageBeanAlertRules) SetAlertVersion(v int32) *SearchAlertRulesResponseBodyPageBeanAlertRules {
	s.AlertVersion = &v
	return s
}

func (s *SearchAlertRulesResponseBodyPageBeanAlertRules) SetAlertWays(v []*string) *SearchAlertRulesResponseBodyPageBeanAlertRules {
	s.AlertWays = v
	return s
}

func (s *SearchAlertRulesResponseBodyPageBeanAlertRules) SetConfig(v string) *SearchAlertRulesResponseBodyPageBeanAlertRules {
	s.Config = &v
	return s
}

func (s *SearchAlertRulesResponseBodyPageBeanAlertRules) SetContactGroupIdList(v string) *SearchAlertRulesResponseBodyPageBeanAlertRules {
	s.ContactGroupIdList = &v
	return s
}

func (s *SearchAlertRulesResponseBodyPageBeanAlertRules) SetContactGroupIds(v string) *SearchAlertRulesResponseBodyPageBeanAlertRules {
	s.ContactGroupIds = &v
	return s
}

func (s *SearchAlertRulesResponseBodyPageBeanAlertRules) SetCreateTime(v int64) *SearchAlertRulesResponseBodyPageBeanAlertRules {
	s.CreateTime = &v
	return s
}

func (s *SearchAlertRulesResponseBodyPageBeanAlertRules) SetHostByAlertManager(v bool) *SearchAlertRulesResponseBodyPageBeanAlertRules {
	s.HostByAlertManager = &v
	return s
}

func (s *SearchAlertRulesResponseBodyPageBeanAlertRules) SetId(v int64) *SearchAlertRulesResponseBodyPageBeanAlertRules {
	s.Id = &v
	return s
}

func (s *SearchAlertRulesResponseBodyPageBeanAlertRules) SetMetricParam(v *SearchAlertRulesResponseBodyPageBeanAlertRulesMetricParam) *SearchAlertRulesResponseBodyPageBeanAlertRules {
	s.MetricParam = v
	return s
}

func (s *SearchAlertRulesResponseBodyPageBeanAlertRules) SetNotice(v *SearchAlertRulesResponseBodyPageBeanAlertRulesNotice) *SearchAlertRulesResponseBodyPageBeanAlertRules {
	s.Notice = v
	return s
}

func (s *SearchAlertRulesResponseBodyPageBeanAlertRules) SetRegionId(v string) *SearchAlertRulesResponseBodyPageBeanAlertRules {
	s.RegionId = &v
	return s
}

func (s *SearchAlertRulesResponseBodyPageBeanAlertRules) SetResourceGroupId(v string) *SearchAlertRulesResponseBodyPageBeanAlertRules {
	s.ResourceGroupId = &v
	return s
}

func (s *SearchAlertRulesResponseBodyPageBeanAlertRules) SetStatus(v string) *SearchAlertRulesResponseBodyPageBeanAlertRules {
	s.Status = &v
	return s
}

func (s *SearchAlertRulesResponseBodyPageBeanAlertRules) SetTaskId(v int64) *SearchAlertRulesResponseBodyPageBeanAlertRules {
	s.TaskId = &v
	return s
}

func (s *SearchAlertRulesResponseBodyPageBeanAlertRules) SetTaskStatus(v string) *SearchAlertRulesResponseBodyPageBeanAlertRules {
	s.TaskStatus = &v
	return s
}

func (s *SearchAlertRulesResponseBodyPageBeanAlertRules) SetTitle(v string) *SearchAlertRulesResponseBodyPageBeanAlertRules {
	s.Title = &v
	return s
}

func (s *SearchAlertRulesResponseBodyPageBeanAlertRules) SetUpdateTime(v int64) *SearchAlertRulesResponseBodyPageBeanAlertRules {
	s.UpdateTime = &v
	return s
}

func (s *SearchAlertRulesResponseBodyPageBeanAlertRules) SetUserId(v string) *SearchAlertRulesResponseBodyPageBeanAlertRules {
	s.UserId = &v
	return s
}

type SearchAlertRulesResponseBodyPageBeanAlertRulesAlarmContext struct {
	// The sub-title of the alert notification content.
	//
	// example:
	//
	// TestSubTitle
	AlarmContentSubTitle *string `json:"AlarmContentSubTitle,omitempty" xml:"AlarmContentSubTitle,omitempty"`
	// The template of the alert notification.
	//
	// example:
	//
	// Alert name: $Alert name\\nFilter condition: $Filter\\nAlert time: $Alert time\\nAlert content: $Alert content\\nNote: The alert persists until a reply email is received. The system will remind you again in 24 hours.
	AlarmContentTemplate *string `json:"AlarmContentTemplate,omitempty" xml:"AlarmContentTemplate,omitempty"`
	// The content of the alert notification.
	//
	// example:
	//
	// Alert name: $Alert name\\nFilter condition: $Filter\\nAlert time: $Alert time\\nAlert content: $Alert content\\nNote: The alert persists until a reply email is received. The system will remind you again in 24 hours.
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// The sub-title of the alert notification.
	//
	// example:
	//
	// test
	SubTitle *string `json:"SubTitle,omitempty" xml:"SubTitle,omitempty"`
}

func (s SearchAlertRulesResponseBodyPageBeanAlertRulesAlarmContext) String() string {
	return tea.Prettify(s)
}

func (s SearchAlertRulesResponseBodyPageBeanAlertRulesAlarmContext) GoString() string {
	return s.String()
}

func (s *SearchAlertRulesResponseBodyPageBeanAlertRulesAlarmContext) SetAlarmContentSubTitle(v string) *SearchAlertRulesResponseBodyPageBeanAlertRulesAlarmContext {
	s.AlarmContentSubTitle = &v
	return s
}

func (s *SearchAlertRulesResponseBodyPageBeanAlertRulesAlarmContext) SetAlarmContentTemplate(v string) *SearchAlertRulesResponseBodyPageBeanAlertRulesAlarmContext {
	s.AlarmContentTemplate = &v
	return s
}

func (s *SearchAlertRulesResponseBodyPageBeanAlertRulesAlarmContext) SetContent(v string) *SearchAlertRulesResponseBodyPageBeanAlertRulesAlarmContext {
	s.Content = &v
	return s
}

func (s *SearchAlertRulesResponseBodyPageBeanAlertRulesAlarmContext) SetSubTitle(v string) *SearchAlertRulesResponseBodyPageBeanAlertRulesAlarmContext {
	s.SubTitle = &v
	return s
}

type SearchAlertRulesResponseBodyPageBeanAlertRulesAlertRule struct {
	// The logical operator between conditions. Valid values: `&`: AND. `|`: OR.
	//
	// example:
	//
	// |
	Operator *string `json:"Operator,omitempty" xml:"Operator,omitempty"`
	// The condition of the alert rule.
	Rules []*SearchAlertRulesResponseBodyPageBeanAlertRulesAlertRuleRules `json:"Rules,omitempty" xml:"Rules,omitempty" type:"Repeated"`
}

func (s SearchAlertRulesResponseBodyPageBeanAlertRulesAlertRule) String() string {
	return tea.Prettify(s)
}

func (s SearchAlertRulesResponseBodyPageBeanAlertRulesAlertRule) GoString() string {
	return s.String()
}

func (s *SearchAlertRulesResponseBodyPageBeanAlertRulesAlertRule) SetOperator(v string) *SearchAlertRulesResponseBodyPageBeanAlertRulesAlertRule {
	s.Operator = &v
	return s
}

func (s *SearchAlertRulesResponseBodyPageBeanAlertRulesAlertRule) SetRules(v []*SearchAlertRulesResponseBodyPageBeanAlertRulesAlertRuleRules) *SearchAlertRulesResponseBodyPageBeanAlertRulesAlertRule {
	s.Rules = v
	return s
}

type SearchAlertRulesResponseBodyPageBeanAlertRulesAlertRuleRules struct {
	// The aggregation logic of the metric data of the alert rule. Valid values:
	//
	// 	- `AVG`: calculates the average value for each minute
	//
	// 	- `SUM`: calculates the total value for each minute
	//
	// 	- `MAX`: calculates the maximum value for each minute
	//
	// 	- `MIN`: calculates the minimum value for each minute
	//
	// example:
	//
	// AVG
	Aggregates *string `json:"Aggregates,omitempty" xml:"Aggregates,omitempty"`
	// The displayed description of the alert metric.
	//
	// example:
	//
	// response time_ms
	Alias *string `json:"Alias,omitempty" xml:"Alias,omitempty"`
	// The metric based on which alerts are triggered. For more information, see the "[Alert metrics](https://help.aliyun.com/document_detail/175825.html#h2-url-4)" section in this topic.
	//
	// example:
	//
	// appstat.jvm.SystemDiskFree
	Measure *string `json:"Measure,omitempty" xml:"Measure,omitempty"`
	// The time range when data is requested. Unit: minutes. For example, a value of 5 indicates that the alert rule applies to the data in the last 5 minutes.
	//
	// example:
	//
	// 5
	NValue *int32 `json:"NValue,omitempty" xml:"NValue,omitempty"`
	// The operation logic of the condition. Valid values:
	//
	// 	- CURRENT_GTE: greater than or equal to
	//
	// 	- CURRENT_LTE: less than or equal to
	//
	// 	- PREVIOUS_UP: the increase percentage compared with the last period
	//
	// 	- PREVIOUS_DOWN: the decrease percentage compared with the last period
	//
	// 	- HOH_UP: the increase percentage compared with the last hour
	//
	// 	- HOH_DOWN: the decrease percentage compared with the last hour
	//
	// 	- DOD_UP: the increase percentage compared with the last day
	//
	// 	- DOD_DOWN: the decrease percentage compared with the last day
	//
	// example:
	//
	// CURRENT_GTE
	Operator *string `json:"Operator,omitempty" xml:"Operator,omitempty"`
	// The threshold of the condition.
	//
	// example:
	//
	// 30
	Value *float32 `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s SearchAlertRulesResponseBodyPageBeanAlertRulesAlertRuleRules) String() string {
	return tea.Prettify(s)
}

func (s SearchAlertRulesResponseBodyPageBeanAlertRulesAlertRuleRules) GoString() string {
	return s.String()
}

func (s *SearchAlertRulesResponseBodyPageBeanAlertRulesAlertRuleRules) SetAggregates(v string) *SearchAlertRulesResponseBodyPageBeanAlertRulesAlertRuleRules {
	s.Aggregates = &v
	return s
}

func (s *SearchAlertRulesResponseBodyPageBeanAlertRulesAlertRuleRules) SetAlias(v string) *SearchAlertRulesResponseBodyPageBeanAlertRulesAlertRuleRules {
	s.Alias = &v
	return s
}

func (s *SearchAlertRulesResponseBodyPageBeanAlertRulesAlertRuleRules) SetMeasure(v string) *SearchAlertRulesResponseBodyPageBeanAlertRulesAlertRuleRules {
	s.Measure = &v
	return s
}

func (s *SearchAlertRulesResponseBodyPageBeanAlertRulesAlertRuleRules) SetNValue(v int32) *SearchAlertRulesResponseBodyPageBeanAlertRulesAlertRuleRules {
	s.NValue = &v
	return s
}

func (s *SearchAlertRulesResponseBodyPageBeanAlertRulesAlertRuleRules) SetOperator(v string) *SearchAlertRulesResponseBodyPageBeanAlertRulesAlertRuleRules {
	s.Operator = &v
	return s
}

func (s *SearchAlertRulesResponseBodyPageBeanAlertRulesAlertRuleRules) SetValue(v float32) *SearchAlertRulesResponseBodyPageBeanAlertRulesAlertRuleRules {
	s.Value = &v
	return s
}

type SearchAlertRulesResponseBodyPageBeanAlertRulesMetricParam struct {
	// The ID of the application group that is associated with the alert rule. This parameter is applicable to Enterprise Distributed Application Service (EDAS) applications.
	//
	// example:
	//
	// DEFAULT
	AppGroupId *string `json:"AppGroupId,omitempty" xml:"AppGroupId,omitempty"`
	// The auto-increment ID of the ARMS application. You can ignore this ID.
	//
	// example:
	//
	// 123
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// The dimensions in the condition.
	Dimensions []*SearchAlertRulesResponseBodyPageBeanAlertRulesMetricParamDimensions `json:"Dimensions,omitempty" xml:"Dimensions,omitempty" type:"Repeated"`
	// The PID of the application that is associated with the alert rule.
	//
	// example:
	//
	// 9870ca99-8105-4da7-a3a4-d72dd1b1****
	Pid *string `json:"Pid,omitempty" xml:"Pid,omitempty"`
	// The type of the metric. Valid values:
	//
	// 	- `txn`: the number of API calls during application monitoring
	//
	// 	- `txn_type`: the types of API calls during application monitoring
	//
	// 	- `db`: database metrics
	//
	// 	- `jvm`: Java virtual machine (JVM) metrics
	//
	// 	- `host`: host metrics
	//
	// 	- `exception`: API call errors
	//
	// example:
	//
	// DB
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SearchAlertRulesResponseBodyPageBeanAlertRulesMetricParam) String() string {
	return tea.Prettify(s)
}

func (s SearchAlertRulesResponseBodyPageBeanAlertRulesMetricParam) GoString() string {
	return s.String()
}

func (s *SearchAlertRulesResponseBodyPageBeanAlertRulesMetricParam) SetAppGroupId(v string) *SearchAlertRulesResponseBodyPageBeanAlertRulesMetricParam {
	s.AppGroupId = &v
	return s
}

func (s *SearchAlertRulesResponseBodyPageBeanAlertRulesMetricParam) SetAppId(v string) *SearchAlertRulesResponseBodyPageBeanAlertRulesMetricParam {
	s.AppId = &v
	return s
}

func (s *SearchAlertRulesResponseBodyPageBeanAlertRulesMetricParam) SetDimensions(v []*SearchAlertRulesResponseBodyPageBeanAlertRulesMetricParamDimensions) *SearchAlertRulesResponseBodyPageBeanAlertRulesMetricParam {
	s.Dimensions = v
	return s
}

func (s *SearchAlertRulesResponseBodyPageBeanAlertRulesMetricParam) SetPid(v string) *SearchAlertRulesResponseBodyPageBeanAlertRulesMetricParam {
	s.Pid = &v
	return s
}

func (s *SearchAlertRulesResponseBodyPageBeanAlertRulesMetricParam) SetType(v string) *SearchAlertRulesResponseBodyPageBeanAlertRulesMetricParam {
	s.Type = &v
	return s
}

type SearchAlertRulesResponseBodyPageBeanAlertRulesMetricParamDimensions struct {
	// The key of the dimension. Valid values:
	//
	// 	- `rpc`: the name of the API
	//
	// 	- `rpcType`: the type of the API call, such as HTTP or DUBBO
	//
	// 	- `endpoint`: the name of the database
	//
	// 	- `rootIp`: the IP address of the host
	//
	// example:
	//
	// rootIp
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The type of the dimension. Valid values:
	//
	// 	- `STATIC`: checks only the value of this dimension. In this case, you must set the **dimensions.value*	- parameter.
	//
	// 	- `ALL`: checks the values of all dimensions. The metrics of all API calls are checked. If an API call triggers an alert, the name of the API is displayed in the alert notification. In this case, you do not need to set the **dimensions.value*	- parameter.
	//
	// 	- `DISABLE`: aggregates the values of all dimensions. In this case, you do not need to set the **dimensions.value*	- parameter.
	//
	// example:
	//
	// DISABLE
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// The value of the dimension.
	//
	// example:
	//
	// "127.0.0.1"
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s SearchAlertRulesResponseBodyPageBeanAlertRulesMetricParamDimensions) String() string {
	return tea.Prettify(s)
}

func (s SearchAlertRulesResponseBodyPageBeanAlertRulesMetricParamDimensions) GoString() string {
	return s.String()
}

func (s *SearchAlertRulesResponseBodyPageBeanAlertRulesMetricParamDimensions) SetKey(v string) *SearchAlertRulesResponseBodyPageBeanAlertRulesMetricParamDimensions {
	s.Key = &v
	return s
}

func (s *SearchAlertRulesResponseBodyPageBeanAlertRulesMetricParamDimensions) SetType(v string) *SearchAlertRulesResponseBodyPageBeanAlertRulesMetricParamDimensions {
	s.Type = &v
	return s
}

func (s *SearchAlertRulesResponseBodyPageBeanAlertRulesMetricParamDimensions) SetValue(v string) *SearchAlertRulesResponseBodyPageBeanAlertRulesMetricParamDimensions {
	s.Value = &v
	return s
}

type SearchAlertRulesResponseBodyPageBeanAlertRulesNotice struct {
	// The end of the time range when the alert rule takes effect within 24 hours per day. This value is a UNIX timestamp. The year, month, and day that are indicated by the timestamp are not displayed in this value. Only the hour, minute, and second are displayed.
	//
	// example:
	//
	// 1480607940000
	EndTime *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The end of the time range when alert notifications are sent based on the alert rule within 24 hours per day. This value is a UNIX timestamp. The year, month, and day that are indicated by the timestamp are not displayed in this value. Only the hour, minute, and second are displayed.
	//
	// example:
	//
	// 1480607940000
	NoticeEndTime *int64 `json:"NoticeEndTime,omitempty" xml:"NoticeEndTime,omitempty"`
	// The beginning of the time range when alert notifications are sent based on the alert rule within 24 hours per day. This value is a UNIX timestamp. The year, month, and day that are indicated by the timestamp are not displayed in this value. Only the hour, minute, and second are displayed.
	//
	// example:
	//
	// 1480521600000
	NoticeStartTime *int64 `json:"NoticeStartTime,omitempty" xml:"NoticeStartTime,omitempty"`
	// The beginning of the time range when the alert rule takes effect within 24 hours per day. This value is a UNIX timestamp. The year, month, and day that are indicated by the timestamp are not displayed in this value. Only the hour, minute, and second are displayed.
	//
	// example:
	//
	// 1480521600000
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s SearchAlertRulesResponseBodyPageBeanAlertRulesNotice) String() string {
	return tea.Prettify(s)
}

func (s SearchAlertRulesResponseBodyPageBeanAlertRulesNotice) GoString() string {
	return s.String()
}

func (s *SearchAlertRulesResponseBodyPageBeanAlertRulesNotice) SetEndTime(v int64) *SearchAlertRulesResponseBodyPageBeanAlertRulesNotice {
	s.EndTime = &v
	return s
}

func (s *SearchAlertRulesResponseBodyPageBeanAlertRulesNotice) SetNoticeEndTime(v int64) *SearchAlertRulesResponseBodyPageBeanAlertRulesNotice {
	s.NoticeEndTime = &v
	return s
}

func (s *SearchAlertRulesResponseBodyPageBeanAlertRulesNotice) SetNoticeStartTime(v int64) *SearchAlertRulesResponseBodyPageBeanAlertRulesNotice {
	s.NoticeStartTime = &v
	return s
}

func (s *SearchAlertRulesResponseBodyPageBeanAlertRulesNotice) SetStartTime(v int64) *SearchAlertRulesResponseBodyPageBeanAlertRulesNotice {
	s.StartTime = &v
	return s
}

type SearchAlertRulesResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SearchAlertRulesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SearchAlertRulesResponse) String() string {
	return tea.Prettify(s)
}

func (s SearchAlertRulesResponse) GoString() string {
	return s.String()
}

func (s *SearchAlertRulesResponse) SetHeaders(v map[string]*string) *SearchAlertRulesResponse {
	s.Headers = v
	return s
}

func (s *SearchAlertRulesResponse) SetStatusCode(v int32) *SearchAlertRulesResponse {
	s.StatusCode = &v
	return s
}

func (s *SearchAlertRulesResponse) SetBody(v *SearchAlertRulesResponseBody) *SearchAlertRulesResponse {
	s.Body = v
	return s
}

type SearchEventsRequest struct {
	// The ID of the alert rule. You can call the SearchAlertRules operation and view the `Id` parameter in the response. For more information, see [SearchAlertRules](https://help.aliyun.com/document_detail/175825.html).
	//
	// example:
	//
	// 123
	AlertId *int64 `json:"AlertId,omitempty" xml:"AlertId,omitempty"`
	// The type of the alert rule. Valid values:
	//
	// 	- `1`: custom alert rules to monitor drill-down data sets
	//
	// 	- `3`: custom alert rules to monitor tiled data sets
	//
	// 	- `4`: alert rules to monitor the frontend, including the default frontend alert rules
	//
	// 	- `5`: alert rules to monitor applications, including the default application alert rules
	//
	// 	- `6`: the default frontend alert rules
	//
	// 	- `7`: the default application alert rules
	//
	// 	- `8`: Tracing Analysis alert rules
	//
	// 	- `101`: Prometheus alert rules
	//
	// example:
	//
	// 4
	AlertType *int32 `json:"AlertType,omitempty" xml:"AlertType,omitempty"`
	// The type of the application that is associated with the alert rule. Valid values:
	//
	// 	- `TRACE`: application monitoring
	//
	// 	- `RETCODE`: frontend monitoring
	//
	// example:
	//
	// TRACE
	AppType *string `json:"AppType,omitempty" xml:"AppType,omitempty"`
	// The number of the page to return. Default value: `1`.
	//
	// example:
	//
	// 1
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// The end of the time range to query. Specify a UNIX timestamp of the LONG data type, in milliseconds. The default value is the current time.
	//
	// example:
	//
	// 1595568970000
	EndTime *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// Specifies whether the alert event is triggered. If you do not set this parameter, all alert events are queried. Valid values:
	//
	// 	- `1`: The event is triggered.
	//
	// 	- `0`: The event is not triggered.
	//
	// example:
	//
	// 1
	IsTrigger *int32 `json:"IsTrigger,omitempty" xml:"IsTrigger,omitempty"`
	// The number of entries to return on each page. Default value: `10`.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The process identifier (PID) of the application that is associated with the alert rule.
	//
	// example:
	//
	// atc889zkcf@d8deedfa9bf****
	Pid *string `json:"Pid,omitempty" xml:"Pid,omitempty"`
	// The ID of the region.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The beginning of the time range to query. Specify a UNIX timestamp of the LONG data type, in milliseconds. The default value is 10 minutes before the current time.
	//
	// example:
	//
	// 1595565300000
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s SearchEventsRequest) String() string {
	return tea.Prettify(s)
}

func (s SearchEventsRequest) GoString() string {
	return s.String()
}

func (s *SearchEventsRequest) SetAlertId(v int64) *SearchEventsRequest {
	s.AlertId = &v
	return s
}

func (s *SearchEventsRequest) SetAlertType(v int32) *SearchEventsRequest {
	s.AlertType = &v
	return s
}

func (s *SearchEventsRequest) SetAppType(v string) *SearchEventsRequest {
	s.AppType = &v
	return s
}

func (s *SearchEventsRequest) SetCurrentPage(v int32) *SearchEventsRequest {
	s.CurrentPage = &v
	return s
}

func (s *SearchEventsRequest) SetEndTime(v int64) *SearchEventsRequest {
	s.EndTime = &v
	return s
}

func (s *SearchEventsRequest) SetIsTrigger(v int32) *SearchEventsRequest {
	s.IsTrigger = &v
	return s
}

func (s *SearchEventsRequest) SetPageSize(v int32) *SearchEventsRequest {
	s.PageSize = &v
	return s
}

func (s *SearchEventsRequest) SetPid(v string) *SearchEventsRequest {
	s.Pid = &v
	return s
}

func (s *SearchEventsRequest) SetRegionId(v string) *SearchEventsRequest {
	s.RegionId = &v
	return s
}

func (s *SearchEventsRequest) SetStartTime(v int64) *SearchEventsRequest {
	s.StartTime = &v
	return s
}

type SearchEventsResponseBody struct {
	// Specifies whether the alert event is triggered. If you do not set this parameter, all alert events are queried. Valid values:
	//
	// 	- `1`: The event is triggered.
	//
	// 	- `0`: The event is not triggered.
	//
	// example:
	//
	// 0
	IsTrigger *int32 `json:"IsTrigger,omitempty" xml:"IsTrigger,omitempty"`
	// The struct returned.
	PageBean *SearchEventsResponseBodyPageBean `json:"PageBean,omitempty" xml:"PageBean,omitempty" type:"Struct"`
	// The ID of the request.
	//
	// example:
	//
	// 32940175-181B-4B93-966E-4BB69176****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SearchEventsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SearchEventsResponseBody) GoString() string {
	return s.String()
}

func (s *SearchEventsResponseBody) SetIsTrigger(v int32) *SearchEventsResponseBody {
	s.IsTrigger = &v
	return s
}

func (s *SearchEventsResponseBody) SetPageBean(v *SearchEventsResponseBodyPageBean) *SearchEventsResponseBody {
	s.PageBean = v
	return s
}

func (s *SearchEventsResponseBody) SetRequestId(v string) *SearchEventsResponseBody {
	s.RequestId = &v
	return s
}

type SearchEventsResponseBodyPageBean struct {
	// The information about the alert events.
	Event []*SearchEventsResponseBodyPageBeanEvent `json:"Event,omitempty" xml:"Event,omitempty" type:"Repeated"`
	// The page number of the returned page.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries returned per page.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 2
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s SearchEventsResponseBodyPageBean) String() string {
	return tea.Prettify(s)
}

func (s SearchEventsResponseBodyPageBean) GoString() string {
	return s.String()
}

func (s *SearchEventsResponseBodyPageBean) SetEvent(v []*SearchEventsResponseBodyPageBeanEvent) *SearchEventsResponseBodyPageBean {
	s.Event = v
	return s
}

func (s *SearchEventsResponseBodyPageBean) SetPageNumber(v int32) *SearchEventsResponseBodyPageBean {
	s.PageNumber = &v
	return s
}

func (s *SearchEventsResponseBodyPageBean) SetPageSize(v int32) *SearchEventsResponseBodyPageBean {
	s.PageSize = &v
	return s
}

func (s *SearchEventsResponseBodyPageBean) SetTotalCount(v int32) *SearchEventsResponseBodyPageBean {
	s.TotalCount = &v
	return s
}

type SearchEventsResponseBodyPageBeanEvent struct {
	// The ID of the alert rule that is associated with the event.
	//
	// example:
	//
	// 123
	AlertId *int64 `json:"AlertId,omitempty" xml:"AlertId,omitempty"`
	// The name of the alert rule that is associated with the event.
	//
	// example:
	//
	// alertName
	AlertName *string `json:"AlertName,omitempty" xml:"AlertName,omitempty"`
	// The condition of the alert rule.
	//
	// example:
	//
	// {\\"operator\\":\\"&\\",\\"rules\\":[{\\"aggregates\\":\\"AVG\\",\\"alias\\":\\"JVM_线程总数\\",\\"measure\\":\\"appstat.jvm.ThreadCount\\",\\"nValue\\":1,\\"operator\\":\\"HOH_DOWN\\",\\"value\\":50.0}]}
	AlertRule *string `json:"AlertRule,omitempty" xml:"AlertRule,omitempty"`
	// The type of the alert rule. This parameter is not returned. Valid values:
	//
	// 	- `1`: custom alert rules to monitor drill-down data sets
	//
	// 	- `3`: custom alert rules to monitor tiled data sets
	//
	// 	- `4`: alert rules to monitor the frontend, including the default frontend alert rules
	//
	// 	- `5`: alert rules to monitor applications, including the default application alert rules
	//
	// 	- `6`: the default frontend alert rules
	//
	// 	- `7`: the default application alert rules
	//
	// 	- `8`: Tracing Analysis alert rules
	//
	// 	- `101`: Prometheus alert rules
	//
	// example:
	//
	// 4
	AlertType *int32 `json:"AlertType,omitempty" xml:"AlertType,omitempty"`
	// The severity of the event.
	//
	// example:
	//
	// 1
	EventLevel *string `json:"EventLevel,omitempty" xml:"EventLevel,omitempty"`
	// The timestamp when the event occurred.
	//
	// example:
	//
	// 1595569020000
	EventTime *int64 `json:"EventTime,omitempty" xml:"EventTime,omitempty"`
	// The ID of the event record.
	//
	// example:
	//
	// 123
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The list of event URLs.
	Links []*string `json:"Links,omitempty" xml:"Links,omitempty" type:"Repeated"`
	// The event content. The parameter value is a JSON string. Each key indicates a dimension and each value indicates the alert content in the dimension.
	//
	// example:
	//
	// unknow紧急报警\\nip：172.27.XX.XX\\n应用名 = test\\nRegion = cn-shenzhen\\n异常信息 = {\\"timestamp\\"：\\"1615447972235\\"}
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
}

func (s SearchEventsResponseBodyPageBeanEvent) String() string {
	return tea.Prettify(s)
}

func (s SearchEventsResponseBodyPageBeanEvent) GoString() string {
	return s.String()
}

func (s *SearchEventsResponseBodyPageBeanEvent) SetAlertId(v int64) *SearchEventsResponseBodyPageBeanEvent {
	s.AlertId = &v
	return s
}

func (s *SearchEventsResponseBodyPageBeanEvent) SetAlertName(v string) *SearchEventsResponseBodyPageBeanEvent {
	s.AlertName = &v
	return s
}

func (s *SearchEventsResponseBodyPageBeanEvent) SetAlertRule(v string) *SearchEventsResponseBodyPageBeanEvent {
	s.AlertRule = &v
	return s
}

func (s *SearchEventsResponseBodyPageBeanEvent) SetAlertType(v int32) *SearchEventsResponseBodyPageBeanEvent {
	s.AlertType = &v
	return s
}

func (s *SearchEventsResponseBodyPageBeanEvent) SetEventLevel(v string) *SearchEventsResponseBodyPageBeanEvent {
	s.EventLevel = &v
	return s
}

func (s *SearchEventsResponseBodyPageBeanEvent) SetEventTime(v int64) *SearchEventsResponseBodyPageBeanEvent {
	s.EventTime = &v
	return s
}

func (s *SearchEventsResponseBodyPageBeanEvent) SetId(v int64) *SearchEventsResponseBodyPageBeanEvent {
	s.Id = &v
	return s
}

func (s *SearchEventsResponseBodyPageBeanEvent) SetLinks(v []*string) *SearchEventsResponseBodyPageBeanEvent {
	s.Links = v
	return s
}

func (s *SearchEventsResponseBodyPageBeanEvent) SetMessage(v string) *SearchEventsResponseBodyPageBeanEvent {
	s.Message = &v
	return s
}

type SearchEventsResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SearchEventsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SearchEventsResponse) String() string {
	return tea.Prettify(s)
}

func (s SearchEventsResponse) GoString() string {
	return s.String()
}

func (s *SearchEventsResponse) SetHeaders(v map[string]*string) *SearchEventsResponse {
	s.Headers = v
	return s
}

func (s *SearchEventsResponse) SetStatusCode(v int32) *SearchEventsResponse {
	s.StatusCode = &v
	return s
}

func (s *SearchEventsResponse) SetBody(v *SearchEventsResponseBody) *SearchEventsResponse {
	s.Body = v
	return s
}

type SearchRetcodeAppByPageRequest struct {
	// The number of the page to return.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries to return on each page.
	//
	// example:
	//
	// 5
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the region.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the resource group. You can obtain the resource group ID in the **Resource Management*	- console.
	//
	// example:
	//
	// rg-acfmxyexli2****
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	// The ID of the application.
	//
	// Log on to the **ARMS console**. In the left-side navigation pane, choose **Browser Monitoring*	- > **Browser Monitoring**. On the Browser Monitoring page, click the name of an application. The URL in the browser address bar contains the pid of this application in the format of `pid=xxx`. The PID is usually percent encoded as xxx%40xxx. You must modify this value to remove the percent encoding. For example, if the PID in the URL is `xxx%4074xxx`, you must replace **%40*	- with the at sign (@). The actual PID is `xxx@74xxx`.
	//
	// example:
	//
	// eb4zdose6v@9781be0f44d****
	RetcodeAppId *string `json:"RetcodeAppId,omitempty" xml:"RetcodeAppId,omitempty"`
	// The name of the application that is monitored by Browser Monitoring.
	//
	// example:
	//
	// App1
	RetcodeAppName *string `json:"RetcodeAppName,omitempty" xml:"RetcodeAppName,omitempty"`
	// The tags.
	Tags []*SearchRetcodeAppByPageRequestTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
}

func (s SearchRetcodeAppByPageRequest) String() string {
	return tea.Prettify(s)
}

func (s SearchRetcodeAppByPageRequest) GoString() string {
	return s.String()
}

func (s *SearchRetcodeAppByPageRequest) SetPageNumber(v int32) *SearchRetcodeAppByPageRequest {
	s.PageNumber = &v
	return s
}

func (s *SearchRetcodeAppByPageRequest) SetPageSize(v int32) *SearchRetcodeAppByPageRequest {
	s.PageSize = &v
	return s
}

func (s *SearchRetcodeAppByPageRequest) SetRegionId(v string) *SearchRetcodeAppByPageRequest {
	s.RegionId = &v
	return s
}

func (s *SearchRetcodeAppByPageRequest) SetResourceGroupId(v string) *SearchRetcodeAppByPageRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *SearchRetcodeAppByPageRequest) SetRetcodeAppId(v string) *SearchRetcodeAppByPageRequest {
	s.RetcodeAppId = &v
	return s
}

func (s *SearchRetcodeAppByPageRequest) SetRetcodeAppName(v string) *SearchRetcodeAppByPageRequest {
	s.RetcodeAppName = &v
	return s
}

func (s *SearchRetcodeAppByPageRequest) SetTags(v []*SearchRetcodeAppByPageRequestTags) *SearchRetcodeAppByPageRequest {
	s.Tags = v
	return s
}

type SearchRetcodeAppByPageRequestTags struct {
	// The tag key.
	//
	// example:
	//
	// TestKey
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The tag value.
	//
	// example:
	//
	// TestValue
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s SearchRetcodeAppByPageRequestTags) String() string {
	return tea.Prettify(s)
}

func (s SearchRetcodeAppByPageRequestTags) GoString() string {
	return s.String()
}

func (s *SearchRetcodeAppByPageRequestTags) SetKey(v string) *SearchRetcodeAppByPageRequestTags {
	s.Key = &v
	return s
}

func (s *SearchRetcodeAppByPageRequestTags) SetValue(v string) *SearchRetcodeAppByPageRequestTags {
	s.Value = &v
	return s
}

type SearchRetcodeAppByPageResponseBody struct {
	// The returned page information.
	PageBean *SearchRetcodeAppByPageResponseBodyPageBean `json:"PageBean,omitempty" xml:"PageBean,omitempty" type:"Struct"`
	// The ID of the request.
	//
	// example:
	//
	// 626037F5-FDEB-45B0-804C-B3C92797A64E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SearchRetcodeAppByPageResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SearchRetcodeAppByPageResponseBody) GoString() string {
	return s.String()
}

func (s *SearchRetcodeAppByPageResponseBody) SetPageBean(v *SearchRetcodeAppByPageResponseBodyPageBean) *SearchRetcodeAppByPageResponseBody {
	s.PageBean = v
	return s
}

func (s *SearchRetcodeAppByPageResponseBody) SetRequestId(v string) *SearchRetcodeAppByPageResponseBody {
	s.RequestId = &v
	return s
}

type SearchRetcodeAppByPageResponseBodyPageBean struct {
	// The page number of the returned page.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries returned per page.
	//
	// example:
	//
	// 2
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The Browser Monitoring tasks that are returned.
	RetcodeApps []*SearchRetcodeAppByPageResponseBodyPageBeanRetcodeApps `json:"RetcodeApps,omitempty" xml:"RetcodeApps,omitempty" type:"Repeated"`
	// The total number of returned entries.
	//
	// example:
	//
	// 8
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s SearchRetcodeAppByPageResponseBodyPageBean) String() string {
	return tea.Prettify(s)
}

func (s SearchRetcodeAppByPageResponseBodyPageBean) GoString() string {
	return s.String()
}

func (s *SearchRetcodeAppByPageResponseBodyPageBean) SetPageNumber(v int32) *SearchRetcodeAppByPageResponseBodyPageBean {
	s.PageNumber = &v
	return s
}

func (s *SearchRetcodeAppByPageResponseBodyPageBean) SetPageSize(v int32) *SearchRetcodeAppByPageResponseBodyPageBean {
	s.PageSize = &v
	return s
}

func (s *SearchRetcodeAppByPageResponseBodyPageBean) SetRetcodeApps(v []*SearchRetcodeAppByPageResponseBodyPageBeanRetcodeApps) *SearchRetcodeAppByPageResponseBodyPageBean {
	s.RetcodeApps = v
	return s
}

func (s *SearchRetcodeAppByPageResponseBodyPageBean) SetTotalCount(v int32) *SearchRetcodeAppByPageResponseBodyPageBean {
	s.TotalCount = &v
	return s
}

type SearchRetcodeAppByPageResponseBodyPageBeanRetcodeApps struct {
	// The ID of the application. The parameter is an auto-increment parameter.
	//
	// example:
	//
	// 16064
	AppId *int64 `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// The name of the application.
	//
	// example:
	//
	// a3
	AppName *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	// The time when the task was created.
	//
	// example:
	//
	// 1545363321000
	CreateTime *int64 `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The alias of the application.
	//
	// example:
	//
	// c1
	NickName *string `json:"NickName,omitempty" xml:"NickName,omitempty"`
	// The PID of the application.
	//
	// example:
	//
	// eb4zdose6v@9781be0f44d****
	Pid *string `json:"Pid,omitempty" xml:"Pid,omitempty"`
	// The ID of the region.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the resource group.
	//
	// example:
	//
	// rg-acfmxyexli2****
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	// The type of the application. Valid values:
	//
	// 	- `web`: web application
	//
	// 	- `weex`: Weex mobile app
	//
	// 	- `mini_dd`: DingTalk mini program
	//
	// 	- `mini_alipay`: Alipay mini program
	//
	// 	- `mini_wx`: WeChat mini program
	//
	// 	- `mini_common`: mini program on other platforms
	//
	// example:
	//
	// web
	RetcodeAppType *string `json:"RetcodeAppType,omitempty" xml:"RetcodeAppType,omitempty"`
	// The tags.
	Tags []*SearchRetcodeAppByPageResponseBodyPageBeanRetcodeAppsTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
	// The type of the monitoring task. Valid values:
	//
	// 	- `TRACE`: Application Monitoring
	//
	// 	- `RETCODE`: Browser Monitoring
	//
	// example:
	//
	// RETCODE
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// The time when the task was updated.
	//
	// example:
	//
	// 1545363321000
	UpdateTime *int64 `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
	// The ID of the user.
	//
	// example:
	//
	// 12341234
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s SearchRetcodeAppByPageResponseBodyPageBeanRetcodeApps) String() string {
	return tea.Prettify(s)
}

func (s SearchRetcodeAppByPageResponseBodyPageBeanRetcodeApps) GoString() string {
	return s.String()
}

func (s *SearchRetcodeAppByPageResponseBodyPageBeanRetcodeApps) SetAppId(v int64) *SearchRetcodeAppByPageResponseBodyPageBeanRetcodeApps {
	s.AppId = &v
	return s
}

func (s *SearchRetcodeAppByPageResponseBodyPageBeanRetcodeApps) SetAppName(v string) *SearchRetcodeAppByPageResponseBodyPageBeanRetcodeApps {
	s.AppName = &v
	return s
}

func (s *SearchRetcodeAppByPageResponseBodyPageBeanRetcodeApps) SetCreateTime(v int64) *SearchRetcodeAppByPageResponseBodyPageBeanRetcodeApps {
	s.CreateTime = &v
	return s
}

func (s *SearchRetcodeAppByPageResponseBodyPageBeanRetcodeApps) SetNickName(v string) *SearchRetcodeAppByPageResponseBodyPageBeanRetcodeApps {
	s.NickName = &v
	return s
}

func (s *SearchRetcodeAppByPageResponseBodyPageBeanRetcodeApps) SetPid(v string) *SearchRetcodeAppByPageResponseBodyPageBeanRetcodeApps {
	s.Pid = &v
	return s
}

func (s *SearchRetcodeAppByPageResponseBodyPageBeanRetcodeApps) SetRegionId(v string) *SearchRetcodeAppByPageResponseBodyPageBeanRetcodeApps {
	s.RegionId = &v
	return s
}

func (s *SearchRetcodeAppByPageResponseBodyPageBeanRetcodeApps) SetResourceGroupId(v string) *SearchRetcodeAppByPageResponseBodyPageBeanRetcodeApps {
	s.ResourceGroupId = &v
	return s
}

func (s *SearchRetcodeAppByPageResponseBodyPageBeanRetcodeApps) SetRetcodeAppType(v string) *SearchRetcodeAppByPageResponseBodyPageBeanRetcodeApps {
	s.RetcodeAppType = &v
	return s
}

func (s *SearchRetcodeAppByPageResponseBodyPageBeanRetcodeApps) SetTags(v []*SearchRetcodeAppByPageResponseBodyPageBeanRetcodeAppsTags) *SearchRetcodeAppByPageResponseBodyPageBeanRetcodeApps {
	s.Tags = v
	return s
}

func (s *SearchRetcodeAppByPageResponseBodyPageBeanRetcodeApps) SetType(v string) *SearchRetcodeAppByPageResponseBodyPageBeanRetcodeApps {
	s.Type = &v
	return s
}

func (s *SearchRetcodeAppByPageResponseBodyPageBeanRetcodeApps) SetUpdateTime(v int64) *SearchRetcodeAppByPageResponseBodyPageBeanRetcodeApps {
	s.UpdateTime = &v
	return s
}

func (s *SearchRetcodeAppByPageResponseBodyPageBeanRetcodeApps) SetUserId(v string) *SearchRetcodeAppByPageResponseBodyPageBeanRetcodeApps {
	s.UserId = &v
	return s
}

type SearchRetcodeAppByPageResponseBodyPageBeanRetcodeAppsTags struct {
	// The tag key.
	//
	// example:
	//
	// TestKey
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The tag value.
	//
	// example:
	//
	// TestValue
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s SearchRetcodeAppByPageResponseBodyPageBeanRetcodeAppsTags) String() string {
	return tea.Prettify(s)
}

func (s SearchRetcodeAppByPageResponseBodyPageBeanRetcodeAppsTags) GoString() string {
	return s.String()
}

func (s *SearchRetcodeAppByPageResponseBodyPageBeanRetcodeAppsTags) SetKey(v string) *SearchRetcodeAppByPageResponseBodyPageBeanRetcodeAppsTags {
	s.Key = &v
	return s
}

func (s *SearchRetcodeAppByPageResponseBodyPageBeanRetcodeAppsTags) SetValue(v string) *SearchRetcodeAppByPageResponseBodyPageBeanRetcodeAppsTags {
	s.Value = &v
	return s
}

type SearchRetcodeAppByPageResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SearchRetcodeAppByPageResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SearchRetcodeAppByPageResponse) String() string {
	return tea.Prettify(s)
}

func (s SearchRetcodeAppByPageResponse) GoString() string {
	return s.String()
}

func (s *SearchRetcodeAppByPageResponse) SetHeaders(v map[string]*string) *SearchRetcodeAppByPageResponse {
	s.Headers = v
	return s
}

func (s *SearchRetcodeAppByPageResponse) SetStatusCode(v int32) *SearchRetcodeAppByPageResponse {
	s.StatusCode = &v
	return s
}

func (s *SearchRetcodeAppByPageResponse) SetBody(v *SearchRetcodeAppByPageResponseBody) *SearchRetcodeAppByPageResponse {
	s.Body = v
	return s
}

type SearchTraceAppByNameRequest struct {
	// The region ID.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The list of tags.
	Tags []*SearchTraceAppByNameRequestTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
	// The name of the application.
	//
	// > If you do not specify this parameter, all application monitoring tasks in the specified region are queried.
	//
	// example:
	//
	// test-app
	TraceAppName *string `json:"TraceAppName,omitempty" xml:"TraceAppName,omitempty"`
}

func (s SearchTraceAppByNameRequest) String() string {
	return tea.Prettify(s)
}

func (s SearchTraceAppByNameRequest) GoString() string {
	return s.String()
}

func (s *SearchTraceAppByNameRequest) SetRegionId(v string) *SearchTraceAppByNameRequest {
	s.RegionId = &v
	return s
}

func (s *SearchTraceAppByNameRequest) SetTags(v []*SearchTraceAppByNameRequestTags) *SearchTraceAppByNameRequest {
	s.Tags = v
	return s
}

func (s *SearchTraceAppByNameRequest) SetTraceAppName(v string) *SearchTraceAppByNameRequest {
	s.TraceAppName = &v
	return s
}

type SearchTraceAppByNameRequestTags struct {
	// The tag key.
	//
	// example:
	//
	// TestKey
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The tag value.
	//
	// example:
	//
	// TestValue
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s SearchTraceAppByNameRequestTags) String() string {
	return tea.Prettify(s)
}

func (s SearchTraceAppByNameRequestTags) GoString() string {
	return s.String()
}

func (s *SearchTraceAppByNameRequestTags) SetKey(v string) *SearchTraceAppByNameRequestTags {
	s.Key = &v
	return s
}

func (s *SearchTraceAppByNameRequestTags) SetValue(v string) *SearchTraceAppByNameRequestTags {
	s.Value = &v
	return s
}

type SearchTraceAppByNameResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// F7781D4A-2818-41E7-B7BB-79D809E9****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The information about the monitoring task.
	TraceApps []*SearchTraceAppByNameResponseBodyTraceApps `json:"TraceApps,omitempty" xml:"TraceApps,omitempty" type:"Repeated"`
}

func (s SearchTraceAppByNameResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SearchTraceAppByNameResponseBody) GoString() string {
	return s.String()
}

func (s *SearchTraceAppByNameResponseBody) SetRequestId(v string) *SearchTraceAppByNameResponseBody {
	s.RequestId = &v
	return s
}

func (s *SearchTraceAppByNameResponseBody) SetTraceApps(v []*SearchTraceAppByNameResponseBodyTraceApps) *SearchTraceAppByNameResponseBody {
	s.TraceApps = v
	return s
}

type SearchTraceAppByNameResponseBodyTraceApps struct {
	// The application ID.
	//
	// example:
	//
	// 123
	AppId *int64 `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// The name of the application.
	//
	// example:
	//
	// test-app
	AppName *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	// The timestamp generated when the task was created.
	//
	// example:
	//
	// 1593486786000
	CreateTime *int64 `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The aliases of the application.
	Labels []*string `json:"Labels,omitempty" xml:"Labels,omitempty" type:"Repeated"`
	// The process identifier (PID) of the application.
	//
	// example:
	//
	// a5f9bdeb-2627-4dbe-9247-****
	Pid *string `json:"Pid,omitempty" xml:"Pid,omitempty"`
	// The region ID.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the resource group.
	//
	// example:
	//
	// rg-acfmxyexli2****
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	// Indicates whether the application is displayed in the Application Real-Time Monitoring Service (ARMS) console. Valid values:
	//
	// 	- `true`: yes
	//
	// 	- `false`: no
	//
	// example:
	//
	// true
	Show *bool `json:"Show,omitempty" xml:"Show,omitempty"`
	// A list of tags.
	Tags []*SearchTraceAppByNameResponseBodyTraceAppsTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
	// The type of the monitoring task. Valid values:
	//
	// 	- `TRACE`: Application Monitoring
	//
	// 	- `RETCODE`: Browser Monitoring
	//
	// example:
	//
	// TRACE
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// The timestamp generated when the task information was updated.
	//
	// example:
	//
	// 1593486786000
	UpdateTime *int64 `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
	// The user ID.
	//
	// example:
	//
	// 113197164949****
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s SearchTraceAppByNameResponseBodyTraceApps) String() string {
	return tea.Prettify(s)
}

func (s SearchTraceAppByNameResponseBodyTraceApps) GoString() string {
	return s.String()
}

func (s *SearchTraceAppByNameResponseBodyTraceApps) SetAppId(v int64) *SearchTraceAppByNameResponseBodyTraceApps {
	s.AppId = &v
	return s
}

func (s *SearchTraceAppByNameResponseBodyTraceApps) SetAppName(v string) *SearchTraceAppByNameResponseBodyTraceApps {
	s.AppName = &v
	return s
}

func (s *SearchTraceAppByNameResponseBodyTraceApps) SetCreateTime(v int64) *SearchTraceAppByNameResponseBodyTraceApps {
	s.CreateTime = &v
	return s
}

func (s *SearchTraceAppByNameResponseBodyTraceApps) SetLabels(v []*string) *SearchTraceAppByNameResponseBodyTraceApps {
	s.Labels = v
	return s
}

func (s *SearchTraceAppByNameResponseBodyTraceApps) SetPid(v string) *SearchTraceAppByNameResponseBodyTraceApps {
	s.Pid = &v
	return s
}

func (s *SearchTraceAppByNameResponseBodyTraceApps) SetRegionId(v string) *SearchTraceAppByNameResponseBodyTraceApps {
	s.RegionId = &v
	return s
}

func (s *SearchTraceAppByNameResponseBodyTraceApps) SetResourceGroupId(v string) *SearchTraceAppByNameResponseBodyTraceApps {
	s.ResourceGroupId = &v
	return s
}

func (s *SearchTraceAppByNameResponseBodyTraceApps) SetShow(v bool) *SearchTraceAppByNameResponseBodyTraceApps {
	s.Show = &v
	return s
}

func (s *SearchTraceAppByNameResponseBodyTraceApps) SetTags(v []*SearchTraceAppByNameResponseBodyTraceAppsTags) *SearchTraceAppByNameResponseBodyTraceApps {
	s.Tags = v
	return s
}

func (s *SearchTraceAppByNameResponseBodyTraceApps) SetType(v string) *SearchTraceAppByNameResponseBodyTraceApps {
	s.Type = &v
	return s
}

func (s *SearchTraceAppByNameResponseBodyTraceApps) SetUpdateTime(v int64) *SearchTraceAppByNameResponseBodyTraceApps {
	s.UpdateTime = &v
	return s
}

func (s *SearchTraceAppByNameResponseBodyTraceApps) SetUserId(v string) *SearchTraceAppByNameResponseBodyTraceApps {
	s.UserId = &v
	return s
}

type SearchTraceAppByNameResponseBodyTraceAppsTags struct {
	// The tag key.
	//
	// example:
	//
	// TestKey
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The tag value.
	//
	// example:
	//
	// TestValue
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s SearchTraceAppByNameResponseBodyTraceAppsTags) String() string {
	return tea.Prettify(s)
}

func (s SearchTraceAppByNameResponseBodyTraceAppsTags) GoString() string {
	return s.String()
}

func (s *SearchTraceAppByNameResponseBodyTraceAppsTags) SetKey(v string) *SearchTraceAppByNameResponseBodyTraceAppsTags {
	s.Key = &v
	return s
}

func (s *SearchTraceAppByNameResponseBodyTraceAppsTags) SetValue(v string) *SearchTraceAppByNameResponseBodyTraceAppsTags {
	s.Value = &v
	return s
}

type SearchTraceAppByNameResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SearchTraceAppByNameResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SearchTraceAppByNameResponse) String() string {
	return tea.Prettify(s)
}

func (s SearchTraceAppByNameResponse) GoString() string {
	return s.String()
}

func (s *SearchTraceAppByNameResponse) SetHeaders(v map[string]*string) *SearchTraceAppByNameResponse {
	s.Headers = v
	return s
}

func (s *SearchTraceAppByNameResponse) SetStatusCode(v int32) *SearchTraceAppByNameResponse {
	s.StatusCode = &v
	return s
}

func (s *SearchTraceAppByNameResponse) SetBody(v *SearchTraceAppByNameResponseBody) *SearchTraceAppByNameResponse {
	s.Body = v
	return s
}

type SearchTraceAppByPageRequest struct {
	// The number of the page to return. Default value: `1`.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries to return on each page. Default value: `10`.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The region ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The resource group ID.
	//
	// example:
	//
	// rg-acfmxyexli2****
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	// A list of tags.
	Tags []*SearchTraceAppByPageRequestTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
	// The name of the application.
	//
	// example:
	//
	// test-app
	TraceAppName *string `json:"TraceAppName,omitempty" xml:"TraceAppName,omitempty"`
}

func (s SearchTraceAppByPageRequest) String() string {
	return tea.Prettify(s)
}

func (s SearchTraceAppByPageRequest) GoString() string {
	return s.String()
}

func (s *SearchTraceAppByPageRequest) SetPageNumber(v int32) *SearchTraceAppByPageRequest {
	s.PageNumber = &v
	return s
}

func (s *SearchTraceAppByPageRequest) SetPageSize(v int32) *SearchTraceAppByPageRequest {
	s.PageSize = &v
	return s
}

func (s *SearchTraceAppByPageRequest) SetRegionId(v string) *SearchTraceAppByPageRequest {
	s.RegionId = &v
	return s
}

func (s *SearchTraceAppByPageRequest) SetResourceGroupId(v string) *SearchTraceAppByPageRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *SearchTraceAppByPageRequest) SetTags(v []*SearchTraceAppByPageRequestTags) *SearchTraceAppByPageRequest {
	s.Tags = v
	return s
}

func (s *SearchTraceAppByPageRequest) SetTraceAppName(v string) *SearchTraceAppByPageRequest {
	s.TraceAppName = &v
	return s
}

type SearchTraceAppByPageRequestTags struct {
	// The tag key.
	//
	// example:
	//
	// TestKey
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The tag value.
	//
	// example:
	//
	// TestValue
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s SearchTraceAppByPageRequestTags) String() string {
	return tea.Prettify(s)
}

func (s SearchTraceAppByPageRequestTags) GoString() string {
	return s.String()
}

func (s *SearchTraceAppByPageRequestTags) SetKey(v string) *SearchTraceAppByPageRequestTags {
	s.Key = &v
	return s
}

func (s *SearchTraceAppByPageRequestTags) SetValue(v string) *SearchTraceAppByPageRequestTags {
	s.Value = &v
	return s
}

type SearchTraceAppByPageResponseBody struct {
	// The information about the array object.
	PageBean *SearchTraceAppByPageResponseBodyPageBean `json:"PageBean,omitempty" xml:"PageBean,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// 4B446DF2-3DDD-4B5B-8E3F-D5225120****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SearchTraceAppByPageResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SearchTraceAppByPageResponseBody) GoString() string {
	return s.String()
}

func (s *SearchTraceAppByPageResponseBody) SetPageBean(v *SearchTraceAppByPageResponseBodyPageBean) *SearchTraceAppByPageResponseBody {
	s.PageBean = v
	return s
}

func (s *SearchTraceAppByPageResponseBody) SetRequestId(v string) *SearchTraceAppByPageResponseBody {
	s.RequestId = &v
	return s
}

type SearchTraceAppByPageResponseBodyPageBean struct {
	// The page number of the returned page.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries returned per page.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 3
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	// The information about the monitoring task.
	TraceApps []*SearchTraceAppByPageResponseBodyPageBeanTraceApps `json:"TraceApps,omitempty" xml:"TraceApps,omitempty" type:"Repeated"`
}

func (s SearchTraceAppByPageResponseBodyPageBean) String() string {
	return tea.Prettify(s)
}

func (s SearchTraceAppByPageResponseBodyPageBean) GoString() string {
	return s.String()
}

func (s *SearchTraceAppByPageResponseBodyPageBean) SetPageNumber(v int32) *SearchTraceAppByPageResponseBodyPageBean {
	s.PageNumber = &v
	return s
}

func (s *SearchTraceAppByPageResponseBodyPageBean) SetPageSize(v int32) *SearchTraceAppByPageResponseBodyPageBean {
	s.PageSize = &v
	return s
}

func (s *SearchTraceAppByPageResponseBodyPageBean) SetTotalCount(v int32) *SearchTraceAppByPageResponseBodyPageBean {
	s.TotalCount = &v
	return s
}

func (s *SearchTraceAppByPageResponseBodyPageBean) SetTraceApps(v []*SearchTraceAppByPageResponseBodyPageBeanTraceApps) *SearchTraceAppByPageResponseBodyPageBean {
	s.TraceApps = v
	return s
}

type SearchTraceAppByPageResponseBodyPageBeanTraceApps struct {
	// The application ID.
	//
	// example:
	//
	// 123
	AppId *int64 `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// The name of the application.
	//
	// example:
	//
	// test-app
	AppName *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	// The timestamp generated when the task was created.
	//
	// example:
	//
	// 1531291867000
	CreateTime *int64 `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The aliases of the application.
	Labels []*string `json:"Labels,omitempty" xml:"Labels,omitempty" type:"Repeated"`
	// The process identifier (PID) of the application.
	//
	// example:
	//
	// atc889zkcf@d8deedfa9bf****
	Pid *string `json:"Pid,omitempty" xml:"Pid,omitempty"`
	// The region ID.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The resource group ID.
	//
	// example:
	//
	// rg-acfmxyexli2****
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	// Indicates whether the application is displayed in the Application Real-Time Monitoring Service (ARMS) console. Valid values:
	//
	// 	- `true`: yes
	//
	// 	- `false`: no
	//
	// example:
	//
	// true
	Show *bool `json:"Show,omitempty" xml:"Show,omitempty"`
	// A list of tags.
	Tags []*SearchTraceAppByPageResponseBodyPageBeanTraceAppsTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
	// The type of the monitoring task. Valid values:
	//
	// 	- `TRACE`: Application Monitoring
	//
	// 	- `RETCODE`: Browser Monitoring
	//
	// example:
	//
	// TRACE
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// The timestamp generated when the task information was updated.
	//
	// example:
	//
	// 1531291867000
	UpdateTime *int64 `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
	// The user ID.
	//
	// example:
	//
	// 113197164949****
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s SearchTraceAppByPageResponseBodyPageBeanTraceApps) String() string {
	return tea.Prettify(s)
}

func (s SearchTraceAppByPageResponseBodyPageBeanTraceApps) GoString() string {
	return s.String()
}

func (s *SearchTraceAppByPageResponseBodyPageBeanTraceApps) SetAppId(v int64) *SearchTraceAppByPageResponseBodyPageBeanTraceApps {
	s.AppId = &v
	return s
}

func (s *SearchTraceAppByPageResponseBodyPageBeanTraceApps) SetAppName(v string) *SearchTraceAppByPageResponseBodyPageBeanTraceApps {
	s.AppName = &v
	return s
}

func (s *SearchTraceAppByPageResponseBodyPageBeanTraceApps) SetCreateTime(v int64) *SearchTraceAppByPageResponseBodyPageBeanTraceApps {
	s.CreateTime = &v
	return s
}

func (s *SearchTraceAppByPageResponseBodyPageBeanTraceApps) SetLabels(v []*string) *SearchTraceAppByPageResponseBodyPageBeanTraceApps {
	s.Labels = v
	return s
}

func (s *SearchTraceAppByPageResponseBodyPageBeanTraceApps) SetPid(v string) *SearchTraceAppByPageResponseBodyPageBeanTraceApps {
	s.Pid = &v
	return s
}

func (s *SearchTraceAppByPageResponseBodyPageBeanTraceApps) SetRegionId(v string) *SearchTraceAppByPageResponseBodyPageBeanTraceApps {
	s.RegionId = &v
	return s
}

func (s *SearchTraceAppByPageResponseBodyPageBeanTraceApps) SetResourceGroupId(v string) *SearchTraceAppByPageResponseBodyPageBeanTraceApps {
	s.ResourceGroupId = &v
	return s
}

func (s *SearchTraceAppByPageResponseBodyPageBeanTraceApps) SetShow(v bool) *SearchTraceAppByPageResponseBodyPageBeanTraceApps {
	s.Show = &v
	return s
}

func (s *SearchTraceAppByPageResponseBodyPageBeanTraceApps) SetTags(v []*SearchTraceAppByPageResponseBodyPageBeanTraceAppsTags) *SearchTraceAppByPageResponseBodyPageBeanTraceApps {
	s.Tags = v
	return s
}

func (s *SearchTraceAppByPageResponseBodyPageBeanTraceApps) SetType(v string) *SearchTraceAppByPageResponseBodyPageBeanTraceApps {
	s.Type = &v
	return s
}

func (s *SearchTraceAppByPageResponseBodyPageBeanTraceApps) SetUpdateTime(v int64) *SearchTraceAppByPageResponseBodyPageBeanTraceApps {
	s.UpdateTime = &v
	return s
}

func (s *SearchTraceAppByPageResponseBodyPageBeanTraceApps) SetUserId(v string) *SearchTraceAppByPageResponseBodyPageBeanTraceApps {
	s.UserId = &v
	return s
}

type SearchTraceAppByPageResponseBodyPageBeanTraceAppsTags struct {
	// The tag key.
	//
	// example:
	//
	// TestKey
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The tag value.
	//
	// example:
	//
	// TestValue
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s SearchTraceAppByPageResponseBodyPageBeanTraceAppsTags) String() string {
	return tea.Prettify(s)
}

func (s SearchTraceAppByPageResponseBodyPageBeanTraceAppsTags) GoString() string {
	return s.String()
}

func (s *SearchTraceAppByPageResponseBodyPageBeanTraceAppsTags) SetKey(v string) *SearchTraceAppByPageResponseBodyPageBeanTraceAppsTags {
	s.Key = &v
	return s
}

func (s *SearchTraceAppByPageResponseBodyPageBeanTraceAppsTags) SetValue(v string) *SearchTraceAppByPageResponseBodyPageBeanTraceAppsTags {
	s.Value = &v
	return s
}

type SearchTraceAppByPageResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SearchTraceAppByPageResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SearchTraceAppByPageResponse) String() string {
	return tea.Prettify(s)
}

func (s SearchTraceAppByPageResponse) GoString() string {
	return s.String()
}

func (s *SearchTraceAppByPageResponse) SetHeaders(v map[string]*string) *SearchTraceAppByPageResponse {
	s.Headers = v
	return s
}

func (s *SearchTraceAppByPageResponse) SetStatusCode(v int32) *SearchTraceAppByPageResponse {
	s.StatusCode = &v
	return s
}

func (s *SearchTraceAppByPageResponse) SetBody(v *SearchTraceAppByPageResponseBody) *SearchTraceAppByPageResponse {
	s.Body = v
	return s
}

type SearchTracesRequest struct {
	// The end of the time range to query. Unit: milliseconds.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1595210400000
	EndTime *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The filter conditions.
	ExclusionFilters []*SearchTracesRequestExclusionFilters `json:"ExclusionFilters,omitempty" xml:"ExclusionFilters,omitempty" type:"Repeated"`
	// The minimum amount of time consumed by traces. Unit: milliseconds.
	//
	// example:
	//
	// 2
	MinDuration *int64 `json:"MinDuration,omitempty" xml:"MinDuration,omitempty"`
	// The name of the traced span.
	//
	// example:
	//
	// /demo/queryNotExistDB/11
	OperationName *string `json:"OperationName,omitempty" xml:"OperationName,omitempty"`
	// The application ID.
	//
	// example:
	//
	// b590lhguqs@9781be0f44dXXXX
	Pid *string `json:"Pid,omitempty" xml:"Pid,omitempty"`
	// The region ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// Specifies whether to sort the query results in chronological order or reverse chronological order. Default value: `false`.
	//
	// 	- `true`: sorts the query results in reverse chronological order.
	//
	// 	- `false`: sorts the query results in chronological order.
	//
	// example:
	//
	// false
	Reverse *bool `json:"Reverse,omitempty" xml:"Reverse,omitempty"`
	// The IP address of the host where the application resides.
	//
	// example:
	//
	// 172.20.XX.XX
	ServiceIp *string `json:"ServiceIp,omitempty" xml:"ServiceIp,omitempty"`
	// The name of the application.
	//
	// example:
	//
	// arms-k8s-demo-subcomponent
	ServiceName *string `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
	// The beginning of the time range to query. Unit: milliseconds.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1595174400000
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The list of tags.
	Tag []*SearchTracesRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s SearchTracesRequest) String() string {
	return tea.Prettify(s)
}

func (s SearchTracesRequest) GoString() string {
	return s.String()
}

func (s *SearchTracesRequest) SetEndTime(v int64) *SearchTracesRequest {
	s.EndTime = &v
	return s
}

func (s *SearchTracesRequest) SetExclusionFilters(v []*SearchTracesRequestExclusionFilters) *SearchTracesRequest {
	s.ExclusionFilters = v
	return s
}

func (s *SearchTracesRequest) SetMinDuration(v int64) *SearchTracesRequest {
	s.MinDuration = &v
	return s
}

func (s *SearchTracesRequest) SetOperationName(v string) *SearchTracesRequest {
	s.OperationName = &v
	return s
}

func (s *SearchTracesRequest) SetPid(v string) *SearchTracesRequest {
	s.Pid = &v
	return s
}

func (s *SearchTracesRequest) SetRegionId(v string) *SearchTracesRequest {
	s.RegionId = &v
	return s
}

func (s *SearchTracesRequest) SetReverse(v bool) *SearchTracesRequest {
	s.Reverse = &v
	return s
}

func (s *SearchTracesRequest) SetServiceIp(v string) *SearchTracesRequest {
	s.ServiceIp = &v
	return s
}

func (s *SearchTracesRequest) SetServiceName(v string) *SearchTracesRequest {
	s.ServiceName = &v
	return s
}

func (s *SearchTracesRequest) SetStartTime(v int64) *SearchTracesRequest {
	s.StartTime = &v
	return s
}

func (s *SearchTracesRequest) SetTag(v []*SearchTracesRequestTag) *SearchTracesRequest {
	s.Tag = v
	return s
}

type SearchTracesRequestExclusionFilters struct {
	// The key that is used to filter the query results.
	//
	// example:
	//
	// http.status_code
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The value of the key that is used to filter the query results.
	//
	// example:
	//
	// 404
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s SearchTracesRequestExclusionFilters) String() string {
	return tea.Prettify(s)
}

func (s SearchTracesRequestExclusionFilters) GoString() string {
	return s.String()
}

func (s *SearchTracesRequestExclusionFilters) SetKey(v string) *SearchTracesRequestExclusionFilters {
	s.Key = &v
	return s
}

func (s *SearchTracesRequestExclusionFilters) SetValue(v string) *SearchTracesRequestExclusionFilters {
	s.Value = &v
	return s
}

type SearchTracesRequestTag struct {
	// The tag key. The following system preset fields are provided:
	//
	// 	- serverApp: the name of the server application.
	//
	// 	- clientApp: the name of the client application.
	//
	// 	- service: the name of the operation.
	//
	// 	- rpc: the type of the call.
	//
	// 	- msOfSpan: the duration exceeds a specific value.
	//
	// 	- clientIp: the IP address of the client.
	//
	// 	- serverIp: the IP address of the server.
	//
	// 	- isError: specifies whether the call is abnormal.
	//
	// 	- hasTprof: contains only thread profiling.
	//
	// example:
	//
	// http.status_code
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The value of the tag.
	//
	// example:
	//
	// 200
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s SearchTracesRequestTag) String() string {
	return tea.Prettify(s)
}

func (s SearchTracesRequestTag) GoString() string {
	return s.String()
}

func (s *SearchTracesRequestTag) SetKey(v string) *SearchTracesRequestTag {
	s.Key = &v
	return s
}

func (s *SearchTracesRequestTag) SetValue(v string) *SearchTracesRequestTag {
	s.Value = &v
	return s
}

type SearchTracesResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 4C518054-852F-4023-ABC1-4AF95FF7****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The details of the returned traces.
	TraceInfos []*SearchTracesResponseBodyTraceInfos `json:"TraceInfos,omitempty" xml:"TraceInfos,omitempty" type:"Repeated"`
}

func (s SearchTracesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SearchTracesResponseBody) GoString() string {
	return s.String()
}

func (s *SearchTracesResponseBody) SetRequestId(v string) *SearchTracesResponseBody {
	s.RequestId = &v
	return s
}

func (s *SearchTracesResponseBody) SetTraceInfos(v []*SearchTracesResponseBodyTraceInfos) *SearchTracesResponseBody {
	s.TraceInfos = v
	return s
}

type SearchTracesResponseBodyTraceInfos struct {
	// The amount of time consumed by the trace. Unit: milliseconds.
	//
	// example:
	//
	// 6
	Duration *int64 `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// The name of the traced span.
	//
	// example:
	//
	// get***
	OperationName *string `json:"OperationName,omitempty" xml:"OperationName,omitempty"`
	// The IP address of the host where the application resides.
	//
	// example:
	//
	// 172.20.\*\*.**
	ServiceIp *string `json:"ServiceIp,omitempty" xml:"ServiceIp,omitempty"`
	// The name of the application.
	//
	// example:
	//
	// arms-k8s-demo-subcomponent
	ServiceName *string `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
	// The timestamp.
	//
	// example:
	//
	// 1595174436993
	Timestamp *int64 `json:"Timestamp,omitempty" xml:"Timestamp,omitempty"`
	// The trace ID.
	//
	// example:
	//
	// ac1400a115951744369937024d****
	TraceID *string `json:"TraceID,omitempty" xml:"TraceID,omitempty"`
}

func (s SearchTracesResponseBodyTraceInfos) String() string {
	return tea.Prettify(s)
}

func (s SearchTracesResponseBodyTraceInfos) GoString() string {
	return s.String()
}

func (s *SearchTracesResponseBodyTraceInfos) SetDuration(v int64) *SearchTracesResponseBodyTraceInfos {
	s.Duration = &v
	return s
}

func (s *SearchTracesResponseBodyTraceInfos) SetOperationName(v string) *SearchTracesResponseBodyTraceInfos {
	s.OperationName = &v
	return s
}

func (s *SearchTracesResponseBodyTraceInfos) SetServiceIp(v string) *SearchTracesResponseBodyTraceInfos {
	s.ServiceIp = &v
	return s
}

func (s *SearchTracesResponseBodyTraceInfos) SetServiceName(v string) *SearchTracesResponseBodyTraceInfos {
	s.ServiceName = &v
	return s
}

func (s *SearchTracesResponseBodyTraceInfos) SetTimestamp(v int64) *SearchTracesResponseBodyTraceInfos {
	s.Timestamp = &v
	return s
}

func (s *SearchTracesResponseBodyTraceInfos) SetTraceID(v string) *SearchTracesResponseBodyTraceInfos {
	s.TraceID = &v
	return s
}

type SearchTracesResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SearchTracesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SearchTracesResponse) String() string {
	return tea.Prettify(s)
}

func (s SearchTracesResponse) GoString() string {
	return s.String()
}

func (s *SearchTracesResponse) SetHeaders(v map[string]*string) *SearchTracesResponse {
	s.Headers = v
	return s
}

func (s *SearchTracesResponse) SetStatusCode(v int32) *SearchTracesResponse {
	s.StatusCode = &v
	return s
}

func (s *SearchTracesResponse) SetBody(v *SearchTracesResponseBody) *SearchTracesResponse {
	s.Body = v
	return s
}

type SearchTracesByPageRequest struct {
	// The end of the time range to query. Unit: milliseconds.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1595210400000
	EndTime *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The filter conditions.
	ExclusionFilters []*SearchTracesByPageRequestExclusionFilters `json:"ExclusionFilters,omitempty" xml:"ExclusionFilters,omitempty" type:"Repeated"`
	// Specifies whether to include the traces of abnormal calls.
	//
	// 	- `true`: No
	//
	// 	- `false` (default): Yes
	//
	// example:
	//
	// false
	IsError *bool `json:"IsError,omitempty" xml:"IsError,omitempty"`
	// The minimum amount of time consumed by traces. Unit: milliseconds.
	//
	// example:
	//
	// 2
	MinDuration *int64 `json:"MinDuration,omitempty" xml:"MinDuration,omitempty"`
	// The name of the traced span.
	//
	// example:
	//
	// /demo/queryNotExistDB/11
	OperationName *string `json:"OperationName,omitempty" xml:"OperationName,omitempty"`
	// The number of the page to return.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries to return on each page. Maximum value: 100.
	//
	// example:
	//
	// 5
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The application ID.
	//
	// example:
	//
	// b590lhguqs@9781be0f44dXXXX
	Pid *string `json:"Pid,omitempty" xml:"Pid,omitempty"`
	// The region ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// Specifies whether to sort the query results in chronological order or reverse chronological order. Default value: `false`.
	//
	// 	- `true`: sorts the query results in reverse chronological order.
	//
	// 	- `false`: sorts the query results in chronological order.
	//
	// example:
	//
	// false
	Reverse *bool `json:"Reverse,omitempty" xml:"Reverse,omitempty"`
	// The IP address of the host where the application resides.
	//
	// example:
	//
	// 172.20.XX.XX
	ServiceIp *string `json:"ServiceIp,omitempty" xml:"ServiceIp,omitempty"`
	// The name of the application.
	//
	// example:
	//
	// arms-k8s-demo-subcomponent
	ServiceName *string `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
	// The beginning of the time range to query. Unit: milliseconds.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1595174400000
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The tags.
	Tags []*SearchTracesByPageRequestTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
}

func (s SearchTracesByPageRequest) String() string {
	return tea.Prettify(s)
}

func (s SearchTracesByPageRequest) GoString() string {
	return s.String()
}

func (s *SearchTracesByPageRequest) SetEndTime(v int64) *SearchTracesByPageRequest {
	s.EndTime = &v
	return s
}

func (s *SearchTracesByPageRequest) SetExclusionFilters(v []*SearchTracesByPageRequestExclusionFilters) *SearchTracesByPageRequest {
	s.ExclusionFilters = v
	return s
}

func (s *SearchTracesByPageRequest) SetIsError(v bool) *SearchTracesByPageRequest {
	s.IsError = &v
	return s
}

func (s *SearchTracesByPageRequest) SetMinDuration(v int64) *SearchTracesByPageRequest {
	s.MinDuration = &v
	return s
}

func (s *SearchTracesByPageRequest) SetOperationName(v string) *SearchTracesByPageRequest {
	s.OperationName = &v
	return s
}

func (s *SearchTracesByPageRequest) SetPageNumber(v int32) *SearchTracesByPageRequest {
	s.PageNumber = &v
	return s
}

func (s *SearchTracesByPageRequest) SetPageSize(v int32) *SearchTracesByPageRequest {
	s.PageSize = &v
	return s
}

func (s *SearchTracesByPageRequest) SetPid(v string) *SearchTracesByPageRequest {
	s.Pid = &v
	return s
}

func (s *SearchTracesByPageRequest) SetRegionId(v string) *SearchTracesByPageRequest {
	s.RegionId = &v
	return s
}

func (s *SearchTracesByPageRequest) SetReverse(v bool) *SearchTracesByPageRequest {
	s.Reverse = &v
	return s
}

func (s *SearchTracesByPageRequest) SetServiceIp(v string) *SearchTracesByPageRequest {
	s.ServiceIp = &v
	return s
}

func (s *SearchTracesByPageRequest) SetServiceName(v string) *SearchTracesByPageRequest {
	s.ServiceName = &v
	return s
}

func (s *SearchTracesByPageRequest) SetStartTime(v int64) *SearchTracesByPageRequest {
	s.StartTime = &v
	return s
}

func (s *SearchTracesByPageRequest) SetTags(v []*SearchTracesByPageRequestTags) *SearchTracesByPageRequest {
	s.Tags = v
	return s
}

type SearchTracesByPageRequestExclusionFilters struct {
	// The key that is used to filter the query results.
	//
	// example:
	//
	// http.status_code
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The value of the key that is used to filter the query results.
	//
	// example:
	//
	// 404
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s SearchTracesByPageRequestExclusionFilters) String() string {
	return tea.Prettify(s)
}

func (s SearchTracesByPageRequestExclusionFilters) GoString() string {
	return s.String()
}

func (s *SearchTracesByPageRequestExclusionFilters) SetKey(v string) *SearchTracesByPageRequestExclusionFilters {
	s.Key = &v
	return s
}

func (s *SearchTracesByPageRequestExclusionFilters) SetValue(v string) *SearchTracesByPageRequestExclusionFilters {
	s.Value = &v
	return s
}

type SearchTracesByPageRequestTags struct {
	// The key of the tag. The following system preset fields are provided:
	//
	// 	- traceId: the ID of the trace.
	//
	// 	- serverApp: the name of the server application.
	//
	// 	- clientApp: the name of the client application.
	//
	// 	- service: the name of the API operation.
	//
	// 	- rpc: the type of the call.
	//
	// 	- msOfSpan: the duration exceeds a specific value.
	//
	// 	- clientIp: the IP address of the client.
	//
	// 	- serverIp: the IP address of the server.
	//
	// 	- isError: specifies whether the call is abnormal.
	//
	// 	- hasTprof: contains only thread profiling.
	//
	// example:
	//
	// http.status_code
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The value of the tag.
	//
	// example:
	//
	// 200
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s SearchTracesByPageRequestTags) String() string {
	return tea.Prettify(s)
}

func (s SearchTracesByPageRequestTags) GoString() string {
	return s.String()
}

func (s *SearchTracesByPageRequestTags) SetKey(v string) *SearchTracesByPageRequestTags {
	s.Key = &v
	return s
}

func (s *SearchTracesByPageRequestTags) SetValue(v string) *SearchTracesByPageRequestTags {
	s.Value = &v
	return s
}

type SearchTracesByPageResponseBody struct {
	// The returned struct.
	PageBean *SearchTracesByPageResponseBodyPageBean `json:"PageBean,omitempty" xml:"PageBean,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// 4C518054-852F-4023-ABC1-4AF95FF7****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SearchTracesByPageResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SearchTracesByPageResponseBody) GoString() string {
	return s.String()
}

func (s *SearchTracesByPageResponseBody) SetPageBean(v *SearchTracesByPageResponseBodyPageBean) *SearchTracesByPageResponseBody {
	s.PageBean = v
	return s
}

func (s *SearchTracesByPageResponseBody) SetRequestId(v string) *SearchTracesByPageResponseBody {
	s.RequestId = &v
	return s
}

type SearchTracesByPageResponseBodyPageBean struct {
	// The page number of the returned page.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries returned per page.
	//
	// example:
	//
	// 5
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of returned entries.
	//
	// example:
	//
	// 1601
	Total *int32 `json:"Total,omitempty" xml:"Total,omitempty"`
	// The details of the returned traces.
	TraceInfos []*SearchTracesByPageResponseBodyPageBeanTraceInfos `json:"TraceInfos,omitempty" xml:"TraceInfos,omitempty" type:"Repeated"`
}

func (s SearchTracesByPageResponseBodyPageBean) String() string {
	return tea.Prettify(s)
}

func (s SearchTracesByPageResponseBodyPageBean) GoString() string {
	return s.String()
}

func (s *SearchTracesByPageResponseBodyPageBean) SetPageNumber(v int32) *SearchTracesByPageResponseBodyPageBean {
	s.PageNumber = &v
	return s
}

func (s *SearchTracesByPageResponseBodyPageBean) SetPageSize(v int32) *SearchTracesByPageResponseBodyPageBean {
	s.PageSize = &v
	return s
}

func (s *SearchTracesByPageResponseBodyPageBean) SetTotal(v int32) *SearchTracesByPageResponseBodyPageBean {
	s.Total = &v
	return s
}

func (s *SearchTracesByPageResponseBodyPageBean) SetTraceInfos(v []*SearchTracesByPageResponseBodyPageBeanTraceInfos) *SearchTracesByPageResponseBodyPageBean {
	s.TraceInfos = v
	return s
}

type SearchTracesByPageResponseBodyPageBeanTraceInfos struct {
	// The amount of time consumed by the trace. Unit: milliseconds.
	//
	// example:
	//
	// 679
	Duration *int64 `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// The name of the traced span.
	//
	// example:
	//
	// /demo/queryException/12
	OperationName *string `json:"OperationName,omitempty" xml:"OperationName,omitempty"`
	// The IP address of the host where the application resides.
	//
	// example:
	//
	// 172.20.XX.XX
	ServiceIp *string `json:"ServiceIp,omitempty" xml:"ServiceIp,omitempty"`
	// The name of the application.
	//
	// example:
	//
	// arms-k8s-demo-subcomponent
	ServiceName *string `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
	// The timestamp.
	//
	// example:
	//
	// 1595174436994
	Timestamp *int64 `json:"Timestamp,omitempty" xml:"Timestamp,omitempty"`
	// The trace ID.
	//
	// example:
	//
	// ac1400a115951744369947025d****
	TraceID *string `json:"TraceID,omitempty" xml:"TraceID,omitempty"`
}

func (s SearchTracesByPageResponseBodyPageBeanTraceInfos) String() string {
	return tea.Prettify(s)
}

func (s SearchTracesByPageResponseBodyPageBeanTraceInfos) GoString() string {
	return s.String()
}

func (s *SearchTracesByPageResponseBodyPageBeanTraceInfos) SetDuration(v int64) *SearchTracesByPageResponseBodyPageBeanTraceInfos {
	s.Duration = &v
	return s
}

func (s *SearchTracesByPageResponseBodyPageBeanTraceInfos) SetOperationName(v string) *SearchTracesByPageResponseBodyPageBeanTraceInfos {
	s.OperationName = &v
	return s
}

func (s *SearchTracesByPageResponseBodyPageBeanTraceInfos) SetServiceIp(v string) *SearchTracesByPageResponseBodyPageBeanTraceInfos {
	s.ServiceIp = &v
	return s
}

func (s *SearchTracesByPageResponseBodyPageBeanTraceInfos) SetServiceName(v string) *SearchTracesByPageResponseBodyPageBeanTraceInfos {
	s.ServiceName = &v
	return s
}

func (s *SearchTracesByPageResponseBodyPageBeanTraceInfos) SetTimestamp(v int64) *SearchTracesByPageResponseBodyPageBeanTraceInfos {
	s.Timestamp = &v
	return s
}

func (s *SearchTracesByPageResponseBodyPageBeanTraceInfos) SetTraceID(v string) *SearchTracesByPageResponseBodyPageBeanTraceInfos {
	s.TraceID = &v
	return s
}

type SearchTracesByPageResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SearchTracesByPageResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SearchTracesByPageResponse) String() string {
	return tea.Prettify(s)
}

func (s SearchTracesByPageResponse) GoString() string {
	return s.String()
}

func (s *SearchTracesByPageResponse) SetHeaders(v map[string]*string) *SearchTracesByPageResponse {
	s.Headers = v
	return s
}

func (s *SearchTracesByPageResponse) SetStatusCode(v int32) *SearchTracesByPageResponse {
	s.StatusCode = &v
	return s
}

func (s *SearchTracesByPageResponse) SetBody(v *SearchTracesByPageResponseBody) *SearchTracesByPageResponse {
	s.Body = v
	return s
}

type SendTTSVerifyLinkRequest struct {
	// The ID of the alert contact.
	//
	// This parameter is required.
	//
	// example:
	//
	// 123
	ContactId *int64 `json:"ContactId,omitempty" xml:"ContactId,omitempty"`
	// The mobile number of the alert contact.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1381111****
	Phone *string `json:"Phone,omitempty" xml:"Phone,omitempty"`
}

func (s SendTTSVerifyLinkRequest) String() string {
	return tea.Prettify(s)
}

func (s SendTTSVerifyLinkRequest) GoString() string {
	return s.String()
}

func (s *SendTTSVerifyLinkRequest) SetContactId(v int64) *SendTTSVerifyLinkRequest {
	s.ContactId = &v
	return s
}

func (s *SendTTSVerifyLinkRequest) SetPhone(v string) *SendTTSVerifyLinkRequest {
	s.Phone = &v
	return s
}

type SendTTSVerifyLinkResponseBody struct {
	// Indicates whether the text message was sent.
	//
	// 	- `true`
	//
	// 	- `false`
	//
	// example:
	//
	// true
	IsSuccess *bool `json:"IsSuccess,omitempty" xml:"IsSuccess,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 21E85B16-75A6-429A-9F65-8AAC9A54****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SendTTSVerifyLinkResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SendTTSVerifyLinkResponseBody) GoString() string {
	return s.String()
}

func (s *SendTTSVerifyLinkResponseBody) SetIsSuccess(v bool) *SendTTSVerifyLinkResponseBody {
	s.IsSuccess = &v
	return s
}

func (s *SendTTSVerifyLinkResponseBody) SetRequestId(v string) *SendTTSVerifyLinkResponseBody {
	s.RequestId = &v
	return s
}

type SendTTSVerifyLinkResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SendTTSVerifyLinkResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SendTTSVerifyLinkResponse) String() string {
	return tea.Prettify(s)
}

func (s SendTTSVerifyLinkResponse) GoString() string {
	return s.String()
}

func (s *SendTTSVerifyLinkResponse) SetHeaders(v map[string]*string) *SendTTSVerifyLinkResponse {
	s.Headers = v
	return s
}

func (s *SendTTSVerifyLinkResponse) SetStatusCode(v int32) *SendTTSVerifyLinkResponse {
	s.StatusCode = &v
	return s
}

func (s *SendTTSVerifyLinkResponse) SetBody(v *SendTTSVerifyLinkResponseBody) *SendTTSVerifyLinkResponse {
	s.Body = v
	return s
}

type SetRetcodeShareStatusRequest struct {
	// The name of the application that is monitored by Browser Monitoring.
	//
	// example:
	//
	// test-app
	AppName *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	// The process identifier (PID) of the application.
	//
	// Log on to the **ARMS console**. In the left-side navigation pane, choose **Browser Monitoring*	- > **Browser Monitoring**. On the Browser Monitoring page, click the name of an application. The URL in the address bar contains the process ID (PID) of the application. The PID is indicated in the `pid=xxx` format. The PID is usually percent encoded as `xxx%40xxx`. You must modify this value to remove the percent encoding. For example, if the PID in the URL is `eb4zdose6v%409781be0f44d****`, you must replace `%40` with @ to obtain `eb4zdose6v@9781be0f44d****`.
	//
	// example:
	//
	// atc889zkcf@d8deedfa9bf****
	Pid *string `json:"Pid,omitempty" xml:"Pid,omitempty"`
	// Specifies whether to turn on or turn off the logon-free sharing switch. Valid values:
	//
	// 	- `true`: Turn on the switch.
	//
	// 	- `false`: Turn off the switch.
	//
	// This parameter is required.
	//
	// example:
	//
	// true
	Status *bool `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s SetRetcodeShareStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s SetRetcodeShareStatusRequest) GoString() string {
	return s.String()
}

func (s *SetRetcodeShareStatusRequest) SetAppName(v string) *SetRetcodeShareStatusRequest {
	s.AppName = &v
	return s
}

func (s *SetRetcodeShareStatusRequest) SetPid(v string) *SetRetcodeShareStatusRequest {
	s.Pid = &v
	return s
}

func (s *SetRetcodeShareStatusRequest) SetStatus(v bool) *SetRetcodeShareStatusRequest {
	s.Status = &v
	return s
}

type SetRetcodeShareStatusResponseBody struct {
	// Indicates whether the call is successful. Valid values:
	//
	// 	- `true`: The call is successful.
	//
	// 	- `false`: The call fails.
	//
	// example:
	//
	// true
	IsSuccess *bool `json:"IsSuccess,omitempty" xml:"IsSuccess,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 40B10E04-81E8-4643-970D-F1B38F2E****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SetRetcodeShareStatusResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetRetcodeShareStatusResponseBody) GoString() string {
	return s.String()
}

func (s *SetRetcodeShareStatusResponseBody) SetIsSuccess(v bool) *SetRetcodeShareStatusResponseBody {
	s.IsSuccess = &v
	return s
}

func (s *SetRetcodeShareStatusResponseBody) SetRequestId(v string) *SetRetcodeShareStatusResponseBody {
	s.RequestId = &v
	return s
}

type SetRetcodeShareStatusResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SetRetcodeShareStatusResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SetRetcodeShareStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s SetRetcodeShareStatusResponse) GoString() string {
	return s.String()
}

func (s *SetRetcodeShareStatusResponse) SetHeaders(v map[string]*string) *SetRetcodeShareStatusResponse {
	s.Headers = v
	return s
}

func (s *SetRetcodeShareStatusResponse) SetStatusCode(v int32) *SetRetcodeShareStatusResponse {
	s.StatusCode = &v
	return s
}

func (s *SetRetcodeShareStatusResponse) SetBody(v *SetRetcodeShareStatusResponseBody) *SetRetcodeShareStatusResponse {
	s.Body = v
	return s
}

type StartAlertRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 1610***
	AlertId *string `json:"AlertId,omitempty" xml:"AlertId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s StartAlertRequest) String() string {
	return tea.Prettify(s)
}

func (s StartAlertRequest) GoString() string {
	return s.String()
}

func (s *StartAlertRequest) SetAlertId(v string) *StartAlertRequest {
	s.AlertId = &v
	return s
}

func (s *StartAlertRequest) SetRegionId(v string) *StartAlertRequest {
	s.RegionId = &v
	return s
}

type StartAlertResponseBody struct {
	// example:
	//
	// true
	IsSuccess *bool `json:"IsSuccess,omitempty" xml:"IsSuccess,omitempty"`
	// example:
	//
	// 27E653FA-5958-45BE-8AA9-14D884DC****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s StartAlertResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StartAlertResponseBody) GoString() string {
	return s.String()
}

func (s *StartAlertResponseBody) SetIsSuccess(v bool) *StartAlertResponseBody {
	s.IsSuccess = &v
	return s
}

func (s *StartAlertResponseBody) SetRequestId(v string) *StartAlertResponseBody {
	s.RequestId = &v
	return s
}

type StartAlertResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *StartAlertResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s StartAlertResponse) String() string {
	return tea.Prettify(s)
}

func (s StartAlertResponse) GoString() string {
	return s.String()
}

func (s *StartAlertResponse) SetHeaders(v map[string]*string) *StartAlertResponse {
	s.Headers = v
	return s
}

func (s *StartAlertResponse) SetStatusCode(v int32) *StartAlertResponse {
	s.StatusCode = &v
	return s
}

func (s *StartAlertResponse) SetBody(v *StartAlertResponseBody) *StartAlertResponse {
	s.Body = v
	return s
}

type StartTimingSyntheticTaskRequest struct {
	// example:
	//
	// cn-hangzhou
	RegionId *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	TaskIds  []*string `json:"TaskIds,omitempty" xml:"TaskIds,omitempty" type:"Repeated"`
}

func (s StartTimingSyntheticTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s StartTimingSyntheticTaskRequest) GoString() string {
	return s.String()
}

func (s *StartTimingSyntheticTaskRequest) SetRegionId(v string) *StartTimingSyntheticTaskRequest {
	s.RegionId = &v
	return s
}

func (s *StartTimingSyntheticTaskRequest) SetTaskIds(v []*string) *StartTimingSyntheticTaskRequest {
	s.TaskIds = v
	return s
}

type StartTimingSyntheticTaskShrinkRequest struct {
	// example:
	//
	// cn-hangzhou
	RegionId      *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	TaskIdsShrink *string `json:"TaskIds,omitempty" xml:"TaskIds,omitempty"`
}

func (s StartTimingSyntheticTaskShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s StartTimingSyntheticTaskShrinkRequest) GoString() string {
	return s.String()
}

func (s *StartTimingSyntheticTaskShrinkRequest) SetRegionId(v string) *StartTimingSyntheticTaskShrinkRequest {
	s.RegionId = &v
	return s
}

func (s *StartTimingSyntheticTaskShrinkRequest) SetTaskIdsShrink(v string) *StartTimingSyntheticTaskShrinkRequest {
	s.TaskIdsShrink = &v
	return s
}

type StartTimingSyntheticTaskResponseBody struct {
	// example:
	//
	// 200
	Code *int64 `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// true
	Data *bool `json:"Data,omitempty" xml:"Data,omitempty"`
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 2A0CEDF1-06FE-44AC-8E21-21A5BE65****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s StartTimingSyntheticTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StartTimingSyntheticTaskResponseBody) GoString() string {
	return s.String()
}

func (s *StartTimingSyntheticTaskResponseBody) SetCode(v int64) *StartTimingSyntheticTaskResponseBody {
	s.Code = &v
	return s
}

func (s *StartTimingSyntheticTaskResponseBody) SetData(v bool) *StartTimingSyntheticTaskResponseBody {
	s.Data = &v
	return s
}

func (s *StartTimingSyntheticTaskResponseBody) SetMessage(v string) *StartTimingSyntheticTaskResponseBody {
	s.Message = &v
	return s
}

func (s *StartTimingSyntheticTaskResponseBody) SetRequestId(v string) *StartTimingSyntheticTaskResponseBody {
	s.RequestId = &v
	return s
}

type StartTimingSyntheticTaskResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *StartTimingSyntheticTaskResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s StartTimingSyntheticTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s StartTimingSyntheticTaskResponse) GoString() string {
	return s.String()
}

func (s *StartTimingSyntheticTaskResponse) SetHeaders(v map[string]*string) *StartTimingSyntheticTaskResponse {
	s.Headers = v
	return s
}

func (s *StartTimingSyntheticTaskResponse) SetStatusCode(v int32) *StartTimingSyntheticTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *StartTimingSyntheticTaskResponse) SetBody(v *StartTimingSyntheticTaskResponseBody) *StartTimingSyntheticTaskResponse {
	s.Body = v
	return s
}

type StopAlertRequest struct {
	// The ID of the alert rule.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1610***
	AlertId *string `json:"AlertId,omitempty" xml:"AlertId,omitempty"`
	// The ID of the region.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s StopAlertRequest) String() string {
	return tea.Prettify(s)
}

func (s StopAlertRequest) GoString() string {
	return s.String()
}

func (s *StopAlertRequest) SetAlertId(v string) *StopAlertRequest {
	s.AlertId = &v
	return s
}

func (s *StopAlertRequest) SetRegionId(v string) *StopAlertRequest {
	s.RegionId = &v
	return s
}

type StopAlertResponseBody struct {
	// Indicates whether the request is successful. Valid values:
	//
	// 	- `true`: The request is successful.
	//
	// 	- `false`: The request fails.
	//
	// example:
	//
	// true
	IsSuccess *bool `json:"IsSuccess,omitempty" xml:"IsSuccess,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 27E653FA-5958-45BE-8AA9-14D884DC****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s StopAlertResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StopAlertResponseBody) GoString() string {
	return s.String()
}

func (s *StopAlertResponseBody) SetIsSuccess(v bool) *StopAlertResponseBody {
	s.IsSuccess = &v
	return s
}

func (s *StopAlertResponseBody) SetRequestId(v string) *StopAlertResponseBody {
	s.RequestId = &v
	return s
}

type StopAlertResponse struct {
	Headers    map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *StopAlertResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s StopAlertResponse) String() string {
	return tea.Prettify(s)
}

func (s StopAlertResponse) GoString() string {
	return s.String()
}

func (s *StopAlertResponse) SetHeaders(v map[string]*string) *StopAlertResponse {
	s.Headers = v
	return s
}

func (s *StopAlertResponse) SetStatusCode(v int32) *StopAlertResponse {
	s.StatusCode = &v
	return s
}

func (s *StopAlertResponse) SetBody(v *StopAlertResponseBody) *StopAlertResponse {
	s.Body = v
	return s
}

type StopTimingSyntheticTaskRequest struct {
	// The region ID.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The task IDs.
	//
	// This parameter is required.
	TaskIds []*string `json:"TaskIds,omitempty" xml:"TaskIds,omitempty" type:"Repeated"`
}

func (s StopTimingSyntheticTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s StopTimingSyntheticTaskRequest) GoString() string {
	return s.String()
}

func (s *StopTimingSyntheticTaskRequest) SetRegionId(v string) *StopTimingSyntheticTaskRequest {
	s.RegionId = &v
	return s
}

func (s *StopTimingSyntheticTaskRequest) SetTaskIds(v []*string) *StopTimingSyntheticTaskRequest {
	s.TaskIds = v
	return s
}

type StopTimingSyntheticTaskShrinkRequest struct {
	// The region ID.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The task IDs.
	//
	// This parameter is required.
	TaskIdsShrink *string `json:"TaskIds,omitempty" xml:"TaskIds,omitempty"`
}

func (s StopTimingSyntheticTaskShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s StopTimingSyntheticTaskShrinkRequest) GoString() string {
	return s.String()
}

func (s *StopTimingSyntheticTaskShrinkRequest) SetRegionId(v string) *StopTimingSyntheticTaskShrinkRequest {
	s.RegionId = &v
	return s
}

func (s *StopTimingSyntheticTaskShrinkRequest) SetTaskIdsShrink(v string) *StopTimingSyntheticTaskShrinkRequest {
	s.TaskIdsShrink = &v
	return s
}

type StopTimingSyntheticTaskResponseBody struct {
	// The HTTP status code. The status code 200 indicates that the request was successful. Other status codes indicate that the request failed.
	//
	// example:
	//
	// 200
	Code *int64 `json:"Code,omitempty" xml:"Code,omitempty"`
	// Indicates whether the request was successful. Valid values: true and false.
	//
	// example:
	//
	// true
	Data *bool `json:"Data,omitempty" xml:"Data,omitempty"`
	// The returned message.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 1A9C645C-C83F-4C9D-8CCB-29BEC9E1****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s StopTimingSyntheticTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StopTimingSyntheticTaskResponseBody) GoString() string {
	return s.String()
}

func (s *StopTimingSyntheticTaskResponseBody) SetCode(v int64) *StopTimingSyntheticTaskResponseBody {
	s.Code = &v
	return s
}

func (s *StopTimingSyntheticTaskResponseBody) SetData(v bool) *StopTimingSyntheticTaskResponseBody {
	s.Data = &v
	return s
}

func (s *StopTimingSyntheticTaskResponseBody) SetMessage(v string) *StopTimingSyntheticTaskResponseBody {
	s.Message = &v
	return s
}

func (s *StopTimingSyntheticTaskResponseBody) SetRequestId(v string) *StopTimingSyntheticTaskResponseBody {
	s.RequestId = &v
	return s
}

type StopTimingSyntheticTaskResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *StopTimingSyntheticTaskResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s StopTimingSyntheticTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s StopTimingSyntheticTaskResponse) GoString() string {
	return s.String()
}

func (s *StopTimingSyntheticTaskResponse) SetHeaders(v map[string]*string) *StopTimingSyntheticTaskResponse {
	s.Headers = v
	return s
}

func (s *StopTimingSyntheticTaskResponse) SetStatusCode(v int32) *StopTimingSyntheticTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *StopTimingSyntheticTaskResponse) SetBody(v *StopTimingSyntheticTaskResponseBody) *StopTimingSyntheticTaskResponse {
	s.Body = v
	return s
}

type SwitchSyntheticTaskStatusRequest struct {
	// example:
	//
	// 0
	SwitchStatus *int64   `json:"SwitchStatus,omitempty" xml:"SwitchStatus,omitempty"`
	TaskIds      []*int64 `json:"TaskIds,omitempty" xml:"TaskIds,omitempty" type:"Repeated"`
}

func (s SwitchSyntheticTaskStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s SwitchSyntheticTaskStatusRequest) GoString() string {
	return s.String()
}

func (s *SwitchSyntheticTaskStatusRequest) SetSwitchStatus(v int64) *SwitchSyntheticTaskStatusRequest {
	s.SwitchStatus = &v
	return s
}

func (s *SwitchSyntheticTaskStatusRequest) SetTaskIds(v []*int64) *SwitchSyntheticTaskStatusRequest {
	s.TaskIds = v
	return s
}

type SwitchSyntheticTaskStatusResponseBody struct {
	// example:
	//
	// 1A9C645C-C83F-4C9D-8CCB-29BEC9E1****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Result *string `json:"Result,omitempty" xml:"Result,omitempty"`
}

func (s SwitchSyntheticTaskStatusResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SwitchSyntheticTaskStatusResponseBody) GoString() string {
	return s.String()
}

func (s *SwitchSyntheticTaskStatusResponseBody) SetRequestId(v string) *SwitchSyntheticTaskStatusResponseBody {
	s.RequestId = &v
	return s
}

func (s *SwitchSyntheticTaskStatusResponseBody) SetResult(v string) *SwitchSyntheticTaskStatusResponseBody {
	s.Result = &v
	return s
}

type SwitchSyntheticTaskStatusResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SwitchSyntheticTaskStatusResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SwitchSyntheticTaskStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s SwitchSyntheticTaskStatusResponse) GoString() string {
	return s.String()
}

func (s *SwitchSyntheticTaskStatusResponse) SetHeaders(v map[string]*string) *SwitchSyntheticTaskStatusResponse {
	s.Headers = v
	return s
}

func (s *SwitchSyntheticTaskStatusResponse) SetStatusCode(v int32) *SwitchSyntheticTaskStatusResponse {
	s.StatusCode = &v
	return s
}

func (s *SwitchSyntheticTaskStatusResponse) SetBody(v *SwitchSyntheticTaskStatusResponseBody) *SwitchSyntheticTaskStatusResponse {
	s.Body = v
	return s
}

type SyncRecordingRulesRequest struct {
	// The ID of the cluster whose aggregation rule you want to synchronize.
	//
	// This parameter is required.
	//
	// example:
	//
	// cc7a37ee31aea4ed1a059eff8034b****
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	// The ID of the region. The destination region can be the same as the source region.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The IDs of clusters to which you want to synchronize the aggregation rule.
	//
	// This parameter is required.
	//
	// example:
	//
	// {     "cn":[         "c06ca68cd16f14f52bb07772eda***",         "c33dd70a0ac184c1b879d807ab2***",         "c384cf7e4dcb543e6ac8c7d4dd3***"     ],     "us":[         "ce30f833bc4a04a56a06b070319***"     ],     "jp":[      ],     "ap":[      ],     "gov":[      ],     "finance":[      ] }
	TargetClusters *string `json:"TargetClusters,omitempty" xml:"TargetClusters,omitempty"`
}

func (s SyncRecordingRulesRequest) String() string {
	return tea.Prettify(s)
}

func (s SyncRecordingRulesRequest) GoString() string {
	return s.String()
}

func (s *SyncRecordingRulesRequest) SetClusterId(v string) *SyncRecordingRulesRequest {
	s.ClusterId = &v
	return s
}

func (s *SyncRecordingRulesRequest) SetRegionId(v string) *SyncRecordingRulesRequest {
	s.RegionId = &v
	return s
}

func (s *SyncRecordingRulesRequest) SetTargetClusters(v string) *SyncRecordingRulesRequest {
	s.TargetClusters = &v
	return s
}

type SyncRecordingRulesResponseBody struct {
	// 状态码。200表示成功。
	//
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The struct returned.
	//
	// example:
	//
	// { "data":[ "c06ca68cd16f14f52bb07772eda\\*\\*\\*", "c33dd70a0ac184c1b879d807ab2\\*\\*\\*", "c384cf7e4dcb543e6ac8c7d4dd3\\*\\*\\*", "ce30f833bc4a04a56a06b070319\\*\\*\\*" ], "message":"IDs of Clusters to which the aggregation rule failed to be synchronized", "success":true }
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// 返回结果的提示信息。
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request. You can use the ID to query logs and troubleshoot issues.
	//
	// example:
	//
	// 1A9C645C-C83F-4C9D-8CCB-29BEC9E1****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SyncRecordingRulesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SyncRecordingRulesResponseBody) GoString() string {
	return s.String()
}

func (s *SyncRecordingRulesResponseBody) SetCode(v int32) *SyncRecordingRulesResponseBody {
	s.Code = &v
	return s
}

func (s *SyncRecordingRulesResponseBody) SetData(v string) *SyncRecordingRulesResponseBody {
	s.Data = &v
	return s
}

func (s *SyncRecordingRulesResponseBody) SetMessage(v string) *SyncRecordingRulesResponseBody {
	s.Message = &v
	return s
}

func (s *SyncRecordingRulesResponseBody) SetRequestId(v string) *SyncRecordingRulesResponseBody {
	s.RequestId = &v
	return s
}

type SyncRecordingRulesResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SyncRecordingRulesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SyncRecordingRulesResponse) String() string {
	return tea.Prettify(s)
}

func (s SyncRecordingRulesResponse) GoString() string {
	return s.String()
}

func (s *SyncRecordingRulesResponse) SetHeaders(v map[string]*string) *SyncRecordingRulesResponse {
	s.Headers = v
	return s
}

func (s *SyncRecordingRulesResponse) SetStatusCode(v int32) *SyncRecordingRulesResponse {
	s.StatusCode = &v
	return s
}

func (s *SyncRecordingRulesResponse) SetBody(v *SyncRecordingRulesResponseBody) *SyncRecordingRulesResponse {
	s.Body = v
	return s
}

type TagResourcesRequest struct {
	// The resource IDs. You can specify a maximum of 50 resource IDs.
	//
	// This parameter is required.
	ResourceId []*string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty" type:"Repeated"`
	// The type of the ARMS resources for which you want to modify tags. Valid values:
	//
	// 	- WEB: Browser Monitoring
	//
	// 	- APPLICATION: Application Monitoring
	//
	// 	- PROMETHEUS: Managed Service for Prometheus
	//
	// 	- SYNTHETICTASK: Synthetic Monitoring
	//
	// 	- ALERTRULE: Application Monitoring alert rule
	//
	// 	- PROMETHEUSALERTRULE: Managed Service for Prometheus alert rule
	//
	// 	- XTRACEAPP: Managed Service for OpenTelemetry
	//
	// This parameter is required.
	//
	// example:
	//
	// PROMETHEUS
	ResourceType *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	// The tags to add to the resource. You can specify a maximum of 20 tags.
	//
	// This parameter is required.
	Tag []*TagResourcesRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s TagResourcesRequest) String() string {
	return tea.Prettify(s)
}

func (s TagResourcesRequest) GoString() string {
	return s.String()
}

func (s *TagResourcesRequest) SetResourceId(v []*string) *TagResourcesRequest {
	s.ResourceId = v
	return s
}

func (s *TagResourcesRequest) SetResourceType(v string) *TagResourcesRequest {
	s.ResourceType = &v
	return s
}

func (s *TagResourcesRequest) SetTag(v []*TagResourcesRequestTag) *TagResourcesRequest {
	s.Tag = v
	return s
}

type TagResourcesRequestTag struct {
	// The key of the tag.
	//
	// example:
	//
	// Key1
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The value of the tag.
	//
	// example:
	//
	// Test1
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s TagResourcesRequestTag) String() string {
	return tea.Prettify(s)
}

func (s TagResourcesRequestTag) GoString() string {
	return s.String()
}

func (s *TagResourcesRequestTag) SetKey(v string) *TagResourcesRequestTag {
	s.Key = &v
	return s
}

func (s *TagResourcesRequestTag) SetValue(v string) *TagResourcesRequestTag {
	s.Value = &v
	return s
}

type TagResourcesResponseBody struct {
	// The returned message.
	//
	// example:
	//
	// success
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// Id of the request
	//
	// example:
	//
	// 05919CF2-B8A1-588D-B3DB-89B3********
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s TagResourcesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s TagResourcesResponseBody) GoString() string {
	return s.String()
}

func (s *TagResourcesResponseBody) SetData(v string) *TagResourcesResponseBody {
	s.Data = &v
	return s
}

func (s *TagResourcesResponseBody) SetRequestId(v string) *TagResourcesResponseBody {
	s.RequestId = &v
	return s
}

type TagResourcesResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *TagResourcesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s TagResourcesResponse) String() string {
	return tea.Prettify(s)
}

func (s TagResourcesResponse) GoString() string {
	return s.String()
}

func (s *TagResourcesResponse) SetHeaders(v map[string]*string) *TagResourcesResponse {
	s.Headers = v
	return s
}

func (s *TagResourcesResponse) SetStatusCode(v int32) *TagResourcesResponse {
	s.StatusCode = &v
	return s
}

func (s *TagResourcesResponse) SetBody(v *TagResourcesResponseBody) *TagResourcesResponse {
	s.Body = v
	return s
}

type UninstallManagedPrometheusRequest struct {
	// The ID of the ASK cluster. This parameter is required if the ClusterType parameter is set to ask.
	//
	// example:
	//
	// cc7a37ee31aea4ed1a059eff8034b****
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	// The type of the monitoring object. Valid values: ask and ecs.
	//
	// This parameter is required.
	//
	// example:
	//
	// ask
	ClusterType *string `json:"ClusterType,omitempty" xml:"ClusterType,omitempty"`
	// The region ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the resource group to which the Prometheus instance belongs.
	//
	// example:
	//
	// rg-acfmxyexli2****
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	// The virtual private cloud (VPC) where the ASK cluster or ECS instance resides.
	//
	// if can be null:
	// true
	//
	// example:
	//
	// vpc-rpn**********
	VpcId *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
}

func (s UninstallManagedPrometheusRequest) String() string {
	return tea.Prettify(s)
}

func (s UninstallManagedPrometheusRequest) GoString() string {
	return s.String()
}

func (s *UninstallManagedPrometheusRequest) SetClusterId(v string) *UninstallManagedPrometheusRequest {
	s.ClusterId = &v
	return s
}

func (s *UninstallManagedPrometheusRequest) SetClusterType(v string) *UninstallManagedPrometheusRequest {
	s.ClusterType = &v
	return s
}

func (s *UninstallManagedPrometheusRequest) SetRegionId(v string) *UninstallManagedPrometheusRequest {
	s.RegionId = &v
	return s
}

func (s *UninstallManagedPrometheusRequest) SetResourceGroupId(v string) *UninstallManagedPrometheusRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *UninstallManagedPrometheusRequest) SetVpcId(v string) *UninstallManagedPrometheusRequest {
	s.VpcId = &v
	return s
}

type UninstallManagedPrometheusResponseBody struct {
	// The status code. The status code 200 indicates that the request was successful. If another status code is returned, the request failed.
	//
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The response content. The status of the Prometheus instance is returned.
	//
	// example:
	//
	// success
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// The error message that is returned if the request fails.
	//
	// example:
	//
	// vpcId is blank
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 2A0CEDF1-06FE-44AC-8E21-21A5BE65****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the Prometheus instance was removed.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UninstallManagedPrometheusResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UninstallManagedPrometheusResponseBody) GoString() string {
	return s.String()
}

func (s *UninstallManagedPrometheusResponseBody) SetCode(v int32) *UninstallManagedPrometheusResponseBody {
	s.Code = &v
	return s
}

func (s *UninstallManagedPrometheusResponseBody) SetData(v string) *UninstallManagedPrometheusResponseBody {
	s.Data = &v
	return s
}

func (s *UninstallManagedPrometheusResponseBody) SetMessage(v string) *UninstallManagedPrometheusResponseBody {
	s.Message = &v
	return s
}

func (s *UninstallManagedPrometheusResponseBody) SetRequestId(v string) *UninstallManagedPrometheusResponseBody {
	s.RequestId = &v
	return s
}

func (s *UninstallManagedPrometheusResponseBody) SetSuccess(v bool) *UninstallManagedPrometheusResponseBody {
	s.Success = &v
	return s
}

type UninstallManagedPrometheusResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UninstallManagedPrometheusResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UninstallManagedPrometheusResponse) String() string {
	return tea.Prettify(s)
}

func (s UninstallManagedPrometheusResponse) GoString() string {
	return s.String()
}

func (s *UninstallManagedPrometheusResponse) SetHeaders(v map[string]*string) *UninstallManagedPrometheusResponse {
	s.Headers = v
	return s
}

func (s *UninstallManagedPrometheusResponse) SetStatusCode(v int32) *UninstallManagedPrometheusResponse {
	s.StatusCode = &v
	return s
}

func (s *UninstallManagedPrometheusResponse) SetBody(v *UninstallManagedPrometheusResponseBody) *UninstallManagedPrometheusResponse {
	s.Body = v
	return s
}

type UninstallPromClusterRequest struct {
	// Language environment(If left blank, defaults to zh):
	//
	// - zh
	//
	// - en
	//
	// example:
	//
	// en
	AliyunLang *string `json:"AliyunLang,omitempty" xml:"AliyunLang,omitempty"`
	// The cluster ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// c0bad479465464e1d8c1e641b0afb****
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	// The region ID. Default value: cn-hangzhou.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s UninstallPromClusterRequest) String() string {
	return tea.Prettify(s)
}

func (s UninstallPromClusterRequest) GoString() string {
	return s.String()
}

func (s *UninstallPromClusterRequest) SetAliyunLang(v string) *UninstallPromClusterRequest {
	s.AliyunLang = &v
	return s
}

func (s *UninstallPromClusterRequest) SetClusterId(v string) *UninstallPromClusterRequest {
	s.ClusterId = &v
	return s
}

func (s *UninstallPromClusterRequest) SetRegionId(v string) *UninstallPromClusterRequest {
	s.RegionId = &v
	return s
}

type UninstallPromClusterResponseBody struct {
	// The status code. The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// Indicates whether the request was successful.
	//
	// example:
	//
	// true
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// The returned message.
	//
	// example:
	//
	// message
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID. You can use the ID to find logs and troubleshoot issues.
	//
	// example:
	//
	// 53980F48-DE82-53A1-9ADE-D2629226DD9A
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UninstallPromClusterResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UninstallPromClusterResponseBody) GoString() string {
	return s.String()
}

func (s *UninstallPromClusterResponseBody) SetCode(v int32) *UninstallPromClusterResponseBody {
	s.Code = &v
	return s
}

func (s *UninstallPromClusterResponseBody) SetData(v string) *UninstallPromClusterResponseBody {
	s.Data = &v
	return s
}

func (s *UninstallPromClusterResponseBody) SetMessage(v string) *UninstallPromClusterResponseBody {
	s.Message = &v
	return s
}

func (s *UninstallPromClusterResponseBody) SetRequestId(v string) *UninstallPromClusterResponseBody {
	s.RequestId = &v
	return s
}

type UninstallPromClusterResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UninstallPromClusterResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UninstallPromClusterResponse) String() string {
	return tea.Prettify(s)
}

func (s UninstallPromClusterResponse) GoString() string {
	return s.String()
}

func (s *UninstallPromClusterResponse) SetHeaders(v map[string]*string) *UninstallPromClusterResponse {
	s.Headers = v
	return s
}

func (s *UninstallPromClusterResponse) SetStatusCode(v int32) *UninstallPromClusterResponse {
	s.StatusCode = &v
	return s
}

func (s *UninstallPromClusterResponse) SetBody(v *UninstallPromClusterResponseBody) *UninstallPromClusterResponse {
	s.Body = v
	return s
}

type UntagResourcesRequest struct {
	// Specifies whether to delete all tags. This parameter takes effect only when the TagKey.N parameter is not specified. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// Default value: false.
	//
	// example:
	//
	// False
	All *bool `json:"All,omitempty" xml:"All,omitempty"`
	// The resource IDs. You can specify a maximum of 50 resource IDs.
	//
	// This parameter is required.
	ResourceId []*string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty" type:"Repeated"`
	// The type of the ARMS resources for which you want to modify tags. Valid values:
	//
	// 	- WEB: Browser Monitoring
	//
	// 	- APPLICATION: Application Monitoring
	//
	// 	- PROMETHEUS: Managed Service for Prometheus
	//
	// 	- SYNTHETICTASK: Synthetic Monitoring
	//
	// 	- ALERTRULE: Application Monitoring alert rule
	//
	// 	- PROMETHEUSALERTRULE: Managed Service for Prometheus alert rule
	//
	// 	- XTRACEAPP: Managed Service for OpenTelemetry
	//
	// This parameter is required.
	//
	// example:
	//
	// PROMETHEUS
	ResourceType *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	// The tag keys. You can specify a maximum of 20 tag keys.
	TagKey []*string `json:"TagKey,omitempty" xml:"TagKey,omitempty" type:"Repeated"`
	// The list of tags.
	Tags []*UntagResourcesRequestTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
}

func (s UntagResourcesRequest) String() string {
	return tea.Prettify(s)
}

func (s UntagResourcesRequest) GoString() string {
	return s.String()
}

func (s *UntagResourcesRequest) SetAll(v bool) *UntagResourcesRequest {
	s.All = &v
	return s
}

func (s *UntagResourcesRequest) SetResourceId(v []*string) *UntagResourcesRequest {
	s.ResourceId = v
	return s
}

func (s *UntagResourcesRequest) SetResourceType(v string) *UntagResourcesRequest {
	s.ResourceType = &v
	return s
}

func (s *UntagResourcesRequest) SetTagKey(v []*string) *UntagResourcesRequest {
	s.TagKey = v
	return s
}

func (s *UntagResourcesRequest) SetTags(v []*UntagResourcesRequestTags) *UntagResourcesRequest {
	s.Tags = v
	return s
}

type UntagResourcesRequestTags struct {
	// The key of the tag.
	//
	// example:
	//
	// TestKey
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The value of the tag.
	//
	// example:
	//
	// TestValue
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s UntagResourcesRequestTags) String() string {
	return tea.Prettify(s)
}

func (s UntagResourcesRequestTags) GoString() string {
	return s.String()
}

func (s *UntagResourcesRequestTags) SetKey(v string) *UntagResourcesRequestTags {
	s.Key = &v
	return s
}

func (s *UntagResourcesRequestTags) SetValue(v string) *UntagResourcesRequestTags {
	s.Value = &v
	return s
}

type UntagResourcesResponseBody struct {
	// The returned struct.
	//
	// example:
	//
	// success
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// Id of the request
	//
	// example:
	//
	// FC183B5E-C9AD-5E9E-937F-*******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UntagResourcesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UntagResourcesResponseBody) GoString() string {
	return s.String()
}

func (s *UntagResourcesResponseBody) SetData(v string) *UntagResourcesResponseBody {
	s.Data = &v
	return s
}

func (s *UntagResourcesResponseBody) SetRequestId(v string) *UntagResourcesResponseBody {
	s.RequestId = &v
	return s
}

type UntagResourcesResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UntagResourcesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UntagResourcesResponse) String() string {
	return tea.Prettify(s)
}

func (s UntagResourcesResponse) GoString() string {
	return s.String()
}

func (s *UntagResourcesResponse) SetHeaders(v map[string]*string) *UntagResourcesResponse {
	s.Headers = v
	return s
}

func (s *UntagResourcesResponse) SetStatusCode(v int32) *UntagResourcesResponse {
	s.StatusCode = &v
	return s
}

func (s *UntagResourcesResponse) SetBody(v *UntagResourcesResponseBody) *UntagResourcesResponse {
	s.Body = v
	return s
}

type UpdateAlertContactRequest struct {
	// The ID of the alert contact to be updated. You can call the SearchAlertContact operation to query the contact ID. For more information, see [SearchAlertContact](https://help.aliyun.com/document_detail/130703.html).
	//
	// This parameter is required.
	//
	// example:
	//
	// 123
	ContactId *int64 `json:"ContactId,omitempty" xml:"ContactId,omitempty"`
	// The new name of the alert contact.
	//
	// example:
	//
	// John Doe
	ContactName *string `json:"ContactName,omitempty" xml:"ContactName,omitempty"`
	// The new webhook URL of the DingTalk chatbot. For more information, see [Configure a DingTalk chatbot to send alert notifications](https://help.aliyun.com/document_detail/106247.html). You must specify at least one of the following parameters: PhoneNum, Email, and DingRobotWebhookUrl.
	//
	// >  If you do not specify this parameter, the original parameter value is deleted. If you specify this parameter, the original parameter value is updated.
	//
	// example:
	//
	// https://oapi.dingtalk.com/robot/send?access_token=91f2f6****
	DingRobotWebhookUrl *string `json:"DingRobotWebhookUrl,omitempty" xml:"DingRobotWebhookUrl,omitempty"`
	// The new email address of the alert contact. You must specify at least one of the following parameters: PhoneNum, Email, and DingRobotWebhookUrl.
	//
	// >  If you do not specify this parameter, the original parameter value is deleted. If you specify this parameter, the original parameter value is updated.
	//
	// example:
	//
	// someone@example.com
	Email *string `json:"Email,omitempty" xml:"Email,omitempty"`
	// The new mobile phone number of the alert contact. You must specify at least one of the following parameters: PhoneNum, Email, and DingRobotWebhookUrl.
	//
	// >  If you do not specify this parameter, the original parameter value is deleted. If you specify this parameter, the original parameter value is updated.
	//
	// example:
	//
	// 1381111****
	PhoneNum *string `json:"PhoneNum,omitempty" xml:"PhoneNum,omitempty"`
	// The ID of the region. Set the value to `cn-hangzhou`.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// Specifies whether the alert contact receives system notifications. Valid values:
	//
	// 	- `true`: The alert contact receives system notifications.
	//
	// 	- `false`: The alert contact does not receive system notifications.
	//
	// example:
	//
	// true
	SystemNoc *bool `json:"SystemNoc,omitempty" xml:"SystemNoc,omitempty"`
}

func (s UpdateAlertContactRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateAlertContactRequest) GoString() string {
	return s.String()
}

func (s *UpdateAlertContactRequest) SetContactId(v int64) *UpdateAlertContactRequest {
	s.ContactId = &v
	return s
}

func (s *UpdateAlertContactRequest) SetContactName(v string) *UpdateAlertContactRequest {
	s.ContactName = &v
	return s
}

func (s *UpdateAlertContactRequest) SetDingRobotWebhookUrl(v string) *UpdateAlertContactRequest {
	s.DingRobotWebhookUrl = &v
	return s
}

func (s *UpdateAlertContactRequest) SetEmail(v string) *UpdateAlertContactRequest {
	s.Email = &v
	return s
}

func (s *UpdateAlertContactRequest) SetPhoneNum(v string) *UpdateAlertContactRequest {
	s.PhoneNum = &v
	return s
}

func (s *UpdateAlertContactRequest) SetRegionId(v string) *UpdateAlertContactRequest {
	s.RegionId = &v
	return s
}

func (s *UpdateAlertContactRequest) SetSystemNoc(v bool) *UpdateAlertContactRequest {
	s.SystemNoc = &v
	return s
}

type UpdateAlertContactResponseBody struct {
	// Indicates whether the alert contact was updated. Valid values:
	//
	// 	- true: The alert contact was updated.
	//
	// 	- false: The alert contact failed to be updated.
	//
	// example:
	//
	// true
	IsSuccess *bool `json:"IsSuccess,omitempty" xml:"IsSuccess,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 1A474FF8-7861-4D00-81B5-5BC3DA4E****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateAlertContactResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateAlertContactResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateAlertContactResponseBody) SetIsSuccess(v bool) *UpdateAlertContactResponseBody {
	s.IsSuccess = &v
	return s
}

func (s *UpdateAlertContactResponseBody) SetRequestId(v string) *UpdateAlertContactResponseBody {
	s.RequestId = &v
	return s
}

type UpdateAlertContactResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateAlertContactResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateAlertContactResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateAlertContactResponse) GoString() string {
	return s.String()
}

func (s *UpdateAlertContactResponse) SetHeaders(v map[string]*string) *UpdateAlertContactResponse {
	s.Headers = v
	return s
}

func (s *UpdateAlertContactResponse) SetStatusCode(v int32) *UpdateAlertContactResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateAlertContactResponse) SetBody(v *UpdateAlertContactResponseBody) *UpdateAlertContactResponse {
	s.Body = v
	return s
}

type UpdateAlertContactGroupRequest struct {
	// The ID of the alert contact group.
	//
	// This parameter is required.
	//
	// example:
	//
	// 123
	ContactGroupId *int64 `json:"ContactGroupId,omitempty" xml:"ContactGroupId,omitempty"`
	// The name of the alert contact group.
	//
	// This parameter is required.
	//
	// example:
	//
	// TestGroup
	ContactGroupName *string `json:"ContactGroupName,omitempty" xml:"ContactGroupName,omitempty"`
	// The ID of the alert contact.
	//
	// example:
	//
	// 123 234 345
	ContactIds *string `json:"ContactIds,omitempty" xml:"ContactIds,omitempty"`
	// The ID of the region.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s UpdateAlertContactGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateAlertContactGroupRequest) GoString() string {
	return s.String()
}

func (s *UpdateAlertContactGroupRequest) SetContactGroupId(v int64) *UpdateAlertContactGroupRequest {
	s.ContactGroupId = &v
	return s
}

func (s *UpdateAlertContactGroupRequest) SetContactGroupName(v string) *UpdateAlertContactGroupRequest {
	s.ContactGroupName = &v
	return s
}

func (s *UpdateAlertContactGroupRequest) SetContactIds(v string) *UpdateAlertContactGroupRequest {
	s.ContactIds = &v
	return s
}

func (s *UpdateAlertContactGroupRequest) SetRegionId(v string) *UpdateAlertContactGroupRequest {
	s.RegionId = &v
	return s
}

type UpdateAlertContactGroupResponseBody struct {
	// Indicates whether the call was successful.
	//
	// 	- `true`: The call was successful.
	//
	// 	- `false`: The call failed.
	//
	// example:
	//
	// true
	IsSuccess *bool `json:"IsSuccess,omitempty" xml:"IsSuccess,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 9319A57D-2D9E-472A-B69B-CF3CD16D****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateAlertContactGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateAlertContactGroupResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateAlertContactGroupResponseBody) SetIsSuccess(v bool) *UpdateAlertContactGroupResponseBody {
	s.IsSuccess = &v
	return s
}

func (s *UpdateAlertContactGroupResponseBody) SetRequestId(v string) *UpdateAlertContactGroupResponseBody {
	s.RequestId = &v
	return s
}

type UpdateAlertContactGroupResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateAlertContactGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateAlertContactGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateAlertContactGroupResponse) GoString() string {
	return s.String()
}

func (s *UpdateAlertContactGroupResponse) SetHeaders(v map[string]*string) *UpdateAlertContactGroupResponse {
	s.Headers = v
	return s
}

func (s *UpdateAlertContactGroupResponse) SetStatusCode(v int32) *UpdateAlertContactGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateAlertContactGroupResponse) SetBody(v *UpdateAlertContactGroupResponseBody) *UpdateAlertContactGroupResponse {
	s.Body = v
	return s
}

type UpdateAlertRuleRequest struct {
	// The ID of the alert rule.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1234567
	AlertId *int64 `json:"AlertId,omitempty" xml:"AlertId,omitempty"`
	// The IDs of the alert contact groups. The value must be a JSON array.
	//
	// example:
	//
	// [123, 234]
	ContactGroupIds *string `json:"ContactGroupIds,omitempty" xml:"ContactGroupIds,omitempty"`
	// Specifies whether to enable the alert rule after it is created. Default value: `false`.
	//
	// 	- `true`: enables the alert rule.
	//
	// 	- `false`: disables the alert rule.
	//
	// example:
	//
	// true
	IsAutoStart *bool `json:"IsAutoStart,omitempty" xml:"IsAutoStart,omitempty"`
	// The ID of the region.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The configurations of the alert template based on which you want to create an alert rule. The value must be a JSON string. You must set at least one of the **TemplateAlertId*	- and **TemplageAlertConfig*	- parameters. If you set both parameters, the **TemplateAlertId*	- parameter prevails. For more information about the TemplageAlertConfig parameter, see the following **additional information about the TemplageAlertConfig parameter**.
	//
	// This parameter is required.
	//
	// example:
	//
	// [ { "contactGroupIds": "381", "alertType": 5, "alarmContext": { "subTitle": "", "content": "Alarm name: $alarm name\\nFilter condition: $filter\\nAlarm time : $Alarm time\\nAlarm content: $Alarm content\\nNote: Before the recovery email is received, the alarm is in continuous alarm, and you will be reminded again after 24 hours!" }, "alertLevel": "WARN", " metricParam": { "appId": "70901", "pid": "atc889zkcf@d8deedfa9bf****", "type": "TXN", "dimensions": [ { "type": "STATIC", "value ": "\\\\/hello_test_api_address\\\\/test1", "key": "rpc" } ] }, "alertWay": [ "SMS", "MAIL", "DING_ROBOT" ], "alertRule": { "rules" : [ { "measure": "appstat.txn.rt", "alias": "Entry call response time_ms", "aggregates": "AVG", "nValue": 1, "value": 1, "operator ": "CURRENT_GTE" } ], "operator": "|" }, "title": "Alarm template alarm name", "config": "{\\"continuous\\":false,\\"dataRevision\\":2, \\"ownerId\\":\\"123412341234\\"}", "notice": { "noticeStartTime": 1480521600000, "startTime": 1480521600000, "endTime": 1480607940000, "noticeEndTime": 1480607940000 }, "stat us": "NON " } ]
	TemplageAlertConfig *string `json:"TemplageAlertConfig,omitempty" xml:"TemplageAlertConfig,omitempty"`
}

func (s UpdateAlertRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateAlertRuleRequest) GoString() string {
	return s.String()
}

func (s *UpdateAlertRuleRequest) SetAlertId(v int64) *UpdateAlertRuleRequest {
	s.AlertId = &v
	return s
}

func (s *UpdateAlertRuleRequest) SetContactGroupIds(v string) *UpdateAlertRuleRequest {
	s.ContactGroupIds = &v
	return s
}

func (s *UpdateAlertRuleRequest) SetIsAutoStart(v bool) *UpdateAlertRuleRequest {
	s.IsAutoStart = &v
	return s
}

func (s *UpdateAlertRuleRequest) SetRegionId(v string) *UpdateAlertRuleRequest {
	s.RegionId = &v
	return s
}

func (s *UpdateAlertRuleRequest) SetTemplageAlertConfig(v string) *UpdateAlertRuleRequest {
	s.TemplageAlertConfig = &v
	return s
}

type UpdateAlertRuleResponseBody struct {
	// The ID of the alert rule.
	//
	// example:
	//
	// 1234567
	AlertId *int64 `json:"AlertId,omitempty" xml:"AlertId,omitempty"`
	// The struct returned.
	//
	// example:
	//
	// -
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 6A9AEA84-7186-4D8D-B498-4585C6A2****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateAlertRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateAlertRuleResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateAlertRuleResponseBody) SetAlertId(v int64) *UpdateAlertRuleResponseBody {
	s.AlertId = &v
	return s
}

func (s *UpdateAlertRuleResponseBody) SetData(v string) *UpdateAlertRuleResponseBody {
	s.Data = &v
	return s
}

func (s *UpdateAlertRuleResponseBody) SetRequestId(v string) *UpdateAlertRuleResponseBody {
	s.RequestId = &v
	return s
}

type UpdateAlertRuleResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateAlertRuleResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateAlertRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateAlertRuleResponse) GoString() string {
	return s.String()
}

func (s *UpdateAlertRuleResponse) SetHeaders(v map[string]*string) *UpdateAlertRuleResponse {
	s.Headers = v
	return s
}

func (s *UpdateAlertRuleResponse) SetStatusCode(v int32) *UpdateAlertRuleResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateAlertRuleResponse) SetBody(v *UpdateAlertRuleResponseBody) *UpdateAlertRuleResponse {
	s.Body = v
	return s
}

type UpdateDispatchRuleRequest struct {
	// ## Additional information about the **DispatchRule*	- parameter
	//
	// **JSON string example and description**
	//
	// ```
	//
	// {
	//
	//   "id": 123,           // The ID of the dispatch policy.
	//
	//   "system": false,        // Specifies whether the dispatch rule is editable. Valid values: true: not editable. false: editable.
	//
	//   "ruleid": 10282,           // The ID of the dispatch rule.
	//
	//   "name": "Prometheus Alert",   // The name of the dispatch policy.
	//
	//   "labelMatchExpressionGrid": {
	//
	//     "labelMatchExpressionGroups": [     // Sets the dispatch rule.
	//
	//       {
	//
	//         "labelMatchExpressions": [
	//
	//           {
	//
	//             "key": "_aliyun_arms_involvedObject_kind",   // The key of the tag of the dispatch rule. For more information, see the next section.
	//
	//             "value": "app",                              // The value of the tag.
	//
	//             "operator": "eq"                             // The operator used in the dispatch rule. Valid values: eq: equals to. re: matches a regular expression.
	//
	//           }
	//
	//         ]
	//
	//       }
	//
	//     ]
	//
	//   },
	//
	//   "dispatchType": "CREATE_ALERT/DISCARD_ALERT",    // The alert handling method. Valid values: CREATE_ALERT: generates an alert. DISCARD_ALERT: discards the alert event and generates no alert.
	//
	//   "isRecover": true,               // Specifies whether to send the restored alert. Valid values: true: sends the alert. false: does not send the alert.
	//
	//   "groupRules": [                  // Sets the event group.
	//
	//     {
	//
	//       "groupId": 1,               // The ID of the group.
	//
	//       "groupingFields": [         // The fields that are used to group events. Events with the same field content are assigned to a group. Alerts with the same specified grouping field are sent to the handler in separate notifications.
	//
	//         "alertname"
	//
	//       ],
	//
	//       "groupWait": 10,                 // The duration for which the system waits after the first alert is sent. After the duration, all alerts are sent in a single notification to the handler.
	//
	//       "groupInterval": 15,             // The grouping interval. During the silence period of repeated alerts, if new alerts are generated, they will be sent after the group waiting time.
	//
	//       "repeatInterval": 20             // The silence period of repeated alerts. All alerts are repeatedly sent at specified intervals until the alerts are cleared.
	//
	//     }
	//
	//   ],
	//
	//   "notifyRules": [            // Sets the notification rule.
	//
	//     {
	//
	//       "notifyObjects": [
	//
	//         {
	//
	//           "notifyType": "ARMS_CONTACT",     // The type of the alert contact. Valid values: ARMS_CONTACT: contact. ARMS_CONTACT_GROUP: contact group.
	//
	//           "name": "JohnDoe",                // The name of the contact or contact group.
	//
	//           "notifyObjectId": 1               // The ID of the contact or contact group.
	//
	//         },
	//
	//         {
	//
	//           "notifyType": "ARMS_CONTACT_GROUP",
	//
	//           "name": "JohnDoe_group",
	//
	//           "notifyObjectId": 2
	//
	//         }
	//
	//       ],
	//
	//       "notifyChannels":["dingTalk","wechat","webhook","email"]     // The notification method. Valid values: dingTalk, sms, webhook, email, and wechat.
	//
	//     },
	//
	//   ],
	//
	// }
	//
	// ```
	//
	// **Enumerated keys of the tag of the dispatch rule**
	//
	// 	- `_aliyun_arms_userid`: user ID
	//
	// 	- `_aliyun_arms_involvedObject_kind`: type of the associated object
	//
	// 	- `_aliyun_arms_involvedObject_id`: ID of the associated object
	//
	// 	- `_aliyun_arms_involvedObject_name`: name of the associated object
	//
	// 	- `_aliyun_arms_alert_name`: alert name
	//
	// 	- `_aliyun_arms_alert_rule_id`: alert rule ID
	//
	// 	- `_aliyun_arms_alert_type`: alert type
	//
	// 	- `_aliyun_arms_alert_level`: alert severity
	//
	// This parameter is required.
	//
	// example:
	//
	// {   "id": 123,     "system": false,   "ruleid": 10282,   "name": "Prometheus Alert",   "labelMatchExpressionGrid": {     "labelMatchExpressionGroups": [       {         "labelMatchExpressions": [           {             "key": "_aliyun_arms_involvedObject_kind",             "value": "app",             "operator": "eq"           }         ]       }     ]   },   "dispatchType": "CREATE_ALERT/DISCARD_ALERT",   "isRecover": true,   "groupRules": [     {       "groupId": 1,       "groupingFields": [         "alertname"       ],       "groupWait": 10,       "groupInterval": 15,       "repeatInterval": 20     }   ],   "notifyRules": [     {       "notifyObjects": [         {           "notifyType": "ARMS_CONTACT",           "name": "JohnDoe",           "notifyObjectId": 1         },         {           "notifyType": "ARMS_CONTACT_GROUP",           "name": "JohnDoe_group",           "notifyObjectId": 2         }       ],       "notifyChannels":["dingTalk","wechat","webhook","email"]     },   ], }
	DispatchRule *string `json:"DispatchRule,omitempty" xml:"DispatchRule,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s UpdateDispatchRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateDispatchRuleRequest) GoString() string {
	return s.String()
}

func (s *UpdateDispatchRuleRequest) SetDispatchRule(v string) *UpdateDispatchRuleRequest {
	s.DispatchRule = &v
	return s
}

func (s *UpdateDispatchRuleRequest) SetRegionId(v string) *UpdateDispatchRuleRequest {
	s.RegionId = &v
	return s
}

type UpdateDispatchRuleResponseBody struct {
	// example:
	//
	// A5EC8221-08F2-4C95-9AF1-49FD998C****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UpdateDispatchRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateDispatchRuleResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateDispatchRuleResponseBody) SetRequestId(v string) *UpdateDispatchRuleResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateDispatchRuleResponseBody) SetSuccess(v bool) *UpdateDispatchRuleResponseBody {
	s.Success = &v
	return s
}

type UpdateDispatchRuleResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateDispatchRuleResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateDispatchRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateDispatchRuleResponse) GoString() string {
	return s.String()
}

func (s *UpdateDispatchRuleResponse) SetHeaders(v map[string]*string) *UpdateDispatchRuleResponse {
	s.Headers = v
	return s
}

func (s *UpdateDispatchRuleResponse) SetStatusCode(v int32) *UpdateDispatchRuleResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateDispatchRuleResponse) SetBody(v *UpdateDispatchRuleResponseBody) *UpdateDispatchRuleResponse {
	s.Body = v
	return s
}

type UpdateEnvCustomJobRequest struct {
	// The language. Valid values: zh and en. Default value: zh.
	//
	// example:
	//
	// zh
	AliyunLang *string `json:"AliyunLang,omitempty" xml:"AliyunLang,omitempty"`
	// The YAML configuration string.
	//
	// example:
	//
	// Refer to supplementary instructions.
	ConfigYaml *string `json:"ConfigYaml,omitempty" xml:"ConfigYaml,omitempty"`
	// The name of the custom job.
	//
	// This parameter is required.
	//
	// example:
	//
	// customJob1
	CustomJobName *string `json:"CustomJobName,omitempty" xml:"CustomJobName,omitempty"`
	// The environment ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// env-xxxxx
	EnvironmentId *string `json:"EnvironmentId,omitempty" xml:"EnvironmentId,omitempty"`
	// The region ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The status of the custom job. Valid values: run and stop.
	//
	// example:
	//
	// run
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s UpdateEnvCustomJobRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateEnvCustomJobRequest) GoString() string {
	return s.String()
}

func (s *UpdateEnvCustomJobRequest) SetAliyunLang(v string) *UpdateEnvCustomJobRequest {
	s.AliyunLang = &v
	return s
}

func (s *UpdateEnvCustomJobRequest) SetConfigYaml(v string) *UpdateEnvCustomJobRequest {
	s.ConfigYaml = &v
	return s
}

func (s *UpdateEnvCustomJobRequest) SetCustomJobName(v string) *UpdateEnvCustomJobRequest {
	s.CustomJobName = &v
	return s
}

func (s *UpdateEnvCustomJobRequest) SetEnvironmentId(v string) *UpdateEnvCustomJobRequest {
	s.EnvironmentId = &v
	return s
}

func (s *UpdateEnvCustomJobRequest) SetRegionId(v string) *UpdateEnvCustomJobRequest {
	s.RegionId = &v
	return s
}

func (s *UpdateEnvCustomJobRequest) SetStatus(v string) *UpdateEnvCustomJobRequest {
	s.Status = &v
	return s
}

type UpdateEnvCustomJobResponseBody struct {
	// The status code or error code.
	//
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The result of the operation.
	//
	// example:
	//
	// success
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// The returned message.
	//
	// example:
	//
	// message
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// C21AB7CF-B7AF-410F-BD61-82D1567F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateEnvCustomJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateEnvCustomJobResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateEnvCustomJobResponseBody) SetCode(v int32) *UpdateEnvCustomJobResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateEnvCustomJobResponseBody) SetData(v string) *UpdateEnvCustomJobResponseBody {
	s.Data = &v
	return s
}

func (s *UpdateEnvCustomJobResponseBody) SetMessage(v string) *UpdateEnvCustomJobResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateEnvCustomJobResponseBody) SetRequestId(v string) *UpdateEnvCustomJobResponseBody {
	s.RequestId = &v
	return s
}

type UpdateEnvCustomJobResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateEnvCustomJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateEnvCustomJobResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateEnvCustomJobResponse) GoString() string {
	return s.String()
}

func (s *UpdateEnvCustomJobResponse) SetHeaders(v map[string]*string) *UpdateEnvCustomJobResponse {
	s.Headers = v
	return s
}

func (s *UpdateEnvCustomJobResponse) SetStatusCode(v int32) *UpdateEnvCustomJobResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateEnvCustomJobResponse) SetBody(v *UpdateEnvCustomJobResponseBody) *UpdateEnvCustomJobResponse {
	s.Body = v
	return s
}

type UpdateEnvPodMonitorRequest struct {
	// The language. Valid values: zh and en. Default value: zh.
	//
	// example:
	//
	// zh
	AliyunLang *string `json:"AliyunLang,omitempty" xml:"AliyunLang,omitempty"`
	// The YAML configuration string.
	//
	// This parameter is required.
	//
	// example:
	//
	// Refer to supplementary instructions.
	ConfigYaml *string `json:"ConfigYaml,omitempty" xml:"ConfigYaml,omitempty"`
	// Specifies whether to perform only a dry run, without performing the actual request.
	//
	// example:
	//
	// true
	DryRun *bool `json:"DryRun,omitempty" xml:"DryRun,omitempty"`
	// The environment ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// env-xxxxx
	EnvironmentId *string `json:"EnvironmentId,omitempty" xml:"EnvironmentId,omitempty"`
	// The namespace where the PodMonitor is located.
	//
	// This parameter is required.
	//
	// example:
	//
	// arms-prom
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// The name of the PodMonitor.
	//
	// This parameter is required.
	//
	// example:
	//
	// arms-admin-pm1
	PodMonitorName *string `json:"PodMonitorName,omitempty" xml:"PodMonitorName,omitempty"`
	// The region ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s UpdateEnvPodMonitorRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateEnvPodMonitorRequest) GoString() string {
	return s.String()
}

func (s *UpdateEnvPodMonitorRequest) SetAliyunLang(v string) *UpdateEnvPodMonitorRequest {
	s.AliyunLang = &v
	return s
}

func (s *UpdateEnvPodMonitorRequest) SetConfigYaml(v string) *UpdateEnvPodMonitorRequest {
	s.ConfigYaml = &v
	return s
}

func (s *UpdateEnvPodMonitorRequest) SetDryRun(v bool) *UpdateEnvPodMonitorRequest {
	s.DryRun = &v
	return s
}

func (s *UpdateEnvPodMonitorRequest) SetEnvironmentId(v string) *UpdateEnvPodMonitorRequest {
	s.EnvironmentId = &v
	return s
}

func (s *UpdateEnvPodMonitorRequest) SetNamespace(v string) *UpdateEnvPodMonitorRequest {
	s.Namespace = &v
	return s
}

func (s *UpdateEnvPodMonitorRequest) SetPodMonitorName(v string) *UpdateEnvPodMonitorRequest {
	s.PodMonitorName = &v
	return s
}

func (s *UpdateEnvPodMonitorRequest) SetRegionId(v string) *UpdateEnvPodMonitorRequest {
	s.RegionId = &v
	return s
}

type UpdateEnvPodMonitorResponseBody struct {
	// The HTTP status code. The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned struct.
	Data *UpdateEnvPodMonitorResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// C21AB7CF-B7AF-410F-BD61-82D1567F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateEnvPodMonitorResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateEnvPodMonitorResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateEnvPodMonitorResponseBody) SetCode(v int32) *UpdateEnvPodMonitorResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateEnvPodMonitorResponseBody) SetData(v *UpdateEnvPodMonitorResponseBodyData) *UpdateEnvPodMonitorResponseBody {
	s.Data = v
	return s
}

func (s *UpdateEnvPodMonitorResponseBody) SetMessage(v string) *UpdateEnvPodMonitorResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateEnvPodMonitorResponseBody) SetRequestId(v string) *UpdateEnvPodMonitorResponseBody {
	s.RequestId = &v
	return s
}

type UpdateEnvPodMonitorResponseBodyData struct {
	// Indicates whether targets are matched.
	//
	// example:
	//
	// Match successful.
	MatchedMsg *string `json:"MatchedMsg,omitempty" xml:"MatchedMsg,omitempty"`
	// The number of matched targets.
	//
	// example:
	//
	// 1
	MatchedTargetCount *string `json:"MatchedTargetCount,omitempty" xml:"MatchedTargetCount,omitempty"`
}

func (s UpdateEnvPodMonitorResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s UpdateEnvPodMonitorResponseBodyData) GoString() string {
	return s.String()
}

func (s *UpdateEnvPodMonitorResponseBodyData) SetMatchedMsg(v string) *UpdateEnvPodMonitorResponseBodyData {
	s.MatchedMsg = &v
	return s
}

func (s *UpdateEnvPodMonitorResponseBodyData) SetMatchedTargetCount(v string) *UpdateEnvPodMonitorResponseBodyData {
	s.MatchedTargetCount = &v
	return s
}

type UpdateEnvPodMonitorResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateEnvPodMonitorResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateEnvPodMonitorResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateEnvPodMonitorResponse) GoString() string {
	return s.String()
}

func (s *UpdateEnvPodMonitorResponse) SetHeaders(v map[string]*string) *UpdateEnvPodMonitorResponse {
	s.Headers = v
	return s
}

func (s *UpdateEnvPodMonitorResponse) SetStatusCode(v int32) *UpdateEnvPodMonitorResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateEnvPodMonitorResponse) SetBody(v *UpdateEnvPodMonitorResponseBody) *UpdateEnvPodMonitorResponse {
	s.Body = v
	return s
}

type UpdateEnvServiceMonitorRequest struct {
	// The language. Valid values: zh and en. Default value: zh.
	//
	// example:
	//
	// zh
	AliyunLang *string `json:"AliyunLang,omitempty" xml:"AliyunLang,omitempty"`
	// The YAML configuration string.
	//
	// This parameter is required.
	//
	// example:
	//
	// Refer to supplementary instructions.
	ConfigYaml *string `json:"ConfigYaml,omitempty" xml:"ConfigYaml,omitempty"`
	// Specifies whether to perform only a dry run, without performing the actual request.
	//
	// example:
	//
	// true
	DryRun *bool `json:"DryRun,omitempty" xml:"DryRun,omitempty"`
	// The environment ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// env-xxxxx
	EnvironmentId *string `json:"EnvironmentId,omitempty" xml:"EnvironmentId,omitempty"`
	// The namespace where the ServiceMonitor is located.
	//
	// This parameter is required.
	//
	// example:
	//
	// arms-prom
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// The region ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The name of the ServiceMonitor.
	//
	// This parameter is required.
	//
	// example:
	//
	// serviceMonitor1
	ServiceMonitorName *string `json:"ServiceMonitorName,omitempty" xml:"ServiceMonitorName,omitempty"`
}

func (s UpdateEnvServiceMonitorRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateEnvServiceMonitorRequest) GoString() string {
	return s.String()
}

func (s *UpdateEnvServiceMonitorRequest) SetAliyunLang(v string) *UpdateEnvServiceMonitorRequest {
	s.AliyunLang = &v
	return s
}

func (s *UpdateEnvServiceMonitorRequest) SetConfigYaml(v string) *UpdateEnvServiceMonitorRequest {
	s.ConfigYaml = &v
	return s
}

func (s *UpdateEnvServiceMonitorRequest) SetDryRun(v bool) *UpdateEnvServiceMonitorRequest {
	s.DryRun = &v
	return s
}

func (s *UpdateEnvServiceMonitorRequest) SetEnvironmentId(v string) *UpdateEnvServiceMonitorRequest {
	s.EnvironmentId = &v
	return s
}

func (s *UpdateEnvServiceMonitorRequest) SetNamespace(v string) *UpdateEnvServiceMonitorRequest {
	s.Namespace = &v
	return s
}

func (s *UpdateEnvServiceMonitorRequest) SetRegionId(v string) *UpdateEnvServiceMonitorRequest {
	s.RegionId = &v
	return s
}

func (s *UpdateEnvServiceMonitorRequest) SetServiceMonitorName(v string) *UpdateEnvServiceMonitorRequest {
	s.ServiceMonitorName = &v
	return s
}

type UpdateEnvServiceMonitorResponseBody struct {
	// The HTTP status code. The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned struct.
	Data *UpdateEnvServiceMonitorResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 1A474FF8-7861-4D00-81B5-5BC3DA4E****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateEnvServiceMonitorResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateEnvServiceMonitorResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateEnvServiceMonitorResponseBody) SetCode(v int32) *UpdateEnvServiceMonitorResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateEnvServiceMonitorResponseBody) SetData(v *UpdateEnvServiceMonitorResponseBodyData) *UpdateEnvServiceMonitorResponseBody {
	s.Data = v
	return s
}

func (s *UpdateEnvServiceMonitorResponseBody) SetMessage(v string) *UpdateEnvServiceMonitorResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateEnvServiceMonitorResponseBody) SetRequestId(v string) *UpdateEnvServiceMonitorResponseBody {
	s.RequestId = &v
	return s
}

type UpdateEnvServiceMonitorResponseBodyData struct {
	// Indicates whether targets are matched.
	//
	// example:
	//
	// Match successful.
	MatchedMsg *string `json:"MatchedMsg,omitempty" xml:"MatchedMsg,omitempty"`
	// The number of matched targets.
	//
	// example:
	//
	// 1
	MatchedTargetCount *string `json:"MatchedTargetCount,omitempty" xml:"MatchedTargetCount,omitempty"`
}

func (s UpdateEnvServiceMonitorResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s UpdateEnvServiceMonitorResponseBodyData) GoString() string {
	return s.String()
}

func (s *UpdateEnvServiceMonitorResponseBodyData) SetMatchedMsg(v string) *UpdateEnvServiceMonitorResponseBodyData {
	s.MatchedMsg = &v
	return s
}

func (s *UpdateEnvServiceMonitorResponseBodyData) SetMatchedTargetCount(v string) *UpdateEnvServiceMonitorResponseBodyData {
	s.MatchedTargetCount = &v
	return s
}

type UpdateEnvServiceMonitorResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateEnvServiceMonitorResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateEnvServiceMonitorResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateEnvServiceMonitorResponse) GoString() string {
	return s.String()
}

func (s *UpdateEnvServiceMonitorResponse) SetHeaders(v map[string]*string) *UpdateEnvServiceMonitorResponse {
	s.Headers = v
	return s
}

func (s *UpdateEnvServiceMonitorResponse) SetStatusCode(v int32) *UpdateEnvServiceMonitorResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateEnvServiceMonitorResponse) SetBody(v *UpdateEnvServiceMonitorResponseBody) *UpdateEnvServiceMonitorResponse {
	s.Body = v
	return s
}

type UpdateEnvironmentRequest struct {
	// The language. Valid values: zh and en. Default value: zh.
	//
	// example:
	//
	// zh
	AliyunLang *string `json:"AliyunLang,omitempty" xml:"AliyunLang,omitempty"`
	// The environment ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// env-xxxxx
	EnvironmentId *string `json:"EnvironmentId,omitempty" xml:"EnvironmentId,omitempty"`
	// The environment name.
	//
	// example:
	//
	// env1
	EnvironmentName *string `json:"EnvironmentName,omitempty" xml:"EnvironmentName,omitempty"`
	// Fee package.
	//
	// 	- When the EnvironmentType is CS: it can be specified as CS_Basic (default) or CS-Pro.
	//
	// 	- When the EnvironmentType is a different value, please enter a null value.
	//
	// example:
	//
	// CS_Basic
	FeePackage *string `json:"FeePackage,omitempty" xml:"FeePackage,omitempty"`
	// The region ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s UpdateEnvironmentRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateEnvironmentRequest) GoString() string {
	return s.String()
}

func (s *UpdateEnvironmentRequest) SetAliyunLang(v string) *UpdateEnvironmentRequest {
	s.AliyunLang = &v
	return s
}

func (s *UpdateEnvironmentRequest) SetEnvironmentId(v string) *UpdateEnvironmentRequest {
	s.EnvironmentId = &v
	return s
}

func (s *UpdateEnvironmentRequest) SetEnvironmentName(v string) *UpdateEnvironmentRequest {
	s.EnvironmentName = &v
	return s
}

func (s *UpdateEnvironmentRequest) SetFeePackage(v string) *UpdateEnvironmentRequest {
	s.FeePackage = &v
	return s
}

func (s *UpdateEnvironmentRequest) SetRegionId(v string) *UpdateEnvironmentRequest {
	s.RegionId = &v
	return s
}

type UpdateEnvironmentResponseBody struct {
	// The HTTP status code. The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The result of the operation.
	//
	// example:
	//
	// success
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// The returned message.
	//
	// example:
	//
	// message
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 70675725-8F11-4817-8106-CFE0AD71****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateEnvironmentResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateEnvironmentResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateEnvironmentResponseBody) SetCode(v int32) *UpdateEnvironmentResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateEnvironmentResponseBody) SetData(v string) *UpdateEnvironmentResponseBody {
	s.Data = &v
	return s
}

func (s *UpdateEnvironmentResponseBody) SetMessage(v string) *UpdateEnvironmentResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateEnvironmentResponseBody) SetRequestId(v string) *UpdateEnvironmentResponseBody {
	s.RequestId = &v
	return s
}

type UpdateEnvironmentResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateEnvironmentResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateEnvironmentResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateEnvironmentResponse) GoString() string {
	return s.String()
}

func (s *UpdateEnvironmentResponse) SetHeaders(v map[string]*string) *UpdateEnvironmentResponse {
	s.Headers = v
	return s
}

func (s *UpdateEnvironmentResponse) SetStatusCode(v int32) *UpdateEnvironmentResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateEnvironmentResponse) SetBody(v *UpdateEnvironmentResponseBody) *UpdateEnvironmentResponse {
	s.Body = v
	return s
}

type UpdateGrafanaWorkspaceRequest struct {
	// example:
	//
	// zh
	AliyunLang  *string `json:"AliyunLang,omitempty" xml:"AliyunLang,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// grafana-cn-4xl3g******
	GrafanaWorkspaceId *string `json:"GrafanaWorkspaceId,omitempty" xml:"GrafanaWorkspaceId,omitempty"`
	// example:
	//
	// testGrafana
	GrafanaWorkspaceName *string `json:"GrafanaWorkspaceName,omitempty" xml:"GrafanaWorkspaceName,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s UpdateGrafanaWorkspaceRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateGrafanaWorkspaceRequest) GoString() string {
	return s.String()
}

func (s *UpdateGrafanaWorkspaceRequest) SetAliyunLang(v string) *UpdateGrafanaWorkspaceRequest {
	s.AliyunLang = &v
	return s
}

func (s *UpdateGrafanaWorkspaceRequest) SetDescription(v string) *UpdateGrafanaWorkspaceRequest {
	s.Description = &v
	return s
}

func (s *UpdateGrafanaWorkspaceRequest) SetGrafanaWorkspaceId(v string) *UpdateGrafanaWorkspaceRequest {
	s.GrafanaWorkspaceId = &v
	return s
}

func (s *UpdateGrafanaWorkspaceRequest) SetGrafanaWorkspaceName(v string) *UpdateGrafanaWorkspaceRequest {
	s.GrafanaWorkspaceName = &v
	return s
}

func (s *UpdateGrafanaWorkspaceRequest) SetRegionId(v string) *UpdateGrafanaWorkspaceRequest {
	s.RegionId = &v
	return s
}

type UpdateGrafanaWorkspaceResponseBody struct {
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// true
	Data *bool `json:"Data,omitempty" xml:"Data,omitempty"`
	// example:
	//
	// message
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	//
	// example:
	//
	// 16AF921B-8187-489F-9913-43C808B4****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// example:
	//
	// eac0a8048716731735000007137d000b
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s UpdateGrafanaWorkspaceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateGrafanaWorkspaceResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateGrafanaWorkspaceResponseBody) SetCode(v int32) *UpdateGrafanaWorkspaceResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateGrafanaWorkspaceResponseBody) SetData(v bool) *UpdateGrafanaWorkspaceResponseBody {
	s.Data = &v
	return s
}

func (s *UpdateGrafanaWorkspaceResponseBody) SetMessage(v string) *UpdateGrafanaWorkspaceResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateGrafanaWorkspaceResponseBody) SetRequestId(v string) *UpdateGrafanaWorkspaceResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateGrafanaWorkspaceResponseBody) SetSuccess(v bool) *UpdateGrafanaWorkspaceResponseBody {
	s.Success = &v
	return s
}

func (s *UpdateGrafanaWorkspaceResponseBody) SetTraceId(v string) *UpdateGrafanaWorkspaceResponseBody {
	s.TraceId = &v
	return s
}

type UpdateGrafanaWorkspaceResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateGrafanaWorkspaceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateGrafanaWorkspaceResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateGrafanaWorkspaceResponse) GoString() string {
	return s.String()
}

func (s *UpdateGrafanaWorkspaceResponse) SetHeaders(v map[string]*string) *UpdateGrafanaWorkspaceResponse {
	s.Headers = v
	return s
}

func (s *UpdateGrafanaWorkspaceResponse) SetStatusCode(v int32) *UpdateGrafanaWorkspaceResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateGrafanaWorkspaceResponse) SetBody(v *UpdateGrafanaWorkspaceResponseBody) *UpdateGrafanaWorkspaceResponse {
	s.Body = v
	return s
}

type UpdateGrafanaWorkspaceVersionRequest struct {
	// example:
	//
	// zh
	AliyunLang *string `json:"AliyunLang,omitempty" xml:"AliyunLang,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 10.0.x
	GrafanaVersion *string `json:"GrafanaVersion,omitempty" xml:"GrafanaVersion,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// grafana-cn-4xl3g******
	GrafanaWorkspaceId *string `json:"GrafanaWorkspaceId,omitempty" xml:"GrafanaWorkspaceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s UpdateGrafanaWorkspaceVersionRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateGrafanaWorkspaceVersionRequest) GoString() string {
	return s.String()
}

func (s *UpdateGrafanaWorkspaceVersionRequest) SetAliyunLang(v string) *UpdateGrafanaWorkspaceVersionRequest {
	s.AliyunLang = &v
	return s
}

func (s *UpdateGrafanaWorkspaceVersionRequest) SetGrafanaVersion(v string) *UpdateGrafanaWorkspaceVersionRequest {
	s.GrafanaVersion = &v
	return s
}

func (s *UpdateGrafanaWorkspaceVersionRequest) SetGrafanaWorkspaceId(v string) *UpdateGrafanaWorkspaceVersionRequest {
	s.GrafanaWorkspaceId = &v
	return s
}

func (s *UpdateGrafanaWorkspaceVersionRequest) SetRegionId(v string) *UpdateGrafanaWorkspaceVersionRequest {
	s.RegionId = &v
	return s
}

type UpdateGrafanaWorkspaceVersionResponseBody struct {
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// true
	Data *bool `json:"Data,omitempty" xml:"Data,omitempty"`
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	//
	// example:
	//
	// 2A0CEDF1-06FE-44AC-8E21-21A5BE65****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// example:
	//
	// eac0a8048716731735000007137d000b
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s UpdateGrafanaWorkspaceVersionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateGrafanaWorkspaceVersionResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateGrafanaWorkspaceVersionResponseBody) SetCode(v int32) *UpdateGrafanaWorkspaceVersionResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateGrafanaWorkspaceVersionResponseBody) SetData(v bool) *UpdateGrafanaWorkspaceVersionResponseBody {
	s.Data = &v
	return s
}

func (s *UpdateGrafanaWorkspaceVersionResponseBody) SetMessage(v string) *UpdateGrafanaWorkspaceVersionResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateGrafanaWorkspaceVersionResponseBody) SetRequestId(v string) *UpdateGrafanaWorkspaceVersionResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateGrafanaWorkspaceVersionResponseBody) SetSuccess(v bool) *UpdateGrafanaWorkspaceVersionResponseBody {
	s.Success = &v
	return s
}

func (s *UpdateGrafanaWorkspaceVersionResponseBody) SetTraceId(v string) *UpdateGrafanaWorkspaceVersionResponseBody {
	s.TraceId = &v
	return s
}

type UpdateGrafanaWorkspaceVersionResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateGrafanaWorkspaceVersionResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateGrafanaWorkspaceVersionResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateGrafanaWorkspaceVersionResponse) GoString() string {
	return s.String()
}

func (s *UpdateGrafanaWorkspaceVersionResponse) SetHeaders(v map[string]*string) *UpdateGrafanaWorkspaceVersionResponse {
	s.Headers = v
	return s
}

func (s *UpdateGrafanaWorkspaceVersionResponse) SetStatusCode(v int32) *UpdateGrafanaWorkspaceVersionResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateGrafanaWorkspaceVersionResponse) SetBody(v *UpdateGrafanaWorkspaceVersionResponseBody) *UpdateGrafanaWorkspaceVersionResponse {
	s.Body = v
	return s
}

type UpdateIntegrationRequest struct {
	// Specifies whether to automatically clear alert events. Valid values:
	//
	// 	- true (default)
	//
	// 	- false
	//
	// example:
	//
	// true
	AutoRecover *bool `json:"AutoRecover,omitempty" xml:"AutoRecover,omitempty"`
	// The description of the alert integration.
	//
	// example:
	//
	// Test
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The fields whose values are deduplicated.
	//
	// example:
	//
	// LABEL.dimensions::LABEL.ruleId
	DuplicateKey *string `json:"DuplicateKey,omitempty" xml:"DuplicateKey,omitempty"`
	// The extended mapped fields are mapped to the fields of ARMS alerts. For more information, see the description of the ExtendedFieldRedefineRules parameter.
	//
	// example:
	//
	// [
	//
	//     {
	//
	//         "redefineType":"EXTRACT",
	//
	//         "matchExpression":null,
	//
	//         "fieldName":"dimensions",
	//
	//         "expression":null,
	//
	//         "mappingRuleList":[
	//
	//         ],
	//
	//         "name":"dimensions",
	//
	//         "integrationId":1234,
	//
	//         "jsonPath":"$.dimensions",
	//
	//         "id":10013,
	//
	//         "fieldType":"LABEL"
	//
	//     },
	//
	//     {
	//
	//         "redefineType":"EXTRACT",
	//
	//         "matchExpression":null,
	//
	//         "fieldName":"expression",
	//
	//         "expression":null,
	//
	//         "mappingRuleList":[
	//
	//         ],
	//
	//         "name":"expression",
	//
	//         "integrationId":1234,
	//
	//         "jsonPath":"$.expression",
	//
	//         "id":10014,
	//
	//         "fieldType":"LABEL"
	//
	//     }
	//
	// ]
	ExtendedFieldRedefineRules *string `json:"ExtendedFieldRedefineRules,omitempty" xml:"ExtendedFieldRedefineRules,omitempty"`
	// The predefined mapped fields are mapped to the fields of ARMS alerts. The predefined mapped fields were generated when the alert integration was created. For more information, see the description of the FieldRedefineRules parameter.
	//
	// example:
	//
	// [ { "redefineType":"EXTRACT", "matchExpression":null, "fieldName":"alertname", "expression":null, "mappingRuleList":[ ], "name":"Alert name", "integrationId":1234, "jsonPath":"$.alertName", "id":10001, "fieldType":"LABEL" }, { "redefineType":"MAP", "matchExpression":null, "fieldName":"severity", "expression":null, "mappingRuleList":[ { "mappingValue":"critical", "mappingName":"P1", "mappingType":"MAP", "originValue":"CRITICAL" }, { "mappingValue":"error", "mappingName":"P2", "mappingType":"MAP", "originValue":"WARN" }, { "mappingValue":"warning", "mappingName":"P3", "mappingType":"MAP", "originValue":"INFO" } ], "name":"Alert level", "integrationId":1234, "jsonPath":"$.triggerLevel", "id":10002, "fieldType":"LABEL" }, { "redefineType":"EXTRACT", "matchExpression":null, "fieldName":"message", "expression":"{{$labels.namespace}} / {{$labels.dimensions}} Alert content {{ $labels.alertname }}, Current value {{$value}}.", "mappingRuleList":[ ], "name":"Alert description", "integrationId":1234, "jsonPath":null, "id":10003, "fieldType":"ANNOTATION" }, { "redefineType":"EXTRACT", "matchExpression":null, "fieldName":"value", "expression":null, "mappingRuleList":[ ], "name":"Alert sample value", "integrationId":1234, "jsonPath":"$.curValue", "id":10004, "fieldType":"ANNOTATION" }, { "redefineType":"EXTRACT", "matchExpression":null, "fieldName":"source", "expression":null, "mappingRuleList":[ ], "name":"Source", "integrationId":1234, "jsonPath":null, "id":10007, "fieldType":"LABEL" }, { "redefineType":"ADD", "matchExpression":null, "fieldName":"generatorUrl", "expression":"https://cloudmonitor.console.aliyun.com/index.htm#/alarmInfo/name={{$labels.ruleId}}\\&searchValue=\\&searchType=name\\&searchProduct=/history/all/searchKey:{{$labels.ruleId}},startTime:{{sub $startsAt 300000}},endTime:{{$endsAt}}", "mappingRuleList":[ ], "name":"Event URL", "integrationId":1234, "jsonPath":"https://cloudmonitor.console.aliyun.com/index.htm#/alarmInfo/name={{$labels.ruleId}}\\&searchValue=\\&searchType=name\\&searchProduct=/history/all/searchKey:{{$labels.ruleId}},startTime:{{sub $startsAt 300000}},endTime:{{$endsAt}}", "id":10012, "fieldType":"GENERATE_URL" } ]
	FieldRedefineRules *string `json:"FieldRedefineRules,omitempty" xml:"FieldRedefineRules,omitempty"`
	// The field for clearing alert events. The system queries alert events based on the field of alert clearing events and clears the alert events.
	//
	// > Only the Log Service alert integration supports the parameter.
	//
	// example:
	//
	// $.status
	InitiativeRecoverField *string `json:"InitiativeRecoverField,omitempty" xml:"InitiativeRecoverField,omitempty"`
	// The value of the field for clearing alert events. The system queries alert events based on the field of alert clearing events and clears the alert events.
	//
	// > Only the Log Service alert integration supports the parameter.
	//
	// example:
	//
	// ok
	InitiativeRecoverValue *string `json:"InitiativeRecoverValue,omitempty" xml:"InitiativeRecoverValue,omitempty"`
	// The ID of the alert integration.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1234
	IntegrationId *int64 `json:"IntegrationId,omitempty" xml:"IntegrationId,omitempty"`
	// The name of the alert integration.
	//
	// This parameter is required.
	//
	// example:
	//
	// CloudMonitor integration
	IntegrationName *string `json:"IntegrationName,omitempty" xml:"IntegrationName,omitempty"`
	// The service of the alert integration. Valid values:
	//
	// 	- CLOUD_MONITOR: CloudMonitor
	//
	// 	- LOG_SERVICE: Log Service
	//
	// This parameter is required.
	//
	// example:
	//
	// CLOUD_MONITOR
	IntegrationProductType *string `json:"IntegrationProductType,omitempty" xml:"IntegrationProductType,omitempty"`
	// The activity of the alert integration
	//
	// example:
	//
	// ready
	Liveness *string `json:"Liveness,omitempty" xml:"Liveness,omitempty"`
	// The period of time within which alert events are automatically cleared. Unit: seconds. Default value: 300.
	//
	// example:
	//
	// 300
	RecoverTime *int64 `json:"RecoverTime,omitempty" xml:"RecoverTime,omitempty"`
	// The total number of alert events and the number of abnormal alert events in the last hour.
	//
	// example:
	//
	// [0,0]
	Stat *string `json:"Stat,omitempty" xml:"Stat,omitempty"`
	// Indicates whether the alert integration was enabled. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	State *bool `json:"State,omitempty" xml:"State,omitempty"`
}

func (s UpdateIntegrationRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateIntegrationRequest) GoString() string {
	return s.String()
}

func (s *UpdateIntegrationRequest) SetAutoRecover(v bool) *UpdateIntegrationRequest {
	s.AutoRecover = &v
	return s
}

func (s *UpdateIntegrationRequest) SetDescription(v string) *UpdateIntegrationRequest {
	s.Description = &v
	return s
}

func (s *UpdateIntegrationRequest) SetDuplicateKey(v string) *UpdateIntegrationRequest {
	s.DuplicateKey = &v
	return s
}

func (s *UpdateIntegrationRequest) SetExtendedFieldRedefineRules(v string) *UpdateIntegrationRequest {
	s.ExtendedFieldRedefineRules = &v
	return s
}

func (s *UpdateIntegrationRequest) SetFieldRedefineRules(v string) *UpdateIntegrationRequest {
	s.FieldRedefineRules = &v
	return s
}

func (s *UpdateIntegrationRequest) SetInitiativeRecoverField(v string) *UpdateIntegrationRequest {
	s.InitiativeRecoverField = &v
	return s
}

func (s *UpdateIntegrationRequest) SetInitiativeRecoverValue(v string) *UpdateIntegrationRequest {
	s.InitiativeRecoverValue = &v
	return s
}

func (s *UpdateIntegrationRequest) SetIntegrationId(v int64) *UpdateIntegrationRequest {
	s.IntegrationId = &v
	return s
}

func (s *UpdateIntegrationRequest) SetIntegrationName(v string) *UpdateIntegrationRequest {
	s.IntegrationName = &v
	return s
}

func (s *UpdateIntegrationRequest) SetIntegrationProductType(v string) *UpdateIntegrationRequest {
	s.IntegrationProductType = &v
	return s
}

func (s *UpdateIntegrationRequest) SetLiveness(v string) *UpdateIntegrationRequest {
	s.Liveness = &v
	return s
}

func (s *UpdateIntegrationRequest) SetRecoverTime(v int64) *UpdateIntegrationRequest {
	s.RecoverTime = &v
	return s
}

func (s *UpdateIntegrationRequest) SetStat(v string) *UpdateIntegrationRequest {
	s.Stat = &v
	return s
}

func (s *UpdateIntegrationRequest) SetState(v bool) *UpdateIntegrationRequest {
	s.State = &v
	return s
}

type UpdateIntegrationResponseBody struct {
	// The Information about the alert integration.
	Integration *UpdateIntegrationResponseBodyIntegration `json:"Integration,omitempty" xml:"Integration,omitempty" type:"Struct"`
	// The ID of the request.
	//
	// example:
	//
	// 34ED024E-9E31-434A-9E4E-D9D15C3****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateIntegrationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateIntegrationResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateIntegrationResponseBody) SetIntegration(v *UpdateIntegrationResponseBodyIntegration) *UpdateIntegrationResponseBody {
	s.Integration = v
	return s
}

func (s *UpdateIntegrationResponseBody) SetRequestId(v string) *UpdateIntegrationResponseBody {
	s.RequestId = &v
	return s
}

type UpdateIntegrationResponseBodyIntegration struct {
	// The endpoint of the alert integration.
	//
	// example:
	//
	// https://alerts.aliyuncs.com/api/v1/integrations/custom/ymQBN******
	ApiEndpoint *string `json:"ApiEndpoint,omitempty" xml:"ApiEndpoint,omitempty"`
	// Indicates whether alert events are automatically cleared. Valid values:
	//
	// 	- true (default)
	//
	// 	- false
	//
	// example:
	//
	// true
	AutoRecover *bool `json:"AutoRecover,omitempty" xml:"AutoRecover,omitempty"`
	// The description of the alert integration.
	//
	// example:
	//
	// Test
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The fields whose values are deduplicated.
	//
	// example:
	//
	// LABEL.dimensions::LABEL.ruleId
	DuplicateKey *string `json:"DuplicateKey,omitempty" xml:"DuplicateKey,omitempty"`
	// The extended mapped fields of the alert source.
	ExtendedFieldRedefineRules []map[string]interface{} `json:"ExtendedFieldRedefineRules,omitempty" xml:"ExtendedFieldRedefineRules,omitempty" type:"Repeated"`
	// The predefined mapped fields of the alert source.
	FieldRedefineRules []map[string]interface{} `json:"FieldRedefineRules,omitempty" xml:"FieldRedefineRules,omitempty" type:"Repeated"`
	// The field for clearing alert events. The system queries alert events based on the field of alert clearing events and clears the alert events.
	//
	// > Only Log Service supports this parameter.
	//
	// example:
	//
	// $.status
	InitiativeRecoverField *string `json:"InitiativeRecoverField,omitempty" xml:"InitiativeRecoverField,omitempty"`
	// The value of the field for clearing alert events. The system queries alert events based on the field of alert clearing events and clears the alert events.
	//
	// > Only Log Service supports this parameter.
	//
	// example:
	//
	// ok
	InitiativeRecoverValue *string `json:"InitiativeRecoverValue,omitempty" xml:"InitiativeRecoverValue,omitempty"`
	// The ID of the alert integration.
	//
	// example:
	//
	// 1234
	IntegrationId *int64 `json:"IntegrationId,omitempty" xml:"IntegrationId,omitempty"`
	// The name of the alert integration.
	//
	// example:
	//
	// CloudMonitor integration
	IntegrationName *string `json:"IntegrationName,omitempty" xml:"IntegrationName,omitempty"`
	// The service of the alert integration. Valid values:
	//
	// 	- CLOUD_MONITOR: CloudMonitor
	//
	// 	- LOG_SERVICE: Log Service
	//
	// example:
	//
	// CLOUD_MONITOR
	IntegrationProductType *string `json:"IntegrationProductType,omitempty" xml:"IntegrationProductType,omitempty"`
	// The activity of the alert integration
	//
	// example:
	//
	// ready
	Liveness *string `json:"Liveness,omitempty" xml:"Liveness,omitempty"`
	// The time when alert events are automatically cleared. Unit: seconds. Default value: 300.
	//
	// example:
	//
	// 300
	RecoverTime *int64 `json:"RecoverTime,omitempty" xml:"RecoverTime,omitempty"`
	// The authentication token of the alert integration.
	//
	// example:
	//
	// ymQBN******
	ShortToken *string `json:"ShortToken,omitempty" xml:"ShortToken,omitempty"`
	// The total number of alert events and the number of abnormal alert events in the last hour.
	Stat []*int64 `json:"Stat,omitempty" xml:"Stat,omitempty" type:"Repeated"`
	// Indicates whether the alert integration is enabled. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	State *bool `json:"State,omitempty" xml:"State,omitempty"`
}

func (s UpdateIntegrationResponseBodyIntegration) String() string {
	return tea.Prettify(s)
}

func (s UpdateIntegrationResponseBodyIntegration) GoString() string {
	return s.String()
}

func (s *UpdateIntegrationResponseBodyIntegration) SetApiEndpoint(v string) *UpdateIntegrationResponseBodyIntegration {
	s.ApiEndpoint = &v
	return s
}

func (s *UpdateIntegrationResponseBodyIntegration) SetAutoRecover(v bool) *UpdateIntegrationResponseBodyIntegration {
	s.AutoRecover = &v
	return s
}

func (s *UpdateIntegrationResponseBodyIntegration) SetDescription(v string) *UpdateIntegrationResponseBodyIntegration {
	s.Description = &v
	return s
}

func (s *UpdateIntegrationResponseBodyIntegration) SetDuplicateKey(v string) *UpdateIntegrationResponseBodyIntegration {
	s.DuplicateKey = &v
	return s
}

func (s *UpdateIntegrationResponseBodyIntegration) SetExtendedFieldRedefineRules(v []map[string]interface{}) *UpdateIntegrationResponseBodyIntegration {
	s.ExtendedFieldRedefineRules = v
	return s
}

func (s *UpdateIntegrationResponseBodyIntegration) SetFieldRedefineRules(v []map[string]interface{}) *UpdateIntegrationResponseBodyIntegration {
	s.FieldRedefineRules = v
	return s
}

func (s *UpdateIntegrationResponseBodyIntegration) SetInitiativeRecoverField(v string) *UpdateIntegrationResponseBodyIntegration {
	s.InitiativeRecoverField = &v
	return s
}

func (s *UpdateIntegrationResponseBodyIntegration) SetInitiativeRecoverValue(v string) *UpdateIntegrationResponseBodyIntegration {
	s.InitiativeRecoverValue = &v
	return s
}

func (s *UpdateIntegrationResponseBodyIntegration) SetIntegrationId(v int64) *UpdateIntegrationResponseBodyIntegration {
	s.IntegrationId = &v
	return s
}

func (s *UpdateIntegrationResponseBodyIntegration) SetIntegrationName(v string) *UpdateIntegrationResponseBodyIntegration {
	s.IntegrationName = &v
	return s
}

func (s *UpdateIntegrationResponseBodyIntegration) SetIntegrationProductType(v string) *UpdateIntegrationResponseBodyIntegration {
	s.IntegrationProductType = &v
	return s
}

func (s *UpdateIntegrationResponseBodyIntegration) SetLiveness(v string) *UpdateIntegrationResponseBodyIntegration {
	s.Liveness = &v
	return s
}

func (s *UpdateIntegrationResponseBodyIntegration) SetRecoverTime(v int64) *UpdateIntegrationResponseBodyIntegration {
	s.RecoverTime = &v
	return s
}

func (s *UpdateIntegrationResponseBodyIntegration) SetShortToken(v string) *UpdateIntegrationResponseBodyIntegration {
	s.ShortToken = &v
	return s
}

func (s *UpdateIntegrationResponseBodyIntegration) SetStat(v []*int64) *UpdateIntegrationResponseBodyIntegration {
	s.Stat = v
	return s
}

func (s *UpdateIntegrationResponseBodyIntegration) SetState(v bool) *UpdateIntegrationResponseBodyIntegration {
	s.State = &v
	return s
}

type UpdateIntegrationResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateIntegrationResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateIntegrationResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateIntegrationResponse) GoString() string {
	return s.String()
}

func (s *UpdateIntegrationResponse) SetHeaders(v map[string]*string) *UpdateIntegrationResponse {
	s.Headers = v
	return s
}

func (s *UpdateIntegrationResponse) SetStatusCode(v int32) *UpdateIntegrationResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateIntegrationResponse) SetBody(v *UpdateIntegrationResponseBody) *UpdateIntegrationResponse {
	s.Body = v
	return s
}

type UpdateMetricDropRequest struct {
	// example:
	//
	// c3ca36c8e2693403d85c0d9f8bb1d7b6c
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	// example:
	//
	// apiserver_request_duration_seconds_bucket
	//
	// etcd_request_duration_seconds_bucket
	//
	// apiserver_request_total
	//
	// container_tasks_state
	MetricDrop *string `json:"MetricDrop,omitempty" xml:"MetricDrop,omitempty"`
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s UpdateMetricDropRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateMetricDropRequest) GoString() string {
	return s.String()
}

func (s *UpdateMetricDropRequest) SetClusterId(v string) *UpdateMetricDropRequest {
	s.ClusterId = &v
	return s
}

func (s *UpdateMetricDropRequest) SetMetricDrop(v string) *UpdateMetricDropRequest {
	s.MetricDrop = &v
	return s
}

func (s *UpdateMetricDropRequest) SetRegionId(v string) *UpdateMetricDropRequest {
	s.RegionId = &v
	return s
}

type UpdateMetricDropResponseBody struct {
	// example:
	//
	// 200
	Code *int64 `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// true
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	//
	// example:
	//
	// CCCA4B88-BD7B-5A38-89AF-C09293BD4187
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UpdateMetricDropResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateMetricDropResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateMetricDropResponseBody) SetCode(v int64) *UpdateMetricDropResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateMetricDropResponseBody) SetData(v string) *UpdateMetricDropResponseBody {
	s.Data = &v
	return s
}

func (s *UpdateMetricDropResponseBody) SetMessage(v string) *UpdateMetricDropResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateMetricDropResponseBody) SetRequestId(v string) *UpdateMetricDropResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateMetricDropResponseBody) SetSuccess(v bool) *UpdateMetricDropResponseBody {
	s.Success = &v
	return s
}

type UpdateMetricDropResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateMetricDropResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateMetricDropResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateMetricDropResponse) GoString() string {
	return s.String()
}

func (s *UpdateMetricDropResponse) SetHeaders(v map[string]*string) *UpdateMetricDropResponse {
	s.Headers = v
	return s
}

func (s *UpdateMetricDropResponse) SetStatusCode(v int32) *UpdateMetricDropResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateMetricDropResponse) SetBody(v *UpdateMetricDropResponseBody) *UpdateMetricDropResponse {
	s.Body = v
	return s
}

type UpdatePrometheusAlertRuleRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 3888704
	AlertId *int64 `json:"AlertId,omitempty" xml:"AlertId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// Prometheus_Alert
	AlertName *string `json:"AlertName,omitempty" xml:"AlertName,omitempty"`
	// example:
	//
	// [{"Value": "xxx","Name": "description"}]
	Annotations *string `json:"Annotations,omitempty" xml:"Annotations,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// c0bad479465464e1d8c1e641b0afb****
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	// example:
	//
	// 10282
	DispatchRuleId *int64 `json:"DispatchRuleId,omitempty" xml:"DispatchRuleId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 100 	- (sum(rate(container_cpu_usage_seconds_total[1m])) by (pod_name) / sum(label_replace(kube_pod_container_resource_limits_cpu_cores, \\"pod_name\\", \\"$1\\", \\"pod\\", \\"(.*)\\")) by (pod_name))>75
	Expression *string `json:"Expression,omitempty" xml:"Expression,omitempty"`
	// example:
	//
	// [{"Value": "critical","Name": "severity"}]
	Labels *string `json:"Labels,omitempty" xml:"Labels,omitempty"`
	// This parameter is required.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// ALERT_MANAGER
	NotifyType *string `json:"NotifyType,omitempty" xml:"NotifyType,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string                                 `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Tags     []*UpdatePrometheusAlertRuleRequestTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
	Type     *string                                 `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s UpdatePrometheusAlertRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdatePrometheusAlertRuleRequest) GoString() string {
	return s.String()
}

func (s *UpdatePrometheusAlertRuleRequest) SetAlertId(v int64) *UpdatePrometheusAlertRuleRequest {
	s.AlertId = &v
	return s
}

func (s *UpdatePrometheusAlertRuleRequest) SetAlertName(v string) *UpdatePrometheusAlertRuleRequest {
	s.AlertName = &v
	return s
}

func (s *UpdatePrometheusAlertRuleRequest) SetAnnotations(v string) *UpdatePrometheusAlertRuleRequest {
	s.Annotations = &v
	return s
}

func (s *UpdatePrometheusAlertRuleRequest) SetClusterId(v string) *UpdatePrometheusAlertRuleRequest {
	s.ClusterId = &v
	return s
}

func (s *UpdatePrometheusAlertRuleRequest) SetDispatchRuleId(v int64) *UpdatePrometheusAlertRuleRequest {
	s.DispatchRuleId = &v
	return s
}

func (s *UpdatePrometheusAlertRuleRequest) SetDuration(v string) *UpdatePrometheusAlertRuleRequest {
	s.Duration = &v
	return s
}

func (s *UpdatePrometheusAlertRuleRequest) SetExpression(v string) *UpdatePrometheusAlertRuleRequest {
	s.Expression = &v
	return s
}

func (s *UpdatePrometheusAlertRuleRequest) SetLabels(v string) *UpdatePrometheusAlertRuleRequest {
	s.Labels = &v
	return s
}

func (s *UpdatePrometheusAlertRuleRequest) SetMessage(v string) *UpdatePrometheusAlertRuleRequest {
	s.Message = &v
	return s
}

func (s *UpdatePrometheusAlertRuleRequest) SetNotifyType(v string) *UpdatePrometheusAlertRuleRequest {
	s.NotifyType = &v
	return s
}

func (s *UpdatePrometheusAlertRuleRequest) SetRegionId(v string) *UpdatePrometheusAlertRuleRequest {
	s.RegionId = &v
	return s
}

func (s *UpdatePrometheusAlertRuleRequest) SetTags(v []*UpdatePrometheusAlertRuleRequestTags) *UpdatePrometheusAlertRuleRequest {
	s.Tags = v
	return s
}

func (s *UpdatePrometheusAlertRuleRequest) SetType(v string) *UpdatePrometheusAlertRuleRequest {
	s.Type = &v
	return s
}

type UpdatePrometheusAlertRuleRequestTags struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s UpdatePrometheusAlertRuleRequestTags) String() string {
	return tea.Prettify(s)
}

func (s UpdatePrometheusAlertRuleRequestTags) GoString() string {
	return s.String()
}

func (s *UpdatePrometheusAlertRuleRequestTags) SetKey(v string) *UpdatePrometheusAlertRuleRequestTags {
	s.Key = &v
	return s
}

func (s *UpdatePrometheusAlertRuleRequestTags) SetValue(v string) *UpdatePrometheusAlertRuleRequestTags {
	s.Value = &v
	return s
}

type UpdatePrometheusAlertRuleResponseBody struct {
	Code                *int64                                                    `json:"Code,omitempty" xml:"Code,omitempty"`
	Message             *string                                                   `json:"Message,omitempty" xml:"Message,omitempty"`
	PrometheusAlertRule *UpdatePrometheusAlertRuleResponseBodyPrometheusAlertRule `json:"PrometheusAlertRule,omitempty" xml:"PrometheusAlertRule,omitempty" type:"Struct"`
	// example:
	//
	// 9FEA6D00-317F-45E3-9004-7FB8B0B7****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UpdatePrometheusAlertRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdatePrometheusAlertRuleResponseBody) GoString() string {
	return s.String()
}

func (s *UpdatePrometheusAlertRuleResponseBody) SetCode(v int64) *UpdatePrometheusAlertRuleResponseBody {
	s.Code = &v
	return s
}

func (s *UpdatePrometheusAlertRuleResponseBody) SetMessage(v string) *UpdatePrometheusAlertRuleResponseBody {
	s.Message = &v
	return s
}

func (s *UpdatePrometheusAlertRuleResponseBody) SetPrometheusAlertRule(v *UpdatePrometheusAlertRuleResponseBodyPrometheusAlertRule) *UpdatePrometheusAlertRuleResponseBody {
	s.PrometheusAlertRule = v
	return s
}

func (s *UpdatePrometheusAlertRuleResponseBody) SetRequestId(v string) *UpdatePrometheusAlertRuleResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdatePrometheusAlertRuleResponseBody) SetSuccess(v bool) *UpdatePrometheusAlertRuleResponseBody {
	s.Success = &v
	return s
}

type UpdatePrometheusAlertRuleResponseBodyPrometheusAlertRule struct {
	// example:
	//
	// 3888704
	AlertId *int64 `json:"AlertId,omitempty" xml:"AlertId,omitempty"`
	// example:
	//
	// Prometheus_Alert
	AlertName   *string                                                                `json:"AlertName,omitempty" xml:"AlertName,omitempty"`
	Annotations []*UpdatePrometheusAlertRuleResponseBodyPrometheusAlertRuleAnnotations `json:"Annotations,omitempty" xml:"Annotations,omitempty" type:"Repeated"`
	// example:
	//
	// c0bad479465464e1d8c1e641b0afb****
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	// example:
	//
	// 10282
	DispatchRuleId *int64 `json:"DispatchRuleId,omitempty" xml:"DispatchRuleId,omitempty"`
	// example:
	//
	// 1
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// example:
	//
	// 100 	- (sum(rate(container_cpu_usage_seconds_total[1m])) by (pod_name) / sum(label_replace(kube_pod_container_resource_limits_cpu_cores, \\"pod_name\\", \\"$1\\", \\"pod\\", \\"(.*)\\")) by (pod_name))>75
	Expression *string                                                           `json:"Expression,omitempty" xml:"Expression,omitempty"`
	Labels     []*UpdatePrometheusAlertRuleResponseBodyPrometheusAlertRuleLabels `json:"Labels,omitempty" xml:"Labels,omitempty" type:"Repeated"`
	Message    *string                                                           `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// ALERT_MANAGER
	NotifyType *string `json:"NotifyType,omitempty" xml:"NotifyType,omitempty"`
	// example:
	//
	// 1
	Status *int32  `json:"Status,omitempty" xml:"Status,omitempty"`
	Type   *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s UpdatePrometheusAlertRuleResponseBodyPrometheusAlertRule) String() string {
	return tea.Prettify(s)
}

func (s UpdatePrometheusAlertRuleResponseBodyPrometheusAlertRule) GoString() string {
	return s.String()
}

func (s *UpdatePrometheusAlertRuleResponseBodyPrometheusAlertRule) SetAlertId(v int64) *UpdatePrometheusAlertRuleResponseBodyPrometheusAlertRule {
	s.AlertId = &v
	return s
}

func (s *UpdatePrometheusAlertRuleResponseBodyPrometheusAlertRule) SetAlertName(v string) *UpdatePrometheusAlertRuleResponseBodyPrometheusAlertRule {
	s.AlertName = &v
	return s
}

func (s *UpdatePrometheusAlertRuleResponseBodyPrometheusAlertRule) SetAnnotations(v []*UpdatePrometheusAlertRuleResponseBodyPrometheusAlertRuleAnnotations) *UpdatePrometheusAlertRuleResponseBodyPrometheusAlertRule {
	s.Annotations = v
	return s
}

func (s *UpdatePrometheusAlertRuleResponseBodyPrometheusAlertRule) SetClusterId(v string) *UpdatePrometheusAlertRuleResponseBodyPrometheusAlertRule {
	s.ClusterId = &v
	return s
}

func (s *UpdatePrometheusAlertRuleResponseBodyPrometheusAlertRule) SetDispatchRuleId(v int64) *UpdatePrometheusAlertRuleResponseBodyPrometheusAlertRule {
	s.DispatchRuleId = &v
	return s
}

func (s *UpdatePrometheusAlertRuleResponseBodyPrometheusAlertRule) SetDuration(v string) *UpdatePrometheusAlertRuleResponseBodyPrometheusAlertRule {
	s.Duration = &v
	return s
}

func (s *UpdatePrometheusAlertRuleResponseBodyPrometheusAlertRule) SetExpression(v string) *UpdatePrometheusAlertRuleResponseBodyPrometheusAlertRule {
	s.Expression = &v
	return s
}

func (s *UpdatePrometheusAlertRuleResponseBodyPrometheusAlertRule) SetLabels(v []*UpdatePrometheusAlertRuleResponseBodyPrometheusAlertRuleLabels) *UpdatePrometheusAlertRuleResponseBodyPrometheusAlertRule {
	s.Labels = v
	return s
}

func (s *UpdatePrometheusAlertRuleResponseBodyPrometheusAlertRule) SetMessage(v string) *UpdatePrometheusAlertRuleResponseBodyPrometheusAlertRule {
	s.Message = &v
	return s
}

func (s *UpdatePrometheusAlertRuleResponseBodyPrometheusAlertRule) SetNotifyType(v string) *UpdatePrometheusAlertRuleResponseBodyPrometheusAlertRule {
	s.NotifyType = &v
	return s
}

func (s *UpdatePrometheusAlertRuleResponseBodyPrometheusAlertRule) SetStatus(v int32) *UpdatePrometheusAlertRuleResponseBodyPrometheusAlertRule {
	s.Status = &v
	return s
}

func (s *UpdatePrometheusAlertRuleResponseBodyPrometheusAlertRule) SetType(v string) *UpdatePrometheusAlertRuleResponseBodyPrometheusAlertRule {
	s.Type = &v
	return s
}

type UpdatePrometheusAlertRuleResponseBodyPrometheusAlertRuleAnnotations struct {
	// example:
	//
	// message
	Name  *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s UpdatePrometheusAlertRuleResponseBodyPrometheusAlertRuleAnnotations) String() string {
	return tea.Prettify(s)
}

func (s UpdatePrometheusAlertRuleResponseBodyPrometheusAlertRuleAnnotations) GoString() string {
	return s.String()
}

func (s *UpdatePrometheusAlertRuleResponseBodyPrometheusAlertRuleAnnotations) SetName(v string) *UpdatePrometheusAlertRuleResponseBodyPrometheusAlertRuleAnnotations {
	s.Name = &v
	return s
}

func (s *UpdatePrometheusAlertRuleResponseBodyPrometheusAlertRuleAnnotations) SetValue(v string) *UpdatePrometheusAlertRuleResponseBodyPrometheusAlertRuleAnnotations {
	s.Value = &v
	return s
}

type UpdatePrometheusAlertRuleResponseBodyPrometheusAlertRuleLabels struct {
	// example:
	//
	// severity
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// critical
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s UpdatePrometheusAlertRuleResponseBodyPrometheusAlertRuleLabels) String() string {
	return tea.Prettify(s)
}

func (s UpdatePrometheusAlertRuleResponseBodyPrometheusAlertRuleLabels) GoString() string {
	return s.String()
}

func (s *UpdatePrometheusAlertRuleResponseBodyPrometheusAlertRuleLabels) SetName(v string) *UpdatePrometheusAlertRuleResponseBodyPrometheusAlertRuleLabels {
	s.Name = &v
	return s
}

func (s *UpdatePrometheusAlertRuleResponseBodyPrometheusAlertRuleLabels) SetValue(v string) *UpdatePrometheusAlertRuleResponseBodyPrometheusAlertRuleLabels {
	s.Value = &v
	return s
}

type UpdatePrometheusAlertRuleResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdatePrometheusAlertRuleResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdatePrometheusAlertRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdatePrometheusAlertRuleResponse) GoString() string {
	return s.String()
}

func (s *UpdatePrometheusAlertRuleResponse) SetHeaders(v map[string]*string) *UpdatePrometheusAlertRuleResponse {
	s.Headers = v
	return s
}

func (s *UpdatePrometheusAlertRuleResponse) SetStatusCode(v int32) *UpdatePrometheusAlertRuleResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdatePrometheusAlertRuleResponse) SetBody(v *UpdatePrometheusAlertRuleResponseBody) *UpdatePrometheusAlertRuleResponse {
	s.Body = v
	return s
}

type UpdatePrometheusGlobalViewRequest struct {
	// To edit a GlobalView aggregated instance, do you require all passed child instances to be verified successfully before creating a GlobalView instance (optional, default to false):
	//
	// - true
	//
	// - false
	//
	// example:
	//
	// true
	AllSubClustersSuccess *bool `json:"AllSubClustersSuccess,omitempty" xml:"AllSubClustersSuccess,omitempty"`
	// The ID of the Prometheus instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// global****
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	// The name of the global aggregation instance.
	//
	// example:
	//
	// zyGlobalView
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	// The region ID of the global aggregation instance.
	//
	// example:
	//
	// cn-hangzhou
	MostRegionId *string `json:"MostRegionId,omitempty" xml:"MostRegionId,omitempty"`
	// The ID of the region in which the Prometheus instance resides.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-shenzhen
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the resource group to which the Prometheus instance belongs.
	//
	// example:
	//
	// rg-acfmxyexli2****
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	// The data sources of the Prometheus instance for GlobalView.
	//
	// This parameter is required.
	//
	// example:
	//
	// [ { "headers":{ }, "regionId":"cn-hangzhou", "sourceType":"AlibabaPrometheus", "extras":{ }, "clusterId":"c39a1048921e04f***********", "sourceName":"arms-luyao-test", "dataSource":"", "userId":"1672753***********" }, { "headers":{ }, "regionId":"cn-beijing", "sourceType":"AlibabaPrometheus", "extras":{ }, "clusterId":"c6b6485496d5b40***********", "sourceName":"agent-321-test", "dataSource":"", "userId":"1672753***********" }, { "headers":{ }, "regionId":"cn-zhangjiakou", "sourceType":"AlibabaPrometheus", "extras":{ }, "clusterId":"c261a4f3200c446***********", "sourceName":"zaifeng-cardinality-01", "dataSource":"", "userId":"1672753***********" } ]
	SubClustersJson *string `json:"SubClustersJson,omitempty" xml:"SubClustersJson,omitempty"`
}

func (s UpdatePrometheusGlobalViewRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdatePrometheusGlobalViewRequest) GoString() string {
	return s.String()
}

func (s *UpdatePrometheusGlobalViewRequest) SetAllSubClustersSuccess(v bool) *UpdatePrometheusGlobalViewRequest {
	s.AllSubClustersSuccess = &v
	return s
}

func (s *UpdatePrometheusGlobalViewRequest) SetClusterId(v string) *UpdatePrometheusGlobalViewRequest {
	s.ClusterId = &v
	return s
}

func (s *UpdatePrometheusGlobalViewRequest) SetGroupName(v string) *UpdatePrometheusGlobalViewRequest {
	s.GroupName = &v
	return s
}

func (s *UpdatePrometheusGlobalViewRequest) SetMostRegionId(v string) *UpdatePrometheusGlobalViewRequest {
	s.MostRegionId = &v
	return s
}

func (s *UpdatePrometheusGlobalViewRequest) SetRegionId(v string) *UpdatePrometheusGlobalViewRequest {
	s.RegionId = &v
	return s
}

func (s *UpdatePrometheusGlobalViewRequest) SetResourceGroupId(v string) *UpdatePrometheusGlobalViewRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *UpdatePrometheusGlobalViewRequest) SetSubClustersJson(v string) *UpdatePrometheusGlobalViewRequest {
	s.SubClustersJson = &v
	return s
}

type UpdatePrometheusGlobalViewResponseBody struct {
	// The response code. The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned struct.
	Data *UpdatePrometheusGlobalViewResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The error message that is returned if the request failed.
	//
	// example:
	//
	// message
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request. You can use the ID to query logs and troubleshoot issues.
	//
	// example:
	//
	// E9C9DA3D-10FE-472E-9EEF-2D0A3E41****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdatePrometheusGlobalViewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdatePrometheusGlobalViewResponseBody) GoString() string {
	return s.String()
}

func (s *UpdatePrometheusGlobalViewResponseBody) SetCode(v int32) *UpdatePrometheusGlobalViewResponseBody {
	s.Code = &v
	return s
}

func (s *UpdatePrometheusGlobalViewResponseBody) SetData(v *UpdatePrometheusGlobalViewResponseBodyData) *UpdatePrometheusGlobalViewResponseBody {
	s.Data = v
	return s
}

func (s *UpdatePrometheusGlobalViewResponseBody) SetMessage(v string) *UpdatePrometheusGlobalViewResponseBody {
	s.Message = &v
	return s
}

func (s *UpdatePrometheusGlobalViewResponseBody) SetRequestId(v string) *UpdatePrometheusGlobalViewResponseBody {
	s.RequestId = &v
	return s
}

type UpdatePrometheusGlobalViewResponseBodyData struct {
	// The data sources that failed to be updated.
	FailedInstances []*UpdatePrometheusGlobalViewResponseBodyDataFailedInstances `json:"FailedInstances,omitempty" xml:"FailedInstances,omitempty" type:"Repeated"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- `true`
	//
	// 	- `false`
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UpdatePrometheusGlobalViewResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s UpdatePrometheusGlobalViewResponseBodyData) GoString() string {
	return s.String()
}

func (s *UpdatePrometheusGlobalViewResponseBodyData) SetFailedInstances(v []*UpdatePrometheusGlobalViewResponseBodyDataFailedInstances) *UpdatePrometheusGlobalViewResponseBodyData {
	s.FailedInstances = v
	return s
}

func (s *UpdatePrometheusGlobalViewResponseBodyData) SetSuccess(v bool) *UpdatePrometheusGlobalViewResponseBodyData {
	s.Success = &v
	return s
}

type UpdatePrometheusGlobalViewResponseBodyDataFailedInstances struct {
	// The ID of the Prometheus instance.
	//
	// example:
	//
	// cdb65ed2d527345*********
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	// The name of the data source.
	//
	// example:
	//
	// sourcename-test
	SourceName *string `json:"SourceName,omitempty" xml:"SourceName,omitempty"`
	// The type of the data source. AlibabaPrometheus MetricStore CustomPrometheus
	//
	// example:
	//
	// AlibabaPrometheus
	SourceType *string `json:"SourceType,omitempty" xml:"SourceType,omitempty"`
	// The user ID.
	//
	// example:
	//
	// 23784673825*******
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s UpdatePrometheusGlobalViewResponseBodyDataFailedInstances) String() string {
	return tea.Prettify(s)
}

func (s UpdatePrometheusGlobalViewResponseBodyDataFailedInstances) GoString() string {
	return s.String()
}

func (s *UpdatePrometheusGlobalViewResponseBodyDataFailedInstances) SetClusterId(v string) *UpdatePrometheusGlobalViewResponseBodyDataFailedInstances {
	s.ClusterId = &v
	return s
}

func (s *UpdatePrometheusGlobalViewResponseBodyDataFailedInstances) SetSourceName(v string) *UpdatePrometheusGlobalViewResponseBodyDataFailedInstances {
	s.SourceName = &v
	return s
}

func (s *UpdatePrometheusGlobalViewResponseBodyDataFailedInstances) SetSourceType(v string) *UpdatePrometheusGlobalViewResponseBodyDataFailedInstances {
	s.SourceType = &v
	return s
}

func (s *UpdatePrometheusGlobalViewResponseBodyDataFailedInstances) SetUserId(v string) *UpdatePrometheusGlobalViewResponseBodyDataFailedInstances {
	s.UserId = &v
	return s
}

type UpdatePrometheusGlobalViewResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdatePrometheusGlobalViewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdatePrometheusGlobalViewResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdatePrometheusGlobalViewResponse) GoString() string {
	return s.String()
}

func (s *UpdatePrometheusGlobalViewResponse) SetHeaders(v map[string]*string) *UpdatePrometheusGlobalViewResponse {
	s.Headers = v
	return s
}

func (s *UpdatePrometheusGlobalViewResponse) SetStatusCode(v int32) *UpdatePrometheusGlobalViewResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdatePrometheusGlobalViewResponse) SetBody(v *UpdatePrometheusGlobalViewResponseBody) *UpdatePrometheusGlobalViewResponse {
	s.Body = v
	return s
}

type UpdatePrometheusInstanceRequest struct {
	// The number of days for automatic archiving after storage expiration (optional values: 60, 90, 180, 365). 0 means not archive.
	//
	// example:
	//
	// 90
	ArchiveDuration *int32 `json:"ArchiveDuration,omitempty" xml:"ArchiveDuration,omitempty"`
	// The ID of the Prometheus instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// vpc-xxx
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	// The ID of the region.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the resource group.
	//
	// example:
	//
	// rg-acfmxyexli2****
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	// Storage duration (days).
	//
	// example:
	//
	// 90
	StorageDuration *int32 `json:"StorageDuration,omitempty" xml:"StorageDuration,omitempty"`
}

func (s UpdatePrometheusInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdatePrometheusInstanceRequest) GoString() string {
	return s.String()
}

func (s *UpdatePrometheusInstanceRequest) SetArchiveDuration(v int32) *UpdatePrometheusInstanceRequest {
	s.ArchiveDuration = &v
	return s
}

func (s *UpdatePrometheusInstanceRequest) SetClusterId(v string) *UpdatePrometheusInstanceRequest {
	s.ClusterId = &v
	return s
}

func (s *UpdatePrometheusInstanceRequest) SetRegionId(v string) *UpdatePrometheusInstanceRequest {
	s.RegionId = &v
	return s
}

func (s *UpdatePrometheusInstanceRequest) SetResourceGroupId(v string) *UpdatePrometheusInstanceRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *UpdatePrometheusInstanceRequest) SetStorageDuration(v int32) *UpdatePrometheusInstanceRequest {
	s.StorageDuration = &v
	return s
}

type UpdatePrometheusInstanceResponseBody struct {
	// The status code. The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned result.
	//
	// example:
	//
	// success
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// The message returned.
	//
	// example:
	//
	// message
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	//
	// example:
	//
	// 6A9AEA84-7186-4D8D-B498-4585C6A2****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdatePrometheusInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdatePrometheusInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *UpdatePrometheusInstanceResponseBody) SetCode(v int32) *UpdatePrometheusInstanceResponseBody {
	s.Code = &v
	return s
}

func (s *UpdatePrometheusInstanceResponseBody) SetData(v string) *UpdatePrometheusInstanceResponseBody {
	s.Data = &v
	return s
}

func (s *UpdatePrometheusInstanceResponseBody) SetMessage(v string) *UpdatePrometheusInstanceResponseBody {
	s.Message = &v
	return s
}

func (s *UpdatePrometheusInstanceResponseBody) SetRequestId(v string) *UpdatePrometheusInstanceResponseBody {
	s.RequestId = &v
	return s
}

type UpdatePrometheusInstanceResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdatePrometheusInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdatePrometheusInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdatePrometheusInstanceResponse) GoString() string {
	return s.String()
}

func (s *UpdatePrometheusInstanceResponse) SetHeaders(v map[string]*string) *UpdatePrometheusInstanceResponse {
	s.Headers = v
	return s
}

func (s *UpdatePrometheusInstanceResponse) SetStatusCode(v int32) *UpdatePrometheusInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdatePrometheusInstanceResponse) SetBody(v *UpdatePrometheusInstanceResponseBody) *UpdatePrometheusInstanceResponse {
	s.Body = v
	return s
}

type UpdatePrometheusIntegrationRequest struct {
	// The ID of the Prometheus instance. Only a Prometheus instance for Container Service or a Prometheus instance for ECS is supported.
	//
	// This parameter is required.
	//
	// example:
	//
	// cc7a37ee31aea4ed1a059eff8034b****
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	// The exporter ID.
	//
	// example:
	//
	// 2893
	InstanceId *int64 `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The type of the integration.
	//
	// This parameter is required.
	//
	// example:
	//
	// kafka, mysql, redis, snmp, emr, nubela, and tidb
	IntegrationType *string `json:"IntegrationType,omitempty" xml:"IntegrationType,omitempty"`
	// The configurations of the exporter. The value is a JSON string.
	//
	// This parameter is required.
	//
	// example:
	//
	// {
	//
	//       "port": "5554",
	//
	//       "name": "kafka-test12",
	//
	//       "kafka_instance": "kafka-test",
	//
	//       "__label_value": "kafka-test",
	//
	//       "scrape_interval": 33,
	//
	//       "metrics_path": "/metrics",
	//
	//       "__label_key": "kafka-test"
	//
	// }
	Param *string `json:"Param,omitempty" xml:"Param,omitempty"`
	// The region ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s UpdatePrometheusIntegrationRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdatePrometheusIntegrationRequest) GoString() string {
	return s.String()
}

func (s *UpdatePrometheusIntegrationRequest) SetClusterId(v string) *UpdatePrometheusIntegrationRequest {
	s.ClusterId = &v
	return s
}

func (s *UpdatePrometheusIntegrationRequest) SetInstanceId(v int64) *UpdatePrometheusIntegrationRequest {
	s.InstanceId = &v
	return s
}

func (s *UpdatePrometheusIntegrationRequest) SetIntegrationType(v string) *UpdatePrometheusIntegrationRequest {
	s.IntegrationType = &v
	return s
}

func (s *UpdatePrometheusIntegrationRequest) SetParam(v string) *UpdatePrometheusIntegrationRequest {
	s.Param = &v
	return s
}

func (s *UpdatePrometheusIntegrationRequest) SetRegionId(v string) *UpdatePrometheusIntegrationRequest {
	s.RegionId = &v
	return s
}

type UpdatePrometheusIntegrationResponseBody struct {
	// The status code or error code.
	//
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The struct returned.
	Data *UpdatePrometheusIntegrationResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The message returned.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	//
	// example:
	//
	// 2DB771C3-D1BB-5363-8A5F-ADB2AF2948DB
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdatePrometheusIntegrationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdatePrometheusIntegrationResponseBody) GoString() string {
	return s.String()
}

func (s *UpdatePrometheusIntegrationResponseBody) SetCode(v int32) *UpdatePrometheusIntegrationResponseBody {
	s.Code = &v
	return s
}

func (s *UpdatePrometheusIntegrationResponseBody) SetData(v *UpdatePrometheusIntegrationResponseBodyData) *UpdatePrometheusIntegrationResponseBody {
	s.Data = v
	return s
}

func (s *UpdatePrometheusIntegrationResponseBody) SetMessage(v string) *UpdatePrometheusIntegrationResponseBody {
	s.Message = &v
	return s
}

func (s *UpdatePrometheusIntegrationResponseBody) SetRequestId(v string) *UpdatePrometheusIntegrationResponseBody {
	s.RequestId = &v
	return s
}

type UpdatePrometheusIntegrationResponseBodyData struct {
	// The exporter ID.
	//
	// example:
	//
	// 2866
	InstanceId *int64 `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The exporter name.
	//
	// example:
	//
	// inet
	InstanceName *string `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
}

func (s UpdatePrometheusIntegrationResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s UpdatePrometheusIntegrationResponseBodyData) GoString() string {
	return s.String()
}

func (s *UpdatePrometheusIntegrationResponseBodyData) SetInstanceId(v int64) *UpdatePrometheusIntegrationResponseBodyData {
	s.InstanceId = &v
	return s
}

func (s *UpdatePrometheusIntegrationResponseBodyData) SetInstanceName(v string) *UpdatePrometheusIntegrationResponseBodyData {
	s.InstanceName = &v
	return s
}

type UpdatePrometheusIntegrationResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdatePrometheusIntegrationResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdatePrometheusIntegrationResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdatePrometheusIntegrationResponse) GoString() string {
	return s.String()
}

func (s *UpdatePrometheusIntegrationResponse) SetHeaders(v map[string]*string) *UpdatePrometheusIntegrationResponse {
	s.Headers = v
	return s
}

func (s *UpdatePrometheusIntegrationResponse) SetStatusCode(v int32) *UpdatePrometheusIntegrationResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdatePrometheusIntegrationResponse) SetBody(v *UpdatePrometheusIntegrationResponseBody) *UpdatePrometheusIntegrationResponse {
	s.Body = v
	return s
}

type UpdatePrometheusMonitoringRequest struct {
	// The ID of the Prometheus instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// cc7a37ee31aea4ed1a059eff8034b****
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	// The monitoring configuration. Specify a YAML string.
	//
	// This parameter is required.
	ConfigYaml *string `json:"ConfigYaml,omitempty" xml:"ConfigYaml,omitempty"`
	// The name of the monitoring configuration.
	//
	// This parameter is required.
	//
	// example:
	//
	// podMonitor1
	MonitoringName *string `json:"MonitoringName,omitempty" xml:"MonitoringName,omitempty"`
	// The region ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The type of the monitoring configuration.
	//
	// Valid values for a Prometheus instance for Container Service: serviceMonitor, podMonitor, customJob, and probe.
	//
	// Valid values for a Prometheus instance for ECS: customJob and probe.
	//
	// This parameter is required.
	//
	// example:
	//
	// podMonitor
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s UpdatePrometheusMonitoringRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdatePrometheusMonitoringRequest) GoString() string {
	return s.String()
}

func (s *UpdatePrometheusMonitoringRequest) SetClusterId(v string) *UpdatePrometheusMonitoringRequest {
	s.ClusterId = &v
	return s
}

func (s *UpdatePrometheusMonitoringRequest) SetConfigYaml(v string) *UpdatePrometheusMonitoringRequest {
	s.ConfigYaml = &v
	return s
}

func (s *UpdatePrometheusMonitoringRequest) SetMonitoringName(v string) *UpdatePrometheusMonitoringRequest {
	s.MonitoringName = &v
	return s
}

func (s *UpdatePrometheusMonitoringRequest) SetRegionId(v string) *UpdatePrometheusMonitoringRequest {
	s.RegionId = &v
	return s
}

func (s *UpdatePrometheusMonitoringRequest) SetType(v string) *UpdatePrometheusMonitoringRequest {
	s.Type = &v
	return s
}

type UpdatePrometheusMonitoringResponseBody struct {
	// The status code. The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The result of the operation.
	//
	// example:
	//
	// success
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// The returned message.
	//
	// example:
	//
	// message
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 626037F5-FDEB-45B0-804C-B3C92797****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdatePrometheusMonitoringResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdatePrometheusMonitoringResponseBody) GoString() string {
	return s.String()
}

func (s *UpdatePrometheusMonitoringResponseBody) SetCode(v int32) *UpdatePrometheusMonitoringResponseBody {
	s.Code = &v
	return s
}

func (s *UpdatePrometheusMonitoringResponseBody) SetData(v string) *UpdatePrometheusMonitoringResponseBody {
	s.Data = &v
	return s
}

func (s *UpdatePrometheusMonitoringResponseBody) SetMessage(v string) *UpdatePrometheusMonitoringResponseBody {
	s.Message = &v
	return s
}

func (s *UpdatePrometheusMonitoringResponseBody) SetRequestId(v string) *UpdatePrometheusMonitoringResponseBody {
	s.RequestId = &v
	return s
}

type UpdatePrometheusMonitoringResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdatePrometheusMonitoringResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdatePrometheusMonitoringResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdatePrometheusMonitoringResponse) GoString() string {
	return s.String()
}

func (s *UpdatePrometheusMonitoringResponse) SetHeaders(v map[string]*string) *UpdatePrometheusMonitoringResponse {
	s.Headers = v
	return s
}

func (s *UpdatePrometheusMonitoringResponse) SetStatusCode(v int32) *UpdatePrometheusMonitoringResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdatePrometheusMonitoringResponse) SetBody(v *UpdatePrometheusMonitoringResponseBody) *UpdatePrometheusMonitoringResponse {
	s.Body = v
	return s
}

type UpdatePrometheusMonitoringStatusRequest struct {
	// The ID of the Prometheus instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// cc7a37ee31aea4ed1a059eff8034b****
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	// The name of the monitoring configuration.
	//
	// This parameter is required.
	//
	// example:
	//
	// customJob1
	MonitoringName *string `json:"MonitoringName,omitempty" xml:"MonitoringName,omitempty"`
	// The region ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The status of the monitoring configuration. Valid values: run and stop.
	//
	// This parameter is required.
	//
	// example:
	//
	// run
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The type of the monitoring configuration.
	//
	// Valid values for a Prometheus instance for Container Service: serviceMonitor, podMonitor, and customJob.
	//
	// Valid value for a Prometheus instance for ECS: customJob.
	//
	// The status of probe cannot be modified.
	//
	// This parameter is required.
	//
	// example:
	//
	// customJob
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s UpdatePrometheusMonitoringStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdatePrometheusMonitoringStatusRequest) GoString() string {
	return s.String()
}

func (s *UpdatePrometheusMonitoringStatusRequest) SetClusterId(v string) *UpdatePrometheusMonitoringStatusRequest {
	s.ClusterId = &v
	return s
}

func (s *UpdatePrometheusMonitoringStatusRequest) SetMonitoringName(v string) *UpdatePrometheusMonitoringStatusRequest {
	s.MonitoringName = &v
	return s
}

func (s *UpdatePrometheusMonitoringStatusRequest) SetRegionId(v string) *UpdatePrometheusMonitoringStatusRequest {
	s.RegionId = &v
	return s
}

func (s *UpdatePrometheusMonitoringStatusRequest) SetStatus(v string) *UpdatePrometheusMonitoringStatusRequest {
	s.Status = &v
	return s
}

func (s *UpdatePrometheusMonitoringStatusRequest) SetType(v string) *UpdatePrometheusMonitoringStatusRequest {
	s.Type = &v
	return s
}

type UpdatePrometheusMonitoringStatusResponseBody struct {
	// The status code. The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The result of the operation.
	//
	// example:
	//
	// success
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// The returned message.
	//
	// example:
	//
	// message
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 21E85B16-75A6-429A-9F65-8AAC9A54****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdatePrometheusMonitoringStatusResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdatePrometheusMonitoringStatusResponseBody) GoString() string {
	return s.String()
}

func (s *UpdatePrometheusMonitoringStatusResponseBody) SetCode(v int32) *UpdatePrometheusMonitoringStatusResponseBody {
	s.Code = &v
	return s
}

func (s *UpdatePrometheusMonitoringStatusResponseBody) SetData(v string) *UpdatePrometheusMonitoringStatusResponseBody {
	s.Data = &v
	return s
}

func (s *UpdatePrometheusMonitoringStatusResponseBody) SetMessage(v string) *UpdatePrometheusMonitoringStatusResponseBody {
	s.Message = &v
	return s
}

func (s *UpdatePrometheusMonitoringStatusResponseBody) SetRequestId(v string) *UpdatePrometheusMonitoringStatusResponseBody {
	s.RequestId = &v
	return s
}

type UpdatePrometheusMonitoringStatusResponse struct {
	Headers    map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdatePrometheusMonitoringStatusResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdatePrometheusMonitoringStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdatePrometheusMonitoringStatusResponse) GoString() string {
	return s.String()
}

func (s *UpdatePrometheusMonitoringStatusResponse) SetHeaders(v map[string]*string) *UpdatePrometheusMonitoringStatusResponse {
	s.Headers = v
	return s
}

func (s *UpdatePrometheusMonitoringStatusResponse) SetStatusCode(v int32) *UpdatePrometheusMonitoringStatusResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdatePrometheusMonitoringStatusResponse) SetBody(v *UpdatePrometheusMonitoringStatusResponseBody) *UpdatePrometheusMonitoringStatusResponse {
	s.Body = v
	return s
}

type UpdatePrometheusRemoteWriteRequest struct {
	// The ID of the Prometheus instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// cc7a37ee31aea4ed1a059eff8034b****
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	// The region ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The name of the remote write configuration item.
	//
	// This parameter is required.
	//
	// example:
	//
	// rw1
	RemoteWriteName *string `json:"RemoteWriteName,omitempty" xml:"RemoteWriteName,omitempty"`
	// The remote write configuration. Specify the value in the YAML format.
	//
	// This parameter is required.
	//
	// example:
	//
	// remote_write:
	//
	//   - name: rw1
	//
	//     url: "http://cn-hangzhou-intranet.arms.aliyuncs.com/prometheus/uid/xx/cn-hangzhou/api/v3/write"
	//
	//     basic_auth:
	//
	//       username: xxx
	//
	//       password: xxx
	//
	//     write_relabel_configs:
	//
	//       - source_labels: [ instance_id ]
	//
	//         separator: ;
	//
	//         regex: si
	//
	//         replacement: $1
	//
	//         action: keep
	RemoteWriteYaml *string `json:"RemoteWriteYaml,omitempty" xml:"RemoteWriteYaml,omitempty"`
}

func (s UpdatePrometheusRemoteWriteRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdatePrometheusRemoteWriteRequest) GoString() string {
	return s.String()
}

func (s *UpdatePrometheusRemoteWriteRequest) SetClusterId(v string) *UpdatePrometheusRemoteWriteRequest {
	s.ClusterId = &v
	return s
}

func (s *UpdatePrometheusRemoteWriteRequest) SetRegionId(v string) *UpdatePrometheusRemoteWriteRequest {
	s.RegionId = &v
	return s
}

func (s *UpdatePrometheusRemoteWriteRequest) SetRemoteWriteName(v string) *UpdatePrometheusRemoteWriteRequest {
	s.RemoteWriteName = &v
	return s
}

func (s *UpdatePrometheusRemoteWriteRequest) SetRemoteWriteYaml(v string) *UpdatePrometheusRemoteWriteRequest {
	s.RemoteWriteYaml = &v
	return s
}

type UpdatePrometheusRemoteWriteResponseBody struct {
	// The status code. A value of 200 indicates that the request is successful.
	//
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The name of the remote write configuration that was modified, or the exception information.
	//
	// example:
	//
	// rw1
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// The message returned.
	//
	// example:
	//
	// message
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	//
	// example:
	//
	// 2A0CEDF1-06FE-44AC-8E21-21A5BE65****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request is successful. Valid values:
	//
	// 	- `true`
	//
	// 	- `false`
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UpdatePrometheusRemoteWriteResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdatePrometheusRemoteWriteResponseBody) GoString() string {
	return s.String()
}

func (s *UpdatePrometheusRemoteWriteResponseBody) SetCode(v int32) *UpdatePrometheusRemoteWriteResponseBody {
	s.Code = &v
	return s
}

func (s *UpdatePrometheusRemoteWriteResponseBody) SetData(v string) *UpdatePrometheusRemoteWriteResponseBody {
	s.Data = &v
	return s
}

func (s *UpdatePrometheusRemoteWriteResponseBody) SetMessage(v string) *UpdatePrometheusRemoteWriteResponseBody {
	s.Message = &v
	return s
}

func (s *UpdatePrometheusRemoteWriteResponseBody) SetRequestId(v string) *UpdatePrometheusRemoteWriteResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdatePrometheusRemoteWriteResponseBody) SetSuccess(v bool) *UpdatePrometheusRemoteWriteResponseBody {
	s.Success = &v
	return s
}

type UpdatePrometheusRemoteWriteResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdatePrometheusRemoteWriteResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdatePrometheusRemoteWriteResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdatePrometheusRemoteWriteResponse) GoString() string {
	return s.String()
}

func (s *UpdatePrometheusRemoteWriteResponse) SetHeaders(v map[string]*string) *UpdatePrometheusRemoteWriteResponse {
	s.Headers = v
	return s
}

func (s *UpdatePrometheusRemoteWriteResponse) SetStatusCode(v int32) *UpdatePrometheusRemoteWriteResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdatePrometheusRemoteWriteResponse) SetBody(v *UpdatePrometheusRemoteWriteResponseBody) *UpdatePrometheusRemoteWriteResponse {
	s.Body = v
	return s
}

type UpdateRumAppRequest struct {
	// example:
	//
	// true
	AutoRestart *bool   `json:"AutoRestart,omitempty" xml:"AutoRestart,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// example:
	//
	// true
	IsSubscribe *bool   `json:"IsSubscribe,omitempty" xml:"IsSubscribe,omitempty"`
	Nickname    *string `json:"Nickname,omitempty" xml:"Nickname,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// b5xxxxs@d8deedfa9bf****
	Pid *string `json:"Pid,omitempty" xml:"Pid,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// example:
	//
	// true
	Restart                    *bool   `json:"Restart,omitempty" xml:"Restart,omitempty"`
	ServiceDomainOperationJson *string `json:"ServiceDomainOperationJson,omitempty" xml:"ServiceDomainOperationJson,omitempty"`
	// example:
	//
	// true
	Stop *bool `json:"Stop,omitempty" xml:"Stop,omitempty"`
}

func (s UpdateRumAppRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateRumAppRequest) GoString() string {
	return s.String()
}

func (s *UpdateRumAppRequest) SetAutoRestart(v bool) *UpdateRumAppRequest {
	s.AutoRestart = &v
	return s
}

func (s *UpdateRumAppRequest) SetDescription(v string) *UpdateRumAppRequest {
	s.Description = &v
	return s
}

func (s *UpdateRumAppRequest) SetIsSubscribe(v bool) *UpdateRumAppRequest {
	s.IsSubscribe = &v
	return s
}

func (s *UpdateRumAppRequest) SetNickname(v string) *UpdateRumAppRequest {
	s.Nickname = &v
	return s
}

func (s *UpdateRumAppRequest) SetPid(v string) *UpdateRumAppRequest {
	s.Pid = &v
	return s
}

func (s *UpdateRumAppRequest) SetRegionId(v string) *UpdateRumAppRequest {
	s.RegionId = &v
	return s
}

func (s *UpdateRumAppRequest) SetRestart(v bool) *UpdateRumAppRequest {
	s.Restart = &v
	return s
}

func (s *UpdateRumAppRequest) SetServiceDomainOperationJson(v string) *UpdateRumAppRequest {
	s.ServiceDomainOperationJson = &v
	return s
}

func (s *UpdateRumAppRequest) SetStop(v bool) *UpdateRumAppRequest {
	s.Stop = &v
	return s
}

type UpdateRumAppResponseBody struct {
	// example:
	//
	// 200
	Code *string                       `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *UpdateRumAppResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *string `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// message
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	//
	// example:
	//
	// E9C9DA3D-10FE-472E-9EEF-2D0A3E41****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UpdateRumAppResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateRumAppResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateRumAppResponseBody) SetCode(v string) *UpdateRumAppResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateRumAppResponseBody) SetData(v *UpdateRumAppResponseBodyData) *UpdateRumAppResponseBody {
	s.Data = v
	return s
}

func (s *UpdateRumAppResponseBody) SetHttpStatusCode(v string) *UpdateRumAppResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *UpdateRumAppResponseBody) SetMessage(v string) *UpdateRumAppResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateRumAppResponseBody) SetRequestId(v string) *UpdateRumAppResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateRumAppResponseBody) SetSuccess(v string) *UpdateRumAppResponseBody {
	s.Success = &v
	return s
}

type UpdateRumAppResponseBodyData struct {
	Config *string `json:"Config,omitempty" xml:"Config,omitempty"`
	// example:
	//
	// 100000
	Limit *int32 `json:"Limit,omitempty" xml:"Limit,omitempty"`
	// example:
	//
	// true
	Limited *bool `json:"Limited,omitempty" xml:"Limited,omitempty"`
	// example:
	//
	// 10000
	Usage *int32 `json:"Usage,omitempty" xml:"Usage,omitempty"`
}

func (s UpdateRumAppResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s UpdateRumAppResponseBodyData) GoString() string {
	return s.String()
}

func (s *UpdateRumAppResponseBodyData) SetConfig(v string) *UpdateRumAppResponseBodyData {
	s.Config = &v
	return s
}

func (s *UpdateRumAppResponseBodyData) SetLimit(v int32) *UpdateRumAppResponseBodyData {
	s.Limit = &v
	return s
}

func (s *UpdateRumAppResponseBodyData) SetLimited(v bool) *UpdateRumAppResponseBodyData {
	s.Limited = &v
	return s
}

func (s *UpdateRumAppResponseBodyData) SetUsage(v int32) *UpdateRumAppResponseBodyData {
	s.Usage = &v
	return s
}

type UpdateRumAppResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateRumAppResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateRumAppResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateRumAppResponse) GoString() string {
	return s.String()
}

func (s *UpdateRumAppResponse) SetHeaders(v map[string]*string) *UpdateRumAppResponse {
	s.Headers = v
	return s
}

func (s *UpdateRumAppResponse) SetStatusCode(v int32) *UpdateRumAppResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateRumAppResponse) SetBody(v *UpdateRumAppResponseBody) *UpdateRumAppResponse {
	s.Body = v
	return s
}

type UpdateRumFileStatusRequest struct {
	// example:
	//
	// test.js.map
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// example:
	//
	// atc8xxxx
	//
	// cf@d8deedfa9bf****
	Pid *string `json:"Pid,omitempty" xml:"Pid,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// example:
	//
	// 20
	Size *string `json:"Size,omitempty" xml:"Size,omitempty"`
	// example:
	//
	// SUCCESS
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// example:
	//
	// MS4wLjAtbWFpbi4wZjM0NzRlOSxxxxxx
	Uuid *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
	// example:
	//
	// 1.0.0
	VersionId *string `json:"VersionId,omitempty" xml:"VersionId,omitempty"`
}

func (s UpdateRumFileStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateRumFileStatusRequest) GoString() string {
	return s.String()
}

func (s *UpdateRumFileStatusRequest) SetFileName(v string) *UpdateRumFileStatusRequest {
	s.FileName = &v
	return s
}

func (s *UpdateRumFileStatusRequest) SetPid(v string) *UpdateRumFileStatusRequest {
	s.Pid = &v
	return s
}

func (s *UpdateRumFileStatusRequest) SetRegionId(v string) *UpdateRumFileStatusRequest {
	s.RegionId = &v
	return s
}

func (s *UpdateRumFileStatusRequest) SetSize(v string) *UpdateRumFileStatusRequest {
	s.Size = &v
	return s
}

func (s *UpdateRumFileStatusRequest) SetStatus(v string) *UpdateRumFileStatusRequest {
	s.Status = &v
	return s
}

func (s *UpdateRumFileStatusRequest) SetUuid(v string) *UpdateRumFileStatusRequest {
	s.Uuid = &v
	return s
}

func (s *UpdateRumFileStatusRequest) SetVersionId(v string) *UpdateRumFileStatusRequest {
	s.VersionId = &v
	return s
}

type UpdateRumFileStatusResponseBody struct {
	// Id of the request
	//
	// example:
	//
	// 626037F5-FDEB-45B0-804C-B3C92797****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateRumFileStatusResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateRumFileStatusResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateRumFileStatusResponseBody) SetRequestId(v string) *UpdateRumFileStatusResponseBody {
	s.RequestId = &v
	return s
}

type UpdateRumFileStatusResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateRumFileStatusResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateRumFileStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateRumFileStatusResponse) GoString() string {
	return s.String()
}

func (s *UpdateRumFileStatusResponse) SetHeaders(v map[string]*string) *UpdateRumFileStatusResponse {
	s.Headers = v
	return s
}

func (s *UpdateRumFileStatusResponse) SetStatusCode(v int32) *UpdateRumFileStatusResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateRumFileStatusResponse) SetBody(v *UpdateRumFileStatusResponseBody) *UpdateRumFileStatusResponse {
	s.Body = v
	return s
}

type UpdateTimingSyntheticTaskRequest struct {
	// The list of assertions.
	AvailableAssertions []*UpdateTimingSyntheticTaskRequestAvailableAssertions `json:"AvailableAssertions,omitempty" xml:"AvailableAssertions,omitempty" type:"Repeated"`
	// The general settings.
	CommonSetting *UpdateTimingSyntheticTaskRequestCommonSetting `json:"CommonSetting,omitempty" xml:"CommonSetting,omitempty" type:"Struct"`
	// The custom cycle.
	CustomPeriod *UpdateTimingSyntheticTaskRequestCustomPeriod `json:"CustomPeriod,omitempty" xml:"CustomPeriod,omitempty" type:"Struct"`
	// The detection frequency. Valid values: 1m, 5m, 10m, 15m, 20m, 30m, 1h, 2h, 3h, 4h, 6h, 8h, 12h, and 24h.
	//
	// example:
	//
	// 5m
	Frequency *string `json:"Frequency,omitempty" xml:"Frequency,omitempty"`
	// The monitoring configurations.
	MonitorConf *UpdateTimingSyntheticTaskRequestMonitorConf `json:"MonitorConf,omitempty" xml:"MonitorConf,omitempty" type:"Struct"`
	// The list of monitoring points.
	Monitors []*UpdateTimingSyntheticTaskRequestMonitors `json:"Monitors,omitempty" xml:"Monitors,omitempty" type:"Repeated"`
	// The name of the task.
	//
	// example:
	//
	// AlibabaCloud DNS Task
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The region ID.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The resource group ID.
	//
	// example:
	//
	// rg-acfmxyexli2****
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	// The list of tags.
	Tags []*UpdateTimingSyntheticTaskRequestTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
	// The ID of the synthetic monitoring task.
	//
	// example:
	//
	// 5308a2691f59422c8c3b7aeccxxxxxxx
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s UpdateTimingSyntheticTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateTimingSyntheticTaskRequest) GoString() string {
	return s.String()
}

func (s *UpdateTimingSyntheticTaskRequest) SetAvailableAssertions(v []*UpdateTimingSyntheticTaskRequestAvailableAssertions) *UpdateTimingSyntheticTaskRequest {
	s.AvailableAssertions = v
	return s
}

func (s *UpdateTimingSyntheticTaskRequest) SetCommonSetting(v *UpdateTimingSyntheticTaskRequestCommonSetting) *UpdateTimingSyntheticTaskRequest {
	s.CommonSetting = v
	return s
}

func (s *UpdateTimingSyntheticTaskRequest) SetCustomPeriod(v *UpdateTimingSyntheticTaskRequestCustomPeriod) *UpdateTimingSyntheticTaskRequest {
	s.CustomPeriod = v
	return s
}

func (s *UpdateTimingSyntheticTaskRequest) SetFrequency(v string) *UpdateTimingSyntheticTaskRequest {
	s.Frequency = &v
	return s
}

func (s *UpdateTimingSyntheticTaskRequest) SetMonitorConf(v *UpdateTimingSyntheticTaskRequestMonitorConf) *UpdateTimingSyntheticTaskRequest {
	s.MonitorConf = v
	return s
}

func (s *UpdateTimingSyntheticTaskRequest) SetMonitors(v []*UpdateTimingSyntheticTaskRequestMonitors) *UpdateTimingSyntheticTaskRequest {
	s.Monitors = v
	return s
}

func (s *UpdateTimingSyntheticTaskRequest) SetName(v string) *UpdateTimingSyntheticTaskRequest {
	s.Name = &v
	return s
}

func (s *UpdateTimingSyntheticTaskRequest) SetRegionId(v string) *UpdateTimingSyntheticTaskRequest {
	s.RegionId = &v
	return s
}

func (s *UpdateTimingSyntheticTaskRequest) SetResourceGroupId(v string) *UpdateTimingSyntheticTaskRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *UpdateTimingSyntheticTaskRequest) SetTags(v []*UpdateTimingSyntheticTaskRequestTags) *UpdateTimingSyntheticTaskRequest {
	s.Tags = v
	return s
}

func (s *UpdateTimingSyntheticTaskRequest) SetTaskId(v string) *UpdateTimingSyntheticTaskRequest {
	s.TaskId = &v
	return s
}

type UpdateTimingSyntheticTaskRequestAvailableAssertions struct {
	// The expected value.
	//
	// example:
	//
	// 200
	Expect *string `json:"Expect,omitempty" xml:"Expect,omitempty"`
	// The condition. gt: greater than. gte: greater than or equal to. lt: less than. lte: less than or equal to. eq: equal to. neq: not equal to. ctn: contain. nctn: does not contain. exist: exist. n_exist: does not exist. belong: belong to. n_belong: does not belong to. reg_match: regular expression.
	//
	// example:
	//
	// eq
	Operator *string `json:"Operator,omitempty" xml:"Operator,omitempty"`
	// The check target. If you set the type parameter to HttpResCode, HttpResBody, or HttpResponseTime, you do not need to set the target parameter. If you set the type parameter to HttpResHead, you must specify the key in the header. If you set the type parameter to HttpResBodyJson, use jsonPath.
	//
	// example:
	//
	// HttpResponseTime
	Target *string `json:"Target,omitempty" xml:"Target,omitempty"`
	// The assertion type. Valid values: HttpResCode, HttpResHead, HttpResBody, HttpResBodyJson, HttpResponseTime, IcmpPackLoss (packet loss rate), IcmpPackMaxLatency (maximum packet latency), IcmpPackAvgLatency (average packet latency), TraceRouteHops (number of hops), DnsARecord (A record), DnsCName (CNAME), websiteTTFB (time to first packet), websiteTTLB (time to last packet), websiteFST (first paint time), websiteFFST (first meaningful paint), websiteOnload (full loaded time). For more information, see the following description.
	//
	// example:
	//
	// TraceRouteHops
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s UpdateTimingSyntheticTaskRequestAvailableAssertions) String() string {
	return tea.Prettify(s)
}

func (s UpdateTimingSyntheticTaskRequestAvailableAssertions) GoString() string {
	return s.String()
}

func (s *UpdateTimingSyntheticTaskRequestAvailableAssertions) SetExpect(v string) *UpdateTimingSyntheticTaskRequestAvailableAssertions {
	s.Expect = &v
	return s
}

func (s *UpdateTimingSyntheticTaskRequestAvailableAssertions) SetOperator(v string) *UpdateTimingSyntheticTaskRequestAvailableAssertions {
	s.Operator = &v
	return s
}

func (s *UpdateTimingSyntheticTaskRequestAvailableAssertions) SetTarget(v string) *UpdateTimingSyntheticTaskRequestAvailableAssertions {
	s.Target = &v
	return s
}

func (s *UpdateTimingSyntheticTaskRequestAvailableAssertions) SetType(v string) *UpdateTimingSyntheticTaskRequestAvailableAssertions {
	s.Type = &v
	return s
}

type UpdateTimingSyntheticTaskRequestCommonSetting struct {
	// The custom host.
	CustomHost              *UpdateTimingSyntheticTaskRequestCommonSettingCustomHost              `json:"CustomHost,omitempty" xml:"CustomHost,omitempty" type:"Struct"`
	CustomPrometheusSetting *UpdateTimingSyntheticTaskRequestCommonSettingCustomPrometheusSetting `json:"CustomPrometheusSetting,omitempty" xml:"CustomPrometheusSetting,omitempty" type:"Struct"`
	CustomVPCSetting        *UpdateTimingSyntheticTaskRequestCommonSettingCustomVPCSetting        `json:"CustomVPCSetting,omitempty" xml:"CustomVPCSetting,omitempty" type:"Struct"`
	// The IP version. Valid values:
	//
	// 	- 0: A version is automatically selected.
	//
	// 	- 1: IPv4
	//
	// 	- 2: IPv6
	//
	// example:
	//
	// 0
	IpType *int32 `json:"IpType,omitempty" xml:"IpType,omitempty"`
	// 是否开启链路追踪。
	//
	// example:
	//
	// true
	IsOpenTrace *bool `json:"IsOpenTrace,omitempty" xml:"IsOpenTrace,omitempty"`
	// Specifies whether to evenly distribute monitoring samples. Valid values:
	//
	// 	- 0: No
	//
	// 	- 1: Yes
	//
	// example:
	//
	// 0
	MonitorSamples *int32 `json:"MonitorSamples,omitempty" xml:"MonitorSamples,omitempty"`
	// 链路追踪客户端类型：
	//
	// - 0：ARMS Agent
	//
	// - 1：OpenTelemetry
	//
	// - 2：Jaeger
	//
	// example:
	//
	// 1
	TraceClientType *int32 `json:"TraceClientType,omitempty" xml:"TraceClientType,omitempty"`
	// 链路数据上报region。
	//
	// example:
	//
	// cn-hangzhou
	XtraceRegion *string `json:"XtraceRegion,omitempty" xml:"XtraceRegion,omitempty"`
}

func (s UpdateTimingSyntheticTaskRequestCommonSetting) String() string {
	return tea.Prettify(s)
}

func (s UpdateTimingSyntheticTaskRequestCommonSetting) GoString() string {
	return s.String()
}

func (s *UpdateTimingSyntheticTaskRequestCommonSetting) SetCustomHost(v *UpdateTimingSyntheticTaskRequestCommonSettingCustomHost) *UpdateTimingSyntheticTaskRequestCommonSetting {
	s.CustomHost = v
	return s
}

func (s *UpdateTimingSyntheticTaskRequestCommonSetting) SetCustomPrometheusSetting(v *UpdateTimingSyntheticTaskRequestCommonSettingCustomPrometheusSetting) *UpdateTimingSyntheticTaskRequestCommonSetting {
	s.CustomPrometheusSetting = v
	return s
}

func (s *UpdateTimingSyntheticTaskRequestCommonSetting) SetCustomVPCSetting(v *UpdateTimingSyntheticTaskRequestCommonSettingCustomVPCSetting) *UpdateTimingSyntheticTaskRequestCommonSetting {
	s.CustomVPCSetting = v
	return s
}

func (s *UpdateTimingSyntheticTaskRequestCommonSetting) SetIpType(v int32) *UpdateTimingSyntheticTaskRequestCommonSetting {
	s.IpType = &v
	return s
}

func (s *UpdateTimingSyntheticTaskRequestCommonSetting) SetIsOpenTrace(v bool) *UpdateTimingSyntheticTaskRequestCommonSetting {
	s.IsOpenTrace = &v
	return s
}

func (s *UpdateTimingSyntheticTaskRequestCommonSetting) SetMonitorSamples(v int32) *UpdateTimingSyntheticTaskRequestCommonSetting {
	s.MonitorSamples = &v
	return s
}

func (s *UpdateTimingSyntheticTaskRequestCommonSetting) SetTraceClientType(v int32) *UpdateTimingSyntheticTaskRequestCommonSetting {
	s.TraceClientType = &v
	return s
}

func (s *UpdateTimingSyntheticTaskRequestCommonSetting) SetXtraceRegion(v string) *UpdateTimingSyntheticTaskRequestCommonSetting {
	s.XtraceRegion = &v
	return s
}

type UpdateTimingSyntheticTaskRequestCommonSettingCustomHost struct {
	// The list of hosts.
	Hosts []*UpdateTimingSyntheticTaskRequestCommonSettingCustomHostHosts `json:"Hosts,omitempty" xml:"Hosts,omitempty" type:"Repeated"`
	// The selection mode. 0: Random. 1: Polling.
	//
	// example:
	//
	// 0
	SelectType *int32 `json:"SelectType,omitempty" xml:"SelectType,omitempty"`
}

func (s UpdateTimingSyntheticTaskRequestCommonSettingCustomHost) String() string {
	return tea.Prettify(s)
}

func (s UpdateTimingSyntheticTaskRequestCommonSettingCustomHost) GoString() string {
	return s.String()
}

func (s *UpdateTimingSyntheticTaskRequestCommonSettingCustomHost) SetHosts(v []*UpdateTimingSyntheticTaskRequestCommonSettingCustomHostHosts) *UpdateTimingSyntheticTaskRequestCommonSettingCustomHost {
	s.Hosts = v
	return s
}

func (s *UpdateTimingSyntheticTaskRequestCommonSettingCustomHost) SetSelectType(v int32) *UpdateTimingSyntheticTaskRequestCommonSettingCustomHost {
	s.SelectType = &v
	return s
}

type UpdateTimingSyntheticTaskRequestCommonSettingCustomHostHosts struct {
	// The domain name.
	//
	// example:
	//
	// www.aliyun.com
	Domain *string `json:"Domain,omitempty" xml:"Domain,omitempty"`
	// The IP version. Valid values:
	//
	// 	- 0: A version is automatically selected.
	//
	// 	- 1: IPv4
	//
	// 	- 2: IPv6
	//
	// example:
	//
	// 0
	IpType *int32 `json:"IpType,omitempty" xml:"IpType,omitempty"`
	// The list of IP addresses.
	Ips []*string `json:"Ips,omitempty" xml:"Ips,omitempty" type:"Repeated"`
}

func (s UpdateTimingSyntheticTaskRequestCommonSettingCustomHostHosts) String() string {
	return tea.Prettify(s)
}

func (s UpdateTimingSyntheticTaskRequestCommonSettingCustomHostHosts) GoString() string {
	return s.String()
}

func (s *UpdateTimingSyntheticTaskRequestCommonSettingCustomHostHosts) SetDomain(v string) *UpdateTimingSyntheticTaskRequestCommonSettingCustomHostHosts {
	s.Domain = &v
	return s
}

func (s *UpdateTimingSyntheticTaskRequestCommonSettingCustomHostHosts) SetIpType(v int32) *UpdateTimingSyntheticTaskRequestCommonSettingCustomHostHosts {
	s.IpType = &v
	return s
}

func (s *UpdateTimingSyntheticTaskRequestCommonSettingCustomHostHosts) SetIps(v []*string) *UpdateTimingSyntheticTaskRequestCommonSettingCustomHostHosts {
	s.Ips = v
	return s
}

type UpdateTimingSyntheticTaskRequestCommonSettingCustomPrometheusSetting struct {
	PrometheusClusterId     *string            `json:"PrometheusClusterId,omitempty" xml:"PrometheusClusterId,omitempty"`
	PrometheusClusterRegion *string            `json:"PrometheusClusterRegion,omitempty" xml:"PrometheusClusterRegion,omitempty"`
	PrometheusLabels        map[string]*string `json:"PrometheusLabels,omitempty" xml:"PrometheusLabels,omitempty"`
}

func (s UpdateTimingSyntheticTaskRequestCommonSettingCustomPrometheusSetting) String() string {
	return tea.Prettify(s)
}

func (s UpdateTimingSyntheticTaskRequestCommonSettingCustomPrometheusSetting) GoString() string {
	return s.String()
}

func (s *UpdateTimingSyntheticTaskRequestCommonSettingCustomPrometheusSetting) SetPrometheusClusterId(v string) *UpdateTimingSyntheticTaskRequestCommonSettingCustomPrometheusSetting {
	s.PrometheusClusterId = &v
	return s
}

func (s *UpdateTimingSyntheticTaskRequestCommonSettingCustomPrometheusSetting) SetPrometheusClusterRegion(v string) *UpdateTimingSyntheticTaskRequestCommonSettingCustomPrometheusSetting {
	s.PrometheusClusterRegion = &v
	return s
}

func (s *UpdateTimingSyntheticTaskRequestCommonSettingCustomPrometheusSetting) SetPrometheusLabels(v map[string]*string) *UpdateTimingSyntheticTaskRequestCommonSettingCustomPrometheusSetting {
	s.PrometheusLabels = v
	return s
}

type UpdateTimingSyntheticTaskRequestCommonSettingCustomVPCSetting struct {
	RegionId      *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	SecureGroupId *string `json:"SecureGroupId,omitempty" xml:"SecureGroupId,omitempty"`
	VSwitchId     *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	VpcId         *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
}

func (s UpdateTimingSyntheticTaskRequestCommonSettingCustomVPCSetting) String() string {
	return tea.Prettify(s)
}

func (s UpdateTimingSyntheticTaskRequestCommonSettingCustomVPCSetting) GoString() string {
	return s.String()
}

func (s *UpdateTimingSyntheticTaskRequestCommonSettingCustomVPCSetting) SetRegionId(v string) *UpdateTimingSyntheticTaskRequestCommonSettingCustomVPCSetting {
	s.RegionId = &v
	return s
}

func (s *UpdateTimingSyntheticTaskRequestCommonSettingCustomVPCSetting) SetSecureGroupId(v string) *UpdateTimingSyntheticTaskRequestCommonSettingCustomVPCSetting {
	s.SecureGroupId = &v
	return s
}

func (s *UpdateTimingSyntheticTaskRequestCommonSettingCustomVPCSetting) SetVSwitchId(v string) *UpdateTimingSyntheticTaskRequestCommonSettingCustomVPCSetting {
	s.VSwitchId = &v
	return s
}

func (s *UpdateTimingSyntheticTaskRequestCommonSettingCustomVPCSetting) SetVpcId(v string) *UpdateTimingSyntheticTaskRequestCommonSettingCustomVPCSetting {
	s.VpcId = &v
	return s
}

type UpdateTimingSyntheticTaskRequestCustomPeriod struct {
	// The hour at which the test ends. Valid values: 0 to 24.
	//
	// example:
	//
	// 22
	EndHour *int32 `json:"EndHour,omitempty" xml:"EndHour,omitempty"`
	// The hour at which the test starts. Valid values: 0 to 24.
	//
	// example:
	//
	// 14
	StartHour *int32 `json:"StartHour,omitempty" xml:"StartHour,omitempty"`
}

func (s UpdateTimingSyntheticTaskRequestCustomPeriod) String() string {
	return tea.Prettify(s)
}

func (s UpdateTimingSyntheticTaskRequestCustomPeriod) GoString() string {
	return s.String()
}

func (s *UpdateTimingSyntheticTaskRequestCustomPeriod) SetEndHour(v int32) *UpdateTimingSyntheticTaskRequestCustomPeriod {
	s.EndHour = &v
	return s
}

func (s *UpdateTimingSyntheticTaskRequestCustomPeriod) SetStartHour(v int32) *UpdateTimingSyntheticTaskRequestCustomPeriod {
	s.StartHour = &v
	return s
}

type UpdateTimingSyntheticTaskRequestMonitorConf struct {
	// The HTTP(S) synthetic test parameters.
	ApiHTTP *UpdateTimingSyntheticTaskRequestMonitorConfApiHTTP `json:"ApiHTTP,omitempty" xml:"ApiHTTP,omitempty" type:"Struct"`
	// The file download parameters.
	FileDownload *UpdateTimingSyntheticTaskRequestMonitorConfFileDownload `json:"FileDownload,omitempty" xml:"FileDownload,omitempty" type:"Struct"`
	// The DNS synthetic test parameters.
	NetDNS *UpdateTimingSyntheticTaskRequestMonitorConfNetDNS `json:"NetDNS,omitempty" xml:"NetDNS,omitempty" type:"Struct"`
	// The ICMP synthetic test parameters.
	NetICMP *UpdateTimingSyntheticTaskRequestMonitorConfNetICMP `json:"NetICMP,omitempty" xml:"NetICMP,omitempty" type:"Struct"`
	// The TCP synthetic tests parameters. This parameter is required if the TaskType parameter is set to 2.
	NetTCP *UpdateTimingSyntheticTaskRequestMonitorConfNetTCP `json:"NetTCP,omitempty" xml:"NetTCP,omitempty" type:"Struct"`
	// 流媒体拨测配置。
	Stream *UpdateTimingSyntheticTaskRequestMonitorConfStream `json:"Stream,omitempty" xml:"Stream,omitempty" type:"Struct"`
	// The website-speed measurement parameters.
	Website *UpdateTimingSyntheticTaskRequestMonitorConfWebsite `json:"Website,omitempty" xml:"Website,omitempty" type:"Struct"`
}

func (s UpdateTimingSyntheticTaskRequestMonitorConf) String() string {
	return tea.Prettify(s)
}

func (s UpdateTimingSyntheticTaskRequestMonitorConf) GoString() string {
	return s.String()
}

func (s *UpdateTimingSyntheticTaskRequestMonitorConf) SetApiHTTP(v *UpdateTimingSyntheticTaskRequestMonitorConfApiHTTP) *UpdateTimingSyntheticTaskRequestMonitorConf {
	s.ApiHTTP = v
	return s
}

func (s *UpdateTimingSyntheticTaskRequestMonitorConf) SetFileDownload(v *UpdateTimingSyntheticTaskRequestMonitorConfFileDownload) *UpdateTimingSyntheticTaskRequestMonitorConf {
	s.FileDownload = v
	return s
}

func (s *UpdateTimingSyntheticTaskRequestMonitorConf) SetNetDNS(v *UpdateTimingSyntheticTaskRequestMonitorConfNetDNS) *UpdateTimingSyntheticTaskRequestMonitorConf {
	s.NetDNS = v
	return s
}

func (s *UpdateTimingSyntheticTaskRequestMonitorConf) SetNetICMP(v *UpdateTimingSyntheticTaskRequestMonitorConfNetICMP) *UpdateTimingSyntheticTaskRequestMonitorConf {
	s.NetICMP = v
	return s
}

func (s *UpdateTimingSyntheticTaskRequestMonitorConf) SetNetTCP(v *UpdateTimingSyntheticTaskRequestMonitorConfNetTCP) *UpdateTimingSyntheticTaskRequestMonitorConf {
	s.NetTCP = v
	return s
}

func (s *UpdateTimingSyntheticTaskRequestMonitorConf) SetStream(v *UpdateTimingSyntheticTaskRequestMonitorConfStream) *UpdateTimingSyntheticTaskRequestMonitorConf {
	s.Stream = v
	return s
}

func (s *UpdateTimingSyntheticTaskRequestMonitorConf) SetWebsite(v *UpdateTimingSyntheticTaskRequestMonitorConfWebsite) *UpdateTimingSyntheticTaskRequestMonitorConf {
	s.Website = v
	return s
}

type UpdateTimingSyntheticTaskRequestMonitorConfApiHTTP struct {
	CheckCert *bool `json:"CheckCert,omitempty" xml:"CheckCert,omitempty"`
	// The connection timeout period. Unit: milliseconds. Default value: 5000. Minimum value: 1000. Maximum value: 300000.
	//
	// example:
	//
	// 5000
	ConnectTimeout *int64 `json:"ConnectTimeout,omitempty" xml:"ConnectTimeout,omitempty"`
	// The request method.
	//
	// 	- POST
	//
	// 	- GET
	//
	// example:
	//
	// POST
	Method               *string `json:"Method,omitempty" xml:"Method,omitempty"`
	ProtocolAlpnProtocol *int32  `json:"ProtocolAlpnProtocol,omitempty" xml:"ProtocolAlpnProtocol,omitempty"`
	// The HTTP request body.
	RequestBody *UpdateTimingSyntheticTaskRequestMonitorConfApiHTTPRequestBody `json:"RequestBody,omitempty" xml:"RequestBody,omitempty" type:"Struct"`
	// The custom header field.
	RequestHeaders map[string]*string `json:"RequestHeaders,omitempty" xml:"RequestHeaders,omitempty"`
	// The URL or request path for synthetic monitoring.
	//
	// example:
	//
	// https://********
	TargetUrl *string `json:"TargetUrl,omitempty" xml:"TargetUrl,omitempty"`
	// The timeout period. Unit: milliseconds. Default value: 10000. Minimum value: 1000. Maximum value: 300000.
	//
	// example:
	//
	// 5000
	Timeout *int64 `json:"Timeout,omitempty" xml:"Timeout,omitempty"`
}

func (s UpdateTimingSyntheticTaskRequestMonitorConfApiHTTP) String() string {
	return tea.Prettify(s)
}

func (s UpdateTimingSyntheticTaskRequestMonitorConfApiHTTP) GoString() string {
	return s.String()
}

func (s *UpdateTimingSyntheticTaskRequestMonitorConfApiHTTP) SetCheckCert(v bool) *UpdateTimingSyntheticTaskRequestMonitorConfApiHTTP {
	s.CheckCert = &v
	return s
}

func (s *UpdateTimingSyntheticTaskRequestMonitorConfApiHTTP) SetConnectTimeout(v int64) *UpdateTimingSyntheticTaskRequestMonitorConfApiHTTP {
	s.ConnectTimeout = &v
	return s
}

func (s *UpdateTimingSyntheticTaskRequestMonitorConfApiHTTP) SetMethod(v string) *UpdateTimingSyntheticTaskRequestMonitorConfApiHTTP {
	s.Method = &v
	return s
}

func (s *UpdateTimingSyntheticTaskRequestMonitorConfApiHTTP) SetProtocolAlpnProtocol(v int32) *UpdateTimingSyntheticTaskRequestMonitorConfApiHTTP {
	s.ProtocolAlpnProtocol = &v
	return s
}

func (s *UpdateTimingSyntheticTaskRequestMonitorConfApiHTTP) SetRequestBody(v *UpdateTimingSyntheticTaskRequestMonitorConfApiHTTPRequestBody) *UpdateTimingSyntheticTaskRequestMonitorConfApiHTTP {
	s.RequestBody = v
	return s
}

func (s *UpdateTimingSyntheticTaskRequestMonitorConfApiHTTP) SetRequestHeaders(v map[string]*string) *UpdateTimingSyntheticTaskRequestMonitorConfApiHTTP {
	s.RequestHeaders = v
	return s
}

func (s *UpdateTimingSyntheticTaskRequestMonitorConfApiHTTP) SetTargetUrl(v string) *UpdateTimingSyntheticTaskRequestMonitorConfApiHTTP {
	s.TargetUrl = &v
	return s
}

func (s *UpdateTimingSyntheticTaskRequestMonitorConfApiHTTP) SetTimeout(v int64) *UpdateTimingSyntheticTaskRequestMonitorConfApiHTTP {
	s.Timeout = &v
	return s
}

type UpdateTimingSyntheticTaskRequestMonitorConfApiHTTPRequestBody struct {
	// The content of the request body. Format: JSON string. The parameter is required if the type parameter is set to text/plain, application/json, application/xml, or text/html. Format: JSON string.
	//
	// example:
	//
	// {
	//
	//       "key1": "value1",
	//
	//       "key2": "value2"
	//
	// }
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// The type of the request body. Valid values: text/plain, application/json, application/x-www-form-urlencoded, multipart/form-data, application/xml, and text/html.
	//
	// example:
	//
	// application/json
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s UpdateTimingSyntheticTaskRequestMonitorConfApiHTTPRequestBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateTimingSyntheticTaskRequestMonitorConfApiHTTPRequestBody) GoString() string {
	return s.String()
}

func (s *UpdateTimingSyntheticTaskRequestMonitorConfApiHTTPRequestBody) SetContent(v string) *UpdateTimingSyntheticTaskRequestMonitorConfApiHTTPRequestBody {
	s.Content = &v
	return s
}

func (s *UpdateTimingSyntheticTaskRequestMonitorConfApiHTTPRequestBody) SetType(v string) *UpdateTimingSyntheticTaskRequestMonitorConfApiHTTPRequestBody {
	s.Type = &v
	return s
}

type UpdateTimingSyntheticTaskRequestMonitorConfFileDownload struct {
	// The connection timeout period. Unit: milliseconds. Minimum value: 1000. Maximum value: 120000. Default value: 5000.
	//
	// example:
	//
	// 5000
	ConnectionTimeout *int64 `json:"ConnectionTimeout,omitempty" xml:"ConnectionTimeout,omitempty"`
	// The content of the custom request header.
	CustomHeaderContent map[string]*string `json:"CustomHeaderContent,omitempty" xml:"CustomHeaderContent,omitempty"`
	// The kernel type.
	//
	// 	- 1: curl
	//
	// 	- 0: WinInet
	//
	// example:
	//
	// 0
	DownloadKernel *int32 `json:"DownloadKernel,omitempty" xml:"DownloadKernel,omitempty"`
	// Specifies whether to ignore CA certificate authentication errors. 0: No. 1: Yes. Default value: 1.
	//
	// example:
	//
	// 0
	IgnoreCertificateAuthError *int32 `json:"IgnoreCertificateAuthError,omitempty" xml:"IgnoreCertificateAuthError,omitempty"`
	// Specifies whether to ignore certificate revocation errors. 0: No. 1: Yes. Default value: 1.
	//
	// example:
	//
	// 0
	IgnoreCertificateCanceledError *int32 `json:"IgnoreCertificateCanceledError,omitempty" xml:"IgnoreCertificateCanceledError,omitempty"`
	// Specifies whether to ignore certificate invalidity. 0: No. 1: Yes. Default value: 1.
	//
	// example:
	//
	// 0
	IgnoreCertificateOutOfDateError *int32 `json:"IgnoreCertificateOutOfDateError,omitempty" xml:"IgnoreCertificateOutOfDateError,omitempty"`
	// Specifies whether to ignore certificate status errors. 0: No. 1: Yes. Default value: 1.
	//
	// example:
	//
	// 0
	IgnoreCertificateStatusError *int32 `json:"IgnoreCertificateStatusError,omitempty" xml:"IgnoreCertificateStatusError,omitempty"`
	// Specifies whether to ignore certificate incredibility. 0: No. 1: Yes. Default value: 1.
	//
	// example:
	//
	// 0
	IgnoreCertificateUntrustworthyError *int32 `json:"IgnoreCertificateUntrustworthyError,omitempty" xml:"IgnoreCertificateUntrustworthyError,omitempty"`
	// Specifies whether to ignore certificate usage errors. 0: No. 1: Yes. Default value: 1.
	//
	// example:
	//
	// 0
	IgnoreCertificateUsingError *int32 `json:"IgnoreCertificateUsingError,omitempty" xml:"IgnoreCertificateUsingError,omitempty"`
	// Specifies whether to ignore host invalidity. 0: No. 1: Yes. Default value: 1.
	//
	// example:
	//
	// 0
	IgnoreInvalidHostError *int32 `json:"IgnoreInvalidHostError,omitempty" xml:"IgnoreInvalidHostError,omitempty"`
	// The monitoring timeout period. Unit: milliseconds. Minimum value: 1000. Maximum value: 120000. Default value: 60000.
	//
	// example:
	//
	// 60000
	MonitorTimeout *int64 `json:"MonitorTimeout,omitempty" xml:"MonitorTimeout,omitempty"`
	// The QUIC protocol type.
	//
	// 	- 1: http1
	//
	// 	- 2: http2
	//
	// 	- 3: http3
	//
	// example:
	//
	// 1
	QuickProtocol *int32 `json:"QuickProtocol,omitempty" xml:"QuickProtocol,omitempty"`
	// Specifies whether to support redirection. 0: No. 1: Yes. Default value: 1.
	//
	// example:
	//
	// 0
	Redirection *int32 `json:"Redirection,omitempty" xml:"Redirection,omitempty"`
	// The file download URL.
	//
	// example:
	//
	// https://img.alicdn.com/tfs/TB13DzOjXP7gK0jSZFjXXc5aXXa-212-48.png
	TargetUrl *string `json:"TargetUrl,omitempty" xml:"TargetUrl,omitempty"`
	// The maximum file size of a single transfer. Unit: KB. Minimum value: 1. Maximum value: 20480. Valid values: 2048.
	//
	// example:
	//
	// 2048
	TransmissionSize *int64 `json:"TransmissionSize,omitempty" xml:"TransmissionSize,omitempty"`
	// 验证关键词。
	//
	// example:
	//
	// aliyun
	ValidateKeywords *string `json:"ValidateKeywords,omitempty" xml:"ValidateKeywords,omitempty"`
	// 验证方式。
	//
	// - 0：不验证
	//
	// - 1：验证字符串
	//
	// - 2：MD5验证
	//
	// example:
	//
	// 0
	VerifyWay *int32 `json:"VerifyWay,omitempty" xml:"VerifyWay,omitempty"`
	// DNS劫持白名单。匹配规则支持IP、IP通配符、子网掩码和CNAME，可以填写多个匹配规则，多个匹配规则以竖线（|）隔开。例如：www.aliyun.com:203.0.3.55|203.3.44.67，表示www.aliyun.com域名下除203.0.3.55和203.3.44.67之外的其他IP都是被劫持的。
	//
	// example:
	//
	// www.aliyun.com:203.0.3.55|203.3.44.67
	WhiteList *string `json:"WhiteList,omitempty" xml:"WhiteList,omitempty"`
}

func (s UpdateTimingSyntheticTaskRequestMonitorConfFileDownload) String() string {
	return tea.Prettify(s)
}

func (s UpdateTimingSyntheticTaskRequestMonitorConfFileDownload) GoString() string {
	return s.String()
}

func (s *UpdateTimingSyntheticTaskRequestMonitorConfFileDownload) SetConnectionTimeout(v int64) *UpdateTimingSyntheticTaskRequestMonitorConfFileDownload {
	s.ConnectionTimeout = &v
	return s
}

func (s *UpdateTimingSyntheticTaskRequestMonitorConfFileDownload) SetCustomHeaderContent(v map[string]*string) *UpdateTimingSyntheticTaskRequestMonitorConfFileDownload {
	s.CustomHeaderContent = v
	return s
}

func (s *UpdateTimingSyntheticTaskRequestMonitorConfFileDownload) SetDownloadKernel(v int32) *UpdateTimingSyntheticTaskRequestMonitorConfFileDownload {
	s.DownloadKernel = &v
	return s
}

func (s *UpdateTimingSyntheticTaskRequestMonitorConfFileDownload) SetIgnoreCertificateAuthError(v int32) *UpdateTimingSyntheticTaskRequestMonitorConfFileDownload {
	s.IgnoreCertificateAuthError = &v
	return s
}

func (s *UpdateTimingSyntheticTaskRequestMonitorConfFileDownload) SetIgnoreCertificateCanceledError(v int32) *UpdateTimingSyntheticTaskRequestMonitorConfFileDownload {
	s.IgnoreCertificateCanceledError = &v
	return s
}

func (s *UpdateTimingSyntheticTaskRequestMonitorConfFileDownload) SetIgnoreCertificateOutOfDateError(v int32) *UpdateTimingSyntheticTaskRequestMonitorConfFileDownload {
	s.IgnoreCertificateOutOfDateError = &v
	return s
}

func (s *UpdateTimingSyntheticTaskRequestMonitorConfFileDownload) SetIgnoreCertificateStatusError(v int32) *UpdateTimingSyntheticTaskRequestMonitorConfFileDownload {
	s.IgnoreCertificateStatusError = &v
	return s
}

func (s *UpdateTimingSyntheticTaskRequestMonitorConfFileDownload) SetIgnoreCertificateUntrustworthyError(v int32) *UpdateTimingSyntheticTaskRequestMonitorConfFileDownload {
	s.IgnoreCertificateUntrustworthyError = &v
	return s
}

func (s *UpdateTimingSyntheticTaskRequestMonitorConfFileDownload) SetIgnoreCertificateUsingError(v int32) *UpdateTimingSyntheticTaskRequestMonitorConfFileDownload {
	s.IgnoreCertificateUsingError = &v
	return s
}

func (s *UpdateTimingSyntheticTaskRequestMonitorConfFileDownload) SetIgnoreInvalidHostError(v int32) *UpdateTimingSyntheticTaskRequestMonitorConfFileDownload {
	s.IgnoreInvalidHostError = &v
	return s
}

func (s *UpdateTimingSyntheticTaskRequestMonitorConfFileDownload) SetMonitorTimeout(v int64) *UpdateTimingSyntheticTaskRequestMonitorConfFileDownload {
	s.MonitorTimeout = &v
	return s
}

func (s *UpdateTimingSyntheticTaskRequestMonitorConfFileDownload) SetQuickProtocol(v int32) *UpdateTimingSyntheticTaskRequestMonitorConfFileDownload {
	s.QuickProtocol = &v
	return s
}

func (s *UpdateTimingSyntheticTaskRequestMonitorConfFileDownload) SetRedirection(v int32) *UpdateTimingSyntheticTaskRequestMonitorConfFileDownload {
	s.Redirection = &v
	return s
}

func (s *UpdateTimingSyntheticTaskRequestMonitorConfFileDownload) SetTargetUrl(v string) *UpdateTimingSyntheticTaskRequestMonitorConfFileDownload {
	s.TargetUrl = &v
	return s
}

func (s *UpdateTimingSyntheticTaskRequestMonitorConfFileDownload) SetTransmissionSize(v int64) *UpdateTimingSyntheticTaskRequestMonitorConfFileDownload {
	s.TransmissionSize = &v
	return s
}

func (s *UpdateTimingSyntheticTaskRequestMonitorConfFileDownload) SetValidateKeywords(v string) *UpdateTimingSyntheticTaskRequestMonitorConfFileDownload {
	s.ValidateKeywords = &v
	return s
}

func (s *UpdateTimingSyntheticTaskRequestMonitorConfFileDownload) SetVerifyWay(v int32) *UpdateTimingSyntheticTaskRequestMonitorConfFileDownload {
	s.VerifyWay = &v
	return s
}

func (s *UpdateTimingSyntheticTaskRequestMonitorConfFileDownload) SetWhiteList(v string) *UpdateTimingSyntheticTaskRequestMonitorConfFileDownload {
	s.WhiteList = &v
	return s
}

type UpdateTimingSyntheticTaskRequestMonitorConfNetDNS struct {
	// Specifies whether to use dig to display the data. 0: No. 1: Yes.
	//
	// example:
	//
	// 0
	Dig *int32 `json:"Dig,omitempty" xml:"Dig,omitempty"`
	// The IP version of the DNS server. 0: IPv4. 1: IPv6. 2: A version is automatically selected. Default value: 0.
	//
	// example:
	//
	// 0
	DnsServerIpType *int32 `json:"DnsServerIpType,omitempty" xml:"DnsServerIpType,omitempty"`
	// The IP address of the DNS server. Default value: 114.114.114.114.
	//
	// example:
	//
	// 114.114.114.114
	NsServer *string `json:"NsServer,omitempty" xml:"NsServer,omitempty"`
	// The DNS query. 0: recursive, 1: iterative. Default value: 0.
	//
	// example:
	//
	// 0
	QueryMethod *int32 `json:"QueryMethod,omitempty" xml:"QueryMethod,omitempty"`
	// The destination domain name.
	//
	// example:
	//
	// www.aliyun.com
	TargetUrl *string `json:"TargetUrl,omitempty" xml:"TargetUrl,omitempty"`
	// The timeout period for the DNS synthetic test. Unit: milliseconds. The minimum value is 1000 and the maximum value is 45000. Default value: 5000.
	//
	// example:
	//
	// 1000
	Timeout *int64 `json:"Timeout,omitempty" xml:"Timeout,omitempty"`
}

func (s UpdateTimingSyntheticTaskRequestMonitorConfNetDNS) String() string {
	return tea.Prettify(s)
}

func (s UpdateTimingSyntheticTaskRequestMonitorConfNetDNS) GoString() string {
	return s.String()
}

func (s *UpdateTimingSyntheticTaskRequestMonitorConfNetDNS) SetDig(v int32) *UpdateTimingSyntheticTaskRequestMonitorConfNetDNS {
	s.Dig = &v
	return s
}

func (s *UpdateTimingSyntheticTaskRequestMonitorConfNetDNS) SetDnsServerIpType(v int32) *UpdateTimingSyntheticTaskRequestMonitorConfNetDNS {
	s.DnsServerIpType = &v
	return s
}

func (s *UpdateTimingSyntheticTaskRequestMonitorConfNetDNS) SetNsServer(v string) *UpdateTimingSyntheticTaskRequestMonitorConfNetDNS {
	s.NsServer = &v
	return s
}

func (s *UpdateTimingSyntheticTaskRequestMonitorConfNetDNS) SetQueryMethod(v int32) *UpdateTimingSyntheticTaskRequestMonitorConfNetDNS {
	s.QueryMethod = &v
	return s
}

func (s *UpdateTimingSyntheticTaskRequestMonitorConfNetDNS) SetTargetUrl(v string) *UpdateTimingSyntheticTaskRequestMonitorConfNetDNS {
	s.TargetUrl = &v
	return s
}

func (s *UpdateTimingSyntheticTaskRequestMonitorConfNetDNS) SetTimeout(v int64) *UpdateTimingSyntheticTaskRequestMonitorConfNetDNS {
	s.Timeout = &v
	return s
}

type UpdateTimingSyntheticTaskRequestMonitorConfNetICMP struct {
	// The interval at which ICMP packets are sent. Unit: milliseconds. Minimum value: 200. Maximum value: 10000.
	//
	// example:
	//
	// 300
	Interval *int64 `json:"Interval,omitempty" xml:"Interval,omitempty"`
	// The number of ICMP packets that are sent. Minimum value: 1. Maximum value: 50. Default value: 4.
	//
	// example:
	//
	// 4
	PackageNum *int32 `json:"PackageNum,omitempty" xml:"PackageNum,omitempty"`
	// The size of each ICMP packet. Unit: bytes. Valid values: 32, 64, 128, 256, 512, 1024.
	//
	// example:
	//
	// 32
	PackageSize *int32 `json:"PackageSize,omitempty" xml:"PackageSize,omitempty"`
	// Specifies whether to split ICMP packets. Default value: true.
	//
	// example:
	//
	// true
	SplitPackage *bool `json:"SplitPackage,omitempty" xml:"SplitPackage,omitempty"`
	// The destination host IP address or domain name. Port numbers, protocol headers, or request paths are not supported.
	//
	// example:
	//
	// www.aliyun.com
	TargetUrl *string `json:"TargetUrl,omitempty" xml:"TargetUrl,omitempty"`
	// The timeout period for the TCP synthetic test. Unit: milliseconds. Minimum value: 1000. Maximum value: 300000. Default value: 20000.
	//
	// example:
	//
	// 5000
	Timeout *int64 `json:"Timeout,omitempty" xml:"Timeout,omitempty"`
	// Specifies whether to enable the tracert command. Default value: true.
	//
	// example:
	//
	// true
	TracertEnable *bool `json:"TracertEnable,omitempty" xml:"TracertEnable,omitempty"`
	// The maximum number of hops for tracert. Minimum value: 1. Maximum value: 128. Default value: 64.
	//
	// example:
	//
	// 20
	TracertNumMax *int32 `json:"TracertNumMax,omitempty" xml:"TracertNumMax,omitempty"`
	// The timeout period of tracert. Unit: milliseconds. Minimum value: 1000. Maximum value: 300000. Default value: 60000.
	//
	// example:
	//
	// 60000
	TracertTimeout *int64 `json:"TracertTimeout,omitempty" xml:"TracertTimeout,omitempty"`
}

func (s UpdateTimingSyntheticTaskRequestMonitorConfNetICMP) String() string {
	return tea.Prettify(s)
}

func (s UpdateTimingSyntheticTaskRequestMonitorConfNetICMP) GoString() string {
	return s.String()
}

func (s *UpdateTimingSyntheticTaskRequestMonitorConfNetICMP) SetInterval(v int64) *UpdateTimingSyntheticTaskRequestMonitorConfNetICMP {
	s.Interval = &v
	return s
}

func (s *UpdateTimingSyntheticTaskRequestMonitorConfNetICMP) SetPackageNum(v int32) *UpdateTimingSyntheticTaskRequestMonitorConfNetICMP {
	s.PackageNum = &v
	return s
}

func (s *UpdateTimingSyntheticTaskRequestMonitorConfNetICMP) SetPackageSize(v int32) *UpdateTimingSyntheticTaskRequestMonitorConfNetICMP {
	s.PackageSize = &v
	return s
}

func (s *UpdateTimingSyntheticTaskRequestMonitorConfNetICMP) SetSplitPackage(v bool) *UpdateTimingSyntheticTaskRequestMonitorConfNetICMP {
	s.SplitPackage = &v
	return s
}

func (s *UpdateTimingSyntheticTaskRequestMonitorConfNetICMP) SetTargetUrl(v string) *UpdateTimingSyntheticTaskRequestMonitorConfNetICMP {
	s.TargetUrl = &v
	return s
}

func (s *UpdateTimingSyntheticTaskRequestMonitorConfNetICMP) SetTimeout(v int64) *UpdateTimingSyntheticTaskRequestMonitorConfNetICMP {
	s.Timeout = &v
	return s
}

func (s *UpdateTimingSyntheticTaskRequestMonitorConfNetICMP) SetTracertEnable(v bool) *UpdateTimingSyntheticTaskRequestMonitorConfNetICMP {
	s.TracertEnable = &v
	return s
}

func (s *UpdateTimingSyntheticTaskRequestMonitorConfNetICMP) SetTracertNumMax(v int32) *UpdateTimingSyntheticTaskRequestMonitorConfNetICMP {
	s.TracertNumMax = &v
	return s
}

func (s *UpdateTimingSyntheticTaskRequestMonitorConfNetICMP) SetTracertTimeout(v int64) *UpdateTimingSyntheticTaskRequestMonitorConfNetICMP {
	s.TracertTimeout = &v
	return s
}

type UpdateTimingSyntheticTaskRequestMonitorConfNetTCP struct {
	// The number of TCP connections that are established in a test. Minimum value: 1. Maximum value: 16. Default value: 4.
	//
	// example:
	//
	// 4
	ConnectTimes *int32 `json:"ConnectTimes,omitempty" xml:"ConnectTimes,omitempty"`
	// The interval at which TCP connections are established. Unit: milliseconds. Minimum value: 200. Maximum value: 10000. Default value: 200.
	//
	// example:
	//
	// 300
	Interval *int64 `json:"Interval,omitempty" xml:"Interval,omitempty"`
	// The destination host IP address.
	//
	// example:
	//
	// 127.0.0.1:8888
	TargetUrl *string `json:"TargetUrl,omitempty" xml:"TargetUrl,omitempty"`
	// The timeout period for the TCP synthetic test. Unit: milliseconds. Minimum value: 1000. Maximum value: 300000. Default value: 20000.
	//
	// example:
	//
	// 1000
	Timeout *int64 `json:"Timeout,omitempty" xml:"Timeout,omitempty"`
	// Specifies whether to enable the tracert command. Default value: true.
	//
	// example:
	//
	// true
	TracertEnable *bool `json:"TracertEnable,omitempty" xml:"TracertEnable,omitempty"`
	// The maximum number of hops for tracert. Minimum value: 1. Maximum value: 128. Default value: 20.
	//
	// example:
	//
	// 20
	TracertNumMax *int32 `json:"TracertNumMax,omitempty" xml:"TracertNumMax,omitempty"`
	// The timeout period of tracert. Unit: milliseconds. Minimum value: 1000. Maximum value: 300000. Default value: 60000.
	//
	// example:
	//
	// 1000
	TracertTimeout *int64 `json:"TracertTimeout,omitempty" xml:"TracertTimeout,omitempty"`
}

func (s UpdateTimingSyntheticTaskRequestMonitorConfNetTCP) String() string {
	return tea.Prettify(s)
}

func (s UpdateTimingSyntheticTaskRequestMonitorConfNetTCP) GoString() string {
	return s.String()
}

func (s *UpdateTimingSyntheticTaskRequestMonitorConfNetTCP) SetConnectTimes(v int32) *UpdateTimingSyntheticTaskRequestMonitorConfNetTCP {
	s.ConnectTimes = &v
	return s
}

func (s *UpdateTimingSyntheticTaskRequestMonitorConfNetTCP) SetInterval(v int64) *UpdateTimingSyntheticTaskRequestMonitorConfNetTCP {
	s.Interval = &v
	return s
}

func (s *UpdateTimingSyntheticTaskRequestMonitorConfNetTCP) SetTargetUrl(v string) *UpdateTimingSyntheticTaskRequestMonitorConfNetTCP {
	s.TargetUrl = &v
	return s
}

func (s *UpdateTimingSyntheticTaskRequestMonitorConfNetTCP) SetTimeout(v int64) *UpdateTimingSyntheticTaskRequestMonitorConfNetTCP {
	s.Timeout = &v
	return s
}

func (s *UpdateTimingSyntheticTaskRequestMonitorConfNetTCP) SetTracertEnable(v bool) *UpdateTimingSyntheticTaskRequestMonitorConfNetTCP {
	s.TracertEnable = &v
	return s
}

func (s *UpdateTimingSyntheticTaskRequestMonitorConfNetTCP) SetTracertNumMax(v int32) *UpdateTimingSyntheticTaskRequestMonitorConfNetTCP {
	s.TracertNumMax = &v
	return s
}

func (s *UpdateTimingSyntheticTaskRequestMonitorConfNetTCP) SetTracertTimeout(v int64) *UpdateTimingSyntheticTaskRequestMonitorConfNetTCP {
	s.TracertTimeout = &v
	return s
}

type UpdateTimingSyntheticTaskRequestMonitorConfStream struct {
	// 自定义header，JSON Map格式。
	CustomHeaderContent map[string]*string `json:"CustomHeaderContent,omitempty" xml:"CustomHeaderContent,omitempty"`
	// 播放器，不传默认12。
	//
	// - 12：VLC
	//
	// - 2：FlashPlayer
	//
	// example:
	//
	// 2
	PlayerType *int32 `json:"PlayerType,omitempty" xml:"PlayerType,omitempty"`
	// 资源地址类型：
	//
	// - 1：资源地址。
	//
	// - 0：页面地址。不传默认0。
	//
	// example:
	//
	// 1
	StreamAddressType *int32 `json:"StreamAddressType,omitempty" xml:"StreamAddressType,omitempty"`
	// 监测时长，单位秒，最长支持60s，不传默认60。
	//
	// example:
	//
	// 30
	StreamMonitorTimeout *int32 `json:"StreamMonitorTimeout,omitempty" xml:"StreamMonitorTimeout,omitempty"`
	// 音视频标志：0-视频，1-音频。
	//
	// example:
	//
	// 0
	StreamType *int32 `json:"StreamType,omitempty" xml:"StreamType,omitempty"`
	// 流媒体地址。
	//
	// example:
	//
	// http://www.aliyun.com/stream/test.mp4
	TargetUrl *string `json:"TargetUrl,omitempty" xml:"TargetUrl,omitempty"`
	// DNS劫持白名单。匹配规则支持IP、IP通配符、子网掩码和CNAME，可以填写多个匹配规则，多个匹配规则以竖线（|）隔开。例如：www.aliyun.com:203.0.3.55|203.3.44.67，表示www.aliyun.com域名下除203.0.3.55和203.3.44.67之外的其他IP都是被劫持的。
	//
	// example:
	//
	// www.aliyun.com:203.0.3.55|203.3.44.67
	WhiteList *string `json:"WhiteList,omitempty" xml:"WhiteList,omitempty"`
}

func (s UpdateTimingSyntheticTaskRequestMonitorConfStream) String() string {
	return tea.Prettify(s)
}

func (s UpdateTimingSyntheticTaskRequestMonitorConfStream) GoString() string {
	return s.String()
}

func (s *UpdateTimingSyntheticTaskRequestMonitorConfStream) SetCustomHeaderContent(v map[string]*string) *UpdateTimingSyntheticTaskRequestMonitorConfStream {
	s.CustomHeaderContent = v
	return s
}

func (s *UpdateTimingSyntheticTaskRequestMonitorConfStream) SetPlayerType(v int32) *UpdateTimingSyntheticTaskRequestMonitorConfStream {
	s.PlayerType = &v
	return s
}

func (s *UpdateTimingSyntheticTaskRequestMonitorConfStream) SetStreamAddressType(v int32) *UpdateTimingSyntheticTaskRequestMonitorConfStream {
	s.StreamAddressType = &v
	return s
}

func (s *UpdateTimingSyntheticTaskRequestMonitorConfStream) SetStreamMonitorTimeout(v int32) *UpdateTimingSyntheticTaskRequestMonitorConfStream {
	s.StreamMonitorTimeout = &v
	return s
}

func (s *UpdateTimingSyntheticTaskRequestMonitorConfStream) SetStreamType(v int32) *UpdateTimingSyntheticTaskRequestMonitorConfStream {
	s.StreamType = &v
	return s
}

func (s *UpdateTimingSyntheticTaskRequestMonitorConfStream) SetTargetUrl(v string) *UpdateTimingSyntheticTaskRequestMonitorConfStream {
	s.TargetUrl = &v
	return s
}

func (s *UpdateTimingSyntheticTaskRequestMonitorConfStream) SetWhiteList(v string) *UpdateTimingSyntheticTaskRequestMonitorConfStream {
	s.WhiteList = &v
	return s
}

type UpdateTimingSyntheticTaskRequestMonitorConfWebsite struct {
	// Specifies whether to automatically scroll up and down the screen to load a page. 0: No. 1: Yes. Default value: 0.
	//
	// example:
	//
	// 0
	AutomaticScrolling *int32 `json:"AutomaticScrolling,omitempty" xml:"AutomaticScrolling,omitempty"`
	// Specifies whether to create a custom header. 0: No. 1: The first packet is modified. 2: All packets are modified. Default value: 0.
	//
	// example:
	//
	// 0
	CustomHeader *int32 `json:"CustomHeader,omitempty" xml:"CustomHeader,omitempty"`
	// The custom header. Format: JSON map.
	CustomHeaderContent map[string]*string `json:"CustomHeaderContent,omitempty" xml:"CustomHeaderContent,omitempty"`
	// 域名（例如www.aliyun.com）解析时，解析出的IP地址或者CNAME不在DNS劫持白名单内，用户就会访问失败或者返回一个非Aliyun的目标IP；若解析结果中的IP或者CNAME在DNS白名单内，则会被认定为没有发生DNS劫持。
	//
	// 填写格式：域名:匹配规则。匹配规则支持IP、IP通配符、子网掩码和CNAME，可以填写多个匹配规则，多个匹配规则以竖线（|）隔开。例如：www.aliyun.com:203.0.3.55|203.3.44.67，表示www.aliyun.com域名下除203.0.3.55和203.3.44.67之外的其他IP都是被劫持的。
	//
	// example:
	//
	// www.aliyun.com:203.0.3.55|203.3.44.67
	DNSHijackWhitelist *string `json:"DNSHijackWhitelist,omitempty" xml:"DNSHijackWhitelist,omitempty"`
	// Specifies whether to disable the cache. 0: No. 1: Yes. Default value: 1.
	//
	// example:
	//
	// 0
	DisableCache *int32 `json:"DisableCache,omitempty" xml:"DisableCache,omitempty"`
	// Specifies whether to accept compressed files based on the HTTP Accept-Encoding request header. 0: No. 1: Yes. Default value: 0.
	//
	// example:
	//
	// 0
	DisableCompression *int32 `json:"DisableCompression,omitempty" xml:"DisableCompression,omitempty"`
	// 在页面加载过程中如果出现元素黑名单中配置的元素，不会请求加载该元素 。
	//
	// example:
	//
	// a.jpg
	ElementBlacklist *string `json:"ElementBlacklist,omitempty" xml:"ElementBlacklist,omitempty"`
	// Specifies whether to filter invalid IP addresses.
	//
	// 	- 1: No
	//
	// 	- 0: Yes
	//
	// example:
	//
	// 0
	FilterInvalidIP *int32 `json:"FilterInvalidIP,omitempty" xml:"FilterInvalidIP,omitempty"`
	// 识别元素：设置浏览页面元素总个数。
	//
	// example:
	//
	// 1
	FlowHijackJumpTimes *int32 `json:"FlowHijackJumpTimes,omitempty" xml:"FlowHijackJumpTimes,omitempty"`
	// 劫持标识：设置匹配的关键信息。填写劫持判断关键字或关键元素，允许带星号（*）。
	//
	// example:
	//
	// aliyun
	FlowHijackLogo *string `json:"FlowHijackLogo,omitempty" xml:"FlowHijackLogo,omitempty"`
	// Specifies whether to ignore SSL certificate errors during browsing. 0: No. 1: Yes. Default value: 1.
	//
	// example:
	//
	// 0
	IgnoreCertificateError *int32 `json:"IgnoreCertificateError,omitempty" xml:"IgnoreCertificateError,omitempty"`
	// The monitoring timeout period. Unit: milliseconds. Minimum value: 5000. Maximum value: 300000. Default value: 40000.
	//
	// example:
	//
	// 20000
	MonitorTimeout *int64 `json:"MonitorTimeout,omitempty" xml:"MonitorTimeout,omitempty"`
	// 监测页面出现了域名设置之外的元素都属于页面被篡改。常见的表现形式为弹出广告、浮动广告、跳转等。
	//
	// example:
	//
	// www.aliyun.com:|/cc/bb/a.gif|/vv/bb/cc.jpg
	PageTamper *string `json:"PageTamper,omitempty" xml:"PageTamper,omitempty"`
	// Specifies whether to continue browsing after redirection. 0: No, 1:Yes. Default value: 1.
	//
	// example:
	//
	// 0
	Redirection *int32 `json:"Redirection,omitempty" xml:"Redirection,omitempty"`
	// The time threshold that is used to define a slow element. Unit: milliseconds. Default value: 5000. Minimum value: 1. Maximum value: 300000.
	//
	// example:
	//
	// 5000
	SlowElementThreshold *int64 `json:"SlowElementThreshold,omitempty" xml:"SlowElementThreshold,omitempty"`
	// The destination URL.
	//
	// example:
	//
	// https://********
	TargetUrl *string `json:"TargetUrl,omitempty" xml:"TargetUrl,omitempty"`
	// 验证字符串即监测页面源代码中的某个任意字符串。若客户端返回的源码中包含任一黑名单中的字符串则报650验证字符串失败的错误。多个字符串以竖线（|）隔开。
	//
	// example:
	//
	// error
	VerifyStringBlacklist *string `json:"VerifyStringBlacklist,omitempty" xml:"VerifyStringBlacklist,omitempty"`
	// 验证字符串即监测页面源代码中的某个任意字符串。客户端返回的源码必须包含所有白名单中的字符串，否则报650验证字符串失败的错误。多个字符串以竖线（|）隔开。
	//
	// example:
	//
	// success
	VerifyStringWhitelist *string `json:"VerifyStringWhitelist,omitempty" xml:"VerifyStringWhitelist,omitempty"`
	// The maximum waiting time. Unit: milliseconds. Default value: 5000. Minimum value: 5000. Maximum value: 300000.
	//
	// example:
	//
	// 5000
	WaitCompletionTime *int64 `json:"WaitCompletionTime,omitempty" xml:"WaitCompletionTime,omitempty"`
}

func (s UpdateTimingSyntheticTaskRequestMonitorConfWebsite) String() string {
	return tea.Prettify(s)
}

func (s UpdateTimingSyntheticTaskRequestMonitorConfWebsite) GoString() string {
	return s.String()
}

func (s *UpdateTimingSyntheticTaskRequestMonitorConfWebsite) SetAutomaticScrolling(v int32) *UpdateTimingSyntheticTaskRequestMonitorConfWebsite {
	s.AutomaticScrolling = &v
	return s
}

func (s *UpdateTimingSyntheticTaskRequestMonitorConfWebsite) SetCustomHeader(v int32) *UpdateTimingSyntheticTaskRequestMonitorConfWebsite {
	s.CustomHeader = &v
	return s
}

func (s *UpdateTimingSyntheticTaskRequestMonitorConfWebsite) SetCustomHeaderContent(v map[string]*string) *UpdateTimingSyntheticTaskRequestMonitorConfWebsite {
	s.CustomHeaderContent = v
	return s
}

func (s *UpdateTimingSyntheticTaskRequestMonitorConfWebsite) SetDNSHijackWhitelist(v string) *UpdateTimingSyntheticTaskRequestMonitorConfWebsite {
	s.DNSHijackWhitelist = &v
	return s
}

func (s *UpdateTimingSyntheticTaskRequestMonitorConfWebsite) SetDisableCache(v int32) *UpdateTimingSyntheticTaskRequestMonitorConfWebsite {
	s.DisableCache = &v
	return s
}

func (s *UpdateTimingSyntheticTaskRequestMonitorConfWebsite) SetDisableCompression(v int32) *UpdateTimingSyntheticTaskRequestMonitorConfWebsite {
	s.DisableCompression = &v
	return s
}

func (s *UpdateTimingSyntheticTaskRequestMonitorConfWebsite) SetElementBlacklist(v string) *UpdateTimingSyntheticTaskRequestMonitorConfWebsite {
	s.ElementBlacklist = &v
	return s
}

func (s *UpdateTimingSyntheticTaskRequestMonitorConfWebsite) SetFilterInvalidIP(v int32) *UpdateTimingSyntheticTaskRequestMonitorConfWebsite {
	s.FilterInvalidIP = &v
	return s
}

func (s *UpdateTimingSyntheticTaskRequestMonitorConfWebsite) SetFlowHijackJumpTimes(v int32) *UpdateTimingSyntheticTaskRequestMonitorConfWebsite {
	s.FlowHijackJumpTimes = &v
	return s
}

func (s *UpdateTimingSyntheticTaskRequestMonitorConfWebsite) SetFlowHijackLogo(v string) *UpdateTimingSyntheticTaskRequestMonitorConfWebsite {
	s.FlowHijackLogo = &v
	return s
}

func (s *UpdateTimingSyntheticTaskRequestMonitorConfWebsite) SetIgnoreCertificateError(v int32) *UpdateTimingSyntheticTaskRequestMonitorConfWebsite {
	s.IgnoreCertificateError = &v
	return s
}

func (s *UpdateTimingSyntheticTaskRequestMonitorConfWebsite) SetMonitorTimeout(v int64) *UpdateTimingSyntheticTaskRequestMonitorConfWebsite {
	s.MonitorTimeout = &v
	return s
}

func (s *UpdateTimingSyntheticTaskRequestMonitorConfWebsite) SetPageTamper(v string) *UpdateTimingSyntheticTaskRequestMonitorConfWebsite {
	s.PageTamper = &v
	return s
}

func (s *UpdateTimingSyntheticTaskRequestMonitorConfWebsite) SetRedirection(v int32) *UpdateTimingSyntheticTaskRequestMonitorConfWebsite {
	s.Redirection = &v
	return s
}

func (s *UpdateTimingSyntheticTaskRequestMonitorConfWebsite) SetSlowElementThreshold(v int64) *UpdateTimingSyntheticTaskRequestMonitorConfWebsite {
	s.SlowElementThreshold = &v
	return s
}

func (s *UpdateTimingSyntheticTaskRequestMonitorConfWebsite) SetTargetUrl(v string) *UpdateTimingSyntheticTaskRequestMonitorConfWebsite {
	s.TargetUrl = &v
	return s
}

func (s *UpdateTimingSyntheticTaskRequestMonitorConfWebsite) SetVerifyStringBlacklist(v string) *UpdateTimingSyntheticTaskRequestMonitorConfWebsite {
	s.VerifyStringBlacklist = &v
	return s
}

func (s *UpdateTimingSyntheticTaskRequestMonitorConfWebsite) SetVerifyStringWhitelist(v string) *UpdateTimingSyntheticTaskRequestMonitorConfWebsite {
	s.VerifyStringWhitelist = &v
	return s
}

func (s *UpdateTimingSyntheticTaskRequestMonitorConfWebsite) SetWaitCompletionTime(v int64) *UpdateTimingSyntheticTaskRequestMonitorConfWebsite {
	s.WaitCompletionTime = &v
	return s
}

type UpdateTimingSyntheticTaskRequestMonitors struct {
	// The city code.
	//
	// example:
	//
	// 100001
	CityCode *string `json:"CityCode,omitempty" xml:"CityCode,omitempty"`
	// The client type of the monitoring point. Valid values: 1: data center. 2: Internet. 3: mobile device. 4: ECS instance.
	//
	// example:
	//
	// 4
	ClientType *int32 `json:"ClientType,omitempty" xml:"ClientType,omitempty"`
	// The carrier code.
	//
	// example:
	//
	// 1
	OperatorCode *string `json:"OperatorCode,omitempty" xml:"OperatorCode,omitempty"`
}

func (s UpdateTimingSyntheticTaskRequestMonitors) String() string {
	return tea.Prettify(s)
}

func (s UpdateTimingSyntheticTaskRequestMonitors) GoString() string {
	return s.String()
}

func (s *UpdateTimingSyntheticTaskRequestMonitors) SetCityCode(v string) *UpdateTimingSyntheticTaskRequestMonitors {
	s.CityCode = &v
	return s
}

func (s *UpdateTimingSyntheticTaskRequestMonitors) SetClientType(v int32) *UpdateTimingSyntheticTaskRequestMonitors {
	s.ClientType = &v
	return s
}

func (s *UpdateTimingSyntheticTaskRequestMonitors) SetOperatorCode(v string) *UpdateTimingSyntheticTaskRequestMonitors {
	s.OperatorCode = &v
	return s
}

type UpdateTimingSyntheticTaskRequestTags struct {
	// The key of the tag.
	//
	// example:
	//
	// key
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The value of the tag.
	//
	// example:
	//
	// value
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s UpdateTimingSyntheticTaskRequestTags) String() string {
	return tea.Prettify(s)
}

func (s UpdateTimingSyntheticTaskRequestTags) GoString() string {
	return s.String()
}

func (s *UpdateTimingSyntheticTaskRequestTags) SetKey(v string) *UpdateTimingSyntheticTaskRequestTags {
	s.Key = &v
	return s
}

func (s *UpdateTimingSyntheticTaskRequestTags) SetValue(v string) *UpdateTimingSyntheticTaskRequestTags {
	s.Value = &v
	return s
}

type UpdateTimingSyntheticTaskShrinkRequest struct {
	// The list of assertions.
	AvailableAssertionsShrink *string `json:"AvailableAssertions,omitempty" xml:"AvailableAssertions,omitempty"`
	// The general settings.
	CommonSettingShrink *string `json:"CommonSetting,omitempty" xml:"CommonSetting,omitempty"`
	// The custom cycle.
	CustomPeriodShrink *string `json:"CustomPeriod,omitempty" xml:"CustomPeriod,omitempty"`
	// The detection frequency. Valid values: 1m, 5m, 10m, 15m, 20m, 30m, 1h, 2h, 3h, 4h, 6h, 8h, 12h, and 24h.
	//
	// example:
	//
	// 5m
	Frequency *string `json:"Frequency,omitempty" xml:"Frequency,omitempty"`
	// The monitoring configurations.
	MonitorConfShrink *string `json:"MonitorConf,omitempty" xml:"MonitorConf,omitempty"`
	// The list of monitoring points.
	MonitorsShrink *string `json:"Monitors,omitempty" xml:"Monitors,omitempty"`
	// The name of the task.
	//
	// example:
	//
	// AlibabaCloud DNS Task
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The region ID.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The resource group ID.
	//
	// example:
	//
	// rg-acfmxyexli2****
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	// The list of tags.
	TagsShrink *string `json:"Tags,omitempty" xml:"Tags,omitempty"`
	// The ID of the synthetic monitoring task.
	//
	// example:
	//
	// 5308a2691f59422c8c3b7aeccxxxxxxx
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s UpdateTimingSyntheticTaskShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateTimingSyntheticTaskShrinkRequest) GoString() string {
	return s.String()
}

func (s *UpdateTimingSyntheticTaskShrinkRequest) SetAvailableAssertionsShrink(v string) *UpdateTimingSyntheticTaskShrinkRequest {
	s.AvailableAssertionsShrink = &v
	return s
}

func (s *UpdateTimingSyntheticTaskShrinkRequest) SetCommonSettingShrink(v string) *UpdateTimingSyntheticTaskShrinkRequest {
	s.CommonSettingShrink = &v
	return s
}

func (s *UpdateTimingSyntheticTaskShrinkRequest) SetCustomPeriodShrink(v string) *UpdateTimingSyntheticTaskShrinkRequest {
	s.CustomPeriodShrink = &v
	return s
}

func (s *UpdateTimingSyntheticTaskShrinkRequest) SetFrequency(v string) *UpdateTimingSyntheticTaskShrinkRequest {
	s.Frequency = &v
	return s
}

func (s *UpdateTimingSyntheticTaskShrinkRequest) SetMonitorConfShrink(v string) *UpdateTimingSyntheticTaskShrinkRequest {
	s.MonitorConfShrink = &v
	return s
}

func (s *UpdateTimingSyntheticTaskShrinkRequest) SetMonitorsShrink(v string) *UpdateTimingSyntheticTaskShrinkRequest {
	s.MonitorsShrink = &v
	return s
}

func (s *UpdateTimingSyntheticTaskShrinkRequest) SetName(v string) *UpdateTimingSyntheticTaskShrinkRequest {
	s.Name = &v
	return s
}

func (s *UpdateTimingSyntheticTaskShrinkRequest) SetRegionId(v string) *UpdateTimingSyntheticTaskShrinkRequest {
	s.RegionId = &v
	return s
}

func (s *UpdateTimingSyntheticTaskShrinkRequest) SetResourceGroupId(v string) *UpdateTimingSyntheticTaskShrinkRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *UpdateTimingSyntheticTaskShrinkRequest) SetTagsShrink(v string) *UpdateTimingSyntheticTaskShrinkRequest {
	s.TagsShrink = &v
	return s
}

func (s *UpdateTimingSyntheticTaskShrinkRequest) SetTaskId(v string) *UpdateTimingSyntheticTaskShrinkRequest {
	s.TaskId = &v
	return s
}

type UpdateTimingSyntheticTaskResponseBody struct {
	// The status code. The status code 200 indicates that the request was successful. Other status codes indicate that the request failed.
	//
	// example:
	//
	// 200
	Code *int64 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The struct returned.
	Data *UpdateTimingSyntheticTaskResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The message returned.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// F7781D4A-2818-41E7-B7BB-79D809E9****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- `true`
	//
	// 	- `false`
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UpdateTimingSyntheticTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateTimingSyntheticTaskResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateTimingSyntheticTaskResponseBody) SetCode(v int64) *UpdateTimingSyntheticTaskResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateTimingSyntheticTaskResponseBody) SetData(v *UpdateTimingSyntheticTaskResponseBodyData) *UpdateTimingSyntheticTaskResponseBody {
	s.Data = v
	return s
}

func (s *UpdateTimingSyntheticTaskResponseBody) SetMessage(v string) *UpdateTimingSyntheticTaskResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateTimingSyntheticTaskResponseBody) SetRequestId(v string) *UpdateTimingSyntheticTaskResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateTimingSyntheticTaskResponseBody) SetSuccess(v bool) *UpdateTimingSyntheticTaskResponseBody {
	s.Success = &v
	return s
}

type UpdateTimingSyntheticTaskResponseBodyData struct {
	// The task ID.
	//
	// example:
	//
	// 1eeb351722c84e05b52c82fd0dc9953e
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s UpdateTimingSyntheticTaskResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s UpdateTimingSyntheticTaskResponseBodyData) GoString() string {
	return s.String()
}

func (s *UpdateTimingSyntheticTaskResponseBodyData) SetTaskId(v string) *UpdateTimingSyntheticTaskResponseBodyData {
	s.TaskId = &v
	return s
}

type UpdateTimingSyntheticTaskResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateTimingSyntheticTaskResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateTimingSyntheticTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateTimingSyntheticTaskResponse) GoString() string {
	return s.String()
}

func (s *UpdateTimingSyntheticTaskResponse) SetHeaders(v map[string]*string) *UpdateTimingSyntheticTaskResponse {
	s.Headers = v
	return s
}

func (s *UpdateTimingSyntheticTaskResponse) SetStatusCode(v int32) *UpdateTimingSyntheticTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateTimingSyntheticTaskResponse) SetBody(v *UpdateTimingSyntheticTaskResponseBody) *UpdateTimingSyntheticTaskResponse {
	s.Body = v
	return s
}

type UpdateWebhookRequest struct {
	// The notification template that is sent when an alert is triggered. This parameter is required if the **Method*	- parameter is set to **Post**. You can use the $content placeholder to specify the notification content. The content cannot exceed 500 characters in length.
	//
	// This parameter is required.
	//
	// example:
	//
	// { "Alert name":"{{ .commonLabels.alertname }}{{if .commonLabels.clustername }}", "Cluster name":"{{ .commonLabels.clustername }} {{ end }}{{if eq "app" .commonLabels._aliyun_arms_involvedObject_kind }}", "Application name":"{{ .commonLabels._aliyun_arms_involvedObject_name }} {{ end }}", "Notification policy":"{{ .dispatchRuleName }}", "Alert time":"{{ .startTime }}", "Alert content":"{{ for .alerts }} {{ .annotations.message }} {{ end }}" }
	Body *string `json:"Body,omitempty" xml:"Body,omitempty"`
	// The ID of the webhook alert contact. You can call the **SearchAlertContact*	- operation to obtain the ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 48716
	ContactId *int64 `json:"ContactId,omitempty" xml:"ContactId,omitempty"`
	// The name of the webhook alert contact.
	//
	// This parameter is required.
	//
	// example:
	//
	// Webhook alert
	ContactName *string `json:"ContactName,omitempty" xml:"ContactName,omitempty"`
	// The HTTP request headers.
	//
	// example:
	//
	// [{"Content-Type":"application/json"}]
	HttpHeaders *string `json:"HttpHeaders,omitempty" xml:"HttpHeaders,omitempty"`
	// The parameters in the HTTP request.
	//
	// example:
	//
	// [{"name":"mike"}]
	HttpParams *string `json:"HttpParams,omitempty" xml:"HttpParams,omitempty"`
	// The HTTP request method. Valid values:
	//
	// 	- `Get`
	//
	// 	- `Post`
	//
	// This parameter is required.
	//
	// example:
	//
	// Post
	Method *string `json:"Method,omitempty" xml:"Method,omitempty"`
	// The notification template that is sent when an alert is resolved. This parameter is required if the **Method*	- parameter is set to **Post**. You can use the $content placeholder to specify the notification content. The content cannot exceed 500 characters in length.
	//
	// example:
	//
	// { "Alert name":"{{ .commonLabels.alertname }}{{if .commonLabels.clustername }}", "Cluster name":"{{ .commonLabels.clustername }} {{ end }}{{if eq "app" .commonLabels._aliyun_arms_involvedObject_kind }}", "Application name":"{{ .commonLabels._aliyun_arms_involvedObject_name }} {{ end }}", "Notification policy":"{{ .dispatchRuleName }}", "Recovery time":"{{ .endTime }}", "Alert content":"{{ for .alerts }} {{ .annotations.message }} {{ end }}" }
	RecoverBody *string `json:"RecoverBody,omitempty" xml:"RecoverBody,omitempty"`
	// The ID of the region.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The URL of the HTTP request method.
	//
	// This parameter is required.
	//
	// example:
	//
	// https://oapi.dingtalk.com/robot/send?access_token=e1a049121ddbfce1ca963d115ef88cc7219583c4fb79fe6e398fbfb688******
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s UpdateWebhookRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateWebhookRequest) GoString() string {
	return s.String()
}

func (s *UpdateWebhookRequest) SetBody(v string) *UpdateWebhookRequest {
	s.Body = &v
	return s
}

func (s *UpdateWebhookRequest) SetContactId(v int64) *UpdateWebhookRequest {
	s.ContactId = &v
	return s
}

func (s *UpdateWebhookRequest) SetContactName(v string) *UpdateWebhookRequest {
	s.ContactName = &v
	return s
}

func (s *UpdateWebhookRequest) SetHttpHeaders(v string) *UpdateWebhookRequest {
	s.HttpHeaders = &v
	return s
}

func (s *UpdateWebhookRequest) SetHttpParams(v string) *UpdateWebhookRequest {
	s.HttpParams = &v
	return s
}

func (s *UpdateWebhookRequest) SetMethod(v string) *UpdateWebhookRequest {
	s.Method = &v
	return s
}

func (s *UpdateWebhookRequest) SetRecoverBody(v string) *UpdateWebhookRequest {
	s.RecoverBody = &v
	return s
}

func (s *UpdateWebhookRequest) SetRegionId(v string) *UpdateWebhookRequest {
	s.RegionId = &v
	return s
}

func (s *UpdateWebhookRequest) SetUrl(v string) *UpdateWebhookRequest {
	s.Url = &v
	return s
}

type UpdateWebhookResponseBody struct {
	// The result returned. Valid values:
	//
	// 	- `true`: The modification is successful.
	//
	// 	- `false`: The modification fails.
	//
	// example:
	//
	// true
	IsSuccess *bool `json:"IsSuccess,omitempty" xml:"IsSuccess,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 16AF921B-8187-489F-9913-43C808B4****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateWebhookResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateWebhookResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateWebhookResponseBody) SetIsSuccess(v bool) *UpdateWebhookResponseBody {
	s.IsSuccess = &v
	return s
}

func (s *UpdateWebhookResponseBody) SetRequestId(v string) *UpdateWebhookResponseBody {
	s.RequestId = &v
	return s
}

type UpdateWebhookResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateWebhookResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateWebhookResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateWebhookResponse) GoString() string {
	return s.String()
}

func (s *UpdateWebhookResponse) SetHeaders(v map[string]*string) *UpdateWebhookResponse {
	s.Headers = v
	return s
}

func (s *UpdateWebhookResponse) SetStatusCode(v int32) *UpdateWebhookResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateWebhookResponse) SetBody(v *UpdateWebhookResponseBody) *UpdateWebhookResponse {
	s.Body = v
	return s
}

type UpgradeAddonReleaseRequest struct {
	// Version of Addon.
	//
	// This parameter is required.
	//
	// example:
	//
	// 0.0.2
	AddonVersion *string `json:"AddonVersion,omitempty" xml:"AddonVersion,omitempty"`
	// Whether to pre-check this request.
	//
	// example:
	//
	// false
	DryRun *bool `json:"DryRun,omitempty" xml:"DryRun,omitempty"`
	// Environment ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// env-xxx
	EnvironmentId *string `json:"EnvironmentId,omitempty" xml:"EnvironmentId,omitempty"`
	// The ID of the region.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The name of Release.
	//
	// This parameter is required.
	//
	// example:
	//
	// mysql-1695372983039
	ReleaseName *string `json:"ReleaseName,omitempty" xml:"ReleaseName,omitempty"`
	// Metadata information.
	//
	// This parameter is required.
	//
	// example:
	//
	// {"host":"mysql-service.default","port":3306,"username":"root","password":"roots"}
	Values *string `json:"Values,omitempty" xml:"Values,omitempty"`
}

func (s UpgradeAddonReleaseRequest) String() string {
	return tea.Prettify(s)
}

func (s UpgradeAddonReleaseRequest) GoString() string {
	return s.String()
}

func (s *UpgradeAddonReleaseRequest) SetAddonVersion(v string) *UpgradeAddonReleaseRequest {
	s.AddonVersion = &v
	return s
}

func (s *UpgradeAddonReleaseRequest) SetDryRun(v bool) *UpgradeAddonReleaseRequest {
	s.DryRun = &v
	return s
}

func (s *UpgradeAddonReleaseRequest) SetEnvironmentId(v string) *UpgradeAddonReleaseRequest {
	s.EnvironmentId = &v
	return s
}

func (s *UpgradeAddonReleaseRequest) SetRegionId(v string) *UpgradeAddonReleaseRequest {
	s.RegionId = &v
	return s
}

func (s *UpgradeAddonReleaseRequest) SetReleaseName(v string) *UpgradeAddonReleaseRequest {
	s.ReleaseName = &v
	return s
}

func (s *UpgradeAddonReleaseRequest) SetValues(v string) *UpgradeAddonReleaseRequest {
	s.Values = &v
	return s
}

type UpgradeAddonReleaseResponseBody struct {
	// The status code. 200 indicates success.
	//
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// Return a message.
	//
	// example:
	//
	// success
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// The information returned when the request parameter is incorrect.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	//
	// example:
	//
	// 27E653FA-5958-45BE-8AA9-14D884DC****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Whether the call was successful.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UpgradeAddonReleaseResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpgradeAddonReleaseResponseBody) GoString() string {
	return s.String()
}

func (s *UpgradeAddonReleaseResponseBody) SetCode(v int32) *UpgradeAddonReleaseResponseBody {
	s.Code = &v
	return s
}

func (s *UpgradeAddonReleaseResponseBody) SetData(v string) *UpgradeAddonReleaseResponseBody {
	s.Data = &v
	return s
}

func (s *UpgradeAddonReleaseResponseBody) SetMessage(v string) *UpgradeAddonReleaseResponseBody {
	s.Message = &v
	return s
}

func (s *UpgradeAddonReleaseResponseBody) SetRequestId(v string) *UpgradeAddonReleaseResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpgradeAddonReleaseResponseBody) SetSuccess(v bool) *UpgradeAddonReleaseResponseBody {
	s.Success = &v
	return s
}

type UpgradeAddonReleaseResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpgradeAddonReleaseResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpgradeAddonReleaseResponse) String() string {
	return tea.Prettify(s)
}

func (s UpgradeAddonReleaseResponse) GoString() string {
	return s.String()
}

func (s *UpgradeAddonReleaseResponse) SetHeaders(v map[string]*string) *UpgradeAddonReleaseResponse {
	s.Headers = v
	return s
}

func (s *UpgradeAddonReleaseResponse) SetStatusCode(v int32) *UpgradeAddonReleaseResponse {
	s.StatusCode = &v
	return s
}

func (s *UpgradeAddonReleaseResponse) SetBody(v *UpgradeAddonReleaseResponseBody) *UpgradeAddonReleaseResponse {
	s.Body = v
	return s
}

type UpgradeEnvironmentFeatureRequest struct {
	// example:
	//
	// zh
	AliyunLang *string `json:"AliyunLang,omitempty" xml:"AliyunLang,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// env-xxx
	EnvironmentId *string `json:"EnvironmentId,omitempty" xml:"EnvironmentId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// metric-agent
	FeatureName *string `json:"FeatureName,omitempty" xml:"FeatureName,omitempty"`
	// example:
	//
	// 1.1.17
	FeatureVersion *string `json:"FeatureVersion,omitempty" xml:"FeatureVersion,omitempty"`
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// example:
	//
	// {"PodAnnotation":"run"}
	Values *string `json:"Values,omitempty" xml:"Values,omitempty"`
}

func (s UpgradeEnvironmentFeatureRequest) String() string {
	return tea.Prettify(s)
}

func (s UpgradeEnvironmentFeatureRequest) GoString() string {
	return s.String()
}

func (s *UpgradeEnvironmentFeatureRequest) SetAliyunLang(v string) *UpgradeEnvironmentFeatureRequest {
	s.AliyunLang = &v
	return s
}

func (s *UpgradeEnvironmentFeatureRequest) SetEnvironmentId(v string) *UpgradeEnvironmentFeatureRequest {
	s.EnvironmentId = &v
	return s
}

func (s *UpgradeEnvironmentFeatureRequest) SetFeatureName(v string) *UpgradeEnvironmentFeatureRequest {
	s.FeatureName = &v
	return s
}

func (s *UpgradeEnvironmentFeatureRequest) SetFeatureVersion(v string) *UpgradeEnvironmentFeatureRequest {
	s.FeatureVersion = &v
	return s
}

func (s *UpgradeEnvironmentFeatureRequest) SetRegionId(v string) *UpgradeEnvironmentFeatureRequest {
	s.RegionId = &v
	return s
}

func (s *UpgradeEnvironmentFeatureRequest) SetValues(v string) *UpgradeEnvironmentFeatureRequest {
	s.Values = &v
	return s
}

type UpgradeEnvironmentFeatureResponseBody struct {
	// example:
	//
	// 200
	Code *int32             `json:"Code,omitempty" xml:"Code,omitempty"`
	Data map[string]*string `json:"Data,omitempty" xml:"Data,omitempty"`
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	//
	// example:
	//
	// 01FF8DD9-A09C-47A1-895A-B6E321BE77B6
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UpgradeEnvironmentFeatureResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpgradeEnvironmentFeatureResponseBody) GoString() string {
	return s.String()
}

func (s *UpgradeEnvironmentFeatureResponseBody) SetCode(v int32) *UpgradeEnvironmentFeatureResponseBody {
	s.Code = &v
	return s
}

func (s *UpgradeEnvironmentFeatureResponseBody) SetData(v map[string]*string) *UpgradeEnvironmentFeatureResponseBody {
	s.Data = v
	return s
}

func (s *UpgradeEnvironmentFeatureResponseBody) SetMessage(v string) *UpgradeEnvironmentFeatureResponseBody {
	s.Message = &v
	return s
}

func (s *UpgradeEnvironmentFeatureResponseBody) SetRequestId(v string) *UpgradeEnvironmentFeatureResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpgradeEnvironmentFeatureResponseBody) SetSuccess(v bool) *UpgradeEnvironmentFeatureResponseBody {
	s.Success = &v
	return s
}

type UpgradeEnvironmentFeatureResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpgradeEnvironmentFeatureResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpgradeEnvironmentFeatureResponse) String() string {
	return tea.Prettify(s)
}

func (s UpgradeEnvironmentFeatureResponse) GoString() string {
	return s.String()
}

func (s *UpgradeEnvironmentFeatureResponse) SetHeaders(v map[string]*string) *UpgradeEnvironmentFeatureResponse {
	s.Headers = v
	return s
}

func (s *UpgradeEnvironmentFeatureResponse) SetStatusCode(v int32) *UpgradeEnvironmentFeatureResponse {
	s.StatusCode = &v
	return s
}

func (s *UpgradeEnvironmentFeatureResponse) SetBody(v *UpgradeEnvironmentFeatureResponseBody) *UpgradeEnvironmentFeatureResponse {
	s.Body = v
	return s
}

type UploadRequest struct {
	// The version of the SourceMap file.
	//
	// example:
	//
	// 0.0.0
	Edition *string `json:"Edition,omitempty" xml:"Edition,omitempty"`
	// The content of the SourceMap file.
	//
	// example:
	//
	// test file content
	File *string `json:"File,omitempty" xml:"File,omitempty"`
	// The name of the SourceMap file.
	//
	// This parameter is required.
	//
	// example:
	//
	// test.js.map
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// The application ID.
	//
	// Log on to the **ARMS console**. In the left-side navigation pane, choose **Browser Monitoring*	- > **Browser Monitoring**. On the Browser Monitoring page, click the name of an application. The URL in the address bar contains the process ID (PID) of the application. The PID is indicated in the pid=xxx format. The PID is usually percent encoded as xxx%40xxx. You must modify this value to remove the percent encoding. For example, if the PID in the URL is eb4zdose6v%409781be0f44d\\*\\*\\*\\*, you must replace %40 with @ to obtain eb4zdose6v@9781be0f44d\\*\\*\\*\\*.
	//
	// This parameter is required.
	//
	// example:
	//
	// b590lhguqs@8cc3f6354******
	Pid *string `json:"Pid,omitempty" xml:"Pid,omitempty"`
	// The ID of the region to which the SourceMap file is uploaded.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// We recommend that you do not specify this parameter.
	//
	// example:
	//
	// null
	Version *string `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s UploadRequest) String() string {
	return tea.Prettify(s)
}

func (s UploadRequest) GoString() string {
	return s.String()
}

func (s *UploadRequest) SetEdition(v string) *UploadRequest {
	s.Edition = &v
	return s
}

func (s *UploadRequest) SetFile(v string) *UploadRequest {
	s.File = &v
	return s
}

func (s *UploadRequest) SetFileName(v string) *UploadRequest {
	s.FileName = &v
	return s
}

func (s *UploadRequest) SetPid(v string) *UploadRequest {
	s.Pid = &v
	return s
}

func (s *UploadRequest) SetRegionId(v string) *UploadRequest {
	s.RegionId = &v
	return s
}

func (s *UploadRequest) SetVersion(v string) *UploadRequest {
	s.Version = &v
	return s
}

type UploadResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// A5EC8221-08F2-4C95-9AF1-49FD998C****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The returned data.
	UploadResult *UploadResponseBodyUploadResult `json:"UploadResult,omitempty" xml:"UploadResult,omitempty" type:"Struct"`
}

func (s UploadResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UploadResponseBody) GoString() string {
	return s.String()
}

func (s *UploadResponseBody) SetRequestId(v string) *UploadResponseBody {
	s.RequestId = &v
	return s
}

func (s *UploadResponseBody) SetUploadResult(v *UploadResponseBodyUploadResult) *UploadResponseBody {
	s.UploadResult = v
	return s
}

type UploadResponseBodyUploadResult struct {
	// The ID of the SourceMap file.
	//
	// example:
	//
	// 123
	Fid *string `json:"Fid,omitempty" xml:"Fid,omitempty"`
	// The name of the SourceMap file.
	//
	// example:
	//
	// test.js.map
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// The time when the file was uploaded.
	//
	// example:
	//
	// 1650272251
	UploadTime *string `json:"UploadTime,omitempty" xml:"UploadTime,omitempty"`
}

func (s UploadResponseBodyUploadResult) String() string {
	return tea.Prettify(s)
}

func (s UploadResponseBodyUploadResult) GoString() string {
	return s.String()
}

func (s *UploadResponseBodyUploadResult) SetFid(v string) *UploadResponseBodyUploadResult {
	s.Fid = &v
	return s
}

func (s *UploadResponseBodyUploadResult) SetFileName(v string) *UploadResponseBodyUploadResult {
	s.FileName = &v
	return s
}

func (s *UploadResponseBodyUploadResult) SetUploadTime(v string) *UploadResponseBodyUploadResult {
	s.UploadTime = &v
	return s
}

type UploadResponse struct {
	Headers    map[string]*string  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UploadResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UploadResponse) String() string {
	return tea.Prettify(s)
}

func (s UploadResponse) GoString() string {
	return s.String()
}

func (s *UploadResponse) SetHeaders(v map[string]*string) *UploadResponse {
	s.Headers = v
	return s
}

func (s *UploadResponse) SetStatusCode(v int32) *UploadResponse {
	s.StatusCode = &v
	return s
}

func (s *UploadResponse) SetBody(v *UploadResponseBody) *UploadResponse {
	s.Body = v
	return s
}

type Client struct {
	openapi.Client
}

func NewClient(config *openapi.Config) (*Client, error) {
	client := new(Client)
	err := client.Init(config)
	return client, err
}

func (client *Client) Init(config *openapi.Config) (_err error) {
	_err = client.Client.Init(config)
	if _err != nil {
		return _err
	}
	client.SignatureAlgorithm = tea.String("v2")
	client.EndpointRule = tea.String("regional")
	client.EndpointMap = map[string]*string{
		"ap-northeast-2-pop":          tea.String("arms.aliyuncs.com"),
		"cn-beijing-finance-1":        tea.String("arms.aliyuncs.com"),
		"cn-beijing-finance-pop":      tea.String("arms.aliyuncs.com"),
		"cn-beijing-gov-1":            tea.String("arms.aliyuncs.com"),
		"cn-beijing-nu16-b01":         tea.String("arms.aliyuncs.com"),
		"cn-edge-1":                   tea.String("arms.aliyuncs.com"),
		"cn-fujian":                   tea.String("arms.aliyuncs.com"),
		"cn-haidian-cm12-c01":         tea.String("arms.aliyuncs.com"),
		"cn-hangzhou-bj-b01":          tea.String("arms.aliyuncs.com"),
		"cn-hangzhou-internal-prod-1": tea.String("arms.aliyuncs.com"),
		"cn-hangzhou-internal-test-1": tea.String("arms.aliyuncs.com"),
		"cn-hangzhou-internal-test-2": tea.String("arms.aliyuncs.com"),
		"cn-hangzhou-internal-test-3": tea.String("arms.aliyuncs.com"),
		"cn-hangzhou-test-306":        tea.String("arms.aliyuncs.com"),
		"cn-hongkong-finance-pop":     tea.String("arms.aliyuncs.com"),
		"cn-huhehaote-nebula-1":       tea.String("arms.aliyuncs.com"),
		"cn-qingdao-nebula":           tea.String("arms.aliyuncs.com"),
		"cn-shanghai-et15-b01":        tea.String("arms.aliyuncs.com"),
		"cn-shanghai-et2-b01":         tea.String("arms.aliyuncs.com"),
		"cn-shanghai-inner":           tea.String("arms.aliyuncs.com"),
		"cn-shanghai-internal-test-1": tea.String("arms.aliyuncs.com"),
		"cn-shenzhen-inner":           tea.String("arms.aliyuncs.com"),
		"cn-shenzhen-st4-d01":         tea.String("arms.aliyuncs.com"),
		"cn-shenzhen-su18-b01":        tea.String("arms.aliyuncs.com"),
		"cn-wuhan":                    tea.String("arms.aliyuncs.com"),
		"cn-yushanfang":               tea.String("arms.aliyuncs.com"),
		"cn-zhangbei":                 tea.String("arms.aliyuncs.com"),
		"cn-zhangbei-na61-b01":        tea.String("arms.aliyuncs.com"),
		"cn-zhangjiakou-na62-a01":     tea.String("arms.aliyuncs.com"),
		"cn-zhengzhou-nebula-1":       tea.String("arms.aliyuncs.com"),
		"eu-west-1-oxs":               tea.String("arms.aliyuncs.com"),
		"me-east-1":                   tea.String("arms.aliyuncs.com"),
		"rus-west-1-pop":              tea.String("arms.aliyuncs.com"),
	}
	_err = client.CheckConfig(config)
	if _err != nil {
		return _err
	}
	client.Endpoint, _err = client.GetEndpoint(tea.String("arms"), client.RegionId, client.EndpointRule, client.Network, client.Suffix, client.EndpointMap, client.Endpoint)
	if _err != nil {
		return _err
	}

	return nil
}

func (client *Client) GetEndpoint(productId *string, regionId *string, endpointRule *string, network *string, suffix *string, endpointMap map[string]*string, endpoint *string) (_result *string, _err error) {
	if !tea.BoolValue(util.Empty(endpoint)) {
		_result = endpoint
		return _result, _err
	}

	if !tea.BoolValue(util.IsUnset(endpointMap)) && !tea.BoolValue(util.Empty(endpointMap[tea.StringValue(regionId)])) {
		_result = endpointMap[tea.StringValue(regionId)]
		return _result, _err
	}

	_body, _err := endpointutil.GetEndpointRules(productId, regionId, endpointRule, network, suffix)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Adds data sources to a global aggregation instance in Prometheus Service.
//
// @param request - AddAliClusterIdsToPrometheusGlobalViewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddAliClusterIdsToPrometheusGlobalViewResponse
func (client *Client) AddAliClusterIdsToPrometheusGlobalViewWithOptions(request *AddAliClusterIdsToPrometheusGlobalViewRequest, runtime *util.RuntimeOptions) (_result *AddAliClusterIdsToPrometheusGlobalViewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterIds)) {
		query["ClusterIds"] = request.ClusterIds
	}

	if !tea.BoolValue(util.IsUnset(request.GlobalViewClusterId)) {
		query["GlobalViewClusterId"] = request.GlobalViewClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.GroupName)) {
		query["GroupName"] = request.GroupName
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddAliClusterIdsToPrometheusGlobalView"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddAliClusterIdsToPrometheusGlobalViewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Adds data sources to a global aggregation instance in Prometheus Service.
//
// @param request - AddAliClusterIdsToPrometheusGlobalViewRequest
//
// @return AddAliClusterIdsToPrometheusGlobalViewResponse
func (client *Client) AddAliClusterIdsToPrometheusGlobalView(request *AddAliClusterIdsToPrometheusGlobalViewRequest) (_result *AddAliClusterIdsToPrometheusGlobalViewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddAliClusterIdsToPrometheusGlobalViewResponse{}
	_body, _err := client.AddAliClusterIdsToPrometheusGlobalViewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Integrates the dashboard of Prometheus Service.
//
// @param request - AddGrafanaRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddGrafanaResponse
func (client *Client) AddGrafanaWithOptions(request *AddGrafanaRequest, runtime *util.RuntimeOptions) (_result *AddGrafanaResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.Integration)) {
		query["Integration"] = request.Integration
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddGrafana"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddGrafanaResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Integrates the dashboard of Prometheus Service.
//
// @param request - AddGrafanaRequest
//
// @return AddGrafanaResponse
func (client *Client) AddGrafana(request *AddGrafanaRequest) (_result *AddGrafanaResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddGrafanaResponse{}
	_body, _err := client.AddGrafanaWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Deprecated: OpenAPI AddIntegration is deprecated, please use ARMS::2019-08-08::InstallAddon instead.
//
// Summary:
//
// 接入integration
//
// @param request - AddIntegrationRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddIntegrationResponse
// Deprecated
func (client *Client) AddIntegrationWithOptions(request *AddIntegrationRequest, runtime *util.RuntimeOptions) (_result *AddIntegrationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.Integration)) {
		query["Integration"] = request.Integration
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddIntegration"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddIntegrationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Deprecated: OpenAPI AddIntegration is deprecated, please use ARMS::2019-08-08::InstallAddon instead.
//
// Summary:
//
// 接入integration
//
// @param request - AddIntegrationRequest
//
// @return AddIntegrationResponse
// Deprecated
func (client *Client) AddIntegration(request *AddIntegrationRequest) (_result *AddIntegrationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddIntegrationResponse{}
	_body, _err := client.AddIntegrationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Adds a global aggregation instance in Prometheus Service.
//
// @param request - AddPrometheusGlobalViewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddPrometheusGlobalViewResponse
func (client *Client) AddPrometheusGlobalViewWithOptions(request *AddPrometheusGlobalViewRequest, runtime *util.RuntimeOptions) (_result *AddPrometheusGlobalViewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Clusters)) {
		query["Clusters"] = request.Clusters
	}

	if !tea.BoolValue(util.IsUnset(request.GroupName)) {
		query["GroupName"] = request.GroupName
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddPrometheusGlobalView"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddPrometheusGlobalViewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Adds a global aggregation instance in Prometheus Service.
//
// @param request - AddPrometheusGlobalViewRequest
//
// @return AddPrometheusGlobalViewResponse
func (client *Client) AddPrometheusGlobalView(request *AddPrometheusGlobalViewRequest) (_result *AddPrometheusGlobalViewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddPrometheusGlobalViewResponse{}
	_body, _err := client.AddPrometheusGlobalViewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a global aggregation instance in Prometheus Service.
//
// @param request - AddPrometheusGlobalViewByAliClusterIdsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddPrometheusGlobalViewByAliClusterIdsResponse
func (client *Client) AddPrometheusGlobalViewByAliClusterIdsWithOptions(request *AddPrometheusGlobalViewByAliClusterIdsRequest, runtime *util.RuntimeOptions) (_result *AddPrometheusGlobalViewByAliClusterIdsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterIds)) {
		query["ClusterIds"] = request.ClusterIds
	}

	if !tea.BoolValue(util.IsUnset(request.GroupName)) {
		query["GroupName"] = request.GroupName
	}

	if !tea.BoolValue(util.IsUnset(request.ProductCode)) {
		query["ProductCode"] = request.ProductCode
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddPrometheusGlobalViewByAliClusterIds"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddPrometheusGlobalViewByAliClusterIdsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a global aggregation instance in Prometheus Service.
//
// @param request - AddPrometheusGlobalViewByAliClusterIdsRequest
//
// @return AddPrometheusGlobalViewByAliClusterIdsResponse
func (client *Client) AddPrometheusGlobalViewByAliClusterIds(request *AddPrometheusGlobalViewByAliClusterIdsRequest) (_result *AddPrometheusGlobalViewByAliClusterIdsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddPrometheusGlobalViewByAliClusterIdsResponse{}
	_body, _err := client.AddPrometheusGlobalViewByAliClusterIdsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a Prometheus instance for Remote Write.
//
// @param request - AddPrometheusInstanceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddPrometheusInstanceResponse
func (client *Client) AddPrometheusInstanceWithOptions(request *AddPrometheusInstanceRequest, runtime *util.RuntimeOptions) (_result *AddPrometheusInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddPrometheusInstance"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddPrometheusInstanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a Prometheus instance for Remote Write.
//
// @param request - AddPrometheusInstanceRequest
//
// @return AddPrometheusInstanceResponse
func (client *Client) AddPrometheusInstance(request *AddPrometheusInstanceRequest) (_result *AddPrometheusInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddPrometheusInstanceResponse{}
	_body, _err := client.AddPrometheusInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Adds an exporter to a Prometheus instance for Container Service or a Prometheus instance for ECS.
//
// @param request - AddPrometheusIntegrationRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddPrometheusIntegrationResponse
func (client *Client) AddPrometheusIntegrationWithOptions(request *AddPrometheusIntegrationRequest, runtime *util.RuntimeOptions) (_result *AddPrometheusIntegrationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.IntegrationType)) {
		query["IntegrationType"] = request.IntegrationType
	}

	if !tea.BoolValue(util.IsUnset(request.Param)) {
		query["Param"] = request.Param
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddPrometheusIntegration"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddPrometheusIntegrationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Adds an exporter to a Prometheus instance for Container Service or a Prometheus instance for ECS.
//
// @param request - AddPrometheusIntegrationRequest
//
// @return AddPrometheusIntegrationResponse
func (client *Client) AddPrometheusIntegration(request *AddPrometheusIntegrationRequest) (_result *AddPrometheusIntegrationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddPrometheusIntegrationResponse{}
	_body, _err := client.AddPrometheusIntegrationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Adds a remote write configuration item to a Prometheus instance for Container Service or a Prometheus instance for ECS.
//
// @param request - AddPrometheusRemoteWriteRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddPrometheusRemoteWriteResponse
func (client *Client) AddPrometheusRemoteWriteWithOptions(request *AddPrometheusRemoteWriteRequest, runtime *util.RuntimeOptions) (_result *AddPrometheusRemoteWriteResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.RemoteWriteYaml)) {
		body["RemoteWriteYaml"] = request.RemoteWriteYaml
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("AddPrometheusRemoteWrite"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddPrometheusRemoteWriteResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Adds a remote write configuration item to a Prometheus instance for Container Service or a Prometheus instance for ECS.
//
// @param request - AddPrometheusRemoteWriteRequest
//
// @return AddPrometheusRemoteWriteResponse
func (client *Client) AddPrometheusRemoteWrite(request *AddPrometheusRemoteWriteRequest) (_result *AddPrometheusRemoteWriteResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddPrometheusRemoteWriteResponse{}
	_body, _err := client.AddPrometheusRemoteWriteWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates or updates a recording rule.
//
// @param request - AddRecordingRuleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddRecordingRuleResponse
func (client *Client) AddRecordingRuleWithOptions(request *AddRecordingRuleRequest, runtime *util.RuntimeOptions) (_result *AddRecordingRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.RuleYaml)) {
		query["RuleYaml"] = request.RuleYaml
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddRecordingRule"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddRecordingRuleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates or updates a recording rule.
//
// @param request - AddRecordingRuleRequest
//
// @return AddRecordingRuleResponse
func (client *Client) AddRecordingRule(request *AddRecordingRuleRequest) (_result *AddRecordingRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddRecordingRuleResponse{}
	_body, _err := client.AddRecordingRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Flink集群打标
//
// @param request - AddTagToFlinkClusterRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddTagToFlinkClusterResponse
func (client *Client) AddTagToFlinkClusterWithOptions(request *AddTagToFlinkClusterRequest, runtime *util.RuntimeOptions) (_result *AddTagToFlinkClusterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.FlinkWorkSpaceId)) {
		query["FlinkWorkSpaceId"] = request.FlinkWorkSpaceId
	}

	if !tea.BoolValue(util.IsUnset(request.FlinkWorkSpaceName)) {
		query["FlinkWorkSpaceName"] = request.FlinkWorkSpaceName
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.TargetUserId)) {
		query["TargetUserId"] = request.TargetUserId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddTagToFlinkCluster"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddTagToFlinkClusterResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Flink集群打标
//
// @param request - AddTagToFlinkClusterRequest
//
// @return AddTagToFlinkClusterResponse
func (client *Client) AddTagToFlinkCluster(request *AddTagToFlinkClusterRequest) (_result *AddTagToFlinkClusterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddTagToFlinkClusterResponse{}
	_body, _err := client.AddTagToFlinkClusterWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Adds a data source to a global aggregation instance.
//
// @param request - AppendInstancesToPrometheusGlobalViewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AppendInstancesToPrometheusGlobalViewResponse
func (client *Client) AppendInstancesToPrometheusGlobalViewWithOptions(request *AppendInstancesToPrometheusGlobalViewRequest, runtime *util.RuntimeOptions) (_result *AppendInstancesToPrometheusGlobalViewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Clusters)) {
		query["Clusters"] = request.Clusters
	}

	if !tea.BoolValue(util.IsUnset(request.GlobalViewClusterId)) {
		query["GlobalViewClusterId"] = request.GlobalViewClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.GroupName)) {
		query["GroupName"] = request.GroupName
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AppendInstancesToPrometheusGlobalView"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AppendInstancesToPrometheusGlobalViewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Adds a data source to a global aggregation instance.
//
// @param request - AppendInstancesToPrometheusGlobalViewRequest
//
// @return AppendInstancesToPrometheusGlobalViewResponse
func (client *Client) AppendInstancesToPrometheusGlobalView(request *AppendInstancesToPrometheusGlobalViewRequest) (_result *AppendInstancesToPrometheusGlobalViewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AppendInstancesToPrometheusGlobalViewResponse{}
	_body, _err := client.AppendInstancesToPrometheusGlobalViewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param tmpReq - ApplyScenarioRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ApplyScenarioResponse
func (client *Client) ApplyScenarioWithOptions(tmpReq *ApplyScenarioRequest, runtime *util.RuntimeOptions) (_result *ApplyScenarioResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &ApplyScenarioShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Config)) {
		request.ConfigShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Config, tea.String("Config"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.ConfigShrink)) {
		query["Config"] = request.ConfigShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.Scenario)) {
		query["Scenario"] = request.Scenario
	}

	if !tea.BoolValue(util.IsUnset(request.Sign)) {
		query["Sign"] = request.Sign
	}

	if !tea.BoolValue(util.IsUnset(request.SnDump)) {
		query["SnDump"] = request.SnDump
	}

	if !tea.BoolValue(util.IsUnset(request.SnForce)) {
		query["SnForce"] = request.SnForce
	}

	if !tea.BoolValue(util.IsUnset(request.SnStat)) {
		query["SnStat"] = request.SnStat
	}

	if !tea.BoolValue(util.IsUnset(request.SnTransfer)) {
		query["SnTransfer"] = request.SnTransfer
	}

	if !tea.BoolValue(util.IsUnset(request.UpdateOption)) {
		query["UpdateOption"] = request.UpdateOption
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ApplyScenario"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ApplyScenarioResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - ApplyScenarioRequest
//
// @return ApplyScenarioResponse
func (client *Client) ApplyScenario(request *ApplyScenarioRequest) (_result *ApplyScenarioResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ApplyScenarioResponse{}
	_body, _err := client.ApplyScenarioWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Binds a Grafana workspace to a Prometheus instance.
//
// @param request - BindPrometheusGrafanaInstanceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return BindPrometheusGrafanaInstanceResponse
func (client *Client) BindPrometheusGrafanaInstanceWithOptions(request *BindPrometheusGrafanaInstanceRequest, runtime *util.RuntimeOptions) (_result *BindPrometheusGrafanaInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.GrafanaInstanceId)) {
		query["GrafanaInstanceId"] = request.GrafanaInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("BindPrometheusGrafanaInstance"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &BindPrometheusGrafanaInstanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Binds a Grafana workspace to a Prometheus instance.
//
// @param request - BindPrometheusGrafanaInstanceRequest
//
// @return BindPrometheusGrafanaInstanceResponse
func (client *Client) BindPrometheusGrafanaInstance(request *BindPrometheusGrafanaInstanceRequest) (_result *BindPrometheusGrafanaInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BindPrometheusGrafanaInstanceResponse{}
	_body, _err := client.BindPrometheusGrafanaInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 屏蔽告警通知
//
// @param request - BlockAlarmNotificationRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return BlockAlarmNotificationResponse
func (client *Client) BlockAlarmNotificationWithOptions(request *BlockAlarmNotificationRequest, runtime *util.RuntimeOptions) (_result *BlockAlarmNotificationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AlarmId)) {
		query["AlarmId"] = request.AlarmId
	}

	if !tea.BoolValue(util.IsUnset(request.HandlerId)) {
		query["HandlerId"] = request.HandlerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.Timeout)) {
		query["Timeout"] = request.Timeout
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("BlockAlarmNotification"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &BlockAlarmNotificationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 屏蔽告警通知
//
// @param request - BlockAlarmNotificationRequest
//
// @return BlockAlarmNotificationResponse
func (client *Client) BlockAlarmNotification(request *BlockAlarmNotificationRequest) (_result *BlockAlarmNotificationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BlockAlarmNotificationResponse{}
	_body, _err := client.BlockAlarmNotificationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 修改告警等级
//
// @param request - ChangeAlarmSeverityRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ChangeAlarmSeverityResponse
func (client *Client) ChangeAlarmSeverityWithOptions(request *ChangeAlarmSeverityRequest, runtime *util.RuntimeOptions) (_result *ChangeAlarmSeverityResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AlarmId)) {
		query["AlarmId"] = request.AlarmId
	}

	if !tea.BoolValue(util.IsUnset(request.HandlerId)) {
		query["HandlerId"] = request.HandlerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.Severity)) {
		query["Severity"] = request.Severity
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ChangeAlarmSeverity"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ChangeAlarmSeverityResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 修改告警等级
//
// @param request - ChangeAlarmSeverityRequest
//
// @return ChangeAlarmSeverityResponse
func (client *Client) ChangeAlarmSeverity(request *ChangeAlarmSeverityRequest) (_result *ChangeAlarmSeverityResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ChangeAlarmSeverityResponse{}
	_body, _err := client.ChangeAlarmSeverityWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Changes the resource group to which a resource belongs.
//
// @param request - ChangeResourceGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ChangeResourceGroupResponse
func (client *Client) ChangeResourceGroupWithOptions(request *ChangeResourceGroupRequest, runtime *util.RuntimeOptions) (_result *ChangeResourceGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.NewResourceGroupId)) {
		query["NewResourceGroupId"] = request.NewResourceGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceId)) {
		query["ResourceId"] = request.ResourceId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceType)) {
		query["ResourceType"] = request.ResourceType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ChangeResourceGroup"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ChangeResourceGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Changes the resource group to which a resource belongs.
//
// @param request - ChangeResourceGroupRequest
//
// @return ChangeResourceGroupResponse
func (client *Client) ChangeResourceGroup(request *ChangeResourceGroupRequest) (_result *ChangeResourceGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ChangeResourceGroupResponse{}
	_body, _err := client.ChangeResourceGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Checks whether Application Real-Time Monitoring Service (ARMS) is available for commercial use in a region.
//
// Description:
//
// You can call this operation to check whether ARMS is available for commercial use in a region.
//
// @param request - CheckCommercialStatusRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CheckCommercialStatusResponse
func (client *Client) CheckCommercialStatusWithOptions(request *CheckCommercialStatusRequest, runtime *util.RuntimeOptions) (_result *CheckCommercialStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CheckCommercialStatus"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CheckCommercialStatusResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Checks whether Application Real-Time Monitoring Service (ARMS) is available for commercial use in a region.
//
// Description:
//
// You can call this operation to check whether ARMS is available for commercial use in a region.
//
// @param request - CheckCommercialStatusRequest
//
// @return CheckCommercialStatusResponse
func (client *Client) CheckCommercialStatus(request *CheckCommercialStatusRequest) (_result *CheckCommercialStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CheckCommercialStatusResponse{}
	_body, _err := client.CheckCommercialStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Checks the status of a service in the current cluster, such as whether the service is activated and whether the payment is overdue.
//
// @param request - CheckServiceStatusRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CheckServiceStatusResponse
func (client *Client) CheckServiceStatusWithOptions(request *CheckServiceStatusRequest, runtime *util.RuntimeOptions) (_result *CheckServiceStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.SvcCode)) {
		query["SvcCode"] = request.SvcCode
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CheckServiceStatus"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CheckServiceStatusResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Checks the status of a service in the current cluster, such as whether the service is activated and whether the payment is overdue.
//
// @param request - CheckServiceStatusRequest
//
// @return CheckServiceStatusResponse
func (client *Client) CheckServiceStatus(request *CheckServiceStatusRequest) (_result *CheckServiceStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CheckServiceStatusResponse{}
	_body, _err := client.CheckServiceStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 认领告警
//
// @param request - ClaimAlarmRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ClaimAlarmResponse
func (client *Client) ClaimAlarmWithOptions(request *ClaimAlarmRequest, runtime *util.RuntimeOptions) (_result *ClaimAlarmResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AlarmId)) {
		query["AlarmId"] = request.AlarmId
	}

	if !tea.BoolValue(util.IsUnset(request.HandlerId)) {
		query["HandlerId"] = request.HandlerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ClaimAlarm"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ClaimAlarmResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 认领告警
//
// @param request - ClaimAlarmRequest
//
// @return ClaimAlarmResponse
func (client *Client) ClaimAlarm(request *ClaimAlarmRequest) (_result *ClaimAlarmResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ClaimAlarmResponse{}
	_body, _err := client.ClaimAlarmWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 关闭告警
//
// @param request - CloseAlarmRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CloseAlarmResponse
func (client *Client) CloseAlarmWithOptions(request *CloseAlarmRequest, runtime *util.RuntimeOptions) (_result *CloseAlarmResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AlarmId)) {
		query["AlarmId"] = request.AlarmId
	}

	if !tea.BoolValue(util.IsUnset(request.HandlerId)) {
		query["HandlerId"] = request.HandlerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.Solution)) {
		query["Solution"] = request.Solution
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CloseAlarm"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CloseAlarmResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 关闭告警
//
// @param request - CloseAlarmRequest
//
// @return CloseAlarmResponse
func (client *Client) CloseAlarm(request *CloseAlarmRequest) (_result *CloseAlarmResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CloseAlarmResponse{}
	_body, _err := client.CloseAlarmWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Turns on or off the main switch of an ARMS agent, or queries the status of the main switch.
//
// Description:
//
// ***
//
// @param request - ConfigAppRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ConfigAppResponse
func (client *Client) ConfigAppWithOptions(request *ConfigAppRequest, runtime *util.RuntimeOptions) (_result *ConfigAppResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppIds)) {
		query["AppIds"] = request.AppIds
	}

	if !tea.BoolValue(util.IsUnset(request.Enable)) {
		query["Enable"] = request.Enable
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ConfigApp"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ConfigAppResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Turns on or off the main switch of an ARMS agent, or queries the status of the main switch.
//
// Description:
//
// ***
//
// @param request - ConfigAppRequest
//
// @return ConfigAppResponse
func (client *Client) ConfigApp(request *ConfigAppRequest) (_result *ConfigAppResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ConfigAppResponse{}
	_body, _err := client.ConfigAppWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates an alert contact.
//
// Description:
//
// This operation is no longer maintained. To create or modify an alert contact, call the CreateOrUpdateContact operation provided by the new version of the Alert Management module.
//
// @param request - CreateAlertContactRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateAlertContactResponse
func (client *Client) CreateAlertContactWithOptions(request *CreateAlertContactRequest, runtime *util.RuntimeOptions) (_result *CreateAlertContactResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ContactName)) {
		query["ContactName"] = request.ContactName
	}

	if !tea.BoolValue(util.IsUnset(request.DingRobotWebhookUrl)) {
		query["DingRobotWebhookUrl"] = request.DingRobotWebhookUrl
	}

	if !tea.BoolValue(util.IsUnset(request.Email)) {
		query["Email"] = request.Email
	}

	if !tea.BoolValue(util.IsUnset(request.PhoneNum)) {
		query["PhoneNum"] = request.PhoneNum
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SystemNoc)) {
		query["SystemNoc"] = request.SystemNoc
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateAlertContact"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateAlertContactResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates an alert contact.
//
// Description:
//
// This operation is no longer maintained. To create or modify an alert contact, call the CreateOrUpdateContact operation provided by the new version of the Alert Management module.
//
// @param request - CreateAlertContactRequest
//
// @return CreateAlertContactResponse
func (client *Client) CreateAlertContact(request *CreateAlertContactRequest) (_result *CreateAlertContactResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateAlertContactResponse{}
	_body, _err := client.CreateAlertContactWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - CreateAlertContactGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateAlertContactGroupResponse
func (client *Client) CreateAlertContactGroupWithOptions(request *CreateAlertContactGroupRequest, runtime *util.RuntimeOptions) (_result *CreateAlertContactGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ContactGroupName)) {
		query["ContactGroupName"] = request.ContactGroupName
	}

	if !tea.BoolValue(util.IsUnset(request.ContactIds)) {
		query["ContactIds"] = request.ContactIds
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateAlertContactGroup"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateAlertContactGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - CreateAlertContactGroupRequest
//
// @return CreateAlertContactGroupResponse
func (client *Client) CreateAlertContactGroup(request *CreateAlertContactGroupRequest) (_result *CreateAlertContactGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateAlertContactGroupResponse{}
	_body, _err := client.CreateAlertContactGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// The operation that you want to perform. Set the value to CreateDispatchRule.
//
// @param request - CreateDispatchRuleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateDispatchRuleResponse
func (client *Client) CreateDispatchRuleWithOptions(request *CreateDispatchRuleRequest, runtime *util.RuntimeOptions) (_result *CreateDispatchRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DispatchRule)) {
		query["DispatchRule"] = request.DispatchRule
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateDispatchRule"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateDispatchRuleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// The operation that you want to perform. Set the value to CreateDispatchRule.
//
// @param request - CreateDispatchRuleRequest
//
// @return CreateDispatchRuleResponse
func (client *Client) CreateDispatchRule(request *CreateDispatchRuleRequest) (_result *CreateDispatchRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateDispatchRuleResponse{}
	_body, _err := client.CreateDispatchRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a custom job for an environment.
//
// @param request - CreateEnvCustomJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateEnvCustomJobResponse
func (client *Client) CreateEnvCustomJobWithOptions(request *CreateEnvCustomJobRequest, runtime *util.RuntimeOptions) (_result *CreateEnvCustomJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AliyunLang)) {
		query["AliyunLang"] = request.AliyunLang
	}

	if !tea.BoolValue(util.IsUnset(request.CustomJobName)) {
		query["CustomJobName"] = request.CustomJobName
	}

	if !tea.BoolValue(util.IsUnset(request.EnvironmentId)) {
		query["EnvironmentId"] = request.EnvironmentId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConfigYaml)) {
		body["ConfigYaml"] = request.ConfigYaml
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateEnvCustomJob"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateEnvCustomJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a custom job for an environment.
//
// @param request - CreateEnvCustomJobRequest
//
// @return CreateEnvCustomJobResponse
func (client *Client) CreateEnvCustomJob(request *CreateEnvCustomJobRequest) (_result *CreateEnvCustomJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateEnvCustomJobResponse{}
	_body, _err := client.CreateEnvCustomJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a PodMonitor for an environment.
//
// @param request - CreateEnvPodMonitorRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateEnvPodMonitorResponse
func (client *Client) CreateEnvPodMonitorWithOptions(request *CreateEnvPodMonitorRequest, runtime *util.RuntimeOptions) (_result *CreateEnvPodMonitorResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AliyunLang)) {
		query["AliyunLang"] = request.AliyunLang
	}

	if !tea.BoolValue(util.IsUnset(request.DryRun)) {
		query["DryRun"] = request.DryRun
	}

	if !tea.BoolValue(util.IsUnset(request.EnvironmentId)) {
		query["EnvironmentId"] = request.EnvironmentId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConfigYaml)) {
		body["ConfigYaml"] = request.ConfigYaml
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateEnvPodMonitor"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateEnvPodMonitorResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a PodMonitor for an environment.
//
// @param request - CreateEnvPodMonitorRequest
//
// @return CreateEnvPodMonitorResponse
func (client *Client) CreateEnvPodMonitor(request *CreateEnvPodMonitorRequest) (_result *CreateEnvPodMonitorResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateEnvPodMonitorResponse{}
	_body, _err := client.CreateEnvPodMonitorWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a ServiceMonitor for an environment.
//
// @param request - CreateEnvServiceMonitorRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateEnvServiceMonitorResponse
func (client *Client) CreateEnvServiceMonitorWithOptions(request *CreateEnvServiceMonitorRequest, runtime *util.RuntimeOptions) (_result *CreateEnvServiceMonitorResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AliyunLang)) {
		query["AliyunLang"] = request.AliyunLang
	}

	if !tea.BoolValue(util.IsUnset(request.DryRun)) {
		query["DryRun"] = request.DryRun
	}

	if !tea.BoolValue(util.IsUnset(request.EnvironmentId)) {
		query["EnvironmentId"] = request.EnvironmentId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConfigYaml)) {
		body["ConfigYaml"] = request.ConfigYaml
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateEnvServiceMonitor"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateEnvServiceMonitorResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a ServiceMonitor for an environment.
//
// @param request - CreateEnvServiceMonitorRequest
//
// @return CreateEnvServiceMonitorResponse
func (client *Client) CreateEnvServiceMonitor(request *CreateEnvServiceMonitorRequest) (_result *CreateEnvServiceMonitorResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateEnvServiceMonitorResponse{}
	_body, _err := client.CreateEnvServiceMonitorWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates an environment instance.
//
// @param request - CreateEnvironmentRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateEnvironmentResponse
func (client *Client) CreateEnvironmentWithOptions(request *CreateEnvironmentRequest, runtime *util.RuntimeOptions) (_result *CreateEnvironmentResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AliyunLang)) {
		query["AliyunLang"] = request.AliyunLang
	}

	if !tea.BoolValue(util.IsUnset(request.BindResourceId)) {
		query["BindResourceId"] = request.BindResourceId
	}

	if !tea.BoolValue(util.IsUnset(request.EnvironmentName)) {
		query["EnvironmentName"] = request.EnvironmentName
	}

	if !tea.BoolValue(util.IsUnset(request.EnvironmentSubType)) {
		query["EnvironmentSubType"] = request.EnvironmentSubType
	}

	if !tea.BoolValue(util.IsUnset(request.EnvironmentType)) {
		query["EnvironmentType"] = request.EnvironmentType
	}

	if !tea.BoolValue(util.IsUnset(request.FeePackage)) {
		query["FeePackage"] = request.FeePackage
	}

	if !tea.BoolValue(util.IsUnset(request.GrafanaWorkspaceId)) {
		query["GrafanaWorkspaceId"] = request.GrafanaWorkspaceId
	}

	if !tea.BoolValue(util.IsUnset(request.ManagedType)) {
		query["ManagedType"] = request.ManagedType
	}

	if !tea.BoolValue(util.IsUnset(request.PrometheusInstanceId)) {
		query["PrometheusInstanceId"] = request.PrometheusInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.Tags)) {
		query["Tags"] = request.Tags
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateEnvironment"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateEnvironmentResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates an environment instance.
//
// @param request - CreateEnvironmentRequest
//
// @return CreateEnvironmentResponse
func (client *Client) CreateEnvironment(request *CreateEnvironmentRequest) (_result *CreateEnvironmentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateEnvironmentResponse{}
	_body, _err := client.CreateEnvironmentWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 创建工作区
//
// @param tmpReq - CreateGrafanaWorkspaceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateGrafanaWorkspaceResponse
func (client *Client) CreateGrafanaWorkspaceWithOptions(tmpReq *CreateGrafanaWorkspaceRequest, runtime *util.RuntimeOptions) (_result *CreateGrafanaWorkspaceResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &CreateGrafanaWorkspaceShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Tags)) {
		request.TagsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Tags, tea.String("Tags"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AliyunLang)) {
		query["AliyunLang"] = request.AliyunLang
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.GrafanaVersion)) {
		query["GrafanaVersion"] = request.GrafanaVersion
	}

	if !tea.BoolValue(util.IsUnset(request.GrafanaWorkspaceEdition)) {
		query["GrafanaWorkspaceEdition"] = request.GrafanaWorkspaceEdition
	}

	if !tea.BoolValue(util.IsUnset(request.GrafanaWorkspaceName)) {
		query["GrafanaWorkspaceName"] = request.GrafanaWorkspaceName
	}

	if !tea.BoolValue(util.IsUnset(request.Password)) {
		query["Password"] = request.Password
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.TagsShrink)) {
		query["Tags"] = request.TagsShrink
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateGrafanaWorkspace"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateGrafanaWorkspaceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 创建工作区
//
// @param request - CreateGrafanaWorkspaceRequest
//
// @return CreateGrafanaWorkspaceResponse
func (client *Client) CreateGrafanaWorkspace(request *CreateGrafanaWorkspaceRequest) (_result *CreateGrafanaWorkspaceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateGrafanaWorkspaceResponse{}
	_body, _err := client.CreateGrafanaWorkspaceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates an alert integration.
//
// @param request - CreateIntegrationRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateIntegrationResponse
func (client *Client) CreateIntegrationWithOptions(request *CreateIntegrationRequest, runtime *util.RuntimeOptions) (_result *CreateIntegrationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AutoRecover)) {
		body["AutoRecover"] = request.AutoRecover
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		body["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.IntegrationName)) {
		body["IntegrationName"] = request.IntegrationName
	}

	if !tea.BoolValue(util.IsUnset(request.IntegrationProductType)) {
		body["IntegrationProductType"] = request.IntegrationProductType
	}

	if !tea.BoolValue(util.IsUnset(request.RecoverTime)) {
		body["RecoverTime"] = request.RecoverTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateIntegration"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateIntegrationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates an alert integration.
//
// @param request - CreateIntegrationRequest
//
// @return CreateIntegrationResponse
func (client *Client) CreateIntegration(request *CreateIntegrationRequest) (_result *CreateIntegrationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateIntegrationResponse{}
	_body, _err := client.CreateIntegrationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates or modifies an alert rule.
//
// @param request - CreateOrUpdateAlertRuleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateOrUpdateAlertRuleResponse
func (client *Client) CreateOrUpdateAlertRuleWithOptions(request *CreateOrUpdateAlertRuleRequest, runtime *util.RuntimeOptions) (_result *CreateOrUpdateAlertRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AlertCheckType)) {
		body["AlertCheckType"] = request.AlertCheckType
	}

	if !tea.BoolValue(util.IsUnset(request.AlertGroup)) {
		body["AlertGroup"] = request.AlertGroup
	}

	if !tea.BoolValue(util.IsUnset(request.AlertId)) {
		body["AlertId"] = request.AlertId
	}

	if !tea.BoolValue(util.IsUnset(request.AlertName)) {
		body["AlertName"] = request.AlertName
	}

	if !tea.BoolValue(util.IsUnset(request.AlertPiplines)) {
		body["AlertPiplines"] = request.AlertPiplines
	}

	if !tea.BoolValue(util.IsUnset(request.AlertRuleContent)) {
		body["AlertRuleContent"] = request.AlertRuleContent
	}

	if !tea.BoolValue(util.IsUnset(request.AlertStatus)) {
		body["AlertStatus"] = request.AlertStatus
	}

	if !tea.BoolValue(util.IsUnset(request.AlertType)) {
		body["AlertType"] = request.AlertType
	}

	if !tea.BoolValue(util.IsUnset(request.Annotations)) {
		body["Annotations"] = request.Annotations
	}

	if !tea.BoolValue(util.IsUnset(request.AutoAddNewApplication)) {
		body["AutoAddNewApplication"] = request.AutoAddNewApplication
	}

	if !tea.BoolValue(util.IsUnset(request.AutoAddTargetConfig)) {
		body["AutoAddTargetConfig"] = request.AutoAddTargetConfig
	}

	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		body["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.DataConfig)) {
		body["DataConfig"] = request.DataConfig
	}

	if !tea.BoolValue(util.IsUnset(request.Duration)) {
		body["Duration"] = request.Duration
	}

	if !tea.BoolValue(util.IsUnset(request.Filters)) {
		body["Filters"] = request.Filters
	}

	if !tea.BoolValue(util.IsUnset(request.Labels)) {
		body["Labels"] = request.Labels
	}

	if !tea.BoolValue(util.IsUnset(request.Level)) {
		body["Level"] = request.Level
	}

	if !tea.BoolValue(util.IsUnset(request.MarkTags)) {
		body["MarkTags"] = request.MarkTags
	}

	if !tea.BoolValue(util.IsUnset(request.Message)) {
		body["Message"] = request.Message
	}

	if !tea.BoolValue(util.IsUnset(request.MetricsKey)) {
		body["MetricsKey"] = request.MetricsKey
	}

	if !tea.BoolValue(util.IsUnset(request.MetricsType)) {
		body["MetricsType"] = request.MetricsType
	}

	if !tea.BoolValue(util.IsUnset(request.Notice)) {
		body["Notice"] = request.Notice
	}

	if !tea.BoolValue(util.IsUnset(request.NotifyMode)) {
		body["NotifyMode"] = request.NotifyMode
	}

	if !tea.BoolValue(util.IsUnset(request.NotifyStrategy)) {
		body["NotifyStrategy"] = request.NotifyStrategy
	}

	if !tea.BoolValue(util.IsUnset(request.Pids)) {
		body["Pids"] = request.Pids
	}

	if !tea.BoolValue(util.IsUnset(request.Product)) {
		body["Product"] = request.Product
	}

	if !tea.BoolValue(util.IsUnset(request.PromQL)) {
		body["PromQL"] = request.PromQL
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		body["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.Tags)) {
		body["Tags"] = request.Tags
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateOrUpdateAlertRule"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateOrUpdateAlertRuleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates or modifies an alert rule.
//
// @param request - CreateOrUpdateAlertRuleRequest
//
// @return CreateOrUpdateAlertRuleResponse
func (client *Client) CreateOrUpdateAlertRule(request *CreateOrUpdateAlertRuleRequest) (_result *CreateOrUpdateAlertRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateOrUpdateAlertRuleResponse{}
	_body, _err := client.CreateOrUpdateAlertRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates or modifies an alert contact.
//
// @param request - CreateOrUpdateContactRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateOrUpdateContactResponse
func (client *Client) CreateOrUpdateContactWithOptions(request *CreateOrUpdateContactRequest, runtime *util.RuntimeOptions) (_result *CreateOrUpdateContactResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DingRobotUrl)) {
		query["DingRobotUrl"] = request.DingRobotUrl
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ContactId)) {
		body["ContactId"] = request.ContactId
	}

	if !tea.BoolValue(util.IsUnset(request.ContactName)) {
		body["ContactName"] = request.ContactName
	}

	if !tea.BoolValue(util.IsUnset(request.CorpUserId)) {
		body["CorpUserId"] = request.CorpUserId
	}

	if !tea.BoolValue(util.IsUnset(request.Email)) {
		body["Email"] = request.Email
	}

	if !tea.BoolValue(util.IsUnset(request.IsEmailVerify)) {
		body["IsEmailVerify"] = request.IsEmailVerify
	}

	if !tea.BoolValue(util.IsUnset(request.Phone)) {
		body["Phone"] = request.Phone
	}

	if !tea.BoolValue(util.IsUnset(request.ReissueSendNotice)) {
		body["ReissueSendNotice"] = request.ReissueSendNotice
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateOrUpdateContact"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateOrUpdateContactResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates or modifies an alert contact.
//
// @param request - CreateOrUpdateContactRequest
//
// @return CreateOrUpdateContactResponse
func (client *Client) CreateOrUpdateContact(request *CreateOrUpdateContactRequest) (_result *CreateOrUpdateContactResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateOrUpdateContactResponse{}
	_body, _err := client.CreateOrUpdateContactWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates or modifies an alert contact group.
//
// @param request - CreateOrUpdateContactGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateOrUpdateContactGroupResponse
func (client *Client) CreateOrUpdateContactGroupWithOptions(request *CreateOrUpdateContactGroupRequest, runtime *util.RuntimeOptions) (_result *CreateOrUpdateContactGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ContactGroupId)) {
		body["ContactGroupId"] = request.ContactGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.ContactGroupName)) {
		body["ContactGroupName"] = request.ContactGroupName
	}

	if !tea.BoolValue(util.IsUnset(request.ContactIds)) {
		body["ContactIds"] = request.ContactIds
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateOrUpdateContactGroup"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateOrUpdateContactGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates or modifies an alert contact group.
//
// @param request - CreateOrUpdateContactGroupRequest
//
// @return CreateOrUpdateContactGroupResponse
func (client *Client) CreateOrUpdateContactGroup(request *CreateOrUpdateContactGroupRequest) (_result *CreateOrUpdateContactGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateOrUpdateContactGroupResponse{}
	_body, _err := client.CreateOrUpdateContactGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates or modifies an EventBridge integration that is used to push notifications.
//
// @param request - CreateOrUpdateEventBridgeIntegrationRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateOrUpdateEventBridgeIntegrationResponse
func (client *Client) CreateOrUpdateEventBridgeIntegrationWithOptions(request *CreateOrUpdateEventBridgeIntegrationRequest, runtime *util.RuntimeOptions) (_result *CreateOrUpdateEventBridgeIntegrationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccessKey)) {
		body["AccessKey"] = request.AccessKey
	}

	if !tea.BoolValue(util.IsUnset(request.AccessSecret)) {
		body["AccessSecret"] = request.AccessSecret
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		body["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.Endpoint)) {
		body["Endpoint"] = request.Endpoint
	}

	if !tea.BoolValue(util.IsUnset(request.EventBusName)) {
		body["EventBusName"] = request.EventBusName
	}

	if !tea.BoolValue(util.IsUnset(request.EventBusRegionId)) {
		body["EventBusRegionId"] = request.EventBusRegionId
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		body["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		body["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.Source)) {
		body["Source"] = request.Source
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateOrUpdateEventBridgeIntegration"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateOrUpdateEventBridgeIntegrationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates or modifies an EventBridge integration that is used to push notifications.
//
// @param request - CreateOrUpdateEventBridgeIntegrationRequest
//
// @return CreateOrUpdateEventBridgeIntegrationResponse
func (client *Client) CreateOrUpdateEventBridgeIntegration(request *CreateOrUpdateEventBridgeIntegrationRequest) (_result *CreateOrUpdateEventBridgeIntegrationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateOrUpdateEventBridgeIntegrationResponse{}
	_body, _err := client.CreateOrUpdateEventBridgeIntegrationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates or updates an IM chatbot.
//
// @param request - CreateOrUpdateIMRobotRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateOrUpdateIMRobotResponse
func (client *Client) CreateOrUpdateIMRobotWithOptions(request *CreateOrUpdateIMRobotRequest, runtime *util.RuntimeOptions) (_result *CreateOrUpdateIMRobotResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CardTemplate)) {
		body["CardTemplate"] = request.CardTemplate
	}

	if !tea.BoolValue(util.IsUnset(request.DailyNoc)) {
		body["DailyNoc"] = request.DailyNoc
	}

	if !tea.BoolValue(util.IsUnset(request.DailyNocTime)) {
		body["DailyNocTime"] = request.DailyNocTime
	}

	if !tea.BoolValue(util.IsUnset(request.DingSignKey)) {
		body["DingSignKey"] = request.DingSignKey
	}

	if !tea.BoolValue(util.IsUnset(request.EnableOutgoing)) {
		body["EnableOutgoing"] = request.EnableOutgoing
	}

	if !tea.BoolValue(util.IsUnset(request.RobotAddress)) {
		body["RobotAddress"] = request.RobotAddress
	}

	if !tea.BoolValue(util.IsUnset(request.RobotId)) {
		body["RobotId"] = request.RobotId
	}

	if !tea.BoolValue(util.IsUnset(request.RobotName)) {
		body["RobotName"] = request.RobotName
	}

	if !tea.BoolValue(util.IsUnset(request.Token)) {
		body["Token"] = request.Token
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		body["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateOrUpdateIMRobot"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateOrUpdateIMRobotResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates or updates an IM chatbot.
//
// @param request - CreateOrUpdateIMRobotRequest
//
// @return CreateOrUpdateIMRobotResponse
func (client *Client) CreateOrUpdateIMRobot(request *CreateOrUpdateIMRobotRequest) (_result *CreateOrUpdateIMRobotResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateOrUpdateIMRobotResponse{}
	_body, _err := client.CreateOrUpdateIMRobotWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates or modifies a notification policy.
//
// @param request - CreateOrUpdateNotificationPolicyRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateOrUpdateNotificationPolicyResponse
func (client *Client) CreateOrUpdateNotificationPolicyWithOptions(request *CreateOrUpdateNotificationPolicyRequest, runtime *util.RuntimeOptions) (_result *CreateOrUpdateNotificationPolicyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DirectedMode)) {
		body["DirectedMode"] = request.DirectedMode
	}

	if !tea.BoolValue(util.IsUnset(request.EscalationPolicyId)) {
		body["EscalationPolicyId"] = request.EscalationPolicyId
	}

	if !tea.BoolValue(util.IsUnset(request.GroupRule)) {
		body["GroupRule"] = request.GroupRule
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		body["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.IntegrationId)) {
		body["IntegrationId"] = request.IntegrationId
	}

	if !tea.BoolValue(util.IsUnset(request.MatchingRules)) {
		body["MatchingRules"] = request.MatchingRules
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		body["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.NotifyRule)) {
		body["NotifyRule"] = request.NotifyRule
	}

	if !tea.BoolValue(util.IsUnset(request.NotifyTemplate)) {
		body["NotifyTemplate"] = request.NotifyTemplate
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		body["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.Repeat)) {
		body["Repeat"] = request.Repeat
	}

	if !tea.BoolValue(util.IsUnset(request.RepeatInterval)) {
		body["RepeatInterval"] = request.RepeatInterval
	}

	if !tea.BoolValue(util.IsUnset(request.SendRecoverMessage)) {
		body["SendRecoverMessage"] = request.SendRecoverMessage
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateOrUpdateNotificationPolicy"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateOrUpdateNotificationPolicyResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates or modifies a notification policy.
//
// @param request - CreateOrUpdateNotificationPolicyRequest
//
// @return CreateOrUpdateNotificationPolicyResponse
func (client *Client) CreateOrUpdateNotificationPolicy(request *CreateOrUpdateNotificationPolicyRequest) (_result *CreateOrUpdateNotificationPolicyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateOrUpdateNotificationPolicyResponse{}
	_body, _err := client.CreateOrUpdateNotificationPolicyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates or modifies a silence policy.
//
// @param request - CreateOrUpdateSilencePolicyRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateOrUpdateSilencePolicyResponse
func (client *Client) CreateOrUpdateSilencePolicyWithOptions(request *CreateOrUpdateSilencePolicyRequest, runtime *util.RuntimeOptions) (_result *CreateOrUpdateSilencePolicyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		body["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.MatchingRules)) {
		body["MatchingRules"] = request.MatchingRules
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		body["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		body["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.State)) {
		body["State"] = request.State
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateOrUpdateSilencePolicy"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateOrUpdateSilencePolicyResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates or modifies a silence policy.
//
// @param request - CreateOrUpdateSilencePolicyRequest
//
// @return CreateOrUpdateSilencePolicyResponse
func (client *Client) CreateOrUpdateSilencePolicy(request *CreateOrUpdateSilencePolicyRequest) (_result *CreateOrUpdateSilencePolicyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateOrUpdateSilencePolicyResponse{}
	_body, _err := client.CreateOrUpdateSilencePolicyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates or modifies a webhook alert contact.
//
// @param request - CreateOrUpdateWebhookContactRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateOrUpdateWebhookContactResponse
func (client *Client) CreateOrUpdateWebhookContactWithOptions(request *CreateOrUpdateWebhookContactRequest, runtime *util.RuntimeOptions) (_result *CreateOrUpdateWebhookContactResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BizHeaders)) {
		body["BizHeaders"] = request.BizHeaders
	}

	if !tea.BoolValue(util.IsUnset(request.BizParams)) {
		body["BizParams"] = request.BizParams
	}

	if !tea.BoolValue(util.IsUnset(request.Body)) {
		body["Body"] = request.Body
	}

	if !tea.BoolValue(util.IsUnset(request.Method)) {
		body["Method"] = request.Method
	}

	if !tea.BoolValue(util.IsUnset(request.RecoverBody)) {
		body["RecoverBody"] = request.RecoverBody
	}

	if !tea.BoolValue(util.IsUnset(request.Url)) {
		body["Url"] = request.Url
	}

	if !tea.BoolValue(util.IsUnset(request.WebhookId)) {
		body["WebhookId"] = request.WebhookId
	}

	if !tea.BoolValue(util.IsUnset(request.WebhookName)) {
		body["WebhookName"] = request.WebhookName
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateOrUpdateWebhookContact"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateOrUpdateWebhookContactResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates or modifies a webhook alert contact.
//
// @param request - CreateOrUpdateWebhookContactRequest
//
// @return CreateOrUpdateWebhookContactResponse
func (client *Client) CreateOrUpdateWebhookContact(request *CreateOrUpdateWebhookContactRequest) (_result *CreateOrUpdateWebhookContactResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateOrUpdateWebhookContactResponse{}
	_body, _err := client.CreateOrUpdateWebhookContactWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 创建Prometheus告警规则
//
// @param request - CreatePrometheusAlertRuleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreatePrometheusAlertRuleResponse
func (client *Client) CreatePrometheusAlertRuleWithOptions(request *CreatePrometheusAlertRuleRequest, runtime *util.RuntimeOptions) (_result *CreatePrometheusAlertRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AlertName)) {
		query["AlertName"] = request.AlertName
	}

	if !tea.BoolValue(util.IsUnset(request.Annotations)) {
		query["Annotations"] = request.Annotations
	}

	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.DispatchRuleId)) {
		query["DispatchRuleId"] = request.DispatchRuleId
	}

	if !tea.BoolValue(util.IsUnset(request.Duration)) {
		query["Duration"] = request.Duration
	}

	if !tea.BoolValue(util.IsUnset(request.Expression)) {
		query["Expression"] = request.Expression
	}

	if !tea.BoolValue(util.IsUnset(request.Labels)) {
		query["Labels"] = request.Labels
	}

	if !tea.BoolValue(util.IsUnset(request.Message)) {
		query["Message"] = request.Message
	}

	if !tea.BoolValue(util.IsUnset(request.NotifyType)) {
		query["NotifyType"] = request.NotifyType
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.Tags)) {
		query["Tags"] = request.Tags
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreatePrometheusAlertRule"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreatePrometheusAlertRuleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 创建Prometheus告警规则
//
// @param request - CreatePrometheusAlertRuleRequest
//
// @return CreatePrometheusAlertRuleResponse
func (client *Client) CreatePrometheusAlertRule(request *CreatePrometheusAlertRuleRequest) (_result *CreatePrometheusAlertRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreatePrometheusAlertRuleResponse{}
	_body, _err := client.CreatePrometheusAlertRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a Prometheus instance.
//
// @param request - CreatePrometheusInstanceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreatePrometheusInstanceResponse
func (client *Client) CreatePrometheusInstanceWithOptions(request *CreatePrometheusInstanceRequest, runtime *util.RuntimeOptions) (_result *CreatePrometheusInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AllSubClustersSuccess)) {
		query["AllSubClustersSuccess"] = request.AllSubClustersSuccess
	}

	if !tea.BoolValue(util.IsUnset(request.ArchiveDuration)) {
		query["ArchiveDuration"] = request.ArchiveDuration
	}

	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.ClusterName)) {
		query["ClusterName"] = request.ClusterName
	}

	if !tea.BoolValue(util.IsUnset(request.ClusterType)) {
		query["ClusterType"] = request.ClusterType
	}

	if !tea.BoolValue(util.IsUnset(request.Duration)) {
		query["Duration"] = request.Duration
	}

	if !tea.BoolValue(util.IsUnset(request.GrafanaInstanceId)) {
		query["GrafanaInstanceId"] = request.GrafanaInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityGroupId)) {
		query["SecurityGroupId"] = request.SecurityGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SubClustersJson)) {
		query["SubClustersJson"] = request.SubClustersJson
	}

	if !tea.BoolValue(util.IsUnset(request.Tags)) {
		query["Tags"] = request.Tags
	}

	if !tea.BoolValue(util.IsUnset(request.VSwitchId)) {
		query["VSwitchId"] = request.VSwitchId
	}

	if !tea.BoolValue(util.IsUnset(request.VpcId)) {
		query["VpcId"] = request.VpcId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreatePrometheusInstance"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreatePrometheusInstanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a Prometheus instance.
//
// @param request - CreatePrometheusInstanceRequest
//
// @return CreatePrometheusInstanceResponse
func (client *Client) CreatePrometheusInstance(request *CreatePrometheusInstanceRequest) (_result *CreatePrometheusInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreatePrometheusInstanceResponse{}
	_body, _err := client.CreatePrometheusInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a monitoring configuration for a Prometheus instance.
//
// @param request - CreatePrometheusMonitoringRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreatePrometheusMonitoringResponse
func (client *Client) CreatePrometheusMonitoringWithOptions(request *CreatePrometheusMonitoringRequest, runtime *util.RuntimeOptions) (_result *CreatePrometheusMonitoringResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConfigYaml)) {
		body["ConfigYaml"] = request.ConfigYaml
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreatePrometheusMonitoring"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreatePrometheusMonitoringResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a monitoring configuration for a Prometheus instance.
//
// @param request - CreatePrometheusMonitoringRequest
//
// @return CreatePrometheusMonitoringResponse
func (client *Client) CreatePrometheusMonitoring(request *CreatePrometheusMonitoringRequest) (_result *CreatePrometheusMonitoringResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreatePrometheusMonitoringResponse{}
	_body, _err := client.CreatePrometheusMonitoringWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a Browser Monitoring task for an application.
//
// @param request - CreateRetcodeAppRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateRetcodeAppResponse
func (client *Client) CreateRetcodeAppWithOptions(request *CreateRetcodeAppRequest, runtime *util.RuntimeOptions) (_result *CreateRetcodeAppResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.RetcodeAppName)) {
		query["RetcodeAppName"] = request.RetcodeAppName
	}

	if !tea.BoolValue(util.IsUnset(request.RetcodeAppType)) {
		query["RetcodeAppType"] = request.RetcodeAppType
	}

	if !tea.BoolValue(util.IsUnset(request.Tags)) {
		query["Tags"] = request.Tags
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateRetcodeApp"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateRetcodeAppResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a Browser Monitoring task for an application.
//
// @param request - CreateRetcodeAppRequest
//
// @return CreateRetcodeAppResponse
func (client *Client) CreateRetcodeApp(request *CreateRetcodeAppRequest) (_result *CreateRetcodeAppResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateRetcodeAppResponse{}
	_body, _err := client.CreateRetcodeAppWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 创建前端监控应用
//
// @param request - CreateRumAppRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateRumAppResponse
func (client *Client) CreateRumAppWithOptions(request *CreateRumAppRequest, runtime *util.RuntimeOptions) (_result *CreateRumAppResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppGroup)) {
		query["AppGroup"] = request.AppGroup
	}

	if !tea.BoolValue(util.IsUnset(request.AppName)) {
		query["AppName"] = request.AppName
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.PackageName)) {
		query["PackageName"] = request.PackageName
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SiteType)) {
		query["SiteType"] = request.SiteType
	}

	if !tea.BoolValue(util.IsUnset(request.Source)) {
		query["Source"] = request.Source
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateRumApp"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateRumAppResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 创建前端监控应用
//
// @param request - CreateRumAppRequest
//
// @return CreateRumAppResponse
func (client *Client) CreateRumApp(request *CreateRumAppRequest) (_result *CreateRumAppResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateRumAppResponse{}
	_body, _err := client.CreateRumAppWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 创建前端监控上传oss的URL
//
// @param request - CreateRumUploadFileUrlRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateRumUploadFileUrlResponse
func (client *Client) CreateRumUploadFileUrlWithOptions(request *CreateRumUploadFileUrlRequest, runtime *util.RuntimeOptions) (_result *CreateRumUploadFileUrlResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppName)) {
		query["AppName"] = request.AppName
	}

	if !tea.BoolValue(util.IsUnset(request.ContentType)) {
		query["ContentType"] = request.ContentType
	}

	if !tea.BoolValue(util.IsUnset(request.FileName)) {
		query["FileName"] = request.FileName
	}

	if !tea.BoolValue(util.IsUnset(request.Pid)) {
		query["Pid"] = request.Pid
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.SourcemapType)) {
		query["SourcemapType"] = request.SourcemapType
	}

	if !tea.BoolValue(util.IsUnset(request.Uuid)) {
		query["Uuid"] = request.Uuid
	}

	if !tea.BoolValue(util.IsUnset(request.VersionId)) {
		query["VersionId"] = request.VersionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateRumUploadFileUrl"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateRumUploadFileUrlResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 创建前端监控上传oss的URL
//
// @param request - CreateRumUploadFileUrlRequest
//
// @return CreateRumUploadFileUrlResponse
func (client *Client) CreateRumUploadFileUrl(request *CreateRumUploadFileUrlRequest) (_result *CreateRumUploadFileUrlResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateRumUploadFileUrlResponse{}
	_body, _err := client.CreateRumUploadFileUrlWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 创建或更新云拨测定时监控任务
//
// @param tmpReq - CreateSyntheticTaskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateSyntheticTaskResponse
func (client *Client) CreateSyntheticTaskWithOptions(tmpReq *CreateSyntheticTaskRequest, runtime *util.RuntimeOptions) (_result *CreateSyntheticTaskResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &CreateSyntheticTaskShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.CommonParam)) {
		request.CommonParamShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.CommonParam, tea.String("CommonParam"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.Download)) {
		request.DownloadShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Download, tea.String("Download"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.ExtendInterval)) {
		request.ExtendIntervalShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.ExtendInterval, tea.String("ExtendInterval"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.MonitorList)) {
		request.MonitorListShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.MonitorList, tea.String("MonitorList"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.Navigation)) {
		request.NavigationShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Navigation, tea.String("Navigation"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.Net)) {
		request.NetShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Net, tea.String("Net"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.Protocol)) {
		request.ProtocolShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Protocol, tea.String("Protocol"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CommonParamShrink)) {
		query["CommonParam"] = request.CommonParamShrink
	}

	if !tea.BoolValue(util.IsUnset(request.DownloadShrink)) {
		query["Download"] = request.DownloadShrink
	}

	if !tea.BoolValue(util.IsUnset(request.ExtendIntervalShrink)) {
		query["ExtendInterval"] = request.ExtendIntervalShrink
	}

	if !tea.BoolValue(util.IsUnset(request.IntervalTime)) {
		query["IntervalTime"] = request.IntervalTime
	}

	if !tea.BoolValue(util.IsUnset(request.IntervalType)) {
		query["IntervalType"] = request.IntervalType
	}

	if !tea.BoolValue(util.IsUnset(request.IpType)) {
		query["IpType"] = request.IpType
	}

	if !tea.BoolValue(util.IsUnset(request.MonitorListShrink)) {
		query["MonitorList"] = request.MonitorListShrink
	}

	if !tea.BoolValue(util.IsUnset(request.NavigationShrink)) {
		query["Navigation"] = request.NavigationShrink
	}

	if !tea.BoolValue(util.IsUnset(request.NetShrink)) {
		query["Net"] = request.NetShrink
	}

	if !tea.BoolValue(util.IsUnset(request.ProtocolShrink)) {
		query["Protocol"] = request.ProtocolShrink
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.TaskName)) {
		query["TaskName"] = request.TaskName
	}

	if !tea.BoolValue(util.IsUnset(request.TaskType)) {
		query["TaskType"] = request.TaskType
	}

	if !tea.BoolValue(util.IsUnset(request.UpdateTask)) {
		query["UpdateTask"] = request.UpdateTask
	}

	if !tea.BoolValue(util.IsUnset(request.Url)) {
		query["Url"] = request.Url
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateSyntheticTask"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateSyntheticTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 创建或更新云拨测定时监控任务
//
// @param request - CreateSyntheticTaskRequest
//
// @return CreateSyntheticTaskResponse
func (client *Client) CreateSyntheticTask(request *CreateSyntheticTaskRequest) (_result *CreateSyntheticTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateSyntheticTaskResponse{}
	_body, _err := client.CreateSyntheticTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 创建云拨测定时任务
//
// @param tmpReq - CreateTimingSyntheticTaskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateTimingSyntheticTaskResponse
func (client *Client) CreateTimingSyntheticTaskWithOptions(tmpReq *CreateTimingSyntheticTaskRequest, runtime *util.RuntimeOptions) (_result *CreateTimingSyntheticTaskResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &CreateTimingSyntheticTaskShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.AvailableAssertions)) {
		request.AvailableAssertionsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.AvailableAssertions, tea.String("AvailableAssertions"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.CommonSetting)) {
		request.CommonSettingShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.CommonSetting, tea.String("CommonSetting"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.CustomPeriod)) {
		request.CustomPeriodShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.CustomPeriod, tea.String("CustomPeriod"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.MonitorConf)) {
		request.MonitorConfShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.MonitorConf, tea.String("MonitorConf"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.Monitors)) {
		request.MonitorsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Monitors, tea.String("Monitors"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.Tags)) {
		request.TagsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Tags, tea.String("Tags"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AvailableAssertionsShrink)) {
		query["AvailableAssertions"] = request.AvailableAssertionsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.CommonSettingShrink)) {
		query["CommonSetting"] = request.CommonSettingShrink
	}

	if !tea.BoolValue(util.IsUnset(request.CustomPeriodShrink)) {
		query["CustomPeriod"] = request.CustomPeriodShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Frequency)) {
		query["Frequency"] = request.Frequency
	}

	if !tea.BoolValue(util.IsUnset(request.MonitorCategory)) {
		query["MonitorCategory"] = request.MonitorCategory
	}

	if !tea.BoolValue(util.IsUnset(request.MonitorConfShrink)) {
		query["MonitorConf"] = request.MonitorConfShrink
	}

	if !tea.BoolValue(util.IsUnset(request.MonitorsShrink)) {
		query["Monitors"] = request.MonitorsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.TagsShrink)) {
		query["Tags"] = request.TagsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.TaskType)) {
		query["TaskType"] = request.TaskType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateTimingSyntheticTask"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateTimingSyntheticTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 创建云拨测定时任务
//
// @param request - CreateTimingSyntheticTaskRequest
//
// @return CreateTimingSyntheticTaskResponse
func (client *Client) CreateTimingSyntheticTask(request *CreateTimingSyntheticTaskRequest) (_result *CreateTimingSyntheticTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateTimingSyntheticTaskResponse{}
	_body, _err := client.CreateTimingSyntheticTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Adds a contact for webhook alerts.
//
// @param request - CreateWebhookRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateWebhookResponse
func (client *Client) CreateWebhookWithOptions(request *CreateWebhookRequest, runtime *util.RuntimeOptions) (_result *CreateWebhookResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Body)) {
		query["Body"] = request.Body
	}

	if !tea.BoolValue(util.IsUnset(request.ContactName)) {
		query["ContactName"] = request.ContactName
	}

	if !tea.BoolValue(util.IsUnset(request.HttpHeaders)) {
		query["HttpHeaders"] = request.HttpHeaders
	}

	if !tea.BoolValue(util.IsUnset(request.HttpParams)) {
		query["HttpParams"] = request.HttpParams
	}

	if !tea.BoolValue(util.IsUnset(request.Method)) {
		query["Method"] = request.Method
	}

	if !tea.BoolValue(util.IsUnset(request.RecoverBody)) {
		query["RecoverBody"] = request.RecoverBody
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.Url)) {
		query["Url"] = request.Url
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateWebhook"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateWebhookResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Adds a contact for webhook alerts.
//
// @param request - CreateWebhookRequest
//
// @return CreateWebhookResponse
func (client *Client) CreateWebhook(request *CreateWebhookRequest) (_result *CreateWebhookResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateWebhookResponse{}
	_body, _err := client.CreateWebhookWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Disables an authentication token.
//
// @param request - DelAuthTokenRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DelAuthTokenResponse
func (client *Client) DelAuthTokenWithOptions(request *DelAuthTokenRequest, runtime *util.RuntimeOptions) (_result *DelAuthTokenResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DelAuthToken"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DelAuthTokenResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Disables an authentication token.
//
// @param request - DelAuthTokenRequest
//
// @return DelAuthTokenResponse
func (client *Client) DelAuthToken(request *DelAuthTokenRequest) (_result *DelAuthTokenResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DelAuthTokenResponse{}
	_body, _err := client.DelAuthTokenWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Delete AddonRelease data by AddonRelease name.
//
// @param request - DeleteAddonReleaseRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteAddonReleaseResponse
func (client *Client) DeleteAddonReleaseWithOptions(request *DeleteAddonReleaseRequest, runtime *util.RuntimeOptions) (_result *DeleteAddonReleaseResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AddonName)) {
		query["AddonName"] = request.AddonName
	}

	if !tea.BoolValue(util.IsUnset(request.EnvironmentId)) {
		query["EnvironmentId"] = request.EnvironmentId
	}

	if !tea.BoolValue(util.IsUnset(request.Force)) {
		query["Force"] = request.Force
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ReleaseName)) {
		query["ReleaseName"] = request.ReleaseName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteAddonRelease"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteAddonReleaseResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Delete AddonRelease data by AddonRelease name.
//
// @param request - DeleteAddonReleaseRequest
//
// @return DeleteAddonReleaseResponse
func (client *Client) DeleteAddonRelease(request *DeleteAddonReleaseRequest) (_result *DeleteAddonReleaseResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteAddonReleaseResponse{}
	_body, _err := client.DeleteAddonReleaseWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes an DeleteAlertContact contact.
//
// Description:
//
// *******
//
// @param request - DeleteAlertContactRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteAlertContactResponse
func (client *Client) DeleteAlertContactWithOptions(request *DeleteAlertContactRequest, runtime *util.RuntimeOptions) (_result *DeleteAlertContactResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ContactId)) {
		query["ContactId"] = request.ContactId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteAlertContact"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteAlertContactResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes an DeleteAlertContact contact.
//
// Description:
//
// *******
//
// @param request - DeleteAlertContactRequest
//
// @return DeleteAlertContactResponse
func (client *Client) DeleteAlertContact(request *DeleteAlertContactRequest) (_result *DeleteAlertContactResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteAlertContactResponse{}
	_body, _err := client.DeleteAlertContactWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes an DeleteAlertContactGroup contact group.
//
// @param request - DeleteAlertContactGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteAlertContactGroupResponse
func (client *Client) DeleteAlertContactGroupWithOptions(request *DeleteAlertContactGroupRequest, runtime *util.RuntimeOptions) (_result *DeleteAlertContactGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ContactGroupId)) {
		query["ContactGroupId"] = request.ContactGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteAlertContactGroup"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteAlertContactGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes an DeleteAlertContactGroup contact group.
//
// @param request - DeleteAlertContactGroupRequest
//
// @return DeleteAlertContactGroupResponse
func (client *Client) DeleteAlertContactGroup(request *DeleteAlertContactGroupRequest) (_result *DeleteAlertContactGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteAlertContactGroupResponse{}
	_body, _err := client.DeleteAlertContactGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes an alert rule.
//
// @param request - DeleteAlertRuleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteAlertRuleResponse
func (client *Client) DeleteAlertRuleWithOptions(request *DeleteAlertRuleRequest, runtime *util.RuntimeOptions) (_result *DeleteAlertRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AlertId)) {
		query["AlertId"] = request.AlertId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteAlertRule"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteAlertRuleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes an alert rule.
//
// @param request - DeleteAlertRuleRequest
//
// @return DeleteAlertRuleResponse
func (client *Client) DeleteAlertRule(request *DeleteAlertRuleRequest) (_result *DeleteAlertRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteAlertRuleResponse{}
	_body, _err := client.DeleteAlertRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DeleteAlertRulesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteAlertRulesResponse
func (client *Client) DeleteAlertRulesWithOptions(request *DeleteAlertRulesRequest, runtime *util.RuntimeOptions) (_result *DeleteAlertRulesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AlertIds)) {
		query["AlertIds"] = request.AlertIds
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteAlertRules"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteAlertRulesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DeleteAlertRulesRequest
//
// @return DeleteAlertRulesResponse
func (client *Client) DeleteAlertRules(request *DeleteAlertRulesRequest) (_result *DeleteAlertRulesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteAlertRulesResponse{}
	_body, _err := client.DeleteAlertRulesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes multiple applications at a time based on the process IDs (PIDs).
//
// @param request - DeleteAppListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteAppListResponse
func (client *Client) DeleteAppListWithOptions(request *DeleteAppListRequest, runtime *util.RuntimeOptions) (_result *DeleteAppListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Pids)) {
		query["Pids"] = request.Pids
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteAppList"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteAppListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes multiple applications at a time based on the process IDs (PIDs).
//
// @param request - DeleteAppListRequest
//
// @return DeleteAppListResponse
func (client *Client) DeleteAppList(request *DeleteAppListRequest) (_result *DeleteAppListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteAppListResponse{}
	_body, _err := client.DeleteAppListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Deprecated: OpenAPI DeleteCmsExporter is deprecated, please use ARMS::2019-08-08::DeleteAddonRelease instead.
//
// Summary:
//
// Releases a Prometheus instance for Alibaba Cloud services.
//
// @param request - DeleteCmsExporterRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteCmsExporterResponse
// Deprecated
func (client *Client) DeleteCmsExporterWithOptions(request *DeleteCmsExporterRequest, runtime *util.RuntimeOptions) (_result *DeleteCmsExporterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteCmsExporter"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteCmsExporterResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Deprecated: OpenAPI DeleteCmsExporter is deprecated, please use ARMS::2019-08-08::DeleteAddonRelease instead.
//
// Summary:
//
// Releases a Prometheus instance for Alibaba Cloud services.
//
// @param request - DeleteCmsExporterRequest
//
// @return DeleteCmsExporterResponse
// Deprecated
func (client *Client) DeleteCmsExporter(request *DeleteCmsExporterRequest) (_result *DeleteCmsExporterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteCmsExporterResponse{}
	_body, _err := client.DeleteCmsExporterWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// The ID of the request.
//
// @param request - DeleteContactRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteContactResponse
func (client *Client) DeleteContactWithOptions(request *DeleteContactRequest, runtime *util.RuntimeOptions) (_result *DeleteContactResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ContactId)) {
		query["ContactId"] = request.ContactId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteContact"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteContactResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// The ID of the request.
//
// @param request - DeleteContactRequest
//
// @return DeleteContactResponse
func (client *Client) DeleteContact(request *DeleteContactRequest) (_result *DeleteContactResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteContactResponse{}
	_body, _err := client.DeleteContactWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes an alert contact group.
//
// @param request - DeleteContactGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteContactGroupResponse
func (client *Client) DeleteContactGroupWithOptions(request *DeleteContactGroupRequest, runtime *util.RuntimeOptions) (_result *DeleteContactGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ContactGroupId)) {
		query["ContactGroupId"] = request.ContactGroupId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteContactGroup"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteContactGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes an alert contact group.
//
// @param request - DeleteContactGroupRequest
//
// @return DeleteContactGroupResponse
func (client *Client) DeleteContactGroup(request *DeleteContactGroupRequest) (_result *DeleteContactGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteContactGroupResponse{}
	_body, _err := client.DeleteContactGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DeleteDispatchRuleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteDispatchRuleResponse
func (client *Client) DeleteDispatchRuleWithOptions(request *DeleteDispatchRuleRequest, runtime *util.RuntimeOptions) (_result *DeleteDispatchRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteDispatchRule"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteDispatchRuleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DeleteDispatchRuleRequest
//
// @return DeleteDispatchRuleResponse
func (client *Client) DeleteDispatchRule(request *DeleteDispatchRuleRequest) (_result *DeleteDispatchRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteDispatchRuleResponse{}
	_body, _err := client.DeleteDispatchRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Delete custom jobs for the environment.
//
// @param request - DeleteEnvCustomJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteEnvCustomJobResponse
func (client *Client) DeleteEnvCustomJobWithOptions(request *DeleteEnvCustomJobRequest, runtime *util.RuntimeOptions) (_result *DeleteEnvCustomJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CustomJobName)) {
		query["CustomJobName"] = request.CustomJobName
	}

	if !tea.BoolValue(util.IsUnset(request.EnvironmentId)) {
		query["EnvironmentId"] = request.EnvironmentId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteEnvCustomJob"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteEnvCustomJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Delete custom jobs for the environment.
//
// @param request - DeleteEnvCustomJobRequest
//
// @return DeleteEnvCustomJobResponse
func (client *Client) DeleteEnvCustomJob(request *DeleteEnvCustomJobRequest) (_result *DeleteEnvCustomJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteEnvCustomJobResponse{}
	_body, _err := client.DeleteEnvCustomJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Delete the environment PodMonitor.
//
// @param request - DeleteEnvPodMonitorRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteEnvPodMonitorResponse
func (client *Client) DeleteEnvPodMonitorWithOptions(request *DeleteEnvPodMonitorRequest, runtime *util.RuntimeOptions) (_result *DeleteEnvPodMonitorResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EnvironmentId)) {
		query["EnvironmentId"] = request.EnvironmentId
	}

	if !tea.BoolValue(util.IsUnset(request.Namespace)) {
		query["Namespace"] = request.Namespace
	}

	if !tea.BoolValue(util.IsUnset(request.PodMonitorName)) {
		query["PodMonitorName"] = request.PodMonitorName
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteEnvPodMonitor"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteEnvPodMonitorResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Delete the environment PodMonitor.
//
// @param request - DeleteEnvPodMonitorRequest
//
// @return DeleteEnvPodMonitorResponse
func (client *Client) DeleteEnvPodMonitor(request *DeleteEnvPodMonitorRequest) (_result *DeleteEnvPodMonitorResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteEnvPodMonitorResponse{}
	_body, _err := client.DeleteEnvPodMonitorWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Delete the environment ServiceMonitor.
//
// @param request - DeleteEnvServiceMonitorRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteEnvServiceMonitorResponse
func (client *Client) DeleteEnvServiceMonitorWithOptions(request *DeleteEnvServiceMonitorRequest, runtime *util.RuntimeOptions) (_result *DeleteEnvServiceMonitorResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EnvironmentId)) {
		query["EnvironmentId"] = request.EnvironmentId
	}

	if !tea.BoolValue(util.IsUnset(request.Namespace)) {
		query["Namespace"] = request.Namespace
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceMonitorName)) {
		query["ServiceMonitorName"] = request.ServiceMonitorName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteEnvServiceMonitor"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteEnvServiceMonitorResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Delete the environment ServiceMonitor.
//
// @param request - DeleteEnvServiceMonitorRequest
//
// @return DeleteEnvServiceMonitorResponse
func (client *Client) DeleteEnvServiceMonitor(request *DeleteEnvServiceMonitorRequest) (_result *DeleteEnvServiceMonitorResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteEnvServiceMonitorResponse{}
	_body, _err := client.DeleteEnvServiceMonitorWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes an environment instance.
//
// @param request - DeleteEnvironmentRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteEnvironmentResponse
func (client *Client) DeleteEnvironmentWithOptions(request *DeleteEnvironmentRequest, runtime *util.RuntimeOptions) (_result *DeleteEnvironmentResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DeletePromInstance)) {
		query["DeletePromInstance"] = request.DeletePromInstance
	}

	if !tea.BoolValue(util.IsUnset(request.EnvironmentId)) {
		query["EnvironmentId"] = request.EnvironmentId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteEnvironment"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteEnvironmentResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes an environment instance.
//
// @param request - DeleteEnvironmentRequest
//
// @return DeleteEnvironmentResponse
func (client *Client) DeleteEnvironment(request *DeleteEnvironmentRequest) (_result *DeleteEnvironmentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteEnvironmentResponse{}
	_body, _err := client.DeleteEnvironmentWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 删除feature信息
//
// @param request - DeleteEnvironmentFeatureRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteEnvironmentFeatureResponse
func (client *Client) DeleteEnvironmentFeatureWithOptions(request *DeleteEnvironmentFeatureRequest, runtime *util.RuntimeOptions) (_result *DeleteEnvironmentFeatureResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EnvironmentId)) {
		query["EnvironmentId"] = request.EnvironmentId
	}

	if !tea.BoolValue(util.IsUnset(request.FeatureName)) {
		query["FeatureName"] = request.FeatureName
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteEnvironmentFeature"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteEnvironmentFeatureResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 删除feature信息
//
// @param request - DeleteEnvironmentFeatureRequest
//
// @return DeleteEnvironmentFeatureResponse
func (client *Client) DeleteEnvironmentFeature(request *DeleteEnvironmentFeatureRequest) (_result *DeleteEnvironmentFeatureResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteEnvironmentFeatureResponse{}
	_body, _err := client.DeleteEnvironmentFeatureWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes an EventBridge integration that is used to push notifications.
//
// @param request - DeleteEventBridgeIntegrationRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteEventBridgeIntegrationResponse
func (client *Client) DeleteEventBridgeIntegrationWithOptions(request *DeleteEventBridgeIntegrationRequest, runtime *util.RuntimeOptions) (_result *DeleteEventBridgeIntegrationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		body["Id"] = request.Id
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteEventBridgeIntegration"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteEventBridgeIntegrationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes an EventBridge integration that is used to push notifications.
//
// @param request - DeleteEventBridgeIntegrationRequest
//
// @return DeleteEventBridgeIntegrationResponse
func (client *Client) DeleteEventBridgeIntegration(request *DeleteEventBridgeIntegrationRequest) (_result *DeleteEventBridgeIntegrationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteEventBridgeIntegrationResponse{}
	_body, _err := client.DeleteEventBridgeIntegrationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes Grafana dashboard resources from a cluster monitored by Prometheus Service.
//
// @param request - DeleteGrafanaResourceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteGrafanaResourceResponse
func (client *Client) DeleteGrafanaResourceWithOptions(request *DeleteGrafanaResourceRequest, runtime *util.RuntimeOptions) (_result *DeleteGrafanaResourceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		body["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.ClusterName)) {
		body["ClusterName"] = request.ClusterName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteGrafanaResource"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteGrafanaResourceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes Grafana dashboard resources from a cluster monitored by Prometheus Service.
//
// @param request - DeleteGrafanaResourceRequest
//
// @return DeleteGrafanaResourceResponse
func (client *Client) DeleteGrafanaResource(request *DeleteGrafanaResourceRequest) (_result *DeleteGrafanaResourceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteGrafanaResourceResponse{}
	_body, _err := client.DeleteGrafanaResourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 释放工作区
//
// @param request - DeleteGrafanaWorkspaceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteGrafanaWorkspaceResponse
func (client *Client) DeleteGrafanaWorkspaceWithOptions(request *DeleteGrafanaWorkspaceRequest, runtime *util.RuntimeOptions) (_result *DeleteGrafanaWorkspaceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.GrafanaWorkspaceId)) {
		query["GrafanaWorkspaceId"] = request.GrafanaWorkspaceId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteGrafanaWorkspace"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteGrafanaWorkspaceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 释放工作区
//
// @param request - DeleteGrafanaWorkspaceRequest
//
// @return DeleteGrafanaWorkspaceResponse
func (client *Client) DeleteGrafanaWorkspace(request *DeleteGrafanaWorkspaceRequest) (_result *DeleteGrafanaWorkspaceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteGrafanaWorkspaceResponse{}
	_body, _err := client.DeleteGrafanaWorkspaceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes an instant messaging (IM) chatbot.
//
// @param request - DeleteIMRobotRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteIMRobotResponse
func (client *Client) DeleteIMRobotWithOptions(request *DeleteIMRobotRequest, runtime *util.RuntimeOptions) (_result *DeleteIMRobotResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.RobotId)) {
		query["RobotId"] = request.RobotId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteIMRobot"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteIMRobotResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes an instant messaging (IM) chatbot.
//
// @param request - DeleteIMRobotRequest
//
// @return DeleteIMRobotResponse
func (client *Client) DeleteIMRobot(request *DeleteIMRobotRequest) (_result *DeleteIMRobotResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteIMRobotResponse{}
	_body, _err := client.DeleteIMRobotWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Deprecated: OpenAPI DeleteIntegration is deprecated, please use ARMS::2019-08-08::DeleteAddonRelease instead.
//
// Summary:
//
// Deletes collection rules from an integration.
//
// @param request - DeleteIntegrationRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteIntegrationResponse
// Deprecated
func (client *Client) DeleteIntegrationWithOptions(request *DeleteIntegrationRequest, runtime *util.RuntimeOptions) (_result *DeleteIntegrationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.Integration)) {
		query["Integration"] = request.Integration
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteIntegration"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteIntegrationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Deprecated: OpenAPI DeleteIntegration is deprecated, please use ARMS::2019-08-08::DeleteAddonRelease instead.
//
// Summary:
//
// Deletes collection rules from an integration.
//
// @param request - DeleteIntegrationRequest
//
// @return DeleteIntegrationResponse
// Deprecated
func (client *Client) DeleteIntegration(request *DeleteIntegrationRequest) (_result *DeleteIntegrationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteIntegrationResponse{}
	_body, _err := client.DeleteIntegrationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes an alert integration.
//
// @param request - DeleteIntegrationsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteIntegrationsResponse
func (client *Client) DeleteIntegrationsWithOptions(request *DeleteIntegrationsRequest, runtime *util.RuntimeOptions) (_result *DeleteIntegrationsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteIntegrations"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteIntegrationsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes an alert integration.
//
// @param request - DeleteIntegrationsRequest
//
// @return DeleteIntegrationsResponse
func (client *Client) DeleteIntegrations(request *DeleteIntegrationsRequest) (_result *DeleteIntegrationsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteIntegrationsResponse{}
	_body, _err := client.DeleteIntegrationsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Indicates whether the notification policy was deleted successfully. Valid values:
//
// 	- `true`: The notification policy was deleted successfully.
//
// 	- `false`: The notification policy failed to be deleted.
//
// @param request - DeleteNotificationPolicyRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteNotificationPolicyResponse
func (client *Client) DeleteNotificationPolicyWithOptions(request *DeleteNotificationPolicyRequest, runtime *util.RuntimeOptions) (_result *DeleteNotificationPolicyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteNotificationPolicy"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteNotificationPolicyResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Indicates whether the notification policy was deleted successfully. Valid values:
//
// 	- `true`: The notification policy was deleted successfully.
//
// 	- `false`: The notification policy failed to be deleted.
//
// @param request - DeleteNotificationPolicyRequest
//
// @return DeleteNotificationPolicyResponse
func (client *Client) DeleteNotificationPolicy(request *DeleteNotificationPolicyRequest) (_result *DeleteNotificationPolicyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteNotificationPolicyResponse{}
	_body, _err := client.DeleteNotificationPolicyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// The ID of the alert rule. You can call the ListPrometheusAlertRules operation to query the ID of the alert rule.
//
// @param request - DeletePrometheusAlertRuleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeletePrometheusAlertRuleResponse
func (client *Client) DeletePrometheusAlertRuleWithOptions(request *DeletePrometheusAlertRuleRequest, runtime *util.RuntimeOptions) (_result *DeletePrometheusAlertRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AlertId)) {
		query["AlertId"] = request.AlertId
	}

	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeletePrometheusAlertRule"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeletePrometheusAlertRuleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// The ID of the alert rule. You can call the ListPrometheusAlertRules operation to query the ID of the alert rule.
//
// @param request - DeletePrometheusAlertRuleRequest
//
// @return DeletePrometheusAlertRuleResponse
func (client *Client) DeletePrometheusAlertRule(request *DeletePrometheusAlertRuleRequest) (_result *DeletePrometheusAlertRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeletePrometheusAlertRuleResponse{}
	_body, _err := client.DeletePrometheusAlertRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a global aggregation instance from Prometheus Service.
//
// @param request - DeletePrometheusGlobalViewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeletePrometheusGlobalViewResponse
func (client *Client) DeletePrometheusGlobalViewWithOptions(request *DeletePrometheusGlobalViewRequest, runtime *util.RuntimeOptions) (_result *DeletePrometheusGlobalViewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.GlobalViewClusterId)) {
		query["GlobalViewClusterId"] = request.GlobalViewClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeletePrometheusGlobalView"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeletePrometheusGlobalViewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a global aggregation instance from Prometheus Service.
//
// @param request - DeletePrometheusGlobalViewRequest
//
// @return DeletePrometheusGlobalViewResponse
func (client *Client) DeletePrometheusGlobalView(request *DeletePrometheusGlobalViewRequest) (_result *DeletePrometheusGlobalViewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeletePrometheusGlobalViewResponse{}
	_body, _err := client.DeletePrometheusGlobalViewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes an exporter from a Prometheus instance for Container Service or a Prometheus instance for ECS.
//
// @param request - DeletePrometheusIntegrationRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeletePrometheusIntegrationResponse
func (client *Client) DeletePrometheusIntegrationWithOptions(request *DeletePrometheusIntegrationRequest, runtime *util.RuntimeOptions) (_result *DeletePrometheusIntegrationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.IntegrationType)) {
		query["IntegrationType"] = request.IntegrationType
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeletePrometheusIntegration"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeletePrometheusIntegrationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes an exporter from a Prometheus instance for Container Service or a Prometheus instance for ECS.
//
// @param request - DeletePrometheusIntegrationRequest
//
// @return DeletePrometheusIntegrationResponse
func (client *Client) DeletePrometheusIntegration(request *DeletePrometheusIntegrationRequest) (_result *DeletePrometheusIntegrationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeletePrometheusIntegrationResponse{}
	_body, _err := client.DeletePrometheusIntegrationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes the monitoring configuration of a Prometheus instance.
//
// @param request - DeletePrometheusMonitoringRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeletePrometheusMonitoringResponse
func (client *Client) DeletePrometheusMonitoringWithOptions(request *DeletePrometheusMonitoringRequest, runtime *util.RuntimeOptions) (_result *DeletePrometheusMonitoringResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.MonitoringName)) {
		query["MonitoringName"] = request.MonitoringName
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeletePrometheusMonitoring"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeletePrometheusMonitoringResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes the monitoring configuration of a Prometheus instance.
//
// @param request - DeletePrometheusMonitoringRequest
//
// @return DeletePrometheusMonitoringResponse
func (client *Client) DeletePrometheusMonitoring(request *DeletePrometheusMonitoringRequest) (_result *DeletePrometheusMonitoringResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeletePrometheusMonitoringResponse{}
	_body, _err := client.DeletePrometheusMonitoringWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes one or more remote write configuration items from a Prometheus instance for Container Service or a Prometheus instance for ECS.
//
// @param request - DeletePrometheusRemoteWriteRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeletePrometheusRemoteWriteResponse
func (client *Client) DeletePrometheusRemoteWriteWithOptions(request *DeletePrometheusRemoteWriteRequest, runtime *util.RuntimeOptions) (_result *DeletePrometheusRemoteWriteResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.RemoteWriteNames)) {
		query["RemoteWriteNames"] = request.RemoteWriteNames
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeletePrometheusRemoteWrite"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeletePrometheusRemoteWriteResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes one or more remote write configuration items from a Prometheus instance for Container Service or a Prometheus instance for ECS.
//
// @param request - DeletePrometheusRemoteWriteRequest
//
// @return DeletePrometheusRemoteWriteResponse
func (client *Client) DeletePrometheusRemoteWrite(request *DeletePrometheusRemoteWriteRequest) (_result *DeletePrometheusRemoteWriteResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeletePrometheusRemoteWriteResponse{}
	_body, _err := client.DeletePrometheusRemoteWriteWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a Browser Monitoring task.
//
// @param request - DeleteRetcodeAppRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteRetcodeAppResponse
func (client *Client) DeleteRetcodeAppWithOptions(request *DeleteRetcodeAppRequest, runtime *util.RuntimeOptions) (_result *DeleteRetcodeAppResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.AppName)) {
		query["AppName"] = request.AppName
	}

	if !tea.BoolValue(util.IsUnset(request.Pid)) {
		query["Pid"] = request.Pid
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteRetcodeApp"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteRetcodeAppResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a Browser Monitoring task.
//
// @param request - DeleteRetcodeAppRequest
//
// @return DeleteRetcodeAppResponse
func (client *Client) DeleteRetcodeApp(request *DeleteRetcodeAppRequest) (_result *DeleteRetcodeAppResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteRetcodeAppResponse{}
	_body, _err := client.DeleteRetcodeAppWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 删除前端监控应用
//
// @param request - DeleteRumAppRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteRumAppResponse
func (client *Client) DeleteRumAppWithOptions(request *DeleteRumAppRequest, runtime *util.RuntimeOptions) (_result *DeleteRumAppResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppGroup)) {
		query["AppGroup"] = request.AppGroup
	}

	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteRumApp"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteRumAppResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 删除前端监控应用
//
// @param request - DeleteRumAppRequest
//
// @return DeleteRumAppResponse
func (client *Client) DeleteRumApp(request *DeleteRumAppRequest) (_result *DeleteRumAppResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteRumAppResponse{}
	_body, _err := client.DeleteRumAppWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 删除前端监控在oss中的文件
//
// @param request - DeleteRumUploadFileRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteRumUploadFileResponse
func (client *Client) DeleteRumUploadFileWithOptions(request *DeleteRumUploadFileRequest, runtime *util.RuntimeOptions) (_result *DeleteRumUploadFileResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.FileName)) {
		query["FileName"] = request.FileName
	}

	if !tea.BoolValue(util.IsUnset(request.Pid)) {
		query["Pid"] = request.Pid
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.Uuid)) {
		query["Uuid"] = request.Uuid
	}

	if !tea.BoolValue(util.IsUnset(request.VersionId)) {
		query["VersionId"] = request.VersionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteRumUploadFile"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteRumUploadFileResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 删除前端监控在oss中的文件
//
// @param request - DeleteRumUploadFileRequest
//
// @return DeleteRumUploadFileResponse
func (client *Client) DeleteRumUploadFile(request *DeleteRumUploadFileRequest) (_result *DeleteRumUploadFileResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteRumUploadFileResponse{}
	_body, _err := client.DeleteRumUploadFileWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DeleteScenarioRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteScenarioResponse
func (client *Client) DeleteScenarioWithOptions(request *DeleteScenarioRequest, runtime *util.RuntimeOptions) (_result *DeleteScenarioResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ScenarioId)) {
		query["ScenarioId"] = request.ScenarioId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteScenario"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteScenarioResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DeleteScenarioRequest
//
// @return DeleteScenarioResponse
func (client *Client) DeleteScenario(request *DeleteScenarioRequest) (_result *DeleteScenarioResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteScenarioResponse{}
	_body, _err := client.DeleteScenarioWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// The ID of the silence policy.
//
// @param request - DeleteSilencePolicyRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteSilencePolicyResponse
func (client *Client) DeleteSilencePolicyWithOptions(request *DeleteSilencePolicyRequest, runtime *util.RuntimeOptions) (_result *DeleteSilencePolicyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteSilencePolicy"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteSilencePolicyResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// The ID of the silence policy.
//
// @param request - DeleteSilencePolicyRequest
//
// @return DeleteSilencePolicyResponse
func (client *Client) DeleteSilencePolicy(request *DeleteSilencePolicyRequest) (_result *DeleteSilencePolicyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteSilencePolicyResponse{}
	_body, _err := client.DeleteSilencePolicyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 删除SourceMap
//
// @param tmpReq - DeleteSourceMapRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteSourceMapResponse
func (client *Client) DeleteSourceMapWithOptions(tmpReq *DeleteSourceMapRequest, runtime *util.RuntimeOptions) (_result *DeleteSourceMapResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &DeleteSourceMapShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.FidList)) {
		request.FidListShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.FidList, tea.String("FidList"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.FidListShrink)) {
		query["FidList"] = request.FidListShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Pid)) {
		query["Pid"] = request.Pid
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteSourceMap"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteSourceMapResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 删除SourceMap
//
// @param request - DeleteSourceMapRequest
//
// @return DeleteSourceMapResponse
func (client *Client) DeleteSourceMap(request *DeleteSourceMapRequest) (_result *DeleteSourceMapResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteSourceMapResponse{}
	_body, _err := client.DeleteSourceMapWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 删除云拨测任务
//
// @param request - DeleteSyntheticTaskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteSyntheticTaskResponse
func (client *Client) DeleteSyntheticTaskWithOptions(request *DeleteSyntheticTaskRequest, runtime *util.RuntimeOptions) (_result *DeleteSyntheticTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.TaskIds)) {
		query["TaskIds"] = request.TaskIds
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteSyntheticTask"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteSyntheticTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 删除云拨测任务
//
// @param request - DeleteSyntheticTaskRequest
//
// @return DeleteSyntheticTaskResponse
func (client *Client) DeleteSyntheticTask(request *DeleteSyntheticTaskRequest) (_result *DeleteSyntheticTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteSyntheticTaskResponse{}
	_body, _err := client.DeleteSyntheticTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a scheduled synthetic monitoring task.
//
// @param request - DeleteTimingSyntheticTaskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteTimingSyntheticTaskResponse
func (client *Client) DeleteTimingSyntheticTaskWithOptions(request *DeleteTimingSyntheticTaskRequest, runtime *util.RuntimeOptions) (_result *DeleteTimingSyntheticTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		query["TaskId"] = request.TaskId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteTimingSyntheticTask"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteTimingSyntheticTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a scheduled synthetic monitoring task.
//
// @param request - DeleteTimingSyntheticTaskRequest
//
// @return DeleteTimingSyntheticTaskResponse
func (client *Client) DeleteTimingSyntheticTask(request *DeleteTimingSyntheticTaskRequest) (_result *DeleteTimingSyntheticTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteTimingSyntheticTaskResponse{}
	_body, _err := client.DeleteTimingSyntheticTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes an application based on a specified process identifier (PID) and application type.
//
// @param tmpReq - DeleteTraceAppRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteTraceAppResponse
func (client *Client) DeleteTraceAppWithOptions(tmpReq *DeleteTraceAppRequest, runtime *util.RuntimeOptions) (_result *DeleteTraceAppResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &DeleteTraceAppShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.DeleteReason)) {
		request.DeleteReasonShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.DeleteReason, tea.String("DeleteReason"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.DeleteReasonShrink)) {
		query["DeleteReason"] = request.DeleteReasonShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Pid)) {
		query["Pid"] = request.Pid
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteTraceApp"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteTraceAppResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes an application based on a specified process identifier (PID) and application type.
//
// @param request - DeleteTraceAppRequest
//
// @return DeleteTraceAppResponse
func (client *Client) DeleteTraceApp(request *DeleteTraceAppRequest) (_result *DeleteTraceAppResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteTraceAppResponse{}
	_body, _err := client.DeleteTraceAppWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a webhook alert contact.
//
// @param request - DeleteWebhookContactRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteWebhookContactResponse
func (client *Client) DeleteWebhookContactWithOptions(request *DeleteWebhookContactRequest, runtime *util.RuntimeOptions) (_result *DeleteWebhookContactResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.WebhookId)) {
		query["WebhookId"] = request.WebhookId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteWebhookContact"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteWebhookContactResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a webhook alert contact.
//
// @param request - DeleteWebhookContactRequest
//
// @return DeleteWebhookContactResponse
func (client *Client) DeleteWebhookContact(request *DeleteWebhookContactRequest) (_result *DeleteWebhookContactResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteWebhookContactResponse{}
	_body, _err := client.DeleteWebhookContactWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the release information of an add-on by name.
//
// @param request - DescribeAddonReleaseRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeAddonReleaseResponse
func (client *Client) DescribeAddonReleaseWithOptions(request *DescribeAddonReleaseRequest, runtime *util.RuntimeOptions) (_result *DescribeAddonReleaseResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EnvironmentId)) {
		query["EnvironmentId"] = request.EnvironmentId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ReleaseName)) {
		query["ReleaseName"] = request.ReleaseName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAddonRelease"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAddonReleaseResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the release information of an add-on by name.
//
// @param request - DescribeAddonReleaseRequest
//
// @return DescribeAddonReleaseResponse
func (client *Client) DescribeAddonRelease(request *DescribeAddonReleaseRequest) (_result *DescribeAddonReleaseResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAddonReleaseResponse{}
	_body, _err := client.DescribeAddonReleaseWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries an alert contact group.
//
// @param request - DescribeContactGroupsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeContactGroupsResponse
func (client *Client) DescribeContactGroupsWithOptions(request *DescribeContactGroupsRequest, runtime *util.RuntimeOptions) (_result *DescribeContactGroupsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ContactGroupName)) {
		query["ContactGroupName"] = request.ContactGroupName
	}

	if !tea.BoolValue(util.IsUnset(request.GroupIds)) {
		query["GroupIds"] = request.GroupIds
	}

	if !tea.BoolValue(util.IsUnset(request.IsDetail)) {
		query["IsDetail"] = request.IsDetail
	}

	if !tea.BoolValue(util.IsUnset(request.Page)) {
		query["Page"] = request.Page
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.Size)) {
		query["Size"] = request.Size
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeContactGroups"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeContactGroupsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries an alert contact group.
//
// @param request - DescribeContactGroupsRequest
//
// @return DescribeContactGroupsResponse
func (client *Client) DescribeContactGroups(request *DescribeContactGroupsRequest) (_result *DescribeContactGroupsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeContactGroupsResponse{}
	_body, _err := client.DescribeContactGroupsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries alert contacts.
//
// @param request - DescribeContactsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeContactsResponse
func (client *Client) DescribeContactsWithOptions(request *DescribeContactsRequest, runtime *util.RuntimeOptions) (_result *DescribeContactsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ContactIds)) {
		query["ContactIds"] = request.ContactIds
	}

	if !tea.BoolValue(util.IsUnset(request.ContactName)) {
		query["ContactName"] = request.ContactName
	}

	if !tea.BoolValue(util.IsUnset(request.Email)) {
		query["Email"] = request.Email
	}

	if !tea.BoolValue(util.IsUnset(request.Page)) {
		query["Page"] = request.Page
	}

	if !tea.BoolValue(util.IsUnset(request.Phone)) {
		query["Phone"] = request.Phone
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.Size)) {
		query["Size"] = request.Size
	}

	if !tea.BoolValue(util.IsUnset(request.Verbose)) {
		query["Verbose"] = request.Verbose
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeContacts"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeContactsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries alert contacts.
//
// @param request - DescribeContactsRequest
//
// @return DescribeContactsResponse
func (client *Client) DescribeContacts(request *DescribeContactsRequest) (_result *DescribeContactsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeContactsResponse{}
	_body, _err := client.DescribeContactsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about a dispatch policy.
//
// @param request - DescribeDispatchRuleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDispatchRuleResponse
func (client *Client) DescribeDispatchRuleWithOptions(request *DescribeDispatchRuleRequest, runtime *util.RuntimeOptions) (_result *DescribeDispatchRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDispatchRule"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeDispatchRuleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about a dispatch policy.
//
// @param request - DescribeDispatchRuleRequest
//
// @return DescribeDispatchRuleResponse
func (client *Client) DescribeDispatchRule(request *DescribeDispatchRuleRequest) (_result *DescribeDispatchRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDispatchRuleResponse{}
	_body, _err := client.DescribeDispatchRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the details of a custom job for an environment.
//
// @param request - DescribeEnvCustomJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeEnvCustomJobResponse
func (client *Client) DescribeEnvCustomJobWithOptions(request *DescribeEnvCustomJobRequest, runtime *util.RuntimeOptions) (_result *DescribeEnvCustomJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CustomJobName)) {
		query["CustomJobName"] = request.CustomJobName
	}

	if !tea.BoolValue(util.IsUnset(request.EncryptYaml)) {
		query["EncryptYaml"] = request.EncryptYaml
	}

	if !tea.BoolValue(util.IsUnset(request.EnvironmentId)) {
		query["EnvironmentId"] = request.EnvironmentId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeEnvCustomJob"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeEnvCustomJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the details of a custom job for an environment.
//
// @param request - DescribeEnvCustomJobRequest
//
// @return DescribeEnvCustomJobResponse
func (client *Client) DescribeEnvCustomJob(request *DescribeEnvCustomJobRequest) (_result *DescribeEnvCustomJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeEnvCustomJobResponse{}
	_body, _err := client.DescribeEnvCustomJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the PodMonitor details of an environment.
//
// @param request - DescribeEnvPodMonitorRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeEnvPodMonitorResponse
func (client *Client) DescribeEnvPodMonitorWithOptions(request *DescribeEnvPodMonitorRequest, runtime *util.RuntimeOptions) (_result *DescribeEnvPodMonitorResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EnvironmentId)) {
		query["EnvironmentId"] = request.EnvironmentId
	}

	if !tea.BoolValue(util.IsUnset(request.Namespace)) {
		query["Namespace"] = request.Namespace
	}

	if !tea.BoolValue(util.IsUnset(request.PodMonitorName)) {
		query["PodMonitorName"] = request.PodMonitorName
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeEnvPodMonitor"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeEnvPodMonitorResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the PodMonitor details of an environment.
//
// @param request - DescribeEnvPodMonitorRequest
//
// @return DescribeEnvPodMonitorResponse
func (client *Client) DescribeEnvPodMonitor(request *DescribeEnvPodMonitorRequest) (_result *DescribeEnvPodMonitorResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeEnvPodMonitorResponse{}
	_body, _err := client.DescribeEnvPodMonitorWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the ServiceMonitor details of an environment.
//
// @param request - DescribeEnvServiceMonitorRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeEnvServiceMonitorResponse
func (client *Client) DescribeEnvServiceMonitorWithOptions(request *DescribeEnvServiceMonitorRequest, runtime *util.RuntimeOptions) (_result *DescribeEnvServiceMonitorResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EnvironmentId)) {
		query["EnvironmentId"] = request.EnvironmentId
	}

	if !tea.BoolValue(util.IsUnset(request.Namespace)) {
		query["Namespace"] = request.Namespace
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceMonitorName)) {
		query["ServiceMonitorName"] = request.ServiceMonitorName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeEnvServiceMonitor"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeEnvServiceMonitorResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the ServiceMonitor details of an environment.
//
// @param request - DescribeEnvServiceMonitorRequest
//
// @return DescribeEnvServiceMonitorResponse
func (client *Client) DescribeEnvServiceMonitor(request *DescribeEnvServiceMonitorRequest) (_result *DescribeEnvServiceMonitorResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeEnvServiceMonitorResponse{}
	_body, _err := client.DescribeEnvServiceMonitorWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the details of an environment.
//
// @param request - DescribeEnvironmentRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeEnvironmentResponse
func (client *Client) DescribeEnvironmentWithOptions(request *DescribeEnvironmentRequest, runtime *util.RuntimeOptions) (_result *DescribeEnvironmentResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EnvironmentId)) {
		query["EnvironmentId"] = request.EnvironmentId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeEnvironment"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeEnvironmentResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the details of an environment.
//
// @param request - DescribeEnvironmentRequest
//
// @return DescribeEnvironmentResponse
func (client *Client) DescribeEnvironment(request *DescribeEnvironmentRequest) (_result *DescribeEnvironmentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeEnvironmentResponse{}
	_body, _err := client.DescribeEnvironmentWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the details of a feature.
//
// @param request - DescribeEnvironmentFeatureRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeEnvironmentFeatureResponse
func (client *Client) DescribeEnvironmentFeatureWithOptions(request *DescribeEnvironmentFeatureRequest, runtime *util.RuntimeOptions) (_result *DescribeEnvironmentFeatureResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AliyunLang)) {
		query["AliyunLang"] = request.AliyunLang
	}

	if !tea.BoolValue(util.IsUnset(request.EnvironmentId)) {
		query["EnvironmentId"] = request.EnvironmentId
	}

	if !tea.BoolValue(util.IsUnset(request.FeatureName)) {
		query["FeatureName"] = request.FeatureName
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeEnvironmentFeature"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeEnvironmentFeatureResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the details of a feature.
//
// @param request - DescribeEnvironmentFeatureRequest
//
// @return DescribeEnvironmentFeatureResponse
func (client *Client) DescribeEnvironmentFeature(request *DescribeEnvironmentFeatureRequest) (_result *DescribeEnvironmentFeatureResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeEnvironmentFeatureResponse{}
	_body, _err := client.DescribeEnvironmentFeatureWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of IM chatbots.
//
// @param request - DescribeIMRobotsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeIMRobotsResponse
func (client *Client) DescribeIMRobotsWithOptions(request *DescribeIMRobotsRequest, runtime *util.RuntimeOptions) (_result *DescribeIMRobotsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Page)) {
		query["Page"] = request.Page
	}

	if !tea.BoolValue(util.IsUnset(request.RobotIds)) {
		query["RobotIds"] = request.RobotIds
	}

	if !tea.BoolValue(util.IsUnset(request.RobotName)) {
		query["RobotName"] = request.RobotName
	}

	if !tea.BoolValue(util.IsUnset(request.Size)) {
		query["Size"] = request.Size
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeIMRobots"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeIMRobotsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries a list of IM chatbots.
//
// @param request - DescribeIMRobotsRequest
//
// @return DescribeIMRobotsResponse
func (client *Client) DescribeIMRobots(request *DescribeIMRobotsRequest) (_result *DescribeIMRobotsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeIMRobotsResponse{}
	_body, _err := client.DescribeIMRobotsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the details about an alert rule of Prometheus Service.
//
// @param request - DescribePrometheusAlertRuleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribePrometheusAlertRuleResponse
func (client *Client) DescribePrometheusAlertRuleWithOptions(request *DescribePrometheusAlertRuleRequest, runtime *util.RuntimeOptions) (_result *DescribePrometheusAlertRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AlertId)) {
		query["AlertId"] = request.AlertId
	}

	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribePrometheusAlertRule"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribePrometheusAlertRuleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the details about an alert rule of Prometheus Service.
//
// @param request - DescribePrometheusAlertRuleRequest
//
// @return DescribePrometheusAlertRuleResponse
func (client *Client) DescribePrometheusAlertRule(request *DescribePrometheusAlertRuleRequest) (_result *DescribePrometheusAlertRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribePrometheusAlertRuleResponse{}
	_body, _err := client.DescribePrometheusAlertRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeTraceLicenseKeyRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeTraceLicenseKeyResponse
func (client *Client) DescribeTraceLicenseKeyWithOptions(request *DescribeTraceLicenseKeyRequest, runtime *util.RuntimeOptions) (_result *DescribeTraceLicenseKeyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeTraceLicenseKey"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeTraceLicenseKeyResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeTraceLicenseKeyRequest
//
// @return DescribeTraceLicenseKeyResponse
func (client *Client) DescribeTraceLicenseKey(request *DescribeTraceLicenseKeyRequest) (_result *DescribeTraceLicenseKeyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeTraceLicenseKeyResponse{}
	_body, _err := client.DescribeTraceLicenseKeyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the list of webhook alert contacts.
//
// @param request - DescribeWebhookContactsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeWebhookContactsResponse
func (client *Client) DescribeWebhookContactsWithOptions(request *DescribeWebhookContactsRequest, runtime *util.RuntimeOptions) (_result *DescribeWebhookContactsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeWebhookContacts"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeWebhookContactsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the list of webhook alert contacts.
//
// @param request - DescribeWebhookContactsRequest
//
// @return DescribeWebhookContactsResponse
func (client *Client) DescribeWebhookContacts(request *DescribeWebhookContactsRequest) (_result *DescribeWebhookContactsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeWebhookContactsResponse{}
	_body, _err := client.DescribeWebhookContactsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 开启指标
//
// @param request - EnableMetricRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return EnableMetricResponse
func (client *Client) EnableMetricWithOptions(request *EnableMetricRequest, runtime *util.RuntimeOptions) (_result *EnableMetricResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.DropMetric)) {
		query["DropMetric"] = request.DropMetric
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("EnableMetric"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &EnableMetricResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 开启指标
//
// @param request - EnableMetricRequest
//
// @return EnableMetricResponse
func (client *Client) EnableMetric(request *EnableMetricRequest) (_result *EnableMetricResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &EnableMetricResponse{}
	_body, _err := client.EnableMetricWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Obtains the download URL of the Application Real-Time Monitoring Service (ARMS) agent.
//
// @param request - GetAgentDownloadUrlRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetAgentDownloadUrlResponse
func (client *Client) GetAgentDownloadUrlWithOptions(request *GetAgentDownloadUrlRequest, runtime *util.RuntimeOptions) (_result *GetAgentDownloadUrlResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetAgentDownloadUrl"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetAgentDownloadUrlResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Obtains the download URL of the Application Real-Time Monitoring Service (ARMS) agent.
//
// @param request - GetAgentDownloadUrlRequest
//
// @return GetAgentDownloadUrlResponse
func (client *Client) GetAgentDownloadUrl(request *GetAgentDownloadUrlRequest) (_result *GetAgentDownloadUrlResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetAgentDownloadUrlResponse{}
	_body, _err := client.GetAgentDownloadUrlWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries alert rules.
//
// @param request - GetAlertRulesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetAlertRulesResponse
func (client *Client) GetAlertRulesWithOptions(request *GetAlertRulesRequest, runtime *util.RuntimeOptions) (_result *GetAlertRulesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AlertIds)) {
		query["AlertIds"] = request.AlertIds
	}

	if !tea.BoolValue(util.IsUnset(request.AlertNames)) {
		query["AlertNames"] = request.AlertNames
	}

	if !tea.BoolValue(util.IsUnset(request.AlertStatus)) {
		query["AlertStatus"] = request.AlertStatus
	}

	if !tea.BoolValue(util.IsUnset(request.AlertType)) {
		query["AlertType"] = request.AlertType
	}

	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.Page)) {
		query["Page"] = request.Page
	}

	if !tea.BoolValue(util.IsUnset(request.ProductCode)) {
		query["ProductCode"] = request.ProductCode
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.Size)) {
		query["Size"] = request.Size
	}

	if !tea.BoolValue(util.IsUnset(request.Tags)) {
		query["Tags"] = request.Tags
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetAlertRules"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetAlertRulesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries alert rules.
//
// @param request - GetAlertRulesRequest
//
// @return GetAlertRulesResponse
func (client *Client) GetAlertRules(request *GetAlertRulesRequest) (_result *GetAlertRulesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetAlertRulesResponse{}
	_body, _err := client.GetAlertRulesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the API operations of application monitoring by page.
//
// @param request - GetAppApiByPageRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetAppApiByPageResponse
func (client *Client) GetAppApiByPageWithOptions(request *GetAppApiByPageRequest, runtime *util.RuntimeOptions) (_result *GetAppApiByPageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.IntervalMills)) {
		query["IntervalMills"] = request.IntervalMills
	}

	if !tea.BoolValue(util.IsUnset(request.PId)) {
		query["PId"] = request.PId
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetAppApiByPage"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetAppApiByPageResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the API operations of application monitoring by page.
//
// @param request - GetAppApiByPageRequest
//
// @return GetAppApiByPageResponse
func (client *Client) GetAppApiByPage(request *GetAppApiByPageRequest) (_result *GetAppApiByPageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetAppApiByPageResponse{}
	_body, _err := client.GetAppApiByPageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 应用各个实例的JVM配置信息
//
// @param request - GetAppJVMConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetAppJVMConfigResponse
func (client *Client) GetAppJVMConfigWithOptions(request *GetAppJVMConfigRequest, runtime *util.RuntimeOptions) (_result *GetAppJVMConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetAppJVMConfig"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetAppJVMConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 应用各个实例的JVM配置信息
//
// @param request - GetAppJVMConfigRequest
//
// @return GetAppJVMConfigResponse
func (client *Client) GetAppJVMConfig(request *GetAppJVMConfigRequest) (_result *GetAppJVMConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetAppJVMConfigResponse{}
	_body, _err := client.GetAppJVMConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Obtains the authentication token for remote read and write over the Internet.
//
// @param request - GetAuthTokenRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetAuthTokenResponse
func (client *Client) GetAuthTokenWithOptions(request *GetAuthTokenRequest, runtime *util.RuntimeOptions) (_result *GetAuthTokenResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetAuthToken"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetAuthTokenResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Obtains the authentication token for remote read and write over the Internet.
//
// @param request - GetAuthTokenRequest
//
// @return GetAuthTokenResponse
func (client *Client) GetAuthToken(request *GetAuthTokenRequest) (_result *GetAuthTokenResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetAuthTokenResponse{}
	_body, _err := client.GetAuthTokenWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Deprecated: OpenAPI GetCloudClusterAllUrl is deprecated, please use ARMS::2019-08-08::GetRemoteWriteUrl instead.
//
// Summary:
//
// Queries the read and write URLs of a CloudMonitor instance, such as Pushgateway and Grafana URLs.
//
// @param request - GetCloudClusterAllUrlRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetCloudClusterAllUrlResponse
// Deprecated
func (client *Client) GetCloudClusterAllUrlWithOptions(request *GetCloudClusterAllUrlRequest, runtime *util.RuntimeOptions) (_result *GetCloudClusterAllUrlResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetCloudClusterAllUrl"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetCloudClusterAllUrlResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Deprecated: OpenAPI GetCloudClusterAllUrl is deprecated, please use ARMS::2019-08-08::GetRemoteWriteUrl instead.
//
// Summary:
//
// Queries the read and write URLs of a CloudMonitor instance, such as Pushgateway and Grafana URLs.
//
// @param request - GetCloudClusterAllUrlRequest
//
// @return GetCloudClusterAllUrlResponse
// Deprecated
func (client *Client) GetCloudClusterAllUrl(request *GetCloudClusterAllUrlRequest) (_result *GetCloudClusterAllUrlResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetCloudClusterAllUrlResponse{}
	_body, _err := client.GetCloudClusterAllUrlWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Obtains all the URLs of a cluster, including remote read and write URLs, Pushgateway URLs, and Grafana URLs.
//
// @param request - GetClusterAllUrlRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetClusterAllUrlResponse
func (client *Client) GetClusterAllUrlWithOptions(request *GetClusterAllUrlRequest, runtime *util.RuntimeOptions) (_result *GetClusterAllUrlResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetClusterAllUrl"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetClusterAllUrlResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Obtains all the URLs of a cluster, including remote read and write URLs, Pushgateway URLs, and Grafana URLs.
//
// @param request - GetClusterAllUrlRequest
//
// @return GetClusterAllUrlResponse
func (client *Client) GetClusterAllUrl(request *GetClusterAllUrlRequest) (_result *GetClusterAllUrlResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetClusterAllUrlResponse{}
	_body, _err := client.GetClusterAllUrlWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取商业化状态
//
// @param request - GetCommercialStatusRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetCommercialStatusResponse
func (client *Client) GetCommercialStatusWithOptions(request *GetCommercialStatusRequest, runtime *util.RuntimeOptions) (_result *GetCommercialStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CommodityCode)) {
		query["CommodityCode"] = request.CommodityCode
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetCommercialStatus"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetCommercialStatusResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取商业化状态
//
// @param request - GetCommercialStatusRequest
//
// @return GetCommercialStatusResponse
func (client *Client) GetCommercialStatus(request *GetCommercialStatusRequest) (_result *GetCommercialStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetCommercialStatusResponse{}
	_body, _err := client.GetCommercialStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Enables the Explore feature of Grafana.
//
// @param request - GetExploreUrlRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetExploreUrlResponse
func (client *Client) GetExploreUrlWithOptions(request *GetExploreUrlRequest, runtime *util.RuntimeOptions) (_result *GetExploreUrlResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.Expression)) {
		query["Expression"] = request.Expression
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetExploreUrl"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetExploreUrlResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Enables the Explore feature of Grafana.
//
// @param request - GetExploreUrlRequest
//
// @return GetExploreUrlResponse
func (client *Client) GetExploreUrl(request *GetExploreUrlRequest) (_result *GetExploreUrlResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetExploreUrlResponse{}
	_body, _err := client.GetExploreUrlWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取指定工作区
//
// @param request - GetGrafanaWorkspaceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetGrafanaWorkspaceResponse
func (client *Client) GetGrafanaWorkspaceWithOptions(request *GetGrafanaWorkspaceRequest, runtime *util.RuntimeOptions) (_result *GetGrafanaWorkspaceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AliyunLang)) {
		query["AliyunLang"] = request.AliyunLang
	}

	if !tea.BoolValue(util.IsUnset(request.GrafanaWorkspaceId)) {
		query["GrafanaWorkspaceId"] = request.GrafanaWorkspaceId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetGrafanaWorkspace"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetGrafanaWorkspaceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取指定工作区
//
// @param request - GetGrafanaWorkspaceRequest
//
// @return GetGrafanaWorkspaceResponse
func (client *Client) GetGrafanaWorkspace(request *GetGrafanaWorkspaceRequest) (_result *GetGrafanaWorkspaceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetGrafanaWorkspaceResponse{}
	_body, _err := client.GetGrafanaWorkspaceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Deprecated: OpenAPI GetIntegrationState is deprecated, please use ARMS::2019-08-08::DescribeAddonRelease instead.
//
// Summary:
//
// 获取Prometheus中是否已接入某种Integration类型
//
// @param request - GetIntegrationStateRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetIntegrationStateResponse
// Deprecated
func (client *Client) GetIntegrationStateWithOptions(request *GetIntegrationStateRequest, runtime *util.RuntimeOptions) (_result *GetIntegrationStateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.Integration)) {
		query["Integration"] = request.Integration
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetIntegrationState"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetIntegrationStateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Deprecated: OpenAPI GetIntegrationState is deprecated, please use ARMS::2019-08-08::DescribeAddonRelease instead.
//
// Summary:
//
// 获取Prometheus中是否已接入某种Integration类型
//
// @param request - GetIntegrationStateRequest
//
// @return GetIntegrationStateResponse
// Deprecated
func (client *Client) GetIntegrationState(request *GetIntegrationStateRequest) (_result *GetIntegrationStateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetIntegrationStateResponse{}
	_body, _err := client.GetIntegrationStateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the status of a Prometheus instance of a serverless Kubernetes (ASK) cluster or Elastic Compute Service (ECS) instance.
//
// @param request - GetManagedPrometheusStatusRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetManagedPrometheusStatusResponse
func (client *Client) GetManagedPrometheusStatusWithOptions(request *GetManagedPrometheusStatusRequest, runtime *util.RuntimeOptions) (_result *GetManagedPrometheusStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.ClusterType)) {
		query["ClusterType"] = request.ClusterType
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.VpcId)) {
		query["VpcId"] = request.VpcId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetManagedPrometheusStatus"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetManagedPrometheusStatusResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the status of a Prometheus instance of a serverless Kubernetes (ASK) cluster or Elastic Compute Service (ECS) instance.
//
// @param request - GetManagedPrometheusStatusRequest
//
// @return GetManagedPrometheusStatusResponse
func (client *Client) GetManagedPrometheusStatus(request *GetManagedPrometheusStatusRequest) (_result *GetManagedPrometheusStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetManagedPrometheusStatusResponse{}
	_body, _err := client.GetManagedPrometheusStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the details of one or more traces.
//
// @param request - GetMultipleTraceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetMultipleTraceResponse
func (client *Client) GetMultipleTraceWithOptions(request *GetMultipleTraceRequest, runtime *util.RuntimeOptions) (_result *GetMultipleTraceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.TraceIDs)) {
		query["TraceIDs"] = request.TraceIDs
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetMultipleTrace"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetMultipleTraceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the details of one or more traces.
//
// @param request - GetMultipleTraceRequest
//
// @return GetMultipleTraceResponse
func (client *Client) GetMultipleTrace(request *GetMultipleTraceRequest) (_result *GetMultipleTraceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetMultipleTraceResponse{}
	_body, _err := client.GetMultipleTraceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about a scheduling policy.
//
// @param request - GetOnCallSchedulesDetailRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetOnCallSchedulesDetailResponse
func (client *Client) GetOnCallSchedulesDetailWithOptions(request *GetOnCallSchedulesDetailRequest, runtime *util.RuntimeOptions) (_result *GetOnCallSchedulesDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetOnCallSchedulesDetail"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetOnCallSchedulesDetailResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about a scheduling policy.
//
// @param request - GetOnCallSchedulesDetailRequest
//
// @return GetOnCallSchedulesDetailResponse
func (client *Client) GetOnCallSchedulesDetail(request *GetOnCallSchedulesDetailRequest) (_result *GetOnCallSchedulesDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetOnCallSchedulesDetailResponse{}
	_body, _err := client.GetOnCallSchedulesDetailWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the token required for integrating Prometheus Service.
//
// Description:
//
// None.
//
// @param request - GetPrometheusApiTokenRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetPrometheusApiTokenResponse
func (client *Client) GetPrometheusApiTokenWithOptions(request *GetPrometheusApiTokenRequest, runtime *util.RuntimeOptions) (_result *GetPrometheusApiTokenResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetPrometheusApiToken"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetPrometheusApiTokenResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the token required for integrating Prometheus Service.
//
// Description:
//
// None.
//
// @param request - GetPrometheusApiTokenRequest
//
// @return GetPrometheusApiTokenResponse
func (client *Client) GetPrometheusApiToken(request *GetPrometheusApiTokenRequest) (_result *GetPrometheusApiTokenResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetPrometheusApiTokenResponse{}
	_body, _err := client.GetPrometheusApiTokenWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about a global aggregation instance.
//
// @param request - GetPrometheusGlobalViewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetPrometheusGlobalViewResponse
func (client *Client) GetPrometheusGlobalViewWithOptions(request *GetPrometheusGlobalViewRequest, runtime *util.RuntimeOptions) (_result *GetPrometheusGlobalViewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.GlobalViewClusterId)) {
		query["GlobalViewClusterId"] = request.GlobalViewClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetPrometheusGlobalView"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetPrometheusGlobalViewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about a global aggregation instance.
//
// @param request - GetPrometheusGlobalViewRequest
//
// @return GetPrometheusGlobalViewResponse
func (client *Client) GetPrometheusGlobalView(request *GetPrometheusGlobalViewRequest) (_result *GetPrometheusGlobalViewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetPrometheusGlobalViewResponse{}
	_body, _err := client.GetPrometheusGlobalViewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about a Prometheus instance.
//
// @param request - GetPrometheusInstanceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetPrometheusInstanceResponse
func (client *Client) GetPrometheusInstanceWithOptions(request *GetPrometheusInstanceRequest, runtime *util.RuntimeOptions) (_result *GetPrometheusInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetPrometheusInstance"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetPrometheusInstanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about a Prometheus instance.
//
// @param request - GetPrometheusInstanceRequest
//
// @return GetPrometheusInstanceResponse
func (client *Client) GetPrometheusInstance(request *GetPrometheusInstanceRequest) (_result *GetPrometheusInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetPrometheusInstanceResponse{}
	_body, _err := client.GetPrometheusInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about an exporter that is integrated into a Prometheus instance for Container Service or a Prometheus instance for ECS.
//
// @param request - GetPrometheusIntegrationRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetPrometheusIntegrationResponse
func (client *Client) GetPrometheusIntegrationWithOptions(request *GetPrometheusIntegrationRequest, runtime *util.RuntimeOptions) (_result *GetPrometheusIntegrationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.IntegrationType)) {
		query["IntegrationType"] = request.IntegrationType
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetPrometheusIntegration"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetPrometheusIntegrationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about an exporter that is integrated into a Prometheus instance for Container Service or a Prometheus instance for ECS.
//
// @param request - GetPrometheusIntegrationRequest
//
// @return GetPrometheusIntegrationResponse
func (client *Client) GetPrometheusIntegration(request *GetPrometheusIntegrationRequest) (_result *GetPrometheusIntegrationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetPrometheusIntegrationResponse{}
	_body, _err := client.GetPrometheusIntegrationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the monitoring configuration of a Prometheus instance.
//
// @param request - GetPrometheusMonitoringRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetPrometheusMonitoringResponse
func (client *Client) GetPrometheusMonitoringWithOptions(request *GetPrometheusMonitoringRequest, runtime *util.RuntimeOptions) (_result *GetPrometheusMonitoringResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.MonitoringName)) {
		query["MonitoringName"] = request.MonitoringName
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetPrometheusMonitoring"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetPrometheusMonitoringResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the monitoring configuration of a Prometheus instance.
//
// @param request - GetPrometheusMonitoringRequest
//
// @return GetPrometheusMonitoringResponse
func (client *Client) GetPrometheusMonitoring(request *GetPrometheusMonitoringRequest) (_result *GetPrometheusMonitoringResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetPrometheusMonitoringResponse{}
	_body, _err := client.GetPrometheusMonitoringWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a remote write configuration item of a Prometheus instance for Container Service or a Prometheus instance for ECS.
//
// @param request - GetPrometheusRemoteWriteRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetPrometheusRemoteWriteResponse
func (client *Client) GetPrometheusRemoteWriteWithOptions(request *GetPrometheusRemoteWriteRequest, runtime *util.RuntimeOptions) (_result *GetPrometheusRemoteWriteResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.RemoteWriteName)) {
		query["RemoteWriteName"] = request.RemoteWriteName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetPrometheusRemoteWrite"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetPrometheusRemoteWriteResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries a remote write configuration item of a Prometheus instance for Container Service or a Prometheus instance for ECS.
//
// @param request - GetPrometheusRemoteWriteRequest
//
// @return GetPrometheusRemoteWriteResponse
func (client *Client) GetPrometheusRemoteWrite(request *GetPrometheusRemoteWriteRequest) (_result *GetPrometheusRemoteWriteResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetPrometheusRemoteWriteResponse{}
	_body, _err := client.GetPrometheusRemoteWriteWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Obtains the recording rule of a cluster.
//
// @param request - GetRecordingRuleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetRecordingRuleResponse
func (client *Client) GetRecordingRuleWithOptions(request *GetRecordingRuleRequest, runtime *util.RuntimeOptions) (_result *GetRecordingRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetRecordingRule"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetRecordingRuleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Obtains the recording rule of a cluster.
//
// @param request - GetRecordingRuleRequest
//
// @return GetRecordingRuleResponse
func (client *Client) GetRecordingRule(request *GetRecordingRuleRequest) (_result *GetRecordingRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetRecordingRuleResponse{}
	_body, _err := client.GetRecordingRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the objects of a Browser Monitoring application by process identifier (PID).
//
// @param request - GetRetcodeAppByPidRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetRetcodeAppByPidResponse
func (client *Client) GetRetcodeAppByPidWithOptions(request *GetRetcodeAppByPidRequest, runtime *util.RuntimeOptions) (_result *GetRetcodeAppByPidResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetRetcodeAppByPid"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetRetcodeAppByPidResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the objects of a Browser Monitoring application by process identifier (PID).
//
// @param request - GetRetcodeAppByPidRequest
//
// @return GetRetcodeAppByPidResponse
func (client *Client) GetRetcodeAppByPid(request *GetRetcodeAppByPidRequest) (_result *GetRetcodeAppByPidResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetRetcodeAppByPidResponse{}
	_body, _err := client.GetRetcodeAppByPidWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 传入SLS查询语句，查询出前端监控数据
//
// @param request - GetRetcodeDataByQueryRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetRetcodeDataByQueryResponse
func (client *Client) GetRetcodeDataByQueryWithOptions(request *GetRetcodeDataByQueryRequest, runtime *util.RuntimeOptions) (_result *GetRetcodeDataByQueryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.From)) {
		query["From"] = request.From
	}

	if !tea.BoolValue(util.IsUnset(request.Pid)) {
		query["Pid"] = request.Pid
	}

	if !tea.BoolValue(util.IsUnset(request.Query)) {
		query["Query"] = request.Query
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.To)) {
		query["To"] = request.To
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetRetcodeDataByQuery"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetRetcodeDataByQueryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 传入SLS查询语句，查询出前端监控数据
//
// @param request - GetRetcodeDataByQueryRequest
//
// @return GetRetcodeDataByQueryResponse
func (client *Client) GetRetcodeDataByQuery(request *GetRetcodeDataByQueryRequest) (_result *GetRetcodeDataByQueryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetRetcodeDataByQueryResponse{}
	_body, _err := client.GetRetcodeDataByQueryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取前端监控应用SLS存储的详细信息
//
// @param request - GetRetcodeLogstoreRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetRetcodeLogstoreResponse
func (client *Client) GetRetcodeLogstoreWithOptions(request *GetRetcodeLogstoreRequest, runtime *util.RuntimeOptions) (_result *GetRetcodeLogstoreResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Pid)) {
		query["Pid"] = request.Pid
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetRetcodeLogstore"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetRetcodeLogstoreResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取前端监控应用SLS存储的详细信息
//
// @param request - GetRetcodeLogstoreRequest
//
// @return GetRetcodeLogstoreResponse
func (client *Client) GetRetcodeLogstore(request *GetRetcodeLogstoreRequest) (_result *GetRetcodeLogstoreResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetRetcodeLogstoreResponse{}
	_body, _err := client.GetRetcodeLogstoreWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the logon-free URL of a Browser Monitoring application.
//
// @param request - GetRetcodeShareUrlRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetRetcodeShareUrlResponse
func (client *Client) GetRetcodeShareUrlWithOptions(request *GetRetcodeShareUrlRequest, runtime *util.RuntimeOptions) (_result *GetRetcodeShareUrlResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Pid)) {
		query["Pid"] = request.Pid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetRetcodeShareUrl"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetRetcodeShareUrlResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the logon-free URL of a Browser Monitoring application.
//
// @param request - GetRetcodeShareUrlRequest
//
// @return GetRetcodeShareUrlResponse
func (client *Client) GetRetcodeShareUrl(request *GetRetcodeShareUrlRequest) (_result *GetRetcodeShareUrlResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetRetcodeShareUrlResponse{}
	_body, _err := client.GetRetcodeShareUrlWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取前端监控单个应用信息
//
// @param request - GetRumAppInfoRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetRumAppInfoResponse
func (client *Client) GetRumAppInfoWithOptions(request *GetRumAppInfoRequest, runtime *util.RuntimeOptions) (_result *GetRumAppInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppGroup)) {
		query["AppGroup"] = request.AppGroup
	}

	if !tea.BoolValue(util.IsUnset(request.Pid)) {
		query["Pid"] = request.Pid
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetRumAppInfo"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetRumAppInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取前端监控单个应用信息
//
// @param request - GetRumAppInfoRequest
//
// @return GetRumAppInfoResponse
func (client *Client) GetRumAppInfo(request *GetRumAppInfoRequest) (_result *GetRumAppInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetRumAppInfoResponse{}
	_body, _err := client.GetRumAppInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取前端监控应用列表信息
//
// @param request - GetRumAppsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetRumAppsResponse
func (client *Client) GetRumAppsWithOptions(request *GetRumAppsRequest, runtime *util.RuntimeOptions) (_result *GetRumAppsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppGroup)) {
		query["AppGroup"] = request.AppGroup
	}

	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.AppName)) {
		query["AppName"] = request.AppName
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.Tags)) {
		query["Tags"] = request.Tags
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetRumApps"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetRumAppsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取前端监控应用列表信息
//
// @param request - GetRumAppsRequest
//
// @return GetRumAppsResponse
func (client *Client) GetRumApps(request *GetRumAppsRequest) (_result *GetRumAppsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetRumAppsResponse{}
	_body, _err := client.GetRumAppsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取前端监控应用sql查询分页结果
//
// @param request - GetRumDataForPageRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetRumDataForPageResponse
func (client *Client) GetRumDataForPageWithOptions(request *GetRumDataForPageRequest, runtime *util.RuntimeOptions) (_result *GetRumDataForPageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppGroup)) {
		query["AppGroup"] = request.AppGroup
	}

	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Pid)) {
		query["Pid"] = request.Pid
	}

	if !tea.BoolValue(util.IsUnset(request.Query)) {
		query["Query"] = request.Query
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetRumDataForPage"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetRumDataForPageResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取前端监控应用sql查询分页结果
//
// @param request - GetRumDataForPageRequest
//
// @return GetRumDataForPageResponse
func (client *Client) GetRumDataForPage(request *GetRumDataForPageRequest) (_result *GetRumDataForPageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetRumDataForPageResponse{}
	_body, _err := client.GetRumDataForPageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取RUM异常堆栈
//
// @param request - GetRumExceptionStackRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetRumExceptionStackResponse
func (client *Client) GetRumExceptionStackWithOptions(request *GetRumExceptionStackRequest, runtime *util.RuntimeOptions) (_result *GetRumExceptionStackResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ExceptionBinaryImages)) {
		query["ExceptionBinaryImages"] = request.ExceptionBinaryImages
	}

	if !tea.BoolValue(util.IsUnset(request.ExceptionStack)) {
		query["ExceptionStack"] = request.ExceptionStack
	}

	if !tea.BoolValue(util.IsUnset(request.ExceptionThreadId)) {
		query["ExceptionThreadId"] = request.ExceptionThreadId
	}

	if !tea.BoolValue(util.IsUnset(request.Pid)) {
		query["Pid"] = request.Pid
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetRumExceptionStack"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetRumExceptionStackResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取RUM异常堆栈
//
// @param request - GetRumExceptionStackRequest
//
// @return GetRumExceptionStackResponse
func (client *Client) GetRumExceptionStack(request *GetRumExceptionStackRequest) (_result *GetRumExceptionStackResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetRumExceptionStackResponse{}
	_body, _err := client.GetRumExceptionStackWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取前端监控在oss中文件
//
// @param request - GetRumUploadFilesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetRumUploadFilesResponse
func (client *Client) GetRumUploadFilesWithOptions(request *GetRumUploadFilesRequest, runtime *util.RuntimeOptions) (_result *GetRumUploadFilesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppType)) {
		query["AppType"] = request.AppType
	}

	if !tea.BoolValue(util.IsUnset(request.Pid)) {
		query["Pid"] = request.Pid
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetRumUploadFiles"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetRumUploadFilesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取前端监控在oss中文件
//
// @param request - GetRumUploadFilesRequest
//
// @return GetRumUploadFilesResponse
func (client *Client) GetRumUploadFiles(request *GetRumUploadFilesRequest) (_result *GetRumUploadFilesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetRumUploadFilesResponse{}
	_body, _err := client.GetRumUploadFilesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取前端监控上传SourceMap的具体信息
//
// @param request - GetSourceMapInfoRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetSourceMapInfoResponse
func (client *Client) GetSourceMapInfoWithOptions(request *GetSourceMapInfoRequest, runtime *util.RuntimeOptions) (_result *GetSourceMapInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AscendingSequence)) {
		query["AscendingSequence"] = request.AscendingSequence
	}

	if !tea.BoolValue(util.IsUnset(request.Edition)) {
		query["Edition"] = request.Edition
	}

	if !tea.BoolValue(util.IsUnset(request.ID)) {
		query["ID"] = request.ID
	}

	if !tea.BoolValue(util.IsUnset(request.Keyword)) {
		query["Keyword"] = request.Keyword
	}

	if !tea.BoolValue(util.IsUnset(request.OrderField)) {
		query["OrderField"] = request.OrderField
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetSourceMapInfo"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetSourceMapInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取前端监控上传SourceMap的具体信息
//
// @param request - GetSourceMapInfoRequest
//
// @return GetSourceMapInfoResponse
func (client *Client) GetSourceMapInfo(request *GetSourceMapInfoRequest) (_result *GetSourceMapInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetSourceMapInfoResponse{}
	_body, _err := client.GetSourceMapInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information of a method stack.
//
// @param request - GetStackRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetStackResponse
func (client *Client) GetStackWithOptions(request *GetStackRequest, runtime *util.RuntimeOptions) (_result *GetStackResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.Pid)) {
		query["Pid"] = request.Pid
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.RpcID)) {
		query["RpcID"] = request.RpcID
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.TraceID)) {
		query["TraceID"] = request.TraceID
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetStack"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetStackResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information of a method stack.
//
// @param request - GetStackRequest
//
// @return GetStackResponse
func (client *Client) GetStack(request *GetStackRequest) (_result *GetStackResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetStackResponse{}
	_body, _err := client.GetStackWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Obtains detection points.
//
// @param tmpReq - GetSyntheticMonitorsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetSyntheticMonitorsResponse
func (client *Client) GetSyntheticMonitorsWithOptions(tmpReq *GetSyntheticMonitorsRequest, runtime *util.RuntimeOptions) (_result *GetSyntheticMonitorsResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &GetSyntheticMonitorsShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Filter)) {
		request.FilterShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Filter, tea.String("Filter"), tea.String("json"))
	}

	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetSyntheticMonitors"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetSyntheticMonitorsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Obtains detection points.
//
// @param request - GetSyntheticMonitorsRequest
//
// @return GetSyntheticMonitorsResponse
func (client *Client) GetSyntheticMonitors(request *GetSyntheticMonitorsRequest) (_result *GetSyntheticMonitorsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetSyntheticMonitorsResponse{}
	_body, _err := client.GetSyntheticMonitorsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取单个拨测任务的详情
//
// @param request - GetSyntheticTaskDetailRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetSyntheticTaskDetailResponse
func (client *Client) GetSyntheticTaskDetailWithOptions(request *GetSyntheticTaskDetailRequest, runtime *util.RuntimeOptions) (_result *GetSyntheticTaskDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		query["TaskId"] = request.TaskId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetSyntheticTaskDetail"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetSyntheticTaskDetailResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取单个拨测任务的详情
//
// @param request - GetSyntheticTaskDetailRequest
//
// @return GetSyntheticTaskDetailResponse
func (client *Client) GetSyntheticTaskDetail(request *GetSyntheticTaskDetailRequest) (_result *GetSyntheticTaskDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetSyntheticTaskDetailResponse{}
	_body, _err := client.GetSyntheticTaskDetailWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取拨测任务列表
//
// @param request - GetSyntheticTaskListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetSyntheticTaskListResponse
func (client *Client) GetSyntheticTaskListWithOptions(request *GetSyntheticTaskListRequest, runtime *util.RuntimeOptions) (_result *GetSyntheticTaskListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Direction)) {
		query["Direction"] = request.Direction
	}

	if !tea.BoolValue(util.IsUnset(request.Order)) {
		query["Order"] = request.Order
	}

	if !tea.BoolValue(util.IsUnset(request.PageNum)) {
		query["PageNum"] = request.PageNum
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.TaskName)) {
		query["TaskName"] = request.TaskName
	}

	if !tea.BoolValue(util.IsUnset(request.TaskStatus)) {
		query["TaskStatus"] = request.TaskStatus
	}

	if !tea.BoolValue(util.IsUnset(request.TaskType)) {
		query["TaskType"] = request.TaskType
	}

	if !tea.BoolValue(util.IsUnset(request.Url)) {
		query["Url"] = request.Url
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetSyntheticTaskList"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetSyntheticTaskListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取拨测任务列表
//
// @param request - GetSyntheticTaskListRequest
//
// @return GetSyntheticTaskListResponse
func (client *Client) GetSyntheticTaskList(request *GetSyntheticTaskListRequest) (_result *GetSyntheticTaskListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetSyntheticTaskListResponse{}
	_body, _err := client.GetSyntheticTaskListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取拨测任务的监测点信息
//
// @param request - GetSyntheticTaskMonitorsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetSyntheticTaskMonitorsResponse
func (client *Client) GetSyntheticTaskMonitorsWithOptions(request *GetSyntheticTaskMonitorsRequest, runtime *util.RuntimeOptions) (_result *GetSyntheticTaskMonitorsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetSyntheticTaskMonitors"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetSyntheticTaskMonitorsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取拨测任务的监测点信息
//
// @param request - GetSyntheticTaskMonitorsRequest
//
// @return GetSyntheticTaskMonitorsResponse
func (client *Client) GetSyntheticTaskMonitors(request *GetSyntheticTaskMonitorsRequest) (_result *GetSyntheticTaskMonitorsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetSyntheticTaskMonitorsResponse{}
	_body, _err := client.GetSyntheticTaskMonitorsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Obtains the details of a synthetic monitoring task.
//
// @param request - GetTimingSyntheticTaskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetTimingSyntheticTaskResponse
func (client *Client) GetTimingSyntheticTaskWithOptions(request *GetTimingSyntheticTaskRequest, runtime *util.RuntimeOptions) (_result *GetTimingSyntheticTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetTimingSyntheticTask"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetTimingSyntheticTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Obtains the details of a synthetic monitoring task.
//
// @param request - GetTimingSyntheticTaskRequest
//
// @return GetTimingSyntheticTaskResponse
func (client *Client) GetTimingSyntheticTask(request *GetTimingSyntheticTaskRequest) (_result *GetTimingSyntheticTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetTimingSyntheticTaskResponse{}
	_body, _err := client.GetTimingSyntheticTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the details of a trace.
//
// Description:
//
// > You must use Application Real-Time Monitoring Service (ARMS) SDK for Java V2.7.24.
//
// @param request - GetTraceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetTraceResponse
func (client *Client) GetTraceWithOptions(request *GetTraceRequest, runtime *util.RuntimeOptions) (_result *GetTraceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.TraceID)) {
		query["TraceID"] = request.TraceID
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetTrace"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetTraceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the details of a trace.
//
// Description:
//
// > You must use Application Real-Time Monitoring Service (ARMS) SDK for Java V2.7.24.
//
// @param request - GetTraceRequest
//
// @return GetTraceResponse
func (client *Client) GetTrace(request *GetTraceRequest) (_result *GetTraceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetTraceResponse{}
	_body, _err := client.GetTraceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the details of an application monitoring task.
//
// @param request - GetTraceAppRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetTraceAppResponse
func (client *Client) GetTraceAppWithOptions(request *GetTraceAppRequest, runtime *util.RuntimeOptions) (_result *GetTraceAppResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Pid)) {
		query["Pid"] = request.Pid
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.Tags)) {
		query["Tags"] = request.Tags
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetTraceApp"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetTraceAppResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the details of an application monitoring task.
//
// @param request - GetTraceAppRequest
//
// @return GetTraceAppResponse
func (client *Client) GetTraceApp(request *GetTraceAppRequest) (_result *GetTraceAppResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetTraceAppResponse{}
	_body, _err := client.GetTraceAppWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates an alert rule based on an alert template.
//
// Description:
//
// >  You can call the **ImportAppAlertRules*	- operation to import only the alert rules that are generated by Application Real-Time Monitoring Service (ARMS) for application monitoring and browser monitoring. This operation cannot be used to import custom alert rules, alert rules for Prometheus monitoring, or default emergency alert rules.
//
// @param request - ImportAppAlertRulesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ImportAppAlertRulesResponse
func (client *Client) ImportAppAlertRulesWithOptions(request *ImportAppAlertRulesRequest, runtime *util.RuntimeOptions) (_result *ImportAppAlertRulesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ContactGroupIds)) {
		query["ContactGroupIds"] = request.ContactGroupIds
	}

	if !tea.BoolValue(util.IsUnset(request.IsAutoStart)) {
		query["IsAutoStart"] = request.IsAutoStart
	}

	if !tea.BoolValue(util.IsUnset(request.Pids)) {
		query["Pids"] = request.Pids
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.Tags)) {
		query["Tags"] = request.Tags
	}

	if !tea.BoolValue(util.IsUnset(request.TemplageAlertConfig)) {
		query["TemplageAlertConfig"] = request.TemplageAlertConfig
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateAlertId)) {
		query["TemplateAlertId"] = request.TemplateAlertId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ImportAppAlertRules"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ImportAppAlertRulesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates an alert rule based on an alert template.
//
// Description:
//
// >  You can call the **ImportAppAlertRules*	- operation to import only the alert rules that are generated by Application Real-Time Monitoring Service (ARMS) for application monitoring and browser monitoring. This operation cannot be used to import custom alert rules, alert rules for Prometheus monitoring, or default emergency alert rules.
//
// @param request - ImportAppAlertRulesRequest
//
// @return ImportAppAlertRulesResponse
func (client *Client) ImportAppAlertRules(request *ImportAppAlertRulesRequest) (_result *ImportAppAlertRulesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ImportAppAlertRulesResponse{}
	_body, _err := client.ImportAppAlertRulesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Initializes an environment instance.
//
// @param request - InitEnvironmentRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return InitEnvironmentResponse
func (client *Client) InitEnvironmentWithOptions(request *InitEnvironmentRequest, runtime *util.RuntimeOptions) (_result *InitEnvironmentResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AliyunLang)) {
		query["AliyunLang"] = request.AliyunLang
	}

	if !tea.BoolValue(util.IsUnset(request.CreateAuthToken)) {
		query["CreateAuthToken"] = request.CreateAuthToken
	}

	if !tea.BoolValue(util.IsUnset(request.EnvironmentId)) {
		query["EnvironmentId"] = request.EnvironmentId
	}

	if !tea.BoolValue(util.IsUnset(request.ManagedType)) {
		query["ManagedType"] = request.ManagedType
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("InitEnvironment"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &InitEnvironmentResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Initializes an environment instance.
//
// @param request - InitEnvironmentRequest
//
// @return InitEnvironmentResponse
func (client *Client) InitEnvironment(request *InitEnvironmentRequest) (_result *InitEnvironmentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &InitEnvironmentResponse{}
	_body, _err := client.InitEnvironmentWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Installs an add-on.
//
// @param request - InstallAddonRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return InstallAddonResponse
func (client *Client) InstallAddonWithOptions(request *InstallAddonRequest, runtime *util.RuntimeOptions) (_result *InstallAddonResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AddonVersion)) {
		query["AddonVersion"] = request.AddonVersion
	}

	if !tea.BoolValue(util.IsUnset(request.AliyunLang)) {
		query["AliyunLang"] = request.AliyunLang
	}

	if !tea.BoolValue(util.IsUnset(request.DryRun)) {
		query["DryRun"] = request.DryRun
	}

	if !tea.BoolValue(util.IsUnset(request.EnvironmentId)) {
		query["EnvironmentId"] = request.EnvironmentId
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ReleaseName)) {
		query["ReleaseName"] = request.ReleaseName
	}

	if !tea.BoolValue(util.IsUnset(request.Values)) {
		query["Values"] = request.Values
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("InstallAddon"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &InstallAddonResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Installs an add-on.
//
// @param request - InstallAddonRequest
//
// @return InstallAddonResponse
func (client *Client) InstallAddon(request *InstallAddonRequest) (_result *InstallAddonResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &InstallAddonResponse{}
	_body, _err := client.InstallAddonWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Deprecated: OpenAPI InstallCmsExporter is deprecated, please use ARMS::2019-08-08::InstallAddon instead.
//
// Summary:
//
// Installs the cms-exporter collector.
//
// @param request - InstallCmsExporterRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return InstallCmsExporterResponse
// Deprecated
func (client *Client) InstallCmsExporterWithOptions(request *InstallCmsExporterRequest, runtime *util.RuntimeOptions) (_result *InstallCmsExporterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.CmsArgs)) {
		query["CmsArgs"] = request.CmsArgs
	}

	if !tea.BoolValue(util.IsUnset(request.DirectArgs)) {
		query["DirectArgs"] = request.DirectArgs
	}

	if !tea.BoolValue(util.IsUnset(request.EnableTag)) {
		query["EnableTag"] = request.EnableTag
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("InstallCmsExporter"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &InstallCmsExporterResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Deprecated: OpenAPI InstallCmsExporter is deprecated, please use ARMS::2019-08-08::InstallAddon instead.
//
// Summary:
//
// Installs the cms-exporter collector.
//
// @param request - InstallCmsExporterRequest
//
// @return InstallCmsExporterResponse
// Deprecated
func (client *Client) InstallCmsExporter(request *InstallCmsExporterRequest) (_result *InstallCmsExporterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &InstallCmsExporterResponse{}
	_body, _err := client.InstallCmsExporterWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Installs a feature.
//
// @param request - InstallEnvironmentFeatureRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return InstallEnvironmentFeatureResponse
func (client *Client) InstallEnvironmentFeatureWithOptions(request *InstallEnvironmentFeatureRequest, runtime *util.RuntimeOptions) (_result *InstallEnvironmentFeatureResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AliyunLang)) {
		query["AliyunLang"] = request.AliyunLang
	}

	if !tea.BoolValue(util.IsUnset(request.Config)) {
		query["Config"] = request.Config
	}

	if !tea.BoolValue(util.IsUnset(request.EnvironmentId)) {
		query["EnvironmentId"] = request.EnvironmentId
	}

	if !tea.BoolValue(util.IsUnset(request.FeatureName)) {
		query["FeatureName"] = request.FeatureName
	}

	if !tea.BoolValue(util.IsUnset(request.FeatureVersion)) {
		query["FeatureVersion"] = request.FeatureVersion
	}

	if !tea.BoolValue(util.IsUnset(request.Region)) {
		query["Region"] = request.Region
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("InstallEnvironmentFeature"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &InstallEnvironmentFeatureResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Installs a feature.
//
// @param request - InstallEnvironmentFeatureRequest
//
// @return InstallEnvironmentFeatureResponse
func (client *Client) InstallEnvironmentFeature(request *InstallEnvironmentFeatureRequest) (_result *InstallEnvironmentFeatureResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &InstallEnvironmentFeatureResponse{}
	_body, _err := client.InstallEnvironmentFeatureWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a Prometheus instance to monitor a serverless Kubernetes (ASK) cluster or an Elastic Compute Service (ECS) instance.
//
// Description:
//
// If you call the operation to monitor an ASK cluster or an ECS instance, a Prometheus agent is installed in the ASK cluster or ECS instance. Make sure that the ASK cluster or ECS instance has no Prometheus agent installed in advance.
//
// @param request - InstallManagedPrometheusRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return InstallManagedPrometheusResponse
func (client *Client) InstallManagedPrometheusWithOptions(request *InstallManagedPrometheusRequest, runtime *util.RuntimeOptions) (_result *InstallManagedPrometheusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.ClusterName)) {
		query["ClusterName"] = request.ClusterName
	}

	if !tea.BoolValue(util.IsUnset(request.ClusterType)) {
		query["ClusterType"] = request.ClusterType
	}

	if !tea.BoolValue(util.IsUnset(request.GrafanaInstanceId)) {
		query["GrafanaInstanceId"] = request.GrafanaInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.KubeConfig)) {
		query["KubeConfig"] = request.KubeConfig
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityGroupId)) {
		query["SecurityGroupId"] = request.SecurityGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.VSwitchId)) {
		query["VSwitchId"] = request.VSwitchId
	}

	if !tea.BoolValue(util.IsUnset(request.VpcId)) {
		query["VpcId"] = request.VpcId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("InstallManagedPrometheus"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &InstallManagedPrometheusResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a Prometheus instance to monitor a serverless Kubernetes (ASK) cluster or an Elastic Compute Service (ECS) instance.
//
// Description:
//
// If you call the operation to monitor an ASK cluster or an ECS instance, a Prometheus agent is installed in the ASK cluster or ECS instance. Make sure that the ASK cluster or ECS instance has no Prometheus agent installed in advance.
//
// @param request - InstallManagedPrometheusRequest
//
// @return InstallManagedPrometheusResponse
func (client *Client) InstallManagedPrometheus(request *InstallManagedPrometheusRequest) (_result *InstallManagedPrometheusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &InstallManagedPrometheusResponse{}
	_body, _err := client.InstallManagedPrometheusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the alerts that have been triggered.
//
// @param request - ListActivatedAlertsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListActivatedAlertsResponse
func (client *Client) ListActivatedAlertsWithOptions(request *ListActivatedAlertsRequest, runtime *util.RuntimeOptions) (_result *ListActivatedAlertsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.Filter)) {
		query["Filter"] = request.Filter
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListActivatedAlerts"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListActivatedAlertsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the alerts that have been triggered.
//
// @param request - ListActivatedAlertsRequest
//
// @return ListActivatedAlertsResponse
func (client *Client) ListActivatedAlerts(request *ListActivatedAlertsRequest) (_result *ListActivatedAlertsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListActivatedAlertsResponse{}
	_body, _err := client.ListActivatedAlertsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Query the Addons installed in the environment.
//
// @param request - ListAddonReleasesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListAddonReleasesResponse
func (client *Client) ListAddonReleasesWithOptions(request *ListAddonReleasesRequest, runtime *util.RuntimeOptions) (_result *ListAddonReleasesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AddonName)) {
		query["AddonName"] = request.AddonName
	}

	if !tea.BoolValue(util.IsUnset(request.EnvironmentId)) {
		query["EnvironmentId"] = request.EnvironmentId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListAddonReleases"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListAddonReleasesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Query the Addons installed in the environment.
//
// @param request - ListAddonReleasesRequest
//
// @return ListAddonReleasesResponse
func (client *Client) ListAddonReleases(request *ListAddonReleasesRequest) (_result *ListAddonReleasesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListAddonReleasesResponse{}
	_body, _err := client.ListAddonReleasesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// List of access center products.
//
// @param request - ListAddonsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListAddonsResponse
func (client *Client) ListAddonsWithOptions(request *ListAddonsRequest, runtime *util.RuntimeOptions) (_result *ListAddonsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AliyunLang)) {
		query["AliyunLang"] = request.AliyunLang
	}

	if !tea.BoolValue(util.IsUnset(request.Category)) {
		query["Category"] = request.Category
	}

	if !tea.BoolValue(util.IsUnset(request.Regexp)) {
		query["Regexp"] = request.Regexp
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.Search)) {
		query["Search"] = request.Search
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListAddons"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListAddonsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// List of access center products.
//
// @param request - ListAddonsRequest
//
// @return ListAddonsResponse
func (client *Client) ListAddons(request *ListAddonsRequest) (_result *ListAddonsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListAddonsResponse{}
	_body, _err := client.ListAddonsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries historical alert events.
//
// @param request - ListAlertEventsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListAlertEventsResponse
func (client *Client) ListAlertEventsWithOptions(request *ListAlertEventsRequest, runtime *util.RuntimeOptions) (_result *ListAlertEventsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AlertName)) {
		query["AlertName"] = request.AlertName
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.MatchingConditions)) {
		query["MatchingConditions"] = request.MatchingConditions
	}

	if !tea.BoolValue(util.IsUnset(request.Page)) {
		query["Page"] = request.Page
	}

	if !tea.BoolValue(util.IsUnset(request.ShowNotificationPolicies)) {
		query["ShowNotificationPolicies"] = request.ShowNotificationPolicies
	}

	if !tea.BoolValue(util.IsUnset(request.Size)) {
		query["Size"] = request.Size
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListAlertEvents"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListAlertEventsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries historical alert events.
//
// @param request - ListAlertEventsRequest
//
// @return ListAlertEventsResponse
func (client *Client) ListAlertEvents(request *ListAlertEventsRequest) (_result *ListAlertEventsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListAlertEventsResponse{}
	_body, _err := client.ListAlertEventsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the alert sending history.
//
// @param request - ListAlertsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListAlertsResponse
func (client *Client) ListAlertsWithOptions(request *ListAlertsRequest, runtime *util.RuntimeOptions) (_result *ListAlertsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AlertName)) {
		query["AlertName"] = request.AlertName
	}

	if !tea.BoolValue(util.IsUnset(request.DispatchRuleId)) {
		query["DispatchRuleId"] = request.DispatchRuleId
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.IntegrationType)) {
		query["IntegrationType"] = request.IntegrationType
	}

	if !tea.BoolValue(util.IsUnset(request.Page)) {
		query["Page"] = request.Page
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.Severity)) {
		query["Severity"] = request.Severity
	}

	if !tea.BoolValue(util.IsUnset(request.ShowActivities)) {
		query["ShowActivities"] = request.ShowActivities
	}

	if !tea.BoolValue(util.IsUnset(request.ShowEvents)) {
		query["ShowEvents"] = request.ShowEvents
	}

	if !tea.BoolValue(util.IsUnset(request.Size)) {
		query["Size"] = request.Size
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.State)) {
		query["State"] = request.State
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListAlerts"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListAlertsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the alert sending history.
//
// @param request - ListAlertsRequest
//
// @return ListAlertsResponse
func (client *Client) ListAlerts(request *ListAlertsRequest) (_result *ListAlertsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListAlertsResponse{}
	_body, _err := client.ListAlertsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries all Grafana dashboards in a specified region.
//
// @param request - ListClusterFromGrafanaRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListClusterFromGrafanaResponse
func (client *Client) ListClusterFromGrafanaWithOptions(request *ListClusterFromGrafanaRequest, runtime *util.RuntimeOptions) (_result *ListClusterFromGrafanaResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListClusterFromGrafana"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListClusterFromGrafanaResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries all Grafana dashboards in a specified region.
//
// @param request - ListClusterFromGrafanaRequest
//
// @return ListClusterFromGrafanaResponse
func (client *Client) ListClusterFromGrafana(request *ListClusterFromGrafanaRequest) (_result *ListClusterFromGrafanaResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListClusterFromGrafanaResponse{}
	_body, _err := client.ListClusterFromGrafanaWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Deprecated: OpenAPI ListCmsInstances is deprecated, please use ARMS::2019-08-08::ListEnvironmentAddons instead.
//
// Summary:
//
// 查询Cms安装信息
//
// @param request - ListCmsInstancesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListCmsInstancesResponse
// Deprecated
func (client *Client) ListCmsInstancesWithOptions(request *ListCmsInstancesRequest, runtime *util.RuntimeOptions) (_result *ListCmsInstancesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.TypeFilter)) {
		query["TypeFilter"] = request.TypeFilter
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListCmsInstances"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListCmsInstancesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Deprecated: OpenAPI ListCmsInstances is deprecated, please use ARMS::2019-08-08::ListEnvironmentAddons instead.
//
// Summary:
//
// 查询Cms安装信息
//
// @param request - ListCmsInstancesRequest
//
// @return ListCmsInstancesResponse
// Deprecated
func (client *Client) ListCmsInstances(request *ListCmsInstancesRequest) (_result *ListCmsInstancesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListCmsInstancesResponse{}
	_body, _err := client.ListCmsInstancesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the Grafana dashboards of a Container Service for Kubernetes (ACK) cluster.
//
// Description:
//
// None.
//
// @param request - ListDashboardsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListDashboardsResponse
func (client *Client) ListDashboardsWithOptions(request *ListDashboardsRequest, runtime *util.RuntimeOptions) (_result *ListDashboardsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.ClusterType)) {
		query["ClusterType"] = request.ClusterType
	}

	if !tea.BoolValue(util.IsUnset(request.DashboardName)) {
		query["DashboardName"] = request.DashboardName
	}

	if !tea.BoolValue(util.IsUnset(request.Language)) {
		query["Language"] = request.Language
	}

	if !tea.BoolValue(util.IsUnset(request.Product)) {
		query["Product"] = request.Product
	}

	if !tea.BoolValue(util.IsUnset(request.RecreateSwitch)) {
		query["RecreateSwitch"] = request.RecreateSwitch
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.Title)) {
		query["Title"] = request.Title
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListDashboards"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListDashboardsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the Grafana dashboards of a Container Service for Kubernetes (ACK) cluster.
//
// Description:
//
// None.
//
// @param request - ListDashboardsRequest
//
// @return ListDashboardsResponse
func (client *Client) ListDashboards(request *ListDashboardsRequest) (_result *ListDashboardsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListDashboardsResponse{}
	_body, _err := client.ListDashboardsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Uses Loki data sources and other data sources to create a dashboard in Prometheus Service.
//
// @param request - ListDashboardsByNameRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListDashboardsByNameResponse
func (client *Client) ListDashboardsByNameWithOptions(request *ListDashboardsByNameRequest, runtime *util.RuntimeOptions) (_result *ListDashboardsByNameResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.ClusterType)) {
		query["ClusterType"] = request.ClusterType
	}

	if !tea.BoolValue(util.IsUnset(request.DashBoardName)) {
		query["DashBoardName"] = request.DashBoardName
	}

	if !tea.BoolValue(util.IsUnset(request.DashBoardVersion)) {
		query["DashBoardVersion"] = request.DashBoardVersion
	}

	if !tea.BoolValue(util.IsUnset(request.DataSourceType)) {
		query["DataSourceType"] = request.DataSourceType
	}

	if !tea.BoolValue(util.IsUnset(request.GroupName)) {
		query["GroupName"] = request.GroupName
	}

	if !tea.BoolValue(util.IsUnset(request.OnlyQuery)) {
		query["OnlyQuery"] = request.OnlyQuery
	}

	if !tea.BoolValue(util.IsUnset(request.ProductCode)) {
		query["ProductCode"] = request.ProductCode
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListDashboardsByName"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListDashboardsByNameResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Uses Loki data sources and other data sources to create a dashboard in Prometheus Service.
//
// @param request - ListDashboardsByNameRequest
//
// @return ListDashboardsByNameResponse
func (client *Client) ListDashboardsByName(request *ListDashboardsByNameRequest) (_result *ListDashboardsByNameResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListDashboardsByNameResponse{}
	_body, _err := client.ListDashboardsByNameWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - ListDispatchRuleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListDispatchRuleResponse
func (client *Client) ListDispatchRuleWithOptions(request *ListDispatchRuleRequest, runtime *util.RuntimeOptions) (_result *ListDispatchRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.System)) {
		query["System"] = request.System
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListDispatchRule"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListDispatchRuleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - ListDispatchRuleRequest
//
// @return ListDispatchRuleResponse
func (client *Client) ListDispatchRule(request *ListDispatchRuleRequest) (_result *ListDispatchRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListDispatchRuleResponse{}
	_body, _err := client.ListDispatchRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the custom jobs of an environment.
//
// @param request - ListEnvCustomJobsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListEnvCustomJobsResponse
func (client *Client) ListEnvCustomJobsWithOptions(request *ListEnvCustomJobsRequest, runtime *util.RuntimeOptions) (_result *ListEnvCustomJobsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EncryptYaml)) {
		query["EncryptYaml"] = request.EncryptYaml
	}

	if !tea.BoolValue(util.IsUnset(request.EnvironmentId)) {
		query["EnvironmentId"] = request.EnvironmentId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListEnvCustomJobs"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListEnvCustomJobsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the custom jobs of an environment.
//
// @param request - ListEnvCustomJobsRequest
//
// @return ListEnvCustomJobsResponse
func (client *Client) ListEnvCustomJobs(request *ListEnvCustomJobsRequest) (_result *ListEnvCustomJobsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListEnvCustomJobsResponse{}
	_body, _err := client.ListEnvCustomJobsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the PodMonitors of an environment.
//
// @param request - ListEnvPodMonitorsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListEnvPodMonitorsResponse
func (client *Client) ListEnvPodMonitorsWithOptions(request *ListEnvPodMonitorsRequest, runtime *util.RuntimeOptions) (_result *ListEnvPodMonitorsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EnvironmentId)) {
		query["EnvironmentId"] = request.EnvironmentId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListEnvPodMonitors"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListEnvPodMonitorsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the PodMonitors of an environment.
//
// @param request - ListEnvPodMonitorsRequest
//
// @return ListEnvPodMonitorsResponse
func (client *Client) ListEnvPodMonitors(request *ListEnvPodMonitorsRequest) (_result *ListEnvPodMonitorsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListEnvPodMonitorsResponse{}
	_body, _err := client.ListEnvPodMonitorsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the ServiceMonitors of an environment.
//
// @param request - ListEnvServiceMonitorsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListEnvServiceMonitorsResponse
func (client *Client) ListEnvServiceMonitorsWithOptions(request *ListEnvServiceMonitorsRequest, runtime *util.RuntimeOptions) (_result *ListEnvServiceMonitorsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EnvironmentId)) {
		query["EnvironmentId"] = request.EnvironmentId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListEnvServiceMonitors"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListEnvServiceMonitorsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the ServiceMonitors of an environment.
//
// @param request - ListEnvServiceMonitorsRequest
//
// @return ListEnvServiceMonitorsResponse
func (client *Client) ListEnvServiceMonitors(request *ListEnvServiceMonitorsRequest) (_result *ListEnvServiceMonitorsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListEnvServiceMonitorsResponse{}
	_body, _err := client.ListEnvServiceMonitorsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries information about a dashboard of an environment instance.
//
// @param request - ListEnvironmentDashboardsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListEnvironmentDashboardsResponse
func (client *Client) ListEnvironmentDashboardsWithOptions(request *ListEnvironmentDashboardsRequest, runtime *util.RuntimeOptions) (_result *ListEnvironmentDashboardsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AddonName)) {
		query["AddonName"] = request.AddonName
	}

	if !tea.BoolValue(util.IsUnset(request.EnvironmentId)) {
		query["EnvironmentId"] = request.EnvironmentId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.Scene)) {
		query["Scene"] = request.Scene
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListEnvironmentDashboards"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListEnvironmentDashboardsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries information about a dashboard of an environment instance.
//
// @param request - ListEnvironmentDashboardsRequest
//
// @return ListEnvironmentDashboardsResponse
func (client *Client) ListEnvironmentDashboards(request *ListEnvironmentDashboardsRequest) (_result *ListEnvironmentDashboardsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListEnvironmentDashboardsResponse{}
	_body, _err := client.ListEnvironmentDashboardsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 环境的feature列表
//
// @param request - ListEnvironmentFeaturesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListEnvironmentFeaturesResponse
func (client *Client) ListEnvironmentFeaturesWithOptions(request *ListEnvironmentFeaturesRequest, runtime *util.RuntimeOptions) (_result *ListEnvironmentFeaturesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AliyunLang)) {
		query["AliyunLang"] = request.AliyunLang
	}

	if !tea.BoolValue(util.IsUnset(request.EnvironmentId)) {
		query["EnvironmentId"] = request.EnvironmentId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListEnvironmentFeatures"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListEnvironmentFeaturesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 环境的feature列表
//
// @param request - ListEnvironmentFeaturesRequest
//
// @return ListEnvironmentFeaturesResponse
func (client *Client) ListEnvironmentFeatures(request *ListEnvironmentFeaturesRequest) (_result *ListEnvironmentFeaturesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListEnvironmentFeaturesResponse{}
	_body, _err := client.ListEnvironmentFeaturesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries environments.
//
// @param tmpReq - ListEnvironmentsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListEnvironmentsResponse
func (client *Client) ListEnvironmentsWithOptions(tmpReq *ListEnvironmentsRequest, runtime *util.RuntimeOptions) (_result *ListEnvironmentsResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &ListEnvironmentsShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Tag)) {
		request.TagShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Tag, tea.String("Tag"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AddonName)) {
		query["AddonName"] = request.AddonName
	}

	if !tea.BoolValue(util.IsUnset(request.BindResourceId)) {
		query["BindResourceId"] = request.BindResourceId
	}

	if !tea.BoolValue(util.IsUnset(request.EnvironmentType)) {
		query["EnvironmentType"] = request.EnvironmentType
	}

	if !tea.BoolValue(util.IsUnset(request.FeePackage)) {
		query["FeePackage"] = request.FeePackage
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.TagShrink)) {
		query["Tag"] = request.TagShrink
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListEnvironments"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListEnvironmentsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries environments.
//
// @param request - ListEnvironmentsRequest
//
// @return ListEnvironmentsResponse
func (client *Client) ListEnvironments(request *ListEnvironmentsRequest) (_result *ListEnvironmentsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListEnvironmentsResponse{}
	_body, _err := client.ListEnvironmentsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about an escalation policy.
//
// @param request - ListEscalationPoliciesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListEscalationPoliciesResponse
func (client *Client) ListEscalationPoliciesWithOptions(request *ListEscalationPoliciesRequest, runtime *util.RuntimeOptions) (_result *ListEscalationPoliciesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListEscalationPolicies"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListEscalationPoliciesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about an escalation policy.
//
// @param request - ListEscalationPoliciesRequest
//
// @return ListEscalationPoliciesResponse
func (client *Client) ListEscalationPolicies(request *ListEscalationPoliciesRequest) (_result *ListEscalationPoliciesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListEscalationPoliciesResponse{}
	_body, _err := client.ListEscalationPoliciesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries EventBridge integrations that are used to push notifications.
//
// @param request - ListEventBridgeIntegrationsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListEventBridgeIntegrationsResponse
func (client *Client) ListEventBridgeIntegrationsWithOptions(request *ListEventBridgeIntegrationsRequest, runtime *util.RuntimeOptions) (_result *ListEventBridgeIntegrationsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListEventBridgeIntegrations"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListEventBridgeIntegrationsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries EventBridge integrations that are used to push notifications.
//
// @param request - ListEventBridgeIntegrationsRequest
//
// @return ListEventBridgeIntegrationsResponse
func (client *Client) ListEventBridgeIntegrations(request *ListEventBridgeIntegrationsRequest) (_result *ListEventBridgeIntegrationsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListEventBridgeIntegrationsResponse{}
	_body, _err := client.ListEventBridgeIntegrationsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取指定工作区列表
//
// @param tmpReq - ListGrafanaWorkspaceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListGrafanaWorkspaceResponse
func (client *Client) ListGrafanaWorkspaceWithOptions(tmpReq *ListGrafanaWorkspaceRequest, runtime *util.RuntimeOptions) (_result *ListGrafanaWorkspaceResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &ListGrafanaWorkspaceShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Tags)) {
		request.TagsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Tags, tea.String("Tags"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AliyunLang)) {
		query["AliyunLang"] = request.AliyunLang
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.TagsShrink)) {
		query["Tags"] = request.TagsShrink
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListGrafanaWorkspace"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListGrafanaWorkspaceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取指定工作区列表
//
// @param request - ListGrafanaWorkspaceRequest
//
// @return ListGrafanaWorkspaceResponse
func (client *Client) ListGrafanaWorkspace(request *ListGrafanaWorkspaceRequest) (_result *ListGrafanaWorkspaceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListGrafanaWorkspaceResponse{}
	_body, _err := client.ListGrafanaWorkspaceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the abnormal Insights events within a specified period of time.
//
// @param request - ListInsightsEventsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListInsightsEventsResponse
func (client *Client) ListInsightsEventsWithOptions(request *ListInsightsEventsRequest, runtime *util.RuntimeOptions) (_result *ListInsightsEventsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.InsightsTypes)) {
		query["InsightsTypes"] = request.InsightsTypes
	}

	if !tea.BoolValue(util.IsUnset(request.Pid)) {
		query["Pid"] = request.Pid
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListInsightsEvents"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListInsightsEventsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the abnormal Insights events within a specified period of time.
//
// @param request - ListInsightsEventsRequest
//
// @return ListInsightsEventsResponse
func (client *Client) ListInsightsEvents(request *ListInsightsEventsRequest) (_result *ListInsightsEventsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListInsightsEventsResponse{}
	_body, _err := client.ListInsightsEventsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// ListIntegration
//
// @param request - ListIntegrationRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListIntegrationResponse
func (client *Client) ListIntegrationWithOptions(request *ListIntegrationRequest, runtime *util.RuntimeOptions) (_result *ListIntegrationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListIntegration"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListIntegrationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// ListIntegration
//
// @param request - ListIntegrationRequest
//
// @return ListIntegrationResponse
func (client *Client) ListIntegration(request *ListIntegrationRequest) (_result *ListIntegrationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListIntegrationResponse{}
	_body, _err := client.ListIntegrationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries notification policies based on specified conditions.
//
// @param request - ListNotificationPoliciesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListNotificationPoliciesResponse
func (client *Client) ListNotificationPoliciesWithOptions(request *ListNotificationPoliciesRequest, runtime *util.RuntimeOptions) (_result *ListNotificationPoliciesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DirectedMode)) {
		query["DirectedMode"] = request.DirectedMode
	}

	if !tea.BoolValue(util.IsUnset(request.Ids)) {
		query["Ids"] = request.Ids
	}

	if !tea.BoolValue(util.IsUnset(request.IsDetail)) {
		query["IsDetail"] = request.IsDetail
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.Page)) {
		query["Page"] = request.Page
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.Size)) {
		query["Size"] = request.Size
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListNotificationPolicies"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListNotificationPoliciesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries notification policies based on specified conditions.
//
// @param request - ListNotificationPoliciesRequest
//
// @return ListNotificationPoliciesResponse
func (client *Client) ListNotificationPolicies(request *ListNotificationPoliciesRequest) (_result *ListNotificationPoliciesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListNotificationPoliciesResponse{}
	_body, _err := client.ListNotificationPoliciesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about a scheduling policy.
//
// @param request - ListOnCallSchedulesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListOnCallSchedulesResponse
func (client *Client) ListOnCallSchedulesWithOptions(request *ListOnCallSchedulesRequest, runtime *util.RuntimeOptions) (_result *ListOnCallSchedulesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListOnCallSchedules"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListOnCallSchedulesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about a scheduling policy.
//
// @param request - ListOnCallSchedulesRequest
//
// @return ListOnCallSchedulesResponse
func (client *Client) ListOnCallSchedules(request *ListOnCallSchedulesRequest) (_result *ListOnCallSchedulesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListOnCallSchedulesResponse{}
	_body, _err := client.ListOnCallSchedulesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// The value of the annotation.
//
// @param request - ListPrometheusAlertRulesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListPrometheusAlertRulesResponse
func (client *Client) ListPrometheusAlertRulesWithOptions(request *ListPrometheusAlertRulesRequest, runtime *util.RuntimeOptions) (_result *ListPrometheusAlertRulesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.MatchExpressions)) {
		query["MatchExpressions"] = request.MatchExpressions
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	if !tea.BoolValue(util.IsUnset(request.Tags)) {
		query["Tags"] = request.Tags
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListPrometheusAlertRules"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListPrometheusAlertRulesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// The value of the annotation.
//
// @param request - ListPrometheusAlertRulesRequest
//
// @return ListPrometheusAlertRulesResponse
func (client *Client) ListPrometheusAlertRules(request *ListPrometheusAlertRulesRequest) (_result *ListPrometheusAlertRulesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListPrometheusAlertRulesResponse{}
	_body, _err := client.ListPrometheusAlertRulesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// The available memory on node {{ $labels.instance }} is less than 10%. Available memory: {{ $value }}%
//
// @param request - ListPrometheusAlertTemplatesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListPrometheusAlertTemplatesResponse
func (client *Client) ListPrometheusAlertTemplatesWithOptions(request *ListPrometheusAlertTemplatesRequest, runtime *util.RuntimeOptions) (_result *ListPrometheusAlertTemplatesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListPrometheusAlertTemplates"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListPrometheusAlertTemplatesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// The available memory on node {{ $labels.instance }} is less than 10%. Available memory: {{ $value }}%
//
// @param request - ListPrometheusAlertTemplatesRequest
//
// @return ListPrometheusAlertTemplatesResponse
func (client *Client) ListPrometheusAlertTemplates(request *ListPrometheusAlertTemplatesRequest) (_result *ListPrometheusAlertTemplatesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListPrometheusAlertTemplatesResponse{}
	_body, _err := client.ListPrometheusAlertTemplatesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取账号下聚合实例列表
//
// @param request - ListPrometheusGlobalViewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListPrometheusGlobalViewResponse
func (client *Client) ListPrometheusGlobalViewWithOptions(request *ListPrometheusGlobalViewRequest, runtime *util.RuntimeOptions) (_result *ListPrometheusGlobalViewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListPrometheusGlobalView"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListPrometheusGlobalViewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取账号下聚合实例列表
//
// @param request - ListPrometheusGlobalViewRequest
//
// @return ListPrometheusGlobalViewResponse
func (client *Client) ListPrometheusGlobalView(request *ListPrometheusGlobalViewRequest) (_result *ListPrometheusGlobalViewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListPrometheusGlobalViewResponse{}
	_body, _err := client.ListPrometheusGlobalViewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries Prometheus instances by tag and resource group.
//
// @param request - ListPrometheusInstanceByTagAndResourceGroupIdRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListPrometheusInstanceByTagAndResourceGroupIdResponse
func (client *Client) ListPrometheusInstanceByTagAndResourceGroupIdWithOptions(request *ListPrometheusInstanceByTagAndResourceGroupIdRequest, runtime *util.RuntimeOptions) (_result *ListPrometheusInstanceByTagAndResourceGroupIdResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListPrometheusInstanceByTagAndResourceGroupId"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListPrometheusInstanceByTagAndResourceGroupIdResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries Prometheus instances by tag and resource group.
//
// @param request - ListPrometheusInstanceByTagAndResourceGroupIdRequest
//
// @return ListPrometheusInstanceByTagAndResourceGroupIdResponse
func (client *Client) ListPrometheusInstanceByTagAndResourceGroupId(request *ListPrometheusInstanceByTagAndResourceGroupIdRequest) (_result *ListPrometheusInstanceByTagAndResourceGroupIdResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListPrometheusInstanceByTagAndResourceGroupIdResponse{}
	_body, _err := client.ListPrometheusInstanceByTagAndResourceGroupIdWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries all Prometheus instances in a region.
//
// @param request - ListPrometheusInstancesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListPrometheusInstancesResponse
func (client *Client) ListPrometheusInstancesWithOptions(request *ListPrometheusInstancesRequest, runtime *util.RuntimeOptions) (_result *ListPrometheusInstancesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterType)) {
		query["ClusterType"] = request.ClusterType
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ShowGlobalView)) {
		query["ShowGlobalView"] = request.ShowGlobalView
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListPrometheusInstances"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListPrometheusInstancesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries all Prometheus instances in a region.
//
// @param request - ListPrometheusInstancesRequest
//
// @return ListPrometheusInstancesResponse
func (client *Client) ListPrometheusInstances(request *ListPrometheusInstancesRequest) (_result *ListPrometheusInstancesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListPrometheusInstancesResponse{}
	_body, _err := client.ListPrometheusInstancesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of exporters that are integrated into a Prometheus instance. Only aliyun-cs and ecs instances are supported.
//
// @param request - ListPrometheusIntegrationRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListPrometheusIntegrationResponse
func (client *Client) ListPrometheusIntegrationWithOptions(request *ListPrometheusIntegrationRequest, runtime *util.RuntimeOptions) (_result *ListPrometheusIntegrationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.IntegrationType)) {
		query["IntegrationType"] = request.IntegrationType
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListPrometheusIntegration"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListPrometheusIntegrationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries a list of exporters that are integrated into a Prometheus instance. Only aliyun-cs and ecs instances are supported.
//
// @param request - ListPrometheusIntegrationRequest
//
// @return ListPrometheusIntegrationResponse
func (client *Client) ListPrometheusIntegration(request *ListPrometheusIntegrationRequest) (_result *ListPrometheusIntegrationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListPrometheusIntegrationResponse{}
	_body, _err := client.ListPrometheusIntegrationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the monitoring configuration of a Prometheus instance.
//
// @param request - ListPrometheusMonitoringRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListPrometheusMonitoringResponse
func (client *Client) ListPrometheusMonitoringWithOptions(request *ListPrometheusMonitoringRequest, runtime *util.RuntimeOptions) (_result *ListPrometheusMonitoringResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListPrometheusMonitoring"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListPrometheusMonitoringResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the monitoring configuration of a Prometheus instance.
//
// @param request - ListPrometheusMonitoringRequest
//
// @return ListPrometheusMonitoringResponse
func (client *Client) ListPrometheusMonitoring(request *ListPrometheusMonitoringRequest) (_result *ListPrometheusMonitoringResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListPrometheusMonitoringResponse{}
	_body, _err := client.ListPrometheusMonitoringWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the remote write configuration items of a Prometheus instance for Container Service or a Prometheus instance for ECS.
//
// @param request - ListPrometheusRemoteWritesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListPrometheusRemoteWritesResponse
func (client *Client) ListPrometheusRemoteWritesWithOptions(request *ListPrometheusRemoteWritesRequest, runtime *util.RuntimeOptions) (_result *ListPrometheusRemoteWritesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListPrometheusRemoteWrites"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListPrometheusRemoteWritesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the remote write configuration items of a Prometheus instance for Container Service or a Prometheus instance for ECS.
//
// @param request - ListPrometheusRemoteWritesRequest
//
// @return ListPrometheusRemoteWritesResponse
func (client *Client) ListPrometheusRemoteWrites(request *ListPrometheusRemoteWritesRequest) (_result *ListPrometheusRemoteWritesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListPrometheusRemoteWritesResponse{}
	_body, _err := client.ListPrometheusRemoteWritesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the Browser Monitoring tasks in a region.
//
// Description:
//
// ***
//
// @param request - ListRetcodeAppsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListRetcodeAppsResponse
func (client *Client) ListRetcodeAppsWithOptions(request *ListRetcodeAppsRequest, runtime *util.RuntimeOptions) (_result *ListRetcodeAppsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.Tags)) {
		query["Tags"] = request.Tags
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListRetcodeApps"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListRetcodeAppsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the Browser Monitoring tasks in a region.
//
// Description:
//
// ***
//
// @param request - ListRetcodeAppsRequest
//
// @return ListRetcodeAppsResponse
func (client *Client) ListRetcodeApps(request *ListRetcodeAppsRequest) (_result *ListRetcodeAppsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListRetcodeAppsResponse{}
	_body, _err := client.ListRetcodeAppsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - ListScenarioRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListScenarioResponse
func (client *Client) ListScenarioWithOptions(request *ListScenarioRequest, runtime *util.RuntimeOptions) (_result *ListScenarioResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.Scenario)) {
		query["Scenario"] = request.Scenario
	}

	if !tea.BoolValue(util.IsUnset(request.Sign)) {
		query["Sign"] = request.Sign
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListScenario"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListScenarioResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - ListScenarioRequest
//
// @return ListScenarioResponse
func (client *Client) ListScenario(request *ListScenarioRequest) (_result *ListScenarioResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListScenarioResponse{}
	_body, _err := client.ListScenarioWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information of a silence policy list.
//
// @param request - ListSilencePoliciesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListSilencePoliciesResponse
func (client *Client) ListSilencePoliciesWithOptions(request *ListSilencePoliciesRequest, runtime *util.RuntimeOptions) (_result *ListSilencePoliciesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.IsDetail)) {
		query["IsDetail"] = request.IsDetail
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.Page)) {
		query["Page"] = request.Page
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.Size)) {
		query["Size"] = request.Size
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListSilencePolicies"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListSilencePoliciesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information of a silence policy list.
//
// @param request - ListSilencePoliciesRequest
//
// @return ListSilencePoliciesResponse
func (client *Client) ListSilencePolicies(request *ListSilencePoliciesRequest) (_result *ListSilencePoliciesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListSilencePoliciesResponse{}
	_body, _err := client.ListSilencePoliciesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询拨测明细列表
//
// @param tmpReq - ListSyntheticDetailRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListSyntheticDetailResponse
func (client *Client) ListSyntheticDetailWithOptions(tmpReq *ListSyntheticDetailRequest, runtime *util.RuntimeOptions) (_result *ListSyntheticDetailResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &ListSyntheticDetailShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.AdvancedFilters)) {
		request.AdvancedFiltersShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.AdvancedFilters, tea.String("AdvancedFilters"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.ExactFilters)) {
		request.ExactFiltersShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.ExactFilters, tea.String("ExactFilters"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.Filters)) {
		request.FiltersShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Filters, tea.String("Filters"), tea.String("json"))
	}

	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListSyntheticDetail"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListSyntheticDetailResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询拨测明细列表
//
// @param request - ListSyntheticDetailRequest
//
// @return ListSyntheticDetailResponse
func (client *Client) ListSyntheticDetail(request *ListSyntheticDetailRequest) (_result *ListSyntheticDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListSyntheticDetailResponse{}
	_body, _err := client.ListSyntheticDetailWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries scheduled synthetic monitoring tasks.
//
// @param tmpReq - ListTimingSyntheticTasksRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListTimingSyntheticTasksResponse
func (client *Client) ListTimingSyntheticTasksWithOptions(tmpReq *ListTimingSyntheticTasksRequest, runtime *util.RuntimeOptions) (_result *ListTimingSyntheticTasksResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &ListTimingSyntheticTasksShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Search)) {
		request.SearchShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Search, tea.String("Search"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.Tags)) {
		request.TagsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Tags, tea.String("Tags"), tea.String("json"))
	}

	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListTimingSyntheticTasks"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListTimingSyntheticTasksResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries scheduled synthetic monitoring tasks.
//
// @param request - ListTimingSyntheticTasksRequest
//
// @return ListTimingSyntheticTasksResponse
func (client *Client) ListTimingSyntheticTasks(request *ListTimingSyntheticTasksRequest) (_result *ListTimingSyntheticTasksResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListTimingSyntheticTasksResponse{}
	_body, _err := client.ListTimingSyntheticTasksWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries all Application Monitoring tasks in a specified region.
//
// @param request - ListTraceAppsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListTraceAppsResponse
func (client *Client) ListTraceAppsWithOptions(request *ListTraceAppsRequest, runtime *util.RuntimeOptions) (_result *ListTraceAppsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppType)) {
		query["AppType"] = request.AppType
	}

	if !tea.BoolValue(util.IsUnset(request.Region)) {
		query["Region"] = request.Region
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.Tags)) {
		query["Tags"] = request.Tags
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListTraceApps"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListTraceAppsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries all Application Monitoring tasks in a specified region.
//
// @param request - ListTraceAppsRequest
//
// @return ListTraceAppsResponse
func (client *Client) ListTraceApps(request *ListTraceAppsRequest) (_result *ListTraceAppsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListTraceAppsResponse{}
	_body, _err := client.ListTraceAppsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Obtains the recording rule of a Prometheus instance.
//
// @param request - ManageGetRecordingRuleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ManageGetRecordingRuleResponse
func (client *Client) ManageGetRecordingRuleWithOptions(request *ManageGetRecordingRuleRequest, runtime *util.RuntimeOptions) (_result *ManageGetRecordingRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.QueryUserId)) {
		query["QueryUserId"] = request.QueryUserId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ManageGetRecordingRule"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ManageGetRecordingRuleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Obtains the recording rule of a Prometheus instance.
//
// @param request - ManageGetRecordingRuleRequest
//
// @return ManageGetRecordingRuleResponse
func (client *Client) ManageGetRecordingRule(request *ManageGetRecordingRuleRequest) (_result *ManageGetRecordingRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ManageGetRecordingRuleResponse{}
	_body, _err := client.ManageGetRecordingRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies the recording rule of a Prometheus instance.
//
// @param request - ManageRecordingRuleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ManageRecordingRuleResponse
func (client *Client) ManageRecordingRuleWithOptions(request *ManageRecordingRuleRequest, runtime *util.RuntimeOptions) (_result *ManageRecordingRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.QueryUserId)) {
		query["QueryUserId"] = request.QueryUserId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.RuleYaml)) {
		query["RuleYaml"] = request.RuleYaml
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ManageRecordingRule"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ManageRecordingRuleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies the recording rule of a Prometheus instance.
//
// @param request - ManageRecordingRuleRequest
//
// @return ManageRecordingRuleResponse
func (client *Client) ManageRecordingRule(request *ManageRecordingRuleRequest) (_result *ManageRecordingRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ManageRecordingRuleResponse{}
	_body, _err := client.ManageRecordingRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Assigns the service-linked role AliyunServiceRoleForARMS to Application Real-Time Monitoring Service (ARMS).
//
// @param request - OpenArmsDefaultSLRRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return OpenArmsDefaultSLRResponse
func (client *Client) OpenArmsDefaultSLRWithOptions(request *OpenArmsDefaultSLRRequest, runtime *util.RuntimeOptions) (_result *OpenArmsDefaultSLRResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("OpenArmsDefaultSLR"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &OpenArmsDefaultSLRResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Assigns the service-linked role AliyunServiceRoleForARMS to Application Real-Time Monitoring Service (ARMS).
//
// @param request - OpenArmsDefaultSLRRequest
//
// @return OpenArmsDefaultSLRResponse
func (client *Client) OpenArmsDefaultSLR(request *OpenArmsDefaultSLRRequest) (_result *OpenArmsDefaultSLRResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &OpenArmsDefaultSLRResponse{}
	_body, _err := client.OpenArmsDefaultSLRWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Activates a specified pay-as-you-go sub-service of Application Real-Time Monitoring Service (ARMS).
//
// Description:
//
// The **OpenArmsServiceSecondVersion*	- operation supports the following sub-service editions:
//
// 	- Application Monitoring: Basic Edition
//
// 	- Browser Monitoring: Basic Edition
//
// 	- Synthetic Monitoring: Pro Edition (pay-as-you-go)
//
// 	- Prometheus Service: Pro Edition
//
// @param request - OpenArmsServiceSecondVersionRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return OpenArmsServiceSecondVersionResponse
func (client *Client) OpenArmsServiceSecondVersionWithOptions(request *OpenArmsServiceSecondVersionRequest, runtime *util.RuntimeOptions) (_result *OpenArmsServiceSecondVersionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("OpenArmsServiceSecondVersion"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &OpenArmsServiceSecondVersionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Activates a specified pay-as-you-go sub-service of Application Real-Time Monitoring Service (ARMS).
//
// Description:
//
// The **OpenArmsServiceSecondVersion*	- operation supports the following sub-service editions:
//
// 	- Application Monitoring: Basic Edition
//
// 	- Browser Monitoring: Basic Edition
//
// 	- Synthetic Monitoring: Pro Edition (pay-as-you-go)
//
// 	- Prometheus Service: Pro Edition
//
// @param request - OpenArmsServiceSecondVersionRequest
//
// @return OpenArmsServiceSecondVersionResponse
func (client *Client) OpenArmsServiceSecondVersion(request *OpenArmsServiceSecondVersionRequest) (_result *OpenArmsServiceSecondVersionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &OpenArmsServiceSecondVersionResponse{}
	_body, _err := client.OpenArmsServiceSecondVersionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Activates a virtual cluster.
//
// @param request - OpenVClusterRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return OpenVClusterResponse
func (client *Client) OpenVClusterWithOptions(request *OpenVClusterRequest, runtime *util.RuntimeOptions) (_result *OpenVClusterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterType)) {
		query["ClusterType"] = request.ClusterType
	}

	if !tea.BoolValue(util.IsUnset(request.Length)) {
		query["Length"] = request.Length
	}

	if !tea.BoolValue(util.IsUnset(request.Product)) {
		query["Product"] = request.Product
	}

	if !tea.BoolValue(util.IsUnset(request.RecreateSwitch)) {
		query["RecreateSwitch"] = request.RecreateSwitch
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("OpenVCluster"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &OpenVClusterResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Activates a virtual cluster.
//
// @param request - OpenVClusterRequest
//
// @return OpenVClusterResponse
func (client *Client) OpenVCluster(request *OpenVClusterRequest) (_result *OpenVClusterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &OpenVClusterResponse{}
	_body, _err := client.OpenVClusterWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Activates the service-linked role AliyunServiceRoleForXtrace for Tracing Analysis.
//
// @param request - OpenXtraceDefaultSLRRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return OpenXtraceDefaultSLRResponse
func (client *Client) OpenXtraceDefaultSLRWithOptions(request *OpenXtraceDefaultSLRRequest, runtime *util.RuntimeOptions) (_result *OpenXtraceDefaultSLRResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("OpenXtraceDefaultSLR"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &OpenXtraceDefaultSLRResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Activates the service-linked role AliyunServiceRoleForXtrace for Tracing Analysis.
//
// @param request - OpenXtraceDefaultSLRRequest
//
// @return OpenXtraceDefaultSLRResponse
func (client *Client) OpenXtraceDefaultSLR(request *OpenXtraceDefaultSLRRequest) (_result *OpenXtraceDefaultSLRResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &OpenXtraceDefaultSLRResponse{}
	_body, _err := client.OpenXtraceDefaultSLRWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the encoding mapping content based on the metadata IDs and metadata type.
//
// @param request - QueryAppMetadataRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryAppMetadataResponse
func (client *Client) QueryAppMetadataWithOptions(request *QueryAppMetadataRequest, runtime *util.RuntimeOptions) (_result *QueryAppMetadataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryAppMetadata"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryAppMetadataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the encoding mapping content based on the metadata IDs and metadata type.
//
// @param request - QueryAppMetadataRequest
//
// @return QueryAppMetadataResponse
func (client *Client) QueryAppMetadata(request *QueryAppMetadataRequest) (_result *QueryAppMetadataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryAppMetadataResponse{}
	_body, _err := client.QueryAppMetadataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询应用拓扑
//
// @param tmpReq - QueryAppTopologyRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryAppTopologyResponse
func (client *Client) QueryAppTopologyWithOptions(tmpReq *QueryAppTopologyRequest, runtime *util.RuntimeOptions) (_result *QueryAppTopologyResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &QueryAppTopologyShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Filters)) {
		request.FiltersShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Filters, tea.String("Filters"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppType)) {
		query["AppType"] = request.AppType
	}

	if !tea.BoolValue(util.IsUnset(request.Db)) {
		query["Db"] = request.Db
	}

	if !tea.BoolValue(util.IsUnset(request.DbName)) {
		query["DbName"] = request.DbName
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.FiltersShrink)) {
		query["Filters"] = request.FiltersShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Pid)) {
		query["Pid"] = request.Pid
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.Rpc)) {
		query["Rpc"] = request.Rpc
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryAppTopology"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryAppTopologyResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询应用拓扑
//
// @param request - QueryAppTopologyRequest
//
// @return QueryAppTopologyResponse
func (client *Client) QueryAppTopology(request *QueryAppTopologyRequest) (_result *QueryAppTopologyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryAppTopologyResponse{}
	_body, _err := client.QueryAppTopologyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - QueryCommercialUsageRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryCommercialUsageResponse
func (client *Client) QueryCommercialUsageWithOptions(request *QueryCommercialUsageRequest, runtime *util.RuntimeOptions) (_result *QueryCommercialUsageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AdvancedFilters)) {
		query["AdvancedFilters"] = request.AdvancedFilters
	}

	if !tea.BoolValue(util.IsUnset(request.Dimensions)) {
		query["Dimensions"] = request.Dimensions
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.IntervalInSec)) {
		query["IntervalInSec"] = request.IntervalInSec
	}

	if !tea.BoolValue(util.IsUnset(request.Measures)) {
		query["Measures"] = request.Measures
	}

	if !tea.BoolValue(util.IsUnset(request.Metric)) {
		query["Metric"] = request.Metric
	}

	if !tea.BoolValue(util.IsUnset(request.Order)) {
		query["Order"] = request.Order
	}

	if !tea.BoolValue(util.IsUnset(request.OrderBy)) {
		query["OrderBy"] = request.OrderBy
	}

	if !tea.BoolValue(util.IsUnset(request.QueryType)) {
		query["QueryType"] = request.QueryType
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryCommercialUsage"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryCommercialUsageResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - QueryCommercialUsageRequest
//
// @return QueryCommercialUsageResponse
func (client *Client) QueryCommercialUsage(request *QueryCommercialUsageRequest) (_result *QueryCommercialUsageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryCommercialUsageResponse{}
	_body, _err := client.QueryCommercialUsageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries an Application Monitoring metric or a Browser Monitoring metric.
//
// @param request - QueryMetricByPageRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryMetricByPageResponse
func (client *Client) QueryMetricByPageWithOptions(request *QueryMetricByPageRequest, runtime *util.RuntimeOptions) (_result *QueryMetricByPageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.CustomFilters)) {
		query["CustomFilters"] = request.CustomFilters
	}

	if !tea.BoolValue(util.IsUnset(request.Dimensions)) {
		query["Dimensions"] = request.Dimensions
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.Filters)) {
		query["Filters"] = request.Filters
	}

	if !tea.BoolValue(util.IsUnset(request.IntervalInSec)) {
		query["IntervalInSec"] = request.IntervalInSec
	}

	if !tea.BoolValue(util.IsUnset(request.Measures)) {
		query["Measures"] = request.Measures
	}

	if !tea.BoolValue(util.IsUnset(request.Metric)) {
		query["Metric"] = request.Metric
	}

	if !tea.BoolValue(util.IsUnset(request.Order)) {
		query["Order"] = request.Order
	}

	if !tea.BoolValue(util.IsUnset(request.OrderBy)) {
		query["OrderBy"] = request.OrderBy
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryMetricByPage"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryMetricByPageResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries an Application Monitoring metric or a Browser Monitoring metric.
//
// @param request - QueryMetricByPageRequest
//
// @return QueryMetricByPageResponse
func (client *Client) QueryMetricByPage(request *QueryMetricByPageRequest) (_result *QueryMetricByPageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryMetricByPageResponse{}
	_body, _err := client.QueryMetricByPageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries whether the Prometheus agent is installed on a cluster.
//
// @param request - QueryPromInstallStatusRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryPromInstallStatusResponse
func (client *Client) QueryPromInstallStatusWithOptions(request *QueryPromInstallStatusRequest, runtime *util.RuntimeOptions) (_result *QueryPromInstallStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryPromInstallStatus"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryPromInstallStatusResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries whether the Prometheus agent is installed on a cluster.
//
// @param request - QueryPromInstallStatusRequest
//
// @return QueryPromInstallStatusResponse
func (client *Client) QueryPromInstallStatus(request *QueryPromInstallStatusRequest) (_result *QueryPromInstallStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryPromInstallStatusResponse{}
	_body, _err := client.QueryPromInstallStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// QueryReleaseMetric
//
// @param request - QueryReleaseMetricRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryReleaseMetricResponse
func (client *Client) QueryReleaseMetricWithOptions(request *QueryReleaseMetricRequest, runtime *util.RuntimeOptions) (_result *QueryReleaseMetricResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ChangeOrderId)) {
		query["ChangeOrderId"] = request.ChangeOrderId
	}

	if !tea.BoolValue(util.IsUnset(request.CreateTime)) {
		query["CreateTime"] = request.CreateTime
	}

	if !tea.BoolValue(util.IsUnset(request.MetricType)) {
		query["MetricType"] = request.MetricType
	}

	if !tea.BoolValue(util.IsUnset(request.Pid)) {
		query["Pid"] = request.Pid
	}

	if !tea.BoolValue(util.IsUnset(request.ProxyUserId)) {
		query["ProxyUserId"] = request.ProxyUserId
	}

	if !tea.BoolValue(util.IsUnset(request.ReleaseEndTime)) {
		query["ReleaseEndTime"] = request.ReleaseEndTime
	}

	if !tea.BoolValue(util.IsUnset(request.ReleaseStartTime)) {
		query["ReleaseStartTime"] = request.ReleaseStartTime
	}

	if !tea.BoolValue(util.IsUnset(request.Service)) {
		query["Service"] = request.Service
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryReleaseMetric"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryReleaseMetricResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// QueryReleaseMetric
//
// @param request - QueryReleaseMetricRequest
//
// @return QueryReleaseMetricResponse
func (client *Client) QueryReleaseMetric(request *QueryReleaseMetricRequest) (_result *QueryReleaseMetricResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryReleaseMetricResponse{}
	_body, _err := client.QueryReleaseMetricWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Removes data sources from a global aggregation instance.
//
// @param request - RemoveAliClusterIdsFromPrometheusGlobalViewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RemoveAliClusterIdsFromPrometheusGlobalViewResponse
func (client *Client) RemoveAliClusterIdsFromPrometheusGlobalViewWithOptions(request *RemoveAliClusterIdsFromPrometheusGlobalViewRequest, runtime *util.RuntimeOptions) (_result *RemoveAliClusterIdsFromPrometheusGlobalViewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterIds)) {
		query["ClusterIds"] = request.ClusterIds
	}

	if !tea.BoolValue(util.IsUnset(request.GlobalViewClusterId)) {
		query["GlobalViewClusterId"] = request.GlobalViewClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.GroupName)) {
		query["GroupName"] = request.GroupName
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RemoveAliClusterIdsFromPrometheusGlobalView"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RemoveAliClusterIdsFromPrometheusGlobalViewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Removes data sources from a global aggregation instance.
//
// @param request - RemoveAliClusterIdsFromPrometheusGlobalViewRequest
//
// @return RemoveAliClusterIdsFromPrometheusGlobalViewResponse
func (client *Client) RemoveAliClusterIdsFromPrometheusGlobalView(request *RemoveAliClusterIdsFromPrometheusGlobalViewRequest) (_result *RemoveAliClusterIdsFromPrometheusGlobalViewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RemoveAliClusterIdsFromPrometheusGlobalViewResponse{}
	_body, _err := client.RemoveAliClusterIdsFromPrometheusGlobalViewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Removes custom data sources from a global aggregation instance in Prometheus Service.
//
// @param request - RemoveSourcesFromPrometheusGlobalViewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RemoveSourcesFromPrometheusGlobalViewResponse
func (client *Client) RemoveSourcesFromPrometheusGlobalViewWithOptions(request *RemoveSourcesFromPrometheusGlobalViewRequest, runtime *util.RuntimeOptions) (_result *RemoveSourcesFromPrometheusGlobalViewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.GlobalViewClusterId)) {
		query["GlobalViewClusterId"] = request.GlobalViewClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.GroupName)) {
		query["GroupName"] = request.GroupName
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.SourceNames)) {
		query["SourceNames"] = request.SourceNames
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RemoveSourcesFromPrometheusGlobalView"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RemoveSourcesFromPrometheusGlobalViewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Removes custom data sources from a global aggregation instance in Prometheus Service.
//
// @param request - RemoveSourcesFromPrometheusGlobalViewRequest
//
// @return RemoveSourcesFromPrometheusGlobalViewResponse
func (client *Client) RemoveSourcesFromPrometheusGlobalView(request *RemoveSourcesFromPrometheusGlobalViewRequest) (_result *RemoveSourcesFromPrometheusGlobalViewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RemoveSourcesFromPrometheusGlobalViewResponse{}
	_body, _err := client.RemoveSourcesFromPrometheusGlobalViewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 重新启动 feature信息
//
// @param request - RestartEnvironmentFeatureRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RestartEnvironmentFeatureResponse
func (client *Client) RestartEnvironmentFeatureWithOptions(request *RestartEnvironmentFeatureRequest, runtime *util.RuntimeOptions) (_result *RestartEnvironmentFeatureResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EnvironmentId)) {
		query["EnvironmentId"] = request.EnvironmentId
	}

	if !tea.BoolValue(util.IsUnset(request.FeatureName)) {
		query["FeatureName"] = request.FeatureName
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RestartEnvironmentFeature"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RestartEnvironmentFeatureResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 重新启动 feature信息
//
// @param request - RestartEnvironmentFeatureRequest
//
// @return RestartEnvironmentFeatureResponse
func (client *Client) RestartEnvironmentFeature(request *RestartEnvironmentFeatureRequest) (_result *RestartEnvironmentFeatureResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RestartEnvironmentFeatureResponse{}
	_body, _err := client.RestartEnvironmentFeatureWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies the settings of Application Monitoring, such as trace sampling and agent switch settings.
//
// @param request - SaveTraceAppConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SaveTraceAppConfigResponse
func (client *Client) SaveTraceAppConfigWithOptions(request *SaveTraceAppConfigRequest, runtime *util.RuntimeOptions) (_result *SaveTraceAppConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Pid)) {
		query["Pid"] = request.Pid
	}

	if !tea.BoolValue(util.IsUnset(request.Settings)) {
		query["Settings"] = request.Settings
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SaveTraceAppConfig"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SaveTraceAppConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies the settings of Application Monitoring, such as trace sampling and agent switch settings.
//
// @param request - SaveTraceAppConfigRequest
//
// @return SaveTraceAppConfigResponse
func (client *Client) SaveTraceAppConfig(request *SaveTraceAppConfigRequest) (_result *SaveTraceAppConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SaveTraceAppConfigResponse{}
	_body, _err := client.SaveTraceAppConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries alert contacts.
//
// Description:
//
// This operation is no longer maintained. To query alert contacts, call the DescribeContacts operation provided by the new version of Alert Management.
//
// @param request - SearchAlertContactRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SearchAlertContactResponse
func (client *Client) SearchAlertContactWithOptions(request *SearchAlertContactRequest, runtime *util.RuntimeOptions) (_result *SearchAlertContactResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ContactIds)) {
		query["ContactIds"] = request.ContactIds
	}

	if !tea.BoolValue(util.IsUnset(request.ContactName)) {
		query["ContactName"] = request.ContactName
	}

	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.Email)) {
		query["Email"] = request.Email
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Phone)) {
		query["Phone"] = request.Phone
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SearchAlertContact"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SearchAlertContactResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries alert contacts.
//
// Description:
//
// This operation is no longer maintained. To query alert contacts, call the DescribeContacts operation provided by the new version of Alert Management.
//
// @param request - SearchAlertContactRequest
//
// @return SearchAlertContactResponse
func (client *Client) SearchAlertContact(request *SearchAlertContactRequest) (_result *SearchAlertContactResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SearchAlertContactResponse{}
	_body, _err := client.SearchAlertContactWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries alert contact groups.
//
// Description:
//
// The operation is no longer maintained. Call the DescribeContactGroups operation in the alert management module to query alert contact groups.
//
// @param request - SearchAlertContactGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SearchAlertContactGroupResponse
func (client *Client) SearchAlertContactGroupWithOptions(request *SearchAlertContactGroupRequest, runtime *util.RuntimeOptions) (_result *SearchAlertContactGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ContactGroupIds)) {
		query["ContactGroupIds"] = request.ContactGroupIds
	}

	if !tea.BoolValue(util.IsUnset(request.ContactGroupName)) {
		query["ContactGroupName"] = request.ContactGroupName
	}

	if !tea.BoolValue(util.IsUnset(request.ContactId)) {
		query["ContactId"] = request.ContactId
	}

	if !tea.BoolValue(util.IsUnset(request.ContactName)) {
		query["ContactName"] = request.ContactName
	}

	if !tea.BoolValue(util.IsUnset(request.IsDetail)) {
		query["IsDetail"] = request.IsDetail
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SearchAlertContactGroup"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SearchAlertContactGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries alert contact groups.
//
// Description:
//
// The operation is no longer maintained. Call the DescribeContactGroups operation in the alert management module to query alert contact groups.
//
// @param request - SearchAlertContactGroupRequest
//
// @return SearchAlertContactGroupResponse
func (client *Client) SearchAlertContactGroup(request *SearchAlertContactGroupRequest) (_result *SearchAlertContactGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SearchAlertContactGroupResponse{}
	_body, _err := client.SearchAlertContactGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the alert records of an alert rule.
//
// Description:
//
// This operation is no longer maintained. To query alert records, call the ListAlerts operation provided by the new version of Alert Management.
//
// @param request - SearchAlertHistoriesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SearchAlertHistoriesResponse
func (client *Client) SearchAlertHistoriesWithOptions(request *SearchAlertHistoriesRequest, runtime *util.RuntimeOptions) (_result *SearchAlertHistoriesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AlertId)) {
		query["AlertId"] = request.AlertId
	}

	if !tea.BoolValue(util.IsUnset(request.AlertType)) {
		query["AlertType"] = request.AlertType
	}

	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SearchAlertHistories"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SearchAlertHistoriesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the alert records of an alert rule.
//
// Description:
//
// This operation is no longer maintained. To query alert records, call the ListAlerts operation provided by the new version of Alert Management.
//
// @param request - SearchAlertHistoriesRequest
//
// @return SearchAlertHistoriesResponse
func (client *Client) SearchAlertHistories(request *SearchAlertHistoriesRequest) (_result *SearchAlertHistoriesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SearchAlertHistoriesResponse{}
	_body, _err := client.SearchAlertHistoriesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries alert rules.
//
// Description:
//
// The current operation is no longer maintained. You can call the GetAlertRules operation of Alert Management (New) to query existing alert rules.
//
// @param request - SearchAlertRulesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SearchAlertRulesResponse
func (client *Client) SearchAlertRulesWithOptions(request *SearchAlertRulesRequest, runtime *util.RuntimeOptions) (_result *SearchAlertRulesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AlertRuleId)) {
		query["AlertRuleId"] = request.AlertRuleId
	}

	if !tea.BoolValue(util.IsUnset(request.AppType)) {
		query["AppType"] = request.AppType
	}

	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Pid)) {
		query["Pid"] = request.Pid
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SystemRegionId)) {
		query["SystemRegionId"] = request.SystemRegionId
	}

	if !tea.BoolValue(util.IsUnset(request.Tags)) {
		query["Tags"] = request.Tags
	}

	if !tea.BoolValue(util.IsUnset(request.Title)) {
		query["Title"] = request.Title
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SearchAlertRules"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SearchAlertRulesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries alert rules.
//
// Description:
//
// The current operation is no longer maintained. You can call the GetAlertRules operation of Alert Management (New) to query existing alert rules.
//
// @param request - SearchAlertRulesRequest
//
// @return SearchAlertRulesResponse
func (client *Client) SearchAlertRules(request *SearchAlertRulesRequest) (_result *SearchAlertRulesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SearchAlertRulesResponse{}
	_body, _err := client.SearchAlertRulesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries alert event records.
//
// Description:
//
// Alert event records are different from alert notification records. Alert events are recorded every minute after an alert rule filters data. Alert events can be classified based on whether they are triggered or not. If a triggered event is not in the silence period, an alert notification is sent.
//
// @param request - SearchEventsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SearchEventsResponse
func (client *Client) SearchEventsWithOptions(request *SearchEventsRequest, runtime *util.RuntimeOptions) (_result *SearchEventsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AlertId)) {
		query["AlertId"] = request.AlertId
	}

	if !tea.BoolValue(util.IsUnset(request.AlertType)) {
		query["AlertType"] = request.AlertType
	}

	if !tea.BoolValue(util.IsUnset(request.AppType)) {
		query["AppType"] = request.AppType
	}

	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.IsTrigger)) {
		query["IsTrigger"] = request.IsTrigger
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Pid)) {
		query["Pid"] = request.Pid
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SearchEvents"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SearchEventsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries alert event records.
//
// Description:
//
// Alert event records are different from alert notification records. Alert events are recorded every minute after an alert rule filters data. Alert events can be classified based on whether they are triggered or not. If a triggered event is not in the silence period, an alert notification is sent.
//
// @param request - SearchEventsRequest
//
// @return SearchEventsResponse
func (client *Client) SearchEvents(request *SearchEventsRequest) (_result *SearchEventsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SearchEventsResponse{}
	_body, _err := client.SearchEventsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries Browser Monitoring tasks by page.
//
// @param request - SearchRetcodeAppByPageRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SearchRetcodeAppByPageResponse
func (client *Client) SearchRetcodeAppByPageWithOptions(request *SearchRetcodeAppByPageRequest, runtime *util.RuntimeOptions) (_result *SearchRetcodeAppByPageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.RetcodeAppId)) {
		query["RetcodeAppId"] = request.RetcodeAppId
	}

	if !tea.BoolValue(util.IsUnset(request.RetcodeAppName)) {
		query["RetcodeAppName"] = request.RetcodeAppName
	}

	if !tea.BoolValue(util.IsUnset(request.Tags)) {
		query["Tags"] = request.Tags
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SearchRetcodeAppByPage"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SearchRetcodeAppByPageResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries Browser Monitoring tasks by page.
//
// @param request - SearchRetcodeAppByPageRequest
//
// @return SearchRetcodeAppByPageResponse
func (client *Client) SearchRetcodeAppByPage(request *SearchRetcodeAppByPageRequest) (_result *SearchRetcodeAppByPageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SearchRetcodeAppByPageResponse{}
	_body, _err := client.SearchRetcodeAppByPageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries Application Monitoring tasks by application name.
//
// @param request - SearchTraceAppByNameRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SearchTraceAppByNameResponse
func (client *Client) SearchTraceAppByNameWithOptions(request *SearchTraceAppByNameRequest, runtime *util.RuntimeOptions) (_result *SearchTraceAppByNameResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.Tags)) {
		query["Tags"] = request.Tags
	}

	if !tea.BoolValue(util.IsUnset(request.TraceAppName)) {
		query["TraceAppName"] = request.TraceAppName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SearchTraceAppByName"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SearchTraceAppByNameResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries Application Monitoring tasks by application name.
//
// @param request - SearchTraceAppByNameRequest
//
// @return SearchTraceAppByNameResponse
func (client *Client) SearchTraceAppByName(request *SearchTraceAppByNameRequest) (_result *SearchTraceAppByNameResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SearchTraceAppByNameResponse{}
	_body, _err := client.SearchTraceAppByNameWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries Application Monitoring tasks by page.
//
// @param request - SearchTraceAppByPageRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SearchTraceAppByPageResponse
func (client *Client) SearchTraceAppByPageWithOptions(request *SearchTraceAppByPageRequest, runtime *util.RuntimeOptions) (_result *SearchTraceAppByPageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.Tags)) {
		query["Tags"] = request.Tags
	}

	if !tea.BoolValue(util.IsUnset(request.TraceAppName)) {
		query["TraceAppName"] = request.TraceAppName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SearchTraceAppByPage"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SearchTraceAppByPageResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries Application Monitoring tasks by page.
//
// @param request - SearchTraceAppByPageRequest
//
// @return SearchTraceAppByPageResponse
func (client *Client) SearchTraceAppByPage(request *SearchTraceAppByPageRequest) (_result *SearchTraceAppByPageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SearchTraceAppByPageResponse{}
	_body, _err := client.SearchTraceAppByPageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries traces by time, application name, IP address, span name, and tag.
//
// Description:
//
// > A maximum of 100 data entries can be returned each time this operation is called. If you want to query all existing traces, we recommend that you call the SearchTracesByPage operation. For more information, see [SearchTracesByPage](https://help.aliyun.com/document_detail/175866.html).
//
// @param request - SearchTracesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SearchTracesResponse
func (client *Client) SearchTracesWithOptions(request *SearchTracesRequest, runtime *util.RuntimeOptions) (_result *SearchTracesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.ExclusionFilters)) {
		query["ExclusionFilters"] = request.ExclusionFilters
	}

	if !tea.BoolValue(util.IsUnset(request.MinDuration)) {
		query["MinDuration"] = request.MinDuration
	}

	if !tea.BoolValue(util.IsUnset(request.OperationName)) {
		query["OperationName"] = request.OperationName
	}

	if !tea.BoolValue(util.IsUnset(request.Pid)) {
		query["Pid"] = request.Pid
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.Reverse)) {
		query["Reverse"] = request.Reverse
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceIp)) {
		query["ServiceIp"] = request.ServiceIp
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceName)) {
		query["ServiceName"] = request.ServiceName
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SearchTraces"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SearchTracesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries traces by time, application name, IP address, span name, and tag.
//
// Description:
//
// > A maximum of 100 data entries can be returned each time this operation is called. If you want to query all existing traces, we recommend that you call the SearchTracesByPage operation. For more information, see [SearchTracesByPage](https://help.aliyun.com/document_detail/175866.html).
//
// @param request - SearchTracesRequest
//
// @return SearchTracesResponse
func (client *Client) SearchTraces(request *SearchTracesRequest) (_result *SearchTracesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SearchTracesResponse{}
	_body, _err := client.SearchTracesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries traces by page. You can query traces by time range, application name, IP address, span name, or tag.
//
// @param request - SearchTracesByPageRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SearchTracesByPageResponse
func (client *Client) SearchTracesByPageWithOptions(request *SearchTracesByPageRequest, runtime *util.RuntimeOptions) (_result *SearchTracesByPageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.ExclusionFilters)) {
		query["ExclusionFilters"] = request.ExclusionFilters
	}

	if !tea.BoolValue(util.IsUnset(request.IsError)) {
		query["IsError"] = request.IsError
	}

	if !tea.BoolValue(util.IsUnset(request.MinDuration)) {
		query["MinDuration"] = request.MinDuration
	}

	if !tea.BoolValue(util.IsUnset(request.OperationName)) {
		query["OperationName"] = request.OperationName
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Pid)) {
		query["Pid"] = request.Pid
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.Reverse)) {
		query["Reverse"] = request.Reverse
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceIp)) {
		query["ServiceIp"] = request.ServiceIp
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceName)) {
		query["ServiceName"] = request.ServiceName
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.Tags)) {
		query["Tags"] = request.Tags
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SearchTracesByPage"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SearchTracesByPageResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries traces by page. You can query traces by time range, application name, IP address, span name, or tag.
//
// @param request - SearchTracesByPageRequest
//
// @return SearchTracesByPageResponse
func (client *Client) SearchTracesByPage(request *SearchTracesByPageRequest) (_result *SearchTracesByPageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SearchTracesByPageResponse{}
	_body, _err := client.SearchTracesByPageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Sends a text message to an alert contact to verify the mobile number of the alert contact.
//
// Description:
//
// After you receive the text message, verify the mobile number as prompted. Before you can specify a mobile phone number in a notification policy, you must verify the mobile phone number.
//
// @param request - SendTTSVerifyLinkRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SendTTSVerifyLinkResponse
func (client *Client) SendTTSVerifyLinkWithOptions(request *SendTTSVerifyLinkRequest, runtime *util.RuntimeOptions) (_result *SendTTSVerifyLinkResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ContactId)) {
		body["ContactId"] = request.ContactId
	}

	if !tea.BoolValue(util.IsUnset(request.Phone)) {
		body["Phone"] = request.Phone
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("SendTTSVerifyLink"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SendTTSVerifyLinkResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Sends a text message to an alert contact to verify the mobile number of the alert contact.
//
// Description:
//
// After you receive the text message, verify the mobile number as prompted. Before you can specify a mobile phone number in a notification policy, you must verify the mobile phone number.
//
// @param request - SendTTSVerifyLinkRequest
//
// @return SendTTSVerifyLinkResponse
func (client *Client) SendTTSVerifyLink(request *SendTTSVerifyLinkRequest) (_result *SendTTSVerifyLinkResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SendTTSVerifyLinkResponse{}
	_body, _err := client.SendTTSVerifyLinkWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Turns on or turns off logon-free sharing for an application monitored by Browser Monitoring.
//
// @param request - SetRetcodeShareStatusRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SetRetcodeShareStatusResponse
func (client *Client) SetRetcodeShareStatusWithOptions(request *SetRetcodeShareStatusRequest, runtime *util.RuntimeOptions) (_result *SetRetcodeShareStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppName)) {
		query["AppName"] = request.AppName
	}

	if !tea.BoolValue(util.IsUnset(request.Pid)) {
		query["Pid"] = request.Pid
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SetRetcodeShareStatus"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SetRetcodeShareStatusResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Turns on or turns off logon-free sharing for an application monitored by Browser Monitoring.
//
// @param request - SetRetcodeShareStatusRequest
//
// @return SetRetcodeShareStatusResponse
func (client *Client) SetRetcodeShareStatus(request *SetRetcodeShareStatusRequest) (_result *SetRetcodeShareStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetRetcodeShareStatusResponse{}
	_body, _err := client.SetRetcodeShareStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - StartAlertRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return StartAlertResponse
func (client *Client) StartAlertWithOptions(request *StartAlertRequest, runtime *util.RuntimeOptions) (_result *StartAlertResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AlertId)) {
		query["AlertId"] = request.AlertId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("StartAlert"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &StartAlertResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - StartAlertRequest
//
// @return StartAlertResponse
func (client *Client) StartAlert(request *StartAlertRequest) (_result *StartAlertResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StartAlertResponse{}
	_body, _err := client.StartAlertWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 启动定时拨测任务
//
// @param tmpReq - StartTimingSyntheticTaskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return StartTimingSyntheticTaskResponse
func (client *Client) StartTimingSyntheticTaskWithOptions(tmpReq *StartTimingSyntheticTaskRequest, runtime *util.RuntimeOptions) (_result *StartTimingSyntheticTaskResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &StartTimingSyntheticTaskShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.TaskIds)) {
		request.TaskIdsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TaskIds, tea.String("TaskIds"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.TaskIdsShrink)) {
		query["TaskIds"] = request.TaskIdsShrink
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("StartTimingSyntheticTask"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &StartTimingSyntheticTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 启动定时拨测任务
//
// @param request - StartTimingSyntheticTaskRequest
//
// @return StartTimingSyntheticTaskResponse
func (client *Client) StartTimingSyntheticTask(request *StartTimingSyntheticTaskRequest) (_result *StartTimingSyntheticTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StartTimingSyntheticTaskResponse{}
	_body, _err := client.StartTimingSyntheticTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Call StartAlert to stop an alert rule.
//
// @param request - StopAlertRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return StopAlertResponse
func (client *Client) StopAlertWithOptions(request *StopAlertRequest, runtime *util.RuntimeOptions) (_result *StopAlertResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AlertId)) {
		query["AlertId"] = request.AlertId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("StopAlert"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &StopAlertResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Call StartAlert to stop an alert rule.
//
// @param request - StopAlertRequest
//
// @return StopAlertResponse
func (client *Client) StopAlert(request *StopAlertRequest) (_result *StopAlertResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StopAlertResponse{}
	_body, _err := client.StopAlertWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Stops scheduled synthetic monitoring tasks.
//
// @param tmpReq - StopTimingSyntheticTaskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return StopTimingSyntheticTaskResponse
func (client *Client) StopTimingSyntheticTaskWithOptions(tmpReq *StopTimingSyntheticTaskRequest, runtime *util.RuntimeOptions) (_result *StopTimingSyntheticTaskResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &StopTimingSyntheticTaskShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.TaskIds)) {
		request.TaskIdsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TaskIds, tea.String("TaskIds"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.TaskIdsShrink)) {
		query["TaskIds"] = request.TaskIdsShrink
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("StopTimingSyntheticTask"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &StopTimingSyntheticTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Stops scheduled synthetic monitoring tasks.
//
// @param request - StopTimingSyntheticTaskRequest
//
// @return StopTimingSyntheticTaskResponse
func (client *Client) StopTimingSyntheticTask(request *StopTimingSyntheticTaskRequest) (_result *StopTimingSyntheticTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StopTimingSyntheticTaskResponse{}
	_body, _err := client.StopTimingSyntheticTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 启动或者禁用云拨测的任务
//
// @param request - SwitchSyntheticTaskStatusRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SwitchSyntheticTaskStatusResponse
func (client *Client) SwitchSyntheticTaskStatusWithOptions(request *SwitchSyntheticTaskStatusRequest, runtime *util.RuntimeOptions) (_result *SwitchSyntheticTaskStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.SwitchStatus)) {
		query["SwitchStatus"] = request.SwitchStatus
	}

	if !tea.BoolValue(util.IsUnset(request.TaskIds)) {
		query["TaskIds"] = request.TaskIds
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SwitchSyntheticTaskStatus"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SwitchSyntheticTaskStatusResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 启动或者禁用云拨测的任务
//
// @param request - SwitchSyntheticTaskStatusRequest
//
// @return SwitchSyntheticTaskStatusResponse
func (client *Client) SwitchSyntheticTaskStatus(request *SwitchSyntheticTaskStatusRequest) (_result *SwitchSyntheticTaskStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SwitchSyntheticTaskStatusResponse{}
	_body, _err := client.SwitchSyntheticTaskStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Synchronizes the aggregation rule of a cluster to other clusters in a region.
//
// @param request - SyncRecordingRulesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SyncRecordingRulesResponse
func (client *Client) SyncRecordingRulesWithOptions(request *SyncRecordingRulesRequest, runtime *util.RuntimeOptions) (_result *SyncRecordingRulesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.TargetClusters)) {
		query["TargetClusters"] = request.TargetClusters
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SyncRecordingRules"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SyncRecordingRulesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Synchronizes the aggregation rule of a cluster to other clusters in a region.
//
// @param request - SyncRecordingRulesRequest
//
// @return SyncRecordingRulesResponse
func (client *Client) SyncRecordingRules(request *SyncRecordingRulesRequest) (_result *SyncRecordingRulesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SyncRecordingRulesResponse{}
	_body, _err := client.SyncRecordingRulesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Adds tags to ARMS resources.
//
// @param request - TagResourcesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return TagResourcesResponse
func (client *Client) TagResourcesWithOptions(request *TagResourcesRequest, runtime *util.RuntimeOptions) (_result *TagResourcesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ResourceId)) {
		query["ResourceId"] = request.ResourceId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceType)) {
		query["ResourceType"] = request.ResourceType
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("TagResources"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &TagResourcesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Adds tags to ARMS resources.
//
// @param request - TagResourcesRequest
//
// @return TagResourcesResponse
func (client *Client) TagResources(request *TagResourcesRequest) (_result *TagResourcesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &TagResourcesResponse{}
	_body, _err := client.TagResourcesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Removes a Prometheus instance from a serverless Kubernetes (ASK) cluster or an Elastic Compute Service (ECS) instance.
//
// Description:
//
// Make sure that the ASK cluster or ECS instance is monitored in Managed Service for Prometheus.
//
// @param request - UninstallManagedPrometheusRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UninstallManagedPrometheusResponse
func (client *Client) UninstallManagedPrometheusWithOptions(request *UninstallManagedPrometheusRequest, runtime *util.RuntimeOptions) (_result *UninstallManagedPrometheusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.ClusterType)) {
		query["ClusterType"] = request.ClusterType
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.VpcId)) {
		query["VpcId"] = request.VpcId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UninstallManagedPrometheus"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UninstallManagedPrometheusResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Removes a Prometheus instance from a serverless Kubernetes (ASK) cluster or an Elastic Compute Service (ECS) instance.
//
// Description:
//
// Make sure that the ASK cluster or ECS instance is monitored in Managed Service for Prometheus.
//
// @param request - UninstallManagedPrometheusRequest
//
// @return UninstallManagedPrometheusResponse
func (client *Client) UninstallManagedPrometheus(request *UninstallManagedPrometheusRequest) (_result *UninstallManagedPrometheusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UninstallManagedPrometheusResponse{}
	_body, _err := client.UninstallManagedPrometheusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Releases a Prometheus instance.
//
// @param request - UninstallPromClusterRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UninstallPromClusterResponse
func (client *Client) UninstallPromClusterWithOptions(request *UninstallPromClusterRequest, runtime *util.RuntimeOptions) (_result *UninstallPromClusterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AliyunLang)) {
		query["AliyunLang"] = request.AliyunLang
	}

	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UninstallPromCluster"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UninstallPromClusterResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Releases a Prometheus instance.
//
// @param request - UninstallPromClusterRequest
//
// @return UninstallPromClusterResponse
func (client *Client) UninstallPromCluster(request *UninstallPromClusterRequest) (_result *UninstallPromClusterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UninstallPromClusterResponse{}
	_body, _err := client.UninstallPromClusterWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Removes tags from ARMS resources.
//
// @param request - UntagResourcesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UntagResourcesResponse
func (client *Client) UntagResourcesWithOptions(request *UntagResourcesRequest, runtime *util.RuntimeOptions) (_result *UntagResourcesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.All)) {
		query["All"] = request.All
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceId)) {
		query["ResourceId"] = request.ResourceId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceType)) {
		query["ResourceType"] = request.ResourceType
	}

	if !tea.BoolValue(util.IsUnset(request.TagKey)) {
		query["TagKey"] = request.TagKey
	}

	if !tea.BoolValue(util.IsUnset(request.Tags)) {
		query["Tags"] = request.Tags
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UntagResources"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UntagResourcesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Removes tags from ARMS resources.
//
// @param request - UntagResourcesRequest
//
// @return UntagResourcesResponse
func (client *Client) UntagResources(request *UntagResourcesRequest) (_result *UntagResourcesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UntagResourcesResponse{}
	_body, _err := client.UntagResourcesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Updates an alert contact.
//
// Description:
//
// This operation is no longer maintained. To create or modify an alert contact, call the CreateOrUpdateContact operation provided by the new version of Alert Management.
//
// @param request - UpdateAlertContactRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateAlertContactResponse
func (client *Client) UpdateAlertContactWithOptions(request *UpdateAlertContactRequest, runtime *util.RuntimeOptions) (_result *UpdateAlertContactResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ContactId)) {
		query["ContactId"] = request.ContactId
	}

	if !tea.BoolValue(util.IsUnset(request.ContactName)) {
		query["ContactName"] = request.ContactName
	}

	if !tea.BoolValue(util.IsUnset(request.DingRobotWebhookUrl)) {
		query["DingRobotWebhookUrl"] = request.DingRobotWebhookUrl
	}

	if !tea.BoolValue(util.IsUnset(request.Email)) {
		query["Email"] = request.Email
	}

	if !tea.BoolValue(util.IsUnset(request.PhoneNum)) {
		query["PhoneNum"] = request.PhoneNum
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.SystemNoc)) {
		query["SystemNoc"] = request.SystemNoc
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateAlertContact"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateAlertContactResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Updates an alert contact.
//
// Description:
//
// This operation is no longer maintained. To create or modify an alert contact, call the CreateOrUpdateContact operation provided by the new version of Alert Management.
//
// @param request - UpdateAlertContactRequest
//
// @return UpdateAlertContactResponse
func (client *Client) UpdateAlertContact(request *UpdateAlertContactRequest) (_result *UpdateAlertContactResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateAlertContactResponse{}
	_body, _err := client.UpdateAlertContactWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Updates UpdateAlertContactGroup alarm contact group.
//
// @param request - UpdateAlertContactGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateAlertContactGroupResponse
func (client *Client) UpdateAlertContactGroupWithOptions(request *UpdateAlertContactGroupRequest, runtime *util.RuntimeOptions) (_result *UpdateAlertContactGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ContactGroupId)) {
		query["ContactGroupId"] = request.ContactGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.ContactGroupName)) {
		query["ContactGroupName"] = request.ContactGroupName
	}

	if !tea.BoolValue(util.IsUnset(request.ContactIds)) {
		query["ContactIds"] = request.ContactIds
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateAlertContactGroup"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateAlertContactGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Updates UpdateAlertContactGroup alarm contact group.
//
// @param request - UpdateAlertContactGroupRequest
//
// @return UpdateAlertContactGroupResponse
func (client *Client) UpdateAlertContactGroup(request *UpdateAlertContactGroupRequest) (_result *UpdateAlertContactGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateAlertContactGroupResponse{}
	_body, _err := client.UpdateAlertContactGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - UpdateAlertRuleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateAlertRuleResponse
func (client *Client) UpdateAlertRuleWithOptions(request *UpdateAlertRuleRequest, runtime *util.RuntimeOptions) (_result *UpdateAlertRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AlertId)) {
		query["AlertId"] = request.AlertId
	}

	if !tea.BoolValue(util.IsUnset(request.ContactGroupIds)) {
		query["ContactGroupIds"] = request.ContactGroupIds
	}

	if !tea.BoolValue(util.IsUnset(request.IsAutoStart)) {
		query["IsAutoStart"] = request.IsAutoStart
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.TemplageAlertConfig)) {
		query["TemplageAlertConfig"] = request.TemplageAlertConfig
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateAlertRule"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateAlertRuleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - UpdateAlertRuleRequest
//
// @return UpdateAlertRuleResponse
func (client *Client) UpdateAlertRule(request *UpdateAlertRuleRequest) (_result *UpdateAlertRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateAlertRuleResponse{}
	_body, _err := client.UpdateAlertRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// The ID of the request.
//
// @param request - UpdateDispatchRuleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateDispatchRuleResponse
func (client *Client) UpdateDispatchRuleWithOptions(request *UpdateDispatchRuleRequest, runtime *util.RuntimeOptions) (_result *UpdateDispatchRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DispatchRule)) {
		query["DispatchRule"] = request.DispatchRule
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateDispatchRule"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateDispatchRuleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// The ID of the request.
//
// @param request - UpdateDispatchRuleRequest
//
// @return UpdateDispatchRuleResponse
func (client *Client) UpdateDispatchRule(request *UpdateDispatchRuleRequest) (_result *UpdateDispatchRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateDispatchRuleResponse{}
	_body, _err := client.UpdateDispatchRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Updates a custom job for an environment.
//
// @param request - UpdateEnvCustomJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateEnvCustomJobResponse
func (client *Client) UpdateEnvCustomJobWithOptions(request *UpdateEnvCustomJobRequest, runtime *util.RuntimeOptions) (_result *UpdateEnvCustomJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AliyunLang)) {
		query["AliyunLang"] = request.AliyunLang
	}

	if !tea.BoolValue(util.IsUnset(request.CustomJobName)) {
		query["CustomJobName"] = request.CustomJobName
	}

	if !tea.BoolValue(util.IsUnset(request.EnvironmentId)) {
		query["EnvironmentId"] = request.EnvironmentId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConfigYaml)) {
		body["ConfigYaml"] = request.ConfigYaml
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateEnvCustomJob"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateEnvCustomJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Updates a custom job for an environment.
//
// @param request - UpdateEnvCustomJobRequest
//
// @return UpdateEnvCustomJobResponse
func (client *Client) UpdateEnvCustomJob(request *UpdateEnvCustomJobRequest) (_result *UpdateEnvCustomJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateEnvCustomJobResponse{}
	_body, _err := client.UpdateEnvCustomJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Updates the PodMonitor of an environment.
//
// @param request - UpdateEnvPodMonitorRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateEnvPodMonitorResponse
func (client *Client) UpdateEnvPodMonitorWithOptions(request *UpdateEnvPodMonitorRequest, runtime *util.RuntimeOptions) (_result *UpdateEnvPodMonitorResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AliyunLang)) {
		query["AliyunLang"] = request.AliyunLang
	}

	if !tea.BoolValue(util.IsUnset(request.DryRun)) {
		query["DryRun"] = request.DryRun
	}

	if !tea.BoolValue(util.IsUnset(request.EnvironmentId)) {
		query["EnvironmentId"] = request.EnvironmentId
	}

	if !tea.BoolValue(util.IsUnset(request.Namespace)) {
		query["Namespace"] = request.Namespace
	}

	if !tea.BoolValue(util.IsUnset(request.PodMonitorName)) {
		query["PodMonitorName"] = request.PodMonitorName
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConfigYaml)) {
		body["ConfigYaml"] = request.ConfigYaml
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateEnvPodMonitor"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateEnvPodMonitorResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Updates the PodMonitor of an environment.
//
// @param request - UpdateEnvPodMonitorRequest
//
// @return UpdateEnvPodMonitorResponse
func (client *Client) UpdateEnvPodMonitor(request *UpdateEnvPodMonitorRequest) (_result *UpdateEnvPodMonitorResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateEnvPodMonitorResponse{}
	_body, _err := client.UpdateEnvPodMonitorWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Updates the ServiceMonitor of an environment.
//
// @param request - UpdateEnvServiceMonitorRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateEnvServiceMonitorResponse
func (client *Client) UpdateEnvServiceMonitorWithOptions(request *UpdateEnvServiceMonitorRequest, runtime *util.RuntimeOptions) (_result *UpdateEnvServiceMonitorResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AliyunLang)) {
		query["AliyunLang"] = request.AliyunLang
	}

	if !tea.BoolValue(util.IsUnset(request.DryRun)) {
		query["DryRun"] = request.DryRun
	}

	if !tea.BoolValue(util.IsUnset(request.EnvironmentId)) {
		query["EnvironmentId"] = request.EnvironmentId
	}

	if !tea.BoolValue(util.IsUnset(request.Namespace)) {
		query["Namespace"] = request.Namespace
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceMonitorName)) {
		query["ServiceMonitorName"] = request.ServiceMonitorName
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConfigYaml)) {
		body["ConfigYaml"] = request.ConfigYaml
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateEnvServiceMonitor"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateEnvServiceMonitorResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Updates the ServiceMonitor of an environment.
//
// @param request - UpdateEnvServiceMonitorRequest
//
// @return UpdateEnvServiceMonitorResponse
func (client *Client) UpdateEnvServiceMonitor(request *UpdateEnvServiceMonitorRequest) (_result *UpdateEnvServiceMonitorResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateEnvServiceMonitorResponse{}
	_body, _err := client.UpdateEnvServiceMonitorWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Updates the configuration of an environment.
//
// @param request - UpdateEnvironmentRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateEnvironmentResponse
func (client *Client) UpdateEnvironmentWithOptions(request *UpdateEnvironmentRequest, runtime *util.RuntimeOptions) (_result *UpdateEnvironmentResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AliyunLang)) {
		query["AliyunLang"] = request.AliyunLang
	}

	if !tea.BoolValue(util.IsUnset(request.EnvironmentId)) {
		query["EnvironmentId"] = request.EnvironmentId
	}

	if !tea.BoolValue(util.IsUnset(request.EnvironmentName)) {
		query["EnvironmentName"] = request.EnvironmentName
	}

	if !tea.BoolValue(util.IsUnset(request.FeePackage)) {
		query["FeePackage"] = request.FeePackage
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateEnvironment"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateEnvironmentResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Updates the configuration of an environment.
//
// @param request - UpdateEnvironmentRequest
//
// @return UpdateEnvironmentResponse
func (client *Client) UpdateEnvironment(request *UpdateEnvironmentRequest) (_result *UpdateEnvironmentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateEnvironmentResponse{}
	_body, _err := client.UpdateEnvironmentWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 编辑工作区
//
// @param request - UpdateGrafanaWorkspaceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateGrafanaWorkspaceResponse
func (client *Client) UpdateGrafanaWorkspaceWithOptions(request *UpdateGrafanaWorkspaceRequest, runtime *util.RuntimeOptions) (_result *UpdateGrafanaWorkspaceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AliyunLang)) {
		query["AliyunLang"] = request.AliyunLang
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.GrafanaWorkspaceId)) {
		query["GrafanaWorkspaceId"] = request.GrafanaWorkspaceId
	}

	if !tea.BoolValue(util.IsUnset(request.GrafanaWorkspaceName)) {
		query["GrafanaWorkspaceName"] = request.GrafanaWorkspaceName
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateGrafanaWorkspace"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateGrafanaWorkspaceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 编辑工作区
//
// @param request - UpdateGrafanaWorkspaceRequest
//
// @return UpdateGrafanaWorkspaceResponse
func (client *Client) UpdateGrafanaWorkspace(request *UpdateGrafanaWorkspaceRequest) (_result *UpdateGrafanaWorkspaceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateGrafanaWorkspaceResponse{}
	_body, _err := client.UpdateGrafanaWorkspaceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 升级指定工作区版本
//
// @param request - UpdateGrafanaWorkspaceVersionRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateGrafanaWorkspaceVersionResponse
func (client *Client) UpdateGrafanaWorkspaceVersionWithOptions(request *UpdateGrafanaWorkspaceVersionRequest, runtime *util.RuntimeOptions) (_result *UpdateGrafanaWorkspaceVersionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AliyunLang)) {
		query["AliyunLang"] = request.AliyunLang
	}

	if !tea.BoolValue(util.IsUnset(request.GrafanaVersion)) {
		query["GrafanaVersion"] = request.GrafanaVersion
	}

	if !tea.BoolValue(util.IsUnset(request.GrafanaWorkspaceId)) {
		query["GrafanaWorkspaceId"] = request.GrafanaWorkspaceId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateGrafanaWorkspaceVersion"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateGrafanaWorkspaceVersionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 升级指定工作区版本
//
// @param request - UpdateGrafanaWorkspaceVersionRequest
//
// @return UpdateGrafanaWorkspaceVersionResponse
func (client *Client) UpdateGrafanaWorkspaceVersion(request *UpdateGrafanaWorkspaceVersionRequest) (_result *UpdateGrafanaWorkspaceVersionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateGrafanaWorkspaceVersionResponse{}
	_body, _err := client.UpdateGrafanaWorkspaceVersionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies the information about an integration.
//
// @param request - UpdateIntegrationRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateIntegrationResponse
func (client *Client) UpdateIntegrationWithOptions(request *UpdateIntegrationRequest, runtime *util.RuntimeOptions) (_result *UpdateIntegrationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AutoRecover)) {
		body["AutoRecover"] = request.AutoRecover
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		body["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.DuplicateKey)) {
		body["DuplicateKey"] = request.DuplicateKey
	}

	if !tea.BoolValue(util.IsUnset(request.ExtendedFieldRedefineRules)) {
		body["ExtendedFieldRedefineRules"] = request.ExtendedFieldRedefineRules
	}

	if !tea.BoolValue(util.IsUnset(request.FieldRedefineRules)) {
		body["FieldRedefineRules"] = request.FieldRedefineRules
	}

	if !tea.BoolValue(util.IsUnset(request.InitiativeRecoverField)) {
		body["InitiativeRecoverField"] = request.InitiativeRecoverField
	}

	if !tea.BoolValue(util.IsUnset(request.InitiativeRecoverValue)) {
		body["InitiativeRecoverValue"] = request.InitiativeRecoverValue
	}

	if !tea.BoolValue(util.IsUnset(request.IntegrationId)) {
		body["IntegrationId"] = request.IntegrationId
	}

	if !tea.BoolValue(util.IsUnset(request.IntegrationName)) {
		body["IntegrationName"] = request.IntegrationName
	}

	if !tea.BoolValue(util.IsUnset(request.IntegrationProductType)) {
		body["IntegrationProductType"] = request.IntegrationProductType
	}

	if !tea.BoolValue(util.IsUnset(request.Liveness)) {
		body["Liveness"] = request.Liveness
	}

	if !tea.BoolValue(util.IsUnset(request.RecoverTime)) {
		body["RecoverTime"] = request.RecoverTime
	}

	if !tea.BoolValue(util.IsUnset(request.Stat)) {
		body["Stat"] = request.Stat
	}

	if !tea.BoolValue(util.IsUnset(request.State)) {
		body["State"] = request.State
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateIntegration"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateIntegrationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies the information about an integration.
//
// @param request - UpdateIntegrationRequest
//
// @return UpdateIntegrationResponse
func (client *Client) UpdateIntegration(request *UpdateIntegrationRequest) (_result *UpdateIntegrationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateIntegrationResponse{}
	_body, _err := client.UpdateIntegrationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 更新删除的metric
//
// @param request - UpdateMetricDropRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateMetricDropResponse
func (client *Client) UpdateMetricDropWithOptions(request *UpdateMetricDropRequest, runtime *util.RuntimeOptions) (_result *UpdateMetricDropResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.MetricDrop)) {
		query["MetricDrop"] = request.MetricDrop
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateMetricDrop"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateMetricDropResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 更新删除的metric
//
// @param request - UpdateMetricDropRequest
//
// @return UpdateMetricDropResponse
func (client *Client) UpdateMetricDrop(request *UpdateMetricDropRequest) (_result *UpdateMetricDropResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateMetricDropResponse{}
	_body, _err := client.UpdateMetricDropWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 更新Prometheus告警规则
//
// @param request - UpdatePrometheusAlertRuleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdatePrometheusAlertRuleResponse
func (client *Client) UpdatePrometheusAlertRuleWithOptions(request *UpdatePrometheusAlertRuleRequest, runtime *util.RuntimeOptions) (_result *UpdatePrometheusAlertRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AlertId)) {
		query["AlertId"] = request.AlertId
	}

	if !tea.BoolValue(util.IsUnset(request.AlertName)) {
		query["AlertName"] = request.AlertName
	}

	if !tea.BoolValue(util.IsUnset(request.Annotations)) {
		query["Annotations"] = request.Annotations
	}

	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.DispatchRuleId)) {
		query["DispatchRuleId"] = request.DispatchRuleId
	}

	if !tea.BoolValue(util.IsUnset(request.Duration)) {
		query["Duration"] = request.Duration
	}

	if !tea.BoolValue(util.IsUnset(request.Expression)) {
		query["Expression"] = request.Expression
	}

	if !tea.BoolValue(util.IsUnset(request.Labels)) {
		query["Labels"] = request.Labels
	}

	if !tea.BoolValue(util.IsUnset(request.Message)) {
		query["Message"] = request.Message
	}

	if !tea.BoolValue(util.IsUnset(request.NotifyType)) {
		query["NotifyType"] = request.NotifyType
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.Tags)) {
		query["Tags"] = request.Tags
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdatePrometheusAlertRule"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdatePrometheusAlertRuleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 更新Prometheus告警规则
//
// @param request - UpdatePrometheusAlertRuleRequest
//
// @return UpdatePrometheusAlertRuleResponse
func (client *Client) UpdatePrometheusAlertRule(request *UpdatePrometheusAlertRuleRequest) (_result *UpdatePrometheusAlertRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdatePrometheusAlertRuleResponse{}
	_body, _err := client.UpdatePrometheusAlertRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Updates the data sources of Prometheus instance for GlobalView.
//
// @param request - UpdatePrometheusGlobalViewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdatePrometheusGlobalViewResponse
func (client *Client) UpdatePrometheusGlobalViewWithOptions(request *UpdatePrometheusGlobalViewRequest, runtime *util.RuntimeOptions) (_result *UpdatePrometheusGlobalViewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AllSubClustersSuccess)) {
		query["AllSubClustersSuccess"] = request.AllSubClustersSuccess
	}

	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.GroupName)) {
		query["GroupName"] = request.GroupName
	}

	if !tea.BoolValue(util.IsUnset(request.MostRegionId)) {
		query["MostRegionId"] = request.MostRegionId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SubClustersJson)) {
		query["SubClustersJson"] = request.SubClustersJson
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdatePrometheusGlobalView"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdatePrometheusGlobalViewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Updates the data sources of Prometheus instance for GlobalView.
//
// @param request - UpdatePrometheusGlobalViewRequest
//
// @return UpdatePrometheusGlobalViewResponse
func (client *Client) UpdatePrometheusGlobalView(request *UpdatePrometheusGlobalViewRequest) (_result *UpdatePrometheusGlobalViewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdatePrometheusGlobalViewResponse{}
	_body, _err := client.UpdatePrometheusGlobalViewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Update Prometheus instance config.
//
// @param request - UpdatePrometheusInstanceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdatePrometheusInstanceResponse
func (client *Client) UpdatePrometheusInstanceWithOptions(request *UpdatePrometheusInstanceRequest, runtime *util.RuntimeOptions) (_result *UpdatePrometheusInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ArchiveDuration)) {
		query["ArchiveDuration"] = request.ArchiveDuration
	}

	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.StorageDuration)) {
		query["StorageDuration"] = request.StorageDuration
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdatePrometheusInstance"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdatePrometheusInstanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Update Prometheus instance config.
//
// @param request - UpdatePrometheusInstanceRequest
//
// @return UpdatePrometheusInstanceResponse
func (client *Client) UpdatePrometheusInstance(request *UpdatePrometheusInstanceRequest) (_result *UpdatePrometheusInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdatePrometheusInstanceResponse{}
	_body, _err := client.UpdatePrometheusInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies the configurations of an exporter that is integrated into a Prometheus instance for Container Service or a Prometheus instance for ECS.
//
// @param request - UpdatePrometheusIntegrationRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdatePrometheusIntegrationResponse
func (client *Client) UpdatePrometheusIntegrationWithOptions(request *UpdatePrometheusIntegrationRequest, runtime *util.RuntimeOptions) (_result *UpdatePrometheusIntegrationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.IntegrationType)) {
		query["IntegrationType"] = request.IntegrationType
	}

	if !tea.BoolValue(util.IsUnset(request.Param)) {
		query["Param"] = request.Param
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdatePrometheusIntegration"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdatePrometheusIntegrationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies the configurations of an exporter that is integrated into a Prometheus instance for Container Service or a Prometheus instance for ECS.
//
// @param request - UpdatePrometheusIntegrationRequest
//
// @return UpdatePrometheusIntegrationResponse
func (client *Client) UpdatePrometheusIntegration(request *UpdatePrometheusIntegrationRequest) (_result *UpdatePrometheusIntegrationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdatePrometheusIntegrationResponse{}
	_body, _err := client.UpdatePrometheusIntegrationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Updates the monitoring configuration of a Prometheus instance.
//
// @param request - UpdatePrometheusMonitoringRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdatePrometheusMonitoringResponse
func (client *Client) UpdatePrometheusMonitoringWithOptions(request *UpdatePrometheusMonitoringRequest, runtime *util.RuntimeOptions) (_result *UpdatePrometheusMonitoringResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.MonitoringName)) {
		query["MonitoringName"] = request.MonitoringName
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConfigYaml)) {
		body["ConfigYaml"] = request.ConfigYaml
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdatePrometheusMonitoring"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdatePrometheusMonitoringResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Updates the monitoring configuration of a Prometheus instance.
//
// @param request - UpdatePrometheusMonitoringRequest
//
// @return UpdatePrometheusMonitoringResponse
func (client *Client) UpdatePrometheusMonitoring(request *UpdatePrometheusMonitoringRequest) (_result *UpdatePrometheusMonitoringResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdatePrometheusMonitoringResponse{}
	_body, _err := client.UpdatePrometheusMonitoringWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Updates the status of the monitoring configuration of a Prometheus instance.
//
// @param request - UpdatePrometheusMonitoringStatusRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdatePrometheusMonitoringStatusResponse
func (client *Client) UpdatePrometheusMonitoringStatusWithOptions(request *UpdatePrometheusMonitoringStatusRequest, runtime *util.RuntimeOptions) (_result *UpdatePrometheusMonitoringStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.MonitoringName)) {
		query["MonitoringName"] = request.MonitoringName
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdatePrometheusMonitoringStatus"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdatePrometheusMonitoringStatusResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Updates the status of the monitoring configuration of a Prometheus instance.
//
// @param request - UpdatePrometheusMonitoringStatusRequest
//
// @return UpdatePrometheusMonitoringStatusResponse
func (client *Client) UpdatePrometheusMonitoringStatus(request *UpdatePrometheusMonitoringStatusRequest) (_result *UpdatePrometheusMonitoringStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdatePrometheusMonitoringStatusResponse{}
	_body, _err := client.UpdatePrometheusMonitoringStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies a remote write configuration item of a Prometheus instance for Container Service or a Prometheus instance for ECS.
//
// @param request - UpdatePrometheusRemoteWriteRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdatePrometheusRemoteWriteResponse
func (client *Client) UpdatePrometheusRemoteWriteWithOptions(request *UpdatePrometheusRemoteWriteRequest, runtime *util.RuntimeOptions) (_result *UpdatePrometheusRemoteWriteResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.RemoteWriteName)) {
		query["RemoteWriteName"] = request.RemoteWriteName
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.RemoteWriteYaml)) {
		body["RemoteWriteYaml"] = request.RemoteWriteYaml
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdatePrometheusRemoteWrite"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdatePrometheusRemoteWriteResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies a remote write configuration item of a Prometheus instance for Container Service or a Prometheus instance for ECS.
//
// @param request - UpdatePrometheusRemoteWriteRequest
//
// @return UpdatePrometheusRemoteWriteResponse
func (client *Client) UpdatePrometheusRemoteWrite(request *UpdatePrometheusRemoteWriteRequest) (_result *UpdatePrometheusRemoteWriteResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdatePrometheusRemoteWriteResponse{}
	_body, _err := client.UpdatePrometheusRemoteWriteWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 更新前端监控应用信息
//
// @param request - UpdateRumAppRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateRumAppResponse
func (client *Client) UpdateRumAppWithOptions(request *UpdateRumAppRequest, runtime *util.RuntimeOptions) (_result *UpdateRumAppResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AutoRestart)) {
		query["AutoRestart"] = request.AutoRestart
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.IsSubscribe)) {
		query["IsSubscribe"] = request.IsSubscribe
	}

	if !tea.BoolValue(util.IsUnset(request.Nickname)) {
		query["Nickname"] = request.Nickname
	}

	if !tea.BoolValue(util.IsUnset(request.Pid)) {
		query["Pid"] = request.Pid
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.Restart)) {
		query["Restart"] = request.Restart
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceDomainOperationJson)) {
		query["ServiceDomainOperationJson"] = request.ServiceDomainOperationJson
	}

	if !tea.BoolValue(util.IsUnset(request.Stop)) {
		query["Stop"] = request.Stop
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateRumApp"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateRumAppResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 更新前端监控应用信息
//
// @param request - UpdateRumAppRequest
//
// @return UpdateRumAppResponse
func (client *Client) UpdateRumApp(request *UpdateRumAppRequest) (_result *UpdateRumAppResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateRumAppResponse{}
	_body, _err := client.UpdateRumAppWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 更新Sourcemap文件状态
//
// @param request - UpdateRumFileStatusRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateRumFileStatusResponse
func (client *Client) UpdateRumFileStatusWithOptions(request *UpdateRumFileStatusRequest, runtime *util.RuntimeOptions) (_result *UpdateRumFileStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.FileName)) {
		query["FileName"] = request.FileName
	}

	if !tea.BoolValue(util.IsUnset(request.Pid)) {
		query["Pid"] = request.Pid
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.Size)) {
		query["Size"] = request.Size
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	if !tea.BoolValue(util.IsUnset(request.Uuid)) {
		query["Uuid"] = request.Uuid
	}

	if !tea.BoolValue(util.IsUnset(request.VersionId)) {
		query["VersionId"] = request.VersionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateRumFileStatus"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateRumFileStatusResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 更新Sourcemap文件状态
//
// @param request - UpdateRumFileStatusRequest
//
// @return UpdateRumFileStatusResponse
func (client *Client) UpdateRumFileStatus(request *UpdateRumFileStatusRequest) (_result *UpdateRumFileStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateRumFileStatusResponse{}
	_body, _err := client.UpdateRumFileStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 更新定时拨测任务
//
// @param tmpReq - UpdateTimingSyntheticTaskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateTimingSyntheticTaskResponse
func (client *Client) UpdateTimingSyntheticTaskWithOptions(tmpReq *UpdateTimingSyntheticTaskRequest, runtime *util.RuntimeOptions) (_result *UpdateTimingSyntheticTaskResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &UpdateTimingSyntheticTaskShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.AvailableAssertions)) {
		request.AvailableAssertionsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.AvailableAssertions, tea.String("AvailableAssertions"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.CommonSetting)) {
		request.CommonSettingShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.CommonSetting, tea.String("CommonSetting"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.CustomPeriod)) {
		request.CustomPeriodShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.CustomPeriod, tea.String("CustomPeriod"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.MonitorConf)) {
		request.MonitorConfShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.MonitorConf, tea.String("MonitorConf"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.Monitors)) {
		request.MonitorsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Monitors, tea.String("Monitors"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.Tags)) {
		request.TagsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Tags, tea.String("Tags"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AvailableAssertionsShrink)) {
		query["AvailableAssertions"] = request.AvailableAssertionsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.CommonSettingShrink)) {
		query["CommonSetting"] = request.CommonSettingShrink
	}

	if !tea.BoolValue(util.IsUnset(request.CustomPeriodShrink)) {
		query["CustomPeriod"] = request.CustomPeriodShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Frequency)) {
		query["Frequency"] = request.Frequency
	}

	if !tea.BoolValue(util.IsUnset(request.MonitorConfShrink)) {
		query["MonitorConf"] = request.MonitorConfShrink
	}

	if !tea.BoolValue(util.IsUnset(request.MonitorsShrink)) {
		query["Monitors"] = request.MonitorsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.TagsShrink)) {
		query["Tags"] = request.TagsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		query["TaskId"] = request.TaskId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateTimingSyntheticTask"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateTimingSyntheticTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 更新定时拨测任务
//
// @param request - UpdateTimingSyntheticTaskRequest
//
// @return UpdateTimingSyntheticTaskResponse
func (client *Client) UpdateTimingSyntheticTask(request *UpdateTimingSyntheticTaskRequest) (_result *UpdateTimingSyntheticTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateTimingSyntheticTaskResponse{}
	_body, _err := client.UpdateTimingSyntheticTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies the information about a webhook alert contact.
//
// Description:
//
// This operation is no longer maintained. Call the CreateOrUpdateWebhookContact operation in the new alter management module to create or modify a webhook alert contact.
//
// @param request - UpdateWebhookRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateWebhookResponse
func (client *Client) UpdateWebhookWithOptions(request *UpdateWebhookRequest, runtime *util.RuntimeOptions) (_result *UpdateWebhookResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Body)) {
		query["Body"] = request.Body
	}

	if !tea.BoolValue(util.IsUnset(request.ContactId)) {
		query["ContactId"] = request.ContactId
	}

	if !tea.BoolValue(util.IsUnset(request.ContactName)) {
		query["ContactName"] = request.ContactName
	}

	if !tea.BoolValue(util.IsUnset(request.HttpHeaders)) {
		query["HttpHeaders"] = request.HttpHeaders
	}

	if !tea.BoolValue(util.IsUnset(request.HttpParams)) {
		query["HttpParams"] = request.HttpParams
	}

	if !tea.BoolValue(util.IsUnset(request.Method)) {
		query["Method"] = request.Method
	}

	if !tea.BoolValue(util.IsUnset(request.RecoverBody)) {
		query["RecoverBody"] = request.RecoverBody
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.Url)) {
		query["Url"] = request.Url
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateWebhook"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateWebhookResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies the information about a webhook alert contact.
//
// Description:
//
// This operation is no longer maintained. Call the CreateOrUpdateWebhookContact operation in the new alter management module to create or modify a webhook alert contact.
//
// @param request - UpdateWebhookRequest
//
// @return UpdateWebhookResponse
func (client *Client) UpdateWebhook(request *UpdateWebhookRequest) (_result *UpdateWebhookResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateWebhookResponse{}
	_body, _err := client.UpdateWebhookWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Update the AddonRelease information.
//
// @param request - UpgradeAddonReleaseRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpgradeAddonReleaseResponse
func (client *Client) UpgradeAddonReleaseWithOptions(request *UpgradeAddonReleaseRequest, runtime *util.RuntimeOptions) (_result *UpgradeAddonReleaseResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AddonVersion)) {
		query["AddonVersion"] = request.AddonVersion
	}

	if !tea.BoolValue(util.IsUnset(request.DryRun)) {
		query["DryRun"] = request.DryRun
	}

	if !tea.BoolValue(util.IsUnset(request.EnvironmentId)) {
		query["EnvironmentId"] = request.EnvironmentId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ReleaseName)) {
		query["ReleaseName"] = request.ReleaseName
	}

	if !tea.BoolValue(util.IsUnset(request.Values)) {
		query["Values"] = request.Values
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpgradeAddonRelease"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpgradeAddonReleaseResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Update the AddonRelease information.
//
// @param request - UpgradeAddonReleaseRequest
//
// @return UpgradeAddonReleaseResponse
func (client *Client) UpgradeAddonRelease(request *UpgradeAddonReleaseRequest) (_result *UpgradeAddonReleaseResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpgradeAddonReleaseResponse{}
	_body, _err := client.UpgradeAddonReleaseWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 更新 feature信息
//
// @param request - UpgradeEnvironmentFeatureRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpgradeEnvironmentFeatureResponse
func (client *Client) UpgradeEnvironmentFeatureWithOptions(request *UpgradeEnvironmentFeatureRequest, runtime *util.RuntimeOptions) (_result *UpgradeEnvironmentFeatureResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AliyunLang)) {
		query["AliyunLang"] = request.AliyunLang
	}

	if !tea.BoolValue(util.IsUnset(request.EnvironmentId)) {
		query["EnvironmentId"] = request.EnvironmentId
	}

	if !tea.BoolValue(util.IsUnset(request.FeatureName)) {
		query["FeatureName"] = request.FeatureName
	}

	if !tea.BoolValue(util.IsUnset(request.FeatureVersion)) {
		query["FeatureVersion"] = request.FeatureVersion
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.Values)) {
		query["Values"] = request.Values
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpgradeEnvironmentFeature"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpgradeEnvironmentFeatureResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 更新 feature信息
//
// @param request - UpgradeEnvironmentFeatureRequest
//
// @return UpgradeEnvironmentFeatureResponse
func (client *Client) UpgradeEnvironmentFeature(request *UpgradeEnvironmentFeatureRequest) (_result *UpgradeEnvironmentFeatureResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpgradeEnvironmentFeatureResponse{}
	_body, _err := client.UpgradeEnvironmentFeatureWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Uploads a SourceMap file to ARMS Browser Monitoring.
//
// @param request - UploadRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UploadResponse
func (client *Client) UploadWithOptions(request *UploadRequest, runtime *util.RuntimeOptions) (_result *UploadResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Edition)) {
		query["Edition"] = request.Edition
	}

	if !tea.BoolValue(util.IsUnset(request.FileName)) {
		query["FileName"] = request.FileName
	}

	if !tea.BoolValue(util.IsUnset(request.Pid)) {
		query["Pid"] = request.Pid
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.Version)) {
		query["Version"] = request.Version
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.File)) {
		body["File"] = request.File
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("Upload"),
		Version:     tea.String("2019-08-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UploadResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Uploads a SourceMap file to ARMS Browser Monitoring.
//
// @param request - UploadRequest
//
// @return UploadResponse
func (client *Client) Upload(request *UploadRequest) (_result *UploadResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UploadResponse{}
	_body, _err := client.UploadWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}
